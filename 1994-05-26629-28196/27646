Newsgroups: sci.math,sci.crypt,alt.security,alt.security.pgp,alt.security.ripem,comp.security.misc,alt.privacy
Path: msuinfo!agate!howland.reston.ans.net!EU.net!sun4nl!cwi.nl!dik
From: dik@cwi.nl (Dik T. Winter)
Subject: Re: Sieve Blocking for MPQS to improve mem-hier locality & performance
Message-ID: <Cpz6Bt.DvH@cwi.nl>
Sender: news@cwi.nl (The Daily Dross)
Nntp-Posting-Host: boring.cwi.nl
Organization: CWI, Amsterdam
References: <2q5mfpINNbvp@life.ai.mit.edu> <1994May1618.43.30.14234@silverton.berkeley.edu> <2rakle$67e@hermes.unt.edu>
Date: Wed, 18 May 1994 01:47:52 GMT
Lines: 33
Xref: msuinfo sci.math:72301 sci.crypt:27646 alt.security:16709 alt.security.pgp:13714 alt.security.ripem:962 comp.security.misc:10005 alt.privacy:15577

D. J. Bernstein (djb@silverton.berkeley.edu) wrote:
 > QS and NFS can be run off disks or even tapes. For each p, as usual, you
 > generate a list of x with p hitting x. Then you sort the pairs (p,x) by
 > x. All you need to do this is fast sequential I/O.

Yes, it can.  But just like my original blanket statement that it should
be run in memory, this blanket statement is equally wrong.  In order to
be profitable to run off disks or tapes your memory should be large enough
to hold a sufficient number of (p,x) pairs.  I doubt whether you could be
very much larger than memory size while keeping up memory speed.

In article <2rakle$67e@hermes.unt.edu> fc14@sol.acs.unt.edu (Steve Tate) writes:
 > Actually, if the factor base is small enough to be kept in cache or RAM
 > (depending on which level of the memory hierarchy you want to look at),
 > you don't need to actually store the sieve at all!  Just keep track
 > of the "next time" you will hit a multiple of p (for all p) in a priority
 > queue and go to town...
 > 
 > Unfortunately, while I know the basic ideas and mathematics behind the
 > quadratic sieve algorithms, I don't know a lot of the details.  For instance,
 > how big is the factor base for reasonable-sized (say, 129 digits...) numbers?
 > 
The factor base for RSA-129 was about 570000.  Keeping a priority queue that
size would take a lot of time.  (Isn't re-insertion on the order of o(log n)?
Could special hardware do something with it?  I doubt that.)

As Paul Leyland already explained, part of the factor based was already
sieved using priority queues; or at least something extremely similar.
I do not think that using a priority queue for the whole factor base would
help very much.
-- 
dik t. winter, cwi, kruislaan 413, 1098 sj  amsterdam, nederland, +31205924098
home: bovenover 215, 1025 jn  amsterdam, nederland; e-mail: dik@cwi.nl
