Path: msuinfo!uwm.edu!cs.utexas.edu!howland.reston.ans.net!vixen.cso.uiuc.edu!ehsn4.cen.uiuc.edu!nd8067
From: nd8067@ehsn4.cen.uiuc.edu (Nicolas S Dade)
Newsgroups: sci.crypt
Subject: 2 practical cryptography questions about a secure-drive type system
Date: 8 May 1994 14:49:19 GMT
Organization: University of Illinois at Urbana
Lines: 63
Message-ID: <2qiu5f$9bj@vixen.cso.uiuc.edu>
NNTP-Posting-Host: ehsn4.cen.uiuc.edu
Summary: 2 questions about implelenting a secure diskdrive
Keywords: BLOWFISH, ECB, CFB, known plaintext


I am fooling around with encrypting a small partition on my harddrive. I
have written a device driver that decrypts and encrypts sectors as they are
read and written. It uses, at the moment, the BLOWFISH algorithm because
the author was so kind as to post it here. However any similar encryption
scheme could be plugged in in place of BLOWFISH. (FEAL or IDEA, for
example)

While writing this and watching it run, I have come up against two
questions on which I would like some advice.


Question 1:

In an effort to improve the security of my device driver, I would like to
salt the encryption of each sector with a sector dependant salt. This way
sectors that contain the same plaintext would have different ciphertext.
However I do not see how to go from the sector number, a small integer (as
small a range as 0 to 1759 on a DSDD floppy), and the large key (160 bits
in the case of BLOWFISH), to a block sized (?) salt (64 bits in the case of
BLOWFISH). Would encrypting the sector number (padded with plenty of zeros,
mind you) with the key be considered sufficient?


And question 2:

The sectors used by the filesystem for directories, file headers, links,
etc... aren't used to the utmost by the filesystem. The unused bytes are
set to zero by the filesystem, and constitute a great deal of known
plaintext (at least 300 out of 512 bytes in the case of hardlinks). In
addition, when a directory is not very full or file is not very long, its
header sector contains zeros in the empty hash slots or data block numbers.
This can give me a run of up to 288 zero bytes in a row.

I would like the ciphertext of these filesystem sectors to hide the long
sequences of zeros in the plaintext because I would like to hide the
approximate length of the file and the approximate number of objects in a
directory. Therefore using the cipher in ECB mode is undesirable because a
block of 0's in the plaintext (8 zero bytes in BLOWFISH) always enciphers
to the same ciphertext, allowing the attacker to pick out where most the
zeros were in the plaintext. However using a feedback mode gives the
attacker more information about the key. For example if I use CFB then
instead of knowing E(0), the attacker knows E(x),E(E(x)),E^3(x),...,E^n(x),
x = ciphertext in the position of the first zero block in the plaintext,
and n = length of run of zero blocks.

This known plaintext has bothered me enough that I now use 2 keys, one for
filesystem sectors, and the other for the file data sectors. This way the
known plaintext in the filesystem sectors doesn't affect the security of
the data in the files.** However I would still like a more elegant
solution.


**Filesystem sectors are identified by two tests: 1) they have the known
zeros in the correct places, and 2) they have a good checksum. Data sectors
contain only data (not even a checksum). This doesn't catch every
conceivable data block, but it is close enough for me. In a separate place
on the media I keep a bitmap in which I record whether sector N is
encrypted as file data or as a filesystem data. (And that bitmap will, in
the future, probably be encrypted too).


-Nicolas Dade / n9rzb / nicolas-dade@uiuc.edu
