Newsgroups: sci.crypt
Path: msuinfo!agate!library.ucla.edu!csulb.edu!csus.edu!netcom.com!jktaber
From: jktaber@netcom.com (John K. Taber)
Subject: Re: PRNG / synchronous stream ciphers--design principle
Message-ID: <jktaberCp38EF.7KJ@netcom.com>
Organization: None
X-Newsreader: TIN [version 1.2 PL1]
References: <16FA5111B6S86.C445585@mizzou1.missouri.edu>
Date: Sat, 30 Apr 1994 19:49:27 GMT
Lines: 31

C445585@mizzou1.missouri.edu wrote:
:    I think a good design principle for this kind of PRNG or LFSR is that,
: while changing keys can be quite slow, if necessary, re-synchronization
: should be something that can be accomplished fast.  This is because it's
: possible for both sides of a stream communication to become hopelessly out
: of synch, and to have to resynchronize.  Also, it might be useful to be
: able to use the same key all day, with many others.  A fast re-synch would
: help this....
:  
:    Any comment?
:  
:    --John Kelsey, c445585@mizzou1.missouri.edu

I had always thought so.  But the rng being developped doesn't lend itself
to easy synching, so I've been looking at a method that doesn't require
synching, or rather, is always synched.

Suppose we had a Boucher-type rng with a pretty long period.  Suppose
the rng vector is always initialized to the same random bytes (or longs).
Thus, it is always synched.

I've been using an "index".  Instead of synching, the index in this case
would guarantee different sequences of the key for each message.

Finally, how about feeding the message too into the rng state, so that
each message affects the key stream?
-- 
John K. Taber                                 jktaber@netcom.com
========================================================================
Avoid taking a definite stand on great public issues either in the Senate
or before the people.  Bend your energies towards making friends of key
men in all classes of voters.  -- advice to Cicero from his brother and
campaign manager, Quintus.

