Path: msuinfo!caen!zip.eecs.umich.edu!newsxfer.itd.umich.edu!gatech!swrinde!pipex!sunic!EU.net!uunet!mnemosyne.cs.du.edu!nyx10.cs.du.edu!not-for-mail
From: colin@nyx10.cs.du.edu (Colin Plumb)
Newsgroups: sci.crypt
Subject: Re: Question about Scarmbling?
Date: 29 May 1994 01:37:12 -0600
Organization: /usr/lib/news/organi[sz]ation
Lines: 66
Message-ID: <2s9gn8$qs5@nyx10.cs.du.edu>
References: <2s16qu$q81@worak.kaist.ac.kr>

In article <2s16qu$q81@worak.kaist.ac.kr>,
Hong Sung Min <smhong@kaist.ac.kr> wrote:
>Hi netters.
>
>I am a graduate student in KAIST, Korea.
>I am looking for some documents or informations about "scrambler"
>which is used in voice communications.
>I am a real novice and have little data about that now.
>Any information or pointer could be appreciated.

This is a reasonably common question, so I'll answer in public.
A scrambler polynomial is a common way in telecommunications to 
"whiten" a bit string, making it resemble random noise.  It's used
to avoid long runs of 0s and 1s, providing a supply of edges to
sync on.

It basically amounts to using an LFSR in CFB mode.  I'll call the input
and output plaintext and ciphertext, even though it's pretty piss-poor
as a cipher.  Ciphertext depends on all preceeding plaintext, but a
given bit of plaintext depends on only d bits of preceding ciphertext,
where d is the degree of the polynomial.  Thus, it's self-synchronizing
at the bit level.

If I recall correctly, if crctable[] is a 256-entry table of 32-bit words
initialized for CRC computation with a 32-bit polynomial, so that if

word32
crcupdate(word32 crc, unsigned char const *buf, unsigned len)
{
	do
		crc = crc<<8 ^ crctable[crc>>24 ^ *buf++];
	while (--len);
	return crc;
}

computes CRC updates, then you can scramble with:

word32
scramble(word32 crc, unsigned char *buf, unsigned len)
{
	do {
		crc = crc<<8 ^ crctable[*buf++ ^= crc>>24];
	} while (--len);
	return crc;
}

and unscramble with:

word32
unscramble(word32 crc, unsigned char *buf, unsigned len)
{
	unsigned char c;
	do {
		c = *buf;
		*buf++ = c ^ (crc>>24);
		crc = crc<<8 ^ crctable[c];
	} while (--len);
	return crc;
}

I think the bit-sync property only holds in this implementation if the
polynomial doesn't have coefficients in the range x^24..x^31, however.

This is all off the top of my head, so I hope Igot the code right.
-- 
	-Colin
