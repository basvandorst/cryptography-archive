Path: msuinfo!agate!howland.reston.ans.net!gatech!news-feed-1.peachnet.edu!news.duke.edu!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: A fast, simple resynch operation for stream ciphers
Date: Thu, 26 May 94 21:14:36 CDT
Organization: University of Missouri, Columbia
Lines: 55
Message-ID: <16FC212ABCS86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: mizzou1.missouri.edu

 
   I've been playing with generalized ways to "re-synch" a synchronous
stream cipher.  The general operation of this kind of cipher is for
the sender and receiver to generate pseudorandom bits though some
(hopefully) cryptographically secure method.  The sender XORs each
bit with one bit of the message, and sends it to the receiver, who
XORs the corresponding bit from his psuedorandom bit stream with the
ciphertext bit, which returns the original plaintext bit.  If the
sender and the receiver get out of synch, then the receiver's message
bits are garbled.  This can happen if bits are inserted or deleted from
the ciphertext stream.
 
   A general view of a SSC (synchronous stream cipher) is:
 
   ________         _____________
  |Internal|-----> (Next Internal)
  |  State |<------(   State     )
   ^^^^|^^^^        ^^^^^^^^^^^^^
    ___|__
   (Output)
    ^^^|^^
       v
     Keystream
 
   Any SSC can be viewed this way, though it's often not the best way to
look at a given SSC.  The keystream is what's XORed into the plaintext
to give the ciphertext.
 
   To resynch, I've got a simple technique which I think is pretty
universally applicable:
 
   1.  Each time you know you have synchronization, such as at the
       very beginning of the communication, when you've just initialized
       the internal state using the key, generate a block of keystream
       equal in size to the cipher's internal state.
 
   2.  Start using the keystream for encrypting plaintext *after*
       filling that block.  Thus, you don't reuse those keystream
       bits for encryption.
 
   3.  When it's time to resynch, copy that block into the internal
       state of the SSC.
 
   The only problems with this kind of approach come if the internal
state must always follow some specific pattern, in which case more
massaging of the block must be done before it can be copied into
the internal state of the cipher.  Otherwise, this is just relying on
the keystream to be well-distributed and resistant to attacks, and
on the next-state function to be resiliant enough that the rare, odd
"weak-state" fixes itself soon enough.  (This would need to be true
under any conditions.)
 
   Any comments?
 
   --John Kelsey, c445585@mizzou1.missouri.edu
