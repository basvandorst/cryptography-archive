Path: msuinfo!agate!library.ucla.edu!galaxy.ucr.edu!ucrengr!datadec
From: datadec@ucrengr.ucr.edu (Kevin Marcus)
Newsgroups: sci.crypt,comp.org.eff.talk,alt.security.pgp
Subject: Re: New Factoring Method via Chaos?
Date: 22 May 1994 07:52:09 GMT
Organization: University of California, Riverside   (College of Engineering/Computer Science)
Lines: 28
Distribution: inet
Message-ID: <2rn2v9$fr9@galaxy.ucr.edu>
References: <1994May2.033439.12326@black.ox.ac.uk> <nagleCpACIE.G4v@netcom.com> <RAP.94May22004339@aviator.cis.ufl.edu> <jamesdCq6wxJ.J8C@netcom.com>
NNTP-Posting-Host: ucrengr.ucr.edu
X-ORIGINAL-NEWSGROUPS: sci.crypt,comp.org.eff.talk,alt.security.pgp
Xref: msuinfo sci.crypt:27843 comp.org.eff.talk:34207 alt.security.pgp:14218

In article <jamesdCq6wxJ.J8C@netcom.com>,
James A. Donald <jamesd@netcom.com> wrote:
>Ryan Porter (rap@aviator.cis.ufl.edu) wrote:
>
>>   I seem to be getting the impression that a quantum computer, 
>>   if such a device can be built, is something which can solve 
>>   NP problems in polynomial time.
>
>It is most unlikely that it can solve NP *Complete* problems
>in polynomial time.
>
>It may well be that it can solve some NP problems in polynomial
>time.  First construct your algorithm for each particular 
>problem set.

Well, it is well known that there are a variety of "NP Complete" problems
which can be solved in polynomial time if a dymanic programming paradigm
is used.  Example: n!.  By saving results, rather than using recursion,
it is possible to make this go in roughly O(n) time!  The idea behind
NP Complete is that dynamic programming isn't allowed.
 


-- 
  --=> Kevin Marcus:   datadec@ucrengr.ucr.edu,  tck@bend.ucsd.edu
  "ciafn  syoo,u  yroeua da rteh icso?o l ." <- Email for solution. 
  Computer  Science  Dept.,  University of California,  Riverside.
  .oOo.oOo.           T H I E V E S     S U C K          .oOo.oOo.
