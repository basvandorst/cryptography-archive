Path: msuinfo!uwm.edu!spool.mu.edu!howland.reston.ans.net!cs.utexas.edu!chpc.utexas.edu!news.utdallas.edu!corpgate!crchh327.bnr.ca!pcopus
From: pcopus@bnr.ca (Perry Copus)
Newsgroups: sci.crypt
Subject: Question: Solving the Discrete Log Problem
Date: 25 May 1994 10:59:43 -0500
Organization: Bell Northern Research, Richardson, TX
Lines: 34
Distribution: world
Message-ID: <2rvslf$c8r@crchh547.bnr.ca>
NNTP-Posting-Host: crchh547.bnr.ca


I am examining the risks involved in selecting a particular
key size for a public-key encryption system.  Each endpoint
creates a large 'random' quantity (x and y respectively).
One side selects large quantities a and p where p is prime
and larger than a.  The two sides then exchange information:

        Side 1                         Side 2
           a          -------------->
           p          -------------->
         (a^x)mod p   -------------->
                      <--------------  (a^y)mod p

Both sides then compute shared secret quantity (a^(xy))mod p.
Assuming that an outside entity has access to all of the
transmitted values, what is the current state of the art in
solving the discrete log problem, e.g. given a, p, and (a^x)mod p,
what is the state of the art (in terms of algorithms) in finding x?
This will of course affect the selected key size.

I read an article in which the author indicated that the problem
could be solved using a number of operations on the order of
e^(sqrt(ln p ln ln p)), but no references were given.  I need a
more formal assessment for my analysis.

If you can help me find proper references or can give me even
a synopsis of the relevant algorithms, I would greatly appreciate
it.

Thank you,

Perry Copus
pcopus@bnr.ca
BNR
