Path: msuinfo!agate!howland.reston.ans.net!wupost!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: Stream cipher/block cipher scheme
Date: Fri, 06 May 94 21:15:49 CDT
Organization: University of Missouri, Columbia
Lines: 52
Message-ID: <16FAE12B05S86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: mizzou1.missouri.edu

 
   I wanted to try to add some further thoughts on the stream cipher with
32-bit "granularity" I posted about yesterday....
 
   First, Don Davis pointed out in mail that the block cipher's key
scheduling would slow things down considerably.  I had intended for the
PRNG output to go directly into the subkeys, rather than using a preset
key scheduling algorithm.  Generally, using a block cipher, you'd want
each key bit to have a large effect on the plaintext->ciphertext mapping,
but in this case, we're using the block cipher as a sort of combination
encoder and nonlinear combiner.  We're quite willing to allow some PRNG
bits to have their effects altered or cancelled out by other PRNG bits,
so long as this doesn't follow a pattern that allows an attacker to
systematically ignore some PRNG bits in his analysis.
 
   Second, I was thinking about the advantages of using this kind of
scheme on large-block ciphers, as well.  The major advantage of a smaller
blocksize is convenience of implementation and testing.  However, we might
get throughput up by running a wide-block version of LUCIFER or BLOWFISH
with PRNG-generated subkeys.  And, we'd get some of the major advantages
of larger blocksize.  It's not clear to me how this tradeoff would come
out.
 
   A third idea is simply to use the block cipher, of whatever size, as
a nonlinear combiner for a conventional crypto-strength PRNG, or for a
self-synchronizing stream cipher (CFB-mode, basically).  For the crypto
strength PRNG, its inputs might come from a cheap PRNG, a counter, or
it might be run in output-feedback mode.
 
   If the block cipher is used directly, it should probably be used in
CBC-mode, to make chosen-plaintext attacks more challenging, and to
give some continuity of state.  It could alternatively be used in CFB-
mode, which makes sense for some of the larger-block variants.  Also,
keyed one-way hashes (or standard one-way hashes that use tables of
constants or expansion of values to be hashed into a big, empty buffer)
could be used with a PRNG to make a CFB-mode cipher.
 
   I like the idea of using two separate operations, one for re-keying,
and another for re-synching.  The re-keying can be somewhat time-
consuming, and should determine quite a bit of internal state--something
on the order of Khufu's or BLOWFISH's key-derived s-boxes.  A part of
the purpose for this is that it will make attempts to guess parts of the
internal PRNG state harder, even with many, many re-synchings are forced.
The re-synch needs to be as fast as possible, and could use the key-
derived values to expand an initialization vector into an internal PRNG
state.
 
   Any comments?
 
   --John Kelsey, c445585@mizzou1.missouri.edu
 
 
