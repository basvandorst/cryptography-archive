Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!swrinde!pipex!uknet!EU.net!uunet!nwnexus!chinook!ken
From: ken@chinook.halcyon.com (Ken Pizzini)
Newsgroups: sci.crypt
Subject: Re: Help novice, please
Date: 29 May 1994 08:50:27 GMT
Organization: A World of Information at Your Fingertips
Lines: 50
Message-ID: <2s9l0j$4ra@nwfocus.wa.com>
References: <2s522n$o7p@hobbes.cc.uga.edu>
NNTP-Posting-Host: chinook.halcyon.com

In article <2s522n$o7p@hobbes.cc.uga.edu>,
Chuck Horne <horne@genaro.lislab.uga.edu> wrote:
>Short version:
>I want FORTRAN source to which I can add a little dressing so that
>data managers at a couple of mainframe sites will be willing to
>send me their data, confident that I won't be able to identify the
>individuals described by each record. At the same time, I will need to
>be able to match records from the distinct sites. 

I don't specifically know of the existance of any FORTRAN code
for any of this; mostly C or algorithmic descritpions; with
a little pain (or a C to FORTRAN translator) you should be able to
make do.


>Furthermore, the program should have as an argument a `key' which can
>be discussed and decided upon by the various data-suppliers (out of my hearing
[...]
>-no decryption is ever desired: ie, any data we distribute back to the
>suppliers will/could be simply mapped via the original encryption
>
>Questions I could stand feedback on:
>
>1. Which of the big-name categories sounds most appropriate (DES, public-key,
>RIPEM,RSA, etc)? [yes I am relatively clueless about what those beasts
>do but I am learning by R'ing TFM (or RFC or whatever)]

I'd go with:
  a one-way hash function as MD5 or SHA as my first choice
  a conventional cipher such as IDEA or DES as my second choice

In the former cases, the data suppliers would agree on some random
string, R, and compute
	hash(concat(SSN, R))
In the latter cases, they would agreee on some random key K and compute
	encrypt(SSN, K)

I prefer the one-way hash functions because they are more likely
to give the data providers a warm fuzzy feeling due to their
one-way nature.  Of course with only 10**9 possible SSNs a brute
force search of the plaintext space is feasible if one knows R,
but this is much more work than direct decryption knowing K.

What might concern me more, were I a data provider trying to
protect my clients' confidentiality, would be the possibility
that you might give some of the data to another data provider
who knows the key (R or K above).  I presume from your problem
statment that this isn't an issue?

		--Ken Pizzini
