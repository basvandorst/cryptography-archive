Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!spool.mu.edu!howland.reston.ans.net!pipex!sunic!EU.net!uunet!allegra!ulysses!smb
From: smb@research.att.com (Steven Bellovin)
Subject: Re: RSA weakness--chosen ciphertext attack
Message-ID: <Cpr81D.7uB@ulysses.homer.att.com>
Sender: netnews@ulysses.homer.att.com (Shankar Ishwar)
Organization: AT&T Bell Laboratories
References: <44050@mindlink.bc.ca> <2qdr5m$6ft@acoma.math.arizona.edu> <2qv70k$i0l@hemuli.tik.vtt.fi>
Date: Fri, 13 May 1994 18:44:01 GMT
Lines: 33

In article <2qv70k$i0l@hemuli.tik.vtt.fi>, Jan.Lucenius@tel.vtt.fi (Jan Lucenius) writes:
> One other question - maybe silly:
> If RSA (or actually any algorithm) is used for authentication in
> a simple challenge - response configuration, ie. one partner (A) sends
> a challenge that the other (B) encrypts using his private key; how can
> B know that the challenge really is a random number and not for example
> the hash of some document that A wants B to sign without B knowing it?
> 
> Of course this can be resolved with proper agreement and/or precisely
> defined algorithms. Any knowledge about how this is done in existing
> systems?

There are lots of ways of handling that sort of thing, ranging from
tag fields -- always prepend a 0 to document hashes, 1 to challenges,
etc.

There are more subtle issues with RSA, though, and they revolve around
the fact that RSA encryption is a comparatively simple arithmetic operation.
For example, suppose the message M being encrypted is actually the square
of some value X.  The encryption is

	  M^e mod (pq)
	= (x^2)^e mod (pq)
	= (x^e)^2 mod (pq)

In other words, if the input is a perfect square modulo pq, so is the
output.  That's a trivial example, but it illustrates the way input
properties can show through.

Schneier describes more serious chosen-ciphertext attacks (p. 286).
Basically, if I can trick you into signing messages that I choose, I can
do all sorts of nasties, ranging from reading your mail to getting you
to sign things you don't think you're signing.
