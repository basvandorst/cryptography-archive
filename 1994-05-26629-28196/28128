Path: msuinfo!agate!dog.ee.lbl.gov!ihnp4.ucsd.edu!swrinde!cs.utexas.edu!not-for-mail
From: R._Braithwaite-Lee@magic-bbs.corp.apple.com
Newsgroups: sci.crypt
Subject: Re: MDC
Date: 27 May 1994 18:21:14 -0500
Organization: M A G I C
Lines: 72
Sender: nobody@cs.utexas.edu
Message-ID: <1994May27.160649.1074967@magic-bbs.corp.apple.com>
NNTP-Posting-Host: news.cs.utexas.edu

Hello. Several people noted that my claim, which read:

>Thanks for the pointer. Yes, I've examined MDC and discarded it. I'm
uneasy
>about the vulnerability to chosen-plaintext attacks. I'm currently looking
>at variant approaches which conceal the input to the hash functions from
an
>attacker.

Isn't completely sound. (Thanks for nudging me, folks!) Reflecting over
things, here's what I should have said.

Based on the description of MDC in Schneier's "Applied Cryptography" I've
discarded MDC because a cryptanalyst with either chosen or known plaintext
can easily recover both the inputs and outputs to the hash function. There
is a *big* gap between 'knowing the inputs and outputs' and 'breaking MDC'.
I just feel uneasy because I'd prefer a cipher which hides even more of its
workings from a cryptanalyst.

Unless I've completely misunderstood MDC, it works as follows:

A varient of MD5 is constructed which uses a user-supplied key to change
MD5's constants to values which are unknown to a cryptanalyst. Different
keys thus produce different hash functions. The function takes as its input
a 'register' and produces as its output a 'mask'. The mask is xored with a
block of plaintext and the resulting ciphertext is mixed into the register.
The mixing function is to 'push' the ciphertext onto one end of the
register while 'popping' the other end of the register off and discarding
it. Thus the register at any one time contains a series of prior
ciphertexts concatenated together.

My contention is that a cryptanalyst who knows a long continuous string of
plaintext can recover the inputs and outputs. Obviously, if she knows the
plaintext, she recovers the masks for each block from the ciphertext. And
knwoing the ciphertext, she can recover the register if she has a known
plaintext the length of the register or longer.

This will always be true for a block cipher running in OFB or CFB mode. The
security of OFB and CFB mode ciphers rests on the conjecture that known
inputs and outputs of the hash function does not enable a cryptanalyst to
predict future outputs for known inputs.

I'm tinkering with a scheme based on the 'Alternating Stop and Go
Generator' Bruce describes in Applied Cryptography. I use three hash
functions as 160 bits-per-clock stream generators in OFB mode. Two are
xored with each other and the plaintext, while the third controls which of
the two is clocked every 'round'. The bottom line is that an attacker never
'sees' the output of the third generator and cannot construct the state of
either generator.

I conjecture that the security of this system is at least the strength of
the hash functions. The security should be a function of the number of
possible states of the generators, which is a straightforward
performance-security tradeoff.

The advanatge of this scheme over MDC is the hiding of the inputs to the
'generators'. The advantage of this scheme over Luby-Rackoff and some of
the other schemes is that you have nearly one 'round' per block, so it
should be almost as fast as MDC. Another avenue I'm pursuing is the
possibility that the scheme is secure even if the hash functions are
known--namely that security can rest entirely on the initial states of the
generators, and not on their transformations.

Regards,
Reginald !:-)

Public Key Fingerprint: D8 B8 C1 D0 DD 56 20 B4  06 A2 81 83 87 E8 8B 64
(Send message with subject "HELP" to pgp-public-keys@pgp.ox.ac.uk)

please cc: all replies and follow-ups to 73114.2055@compuserve.com. Thanks!


