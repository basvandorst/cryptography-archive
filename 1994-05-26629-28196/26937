Path: msuinfo!agate!overload.lbl.gov!dog.ee.lbl.gov!ihnp4.ucsd.edu!news.cerf.net!mvb.saic.com!MathWorks.Com!europa.eng.gtefsd.com!howland.reston.ans.net!cs.utexas.edu!news.unt.edu!sol!fc14
From: fc14@sol.acs.unt.edu (Steve Tate)
Newsgroups: sci.crypt
Subject: Re: modular arithmetic
Date: 4 May 1994 18:29:28 GMT
Organization: University of North Texas
Lines: 39
Message-ID: <2q8pi8$dc@hermes.unt.edu>
References: <2q8mvj$5tv@salmon.maths.tcd.ie>
NNTP-Posting-Host: sol.acs.unt.edu
X-Newsreader: TIN [version 1.2 PL2]

Peter McEvoy (gandalf@maths.tcd.ie) wrote:
> I'm trying to do the following problem, it's actually
> for coding theory, but it envolves modular division
> and most public key codes use the mod function:

> s(x) = v(x) mod g(x) 

I can give you a few pointers, but there's an unknown in my answer.
You can use a Newton iteration like scheme to do polynomial division
with remainder efficiently --- it turns out then to have the same
complexity as polynomial multiplication (factor of two off, actually).  
See the algorithms book of Aho, Hopcroft, and Ullman for more details.
The algorithm they give works for polynomials with coefficients from
any field (or even any ring, as long as the coefficient of the highest
degree term has an inverse).

Now, I don't know how to do polynomial multiplication fast over GF(2).
GF(2) certainly doesn't have the roots of unity needed for an FFT to
work, but I feel certain there's some "fast" method.  I suppose you
can view it as a polynomial over the integers (or over Z/mZ, where m
should be at least as large as n, the degree of the polynomials), 
do an FFT-based "fast multiply", and only keep the least significant
bit.  I believe that should be ok, and is O(n log n) time.  

On the other hand, this is not worth the trouble for low degree polynomials,
which it sounds like is what you are dealing with.  And it certainly
isn't worth it if your coefficients are packed as bits in a word.  I'm
not sure about that problem (after all, I'm a theoretician --- I can
make whatever assumptions I like, including huge degree polynomials
represented in a nice way... :-) ), but I recall seeing some very nice
and fast code for doing modular polynomial arithmetic for CRC computations --- 
I believe it was with the "zip" compression/archiver source.  You might
want to check that out for ideas.

--
Steve Tate  ---  srt@cs.unt.edu   |  "Nationalism is an infantile sickness.
Dept. of Computer Sciences        |   It is the measles of the human race."
University of North Texas         |                     -- A. Einstein
Denton, TX  76201                 |
