Path: msuinfo!news.mtu.edu!sol.ctr.columbia.edu!howland.reston.ans.net!gatech!bloom-beacon.mit.edu!ai-lab!kiwi!lethin
From: lethin@kiwi.ai.mit.edu (Rich Lethin)
Newsgroups: sci.math,sci.crypt,alt.security,alt.security.pgp,alt.security.ripem,comp.security.misc,alt.privacy
Subject: Sieve Blocking for MPQS to improve mem-hier locality & performance
Date: 2 May 1994 23:02:12 GMT
Organization: MIT Artificial Intelligence Lab
Lines: 21
Message-ID: <2q40pkINN6vr@life.ai.mit.edu>
References: <WARLORD.94Apr27000625@incommunicado.mit.edu> <strnlghtCoxF2o.DLA@netcom.com> <2pova8$mf3@fido.asd.sgi.com> <2pp12d$he6@hermes.unt.edu> <2prdckINNbge@early-bird.think.com> <1994Apr23.210009.5796@muvms6> <2pp0f0$mf3@fido.asd.sgi.com> <2pu8bn$dpe@linus.mitre.org> <strnlghtCp3zu5.5C7@netcom.com> <strnlghtCp40CK.684@netcom.com> <Cp598L.Fy9@cwi.nl> <2q3hjp$pqc@linus.mitre.org> <2q40b1INN6q2@life.ai.mit.edu>
NNTP-Posting-Host: kiwi.ai.mit.edu
Xref: msuinfo sci.math:71084 sci.crypt:26804 alt.security:16297 alt.security.pgp:12360 alt.security.ripem:813 comp.security.misc:9662 alt.privacy:14889

For MPQS (the RSA129 sieve) it seems like one could write the inner loop to
walk different factor-base strides through the sieve concurrently,
"blocking" the accesses with more steps for the smaller strides and fewer
steps for the larger strides to keep them "in-sync" and spatially local in
the cache.  The algorithm would be cache-bandwidth-limited rather than
main-memory-limited.

This would be analogous to the cache-blocking techniques that people use to
get better LINPACK performance on machines with caches.

One potential problem that I can might be that the differences between the
factors in the base (and the different strides) are too big, rendering it
difficult to keep the concurrent strides "in-sync".

Could this technique be used to try to compensate for the big disparity for
disk bandwidth for random seeks and sequential accesses?  If memory speed
is ~500Mbits/sec (RAMBUS) and disk IO ~10MBytes/sec (SCSI) the ratio of
bandwidths is only 6.25, but the cost of memory is about 10x that of disk.
So it might be more effective to do the sieving via the disk.

-- Rich
