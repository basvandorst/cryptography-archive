Path: msuinfo!agate!howland.reston.ans.net!gatech!news-feed-1.peachnet.edu!hobbes.cc.uga.edu!genaro!horne
From: horne@genaro.lislab.uga.edu (Chuck Horne)
Newsgroups: sci.crypt
Subject: Help novice, please
Date: 27 May 1994 15:02:47 GMT
Organization: GIS Division, Institute of Gov't, U of GA, Athens
Lines: 85
Distribution: world
Message-ID: <2s522n$o7p@hobbes.cc.uga.edu>
NNTP-Posting-Host: genaro.lislab.uga.edu

Hello!

I have a small problem which has nudged me into reading sci.crypt,
grabbing docs & source from ftp sites, and reading FAQ's on the
subject of cryptology and I am hoping that this message will get me
some useful shortcuts, some really amusing flames, or both.

Short version:
I want FORTRAN source to which I can add a little dressing so that
data managers at a couple of mainframe sites will be willing to
send me their data, confident that I won't be able to identify the
individuals described by each record. At the same time, I will need to
be able to match records from the distinct sites. 

Longer version: [ie, more stuff for the people who are still reading]
FORTRAN: yeah, I worked with that once; I think we got to keep our
Hollerith cards at the end, so maybe I can find those and remind myself
how to code FORTRAN..... anyway, the data contributors are working in the
IBM mainframe and Cyber worlds and I think that FORTRAN may be the
most useful common denominator. The scenario I envisage is that I will
provide them with source code which they will compile and run on their
various platforms. The resultant program should filter their existing
records, encrypting the identifying field (SS#), putting out the data
such that I can manipulate it in my UNIX-based database environment
blissfully unaware of what the real SS# is. Of course, each data contributor
has their own record format (hence the different front-ends for each)
and platform, but will need to generate the same unique encrypted output
for a given SS#. I am competent as a `C' programmer, and I am kind of expecting
to have to translate `C' to FORTRAN. Actually, more like assuming.
Furthermore, the program should have as an argument a `key' which can
be discussed and decided upon by the various data-suppliers (out of my hearing
range, obviously) that will be sufficient to let them feel comfortable
in the knowledge that I won't be able to decipher the SS#-substitute. Of
course, I realize that there can be no such assurance and that basically
they have to trust me not to try, but it would be best if they felt like
I wouldn't have much chance.

Several things about this little project are dissimiliar from the
usual encryption circumstances: 

-I want to hide the data from myself, or rather teach them to hide it from me.
-the plaintext involved is from a known or easily guessed population and
is all the same type and length
-we will have the entire body of plaintext available for a long time, but
the encryption cannot change, since we also want to join records from
successive years
-no decryption is ever desired: ie, any data we distribute back to the
suppliers will/could be simply mapped via the original encryption

Questions I could stand feedback on:

1. Which of the big-name categories sounds most appropriate (DES, public-key,
RIPEM,RSA, etc)? [yes I am relatively clueless about what those beasts
do but I am learning by R'ing TFM (or RFC or whatever)]

2. Do you know of some FORTRAN source that might apply?

3. A learned person recommended that we choose encoding rather than encryption:
I understood this to mean "let the contributors agree upon a random mapping
of SS#'s to substitutes which they just keep among themselves." [There are a
couple of problems here: new records appear each year, so they would have to
reconvene to map the new ones; they would have to go to greater effort while we
twiddled; the whole reason we are doing this is they can't get together on
anything anyway.]  If this strategy makes sense to you, where would I look
for implementation aid? Hash-functions? Random-number generators?

4. Are any of you out their members of the commercial world? Doesn't this
problem come up and is there an alternative effective strategy? 


For those of you who patiently read this far: Thank You!
For anyone who responds: TIA- I will be appreciative
For those of you who gave up and never read this: may your mouse
carry fleas, your bus turn over, and your RAM butt you in the pants.


-chuck

PS I will be keeping up with the newsgroup as much as I can, but email
replies are more than welcome...
-- 
***************************************************************************
***		Chuck Horne horne@gis.lislab.uga.edu	Ph 706-542-6198 ***
***		Inst. of Govt., GIS Division, University of Georgia	***
***************************************************************************
