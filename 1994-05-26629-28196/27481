Newsgroups: sci.crypt
Path: msuinfo!agate!library.ucla.edu!psgrain!charnel.ecst.csuchico.edu!olivea!news.bu.edu!att-in!att-out!cbnewsh!cbnewsh.cb.att.com!wcs
From: wcs@anchor.ho.att.com (Bill Stewart +1-510-484-6204)
Subject: Re: Generating Primes from Passphrases...
Organization: AT&T Global Information Solutions, NCR's new name
Date: Fri, 13 May 1994 07:49:00 GMT
Message-ID: <WCS.94May13024900@anchor.ATT.COM>
In-Reply-To: set@ucsee.EECS.Berkeley.EDU's message of 10 May 1994 13:23:34 GMT
References: <2qm1hf$90m@agate.berkeley.edu> <tcmayCpKr3o.F50@netcom.com>
	<tcmayCpKuq7.Jqr@netcom.com> <2qo1sm$qlh@agate.berkeley.edu>
Sender: news@cbnewsh.cb.att.com (NetNews Administrator)
Nntp-Posting-Host: anchor.ho.att.com
Lines: 41

In article <2qo1sm$qlh@agate.berkeley.edu> set@ucsee.EECS.Berkeley.EDU (Sam E. Trenholme) writes:
Tim May writes, after describing an approach:
   >In thinking about this some more, it may be easy for someone to deduce
   >the passphrase from the prime number.

   Convert the passphrase into a hash, using the hash algorithm of your choice.
   Then use the hash as a seed for a prime number generator.

The point of Tim's second post was that it *can't* just be the hash
algorithm of your post; it has to be something cryptographically
strong so that if the Bad Guy discovers the prime, he can't work
backwards over the last few composite numbers finding passphrases
that hash into that composite.  If you use a weak hash, he probably
doesn't even need to find the *right* passphrase - just one that
gets the same hash.

After choosing a strong hash function (and using a long enough passphrase),
there is also the problem of generating a long enough hash to use to
start looking for primes from (since typical hashes produce short
strings, like MD5's 128 bits, while RSA primes need to be at least 512
bits long these days, and preferably 1024 or more.)

How much randomness does the prime-generator seed really need to have?
Log p bits would be nice, but I would guess that even 128 bits of
randomness ought to do as long as it doesn't overly simplify the
search space, since 2**128 is unsearchably big - Sam's suggestions of
rehashing the hash to generate more "random" bits, which is
approximately what RSAREF's random number generator does, or perhaps
something cheaper like using the MD5 as the high-order 128 bits and
then generating the rest by using the MD5 as a key for IDEA-CBC
encryption of the passphrase or whatever, would generate a reasonably
intractable space to search through.  Any theories?


--
# Bill Stewart       AT&T Global Information Solutions (new name for NCR!)
# 6870 Koll Center Pkwy, Pleasanton CA 94566  1-510-484-6204 fax-6399
# Email: bill.stewart@pleasantonca.ncr.com billstewart@attmail.com
# ViaCrypt PGP Key IDs 384/C2AFCD 1024/9D6465

Disclaimer: My cats are walking on my keyboard again.
