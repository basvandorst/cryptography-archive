Path: msuinfo!agate!dog.ee.lbl.gov!ihnp4.ucsd.edu!swrinde!gatech!news-feed-1.peachnet.edu!news.duke.edu!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: OFB-mode encryption and cycle length
Date: Mon, 16 May 94 20:57:02 CDT
Organization: University of Missouri, Columbia
Lines: 25
Message-ID: <16FB81269ES86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: mizzou1.missouri.edu

 
   Hmmm.  Bryan Olsen says that a 64-bit block cipher will have a
2**63 cycle length on average.  I don't think that's right, but I may
be missing something.  Here's my basic logic:
 
1.  Our encryption is a random mapping from input to output.
2.  We're running in 64-bit output-feedback mode.  That means that
 
    X(i+1) = Encrypt(X(i))
 
Now, suppose we used this as a pseudorandom generator of 64-bit blocks.
About how many such blocks should we need to generate before we have
two equal blocks?  (x(i) = x(j), i <> j)  The standard birthday paradox
answer is 2**32, the square root of the total number of possible values.
 
Now, whenever you hit a value in x(i) that you've generated before, you
are going to have a cycle, because each output value is determined by
the previous output value.
 
Am I missing something?  I remember reading the 2**32 cycle length value
somewhere, too, but it made sense to me from this.
 
Comments?
 
   --John Kelsey, c445585@mizzou1.missouri.edu
