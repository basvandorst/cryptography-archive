Path: msuinfo!agate!overload.lbl.gov!dog.ee.lbl.gov!ihnp4.ucsd.edu!swrinde!cs.utexas.edu!not-for-mail
From: ritter@indial1.io.com (Terry Ritter)
Newsgroups: sci.crypt
Subject: Certifying keys, web-of-trust, etc
Date: 23 May 1994 11:52:53 -0500
Organization: UTexas Mail-to-News Gateway
Lines: 85
Sender: nobody@cs.utexas.edu
Message-ID: <199405231650.LAA03462@indial1.io.com>
NNTP-Posting-Host: news.cs.utexas.edu

 In <16FBDF908S86.C445585@mizzou1.missouri.edu>
 C445585@mizzou1.missouri.edu (John Kelsey) writes:

 
>   Maybe one solution would be a feature in PGP to allow two mutually-
>trustful users to run a comparison of the hash of all the keys they
>had in common, and to flag any public keys for which they didn't have
>the same value.  This wouldn't eliminate the problem entirely, but it
>*would* make it easy to ensure that a small number of peoples' keys
>weren't being compromised, so long as they ran this kind of check.

 But keys tend to be accumulated by some central repository--a
 server, or a well-known user--and distributed from there.  That is,
 keys tend to have a common source other than the original owner.
 And if the common source has been subverted, it does not matter
 how many users compare keys.


>   Of course, making sure these weren't being altered on the fly might
>be difficult.  Maybe the people would need to take some extra pre-
>cautions, such as reading the hash of their respective keys over the
>phone.

 People should be doing this now!  Anyone using PGP other than as
 a novel toy should get each key directly from the owner *by second
 channel* (not email), or "certify" each key with the owner *through
 a second channel*.  This is the certification on which PGP relies.
 It is why the human-readable key-hash exists.

 As soon as we open up the possibility of using a key from someone
 else (who, presumably, we "trust"), we open up the possibility of
 subversion.  In particular, if someone offered your trustee $10,000
 to provide an invalid key, what do you think the chances are that
 this might happen?  Zero?  But the rest of the system (RSA, IDEA)
 currently seems secure against billion dollar attack projects which
 would take years to complete.  Does it make sense to use human
 "trust" to validate cryptographic keys?

 Obviously we have to "trust" the person on the far end or we could
 not have secrets.  The issue is whether we can trust *the
 cryptosystem*.  If so, then we *only* have to trust the far end
 and not *also* simply *hope* that nobody else has had a real
 interest in monitoring the conversation.  If we are willing to
 trust to hope, we do not need cryptography.


>   Are there any ways of automating this kind of checking?

 No.  To the extent that it is automatic, it can be simulated by
 The Opponent.

 The solution is to have a real honest-to-goodness cryptographic
 protocol certify all keys.


>This should
>be done for *any* PK-based system, to ensure meet-in-the-middle attacks
>are extremely likely to be caught.

 Sure, the problem applies to *any* public-key system.  But most
 PK designs have already solved the problem by employing a true
 cryptographic protocol for delivering keys.  The problem is that--
 as far as is known--this implies a central Certification Authority
 or some sort of tree-shaped key-certification path.

 Many people object to the centralized nature of current key-
 certification schemes.  I suggest that we invite those people to
 propose their own formal cryptographic protocol which actually
 *will* certify keys in a way they can accept.  Just tossing out a
 trust protocol and shouting "it is secure, it really is" hardly
 seems to be the way to get real security.  Where are the formal
 papers promoting the key-distribution protocol proposed in PGP?

 If some sort of probabilistic scheme exists to validate keys, I
 have yet to see it.  The fact that everyone we know agrees on a
 particular key is no proof that that key has not been subverted.
 And I claim that the probability of key subversion is far, far
 greater than the probability that someone has invested enough
 treasure and time to break a serious key.  (Unless you are in
 some very special business, of course.)

 ---
 Terry Ritter   ritter@io.com


