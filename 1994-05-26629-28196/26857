Path: msuinfo!agate!howland.reston.ans.net!usc!nic-nac.CSU.net!charnel.ecst.csuchico.edu!rat!decwrl!waikato!auckland.ac.nz!news
From: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Newsgroups: sci.crypt
Subject: Re: strong passphrases
Date: 3 May 1994 15:49:05 GMT
Organization: University of Auckland
Lines: 58
Sender: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Message-ID: <2q5rph$bao@ccu2.auckland.ac.nz>
References: <5AyPk+W.spallen@delphi.com>
NNTP-Posting-Host: cs13.cs.aukuni.ac.nz
X-Newsreader: NN version 6.5.0 #7 (NOV)

Steve Allen <spallen@delphi.com> writes:

>craiga@kcbbs.gen.nz (Craig Anderson) writes:
 
>>The basic argument goes like this, let's assume people are lazy and
>>will likely only type a max of about ~35 characters, the average
>>password will thus contain only about 4 words.  Only grammatically
>>correct English sentences will be evaluated so lets assume that there
>>are only about 100 common sentence forms (Noun-Verb-Noun,
>>Noun-Verb-Adj-Noun, etc.) of say 2-7 words and that all words have only
>>one possible categorization in the 5 member set (Noun, Verb, Adj, Adv,
>>Prep/Conjunctive).  This leads to a total possible number of sentences
>>on the order of:
>>100 * (N/5)^4
>   100 sentence forms * (dictsize/5wordtypes)^4words
>>where N is the number of words in the dictionary.  For a 1000 word
>>dictionary this is on the order of 10^11 sentences.
 
>   Problem: you're computing only 4 words/passphrase. If your
>attacker knows you're using 4-word sentences, then you deserve to
>be cracked. Your computation, according to your own criteria,
>should include 2, 3, 4, 5, 6, and 7 word sentences. Add em all up.
>Then you get 1.29E18, which is eight million times bigger and
>gives 60 bits of security-- not totally transparent, unless NSA has
>built a special SFS cracking machine that's stronger than their DES
>crackers....

This figure is actually remarkably close to one I came up with during a
discussion on a local message area, this one based on the theoretical
entropy of the English language:

}Let's use a real estimate: Shannon's studies on the entropy of the English 
}language.  This isn't just guessing, this was a long, detailed study.  He 
}estimated it at between 1 and 2 bits per character (the exact figure 
}depends on exactly how the estimate is done).  Let's take the most 
}pessimistic, since we're using nonstandard words and word patterns.  That 
}means the 31-char phrase you've used has 62 bits of entropy, the 36-char 
}one has 72 bits of entropy.

The figures from the two methods of estimation are in the same ballpark,
which is encouraging.  There's more entropy in there than DES can provide, 
and the protection built into the SFS key setup to make brute-force cracking 
difficult will make this form of attack ever slower.
 
In any case, the problem will be (at least partially) solved by the use of 
external keying for SFS using devices like smart cards and datakeys.  
Version 1.2 of SFS should have smart card support in it, along with a few 
other interesting things... this means you can use it with basic memory 
cards (in which the security of the key is based on the physical security of 
the card), or genuine smart cards which are designed to be tamperproof and 
PIN-protected, and which erase themselves after a certain number of 
unsuccessful access attempts.  This makes keying much easier, because you 
don't need to remember a long, possibly complex passphrase, all you need is 
a card and a PIN.
 
Peter.


