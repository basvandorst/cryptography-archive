Path: msuinfo!agate!library.ucla.edu!psgrain!reuter.cse.ogi.edu!flop.ENGR.ORST.EDU!holmes.ece.orst.edu!johnsos
From: johnsos@holmes.ece.orst.edu (scott johnson)
Newsgroups: sci.crypt
Subject: Re: RSA weakness
Date: 10 May 1994 04:39:07 GMT
Organization: Electrical and Computer Engineering Department, Oregon State University
Lines: 65
Message-ID: <2qn35bINN4og@flop.ENGR.ORST.EDU>
References: <44050@mindlink.bc.ca> <2qdr5m$6ft@acoma.math.arizona.edu> <CpHyIy.HpC.3@cs.cmu.edu> <768512951Stu.stu@nemesis.wimsey.com>
NNTP-Posting-Host: holmes.ece.orst.edu

In article <768512951Stu.stu@nemesis.wimsey.com>,
Stuart Smith <Stu@nemesis.wimsey.com> wrote:
>In article <CpHyIy.HpC.3@cs.cmu.edu> rudis+@cs.cmu.edu (Rujith S DeSilva) writes:
>>As for the remainder of your concerns, the general consensus is that IDEA
>>is stronger than RSA, inasmuch as it's possible to compare public-key and
>>symmetric-key encryption schemes at all.  I believe (correct me if I'm
>>wrong) that RSA is weak against known-plaintext attacks, and hence is
>>better utilized to encrypt random data (such as a randomly chosen IDEA key
>>that has been used to encrypt the message), rather than the plaintext
>>message itself.
>
>I have held similar views, but have yet to see them espoused anywhere
>else.  It seems intuitive to me that RSA, or any of the public-key
>algorithms I've seen proposed, are weak ciphers.  i.e.  DES & IDEA
>were designed to hide information - they both incorporate "confusion"
>and "diffusion" - the design goal was to make the ciphertext a random
>function of the plaintext and they key.  RSA has no such objective, it
>merely displays a useful mathematical function.  I can't see any way
>of proving that it does any decent job of hiding the plaintext
>like a good secret-key cipher would.  But I can't prove it either.
>
>Comments?

Quite a few, actually.

First, if RSA were used to encrypt an entire message, instead of just a key
for a private-key cryptosystem, the message would be broken down into 512-
or 1024-bit blocks (whatever the key length is) before encrypting.  The 
modular exponentiation operation would then hash these huge blocks to 
something else.  If you intend to mount an analysis based on stastical 
information, you had better have statistical tables giving the relative 
frequency of 64- or 128- character blocks of text.  (In other words, no pickin
out the most common three-letter pattern, and assuming it is "the").

Second, the modular exponentiation does a pretty good job of hashing the 
data.  I don't have any references, but I believe its been shown that the
output of RSA has nice statistical properties.  (Unless of course you are
dumb enough to choose a public key of 1, that is....)

Third, since the public key is often known, you can generate all the known-
plaintext or chosen-plaintext attacks that you want.  Simply encrypt your
favorite test case with the public key, and there you go.  So saying RSA is
weak against a known plaintext attack is doubtful at best.

I will conclude that it seems that everyone who tries to attack RSA does so
by trying to factor the modulus.  Another attack some people might use is
to attempt to duplicate a user's key-generator, and learn the secret primes
(and thus the secret key) this way (as most software RSA implementations 
either use pseudorandom sequences, or "random" system events like drive seek
latency or the CPU clock, which give very poor statistical qualities.)  I have
yet to hear of anyone attacking RSA using cyphertext/plaintext analysis, IF
THE KEYS USED ARE REASONABLE.  (Obviously, a key of 1 is not reasonable :) ).


/sj/


>
>--
> Baba baby mama shaggy papa baba bro baba rock a shaggy baba sister
>shag saggy hey doc baba baby shaggy hey baba can you dig it baba baba
>E7 E3 90 7E 16 2E F3 45 * Email for PGP key * 28 24 2E C6 03 02 37 5C 
>   Stuart Smith                           <stu@nemesis.wimsey.com>


