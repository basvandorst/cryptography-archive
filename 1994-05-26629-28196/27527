Newsgroups: sci.crypt,alt.security.pgp
Path: msuinfo!agate!ihnp4.ucsd.edu!usc!elroy.jpl.nasa.gov!decwrl!netcomsv!netcom.com!strnlght
From: strnlght@netcom.com (David Sternlight)
Subject: Re: Checking pgp-signed messages; certificates
Message-ID: <strnlghtCpuyxH.KCE@netcom.com>
Reply-To: david@sternlight.com (David Sternlight)
Organization: DSI/USCRPAC
References: <940514132439_75126.1722_FHD22-1@compuserve.com> <strnlghtCpszHK.4sz@netcom.com> <769010410Stu.stu@nemesis.wimsey.com>
Date: Sun, 15 May 1994 19:17:40 GMT
Lines: 153
Xref: msuinfo sci.crypt:27527 alt.security.pgp:13440

In article <769010410Stu.stu@nemesis.wimsey.com>,
Stuart Smith <Stu@nemesis.wimsey.com> wrote:
>In article <strnlghtCpszHK.4sz@netcom.com> david@sternlight.com (David Sternlight) writes:
>>Can I check the validity of this message without having Murray's public key?
>
>No.  Having a widely help public key is what makes digital signatures
>work.  If you don't have the public key, how can you decrypt the
>signature (made with the private key) to see if its valid?  Read the
>docs - its in there.

RIPEM and other applications conforming to the PEM heirarchy of certificates
can routinely incorporate a user's certificate chain with his encrypted or
his signed message. In that way the recipient can check the authenticity
without having to have the sender's public key in advance. This is a major
advantage, especially for signed newsgroup posts, where a user doesn't know
in advance which public keys he needs in his file, and it's a PITA to have
to go and fetch each one matching each post.

For example, when I sign a post with RIPEM Mac, it gives me the option of
signature only, signature plus my certificate (which takes it up the the
known RSADSI heirarchy and RSA's public key--the only one other users need
to have in their file), or even signature plus all relevant certificates
(which takes it all the way to the top of the heirarchy--to IPRA when that's
in place, but right now to incude RSA's own certificates).

PGP, and web-of-trust generally has no such capability. What's more it
cannot have, unless there's some standard certifier who signs everyone's
keys, and which everyone can have the key for in his file. If that ever
happens, it will be a crude and less secure version of the present PEM
heirarchy, which has strict standards for giving and receiving certificates
and even protecting the certifier mechanism in hardware boxes, trust or no.
Those boxes, sold by RSADSI, are made by BBN, who also does much high
security crypto work for others.

Even "persona" certificates given by RSADSI free and without matching the
requestor's name to his identity, are more useful than web-of-trust in one
sense. RSADSI does this through a protected mechanism, such certificates
have expiration dates, and they will not give a certificate out in a name
already issued. All one needs to validate a post signed with such a
certificate is the RSA Persona Heirarchy public key in one's file. 

It's true there's no trust, and you know only a particular "identity"
matches that key, but as long as the real person associated with that
"identity" sees even one message signed with the key and doesn't repudiate
it, one then knows it is o.k. 

Even cypherpunks should like this--it permits the BlackSteelPirate to get a
certificate from RSADSI in his name, start posting with it, and ever after
know nobody can spoof his posts. As for someone else getting a Persona
Certificate under your name if you don't get there first, such special cases
have a variety of ways of special handling, ranging from proving your
identity by phone or in person with a trusted someone else, or getting an
Unaffiliated User Certificate (true, it costs $25 if you're not an AOCE
user), which requires proof of identity, and then denouncing the bogus
Persona certificate. Why use a weak and inconvenient system (web of trust)
just to handle the occasional special case?

Note that these aren't reasons not to use PGP, but suggestions for
improvement.


>>As I understand it, with PEM certificates, a signed message carrying
>>certificates is self-checking, so to speak, without the need to have the
>>public key of the writer. Is this a flaw in web-of-trust?
>
>No, its a feature - you need the public key because a signature is a hash
>of the message encrypted with the corresponding secret key, and the
>public key is what decrypts to verify the hash.  Again, read the docs,
>its in there.

The certificate includes the public key, as I understand it, hashed with a
standard secret key, such as that of RSA. Thus all you need is RSA's public
key in your file--the rest works automatically. You even end up with a copy
of your correspondent's pubic key in your file if you want, so in future he
doesn't have to include the certificates. 

For posting one would include one's certificates up to a well-known public
key level--such as the RSA Commercial Certification Heirarchy, the RSA
Persona Heirarchy, the MIT Residential Heirarchy, or the TISPEM Heirarchy.
In fact, RIPEM Mac (for example) has a feature that installs those standard
keys automatically in your public key file if you wish it.

After that it's all gravy--you get a signed or encrypted message with a
certificate from one of the standard certifiers. You decrypt the certificate
with the certifier's public key. You then have the public key of the sender,
know it's valid, know its validity period, and can check the signature to
authenticate both the message and sender. None of this requires accessing
any other computer system or key file to get keys.

PGP does not do this. You need bunches of public keys in your file. The
signatures are also not "standards" which anyone may be expected to trust,
but people many users have never heard of, with names like Branko,
Jean-Loup, Derek, Phil, etc., about whom only the "inside" folks know enough
to trust, and who cannot be expected to sign lots of keys anyway.

This is a fine system for a few like-minded people to communicate with, or
who are willing to trust each other on the say-so of friends of friends, but
it badly needs improvement if it is to become a "standard" to be used by the
average arms-length joe on the net, much less the average arms-length
company on the net. Would you take a purchase order or credit card number
vouched for by Branko? (Nothing personal, Branko--you're just a handy name
in an .asc file.)

I repeat--this is not a reason not to use PGP, but it is a reason PGP needs
improvement if it is to achieve its full potential.

>>In my experience with RIPEM, the software will automatically go the the key
>>server to check his public key so I can validate the signature even without
>>having the public key OR his having certificates. Is there anything
>>comparably automatic in PGP?
>
>But as soon as the software goes to the keyserver then you *do* have the
>public key.  That's what keyservers do - they distribute public keys.

This is a point completely separate from the certificate discussion above.
It is mainly useful for uncertified messages or for sending encrypted
messages to someone whose public key you don't have.

>
>What you seem to be describing is a (useful-sounding) feature of RIPEM
>to automagically fetch public keys that you need.  PGP does not do
>any such fetching, you have to get them yourself, but its not that
>difficult with key servers and all.

For authenticating posts, as distinct from getting a key for a new
correspondent you expect to be doing a lot of traffic with, this is a major
PITA. What's more, you have to go through a lot of gyrations--it is
impossible to authenticate posts on the fly. With certificates OR a key
server and the right software, such authentication is instant and
transparent.  Again, this is an area of PGP that badly needs improvement.

At this point PGP is a very good Captain Midnight Decoder Ring, but it isn't
a very good professional system. Its authentication is weak, insecure, and
inconvenient, its key management very amateurish (in terms of what's
available now, both certificate-wise, and net communications-wise). It has a
number of attractive features, not the least of which is a very convenient
and intuitive use interface, and its popularity in some circles (though I
don't see many signatures on posts outside of the special-interest crypto
groups, and now, perhaps we'll see some on EFF) makes it handy to use when
communications with those in such circles.

I like it, and will use it when the patent issues get clarified, but it has
lots of room for improvement, and dedicated programmers could probably
make a career of it for the next few years. And I haven't even begun to make
suggestions about the need for a mailer surrounding it, and a newsreader
surrounding it.

In other words, let's not get carried away or create a "cause" here. PGP is
NOT some paragon, the patent issues are still unclear, and a lot of work
needs to be done. Phil Zimmermann had it exactly right when he named it. It
is "pretty good"--nothing more. For many, though, that's plenty.

David
