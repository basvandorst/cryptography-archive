Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!news.byu.edu!news.kei.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: Some weird block cipher modes, and how to keysearch them
Date: Wed, 18 May 94 18:06:38 CDT
Organization: University of Missouri, Columbia
Lines: 59
Message-ID: <16FBAFEAES86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: mizzou1.missouri.edu

 
   I posted earlier about some ideas for making a strong stream cipher
out of DES that could withstand keysearch attacks.  I wanted to post
some ways I'd come up with to attack certain "weird" modes of DES-
generated streams, using a keysearch machine.  I'll comment here that,
for most of these attacks, the speedups used by Weiner probably won't
carry over, and so a search of the whole 56-bit keyspace will be
needed.
 
1.  DES in counter mode:  The user chooses a secret parameter S, and
    forms a keystream (64 bits each) out of:
      x(i) = Enc(S+i,K0)
 
    To keysearch this, you try each possible key against 2
    ciphertext values.  Suppose we use x(5) and x(6).  Decrypt
    these back to candidate y(5) and y(6) values.
    If y(6) -y(5) = 1, you've probably got the right key.  Try this
    possible key against a couple other consecutive pairs, to be sure.
    Along with the right key, naturally, you've got the S value.
 
2.  DES in a slightly different counter mode:  S is a secret starting
    value, T is a secret increment.  To form your keystream, you use:
 
    x(i) = Enc(S + i*T)
 
    To keysearch this, choose three keystream pairs, say x(4),x(5),x(6).
    Search all possible keys until you find one that decrypts these to
    y() values that satisfy y(6)-y(5) = y(5)-y(4).
 
3.  More generally, it looks like any way of forming the input to Enc()
    such that, if I were to think I knew N 64-bit blocks of state, I could
    quickly determine whether I was right or not, will be defeated by a
    keysearch attack.
 
    For example, a simple PRNG fed into the input of DES can be broken,
    assuming that knowing some reasonable number of N 64-bit outputs
    from the PRNG will give me a reasonably-fast way of predicting the
    next M bits or so.  Similarly, using polynomial "counters" like
    E(i**3+17*i**2 -4*i+11) seems to yield little advantage.
 
   This seems to leave four ways to design a keysearch-resistant stream
cipher from DES:
 
1.  Use multiple encryption directly, like running 3DES in OFB-mode.
 
2.  Combine 2 or more DES-generated keystreams together, in some way
    that makes it hard for an attacker to separate them.
 
3.  Use one copy of DES in a stream-cipher mode, and encrypt the result
    with a second copy of DES.
 
4.  Use a better "cheap" PRNG, or more PRNGs, to confound the keysearch
    attacks described above, with only one copy of DES.
 
   Any block cipher could be used, instead of DES.
 
   Comments?
 
   --John Kelsey, c445585@mizzou1.missouri.edu
