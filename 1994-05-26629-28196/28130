Newsgroups: sci.crypt
Path: msuinfo!agate!dog.ee.lbl.gov!ihnp4.ucsd.edu!swrinde!gatech!news-feed-1.peachnet.edu!news.duke.edu!eff!news.kei.com!travelers.mail.cornell.edu!cornell!rochester!rit!sunsrvr6!ddg
From: ddg@cci.com (D. Dale Gulledge)
Subject: Re: flaws, please...
In-Reply-To: frisk@complex.is's message of 26 May 94 16:07:15 GMT
Message-ID: <DDG.94May27170938@sun86.cci.com>
Sender: root@sunsrvr6.cci.com (Operator)
Organization: /usr/lib/news/organization
References: <2041@complex.complex.is> <1994May26.150445.17509@datcon.co.uk>
	<2045@complex.complex.is>
Date: Fri, 27 May 1994 21:09:38 GMT
Lines: 71

In article <2045@complex.complex.is> frisk@complex.is (Fridrik Skulason) writes:

   ee@datcon.co.uk (Eddie Edwards) writes:


   >Well, this cipher is completely open to attack if the plaintext is known ...
   >if he's just XORing the first 4 plaintext bytes with the first word of the
   >random number stream, then just XORing the first 4 plaintext bytes again 
   >gives the random number starting value. From this, you can generate the entire
   >message.

   huh ?  That's not at all what I wrote...according to the author the bit
   stream is guaranteed not to repeat for a much longer period than the
   maximum size of the document...whatever that is...I haven't asked.  

   anyhow, the approach is flawed, but this is not the flaw...

There seems to be a miscommunication here.  He is addressing what you said.
He just didn't elaborate enough to make that clear.  Let me rephrase it as an
attack on the system.

If the first n plaintext bytes are XORed with the first n bytes of the random
stream, then you can work backward to obtain the key.  The value of n,
however, depends on the pseudo-random number generator.  If the generator used
simply uses the previously generated number as its state information, then n
is precisely the length of the key, because once the first n bits of random
stream are retreived, it is unnecessary to retrieve the key, because you can
work *forward* from there.

The real weakness of this can be seen when we consider a known plaintext
attack.  Correspondence in particular tends to start with a limited number of
predictable formats.  Thus, if the first 8 bytes are the ASCII values of "Dear
Joe", where Joe is th recipient, we can recover the entire message when a weak
pseudo-random number generator is used.

You also asked:

   However, the major problem that I see is that he doen't agree with me that it
   would be necessary to use each key only once.   Now, assuming one got two
   messages, which had been XORed with the same key, knowing something like that
   both contained ASCII text, it seems to me (if the messages are long enough)
   that it should be possible to break this...xoring the two messages together
   would eliminate the key, and frequency analysis of the result might go a long
   way towards retrieving the original messages.....or am I missing something ?

Even a one time pad becomes trivial with reuse.  Let's explore why, shall we?
For each byte of the message we have:

p1  The plaintext byte from the first message.
p2  The plaintext byte from the second message.
k   The key byte.

c1 = p1 XOR k
c2 = p2 XOR k

Now we have both c1 and c2, but not p1, p2 or k.  We perform the following
operation:

x = c1 XOR c2 = p1 XOR k XOR p2 XOR k = p1 XOR p2

It is significantly less difficult to disentangle two plaintext messages XORed
together than it is to determine a more random key.  There are other attacks.

- Dale
--
Well in excess of 99% of the world's population, including my employer,
remains blissfully unaware of my opinions.  The remainder are still trying to
ignore them.  Please refer to the above message to see why.
--
ddg@cci.com, D. Dale Gulledge, Software Engineer, Northern Telecom,
Network Applications Systems, 97 Humboldt St., Rochester, NY 14609
