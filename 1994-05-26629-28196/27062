Path: msuinfo!agate!library.ucla.edu!csulb.edu!nic-nac.CSU.net!charnel.ecst.csuchico.edu!yeshua.marcam.com!MathWorks.Com!news.duke.edu!convex!cnn.exu.ericsson.se!ericom!eua.ericsson.se!sunic!EU.net!uunet!news1.digex.net!digex.net!not-for-mail
From: steve-b@access1.digex.net (Steve Brinich)
Newsgroups: sci.crypt
Subject: "Applied Cryptography" on Factoring Time
Date: 5 May 1994 22:50:33 -0400
Organization: Express Access Online Communications, Greenbelt, MD USA
Lines: 23
Message-ID: <2qcb9p$5c4@access1.digex.net>
NNTP-Posting-Host: access1.digex.net

  Page 212 of Bruce Schneier's _Applied Cryptography_ gives the formula

          exp( (ln N)^1/3 * (ln(ln N))^2/3 )

as the time estimate for factoring a large number N according to the best
known algorithm.

  However, near the bottom of the page, he states "Since every tenfold
increase in computing power allows one to factor numbers slightly over
10 decimal digits longer...."  This does not seem consistent with the
above formula, which increases considerably more slowly than that (in the
range of N commonly used in RSA keys -- 2^512 to 2^1024 -- this function
increases by about a factor of two as N increases by a factor 2^100).

  Is there some real-world computing constraint on using the algorithm that
causes its difficulty to increase at the rate of about x10 per +30 bits
(as suggested by the bottom-of-the-page text) rather than the theoretical
maximum rate of x2 per +100 bits, or is the bottom-of-the-page text in error?

-- 
 Steve Brinich              | If the government wants us to respect the law, |
 <steve-b@access.digex.net> |         it should set a better example.        |
 PGPrint (finger for key)    BB 5E 1E 3D D4 72 52 3A  F8 9C 00 00 41 0D 65 65
