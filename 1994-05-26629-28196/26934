Path: msuinfo!agate!overload.lbl.gov!dog.ee.lbl.gov!ihnp4.ucsd.edu!news.cerf.net!mvb.saic.com!MathWorks.Com!europa.eng.gtefsd.com!howland.reston.ans.net!EU.net!ieunet!maths.tcd.ie!not-for-mail
From: gandalf@maths.tcd.ie (Peter McEvoy)
Newsgroups: sci.crypt
Subject: modular arithmetic
Date: 4 May 1994 18:45:23 +0100
Organization: Dept. of Maths, Trinity College, Dublin, Ireland.
Lines: 26
Message-ID: <2q8mvj$5tv@salmon.maths.tcd.ie>
NNTP-Posting-Host: salmon.maths.tcd.ie

Arrghh!!
I'm trying to do the following problem, it's actually
for coding theory, but it envolves modular division
and most public key codes use the mod function:

s(x) = v(x) mod g(x) 

now, since this is over GF(2^n), the polynomials
can be represented as binary numbers EG:

v(x) = 1001101110110111 = x^16 + x^13 + x^12 + ... + x^2 + x +1
g(x) = 111010011

where v(x) is a received vector, g(x) is the generating
polynomial for a cyclic code, and s(x) is the associated 
syndrome (for error detection). I think there may be
a quick and painless binary trick of calculating s(x), but
I'm at a loss...

any help would be appreciated... (e-mail prefered)

oh yeah.. the reason I'm doing this is for the Kasami
error detection algorithm

C ya,
Pete.
