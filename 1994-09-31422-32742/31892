Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!bt!uknet!festival!dcs.ed.ac.uk!pdc
From: pdc@dcs.ed.ac.uk (Paul Crowley)
Subject: X-shaped addition-based block operations
Message-ID: <Cw2LEM.CEp@dcs.ed.ac.uk>
Sender: cnews@dcs.ed.ac.uk (UseNet News Admin)
Organization: Edinburgh University
Date: Tue, 13 Sep 1994 13:27:57 GMT
Lines: 43

IDEA uses a cunning X-shaped operation to allow the combination of two
blocks to act on both blocks at once, without destroying the information
used to make the transformation so that it can be inverted.  It works by
XORing the left and right halves together, transforming with the key,
and XORing *both* halves with the result.  When decrypting, this
operation is self-inverse, since the XOR of the two halves is unchanged
by XORing them both with the output of the transformation.

Does anyone pull the same trick with addition?  You could build a
transformation like this:


a         b
|         |
|\       /|
| \     / |
|  \   /  |
|   b-a   |
|    |    |
|   [f]   |
|    |    |
|x=f(b-a) |
|   / \   |
|  /   \  |
| /     \ |
a+x     b+x
|         |
|         |

Then, given (a+x, b+x), we can find b, because

f((b+x) - (a+x)) = f(b-a) = x

and this could be mixed with IDEA's XOR-style operation to ensure that
the rounds don't interfere.

Thoughts?  Is this old hat?  I've been trying to design a block cypher,
just for fun, and it's worth doing to learn how very difficult it really
is.  My admiration for the people who design *real* block cyphers grows
the more I think about it...
  __                        _____
\/ o\ Paul.Crowley@ed.ac.uk \\ // 3D8298B6 C0721685 53AF021D 4D2917FA
/\__/     DATA IS SACRED     \X/  WWW: http://www.tardis.ed.ac.uk/%7Epdc/
