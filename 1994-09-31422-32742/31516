Path: msuinfo!harbinger.cc.monash.edu.au!newshost.anu.edu.au!dubhe.anu.edu.au!nunki.anu.edu.au!not-for-mail
From: jmr@cs.anu.edu.au (Mike Robson)
Newsgroups: sci.crypt,sci.math
Subject: Re: P = NP? (was : How safe is RSA?)
Date: 2 Sep 1994 09:56:57 +1000
Organization: Australian National University
Lines: 69
Message-ID: <345po9INN63o@nunki.anu.edu.au>
References: <EACHUS.94Aug24191851@spectre.mitre.org> <33r2b4$qe7@news.umbc.edu> <EACHUS.94Aug31195757@spectre.mitre.org>
NNTP-Posting-Host: nunki.anu.edu.au
Xref: msuinfo sci.crypt:31516 sci.math:79410

eachus@spectre.mitre.org (Robert I. Eachus) writes:

>In article <33r2b4$qe7@news.umbc.edu> olson@umbc.edu (Bryan G. Olson; CMSC (G)) writes:

>  > He attempts a constructive argument, showing that if such an algorithm
>  > exists, then it can be used to prove it is poly-time.  I am both
>  > unconvinced of this, and poly-time alone is not sufficient.

>   The important point, as you note below, is that if P=NP, then CoNP=NP.
>I think most people responding missed this...

I think you have missed the point that even if we knew that NP=CoNP, we would need
a proven correct transformation to use it in the way you want to.

>   Second, I thought I had posted a demonstration that correctness is
>not at issue.  (Combining the poly-time algorithm with a known correct
>non-P-time algorithm in such a way as to render the p-time part the
>only open question.)

I wasn't convinced by your attempted demonstration. If we had the proven correct
transformation of C0NP to SAT, I would agree.

[....]

>  Hmmmm, this is a very interesting question!  I had just assumed that
>the dual of a 3SAT problem was in NP, and that both the problem and
>its dual could not be unsatisfiable.  (Sounds like I should scurry off
>and try to verify that. Integer programming seems to give a warm
>feeling on this, but I'll have to think about it.) But if your A
>rejects L, and provides a solution to dual(L), can I use that to
>verify that no solution to L exists?  That one sounds like a three
>pipe problem.

>  Ah!  Seems to me I looked at this years ago.  If you take a 3SAT
>problem it can be mapped into a zero-one integer programming problem
>with an objective function whose maximum is one iff you can satisfy
>the 3SAT problem.  The minimum of the dual objective function is zero
>iff there is no solution to the 3SAT problem.  (Also as I remember it,
>there is a usually a trivial solution to the corresponding linear
>programming problem, but it has fractional values for most variables.)
>Since the dual can be restated as a primal problem which only has a
>solution if the original primal does not, we have a clear case of
>NPC=coNPC.  I'll have to verify that, but at least I remember where to
>look.

Are you saying you have an unpublished proof that NP=CoNP? 

>  > If we have proven polynomial reductions from both L and not(L) to
>  > 3SAT and candidate machines for recognizing both, we can construct
>  > a recognizer which will be correct whenever it terminates.  Then
>  > we just have to prove the time.

>   I do see the (potential) hole above, but I don't see one with the
>time.  If I go through all the hoops, then there is a problem in NP
>which corrresponds to finding a problem which takes longer than (some
>arbitrary--I don't need to show how to get it) polynomial measure of
>running time for A.  Since NP=coNP if P=NP (and maybe even if not, see
>above), I can then solve the co-problem to prove that no
>counterexample exists.

Only if you have proved that your solution to the co-problem implies that
there is no solution to the original problem, i.e. that your transformation
is correct.
>--

>					Robert I. Eachus

Mike Robson

