Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!news.kei.com!ddsw1!not-for-mail
From: supercat@MCS.COM (John Payson)
Newsgroups: sci.crypt
Subject: Re: Checksum in phonecards - hard nut
Date: 13 Sep 1994 21:07:59 -0500
Organization: /usr/lib/news/organi[sz]ation
Lines: 51
Message-ID: <355ltv$q02@Mercury.mcs.com>
References: <352agv$43l@ra.ibr.cs.tu-bs.de> <strnlghtCw1tHJ.533@netcom.com> <EACHUS.94Sep13104317@spectre.mitre.org> <phrCw3C68.GH5@netcom.com>
NNTP-Posting-Host: mercury.mcs.com

In article <phrCw3C68.GH5@netcom.com>, Paul Rubin <phr@netcom.com> wrote:
>Peeling the UV goop might be easier than peeling a Clipper chip, but
>hardly worthwhile.  It might make more sense to build a romulator of
>some kind (hmmm, you'd attach your phone card to an Atari Portfolio
>with a ribbon cable, like in Terminator 2).  But then you'd just have
>it send the data you read from an existing card, you wouldn't have to
>create your own data.

These chips sound a lot like some of the security chips released by Dallas.
Many of them come in a five-pin user-insertible package and Dallas even
makes a gizmo for plugging them into printer ports; their documentation
makes it sound like they're intended for copy-protection dongles.

From what I've read in the documentation, though, they sounds pretty feeble.
Some of them are technologically interesting, but there is no protection
from replay attacks.

To be precise, a typical chip works as follows:
  To activate the chip one sends it a specific bunch of randomish gobbledygook
    (chips can be ordered with custom gobbledygook commands--otherwise off-the-
     shelf chips will use the standard gobbledygooks)
  Then one has read/write access to rest of the chip (read-only after a certain
     "fuse" has been blown.
  If the gobbledy-gook fed to the chip does not match a valid command, the
     chip will return "random" data.
  Some versions of a chip have a timer which, once activated cannot be stopped
     and once expired, renders the chip useless (no commands will work).

It seems that while it may be just about impossible to read the data off a
chip without the key to unlock it, this key must be given in full every time
the chip is accessed; monitoring the chip's communications when software
accessed it would instantly reveal the key and the chip's contents--one might
try a little "security by obscurity" by having software make many accesses to
the chip, only one of which actually "worked", but that would really not do
much to improve security.

Also--why should the timer's expiration void the rest of the chip given that
the timer is already readible in software?  It seems one might want the key
to work--though with different effect--even after the time ran out.  Further,
why not just have a clock/calendar that runs continuously and just let the
software store the expiration time in the chip.  Simpler hardware *AND* more
versatile.

This seems even more hokey than the "Encryption" array put into every 8751
clone in existence (if they'd applied the "encryption" *AFTER* the data was
jammed by the security fuse than the encryption array could be used as a
32-byte "signature", but NOOOOOOooo...)
-- 
-------------------------------------------------------------------------------
 supercat@mcs.com    |  "Je crois que je ne vais jamais voir...  |   J\_/L
 John Payson         |   Un animal si beau qu'un chat."          |  ( o o )
