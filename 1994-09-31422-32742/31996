Path: msuinfo!uchinews!vixen.cso.uiuc.edu!howland.reston.ans.net!cs.utexas.edu!convex!news.duke.edu!MathWorks.Com!news2.near.net!news.delphi.com!news.delphi.com!not-for-mail
From: jmkelsey@news.delphi.com (JMKELSEY@DELPHI.COM)
Newsgroups: sci.crypt
Subject: Re: RC4 code seems to be real
Date: 16 Sep 1994 01:11:16 -0000
Organization: Delphi Internet Services Corporation
Lines: 37
Message-ID: <35arbk$npd@news.delphi.com>
References: <Cw5GLv.5u3@chinet.chinet.com>
NNTP-Posting-Host: news.delphi.com

schneier@chinet.chinet.com (Bruce Schneier) writes:

>However, I do have a (legitimately acquired) copy of BSAFE2 and
>so I'm able to compare the output of this algorithm to the output
>of genuine RC4 as found in BSAFE. I chose a set of test vectors
>and ran them through both algorithms. The algorithms appear to
>give identical results, at least with these key/plaintext pairs.

   This is an interesting algorithm.  It's very simple and fast, 
not conceptually related too closely to anything I've ever read
about, but it's clearly *not* a toy cipher.  I've been looking at
this since I saw it posted a couple days ago, and I wanted to 
pose a few questions for anyone else who's been looking at it:
	
Can anyone see whether the generator is likely to fall into short
cycles?
 
Are there classes of similar internal states that would give long
identical or nearly identical output streams?
 
Are there output sequences that, if they ever occur, give some useful 
information about the internal state?  (Ie, ten of the same output byte).
 
How much knowledge of the internal state do I need to be able to 
derive the rest of the internal state?
   	
   Now, these are questions I'm trying to work out, too, but I'd be 
interested in any ideas anyone has.  RC4 seems to have a really 
interesting mathematical structure, and I wonder how much time Ron Rivest 
and the rest of RSADSI spent investigating it.  The closest thing I can 
remember reading about is the "shuffling" combiner where one lfsr or afsr
selects one of the previous n outputs of another lfsr/afsr as the generator
output.  But this isn't really all that close, either.
    
   --John Kelsey, jmkelsey@delphi.com

   
