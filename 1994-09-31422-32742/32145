Path: msuinfo!agate!howland.reston.ans.net!pipex!lyra.csx.cam.ac.uk!rja14
From: rja14@cl.cam.ac.uk (Ross Anderson)
Newsgroups: sci.crypt
Subject: Re: RC4 code seems to be real
Date: 19 Sep 1994 11:34:00 GMT
Organization: U of Cambridge Computer Lab, UK
Lines: 50
Message-ID: <35jsv8$1sf@lyra.csx.cam.ac.uk>
References: <Cw5GLv.5u3@chinet.chinet.com> <35arbk$npd@news.delphi.com>
NNTP-Posting-Host: ouse.cl.cam.ac.uk


In article <35arbk$npd@news.delphi.com>, jmkelsey@news.delphi.com
writes:

>    This is an interesting algorithm.  It's very simple and fast, 
> not conceptually related too closely to anything I've ever read
> about, but it's clearly *not* a toy cipher. 

A number of algorithms have been published recently which use one or 
more 256-byte permutations as part of the key. In fact, at last
year's algorithms workshop, there were a number of systems of this 
kind of which David Wheeler's WAKE may be the closest in concept to 
RC4. WAKE uses 256 32-bits words, of which the most significant 
bytes form a permutation; these drive a nonlinear state machine 
which does the encryption.

Rogaway and Coppersmith's SEAL also uses lookup tables to drive a
nonlinear state machine, although these are tables of random numbers 
rather than random permutations; like RC4, it is an additive stream 
cipher.

Another algorithm from RSADSI - by Burt Kaliski and Matt Robshaw - 
uses a permutation to permute 256 words of plaintext in their block 
cipher; Jim Massey uses 256 byte permutations to provide the 
confusion in his SAFER K-64 block cipher; I used three such
permutations as Enigma style rotors in a cipher of mine, and Renji
Tao proposed using Latin squares as shift register sequence combiners.
Adina Do Porto and William Wolfowicz' VINO uses larger permutations
(16 bit) calculated using number theoretic tschniques.

So there are quite a few similar ideas around - even before one starts
looking at the rotor machines of olden days. The innovation of RC4
appears to be that the permutation is continuously updated; that is
probably why the rest of it can be made slightly simpler than either 
SEAL or WAKE.

Just as shift registers are a natural thing to use in hardware, so
keyed tables which are small enough to fit in cache are a natural 
choice for the software algorithm designer. To make one or more of
the tables into a permutation is also natural, as random permutations
have some nice properties compared with random functions.

Now I suppose we must wait and see whether someone develops some 
systematic machinery for attacking permutations, just as we have 
correlation attacks against many shift register based systems,

Ross

PS: the algorithms mentioned are in `Fast Software Encryption', 
Springer Lecture Notes in Computer Science v 809.
