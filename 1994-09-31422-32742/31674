Newsgroups: sci.crypt
Path: msuinfo!agate!ames!hookup!yeshua.marcam.com!news.kei.com!ddsw1!chinet!schneier
From: schneier@chinet.chinet.com (Bruce Schneier)
Subject: Re: Security of Blowfish
Message-ID: <Cvoz6p.J0C@chinet.chinet.com>
Date: Tue, 6 Sep 1994 04:59:13 GMT
References: <rlcCvJG5B.45A@netcom.com> <349a8a$fra@news.umbc.edu> <CvKvIH.I3w@chinet.chinet.com> <34eih4$sua@news.umbc.edu>
Organization: Chinet - Public Access UNIX
Lines: 45

In article <34eih4$sua@news.umbc.edu>,
Bryan G. Olson; CMSC (G) <olson@umbc.edu> wrote:
>Bruce Schneier (schneier@chinet.chinet.com) wrote:
>: In article <349a8a$fra@news.umbc.edu>,
>: Bryan G. Olson; CMSC (G) <olson@umbc.edu> wrote:
>
>: The
>: other thing I would do is to change one of the addition operations within
>: the F function into a subtraction.
>
>Can you explain why?  If you consider the contents of the s-boxes to
>be random, this would not change the set of possible transformations,
>since subtracting an element is the same as adding its inverse.  You
>could make this modification by changing the each word in one s-box
>(except S3) to its additive inverse, both initially and at the time of
>each key-dependent replacement.  That doesn't seem like it should do
>much of anything.

Yes, you're right.

>: I have had a few complaints that I am using the BLOWFISH algorithm to
>: randomize the key scheduling in BLOWFISH, and that that may be a
>: problem.
>
>I think its especially a possible problem with the repeatedly
>encrypted data block.  In the s-boxes, it seems you would usually be
>replacing a block with one which was not dependent upon the contents
>just before replacement.  If Blowfish starts being a bad randomizer,
>it will probably stay that way.  If you replace each block by its
>encryption, you have the initial (pseudo) randomness to help keep the
>output random.
>
>If you wanted to assure that replacement block was at least as
>unpredictable as the pre-replacement block, you could compute the new
>value by encrypting the pre-replacement block, but letting some
>constant take its place during that one encryption.  This would make
>the setup process reversible, which may not be a good idea.

I spent a lot of time on the key-setup procedure, and what I finally went
with was a compromise between a number of different things.  What I
really wanted was a key setup procedure that didn't involve a large
initial table.  The digits of pi are all right as random numbers go, but
they have to be stored somewhere or generated on the fly.

Bruce
