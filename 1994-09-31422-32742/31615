Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!gatech!udel!news.sprintlink.net!news.dorsai.org!stevalln
From: stevalln@dorsai.org (Steve_Allen)
Subject: re:testable really-random rngs
Message-ID: <CvMtr5.21t@dorsai.org>
Organization: The Dorsai Embassy - New YorK
X-Newsreader: TIN [version 1.2 PL2]
Date: Mon, 5 Sep 1994 01:06:41 GMT
Lines: 89

>>   Suppose I have a 'truly-random' generator with a slight hum, or
>>RFI, that passes the 32-bit statistical analysis. How could this
>>generator be attacked?
>
> Probably such a generator *would* be "mostly" random.  But it
> *might* not have *any* "real" randomness at all, and I wonder if
> we could normally tell the difference:

   I confess to being confused by this. If we can't tell the
difference, what's the difference? (I assume that we can test as
well as The Opponent.)

>>  One test occurs to me: Periodically sample any 64 or 128 or any
>>convenient large number (:-) of contiguous bits, then wait for
>>matches. If you get too many matches, or they're suspiciously
>>regular, raise a flag.
>
> This may or may not be the sort of population test I covered in my
> recent Cryptologia article.
>
> But if you mean to just wait for another identical string to show
> up, you not only are going to wait a while for any substantial
> string, but I claim the results will have little or no statistical
> meaning.  A valid really-random sequence may produce the same
> string twice in a row, or not again for years.  So what?  This is
> valid operation, so what can one possibly learn from observing it?

   Well, in your post you were saying "Distributions of final
values are bogus because pseudo-rngs are designed to pass these
tests." This test would catch the pseudo-random fellas, and some
biases (power-supply ripple, etc.) in truly-random guys. It sounded
as if you say that trngs with no bias, and prngs pass most tests.
I suggested this test to catch the prngs.

> What could it possibly mean to say that a generator is "10%
> predictable"?  Could it mean predictable _given_a_particular_
> prediction_test_?  Can success on such a test have any real
> meaning?  We confront an Opponent who can use an infinite number
> of possible tests.

   Of course I mean 10% predictable using all possible tests.
Sheesh. I again assume we can test as well as The Opponent.

>>   In fact, this could be a standard specification of any random
>>source. One could say, 'I feed 1000 bits of guaranteed minimum 98%
>>random data to my MD5 hash to get 128 bits out. I therefore
>>guarantee a Trust Factor of xxx.'
>
> I am unaware of any way to measure or guarantee a minimum amount of
> "real" randomness or anything like a "Trust Factor."

   I'm surprised. If a RNG is biased, surely there's a way to
measure the bias. If some bits can be predicted, how many? Is the
only measure that of perfection/imperfection/theoretical-
imperfection? 

> If the data are random, why use MD5?  Or, if MD5 results are good
> enough, why use a really-random source?  Just use a statistical
> RNG and MD5 it for "unpredictability" . . . then everything just
> depends on whether or not one trusts MD5.

   First you say, "An RNG may exhibit perfect measured randomness
yet be imperfect, yea useless."
   Then you say, "If it's perfect, what more could you need?"
   RNGs are fragile. This very thread itself is all about how
untrustworthy an apparently random source can be.

   I only mention MD5 because it's easy to say and use. Any
operation (modulo, etc) that adds trust to your RNG design is
equivalent (to me, anyway).

   It would be nice to design an idiot-proof, build-this-and-play,
cryptographically strong RNG. One that, given variable board
layout, component tolerances, RF shielding, etc., etc., will still
be robust enough to guarantee cryptographically strong operation no
matter who builds it. So that if switching noise couples into your
amplifier, or you have a 1000-watt paging tower on your roof, you
have enough entropy per bit that the output is random regardless.
   So you start with the best random source you can get, then you
pack on extra entropy. Kinda like using 8-round IDEA even though it
shows perfect mixing after 2 rounds.
   Schneier has a whole section on this (Applied Cryptography pp.
71,72).
   Packing in extra entropy doesn't cripple your rng-- it makes it
stronger against possible unforseen effects due to aging,
environment, etc, etc.
   No?
-Steve

