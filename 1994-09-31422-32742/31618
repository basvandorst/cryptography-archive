Path: msuinfo!uwm.edu!math.ohio-state.edu!cs.utexas.edu!utnut!torn!uunet.ca!uunet.ca!io.org!nobody
From: trebla@io.org (Albert Y.C. Lai)
Newsgroups: sci.crypt
Subject: Re: How do I choose constants suitable for Diffe-Hellman?
Date: 4 Sep 1994 22:31:26 -0400
Organization: Internex Online, Toronto, Ontario, Canada
Lines: 53
Message-ID: <4OaQkizOUBKI071yn@io.org>
References: <199409030207.AA17919@xtropia>
NNTP-Posting-Host: bonk.io.org

In article <199409030207.AA17919@xtropia>, 0x7CF5048D@nowhere.pa.dec.com
wrote:
> How do I choose constants suitable for Diffe-Hellman?
> According to _Applied Cryptography_ n should be prime,
> also (n-1)/2 should also be prime. g should be a primitive 
> root of unity mod n. n should be 512 or 1024 bits long.
> Are there any other requirements?
> 
> How can I choose such numbers? Are such numbers published
> anywhere?

Hey Bruce Schneider, I don't believe your book didn't explain *how* to
achieve those goals! :)  (Or maybe it did, but the guy didn't read.)

First I don't know of "other requirements".  Need other people to
enlighten us on this.

Second we don't look for published numbers.  Think about it.

To satisfy the first requirement, find a prime m, and then see if 2m+1
happens to be a prime too.  If yes, set n = 2m+1 and done.  Else find
another prime m and repeat.  I think it is easy to control the number
of significant bits in m and n.

Alternately, find a prime n, see if (n-1)/2 is prime.  If yes, done.
Else repeat.

To satisfy the second requirement, i.e. to find a primitive root g,
there are more things to do.  Oh no there aren't.  The fact that
(n-1)/2 is prime saves us a lot of trouble, man.  Pick a number g,
(makes sense to pick 1<g<n), compute (g^2) mod n, and (g^((n-1)/2))
mod n.  If both are not 1, done.  Else repeat.

If you have trouble hunting for large prime numbers in general, ask.

Sidenote: if p is an odd prime and (p-1)/2 is not necessarily prime,
then finding a primitive root is more troublesome.  Nevertheless the
method is just a generalized version of the above.  Pick a number g.
For each prime factor q of p-1, Check that g^((p-1)/q) mod p is not 1.
If none is 1, done.  Else repeat.

So if n is an odd prime, (n-1)/2 is also prime, then the only prime
factors of n-1 are 2 and (n-1)/2.  Thus you see why this is a special
case of the more general method.

----
Assume the _Identity_on_Internet_ hypothesis.  Then the following are
equivalent:
(1) Albert Y.C. Lai
(2) trebla@io.org
(3) 00Laiyuc@wave.scar.utoronto.ca
(4) Lai@titania.scar.utoronto.ca
(5) Automatic Laughing Babbling Email Receiver Transmitter  :)
