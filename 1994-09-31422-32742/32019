Path: msuinfo!netnews.upenn.edu!news.cc.swarthmore.edu!psuvax1!news.pop.psu.edu!news.cac.psu.edu!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!yeshua.marcam.com!charnel.ecst.csuchico.edu!olivea!decwrl!svc.portal.com!shell.portal.com!hfinney
From: hfinney@shell.portal.com (Hal)
Newsgroups: sci.crypt
Subject: Re: RC4 ?
Date: 16 Sep 1994 21:38:36 GMT
Organization: Portal Communications (shell)
Lines: 39
Message-ID: <35d38s$bmu@news1.shell>
References: <35aeij$kdc@news1.shell> <35b5eh$c6v$1@mhadg.production.compuserve.com>
NNTP-Posting-Host: jobe.shell.portal.com

Bob Jenkins <74512.261@CompuServe.COM> writes:

>My estimate of c/n^2 for bias was entirely empirical, and the
>numbers I gave for the gap test were copied from my test outputs.
>The numbers below "gap" were the number of gaps seen of length
>0,1,2,3,4,5,... adjusted for their expected frequency.  The 2^22
>next to ALPHA=2 is how many values I actually examined; I did
>overkill to try to discern the patterns from the random fluxes.

Thanks.  What abou the "expect" and "get" values?  Were they some kind
of chi-square or similar statistics?  Could you use them to come up with
a confidence level for distinguishing these outputs from random numbers?

>  for (i=0; i<SIZE; ++i)
>  {
>    x = g[i];
>    c = (x+c)&MASK;
>    y = g[c];
>    g[i]=y; g[c]=x;
>    for (j=0; j<SIZE; ++j) if (g[j]==r[i]) break;
>    z = (x+y)&MASK;
>    g[j]=g[z]; g[z]=r[i];
>  }

This is an interesting idea.  It seems like the problem, as with many
cryptographic attacks, is that it is hard to tell when you are getting
close to the right permutation.  Your swaps seem as likely to destroy
a good value as a bad one, unfortunately.

I had thought of a variation in which the state array was initialized
to UNDEFINED values, then you start filling in values which are consistent
with the output data stream.  Where you have multiple choices you would
have to try them sequentially.  Eventually you will hit an inconsistency
where no assignment of values works given what has been done before, and
at that point you backtrack and change one of the earlier-assigned
values.  I suspect, though, that this is not going to have a better
running time than your approach, intractably long for the 2**8 case.

Hal
