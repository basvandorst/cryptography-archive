Newsgroups: sci.crypt
Path: msuinfo!gmi!usenet.eel.ufl.edu!news.ultranet.com!MathWorks.Com!yeshua.marcam.com!charnel.ecst.csuchico.edu!csusac!csus.edu!netcom.com!mpj
From: mpj@netcom.com (Michael Paul Johnson)
Subject: Re: RC4 ?
Message-ID: <mpjCw8zID.7xF@netcom.com>
Organization: NETCOM On-line Communication Services (408 261-4700 guest)
References: <3555ls$fsv@news.xs4all.nl> <359qjg$55v$1@mhadg.production.compuserve.com> <35a0fd$nmm@bcarh8ab.bnr.ca>
Date: Sat, 17 Sep 1994 00:18:13 GMT
Lines: 106

mleech@bnr.ca (Marcus Leech) writes:
>Does this not make it quite susceptible to known-plaintext?  The ALLEGED RC4
>  random "generator" is a 256-byte state-vector with deterministic
>  transition rules. Since the transition to the next state is *not*
>  data dependent, then perhaps a known-plaintext attack with
>  Epsilon*256-bytes of known plaintext could reveal enough about the
>  state of the generator to determine initial state (the key).

Yes.  Quite.  Never re-use a session key with this cipher.

-----BEGIN PGP SIGNED MESSAGE-----

A few initial observations on the alledged RC-4 code that was posted here. 
This may or may not be valid.  Look at the code, yourself, if you like, from
the sci.crypt posting, or at ripem.msu.edu.

1.  It is a pure stream cipher, with no dependencies on the data.  This means
that it is subject to a trivial known plain text attack if you ever re-use a
key.  In practical terms, this means that the only thing you should ever use
a re-usable key for is to encrypt a random (or strong pseudorandom) key at
the beginning of the message.  You should then switch to the new session key
for the remainder of the file.  This results in some data expansion, but only
by the length of the session key.  This is not likely to be a problem in most
applications.

2.  I am suprised at (1) how simple the cipher is, and (2) how closely it
resembles another proprietary (but unclassified) cipher that I have seen.  The
biggest difference between alledged RC-4 and brand X is that brand X includes
some data dependencies.  Brand X is stronger against a plain text attack, and
can be used for data authentication.  The plain text attack part is not a big
deal if you heed the caution in observation 1, above.  Brand X performs 3
swaps per byte emitted instead of 1, and uses different index manipulation,
but it also uses a 256 byte array and very similar principles of operation. 
The 3 swaps are not needed to avoid short stream cycles, but they do make the
authentication properties work.

3.  The key expansion of alledged RC-4 and brand X work a little differently. 
The alledged RC-4 version is faster than brand X, but is more likely to
generate the same state from a different user key.  The key AAAAA is the same
as the key AAAAAAA.  The key setup in alledged RC-4 makes no attempt to
differentiate between different sized keys, but it does in brand X.

4.  The approximate probability of two user keys of the same length producing
the same permutation of the state array increases with the length of the key
from something rather small (about 10^-20) at a normal key size of 16 bytes
(128 bits), to about half for the maximum key size supported (256 bytes). 
This is interesting, but not a great help in a brute force attack, since this
effect doesn't become significant when using keys small enough for brute
force attacks to be practical.  It is also not clear to me how this reduction
in effective key size is of much value to a cryptanalyst.

5.  The algorithm, though simple, is complex enough to avoid short cycles (as
far as I could tell).

6.  The worst case for similar keys with slight differences yielding similar
outputs is, of course, the case where the same state permutation is created. 
The next worst case seems to be for long keys that differ in the last byte. 
Because of this, and because of the effects noted in (4), above, this cipher
is probably not worth using key lengths longer than about 32 bytes. Longer
keys, like pass phrases, might be stronger against partial leaks of data when
processed through a good hash function (like SHA or MD5) than they would be
if used directly.  This would help make similar keys with slight differences
(i. e. one capitalization different at the end of the key) generate
drastically different initial states.  Hashing the key before passing it to
the alledged RC-4 key expansion function is very important if you plan to
intentionally cripple this otherwise good cipher to a key size of 40 bits.

8.  Two obvious brute force attacks are apparent: the processing intensive
and the storage intensive.  The processing intensive attack computes internal
keys (state array permutations) each time.  The storage intensive attack
precomputes all of the state arrays in advance for the key length of
interest.  It is speculated that 40 bit (5 byte) keys for this algorithm are
within easy reach of NSA machinery for one or both of these, given the
current state of the US export regulations.  16 byte keys are better, unless
you want to export a product embedding this algorithm.

9.  The algorithm appears to be carefully constructed to balance the output
statistics.

10.  Other than what is mentioned above, I don't yet see an obvious attack
better than brute force.  The most important part is to heed the warning not
to re-use any session key, thus making a known plain text attack trivial.
If you do that, then this algorithm may be suitable for use where speed is
paramount.

                  ___________________________________________________________
                 |                                                           |
 |\  /| |        | Michael Paul Johnson  Colorado Catacombs BBS 303-772-1062 |
 | \/ |o|        | PO Box 1151, Longmont CO 80502-1151 USA   Jesus is alive! |
 |    | | /  _   | mpj@csn.org aka mpj@netcom.com m.p.johnson@ieee.org       |
 |    |||/  /_\  | ftp://ftp.csn.net/mpj/README.MPJ          CIS: 71331,2332 |
 |    |||\  (    | ftp://ftp.netcom.com/pub/mpj/README.MPJ  -. --- ----- ....|
 |    ||| \ \_/  | PGPprint=F2 5E A1 C1 A6 CF EF 71  12 1F 91 92 6A ED AE A9 |
                 |___________________________________________________________|


-----BEGIN PGP SIGNATURE-----
Version: 2.7

iQCVAgUBLnozufX0zg8FAL9FAQHtJQQA6n9AkCsMl/AO5lW2cjKvFp/dTNyKNs++
LRsUI1s3iq2JTh/Ib2IQ0SuIxUjBosvpLnQN7qNagU2631G3eJOplY45ASJfoZhP
OvD3g1K/iHGV9m9Q302dCqJGCJtH1ai8//MiRgpCjL2Kac/KaKrdYL0rB0Nwd61i
tvmSVQpCc9w=
=BC7S
-----END PGP SIGNATURE-----

