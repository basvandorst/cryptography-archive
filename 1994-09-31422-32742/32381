Path: msuinfo!gmi!zombie.ncsc.mil!MathWorks.Com!europa.eng.gtefsd.com!howland.reston.ans.net!EU.net!sunic!news.funet.fi!news.csc.fi!network.cc.jyu.fi!network.cc.jyu.fi!not-for-mail
From: paasivir@network.cc.jyu.fi (Risto Paasivirta)
Newsgroups: sci.crypt
Subject: Uniformly distributed random permutations? (Re: RC4: weakness?)
Date: 23 Sep 1994 00:34:25 +0300
Organization: University of Jyvaskyla
Lines: 20
Message-ID: <35st91$n9h@tukki.cc.jyu.fi>
References: <35r3l6$a90@larry.rice.edu>
NNTP-Posting-Host: tukki.cc.jyu.fi

In article <35r3l6$a90@larry.rice.edu>, Doug Moore <dougm@cs.rice.edu> wrote:
>I don't suggest that this is a huge weakness, but I marvel that the
>code was implemented this way, when a uniformly distributed random
>permutation is perfectly easy to generate.

>for (i = 0; i < 255; ++i)
>  {
>    int r = i + random() % (256-i);
>    swap(perm[r], perm[i]);
>  }

And does this really generate uniformly distributed random permu-
tation? Remainder operation (%) is a poor choice if you need uni-
formly distributed random values from range. (And very poor indeed
if you use bad random function from C libray.) 

   Risto
-- 
/*paasivir@jyu.fi*/int a[3302],b=3301,*c=a,d,e,f;main(){for(e=b;--e;*c++=1);*c
=2;for(d=2001;d--;printf("%05d",f))for(c=a,e=b;e;f/=e--){f+=*c*1e5;*c++=f%e;}}
