Path: msuinfo!netnews.upenn.edu!news.cc.swarthmore.edu!psuvax1!news.pop.psu.edu!news.cac.psu.edu!howland.reston.ans.net!europa.eng.gtefsd.com!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson; CMSC (G))
Newsgroups: sci.crypt,sci.math
Subject: Re: P = NP? (was : How safe is RSA?)
Date: 2 Sep 1994 23:16:18 GMT
Organization: University of Maryland, Baltimore County
Lines: 53
Message-ID: <348bo2$dat@news.umbc.edu>
References: <EACHUS.94Aug24191851@spectre.mitre.org> <33r2b4$qe7@news.umbc.edu> <EACHUS.94Aug31195757@spectre.mitre.org>
NNTP-Posting-Host: umbc7.umbc.edu
X-Newsreader: TIN [version 1.2 PL2]
Xref: msuinfo sci.crypt:31553 sci.math:79539

Robert I. Eachus (eachus@spectre.mitre.org) wrote:

[Robert...]
:    Second, I thought I had posted a demonstration that correctness is
: not at issue.  (Combining the poly-time algorithm with a known correct
: non-P-time algorithm in such a way as to render the p-time part the
: only open question.)

I don't think I got this post, but O.K.

Given a machine A which supposedly recognizes, say 3-SAT, in poly-time,
you could construct A' which builds a short certifier in poly-time
along the way, and has a proof tester which would loop out if the
certifier were invalid.  Since 3-SAT with a short certifier can be
tested in poly-time, A' should run in poly-time if A does, and we
could prove A' will never terminate with an incorrect answer.

Then you could build A'' which alternately executes one step of A',
then one step of a non-polynomial but known correct decider for 3-SAT,
and output the answer from whichever reaches a final state first (then
A'' stops).  Thus we can prove A'' correct and it will be poly-time if
A is correct and poly-time.

[...Lots deleted]

:    I do see the (potential) hole above, but I don't see one with the
: time.  If I go through all the hoops, then there is a problem in NP
: which corrresponds to finding a problem which takes longer than (some
: arbitrary--I don't need to show how to get it) polynomial measure of
: running time for A.  Since NP=coNP if P=NP (and maybe even if not, see
: above), I can then solve the co-problem to prove that no
: counterexample exists.  I don't know the size of the problem, so I
: don't know how long solving the coproblem will take, but I don't care.
: I'm not trying to show the proof is in P-time, just that a proof must
: exist.
:   

Suppose we have machine A and a proof that A decides 3-SAT.

The potential hole means we're not sure P=NP implies the existence of
such things (at least I'm not sure), but lets assume we got this far.

How do you show A is poly-time, if it is ?  Exactly what language L,
and what machine B are you using to prove that A is poly-time ?  

If A is poly-time there exists some polynomial t() such that A on
string x always takes no more than t(|x|) steps.  You don't have to
show the problem of finding t() is in NP; you have to show t() exists.

--Bryan


 
