Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!newsxfer.itd.umich.edu!nntp.cs.ubc.ca!suncad.camosun.bc.ca!freenet.victoria.bc.ca!freenet.Victoria.BC.CA!uh886
From: uh886@freenet.Victoria.BC.CA (Antonio Dell'elce)
Subject: Info needed...
Message-ID: <1994Sep24.192323.23541@freenet.victoria.bc.ca>
Sender: news@freenet.victoria.bc.ca (Usenet News)
Reply-To: uh886@freenet.Victoria.BC.CA (Antonio Dell'elce)
Organization: The Victoria Freenet Association (VIFA), Victoria, B.C., Canada
Date: Sat, 24 Sep 1994 19:23:23 GMT
Lines: 65


 
Hello..
 
I hope not to appear a too ``novice'' in this field. So, please let me
present you with an outline of an algorithm that I refer with the name
'TeA' (Three-party encryption algorithm). A nice feature of it is that
encrypting the plaintext [A] with a key [K] three times [or even more] will
result in different cyphertexts [C0, C1, C2 where C0 != C1 != C2]. However
all plaintexts encrypted with the same key could also be decrypted with it.
 
I need your inpunt about this 'idea'... This is an outline of it:
 
<--> 
 
First the key goes under a Function (F0) which perfoms a series of 
permutations and substitutions to key (All permutation and substitution 'boxes'
are dependant to the key. After going through this function the key is split
into four parts, which here will be called A, B, C and D. Then:
 
 
Step 0. It will use part A to 'scramble' the plaintext similarly to how F0 does.
	It is done through a function that I will call F1.
 
Step 1. It will use part B to create a bit-map of which 64 bits are off [0]
	and 128 bits are on [1]. Bits set to 1, are replaced with bits part of
	the random data. [off-bit number 'x' of the 'map' is replaced with bit
	x of the Random data].
 
Step 2. It will use part C to scramble the output of Step 1 similarly to what
	Step 0 does. It is done through a function called F2.
 
Step 3. [and on] A the Step 2 algorithm could stop and return the cyphertext.
	But it will left part D unused [that is however not a big problem], in
	this step [and also further steps] result could be scrambled agan,
	using a function similar to F2, or F2 itself.
	
    
 
A failure I see myself: Cyphertext is larger then plaintext... I think it is
no good.. I am trying to think a way to let coexist all Three parties, and still
have cyphertext the size of plaintext.. but it is really difficult for me.
 
 
Note: All functions [Fx] are dependent on the input for the time it takes
      to go through them [if A, B are A != B, the time to go through any of the
      functions will be different]
 
 
<-->
 
Please do whatever.. post, e-mail, even flame me! [but not to much..]
 
 
Antonio...
 
 
 
P.S. Check also my english errors..
 
-- 
Antonio Dell'elce			Ph. +39-872-58430
V colle della fonte 53			Email: uh886@freenet.victoria.bc.ca
66030 FRISA CH
ITALY
