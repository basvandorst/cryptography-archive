Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!uhog.mit.edu!europa.eng.gtefsd.com!swiss.ans.net!newsgate.watson.ibm.com!hawnews.watson.ibm.com!tornews.torolab.ibm.com!news
From: Ameline@provence.torolab.ibm.com
Newsgroups: sci.crypt
Subject: Re: Steganography for ASCII text files
Date: 7 Sep 1994 14:42:08 GMT
Organization: C-Set++ Development
Lines: 51
Message-ID: <34kjg0$1cl1@tornews.torolab.ibm.com>
References: <1994Sep5.081354.1631@ifi.unizh.ch>
Reply-To: ameline@vnet.ibm.com
NNTP-Posting-Host: provence.torolab.ibm.com
X-Newsreader: IBM NewsReader/2 v1.00

In <1994Sep5.081354.1631@ifi.unizh.ch>, schaad@ifi.unizh.ch (Rene Schaad) writes:
>There are many steganogrphy tools. Most use .gif or .jpeg files to
>hide their data in. Some use audio files, one uses gzip files.
>Now I'm looking for a steganography tool that can hide data in
>ordinary ASCII files (e.g. e-mail).
>
>One idea would be to encode the data in the number of words per line.
>The disadvantage of this scheme is an extremely poor efficiency 
>(approx. 2-3 bits per line without being obvious!!).

(In  the message  below, I'm encoding an average of over 9 bits per line!)
                                                                         
   I think  you can get over 8  bits per  line by sending  justified text.
In order to pad out a line to a  given length (using spaces),  you need to 
pick which  places to  insert the  extra spaces.  In most lines  there are 
many  choices  for each  space. The  information  could be encoded in  the 
position of the spaces.

   In   this  message, for example,  there   are over 32 bytes of   hidden 
information!  I'll grant  that it's not  a high   bandwidth communications 
channel, but  it'll do the job!  If you were  printing text out to a laser
printer, you would have much finer control  of the inter letter  and inter
word spacing, and  could encode  surprisingly large amounts of information 
which, when you  scanned in the  document, could be extracted  without too 
much   difficulty! This  technique   could  also  be used to place  hidden 
identifiers  on a document,  so you could track  down the source of a leak.

   Lets look at how the  algorithm  used for a post  like this would work. 
To encode, we  have  the desired line  length,  and then   the actual line 
length. The difference is how many spaces we have to insert between words.
We  then enumerate  all the  possible  combinations  of where these spaces 
can go. This can be a fairly small (0), or fairly large number. Who cares!
round it down to the next lower  power  of two, take the log (base 2), and 
peel than  many bits  of  your input  data stream. Lets say you peeled off
7 bits, and  lets say  (for the sake of simplicity) that these came out to 
the number 5. You then  use the  fifth of those enumerated combinations of
where  to put the spaces. Decoding  is left as an exercise  to the reader.
(You  can limit  the number   of  spaces between  a pair of  words to be a 
maximum of 3. This, along with  compressing and encrypting the data before
this encoding, should make the text look "normal".)

P.S.  the input  text  has to start out   with only one space between each 
word. These are  easy to  strip out, so this is not a problem. Looks  like 
writing this code should keep me busy for the next weekend!

Regards,          | "...Then anyone who leaves behind him a written manual, and
Ian R. Ameline    | likewise anyone who receives it, in the belief that such
(speaking for     | writing will be clear and certain, must be exceedingly
 myself, not IBM) | simple-minded..."  Plato, _Phaedrus_


