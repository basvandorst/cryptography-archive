Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!uunet!george.inhouse.compuserve.com!news.inhouse.compuserve.com!compuserve.com!news
From: Bob Jenkins <74512.261@CompuServe.COM>
Newsgroups: sci.crypt
Subject: Re: RC4 ?
Date: 15 Sep 1994 15:51:50 GMT
Organization: via CompuServe Information Service
Lines: 57
Message-ID: <359qjg$55v$1@mhadg.production.compuserve.com>
References: <3555ls$fsv@news.xs4all.nl>


Assuming the posted code is correct, RC4 works like this:
1 A keybuffer is initialized to a permutation of 0..(2^ALPHA)-1
2 The user key is used to shuffle this permutation
3 The encryption algorithm itself methodically swaps each keybuffer
  term with another keybuffer term (chosen randomly), and reports a 
  third randomly chosen keybuffer term.
4 This third term is XORed with the user's message.

So RC4 is just a random number generator, where the results are that 
third randomly chosen keybuffer term.

Some useful properties of RC4:
* It's fast.  It produces one random value in 19 instructions.
* The method of munging the keybuffer is reversible, so the RNG is a 
  permutation of states.  The possible states are all possible 
  permutations of the keybuffer cross all possible values of x and y.
  Therefore the expected cycle length is ((2^ALPHA)!*(2^(2*ALPHA)))/2, 
  or about 2^1687 values when ALPHA=8.
* Each value 0..(2^ALPHA)-1 appears exactly once in the key buffer, so 
  it would be hard for some values to appear more often than others.
* If you assume values chosen pseudorandomly from the array are 
  independent, then all results are entirely independent.  So an
  attack can't make that assumption.

A not-so-useful property:
RC4 is biased by about c/n^2, n being the size of the internal state.
  ALPHA   point of failure   bias      expected cycle length
  2       2^7                2^4       2^6
  3       2^18               2^9       2^19
  4       2^24               2^12      2^51
  5       2^28               2^14      2^126
  6     ? 2^32 ?           ? 2^16 ?    2^307
  7     ? 2^36 ?           ? 2^18 ?    2^725 
  8     ? 2^40 ?           ? 2^20 ?    2^1687 
If your application can't stand a bias of 1 part per million, then
don't use RC4.  Gaps of length 0 (i.e. a a) are too likely and 
gaps of 1 (i.e. a b a) are too unlikely.

#define ALPHA 2   (2^22 values)
gap: expect    15  get    172443.0856 
  1.040738  0.952832  0.833954  0.871353  0.902145  1.722928  ...

#define ALPHA 3   (2^23 values)
gap: expect    31  get      2134.8148 
  1.018901  0.956675  1.009969  0.994801  1.022663  1.008202  ...

#define ALPHA 4   (2^27 values) 
gap: expect    63  get       377.7582 
  1.002988  0.993389  1.000811  1.001269  1.002527  0.999880  ...

#define ALPHA 5   (2^29 values)
gap: expect   127  get       159.7498 
  1.000763  0.998885  0.999738  1.001230  1.000181  1.000470  ...


                                    - Bob Jenkins
