Path: msuinfo!netnews.upenn.edu!news.cc.swarthmore.edu!psuvax1!news.pop.psu.edu!news.cac.psu.edu!howland.reston.ans.net!cs.utexas.edu!chpc.utexas.edu!news.utdallas.edu!corpgate!bcarh8ac.bnr.ca!bcarh8ab.bnr.ca!mleech
From: mleech@bnr.ca (Marcus Leech)
Newsgroups: sci.crypt
Subject: Re: RC4 ?
Date: 15 Sep 1994 17:32:29 GMT
Organization: Bell Northern Research Ltd, Ottawa, Canada
Lines: 25
Message-ID: <35a0fd$nmm@bcarh8ab.bnr.ca>
References: <3555ls$fsv@news.xs4all.nl> <359qjg$55v$1@mhadg.production.compuserve.com>
NNTP-Posting-Host: bcarh6dc.bnr.ca

In article <359qjg$55v$1@mhadg.production.compuserve.com>,
Bob Jenkins  <74512.261@CompuServe.COM> wrote:
>
>Assuming the posted code is correct, RC4 works like this:
>1 A keybuffer is initialized to a permutation of 0..(2^ALPHA)-1
>2 The user key is used to shuffle this permutation
>3 The encryption algorithm itself methodically swaps each keybuffer
>  term with another keybuffer term (chosen randomly), and reports a 
>  third randomly chosen keybuffer term.
>4 This third term is XORed with the user's message.
>
>So RC4 is just a random number generator, where the results are that 
>third randomly chosen keybuffer term.
>

Does this not make it quite susceptible to known-plaintext?  The ALLEGED RC4
  random "generator" is a 256-byte state-vector with deterministic
  transition rules. Since the transition to the next state is *not*
  data dependent, then perhaps a known-plaintext attack with
  Epsilon*256-bytes of known plaintext could reveal enough about the
  state of the generator to determine initial state (the key).
-- 
Marcus Leech        |Any opinions expressed are mine.         |+1 613 763 9145
VE3MDL              | and not those of my employer            |+1 613 567 5484
mleech@bnr.ca       |                                         |
