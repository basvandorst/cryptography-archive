Path: msuinfo!netnews.upenn.edu!dsinc!newsfeed.pitt.edu!godot.cc.duq.edu!news.duke.edu!MathWorks.Com!europa.eng.gtefsd.com!howland.reston.ans.net!usc!rand.org!mycroft.rand.org!not-for-mail
From: Jim Gillogly <jim@acm.org>
Newsgroups: sci.crypt
Subject: Re: Virtual One-Time-Pads [spoiler]
Date: 13 Sep 1994 12:45:00 -0700
Organization: Banzai Institute
Lines: 59
Sender: jim@mycroft.rand.org
Message-ID: <354vfs$qr9@mycroft.rand.org>
References: <3545fp$q1l@mycroft.rand.org> <354pc8$is5@news.umbc.edu>
Reply-To: jim@acm.org
NNTP-Posting-Host: mycroft.rand.org

In article <354pc8$is5@news.umbc.edu>,
Bryan G. Olson; CMSC (G) <olson@umbc.edu> wrote:
>Tell us about it.  How much human/machine time ?  Could you (did you)

The human time for the first solution was two or three hours of
programming, mostly trying to understand BASIC -- what a godawful
language!  The machine time for solving it was 2-3 minutes on my Toshiba
T1950CT 486 laptop using Borland Pro C++ (ver. 3.5 -- I couldn't stand
"upgrading" to the Windows-based version; guess I'll move over to djgpp
eventually).

>write a fully automatic decrypter ?  Did you just look for 0 in the

I wrote a fully automatic one for the QBASIC version, but for PowerBASIC
I just grabbed the three 256-byte subkey tables used in that particular
problem, since generating all 256 tables was too tedious.  An automatic
cracker for that version would be easy for somebody with PowerBASIC or
with the patience to feed all the keys to the compiled program; just a
matter of dropping the corresponding tables into my program.

>high bit of each byte ?

My first try was filtering on the high bit for the first 24 bytes to look
for coherent text: spaces, English, whatever.  I didn't see anything like
that for the few keys that passed this filter.

My second try was looking for a standard PKZIP header, since Demberger is
known to use ZIP: that would be hex 50 4b 03 04 14 00 02 00.  A few of them
had the first three bytes (PK<heart>), but PKZIP didn't like any of
them... "use PKZIPFIX".

Next I looked for the sequence that had the minimum number of ASCII
violations for a considerably longer run; this would catch the "Here's a
fair amount of ASCII in the middle of binary garbage" trick the PKpeople
used for their challenge.  To my surprise one of the garbage results I'd
eliminated on the first try had no violations.  Looking at more of it, it
was obviously output from uuencode without headers.  I uudecoded it and
got binary-looking stuff; I grepped his postings and found that section in
one of them -- a ZIP file.

Subsequent tries would have included getting the key that produced maximum
IC.  If that didn't work, I'd have looked for other kinds of binary file
headers:  GIF, JPEG, whatever, until I lost interest.

24-bit keyspaces are good fun... you have time to try <lots> of stuff.
The good news is that he should have no trouble getting an export license
if he wants to apply for one.

By the way, the known plaintext attack I described earlier assumed fully
random sub-keys, not this rotor-like thing where each subkey is drawn from
a pool of 256 possible rotors with a 24-bit total keyspace.  Even with
random rotors it would succeed earlier than I'd assumed, because the 510-,
508-and 506-byte cycles are the result of reversing the 256-byte
rotor/tape when it reaches the end: when you reach the top you start
counting down again, so that byte 255 and byte 257 in each of those
streams are the same, byte 254 = byte 258, and so on.  Heh heh.
-- 
	Jim Gillogly
	Mersday, 22 Halimath S.R. 1994, 19:45
