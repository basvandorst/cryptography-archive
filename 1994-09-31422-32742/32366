From: tht@grenoble.hp.com (Thierry TOUCHET)
Date: Wed, 21 Sep 1994 15:35:05 GMT
Subject: Secure Hardware Experiments
Message-ID: <CwHKMI.EHB@hpgndlab.grenoble.hp.com>
Organization: Hewlett-Packard
Path: msuinfo!gmi!zombie.ncsc.mil!MathWorks.Com!europa.eng.gtefsd.com!howland.reston.ans.net!math.ohio-state.edu!magnus.acs.ohio-state.edu!csn!col.hp.com!cello.hpl.hp.com!hplntx!hpbbn!hpgndlab!tht
Newsgroups: sci.crypt
Sender: news@hpgndlab.grenoble.hp.com (News Admin (F.Pernoud))
Followup-to: sci.electronics, alt.security,
Keywords: encryption algorithm random memory
Nntp-Posting-Host: hpgntht.grenoble.hp.com
Lines: 34

 This is my first post in sci.crypt. Maybe not the right place...

 I am looking for an  encryption  algorithm  that could  encrypt/decrypt
data and addresses between a microprocessor and its local memory.

 This  algorithm  should be able to  encrypt a single  byte as well as a
long  word  with or  without  its  address.  It  should  also be able to
encrypt the address  lines (maybe  "encrypt"  only means XORing with the
Key) using the same Key.

 The  length of the Key should be limited to a  reasonable  value  (less
than  1024  bits).  The  Key  could  be   generated  by  a  RNG  and  be
inaccessible, even to the microprocessor..

 In a real  implementation, we can assume that the  microprocessor,  the
encryption/decryption  engine,  the Key and  the RNG  are  located  in a
tamper-resistant  area.  Only the memory is  accessible  to the external
world.

 In order to  render  cryptanalysis  more  difficult,  the Key  could be
changed and the memory  re-encrypted  with the new Key each time a great
amount  of  memory  is  to  be  updated  (new  software  version).  This
operation could as well be performed periodically.

 Has anybody already work on such a subject?

Thanks,

Thierry.



 

