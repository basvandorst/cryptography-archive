Path: msuinfo!agate!news.Stanford.EDU!kocherp
From: kocherp@leland.Stanford.EDU (Paul Carl Kocher)
Newsgroups: sci.crypt,comp.compression,talk.politics.crypto
Subject: PKZIP encryption broken (known plaintext attack)
Date: 5 Sep 1994 00:29:07 GMT
Organization: Stanford University, CA 94305, USA
Lines: 83
Message-ID: <34dooj$lag@nntp2.Stanford.EDU>
NNTP-Posting-Host: cardinal.stanford.edu
Xref: msuinfo sci.crypt:31612 comp.compression:14371 talk.politics.crypto:7152


I finally found time to take a closer look at the encryption algorithm
by Roger Schlafly that is used in PKZIP and have developed a practical
known plaintext attack that can find the entire 96-bit internal state.

The basic encryption algorithm has four steps, two of which are
based on linear shift registers, one is like a linear congruential,
and the final converts the contents of an internal state register
into an 8-bit value to XOR onto a plaintext byte.  A complete 
description of the algorithm is included in the file APPNOTE.TXT, 
which is included with PKZIP version 1.1 (check Archie for 
"pkz110.exe").

Although the algorithm is substantially better than the toy ciphers 
used in many products, I have developed a practical known plaintext 
attack that finds the 96 bit internal state.  Unlike the ZipCrack 
program I released a couple years ago, this attack finds the 
internal state registers directly and does not involve a brute-force 
attack on the password.  If adequate known plaintext is available, 
my attack will find the state, regardless of the password's size or 
content.

My attack is an improvement on a known plaintext attack described
in a paper by Biham (unpublished work) that takes 2^38+ operations.
My improvements reduce the amount of work required by approximately
a factor of 1500 with 200 bytes of plaintext.  With less plaintext 
the attack will take somewhat more time, but just 40 bytes should 
be enough to be practical.  I've written code for all steps of
the attack; a version written in C with a few optimizations in 
inline assembly runs in less than a day on my '486.  The attack
will work with versions 1.1 or 2.xx of PKZIP and other programs
using the same algorithm.

A more in-depth description of the attack will be made available
soon, but I wanted to let people using PKZIP (and any other 
programs that use the same algorithm) know immediately about the
weakness.

Sincerely,
Paul Kocher
kocherp@leland.stanford.edu


******************************************************************************
               PLEASE READ BEFORE RESPONDING TO THIS ARTICLE

I get a lot of e-mail, and am trying to go on an e-mail diet :-), and this 
posting isn't going to help the situation :-(.  So here are some answers to 
questions I know I'll get asked if I don't answer them first.  I apologize
for doing this since it isn't very friendly, but my otherwise I'd be unable
to respond to much of my e-mail.  If your question isn't answered here,
feel free to e-mail it to me or post it and I'll try to reply.

  [Q] Help! I forgot my password...
  [A] If it's your only copy of your thesis, I'll probably try to help, 
        but it usually takes several hours to crack a file and my spare
        time is limited, so I'm afraid I can't help most who ask.

  [Q] Is the code for your attack available?
  [A] I haven't released it yet, but I may.  If I do, I'll announce it 
        on sci.crypt and I'll make sure it makes it to one or more of
        the USA crypto FTP sites.  People outside the USA won't be able
        to get it because US export laws regulate cryptanalytic software.
        (Try talk.politics.crypto for information about the US export laws
        but absolutely positively do *not* post export-related questions
        to sci.crypt, rec.windsurfing, or anywhere else inappropriate.)

  [Q] I/my company is using/selling/designing a product that involves 
        crypto and we want to make sure it's secure.  Can you help?
  [A] Yes.  I do security reviews, design work, optimization, etc.

  [Q] How do you crack ciphers?
  [A] Study binary operations, statistics, number theory, programming,
         algorithms, assembly language, etc.  Read books on cryptography.
         Practice breaking easy ciphers then try harder ones.  Good luck 
         and experience are key (sorry about the pun :-).


__________ Paul C. Kocher _________ kocherp@leland.stanford.edu __________
      Independent data security consultant/contractor.  415-323-7634
--------------------------------------------------------------------------
Disclaimer: The views presented in this message do not represent RSA Labs,
Microsoft, or any other corporation I am affiliated with and/or work for.
