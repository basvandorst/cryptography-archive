Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!yeshua.marcam.com!uunet!news.pipeline.com!news.cs.columbia.edu!news.cs.columbia.edu!news-not-for-mail
From: ji@news.cs.columbia.edu (John Ioannidis)
Newsgroups: sci.crypt
Subject: Re: Speedups in posted RC4 code
Date: 19 Sep 1994 00:32:13 -0400
Organization: Columbia University Department of Computer Science
Lines: 30
Message-ID: <35j48d$it2@pizza.cs.columbia.edu>
References: <35c4aa$l17@bcarh8ab.bnr.ca>
NNTP-Posting-Host: pizza.cs.columbia.edu

In article <35c4aa$l17@bcarh8ab.bnr.ca>, Marcus Leech <mleech@bnr.ca> wrote:
>I replaced the swap_bytes() function call with a macro, and replaced
>  the '%' operations in rc4() with a table-lookup, and got a factor-of-three
>  performance improvement--3MBytes/sec.  Your mileage may vary.
>-- 

The posted code, compiled with gcc -O4 (gcc version 2.5.8)  ran at
12Mbps (1.5MBps) on a Sparc 10/51 running 4.1.3 (unoptimized, it ran
at 4Mbps). I got another factor of two (bringing it to 24Mbps) by:

* Replacing the swap_bytes() call with inline code (it's just three
  lines, no need to even use a macro, plus it saves a couple of
  memrefs)

* Making the state vector an array of longs rather than an array of
  chars, thus ensuring that memrefs were doubleword allign (this was
  a BIG performance improvement on the Sparc 10)

* Omitting all the % 256 (or &0xff), since all lvalues were unsigned
  chars anyway and the operation would have been a noop (the optimizer
  would probably have taken care of this, by why risk it).

The code (my optimized version) runs at 35Mbps on an HP9000/735. What
kind of machine were you running it on?

It is interesting to note that my version of DES (Phil Karn's DES code
with my 2x speedups) ran at 2Mbps -- so RC4 (or the alleged RC4) lives
up to its claim of being ten times faster than DES.

/ji
