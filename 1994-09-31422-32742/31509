Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!uhog.mit.edu!europa.eng.gtefsd.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: encryption and hashing functions
Date: Thu, 01 Sep 94 15:41:48 CDT
Organization: University of Missouri, Columbia
Lines: 84
Message-ID: <17024DCBCS86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: mizzou1.missouri.edu

-----BEGIN PGP SIGNED MESSAGE-----
 
>Path: golf!zombie.ncsc.mil!MathWorks.Com!yeshua.marcam.com!usc!rand.org!mycroft.rand.org!not-for-mail
>From: jim@mycroft.rand.org (Jim Gillogly)
>Newsgroups: sci.crypt
>Date: 31 Jul 1994 09:32:37 -0700
 
>In article <31gbn2$16a@search01.news.aol.com>,
>RPerillo <rperillo@aol.com> wrote:
 
>When Phil Karn proposed using MD4 as the crypto engine in a cipher system
>in Feb 1991 it sounded new to me; later discussion indicated that there had
>been some math done earlier (Asiacrypt?) suggesting that several rounds of
>the hash function were needed to make it strong enough.
 
     I think this is true for building a Feistel-type cipher.  MDC seems
to work pretty well with one application of the hash function per
128-bit or 160-bit block used.  I'd bet that "filtering" 160 bits of
AFSR (lagged fibonacci generator) output through SHA at a time would
produce a pretty good keystream, too, with only a single application of
the hash function per 160-bit block.
 
     Actually, the compression functions of MD4, MD5, SHA, and Haval are
all reversible up until the feedforward is added to the output.  Look at
the round functions--they look like
 
     H[i] = Enc(H[i-1],Key=MsgBlk[i]) #+# H[i-1],
 
where #+# is adding the corresponding 32-bit words independently.
 
     Now, Enc() is not a *neatly* reversible function--but it *is*
reversible.  I hadn't realized this until I caught a mention of this in
Kaliski and Robshaw's "Fast Block Cipher Proposal" in the proceedings
from the Cambridge Security Workshop, 1993.
 
     The feedforward clobbers the reversibility, just as it does in the
Davies-Meyer scheme for using an n-bit block cipher with k-bit keys to
form an n-bit hash of a message, ie
 
     H[i] = Enc(H[i-1],Key=M[i]) xor H[i-1].
 
     According to Schneier's _Applied Cryptography_, this is done to
prevent meet-in-the-middle attacks.  [This is also where I saw the
Davies-Meyer scheme discussed.]
 
     So, in some sense all these hash functions are similar to
encryption functions, except that the likely attacks have more to do
with choosing the keys than choosing the plaintexts.
 
>I suppose since crypto-strength hash functions are pretty new, figuring
>out their strength as cipher engines would <have> to be pretty new.
 
     All hash functions seem to be conceptually similar to block
ciphers--take a block of input, permute it based on another block of
input to produce a block of output.  And many of the analytical tools
seem to apply--such as differential and linear cryptanalysis.  In fact,
MD4 and family were apparently designed to resist statistical attacks
based on lots of applications of similar rounds, by making each round
different enough to clobber any statistical regularity.  (Note how well
this worked against the differential attack on MD5 attempted by Berson
at Eurocrypt 92.) Kaliski and Robshaw's paper really discusses this in
terms of principles for designing new block ciphers.
 
     The big difference would seem to be how the functions are used.
Block ciphers aren't generally subjected to attacks where the opponent
tries to find two different keys that will map a given input to a given
output.  Hash functions in real applications don't generally have an
opponent given millions of input/output mappings, and challenged to
recover the message block that was used.
 
>        Jim Gillogly
 
     --John Kelsey, c445585@mizzou1.missouri.edu (for another week or two.)
 PGP 2.6 Key fingerprint =  4F E2 F4 21 10 0F BB 0A  03 D1 FE 06 A4 35 7E 36
 
-----BEGIN PGP SIGNATURE-----
Version: 2.6
 
iQCVAgUBLmTVQUHx57Ag8goBAQE3qwQAro9Zwp6pGlaWGvT7IORatehs69c9xYCk
OdysgPjRxRjSHbcfgW5kRZNCnZubneQRJ8iIzeMtPuZTisbc/Go3x+ptgw17xR7W
yUztR1ULS2luDqTEJEn1IfgugoXLs/vwhy4pFDWDv1CG3NwMWWVbp39gn5nplyGd
3CCNY3iL3x0=
=Nw3t
-----END PGP SIGNATURE-----
