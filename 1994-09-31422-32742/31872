Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!uhog.mit.edu!news.kei.com!yeshua.marcam.com!charnel.ecst.csuchico.edu!olivea!news.hal.COM!decwrl!netcomsv!ix.netcom.com!netnews
From: Sync_@ix.netcom.com (Sean Straw)
Newsgroups: comp.compression,sci.crypt
Subject: Re: PKZIP encryption "contest" password recovered
Date: 13 Sep 1994 00:04:46 GMT
Organization: Netcom
Lines: 38
Distribution: world
Message-ID: <352qau$o8d@ixnews1.ix.netcom.com>
NNTP-Posting-Host: ix-sr1-05.ix.netcom.com
Xref: msuinfo comp.compression:14467 sci.crypt:31872

In <2988450483.3.p01613@psilink.com> "phil reed" <p01613@psilink.com> writes: 


>You might be interested to know that when this information was posted
>on Compuserve in the PKWare forum, the PKpeople reaction was
>(paraphrased) "So what? He used known plaintext. Who is going to give 
>away any text to their encrypted file?"

Several years ago, I wrote a program for cracking shorter passwords in
a ZIP file (my mother mis-typed a password while adding a file to a
ZIP...), and it was slow.  About a year ago, I revisited the program
and added some refinements such that on a v1.x ZIP file, running on
a single 486DX2-80 box it flies through over 25,000 passwords per
second -- and could go faster if I added the UNZIP code to the
program itself, or even bothered to analize the ZIP local encryption
header further.

I heard that there was a fellow in France who had (supposedly) written
a tool which was capable of processing 500,000 passwords/sec on
something like a 486/33 machine, but never saw anything about it.  If
someone might happen to know about it, please let me know.

But back to the point -- I'm certainly not going to pass out any
of the text inside my encrypted file -- and if the file has been
compressed (not STORED, as was the PKWARE contest file), you're
very unlikely to happen across any plaintext.  And 15 hours of
waiting to see if that particular plaintext is going to pan out
could be painful.

Tho certainly, I'd like to see the procedure for performing the
plaintext attack, I doubt that it will prove particularily fruitful
for a wide variety of decryption attempts.

If I could get my hands on the Frenchman's algorythm, I'm sure I
could improve it's performance dramatically (My program operates
on sheer brute force, with very specific assembler optimizations --
there is no analysis of false starts and associated short-paths
to the next potential password).
