From: how@isl.stanford.edu (Dana How)
Newsgroups: comp.sources.misc
Subject: v29i128: descore - high performance DES core routines, Part01/01
Message-ID: <1992May21.133430.13381@aber.ac.uk>
Date: 21 May 92 13:34:30 GMT
Approved: aem@aber.ac.uk
X-Md4-Signature: a6861837e10c1a43b8778266ae5bc9b7

Submitted-by: how@isl.stanford.edu (Dana How)
Posting-number: Volume 29, Issue 128
Archive-name: descore/part01
Environment: 32BIT
Supersedes: descore: Volume 29, Issue 80

this is an update to desCore, a package containing just the core DES
functionality: specifying keys, encryption and decryption.
it remains the most efficient DES code posted, with the following 
encryption/decryption performance on a sparcstation 1:
        variant                 blocks/sec      bytes/sec       bits/sec
        with  2k tables         20,000+         160,000+        1,280,000+
        with 64k tables         30,000+         480,000+        3,840,000+
(not quite the 1Gb/sec reported for a GaAs chip at CICC '92 in Boston!)
omitting the initial and final permutation improves the performance even
more;  all four combinations of table size and IP/FP support are provided.

i have included a number of changes to increase performance on machines
with fewer registers and less cache than a sparc.  on a sparc there is no
change in performance since the code was already expressed in a minimum number
of RISC operations :-).  i have also shown how the code can take advantage of
CISC bitfield instructions and other CISC quirks.  and with this release,  you
can perform DES on a 386 entirely in the registers if you use gcc.

desCore is for those who want to implement such things as DES filters,
rather than UNIX password crackers. for this reason i have not spent much
effort yet to improve the performance of the key-setting routine.

i have attempted to keep the package small, portable and easily plugged-in
to kerberos-compatible code. i have NOT reimplemented all the other routines
in kerberos because i have nothing new to add -- that has already been done
at least three times by other people.

enjoy!                                          posted by how@isl.stanford.edu

