Path: msuinfo!caen!spool.mu.edu!uunet!mcsun!uknet!cam-cl!cam-cl!rja14
From: rja14@cl.cam.ac.uk (Ross Anderson)
Newsgroups: sci.crypt
Subject: Re: Cryptography to detect cheating
Keywords: copy/modify operations on programs
Message-ID: <1992May20.145340.14303@cl.cam.ac.uk>
Date: 20 May 92 14:53:40 GMT
Article-I.D.: cl.1992May20.145340.14303
References: <May.20.08.23.54.1992.29687@cadenza.rutgers.edu>
Sender: news@cl.cam.ac.uk (The news facility)
Reply-To: rja14@cl.cam.ac.uk (Ross Anderson)
Organization: U of Cambridge Computer Lab, UK
Lines: 27

In <May.20.08.23.54.1992.29687@cadenza.rutgers.edu>, Steve Masticola 
(masticol@cs.rutgers.edu) writes:


> It's occurred to me that one could detect copying of a programming
> assignment by keeping an asymmetrically encrypted edit history of the
> program file. If someone wanted to cheat by copying and changing
> variable names, this could be detected by matching prefixes of the
> edit histories among all assignments handed in.

> Is there a simpler way of doing this, that don't involve
> computationally costly public-key systems? Or are there any
> suggestions on how to prevent the histories themselves from being
> hacked?

IBM used to enforce the copyright on their PC ROM by using `birthmarks', such 
as the order in which registers were pushed and popped, to establish the
authorship of a piece of code. Literature departments do a lot of feature
extraction on text for similar purposes, eg trying to prove that Bacon
wrote Shakespeare.

Why don't you set a project whose goal is to do feature extraction on 
source code and either recognise someone by their `fist' or calculate a 
metric between any two implementations? The best submission you get can 
be posted to the net (or perhaps even sold for $$$)

Ross
