Xref: msuinfo comp.arch:30716 sci.crypt:8075
Path: msuinfo!netnews.upenn.edu!jvnc.net!darwin.sura.net!mips!zaphod.mps.ohio-state.edu!uunet.ca!geac!itcyyz!yrloc!rbe
From: rbe@yrloc.ipsa.reuter.COM (Robert Bernecky)
Newsgroups: comp.arch,sci.crypt
Subject: Re: The NSA Instruction
Message-ID: <1992May5.161434.29176@yrloc.ipsa.reuter.COM>
Date: 5 May 92 16:14:34 GMT
References: <29354@hoptoad.uucp> <KANEKO.92May2213648@axiom.icsi.Berkeley>
Reply-To: rbe@yrloc.ipsa.reuter.COM (Robert Bernecky)
Organization: SNake Island Research Inc, Toronto
Lines: 51

In article <KANEKO.92May2213648@axiom.icsi.Berkeley> kaneko@icsi.Berkeley.EDU (Seiji Kaneko) writes:
>>>>>> In article <29354@hoptoad.uucp>, gnu@hoptoad.uucp (John Gilmore) writes:
>>> It occurred to me to wonder just how many architectures have the following
>>> instructions:
>>> 	Population Count -- tell me how many 1-bits are in this word
>>> 	Find First One (or Zero) -- can speed up emulation
>>> 				    of popcount on machines without it
><>I've never encountered a machine that supported it
>
>Hitachi's M series(IBM 370 PCM in japan) has Find first one
>(FLM: find first left-most one.) instruction. Export version
>(ex. EX** series from HDS) don't.
>Though it has been supported for over 15 years, I've never seen
>any good examples of this instruction in commercial softwares.

I worked with the Hitachi Software Works, as a consultant, helping
them to port SHARP APL to VOS3 (their version of MVS), and to make it
support their vector facility. Some of the APL idioms which I recommended
we special case for speed were "reduction" and "indexof" on Booleans.

In particular: 
       +/B 
where B is a Boolean array (let's just talk vector here, although it
does perform in parallel on higher rank arrays) effectively sticks a 
plus sign between elements of B, and evaluates that expression. Therefore,
if B is 0 1 0 0 1 1 1, then +/B is the same as:
        0+1+0+0+1+1+1

The reduction code to trap plus, or, and, equal, not equal, max, minn, and
several other reductions on Booleans is trivial. It also runs Very Fast.

Indexof returns the first occurence of each element of the right argument
in the left argument. For example:
       'abcdefghijkl' indexof 'deaf' 
4 5 1 6 

For Booleans, it is simple the "find first zero (or one):
        0 0 0 0 1 0 1 indexof  1 1 0
5 5 0

Easy to special case. I wrote on this topic in the APL conference Proceedings
in 1973, about how I sped up indexof and membership in SHARP APL.
I think even IBM picked up my algorithms a bit later( Around 1988...?)
Bob


Robert Bernecky      rbe@yrloc.ipsa.reuter.com  bernecky@itrchq.itrc.on.ca 
Snake Island Research Inc  (416) 368-6944   FAX: (416) 360-4694 
18 Fifth Street, Ward's Island
Toronto, Ontario M5J 2B9 
Canada
