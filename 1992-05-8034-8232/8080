Xref: msuinfo comp.arch:30744 sci.crypt:8080
Path: msuinfo!uchinews!linac!pacific.mps.ohio-state.edu!zaphod.mps.ohio-state.edu!think.com!news.bbn.com!clements
From: clements@bbn.com (Bob Clements)
Newsgroups: comp.arch,sci.crypt
Subject: Re: The NSA Instruction
Message-ID: <l0fp6jINNouu@news.bbn.com>
Date: 6 May 92 13:53:23 GMT
References: <29354@hoptoad.uucp> <1992May5.124944.29070@trantor.harris-atd.com> <1992May6.020122.433@csrd.uiuc.edu>
Organization: Bolt Beranek and Newman Inc., Cambridge MA
Lines: 78
NNTP-Posting-Host: classic.bbn.com

In article <1992May6.020122.433@csrd.uiuc.edu> j-grout@uiuc.edu writes:
>>The DEC-20 (a 36-bit mainframe forerunner of the VAX) had a Find First
>>One and Jump instruction (back in 1979 when I last worked on one).
>
>This instruction was Jump if Find First One (JFFO)...  JFFO AC,E meant
>"if AC is non-zero, load a count of the leading zeros in AC into AC+1
>and jump to E; if AC is zero, clear AC+1 and don't jump"... my college
>had both a KA10-based DEC-10 and a KL10-based DEC-20 and JFFO was
>present on both of them, so if JFFO were added at a potential
>customer's request (as I heard back then), it must have been added a
>_long_ time ago...  To use a tight JFFO loop in disk block allocation,
>TENEX and TOPS-20 used 36-bit maps with one-bits for free blocks and
>zero-bits for allocated blocks.


OK, I've been resisting posting on this thread, since it gets covered
annually over in alt.folklore.computers, but I'll confirm this.

Authority-info:  Two of us, Alan Kotok and myself, designed the
logic of the KA-10.  Alan was the more senior of us, so I had to
do more of the bureaucratic paperwork and therefore got the
title of "Project Engineer".  (There was very little such
paperwork by today's standards, of course.)

The JFFO instruction was added for the KA-10 (the first of the
PDP-10 / DECsystem-10 processors).  It was _not_ present
in the PDP-6, as an earlier poster incorrectly said.

JFFO was added very late in the development cycle, at the request
of a potential customer.  The customer was a European telephone
exchange maker.  They wanted to use it to scan for changed bits
representing phone line occupancies.

This change was, of course, a new incompatibility with the predecessor
machine, the PDP-6, so we were reluctant to add the instruction.
We asked Marketing how many machines we would sell if we added it.
They said "At least 5 for a testbed, and hundreds if they decide
to go ahead with the design."

So we added it.  It was 1968, which was a leap year.  I wrote the
blurb for the internal Sales Newsletter, proclaiming that in
honor of Leap Year, we were increasing the number of instructions
in the machines instruction set from 365 to 366.  I still have
a copy of that newsletter somewhere, I think.

End result:  The potential customer never bought a single machine.

But we found lots of uses for the instruction.  One of the more
obscure was "Clear register 0 and jump" in one instruction.  This
worked because the stack register was essentially always register
17 (0x0f for you youngsters) and register+1 (mod 16) was zero.
The stack register always had a negative count in the left half,
so a JFFO using register 17 would always jump, and always find
the first ONE in bit 0, thereby putting the bit number (0) in
register 17+1=0.

And to close the loop back to the title of this thread, the NSA
did buy some PDP-10s later, of course, but they were not the
instigators of the JFFO instruction.

[For comp.arch: The implementation was a hardwired shift in a
loop, looking for the sign bit to become set.  There was a
pre-check for all zeroes in the high 18 bits. In that case, the
low half was copied into the high half and the shift counter was
preset to 18 instead of zero.  This saved a lot of unneeded
shifting and was fairly cheap because the laft-half-equals-zero
gate already existed.  I once disabled that gate intentionally,
making it always do the extra shifts.  This came up with the
right answer, but too slowly.  Then I challenged the diagnostic
programmers to find what I had broken.  They gave up after a
while.]

>John R. Grout
>University of Illinois, Urbana-Champaign
>Center for Supercomputing Research and Development


Bob Clements, K1BC, clements@bbn.com
