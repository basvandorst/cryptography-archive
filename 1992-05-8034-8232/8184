Path: msuinfo!caen!spool.mu.edu!uunet!boulder!ucsu!spot.Colorado.EDU!rlm
From: rlm@spot.Colorado.EDU (MORRISON ROBERT)
Newsgroups: sci.crypt
Subject: MD5 "birthday" math
Summary: How to compute "birthday paradox" with huge sets?
Keywords: MD5, birthday
Message-ID: <1992May21.155100.16225@ucsu.Colorado.EDU>
Date: 21 May 92 15:51:00 GMT
Article-I.D.: ucsu.1992May21.155100.16225
Sender: news@ucsu.Colorado.EDU (USENET News System)
Organization: University of Colorado, Boulder
Lines: 46
Nntp-Posting-Host: spot.colorado.edu


Last September, there was an article in Dr. Dobb's journal on using
MD5 as a hash function.  The author, Bruce Schneier, claimed that even
with a million strings to hash, you'd only get a failure (collision)
once each 2**128 comparisons.  I'd like to challange that claim, based
on the so-called birthday "paradox", but am having trouble finding a
way to do the necessary math.

The traditional formula, generalized, is --

               a!
     1 -  -----------
          (a**n)(a-n)!

where "a" is normally 365 but in this case 2**128, and "n" is the number
of samples (people, usually) and in this case 1,000,000.  The problem,
as you can guess, is computing (2**128)! or (2**128 - 10**6)!, though
(2**128)**(10**6) seems rather easy, though large.

One can re-arrange things a bit and end up with --

           (a-1) (a-2) (a-3) ... (a-n+1)
      1 -  -----------------------------
                     a**(n-1)

which is still pretty gruesome, requiring about one million multiplies
for the numerator and yielding, I think, a 38-million digit number.

One way to approximate the result *might* be to use floating-point numbers
and compute about a million ratios --

            (a-1)    (a-2)    (a-3)   ...   (a-n+1)
       1 -  -----    -----    -----         -------
              a        a        a              a

and then multiply the individual results (or, just as you go along).  This
seems to require floating-point with at least 128 significant bits in the
fraction; VAXen don't go this high even with REAL*16.  And I'd worry that
rounding, after that many operations, would invalidate the result.

So, does anybody have a way to either calculate the actual probability of a
collision of MD5 digests, or getting a decent estimate?

Thanks in advance.

Jim Kirkpatrick     jimkirk@corral.uwyo.edu
