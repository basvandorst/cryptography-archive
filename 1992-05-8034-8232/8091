Path: msuinfo!uchinews!ncar!destroyer!sol.ctr.columbia.edu!usc!cs.utexas.edu!sun-barr!news2me.ebay.sun.com!exodus.Eng.Sun.COM!lila.Eng.Sun.COM!wdorsey
From: wdorsey@lila.Eng.Sun.COM (William Dorsey)
Newsgroups: sci.crypt
Subject: Unix PGP
Date: 8 May 1992 05:58:25 GMT
Organization: Sun Microsystems Inc., Mountain View, CA
Lines: 40
Message-ID: <l0k641INN3pa@exodus.Eng.Sun.COM>
NNTP-Posting-Host: lila
Keywords: caution

I just downloaded the Unix version of PGP 1.0 from ghost.dsi.unimi.it
and noted a potentially serious problem with it.  The original MSDOS
version generated stochastic (?) random numbers by measuring the time
between users keystrokes.  This is not easy to do in a portable manner
on Unix machines, and oftentimes a high-resolution timer is not
available making the number of random bits that can be accumulated from
each keystroke small.

In order to avoid the entire problem of generating stochastic random
numbers in a manner generic enough for Unix, Branko Lancester, the
person who did this Unix port, bypasses the stochastic random number
generation, using pseudorandom number generation instead.  The algorithm
used is a modification of the Unix rand() function, which is known to be
weak.  Branko seeds the pseudorandom number generator with a random
string the user is prompted for.  I suspect this is an insufficient
condition to assure secure key generation.

Anyone that has access to the sources for the Unix rand() function and
the source for PGP 1.0 can easily determine the exact method being used
to generate psuedorandom numbers.  It becomes computationally simple to
solve for a user's private key when the public key is known, the key
pair was generated with psuedorandom numbers, and the algorithm used to
generate psuedorandom numbers is known.  Refer to "Cryptology and Data
Security [Denning]" for more details on how to do this.

Until someone updates the Unix version of PGP 1.0 to use stochastically
generated random numbers for key generation (for instance, by prompting
the user for a string of random characters), I would caution against
using it for sending data where security is truly important.  The
program could also use a bit of tweaking to allow it to work a bit more
gracefully in a Unix environment (it's not very smart about pathnames).
The port is a good starting point, however, and I appreciate Mr.
Lancester's effort in producing it.

Disclaimer:  Public Key Partners holds a number of patents granted by
	     the U.S. government that essentially give it a monopoly on
             public key cryptosystems in the U.S.  Use of PGP in the
	     U.S. may be in violation of the law.

- Bill Dorsey
