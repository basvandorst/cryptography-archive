Path: msuinfo!netnews.upenn.edu!jvnc.net!darwin.sura.net!mips!pacbell.com!network.ucsd.edu!ucsd.edu!brian
From: brian@ucsd.edu (Brian Kantor)
Newsgroups: sci.crypt
Subject: Personal Identifiers - a practical application
Summary: help!
Message-ID: <1081hpINN39d@network.ucsd.edu>
Date: 30 May 92 13:56:09 GMT
Organization: The Avant-Garde of the Now, Ltd.
Lines: 53
NNTP-Posting-Host: ucsd.edu

Here at UCSD we have quite a few separate unlinked databases containing data
relating to people (students and employees).  We are prohibited by law
from using the US Social Security Number as the key in new databases,
which is probably a good thing from the privacy standpoint.

What we'd like to do is generate some sort of personal identification
string that is used as a database key.  It should be algorithmically
derived from invariant personal data, so that if the user can't remember 
his identifier or find whatever piece of paper on which we gave it to him,
he can enter the data again and the ident can be regenerated.

I've looked into using cryptographic algorithms to generate the ident
from things like SSN, birthdate, etc, but the few I've looked at have
two disadvantages: the output is too long a string, and an exhaustive
search takes too little time.  Truncating the output string would seem
to make collisions (i.e., non-unique idents) even more likely, and
that's not acceptable.

For example, encrypting the SSN (apparently we can use it for input as
long as we don't STORE it) with MD5 in a naive implementation on a
typical desktop workstation is so fast that, given an ident, you can
search through all possible combinations of SSNs to find the one that
produced it in far less than an hour.  Even concatenating the birthdate
to the SSN is searchable in around an hour.  The result string is too
long for practical use anyway.

Ideally, I'd like to take some invariant personal data and encrypt it so
that the data is not derivable from the result.  That result would be
unique for the input data we're likely to see, and would be short enough
that it's not a burden to write it down, print it on staff and student
ID cards, or enter into a computer at login time.  It is *NOT* a secret
key; it's an identifier that can be used whenever you need to mechanically
identify a unique person.  Ideally, I'd like something that's 8 to 10
printable characters.

[Invariant personal data are things that don't normally change over a
person's lifetime, and which taken together, are unique to that person.
Preferrably, they are things the person knows without having to look it
up, and are items that the person has already supplied the University
and are on file in one of the secure databases, so that we can generate
the majority of these without insisting that people enter the data for
this purpose.  Name is *NOT* one of these because of marriage customs
and such.]

I'm stumped!  Maybe I just missed something obvious?

Suggestions as to both algorithms to use and what data we can stuff into
it would be greatly appreciated.  Pointers to references would be good too.

	Brian Kantor
		UCSD Network Operations		(619) 534-6865
		UCSD C-024, La Jolla, CA 92093-0124 USA	fax: 619 534 1746
		brian@ucsd.edu	BRIAN@UCSD ucsd!brian
