Xref: msuinfo comp.arch:30560 sci.crypt:8059
Path: msuinfo!netnews.upenn.edu!jvnc.net!darwin.sura.net!gatech!news.byu.edu!news.mtholyoke.edu!nic.umass.edu!dime!dime.cs.umass.edu!moss
From: moss@cs.umass.edu (Eliot Moss)
Newsgroups: comp.arch,sci.crypt
Subject: Re: The NSA Instruction
Message-ID: <MOSS.92May1085531@ibis.cs.umass.edu>
Date: 1 May 92 12:55:31 GMT
References: <29354@hoptoad.uucp> <1992Apr29.214606.28406@dcc.uchile.cl>
	<1992Apr30.042559.17794@craycos.com>
	<1992Apr30.074159.12226@m.cs.uiuc.edu>
	<peterd.704657586@pjd.dev.cdx.mot.com>
Sender: news@dime.cs.umass.edu
Reply-To: moss@cs.umass.edu
Followup-To: comp.arch
Organization: Dept of Comp and Info Sci, Univ of Mass (Amherst)
Lines: 42
In-reply-to: peterd@pjd.dev.cdx.mot.com's message of 30 Apr 92 18:13:06 GMT

Folks have mentioned the "HAKMEM trick/technique" for computing population
count without a pop count instruction, with the approach being to combine
adjacent digits, and then do a reduction mod (2^k)-1, where k is the size of
the digit accumulated. If divide is slow, and multiply is fast and produces a
double length result, you can accomplish the same effect as follows. Let's
suppose that you are counting a 32-bit word and have accumulated 8 digits of 4
bits each. In hexadecimal this would look like:

	0p0q0r0s for some digits p, q, r, and s

Now multiply this times 01010101. If we write it out long form as in
grade school, we get the following:

            0p0q0r0s
          x 01010101
            --------
            0p0q0r0s
           00000000
          0p0q0r0s
         00000000
        0p0q0r0s
       00000000
      0p0q0r0s
     00000000
     ---------------
    zzyyxxwwvvuutt0s

Note that vv is the sum of the digits that we originally desired. Also note
that there can be no overflow into or out of vv, by design. Further, we do not
even need the double length result, so long as we can get the correct low
order bits.

Whether this is faster than oher techniques depends on your hardware of
course, but I thought folks might find it interesting.
--

		J. Eliot B. Moss, Assistant Professor
		Department of Computer Science
		Lederle Graduate Research Center
		University of Massachusetts
		Amherst, MA  01003
		(413) 545-4206, 545-1249 (fax); Moss@cs.umass.edu
