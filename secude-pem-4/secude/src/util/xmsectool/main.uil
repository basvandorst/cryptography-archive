!OSF/Motif: @(#)main.uil	2.2	93/10/07
!********************************************************************
!********************************************************************
!
!  SecuDE Release 4.3 (GMD)
!
!*******************************************************************
! Copyright (C) 1991, GMD. All rights reserved.                    *
!                                                                  *
!                                                                  *
!                         NOTICE                                   *
!                                                                  *
!    Acquisition, use, and distribution of this module             *
!    and related materials are subject to restrictions             *
!    mentioned in each volume of the documentation.                *
!                                                                  *
!*******************************************************************

!-----------------------main.uil-----------------------------------*
!                                                                  *
!------------------------------------------------------------------*
! GMD Darmstadt Institute for System Technic (I2)                  *
! Rheinstr. 75 / Dolivostr. 15                                     *
! 6100 Darmstadt                                                   *
! Project ``Secure DFN'' 1990 / "SecuDE" 1991/92/93                *
! Grimm/Nausester/Schneider/Viebeg/Vollmer 	                   *
! Luehe/Surkau/Reichelt/Kolletzki		                   *
!------------------------------------------------------------------*
!                                                                  *
! PROGRAM   xmst            VERSION   1.0                          *
!                              DATE   07.10.1993                   *
!                                BY   Kolletzki                    *
!                                                                  *
! MODULE    main.uil                                               *
!                                                                  *
! DESCRIPTION                                                      *
! 	user interface language program for sectool widgets        *
!                                                                  *
!------------------------------------------------------------------*


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!				!!
!!	SecTool Main Module	!!
!!				!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

module sectool 
    version = 'v2.2'
    names = case_sensitive



!!!!!!!!!!!!!!!!!!!!!!!!!!
!!			!!
!!	Values		!!
!!			!!
!!!!!!!!!!!!!!!!!!!!!!!!!!

include file 'values.uil';


!!!!!!!!!!!!!!!!!!!!!!!!!!
!!			!!
!!	Argument Lists	!!
!!			!!
!!!!!!!!!!!!!!!!!!!!!!!!!!

include file 'args.uil';


!!!!!!!!!!!!!!!!!!!!!!!!!!
!!			!!
!!	Icons		!!
!!			!!
!!!!!!!!!!!!!!!!!!!!!!!!!!

include file 'icons.uil';


!!!!!!!!!!!!!!!!!!!!!!!!!!
!!			!!
!!	Callbacks	!!
!!			!!
!!!!!!!!!!!!!!!!!!!!!!!!!!

include file 'callb.uil';





!!!!!!!!!!!!!!!!!!!!!!!!!!
!!			!!
!!	Dialogs		!!
!!			!!
!!!!!!!!!!!!!!!!!!!!!!!!!!

include file 'dialog.uil';




!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!				!!
!!	Main Window Stuff	!!
!!				!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

object
    stMainShell : XmMainWindow {
       	controls {
            XmMenuBar     st_menubar;
            XmForm        st_form;

	    unmanaged XmPromptDialog 		pin_dialog;
	    unmanaged XmPromptDialog 		chpin_dialog;
	    unmanaged XmPromptDialog 		addalias_dialog;
	    unmanaged XmSelectionDialog 	objectselection_dialog;
	    unmanaged XmTemplateDialog 		debug_dialog;
	    unmanaged XmTemplateDialog 		viewer_dialog;
	    unmanaged XmTemplateDialog 		clipboard_dialog;
	    unmanaged XmTemplateDialog 		config_dialog;

	    unmanaged XmInformationDialog 	ok_dialog;
	    unmanaged XmErrorDialog 		abort_dialog;
	    unmanaged XmErrorDialog 		cont_quit_dialog;
	    unmanaged XmErrorDialog 		retr_quit_dialog;
	    unmanaged XmWarningDialog 		cont_canc_dialog;
	    unmanaged XmWarningDialog 		save_loose_dialog;
	    unmanaged XmWarningDialog 		cont_show_dialog;
	    unmanaged XmTemplateDialog 		file_dialog;
        };
 	callbacks {
	    XmNdestroyCallback = procedure st_destroy_cb();
	};
   };



!!!!!!!!!!!!
!!
!!	Form
!!

object
    st_form : XmForm {
	arguments {
	    arguments	main_form_args;
	};
	controls {
	    XmForm	st_topform;
	    XmForm	st_buttonform;
 	    XmForm	st_pseform;
	    XmForm	st_pkekform;
	};
    };
	


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!				!!
!!	Main Form Stuff		!!
!!				!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!




!!!!!!!!!!!!!!!!!!!
!!
!!	Text fields
!!

object
    st_topform : XmForm {
	arguments {
	    arguments	top_form_args;
	};
	controls {
	    XmForm	st_top_leftform;
	    XmForm	st_top_middleform;
	    XmForm	st_top_rightform;
	};
    };

object
    st_top_leftform : XmForm {
	arguments {
	    arguments	topleft_form_args;
	};
	controls {
	    XmLabel 		st_ca_label;
	    XmTextField		st_ca_textfield;
	    XmLabel 		st_pse_label;
	    XmTextField		st_pse_textfield;
	};
    };
object
    st_ca_label : XmLabel {
	arguments {
    	    arguments	toplabel_args;
	    XmNtopAttachment = XmATTACH_FORM;
    	    XmNlabelString =  compound_string ("CA:");
	};
    };
object
    st_pse_label : XmLabel {
	arguments {
    	    arguments	toplabel_args;
	    XmNbottomAttachment = XmATTACH_FORM;
    	    XmNlabelString =  compound_string ("PSE:");
	};
    };
    
object
    st_ca_textfield : XmTextField {
	arguments {
	    arguments	show_textfield_args;
	    XmNtopAttachment = XmATTACH_FORM;
	    XmNleftAttachment = XmATTACH_WIDGET;
	    XmNleftWidget = XmLabel st_ca_label;
	};
    };
object
    st_pse_textfield : XmTextField {
	arguments {
	    arguments	show_textfield_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmTextField st_ca_textfield;
	    XmNbottomAttachment = XmATTACH_FORM;
	    XmNleftAttachment = XmATTACH_WIDGET;
	    XmNleftWidget = XmLabel st_pse_label;
	};
    };
	
object
    st_top_middleform : XmForm {
	arguments {
	    arguments	topmiddle_form_args;
	};
	controls {
	    XmLabel 		st_owner_label;
	    XmTextField		st_owner_textfield;
	    XmLabel		st_dname_label;
	    XmTextField		st_dname_textfield;
	};
    };
    
object
    st_owner_label : XmLabel {
	arguments {
    	    arguments	toplabel_args;
	    XmNtopAttachment = XmATTACH_FORM;
    	    XmNlabelString =  compound_string ("Owner:");
	};
    };
object
    st_dname_label : XmLabel {
	arguments {
    	    arguments	toplabel_args;
	    XmNbottomAttachment = XmATTACH_FORM;
    	    XmNlabelString =  compound_string ("DName:");
	};
    };
object
    st_owner_textfield : XmTextField {
	arguments {
	    arguments	show_textfield_args;
	    XmNtopAttachment = XmATTACH_FORM;
	    XmNleftAttachment = XmATTACH_WIDGET;
	    XmNleftWidget = XmLabel st_owner_label;
	};
    };
object
    st_dname_textfield : XmTextField {
	arguments {
	    arguments	show_textfield_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmTextField st_owner_textfield;
	    XmNbottomAttachment = XmATTACH_FORM;
	    XmNleftAttachment = XmATTACH_WIDGET;
	    XmNleftWidget = XmLabel st_dname_label;
	};
    };
	   
object
    st_top_rightform : XmForm {
	arguments {
	    arguments	topright_form_args;
	};
	controls {
	    XmFrame	st_psetype_frame;
	    XmFrame	st_pairs_frame;
	};
    };
	    
object
    st_psetype_frame : XmFrame {
        arguments {
	    arguments	statusframe_args;
	    XmNleftAttachment = XmATTACH_FORM;
	};
	controls {
	    XmDrawnButton	st_psetype_drawnbutton;
	};
    };

object
    st_pairs_frame : XmFrame {
        arguments {
	    arguments	statusframe_args;
	    XmNleftAttachment = XmATTACH_WIDGET;
	    XmNleftWidget = XmFrame st_psetype_frame;
	    XmNrightAttachment = XmATTACH_FORM;
	};
	controls {
	    XmDrawnButton	st_pairs_drawnbutton;
	};
    };

object
    st_psetype_drawnbutton : XmDrawnButton {
        arguments {
	    arguments	statusdrawnbutton_args;
	};
	callbacks {
	    XmNactivateCallback = procedure st_psetype_drawnbutton_cb();
	};
    };

object
    st_pairs_drawnbutton: XmDrawnButton {
        arguments {
            arguments	statusdrawnbutton_args;
	};
	callbacks {
	    XmNactivateCallback = procedure st_psetype_drawnbutton_cb();
	};
    };



!!!!!!!!!!!!!!!!
!!
!!	PSE List
!!

object
    st_pseform : XmForm {
	arguments {
	    arguments	pse_form_args;
	};
	controls {
	    XmForm {
		arguments {
		    arguments	pse_form2_args;
		};
		controls {
		    XmLabel		st_pselist_label;
		    XmPushButton	st_pselist_button;
		    XmScrolledList	st_pselist;
		};
	    };
	};
    };

object
    st_pselist_label : XmLabel {
	arguments {
	    arguments	listlabel_args;
	    XmNlabelString = 'Personal Security Environment';
	};
    };

object
    st_pselist_button : XmPushButton {
	arguments {
	    arguments	listpushbutton_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmLabel st_pselist_label;
	    XmNlabelString = '  Object          Created              Changed              Size';
	    XmNalignment = XmALIGNMENT_BEGINNING;
	};
	callbacks {
	    XmNactivateCallback = procedure st_pselist_button_cb();
	};
    };

object
    st_pselist : XmScrolledList {
	arguments {
	    arguments	scrolledlist_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmPushButton st_pselist_button;
	    XmNbottomAttachment = XmATTACH_FORM;
	};
	callbacks {
	    XmNbrowseSelectionCallback = procedure st_pselist_action_cb();
	    XmNdefaultActionCallback = procedure st_pselist_action_cb();
	};
    };



!!!!!!!!!!!!!!!!!!
!!
!!	PK/EK List
!!

object
    st_pkekform : XmForm {
	arguments {
	    arguments	pkek_form_args;
	};
	controls {
	    XmForm {
		arguments {
	    	    arguments	pkek_form2_args;
		};
		controls {
	    	    XmLabel 		st_pkek_label;
	    	    XmPanedWindow	st_pkekpaned;
		};
	    };
	};
    };

object
    st_pkek_label : XmLabel {
	arguments {
	    arguments	listlabel_args;
	    XmNlabelString = 'Trusted Public Keys';
	};
    };

object
    st_pkekpaned : XmPanedWindow {
	arguments {
	    arguments	panedwindow_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmLabel st_pkek_label;
	};
	controls {
	    		XmForm	st_pk_form;
	    unmanaged	XmForm 	st_ek_form;
	    		XmForm 	st_pca_form;
	};
    };

object
    st_pk_form : XmForm {
	arguments {
	    arguments	paned_form_args;    
	};
	controls {
	    XmPushButton	st_pklist_button;
	    XmScrolledList	st_pklist;
	};
    };

object
    st_pklist_button : XmPushButton {
	arguments {
	    arguments	listpushbutton_args;
	    XmNtopAttachment = XmATTACH_FORM;
	    XmNlabelString = 'PK :  Subject      Issuer              SerialNo';
	    XmNalignment = XmALIGNMENT_BEGINNING;
	};
	callbacks {
	    XmNactivateCallback = procedure st_pklist_button_cb();
	};
    };

object
    st_pklist : XmScrolledList {
	arguments {
	    arguments	scrolledlist_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmPushButton st_pklist_button;
	    XmNbottomAttachment = XmATTACH_FORM;
	};
	callbacks {
	    XmNbrowseSelectionCallback = procedure st_pklist_action_cb();
	    XmNdefaultActionCallback = procedure st_pklist_action_cb();
	};
    };

object
    st_ek_form : XmForm {
	arguments {	    
	    arguments	paned_form_args;    
	};
	controls {
	    XmPushButton	st_eklist_button;
	    XmScrolledList	st_eklist;
	};
    };

object
    st_eklist_button : XmPushButton {
	arguments {
	    arguments	listpushbutton_args;
	    XmNlabelString = 'EK :  Subject      Issuer              SerialNo';
	    XmNalignment = XmALIGNMENT_BEGINNING;
	};
	callbacks {
	    XmNactivateCallback = procedure st_eklist_button_cb();
	};
    };

object
    st_eklist : XmScrolledList {
	arguments {
	    arguments	scrolledlist_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmPushButton st_eklist_button;
	    XmNbottomAttachment = XmATTACH_FORM;
	};
	callbacks {
	    XmNbrowseSelectionCallback = procedure st_eklist_action_cb();
	    XmNdefaultActionCallback = procedure st_eklist_action_cb();
	};
    };

object
    st_pca_form : XmForm {
	arguments {	    
	    arguments	paned_form_args;    
	};
	controls {
	    XmPushButton	st_pcalist_button;
	    XmScrolledList	st_pcalist;
	};
    };

object
    st_pcalist_button : XmPushButton {
	arguments {
	    arguments	listpushbutton_args;
	    XmNlabelString = 'PCA : Subject      Issuer              SerialNo';
	    XmNalignment = XmALIGNMENT_BEGINNING;
	};
	callbacks {
!	    XmNactivateCallback = procedure st_pcalist_button_cb();
	};
    };

object
    st_pcalist : XmScrolledList {
	arguments {
	    arguments	scrolledlist_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmPushButton st_pcalist_button;
	    XmNbottomAttachment = XmATTACH_FORM;
	};
	callbacks {
!	    XmNbrowseSelectionCallback = procedure st_pcalist_action_cb();
!	    XmNdefaultActionCallback = procedure st_pcalist_action_cb();
	};
    };



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!
!!	Function Drawn PushButtons
!!

object
    st_buttonform : XmForm {
	arguments {
	    arguments	button_form_args;
	};
	controls {
	    XmScrolledWindow {
	        arguments {
		    arguments	scrolledwindow_args;
	        };
	        controls {
		    XmForm {
		    	arguments {
			    arguments	scrolled_form_args;
		    	};
		    	controls {
			    XmDrawnButton	st_copy_drawnbutton;
			    XmDrawnButton	st_paste_drawnbutton;
			    XmDrawnButton	st_cut_drawnbutton;
			    XmDrawnButton	st_undo_drawnbutton;
			    XmSeparator 	st_buttonform_separator;
			    XmDrawnButton	st_show_drawnbutton;
			    XmDrawnButton	st_help_drawnbutton;
			    XmDrawnButton	st_create_drawnbutton;
			    XmDrawnButton	st_rename_drawnbutton;
			    XmDrawnButton	st_file_drawnbutton;
			    XmDrawnButton	st_print_drawnbutton;
    			};
		    };
		};
	    };
	};
    };

object
    st_copy_drawnbutton : XmDrawnButton {
	arguments {
	    arguments	left_drawnbutton_args;
	    XmNtopAttachment = XmATTACH_FORM;
	    XmNrightWidget = XmDrawnButton st_paste_drawnbutton;
	    XmNbackgroundPixmap = copy_icon;
	};
	callbacks {
	    XmNactivateCallback = procedure st_copy_drawnbutton_cb();
	};
    };

object
    st_paste_drawnbutton : XmDrawnButton {
	arguments {
	    arguments	right_drawnbutton_args;
	    XmNtopAttachment = XmATTACH_FORM;
	    XmNbackgroundPixmap = paste_icon;
	};
	callbacks {
	    XmNactivateCallback = procedure st_paste_drawnbutton_cb();
	};
    };

object
    st_cut_drawnbutton : XmDrawnButton {
	arguments {
	    arguments	left_drawnbutton_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmDrawnButton st_copy_drawnbutton;
	    XmNrightWidget = XmDrawnButton st_undo_drawnbutton;
	    XmNbackgroundPixmap = cut_icon;
	};
	callbacks {
	    XmNactivateCallback = procedure st_cut_drawnbutton_cb();
	};
    };

object
    st_undo_drawnbutton : XmDrawnButton {
	arguments {
	    arguments	right_drawnbutton_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmDrawnButton st_paste_drawnbutton;
	    XmNbackgroundPixmap = undo_icon;
	};
	callbacks {
	    XmNactivateCallback = procedure st_undo_drawnbutton_cb();
	};
    };
    
object
    st_buttonform_separator : XmSeparator {
	arguments {
	    XmNseparatorType = XmSHADOW_ETCHED_OUT;
	    XmNshadowThickness = 5;
	    XmNleftAttachment = XmATTACH_FORM;
	    XmNrightAttachment = XmATTACH_FORM;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmDrawnButton st_cut_drawnbutton;
	    XmNbackgroundPixmap = undo_icon;
	};
    };

object
    st_show_drawnbutton : XmDrawnButton {
	arguments {
	    arguments	left_drawnbutton_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmSeparator st_buttonform_separator;
	    XmNrightWidget = XmDrawnButton st_help_drawnbutton;
	    XmNbackgroundPixmap = show_icon;
	};
	callbacks {
	    XmNactivateCallback = procedure st_show_drawnbutton_cb();
	};
    };

object
    st_help_drawnbutton : XmDrawnButton {
	arguments {
	    arguments	right_drawnbutton_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmSeparator st_buttonform_separator;
	    XmNbackgroundPixmap = help_icon;
	};
	callbacks {
	    XmNactivateCallback = procedure st_help_drawnbutton_cb();
	};
    };

object
    st_create_drawnbutton : XmDrawnButton {
	arguments {
	    arguments	left_drawnbutton_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmDrawnButton st_show_drawnbutton;
	    XmNrightWidget = XmDrawnButton st_rename_drawnbutton;
	    XmNbackgroundPixmap = create_icon;
	};
	callbacks {
	    XmNactivateCallback = procedure st_create_drawnbutton_cb();
	};
    };

object
    st_rename_drawnbutton : XmDrawnButton {
	arguments {
	    arguments	right_drawnbutton_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmDrawnButton st_help_drawnbutton;
	    XmNbackgroundPixmap = rename_icon;
	};
	callbacks {
	    XmNactivateCallback = procedure st_rename_drawnbutton_cb();
	};
    };

object
    st_file_drawnbutton : XmDrawnButton {
	arguments {
	    arguments	left_drawnbutton_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmDrawnButton st_create_drawnbutton;
	    XmNrightWidget = XmDrawnButton st_print_drawnbutton;
	    XmNbackgroundPixmap = file_icon;
	};
	callbacks {
	    XmNactivateCallback = procedure st_file_drawnbutton_cb();
	};
    };

object
    st_print_drawnbutton : XmDrawnButton {
	arguments {
	    arguments	right_drawnbutton_args;
	    XmNtopAttachment = XmATTACH_WIDGET;
	    XmNtopWidget = XmDrawnButton st_rename_drawnbutton;
	    XmNbackgroundPixmap = print_icon;
	};
	callbacks {
	    XmNactivateCallback = procedure st_print_drawnbutton_cb();
	};
    };


		
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!		
!!				!!
!!	Main Menu Stuff		!!			
!!				!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!
!!	MenuBar
!!

object
    st_menubar : XmMenuBar {
	arguments {
            XmNorientation = XmHORIZONTAL;
	    XmNmenuHelpWidget = XmCascadeButton st_help_button;
	};
	controls {
            		XmCascadeButton	st_tools_button;
            		XmCascadeButton	st_ca_button;
            		XmCascadeButton	st_pse_button;
            		XmCascadeButton	st_utilities_button;
            		XmCascadeButton	st_properties_button;
            		XmCascadeButton	st_help_button;
        };
    };


!!
!!	CascadeButtons
!!

object
    st_tools_button : XmCascadeButton {
	arguments {
	    XmNlabelType = XmPIXMAP;
	    XmNlabelPixmap = st_tools_icon;
	};
        controls {
            XmPulldownMenu {
        	controls {
            	   	XmCascadeButton 	st_about_button;
    	    		XmPushButton 		st_directory_button;
            	    	XmPushButton 		st_alias_button;
            	    	XmPushButton 		st_keypool_button;
    	    		XmSeparator {};
    	    		XmPushButton 		st_viewer_button;
    	    		XmPushButton 		st_debug_button;
    	    		XmPushButton 		st_clipboard_button;
    	    		XmPushButton 		st_config_button;
    	    		XmSeparator {};
    	    		XmPushButton 		st_xlock_button;
    	    		XmSeparator {};
    	    		XmPushButton 		st_quit_button;
		};
	    };
        };
    };

object
    st_directory_button : XmPushButton {
	arguments {
	    XmNlabelString = 'Directory Browser';
	};
	callbacks { 
	    XmNactivateCallback = procedure st_directory_button_cb();
	};
    };

object
    st_alias_button : XmPushButton {
	arguments {
	    XmNlabelString = 'Alias Editor';
	};
	callbacks { 
	    XmNactivateCallback = procedure st_alias_button_cb();
	};
    };

object
    st_keypool_button : XmPushButton {
	arguments {
	    XmNlabelString = 'Keypool';
	};
	callbacks {
	    XmNactivateCallback = procedure st_keypool_button_cb();
	};
    };

object
    st_viewer_button : XmPushButton {
	arguments {
	    XmNlabelString = 'Viewer...';
	};
	callbacks {
	    XmNactivateCallback = procedure st_viewer_button_cb();
	};
    };

object
    st_debug_button : XmPushButton {
	arguments {
	    XmNlabelString = 'Error Log...';
	};
	callbacks {
	    XmNactivateCallback = procedure st_debug_button_cb();
	};
    };

object
    st_clipboard_button : XmPushButton {
	arguments {
	    XmNlabelString = 'Clipboard...';
	};
	callbacks { 
	    XmNactivateCallback = procedure st_clipboard_button_cb();
	};
    };

object
    st_config_button : XmPushButton {
	arguments {
	    XmNlabelString = 'Configuration...';
	};
	callbacks { 
	    XmNactivateCallback = procedure st_config_button_cb();
	};
    };

object
    st_xlock_button : XmPushButton {
	arguments { 
	    XmNlabelString = 'Lock Screen';
	};
	callbacks { 
	    XmNactivateCallback = procedure st_xlock_button_cb();
	};
    };

object
    st_about_button : XmCascadeButton {
	arguments {
	    XmNlabelString = 'About';
	};
	controls {
	    XmPulldownMenu {
		controls {
		    XmPushButton {
			arguments {
			    XmNlabelString = compound_string('',separate=true) &
					     compound_string('        SecTool 1.0',separate=true) &
					     compound_string('        for SecuDE 4.3',separate=true) &
					     compound_string(' (c)GMD Darmstadt 1994 ',separate=true) & '';
			};
		    };
		};
	    };
        };
    };

object
    st_quit_button : XmPushButton {
	arguments { 
	    XmNlabelString = 'Quit';
	};
	callbacks { 
	    XmNactivateCallback = procedure st_quit_button_cb();
	};
    };






object
    st_ca_button : XmCascadeButton {
	arguments {
	    XmNlabelString = 'CA';
	};
        controls {
            XmPulldownMenu {
        	controls {
		};
	    };
        };
    };

object
    st_pse_button : XmCascadeButton {
	arguments {
	    XmNlabelString = 'PSE';
	};
        controls {
            XmPulldownMenu {
		arguments { 
		    XmNtearOffModel = XmTEAR_OFF_ENABLED;
		};
        	controls {
	    	    XmCascadeButton 	st_general_button;
	    	    XmSeparator {};
	    	    XmCascadeButton 	st_expert_button;
            	};
            };
        };
    };

object
    st_utilities_button : XmCascadeButton {
	arguments {
	    XmNlabelString = 'Utilities';
	};
        controls {
            XmPulldownMenu {
        	controls {
		};
            };
        };
    };

object
    st_properties_button : XmCascadeButton {
	arguments {
	    XmNlabelString = 'Properties';
	};
        controls {
            XmPulldownMenu {
		arguments { 
		    XmNtearOffModel = XmTEAR_OFF_ENABLED;
		};
         	controls {
		    	  	XmCascadeButton {
					arguments {
					    XmNlabelString = 'Nice level';
					};
					controls {
				 	   XmPulldownMenu {
						arguments {
						    XmNtearOffModel = XmTEAR_OFF_ENABLED;
						};
						controls {
						    XmToggleButton st_nice_low_toggle;
						    XmToggleButton st_nice_medium_toggle;
						    XmToggleButton st_nice_high_toggle;
						};
					    };
				        };
			    	    };
	    	    		XmToggleButton st_debug_toggle;

		    unmanaged	XmCascadeButton st_authentication_button;
	    	    unmanaged	XmToggleButton st_crypt_toggle;
		};
            };
        };
    };



object
    st_authentication_button : XmCascadeButton {
	arguments {
	    XmNlabelString = 'Authentication Method';
	};
	controls {
	    XmPulldownMenu {
		arguments {
		    XmNtearOffModel = XmTEAR_OFF_ENABLED;
		};
		controls {
		    XmToggleButton st_auth_none_toggle;
		    XmToggleButton st_auth_simple_toggle;
		    XmToggleButton st_auth_strong_toggle;
		};
	    };
	};
    };





!!
!! Nice level is set to LOW
!!
object st_nice_low_toggle : XmToggleButton {
    arguments {
	XmNlabelString = 'Low';
	XmNindicatorType = XmONE_OF_MANY;
	XmNset = true;
    };
    callbacks { 
	XmNvalueChangedCallback = procedure st_properties_cb();
    };
};
object st_nice_medium_toggle : XmToggleButton {
    arguments {
	XmNlabelString = 'Medium';
	XmNindicatorType = XmONE_OF_MANY;
	XmNset = false;
    };
    callbacks { 
	XmNvalueChangedCallback = procedure st_properties_cb();
    };
};
object st_nice_high_toggle : XmToggleButton {
    arguments {
	XmNlabelString = 'High';
	XmNindicatorType = XmONE_OF_MANY;
	XmNset = false;
    };
    callbacks { 
	XmNvalueChangedCallback = procedure st_properties_cb();
    };
};

!!
!! Crypt device is set to SCT
!!
object st_crypt_toggle : XmToggleButton {
    arguments {
	XmNlabelString = 'SCT verifies/decrypts';
	XmNset = true;
    };
    callbacks { 
	XmNvalueChangedCallback = procedure st_properties_cb();
    };
};

!!
!! Authentication/Debug toggles must be set to false: They are set by init_secude() !!!
!!
object st_auth_none_toggle : XmToggleButton {
    arguments {
	XmNlabelString = 'None';
	XmNindicatorType = XmONE_OF_MANY;
	XmNset = false;
    };
    callbacks { 
	XmNvalueChangedCallback = procedure st_properties_cb();
    };
};
object st_auth_simple_toggle : XmToggleButton {
    arguments {
	XmNlabelString = 'Simple';
	XmNindicatorType = XmONE_OF_MANY;
	XmNset = false;
    };
    callbacks { 
	XmNvalueChangedCallback = procedure st_properties_cb();
    };
};
object st_auth_strong_toggle : XmToggleButton {
    arguments {
	XmNlabelString = 'Strong';
	XmNindicatorType = XmONE_OF_MANY;
	XmNset = false;
    };
    callbacks { 
	XmNvalueChangedCallback = procedure st_properties_cb();
    };
};

object st_debug_toggle : XmToggleButton {
    arguments {
	XmNlabelString = 'Show debug information';
	XmNset = false;
    };
    callbacks { 
	XmNvalueChangedCallback = procedure st_properties_cb();
    };
};


object
    st_general_button : XmCascadeButton {
	arguments {
	    XmNlabelString = 'General';
	};
	controls {
	    XmPulldownMenu {
		controls {
		    XmPushButton	st_checkpse_button;
		    XmPushButton 	st_trustpath_button;
		    XmPushButton 	st_verify_button;
		    XmSeparator {};
		    XmPushButton {
			arguments {
			    XmNlabelString = 'Change PIN...';
			};
	    		callbacks {
			    XmNactivateCallback = procedure st_pse_changepin_button_cb();
			};
		    };
		};
	    };
	};
    };

object
    st_checkpse_button : XmPushButton {
	arguments {
	    XmNlabelString = 'Check PSE';
	};
    	callbacks {
	    XmNactivateCallback = procedure st_pse_check_button_cb();
	};
    };

object
    st_trustpath_button : XmPushButton {
	arguments {
	    XmNlabelString = 'Check Trust Path';
	};
    	callbacks {
	    XmNactivateCallback = procedure st_pse_check_button_cb();
	};
    };

object
    st_verify_button : XmPushButton {
	arguments {
	    XmNlabelString = 'Verify';
	};
    	callbacks {
	    XmNactivateCallback = procedure st_pse_check_button_cb();
	};
    };

object
    st_expert_button : XmCascadeButton {
	arguments {
	    XmNlabelString = 'Expert';
	};
	controls {
	    XmPulldownMenu {
		controls {
		    XmPushButton {
			arguments {
			    XmNlabelString = 'Generate New Key...';
			};
	    		callbacks {
!			    XmNactivateCallback = procedure st_pse_generate_button_cb();
			};
		    };
		    XmPushButton {
			arguments {
			    XmNlabelString = 'Split Cross Certificate...';
			};
	    		callbacks {
!			    XmNactivateCallback = procedure st_pse_splitcrosscert_button_cb();
			};
		    };
		    XmPushButton {
			arguments {
			    XmNlabelString = 'Certificate to Root...';
			};
	    		callbacks {
!			    XmNactivateCallback = procedure st_pse_cert2root_button_cb();
			};
		    };
		    XmPushButton {
			arguments {
			    XmNlabelString = 'Prototype Certificate...';
			};
	    		callbacks {
!			    XmNactivateCallback = procedure st_pse_prototypecert_button_cb();
			};
		    };
		};
	    };
	};
    };
	



object
    st_help_button : XmCascadeButton {
	arguments {
	    XmNlabelString = 'Help';
	};
        controls {
            XmPulldownMenu {
        	controls {
	    	    XmPushButton {
			arguments {
		    	    XmNlabelString = 'Overview...';
			};
		    };
		    XmPushButton {
			arguments {
			    XmNlabelString = 'Tutorial...';
			};
		    };
            	};
            };
        };
    };




!!!!!!!!!!!!!!!!!!!!!!!!!!
!!			!!
!!	AliasTool  	!!
!!			!!
!!!!!!!!!!!!!!!!!!!!!!!!!!

include file 'alias.uil';






!!
!!	sectool
!!
!!!!!!!!!!!!!!!


end module;




