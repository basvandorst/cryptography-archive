!OSF/Motif: @(#)dialog.uil	2.2	93/10/07
!********************************************************************
!********************************************************************
!
!  SecuDE Release 4.2 (GMD)
!
!*******************************************************************
! Copyright (C) 1991, GMD. All rights reserved.                    *
!                                                                  *
!                                                                  *
!                         NOTICE                                   *
!                                                                  *
!    Acquisition, use, and distribution of this module             *
!    and related materials are subject to restrictions             *
!    mentioned in each volume of the documentation.                *
!                                                                  *
!*******************************************************************

!-----------------------dialog.uil---------------------------------*
!                                                                  *
!------------------------------------------------------------------*
! GMD Darmstadt Institute for System Technic (I2)                  *
! Rheinstr. 75 / Dolivostr. 15                                     *
! 6100 Darmstadt                                                   *
! Project ``Secure DFN'' 1990 / "SecuDE" 1991/92/93                *
! Grimm/Nausester/Schneider/Viebeg/Vollmer 	                   *
! Luehe/Surkau/Reichelt/Kolletzki		                   *
!------------------------------------------------------------------*
!                                                                  *
! PROGRAM   xmst            VERSION   1.0                          *
!                              DATE   07.10.1993                   *
!                                BY   Kolletzki                    *
!                                                                  *
! MODULE    alias.uil                                              *
!                                                                  *
! DESCRIPTION                                                      *
! 	uil program for dialog widgets (included by main.uil)      *
!                                                                  *
!------------------------------------------------------------------*


!!!!!!!!!!!!!!!!!!!!!!!!!!
!!			!!
!!	Dialog Shells  	!!
!!			!!
!!!!!!!!!!!!!!!!!!!!!!!!!!


!!
!!	Enter PIN
!!
object
    pin_dialog : XmPromptDialog {
    	arguments {
		arguments	dialog_args;
		XmNdialogTitle = pinTitleText;
		XmNokLabelString = okText;
		XmNcancelLabelString = cancelText;
    	};
    	controls {
		Xm_Help unmanaged { };
	};
    	callbacks { 
	    	XmNokCallback = procedure pin_dialog_cb();
	    	XmNcancelCallback = procedure pin_dialog_cb();
	};
    };

!!
!!	Enter PIN (for change PIN)
!!
object
    chpin_dialog : XmPromptDialog {
    	arguments {
		arguments	dialog_args;
		XmNdialogTitle = chpinTitleText;
		XmNokLabelString = okText;
		XmNcancelLabelString = cancelText;
    	};
    	controls {
		Xm_Help unmanaged { };
	};
    	callbacks { 
	    	XmNokCallback = procedure chpin_dialog_cb();
	    	XmNcancelCallback = procedure chpin_dialog_cb();
	};
    };


!!
!!	Enter new alias
!!
object
    addalias_dialog : XmPromptDialog {
    	arguments {
		arguments	dialog_args;
		XmNdialogTitle = addaliasTitleText;
		XmNokLabelString = okText;
		XmNcancelLabelString = cancelText;
    	};
    	controls {
		Xm_Help unmanaged { };
	};
    	callbacks { 
	    	XmNokCallback = procedure addalias_dialog_cb();
	    	XmNcancelCallback = procedure addalias_dialog_cb();
	};
    };



!!
!!	Ok (confirm to continue)
!!
object
    ok_dialog : XmInformationDialog {
    	arguments {
		arguments	dialog_args;
		XmNdialogTitle = okTitleText;
		XmNokLabelString = okText;
    	};
    	controls {
		Xm_Cancel unmanaged { };
		Xm_Help unmanaged { };
    	};
	callbacks { 
	    	XmNokCallback = procedure ok_dialog_cb();
	};
    };



!!
!!	Error: Abort
!!
object
    abort_dialog : XmErrorDialog {
    	arguments {
		arguments	dialog_args;
		XmNdialogTitle = errorTitleText;
		XmNcancelLabelString = abortText;
    	};
    	controls {
		Xm_OK unmanaged { };
		Xm_Help unmanaged { };
    	};
	callbacks { 
	    	XmNcancelCallback = procedure error_dialog_cb();
	};
    };


!!
!!	Error: Continue/Quit
!!
object
    cont_quit_dialog : XmErrorDialog {
    	arguments {
		arguments	dialog_args;
		XmNdialogTitle = errorTitleText;
		XmNokLabelString = continueText;
		XmNcancelLabelString = quitText;
    	};
    	controls {
		Xm_Help unmanaged { };
    	};
	callbacks { 
	    	XmNokCallback = procedure error_dialog_cb();
	    	XmNcancelCallback = procedure error_dialog_cb();
	};
    };


!!
!!	Error: Retry/Quit
!!
object
    retr_quit_dialog : XmErrorDialog {
    	arguments {
		arguments	dialog_args;
		XmNdialogTitle = errorTitleText;
		XmNokLabelString = retryText;
		XmNcancelLabelString = quitText;
    	};
    	controls {
		Xm_Help unmanaged { };
    	};
	callbacks { 
	    	XmNokCallback = procedure error_dialog_cb();
	    	XmNcancelCallback = procedure error_dialog_cb();
	};
    };


!!
!!	Warning: Continue/Cancel
!!
object
    cont_canc_dialog : XmWarningDialog {
    	arguments {
		arguments	dialog_args;
		XmNdialogTitle = warningTitleText;
		XmNokLabelString = continueText;
		XmNcancelLabelString = cancelText;
    	};
    	controls {
		Xm_Help unmanaged { };
    	};
	callbacks { 
	    	XmNokCallback = procedure warning_dialog_cb();
	    	XmNcancelCallback = procedure warning_dialog_cb();
	};
    };



!!
!!	Warning: Save/Loose
!!
object
    save_loose_dialog : XmWarningDialog {
    	arguments {
		arguments	dialog_args;
		XmNdialogTitle = saveTitleText;
		XmNokLabelString = saveText;
		XmNcancelLabelString = looseText;
    	};
    	controls {
		Xm_Help unmanaged { };
    	};
	callbacks { 
	    	XmNokCallback = procedure warning_dialog_cb();
	    	XmNcancelCallback = procedure warning_dialog_cb();
	};
    };


!!
!!	Warning: Show/Continue
!!
object
    cont_show_dialog : XmWarningDialog {
    	arguments {
		arguments	dialog_args;
		XmNdialogTitle = showTitleText;
		XmNokLabelString = continueText;
		XmNcancelLabelString = showText;
    	};
    	controls {
		Xm_Help unmanaged { };
    	};
	callbacks { 
	    	XmNokCallback = procedure warning_dialog_cb();
	    	XmNcancelCallback = procedure warning_dialog_cb();
	};
    };



!!
!!	Quit SecTool / Close Tool
!!
object
    toolquit_dialog : XmWarningDialog {
    	arguments {
	    arguments	dialog_args;
	    XmNdialogTitle = toolquitTitleText;
	    XmNokLabelString = toolquitOkText;
	    XmNcancelLabelString = toolquitCancelText;
        };
        controls {
	    Xm_Help unmanaged { };
         };
    	callbacks {
	    XmNokCallback = procedure toolquit_dialog_cb();
	    XmNcancelCallback = procedure toolquit_dialog_cb();
        };
    };


!!
!!	Signature/Encryption object dialog
!!
object
    signature_dialog : XmQuestionDialog {
    	arguments {
	    arguments	dialog_args;
	    XmNdialogTitle = signatureTitleText;
	    XmNokLabelString = signatureText;
	    XmNcancelLabelString = encryptionText;
        };
        controls {
	    Xm_Help unmanaged { };
         };
    	callbacks {
	    XmNokCallback = procedure question_dialog_cb();
	    XmNcancelCallback = procedure question_dialog_cb();
        };
    };


!!
!!	Viewer dialog
!!
object
    viewer_dialog : XmTemplateDialog{
	arguments {
	    arguments	modeless_dialog_args;
	    XmNokLabelString = viewerOkText;
	    XmNcancelLabelString = viewerCancelText;
	    XmNdialogTitle = viewerTitleText;
	};
	controls {
	    XmScrolledText	viewer_text;
	};
    	callbacks {
	    XmNokCallback = procedure viewer_dialog_cb();
	    XmNcancelCallback = procedure viewer_dialog_cb();
    	};
    };
object
    viewer_text : XmScrolledText {
    	arguments {
	    XmNeditable = false;
	    XmNeditMode = XmMULTI_LINE_EDIT;
        };
    };


!!
!!	Debug dialog
!!
object
    debug_dialog : XmTemplateDialog{
    	arguments {
	    arguments	modeless_dialog_args;
	    XmNokLabelString = debugOkText;
	    XmNcancelLabelString = debugCancelText;
	    XmNdialogTitle = debugTitleText;
    	};
    	controls {
	    XmScrolledText	debug_text;
    	};
    	callbacks {
	    XmNokCallback = procedure debug_dialog_cb();
	    XmNcancelCallback = procedure debug_dialog_cb();
    	};
    };
object
    debug_text : XmScrolledText {
    	arguments {
	    XmNeditable = false;
	    XmNeditMode = XmMULTI_LINE_EDIT;
        };
    };

!!
!!	AliasTools's Other Aliases dialog
!!
object
    otheraliases_dialog : XmSelectionDialog {
    	arguments {
	    arguments	modeless_dialog_args;
	    XmNdialogTitle = otheraliasesTitleText;
	    XmNlistVisibleItemCount = 5;
	    XmNokLabelString = otheraliasesOkText;
	    XmNapplyLabelString = otheraliasesApplyText;
	    XmNcancelLabelString = otheraliasesCancelText;
        };
        controls {
	    Xm_Help unmanaged { };

	    unmanaged XmInformationDialog 	ok_dialog;
         };
    	callbacks {
	    XmNokCallback = procedure otheraliases_dialog_cb();
	    XmNapplyCallback = procedure otheraliases_dialog_cb();
	    XmNcancelCallback = procedure otheraliases_dialog_cb();
        };
    };


!!
!!	Configuration dialog
!!
object
    config_dialog : XmTemplateDialog{
    	arguments {
	    arguments	dialog_args;
	    XmNminWidth = 530;
	    XmNminHeight = 300;
	    XmNokLabelString = okText;
	    XmNcancelLabelString = cancelText;
	    XmNdialogTitle = configTitleText;
    	};
    	controls {
	    XmScrolledWindow {
	        arguments {
		    XmNscrollBarDisplayPolicy = XmAS_NEEDED;
		    XmNscrollingPolicy = XmAUTOMATIC;
	    	    XmNspacing = 10;
	        };
	        controls {
		    XmForm {
		    	arguments 	scrolled_form_args;
		    	controls {
		    	    XmRowColumn {
		    	    	controls {
    	    			    XmForm 	config_general_form;
    	    			    XmForm 	config_file_form;
    	    			    XmForm 	config_nice_form;
    	    			    XmForm 	config_sct_form;
    	    			    XmForm 	config_secure_form;
    	    			    XmForm 	config_dsa_form;
		    	    	};
		    	    };
   			};
		    };
		};
	    };
    	};
    	callbacks {
	    XmNokCallback = procedure config_dialog_cb();
	    XmNcancelCallback = procedure config_dialog_cb();
    	};
    };
    
object config_general_form : XmForm {
    arguments 	config_form_args;
    controls {
	XmRowColumn { 
	    controls {
	      	XmLabel 	{ arguments { XmNlabelString = "General Options"; }; };
		XmToggleButton 	config_autosave_toggle;
		XmToggleButton 	config_showerror_toggle;
		XmToggleButton 	config_overwrite_toggle;
		XmToggleButton 	config_useeditor_toggle;
		XmRowColumn 	config_editor_rowcolumn;
	    };
	};
    };
};
object config_editor_rowcolumn : XmRowColumn {
    arguments { XmNorientation = XmHORIZONTAL; };
    controls {
    	XmLabel 	{ arguments { XmNlabelString = "Editor (with options)"; }; };
    	XmTextField 	config_editor_textfield;
    };
};

object config_file_form : XmForm {
    arguments 	config_form_args;
    controls {
	XmRowColumn { 
	    controls {
		XmRowColumn {
		    arguments { XmNorientation = XmHORIZONTAL; };
	    	    controls {
	    		XmLabel 	{ arguments { XmNlabelString = "PSE Name"; }; };
	    		XmTextField	config_psename_textfield;
	    	    };
	    	};
		XmRowColumn {
		    arguments { XmNorientation = XmHORIZONTAL; };
	    	    controls {
	    		XmLabel 	{ arguments { XmNlabelString = "CA Name"; }; };
	    		XmTextField 	config_caname_textfield;
	    	    };
	    	};
	    };
	};
    };
};
   
object config_nice_form : XmForm {
    arguments	config_form_args;
    controls {
	XmRowColumn {
	    arguments { XmNorientation = XmHORIZONTAL; };
	    controls {
	    	XmLabel	{ arguments { XmNlabelString = "Nice Level is"; }; };
		XmRowColumn {
		    arguments {
		    	XmNradioBehavior = true;
		    	XmNradioAlwaysOne = true;
		    	XmNorientation = XmHORIZONTAL; 
		    };
		    controls {
			XmToggleButton 	config_nicelow_toggle;
			XmToggleButton 	config_nicemedium_toggle;
			XmToggleButton 	config_nicehigh_toggle;
		    };
		};
	    };
	};
    };
};

object config_sct_form : XmForm {
    arguments 	config_form_args;
    controls {
    	XmRowColumn	config_sct_rowcolumn;
    };
};
object config_sct_rowcolumn : XmRowColumn {
    controls {
	XmRowColumn {
	    arguments {
	    	XmNradioBehavior = true;
	    	XmNradioAlwaysOne = true;
	    };
	    controls {
      		XmLabel { arguments { XmNlabelString = "Smart Card support"; }; };
		XmToggleButton 	config_autodetect_toggle;
		XmToggleButton 	config_softrsa_toggle;
	    };
	};
    };
};
		
object config_secure_form : XmForm {
    arguments 	config_form_args;
    controls {
	XmRowColumn {
	    controls {
	      	XmLabel { arguments { XmNlabelString = "Security Environment"; }; };
		XmToggleButton 	config_consultcrl_toggle;
		XmToggleButton 	config_trustfcpath_toggle;
		XmToggleButton 	config_nosubordination_toggle;
		XmToggleButton 	config_pserandom_toggle;
	    };
	};
    };
};
		
object config_dsa_form : XmForm {
    arguments {
    	arguments	config_form_args;
    };
    controls {
	XmRowColumn { 
	    controls {
	      	XmLabel { arguments { XmNlabelString = "Directory Services"; }; };
		XmToggleButton	config_accessdir_toggle;
		XmSeparator 	{};
		XmRowColumn	config_dsa_rowcolumn;
	    };
	};
    };
};
object config_dsa_rowcolumn : XmRowColumn {
    controls {
    	XmRowColumn {
	    arguments { XmNorientation = XmHORIZONTAL; };
	    controls {
	    	XmLabel 	{ arguments { XmNlabelString = "DSA Name to be accessed"; }; };
    		XmTextField 	config_dsaname_textfield;
    	    };
    	};
	XmRowColumn {
	    arguments { XmNorientation = XmHORIZONTAL; };
	    controls {
	    	XmLabel 	{ arguments { XmNlabelString = "DSAP Tailor file"; }; };
    		XmTextField 	config_dsaptailor_textfield;
    	    };
    	};
	XmRowColumn { 
	    arguments { XmNorientation = XmHORIZONTAL; };
	    controls {
	    	XmLabel 	{ arguments { XmNlabelString = "Authentication Level is"; }; };
		XmRowColumn {
		    arguments {
		    	XmNradioBehavior = true;
		    	XmNradioAlwaysOne = true;
		    	XmNorientation = XmHORIZONTAL; 
		    };
		    controls {
			XmToggleButton 	config_authnone_toggle;
			XmToggleButton 	config_authsimple_toggle;
			XmToggleButton 	config_authstrong_toggle;
		    };
		};
	    };
	};
    };
};


object config_autosave_toggle : XmToggleButton {
	arguments { XmNlabelString = "Auto Save Configuration"; }; };
object config_showerror_toggle : XmToggleButton {
	arguments { XmNlabelString = "Show Error Log"; }; };
object config_overwrite_toggle : XmToggleButton {
	arguments { XmNset = true; XmNlabelString = "Confirm overwrite of Objects or Files"; }; };
object config_useeditor_toggle : XmToggleButton {
	arguments { XmNlabelString = "Use external Editor"; };
	callbacks { XmNvalueChangedCallback = procedure config_useeditor_toggle_cb(); };
	};
object config_editor_textfield : XmTextField {
	arguments config_textfield_args;
	callbacks {
	    XmNfocusCallback = procedure textfield_focus_cb();
	    XmNlosingFocusCallback = procedure textfield_focus_cb();
	}; };

object config_psename_textfield : XmTextField {
	arguments config_textfield_args;
	callbacks {
	    XmNfocusCallback = procedure textfield_focus_cb();
	    XmNlosingFocusCallback = procedure textfield_focus_cb();
	}; };
object config_caname_textfield : XmTextField {
	arguments config_textfield_args;
	callbacks {
	    XmNfocusCallback = procedure textfield_focus_cb();
	    XmNlosingFocusCallback = procedure textfield_focus_cb();
	}; };

object config_nicelow_toggle : XmToggleButton {
	arguments { XmNset = true; XmNlabelString = "Low"; }; };
object config_nicemedium_toggle : XmToggleButton {
	arguments { XmNlabelString = "Medium"; }; };
object config_nicehigh_toggle : XmToggleButton {
	arguments { XmNlabelString = "High"; }; };

object config_autodetect_toggle : XmToggleButton {
	arguments { XmNset = true; XmNlabelString = "Auto detect SCT for RSA operation"; }; };
object config_softrsa_toggle : XmToggleButton {
	arguments { XmNlabelString = "Force Software RSA operation"; }; };
object config_consultcrl_toggle : XmToggleButton {
	arguments { XmNlabelString = "Consult Revocation lists during verification"; }; };
object config_trustfcpath_toggle : XmToggleButton {
	arguments { XmNlabelString = "Consider own FCPath as trusted"; }; };
object config_nosubordination_toggle : XmToggleButton {
	arguments { XmNlabelString = "RFC 1422 DName subordination not required"; }; };
object config_pserandom_toggle : XmToggleButton {
	arguments { XmNlabelString = "Read random number generator seed from PSE-object Random"; }; };

object config_accessdir_toggle : XmToggleButton {
	arguments { XmNlabelString = "Access Directory (X.500 or AF_DB)"; };
	callbacks { XmNvalueChangedCallback = procedure config_accessdir_toggle_cb(); };
	};
object config_dsaname_textfield : XmTextField {
	arguments config_textfield_args;
	callbacks {
	    XmNfocusCallback = procedure textfield_focus_cb();
	    XmNlosingFocusCallback = procedure textfield_focus_cb();
	}; };
object config_dsaptailor_textfield : XmTextField {
	arguments config_textfield_args;
	callbacks {
	    XmNfocusCallback = procedure textfield_focus_cb();
	    XmNlosingFocusCallback = procedure textfield_focus_cb();
	}; };
object config_authnone_toggle : XmToggleButton {
	arguments { XmNset = true; XmNlabelString = "None"; }; };
object config_authsimple_toggle : XmToggleButton {
	arguments { XmNlabelString = "Simple"; }; };
object config_authstrong_toggle : XmToggleButton {
	arguments { XmNlabelString = "Strong"; }; };


!!
!!	Object selection dialog
!!
object objectselection_dialog : XmSelectionDialog {
    	arguments {
	    arguments	dialog_args;
	    XmNdialogTitle = objectselectionTitleText;
	    XmNokLabelString = okText;
	    XmNcancelLabelString = cancelText;
	    XmNlistLabelString = pseobjectsText;
        };
        controls {
	    Xm_Help 	unmanaged {};
	    Xm_Apply 	unmanaged {};
        };
    	callbacks {
	    XmNokCallback = procedure objectselection_dialog_cb();
	    XmNcancelCallback = procedure objectselection_dialog_cb();
        };
    };



!!
!!	File selection dialog
!!
object file_dialog: XmTemplateDialog {
    arguments {
	arguments	modeless_dialog_args;
	XmNminWidth = 560;
	XmNcancelLabelString = dismissText;
	XmNdialogTitle = fileTitleText;
    };
    controls {
	unmanaged XmInformationDialog 	ok_dialog;
	unmanaged XmQuestionDialog 	signature_dialog;
	
    	XmRowColumn {
    	    arguments {
    	    	XmNorientation = XmHORIZONTAL;
    	    };
    	    controls {
	        XmFrame {
	            controls {
	        	XmFileSelectionBox	file_selection_box;
	            };
	        };
	        XmFrame {
	            controls {
	        	XmSelectionBox		file_object_selection_box;
	            };
	        };
           };
        };
    };
    callbacks {
    	XmNcancelCallback = procedure file_dialog_cb();
    };
};
object file_selection_box: XmFileSelectionBox {
    arguments {
	XmNokLabelString = writefileText;
    };
    controls {
	Xm_Help 	unmanaged {};
	Xm_Cancel 	unmanaged {};
    };
    callbacks {
	XmNokCallback = procedure file_selection_dialog_cb();
    };
};
object file_object_selection_box : XmSelectionBox {
    arguments {
	XmNlistLabelString = pseobjectsText;
	XmNokLabelString = readfileText;
    };
    controls {
	Xm_Help 	unmanaged {};
	Xm_Cancel 	unmanaged {};
    };
    callbacks {
	XmNokCallback = procedure file_object_selection_dialog_cb();
    };
};









!!
!!	Clipboard dialog
!!
object
    clipboard_dialog : XmTemplateDialog{
	arguments {
	    arguments	modeless_dialog_args;
	    XmNokLabelString = dismissText;
	    XmNcancelLabelString = clearText;
	    XmNdialogTitle = clipboardTitleText;
	};
	controls {
	    XmScrolledText	clipboard_text;
	};
    	callbacks {
	    XmNokCallback = procedure clipboard_dialog_cb();
	    XmNcancelCallback = procedure clipboard_dialog_cb();
    	};
    };
object
    clipboard_text : XmScrolledText {
    	arguments {
	    XmNeditable = false;
	    XmNeditMode = XmMULTI_LINE_EDIT;
        };
    };




!!
!!	dialogs
!!
!!!!!!!!!!!!!!!



