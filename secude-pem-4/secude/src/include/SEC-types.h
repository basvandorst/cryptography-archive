/* automatically generated by pepsy 10.0 #12 (tiber), do not edit! */

#ifndef	_module_SEC_defined_
#define	_module_SEC_defined_

#ifndef	PEPSY_VERSION
#define	PEPSY_VERSION		2
#endif

#include <isode/asn1/asn1.h>
#include <isode/asn1/pepsy.h>
#include <isode/pepsy/UNIV-types.h>


extern modtyp	_ZSEC_mod;
#define _ZKeyInfoSEC	9
#define _ZPSEObjectSEC	16
#define _ZKeyBitsSEC	8
#define _ZEncryptedKeySEC	11
#define _ZBitStringSEC	6
#define _ZAlgorithmIdentifierSEC	12
#define _ZTOURINTEGERSEC	0
#define _ZSETOFObjIdSEC	5
#define _ZPSEObjectsSEC	14
#define _ZOctetStringSEC	3
#define _ZTBitStringSEC	1
#define _ZPSETocSEC	15
#define _ZSETOFAlgorithmIdentifierSEC	13
#define _ZTAlgorithmIdentifierSEC	2
#define _ZSETOFOctetStringSEC	4
#define _ZDigestInfoSEC	10
#define _ZOURINTEGERSEC	7

#ifndef	lint
#define build_SEC_TOURINTEGER(pe, top, len, buffer, parm) \
    enc_f(_ZTOURINTEGERSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_TOURINTEGER(pe, top, len, buffer, parm) \
    dec_f(_ZTOURINTEGERSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_TOURINTEGER(pe, top, len, buffer, parm) \
    prnt_f(_ZTOURINTEGERSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_TOURINTEGER_P    _ZTOURINTEGERSEC, &_ZSEC_mod

#define build_SEC_TBitString(pe, top, len, buffer, parm) \
    enc_f(_ZTBitStringSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_TBitString(pe, top, len, buffer, parm) \
    dec_f(_ZTBitStringSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_TBitString(pe, top, len, buffer, parm) \
    prnt_f(_ZTBitStringSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_TBitString_P    _ZTBitStringSEC, &_ZSEC_mod

#define build_SEC_TAlgorithmIdentifier(pe, top, len, buffer, parm) \
    enc_f(_ZTAlgorithmIdentifierSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_TAlgorithmIdentifier(pe, top, len, buffer, parm) \
    dec_f(_ZTAlgorithmIdentifierSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_TAlgorithmIdentifier(pe, top, len, buffer, parm) \
    prnt_f(_ZTAlgorithmIdentifierSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_TAlgorithmIdentifier_P    _ZTAlgorithmIdentifierSEC, &_ZSEC_mod

#define build_SEC_OctetString(pe, top, len, buffer, parm) \
    enc_f(_ZOctetStringSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_OctetString(pe, top, len, buffer, parm) \
    dec_f(_ZOctetStringSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_OctetString(pe, top, len, buffer, parm) \
    prnt_f(_ZOctetStringSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_OctetString_P    _ZOctetStringSEC, &_ZSEC_mod

#define build_SEC_SETOFOctetString(pe, top, len, buffer, parm) \
    enc_f(_ZSETOFOctetStringSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_SETOFOctetString(pe, top, len, buffer, parm) \
    dec_f(_ZSETOFOctetStringSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_SETOFOctetString(pe, top, len, buffer, parm) \
    prnt_f(_ZSETOFOctetStringSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_SETOFOctetString_P    _ZSETOFOctetStringSEC, &_ZSEC_mod

#define build_SEC_SETOFObjId(pe, top, len, buffer, parm) \
    enc_f(_ZSETOFObjIdSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_SETOFObjId(pe, top, len, buffer, parm) \
    dec_f(_ZSETOFObjIdSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_SETOFObjId(pe, top, len, buffer, parm) \
    prnt_f(_ZSETOFObjIdSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_SETOFObjId_P    _ZSETOFObjIdSEC, &_ZSEC_mod

#define build_SEC_BitString(pe, top, len, buffer, parm) \
    enc_f(_ZBitStringSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_BitString(pe, top, len, buffer, parm) \
    dec_f(_ZBitStringSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_BitString(pe, top, len, buffer, parm) \
    prnt_f(_ZBitStringSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_BitString_P    _ZBitStringSEC, &_ZSEC_mod

#define build_SEC_OURINTEGER(pe, top, len, buffer, parm) \
    enc_f(_ZOURINTEGERSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_OURINTEGER(pe, top, len, buffer, parm) \
    dec_f(_ZOURINTEGERSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_OURINTEGER(pe, top, len, buffer, parm) \
    prnt_f(_ZOURINTEGERSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_OURINTEGER_P    _ZOURINTEGERSEC, &_ZSEC_mod

#define build_SEC_KeyBits(pe, top, len, buffer, parm) \
    enc_f(_ZKeyBitsSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_KeyBits(pe, top, len, buffer, parm) \
    dec_f(_ZKeyBitsSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_KeyBits(pe, top, len, buffer, parm) \
    prnt_f(_ZKeyBitsSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_KeyBits_P    _ZKeyBitsSEC, &_ZSEC_mod

#define build_SEC_KeyInfo(pe, top, len, buffer, parm) \
    enc_f(_ZKeyInfoSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_KeyInfo(pe, top, len, buffer, parm) \
    dec_f(_ZKeyInfoSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_KeyInfo(pe, top, len, buffer, parm) \
    prnt_f(_ZKeyInfoSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_KeyInfo_P    _ZKeyInfoSEC, &_ZSEC_mod

#define build_SEC_DigestInfo(pe, top, len, buffer, parm) \
    enc_f(_ZDigestInfoSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_DigestInfo(pe, top, len, buffer, parm) \
    dec_f(_ZDigestInfoSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_DigestInfo(pe, top, len, buffer, parm) \
    prnt_f(_ZDigestInfoSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_DigestInfo_P    _ZDigestInfoSEC, &_ZSEC_mod

#define build_SEC_EncryptedKey(pe, top, len, buffer, parm) \
    enc_f(_ZEncryptedKeySEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_EncryptedKey(pe, top, len, buffer, parm) \
    dec_f(_ZEncryptedKeySEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_EncryptedKey(pe, top, len, buffer, parm) \
    prnt_f(_ZEncryptedKeySEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_EncryptedKey_P    _ZEncryptedKeySEC, &_ZSEC_mod

#define build_SEC_AlgorithmIdentifier(pe, top, len, buffer, parm) \
    enc_f(_ZAlgorithmIdentifierSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_AlgorithmIdentifier(pe, top, len, buffer, parm) \
    dec_f(_ZAlgorithmIdentifierSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_AlgorithmIdentifier(pe, top, len, buffer, parm) \
    prnt_f(_ZAlgorithmIdentifierSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_AlgorithmIdentifier_P    _ZAlgorithmIdentifierSEC, &_ZSEC_mod

#define build_SEC_SETOFAlgorithmIdentifier(pe, top, len, buffer, parm) \
    enc_f(_ZSETOFAlgorithmIdentifierSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_SETOFAlgorithmIdentifier(pe, top, len, buffer, parm) \
    dec_f(_ZSETOFAlgorithmIdentifierSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_SETOFAlgorithmIdentifier(pe, top, len, buffer, parm) \
    prnt_f(_ZSETOFAlgorithmIdentifierSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_SETOFAlgorithmIdentifier_P    _ZSETOFAlgorithmIdentifierSEC, &_ZSEC_mod

#define build_SEC_PSEObjects(pe, top, len, buffer, parm) \
    enc_f(_ZPSEObjectsSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_PSEObjects(pe, top, len, buffer, parm) \
    dec_f(_ZPSEObjectsSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_PSEObjects(pe, top, len, buffer, parm) \
    prnt_f(_ZPSEObjectsSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_PSEObjects_P    _ZPSEObjectsSEC, &_ZSEC_mod

#define build_SEC_PSEToc(pe, top, len, buffer, parm) \
    enc_f(_ZPSETocSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_PSEToc(pe, top, len, buffer, parm) \
    dec_f(_ZPSETocSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_PSEToc(pe, top, len, buffer, parm) \
    prnt_f(_ZPSETocSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_PSEToc_P    _ZPSETocSEC, &_ZSEC_mod

#define build_SEC_PSEObject(pe, top, len, buffer, parm) \
    enc_f(_ZPSEObjectSEC, &_ZSEC_mod, pe, top, len, buffer, (char *) parm)

#define parse_SEC_PSEObject(pe, top, len, buffer, parm) \
    dec_f(_ZPSEObjectSEC, &_ZSEC_mod, pe, top, len, buffer, (char **) parm)

#define print_SEC_PSEObject(pe, top, len, buffer, parm) \
    prnt_f(_ZPSEObjectSEC, &_ZSEC_mod, pe, top, len, buffer)
#define print_SEC_PSEObject_P    _ZPSEObjectSEC, &_ZSEC_mod


#endif   /* lint */

#define	type_SEC_TOURINTEGER	qbuf
#define	free_SEC_TOURINTEGER	qb_free

#define	type_SEC_TBitString	PElement
#define	free_SEC_TBitString	pe_free

#define	type_SEC_TAlgorithmIdentifier	type_SEC_AlgorithmIdentifier
#define	free_SEC_TAlgorithmIdentifier	free_SEC_AlgorithmIdentifier

#define	type_SEC_OctetString	qbuf
#define	free_SEC_OctetString	qb_free

#define	type_SEC_BitString	PElement
#define	free_SEC_BitString	pe_free

#define	type_SEC_OURINTEGER	qbuf
#define	free_SEC_OURINTEGER	qb_free

struct type_SEC_SETOFOctetString {
        struct type_SEC_OctetString *OctetString;

        struct type_SEC_SETOFOctetString *next;
};
#define	free_SEC_SETOFOctetString(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZSETOFOctetStringSEC], &_ZSEC_mod, 1)

struct type_SEC_SETOFObjId {
        OID     member_SEC_0;

        struct type_SEC_SETOFObjId *next;
};
#define	free_SEC_SETOFObjId(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZSETOFObjIdSEC], &_ZSEC_mod, 1)

struct type_SEC_KeyBits {
    struct type_SEC_TOURINTEGER *part1;

    struct choice_SEC_0 {
        int         offset;
#define	choice_SEC_0_part234	1
#define	choice_SEC_0_part2	2

        union {
            struct element_SEC_1 {
                struct type_SEC_TOURINTEGER *prime1;

                struct type_SEC_TOURINTEGER *prime2;

                struct type_SEC_TOURINTEGER *base;
            } *part234;

            struct type_SEC_TOURINTEGER *part2;
        }       un;
    } *element_SEC_0;

    struct type_SEC_TOURINTEGER *part3;
};
#define	free_SEC_KeyBits(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZKeyBitsSEC], &_ZSEC_mod, 1)

struct type_SEC_KeyInfo {
    struct type_SEC_AlgorithmIdentifier *algorithm;

    PE      key;
};
#define	free_SEC_KeyInfo(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZKeyInfoSEC], &_ZSEC_mod, 1)

struct type_SEC_DigestInfo {
    struct type_SEC_AlgorithmIdentifier *digestai;

    struct qbuf *digest;
};
#define	free_SEC_DigestInfo(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZDigestInfoSEC], &_ZSEC_mod, 1)

struct type_SEC_EncryptedKey {
    struct type_SEC_AlgorithmIdentifier *encalg;

    struct type_SEC_AlgorithmIdentifier *subalg;

    PE      key;
};
#define	free_SEC_EncryptedKey(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZEncryptedKeySEC], &_ZSEC_mod, 1)

struct type_SEC_AlgorithmIdentifier {
    OID     objectid;

    struct choice_SEC_1 {
        int         offset;
#define	choice_SEC_1_keyorblocksize	1
#define	choice_SEC_1_desIv	2
#define	choice_SEC_1_diffhell	3
#define	choice_SEC_1_nullparm	4

        union {
            integer     keyorblocksize;

            struct type_SEC_OctetString *desIv;

            struct type_SEC_KeyBits *diffhell;

            char    nullparm;
        }       un;
    } *parameters;
};
#define	free_SEC_AlgorithmIdentifier(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZAlgorithmIdentifierSEC], &_ZSEC_mod, 1)

struct type_SEC_SETOFAlgorithmIdentifier {
        struct type_SEC_AlgorithmIdentifier *AlgorithmIdentifier;

        struct type_SEC_SETOFAlgorithmIdentifier *next;
};
#define	free_SEC_SETOFAlgorithmIdentifier(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZSETOFAlgorithmIdentifierSEC], &_ZSEC_mod, 1)

struct type_SEC_PSEObjects {
        struct element_SEC_2 {
            integer     optionals;
#define	opt_SEC_element_SEC_2_noOctets (000000001)
#define	opt_SEC_element_SEC_2_status (000000002)

            struct	qbuf	*name;

            struct	qbuf	*create;

            struct	qbuf	*update;

            integer     noOctets;

            integer     status;
        } *member_SEC_1;

        struct type_SEC_PSEObjects *next;
};
#define	free_SEC_PSEObjects(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZPSEObjectsSEC], &_ZSEC_mod, 1)

struct type_SEC_PSEToc {
    integer     optionals;
#define	opt_SEC_PSEToc_status (000000001)

    struct	qbuf	*owner;

    struct	qbuf	*create;

    struct	qbuf	*update;

    integer     status;

    struct type_SEC_PSEObjects *sCObjects;
};
#define	free_SEC_PSEToc(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZPSETocSEC], &_ZSEC_mod, 1)

struct type_SEC_PSEObject {
    OID     type;

    PE      value;
};
#define	free_SEC_PSEObject(parm)\
	(void) fre_obj((char *) parm, _ZSEC_mod.md_dtab[_ZPSEObjectSEC], &_ZSEC_mod, 1)
#endif
