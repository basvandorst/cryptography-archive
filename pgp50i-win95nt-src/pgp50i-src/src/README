Welcome to the PGP beta test program!

Before reporting any bugs, please check the pgp(1) man page to ensure
that they are not already known.

Bugs should be reported on the beta test web page at:

  http://beta.pgp.com/

A word of warning:  The command line has changed _substantially_ since
2.6.2.  Make sure your favorite command does what you think it does
before you execute it.

Also, to head off a FAQ - this is the product formerly known as "PGP
3.0."  Due to a story too long to go into here, it's ended up as PGP 5.0.

--Building
Generally:

./configure
make
make install

You probably want to "make install" as root.

As it stands right now, you'll also need to copy "language50.txt" into
~/.pgp.  The install should handle putting this in some system-wide
place with the next releae (beta4).

Under Unix, there are multiple build options for various RSA
possibilities.  The large number of options are neccessitated by our
inability to release certain versions in source form due to
contractual limitations of our contract with PKP.

The "internal" PGP RSA support is in two files:

lib/pgp/pubkey/pgpRSAGlue1.c (Encryption/Signing)
lib/pgp/pubkey/pgpRSAGlue2.c (Verifying/Decrypting)

Additionally, RSA key generation is in:

lib/pgp/pubkey/pgpRSAKeyGen.c

Furthermore, RSAREF support is in:

lib/pgp/pubkey/pgpAltRSAGlue.c

And general RSA-connection routines are in:

lib/pgp/pubkey/pgpRSAKey.c

Configure will attempt to determine what version you're building based
upon what files are present.  The determination works like this:

1) If all files above are present, a full internal RSA version is built.
2) If pgpRSAGlue1.c is missing, but pgpAltRSAGlue.c and
   ../rsaref/install/unix/rsaref.a are present, an RSAREF version is
   built.
3) If 2 fails, but pgpRSAGlue2.c is available, a "legacy-mode"
   (decrypt/verify only) version is built.
4) If 3 fails, no RSA support is included.

Additionally, if pgpRSAKeyGen.c is missing from any of these, no RSA
key generation support is included.

If you have all of the source, and wish to build a particular version,
the following flags are defined in config.h:

USE_RSAREF_FULL (If 1, a full RSAREF version is built)
USE_RSA_LEGACY (If 1, a decrypt/verify only version is built)
NO_RSA (If 1, no RSA support is included; overrides all other RSA flags)
NO_RSA_KEYGEN (If 1, RSA key generation is removed)
USE_MPI_LIB (If using RSAREF, assumes the RSAREF has been modified (as
in 2.6.2) to use PGP's internal, faster, MPI routines.  If using
vanilla RSAREF, set this to 0).


We've had a lot of fun, writing this, and hope you enjoy using it.
PGP has gotten faster, more stable, and has better features.  Happy
encrypting!

Brett A. Thomas
bat@pgp.com, quark@baz.com

PS:  The coolest new feature is keyserver support.  The way it works
in this release is:

To send:

  pgpk -x quark@baz.com -o hkp://keys.pgp.com

To add a key to your keyring from the server:

  pgpk -a hkp://keys.pgp.com/quark@baz.com

HKP is the Horowitz Key Protocol.  Its default port is 11371.

We also support http and finger, but for gets only.  For example, to
add my key to your keyring, you can do:

  pgpk -a http://www.baz.com/quark/pgp.html

OR

  pgpk -a finger://baz.com/quark

This is interesting because it means small organizations can
effectively do key distribution this way - set up a page that is the
keyring for your department, and have a cron job that updates it every
night.  Talk about a shared-read only keyring!

PPS:  While the libraries are very stable at this time, remember -
this is beta software!  BACK UP YOUR KEYRINGS, FIRST!
