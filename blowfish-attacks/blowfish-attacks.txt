From msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!news.byu.edu!news.kei.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585 Sun Apr 24 19:44:07 1994
Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!news.byu.edu!news.kei.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: More interesting attacks on BLOWFISH
Date: Tue, 19 Apr 94 13:13:44 CDT
Organization: University of Missouri, Columbia
Lines: 87
Message-ID: <16F9DBA08S86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: mizzou1.missouri.edu

 
   Before, I introduced a way to recover the s-box contents from the
BLOWFISH f-function, if you could directly feed 1040 chosen 32-bit
inputs into the F-function, and directly observe the 32-bit outputs.
I was able to extend that to a chosen-plaintext attack on a 3-round
version of BLOWFISH without subkeys.  (All the P(i) are 0.)
 
   I've been playing with this some more, and I've found a couple of
useful extensions to this:
 
1.  Given control over X, I apply my attack to F(X) xor K, where K is
    a constant 32-bit value.
 
2.  Given control over X, I apply a variant of my attack to F(X xor K),
    where K is a constant value.  This yields a set of differences for
    each of the s-boxes (ie, S4(i) - S4(0)), but it looks to be impossible
    to directly solve for the actual values in the s-boxes.
 
    Basically, 1 is easy, and it's done in a way analogous to my general
attack on F:
 
    Choose 0|0|0|0 and 0|0|0|1 to send through F().  The output values
are Q0 and Q0'.  Q0 = F(0|0|0|0) xor K.
 
    Next, choose 1|1|1|0 and 1|1|1|1 to send through F().  The output
values are Q1 and Q1'.
 
   Now, start a brute-force search through all possible 32-bit values.
Let's call out search value i.  When
 
  (Q0' xor i) - (Q0 xor i) == (Q1' xor i) - (Q1 xor i)
 
then, we've got the right i.  (There may be collisions, I'm not sure.
These can be gotten rid of by trying some other Q0,Q0',Q1,Q1' values.)
 
   This works because when K = i, Q0' xor i = F(0|0|0|0) xor K xor i,
which equals F(0|0|0|0).  Since F(0|0|0|1) - F(0|0|0|0) = s4(1) - s4(0),
it will be the same as F(1|1|1|1) - F(1|1|1|0).
 
   After we've solved for K, we can apply the standard attack to F().
 
   When we're given F(K xor X), we can apply a the same chosen-input
attack on F().  We can learn the differences, ie S4(99) - S4(0) and
S0'(255) - S0'(0), but we can't get the actual inputs without some
further information--which I don't think is generally going to be
available.
 
   These two can be used to break a 3-round BLOWFISH with all the subkeys
except the last two.  This looks like:
 
     L(in)    R(in)
     |        |
P0->XOR       |
     |-> F ->XOR
     |        |
     |       XOR<-P1
    XOR<- F <-|
     |        |
P2->XOR       |
     |-> F ->XOR
     |        |
     L(out)   R(out)
 
1.  By holding L(in) constant, we can directly vary the inputs to the
    second-round F().  This allows the recovery of the s-box differences.
 
2.  If we knew P1, we would know the whole set of s-boxes.  Try a brute-
    force search of possible P2's, for i = 0 to 2**32-1.  When i = P2,
    we'll see R(out) = R(in) xor i xor F(L(out)).  F() is calculated with
    the s-boxes as they must be, if i = P2.  It's possible there will be
    collisions--we may need to try several constant values of L (in).
 
 
3.  From here, we know P0 xor P2 (because we know the s-boxes and P1).
    Knowing the s-boxes, we can invert F() by brute-force search--
    guess all possible P0's that would result in the observed values
    for L(in),R(in) --> L(out),R(out).  With full knowledge of the
    s-boxes, there's probably a better way, but I don't see it right
    now.
 
    This attack may require about 2080 chosen-plaintexts.  (Two fixed
values of L(in)).  It requires on the order of 2**34 operations.
 
   Any comments?  Anyone see how to extend this to the full 3-round
BLOWFISH?
 
   --John Kelsey, c445585@mizzou1.missouri.edu

From msuinfo!agate!darkstar.UCSC.EDU!news.hal.COM!decwrl!waikato!auckland.ac.nz!news Sun Apr 24 19:44:22 1994
Path: msuinfo!agate!darkstar.UCSC.EDU!news.hal.COM!decwrl!waikato!auckland.ac.nz!news
From: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Newsgroups: sci.crypt
Subject: Re: More interesting attacks on BLOWFISH
Date: 20 Apr 1994 07:06:31 GMT
Organization: University of Auckland
Lines: 253
Sender: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Message-ID: <2p2k9n$ir4@ccu2.auckland.ac.nz>
References: <16F9DBA08S86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: cs13.cs.aukuni.ac.nz
X-Newsreader: NN version 6.5.0 #7 (NOV)


With the various comments on Blowfish being posted, I thought I might post the
following, which is a condensed version of some comments I made to Bruce
Schneier some time ago when I proofread his Blowfish paper - it may be of use
to somebody.  Unfortunately I've lost one of the messages so I've had to
reconstruct it from scribbled notes and a vague memory of the contents:
 
[...]
 
Perhaps you should play up the importance of the P-keys a bit more (or at least
give an explanation as to why they're used).  There are two possible lines of
attack I can think of which are only really possible if the P-keys don't exist:
 
1.  Not all possible S-box entries are used in each round.  In fact, we might
    be able to fix things so only one entry from each S-box is used.  To take
    the simplest example, lets say one entry in each S-box is zero.  Then we
    set the initial left and right 32-bit values L and R to always select these
    entries.  Now since:
 
        L = f( R ) ^ L
        R = f( L ) ^ R
 
    we have:
 
        L = 0 ^ L
        R = 0 ^ R
 
    and so the plaintext drops out the other side unchanged.  Of course we
    don't need zero S-boxes, we just need to find some other value which has a
    known result.
 
2.  We can reduce the total transformation on a block to a collection of XOR's
    (ie a linear transformation) because, for the right half:
 
        R16 = f( L1 ) ^ f( L3 ) ^ ... f( L15 ) ^ R1
 
    or:
 
        R16 ^ R0 = f( L1 ) ^ f( L3 ) ^ ... f( L15 )
 
    where R0 and R16 are known.  Now given enough plaintext-ciphertext pairs,
    we might be able to find a pattern in the right hand side (for example that
    certain values occur more often than others - see below).
 
Unfortunately (for the cryptanalayst, that is) the use of the P-keys messes
this up... it also screws up any attempt at differential cryptanalysis-like
attacks since the input to the f-function is no longer controlled.  Note that
without P a DC-like attack is still possible - each S-box only contains 256
values, some of these are likely to be repeated (which means some values never
occur at all, eg if you have one value repeated then the probabilities are
2/256 for that value and 254 x 1/256 for all the other values in the S-box),
therefore certain outputs of the f-function are going to be more likely than
others.  The solution to this problem (if it can be called a problem) is to
make the S-boxes contain a permutation of all values in the range 0..256, and
select the permutation in a key-dependant manner.  This means one value is
never more likely to occur than any other.  This is what I did in NSEA for just
that reason.
 
A comment on the key setup, this isn't a weakness but more of a practical
problem:  It's rather complicated.  It requires as the initial value over 4K of
data (being the digits of pi), and the key setup process with its multiple
iterations is rather complex.  This means it's very easy for people to get
wrong (imagine trying to dig an incorrect digit out of 4168 bytes of data).
Why not just set the initial keys to the output of a LCRNG (with three integer
parameters, which are easy to check), encrypt the actual key using the initial
key, and set the new key to the encrypted key?  This is very hard to get wrong,
and if you need more security against a brute-force attack, just iterate the
encryption multiple times.  Cryptographically, this isn't any better or worse
than your current method, but it is a lot easier to implement - a call to
setKey(), a call to encryptBuffer(), and a second call to setKey() - and the
checking of the initial key used is easier since it's deterministically derived
from a preset LCRNG.
 
[...]
 
Using a permutation of values for the S-boxes is even more important than I
mentioned last night.  Firstly, when I said:
 
>Note that without P a DC-like attack is still possible - each S-box only
>contains 256 values, some of these are likely to be repeated (which means some
>values never occur at all, eg if you have one value repeated then the probs.
>are 2/256 and 254 x 1/256 for all values in the S-box), therefore certain
>outputs of the f-function are going to be more likely than others.  The
>solution to this problem (if it can be called a problem) is to make the
>S-boxes contain a permutation of all values in the range 0..256, and select
>the permutation in a key-dependant manner.  This means one value is never more
>likely to occur than any other.  This is what I did in NSEA for just that
>reason.
 
what I meant was that you break each 32-bit value into 4 8-bit values, and set
them to 0..255, so you have an initial S-box which is:
 
    00 00 00 00
    01 01 01 01
    02 02 02 02
    .. .. .. ..
    FF FF FF FF
 
Then when you key the algorithm you permute each column.  The result is that,
although you still only have 256/4G possible values, their properties are more
evenly distributed (for example you have 50% of all values with the MSB = 1,
which will be important in a minute).
 
Lets say you don't use this and simply use random values as you do now.  If you
do this, it's possible to directly find repeated S-box entries.  Lets say you
want to examine the values in S4.  You encrypt xx xx xx 00 ... xx xx xx FF.  If
you have a duplicate value in an S-box, the output of the first round will be
identical, stripping one round off the cipher (although this isn't exactly a
major problem).
 
Another possible change is to rotate the use of S-boxes.  Lets say that, for a
given set of random S-boxes, in S1 the chance of MSB = 1 is 80%.  The
f-function is `S1[] + S2[] ...', so the biased S1 influences the final output
of the f-function.  You could also have a case where, for example, for the XOR
S-boxes you have a 75% probability of bit 7 being 0 and therefore having no
effect on the output.
 
You could at least partially fix this by rotating the use of the S-boxes in
each round.  Currently you use S1, S2, S3, S4 in each round.  You could change
this to:
 
    round 1,2 : S1, S2, S3, S4
    round 3,4 : S2, S3, S4, S1
    round 5,6 : S3, S4, S1, S2
    round 7,8 : S4, S1, S2, S3
 
ie one combination per left-right pair.  The fixed order isn't so good here
either, since you always have:
 
    Sx + Sx+1 ^ Sx+2 + Sx+3
 
so you could start permuting the order of the S-boxes.  You have 16 rounds, but
only 8 possible combinations (due to L-R pairing), I guess anything which
changes the way the S-boxes are used would be good.  Perhaps:
 
    round 9,10 : S1, S3, S2, S4
    round 11,12: S3, S2, S4, S1
    round 13,14: S2, S4, S1, S3
    round 15,16: S4, S1, S3, S2
 
This switches the positions and order of the use of the S-boxes from the
pattern in the first 8 rounds, and makes it harder to take advantage of the
characteristics of any one S-box.
 
[There was another message here which I lost, which gave details on a self-
 checking setup for the S-boxes which was much simpler and more error-immune
 than the existing method, and another method of attack:
 
1. Set up an LCRNG with three fixed parameters.  I suggested
 
       (      X      *    a     + c ) mod m
     ( ( lcrngNumber * 23311L ) + 1 ) % 65533U
 
   which works nicely even on 16-bit machines and gives 99.997% coverage of
   16-bit values.
 
2. Read the first value from the RNG and make sure it matches a check value.
   This checks that the LCRNG is implemented properly.
 
3. Perform the setup outlined above.
 
4. Read the final value from the RNG and make sure it matches a check value.
   This checks that the correct values were used to perform the intial
   permutation.
 
5. Encrypt some sample data and check that it matches the expected output.
   This checks that the overall encryption algorithm works OK.
 
This makes the key-setup (mostly) self-checking, and means you only need to
remember 8 parameters (3 LCRNG ones, 2 RNG check values, 1 sample data block)
instead of thousands of digits of pi.  I think I went into more detail, but I
don't seem to have saved the message.
 
The other point in the missing message was that there is another form of attack
possible (this is all from memory of something I sent months ago and a few
hastily scribbled notes, so bear with me here): Blowfish is a Feistel cipher,
and we can use on it a variant of an attack which is also successful against
Loki89.  The cipher basically consists of the following, with '@' being XOR
(the circled-plus is somewhat hard to do in ASCII):
 
        +-----------------------+
        |       Plaintext       |
        +-----------------------+
        |                       |
  P1 -->@                       |
        |      +-------+        |
        +------|   F   |------->@
        |      +-------+        |
        |                       @<-- P2
        |      +-------+        |
        @<-----|   F   |--------+
        |      +-------+        |
  P3 -->@                       |
        |      +-------+        |
        +------|   F   |------->@
        |      +-------+        |
 
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        |                       @<-- P16
        |      +-------+        |
        @<-----|   F   |--------+
        |      +-------+        |
 P17 -->@                       @<-- P18
        |                       |
        +-----------------------+
        |       Plaintext       |
        +-----------------------+
 
We can rewrite the last fragment:
 
                               @<-- P16
              +-------+        |
        <-----|   F   |--------+
              +-------+        |
                               @<-- P18
                               |
as:
                               @<-- P16
                               |
                               @<-- P18
              +-------+    v---|-----+
        <-----|   F   |----@---+
              +-------+        |
                               |
or:
                               @<-- P16 ^ P18
                               |
                           +---|--- P18
              +-------+    v   |
        <-----|   F   |----@---+
              +-------+        |
                               |
 
Using this, we can collapse all the inline XOR's up to the top of the
transformation so that we have, at the start:
 
                               @<-- P2 ^ P4 ^ P6 ^ P8 ^ P10 ^ P12 ^ P14 ^ P16
                               |       ^ P18
                           +---|--- P4 ^ P6 ^ P8 ^ P10 ^ P12 ^ P14 ^ P16 ^ P18
              +-------+    v   |
        <-----|   F   |----@---+
              +-------+        |
                               |

and so on for the input to each f-function.
 
A possible attack is to chose the XOR input to the F-function to have a certain
chance of neutralising the effects of the f-function.  This is why the setting
up of the S-boxes and the f-function itself is so very important, and why the
previously outlined changes would help to strengthen the algorithm.
 
Peter.


From msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!news.byu.edu!news.kei.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585 Sun Apr 24 19:44:52 1994
Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!news.byu.edu!news.kei.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: A different way to look at BLOWFISH's F-function.
Date: Tue, 19 Apr 94 13:43:21 CDT
Organization: University of Missouri, Columbia
Lines: 12
Message-ID: <16F9DC0F9S86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: mizzou1.missouri.edu

   I was playing with this today....
 
   BLOWFISH's F-function basically does two things:
 
   1.  A key-based expansion from 32-bits to 128-bits.
   2.  A constant recomination, based on mixing XOR and + mod 2**32.
 
   The key-based expansion is the same all through the cipher.
 
   Comments?
 
   --John Kelsey, c445585@mizzou1.missouri.edu

