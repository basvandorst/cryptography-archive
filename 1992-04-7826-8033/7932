Path: msuinfo!netnews.upenn.edu!jvnc.net!yale.edu!qt.cs.utexas.edu!cs.utexas.edu!uunet!mnemosyne.cs.du.edu!isis.cs.du.edu!bfairlan
From: bfairlan@isis.cs.du.edu (Brian Fairlane)
Newsgroups: sci.crypt
Subject: Simple encryption(?)
Message-ID: <1992Apr11.120743.29655@mnemosyne.cs.du.edu>
Date: 11 Apr 92 12:07:43 GMT
Sender: usenet@mnemosyne.cs.du.edu (netnews admin account)
Organization: University of Denver, Dept. of Math & Comp. Sci.
Lines: 65

I'm about to explain a way to encrypt data, and I expect interested
people to tell me if it's safe, or under what circumstances it would
be safe, or what makes it unsafe etc...
People only interested in putting crypto-beginners down, can continue
reading without replying, thank you.

Ok.

The data is read into memory in blocks of n number of bytes (definable)
it is then "mixed" in a defined order, for example,
a block length of 3 could have a key looking like "3,2,1", meaning
that the third byte in the block will be put at position 1,
the second byte at position 2 (i.e. at the same place) and the first
byte at position 3. 
Then, it is Exclusive-Or'ed with one or more keys, with different
lenghts.
Even if a block isn't dividable with the longest key's length,
the Exclusive-Or'ing will not 'wrap' (start at key's first character again)
Example:
 
  Key: "nisse"
  block: "jajdhidhd0n39dnaldk3j.djsk,dksudj"
  E-OR w/"nissenissenissenissenissenissenissenisse . . ."
                                           ^
                                           | 
                                           -- does not "wrap"
 
Running the null-key/null-byte-file test with this, would, as you see
result in a null-byte file.
But when we're talking of files (text, executables) that's been encrypted
this way, I can't think about how it canbe done, to "crack"/decrypt this.
Even if you know how it is encrypted/have the program/have the source code.

I mean, you don't have the EOR-key, nor the length of the mix-sequence,
nor in what order the bytes should be placed within the mix-sequence
(the block).

Can somebody please, with a mind for mathematics, calculate how
many combinations there are, considering a EOR-key can be of
any length, as well as the mix-sequence, as well as the number of EOR-
keys differ, and the lengths of all keys can be of (any) size/length.
(if somebody feels like challenging their intellect, let's say
 the mix-sequence may be, at most 128 bytes, and three EOR-keys can
 be at most 16 bytes each).
a block length of 3 (mix sequence) can have six combinations;
"1,2,3" "2,3,1" "3,2,1" "2,1,3" "3,1,2" "1,3,2"...

if you begin, systematically, at block lengh 1 up to 128... 
now tell me the number of combinations.
Then add that number to the number of combinations possible from
three individual-length (let's say up to 16 bytes) keys, put
together!

---------
 
To clear a few things here. I hope it's not your "goal" to
have an algorithm, that makes the use of one-key encryptions
safe? That's kind of stupid, I'd say... I'll appreciate anyone who'll
enlighten me on this one as well...
 
      regards,
 
        Brian

b
