                          POLLUX ENCIPHERMENT
3/28/1990                 -------------------

                       By Mike Barlow, Montreal

     The Pollux cipher is one of three "fractionating" ciphers
based on the Morse code that are in use by the ACA. The plaintext
is converted into Morse, with "X"s being used as dividers. One X
is used between letters, and two between words. The resulting
stream of dots, dashes and X's is translated into digits and
becomes the ciphertext. The translation table in the case of the
Pollux consists of the ten digits 1-0 placed against four dots,
three dashes and three X's (by ACA rules). The sequence of dots
etc is determined by the encipherer.

    Note that there are thus four possible digits for a dot,
three for a dash, and three for a spacer. Also note that the
final ciphertext may be five or six times the length of the input
plaintext. For this reason, the ACA length limits suggested in
"The ACA & You" for this cipher (155-385 letters) seem to be in
error. This program suggests 55-75 as a more reasonable length.

Program Sequence
----------------
    The program does the following:
1 - loads a standard Morse Code table.
2 - accepts plaintext entry, maintaining word spaces.
3 - sets up the symbol translation table, producing "bags" of
    possible digits for dots, dashes and spaces.
4 - performs the substitution by randomly selecting digits from
    the "bags", and then displays the answer.
Some additional cosmetic details have also been included.

Program Details
---------------
    The Standard Data Entry routine has to be modified a bit, as
the Pollux needs to retain word spaces but eliminate punctuation.
The text must also be put into Upper Case. As the text should not
exceed 75 characters, we can keep it in a string P$.

    To convert to Morse code, we can use the routine from Caxton
Foster's Fractionated Morse encipherer, page 217 of his book
"Cryptanalysis for Microcomputers". He uses the digits 1, 2 and 3
to represent dots, dashes and spaces, and gives a DATA table
which the program READs into array MC(5,26). A slight change is
needed to convert from our P$ to his routine; each letter of P$
is changed to be in the range 1-26 by INSTRinging it against an
upper case alphabet AL$. The position found is T; spaces will
give T=0. Each individual symbol is then stored in array M(2000),
just as in the Foster original. We retain the use of an array
because the possible length of the ciphertext could easily exceed
240 chars, the limit for a string in GWBASIC.

    At line 170 we add some optional entertainment. N is counting
plaintext letters and spaces; as long as N is less than 15 we
drop down to lines 171-173 which cause the letters to be sounded
in Morse code. The definitions of these sounds is in SUB 15150,
and can be adjusted to suit your tastes, speed of CPU, etc. As
each symbol sounds, it is displayed in reverse video on the
screen.

    At line 250 we produce the symbol table POLLUX$. This can be
pre-set in line 20040, which is where the default ACA table is
kept, or we can use the computer to generate a pattern. (With
only ten symbols, you could put them in manually, but this is
more fun!).

    The generation routine is at line 1000. Array SYMBOL$(10) is
cleared out, and then we pick a random number between 1 and 10 in
Line 1050. [If you have a more modern BASIC than GWBASIC, this
line is just Y=RND(10)]. Now we look to see if cell SYMBOL$(Y)
has anything in it. If so, go for another random number. If not,
occupy it. The first four numbers are "dots", and these numbers
are also concatenated and stored as DIT$. The next three are
dashes and go into DAH$, and the last three into EX$. These three
strings are used as "bags" from which we will choose a number
during the substitution process. String POLLUX$ is also assembled
so that a neat display of the translation table is possible.

   The table is now used to produce the ciphertext. For each
symbol in M(2000) we go to the relevant "bag" of possible digits
and select one randomly, allowing repeats. Since these are
digits, they have a leading blank when printing, but as the range
is 1-0 with no double digits we can use a PRINT USING statement
to line the digits up nicely. I pinched PHOENIX's ideas for lines
385/6 to print in fives in rows of 65.

Fed up with Typing?
-------------------
    An ASCII version of this program is available from the author
on his ENCIPHER disk, IBM 360K format.