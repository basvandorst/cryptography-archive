                          MORBIT ENCIPHERMENT
4/1/1990                  -------------------

                       By Mike Barlow, Montreal

     The Morbit cipher is one of three "fractionating" ciphers
based on the Morse code that are in use by the ACA. The plaintext
is converted into Morse, with "X"s being used as dividers. One X
is used between letters, and two between words. The resulting
stream of dots, dashes and X's is split into pairs and compared with
a table of nine Morse digraphs ("..", ".-", "--", etc) set against a
nine-digit numeric key. The numbers corresponding to the digraphs
become the ciphertext.

Program Sequence
----------------
    The program does the following:
1 - loads a standard Morse Code table.
2 - generates a random 9-digit non-repeating key.
3 - accepts plaintext entry, maintaining word spaces.
4 - sets up the symbol translation table.
4 - performs the substitution and displays the answer.
Some additional cosmetic details have also been included.

Program Details
---------------
    Much of the program is identical to the Pollux encipherer.
However, we start by determining the numeric key to be used,
allowing choice of the built-in example from Line 20040. The
generator is in SUB 1000, which repeatedly makes random numbers
between 1 and 9 and adds them to the output KW$ if they are not
already in it.

    Note that if you wish to start from a key WORD, you can use
the routines in the NICODEMUS.ENC to convert from a word to
digits.

    The Standard Data Entry routine has to be modified a bit, as
the Morbit needs to retain word spaces but eliminate punctuation.
The text must also be put into Upper Case. As the text should not
exceed 75 characters, we can keep it in a string P$.

    To convert to Morse code, we use the routine from Caxton
Foster's Fractionated Morse encipherer, page 217 of his book
"Cryptanalysis for Microcomputers". He uses the digits 1, 2 and 3
to represent dots, dashes and spaces, and gives a DATA table
which the program READs into array MC(5,26). A slight change is
needed to convert from our P$ to his routine; each letter of P$
is changed to be in the range 1-26 by INSTRinging it against an
upper case alphabet AL$. The position found is T; spaces will
give T=0. Each individual symbol is then stored in array M(2000),
just as in the Foster original. We retain the use of an array
because the possible length of the ciphertext could easily exceed
240 chars, the limit for a string in GWBASIC.

    At line 170 we add some optional entertainment. N is counting
plaintext letters and spaces; as long as N is less than 15 we
drop down to lines 171-173 which cause the letters to be sounded
in Morse code. The definitions of these sounds is in SUB 15150,
and can be adjusted to suit your tastes, speed of CPU, etc. As
each symbol sounds, it is displayed in reverse video on the
screen.

    Line 220 makes sure there are an even number of symbols in
the text, as we need to pair them later. Line 250 displays the
symbol table for re-assurance.

    The table is now used to produce the ciphertext. The Morse
symbols in M(2000) are put into pairs by Line 330, which are then
compared to the table of digraphs TWO$. The position information
is used to pull out the key digit which becomes part of the
ciphertext. The trap in line 350 for X=0 can be omitted. Line
9260 wraps up the whole thing.

Fed up with Typing?
-------------------
    An ASCII version of this program is available from the author
on his ENCIPHER disk, IBM 360K format.