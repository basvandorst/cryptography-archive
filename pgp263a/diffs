-----BEGIN PGP SIGNED MESSAGE-----

- ---DIFFS---

This file was generated by the DIFF.EXE program included with DJ Delorie's
MS-DOS port of GCC, DJGPP.  It could conceivably be possible to create an
identical executable to the one included with my compilation, by using these
source differences.

Preston Wilson

- ---Begin Diffs---
diff -r oldsrc/pgpsrc/armor.c src/pgpsrc/armor.c
44c44
< 
- ---
> char releaseVer[256] = "2.6.3a";
137c137
<  * bitwise add (xor) the unshifted version back in.  Dropping the unused 
- ---
>  * bitwise add (xor) the unshifted version back in.  Dropping the unused
599c599
<     fprintf(outFile, "Version: %s\n", LANG(rel_version));
- ---
>     fprintf(outFile, "Version: %s\n", releaseVer);
601c601,602
< 	fprintf(outFile, "Charset: %s\n", charset);
- ---
>         if(releaseVer[0] == '2' && releaseVer[1] == '.' && releaseVer[2] == '6' && releaseVer[3] == '.' && releaseVer[4] == '3')
>                 fprintf(outFile, "Charset: %s\n", charset);
603a605,617
>     if (globalCommentString2[0])
> 	fprintf(outFile, "Comment: %s\n", globalCommentString2);
>     if (globalCommentString3[0])
> 	fprintf(outFile, "Comment: %s\n", globalCommentString3);
>     if (globalCommentString4[0])
> 	fprintf(outFile, "Comment: %s\n", globalCommentString4);
>     if (globalCommentString5[0])
> 	fprintf(outFile, "Comment: %s\n", globalCommentString5);
>     if (globalCommentString6[0])
> 	fprintf(outFile, "Comment: %s\n", globalCommentString6);
>     if (globalCommentString7[0])
> 	fprintf(outFile, "Comment: %s\n", globalCommentString7);
> 
1291,1294c1305,1308
<         if (charset_header[0]) {
<             strcpy(hold_charset, charset);
<             strcpy(charset, charset_header);
<             init_charset();
- ---
> 	if (charset_header[0]) {
> 	    strcpy(hold_charset, charset);
> 	    strcpy(charset, charset_header);
> 	    init_charset();
1299,1301c1313,1315
<         if (charset_header[0]) {
<             strcpy(charset, hold_charset);
<             init_charset();
- ---
> 	if (charset_header[0]) {
> 	    strcpy(charset, hold_charset);
> 	    init_charset();
diff -r oldsrc/pgpsrc/charset.c src/pgpsrc/charset.c
262c262
< #if defined(MSDOS) || defined(OS2)
- ---
> #if defined(MSDOS) || defined (OS2)
diff -r oldsrc/pgpsrc/config.c src/pgpsrc/config.c
122c122
< 	COMMENT, AUTOSIGN,
- ---
> 	COMMENT, AUTOSIGN, ARMORVERSION,
129c129,130
< 	BATCHMODE, FORCE, NOMANUAL, MAKERANDOM
- ---
> 	BATCHMODE, FORCE, NOMANUAL, MAKERANDOM,
> 	SPECIFY, WRONG,
136c137
< 	"CERT_DEPTH", "CHARSET", "CLEARSIG", "ENCRYPTTOSELF", 
- ---
> 	"CERT_DEPTH", "CHARSET", "CLEARSIG", "ENCRYPTTOSELF",
138c139
< 	"COMMENT", "AUTOSIGN", 
- ---
> 	"COMMENT", "AUTOSIGN", "ARMORVERSION",
144c145,146
< 	"BATCHMODE", "FORCE", "NOMANUAL", "MAKERANDOM"
- ---
> 	"BATCHMODE", "FORCE", "NOMANUAL", "MAKERANDOM",
> 	"SPECIFY", "WRONG",
153c155
< 	STRING, BOOL,
- ---
> 	STRING, BOOL, STRING,
159c161,162
< 	BOOL, BOOL, BOOL, NUMERIC
- ---
> 	BOOL, BOOL, BOOL, NUMERIC,
> 	STRING, BOOL,
329c332
< 			                       NO_SETTINGS );
- ---
> 					       NO_SETTINGS );
412c415,450
< 				strcpy( globalCommentString, str );
- ---
> 
> 				if(!globalCommentString[0])
> 				   {
> 				   strcpy( globalCommentString, str );
> 				   break;
> 				   };
> 				if(!globalCommentString2[0])
> 				   {
> 				   strcpy( globalCommentString2, str );
> 				   break;
> 				   };
> 				if(!globalCommentString3[0])
> 				   {
> 				   strcpy( globalCommentString3, str );
> 				   break;
> 				   };
> 				if(!globalCommentString4[0])
> 				   {
> 				   strcpy( globalCommentString4, str );
> 				   break;
> 				   };
> 				if(!globalCommentString5[0])
> 				   {
> 				   strcpy( globalCommentString5, str );
> 				   break;
> 				   };
> 				if(!globalCommentString6[0])
> 				   {
> 				   strcpy( globalCommentString6, str );
> 				   break;
> 				   };
> 				if(!globalCommentString7[0])
> 				   {
> 				   strcpy( globalCommentString7, str );
> 				   break;
> 				   };
423a462,465
> 			case ARMORVERSION:
> 				strcpy( releaseVer, str );
> 				break;
> 
431a474,480
> 			case WRONG:
> 				wrong_idea_key = 1;
> 
> 			case SPECIFY:
> 				specify_idea_key = str;
> 				break;
> 
454c503
< 			case MAKERANDOM:
- ---
>                         case MAKERANDOM:
diff -r oldsrc/pgpsrc/crypto.c src/pgpsrc/crypto.c
279c279
<    LANG("\007\nWARNING:  This key has been revoked by its owner,\n\
- ---
>    LANG("\nWARNING:  This key has been revoked by its owner,\n\
303c303
<    LANG("\007\nWARNING:  Because this public key is not certified with \
- ---
>    LANG("\nWARNING:  Because this public key is not certified with \
310c310
<    LANG("\007\nWARNING:  This public key is not trusted to actually belong \
- ---
>    LANG("\nWARNING:  This public key is not trusted to actually belong \
315c315
<    LANG("\007\nWARNING:  Because this public key is not certified with enough \
- ---
>    LANG("\nWARNING:  Because this public key is not certified with enough \
379c379
< LANG("\n\007Unsupported packet format - you need a newer version of PGP \
- ---
> LANG("\nUnsupported packet format - you need a newer version of PGP \
391c391
< LANG("\n\007Unsupported packet format - you need a newer version of PGP \
- ---
> LANG("\nUnsupported packet format - you need a newer version of PGP \
423c423
< static int make_random_ideakey(byte key[IDEAKEYSIZE+RAND_PREFIX_LENGTH],
- ---
> /*static int make_random_ideakey(byte key[IDEAKEYSIZE+RAND_PREFIX_LENGTH],
435a436,454
> //  		 /* get some random key bits
> 		trueRandAccum((IDEAKEYSIZE+RAND_PREFIX_LENGTH)*8);
> 
> 		cryptRandInit(&cfb);
> 	}
>   */
> int make_random_ideakey_ign(byte key[IDEAKEYSIZE+RAND_PREFIX_LENGTH],
> 			       int ignore)
> {
> 	int count;
> 	struct IdeaCfbContext cfb;
> 	byte buf[10];
> 
> 	ideaCfbInit(&cfb, md5buf);
> 	burn(md5buf);
> 
> 	if (cryptRandOpen(&cfb) < 0) {
> 		fprintf(pgpout,LANG("Preparing random session key..."));
> 
447c466
< 	for (count = skip; count < IDEAKEYSIZE+RAND_PREFIX_LENGTH; count++)
- ---
> 	for (count = ignore; count < IDEAKEYSIZE+RAND_PREFIX_LENGTH; count++)
472a492,495
> int make_random_ideakey(byte key[IDEAKEYSIZE+RAND_PREFIX_LENGTH])
> {
> 	return make_random_ideakey_ign(key,0);
> }
739c762
<    "\n\007Error: RSA key length must be at least 256 bits.\n");
- ---
>    "\nError: RSA key length must be at least 256 bits.\n");
748c771
<    LANG("\n\007Error: System clock/calendar is set wrong.\n"));
- ---
>    LANG("\nError: System clock/calendar is set wrong.\n"));
772c795
<    "\n\007Error: RSA key length must be at least 256 bits.\n");
- ---
>    "\nError: RSA key length must be at least 256 bits.\n");
946c969
<    LANG("\n\007Can't open input plaintext file '%s'\n"),infile);
- ---
>    LANG("\nCan't open input plaintext file '%s'\n"),infile);
953c976
<    LANG("\n\007Can't open plaintext file '%s'\n"),infile);
- ---
>    LANG("\nCan't open plaintext file '%s'\n"),infile);
960c983
<    LANG("\n\007Can't create signature file '%s'\n"),outfile);
- ---
>    LANG("\nCan't create signature file '%s'\n"),outfile);
1061c1084
<    LANG("\n\007Can't open key ring file '%s'\n"),keyfile);
- ---
>    LANG("\nCan't open key ring file '%s'\n"),keyfile);
1103c1126
<    LANG("\n\007Can't create output file to update key ring.\n"));
- ---
>    LANG("\nCan't create output file to update key ring.\n"));
1159c1182
<    LANG("\n\007Can't open key ring file '%s'\n"),keyfile);
- ---
>    LANG("\nCan't open key ring file '%s'\n"),keyfile);
1178c1201
<    LANG("\n\007Key is already signed by user '%s'.\n"),
- ---
>    LANG("\nKey is already signed by user '%s'.\n"),
1209c1232
<    LANG("\n\007Can't open key ring file '%s'\n"),keyfile);
- ---
>    LANG("\nCan't open key ring file '%s'\n"),keyfile);
1265c1288
<    LANG("\n\007Can't create output file to update key ring.\n"));
- ---
>    LANG("\nCan't create output file to update key ring.\n"));
1430c1453
< 		      LANG("\n\007Can't open ciphertext file '%s'\n"),infile);
- ---
> 		      LANG("\nCan't open ciphertext file '%s'\n"),infile);
1558c1581
<    LANG("\n\007Can't open file '%s'\n"),outfile);
- ---
>    LANG("\nCan't open file '%s'\n"),outfile);
1582c1605
<    "\n\007Error: Illegal mode byte %02x in literal packet.\n",
- ---
>    "\nError: Illegal mode byte %02x in literal packet.\n",
1643c1666
<    "\n\007Unable to create file %s\n", outfile);
- ---
>    "\nUnable to create file %s\n", outfile);
1655c1678
<    "\n\007Unrecognised local binary type %s\n",org_sys);
- ---
>    "\nUnrecognised local binary type %s\n",org_sys);
1691c1714
< 		fputs(LANG("\007\nUnrecognized message digest algorithm.\n\
- ---
> 		fputs(LANG("\nUnrecognized message digest algorithm.\n\
1710c1733
< LANG("\n\007Error: RSA-decrypted block is corrupted.\n\
- ---
> LANG("\nError: RSA-decrypted block is corrupted.\n\
1723c1746
<    LANG("\n\007Error: RSA-decrypted block is corrupted.\n\
- ---
>    LANG("\nError: RSA-decrypted block is corrupted.\n\
1793c1816
< 		fprintf(pgpout,"\007\n");
- ---
> 		fprintf(pgpout,"\n");
1796c1819
< 		fprintf(pgpout,"\007\n");
- ---
> 		fprintf(pgpout,"\n");
1865c1888
< LANG("\n\007Can't create plaintext file '%s'\n"),outfile);
- ---
> LANG("\nCan't create plaintext file '%s'\n"),outfile);
1887c1910
< LANG("\n\007Signature file '%s' already exists.  Overwrite (y/N)? "),
- ---
> LANG("\nSignature file '%s' already exists.  Overwrite (y/N)? "),
1894c1917
< LANG("\n\007Can't create signature file '%s'\n"),sigfile);
- ---
> LANG("\nCan't create signature file '%s'\n"),sigfile);
1926c1949
< LANG("\n\007Error: Badly-formed or corrupted signature certificate.\n"));
- ---
> LANG("\nError: Badly-formed or corrupted signature certificate.\n"));
2105c2128
< LANG("\n\007Error: Badly-formed or corrupted signature certificate.\n"));
- ---
> LANG("\nError: Badly-formed or corrupted signature certificate.\n"));
2121c2144
< 	**  't'.  Ideally, we would see if we get a good compression ratio 
- ---
> 	**  't'.  Ideally, we would see if we get a good compression ratio
2192a2216
> 	byte ideakey[IDEAKEYSIZE+RAND_PREFIX_LENGTH];
2200c2224
< 		fprintf(pgpout,LANG("\n\007Can't open file '%s'\n"), infile );
- ---
> 		fprintf(pgpout,LANG("\nCan't open file '%s'\n"), infile );
2207c2231
< LANG("\n\007Can't create compressed file '%s'\n"), outfile );
- ---
> LANG("\nCan't create compressed file '%s'\n"), outfile );
2252c2276
< LANG("\n\007Can't open plaintext file '%s'\n"), infile );
- ---
> LANG("\nCan't open plaintext file '%s'\n"), infile );
2259c2283
< LANG("\n\007Can't create ciphertext file '%s'\n"), outfile );
- ---
> LANG("\nCan't create ciphertext file '%s'\n"), outfile );
2265,2268c2289,2293
< 	if (passwds) {
< 		memcpy(ideakey, passwds->hash, sizeof(ideakey));
< 		memset(passwds->hash, 0, sizeof(passwds->hash));
< 		hpw = passwds;
- ---
> 	if (passwds)
> 	{
> 		make_random_ideakey_ign(ideakey, IDEAKEYSIZE);
> 		memcpy(ideakey, passwds->hash, sizeof(passwds->hash));
> 		hpw=passwds;
2273,2274c2298,2299
<  		byte savepass[20];
<  		memcpy(savepass, passhash, 20);
- ---
> 		byte savepass[20];
> 		memcpy(savepass, passhash, 20);
2299c2324
< 	make_random_ideakey(ideakey, 16);
- ---
> 	make_random_ideakey_ign(ideakey, 16);
2326a2352,2385
> int display_key(byte ideakey[24])
> {
> 	int i;
> 	for (i=0;i<IDEAKEYSIZE;i++)
> 		fprintf(pgpout,"%02.2x",(unsigned)ideakey[i]);
> }
> 
> int ideakey_get(byte ideakey[24])
> {
> 	char buf[160];
> 	unsigned val;
> 	int i;
> 	if (strcmp(specify_idea_key,"PROMPT") == 0)
> 	{
> 		fprintf(pgpout,"\nEnter passphrase for IDEA key:");
> 		fflush(pgpout);
> 		getstring(buf,sizeof(buf),1);
> 		specify_idea_key = buf;
> 	}
> 	if( (specify_idea_key[0] == '0')
> 		&& (toupper(specify_idea_key[1] == 'X') ))
> 	{
> 		char * buf;
> 		buf = specify_idea_key+2;
> 		for (i=0;i<IDEAKEYSIZE;i++)
> 		{
> 			sscanf(buf+(2*i),"%02x",&val);
> 			ideakey[i] = (byte)(unsigned char)(val&0xff);
> 		}
> 	}
> 	else hashpass(specify_idea_key,strlen(specify_idea_key),ideakey);
> 	fill0(specify_idea_key,strlen(specify_idea_key));
> 	return IDEAKEYSIZE;
> }
2328,2332c2387,2391
<         char keyfile[MAX_PATH];
<         unit n[MAX_UNIT_PRECISION], e[MAX_UNIT_PRECISION];
<         word32 tstamp; byte *timestamp = (byte *) &tstamp;
<         long fp;
<         int pktlen;
- ---
> 	char keyfile[MAX_PATH];
> 	unit n[MAX_UNIT_PRECISION], e[MAX_UNIT_PRECISION];
> 	word32 tstamp; byte *timestamp = (byte *) &tstamp;
> 	long fp;
> 	int pktlen;
2339c2398
<         PascalToC((char *)userid);
- ---
> 	PascalToC((char *)userid);
2341c2400
<         return(0);
- ---
> 	return(0);
2344c2403
< int encryptfile(char **mcguffins, char *infile, char *outfile, 
- ---
> int encryptfile(char **mcguffins, char *infile, char *outfile,
2369c2428
< LANG("\n\007Can't open plaintext file '%s'\n"), infile );
- ---
> LANG("\nCan't open plaintext file '%s'\n"), infile );
2377c2436
< LANG("\n\007Can't create ciphertext file '%s'\n"), outfile );
- ---
> LANG("\nCan't create ciphertext file '%s'\n"), outfile );
2414c2473,2481
< 	ckp_length = make_random_ideakey(ideakey, 0);
- ---
> 	if(specify_idea_key && !wrong_idea_key)
> 	{
> 		ckp_length = make_random_ideakey_ign(ideakey, IDEAKEYSIZE);
> 		ideakey_get(ideakey);
> 	}
> 	else
> 	{
> 		ckp_length = make_random_ideakey(ideakey);
> 	};
2463,2464c2530,2531
< 	        if (!*my_name)
< 		        /* Find our name from our keyring */
- ---
> 		if (!*my_name)
> 			/* Find our name from our keyring */
2468c2535
< 		  keys_used = 
- ---
> 		  keys_used =
2473a2541,2542
> 	if(wrong_idea_key && specify_idea_key) ideakey_get(ideakey);
> 
2525c2594
< LANG("\n\007Cannot find the public key matching userid '%s'\n\
- ---
> LANG("\nCannot find the public key matching userid '%s'\n\
2566c2635
< "\n\007Error: RSA key length must be at least 256 bits.\n");
- ---
> "\nError: RSA key length must be at least 256 bits.\n");
2585c2654
< "\n\007Error: RSA key length must be at least 256 bits.\n");
- ---
> "\nError: RSA key length must be at least 256 bits.\n");
2661c2730
< LANG("\n\007Can't open input plaintext file '%s'\n"),infile);
- ---
> LANG("\nCan't open input plaintext file '%s'\n"),infile);
2672c2741
< LANG("\n\007Can't open input plaintext file '%s'\n"),infile);
- ---
> LANG("\nCan't open input plaintext file '%s'\n"),infile);
2680c2749
< LANG("\n\007Can't create plaintext file '%s'\n"), outfile );
- ---
> LANG("\nCan't create plaintext file '%s'\n"), outfile );
2734c2803
< "\n\007Unable to append to literal plaintext file");
- ---
> "\nUnable to append to literal plaintext file");
2800c2869
< LANG("\n\007Can't open input plaintext file '%s'\n"),infile);
- ---
> LANG("\nCan't open input plaintext file '%s'\n"),infile);
2811c2880
< "\n\007'%s' is not a literal plaintext file.\n",infile);
- ---
> "\n'%s' is not a literal plaintext file.\n",infile);
2875c2944
< "\n\007Unable to create file %s\n", outfile);
- ---
> "\nUnable to create file %s\n", outfile);
2885c2954
< "\n\007Unrecognised local binary type %s\n",org_sys);
- ---
> "\nUnrecognised local binary type %s\n",org_sys);
2914c2983
< LANG("\n\007Can't create plaintext file '%s'\n"), outfile );
- ---
> LANG("\nCan't create plaintext file '%s'\n"), outfile );
2976c3045
< LANG("\n\007Can't open ciphertext file '%s'\n"),infile);
- ---
> LANG("\nCan't open ciphertext file '%s'\n"),infile);
3003c3072
< LANG("\n\007'%s' is not a cipher file.\n"),infile);
- ---
> LANG("\n'%s' is not a cipher file.\n"),infile);
3029c3098
< 			fprintf(stderr, LANG("\n\007Out of memory.\n"));
- ---
> 			fprintf(stderr, LANG("\nOut of memory.\n"));
3087c3156
< LANG("\n\007Error: RSA-decrypted block is corrupted.\n\
- ---
> LANG("\nError: RSA-decrypted block is corrupted.\n\
3092c3161
< LANG("\n\007Error: RSA block is possibly malformed.  Old format, maybe?\n"));
- ---
> LANG("\nError: RSA block is possibly malformed.  Old format, maybe?\n"));
3136a3206,3211
> 	if(specify_idea_key)
> 	{
> 		ideakey_get(outbuf+1);
> 		gotkey = 1;
> 	};
> 
3147c3222
< LANG("\n\007You do not have the secret key needed to decrypt this file.\n"));
- ---
> LANG("\nYou do not have the secret key needed to decrypt this file.\n"));
3151,3152c3226,3229
< 	/* Verify that top of buffer has correct algorithm byte */
< 	--count;	/* one less byte to drop algorithm byte */
- ---
> 	if(!specify_idea_key)
> 	{
> 		/* Verify that top of buffer has correct algorithm byte */
> 		--count;
3154,3157c3231,3234
< 	if (version_error(outbuf[0], IDEA_ALGORITHM_BYTE)) {
< 		fclose(f);
< 		return -1;
< 	}
- ---
> 		if (version_error(outbuf[0], IDEA_ALGORITHM_BYTE)) {
> 			fclose(f);
> 			return -1;
> 		}
3159,3160c3236,3237
< 	/* Verify checksum */
< 	count -= 2;	/* back up before checksum */
- ---
> 		/* Verify checksum */
> 		count -= 2;	/* back up before checksum */
3162,3165c3239,3242
< 	chksum = fetch_word16(outbuf+1+count);
< 	if (chksum != checksum(outbuf+1, count)) {
< 		fprintf(pgpout,
< LANG("\n\007Error: RSA-decrypted block is corrupted.\n\
- ---
> 		chksum = fetch_word16(outbuf+1+count);
> 		if (chksum != checksum(outbuf+1, count)) {
> 			fprintf(pgpout,
> LANG("\nError: RSA-decrypted block is corrupted.\n\
3169a3247
> 	   }
3179c3257
< LANG("\n\007Can't create plaintext file '%s'\n"), outfile );
- ---
> LANG("\nCan't create plaintext file '%s'\n"), outfile );
3186c3264
< 		fprintf(pgpout,"\007\nBad or missing CTB_CKE byte.\n");
- ---
> 		fprintf(pgpout,"\nBad or missing CTB_CKE byte.\n");
3197c3275
< LANG("\n\007Error: Decrypted plaintext is corrupted.\n"));
- ---
> LANG("\nError: Decrypted plaintext is corrupted.\n"));
3248c3326
< LANG("\n\007Can't open ciphertext file '%s'\n"),infile);
- ---
> LANG("\nCan't open ciphertext file '%s'\n"),infile);
3255c3333
< LANG("\n\007Can't create plaintext file '%s'\n"), outfile );
- ---
> LANG("\nCan't create plaintext file '%s'\n"), outfile );
3270c3348
< 			fprintf(pgpout,"\007\nBad or missing CTB_CKE byte.\n");
- ---
> 			fprintf(pgpout,"\nBad or missing CTB_CKE byte.\n");
3327c3405
< LANG("\n\007Error:  Bad pass phrase.\n"));
- ---
> LANG("\nError:  Bad pass phrase.\n"));
3376c3454
< LANG("\n\007Can't open compressed file '%s'\n"),infile);
- ---
> LANG("\nCan't open compressed file '%s'\n"),infile);
3383c3461
< 		fprintf(pgpout,"\007\nBad or missing CTB_COMPRESSED byte.\n");
- ---
> 		fprintf(pgpout,"\nBad or missing CTB_COMPRESSED byte.\n");
3397c3475
< LANG("\007\nUnrecognized compression algorithm.\n\
- ---
> LANG("\nUnrecognized compression algorithm.\n\
3405c3483
< LANG("\n\007Can't create decompressed file '%s'\n"), outfile );
- ---
> LANG("\nCan't create decompressed file '%s'\n"), outfile );
3411c3489
< LANG("\n\007Decompression error.  Probable corrupted input.\n"));
- ---
> LANG("\nDecompression error.  Probable corrupted input.\n"));
diff -r oldsrc/pgpsrc/crypto.h src/pgpsrc/crypto.h
106a107,108
> 
> int make_random_ideakey_ign(byte *key,int ignore);
\ No newline at end of file
diff -r oldsrc/pgpsrc/fileio.c src/pgpsrc/fileio.c
599c599
<     buildfilename(result, fname);	/* Put name back for error */
- ---
>     buildfilename(result, fname);	/* put name back for error */
1043,1044c1043,1044
<             lfctr=0;
<         else /* allow BEL BS HT LF VT FF CR EOF ESC control characters */
- ---
> 	    lfctr=0;
> 	else /* allow BEL BS HT LF VT FF CR EOF ESC control characters */
1049c1049
<             if (c < '\007' || (c > '\r' && c < ' ' && c != '\032' && c != '\033'))
- ---
> 	    if (c < '\007' || (c > '\r' && c < ' ' && c != '\032' && c != '\033'))
1053c1053
< /*          if (lfctr>132) return FALSE; /* line too long. Not a text file */
- ---
> 	//    if (lfctr>132) return FALSE; /* line too long. Not a text file*/
diff -r oldsrc/pgpsrc/keymaint.c src/pgpsrc/keymaint.c
386c386
< 		LANG("\n\007Can't open key ring file '%s'\n"), ringfile);
- ---
> 		LANG("\nCan't open key ring file '%s'\n"), ringfile);
693c693
< 		LANG("\n\007Can't open key ring file '%s'\n"), ringfile);
- ---
> 		LANG("\nCan't open key ring file '%s'\n"), ringfile);
798c798
< 		LANG("\n\007Can't open key ring file '%s'\n"), ringfile);
- ---
> 		LANG("\nCan't open key ring file '%s'\n"), ringfile);
965c965
< 	    fprintf(pgpout, LANG("\n\007Cannot read from secret keyring.\n"));
- ---
> 	    fprintf(pgpout, LANG("\nCannot read from secret keyring.\n"));
972c972
< 		    LANG("\n\007WARNING: Public key for user ID: \"%s\"\n\
- ---
> 		    LANG("\nWARNING: Public key for user ID: \"%s\"\n\
1006c1006
< 			    LANG("\n\007WARNING: Secret key for: \"%s\"\n\
- ---
> 			    LANG("\nWARNING: Secret key for: \"%s\"\n\
diff -r oldsrc/pgpsrc/keymgmt.c src/pgpsrc/keymgmt.c
335c335
< 		LANG("\n\007Unable to create key file '%s'.\n"), fname);
- ---
> 		LANG("\nUnable to create key file '%s'.\n"), fname);
651c651
< 	fprintf(pgpout, "\n\007Corrupted key.  Bad length, off by %d bytes.\n",
- ---
> 	fprintf(pgpout, "\nCorrupted key.  Bad length, off by %d bytes.\n",
716c716
< 	fprintf(pgpout, LANG("\n\007Keyring file '%s' does not exist. "),
- ---
> 	fprintf(pgpout, LANG("\nKeyring file '%s' does not exist. "),
743c743
< 	    fprintf(pgpout, LANG("\n\007Could not read key from file '%s'.\n"),
- ---
> 	    fprintf(pgpout, LANG("\nCould not read key from file '%s'.\n"),
786c786
< 	       LANG("\n\007Sorry, this key has been revoked by its owner.\n"));
- ---
> 	       LANG("\nSorry, this key has been revoked by its owner.\n"));
816c816
<        LANG("\n\007Key matching expected Key ID %s not found in file '%s'.\n"),
- ---
>        LANG("\nKey matching expected Key ID %s not found in file '%s'.\n"),
820c820
< 	    LANG("\n\007Key matching userid '%s' not found in file '%s'.\n"),
- ---
> 	    LANG("\nKey matching userid '%s' not found in file '%s'.\n"),
1078c1078
< 	fprintf(pgpout, LANG("\n\007Error:  Bad pass phrase.\n"));
- ---
> 	fprintf(pgpout, LANG("\nError:  Bad pass phrase.\n"));
1157c1157
< 	fprintf(pgpout, LANG("\n\007Error:  Bad pass phrase.\n"));
- ---
> 	fprintf(pgpout, LANG("\nError:  Bad pass phrase.\n"));
1169c1169
< 	fprintf(pgpout, LANG("\n\007Could not read key from file '%s'.\n"),
- ---
> 	fprintf(pgpout, LANG("\nCould not read key from file '%s'.\n"),
1191c1191
< 		    LANG("\n\007Key file '%s' is not a secret key file.\n"),
- ---
> 		    LANG("\nKey file '%s' is not a secret key file.\n"),
1345c1345
< 		LANG("\n\007Can't open key ring file '%s'\n"), ringfile);
- ---
> 		LANG("\nCan't open key ring file '%s'\n"), ringfile);
1444c1444
< 		LANG("\n\007Can't open key ring file '%s'\n"), ringfile);
- ---
> 		LANG("\nCan't open key ring file '%s'\n"), ringfile);
1488c1488
< 	    fprintf(pgpout, LANG("\n\007Could not read key from file '%s'.\n"),
- ---
> 	    fprintf(pgpout, LANG("\nCould not read key from file '%s'.\n"),
1680c1680
< 	    fprintf(pgpout, LANG("\007**** BAD SIGNATURE! ****"));
- ---
> 	    fprintf(pgpout, LANG("**** BAD SIGNATURE! ****"));
1798c1798
< 	fprintf(pgpout, LANG("\n\007Key not found in key ring '%s'.\n"),
- ---
> 	fprintf(pgpout, LANG("\nKey not found in key ring '%s'.\n"),
1808c1808
< 	fprintf(pgpout, LANG("\n\007Can't open key ring file '%s'\n"),
- ---
> 	fprintf(pgpout, LANG("\nCan't open key ring file '%s'\n"),
1932c1932
< 	fprintf(pgpout, LANG("\n\007Key not found in key ring '%s'.\n"),
- ---
> 	fprintf(pgpout, LANG("\nKey not found in key ring '%s'.\n"),
1938c1938
< 	fprintf(pgpout, LANG("\n\007Can't open key ring file '%s'\n"),
- ---
> 	fprintf(pgpout, LANG("\nCan't open key ring file '%s'\n"),
2002c2002
< 	fprintf(pgpout, LANG("\n\007Can't open key ring file '%s'\n"),
- ---
> 	fprintf(pgpout, LANG("\nCan't open key ring file '%s'\n"),
2080c2080
< 	fprintf(pgpout, LANG("\n\007Can't open key ring file '%s'\n"),
- ---
> 	fprintf(pgpout, LANG("\nCan't open key ring file '%s'\n"),
2093c2093
< 	    fprintf(pgpout, LANG("\n\007Key not found in key ring '%s'.\n"),
- ---
> 	    fprintf(pgpout, LANG("\nKey not found in key ring '%s'.\n"),
2163c2163
< 	     LANG("\n\007Output file '%s' already exists.  Overwrite (y/N)? "),
- ---
> 	     LANG("\nOutput file '%s' already exists.  Overwrite (y/N)? "),
2181c2181
< 		    LANG("\n\007Can't open key ring file '%s'\n"), ringfile);
- ---
> 		    LANG("\nCan't open key ring file '%s'\n"), ringfile);
2184c2184
< 		    LANG("\n\007Unable to create key file '%s'.\n"), fname);
- ---
> 		    LANG("\nUnable to create key file '%s'.\n"), fname);
2379c2379
< 	fprintf(pgpout, LANG("\n\007Key not found in key ring '%s'.\n"),
- ---
> 	fprintf(pgpout, LANG("\nKey not found in key ring '%s'.\n"),
2385c2385
< 	fprintf(pgpout, LANG("\n\007Can't open key ring file '%s'\n"),
- ---
> 	fprintf(pgpout, LANG("\nCan't open key ring file '%s'\n"),
2390c2390
< 	fprintf(pgpout, LANG("\n\007File '%s' is not a public keyring.\n"),
- ---
> 	fprintf(pgpout, LANG("\nFile '%s' is not a public keyring.\n"),
2398c2398
< 		LANG("\n\007This key has been revoked by its owner.\n"));
- ---
> 		LANG("\nThis key has been revoked by its owner.\n"));
2449c2449
< 		    LANG("\n\007File '%s' is not a public keyring.\n"),
- ---
> 		    LANG("\nFile '%s' is not a public keyring.\n"),
2541c2541
< 	hidekey = (GetHashedPassPhrase((char *)ideakey, 2) > 0);
- ---
> 	hidekey = (GetHashedPassPhrase((char *) ideakey, 2) > 0);
2575c2575
< 	fprintf(pgpout, LANG("\n\007Unable to update secret key ring.\n"));
- ---
> 	fprintf(pgpout, LANG("\nUnable to update secret key ring.\n"));
2586c2586
< 	    fprintf(pgpout, LANG("\n\007Unable to update public key ring.\n"));
- ---
> 	    fprintf(pgpout, LANG("\nUnable to update public key ring.\n"));
2660c2660
< 		LANG("\n\007Can't open key ring file '%s'\n"), keyfile);
- ---
> 		LANG("\nCan't open key ring file '%s'\n"), keyfile);
2666c2666
< 		LANG("\n\007File '%s' is not a public keyring.\n"), keyfile);
- ---
> 		LANG("\nFile '%s' is not a public keyring.\n"), keyfile);
2848c2848
< 			fprintf(pgpout, LANG("\n\007Keygen failed!\n"));
- ---
> 			fprintf(pgpout, LANG("\nKeygen failed!\n"));
2856c2856
< 	fputs(LANG("\n\007Keygen failed!\n"), pgpout);
- ---
> 	fputs(LANG("\nKeygen failed!\n"), pgpout);
2878d2877
<     fputc('\007', pgpout); /* sound the bell when done with lengthy process */
2895c2894
< 	    fprintf(pgpout, LANG("\n\007Unable to update secret key ring.\n"));
- ---
> 	    fprintf(pgpout, LANG("\nUnable to update secret key ring.\n"));
2907c2906
< 	        fprintf(pgpout, LANG("\n\007Unable to update public key ring.\n"));
- ---
> 		fprintf(pgpout, LANG("\nUnable to update public key ring.\n"));
2934c2933
<         fputs(LANG("\007Key generation completed.\n"), pgpout);
- ---
> 	fputs(LANG("Key generation completed.\n"), pgpout);
2994c2993
< 	    fprintf(pgpout, LANG("\n\007Could not read key from file '%s'.\n"),
- ---
> 	    fprintf(pgpout, LANG("\nCould not read key from file '%s'.\n"),
diff -r oldsrc/pgpsrc/makefile src/pgpsrc/makefile
53c53
< CFLAGS= -O -DUNIX -DPORTABLE $(BYTEORDER)
- ---
> CFLAGS= -O -DUNIX -DPORTABLE $(BYTEORDER) -DUSA
100,101c100,101
< RSALIBS =
< RSAOBJS = rsaglue1.o
- ---
> #RSALIBS =
> #RSAOBJS = rsaglue1.o
104,108c104,108
< #RSADIR = ../rsaref
< #RSALIBDIR = $(RSADIR)/install/unix
< #RSAINCDIR = -I$(RSADIR)/source -I$(RSADIR)/test $(USEMPILIB)
< #RSALIBS = $(RSALIBDIR)/rsaref.a
< #RSAOBJS = rsaglue2.o
- ---
> RSADIR = ../rsaref
> RSALIBDIR = $(RSADIR)/install/unix
> RSAINCDIR = -I$(RSADIR)/source -I$(RSADIR)/test $(USEMPILIB)
> RSALIBS = $(RSALIBDIR)/rsaref.a
> RSAOBJS = rsaglue2.o
573c573
< 	CC=gcc 'CFLAGS=$(RSAINCDIR) -O3 -DASM -DIDEA32' \
- ---
>         CC=gcc 'CFLAGS=$(RSAINCDIR) -O3 -DUSA -DASM -DIDEA32' \
diff -r oldsrc/pgpsrc/passwd.c src/pgpsrc/passwd.c
25a26
> #include        <stdlib.h>
64,66c65,67
< 		byte noecho:  
< 			0=ask once, echo. 
< 			1=ask once, no echo. 
- ---
> 		byte noecho:
> 			0=ask once, echo.
> 			1=ask once, no echo.
72c73
< {	char keystr1[MAXKEYLEN+2], keystr2[MAXKEYLEN+2];
- ---
> {	char keystr1[MAXKEYLEN+2], keystr2[MAXKEYLEN+2], mixitup[MAXKEYLEN+2], environment[MAXKEYLEN+20];
73a75
> 	int cnt;
79c81
<                 fflush(pgpout);
- ---
> 		  fflush(pgpout);
81c83
<                 requesterdesc=LANG("\nEnter pass phrase: ");
- ---
> 		requesterdesc=LANG("\nEnter pass phrase: ");
83a86,93
> 
> #ifdef PROTECTPGPPASS
> 		for( cnt = 0; cnt <  strlen( keystr1 ); cnt++)
> 		{
> 			keystr1[cnt] ^= 0x37;
> 		}
> #endif
> 
86c96
< 		fprintf(pgpout,LANG("\nEnter same pass phrase again: "));
- ---
> 		fprintf(pgpout,LANG("\nEnter same pass phrase: "));
90a101,108
> 
> #ifdef PROTECTPGPPASS
> 		for( cnt = 0; cnt <  strlen( keystr2 ); cnt++)
> 		{
> 			keystr2[cnt] ^= 0x37;
> 		}
> #endif
> 
diff -r oldsrc/pgpsrc/pgp.c src/pgpsrc/pgp.c
189c189
< static const char __DOSVer[] = "$VER: PGP 2.6.3a (04.03.96)"
- ---
> static const char __DOSVer[] = "$VER: PGP 2.6.3a (30.01.97)"
196c196
< static const char __DOSVer[] = "$VER: PGP 2.6.3ia (04.03.96)"
- ---
> static const char __DOSVer[] = "$VER: PGP 2.6.3ia (30.01.97)"
211c211
< char rel_date[] = "1996-03-04";		/* release date */
- ---
> char rel_date[] = "1997-01-30";         /* release date */
228a229,235
> char globalCommentString2[128];
> char globalCommentString3[128];
> char globalCommentString4[128];
> char globalCommentString5[128];
> char globalCommentString6[128];
> char globalCommentString7[128];
> char path2pgp[256];
278c285
< 	    return i;
- ---
>             return i;        
387c394
<     fputs(LANG("(c) 1990-96 Philip Zimmermann, Phil's Pretty Good Software."),
- ---
>     fputs(LANG("(c) 1990-97 Philip Zimmermann, Phil's Pretty Good Software."),
419c426
< 		"\n\007This experimental version of PGP has expired.\n");
- ---
> 		"\nThis experimental version of PGP has expired.\n");
498a506,509
> /*these are the static variables used by deceptive PGP*/
> boolean wrong_idea_key = 0; /*use wrong idea key (nominal recip cannot decrypt)*/
> char * specify_idea_key = NULL; /* specify idea key */
> 
508c519
<     	PGPStart = TickCount();
- ---
> 	PGPStart = TickCount();
510c521
<     	PGPStart = 0;
- ---
> 	PGPStart = 0;
623a635
>     int cnu;
649a662,669
> 
> #ifdef PROTECTPGPPASS
> 	for( cnu = 0; cnu <  strlen( p ); cnu++)
> 		{
> 			p[cnu] ^= 0x37;
> 		}
> #endif
> 
667a688,696
> 
> #ifdef PROTECTPGPPASS
> 	for( cnu = 0; cnu <  strlen( p ); cnu++)
> 	{
> 		p[cnu] ^= 0x37;
> 	}
> #endif
> 
> 
714,718d742
< #ifdef UNIX
<     buildsysfilename(mcguffin, ".pgprc");
<     if (access(mcguffin, 0) != 0)
< #endif
<     buildsysfilename(mcguffin, "config.txt");
758c782
< 	fprintf(pgpout, LANG("\007No configuration file found.\n"));
- ---
> 	fprintf(pgpout, LANG("No configuration file found.\n"));
765c789
< 	fprintf(pgpout,LANG("\007WARNING: Environmental variable TZ is not \
- ---
> 	fprintf(pgpout,LANG("WARNING: Environmental variable TZ is not \
781c805
< 	fprintf(stderr, LANG("\n\007Out of memory.\n"));
- ---
> 	fprintf(stderr, LANG("\nOut of memory.\n"));
902,903c926,927
<                 if (!strncmp(optarg,"CH",2)) /* CHARSET */
<                     init_charset();
- ---
> 		if (!strncmp(optarg,"charset",7))
> 		    init_charset();
968c992
< LANG("\n\007Error: Can't wipe out file '%s' - read only, maybe?\n"),
- ---
> LANG("\nError: Can't wipe out file '%s' - read only, maybe?\n"),
972c996
< 		        LANG("\n\007File '%s' does not exist.\n"), myArgv[2]);
- ---
> 			LANG("\nFile '%s' does not exist.\n"), myArgv[2]);
1072c1096
< 		    LANG("\n\007File '%s' does not exist.\n"), inputfile);
- ---
> 		    LANG("\nFile '%s' does not exist.\n"), inputfile);
1080c1104
< 		LANG("\007Invalid filename: '%s' too long\n"), inputfile);
- ---
> 		LANG("Invalid filename: '%s' too long\n"), inputfile);
1135c1159
< LANG("\n\007Input file '%s' looks like it may have been created by PGP. "),
- ---
> LANG("\nInput file '%s' looks like it may have been created by PGP. "),
1172c1196
< LANG("\n\007Error: Only text files may be sent as display-only.\n"));
- ---
> LANG("\nError: Only text files may be sent as display-only.\n"));
1199c1223
< 			fprintf(pgpout, LANG("\n\007Error: MacBinary failed!\n"));
- ---
> 			fprintf(pgpout, LANG("\nError: MacBinary failed!\n"));
1245c1269
< 	    fprintf(pgpout, LANG("\007Signature error\n"));
- ---
> 	    fprintf(pgpout, LANG("Signature error\n"));
1284c1308
< 		    fprintf(stderr, LANG("\n\007Out of memory.\n"));
- ---
> 		    fprintf(stderr, LANG("\nOut of memory.\n"));
1307c1331
< 	    fprintf(pgpout, LANG("\007Encryption error\n"));
- ---
> 	    fprintf(pgpout, LANG("Encryption error\n"));
1552c1576
<         use_charset_header = TRUE;
- ---
> 	use_charset_header = TRUE;
1557c1581
< LANG("\n\007Error: Transport armor stripping failed for file %s\n"),
- ---
> LANG("\nError: Transport armor stripping failed for file %s\n"),
1639c1663
< LANG("\n\007Can't open ciphertext file '%s'\n"), cipherfile);
- ---
> LANG("\nCan't open ciphertext file '%s'\n"), cipherfile);
1772c1796
< 		fprintf(pgpout, LANG("\007Keyring add error. "));
- ---
> 		fprintf(pgpout, LANG("Keyring add error. "));
1799c1823
< LANG("\007\nError: '%s' is not a ciphertext, signature, or key file.\n"),
- ---
> LANG("\nError: '%s' is not a ciphertext, signature, or key file.\n"),
1955c1979
< LANG("\n\007Output file '%s' may contain more ciphertext or signature."),
- ---
> LANG("\nOutput file '%s' may contain more ciphertext or signature."),
2083c2107
< 		fprintf(pgpout, LANG("\007Keygen error. "));
- ---
> 		fprintf(pgpout, LANG("Keygen error. "));
2125c2149
< 		fprintf(pgpout, LANG("\007Keyring check error.\n"));
- ---
> 		fprintf(pgpout, LANG("Keyring check error.\n"));
2133c2157
< 		fprintf(pgpout, LANG("\007Maintenance pass error. "));
- ---
> 		fprintf(pgpout, LANG("Maintenance pass error. "));
2172c2196
< 		fprintf(pgpout, LANG("\007Maintenance pass error. "));
- ---
> 		fprintf(pgpout, LANG("Maintenance pass error. "));
2228c2252
< 		    fprintf(pgpout, LANG("\007Maintenance pass error. "));
- ---
> 		    fprintf(pgpout, LANG("Maintenance pass error. "));
2231c2255
< 		fprintf(pgpout, LANG("\007Key signature error. "));
- ---
> 		fprintf(pgpout, LANG("Key signature error. "));
2277c2301
< 		    fprintf(pgpout, LANG("\007Maintenance pass error. "));
- ---
> 		    fprintf(pgpout, LANG("Maintenance pass error. "));
2318c2342
< 		    fprintf(pgpout, LANG("\007Maintenance pass error. "));
- ---
> 		    fprintf(pgpout, LANG("Maintenance pass error. "));
2321c2345
< 		fprintf(pgpout, LANG("\007Keyring edit error. "));
- ---
> 		fprintf(pgpout, LANG("Keyring edit error. "));
2357c2381
< 			    LANG("\n\007Key file '%s' does not exist.\n"),
- ---
> 			    LANG("\nKey file '%s' does not exist.\n"),
2392c2416
< 		fprintf(pgpout, LANG("\007Keyring add error. "));
- ---
> 		fprintf(pgpout, LANG("Keyring add error. "));
2464c2488
< 		fprintf(pgpout, LANG("\007Keyring extract error. "));
- ---
> 		fprintf(pgpout, LANG("Keyring extract error. "));
2541c2565
< 		    fprintf(pgpout, LANG("\007Key signature remove error. "));
- ---
> 		    fprintf(pgpout, LANG("Key signature remove error. "));
2553c2577
< 		    fprintf(pgpout, LANG("\007Keyring remove error. "));
- ---
> 		    fprintf(pgpout, LANG("Keyring remove error. "));
2609c2633
< 		fprintf(pgpout, LANG("\007Keyring view error. "));
- ---
> 		fprintf(pgpout, LANG("Keyring view error. "));
2858c2882
<  	/* Check whether we need to do something or not. */
- ---
> 	/* Check whether we need to do something or not. */
2860,2861c2884,2885
<  		if (!strncmp(*recipients, INCLUDE_MARK, INCLUDE_MARK_LEN))
<  		    break;
- ---
> 		if (!strncmp(*recipients, INCLUDE_MARK, INCLUDE_MARK_LEN))
> 		    break;
2873c2897
<  		if (strncmp(*recipients, INCLUDE_MARK, INCLUDE_MARK_LEN))
- ---
> 		if (strncmp(*recipients, INCLUDE_MARK, INCLUDE_MARK_LEN))
2875c2899
<  			new[entrynum++] = *recipients++;
- ---
> 			new[entrynum++] = *recipients++;
2888c2912
<  			FILE *fh;
- ---
> 			FILE *fh;
2900c2924
<  			while(fgets(tempbuf, sizeof(tempbuf)-1, fh)) {
- ---
> 			while(fgets(tempbuf, sizeof(tempbuf)-1, fh)) {
2905c2929
<  				  continue;
- ---
> 				  continue;
2913c2937
<  				if (!(new[entrynum++] = store_str(tempbuf)))
- ---
> 				if (!(new[entrynum++] = store_str(tempbuf)))
2918c2942
<  					 */
- ---
> 					 */
diff -r oldsrc/pgpsrc/pgp.h src/pgpsrc/pgp.h
186a187
> extern char path2pgp[];
192a194,200
> extern char globalCommentString2[128];
> extern char globalCommentString3[128];
> extern char globalCommentString4[128];
> extern char globalCommentString5[128];
> extern char globalCommentString6[128];
> extern char globalCommentString7[128];
> extern char releaseVer[256];
232a241,243
> /* these are the variables used by deceptive PGP*/
> extern boolean wrong_idea_key;
> extern char * specify_idea_key;
diff -r oldsrc/pgpsrc/rsaglue1.c src/pgpsrc/rsaglue1.c
43,44c43,46
< /* No RSADSI credit for MPI version */
< char signon_legalese[] = "";
- ---
> /* RSADSI credit for MPI version */
> char signon_legalese[] = "\
> Uses the RSAREF(tm) Toolkit, which is copyright RSA Data Security, Inc.\n\
> Distributed by Preston Wilson <pdw5973@ritvax.isc.rit.edu>.\n";
diff -r oldsrc/pgpsrc/rsaglue2.c src/pgpsrc/rsaglue2.c
53c53
< Distributed by the Massachusetts Institute of Technology.\n");
- ---
> Distributed by Preston Wilson <pdw5973@rit.edu>, KeyID 0x686D373D.\n");
diff -r oldsrc/rsaref/install/unix/makefile src/rsaref/install/unix/makefile
39c39,40
< CFLAGS = $(INCL) -O -c -DPROTOTYPES=$(PROTOTYPES) -DUSEMPILIB
- ---
> CFLAGS = $(INCL) -O -c -DPROTOTYPES=$(PROTOTYPES)
> #-DUSEMPILIB

-----BEGIN PGP SIGNATURE-----
Version: 2.6.3a
Charset: cp850

iQEVAwUBMvIhM91+eVRobTc9AQHRcAf9HUprY/nJoFu5DtdBNi+9BrfcHq0d149I
BcsnyPWnD6c+SG9pRZ4B5dr/jFvTqqx9LM2mEUALR6gojSO2qdBJzNvb81kEIBJy
k4/b6T8i6fn7RKDb7UycUiSyhwdDdAEVaXuEW2ASVSLujkV6Irb1Evt8ZrYDsdQB
7cd8qO97sY3L4gjpf4lvD8XTImlwjKtx+uaeQpvvedo7aupHqP4PuuHITLtZsPU/
9gV6RdyReg7DcGF/iqvQsRjlBeC6Gd2jsSKhKX/ypF3MOEXUADl4Btk0M3vpV1Xx
8roPMMv07Y7Kt/DGyqZxOKiYr3DL+gZqoOsk7LaDImyxhE0oJF5HyQ==
=vxOi
-----END PGP SIGNATURE-----
