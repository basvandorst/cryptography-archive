// $Id: setup.rul,v 1.262.10.91.2.2 1998/11/14 00:06:23 heller Exp $
//____________________________________________________________________________
//	Copyright (C) 1997 Pretty Good Privacy, Inc.
//	All rights reserved.
//
//
//____________________________________________________________________________


declare

// Remember to do the following prior to compilation
// SET INSTRC=C:\Progra~1\Instal~1\Instal~1\Dialogs\Include 

#include "SDDIALOG.H"			
//#include "browse.h"
	
// Constant declarations.


//***********
#ifndef RSA
	#define RSA                     1
#endif

#ifndef TITLE
	#define TITLE                   "PGP Desktop Security Version 6.0.2i"
#endif

#ifndef TITLE2
//no newline title
	#define TITLE2                  "PGP Desktop Security Version 6.0.2i"
#endif

#ifndef PRODUCT_VERSION
	#define PRODUCT_VERSION			"Desktop Security, version 6.0.2i"
#endif

#ifndef ISADMIN
	#define ISADMIN                 "NULL"      // TRUE or FALSE or NULL(for PP)
#endif

#ifndef PGP_FREEWARE
	#define PGP_FREEWARE            "TRUE"     // TRUE or FALSE(now does nothing)
#endif

#ifndef IS_QUALCOMM_BUILD
	#define IS_QUALCOMM_BUILD       "FALSE"     // TRUE or FALSE
#endif

#ifndef INCLUDEPGPDISKEX
	#define INCLUDEPGPDISKEX        "FALSE"      // TRUE or FALSE
#endif

#ifndef INCLUDEINSTALLGUIDE
	#define INCLUDEINSTALLGUIDE     "TRUE"      // TRUE or FALSE
#endif

#ifndef ISRSAADDON
	#define ISRSAADDON				"FALSE"      // TRUE or FALSE
#endif

#ifndef INCLUDEPGPFONE
	#define INCLUDEPGPFONE			"FALSE"      // TRUE or FALSE
#endif

#define SPACE_REQUIRED              14000000    // Disk space in bytes.
#define APP_NAME					"PGP 6.0.2i"

//REGAPP_NAME is need for registry entries

//***********


#define REGAPP_NAME					"PGP60"
#define PROGRAM_FOLDER_NAME			"PGP60"
#define COMPANY_FOLDER_NAME			"Network Associates"
#define APPBASE_PATH				"Program Files\\Network Associates\\PGP60"
#define APPBASE_PATH_WIN32S			"Program Files\\Network Associates\\PGP60"
#define COMPANY_NAME				"Network Associates"
#define PRODUCT_NAME				"PGP"
#define DEINSTALL_KEY				"PGP60DeinstKey"
#define UNINSTALL_NAME				"PGP 6.0.2i"
#define PRODUCT_KEY					"PGPKEYS.EXE"
#define MB_OKCANCEL					1
#define IDCANCEL					2
#define IDRETRY 					4
#define MB_RETRYCANCEL				5
#define IDYES						6
#define WM_SYSCOMMAND				0x0112
#define SC_MINIMIZE					0xF020
#define SC_MAXIMIZE					0xF030
#define WM_CLOSE					0x0010 // defines the WM_CLOSE message.
#define PGP_HIDDEN_WINDOW			"PGPtray_Hidden_Window"
#define ALTBMP						"sidebar.bmp"
#define ALTBMPB						"sidebarx.bmp"
#define DEBUG						"FALSE"


// Global variable declarations.
STRING		szString, szDelimiterSet, svString, RegString, KeyVal;
STRING		szFileFilter,szDlgTitle,svSelectedFile,svSelectedFileb,szExt,szPath;
STRING		szPubKeyPath,szSecKeyPath,svReturnString,svReturnStringb, svReturnStringc;
STRING		svFolder,svDir,szMsg,szFileSet,szNonLoggedFileSet,szFileGbit
STRING		svTarget,szProgram,szParam,szTemp,szAppPath,szCool,szShortPath;
STRING		szQuestion,szLicenseFile,szLocalDB,szSubDirs,szName,szCompany;
STRING		szSerial,szEudoraPath[200],szEudoraFile,svResult,svEudoraVersion;
STRING		szComponents,nvPubRing,nvPrvRing,szOldPGPPath,szKeyPath;
STRING		szTitle,svUninstLogFile,szFormat,szBmpPath,szBMP,PathToExe;
STRING		szVerBuffer[1536],szResultBuffer,szData,szData2,EudoraBackup;
STRING		szFileName,szMessage,LatestVer,UseDefaultPubKey,strUpdate, svCopyKeys;
STRING		UpdateNeeded,szBmpName,EudoraPluginPath,svPubLoc,svPrivLoc, UpdatePlug;
STRING		WhichPlugin, WhichEudoraPath, szOEdir, szKey, svValue, svValueb, svValuec;
STRING		szVersionInfo1, szVersionInfo2, szDisplay, svOS;
STRING		szPubRingPath[512];
STRING		szPrivRingPath[512];
STRING		szRandSeedPath[512], szLongTarget;
STRING 		szUser, szUserCompany, szUserSerial;
STRING		szKeyb, szKeyc, szOEPATH, svVersionNumber;
STRING		szEudKey, szEudKeyb, szEudKeyc, svEudValue, svEudValueb, svEudValuec;
STRING		svSubStr, DrvLetUpper, KeyStub, szValue, svInstallDir, svOldDisk, INCLUDEPGPDISK;
STRING      szPREV_VERSION, szINSTALLED_VERSION, szAlt_Key;
STRING      szVER_PGPKEYS, szVER_PGPTOOLS, szVER_PGPTRAY, szVER_PGP_SDK, szVER_PGPSDKNL, szVER_PGPSDKUI, szVER_PGPDISK;
STRING      szPREV_PGP_PATH, szPREV_PGPDISK_PATH, szOUTLOOK_EXP_PATH, szEUDORA_PATH;
STRING      szSRCDIR, szTARGETDIR;

BOOL		bSpaceOk,bWinNT,bWin32s,bIsShellExplorer,bvOpt1,bvOpt2;
BOOL		bFoundEudora,bPrvKeysFound,bPubKeysFound,Copy;
BOOL		bVerValue,bVerInfo,KeyOnDiskOne;
BOOL		bFoundOutlook, RenameOriginal, bCheckVersion;
BOOL		IS_NT, bEasyInstall;

NUMBER		nResult,nvResult,nvSize,Index, nerr;
NUMBER		nvPathLen,nSize,nHandle,nMsg, nwParam, nlParam;
NUMBER		nvType,nID_BITMAP,nDx,nDy,nCorner, LockedFiles;
NUMBER		nCompareFlag, nDisplay, nvOS, nReboot;
NUMBER		nDrvLetUpper, DriveNum, IndexNumber, nType, AsciNum;
NUMBER		nvProgramFiles, nvEudoraPlugin, nvExchangeOutlookPlugin, nvUninstall;
NUMBER		nvUserManual, nvPGPdisk, nvReturnValue, nvOutlookExpressPlugin;
NUMBER      nFND_PGP_INSTALLED, nFND_PGPDISK, nDETECT_RUNNING_APPS;

//These are all assigned values at the begining of the install
NUMBER		PROGRAM_FILES_SIZE, EUDORA_PLUGIN_SIZE, EXCHANGE_OUTLOOK_PLUGIN_SIZE;
NUMBER		OUTLOOK_EXPRESS_PLUGIN_SIZE, MANUAL_SIZE, CLIENT_INSTALL_SIZE;
NUMBER		PGPDISK_SIZE, PGPFONE_SIZE;

HWND		hWnd;
HWND		hwndIS3;
HWND		hWnd1,hWnd2,hWnd3,hWnd4,hWnd5,hWnd6,hWnd7,hWnd8,hWnd9;

LIST    	listData, listID;

LONG 		lSize,lData;

POINTER 	ptr1,ptr2;

typedef		MYTYPE_PSZ
begin
STRING szString[24];
end;


//Function prototypes
prototype	DeleteSharedFile
			(STRING,STRING);

prototype	SetupScreen
			();

prototype	CheckRequirements
			();

prototype	LONG VERSION.GetFileVersionInfoSizeA
			(STRING,BYREF LONG);

prototype	BOOL VERSION.GetFileVersionInfoA
			(STRING,LONG,LONG,BYREF STRING);

prototype	BOOL VERSION.VerQueryValueA
			(BYREF STRING,STRING,BYREF POINTER,BYREF NUMBER);

prototype	INT PGP60cl.PGPclPreferences
			(POINTER,HWND,INT, POINTER);

prototype	INT PGP60cl.PGPclSetUserInfo
			(STRING,STRING,STRING);

prototype	INT PGP60cl.PGPclGetSDKFilePaths
			(STRING, INT, STRING, INT, STRING, INT);

prototype	INT PGP60cl.PGPclSetSDKFilePaths
			(STRING, STRING, STRING, INT);

prototype	INT install.PGPclStartMemLockDriver ();

prototype   IsValidVersion ();

prototype   Uninstall5X
			(STRING, STRING, STRING, STRING);

prototype   Uninstall6X ();

prototype   CleanSharedFile
			(STRING, STRING);

prototype	BOOL install.MyGetOpenFileName32(HWND, STRING, STRING, STRING, STRING);

prototype	BOOL install.MyBrowseForFolder32(HWND, STRING);  

prototype   Uninstall_PGPdisk10 ();


// Prototype user-defined function to call MyGetOpenFileName.
prototype FileBrowse(HWND, STRING, BYREF STRING, STRING, STRING);


// Function declarations for PGPdisk 
prototype	BOOL PGPdskIH.IsVolumeAPGPdisk (INT);
prototype	PGPdskIH.KillPGPdiskResident ();
prototype	PGPdskIH.PGPdiskCleanup ();
prototype	BOOL PGPdskIH.LoadPGPdiskDriver ();
prototype	BOOL PGPdskIH.AreAnyPGPdisksMounted ();
prototype	BOOL PGPdskIH.UnmountAllPGPdisks ();


//Declarations for Qualcomm code snippets
prototype	BOOL USER.PostWindowMessageA( HWND, NUMBER, NUMBER, NUMBER) ; // WIN API functions
prototype	NUMBER USER.RegisterWindowMessageA( BYREF STRING) ;			  // WIN API functions


NUMBER  WM_MAHAVISHNU;
STRING  lpMahaVishnu; 


program

StartHere:
	GetSystemInfo(COLORS,nvResult,svResult);
	szFormat  = ";1;1;0,128,128;0,128,128";

	if (nvResult < 257) then
		//Logo in upper_right hand corner of screen
		PlaceBitmap (SUPPORTDIR ^ "neta.bmp", 0, 0, 0, UPPER_RIGHT);
		szBmpPath = "@" + SUPPORTDIR ^ ALTBMP + szFormat;
	else
		//Logo in upper_right hand corner of screen
		PlaceBitmap (SUPPORTDIR ^ "netax.bmp", 0, 0, 0, UPPER_RIGHT);
		szBmpPath = "@" + SUPPORTDIR ^ ALTBMPB + szFormat;
	endif;

	//Set the alternate bitmap for the AskText dialog box.
  	DialogSetInfo
	(DLG_INFO_ALTIMAGE,szBmpPath,TRUE);

	// Set installation info.,which is required for registry entries.
	InstallationInfo
	(COMPANY_NAME,PRODUCT_NAME,PRODUCT_VERSION,PRODUCT_KEY);

	// Set up the installation screen.
	SetupScreen
	();

	Enable
	(DIALOGCACHE);

    // Create a Welcome dialog.
    WelcomeDlg:

	    Disable
	    (BACKBUTTON);
	    if (bEasyInstall = FALSE) then
		    Welcome
		    (APP_NAME + " Installation Program",0);
	    endif;

	    Enable
	    (BACKBUTTON);

	    // Test target system for proper configuration.
	    CheckRequirements
	    ();

    // Display the License Agreement     
    DispAgree:
	    VarSave (SRCTARGETDIR);
	    TARGETDIR  = SUPPORTDIR;
	    CopyFile ("License.txt", "License.txt");
	    VarRestore (SRCTARGETDIR);

	    szTitle = APP_NAME + " Software License Agreement";
	    szMsg = "Please read the following license agreement. Use " +
			    "the scroll bar to view\nthe rest of this agreement.";
	    szQuestion = "Do you accept all the terms of the preceding license " +
				     "agreement?  If so,\npress the Yes push button. " +
				     "If you select No, Setup will close.";

   	    szLicenseFile = SUPPORTDIR ^ "LICENSE.TXT";

	    if (SdLicense(szTitle,szMsg,szQuestion,szLicenseFile) = BACK) then

		    goto WelcomeDlg;

	    endif;

    Detect_PGPdisk:
        SdShowMsg ("Searching for running applications.", TRUE);

        //Ensure that PGPdisk is not running
        if (INCLUDEPGPDISK = "TRUE") then
	        if (FindWindow ("", "PGPdisk") != NULL) then
		        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s",
			        "Please shut down PGPdisk before continuing.") = IDCANCEL) then
			        exit;
		        else
			        MessageBox ("PGPdisk must not be running to install this product.", WARNING);
		        endif;
	        endif;
        endif;

        //kill pgptray.exe if possible
        hWnd = FindWindow(PGP_HIDDEN_WINDOW,"");
        if (hWnd > 0) then
            SetDialogTitle (DLG_ASK_YESNO, "Found PGPtray Running");
	        if (AskYesNo("Setup has found PGPtray running.  The install process cannot continue unless it is shutdown.\n\n" +
				         "Would you like setup to shutdown PGPtray?",YES) = YES) then

		        SendMessage(hWnd,WM_CLOSE,0,0);

		        //This delay is needed for PGP Dlls to unlock unfortunately
		        Delay(8);
	        else
		        if (IS_QUALCOMM_BUILD = "TRUE") then
			        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL);
		        endif;

		        MessageBox ("PGPtray must not be running to install this product.", WARNING);
		        exit;
	        endif;
        endif;
        Delay(1);

    TestForRunningApps:
        //ENSURE NO PLUGINS\DLL's ARE IN USE
        if (IS_QUALCOMM_BUILD = "FALSE") then
	        hWnd2 = FindWindow("Microsoft Exchange 4.0 Viewer","");
	        if (hWnd2 != NULL) then
		        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For Setup to continue Microsoft Exchange must not be" +
		        " running.\nPlease shut down Microsoft Exchange.")= IDCANCEL) then
			        if (IS_QUALCOMM_BUILD = "TRUE") then
				        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL);
			        endif;
			        exit;
		        else
			        goto TestForRunningApps;
		        endif;
	        endif;
        endif;

        //No exchange or outlook  in Qualcomm build so these apps. can be running
        if (IS_QUALCOMM_BUILD = "FALSE") then
	        hWnd3 = FindWindow("Microsoft Exchange 5.0 Viewer","");
	        if (hWnd3 != NULL) then
		        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For Setup to continue Microsoft Exchange must not be" +
		        " running.\nPlease shut down Microsoft Exchange.") = IDCANCEL) then
			        if (IS_QUALCOMM_BUILD = "TRUE") then
				        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
			        endif;
			        exit;
		        else
			        goto TestForRunningApps;
		        endif;
	        endif;

        hWnd4 = FindWindow("rctrl_renwnd32","");
        if (hWnd4!= NULL) then
	        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For Setup to continue Microsoft Outlook must not be" +
	        " running.\nPlease shut down Microsoft Outlook.") = IDCANCEL) then
		        if (IS_QUALCOMM_BUILD = "TRUE") then
			        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		        endif;
		        exit;
	        else
		        goto TestForRunningApps;
	        endif;
        endif;

        endif;


        hWnd5 = FindWindow("EudoraMainWindow","");
        if (hWnd5 != NULL) then
	        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For Setup to continue Eudora must not be running.\n"+
	        "Please shut down Eudora.") = IDCANCEL) then
		        if (IS_QUALCOMM_BUILD = "TRUE") then
			        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		        endif;
		        exit;
	        else
		        goto TestForRunningApps;
	        endif;
        endif;

        hWnd6 = FindWindow("PGPAdminWizardClass","");
        if (hWnd6 != NULL) then
	        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For Setup to continue the admin wizard must not be" +
	        " running.\nPlease shut down the admin. wizard.") = IDCANCEL) then
		        if (IS_QUALCOMM_BUILD = "TRUE") then
			        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		        endif;
		        exit;
	        else
		        goto TestForRunningApps;
	        endif;
        endif;

        hWnd7 = FindWindow("PGPkeysMainWinClass","");
        if (hWnd7 != NULL) then
	        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For Setup to continue PGPkeys must not be running.\n"+
	        "Please shut down PGPkeys.") = IDCANCEL) then
		        if (IS_QUALCOMM_BUILD = "TRUE") then
			        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		        endif;
		        exit;
	        else
		        goto TestForRunningApps;
	        endif;
        endif;

        hWnd8 = FindWindow("PGPtools","");
        if (hWnd8 != NULL) then
	        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For Setup to continue PGPtools must not be running.\n"+
	        "Please shut down PGPtools.") = IDCANCEL) then
		        if (IS_QUALCOMM_BUILD = "TRUE") then
			        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		        endif;
		        exit;
	        else 
		        goto TestForRunningApps;
	        endif;
        endif;

        hWnd9 = FindWindow("PGPlog","");
        if (hWnd9 != NULL) then
	        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For Setup to continue PGPLog must not be running.\n"+
	        "Please shut down PGPLog.") = IDCANCEL) then
		        if (IS_QUALCOMM_BUILD = "TRUE") then
			        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		        endif;
		        exit;
	        else
		        goto TestForRunningApps;
	        endif;
        endif;

        //Ensure that Outlook Express is not running
        if (FindWindow ("ThorBrowserWndClass", "") != NULL) then
	        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For Setup to continue Outlook Express must not be running.\n"+
	        "Please shut down Outlook Express.") = IDCANCEL) then
		        if (IS_QUALCOMM_BUILD = "TRUE") then
			        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		        endif;
		        exit;
	        else
		        goto TestForRunningApps;
	        endif;
        endif;

        if (FindWindow ("Ath_Note", "") != NULL) then
	        if (SprintfBox (MB_RETRYCANCEL, "Application Running", "%s","For Setup to continue Outlook Express must not be running.\n"+
	        "Please shut down Outlook Express.") = IDCANCEL) then
		        if (IS_QUALCOMM_BUILD = "TRUE") then
			        PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		        endif;
		        exit;
	        else
		        goto TestForRunningApps;
	        endif;
        endif;

    //Pause to give things a chance to unload
    Delay (2);

    SdShowMsg ("Searching for running applications.", FALSE);


    SdShowMsg ("Searching for previous installations.  Please wait...", TRUE);

    Delay (2);

    // Store the original values away for later
    szSRCDIR    = SRCDIR;
    szTARGETDIR = TARGETDIR;

    nFND_PGPDISK = FALSE;

    // Retrieve previous install path and determine components installed
    RegDBSetDefaultRoot (HKEY_CURRENT_USER);

    /******************************************************************************************
     *
     *  DO NOT DETECT AND UNINSTALL PGP 5.0 BECAUSE IT CAN CO-EXIST WITH PGP 6.X
     *
     *******************************************************************************************/

    if (RegDBKeyExist ("SOFTWARE\\PGP\\PGP55\\PGPkeys") >= 0) then
        szKey     = "SOFTWARE\\PGP\\PGP55\\PGPkeys";
        szAlt_Key = "SOFTWARE\\PGP\\PGP55";
    elseif (RegDBKeyExist ("SOFTWARE\\Network Associates\\PGP55\\PGPkeys") >= 0) then
        szKey     = "SOFTWARE\\Network Associates\\PGP55\\PGPkeys";
        szAlt_Key = "SOFTWARE\\Network Associates\\PGP55";
    elseif (RegDBKeyExist ("SOFTWARE\\Network Associates\\PGP60\\PGPkeys") >= 0) then
        szKey     = "SOFTWARE\\Network Associates\\PGP60\\PGPkeys";
        szAlt_Key = "SOFTWARE\\Network Associates\\PGP60";
    endif;

    szINSTALLED_VERSION = "";

    szName = "Version";
    nType  = REGDB_STRING;
    if (RegDBGetKeyValueEx (szAlt_Key, szName, nType, szINSTALLED_VERSION, nvSize) < 0) then
        // Attempt to retrieve the previous product's name again
        // This should only happen for PGP 6.x.x
        if (RegDBKeyExist ("SOFTWARE\\Network Associates\\PGP60") >= 0) then
            szAlt_Key = "SOFTWARE\\Network Associates\\PGPdisk";
            RegDBGetKeyValueEx (szAlt_Key, szName, nType, szINSTALLED_VERSION, nvSize);
        endif;
    endif;

    if (RegDBKeyExist (szKey) >= 0) then
        szName = "ExePath";
        nType  = REGDB_STRING;

        if (RegDBGetKeyValueEx (szKey, szName, nType, szValue, nvSize) >= 0) then
            RegDBSetDefaultRoot (HKEY_CLASSES_ROOT);
        
            // Retrieve just the path
            ParsePath (szPREV_PGP_PATH, szValue, PATH);
        endif;
    endif;

    // Find either the executable, the registered extension, or registered file type
    if ( (FindFile (szPREV_PGP_PATH, "PGPdisk.exe", svResult) >= 0) ||
         (RegDBKeyExist (".PGD") >= 0) ||
         (RegDBKeyExist ("PGPdisk Volume") >= 0) ) then

        nFND_PGPDISK = TRUE;
        if ( (VerGetFileVersion (szPREV_PGP_PATH ^ "PGPdisk.exe", szVER_PGPDISK) = FILE_NOT_FOUND) ||
             (VerGetFileVersion (szPREV_PGP_PATH ^ "PGPdisk.exe", szVER_PGPDISK) = FILE_NO_VERSION) ) then

            szVER_PGPDISK = "";
        endif;
    endif;

    // Attempt to find PGPdisk.exe again if the above steps failed
    if (nFND_PGPDISK = FALSE) then
        RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

        szKey  = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGPdisk.exe";
        szName = "";
        nType  = REGDB_STRING;
        if (RegDBGetKeyValueEx (szKey, szName, nType, szValue, nvSize) >= 0) then
            // Retrieve just the path
            ParsePath (szPREV_PGP_PATH, szValue, PATH);
            if (FindFile (szPREV_PGP_PATH, "PGPdisk.exe", svResult) >= 0) then
                nFND_PGPDISK = TRUE;
                if ( (VerGetFileVersion (szPREV_PGP_PATH ^ "PGPdisk.exe", szVER_PGPDISK) = FILE_NOT_FOUND) ||
                     (VerGetFileVersion (szPREV_PGP_PATH ^ "PGPdisk.exe", szVER_PGPDISK) = FILE_NO_VERSION) ) then

                    szVER_PGPDISK = "";
                endif;
            endif;
        endif;
    endif;


    /**************************************************************************************
     *
     *  Attempt to find PGPdisk 1.0's installed path
     *
     **************************************************************************************/

    // Check for and retrieve PGPdisk v1.0's path
    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

    szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGPdisk.exe";
    if (RegDBKeyExist (szKey) >= 0) then
        szName = "";
        nType  = REGDB_STRING;
        RegDBGetKeyValueEx (szKey, szName, nType, szValue, nvSize);

        // Retrieve just the path
        ParsePath (szPREV_PGPDISK_PATH, szValue, PATH);
    else
        RegDBSetDefaultRoot (HKEY_CLASSES_ROOT);

        szKey   = ".PDG\\ShellNew";
        szName  = "Command";
        nType   = REGDB_STRING;
        RegDBGetKeyValueEx (szKey, szName, nType, szValue, nvSize);

        // Extract just the path from:  C:\PROGRA~1\NETWOR~1\PGPDISK\PGPDISK.EXE create "%2"
        StrSub (szPREV_PGPDISK_PATH, szValue, 0, 28);
    endif;

    if (FindFile (szPREV_PGPDISK_PATH, "PGPdisk.exe", svResult) >= 0) then
        nFND_PGPDISK = TRUE;
        VerGetFileVersion (szPREV_PGPDISK_PATH ^ "PGPdisk.exe", szVER_PGPDISK);
    endif;


    /**************************************************************************************
     *
     *  Detect previous installs and offer the user the option of cancelling this install
     *  or having this install uninstall it.
     *
     **************************************************************************************/

    nFND_PGP_INSTALLED = FALSE;

    // Find PGPKeys, PGPTools, and PGPTray
    if (FindFile (szPREV_PGP_PATH, "PGPKeys.exe", svResult) >= 0) then
        VerGetFileVersion (szPREV_PGP_PATH ^ "PGPKeys.exe", szVER_PGPKEYS);

        if (FindFile (szPREV_PGP_PATH, "PGPTools.exe", svResult) >= 0) then
            VerGetFileVersion (szPREV_PGP_PATH ^ "PGPTools.exe", szVER_PGPTOOLS);

            if (FindFile (szPREV_PGP_PATH, "PGPTray.exe", svResult) >= 0) then
                VerGetFileVersion (szPREV_PGP_PATH ^ "PGPTray.exe", szVER_PGPTRAY);
        
                // Also find PGP_SDK.DLL, PGPsdkNL.dll, and PGPsdkUI.dll
                if (FindFile (WINSYSDIR, "PGP_SDK.dll", svResult) >= 0) then
                    VerGetFileVersion (WINSYSDIR ^ "PGP_SDK.dll", szVER_PGP_SDK);

                    if (FindFile (WINSYSDIR, "PGPsdkNL.dll", svResult) >= 0) then
                        VerGetFileVersion (WINSYSDIR ^ "PGPsdkNL.dll", szVER_PGPSDKNL);

                        if (FindFile (WINSYSDIR, "PGPsdkUI.dll", svResult) >= 0) then
                            VerGetFileVersion (WINSYSDIR ^ "PGPsdkUI.dll", szVER_PGPSDKUI);
                            nFND_PGP_INSTALLED = TRUE;
                        endif;
                    endif;
                endif;

            endif;
        endif;
    endif;

    // Find DLL's for PGP 5.5.x install (5.5.4.0 does not exist, just checking for the heck of it)
    if ( (szVER_PGPKEYS % "5.5.0.0") && (szVER_PGPTRAY % "5.5.0.0")  ||
         (szVER_PGPKEYS % "5.5.1.0") && (szVER_PGPTRAY % "5.5.1.0")  ||
         (szVER_PGPKEYS % "5.5.2.0") && (szVER_PGPTRAY % "5.5.2.0")  ||
         (szVER_PGPKEYS % "5.5.3.0") && (szVER_PGPTRAY % "5.5.3.0")  ||
         (szVER_PGPKEYS % "5.5.4.0") && (szVER_PGPTRAY % "5.5.4.0")  ||
         (szVER_PGPKEYS % "5.5.5.0") && (szVER_PGPTRAY % "5.5.5.0") ) then
        
        if (FindFile (WINSYSDIR, "PGPSDK.dll", svResult) >= 0) then
            VerGetFileVersion (WINSYSDIR ^ "PGPSDK.dll", szVER_PGP_SDK);

                nFND_PGP_INSTALLED = TRUE;

                // Set this value so that the check below will work
                szVER_PGPSDKNL = szVER_PGP_SDK;
                szVER_PGPSDKUI = szVER_PGP_SDK;

        endif;
    endif;


    SdShowMsg ("Searching for previous installations.  Please wait...", FALSE);

    // Call function to manually uninstall PGPdisk 1.0
    if ( (nFND_PGPDISK = TRUE) && (szVER_PGPDISK < "6.0.0.0") ) then
        SetDialogTitle (DLG_ASK_YESNO, "Found PGPdisk Installed");
        if (szVER_PGPDISK = "") then
            szQuestion = "Setup has found PGPdisk installed on your computer.  "
                       + "It must first be unintalled before Setup can continue.  PGPdisk volumes will "
                       + "not be uninstalled.\n\n"
                       + "Would you like Setup to uninstall the previous version?\n\n"
                       + "NOTE:  If you select NO, Setup will exit.\n\n";
        else
            szQuestion = "Setup has found PGPdisk " + szVER_PGPDISK + " installed on your computer.  "
                       + "It must first be unintalled before Setup can continue.  PGPdisk volumes will "
                       + "not be uninstalled.\n\n"
                       + "Would you like Setup to uninstall the previous version?\n\n"
                       + "NOTE:  If you select NO, Setup will exit.\n\n";
        endif;

        if (AskYesNo (szQuestion, YES) = YES) then
            Uninstall_PGPdisk10 ();
        else
            abort;
        endif;
    endif;

    if (nFND_PGP_INSTALLED = TRUE) then
        RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

        SetDialogTitle (DLG_ASK_YESNO, "Previous Install Found");
        if ( ((szVER_PGPKEYS = "6.0.2.0") && (szVER_PGPTOOLS = "6.0.2.0") && (szVER_PGPTRAY = "6.0.2.0"))
            &&
             ((szVER_PGP_SDK = "1.5.2.0") && (szVER_PGPSDKNL = "1.5.2.0") && (szVER_PGPSDKUI = "1.5.2.0")) ) then

            if (szINSTALLED_VERSION != "") then
                szQuestion = "Setup has found PGP "
                           + szINSTALLED_VERSION
                           + " installed on your computer.  It is recommended that you allow Setup to uninstall "
                           + "it before continuing.  Any existing keyrings will be preserved.\n\n"
                           + "Would you like Setup to uninstall the previous version?\n\n";
            else
                szQuestion = "Setup has found PGP installed on your computer.  It is recommended that you allow Setup "
                           + "to uninstall it before continuing.  Any existing keyrings will be preserved.\n\n"
                           + "Would you like Setup to uninstall the previous version?\n\n";
            endif;
        else
            if (szINSTALLED_VERSION != "") then
                szQuestion = "Setup has found PGP "
                           + szINSTALLED_VERSION
                           + ", installed on your computer.  It must first be unintalled before "
                           + "Setup can continue.  Any existing keyrings will be preserved.\n\n"
                           + "Would you like Setup to uninstall the previous version?\n\n"
                           + "NOTE:  If you select NO, Setup will exit.\n\n";
            else
                szQuestion = "Setup has found PGP installed on your computer.  It must first be unintalled before "
                           + "Setup can continue.  Any existing keyrings will be preserved.\n\n"
                           + "Would you like Setup to uninstall the previous version?\n\n"
                           + "NOTE:  If you select NO, Setup will exit.\n\n";
            endif;
        endif;
        
        if (AskYesNo (szQuestion, YES) = YES) then
            //kill pgptray.exe if possible
            hWnd = FindWindow(PGP_HIDDEN_WINDOW,"");
            if (hWnd > 0) then
	            if (AskYesNo("Setup has found PGPtray running.  The install process cannot "
                            + "continue unless it is shutdown.\n\n"
                            + "Would you like setup to shutdown PGPtray?",YES) = YES) then
		            SdShowMsg ("Setup is shutting down PGPtray.  Please wait...", TRUE);
                    
                    SendMessage(hWnd,WM_CLOSE,0,0);
		            
                    //This delay is needed for PGP Dlls to unlock unfortunately
		            Delay(3);
                    
                    SdShowMsg ("Setup is shutting down PGPtray.  Please wait...", FALSE);
	            else
		            if (IS_QUALCOMM_BUILD = "TRUE") then
			            PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL);
		            endif;

		            MessageBox ("PGPtray must not be running to install this product.", INFORMATION);
		            exit;
	            endif;
            endif;

            RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

            // Retrieve Outlook Express and Eudora's installed path
            szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths";
            nType = REGDB_STRING;
            if (RegDBGetKeyValueEx (szKey ^ "MSIMN.EXE", "Path", nType, szOUTLOOK_EXP_PATH, nvSize) < 0) then
                szOUTLOOK_EXP_PATH = "";
            endif;
            if (RegDBGetKeyValueEx (szKey ^ "EUDORA.EXE", "Path", nType, szEUDORA_PATH, nvSize) < 0) then
                szEUDORA_PATH = "";
            endif;

            // Determine which uninstall function to call
            // ONLY FORCE AN UNINSTALL IF THE VERSION IS GREATER THAN OR LESS THAN 6.0.2
            if ( ((szVER_PGPKEYS < "6.0.2.0") && (szVER_PGPTOOLS < "6.0.2.0") && (szVER_PGPTRAY < "6.0.2.0"))
                &&
                 ((szVER_PGP_SDK < "1.5.2.0") && (szVER_PGPSDKNL < "1.5.2.0") && (szVER_PGPSDKUI < "1.5.2.0")) ) then

                if (szVER_PGPKEYS > "5.5.5.0") then
                    Uninstall6X ();
                else
                    Uninstall5X ("PGP55DeinstKey", szOUTLOOK_EXP_PATH , szPREV_PGP_PATH, szEUDORA_PATH);
                endif;

                // LaunchAppAndWait (szPREV_PGP_PATH ^ "UNINSTALL.EXE", "", WAIT);
            elseif ( ((szVER_PGPKEYS = "6.0.2.0") && (szVER_PGPTOOLS = "6.0.2.0") && (szVER_PGPTRAY = "6.0.2.0"))
                &&
                 ((szVER_PGP_SDK = "1.5.2.0") && (szVER_PGPSDKNL = "1.5.2.0") && (szVER_PGPSDKUI = "1.5.2.0")) ) then

                if (RegDBKeyExist ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGP60DeinstKey") >= 0) then
                    szName = "PGP60DeinstKey";
                else
                    szName = DEINSTALL_KEY;
                endif;

                Uninstall6X ();
            elseif ( ((szVER_PGPKEYS > "6.0.2.0") && (szVER_PGPTOOLS > "6.0.2.0") && (szVER_PGPTRAY > "6.0.2.0"))
                &&
                 ((szVER_PGP_SDK > "1.5.2.0") && (szVER_PGPSDKNL > "1.5.2.0") && (szVER_PGPSDKUI > "1.5.2.0")) ) then

                 SetDialogTitle (DLG_MSG_SEVERE, "Unable to Uninstall Previous Version");
                 szMessage = "Setup is unable to uninstall your previous installation and will exit.  Please uninstall "
                           + "it by clicking on the Uninstall icon in its program group or by selecting it from "
                           + "Add/Remove Programs in the Control Panel.";
                 MessageBox (szMessage, SEVERE);
                 
                 abort;
            endif;


            /*************************************************
            THIS WILL NOT WORK BECAUSE SRCDIR DOES NOT INITIALIZE TO WHERE THE SELF EXTRACTING PROGRAM RESIDES


            szKey   = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce";
            szName  = "PGP Setup";
            szValue = SRCDIR ^ "Setup.exe";
            nType   = REGDB_STRING;
            RegDBSetKeyValueEx(szKey, szName, nType, szValue, -1);

            szTitle   = "Uninstall Complete";
            szMessage = "Setup has completed uninstalling PGP"
                      + szINSTALLED_VERSION
                      + ".  It is recommended that you allow Setup to reboot your machine.  "
                      + "The installation will automatically continue when Windows completes starting up.\n\n"
                      + "WARNING:  Please save all your work and close all application(s) prior to rebooting the machine.  "
                      + "CTRL + TAB to switch between your application(s).";
            RebootDialog (szTitle, szMessage, SYS_BOOTMACHINE);
            *************************************************/
        else
            if ( ((szVER_PGPKEYS = "6.0.2.0") && (szVER_PGPTOOLS = "6.0.2.0") && (szVER_PGPTRAY = "6.0.2.0"))
                &&
                 ((szVER_PGP_SDK = "1.5.2.0") && (szVER_PGPSDKNL = "1.5.2.0") && (szVER_PGPSDKUI = "1.5.2.0")) ) then

                // Do nothing if it is the same version and the user elects to continue without uninstalling
            else
                abort;
            endif;
        endif;
    endif;  // if (nFND_PGP_INSTALLED = TRUE) then


    /**********************************************************************************
     **********************************************************************************
     **********************************************************************************
     *
     *
     *  Allowing Setup to run UNINSTALL.EXE may not work because the uninstall itself
     *  is an install script and not a true uninstallation.
     *
     *
     **********************************************************************************
     **********************************************************************************
     **********************************************************************************/


    // Restore the original values
    SRCDIR    = szSRCDIR;
    TARGETDIR = szTARGETDIR;


	if (ISRSAADDON = "TRUE") then
		//GET THE PGP 6.0 INSTALLATION DIRECTORY
		RegDBSetDefaultRoot(HKEY_CURRENT_USER);
		szKey = "Software\\Network Associates\\PGP60\\PGPKeys";
		szName = "ExePath";

		if (RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize) <0) then
			MessageBox ("Cannot proceed, This installation requires that you have\n"  +
						"a valid install of PGP 6.0 already installed.\n", INFORMATION);
			exit;
		endif;

		//find out if they are running freeware
		UseDLL("Version.dll");
										
		lSize     = GetFileVersionInfoSizeA
					(svValue,nHandle);

		bVerInfo  = GetFileVersionInfoA
					(svValue,nHandle,lSize,szVerBuffer);

		ptr1      = AddressString
					(szResultBuffer);
		ptr2      = AddressNumber
					(ptr1);

		bVerValue = VerQueryValueA
					(szVerBuffer,"\\StringFileInfo\\040904b0\\ProductName"
					,ptr2,nSize);
		
		if (bVerValue = 0) then
            SetDialogTitle (DLG_ASK_YESNO, "Unqualified Product Found");
			if (AskYesNo("This product cannot be installed over PGP Freeware.\n\n" +
						"Are you running PGP Freeware?",YES) = YES) then
				exit;
			endif;
		endif;			
	
		// pszResultBuffer is a pointer to a pointer which is the starting
		// point for the product name. How do you actually get the string?
		StructGetP(ptr2,"MYTYPE_PSZ","szString",lData,szData);
		UnUseDLL("Version.dll");

		//Check if the user has FreeWare installed, if yes, do not proceed
		if (szData = "PGP Freeware") then
			MessageBox ("Cannot proceed, PGP Freeware detected\n\n" +
						"This installation requires that you have a valid install\n"  +
						"of PGP 6.0 Desktop Security or PGP 6.0 Personal Privacy\n" +
						"installed.\n", INFORMATION);
			exit;
			
		endif;
	endif;

	//these are the defines that show how big each module is
    //
    //THESE NUMBERS ARE NOT BASED ON 1MB=1024000
    //
	PROGRAM_FILES_SIZE				= 6945000;
	EUDORA_PLUGIN_SIZE				= 150000;
	EXCHANGE_OUTLOOK_PLUGIN_SIZE	= 150000;
	OUTLOOK_EXPRESS_PLUGIN_SIZE		= 175000;
	MANUAL_SIZE						= 1500000;
	CLIENT_INSTALL_SIZE				= 7100000;
	PGPDISK_SIZE					= 2420000;
	if (INCLUDEPGPFONE = "TRUE") then
        PGPFONE_SIZE			    = 2420000;
    else
        PGPFONE_SIZE                = 0;
    endif;


	if (INCLUDEPGPDISKEX = "TRUE") then
		INCLUDEPGPDISK = "TRUE";
	else
		INCLUDEPGPDISK = "FALSE";
	endif;

	UpdateNeeded = "FALSE";
	if (IS_QUALCOMM_BUILD = "TRUE") then
		lpMahaVishnu = "mahavishnu"; 
	UseDLL("User.dll");
		if (( WM_MAHAVISHNU = RegisterWindowMessageA( lpMahaVishnu)) = 0) then
			// RegisterWindowMessage failed.......
		endif ;
	UnUseDLL("User.dll");
		// define custom exit handler
		Handler ( EXIT, Exit_Handler) ;
	endif;

	//Because of the memlock driver, the user must have Administrator privileges
	GetSystemInfo(OS, nvOS, svOS);
	switch (nvOS)

	case IS_WINDOWSNT:

		IS_NT = TRUE;

		if (Is (USER_ADMINISTRATOR, "") != TRUE) then
			SetDialogTitle (DLG_ASK_YESNO,"Administrator Privileges Required");
			if (AskYesNo ("To run this install you need to be logged in with\n" +
				"Administrator privileges. If you choose to\n" +
				"continue without these privileges the secure\n" +
				"memory driver will not be enabled and you will not be\n" +
				"able to install PGPdisk.\n\n" +
				"Continue ?" ,NO) = NO) then
				if (IS_QUALCOMM_BUILD = "TRUE") then
					PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
				endif;
				exit;
			else
				INCLUDEPGPDISK = "FALSE";
			endif;
		endif;

	case IS_WINDOWS95:

		IS_NT = FALSE;		

	endswitch;

	if (ISADMIN = "FALSE") then
		szPath = SRCDIR;
		szFileName = "PGP_Admin.prf";
		if (FindFile (szPath, szFileName, svResult) < 0 ) then
			MessageBox ("This installation has not been configured by your"  +
						" Administrator.\n Please contact your Administrator" +
						" for more information.", INFORMATION);
			if (IS_QUALCOMM_BUILD = "TRUE") then
				PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
			endif;
			exit;
		endif;

		szFileName = "pubring.pkr";
		if (FindFile (szPath, szFileName, svResult) = 0 ) then
			KeyOnDiskOne = TRUE;
		endif;
	endif;

	//Find out if this is a "quick, no user input install
	if (ISADMIN = "TRUE") then
		bEasyInstall = FALSE;
	else
		GetProfInt (SRCDIR ^ "setup.ini", "Startup", "EasyInstall", nvReturnValue);
		
		if (nvReturnValue = 1) then
			bEasyInstall = TRUE;
			//this is a quick install so we need to get all the values
			GetProfString (SRCDIR ^ "setup.ini", "Startup", "InstallDir", svInstallDir);

			GetProfInt (SRCDIR ^ "setup.ini", "Startup", "ProgramFiles", nvProgramFiles);
			GetProfInt (SRCDIR ^ "setup.ini", "Startup", "EudoraPlugin", nvEudoraPlugin);
			GetProfInt (SRCDIR ^ "setup.ini", "Startup", "ExchangeOutlookPlugin", nvExchangeOutlookPlugin);
			GetProfInt (SRCDIR ^ "setup.ini", "Startup", "OutlookExpressPlugin", nvOutlookExpressPlugin);
			GetProfInt (SRCDIR ^ "setup.ini", "Startup", "UserManual", nvUserManual);
			GetProfInt (SRCDIR ^ "setup.ini", "Startup", "PGPdisk", nvPGPdisk);
			GetProfInt (SRCDIR ^ "setup.ini", "Startup", "UninstallOld", nvUninstall);

			if (INCLUDEPGPDISK = "TRUE") then
				GetProfInt (SRCDIR ^ "setup.ini", "Startup", "PGPdisk", nvPGPdisk);
			endif;
		else
			bEasyInstall = FALSE;
		endif;
	endif;

//check if there is a previous install on the machine

//GET THE PGP 5.5 INSTALLATION DIRECTORY
SdShowMsg ("Searching for installed components.  Please wait...", TRUE);

// Delay (2);

nerr = RegDBSetDefaultRoot(HKEY_CURRENT_USER);
szKey     = "Software\\Network Associates\\PGP55\\PGPKeys";
szEudKey  = "Software\\Network Associates\\PGP55\\EudoraPlugin";

szKeyb    = "Software\\PGP\\PGP55\\PGPKeys";
szEudKeyb = "Software\\PGP\\PGP55\\EudoraPlugin";

// szKeyc    = "Software\\PGP\\PGP\\PGPKeys";
// szEudKeyc = "Software\\PGP\\PGP\\EudoraPlugin";

szName = "ExePath";
svValue  = "";
svValueb = "";
svValuec = "";
svReturnString  = "";
svReturnStringb	= "";
svReturnStringc = "";
SdShowMsg ("Searching for installed components.  Please wait...", FALSE);

if ((RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize)   =0) ||
	(RegDBGetKeyValueEx (szKeyb, szName, nvType, svValueb, nvSize) =0)) then

	// (RegDBGetKeyValueEx (szKeyc, szName, nvType, svValuec, nvSize) =0)) then

			//Get the existing Eudora plugin paths
			szName = "PluginPath";
			RegDBGetKeyValueEx (szEudKey, szName, nvType, svEudValue, nvSize);
			RegDBGetKeyValueEx (szEudKeyb, szName, nvType, svEudValueb, nvSize);
			RegDBGetKeyValueEx (szEudKeyc, szName, nvType, svEudValuec, nvSize);

			ParsePath(svReturnString, svValue, PATH);
			ParsePath(svReturnStringb, svValueb, PATH);
			ParsePath(svReturnStringc, svValuec, PATH);

			//copy over pref files
			VarSave (SRCTARGETDIR);
			TARGETDIR  = WINDIR;
			SRCDIR     = WINDIR;
			CopyFile ("PGPadmin.prf", "PGP_Admin.prf");
			DeleteFile ("PGPadmin.prf");
			VarRestore (SRCTARGETDIR);
				
			if ((FindFile (svReturnStringb, "PGPclient.prf", svResult) = 0) ||
				(FindFile (svReturnStringb, "PGPadmin.prf", svResult)  = 0)) then
				VarSave (SRCTARGETDIR);
				SRCDIR     = svReturnStringb;
				TARGETDIR  = WINDIR;
				CopyFile ("PGPadmin", "PGP_Admin.prf");
				CopyFile ("PGPclient", "PGP_Client.prf");
				TARGETDIR  = svReturnStringb;
				//DeleteFile ("PGPclient.prf");
				//DeleteFile ("PGPadmin.prf");
				VarRestore (SRCTARGETDIR);
			endif;

			if ((FindFile (svReturnString, "PGPclient.prf", svResult) = 0) ||
				(FindFile (svReturnString, "PGPadmin.prf", svResult) = 0)) then
				VarSave (SRCTARGETDIR);
				SRCDIR     = svReturnString;
				TARGETDIR  = WINDIR;
				CopyFile ("PGPadmin", "PGP_Admin.prf");
				CopyFile ("PGPclient", "PGP_Client.prf");
				TARGETDIR  = svReturnString;
				//DeleteFile ("PGPclient.prf");
				//DeleteFile ("PGPadmin.prf");
				VarRestore (SRCTARGETDIR);
			endif;

			//Outlook Express install location
			szKey = "Software\\Network Associates\\PGP55\\OE";
			szName = "OutlookExpress";
			RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize);
			szOEPATH = svValue;	
				 
			//Ask if they want to uninstall
			VarSave (SRCTARGETDIR);
			if (bEasyInstall = FALSE) then
				SetDialogTitle (DLG_ASK_YESNO,"Previous Install Found");
                szMessage = "Setup has found a previous version of PGP on your machine. Would you "
                          + "like Setup to uninstall it before installing " + TITLE + "?   (Recommended)"
                          + "\n\nNOTE:  If you select NO, Setup will exit.\n\n";
				if (AskYesNo(szMessage, YES) = YES) then
					if (svReturnString != "") then
						Uninstall5X
						("PGP555DeinstKey", szOEPATH, svReturnString, svEudValue);
					endif;
					if (svReturnStringb != "") then
						Uninstall5X
						("PGP55DeinstKey", "", svReturnStringb, svEudValueb);
					endif;
					// if (svReturnStringc != "") then
					//    Uninstall5X
					//    ("PGP50DeinstKey", "", svReturnStringc, svEudValuec);
					// endif;
				else
                    // Exit because all installs starting with 6.0.2 requires the previous product
                    // to be uninstalled
                    abort;
                endif;
			else
				if (nvUninstall = 1) then
					if (svReturnString != "") then
						Uninstall5X
						("PGP555DeinstKey", szOEPATH, svReturnString, svEudValue);
					endif;
					if (svReturnStringb != "") then
						Uninstall5X
						("PGP55DeinstKey", "", svReturnStringb, svEudValueb);
					endif;
					// if (svReturnStringc != "") then
					//    Uninstall5X
					//    ("PGP50DeinstKey", "", svReturnStringc, svEudValuec);
					// endif;
				endif;

			endif;
			VarRestore (SRCTARGETDIR);
endif;

//AT THIS POINT ALL FILES SHOULD BE FREE

//Register the user
RegUser:

	szTitle   = "User Information";
	szMsg     = "Please Register your product now by " +
				"typing your name and your company's name below.";

	szUserCompany = "";

	GetProfString (SRCDIR + "\\setup.ini", "STARTUP", "CompanyName", szUserCompany);

	szLocalDB = "\\Software" ^ COMPANY_FOLDER_NAME;

	//Only ask for user info on Admin build or PP or Free
	if ((ISADMIN != "FALSE") || (PGP_FREEWARE = "TRUE")) then
		if (SdRegisterUser (szTitle, szMsg, szUser, szUserCompany)= BACK) then
			goto DispAgree;
		endif;
	
		RegDBSetDefaultRoot(HKEY_CURRENT_USER);

		RegDBCreateKeyEx
		( szLocalDB ^ REGAPP_NAME,"");

		RegDBSetKeyValueEx
		(szLocalDB ^ REGAPP_NAME ,"User",REGDB_STRING,szUser,-1);
	endif;

	RegDBSetDefaultRoot(HKEY_CURRENT_USER);

	RegDBSetKeyValueEx
	(szLocalDB ^ REGAPP_NAME ,"Company Name",REGDB_STRING,szUserCompany,-1);

	RegDBSetKeyValueEx
	(szLocalDB ^ REGAPP_NAME ,"Version",REGDB_STRING,PRODUCT_VERSION,-1);


// Ask user for a destination location for the installation.--
GetTargetDirectory:

	szMsg =
	"Setup will install " +APP_NAME+" in the following directory.\n\nTo " +
	"install to this directory, click Next.\n\nTo install to a different " +
	"directory, click Browse and select another directory.\n\nYou can " +
	"choose not to install " +APP_NAME+", by clicking Cancel to exit Setup.";
	
		if (bWin32s) then
			svTarget = TARGETDISK ^ APPBASE_PATH_WIN32S;
		else
			svTarget = TARGETDISK ^ APPBASE_PATH;
		endif;

	if (bEasyInstall = FALSE) then
		if (AskDestPath
		(APP_NAME + " Setup: Choose Destination Directory"
		,szMsg,svTarget,0) = BACK) then
			if (ISADMIN = "TRUE") then
				goto RegUser;
			else
				goto DispAgree;
			endif;
		endif;
	endif;

	if (bEasyInstall = TRUE) then
		svTarget = svInstallDir;
	endif;

	if(svTarget % REGAPP_NAME) then
		if (ISADMIN = "TRUE") then
			svTarget  =  svTarget;
		else
			svTarget  =  svTarget;
		endif;
	else
		if (ISADMIN != "TRUE") then
			svTarget  =  svTarget ^ "PGP60";
		else
			svTarget  =  svTarget ^ "PGP60";
		endif;
	endif;


	// Perform space check of target drive.
	bSpaceOk = TRUE;
	if (GetDiskSpace(svTarget) < SPACE_REQUIRED) then
		szMsg = "There is not enough space available on the disk\n" +
				"'" + svTarget + "' \n" +
				"Please free up some space or change the target location\n" +
				"to a different disk";

		MessageBox(szMsg,WARNING);
		bSpaceOk = FALSE;
	endif;

	 // If not enough space,ask user to try again.
	if (bSpaceOk = FALSE) then 
		if (bEasyInstall = TRUE) then
				MessageBox ("The install directory of this pre-configured installn\n"  +
				"has insufficient disk space to complete.\n\nPlease contact your Administrator" +
				" for more information.", INFORMATION);
				if (IS_QUALCOMM_BUILD = "TRUE") then
					PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
				endif;
				exit; 
		else
			goto GetTargetDirectory;
		endif;
	endif;

PickItems:
	if (bEasyInstall = FALSE) then
		szComponents = APP_NAME;
		
		ComponentAddItem
		(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)",PROGRAM_FILES_SIZE,TRUE);

		ComponentAddItem
		(szComponents,APP_NAME +" Eudora Plugin",EUDORA_PLUGIN_SIZE,TRUE);

		if (IS_QUALCOMM_BUILD = "FALSE") then
			ComponentAddItem
			(szComponents,APP_NAME +" Microsoft Exchange/Outlook Plugin",EXCHANGE_OUTLOOK_PLUGIN_SIZE,TRUE);
		endif;

		if (IS_QUALCOMM_BUILD = "FALSE") then
			ComponentAddItem
			(szComponents,APP_NAME +" Microsoft Outlook Express Plugin",OUTLOOK_EXPRESS_PLUGIN_SIZE,TRUE);
		endif;

		ComponentAddItem
		(szComponents,APP_NAME +" User's Manual (Adobe Acrobat format)",MANUAL_SIZE,TRUE);

		if (ISADMIN = "TRUE") then
			ComponentAddItem
			(szComponents,"Unconfigured " + APP_NAME +" Client Install",CLIENT_INSTALL_SIZE,TRUE);
		endif;

		if (INCLUDEPGPFONE = "TRUE") then
			ComponentAddItem
			(szComponents,"PGPfone (Beta)",PGPFONE_SIZE,TRUE);
		endif;

		if (INCLUDEPGPDISKEX = "TRUE") then
			ComponentAddItem
			(szComponents,"PGPdisk for Windows",PGPDISK_SIZE,TRUE);
		endif;

	else
		szComponents = APP_NAME;

		if (nvProgramFiles = 1) then
			ComponentAddItem
			(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)",PROGRAM_FILES_SIZE,TRUE);
		else
			ComponentAddItem
			(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)",PROGRAM_FILES_SIZE,FALSE);
		endif;

		if (nvEudoraPlugin = 1) then
			ComponentAddItem
			(szComponents,APP_NAME +" Eudora Plugin",EUDORA_PLUGIN_SIZE,TRUE);
		else
			ComponentAddItem
			(szComponents,APP_NAME +" Eudora Plugin",EUDORA_PLUGIN_SIZE,FALSE);
		endif;

		if (nvExchangeOutlookPlugin = 1) then
			ComponentAddItem
			(szComponents,APP_NAME +" Microsoft Exchange/Outlook Plugin",EXCHANGE_OUTLOOK_PLUGIN_SIZE,TRUE);
		else
			ComponentAddItem
			(szComponents,APP_NAME +" Microsoft Exchange/Outlook Plugin",EXCHANGE_OUTLOOK_PLUGIN_SIZE,FALSE);
		endif;

		if (nvOutlookExpressPlugin = 1) then
			ComponentAddItem
			(szComponents,APP_NAME +" Microsoft Outlook Express Plugin",OUTLOOK_EXPRESS_PLUGIN_SIZE,TRUE);
		else
			ComponentAddItem
			(szComponents,APP_NAME +" Microsoft Outlook Express Plugin",OUTLOOK_EXPRESS_PLUGIN_SIZE,FALSE);
		endif;

		if (nvUserManual = 1) then
			ComponentAddItem
			(szComponents,APP_NAME +" User's Manual (Adobe Acrobat format)",MANUAL_SIZE,TRUE);
		else
			ComponentAddItem
			(szComponents,APP_NAME +" User's Manual (Adobe Acrobat format)",MANUAL_SIZE,FALSE);
		endif;

		if (nvPGPdisk = 1) then
				ComponentAddItem
				(szComponents,"PGPdisk for Windows",PGPDISK_SIZE,TRUE);
		else
				ComponentAddItem
				(szComponents,"PGPdisk for Windows",PGPDISK_SIZE,FALSE);
		endif;
	endif;

	if (bEasyInstall = FALSE) then
		if (SdComponentDialog
		("Select Components",
		 "Select the components you want to install, clear the " +
		 "components you do not want to install.",svTarget,
		 szComponents) = BACK) then

			goto GetTargetDirectory;

		endif;

        /**************************************************************************************************************
         *
         *  Do not allow the user to continue unless they select to install the core PGP components,
         *  APP_NAME +" Program Files (Required for PGP 6.x)
         *
         **************************************************************************************************************/

		if (ComponentIsItemSelected (szComponents, APP_NAME +" Program Files (Required for PGP 6.x)") = FALSE) then
            SetDialogTitle (DLG_ASK_YESNO, "Required Component Not Selected");
            szMessage = APP_NAME +" Program Files (Required for PGP 6.x) was not selected.  It is required for the "
                      + "product to function properly.  Would you like Setup to automatically select this component?";
            if (AskYesNo (szMessage, YES) = YES) then
                ComponentSelectItem (szComponents, APP_NAME +" Program Files (Required for PGP 6.x)", TRUE);
            else
                SetDialogTitle (DLG_ASK_YESNO, "Cancel Installation");
                szMessage = "You have chosen not install " + APP_NAME +" Program Files (Required for PGP 6.x).  "
                          + "Would you like to cancel this installation?";
                if (AskYesNo (szMessage, NO) = NO) then
                    goto PickItems;
                else
                    abort;
                endif;
            endif;
		endif;

	
		// Set the App Paths key for the main program.
		szAppPath = svTarget;

		//Here is where we show the user his/her selections and verify
		//things are ok before file copy Store retrieved information in list.

		// Create the list.
		listData = ListCreate (STRINGLIST);

		if (ISADMIN = "TRUE") then
			ListAddString(listData,"Name:",AFTER);
			ListAddString(listData,"           " + szUser,AFTER);
			ListAddString(listData,"Company:",AFTER);
			ListAddString(listData,"           " + szUserCompany,AFTER);

			//serial number no longer used
			//ListAddString(listData,"Serial #:",AFTER);
			//if (PGP_NO_LICENSE_NUMBER = "FALSE") then
			//	ListAddString(listData,"           " + szUserSerial,AFTER);
			//endif;
		endif;

		ListAddString(listData,APP_NAME +" Components Selected:",AFTER);

		if (ComponentIsItemSelected
			(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)") = TRUE) then
			ListAddString
			(listData,"           " + APP_NAME +" Program Files (Required for PGP 6.x) ",AFTER);
		endif;

		if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Eudora Plugin") = TRUE) then

			ListAddString
			(listData,"           " + APP_NAME +" Eudora Plugin",AFTER);

		endif;
		if (IS_QUALCOMM_BUILD = "FALSE") then
			if (ComponentIsItemSelected
			(szComponents,APP_NAME +" Microsoft Exchange/Outlook Plugin") = TRUE) then

				ListAddString
				(listData,"           " +
				APP_NAME +" Microsoft Exchange/Outlook Plugin",AFTER);

			endif;
		endif;
		if (IS_QUALCOMM_BUILD = "FALSE") then
			if (ComponentIsItemSelected
			(szComponents,APP_NAME +" Microsoft Outlook Express Plugin") = TRUE) then

				ListAddString
				(listData,"           " +
				APP_NAME +" Microsoft Outlook Express Plugin",AFTER);

			endif;
		endif;
		if (ComponentIsItemSelected
		(szComponents,APP_NAME +" User's Manual (Adobe Acrobat format)") = TRUE) then

			ListAddString(listData,"           " + APP_NAME +" User's Manual " +
						"(Adobe Acrobat format)",AFTER);
		endif;


		if (ComponentIsItemSelected
		(szComponents,"Unconfigured " + APP_NAME +" Client Install") = TRUE) then

			ListAddString(listData,"           " + "Unconfigured " + APP_NAME +" Client" + 
					" Install",AFTER);
		endif;

		if (INCLUDEPGPFONE = "TRUE") then
			if (ComponentIsItemSelected
			(szComponents,"PGPfone (Beta)") = TRUE) then

				ListAddString(listData,"           " + "PGPfone (Beta)",AFTER);
			endif;
		endif;
	
		if (INCLUDEPGPDISK = "TRUE") then
			if (ComponentIsItemSelected
			(szComponents,	"PGPdisk for Windows") = TRUE) then

				ListAddString(listData,"           " + "PGPdisk for Windows"
							,AFTER);
			endif;
		endif;
	endif;

	if (INCLUDEPGPDISK = "TRUE") then
		//Shut Down PGPdisk Resident
		if (ComponentIsItemSelected
		(szComponents,	"PGPdisk for Windows") = TRUE) then
			UseDLL (SUPPORTDIR ^ "PGPdskIH.dll");
			KillPGPdiskResident();

			//svSubStr is the first char. of the full path (so the drive letter)
			//svTarget is the directory where the user has selected to install
			StrSub (svSubStr, svTarget, 0, 1);
			//Convert the drive letter to uppercase
			StrToUpper (DrvLetUpper, svSubStr);
			GetByte (nDrvLetUpper, DrvLetUpper, 0);
	
			DriveNum = nDrvLetUpper - 65;
		
			if (IsVolumeAPGPdisk (DriveNum) = TRUE) then
			
				//The drive they are installing to is a PGP disk
				szMsg = "You cannot install PGPdisk onto a PGPdisk volume. Do you\n" +
						"want to change the target location to a different disk.";

				if (AskYesNo(szMsg + "\n\n" + 
					"If you do not change the target location PGPdisk will not\n" +
					" be installed. \n Change target location ?",YES) = YES) then

					goto GetTargetDirectory;

				else
					ComponentSelectItem
					(szComponents,"PGPdisk for Windows",FALSE);

				endif;

			endif;

			UnUseDLL (SUPPORTDIR ^ "PGPdskIH.dll");
		endif;
	endif;

	//Check if selections made are valid
	if (((ComponentIsItemSelected
		(szComponents,APP_NAME +" Eudora Plugin")                        =	TRUE)	||
		(ComponentIsItemSelected
		(szComponents,APP_NAME +" Microsoft Exchange/Outlook Plugin")    =	TRUE)	||
		(ComponentIsItemSelected
		(szComponents,APP_NAME +" Microsoft Outlook Express Plugin")     =	TRUE))	&&
 		(ComponentIsItemSelected
		(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)") =	FALSE)) then
			//Tell user program files are required
			SdShowMsg 
			(APP_NAME +" Program Files are required, please select items again",
			 TRUE);
			Delay (4);
			SdShowMsg 
			(APP_NAME +" Program Files are required, please select items again",
			 FALSE);
			goto PickItems;
	endif;

	//Check for NULL selections
	if ((ComponentIsItemSelected
		(szComponents,APP_NAME +" Eudora Plugin")                        =	FALSE)	&&
		(ComponentIsItemSelected
		(szComponents,APP_NAME +" Microsoft Exchange/Outlook Plugin")    =	FALSE)	&&
		(ComponentIsItemSelected
		(szComponents,APP_NAME +" Microsoft Outlook Express Plugin")     =	FALSE)	&&
		(ComponentIsItemSelected
		(szComponents,APP_NAME +" User's Manual (Adobe Acrobat format)") =	FALSE)	&&
		(ComponentIsItemSelected
		(szComponents,"PGPdisk for Windows")							 =	FALSE)	&&
		(ComponentIsItemSelected
		(szComponents,"PGPfone (Beta)")									 =	FALSE)	&&
		(ComponentIsItemSelected
		(szComponents,"Unconfigured " + APP_NAME +" Client Install")	 =	FALSE)	&&
 		(ComponentIsItemSelected
		(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)") =	FALSE)) then
			//Tell user program files are required
			SdShowMsg 
			("Nothing has been selected, please select items again",
			 TRUE);
			Delay (4);
			SdShowMsg 
			("Nothing has been selected, please select items again",
			 FALSE);
			goto PickItems;
	endif;

	if ((ComponentIsItemSelected
		(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)") = FALSE) &&
	    (ComponentIsItemSelected
	    (szComponents,"Unconfigured " + APP_NAME +" Client Install") = TRUE)) then

		SetDialogTitle (DLG_ASK_YESNO,"Are you sure?");
		if (AskYesNo("You have selected to install the Unconfigured " + APP_NAME +
			" Client Install and have not selected\n" + APP_NAME +" Program Files." +
			" This type of install should only be done if you have " + APP_NAME +
			" already\ninstalled. Do you?",YES) = NO) then
			SdShowMsg 
			(APP_NAME +" Program Files are required, please select items again",
			 TRUE);
			Delay (4);
			SdShowMsg 
			(APP_NAME +" Program Files are required, please select items again",
			 FALSE);
			goto PickItems;
		endif;
	endif;

	ListAddString(listData,"",AFTER);
	ListAddString(listData,"Destination Directory:",AFTER);
	ListAddString(listData,"           " + szAppPath,AFTER);

	// Set title and static text for SdStartCopy.
	szTitle = "Check Setup Information";
	szMsg = "Setup has enough information to begin copying the\n" +
			"program files.  If you want to review or change any of the\n" +
            "settings, click Back.  If you are satisfied with the\n" +
            "settings, click Next to begin copying files.";

	if (bEasyInstall = FALSE) then
		// Call SdStartCopy to display user selections.
		nvResult = SdStartCopy (szTitle,szMsg,listData);

		switch(nvResult)

			case NEXT:

				goto OEoverhead;

			case BACK:

				goto PickItems;
			 
			default:

			MessageBox("SdStartCopy failed.",SEVERE);
		endswitch;
	endif;

//Do overhead for installing Outlook Express
OEoverhead:
	if (IS_QUALCOMM_BUILD = "FALSE") then
		if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Microsoft Outlook Express Plugin") = TRUE) then	  
			//Get Outlook Express's Install Directory
			RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
			szKey = "Software\\Microsoft\\Outlook Express";
			szName = "InstallRoot";

			RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize);
			szOEdir = svValue;

			if (FindFile (szOEdir, "msimn.exe", svResult) <0) then
				bFoundOutlook = FALSE;
			else
				//msimn.exe is present
				bFoundOutlook = TRUE;
			endif;

			if (bFoundOutlook = FALSE) then
				Disable (BACKBUTTON);
				// we must ask the user where Outlook is
				MessageBox( "Setup could not find your Outlook Express install directory. Please Browse to it.", INFORMATION );
				szOEdir = "";
				nResult = UseDLL (SUPPORTDIR ^ "INSTALL.DLL");
				szOEdir = "Browse to your Outlook Express Install folder.";
				hwndIS3 = GetWindowHandle(HWND_INSTALL);
				nResult = MyBrowseForFolder32 (hwndIS3, szOEdir);
			
				if (ExistsDir (szOEdir) = EXISTS &&
					FindFile(szOEdir,"msimn.exe",svResult)=0) then
						bFoundOutlook = TRUE;
				else
					//They did not enter a path for Outlook
					// & it cannot be found 
					//so we do not install the plugin.
					MessageBox( "There does not appear to be a valid install of Microsoft Outlook " +
						    "Express in this directory so the plugin won't be installed.", INFORMATION );
					ComponentSelectItem
					(szComponents,APP_NAME +" Microsoft Outlook Express Plugin",FALSE);
					goto SetupFilesToTransfer;
				endif;
			endif;

				UnUseDLL (SUPPORTDIR ^ "INSTALL.DLL");

//				if (AskPath(szMsg,"",szOEdir) = NEXT) then
//					if ((szOEdir != "")) then
//						if (ExistsDir(szOEdir)=EXISTS &&
//							FindFile(szOEdir,"msimn.exe",svResult)=0)
//							then
//							bFoundOutlook = TRUE;
//						else
//							//They did not enter a path for Outlook
//							// & it cannot be found 
//							//so we do not install the plugin.
//							MessageBox( "There does not appear to be a valid install of Microsoft Outlook " +
//								    "Express in this directory so the plugin won't be installed.", INFORMATION );
//							ComponentSelectItem
//							(szComponents,APP_NAME +" Microsoft Outlook Express Plugin",FALSE);
//									goto SetupFilesToTransfer;
//						endif;
//					endif;
//				endif;
//			endif;
//
		StrRemoveLastSlash (szOEdir);


		if (FindFile(szOEdir,"PGPmsimn.exe",svResult)=0) then
			RenameOriginal = FALSE;
		endif;

		if (RenameOriginal = FALSE) then
			szFileName = szOEdir ^ "msimn.exe";
			UseDLL( "Version.dll" );
			lSize = GetFileVersionInfoSizeA( szFileName, nHandle );
			//NumToStr( szTemp, lSize );
			bVerInfo = GetFileVersionInfoA( szFileName, nHandle, lSize, szVerBuffer);
			ptr1 = AddressString( szResultBuffer );
			ptr2 = AddressNumber( ptr1 );
			bVerValue = VerQueryValueA( szVerBuffer,"\\StringFileInfo\\040904b0\\CompanyName", ptr2, nSize);

			if (bVerValue =0) then 
				VerQueryValueA( szVerBuffer,"\\StringFileInfo\\040904E4\\CompanyName", ptr2, nSize);
			endif;
			// pszResultBuffer is a pointer to a pointer which is the starting point
			// for the company name. How do you actually get the string ?
			StructGetP( ptr2, "MYTYPE_PSZ", "szString", lData, szData );
			//MessageBox (szData, INFORMATION);
			UnUseDLL( "Version.dll" );
		endif;

		if (szData = "Microsoft Corporation") then
			//the user install the plugin then updated outlook
			//so we DO want to use this newer file
			RenameOriginal = TRUE;
			VarSave	 (SRCTARGETDIR);
			SRCDIR = szOEdir;
			TARGETDIR = szOEdir;
			DeleteFile ("pgpmsimn.exe");
			VarRestore (SRCTARGETDIR);
			bCheckVersion = FALSE;
		endif;

		if (DEBUG = "TRUE") then
			 MessageBox( "Outlook Express installed in " + szOEdir, INFORMATION );
		endif;
//moved from here
		if (bCheckVersion != FALSE) then
			szVersionInfo1 = "4.72.2106.4";

			VerGetFileVersion (szOEdir ^ "msimn.exe", szVersionInfo2);
			//Made changes here needs to be checked
			if (VerCompare (szVersionInfo1, szVersionInfo2, VERSION)= GREATER_THAN) then
				MessageBox( "The Outlook Express plugin requires Microsoft Outlook Express be installed.\n"+
						"Version 4.72.2106.4 or later. If you upgrade your version and wish to\n" +
						"install the Outlook Express Plugin, you will need to run this setup again.", INFORMATION );
						ComponentSelectItem
						(szComponents,APP_NAME +" Microsoft Outlook Express Plugin",FALSE);
				goto SetupFilesToTransfer;
			endif;
		endif;

		if (RenameOriginal = TRUE) then
			VarSave (SRCTARGETDIR);
			SRCDIR = szOEdir;
			TARGETDIR = szOEdir;
			if (RenameFile ("msimn.exe", "PGPmsimn.exe")<0) then
				MessageBox( "Unable to rename msimn.exe which is needed for the Outlook Express\n" +
						"Plugin, please reboot and run this setup again", WARNING );
				if (IS_QUALCOMM_BUILD = "TRUE") then
					PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
				endif;
				exit;
			endif;
			VarRestore (SRCTARGETDIR);
		endif;
	endif;
endif;

//Begin Copying Files

SetupFilesToTransfer:

	//Enable (INDVFILESTATUS);

	szFileSet = "General";
	// Define the file set.
	FileSetBeginDefine(szFileSet);

	if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)") = TRUE) then

		SetStatusWindow(-1,"Copying " + APP_NAME +" Program Files...");
		TARGETDIR = svTarget;

		if (CompressGet
			("DATA.Z","PGP60\\*.*",
			COMP_NORMAL | INCLUDE_SUBDIR) < 0) then

			MessageBox("CompressGet failed PGP",WARNING);

		endif;

		SetStatusWindow(-1,"Copying " + APP_NAME +" Documentation...");
		TARGETDIR = svTarget ^ "Documentation";
		if (CompressGet
			("DATA.Z","Docs\\*.*",
			COMP_NORMAL | INCLUDE_SUBDIR) < 0) then

			MessageBox("CompressGet failed PGP",WARNING);

		endif;
	endif;

OutlookExpress:
	if (IS_QUALCOMM_BUILD = "FALSE") then

		if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Microsoft Outlook Express Plugin") = TRUE) then

			SetStatusWindow(-1,"Copying " + APP_NAME +" Outlook Express Plugin");

			TARGETDIR = WINSYSDIR;
			if (CompressGet
				("DATA.Z","OEwinsys\\*.*",
				COMP_NORMAL) < 0) then

				MessageBox("CompressGet failed PGP",WARNING);
			endif;

			TARGETDIR = szOEdir;
			if (CompressGet
				("DATA.Z","OEplugin\\*.*",
				COMP_NORMAL | INCLUDE_SUBDIR) < 0) then

				MessageBox("CompressGet failed PGP",WARNING);
			endif;

		endif;
	endif;

 // Users Manual
	if (ComponentIsItemSelected
		(szComponents,APP_NAME +" User's Manual (Adobe Acrobat format)")
		 = TRUE) then

		SetStatusWindow(-1,"Copying " + APP_NAME +" User's Manual...");
		TARGETDIR = svTarget ^ "Documentation";

		if (CompressGet
			("DATA.Z","Manual\\*.*",
			COMP_NORMAL | INCLUDE_SUBDIR) < 0) then

			MessageBox("CompressGet failed PGP",WARNING);

		endif;
	endif;

 //Unconfigured PGP 5.5 Client Install

	if (ComponentIsItemSelected
		(szComponents,"Unconfigured " + APP_NAME +" Client Install")
		 = TRUE) then

		SetStatusWindow(-1,"Copying Unconfigured " + APP_NAME +" Client Install...");
		TARGETDIR = svTarget;

		if (CompressGet
			("DATA.Z","Admin\\*.*",
			COMP_NORMAL | INCLUDE_SUBDIR) < 0) then

			MessageBox("CompressGet failed PGP",WARNING);

		endif;
	endif;

 //PGP Memlock and common control
	GetSystemInfo(OS, nvOS, svOS);
	switch (nvOS)

	case IS_WINDOWSNT:
		SetStatusWindow(-1,"Copying Windows NT Memory Manager...");
		TARGETDIR = WINSYSDIR ^ "drivers";
		if (CompressGet
			("DATA.Z","ntmemloc\\*.*",
			COMP_NORMAL | SHAREDFILE) < 0) then

			MessageBox("CompressGet failed PGP",WARNING);

		endif;
		//Set reg. keys for NT PGPmemlock
		RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
		szKey = "SYSTEM\\CurrentControlSet\\Services\\PGPmemlock";
		RegDBSetKeyValueEx (szKey ,"ErrorControl",REGDB_NUMBER,"1",-1);
		RegDBSetKeyValueEx (szKey ,"Type",REGDB_NUMBER,"1",-1);
		RegDBSetKeyValueEx (szKey ,"Start",REGDB_NUMBER,"2",-1);
		RegDBSetKeyValueEx (szKey ,"DisplayName",REGDB_STRING,"PGP secure memory driver",-1);

	case IS_WINDOWS95:
		SetStatusWindow(-1,"Copying Windows 95 Memory Manager...");
		TARGETDIR = WINDIR;
		if (CompressGet
			("DATA.Z","95memloc\\*.*",
			COMP_NORMAL | SHAREDFILE) < 0) then

			MessageBox("CompressGet failed PGP",WARNING);

		endif;
	endswitch;

Exchange:
if (IS_QUALCOMM_BUILD = "FALSE") then

	if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Microsoft Exchange/Outlook Plugin") = TRUE) then

		SetStatusWindow(-1,"Copying " + APP_NAME +" Exchange/Outlook Plugin");

		TARGETDIR = WINSYSDIR;
		if (CompressGet
			("DATA.Z","Exchange\\*.*",
			COMP_NORMAL | INCLUDE_SUBDIR) < 0) then

			MessageBox("CompressGet failed PGP",WARNING);
		endif;
	endif;
endif;


FindEudora:

	if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Eudora Plugin") = TRUE) then

		// add the eudora plugin to the plugins dir
		bFoundEudora = FALSE;
		nvType       = REGDB_STRING;

	

		if (IS_QUALCOMM_BUILD = "FALSE") then
			RegDBSetDefaultRoot(HKEY_CURRENT_USER);
			RegString = "\\Software\\Qualcomm\\Eudora\\CommandLine";
			KeyVal = "Current";
		else
			RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
			RegString = "\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Eudora.exe";
			KeyVal = "Path";
		endif;

		if (RegDBGetKeyValueEx
			(RegString,KeyVal,nvType,szEudoraPath,nvPathLen) < 0) then
			bFoundEudora = FALSE;
		else
			if (IS_QUALCOMM_BUILD = "FALSE") then
			// Set necessary variables.
			listID         = ListCreate(STRINGLIST);
			szDelimiterSet = " ";
	
			StrGetTokens(listID, szEudoraPath, szDelimiterSet);
			ListGetFirstString(listID, svString);
			ParsePath(szEudoraPath, svString, PATH);
			endif;
		
			if (ExistsDir(szEudoraPath) = NOTEXISTS) then
				bFoundEudora = FALSE;
			else
				bFoundEudora = TRUE;
			endif;

		endif;

		if (bFoundEudora = FALSE) then
			// we must ask the user where Eudora is
			szEudoraPath = "";
			
			MessageBox( "Setup could not find your Eudora install directory. Please Browse to it.", INFORMATION );
			nResult = UseDLL (SUPPORTDIR ^ "INSTALL.DLL");
			szEudoraPath = "Browse to your Eudora Install folder.";
			hwndIS3 = GetWindowHandle(HWND_INSTALL);
			nResult = MyBrowseForFolder32 (hwndIS3, szEudoraPath);
			UnUseDLL (SUPPORTDIR ^ "INSTALL.DLL");

				if ((szEudoraPath != "")) then
					if (ExistsDir(szEudoraPath)=EXISTS &&
						FindFile(szEudoraPath,"Eudora.exe",szEudoraFile)=0)
						then
						bFoundEudora = TRUE;
					else
						//They did not enter a path for Eudora
						// & it cannot be found 
						//so we do not install the plugin.
						ComponentSelectItem
						(szComponents,APP_NAME +" Eudora Plugin",FALSE);
					endif;
				endif;
		endif;
			
		if (bFoundEudora = TRUE) then
			EudoraPluginPath = szEudoraPath + "\\Plugins";
			PathToExe = szEudoraPath^"Eudora.exe";

			//find out if they are running PRO or LITE
			UseDLL("Version.dll");
											
			lSize     = GetFileVersionInfoSizeA
						(szEudoraPath^"Eudora.exe",nHandle);

			bVerInfo  = GetFileVersionInfoA
						(szEudoraPath^"Eudora.exe",nHandle,lSize,szVerBuffer);

			ptr1      = AddressString
						(szResultBuffer);
			ptr2      = AddressNumber
						(ptr1);
			bVerValue = VerQueryValueA
						(szVerBuffer,"\\StringFileInfo\\040904E4\\ProductName"
						,ptr2,nSize);

			// pszResultBuffer is a pointer to a pointer which is the starting
			// point for the product name. How do you actually get the string?
			StructGetP(ptr2,"MYTYPE_PSZ","szString",lData,szData);
			UnUseDLL("Version.dll");
			//szData will now equal Lite or Pro

			// check to see if we need to migrate 3.0.1 to 3.0.2
			WhichPlugin = "REGULAR";
			if (VerGetFileVersion
				(szEudoraPath^"Eudora.exe",svEudoraVersion) = 0) then
				
				if (ComponentIsItemSelected 
				   (szComponents,APP_NAME +" Eudora Plugin") = TRUE) then
					UpdateNeeded = "FALSE";
					if (VerCompare
						(svEudoraVersion,"3.0.2.0",VERSION) = LESS_THAN) then
						UpdateNeeded = "TRUE";
						MessageBox
						("Setup has detected that Eudora needs to be updated.\n" +
						"The necessary updates can be found at : \n\n"         +
						"http://www.eudora.com\n\n"   +
						"You will be reminded to do to this at the end of the\n" +
						"install, and a shortcut to this site will be put in" +
						" the\nPGP folder located in the" +
						" startbar.\nInstall update overtop of your current" +
						" version to maintain\nsettings and plugins, otherwise" +
						" PGP will need to be reinstalled)", INFORMATION);
					endif;

		
					if ((VerCompare
						(svEudoraVersion,"4.0.0.0",VERSION) = EQUALS) ||
						(VerCompare
						(svEudoraVersion,"4.0.0.0",VERSION) = GREATER_THAN)) then
						WhichPlugin = "FOURDOTO";
					
					endif;

				endif;
			endif; // no version info for file

			if (ComponentIsItemSelected
			(szComponents,APP_NAME +" Eudora Plugin") = TRUE) then

			TARGETDIR = szEudoraPath ^ "Plugins";

				if (WhichPlugin = "FOURDOTO") then 
					WhichEudoraPath = "Eudora\\FOURDOTO\\*.*";
				else
					WhichEudoraPath = "Eudora\\REGULAR\\*.*";
				endif;

       			if (CompressGet
					("DATA.Z",WhichEudoraPath,COMP_NORMAL) < 0) then
					MessageBox("CompressGet failed Eudora",WARNING);
				endif;
			endif;
		endif;
	endif;

	if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)") = TRUE) then
		TARGETDIR = WINSYSDIR;
		SetStatusWindow
		(-1,"Copying Explorer Extensions...");
		if (CompressGet
			("DATA.Z","WinSysDir\\*.*",COMP_NORMAL | LOCKEDFILE) < 0) then
			MessageBox
			("CompressGet failed WinSysDir",WARNING);
		endif;
	endif;

	if ((ComponentIsItemSelected
		(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)") = TRUE) ||

		(ComponentIsItemSelected(szComponents,"PGPdisk for Windows") = TRUE)) then

		TARGETDIR = WINSYSDIR;
		SetStatusWindow
		(-1,"Copying SDK Extensions...");
		if (RSA = 1) then
			if (CompressGet
				("DATA.Z","SdkWinSys\\*.*",COMP_UPDATE_SAME	| COMP_UPDATE_VERSION | SHAREDFILE) < 0) then
				MessageBox
				("CompressGet failed SDK",WARNING);
			endif;
		else
			if (CompressGet
				("DATA.Z","SdkWinSys\\*.*",COMP_UPDATE_SAME	| COMP_UPDATE_VERSION | SHAREDFILE) < 0) then
				MessageBox
				("CompressGet failed SDK",WARNING);
			endif;
		endif;

		//set reg. key to remove shared files
		RegDBSetDefaultRoot(HKEY_CURRENT_USER);
		szLocalDB = "\\Software" ^ "Network Associates";

		RegDBSetKeyValueEx
		(szLocalDB ^ REGAPP_NAME,"DelSharedFiles",REGDB_STRING,"1",-1);
	endif;

	if (INCLUDEPGPFONE = "TRUE") then
		if (ComponentIsItemSelected
			(szComponents,"PGPfone (Beta)") = TRUE) then
			//PGPFONE PROGRAM FILES
			TARGETDIR = svTarget ^ "PGPfone";
			SetStatusWindow( -1, "Copying PGPfone program files..." );
			CompressGet( "DATA.Z", "pgpfone\\*.*", INCLUDE_SUBDIR | LOCKEDFILE );
		endif;
	endif;

	if (INCLUDEPGPDISK = "TRUE") then
		if (ComponentIsItemSelected
			(szComponents,"PGPdisk for Windows") = TRUE) then

			//set reg. key to tell that PGPdisk was installed with PGP
			RegDBSetDefaultRoot(HKEY_CURRENT_USER);
			szLocalDB = "\\Software" ^ "Network Associates";

			RegDBSetKeyValueEx
			(szLocalDB ^ REGAPP_NAME,"PGPdiskInstalled",REGDB_STRING,"1",-1);

			//PROGRAM FILES
			TARGETDIR = svTarget;
			SetStatusWindow( -1, "Copying PGPdisk program files..." );
			CompressGet( "DATA.Z", "pgpdisk\\prog\\*.*", INCLUDE_SUBDIR | LOCKEDFILE );

			//SHELL EXTENSION
			TARGETDIR = WINSYSDIR;
			SetStatusWindow( -1, "Copying PGPdisk shell extension files..." );
			CompressGet( "DATA.Z", "pgpdisk\\shell\\*.*", LOCKEDFILE	 );

			//DRIVERS
			if (IS_NT) then
				TARGETDIR = WINSYSDIR ^ "Drivers";
				CompressGet( "DATA.Z", "pgpdisk\\drivers\\nt\\*.*", LOCKEDFILE );
			else
				TARGETDIR = WINSYSDIR ^ "iosubsys";
				CompressGet( "DATA.Z", "pgpdisk\\drivers\\95\\*.*", LOCKEDFILE );
			endif;

			//MFC DLLS
			TARGETDIR = WINSYSDIR;
			SetStatusWindow( -1, "Copying MFC libraries..." );
			CompressGet( "DATA.Z", "pgpdisk\\mfc\\*.*", SHAREDFILE | COMP_UPDATE_VERSION );

			//We must remove old PGPdisk "stuff" if it is installed
			RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
			szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGPdisk.exe";
			svOldDisk = "";

			if (RegDBGetKeyValueEx (szKey, "", nvType, svOldDisk, nvSize) = 0) then
				//There IS an old PGPdisk installed so we need to do a few things
				//remove its uninstall entry
				ParsePath (svReturnString, svOldDisk, PATH);
					
				VarSave (SRCTARGETDIR);
				SRCDIR = svReturnString;
				TARGETDIR = svReturnString;

				TARGETDIR = svReturnString ^ "signatures";
				DeleteFile ("*.sig");
				DeleteFile ("*.*.sig");
				DeleteDir  (svReturnString ^ "signatures", ONLYDIR);

				TARGETDIR = svReturnString;

				DeleteFile ("pgpdisk.exe");
				DeleteFile ("pgpdisk.hlp");
				DeleteFile ("pgpdisk.cnt");
				DeleteFile ("pgpdisk.pdf");
				DeleteFile ("readme.txt");
				DeleteFile ("license.txt");
				DeleteFile ("uninstall.exe");

				TARGETDIR = WINSYSDIR;
				DeleteFile ("pgpdskSE.dll");
				VarRestore (SRCTARGETDIR);
				
				//Remove the entry from the uninstall applet
				RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
				RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGPdiskDeinstKey");

				//Remove the old start menu group ( will now reside in new P G P group )
				DeleteProgramFolder (FOLDER_STARTMENU ^ "Programs" ^ "PGPdisk");
				ProgDefGroupType(PERSONAL);
				DeleteProgramFolder (FOLDER_STARTMENU ^ "Programs" ^ "PGPdisk");

			endif;

		endif;

	endif;

	FileSetEndDefine(szFileSet);

	

TransferFiles:
    
	TARGETDIR = svTarget ^ "Documentation";
	CopyFile ("License.txt", "License.txt");

	TARGETDIR = svTarget;
	//copy old pref files from the copies I made in the windows directory
	
	if ((FindFile (WINDIR, "PGP_Admin.prf", svResult) = 0) ||
		(FindFile (WINDIR, "PGP_Client.prf", svResult) = 0)) then

		SdShowMsg ("Copying old preference files...", TRUE);
		Delay (3);
		VarSave (SRCTARGETDIR);
		SRCDIR     = WINDIR;
		TARGETDIR  = TARGETDIR;
		CopyFile ("PGP_Admin.prf","PGP_Admin.prf");
		CopyFile ("PGP_Client.prf","PGP_Client.prf");
		TARGETDIR  = WINDIR;
		SRCDIR     = WINDIR;
		DeleteFile ("PGP_Admin.prf");
		DeleteFile ("PGP_Client.prf");
		VarRestore (SRCTARGETDIR);
		SdShowMsg ("Copying old preference files...", FALSE);

	endif;

	//copy the pref. files from disk 1 (if there)
	//these take precedence if they are present
	VarSave (SRCTARGETDIR);
	SRCDIR     = SRCDIR;
	TARGETDIR  = TARGETDIR;
	CopyFile ("PGP_Admin.prf","PGP_Admin.prf");
	CopyFile ("PGP_Client.prf","PGP_Client.prf");
	VarRestore (SRCTARGETDIR);

	VarSave (SRCTARGETDIR);
	SRCDIR     = SRCDIR;
	TARGETDIR  = TARGETDIR ^ "PGP Keyrings";
	CopyFile ("pubring.pkr","pubring.pkr");
	VarRestore (SRCTARGETDIR);

	// Prepare InstallShield to record deinstallation information.
//	DeinstallStart(svTarget ,svUninstLogFile,DEINSTALL_KEY,0);
//	RegDBSetItem(REGDB_UNINSTALL_NAME,UNINSTALL_NAME);

	// Set up progress indicator and information gauge.
	Disable(DIALOGCACHE);
	Enable(STATUSDLG);
	PlaceWindow (STATUSDLG, CENTERED, CENTERED, CENTERED);
	PlaceWindow (FEEDBACK, 0, 0, LOWER_RIGHT);

	// Perform the file set.
	StatusUpdate(ON,100); // this is the final percentage after file copies


	SetStatusWindow(0,"Copying " + APP_NAME +" Program Files...");
	nResult = FileSetPerformEz(szFileSet,0);

	switch (nResult)

	case FS_DONE: // Successful completion.

	case FS_CREATEDIR: // Create directory error.
		MessageBox("Unable to create a directory under " + TARGETDIR + "."+
					"Please check write access to this directory.",SEVERE);
		if (IS_QUALCOMM_BUILD = "TRUE") then
			PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		endif;
	    exit;

	default: // Group all other errors under default label.
		NumToStr(szTemp,nResult);
		MessageBox("General file transfer error."+
					 "Please check your target location and try again."+
					 "\n\n Error Number:"+szTemp +
					 "\n Related File: "+ERRORFILENAME,
					 SEVERE);
		if (IS_QUALCOMM_BUILD = "TRUE") then
			PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		endif;
		exit;
	endswitch;

//Install Icons

	ProgDefGroupType(PERSONAL);

	//Add PGP (TED) to their startup group.
		
	szProgram = TARGETDIR ^ "PGPtray.exe";
	LongPathToQuote (szProgram,TRUE);
	szAppPath = TARGETDIR;

	AddFolderIcon
	(FOLDER_STARTUP,"PGPtray",szProgram,szAppPath,"",0,"",REPLACE);


	CreateProgramFolder ("P G P");

	if (ComponentIsItemSelected
	(szComponents,APP_NAME +" User's Manual (Adobe Acrobat format)") = TRUE) then
		szProgram = TARGETDIR ^ "Documentation" ^ "PGPWinUsersGuide.pdf";
		LongPathToQuote (szProgram,TRUE);
		szAppPath = TARGETDIR ^ "Documentation";
		AddFolderIcon
		(FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "Documentation",
		"PGP 6.0 Manual",szProgram,szAppPath
		,"",0,"",REPLACE);
	endif;

	if (INCLUDEPGPFONE = "TRUE") then
		if (ComponentIsItemSelected
			(szComponents,"PGPfone (Beta)") = TRUE) then
			szProgram = TARGETDIR ^ "PGPfone" ^ "PGPfone.exe";
			LongPathToQuote (szProgram,TRUE);
			szAppPath = TARGETDIR ^ "PGPfone";
			AddFolderIcon
			(FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "PGPfone",
			"PGPfone (Beta)",szProgram,szAppPath
			,"",0,"",REPLACE);

			szProgram = TARGETDIR ^ "PGPfone" ^ "readme.txt";
			LongPathToQuote (szProgram,TRUE);
			szAppPath = TARGETDIR ^ "PGPfone";
			AddFolderIcon
			(FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "PGPfone" ^ "Documentation",
			"ReadMe",szProgram,szAppPath
			,"",0,"",REPLACE);

			szProgram = TARGETDIR ^ "PGPfone" ^ "pgpfone.pdf";
			LongPathToQuote (szProgram,TRUE);
			szAppPath = TARGETDIR ^ "PGPfone";
			AddFolderIcon
			(FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "PGPfone" ^ "Documentation",
			"PGPfone Manual",szProgram,szAppPath
			,"",0,"",REPLACE);
		endif;
	endif;

	if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)") = TRUE) then

		if (ISADMIN = "TRUE") then
			szProgram = TARGETDIR ^ "Documentation" ^ "PGPAdministratorsGuide.pdf";
			LongPathToQuote (szProgram,TRUE);
			szAppPath = TARGETDIR ^ "Documentation";
			AddFolderIcon
			(FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "Documentation",
			APP_NAME +" Administrator's Guide",szProgram,szAppPath
			,"",0,"",REPLACE);
		endif;

		if (INCLUDEINSTALLGUIDE = "TRUE") then
			szProgram = TARGETDIR ^ "Documentation" ^ "PGPInstallGuide.pdf";
			LongPathToQuote (szProgram,TRUE);
			szAppPath = TARGETDIR ^ "Documentation";
			AddFolderIcon
			(FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "Documentation",
			APP_NAME +" Install Guide",szProgram,szAppPath
			,"",0,"",REPLACE);
		endif;

		szProgram = TARGETDIR ^ "Documentation" ^ "IntroToCrypto.pdf";
		LongPathToQuote (szProgram,TRUE);
		szAppPath = TARGETDIR ^ "Documentation";
		AddFolderIcon
		(FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "Documentation",
		" Intro To Crypto",szProgram,szAppPath
		,"",0,"",REPLACE);

		szProgram = TARGETDIR ^ "Documentation" ^ "Readme.txt";
		LongPathToQuote (szProgram,TRUE);
		szAppPath = TARGETDIR ^ "Documentation";
		AddFolderIcon
		(FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "Documentation",
		" ReadMe",szProgram,szAppPath
		,"",0,"",REPLACE);

	endif;

	if (ComponentIsItemSelected(szComponents,"Unconfigured " + APP_NAME +" Client" +
	" Install") = TRUE) then
		szProgram = TARGETDIR ^ "PGPadmin.exe";
		LongPathToQuote (szProgram,TRUE);
		szAppPath = TARGETDIR;
		AddFolderIcon
		(FOLDER_STARTMENU ^ "Programs" ^ "P G P",
		"PGPadmin",szProgram,szAppPath ,"",0,"",REPLACE);
	endif;

	if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Program Files (Required for PGP 6.x)") = TRUE) then	

		szProgram = TARGETDIR ^ "pgpkeys.exe";
		LongPathToQuote (szProgram,TRUE);
		szAppPath = TARGETDIR;
		AddFolderIcon
		(FOLDER_STARTMENU ^ "Programs" ^ "P G P",
		"PGPkeys",szProgram,szAppPath ,"",0,"",REPLACE);

		szProgram = TARGETDIR ^ "PGPtray.exe";
		LongPathToQuote (szProgram,TRUE);
		szAppPath = TARGETDIR;
		AddFolderIcon
		(FOLDER_STARTMENU ^ "Programs" ^ "P G P",
		"PGPtray",szProgram,szAppPath,"",0,"",REPLACE);
		
		szProgram = TARGETDIR ^ "PGPtools.exe";
		LongPathToQuote (szProgram,TRUE);
		szAppPath = TARGETDIR;
		AddFolderIcon
		(FOLDER_STARTMENU ^ "Programs" ^ "P G P",
		"PGPtools",szProgram,szAppPath,"",0,"",REPLACE);

		szProgram = TARGETDIR ^ "uninstall.exe";
		LongPathToQuote (szProgram,TRUE);
		szAppPath = TARGETDIR;
		AddFolderIcon
		(FOLDER_STARTMENU ^ "Programs" ^ "P G P",
		"Uninstall "+ APP_NAME,szProgram,szAppPath,"",0,"",REPLACE);

		/**********************
		szProgram = TARGETDIR ^ "Documentation" ^ "whatsnew.doc";
		LongPathToQuote (szProgram,TRUE);
		szAppPath = TARGETDIR ^ "Documentation";
		AddFolderIcon
		(FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "Documentation",
		"What's New in "+ APP_NAME,szProgram,szAppPath,"",0,"",REPLACE);

        szProgram = TARGETDIR ^ "Documentation" ^ "6.0.2 Change History.txt";
		LongPathToQuote (szProgram,TRUE);
		szAppPath = TARGETDIR ^ "Documentation";
		AddFolderIcon
		(FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "Documentation",
		"6.0.2 Change History", szProgram, szAppPath, "", 0, "", REPLACE);
        **********************/
	endif;

	if (INCLUDEPGPDISK = "TRUE") then
		if (ComponentIsItemSelected
			(szComponents,"PGPdisk for Windows") = TRUE) then
			szProgram = TARGETDIR ^ "PGPdisk.exe";
			LongPathToQuote (szProgram,TRUE);
			szAppPath = TARGETDIR;
			AddFolderIcon
			(FOLDER_STARTMENU ^ "Programs" ^ "P G P",
			"PGPdisk",szProgram,szAppPath,"",0,"",REPLACE);
		endif;
	endif;

	SetStatusWindow
	(45,"Updating the Registry...");

	nvType = REGDB_STRING;
	RegDBSetDefaultRoot(HKEY_CURRENT_USER);

	if (RegDBGetKeyValueEx("Software\\PGP\\PNDetect\\Modules","PGP Plugin"
	,nvType,szEudoraPath,nvPathLen) = 0) then
		if (bEasyInstall = FALSE) then
			// ask if they want to remove the 4.5 plugin
			SetDialogTitle
			(DLG_ASK_YESNO,"Disable the PGPmail 4.5 Eudora/Netscape Plugin?");
			if (AskYesNo
			("Do you wish to disable the PGPmail 4.5 Eudora/Netscape Plugin?"
			,YES) = YES) then
				RegDBDeleteValue
				("Software\\PGP\\PNDetect\\Modules","PGP Plugin");
			endif;
		else
			RegDBDeleteValue
			("Software\\PGP\\PNDetect\\Modules","PGP Plugin");
		endif;
	endif;

	svDir = TARGETDIR;
	LongPathToShortPath (svDir);


	SetStatusWindow
	(55,"Updating the Registry...");

if (INCLUDEPGPDISK = "TRUE") then
    // Set PGPdisk to automatically run at start up and convert old volumes
    if (nFND_PGPDISK = TRUE) then
		if (ComponentIsItemSelected (szComponents,	"PGPdisk for Windows") = TRUE) then
            RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

            szKey   = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce";
            szName  = "PGPdisk";
            nType   = REGDB_STRING;
            szValue = TARGETDIR ^ "PGPdisk.exe globalconvert";
            RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);
        endif;
    endif;

	if (ComponentIsItemSelected
		(szComponents,"PGPdisk for Windows") = TRUE) then
		//*******************************************	
		//SETTING WINDOWS 95 SPECIFIC REGISTRY VALUES 
		//****HKEY_LOCAL_MACHINE****
		//*******************************************
		if (IS_NT = FALSE) then
			
			RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

			for IndexNumber = 1 to 26
				switch (IndexNumber)
					case 1:
						KeyStub = "ROOT&PGPDISK&000000";
					case 2:
						KeyStub = "ROOT&PGPDISK&000010";
					case 3:
						KeyStub = "ROOT&PGPDISK&000020";
					case 4:
						KeyStub = "ROOT&PGPDISK&000030";
					case 5:
						KeyStub = "ROOT&PGPDISK&000040";
					case 6:
						KeyStub = "ROOT&PGPDISK&000050";
					case 7:
						KeyStub = "ROOT&PGPDISK&000060";
					case 8:
						KeyStub = "ROOT&PGPDISK&000070";
					case 9:
						KeyStub = "ROOT&PGPDISK&000080";
					case 10:
						KeyStub = "ROOT&PGPDISK&000090";   
					case 11:
						KeyStub = "ROOT&PGPDISK&0000:0";
					case 12:
						KeyStub = "ROOT&PGPDISK&0000;0";
					case 13:
						KeyStub = "ROOT&PGPDISK&0000<0";
					case 14:
						KeyStub = "ROOT&PGPDISK&0000=0";
					case 15:
						KeyStub = "ROOT&PGPDISK&0000>0";
					case 16:
						KeyStub = "ROOT&PGPDISK&0000?0";
					case 17:
						KeyStub = "ROOT&PGPDISK&0000@0";
					case 18:
						KeyStub = "ROOT&PGPDISK&0000A0";
					case 19:
						KeyStub = "ROOT&PGPDISK&0000B0";
					case 20:
						KeyStub = "ROOT&PGPDISK&0000C0";
					case 21:
						KeyStub = "ROOT&PGPDISK&0000D0";
					case 22:
						KeyStub = "ROOT&PGPDISK&0000E0";
					case 23:
						KeyStub = "ROOT&PGPDISK&0000F0";
					case 24:
						KeyStub = "ROOT&PGPDISK&0000G0";
					case 25:
						KeyStub = "ROOT&PGPDISK&0000H0";
					case 26:
						KeyStub = "ROOT&PGPDISK&0000I0";
				endswitch;

				szKey = "Enum\\ESDI\\PGP_____PGPDISK_________0" ^ KeyStub;
			
				szName = "Capabilities";
				nType = REGDB_BINARY;
				szValue = "";
				for Index = 0 to 3
					AsciNum = 0;
					if (Index = 0) then
						AsciNum = 1;
					endif;
					if (Index = 1) then
						AsciNum = 14;
					endif;
					SetByte (szValue, Index, AsciNum);
				endfor;
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, 4);

				szName = "ConfigFlags";
				nType = REGDB_BINARY;
				szValue = "";
				for Index = 0 to 3
					AsciNum = 0;
					SetByte (szValue, Index, AsciNum);
				endfor;
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, 4);

				szName = "DeviceType";
				nType = REGDB_BINARY;
				szValue = "";
				Index = 0;
				AsciNum = 0;
				SetByte (szValue, Index, AsciNum);
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, 4);

				szName = "RevisionLevel";
				nType = REGDB_STRING;
				szValue = "0001";
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

				szName = "ProductId";
				nType = REGDB_STRING;
				szValue = "PGPdisk         ";
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

				szName = "Manufacturer";
				nType = REGDB_STRING;
				szValue = "PGP     ";
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

				szName = "CurrentDriveLetterAssignment";
				nType = REGDB_STRING;
				szValue = "";
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);
			
				szName = "HardwareID";
				nType = REGDB_STRING;
				szValue = "PGP_____PGPDISK_________0,GenDisk,ESDI\\PGP_____PGPDISK_________0";
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

				szName = "Class";
				nType = REGDB_STRING;
				szValue = "DiskDrive";
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

				szName = "Driver";
				nType = REGDB_STRING;
				szValue = "DiskDrive\\0000";
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

				szName = "Mfg";
				nType = REGDB_STRING;
				szValue = "(Standard disk drives)";
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

				szName = "DeviceDesc";
				nType = REGDB_STRING;
				szValue = "PGP PGPdisk         ";
				RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);
			endfor;
		
			szKey = "Enum\\Root\\PGPdisk\\0000";

			szName = "Class";
			nType = REGDB_STRING;
			szValue = "PGPdisk";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "ConfigFlags";
			nType = REGDB_BINARY;
			szValue = "";
			for Index = 0 to 3
				AsciNum = 0;
				if (Index = 0) then
					AsciNum = 4;
				endif;
				SetByte (szValue, Index, AsciNum);
			endfor;
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, 4);

			szName = "DeviceDesc";
			nType = REGDB_STRING;
			szValue = "PGPdisk Volume Driver";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "Driver";
			nType = REGDB_STRING;
			szValue = "PGPdisk\\0000";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "ForcedConfig";
			nType = REGDB_BINARY;
			szValue = "";
			for Index = 0 to 11
				AsciNum = 0;
				if (Index = 1) then
					AsciNum = 4;
				endif;
				SetByte (szValue, Index, AsciNum);
			endfor;
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, 12);

			szName = "HardwareID";
			nType = REGDB_STRING;
			szValue = "*PGPdisk";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "Mfg";
			nType = REGDB_STRING;
			szValue = "Network Associates, Inc.";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);
		
			szKey = "Enum\\Root\\PGPdisk\\0000\\LogConfig";

			szName = "0";
			nType = REGDB_BINARY;
			szValue = "";
			for Index = 0 to 11
				AsciNum = 0;
				if (Index = 1) then
					AsciNum = 4;
				endif;
				if (Index = 5) then
					AsciNum = 224;
				endif;
				SetByte (szValue, Index, AsciNum);
			endfor;
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, 12);
		
			szKey = "System\\CurrentControlSet\\Services\\Class\\PGPdisk";

			szName = "";
			nType = REGDB_STRING;
			szValue = "PGPdisk Volume Driver";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "Icon";
			nType = REGDB_STRING;
			szValue = "-9";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);
		

			szKey = "System\\CurrentControlSet\\Services\\Class\\PGPdisk\\0000";

			szName = "DevLoader";
			nType = REGDB_STRING;
			szValue = "*IOS";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "DriverDesc";
			nType = REGDB_STRING;
			szValue = "PGPdisk Volume Driver";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "PortDriver";
			nType = REGDB_STRING;
			szValue = "PGPDISK.pdr";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		//*************************************
		else //IS_NT SO SET NT SPECIFIC ENTRIES
		//*************************************
			//****HKEY_LOCAL_MACHINE****
			RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
			szKey = "System\\CurrentControlSet\\Services\\PGPdisk";
			
			szName = "Type";
			nType = REGDB_NUMBER;
			szValue = "1";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "Start";
			nType = REGDB_NUMBER;
			szValue = "2";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "ErrorControl";
			nType = REGDB_NUMBER;
			szValue = "1";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "Group";
			nType = REGDB_STRING;
			szValue = "Extended Base";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szKey = "System\\CurrentControlSet\\Services\\EventLog\\System\\PGPdisk";

			szName = "EventMessageFile";
			nType = REGDB_STRING;
			szValue = WINSYSDIR ^ "Drivers" ^ "PGPdisk.sys";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

			szName = "TypesSupprted";
			nType = REGDB_NUMBER;
			szValue = "7";
			RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);
		endif;

		//******************************************************
		//SETTING WINDOWS 95 / WINDOWS NT COMMON REGISTRY VALUES 
		//****HKEY_CLASSES_ROOT****
		//******************************************************
		RegDBSetDefaultRoot (HKEY_CLASSES_ROOT);

		szKey = ".pgd";

		szName = "";
		nType = REGDB_STRING;
		szValue = "PGPdisk Volume";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szKey = ".pgd\\ShellNew";

		szName = "Command";
		nType = REGDB_STRING;
		LongPathToShortPath (svTarget);
		szValue = svTarget ^ "PGPDISK.EXE create \"%2\"";

		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);	

		szKey = "PGPdisk Volume";

		szName = "";
		nType = REGDB_STRING;
		szValue = "PGPdisk Volume";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);	

		szKey = "PGPdisk Volume\\DefaultIcon";

		szName = "";
		nType = REGDB_STRING;
		szValue = svTarget ^ "PGPDISK.EXE,5";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szKey = "PGPdisk Volume\\shell\\open\\command";

		szName = "";
		nType = REGDB_STRING;
		szValue = svTarget ^ "PGPDISK.EXE open \"%1\"";
		//LongPathToShortPath (szValue);
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szKey = "CLSID\\{F8B14440-3785-11D1-B363-5C6F08C10000}";

		szName = "";
		nType = REGDB_STRING;
		szValue = "PGPdisk Shell Extension";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szKey = "CLSID\\{F8B14440-3785-11D1-B363-5C6F08C10000}\\InProcServer32";

		szName = "";
		nType = REGDB_STRING;
		szValue = "PGPdskSE.dll";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "ThreadingModel";
		nType = REGDB_STRING;
		szValue = "Apartment";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szKey = "PGPdisk Volume\\shellex\\ContextMenuHandlers\\PGPdisk Shell Extension";

		szName = "";
		nType = REGDB_STRING;
		szValue = "{F8B14440-3785-11D1-B363-5C6F08C10000}";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		//szKey = "Drive\\shellex\\ContextMenuHandlers";

		//szName = "";
		//nType = REGDB_STRING;
		//szValue = "PGPdisk Shell Extension";
		//RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szKey = "Drive\\shellex\\ContextMenuHandlers\\PGPdisk Shell Extension";

		szName = "";
		nType = REGDB_STRING;
		szValue = "{F8B14440-3785-11D1-B363-5C6F08C10000}";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		//****HKEY_LOCAL_MACHINE****
		RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

		szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved";

		szName = "{F8B14440-3785-11D1-B363-5C6F08C10000}";
		nType = REGDB_STRING;
		szValue = "PGPdisk Shell Extension";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		//****HKEY_CURRENT_USER****
		RegDBSetDefaultRoot (HKEY_CURRENT_USER);

		szKey = "Software\\Network Associates\\PGPdisk";

		szName = "LastOpenDir";
		nType = REGDB_STRING;
		szValue = "c:\\";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "LastSaveDir";
		nType = REGDB_STRING;
		szValue = "c:\\";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "AllowFAT32";
		nType = REGDB_NUMBER;
		szValue = "1";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "AutoUnmount";
		nType = REGDB_NUMBER;
		szValue = "1";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "HotKeyCode";
		nType = REGDB_NUMBER;
		szValue = "00000379";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "HotKeyEnabled";
		nType = REGDB_NUMBER;
		szValue = "0";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "UnmountOnSleep";
		nType = REGDB_NUMBER;
		szValue = "1";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "UnmountTimeout";
		nType = REGDB_NUMBER;
		szValue = "15";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "LastCreateSize";
		nType = REGDB_NUMBER;
		szValue = "00102400";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "LastDateSplashed";
		nType = REGDB_NUMBER;
		szValue = "00";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName = "WasMainDialogSmall";
		nType = REGDB_NUMBER;
		szValue = "00";
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

	//	szName = "LastCreateInMb";
	//	nType = REGDB_NUMBER;
	//	szValue = "1";
	//	RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

	//	szName = "LastCreateName";
	//	nType = REGDB_STRING;
	//	szValue = "Untitled.pgd";
	//	RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

	//	szKey = "SOFTWARE\\PGP\\PGPdisk";

	//	szName = "AppPath";
	//	nType = REGDB_STRING;
	//	szValue = svTarget;
	//	RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		//****HKEY_LOCAL_MACHINE****
		RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

		szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGPdisk.exe";
		szName = "";
		nType = REGDB_STRING;
		szValue = svTarget ^ "PGPDISK.EXE";
		LongPathToShortPath (szValue);
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

		szName  = "Path";
		nType   = REGDB_STRING;
		szValue = svTarget;
		LongPathToShortPath (szValue);
		RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);
	endif;
endif;


    /************************************************************************************************
     *
     *
     *  Write to the registry the components that the user selected to install with this version
     *
     *
     ************************************************************************************************/

    RegDBSetDefaultRoot (HKEY_CURRENT_USER);

    szKey   = "SOFTWARE\\Network Associates" ^ REGAPP_NAME ^ "Components";
    
    RegDBCreateKeyEx (szKey, "");

    if (ComponentIsItemSelected	(szComponents, APP_NAME +" Program Files (Required for PGP 6.x)") = TRUE) then
        szValue = "1";
    else
        szValue = "0";
    endif;
    szName  = "PGP Core";
    nType   = REGDB_NUMBER;
    RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

	if (ComponentIsItemSelected	(szComponents, APP_NAME +" Eudora Plugin") = TRUE) then
        szValue = "1";
    else
        szValue = "0";
    endif;
    szName  = "Eudora Plugin";
    nType   = REGDB_NUMBER;
    RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

	if (ComponentIsItemSelected	(szComponents, APP_NAME +" Microsoft Exchange/Outlook Plugin") = TRUE) then
        szValue = "1";
    else
        szValue = "0";
    endif;
    szName  = "Microsoft Exchange/Outlook Plugin";
    nType   = REGDB_NUMBER;
    RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

    if (ComponentIsItemSelected	(szComponents, APP_NAME +" Microsoft Outlook Express Plugin") = TRUE) then
        szValue = "1";
    else
        szValue = "0";
    endif;
    szName  = "Microsoft Outlook Express Plugin";
    nType   = REGDB_NUMBER;
    RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);

    if (ComponentIsItemSelected (szComponents, "PGPdisk for Windows") = TRUE) then
        szValue = "1";
    else
        szValue = "0";
    endif;
    szName  = "PGPdisk for Windows";
    nType   = REGDB_NUMBER;
    RegDBSetKeyValueEx (szKey, szName, nType, szValue, -1);



// **** ROOT ****

	RegDBSetDefaultRoot(HKEY_CLASSES_ROOT);

	RegDBSetKeyValueEx
	("\\.asc" ,"",REGDB_STRING,"PGP Armored Encrypted File",-1);
	RegDBSetKeyValueEx
	("\\.aexpk" ,"",REGDB_STRING,"PGP Armored Extracted Public Key",-1);
	RegDBSetKeyValueEx
	("\\.bexpk" ,"",REGDB_STRING,"PGP Binary Extracted Public Key",-1);
	RegDBSetKeyValueEx
	("\\.pgp" ,"",REGDB_STRING,"PGP Encrypted File",-1);
	RegDBSetKeyValueEx
	("\\.prvkr" ,"",REGDB_STRING,"PGP Private Keyring",-1);
	RegDBSetKeyValueEx
	("\\.pubkr" ,"",REGDB_STRING,"PGP Public Keyring",-1);
	RegDBSetKeyValueEx
	("\\.sig" ,"",REGDB_STRING,"PGP Detached Signature File",-1);
	RegDBSetKeyValueEx
	("\\.pkr" ,"",REGDB_STRING,"PGP Public Keyring",-1);
	RegDBSetKeyValueEx
	("\\.skr" ,"",REGDB_STRING,"PGP Private Keyring",-1);
	RegDBSetKeyValueEx
	("\\.shf" ,"",REGDB_STRING,"PGP Share",-1);
	RegDBSetKeyValueEx
	("\\.rnd" ,"",REGDB_STRING,"PGP Random Seed",-1);
	RegDBSetKeyValueEx
	("\\.pgr" ,"",REGDB_STRING,"PGP Groups",-1);

	szLocalDB = "\\*\\shellex\\ContextMenuHandlers\\" +
	"{969223c0-26aa-11d0-90ee-444553540000}";

	RegDBSetKeyValueEx
	(szLocalDB ,"",REGDB_STRING,"",-1);

	szLocalDB = "\\Folder\\shellex\\ContextMenuHandlers\\" +
				"{969223c0-26aa-11d0-90ee-444553540000}";

	RegDBSetKeyValueEx
	(szLocalDB ,"",REGDB_STRING,"",-1);
	szLocalDB = "\\CLSID\\{969223c0-26aa-11d0-90ee-444553540000}";
	RegDBSetKeyValueEx
	(szLocalDB ,"",REGDB_STRING,"PGP Shell Extension",-1);
	RegDBSetKeyValueEx
	(szLocalDB ^ "InProcServer32","" ,
	REGDB_STRING,"pgp60mn.dll",-1);
	RegDBSetKeyValueEx
	(szLocalDB ^"InProcServer32","ThreadingModel" ,
	REGDB_STRING,"Apartment",-1);

//FILE ASSOCIATED ICONS
	szLocalDB = "\\PGP Encrypted File";
	RegDBSetKeyValueEx
	(szLocalDB,"",
	REGDB_STRING,"PGP Encrypted File",-1);
	RegDBSetKeyValueEx
	("\\PGP Encrypted File" ^ "DefaultIcon","",
	REGDB_STRING,"pgp60sc.dll,-144",-1);
	RegDBSetKeyValueEx
	("\\PGP Armored Encrypted File","",
    REGDB_STRING,"PGP Armored Encrypted File",-1);
	RegDBSetKeyValueEx
	("\\PGP Armored Encrypted File" ^ "DefaultIcon" ,"",
	REGDB_STRING,"pgp60sc.dll,-143",-1);
	RegDBSetKeyValueEx
	("\\PGP Armored Extracted Public Key","",
	REGDB_STRING,"PGP Armored Extracted Public Key",-1);
	RegDBSetKeyValueEx
	("\\PGP Armored Extracted Public Key" ^ "DefaultIcon" ,"",
	REGDB_STRING,"pgp60sc.dll,-147",-1);
	RegDBSetKeyValueEx
	("\\PGP Binary Extracted Public Key","",
	REGDB_STRING,"PGP Binary Extracted Public Key",-1);
	RegDBSetKeyValueEx
	("\\PGP Binary Extracted Public Key" ^ "DefaultIcon" ,"",
	REGDB_STRING,"pgp60sc.dll,-147",-1);
	RegDBSetKeyValueEx
	("\\PGP Detached Signature File","",
	REGDB_STRING,"PGP Detached Signature File",-1);
	RegDBSetKeyValueEx
	("\\PGP Detached Signature File" ^ "DefaultIcon" ,"",
	REGDB_STRING,"pgp60sc.dll,-142",-1);
	RegDBSetKeyValueEx
	("\\PGP Private Keyring","",
	REGDB_STRING,"PGP Private Keyring",-1);
	RegDBSetKeyValueEx
	("\\PGP Private Keyring" ^ "DefaultIcon" ,"",
	REGDB_STRING,"pgp60sc.dll,-145",-1);
	RegDBSetKeyValueEx
	("\\PGP Public Keyring","",REGDB_STRING,"PGP Public Keyring",-1);
	RegDBSetKeyValueEx
	("\\PGP Public Keyring" ^ "DefaultIcon" ,"",
	REGDB_STRING,"pgp60sc.dll,-146",-1);
	RegDBSetKeyValueEx
	("\\PGP Share","",REGDB_STRING,"PGP Share",-1);
	RegDBSetKeyValueEx
	("\\PGP Share" ^ "DefaultIcon" ,"",
	REGDB_STRING,"pgp60sc.dll,-107",-1);
	RegDBSetKeyValueEx
	("\\Randseed File","",REGDB_STRING,"Randseed File",-1);
	RegDBSetKeyValueEx
	("\\Randseed File" ^ "DefaultIcon" ,"",
	REGDB_STRING,"pgp60sc.dll,-148",-1);
	RegDBSetKeyValueEx
	("\\PGP Groups","",REGDB_STRING,"PGP Groups",-1);
	RegDBSetKeyValueEx
	("\\PGP Groups" ^ "DefaultIcon" ,"",
	REGDB_STRING,"pgp60sc.dll,-149",-1);

	SetStatusWindow
	(65,"Updating the Registry...");

// **** CURRENT USER ****

	RegDBSetDefaultRoot(HKEY_CURRENT_USER);
	szLocalDB = "\\Software" ^ COMPANY_FOLDER_NAME;
	LongPathToShortPath (svTarget);
	// add "where is keys" key value
	RegDBCreateKeyEx
	( szLocalDB ^ REGAPP_NAME ^ "PGPkeys","");
	RegDBSetKeyValueEx
	(szLocalDB ^ REGAPP_NAME ^ "PGPkeys","ExePath",REGDB_STRING,
	svTarget  ^  "PGPkeys.exe" ,-1);

	if (ISADMIN = "TRUE") then
		RegDBSetKeyValueEx
		(szLocalDB ^ REGAPP_NAME ^ "PGPkeys","AdminPath",REGDB_STRING,
		svTarget ,-1);
	endif;

	if (ComponentIsItemSelected
	(szComponents,APP_NAME +" Eudora Plugin") = TRUE) then
		LongPathFromShortPath (EudoraPluginPath);
		// add "where is EudoraPlugin" key value
		RegDBCreateKeyEx
		( szLocalDB ^ REGAPP_NAME ^ "EudoraPlugin","");
		RegDBSetKeyValueEx
		(szLocalDB ^ REGAPP_NAME ^ "EudoraPlugin","PluginPath",REGDB_STRING,
		EudoraPluginPath,-1);
	endif;

	if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Microsoft Outlook Express Plugin") = TRUE) then
		RegDBSetDefaultRoot(HKEY_CURRENT_USER);
		RegDBSetKeyValueEx (szLocalDB ^ REGAPP_NAME ^ "OE",
				 "OutlookExpress", REGDB_STRING, szOEdir, -1);
	endif;

	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

	RegDBSetKeyValueEx
	("\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\" +
	"Approved","{969223c0-26aa-11d0-90ee-444553540000}"
	,REGDB_STRING,"Shell Extension",-1);


if (IS_QUALCOMM_BUILD = "FALSE") then
	if (ComponentIsItemSelected
		(szComponents,APP_NAME +" Microsoft Exchange/Outlook Plugin") = TRUE) then
		RegDBCreateKeyEx
		( "SOFTWARE\\Microsoft\\Exchange\\Client\\Extensions\\PGP Plugin","");
		RegDBSetKeyValueEx
			("SOFTWARE\\Microsoft\\Exchange\\Client\\Extensions","PGP Plugin"
			,REGDB_STRING,"4.0;pgpExch.dll;1;01000111111100;1001110" ,-1);
	endif;
endif;

	SetStatusWindow
	(75,"Updating the Registry...");

//**** Left Click and Launch ****

	RegDBSetDefaultRoot(HKEY_CLASSES_ROOT);

	RegDBCreateKeyEx
	("\\PGP Encrypted File" ^ "shell\\open\\command","");
	RegDBSetKeyValueEx
	("\\PGP Encrypted File" ^ "shell\\open\\command" ,"",
	REGDB_STRING,svDir ^ "pgptools.exe %1",-1);
	RegDBCreateKeyEx
	("\\PGP Armored Encrypted File" ^ "shell\\open\\command","");
	RegDBSetKeyValueEx
	("\\PGP Armored Encrypted File" ^ "shell\\open\\command" ,"",
	REGDB_STRING,svDir ^ "pgptools.exe %1",-1);
	RegDBCreateKeyEx
	("\\PGP Armored Extracted Public Key" ^ "shell\\open\\command","");
	RegDBSetKeyValueEx
	("\\PGP Armored Extracted Public Key" ^ "shell\\open\\command" ,"",
	REGDB_STRING,svDir ^ "pgpkeys.exe %1",-1);
	RegDBCreateKeyEx
	("\\PGP Binary Extracted Public Key" ^ "shell\\open\\command","");
	RegDBSetKeyValueEx
	("\\PGP Binary Extracted Public Key" ^ "shell\\open\\command" ,"",
	REGDB_STRING,svDir ^ "pgpkeys.exe %1",-1);
	RegDBCreateKeyEx
	("\\PGP Private Keyring" ^ "shell\\open\\command","");
	RegDBSetKeyValueEx
	("\\PGP Private Keyring" ^ "shell\\open\\command" ,"",
	REGDB_STRING,svDir ^ "pgpkeys.exe %1",-1);
	RegDBCreateKeyEx
	("\\PGP Public Keyring" ^ "shell\\open\\command","");
	RegDBSetKeyValueEx
	("\\PGP Public Keyring" ^ "shell\\open\\command" ,"",
	REGDB_STRING,svDir ^ "pgpkeys.exe %1",-1);
	RegDBCreateKeyEx
	("\\PGP Detached Signature File" ^ "shell\\open\\command","");
	RegDBSetKeyValueEx
	("\\PGP Detached Signature File" ^ "shell\\open\\command" ,"",
	REGDB_STRING,svDir ^ "pgptools.exe %1",-1);
	RegDBCreateKeyEx
	("\\PGP Private Keyring" ^ "shell\\open\\command","");
	RegDBSetKeyValueEx
	("\\PGP Private Keyring" ^ "shell\\open\\command" ,"",
	REGDB_STRING,svDir ^ "pgpkeys.exe %1",-1);
	RegDBCreateKeyEx
	("\\PGP Public Keyring" ^ "shell\\open\\command","");
	RegDBSetKeyValueEx
	("\\PGP Public Keyring" ^ "shell\\open\\command" ,"",
	REGDB_STRING,svDir ^ "pgpkeys.exe %1",-1);
	RegDBCreateKeyEx
	("\\PGP Share" ^ "shell\\open\\command","");
	RegDBSetKeyValueEx
	("\\PGP Share" ^ "shell\\open\\command" ,"",
	REGDB_STRING,svDir ^ "pgptools.exe %1",-1);

	Delay(1);

	SetStatusWindow
	(100,"Installation complete,Thank you for installing " + APP_NAME);
	Disable(STATUSDLG);
    // Remove the bitmap with ID of 14.
    PlaceBitmap("",12,0,0,REMOVE);


	//Remove any PGPmail dir from startup 
	szProgram = TARGETDIR ^ "pgp" ^ "PgpMail.exe";
	LongPathToQuote (szProgram,TRUE);
	DeleteFolderIcon(FOLDER_STARTUP,"pgpmail");


	
	//Delete the .GID file so help can be updated
	DeleteFile ("pgp50.gid");


	// Announce setup complete,and offer to read README file
	// also delete registry entries left behind by PGPmail 4.5
	// this is done at the end in case of install cancel

	//This is the call to comdlg to set the user info

	nResult = UseDLL(WINSYSDIR + "pgp60cl.dll");
	Delay (1);

	if ((ISADMIN != "FALSE") || (PGP_FREEWARE = "TRUE")) then
		nResult = PGPclSetUserInfo (szUser,szUserCompany,"");
	else
		if (szUserCompany != "") then
			nResult = PGPclSetUserInfo ("",szUserCompany,"");
		endif;
	endif;

	Delay (1);

	//Set Default keyring info.
	szPubRingPath	= svTarget ^ "PGP Keyrings\\pubring.pkr";
	szPrivRingPath	= svTarget ^ "PGP Keyrings\\secring.skr";
	szRandSeedPath	= WINDIR ^ "randseed.rnd";

	//PGPclSetSDKFilePaths(szPubRingPath, szPrivRingPath, szRandSeedPath, 1);

	//Set Keyring Locations if needed
	svCopyKeys = "NO";
	if (bEasyInstall = FALSE) then
		SetDialogTitle
		(DLG_ASK_YESNO,"Existing Keyrings?");
		if (AskYesNo
			("Do you have existing keyrings you wish to use?",YES) = YES) then
			//get main window handle
			hwndIS3 = GetWindowHandle(HWND_INSTALL);
		//Get new Public ring
			szFileFilter = "Public Keyring Files (*.pkr ; pubring.* ; *.pubkr),*.pkr;pubring.pgp;" +
		              "*.pubkr;,All Files (*.*),*.*";
	 
			// Give the file browse dialog a custom title,if you wish.
			// Leave szDlgTitle null ("") to accept the default title ("Open").
			szDlgTitle = "Browse to your Public Keyring";

			// Pass in a default file extension.  Do NOT include the period.
			// If you pass a null string,no extension is used.
			szExt = "pgp";
 
			// Call the FileBrowse function.
			svSelectedFile = TARGETDIR ^ "*.pkr";
	
			nResult = FileBrowse(hwndIS3,szFileFilter,svSelectedFile,szDlgTitle,szExt);

			if (!nResult) then
				// Do something with the selected file.
				szPubRingPath = svSelectedFile;
				bPubKeysFound = TRUE;
			else
			// Handle the lack of selection,which could be due to a dialog
			// box-related error,chosing the Cancel button,or closing
			// the dialog with the Close button.
			UseDefaultPubKey = "TRUE";
			bPubKeysFound = FALSE;
			endif;
		//Get new Private ring
			if (bPubKeysFound = TRUE) then
				szFileFilter = "Private Keyring Files (*.skr  ; *.prvkr ; secring.*)" +
						",*.skr;*.prvkr;secring.pgp;,All Files (*.*),*.*";
		
				// Give the file browse dialog a custom title,if you wish.
				// Leave szDlgTitle null ("") to accept the default title ("Open").
				szDlgTitle = "Browse to your Private Keyring";

				// Call the FileBrowse function.
				nResult = FileBrowse(hwndIS3,szFileFilter,svSelectedFileb,szDlgTitle,szExt);

				if (!nResult) then
					// Do something with the selected file.
					szPrivRingPath = svSelectedFileb;
					bPrvKeysFound = TRUE;
				else
					// Handle the lack of selection,which could be due to a dialog
					// box-related error,chosing the Cancel button,or closing
					// the dialog with the Close button.
					bPrvKeysFound = FALSE;
				endif;
			endif;

	//PUBLIC KEYRING
			if ((bPrvKeysFound = TRUE) &&
				(bPubKeysFound = TRUE))   then //only show second dialog if user did select a private key
				VarSave (SRCTARGETDIR);
				ParsePath (svReturnString, szPubRingPath, PATH);
				TARGETDIR	= svTarget ^ "PGP Keyrings";
				SRCDIR		= svReturnString;
				ParsePath (svReturnString, szPubRingPath, FILENAME);
				ParsePath (svPubLoc, szPubRingPath, PATH);
				szLongTarget = svTarget;
				LongPathFromShortPath (szLongTarget);
				if (svPubLoc != szLongTarget^ "\\PGP Keyrings\\") then
					SetDialogTitle
					(DLG_ASK_YESNO,"Copy keyrings?");
					if (AskYesNo
					   ("Do you want setup to copy these keyrings to your" +
					   " PGP Keyrings directory?",YES) = YES) then
						svCopyKeys = "YES";
						CopyFile (svReturnString, "pubring.pkr");
					endif;
				endif;
			
				VarRestore (SRCTARGETDIR);
	//PRIVATE KEYRING
				VarSave (SRCTARGETDIR);
				ParsePath (svReturnString,  szPrivRingPath, PATH);
				TARGETDIR	= svTarget ^ "PGP Keyrings";
				SRCDIR		= svReturnString;
				ParsePath (svReturnString,  szPrivRingPath, FILENAME);
				ParsePath (svPrivLoc, szPrivRingPath, PATH);
				if (svPrivLoc != szLongTarget ^ "\\PGP Keyrings\\") then
					if (svCopyKeys = "YES") then
						CopyFile (svReturnString, "secring.skr");
						SdShowMsg ("Your private and public keyrings have been copied to your" +
						" PGP Keyrings directory.", TRUE);
						Delay (5);
						SdShowMsg ("Your private and public keyrings have been copied to your" +
						" PGP Keyrings directory.", FALSE);
					endif;
				endif;
				VarRestore (SRCTARGETDIR);

			else
				VarSave (SRCTARGETDIR);
				TARGETDIR	= svTarget ^ "PGP Keyrings";
				SRCDIR		= svTarget ^ "PGP Keyrings";
				//They said they dont have existing key so we need to add the default pubring
				//we remove any existing private rings. bug#2688 fix
				RenameFile ("secring.skr", "secring.old" );
				RenameFile ("pubring.pkr", "pubring.old" );
				DeleteFile ("secring.skr");
				DeleteFile ("pubring.pkr");
				SRCDIR		= SUPPORTDIR;
				CopyFile ("pubring.pkr", "pubring.pkr");
				VarRestore (SRCTARGETDIR);
			endif;
		//if they dont have existing keys use the default keyring
		else
			VarSave (SRCTARGETDIR);
			TARGETDIR	= svTarget ^ "PGP Keyrings";
			SRCDIR		= svTarget ^ "PGP Keyrings";
			//They said they dont have existing key so we need to add the default pubring
			//we remove any existing private rings. bug#2688 fix
			RenameFile ("secring.skr", "secring.old" );
			RenameFile ("pubring.pkr", "pubring.old" );
			DeleteFile ("secring.skr");
			DeleteFile ("pubring.pkr");
			SRCDIR		= SUPPORTDIR;
			CopyFile ("pubring.pkr", "pubring.pkr");
			VarRestore (SRCTARGETDIR);
		endif;
	else
		//fastinstall
		VarSave (SRCTARGETDIR);
		TARGETDIR	= svTarget ^ "PGP Keyrings";
		SRCDIR		= svTarget ^ "PGP Keyrings";
		//They said they dont have existing key so we need to add the default pubring
		//we remove any existing private rings. bug#2688 fix
		RenameFile ("secring.skr", "secring.old" );
		RenameFile ("pubring.pkr", "pubring.old" );
		DeleteFile ("secring.skr");
		DeleteFile ("pubring.pkr");
		SRCDIR		= SUPPORTDIR;
		CopyFile ("pubring.pkr", "pubring.pkr");
		VarRestore (SRCTARGETDIR);
	endif;

	if (svCopyKeys = "YES") then
		//Re-Set Default keyring info
		szPubRingPath	= svTarget ^ "PGP Keyrings\\pubring.pkr";
		szPrivRingPath	= svTarget ^ "PGP Keyrings\\secring.skr";
		szRandSeedPath	= WINDIR ^ "randseed.rnd";

		PGPclSetSDKFilePaths
		(szPubRingPath, szPrivRingPath, szRandSeedPath, 1);
	else
		LongPathFromShortPath (szPrivRingPath);
		LongPathFromShortPath (szPubRingPath);
		PGPclSetSDKFilePaths
		(szPubRingPath, szPrivRingPath, szRandSeedPath, 1);
	endif;

	nResult = UnUseDLL(WINSYSDIR + "pgp60cl.dll");


FinalInstallProcess:

	//End of Script
	//Add the Download Adobe Acrobat Icon to Start Menu,
	//this is done at the very end
	//so that    SRCDIR && TARGETDIR are not lost
	SRCDIR     = SUPPORTDIR;
	TARGETDIR  = FOLDER_STARTMENU ^ "Programs" ^ "P G P" ^ "Documentation";
	if (ComponentIsItemSelected
	   (szComponents,APP_NAME +" User's Manual (Adobe Acrobat format)") = TRUE)
	   then
		CopyFile ("adobe.url","Download Adobe Acrobat.url");
	endif;


	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	szName = svTarget + "\\uninstall.exe";
	LongPathToShortPath (szName);
	RegDBSetKeyValueEx
	("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" ^ DEINSTALL_KEY
	,"UninstallString",REGDB_STRING,szName,-1);
	RegDBSetKeyValueEx
	("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" ^ DEINSTALL_KEY
	,"DisplayName",REGDB_STRING,APP_NAME,-1);
	
	if (UpdateNeeded = "TRUE") then
		SRCDIR     = SUPPORTDIR;
		TARGETDIR  = FOLDER_STARTMENU ^ "Programs" ^ "P G P";
		CopyFile ("eudora.url","Update Eudora.url");

		MessageBox ("Don't forget to update your version of Eudora.\n"+
		"The newest versions can be found at\n\n"+
		"http://www.eudora.com\n\n"+
		"You must update your Eudora version for the\n"+
		"Eudora Plugin to function properly.\n\n "+
		"Thanks for selecting PGP !", INFORMATION);
	endif;
	
	VarSave (SRCTARGETDIR);
	TARGETDIR	= WINSYSDIR;
	SRCDIR		= svTarget;
	CopyFile ("PGP60.hlp", "PGP60.hlp");
	VarRestore (SRCTARGETDIR);

	TARGETDIR = svTarget;
	DeleteFile ("adobe.url");
	DeleteFile ("eudora.url");

	//Launch Microsofts comctl32.dll if neccesary
	GetSystemInfo(OS, nvOS, svOS);
	VerGetFileVersion (WINSYSDIR^"comctl32.DLL", svVersionNumber);
	switch (nvOS)

	case IS_WINDOWSNT:
		if (VerCompare (svVersionNumber, "4.7.0.0", VERSION)= LESS_THAN) then
			//launch microsofts updater 40Comupd.exe with args  /r:n /q:a for quiet
			LaunchAppAndWait (svTarget ^ "40Comupd.exe","\/r:n \/q:a", WAIT);
		nReboot = 1;
		endif;

	case IS_WINDOWS95:
		if (VerCompare (svVersionNumber, "4.7.0.0", VERSION)= LESS_THAN) then
			//launch microsofts updater 40Comupd.exe with args  /r:n /q:a for quiet
			LaunchAppAndWait (svTarget ^ "40Comupd.exe","\/r:n \/q:a", WAIT);
		nReboot = 1;
		endif;
	endswitch;
	Delay (2);
	//Dekete the microsoft comctl32.dll updater, its no longer needed
	VarSave		(SRCTARGETDIR);
	TARGETDIR  = svTarget;
	SRCDIR     = svTarget;
	DeleteFile	("40Comupd.exe");
	VarRestore	(SRCTARGETDIR);
	
	//If PGPdisk is getting installed try and load the driver on NT
	if (ComponentIsItemSelected
		(szComponents,"PGPdisk for Windows") = TRUE) then

		nReboot = 1;

	endif;


	nResult = UseDLL(SUPPORTDIR ^ "install.dll");
	//#define DRIVER_NO_ERROR			0
	//#define DRIVER_NOT_WINNT			1
	//#define DRIVER_ACCESS_ERROR		2
	//#define DRIVER_CREATE_FAIL		3
	//#define DRIVER_ALREADY_STARTED	4
	//#define DRIVER_MISC_ERROR			5
	//#define UNKNOWN_ERROR				6
	nResult = PGPclStartMemLockDriver (); 
	if (( nResult = 0 ) ||
		( nResult = 1 ) ||
		( nResult = 4 )) then
		szTemp = "Setup has finished installing " + APP_NAME +
				" on your computer." + " Setup can optionally" +
				" launch PGPkeys and/or the Read Me file." + 
				" Choose the options you want below.";

	else

		szTemp = "Setup has finished installing " + APP_NAME +
				" on your computer." + " Setup can optionally" +
				" launch PGPkeys and/or the Read Me file." + 
				" Choose the options you want below.\n\n" +
				"NOTE: To take advantage of the PGP secure " +
				"memory drivers that have been installed, you " +
				"will need to reboot your machine.";
	endif;
	UnUseDLL(SUPPORTDIR ^ "install.dll");

	if ((BATCH_INSTALL = TRUE) || (nReboot = 1)) then

		CommitSharedFiles(0);

		if (bEasyInstall = FALSE) then
			bvOpt1 = TRUE;
			
			szTemp = "Setup can optionally launch the Read Me file.";

			SdFinish("Would you like to view the Read Me file ?",szTemp,"",
					 "Yes, I want to view the Read Me file.",
					 "",bvOpt1,bvOpt2);
																																																									
			ChangeDirectory(svTarget);
			if (bvOpt1) then
			    hWnd = 0;
				LaunchAppAndWait("NOTEPAD.EXE",svTarget^ "Documentation" ^ "readme.txt", NOWAIT);
				Delay (1);
				hWnd = FindWindow("", "readme.txt - Notepad");
				SendMessage(hWnd, WM_SYSCOMMAND, SC_MAXIMIZE, 0);
			endif;
		endif;

        // Clean up value stored in registry to allow Setup to know that the user qualifies for this installation
        RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\explorer\\IStatus");

		szTemp = "Setup has finished installing " +
				 APP_NAME +" on your computer";

		szMsg = "Your computer needs to be rebooted for the installation\n" +
				"to complete.";

		// If SdFinishReboot reboots the system,the shared file data is
		// automatically recorded.
		RebootDialog ("Restart Windows",szMsg,SYS_BOOTWIN);
	

		// If BATCH_INSTALL is FALSE,Setup is complete.
   	else
		if (bEasyInstall = FALSE) then
			bvOpt1 = TRUE;
			bvOpt2 = TRUE;

			SdFinish("Setup Complete",szTemp,"Click Finish to complete Setup.",
					 "Yes, I want to run PGPkeys.",
					 "Yes, I want to view the Read ME file.",bvOpt1,bvOpt2);
																																																									
			ChangeDirectory(svTarget);
			if (bvOpt1) then
				LaunchApp(svTarget ^ "pgpkeys.exe","");
			endif;
			if (bvOpt2) then
				LaunchApp("NOTEPAD.EXE",svTarget^ "Documentation" ^ "readme.txt");
			endif;
		endif;

		LaunchApp(svTarget ^ "PGPTray.exe","");

	endif;
if (IS_QUALCOMM_BUILD = "TRUE") then
	PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 1, NULL) ;
endif;
	exit;

Exit_Handler:
// Post a message so that we know the install failed
PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
exit;
return;

/*-------------------------------------------------------------------------*\
 *
 * Function:  SetupScreen
 *
 *  Purpose:  This function will set up the screen look.  This includes
 *            colors,fonts,text to be displayed,etc.
 *
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*-------------------------------------------------------------------------*/
function SetupScreen ()


	NUMBER  nDx,nDy;


begin
	GetExtents(nDx,nDy);

	SetFont(FONT_TITLE, STYLE_BOLD | STYLE_ITALIC, "Times New Roman");
	GetSystemInfo (VIDEO, nDisplay, szDisplay);
	if (nDisplay = IS_EGA) then
		SetTitle(TITLE + " - Setup", 10, WHITE); // Maybe 10
	elseif (nDisplay = IS_VGA) then
		SetTitle(TITLE + " - Setup", 12, WHITE);
	elseif (nDisplay = IS_SVGA) then
		SetTitle(TITLE + " - Setup", 16, WHITE);
	elseif (nDisplay = IS_XVGA) then
		SetTitle(TITLE + " - Setup", 18, WHITE);
	elseif (nDisplay = IS_UVGA) then
		SetTitle(TITLE + " - Setup", 24, WHITE);
	else
		SetTitle(TITLE + " - Setup", 20, WHITE);
	endif;
  
	Enable(FULLWINDOWMODE);
	Enable(INDVFILESTATUS);

	GetSystemInfo(COLORS,nvResult,svResult);
	if (nvResult < 257) then
		SetColor( BACKGROUND, RGB(000,000,128) );
	else
		SetColor( BACKGROUND, RGB(42,000,170) );
	endif;

	SetColor(STATUSBAR,BLUE);     // Bright blue.
	SetTitle(TITLE2 + " Setup",0,BACKGROUNDCAPTION); // Caption bar text( no new line ).

	//Enable(BACKGROUND);

	Delay(1);

end;


/*-------------------------------------------------------------------------*\
 *
 * Function:  CheckRequirements
 *
 *  Purpose:  This function will check all minimum requirements for the
 *            application being installed.  If any fail,then the user
 *            is informed and the installation is terminated.
 *
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*-------------------------------------------------------------------------*/
function CheckRequirements ()


    NUMBER  nvDx,nvDy;
    
    NUMBER  nvResult;
    
    STRING  svResult;


begin

	// Check screen resolution.
	GetExtents(nvDx,nvDy);
	if (nvDy < 480) then

		MessageBox
		("This program requires VGA or better resolution.",WARNING);
		if (IS_QUALCOMM_BUILD = "TRUE") then
			PostWindowMessageA( 0xffff, WM_MAHAVISHNU, 0 ,NULL) ;
		endif;
		exit;

	endif;

	// Determine the target system's operating system.
	GetSystemInfo(OS,nvResult,svResult);
	bWinNT  = FALSE;
	bWin32s = FALSE;
	bIsShellExplorer = FALSE;
	
	if (nvResult =  IS_WINDOWSNT) then
		bWinNT = TRUE; // Running Windows NT.

	   // Check to see if NT is using EXPLORER Shell
		if(QueryShellMgr(svResult) = 0) then
			if(StrCompare(svResult,"EXPLORER.EXE") = 0) then
			bIsShellExplorer = TRUE;
			endif;
		endif;

	elseif (nvResult =  IS_WIN32S) then
		bWin32s = TRUE; // Running Win32s.
	endif;

end;


/*-------------------------------------------------------------------------*\
 *
 * Function:  FileBrowse
 *
 *  Purpose:  
 *          
 *
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*-------------------------------------------------------------------------*/

function FileBrowse (hwnd,szFilter,svSelected,szTitle,szExt)

      STRING szDLL,svResult;

      NUMBER nvISType,nResult,nLen,n,nvByte;
      
      BOOL bResult;

begin
    GetSystemInfo(ISTYPE,nvISType,svResult);
      
    // Load the DLL,which must be on disk 1 or in _SETUP.LIB
    // so that it gets placed into SUPPORTDIR.
    if (nvISType = 16) then
        szDLL = SUPPORTDIR ^ "INSTALL.DLL";
    else
        szDLL = SUPPORTDIR ^ "INSTALL.DLL";
    endif;

    nResult = UseDLL(szDLL);
    if (nResult < 0) then
        MessageBox("FileBrowse failed to load DLL:\n" +
                    szDLL,SEVERE);
        return 0;
    endif;

    // The Windows OPENFILENAME structure requires the browse
    // filter in string array format. To achieve this,replace
    // all commas (ASCII 44) with NULL. Then,append an extra NULL
    // because the array ends with two NULLs.
    nLen = StrLength(szFilter);
    for n = 0 to nLen - 1
        GetByte(nvByte,szFilter,n);
        if (nvByte = 44) then
            SetByte(szFilter,n,0);
        endif;
    endfor;
    szFilter = szFilter + "";
   
    bResult = MyGetOpenFileName32 (hwnd,szFilter,svSelected,szTitle,szExt);
      
    // Unload the DLL.
    UnUseDLL(szDLL); 
      
    if (!bResult) then
        return -1;
    endif;
      
    return 0;
      
end;



/******************************************************************************
 *
 * Function:    DeleteSharedFile
 *
 *  Purpose:    This function will check if a library is shared before deleteing
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
 *
 ******************************************************************************/

function DeleteSharedFile (szDeleteFilePath, szDeleteFile)


    STRING  szDelKey, svString, svValue;

    NUMBER  nvVar, nvType, nvSize, nSize;


begin

    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

    szDelKey	= "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs";

    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

    if (RegDBGetKeyValueEx 
	    (szDelKey,  szDeleteFilePath ^ szDeleteFile, nvType, svValue, nvSize) < 0 ) then

	    //this is not a shared .dll so delete

	    TARGETDIR  = szDeleteFilePath;
	    SRCDIR     = szDeleteFilePath;
	    DeleteFile (szDeleteFile);

    else

	    //this is a shared file
	    StrToNum (nvVar, svValue);
	    nvVar = nvVar - 1;
	    if (nvVar < 1) then
		    SetDialogTitle (DLG_ASK_YESNO,"Shared File");
		    if (AskYesNo
		       (szDeleteFile + " is a shared library. It appears no other applications\n"+
		       "are using it anymore, do you want to delete it?"
		       ,NO) = YES) then
				    //Delete the file and decrement the count
				    RegDBDeleteValue (szDelKey, szDeleteFilePath ^ szDeleteFile);

				    TARGETDIR  = szDeleteFilePath;
				    SRCDIR     = szDeleteFilePath;
				    DeleteFile (szDeleteFile);
		    endif;
	    endif;
	    //write the new number of apps shareing the library
	    if (nvVar > 0) then
		    NumToStr (svString, nvVar);
		    RegDBSetKeyValueEx 
		    (szDelKey,  szDeleteFilePath ^ szDeleteFile, REGDB_NUMBER, svString, nSize);
	    endif;
    endif;

end;


/******************************************************************************
 *
 * Function:    DeleteSharedFile
 *
 *  Purpose:    This function will cleanup old 5.5.X un-needed shared
 *              file ref's
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
 *
 ******************************************************************************/

function CleanSharedFile(szDeleteFilePath, szDeleteFile)


    STRING  szDelKey, svString, svValue;
    
    NUMBER  nvVar, nvType, nvSize, nSize;


begin

    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

    szDelKey	= "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SharedDLLs";

    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

    if (RegDBGetKeyValueEx 
	    (szDelKey,  szDeleteFilePath ^ szDeleteFile, nvType, svValue, nvSize) < 0 ) then
    else
	    //Delete the shared file ref
	    RegDBDeleteValue (szDelKey ,szDeleteFilePath ^ szDeleteFile);
    endif;

end;



/******************************************************************************
 *
 * Function:  UNINSTALL  5.X
 *
 *  Purpose:  
 *          
 *
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
 ******************************************************************************/

function Uninstall5X (UNINSTALLKEY, OEPATH, PGPPATH, EUDPATH)


    STRING		szPubRingPath [512];

    STRING		szPrivRingPath[512];

    STRING		szRandSeedPath[512];

    STRING		szKey,szName,svValue,svReturnString,szBmpName, szLocalDB, szTemp, szMsg;

    STRING		Installdir,svTarget,svResult, OEinstall;

    NUMBER		nDx,nDy,nvSize,nvType,nID_BITMAP, nResult, Reboot, nIndex;

    HWND		hWnd1,hWnd2,hWnd3,hWnd4,hWnd5,hWnd6,hWnd7,hWnd8,hWnd9;

    //For outlook express
    STRING szFileName, szVerBuffer[1536], szResultBuffer, szData;
    LONG lSize, lData;
    POINTER ptr1, ptr2;
    NUMBER nSize, nHandle;
    BOOL bVerValue, bVerInfo, bUpgraded;

     
begin
    if (szINSTALLED_VERSION != "") then
        szMessage = "Uninstalling PGP " + szINSTALLED_VERSION + ".  Please wait...";
    else
        szMessage = "Uninstalling PGP.  Please wait...";
    endif;
    SdShowMsg (szMessage, TRUE);

    // Run through this rountine 3 times, just to ensure proper file deletion
    nIndex = 0;
    while (nIndex < 3)

        Reboot = 0;

        //DELETE .DLL'S FROM WINDOWS SYSTEM DIRECTORY
        TARGETDIR = WINSYSDIR;
        CleanSharedFile(WINSYSDIR,"PGPsdk.dll"); 
        DeleteFile ("PGPsdk.dll");
        CleanSharedFile(WINSYSDIR,"PGPsdkKS.dll");
        DeleteFile ("PGPsdkKS.dll");
        CleanSharedFile(WINSYSDIR,"PGPsdkKeyServer.dll");
        DeleteFile ("PGPsdkKeyServer.dll");
        CleanSharedFile(WINSYSDIR,"PGP55km.dll");
        DeleteFile ("PGP55km.dll");
        CleanSharedFile(WINSYSDIR,"PGP55cd.dll");
        DeleteFile ("PGP55cd.dll");
        CleanSharedFile(WINSYSDIR,"PGP55rd.dll");
        DeleteFile ("PGP55rd.dll");
        CleanSharedFile(WINSYSDIR,"PGP55sc.dll");
        DeleteFile ("PGP55sc.dll");
        CleanSharedFile(WINSYSDIR,"PGP55mn.dll");
        DeleteFile ("PGP55mn.dll");
        CleanSharedFile(WINSYSDIR,"PGPxch.dll");
        DeleteFile ("PGPxch.dll");
        CleanSharedFile(WINSYSDIR,"PGP55oe.dll");
        DeleteFile ("PGP55oe.dll");
        CleanSharedFile(WINSYSDIR,"PGPsdk.dll");
        DeleteFile ("PGPsdk.dll");
        CleanSharedFile(WINSYSDIR,"PGPsdkPrefs");
        DeleteFile ("PGPsdkPrefs");
        DeleteFile ("PGPsdk.prf");
        DeleteFile ("PGPMacBinaryMappings.txt");


        //DELETE FILES FROM THE PGP 5.5 INSTALL DIRECTORY
        TARGETDIR = szPREV_PGP_PATH;
        Installdir = szPREV_PGP_PATH;
        DeleteFile ("keygen.avi");
        DeleteFile ("license.txt");
        DeleteFile ("Pgp55.cnt");
        DeleteFile ("pgp55.hlp");
        DeleteFile ("Pgp55.gid");
        DeleteFile ("PGPadmin.exe");
        DeleteFile ("PGPkeys.exe");
        DeleteFile ("PGPlog.exe");
        DeleteFile ("PGPtools.exe");
        DeleteFile ("PGPtray.exe");
        DeleteFile ("Quickstart.doc");
        DeleteFile ("Readme.txt");
        DeleteFile ("PGPadmin.prf");
        DeleteFile ("PGPclient.prf");
        DeleteFile ("Eudora.url");
        DeleteFile ("Adobe.url");
        DeleteFile ("randseed.bin");
        DeleteFile ("PGP55win.pdf");
        DeleteFile ("*.pdf");
        DeleteFile ("*.isu");
        DeleteFile ("uninstall.exe");

        if (szPREV_PGP_PATH != "") then
	        DeleteDir(szPREV_PGP_PATH ^ "ClientInstaller", ALLCONTENTS);
	        DeleteDir(szPREV_PGP_PATH ^ "TEMP", ALLCONTENTS);
	        DeleteDir(szPREV_PGP_PATH ^ "Signatures", ALLCONTENTS);
        endif;

        //DELETE THE EUDORA PLUGIN
        TARGETDIR = EUDPATH;
        DeleteFile ("pgpplugin.dll");

        //DELETE REGISTRY ENTRIES
        //HKEY_CURRENT_USER
        RegDBSetDefaultRoot(HKEY_CURRENT_USER);
        RegDBDeleteKey ("Software\\Network Associates\\PGP55");
        RegDBDeleteKey ("Software\\PGP\\PGP55");

        //HKEY_CLASSES_ROOT
        RegDBSetDefaultRoot(HKEY_CLASSES_ROOT);
        RegDBDeleteKey (".aexpk");
        RegDBDeleteKey (".asc");
        RegDBDeleteKey (".bexpk");
        RegDBDeleteKey (".pgd");
        RegDBDeleteKey (".pgp");
        RegDBDeleteKey (".pkr");
        RegDBDeleteKey (".prvkr");
        RegDBDeleteKey (".aexpk");
        RegDBDeleteKey (".pubkr");
        RegDBDeleteKey (".sig");
        RegDBDeleteKey (".skr");
        RegDBDeleteKey ("CLSID\\{969223c0-26aa-11d0-90ee-444553540000}");
        RegDBDeleteKey ("PGP Armored Encrypted File");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("PGP Armored Extracted Public Key");
        RegDBDeleteKey ("PGP Detached Signature File");
        RegDBDeleteKey ("PGP Encrypted File");
        RegDBDeleteKey ("PGP Private Keyring");
        RegDBDeleteKey ("PGP Public Keyring");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");

        //HKEY_LOCAL_MACHINE
        RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
        RegDBDeleteKey (".aexpk");
        RegDBDeleteKey (".asc");
        RegDBDeleteKey (".bexpk");
        RegDBDeleteKey (".pgd");
        RegDBDeleteKey (".pgp");
        RegDBDeleteKey (".pkr");
        RegDBDeleteKey (".prvkr");
        RegDBDeleteKey (".aexpk");
        RegDBDeleteKey (".pubkr");
        RegDBDeleteKey (".sig");
        RegDBDeleteKey (".skr");
        RegDBDeleteKey ("CLSID\\{969223c0-26aa-11d0-90ee-444553540000}");
        RegDBDeleteKey ("PGP Armored Encrypted File");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("PGP Armored Extracted Public Key");
        RegDBDeleteKey ("PGP Detached Signature File");
        RegDBDeleteKey ("PGP Encrypted File");
        RegDBDeleteKey ("PGP Private Keyring");
        RegDBDeleteKey ("PGP Public Keyring");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Exchange\\Client\\Extensions\\PGP Plugin");
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" ^ UNINSTALLKEY);
        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGP55");
        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGP");
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" ^ UNINSTALLKEY);
        RegDBDeleteKey ("SOFTWARE\\PGP\\PGP55");
        RegDBDeleteKey ("SOFTWARE\\Pretty Good Privacy,Inc.\\PGP 5.5");
        RegDBDeleteKey ("SOFTWARE\\Pretty Good Privacy, Inc.\\PGP 5.5");

        RegDBDeleteValue ("SOFTWARE\\Microsoft\\Exchange\\Client\\Extensions", "PGP Plugin");

        //HKEY_USERS
        RegDBSetDefaultRoot(HKEY_USERS);
        RegDBDeleteKey ("S-1-5-21-1998468922-181747292-2076119496-1000\\Software\\PGP");
        ProgDefGroupType(PERSONAL);
        DeleteProgramFolder ("Pretty Good Privacy");
        DeleteFolderIcon(FOLDER_STARTUP,"PGPtray");

        RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
        LongPathToShortPath (Installdir);

        //Outlook Express Uninstall
        VarSave		(SRCTARGETDIR);

        SRCDIR = OEPATH;

        TARGETDIR = OEPATH;
        //See if the user has installed OE plugin and then upgraded OE
        szFileName = OEPATH ^ "msimn.exe";
        UseDLL( "Version.dll" );
        lSize = GetFileVersionInfoSizeA( szFileName, nHandle );
        NumToStr( szTemp, lSize );
        bVerInfo = GetFileVersionInfoA( szFileName, nHandle, lSize, szVerBuffer);
        ptr1 = AddressString( szResultBuffer );
        ptr2 = AddressNumber( ptr1 );
        bVerValue = VerQueryValueA( szVerBuffer,"\\StringFileInfo\\040904b0\\CompanyName", ptr2, nSize);

        if (bVerValue = 0 ) then
	        bVerValue = VerQueryValueA( szVerBuffer,"\\StringFileInfo\\040904E4\\CompanyName", ptr2, nSize);
        endif;

        // pszResultBuffer is a pointer to a pointer which is the starting point
        // for the company name. How do you actually get the string ?
        StructGetP( ptr2, "MYTYPE_PSZ", "szString", lData, szData );
        UnUseDLL( "Version.dll" );

        if (szData = "Microsoft Corporation") then
	        //the user install the plugin then updated outlook
	        //so we DO want to use this newer file
	        bUpgraded = TRUE;
        endif;
        TARGETDIR = OEPATH;
        if (bUpgraded = FALSE) then

	        DeleteFile("msimn.exe");
	        RenameFile ("PGPmsimn.exe", "msimn.exe");
        else
	        DeleteFile("PGPmsimn.exe");
        endif;


        TARGETDIR = WINSYSDIR;
        CleanSharedFile(WINSYSDIR,"PGP55oe.dll");
        DeleteFile("PGP55oe.dll");


        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGP55\\OE");

        RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGPOEPlugin");
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" ^ UNINSTALLKEY);
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGP55DeinstKey");
        szLocalDB = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce";

        VarRestore	(SRCTARGETDIR);

        Delay (2);

        nIndex = nIndex + 1;

    endwhile;   // while (nIndex < 5)

    SdShowMsg (szMessage, FALSE);


end;



/******************************************************************************
 *
 * Function:  UNINSTALL  6.X
 *
 *  Purpose:  Manually remove PGP 6.x's files because calling the uninstall
 *            will not work because its uninstaller is really an install
 *            script and two installs will not run simultaneously
 *
 *    Input:  
 *
 *  Returns:  none
 *
 * Comments:  Imported from the uninstall rountine
 ******************************************************************************/

function Uninstall6X ()


    STRING		szPubRingPath [512];

    STRING		szPrivRingPath[512];

    STRING		szRandSeedPath[512];

    STRING		szKey,szName,svValue,svReturnString,szBmpName, szLocalDB, szTemp, szMsg;

    STRING		Installdir,svTarget,svResult, OEinstall, svValueAdmin;

    NUMBER		nDx,nDy,nvSize,nvType,nID_BITMAP, nResult, Reboot, nIndex, nCounter;

    HWND		hWnd1,hWnd2,hWnd3,hWnd4,hWnd5,hWnd6,hWnd7,hWnd8,hWnd9;

    //For outlook express
    STRING      szFileName, szVerBuffer[1536], szResultBuffer, szData;
    LONG        lSize, lData;
    POINTER     ptr1, ptr2;
    NUMBER      nSize, nHandle;
    BOOL        bVerValue, bVerInfo, bUpgraded, bDeleteAdmin, DeleteSharedDLLS;

     
begin
    VarSave (SRCTARGETDIR);

    if (szINSTALLED_VERSION != "") then
        szMessage = "Uninstalling PGP " + szINSTALLED_VERSION + ".  Please wait...";
    else
        szMessage = "Uninstalling.  Please wait...";
    endif;
    SdShowMsg (szMessage, TRUE);

	UseDLL (SUPPORTDIR ^ "PGPdskIH.dll");

    GetSystemInfo(OS, nvOS, svOS);

    switch (nvOS)
        case IS_WINDOWSNT:
	        IS_NT = TRUE;
	        if (Is (USER_ADMINISTRATOR, "") != TRUE) then

		        MessageBox ("To run this uninstall you need to be logged in\n" +
					        "with administrator privileges.",INFORMATION); 
			        abort;

	        endif;

        case IS_WINDOWS95:
	        IS_NT = FALSE;
    endswitch;

    // Run through this rountine 3 times, just to ensure proper file deletion
    nIndex = 0;
    while (nIndex < 3)

        /**************************************************************************
         *
         *  Unmount all PGPdisk volumes
         *
         *
         **************************************************************************/
        UnmountAllPGPdisks ();
		KillPGPdiskResident ();
		PGPdiskCleanup ();
        Delay (2);
        
        nCounter = 0;
        Reboot   = 0;

        //See if and components that use the SDK were installed
        RegDBSetDefaultRoot(HKEY_CURRENT_USER);
        szLocalDB = "\\Software" ^ "Network Associates";
        szName    = "DelSharedFiles";

        DeleteSharedDLLS = FALSE;
        if (RegDBGetKeyValueEx (szLocalDB ^ "PGP60", szName, nvType, szName, nvSize) = 0 ) then
            DeleteSharedDLLS = TRUE;
        endif;

        //DELETE .DLL'S FROM WINDOWS SYSTEM DIRECTORY
        TARGETDIR = WINSYSDIR;

        if (DeleteSharedDLLS = TRUE) then
	        DeleteSharedFile (WINSYSDIR, "PGP_sdk.dll");
	        DeleteSharedFile (WINSYSDIR, "PGPsdkNL.dll");
	        DeleteSharedFile (WINSYSDIR, "PGPsdkUI.dll");
        endif;

        DeleteSharedFile (WINSYSDIR, "pgp60cl.dll");
        DeleteSharedFile (WINSYSDIR, "pgp60mn.dll");
        DeleteSharedFile (WINSYSDIR, "pgp60rd.dll");
        DeleteSharedFile (WINSYSDIR, "pgp60sc.dll");
        DeleteSharedFile (WINSYSDIR, "pgpExch.dll");
        DeleteSharedFile (WINSYSDIR, "pgp60oe.dll");
        DeleteSharedFile (WINSYSDIR, "pgp60hk.dll");

        DeleteFile ("randseed.bin");
        DeleteFile ("PGP60.hlp");
        DeleteFile ("PGP60.gid");

        TARGETDIR = WINSYSDIR ^ "drivers";
        DeleteSharedFile (WINSYSDIR ^ "drivers", "PGPmemlock.sys");

        TARGETDIR = WINDIR;
        DeleteFile ("PGP_sdk.prf");
        DeleteFile ("PGPsdk.prf");
        DeleteFile ("PGPMacBinaryMappings.txt");


        //Short filename due to 95 bug
        DeleteSharedFile (WINDIR, "PGPMEM~1.vxd");

        //GET THE PGP 6.0 INSTALLATION DIRECTORY
        RegDBSetDefaultRoot(HKEY_CURRENT_USER);
        szKey = "Software\\Network Associates\\PGP60\\PGPKeys";
        szName = "ExePath";

        RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize);
        ParsePath(svReturnString, svValue, PATH);

        //GET THE PGP 6.0 ADMIN INSTALLATION DIRECTORY
        RegDBSetDefaultRoot(HKEY_CURRENT_USER);
        szKey = "SOFTWARE\\Network Associates\\PGP60\\PGPKeys";
        szName = "ExePath";

        if (RegDBGetKeyValueEx (szKey, szName, nvType, svValueAdmin, nvSize) = 0) then
            bDeleteAdmin = TRUE;
        endif;

        //Outlook Express install location
        szKey = "SOFTWARE\\Network Associates\\PGP60\\OE";
        szName = "OutlookExpress";

        RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize);
        OEinstall = svValue;

        //DELETE FILES FROM THE PGP 6.0 INSTALL DIRECTORY
        TARGETDIR = svReturnString;
        Installdir = svReturnString;
        DeleteFile ("keygen.avi");
        DeleteFile ("Pgp60.cnt");
        DeleteFile ("pgp60.hlp");
        DeleteFile ("pgp60.gid");
        DeleteFile ("PGPadmin.exe");
        DeleteFile ("PGPkeys.exe");
        DeleteFile ("PGPlog.exe");
        DeleteFile ("PGPtools.exe");
        DeleteFile ("PGPtray.exe");
        DeleteFile ("Quickstart.doc");
        DeleteFile ("PGP_Admin.prf");
        DeleteFile ("PGP_Client.prf");
        DeleteFile ("PGPadmin.prf");
        DeleteFile ("PGPclient.prf");
        DeleteFile ("Eudora.url");
        DeleteFile ("Adobe.url");
        DeleteFile ("randseed.bin");
        DeleteFile ("randseed.rnd");
        DeleteFile ("*.pdf");
        DeleteFile ("*.isu");
        DeleteFile ("uninstall.exe");

        TARGETDIR = svReturnString + "\\Documentation";
        DeleteFile ("license.txt");
        DeleteFile ("Readme.txt");
        DeleteFile ("6.0.2 Change History.txt");
        DeleteFile ("PGP55win.pdf");
        DeleteFile ("PGPWinUsersGuide.pdf");
        DeleteFile ("whatsnew.txt");
        DeleteFile ("whatsnew.doc");

        TARGETDIR = svReturnString + "\\PGPFone";
        DeleteFile ("PGPfone.pdf");
        DeleteFile ("PGPfone.exe");
        DeleteFile ("readme.txt");


        TARGETDIR = svReturnString + "\\Sample Keys";
        DeleteFile ("SampleKeys.asc");
        DeleteFile ("WhatIsThis.txt");

        // Clean up old ClientInstaller only if this installer is an ADMIN installer
        if (ISADMIN = "TRUE") then
            TARGETDIR = szPREV_PGP_PATH ^ "ClientInstaller\\Disk1";
            DeleteFile ("_inst32i.ex_");
            DeleteFile ("_isdel.exe");
            DeleteFile ("_setup.dll");
            DeleteFile ("_setup.lib");
            DeleteFile ("Data.1");
            DeleteFile ("Disk1.id");
            DeleteFile ("License.txt");
            DeleteFile ("Setup.bmp");
            DeleteFile ("Setup.exe");
            DeleteFile ("Setup.ini");
            DeleteFile ("Setup.ins");
            DeleteFile ("Setup.pkg");
            DeleteFile ("Uninst.exe");
            DeleteDir (szPREV_PGP_PATH ^ "ClientInstaller\\Disk1", ONLYDIR);

            TARGETDIR = szPREV_PGP_PATH ^ "ClientInstaller\\Disk2";
            DeleteFile ("Data.2");
            DeleteFile ("Disk2.id");
            DeleteDir (szPREV_PGP_PATH ^ "ClientInstaller\\Disk2", ONLYDIR);

            TARGETDIR = szPREV_PGP_PATH ^ "ClientInstaller\\Disk3";
            DeleteFile ("Data.3");
            DeleteFile ("Disk3.id");
            DeleteDir (szPREV_PGP_PATH ^ "ClientInstaller\\Disk3", ONLYDIR);

            TARGETDIR = szPREV_PGP_PATH ^ "ClientInstaller\\Disk4";
            DeleteFile ("Data.4");
            DeleteFile ("Disk4.id");
            DeleteDir (szPREV_PGP_PATH ^ "ClientInstaller\\Disk4", ONLYDIR);

            TARGETDIR = szPREV_PGP_PATH ^ "ClientInstaller\\Disk5";
            DeleteFile ("Data.5");
            DeleteFile ("Disk5.id");
            DeleteDir (szPREV_PGP_PATH ^ "ClientInstaller\\Disk5", ONLYDIR);

            TARGETDIR = szPREV_PGP_PATH ^ "ClientInstaller\\Disk6";
            DeleteFile ("Data.6");
            DeleteFile ("Disk6.id");
            DeleteDir (szPREV_PGP_PATH ^ "ClientInstaller\\Disk6", ONLYDIR);

            TARGETDIR = szPREV_PGP_PATH ^ "ClientInstaller\\Disk7";
            DeleteFile ("Data.7");
            DeleteFile ("Disk7.id");
            DeleteDir (szPREV_PGP_PATH ^ "ClientInstaller\\Disk7", ONLYDIR);

            DeleteDir (szPREV_PGP_PATH ^ "ClientInstaller", ONLYDIR);
        endif;

        if (svReturnString != "") then
	        DeleteDir(svReturnString + "\\PGPFone", ONLYDIR);
	        // DeleteDir(svReturnString + "\\ClientInstaller", ALLCONTENTS);
	        DeleteDir(svReturnString + "\\TEMP", ONLYDIR);
	        DeleteDir(svReturnString + "\\Signatures", ONLYDIR);
	        DeleteDir(svReturnString + "\\Documentation", ALLCONTENTS);
	        DeleteDir(svReturnString + "\\Sample Keys", ONLYDIR);
        endif;

        //GET THE EUDORA PLUGIN PATH
        RegDBSetDefaultRoot(HKEY_CURRENT_USER);
        szKey = "SOFTWARE\\Network Associates\\PGP60\\EudoraPlugin";
        szName = "PluginPath";

        RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize);

        //DELETE THE EUDORA PLUGIN
        TARGETDIR = svValue;
        DeleteFile ("pgpplugin.dll");
        //To remove files accidently installed with 6.0b14
        DeleteFile ("pgpEudoraPluginv4.dll");
        DeleteFile ("pgpEudoraPlugin.dll");

        //DELETE REGISTRY ENTRIES
        //HKEY_CURRENT_USER
        RegDBSetDefaultRoot(HKEY_CURRENT_USER);
        RegDBDeleteKey ("Software\\Network Associates\\PGP60");

        //HKEY_CLASSES_ROOT
        RegDBSetDefaultRoot(HKEY_CLASSES_ROOT);
        RegDBDeleteKey (".aexpk");
        RegDBDeleteKey (".asc");
        RegDBDeleteKey (".bexpk");
        RegDBDeleteKey (".pgd");
        RegDBDeleteKey (".pgp");
        RegDBDeleteKey (".pkr");
        RegDBDeleteKey (".prvkr");
        RegDBDeleteKey (".aexpk");
        RegDBDeleteKey (".pubkr");
        RegDBDeleteKey (".sig");
        RegDBDeleteKey (".skr");
        RegDBDeleteKey (".shf");
        RegDBDeleteKey (".pgr");
        RegDBDeleteKey (".rnd");
        RegDBDeleteKey ("PGPdisk Volume");
        RegDBDeleteKey ("PGP Groups");
        RegDBDeleteKey ("PGP Groups File");
        RegDBDeleteKey ("PGP Share");
        RegDBDeleteKey ("Randseed File");
        RegDBDeleteKey ("Ranseed File");
        RegDBDeleteKey ("CLSID\\{969223c0-26aa-11d0-90ee-444553540000}");
        RegDBDeleteKey ("PGP Armored Encrypted File");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("PGP Armored Extracted Public Key");
        RegDBDeleteKey ("PGP Detached Signature File");
        RegDBDeleteKey ("PGP Encrypted File");
        RegDBDeleteKey ("PGP Private Keyring");
        RegDBDeleteKey ("PGP Public Keyring");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("PGP Share File");

        //HKEY_LOCAL_MACHINE
        RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGP");
        RegDBDeleteKey (".aexpk");
        RegDBDeleteKey (".asc");
        RegDBDeleteKey (".bexpk");
        RegDBDeleteKey (".pgd");
        RegDBDeleteKey (".pgp");
        RegDBDeleteKey (".pkr");
        RegDBDeleteKey (".prvkr");
        RegDBDeleteKey (".aexpk");
        RegDBDeleteKey (".pubkr");
        RegDBDeleteKey (".sig");
        RegDBDeleteKey (".skr");
        RegDBDeleteKey ("CLSID\\{969223c0-26aa-11d0-90ee-444553540000}");
        RegDBDeleteKey ("PGP Armored Encrypted File");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("PGP Armored Extracted Public Key");
        RegDBDeleteKey ("PGP Detached Signature File");
        RegDBDeleteKey ("PGP Encrypted File");
        RegDBDeleteKey ("PGP Private Keyring");
        RegDBDeleteKey ("PGP Public Keyring");
        RegDBDeleteKey ("PGP Binary Extracted Public Key");
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Exchange\\Client\\Extensions\\PGP Plugin");
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\explorer\\IStatus");
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" + DEINSTALL_KEY);
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGP602DeinstKey");
        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGP60");
        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGP");
        RegDBDeleteKey ("SOFTWARE\\Classes\\.pgr");
        RegDBDeleteKey ("SOFTWARE\\Classes\\.rnd");
        RegDBDeleteKey ("SOFTWARE\\Classes\\PGP Groups");
        RegDBDeleteKey ("SOFTWARE\\Classes\\PGP Groups File");
        RegDBDeleteKey ("SOFTWARE\\Classes\\PGP Share");
        RegDBDeleteKey ("SOFTWARE\\Classes\\Randseed File");
        RegDBDeleteKey ("SOFTWARE\\Classes\\Ranseed File");

        RegDBDeleteValue ("SOFTWARE\\Microsoft\\Exchange\\Client\\Extensions", "PGP Plugin");

        //HKEY_USERS
        RegDBSetDefaultRoot(HKEY_USERS);
        RegDBDeleteKey ("S-1-5-21-1998468922-181747292-2076119496-1000\\Software\\PGP");

        ProgDefGroupType(PERSONAL);
        DeleteProgramFolder ("P G P");
        DeleteFolderIcon(FOLDER_STARTUP,"PGPtray");

        //Outlook Express Uninstall
        SRCDIR = OEinstall;

        TARGETDIR = OEinstall;
        //See if the user has installed OE plugin and then upgraded OE
        szFileName = OEinstall ^ "msimn.exe";
        UseDLL( "Version.dll" );
        lSize = GetFileVersionInfoSizeA( szFileName, nHandle );
        NumToStr( szTemp, lSize );
        bVerInfo = GetFileVersionInfoA( szFileName, nHandle, lSize, szVerBuffer);
        ptr1 = AddressString( szResultBuffer );
        ptr2 = AddressNumber( ptr1 );
        bVerValue = VerQueryValueA( szVerBuffer,"\\StringFileInfo\\040904b0\\CompanyName", ptr2, nSize);

        if (bVerValue = 0 ) then
	        bVerValue = VerQueryValueA( szVerBuffer,"\\StringFileInfo\\040904E4\\CompanyName", ptr2, nSize);
        endif;

        // pszResultBuffer is a pointer to a pointer which is the starting point
        // for the company name. How do you actually get the string ?
        StructGetP( ptr2, "MYTYPE_PSZ", "szString", lData, szData );
        UnUseDLL( "Version.dll" );

        if (szData = "Microsoft Corporation") then
	        //the user install the plugin then updated outlook
	        //so we DO want to use this newer file
	        bUpgraded = TRUE;
        endif;
        TARGETDIR = OEinstall;
        if (bUpgraded = FALSE) then

	        DeleteFile("msimn.exe");
	        RenameFile ("PGPmsimn.exe", "msimn.exe");
        else
	        DeleteFile("PGPmsimn.exe");
        endif;


        TARGETDIR = WINSYSDIR;
        DeleteFile("PGPdskse.dll");

        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGP55\\OE");

        RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGPOEPlugin");

        szLocalDB = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce";

        RegDBSetKeyValueEx
        (szLocalDB,"uninstall.exe",REGDB_STRING,"command /c del " + OEinstall ^"uninstall.exe" ,-1);

	    TARGETDIR = svReturnString ^ "signatures";
	    DeleteFile ("*.sig");
	    DeleteFile ("*.*.sig");
	    DeleteDir  (svReturnString ^ "signatures", ONLYDIR);

	    TARGETDIR = svReturnString;

	    DeleteFile ("pgpdiskresident.exe");
	    DeleteFile ("pgpdisk.exe");
	    DeleteFile ("pgpdisk.hlp");
	    DeleteFile ("pgpdisk.cnt");
	    DeleteFile ("pgpdisk.pdf");
	    DeleteFile ("readme.txt");
	    DeleteFile ("license.txt");

	    TARGETDIR = WINSYSDIR;
		    DeleteFile ("pgpdskSE.dll");

	    if (IS_NT) then
		    TARGETDIR = WINSYSDIR ^ "Drivers";
		    DeleteFile ("pgpdisk.sys");
	    else
		    TARGETDIR = WINSYSDIR ^ "Iosubsys";
		    DeleteFile ("pgpdisk.pdr");
	    endif;

	    Delay (2);

	    //Deleting registry Entries.

	    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

	    RegDBDeleteKey ("Enum\\Root\\PGPdisk");
	    RegDBDeleteKey ("System\\CurrentControlSet\\Services\\Class\\PGPdisk");

	    RegDBSetDefaultRoot (HKEY_CLASSES_ROOT);

	    RegDBDeleteKey (".pgd");
	    RegDBDeleteKey ("PGPdisk Volume File");
	    RegDBDeleteKey ("CLSID\\{f8b14440-3785-11d1-b363-5c6f08c10000}");
	    RegDBDeleteKey ("PGPdisk Volume File\\shellex\\ContextMenuHandlers\\PGPdisk Shell Extension");
	    RegDBDeleteKey ("Drive\\shellex\\ContextMenuHandlers\\PGPdisk Shell Extension");
	    RegDBDeleteValue ("Drive\\shellex\\ContextMenuHandlers", "");
	    RegDBDeleteKey ("PGPdisk Volume");

	    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

	    RegDBDeleteValue ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved",
					      "{f8b14440-3785-11d1-b363-5c6f08c10000}" );
	    RegDBDeleteKey ("Enum\\ESDI\\PGP_____PGPDISK_________0");
	    RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdisk");
	    RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdiskAlpha");
	    RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdisk Beta");
	    RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdiskBeta");
	    RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGPdiskDeinstKey");
	    RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGPdisk.exe");
	    RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGPdiskResident.exe");
	    RegDBDeleteKey ("SOFTWARE\\Classes\\PGPdisk Volume");

	    RegDBSetDefaultRoot (HKEY_CURRENT_USER);

	    RegDBDeleteKey ("Software\\Network Associates\\PGPdisk");
	    RegDBDeleteKey ("Software\\Network Associates\\PGPdiskAlpha");
	    RegDBDeleteKey ("Software\\Network Associates\\PGPdiskBeta");
	    RegDBDeleteKey ("Software\\PGP\\PGPdisk");
	    RegDBDeleteKey ("Software\\PGP\\PGPdiskAlpha");
	    RegDBDeleteKey ("Software\\PGP\\PGPdiskBeta");

	    if (IS_NT) then
		    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
		    RegDBDeleteKey ("System\\CurrentControlSet\\Services\\PGPdisk");
		    RegDBDeleteKey ("System\\CurrentControlSet\\Services\\EventLog\\System\\PGPdisk");
	    endif;

        Delay (2);

        nIndex = nIndex + 1;

    endwhile;   // while (nIndex < 5)

	UnUseDLL (SUPPORTDIR ^ "PGPdskIH.dll");

    SdShowMsg (szMessage, FALSE);

    VarRestore (SRCTARGETDIR);

    SetDialogTitle (DLG_MSG_INFORMATION,"Uninstall complete");
    if (szINSTALLED_VERSION != "") then
        MessageBox ("PGP " + szINSTALLED_VERSION + " has been uninstalled. Your key files have not been\n" +
			        "removed.  You may wish to store them in a safe place.", INFORMATION);
    else
        MessageBox ("PGP has been uninstalled. Your key files have not been\n" +
			        "removed.  You may wish to store them in a safe place.", INFORMATION);
    endif;

    if (Reboot = 1) then
        if (szINSTALLED_VERSION != "") then
	        szTemp = "Setup has completed uninstalling "
	               + szINSTALLED_VERSION + ".";
        else
	        szTemp = "Setup has completed uninstalling PGP.";
        endif;

	    szMsg = "Some files could not be deleted because "
              + "they are currently in use by other programs "
              + "on the system.  Files in use will be deleted "
              + "the next time you restart your system. You will "
              + "need to reboot before installing any PGP products.";

	    // If SdFinishReboot reboots the system,the shared file data is
	    // automatically recorded.
	    RebootDialog ("Restart Windows", szMsg, SYS_BOOTMACHINE);
    endif;


end;    // function Uninstall6X ()





/******************************************************************************
 *
 * Function:    Uninstall_PGPdisk10
 *
 *  Purpose:    This function will check if a library is shared before deleteing
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
 *
 ******************************************************************************/

function Uninstall_PGPdisk10 ()

    STRING  szKey,szName,svValue,svReturnString,szBmpName, svResult,
            szrepdKey, svrepdValue, szLocalDB, szTemp, szMsg, szDisplay,
            szStr, svStr;

    NUMBER  LockedFiles, Reboot, RC, nvVar, nIndex,
            nDx,nDy,nvSize,nvType,nID_BITMAP, nDisplay, nvLine;

    HWND    hWnd1;

begin
    VarSave (SRCTARGETDIR);

    // Ensure that this is TRUE since this uninstall function was called
    nFND_PGPDISK = TRUE;

    SdShowMsg ("Uninstalling PGPdisk.  Please wait...", TRUE);
    
    // Loop 3 times to ensure proper file deletion
    nIndex = 0;

    while (nIndex < 3)
        //Ensure that PGPdisk is not running
        while (FindWindow ("", "PGPdisk") != NULL)
            szMsg = "Setup was unable to shut down PGPdisk.  Please shut it down and then click on OK."
                  + "\n\nCTRL + TAB to switch between applications";
	        
            MessageBox( szMsg, WARNING );
            Delay (3);
        endwhile;

        /**************************************************************************
         *
         *  Unmount all PGPdisk volumes, PGPdisk 1.0
         *
         *
         **************************************************************************/
        //GET THE INSTALLATION DIRECTORY
        RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
        szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGPdisk.exe";
        szName = "";

        RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize);

        ParsePath (svReturnString, svValue, PATH);

        //try and unmount all
        LaunchAppAndWait (svValue, "unmountall" , WAIT);

        //launch pgpdisk count to see if any disks are mounted

        LaunchAppAndWait (svValue, "count" , WAIT);

        LaunchAppAndWait (svValue, "cleanup" , WAIT);

        RegDBSetDefaultRoot(HKEY_CURRENT_USER);
        szKey = "Software\\Network Associates\\PGPdisk";
        szName = "NumMountedPGPdisks";

        RegDBGetKeyValueEx (szKey, szName, nvType, svValue, nvSize);


        StrToNum (nvVar, svValue);

        
        /*********
        if (nvVar > 0) then
	        if (AskYesNo("Uninstall has found mounted PGPdisks on your machine, it is recommended\n" +
			         "that you unmount all PGPdisks before uninstalling PGPdisk. If you do not\n" +
			         "do this you will need to reboot your machine at the end of the uninstall.\n\n" +
			         "Do you want to Exit and unmount your PGPdisks?",YES) = YES) then
		        exit;
	        else
		        Reboot = 1;
	        endif;
        endif;
        ***********/


        SRCDIR = svReturnString;
        TARGETDIR = svReturnString;

        TARGETDIR = svReturnString ^ "signatures";
        DeleteFile ("pgpdisk.exe.sig");
        DeleteFile ("PGPdskSE.dll.sig");
        DeleteFile ("Pgpdisk.pdr.sig");
        DeleteDir  (svReturnString ^ "signatures", ONLYDIR);

        TARGETDIR = svReturnString;
	        if (RC != 0) then
		        Reboot = 1;
		        szStr = svReturnString ^ "pgpdisk.exe";
		        if (FileGrep("Wininit.ini", szStr, svStr, nvLine, RESTART) < 0) then
			        if AddProfString(WINDIR ^ "Wininit.ini", "Rename", "NUL", szStr) < 0 then
			        endif;
		        endif;
	        endif;
        DeleteFile ("pgpdisk.exe");
        DeleteFile ("pgpdisk.hlp");
        DeleteFile ("pgpdisk.cnt");
        DeleteFile ("pgpdisk.pdf");
        DeleteFile ("readme.txt");
        DeleteFile ("license.txt");
        DeleteFile ("uninstall.exe");

        TARGETDIR = WINSYSDIR;

        RC = DeleteFile ("PGPdskSE.dll");
	        if (RC != 0) then
		        Reboot = 1;
		        szStr = WINSYSDIR ^"PGPdiskShellExt.dll";
		        if (FileGrep("Wininit.ini", szStr, svStr, nvLine, RESTART) < 0) then
			        if AddProfString(WINDIR ^ "Wininit.ini", "Rename", "NUL", szStr) < 0 then
			        endif;
		        endif;
	        endif;

        TARGETDIR = WINSYSDIR ^ "Iosubsys";

        RC = DeleteFile ("Pgpdisk.pdr");
	        if (RC != 0) then
		        Reboot = 1;
		        szStr = WINDIR ^ "Iosubsys" ^"pgpdisk.pdr";
		        if (FileGrep("Wininit.ini", szStr, svStr, nvLine, RESTART) < 0) then
			        if AddProfString(WINDIR ^ "Wininit.ini", "Rename", "NUL", szStr) < 0 then
			        endif;
		        endif;
	        endif;

        //Deleting registry Entries.
        RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

        RegDBDeleteKey ("Enum\\Root\\PGPdisk");
        RegDBDeleteKey ("System\\CurrentControlSet\\Services\\Class\\PGPdisk");

        RegDBSetDefaultRoot (HKEY_CLASSES_ROOT);

        RegDBDeleteKey (".pgd");
        RegDBDeleteKey ("PGPdisk Volume");
        RegDBDeleteKey ("PGPdisk Volume File");
        RegDBDeleteKey ("CLSID\\{f8b14440-3785-11d1-b363-5c6f08c10000}");
        RegDBDeleteKey ("PGPdisk Volume File\\shellex\\ContextMenuHandlers\\PGPdisk Shell Extension");
        RegDBDeleteKey ("Drive\\shellex\\ContextMenuHandlers\\PGPdisk Shell Extension");
        RegDBDeleteValue ("Drive\\shellex\\ContextMenuHandlers", "");

        RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);

        RegDBDeleteValue ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved",
				          "{f8b14440-3785-11d1-b363-5c6f08c10000}" );

        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdisk");
        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdiskAlpha");
        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdisk Beta");
        RegDBDeleteKey ("SOFTWARE\\Network Associates\\PGPdiskBeta");
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PGPdiskDeinstKey");
        RegDBDeleteKey ("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PGPdisk.exe");
        RegDBSetDefaultRoot (HKEY_CURRENT_USER);

        RegDBDeleteKey ("Software\\Network Associates\\PGPdisk");
        RegDBDeleteKey ("Software\\Network Associates\\PGPdiskAlpha");
        RegDBDeleteKey ("Software\\Network Associates\\PGPdiskBeta");
        RegDBDeleteKey ("Software\\PGP\\PGPdisk");
        RegDBDeleteKey ("Software\\PGP\\PGPdiskAlpha");
        RegDBDeleteKey ("Software\\PGP\\PGPdiskBeta");

        DeleteProgramFolder (FOLDER_STARTMENU ^ "Programs\\PGPdisk");

        RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

        Delay (2);

        nIndex = nIndex + 1;


    endwhile;

    SdShowMsg ("Uninstalling PGPdisk.  Please wait...", FALSE);

    VarRestore (SRCTARGETDIR);

    if (Reboot = 1) then
	    szMsg  = "Some files could not be deleted because hey are currently in use by other programs "
               + "on the system.  Files in use will be deleted the next time you restart your system. "
               + "You will need to reboot before installing any PGP products.";
	    
	    RebootDialog ("Restart Windows",szMsg,SYS_BOOTMACHINE);
    endif;


end;    // function Uninstall_PGPdisk ()



// This is required at the very end of this file for compilation
#include "sddialog.rul"