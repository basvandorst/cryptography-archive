Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!noc.near.net!news.delphi.com!davesparks
From: davesparks@delphi.com (Dave Sparks)
Newsgroups: sci.crypt
Subject: Re: DES key encrypting itself?
Date: 27 Mar 1994 03:27:27 GMT
Organization: Delphi Internet Services Corporation
Lines: 44
Message-ID: <9403262221591.DLITE.davesparks@delphi.com>
References: <jgfoot-250394111511@silliman-college-kstar-node.net.yale.edu>
NNTP-Posting-Host: delphi.com
X-To: Dave Sparks <davesparks@delphi.com>

>How much am I compromising security if I:
> 
>  1. Use DES to encrypt a file with a key K;  { E(F,K) }
>  2. Use DES to encrypt the key with itself;  { E(K,K) }
>  3. Put the encrypted key where anyone can find it, probably attached to
>the encrypted file somehow.
> 
>My goal is to design a DES program that can tell you quickly if you type in
>the wrong key. But is storing #2 in an obvious place too much of a
>give-away?

The "ideal" is to make wrong guesses at the key as "expensive", timewise, as
possible for a potential cryptanalist without making the program too
cumbersome for its intended user(s).  By encrypting a key with itself, a
brute force attack would only need to decrypt a single 64 bit block with
each potential key, comparing the result with the key used.  For the
ultimate in resistance to cryptanalysis, you'd ideally want to force a
potential cracker to decrypt the entire file with each key to determine
whether it was the correct one or not.

I wouldn't recommend this for really "heavy duty" encryption needs, but then
I probably wouldn't recommend single DES, anyway.  By comparison, using a
"large block" scheme, where a block of 8K bytes is scrambled with something
like "TRAN", then encrypted, you'd have to perform 1024 decryptions with
each key in order to have enough data to reconstruct each potential
"original block" and search for any desired plaintext.

The simplified key checking you propose would definitely be the easiest path
to cracking the key, nullifying any other enhancements you may have added to
the main crypto code.  IOW, it's "ECB" mode at its simplest level.

Why the goal of "telling you quickly" if you've used the wrong key?  If the
person is typing it in manually, what's the harm of making this validity
checking take, lets say, a full second or more, vs. a few milliseconds.
Even a couple of wrong guesses would only delay a legitimate user a few
seconds in accessing the file.

 /--------------+------------------------------------\
 |              |  Internet: davesparks@delphi.com   |
 | Dave Sparks  |  Fidonet:  Dave Sparks @ 1:207/212 |
 |              |  Famnet:   Dave Sparks @ 77:500/1  |
 |              |  BBS:      (909) 353-9821 - 14.4K  |
 \--------------+------------------------------------/

