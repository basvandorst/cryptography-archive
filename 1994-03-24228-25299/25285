Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!usenet.ins.cwru.edu!news.ysu.edu!malgudi.oar.net!cranel.com!butzerd
From: butzerd@cranel.com (butzerd)
Subject: Help attacking a "simple" PRNG
Message-ID: <1994Mar31.003337.12502@cranel.com>
Sender: butzerd@cranel.com (butzerd)
Organization: Cranel, Incorporated, Worthington Ohio
Date: Thu, 31 Mar 1994 00:33:37 GMT
Lines: 70

Hi.  I'm working on attacking a crypto system (for the experience),
and I'm stuck.  I've reduced the problem to a variation of a
shift/feedback register.  I need to find either a) the cycle size of
the register for a given initial value, or b) how many iterations the
register must pass through to get to 1 from some arbitrary staring
point (ie. start at x - how many iterations are required to get to
1?)

The register itself has some n bits.  For each iteration, the bits are
shifted once to the right (ala divide by 2).  If a bit is shifted out
of the register (0th bit = 1 before divide by 2), some value gets
added to the register.  For example, if the register starts with 16,
and has 247 as the "feedback" value, the sequence it contains for
several iterations would be: 16 8 4 2 1 247 370 185 339 etc.  To
clarify, the last step (185 -> 339) is shown in detail below:



        8     7     6     5     4     3     2     1     0
      _____ _____ _____ _____ _____ _____ _____ _____ _____
     |     |     |     |     |     |     |     |     |     |
     |  0  |  1  |  0  |  1  |  1  |  1  |  0  |  0  |  1  |  = 185
     |_____|_____|_____|_____|_____|_____|_____|_____|_____|


     shift right:

      _____ _____ _____ _____ _____ _____ _____ _____ _____
     |     |     |     |     |     |     |     |     |     |
     |  0  |  0  |  1  |  0  |  1  |  1  |  1  |  0  |  0  |  1  = 92
     |_____|_____|_____|_____|_____|_____|_____|_____|_____|  |
                                                              |
                                                     add 247  |
               -----------------------------------------------
              |     |     |     |           |     |     |
              1     1     1     1           1     1     1        = 247
      _____ _____ _____ _____ _____ _____ _____ _____ _____
     |     |     |     |     |     |     |     |     |     |
     |  0  |  0  |  1  |  0  |  1  |  1  |  1  |  0  |  0  |
     |_____|_____|_____|_____|_____|_____|_____|_____|_____|

_____________________________________________________________________
      _____ _____ _____ _____ _____ _____ _____ _____ _____
     |     |     |     |     |     |     |     |     |     |
     |  1  |  0  |  1  |  0  |  1  |  0  |  0  |  1  |  1  |     = 339
     |_____|_____|_____|_____|_____|_____|_____|_____|_____|


Superficially, this looks like a nice, easy shift/feedback register,
and I'm home free.  But the fact that the feedback operation is an
addition and not a boolean operation is really causing me grief.  Note
that I can't just step trough the register, since the actual registers
I'm working with can have several hundred or even thousands of bits in
them.  I need an analytical method (like an equation) for determining
the cycle size base on the feedback and initial values.  Can anyone
lend me a hand?  Any ideas?  Thanks for any non-flammable help!

--Dane Butzer

ps.  With 247 as the feedback value and 16 as the initial value, the
complete generated sequence is: 16 8 4 2 1 247 370 185 339 416 208
104 52 26 13 253 373 433 463 478 239 366 183 338 169 331 412 206 103
298 149 321 407 450 225 359 426 213 353 423 458 229 361 427 460 230
115 304 152 76 38 19 256 128 64 32 16.  This is a cycle size of 56.


_________________________________________________________________________
Disclaimer: They don't know.  And if they did, they wouldn't
understand.  And if they did, they wouldn't care.  So how can it be
*THEIR* fault?
