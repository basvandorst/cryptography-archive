Path: msuinfo!uwm.edu!vixen.cso.uiuc.edu!howland.reston.ans.net!pipex!doc.ic.ac.uk!aixssc.uk.ibm.com!watnews.watson.ibm.com!hawpub1.watson.ibm.com!pershng
From: pershng@hawpub1.watson.ibm.com (John A. Pershing)
Newsgroups: sci.crypt
Subject: Re: Dumb question: why not encrypt twice?
Date: 3 Mar 1994 16:12:54 GMT
Organization: IBM T. J. Watson Research
Lines: 39
Message-ID: <2l52a6$ev8@watnews1.watson.ibm.com>
References: <CM2Koo.H2s@marin.cc.ca.us>
NNTP-Posting-Host: hawpub1.watson.ibm.com
Keywords: cryptography

In article <CM2Koo.H2s@marin.cc.ca.us>,
Tim L Gilbert <gilbert@marin.cc.ca.us> wrote:
   [...]  Why not encrypt it again with a different key?  Or 3 times?
   Or rot13 it, then encrypt it backwards?  Etc...

It depends on the encryption algorithm, and how the multiple
encryptions are done.  A well-known example is DES, which was cleverly
designed so that you could double the effective length of the key
(i.e., from 56 bits to 112 bits) by doing a triple encryption.  E.g.,
if you have an 112-bit key 'A||B' (where 'A' and 'B' are the two,
56-bit halves), then:

	black = En( De( En( red, A ), B ), A )

yields an "112-bit DES" encryption.  Note that there are subtleties
here: you have to run the algorithm three times, even though you are
only using 2 (56-bit) keys; you DECRYPT with the "second" key, and
encrypt (twice) with the first key.  I don't pretend to understand the
nuances of the DES algorithm; however, the people that *do* understand
it say that the above method works and really gives you 112 bits of
effective key whereas, e.g., simply encrypting once with each of the
two keys:

	black = En( En( red, A ), B )

isn't much better than simply using one key (I forget the actual
numbers, but the second encryption only buys you a few bits of
additional "effective key length" -- not worth the expense of the
second encryption).

Of course, concatenating a couple of bad algorithms will invariably
lead to a bad encryption.  For some insight on this, read the
discussion on random number generation in the opening chapter of
Knuth's "Seminumerical Algorithms", where he concludes that "random
number generators should not be chosen randomly".  The same goes for
encryption algorithms, only more so.

      John A. Pershing Jr.                      pershng @ watson.ibm.com
      IBM Research, Yorktown Heights            PERSHNG at YKTVMH.BITNET
