Path: msuinfo!agate!howland.reston.ans.net!pipex!demon!an-teallach.com!gtoal
Newsgroups: sci.crypt
From: gtoal@an-teallach.com (Graham Toal)
Reply-To: sci-crypt@demon.co.uk
Cc: sci-crypt@demon.co.uk
Subject: Re: Better Keys
X-Phone: +44 31 662 0366
X-Fax: +44 31 662 4678
X-Organisation: An Teallach Limited
Date: Thu, 3 Mar 1994 12:04:34 +0000
Message-ID: <199403031204.MAA13669@an-teallach.com>
Sender: usenet@demon.co.uk
Lines: 60

	From: spp@zabriskie.eecs.berkeley.edu (Steve Pope)
	Newsgroups: alt.activism,alt.politics.datahighway,alt.privacy,alt.privacy.clipper,alt.security.pgp,alt.wired,comp.org.eff.talk,talk.politics.crypto

(I'd restrict this followup to sci.crypt)

	>	Using UNIX random() to generate keys is *NEVER* reasonable.

	I disagree with this as a categorical statement.

	> If you're using changing "random" keys, the source of the
	> randomness has to be very high quality, or someone can attack the
	> random number generator instead of the key itself. 

	I would say that if you start with a "random" key, and then use the RNG
	to update this key, the strength of the RNG should only impacts
	the effectiveness of the updating, not the attackability of
	either the the original or updated key, if you're doing things
	properly.

As I usually say any time anyone trots out their latest password
generator, if you are mapping random() to some password by a fixed
mapping, then you have set the space of passwords to be 2^32.  If the
context of these passwords is such that an exhaustive test of 2^32
of them is feasible (eg against a password file entry, rather than
by repeated trials at a login prompt) then you've blown your security
right out the water.  2^32 is *not* an impossible number for many
situations even with domestic equipment.

MJR has mentioned this on comp.security.misc recently himself, so he's
clearly aware of the problem.

	> Suppose (as a simple example) you make your key as follows:
	>
	>	srandom(getpid());
	>	key = random();

	Your "simple" example is obviously insecure as it creates a very small 
	search space.  This proves nothing.  Nobody would proceed in the
	way you suggest.  Your suggestion is less secure than *not*
	updating the key.  Your suggestion would be insecure *even* if random()
	were cryptographically strong, which it isn't.

	Performing updates along the lines of either

	        key ^= random();

	or

	        srandom(key);
	        key = random();

	would be more sensible.  Either of these should give strength
	that is, at least, lower-bounded by the non-update case.

Exactly.  You are criticising him for restricting the space to that
returned by getpid() while failing to notice that you yourself have
restricted the space to that of random().  OK, one may be only 10
bits and the other 32, but both are feasibly attacked by brute force.

G
