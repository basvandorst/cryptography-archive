Path: msuinfo!agate!dog.ee.lbl.gov!ihnp4.ucsd.edu!usc!math.ohio-state.edu!howland.reston.ans.net!pipex!demon!an-teallach.com!gtoal
Newsgroups: sci.crypt
From: gtoal@an-teallach.com (Graham Toal)
Subject: Key-exchange help (or even better, sources) wanted...
X-Phone: +44 31 662 0366
X-Fax: +44 31 662 4678
X-Organisation: An Teallach Limited
Date: Mon, 7 Mar 1994 21:04:34 +0000
Message-ID: <199403072104.VAA11342@an-teallach.com>
Sender: usenet@demon.co.uk
Lines: 31

I've now got my mock-telnet encryption program running using md5 as
its source of random numbers in what I think is called cypher feedback
mode, if I understand that correctly, working as a byte-at-a-time stream
cypher, which is what you need for something interactive.

However, I need to make both ends of the link use a common and secret
initial vector of random numbers, before md5 has seen enough data to
feedback the first block.  (Currently I'm using a hard-coded constant,
so anyone with access to the program could trivially decrypt a logged
session)

I know that Diffie-Helman can be used to share a secret, and that would
probably do fine, but before I try that method, does anyone know of any
other methods that *aren't* patented by PKP or anyone else?  Or is all
key-exchange everywhere patented?

This application is really just to stop kiddy hackers sniffing ether; if
there's an alternative to D-H that's kiddy-proof but not NSA-proof, I'm
quite happy to use it, if that makes it unencumbered.

How are the various secure telnet protocols that hardly anyone is using
handling this problem?  Do they all use D-H?  Have they all acquired a
PKP licence to do it?

Any suggestions greatfully received.  (Including where to get European-
sourced D-H, if that's the only thing that works... - we'll just have
to restrict use of the code to people over here in Europe I guess...)

Thanks

G
