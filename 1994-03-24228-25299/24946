Path: msuinfo!agate!howland.reston.ans.net!gatech!udel!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: Re: Encryption from Hash Functions
Date: Mon, 21 Mar 94 21:36:28 CST
Organization: University of Missouri, Columbia
Lines: 31
Message-ID: <16F8012FDDS86.C445585@mizzou1.missouri.edu>
References: <CMvq7M.K38@hpcvsnz.cv.hp.com> <CMwvGv.JMw@dcs.ed.ac.uk> <Cn14tJ.HJ2@hpcvsnz.cv.hp.com>
NNTP-Posting-Host: mizzou1.missouri.edu

In article <Cn14tJ.HJ2@hpcvsnz.cv.hp.com>
ericb@lsid.hp.com (Eric Backus) writes:
 
>> Quoting ericb@lsid.hp.com (Eric Backus):
>> >1.  Given a "hash", there is no way to gain any information about the
>> Ideally we'd have an encryption algorithm that only used the major
>> property of cryptographic message digest functions, namely that it is
>> computationally infeasable to generate two messages that collide.  I'm
>> not sure if that's possible, though...
 
>I agree that this would be nice.  I agree that it may not be possible.
>However, I would guess that any weakness in the hash that reveals
>information about the input ALSO helps provide a way to find two
>messages with the same hash.
 
   Actually, it's generally easier to generate messages that collide than
to forge a message, in the sense of finding the input to the hash that
will result in a given value.  Most of the encryption schemes I've seen
based on hash functions seem to be relying on it being hard to recover
a list of inputs that could have resulted in a given output from the hash
function.
 
   Of course, the *real* criterion we're interested in is "can anyone break
this cipher," but it makes sense to base that on the design goals of the
hash algorithm.  One-way hashes are designed to be hard to invert, so it
makes sense to use them that way....
 
>                                Eric Backus
>                                ericb@lsid.hp.com
 
   --John Kelsey, c445585@mizzou1.missouri.edu
