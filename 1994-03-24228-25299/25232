Path: msuinfo!agate!news.Brown.EDU!noc.near.net!MathWorks.Com!europa.eng.gtefsd.com!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson; CMSC (G))
Newsgroups: sci.crypt
Subject: Re: Encryption from Hash Functions
Date: 29 Mar 1994 21:53:58 GMT
Organization: University of Maryland, Baltimore County
Lines: 47
Message-ID: <2na81m$km7@news.umbc.edu>
References: <CMvq7M.K38@hpcvsnz.cv.hp.com> <2mecr2$5f5@nef.ens.fr> <Cn14q8.HGA@hpcvsnz.cv.hp.com>
NNTP-Posting-Host: umbc7.umbc.edu
X-Newsreader: TIN [version 1.2 PL2]

Eric Backus (ericb@lsid.hp.com) wrote:
: Serge Vaudenay (vaudenay@dmi.ens.fr) wrote:
[Eric's scheme:]
: > |> ...
: > |> 	out[i+1] = in[i] XOR hash(out[i] XOR hash(password))

This leads to a complementation property: if some bits in 
hash(password), which is the key, are inverted and the 
corresponding bits in each block are inverted, then the
corresponding output bits are inverted.  This may not be
a major problem, but given the choice we should avoid
such properties.

[Serge:]
: > There is a slight problem here: hash functions usually reduces the
: > size of values.

[Eric:]
: In my case, I am giving it input that happens to be the
: same size as the output that will be produced.  How is this a problem?

Most hash functions will pad the block with known or even
constant data, and then most of the operations executed will use
this data.  At the very least, this seems to waste some of the
work done in the hash function.  I would expect better security
if more of the block were secret.

[Serge:]
: > To correct it, for instance, we can decide
: > 	out[i+1] = in[i+1] XOR hash(in[i],K).
: > 

This avoids both the complementation problem and, if the key
length is chosen for the hash's block size, the constant data
problem.

: If I understand this correctly, the only change between this and what
: I proposed is that I used out[i] as input to the hash function, while
: you use in[i].  It turns out that this has problems.

It is different; Serge would concatenate a data block with the key to
form the hash input.  You are right that ciphertext feedback is
preferable to plaintext feedback, but I think this was a typo in
the posts, and both of you may have meant to use the previous
ciphertext block here.

--Bryan Olson
