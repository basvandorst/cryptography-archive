Newsgroups: sci.crypt
Path: msuinfo!agate!ames!sgi!wdl1!io!koontzd
From: koontzd@io.lrmsc.loral.com (David Koontz )
Subject: Re: S-box question
Message-ID: <1994Mar16.225618.7408@wdl.loral.com>
Sender: news@wdl.loral.com
Organization: Loral Rolm Computer Systems
References: <wd6cmuCMqECs.K1J@netcom.com>
Date: Wed, 16 Mar 1994 22:56:18 GMT
Lines: 57

>From: wd6cmu@netcom.com (Eric Williams)
>
>Please excuse a newbie question.  I was reading Bruce Schneier's
>"Applied Cryptography" of DES's S-box substitution, which states:
>
>  The input bits specify an entry in the S-box in a very particular
>  manner.  Consider an S-box input of 6 bits, labeled b1...b6.
>  Bits b1 and b6 are combined to form a 2-bit number, from 0 to
>  3, which corresponds to a row in the table.  The middle 4 bits,
>  b2 through b5, are combined to form a 4-bit number, from 0 to
>  16, which corresponds to a column in the table.
>
>As a programmer, this looks like BS to me.  A simple re-arranging
>of the S-box table should yield a linear array that is directly
>addressible by the 6 input bits.  Am I missing something here?

No, you are not missing anything, you could rearrange the S-box to use the
inputs linearly.  FIPS PUB 46-x, where the description comes from uses this
language.  When examining the R register inputs to the S-boxes through the 
E permutation, it tells us that S-box row selection is interdependent between
adjacent S-boxes.  Possibly a clue left by the originators of DES to 
differential cryptanalysis.  On the other hand there was no anticipation of 
non-hardware implementations, and it describes how to hook up the output of
the E permutation (through the key XOR) to the input of the S-box tables.  
Glaringly making the point that the connections aren't linear.  
(The DES spec doesn't contain test vectors.)

You could also define the S-box tables unique for each round
and by xoring the index with the 6 bits of key for that round,
copy the S-box to the round S-box and eliminate the XOR:

(for round = 0; round < 16; round++ )
    (for sbox = 0; sbox < 8; sbox++)
	(for index = 0; index < 64; index++) 
	    S[sbox][round][index^Key[round][sbox]] = src_S[sbox][index];

so the f function becomes:

 f=(Sr(E(Rr))

 where r is the DES round index
 where S is the array of 8 S-boxes
 where E is the E permutation
 and where R is the R register for the particular round

instead of the original:

 f=(S(E(Rr) XOR Kr))

through commutation.

Not necessarily the best from a performance perspective in software (based
on cache sizes), and econonmicly unfeasible on a chip at the time DES came 
out (1977).  (S boxes require 8 S-boxes  x 64 entries x 4 output bits =
2048 bits ROM equivalent, versus 2048 bits ROM equivalent + 32576 bits RAM
for unique (soft) S-boxes per round.)

