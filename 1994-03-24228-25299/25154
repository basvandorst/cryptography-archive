Path: msuinfo!uwm.edu!math.ohio-state.edu!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: Key cracking
Date: Sat, 26 Mar 94 22:02:08 CST
Organization: University of Missouri, Columbia
Lines: 26
Message-ID: <16F85135E8S86.C445585@mizzou1.missouri.edu>
References: <2n0cgu$b3h@search01.news.aol.com> <strnlghtCnAE5L.9x6@netcom.com>
NNTP-Posting-Host: mizzou1.missouri.edu

David Sternlight writes:
 
>We haven't discussed this before, but an interesting question is how this
>entire security discussion would play if an adversary had a strategy of
>trying to crack a lot of different people's messages, but would allow his
>cracking machines to run for only a month on each one before dropping it.
>Then calculations become a lot more complicated, since whether your traffic
>is cracked or not becomes probabilistic rather than deterministic, and the
>issue becomes more whether, than when.
 
   Hmmm.  If we're dealing with large-number factoring algorithms, I don't
know enough to know whether they're amenable to this sort of attacks.  How-
ever, suppose you're trying a brute-force search through 128-bit IDEA keys.
Maybe the NSA can afford to try 40 bits of key on every encrypted message
they want to catch between PGP users.  Now, they have 2**40 / 2**128 prob.
of finding each key.  That means the expected number of messages they have
to try is about 2**88, before they get their first successful decrypt.
 
   The interesting applications of this might be where you believe that
some keys are more likely than others to have been generated--if PGP's
method of generating pseudorandom session keys is skewed somehow, then
they might try the most likely keys, and ignore the rest....
 
>David
 
  --John Kelsey, c445585@mizzou1.missouri.edu
