Path: msuinfo!agate!library.ucla.edu!europa.eng.gtefsd.com!ulowell!MathWorks.Com!panix!zip.eecs.umich.edu!newsxfer.itd.umich.edu!gatech!howland.reston.ans.net!pipex!uknet!demon!an-teallach.com!gtoal
Newsgroups: sci.crypt
From: gtoal@an-teallach.com (Graham Toal)
Reply-To: sci-crypt@demon.co.uk
Cc: sci-crypt@demon.co.uk
Subject: Re: Better Keys
X-Phone: +44 31 662 0366
X-Fax: +44 31 662 4678
X-Organisation: An Teallach Limited
Date: Thu, 3 Mar 1994 18:15:32 +0000
Message-ID: <199403031815.SAA04958@an-teallach.com>
Sender: usenet@demon.co.uk
Lines: 23


	You're right -- I should be calling random() twice
	(or more) to get more bits.

Nice try but it doesn't help :-)  What you need is to *insert* the
requisite number of random bits to start with, not pull more out; if
you have a deterministic algorithm, making a second call to random()
to get more data doesn't help.  Ideally you want an RNG with <n> bits
of internal state, and you want to initialise those bits with as close
to truly random bits as you can find from your system.

Once you've done all that, then you worry about the predictability
of the RNG :-)

G
PS I posted a hack to the unix 'script' command that used keystroke
timing a la pgp to build up a private file of random bytes for use
by any program that wanted them.  If you missed it and want it, mail
me.  It's slightly stronger than the pgp one in that it just takes
one bit per key (and that only when it trusts the key timing not to
be an autorepeat or network packet); pgp is greedy with its bits and
relies on an md5 hash to stir them around; I'm not 100% convinced
yet that this is kosher.  Looks good but might not win you anything.
