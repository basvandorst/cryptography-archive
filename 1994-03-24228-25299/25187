Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!solaris.cc.vt.edu!news.ans.net!ngate!serv4n57!watnews.watson.ibm.com!locutus.rchland.ibm.com!wo0z.rchland.ibm.com!lwloen
From: lwloen@wo0z.rchland.ibm.com (Larry Loen)
Newsgroups: sci.crypt
Subject: Clipper Application Woes?
Date: 27 Mar 1994 22:31:02 GMT
Organization: IBM Rochester MN
Lines: 48
Distribution: world
Message-ID: <2n51f6$1oq8@locutus.rchland.ibm.com>
Reply-To: lwloen@rchland.vnet.ibm.com
NNTP-Posting-Host: wo0z.rchland.ibm.com

Don't have much time to follow this newsgroup anymore, but I
just thought of another serious set of related issues for Clipper/Skipjack
that seem to be a serious problem for it that ought to be a strong
part of the debate, assuming I am correct.

Encryption algorithms today are accumulating a wide and surprising
set of related applications that are not quite "real" cryptography.

For instance, one could imagine various ways of using DES or RSA
encryption to form an unforgeable "digitial signature" useful for
ensuring viruses can't modify programs undetected.  I've seen a 
variety of these over the years; individual cases don't matter half
as much as the issue that virtually _none_ of them do ordinary,
straight up, point-to-point encryption and virtually none of them would
find a Clipper Chip useful, because they often do weird things with
the cipher key that a Clipper chip would never find useful; software
will actually outrun hardware in some of these because the key changes
in unexpected ways that most hardware chips, optimized for point to point
encryption, deliberately make slow.

Yet, if the justification for Clipper is that DES and maybe RSA are
becoming vulnerable, then surely these other applications are also
becoming vulnerable and deserve a new algorithm if there is to be one.

So, how about Skipjack at the heart of "MD6" or "7" or whatever the 
next number is?  It would seem to be hard to do properly with an
unpublished algorithm.

Strongly related to this is the issue of "bad data" and "bad keys".

Suppose I had a big bucket of aligned, 8 byte floating point numbers
I had to encrypt.  Suppose further that I used DES in its "Electronic
Code Book" form, with no "chaining".  I have accidentially converted 
DES into a Simple Substitution Cipher!  Of course, this special case
is covered in every textbook on the subject, right along with weak keys.

Are we going to get comparable information about Skipjack?  Will we know
how to avoid accidentally creating, through some form of exotica in our
data, the same sort of weakness that DES has for 8 byte integers in ECB 
mode?  Note that in real cases, avoiding this problem is trivial in DES,
because everything is public.  How do you do the same with a secret
algorithm?

-- 
   Larry W. Loen        |  My Opinions are decidedly my own, so please
                        |  do not attribute them to my employer

   email to:  lwloen@rchland.vnet.ibm.com
