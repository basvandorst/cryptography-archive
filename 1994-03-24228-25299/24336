Path: msuinfo!agate!tcsi.tcs.com!uunet!nwnexus!chinook!ken
From: ken@chinook.halcyon.com (Ken Pizzini)
Newsgroups: sci.crypt
Subject: Re: Ultimate newbie questions! (Quick, hide!)
Date: 2 Mar 1994 21:25:22 GMT
Organization: /etc/organization
Lines: 30
Message-ID: <2l3082$ep3@nwfocus.wa.com>
References: <000_9402251317@consgate.hacktic.nl> <CLsqLu.BsJ@cse.psu.edu> <2l1mipINN72l@fstgds15.tu-graz.ac.at> <2l2ga2$j1s@linus.mitre.org>
NNTP-Posting-Host: chinook.halcyon.com

In article <2l2ga2$j1s@linus.mitre.org>,
Robert D. Silverman <bs@gauss.mitre.org> wrote:
>In article <2l1mipINN72l@fstgds15.tu-graz.ac.at> vristic@iaik.wu-wien.ac.at (Vesna Ristic) writes:
>is stronger than sheep. Congruence is not an operator. Mod is.
>
>:1) a mod b = r   implies   a [congruent] r (mod n)
> 
>It doesn't "imply". It is merely different notation for the same thing.

Mr. Silverman, I think you're misunderstanding Vesna's notation --
In (1) the "mod" on the left refers to the computer programmer's operator
for "remainder upon division" (ignoring the persistent problem with
how programming languages mistreat negative numbers with this operator).
On the right hand side of (1), the "mod" refers to the standard
mathematical definition.

>:but
>:
>:2) a [congruent] b (mod n)   if and only if   a mod n = b mod n
> 
>So? All you are saying (in effect) is "foo equiv foo".  Your "but"
>between the two statements above implies there is some difference between
>them.  12 equiv 2 mod 5  MEANS  12 mod 5 equiv 2 mod 5. Your "but" is
>irrelevent and misleading.

The notation is confusing.  Recasting the right hand side into C notation
(and again ignoring issues about negative numbers and the % operator):
2) a [congruent] b (mod n)   if and only if   a % n == b % n

		--Ken Pizzini
