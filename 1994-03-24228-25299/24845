Newsgroups: sci.crypt
Path: msuinfo!agate!library.ucla.edu!news.mic.ucla.edu!kaleida.com!murky.apple.com!mumbo.apple.com!gallant.apple.com!NewsWatcher!user
From: minow@apple.com (Martin Minow)
Subject: Re: US Patent No 5_251_165
Sender: news@gallant.apple.com
Message-ID: <minow-180394113936@17.203.48.21>
Date: Fri, 18 Mar 1994 19:49:12 GMT
References: <9403152019.AA28731@nyx10.cs.du.edu> <richardrCMtq8G.FH3@netcom.com>
Organization: Macintosh Developer Services
Followup-To: sci.crypt
Lines: 58

In article <richardrCMtq8G.FH3@netcom.com>, richardr@netcom.com
(Richard L. Robertson) wrote:
> 
> Subject: US Patent No 5_251_165 and Unfounded Threats of Legal Action
> ...
> However, Mr. James' patent contains claims which "read onto" the prior art
> in Alogrithm M as published in Knuth's book Semi-numerical Algorithms.
> Specificly, claim #4 and its rather oddly rewritten equivalent, claim 8.
> 
>      Claim 4: An apparatus for generating a series of random numbers
>      comprised of:
>           first means for generating a series of intermediate random
>                numbers,
>           an intermediate register receiving each said random number from
>                said first generating means,
>           second means for generating a series of final random numbers,
>                     each final number corresponding to an intermediate
>                          random number stored in said intermediate
>                          register, and
>           the generation of each final random number utilizing the
>                corresponding intermediate random number and a history of
>                preceding random numbers.
> 

This sounds (on brief reading) like a technique called Marsaglia Mixing
that was developed in the early 1960's at the University of Illinois.
(I might have the researcher's name misspelled.)

It iw quite likely that a search of the the UofI Department of Computer
Science library would turn up the original research report.  As I recall
(it was about 30 years ago), the technique used several independent
random number generators. One of them was used to select the next
generator to use. A C implementation might look like the following:

    selector = random_A() % 4;
    switch (selector) {
    case 0:  result = random_B();  break;
    case 1:  result = random_C();  break;
    case 2:  result = random_D();  break;
    case 3:  result = random_E();  break;
    }
    return (result);

Here, random_A, random_B, etc. are independently developed pseudo-
random number generators. Translating this into Claim 4, "selector"
corresponds to "first means... " and the switch cases corresponds
to "second means." Any pseudo-random number generator necessarily
fulfills the final criterion "utilizing ... a history of preceding
random numbers."

I have no idea whether this is a stronger generator than others
present. It was developed to avoid some unfortunate characteristics
of existing generators, such as an alternation between odd and
even numbers.

Martin Minow
minow@apple.com
The above does not represent the position of Apple Computer Inc.
