Path: msuinfo!agate!ihnp4.ucsd.edu!munnari.oz.au!news.uwa.edu.au!DIALix!not-for-mail
From: philsuth@perth.DIALix.oz.au (Phil Sutherland)
Newsgroups: sci.crypt
Subject: RACF one time password algorithm
Date: 29 Mar 1994 11:11:25 +0800
Organization: DIALix Services, Perth, Western Australia
Lines: 43
Sender: philsuth@perth.DIALix.oz.au
Message-ID: <2n868t$81v$1@perth.dialix.oz.au>
NNTP-Posting-Host: perth.dialix.oz.au
X-Newsreader: NN version 6.5.0 #5 (NOV)


As part of some research into one time password generation systems,
I've been examining IBM's RACF Secured Signon function. The algorithm
they use for one time password generation is as follows:-

[All encryption operations are DES]

1. RACF User ID (8 bytes) is encrypted using Secured Signon Key
2. Application profile name (8 bytes) is XORed onto the result.
3. Result is encrypted using Secured Signon Key.
4. Leftmost 4 bytes of result are XORED with 4 byte timestamp.

5. [Time Coder Function] 
 5a. Separate into left (LB) and right 2 byte (RB) groups.
  Do six rounds of:-
   5b. Concatenate RB with 6 bytes of 0x55, with RB leftmost.
   5c. Encrypt RB using Secured Signon Key
   5d. Discard all but leftmost 2 bytes.
   5e. XOR result with LB.
   5f. Set LB = RB
   5g. Set RB = Result of 5e.
   5h. Permute RB (using a different bit permutation table for each round).
 5i. Recombine LB and RB

6. The result is translated via a lookup table into an alphanumeric 
password.

Does anybody know why the complicated Time Coder Function in step 5
is used? A much simpler approach would be to XOR the timestamp
directly onto both the high and low halves of the result of 3,
reencrypt using the Secured Signon Key, then fold the high and low
half of the result together using an XOR. Are there problems with
this approach?

Many thanks
phil



-- 
------------------------------------------------------------------------
Phil Sutherland        Perth, Western Australia    philsuth@DIALix.oz.au

