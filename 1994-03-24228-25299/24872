Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: Re: Encryption from Hash Functions
Date: Sat, 19 Mar 94 16:26:10 CST
Organization: University of Missouri, Columbia
Lines: 32
Message-ID: <16F7EE723S86.C445585@mizzou1.missouri.edu>
References: <CMvq7M.K38@hpcvsnz.cv.hp.com> <16F7ECD0AS86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: mizzou1.missouri.edu

In article <16F7ECD0AS86.C445585@mizzou1.missouri.edu>
C445585@mizzou1.missouri.edu writes:
 
>   Sometime before she needs to encrypt a message, Alice's encryption
>program is generating a dictionary of 256-bit strings like this:
 
   Oops.  I guess I left out *how* she's supposed to generate the
dictionary.  (Yet another case of net-induced brain-fade.)
 
   Given her dictionary (as described in the original posting), she
repeats the following until the dictionary is full.
 
   1.  Generate the next random 256-bit R(i).
   2.  Find SHA(K,R(i)).
   3.  If the dictionary has room for another entry under
       Low8Bits(SHA(K,R(i)), then add R(i) to the dictionary
       under that 8-bit value.
 
   Another question I thought of before I wrote my posting, but didn't
think to post:  Does R(i) need to be random?  If the scheme is resistant
to chosen-ciphertext attacks, then R(i) can be anything, even under the
direct control of the attacker, so they probably don't need to be random,
but, again, I don't see how to prove this.
 
   Also:  Thinking about it, I also seem to recall some kind of randomized
encryption scheme based on the difficulty of determining whether a value
was a quadratic residue modulo some unknown prime.  Some further variant
of that may have been a public-key scheme.  I don't know what became of it--
in my very cursory scan through Applied Crypto, I didn't see a reference
to it, but I may have just missed it entirely.
 
   --John Kelsey, c445585@mizzou1.missouri.edu
