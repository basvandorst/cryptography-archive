Path: msuinfo!agate!ucbvax!hplabs!hp-cv!hp-pcd!hpcvsnz!ericb
From: ericb@lsid.hp.com (Eric Backus)
Newsgroups: sci.crypt
Subject: Re: Encryption from Hash Functions
Message-ID: <Cn14wF.HLB@hpcvsnz.cv.hp.com>
Date: 21 Mar 94 19:31:27 GMT
References: <CMvq7M.K38@hpcvsnz.cv.hp.com> <16F7ECD0AS86.C445585@mizzou1.missouri.edu> <16F7EE723S86.C445585@mizzou1.missouri.edu>
Sender: news@hpcvsnz.cv.hp.com (News )
Organization: Hewlett-Packard
Lines: 25
X-Newsreader: TIN [version 1.2 021193BETA PL3]

John Kelsey (C445585@mizzou1.missouri.edu) wrote:
>    Oops.  I guess I left out *how* she's supposed to generate the
> dictionary.  (Yet another case of net-induced brain-fade.)
>  
>    Given her dictionary (as described in the original posting), she
> repeats the following until the dictionary is full.
>  
>    1.  Generate the next random 256-bit R(i).
>    2.  Find SHA(K,R(i)).
>    3.  If the dictionary has room for another entry under
>        Low8Bits(SHA(K,R(i)), then add R(i) to the dictionary
>        under that 8-bit value.
>  
>    Another question I thought of before I wrote my posting, but didn't
> think to post:  Does R(i) need to be random?  If the scheme is resistant
> to chosen-ciphertext attacks, then R(i) can be anything, even under the
> direct control of the attacker, so they probably don't need to be random,
> but, again, I don't see how to prove this.

You can't ever re-use R(i) with the same key.  If you do, SHA(K,R(i))
is the same.  Other than that, I think R(i) can be anything.
-- 
				Eric Backus
				ericb@lsid.hp.com
				(206) 335-2495
