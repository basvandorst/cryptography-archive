Path: msuinfo!harbinger.cc.monash.edu.au!aggedor.rmit.EDU.AU!edna.cc.swin.edu.au!saturn!alan
From: alan@saturn.cs.swin.oz.au (Alan Christiansen)
Newsgroups: sci.crypt
Subject: Re: Encryption from Hash Functions
Date: 22 Mar 94 12:36:02 GMT
Organization: Swinburne University of Technology
Lines: 143
Message-ID: <alan.764339762@saturn>
References: <CMvq7M.K38@hpcvsnz.cv.hp.com>
NNTP-Posting-Host: saturn.cs.swin.oz.au

ericb@lsid.hp.com (Eric Backus) writes:


>		    Encryption from Hash Functions
>		    ==============================

>This topic has been visited once or twice before in sci.crypt.  In
>particular, I remember Phil Karn proposing a three-round MD5-based
>encryption scheme.  But I haven't heard anything recently, and the
[]


>Due to rather stupid export laws in the US, it is illegal to export
>encryption software.  However, it is NOT illegal to export hash
>functions.  This got me to thinking: suppose we design an encryption
>system that is extremely simple, and relies on a cryptographic hash
>function for its strength?  There are a number of advantages to this:


>Encryption Method
>-----------------
[ The specific algorithm which prompted this generalisation. ]

A variety of SEPERATE messages posted as one to save bandwidth.
 
All members of the public are hereby granted licence to utilise 
intellectual content and copyright of these messages. For the 
following purposes. Display in any public forum. As a basis 
for placing another good crypto algorithm in the public domain.
 Private research. Self or public education. Directly using this 
as a basis for an algorithm or as a text from which profit is to 
be derived is forbidden unless acknowlegement of the sources is made. 
ie This is public I want it to stay that way. Money grubbers watch out. 
Anyone else, go for it.
 
 
Message 1.
 
Encryption algorithm derived from deterministic functions.
 
A message is to encrypted. (for tansmission or storage or etc.)
At any point in the message. Determinsitic algorithm(s) are used 
to generate a Block of Data from all the previous encrypted message,
 The Secret Key and The PlainKey. It is not neccesary to use all the
 data to generate any one Block of Data.
The Block of Data is combined with the message by some reversible
 mathematical algorithm. 

It has then been encrypted.

Decryption is performed at the other end by doing the following.
Using: The secret Key (which was transimitted/stored by some secure means ) 
Using: The Plain Key which can be transferred/stored by any means. 
It can be secret too. It can be transmitted as plain text. 
It may be extracted from a one time pad of plainkeys.
 All variations are trivial. 

Using: All the message that has been sent/stored to date. 
The decryptor can produce the same Block of Data the encryptor
 used. It can then invert the reversible mathematical function 
and extract the message.



 
Message 2. (In no way restricts the scope and meaning of Message 1)
 
These are some examples to clarify things for the mathmatically 
illiterate. (probably includes me ;-)
 
By a Deterministic algorithm I mean always produces the same output 
for the same input on all relevant machines. Input in this sense also
 includes any state data the algorithm/code holds internally between 
calls. Eg	
cos(N^Pi) is likely to give different results on different machines. 
Wheras	{A=6*4; while(A>7) A-=8; } A= =3 Always on all machines
 
Determinsitic algorithm(s) is somewhat silly. Combining any two 
algorithms in some sense just makes 1 big algorithm.
 
A non exhaustive list of reversible maths functions. 
F is a mathematical operation. B is the reverse operation. 
F(M,Bd) = EM        =>    B(EM,Bd) = M
(in relation to the algorithm in msg 1, M would be the message, 
Bd the Block of Data, and EM the encrypted message.)
Many such operators exist. 
F +  => B -         F xor => B xor      etc.
The operator may even be a lookup table.
It is not neccesary that the operator be a 1:1 mapping. 
(It is probably better if it is.)
Illustrative eg   If M and Bd are N bit numbers and F is multiply 
with a modulo N bit result the operation is not usually reversible 
(probaly not ever but I cant be bothered proving it the point is moot.) 
 If F is a multiply with a 2N bit result the operation is clearly 
reversible with a 2N/N bit divide. Using this reversible mathematical 
operation will render the entire encryption useless. 
There are good and bad reversible mathematical functions for this 
purpose. If two mathematicians sit down with a list of known operators 
and work from oposite ends the first one to find one of the good 
reversible operation would clearly not have the exclusive right to 
its use. Searching the known algorithms for good ones is a menial task. 
 
Any function that has or can be used with a one time pad could be used
 as the reversible maths operator.
 
The Algorithm in message 1 could perhaps be best understood by
 cryptologists as a kind of one time pad algorithm where the one time 
pad data is created in a crypto hard to reverse way from the plainKey 
(a session key which should be ok to transmit as plain text,) a secret
 key, and all the message transferred so far perhaps all the data since
 we started sending data 3 years ago. If all the data ever sent was 
considered as a single message then only one plain key would ever be 
needed and could be secret just as easily as the secret key was.
 
 
The deterministic algorithms are the problem.
A number of these exist in the public domain.
Hashes.
Just how to combine the secret Key plain key in the best way that
add to rather than subtracts from the strength of the Hash is
a part I am hardly qualified to speak.

I invite anyone with knowlege and skill they feel generous with
to chuck their hat in the ring and suggest just how this should
be done cheaply.(fast) 
There have been two suggestions already.
I like the idea of more suggestion as its cuts more ground out from
under any future patent in this corner of crypto.


Alan
i 
 

>-- 
>				Eric Backus
>				ericb@lsid.hp.com
>				(206) 335-2495
-- 
                           |  This space was intentionally left blank,
                           |  until some silly included a self descriptive
                           |  self referential self referential self ...
                           | ... Stack overflow. Executing cleanup rm *.*
