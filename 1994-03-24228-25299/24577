Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson; CMSC (G))
Newsgroups: sci.crypt
Subject: Re: The Design of Penknife
Date: 10 Mar 1994 19:53:52 GMT
Organization: University of Maryland, Baltimore County
Lines: 89
Distribution: World
Message-ID: <2lntsg$bs@news.umbc.edu>
References: <2lbvd3$1bg@indial1.io.com>
NNTP-Posting-Host: umbc7.umbc.edu
X-Newsreader: TIN [version 1.2 PL2]


Terry Frank Ritter (ritter@indial1.io.com) wrote:
:  The Penknife Cipher Design -- An Error-Resilient Stream Cipher

Since it's posted here, I guess comments on Penknife are invited.

Penknife is a system who's time has long since passed.  I didn't
analyze the cipher, but I see two major flaws in the design of
the system: the 63 bit key and the monolithic design.  The short
key is such an obvious defect that I'll say no more about it
here.

The future of communications software belongs to modular, open
designs.  Penknife contains several custom pieces for which
established standard components would serve better, including:
     Cipher,
     Pass-phrase to key transform,
     Error Control,
     E-Mail Network Encoding.  

It seems to have no way to change any of these pieces without
breaking every existing Penknife program.  There's also no path
for adding public key distribution, compression, authentication,
or other features.

Compare this to the design of Privacy Enhanced Mail (PEM) in
which the format of messages, the key distribution system, and
the ciphers employed are as independent as possible.  The message
format has self-documenting fields which allow the standard to
evolve.  The ciphers and other crypto-operations are built using
established components.  If any part of the system proves flawed,
replacing it will be reasonably easy, though possibly not
painless.

Consider the type of error control Penknife offers:
:  Re-origination allows
:  a cipher to re-synchronize after transmission error and recover
:  the undamaged parts of a message.  This is especially necessary
:  when ciphering low-level Internet Protocol (IP) frames (or other
:  network frames), which often arrive out of sequence.  

Does Penknife deal with IP packets ?  Of course not.  E-mail
transports, such as Simple Mail Transfer Protocol (SMTP), use
reliable stream services such as Transmission Control Protocol
(TCP).  Error control is essential in many kinds of
communication, so it's implemented where it will serve them all.
Why use the amateur error recovery in Penknife when standard
methods give you error free e-mail ?

Why does one need an e-mail oriented cipher at all ?  Just what
special defects does IDEA have when used for e-mail ?

ASCII-only e-mail is not the system of the future.  For now, any type
of binary file, not just ciphertext, has to be ASCII encoded to send
it via SMTP.  The proper place for the encoding is in a standard
module not in the cipher.

In modern communications systems, well designed components call
on the services of other components, and provide a service which
integrates well with the rest of the system.  PEM, though not
perfect, is a pretty good example of this.

A a side note, I know Mr. Ritter doesn't like the "--BEGIN
CIPHERTEXT--" and "--END CIPHERTEXT--" bracketing of PEM, but
these serve the important purpose of letting the user know what's
going on.  PEM is intended to be integrated into an email system,
and available to novice users.  The self-documenting style helps
users understand that the uuencoded lines are not errors.

Finally a note about implementation:
:  The current Penknife implementation is a relatively small (45K),
:  relatively fast (20 KBytes/sec on a 386/25), command-line program
:  for DOS on IBM PC-type machines.  Inner ciphering loops are
:  written in hand-optimized assembly-language for best speed.

Note that standard ciphers like DES and IDEA can equal or match
this speed.  Because they are widely used, people (like me) have
put a lot of effort into implementing them efficiently.

My conclusion is that PEM is not a serious commercial design.  I
would urge people who want to implement cryptographic systems to
work in the modern world of components and standards.  There's a
lot more benefit to be gained by using available modules to
implement PEM within a popular news reader than by building a
monolith like Penknife.

--Bryan Olson


