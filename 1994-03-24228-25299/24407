Path: msuinfo!agate!zabriskie.eecs.berkeley.edu!spp
From: spp@zabriskie.eecs.berkeley.edu (Steve Pope)
Newsgroups: sci.crypt
Subject: Re: Better Keys
Date: 4 Mar 1994 19:24:33 GMT
Organization: U.C. Berkeley -- ERL
Lines: 27
Message-ID: <2l81th$945@agate.berkeley.edu>
References: <199403031815.SAA04958@an-teallach.com> <CM5I5F.9nx@cogsci.ed.ac.uk>
NNTP-Posting-Host: zabriskie.eecs.berkeley.edu

richard@cogsci.ed.ac.uk (Richard Tobin) writes:

>> Nice try but it doesn't help :-)  What you need is to *insert* the
>> requisite number of random bits to start with, not pull more out; if
>> you have a deterministic algorithm, making a second call to random()
>> to get more data doesn't help.  Ideally you want an RNG with <n> bits
>> of internal state, and you want to initialise those bits with as
>> close to truly random bits as you can find from your system.

>Well, the unix function random() *does* have more than 32 bits of
>state (up to 2048), even though the value returned only has 31.  And
>you *can* initialise all of them.  Whether using consecutively
>generated numbers is a good idea I'm not sure.

I think we all agree that when using a random generator to emit
a sequence of key updates, one would initialize it with a "truly" 
random value.

random() allegedly has a period of something over 2**69.  This
implies to me it might be suitable for updating, say, 56-bit
DES keys, but not 128-bit IDEA keys or 168-bit TDES keys.

That's only my somewhat amateur opinion though.  



Steve
