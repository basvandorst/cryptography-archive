----------------------- NEWDES.DOC FILE V 1.2 ---------------------------

Introduction:

    NEWDES is an encryption program for IBM compatible PC's.
Because of the low throughput of the DES (Data Encryption Standard)
when implemented in software, alternative encryption schemes have
been devised. One alternative was suggested by Robert Scott in
Cryptologia (Jan. 1985, pp. 75-90). His scheme was chosen for this
program because it is fast and relatively simple. (NEWDES.exe encrypts
at about 4 Kbyte/sec on a 20MHz 286.)


                                   Wayne Branagh 1991
                                umbranag@ccu.umanitoba.ca


FORMAT:

   NEWDES option filename -ppass1 -qpass2 -kon -koff -doutdir

where:
   option   = e to encrypt, d to decrypt

   filename = The filename to encrypt or decrypt. Wildcards (*,?)
          can be used in the filename. For encryption, the
          encrypted file has the same name as the input file, but
          will have the extension of ".nds" (eg. encrypting
          "test.txt" will produce a file "test.nds"). Newdes.exe
          will not encrypt itself (or any file with the name
          "newdes.exe"). When decrypting files, only files with the
          extension ".nds" will be examined. If the input filename
          extension is omitted when decrypting, the extension
          ".nds" will be assumed.

   -ppass1  = Pass1 is the first password. Passwords can be up to 15
          characters in length, and can be upper or lowercase
          letters, numbers, symbols, or hexadecimal values (entered
          via \xff, where ff can be a hex number in the range 
          00-FF). Passwords are case-sensitive.

   -qpass2  = Pass2 is the second password. (OPTIONAL). The
          restrictions for the first password apply here too. If a
          second password isn't entered, a default password is
          used.

   -kon, -koff = Toggles deletion of input file after encryption or
          decryption. (OPTIONAL). The default value is -kon. If  
          -koff isn't included in the command line, the input file
          is deleted after it is encrypted or decrypted. 

   -doutdir = Output directory (OPTIONAL). This is the path where
          the output files are to be placed. If the -d option is
          not given, the output files  will be placed in the
          current directory.

NOTES:
   - Parameters denoted as OPTIONAL do not have to be entered.

   - Spaces are used to separate options.

   - NEWDES will not encrypt or decrypt hidden files.
   
   - If one of "option", "filename", or "-ppass1" is not given, a
     page of instructions will be displayed.

   - The options -p, -q, -k, and -d can be entered in any order.

   - Even though the input file is erased and can't be recovered
     using products like DOS 5.0 Undelete, it is possible to see 
     parts of the original file using a sector editor.
     I would recommend encrypting the file in a RAM drive, then
     rebooting the machine.

   - Even if it is annoying to use longer passwords and include
     hexadecimal values, using them does increase the security.  It
     is good practice not to rely on the use of simple passwords
     such as names, or single words. Use a mixture of letters,
     numbers and symbols, the serial number on your "lucky"
     dollar bill, or even the UPC symbol from a favorite product.


Examples:

     newdes e *.* -phomer\x01simpson -df: -q21slpDy2 -koff 
     newdes d *.nds -pbad
     newdes e comm?nd.com -dc:\encrypt -pQ3h5tcpp-
     newdes d c?mmand -dc:\encrypt\ -p565bcxp--)


MISCELLANEOUS:

Fees:

    This is FREEWARE. If you find a use for it, great! I wrote this
program for my own curiosity, not to further my financial status. I 
only ask that the doc file be distributed along with the program.


Disclaimer:

    This program comes AS IS. I make NO guarantees (expressed or
implied) as to the suitability of this program for a particular
application, machine, operating system or whatever! If you don't
like the results of the program, DON'T SUE ME! (Remember what you
paid for it?).

I've tested the program on several 286 and 386 machines, and the
only time I couldn't get the plaintext file back, happened when I
forgot the passwords or mistyped them.


How It Works:
      
    As stated earlier, NEWDES uses the encryption algorithm
suggested by Robert Scott in Cryptologia, Jan 1985. However , I
have made some changes. 
    First of all, rather than use his set of values for the f function,
I generated my own values using his generation algorithm on page 83 of 
the paper. If his encryption scheme isn't secure, then changing 
these values won't make any difference, but for the time it took to 
change them, it seemed like a worthwhile alteration.
    NEWDES actually uses 3 passwords in the encryption of the input
file. The two user-supplied passwords are combined, along with some
random values, to produce a third, internal password. If the second
password isn't supplied by the user, a default password is used.
The internal password is different for every encryption, so a file
won't be encrypted the same way twice, even if the same user-
supplied passwords are used. Besides each data block (of 8 bytes)
being encrypted four times, the way the blocks are encrypted also
varies. Based on the values of the plaintext, the order in which
the passwords are applied will vary for each data block.
     The blocks of the input file are linked together during the
encryption, so if a byte of data is changed, the program will know
during the decryption process, and display the message "***
Interblock link failed. File could be corrupt ***".  If this
occurs, the encrypted data file will not be deleted even if the   
"-kon" option was given. The presence of the link causes the
encrypted file to be somewhat larger than the plaintext version. If 
this increase in size is a problem, I suggest running the file to be 
encrypted through some compression program like ZOO, ARJ, or LZH
first.
     Once the program starts executing, the command line, and the
screen are cleared. So, after execution is completed, pressing F3
won't display your password(s). As well, interrupt 23H (called when
Ctrl-C is pressed), is bypassed, so the program can't normally be 
interrupted.
     In addition, the input file is rewritten, so it's not possible to 
use UNDELETE to recover it. It is possible though if you have a 
program that allows you to view the actual sectors on the disk, to
see parts of the input file. For this reason, I recommend performing
an encryption in a RAM drive, and rebooting the machine. If you're
doing a decryption, this isn't so important. (If they couldn't 
decrypt the file before, then seeing parts of the deleted file won't
matter.)


I'll keep updating and revising the program from time to time, so
if you use this program, drop me a line. I might have a later
version ready (the Windows version is about half done). Drop me 
a line if you've found a bug, or if you just think there's a 
particularly annoying feature in the program that should be changed.


Cheers.

Wayne Branagh Oct. 1991         Internet: umbranag@ccu.umanitoba.ca

                   ----------oOo----------- 
    
