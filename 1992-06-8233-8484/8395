Newsgroups: sci.crypt
Path: msuinfo!caen!destroyer!gumby!wmu-coyote!john
From: john@sol.cs.wmich.edu (John Kapenga)
Subject: Re: IBM-PC flawless true random number generator
Message-ID: <1992Jun22.212341.892@sol.cs.wmich.edu>
Organization: Western Michigan Univ. Comp. Sci. Dept.
References: <2670@accucx.cc.ruu.nl> <1992Jun22.144254.1999@nntpd.lkg.dec.com> <2672@accucx.cc.ruu.nl>
Date: Mon, 22 Jun 1992 21:23:41 GMT

We all should take as given that hardware random number generators are
very very hard to do right, but until you know what someone has done, don't
assume he has done it wrong, especially when he gives source code away.

What needs to happen to insure confidence that the generator does not
sometimes produce a bad subsequence? Perhaps:

1) Theory of the generator needs to be abstracted with a hardware model.
2) Theory accepted - (via analysis or at least by failing to be broken,
   as in the case of DES)
3) Hardware model accepted as correct for all machines the program will run on.
4) Statistical testing to build confidence.

Very generic, and all required. 

Nico sent me his code (thanks) and I'll run a bank of tests on it in a week
or so.  I have a system set up to pump random streams into a 128 node nCUBE
and do many of the common tests as well as a few new ones. 

I'm not sure how much of 1) or 3) I'll try to do, it depends what I see in
the code. Perhaps Nico will expand a bit, write a paper, or it might make a
neat net authored paper - yea, 4.203 authors (Nico first) ;-)

john
P.S. I am collecting serial and writing parallel c code for uniform random
     number testing. Any extra pointers or (serial/parallel) code is welcome.
-- 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
John A. Kapenga                   Department of Computer Science
Ma Bell:  (616)387-5657           Western Michigan University
Internet: john@cs.wmich.edu       Kalamazoo, MI 49008
