Newsgroups: sci.crypt
Path: msuinfo!caen!malgudi.oar.net!news.ans.net!yktnews!admin!wo0z!lwloen
From: lwloen@rchland.vnet.ibm.com (Larry Loen)
Subject: Missing subject header
Sender: news@rchland.ibm.com
Message-ID: <1992Jun16.150920.19026@rchland.ibm.com>
Date: Tue, 16 Jun 1992 15:09:20 GMT
Disclaimer: This posting represents the poster's views, not necessarily those of IBM
Nntp-Posting-Host: wo0z.rchland.ibm.com
Organization: IBM Rochester

In sci.crypt <m04430o@fido.asd.sgi.com> DES Keysearch machines, explain ,
Nelson Boyard writes:

> (in) li@oracorp.com (Li Gong) writes:
>>One must realize that *if* the compression algorithm is known to the
>>attacker (which is often the case), then he can also recognize things
>>in compressed form.  

>But only IF the compression algorithm is known to the attacker before the
>attacker builds his massively parallel key search engine.  It's easy for
>the attacker to change his mind, less easy for him to change thousands of
>chips.

Classically, it is assumed that all details about a cryptography system are
known to the attacker except the particular key used.  In a commercial
environment, this would certainly be a sound assumption as most companies
would have to standardize just about everything but the key.  Thus, any
algorithm used to "precompress" the data must be assumed to be known.

It is often quite possible to find data with lots of zeroes or space
characters and these will often themselves have large, repeatable outputs
in a typical compression algorithm.  Note that the compression
algorithm will not and need not repeat bytes.  The problem is one of 
predictability (or, being predictable around a small number of values or
being somehow deducable even post-encryption).  For a DES attack, one must
merely be able to predict what any eight bytes of plaintext were.  This may
render any compression whatever moot, because the compression obviously
happens before the encryption step; the compression output is the "plaintext"
that the massive parallel machine works upon.  This may sound hard to do; it
probably is, but it is the sort of thing that has been done before.

Remember, too, that the attacker often is able to capture things like the 
encrypted form of a press release and then compare the entire text with the
ciphered/compressed text.  While such post-analysis won't defeat you now,
what is learned may defeat you next time.  As a trivial "for instance", such
analysis, by discovering the amount of compression, could greatly narrow the
range of compression algorithms employed and may even enable "which one" to be
confidently predicted.

Now, if the compression itself could be a variable, keyed value, there might
be something of interest to discuss.  What we have, in this case, is no 
longer DES, but DES prime.  While of academic interest, it will be a long
"vetting" process to embelish DES because it must be certain that any
additions do not weaken the overall system.  Such a weakening is unlikely, but
has been observed when different encryptions have been combined in the past.
It would be, however, of some interest if it was not just good compression, but
if the output was sufficiently "unpredictable" to make the massive parallel 
machine have nothing reliable to feed upon.  Possible, but non-obvious to do. 

Finally, it is quite possible for a couple of individuals to agree informally
to perform some sort of compression.  While such a compression may well be
kept secret among this small group, such secrecy add-ons is not of interest
in the general case where practical implementation quickly brings the 
classical assumptions (everything but the key is known) into play.  And,
a casual reading of the history of illicit decipherment quickly convinces one
that the classical assumptions are worthwhile, even for the case of a couple
of individuals.  Sometimes, these sort of add-ons are actually out-guessed, one
way or another.

-- 

Larry Loen       All opinions expressed are quite decidedly my own, not my
                 employer's.
