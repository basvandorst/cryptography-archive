Path: msuinfo!caen!zaphod.mps.ohio-state.edu!mips!swrinde!network.ucsd.edu!qualcom.qualcomm.com!chicago.qualcomm.com!karn
From: karn@chicago.qualcomm.com (Phil Karn)
Newsgroups: sci.crypt
Subject: Re: Personal Identifiers - a practical application
Keywords: identification, CRC, cyclic redundancy code
Message-ID: <1992Jun14.173836.22569@qualcomm.com>
Date: 14 Jun 92 17:38:36 GMT
References: <1081hpINN39d@network.ucsd.edu> <11fafmINNpnb@agate.berkeley.edu>
Sender: news@qualcomm.com
Distribution: na
Organization: Qualcomm, Inc
Lines: 29
Nntp-Posting-Host: chicago.qualcomm.com

In article <11fafmINNpnb@agate.berkeley.edu> amoreno@ocf.berkeley.edu (Andre S. Moreno) writes:
>
>A good way to identify students is to take their Social Security #, or
>"Lastname,_Firstname,_MiddleInitial" (where "_" is a required space), and then
>run either a Federal standard CRC-32, or CCITT polynomial on this unique data.
>I would personally recommend using CRC-32, because it is the U.S. telecomm standard.

This is not good enough, at least with Brian's user population (circa
40,000).  If you assume that CRC-32 is a "random" mapping function,
then according to the Birthday formula the probability that there is
at least one collision in a population this size is about 17%.  This
seems unacceptably high. If you're willing to tolerate a collision
probability of no more than .1%, then the hash code must be at least
40 bits long.  This seems too large to be convenient.

BTW, here are some formulas for the Birthday problem that I worked out a
few months ago when Brian asked me for help on the same problem.

Probability of collision >= 1 - exp(-k*(k-1)/(2*m)), where
	k = size of population
	m = range of hash function (e.g., 2^32 for a 32-bit hash function)

Solved for m:
	m >= -k*(k-1)/(2*ln(1-p)), with p = max acceptable collision prob

Solved for k:
	k <= (1 +- sqrt(1-8*m*ln(1-p)))/2

Phil
