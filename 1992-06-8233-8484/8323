Newsgroups: sci.crypt
Path: msuinfo!uchinews!linac!pacific.mps.ohio-state.edu!zaphod.mps.ohio-state.edu!mips!wdl1!wdl39!mab
From: mab@wdl39.wdl.loral.com (Mark A Biggar)
Subject: Re: Trustworthy random number generation
Message-ID: <1992Jun12.170843.1611@wdl.loral.com>
Sender: news@wdl.loral.com
Organization: Loral Western Development Labs
References: <22658@castle.ed.ac.uk>
Date: Fri, 12 Jun 1992 17:08:43 GMT

In article <22658@castle.ed.ac.uk> aiadrm@castle.ed.ac.uk (Alasdair D. McIntyre) writes:
>I apologise if this is the wrong newsgroup to post this problem to, but
>couldn't think of one more appropriate.  Anyway, here goes.  I recently
>thought up the following interesting problem while thinking about an
>e-mail based version of backgammon (a dice based board game).
>
>Posit: two parties, A and B, on either end of a comms link.
>
>Problem: The two parties are to agree upon a random number, K, of some
>         fixed number of bits, N;  any bias which either party may exert
>         upon the final value for K may present her with an advantage,
>         which is to be avoided.  Once a value for K has been fixed, the
>         parties will proceed to agree on a new K, independent of the
>         previous one, or else terminate the process.  Note that a
>         common pseudo-random number generator will not do, since
>         one of the parties could run it ahead of time to obtain
>         future K_i's (ie dice rolls).

The solution that my brother and I came up with was to allow playing war
games over a net.  In a lot of war games attack results are determined by
crossreferencing the attacker vs defender force ratio with a die role in a
table.  So the problem was fairly genreating die roles in such a way that
niether side could cheat.

With games it is sufficient to determine after the fact that no cheating is
going on (You just don't play future games with cheats.) 

First you agree on a common RNG and a algorithm to convert RGN results to
die roles.  Each player picks a seed for the RNG, embedds the seed value in a
message like:

The seed I chose of our game of krigspel is NNNNNNNNNNNN.

encrypts the message and sends it to the other player.  On my move when I
specify an attack I include a small integer value associated with that attack.
when the other player recieves my move, he generated the attack results by
interating the RNG the number of times associated with the attack and using that
value to genreate the die role. he then returns the result to me.  At the end
of the game we exchange encryption keys, and now can by duplicating the other
players RNG sequence verify that no one cheated.

You embeb the seeds in a larger message to make is effectivly imposible for
the other person to change his seed the fact by lieing about the encryption
key.

so one secure way to generate a agreed on random number is to each generate
a number, exchange encrypted messages containing the numbers, then exchange 
the encryption keys, decrypt and xor the two value to get the final result.
This is like digitial signitures in that is prevents changing your mind after
the fact.

--
Mark Biggar
mab@wdl1.wdl.loral.com


