Path: msuinfo!caen!zaphod.mps.ohio-state.edu!sample.eng.ohio-state.edu!purdue!yuma!csn!copper!cudnvr!dwing
From: dwing@cudnvr.denver.colorado.edu (Dan Wing)
Newsgroups: sci.crypt
Subject: Re: Determining incorrect passwords
Message-ID: <1992Jun15.102708.1345@cudnvr.denver.colorado.edu>
Date: 15 Jun 92 10:20:08 GMT
References: <49907.1649228475@kcbbs.gen.nz>
Lines: 30

In article <49907.1649228475@kcbbs.gen.nz>, 
Peter_Gutmann@kcbbs.gen.nz (Peter Gutmann) writes:

> I've written an application which performs various types of encryption on,   
> among other things, data blocks which contain all sorts of control   
> information.  The problem is that when conventional-key encryption is used   
> and a user enters an incorrect password, this control information is   
> scrambled beyond all recognition.  It passes a CRC check (since it hasn't   
> been corrupted in any way), but the control information itself, once it's   
> passed through the decryption process, is just random garbage.  
>   
> The application takes the (valid, as far as it knows) control info, tries   
> to use it, and (usually) grinds to a halt (there are various sanity checks   
> built in which catch a lot of problems, but most of the data looks   
> reasonable enough to get used).  
>   
> Now the question: Is there any way of handling this use of incorrect   
> passwords without seriously compromising the security of the encryption?  

How about encrypting the password, using a one-way function, and storing
that with the encrypted data.  Then, when the user tries to decrypt the data,
you can first check to ensure the correct password was entered (this is a
one-way function, so you'll have to compare the encrypted password to the
encrypted password), and then you'd be sure of the correctness of the 
password.

-- 
-Dan Wing, Systems Programmer, University Hospital, Denver
 Internet: DWING@UH01.Colorado.EDU, or DWING@cudnvr.denver.colorado.edu
 BITNET:   WING_D@UCOLMCC, or DWING@CUDENVER
