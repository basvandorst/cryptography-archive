Newsgroups: sci.crypt
Path: msuinfo!uchinews!ncar!destroyer!gumby!wupost!uwm.edu!psuvax1!fortran.cs.psu.edu!so
From: so@fortran.cs.psu.edu (Nicol C. So)
Subject: Re: Trustworthy random number generation
Message-ID: <Bpqnw3.JAL@cs.psu.edu>
Sender: news@cs.psu.edu (Usenet)
Nntp-Posting-Host: fortran.cs.psu.edu
Organization: Penn State Computer Science
References: <22658@castle.ed.ac.uk>
Date: Fri, 12 Jun 1992 15:19:14 GMT
Lines: 25

In article <22658@castle.ed.ac.uk> aiadrm@castle.ed.ac.uk (Alasdair D. McIntyre) writes:
>Posit: two parties, A and B, on either end of a comms link.
>
>Problem: The two parties are to agree upon a random number, K, of some
>         fixed number of bits, N;  any bias which either party may exert
>         upon the final value for K may present her with an advantage,
>         which is to be avoided.  Once a value for K has been fixed, the
>         parties will proceed to agree on a new K, independent of the
>         previous one, or else terminate the process.  Note that a
>         common pseudo-random number generator will not do, since
>         one of the parties could run it ahead of time to obtain
>         future K_i's (ie dice rolls).

This is a solved problem, if one-way function exists (or secure commitment
is possible).

To jointly generate a number over which neither party has control:

    1. A chooses random number x and computes f(x), where f is
       a one-way function.
    2. A sends f(x) to B.
    3. B chooses random number y and send y to A.
    4. A sends x to B and B verifies that f(x) is the number he received
       in step 2.
    5. Both parties compute x XOR y, which is the jointly generated number.
