Path: msuinfo!caen!zaphod.mps.ohio-state.edu!pacific.mps.ohio-state.edu!linac!att!ucbvax!ulysses!ulysses.att.com!smb
From: smb@ulysses.att.com (Steven Bellovin)
Newsgroups: sci.crypt
Subject: Re: DES Keysearch machines, explain
Keywords: DES break brute force exhaustive search Diffe Hellman parallel engineering
Message-ID: <16809@ulysses.att.com>
Date: 10 Jun 92 13:08:01 GMT
References: <1992Jun8.100154.5417@gpu.utcs.utoronto.ca> <12357@gazette.bcm.tmc.edu>
Sender: netnews@ulysses.att.com
Distribution: na
Lines: 38

In article <12357@gazette.bcm.tmc.edu>, jstevens@crick.ssctr.bcm.tmc.edu (Jason Philip Stevens) writes:
> While a specialized chip could be made that would quickly decrypt a 
> particular string with a key, it seems to me that the difficult and
> time-consuming task would be to detect whether or not the results made
> sense.  In decrypting a string with the improper password, is it not 
> possible that the result would have "plaintext" in it by random result?

By chance, I sent an answer to that question to a mailing list.  Here
it is, verbatim:

	In fact, that's usually pretty easy.  Even assuming the
	cryptanalyst doesn't have some known or probably plaintext --
	and generally, he or she might -- there are other ways to
	tell.  The general idea is that plaintext has ``redundancy'', a
	concept formalized by Shannon.  But one doesn't need
	formalities to understand.  Tell me, which is an English word,
	``hello'' or ``jgnnq''?  You can tell, and so can a computer,
	by looking at things like the letter frequency, bigram and
	trigram frequency, etc.  It's even easier given an entire
	message.  (Incidentally, if you want an example, dig up a copy
	of the netnews source; the ``caesar'' command uses exactly this
	algorithm.) Structured messages have their own weaknesses --
	type fields, where only a few values are legal, length codes
	that must decrypt to a number legal for a message of that
	length, numeric values with many high- order zeros or ones,
	etc.  (The ability to tell whether or not a message is a legal
	decryption of some ciphertext is an important subtheme in a
	recent paper Michael Merritt and I presented at the 1992
	Oakland conference on Security and Privacy; those of a
	theoretical bent may want to ftp dist/neke.ps from
	research.att.com.  The paper is entitled ``Encrypted Key
	Exchange: Password-Based Protocols Secure Against Dictionary
	Attacks''.)

In this context, I'll note that you don't need an absolutely correct
answer from the high-speed cruncher; all you need is a reasonably small
set of good candidates.  Then you can use the output of that stage to
look at more of the message, either automatically or by hand.
