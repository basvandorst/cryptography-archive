Path: msuinfo!caen!zaphod.mps.ohio-state.edu!cs.utexas.edu!sun-barr!olivea!sgigate!odin!shinobu!fido!bolyard.wpd.sgi.com!nelson
From: nelson@bolyard.wpd.sgi.com (Nelson Bolyard)
Newsgroups: sci.crypt
Subject: Re: DES Keysearch machines, explain
Keywords: DES break brute force exhaustive search Diffe Hellman parallel engineering
Message-ID: <lt2726k@fido.asd.sgi.com>
Date: 10 Jun 92 18:34:43 GMT
References: <1992Jun8.100154.5417@gpu.utcs.utoronto.ca> <12357@gazette.bcm.tmc.edu> <16809@ulysses.att.com>
Sender: news@fido.asd.sgi.com (Usenet News Admin)
Distribution: na
Organization: Silicon Graphics, Inc., Mountain View, CA
Lines: 40

smb@ulysses.att.com (Steven Bellovin) writes, concerning the question of
how one ascertains when one has obtained the intended plaintext, that one
(or one's machine) studies the decrypted output, looking for redundancy,
in such things as letter and bi/trigram frequency, or checking for valid 
values in "structured messages".

Of course, any long-time readers of this newsgroup will immediately think
of compression as a solution to that.  And if one is concerned that it is
possible to recognize the output of the **IX compress program from the
first few hundred bytes, essentially a structured message, then the old
solution of transposing the compressed data (e.g. moving the first N bytes 
to the end of the file) springs to mind.

I know that when analyzing the security of a cryptosystem, cryptanalysts
usually make the asumption that the _entire_ algorithm used by the
encryptor is known.  But when designing and constructing a massively
parallel brute-force exhaustive search machine, it would seem necessary to
design the machine to be able to recognize a wide variety of types of
plaintext.  One doesn't want to spend N*10^7 dollars, only to produce a
machine that only decrypt ordinary ASCII plaintext, does one?  Seems
logical that the machine's search speed is determined by its slowest
function, so the "is this the right plaintext" box needs to be as fast as
the DES decryptors, which suggests it would be as massively parallel as
the DES cracker itself.

Several people have postulated the existance of exhautive DES key search
machines, in use by various governments' agencies.  My questions are:

1.  How many different forms of plaintext is such a real-world machine
likely to be able to recognize?

2.  Can one make a DES-CBC encryption program thst effectively resists
attack by this machine simply by wildly transposing the bits of the
unencrypted plaintext (e.g. playing no respect to character boundaries) 
in some simple-but-unanticipated-by-the-machine's-designers way?

--
Nelson Bolyard      nelson@sgi.COM      {decwrl,sun}!sgi!whizzer!nelson
Disclaimer: Views expressed herein do not represent the views of my employer.
--
