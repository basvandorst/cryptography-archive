Newsgroups: sci.crypt
Path: msuinfo!caen!sol.ctr.columbia.edu!usc!cs.utexas.edu!hermes.chpc.utexas.edu!jonathan
From: jonathan@chpc.utexas.edu (Jonathan Thornburg)
Subject: Re: Sun /dev/audio as a random noise source
Message-ID: <1992Jun26.150305.19611@chpc.utexas.edu>
Followup-To: jonathan@einstein.ph.utexas.edu
Summary: use DES to "improve" semirandom noise?
Keywords: random noise bit generate hardware Sun /dev/audio DES
Sender: jonathan@einstein.ph.utexas.edu
Organization: U of Texas at Austin / Physics Dept / Center for Relativity
References: <OTTO.92Jun25025138@tukki.jyu.fi>
Date: Fri, 26 Jun 92 15:03:05 GMT
Lines: 32

In article <OTTO.92Jun25025138@tukki.jyu.fi> otto@tukki.jyu.fi
(Otto J. Makela) writes:
>I've done a bit of experimenting with a Sun /dev/audio (which is basically
>a 8kHz 12-bit sampled data packed by uLaw encoding to 8-bit data).  You can
>get some low-bit random noise by turning the record gain all the way up
>without a input device (microphone) connected or switched off.  This seems
>like a pretty resonable (though slow) way to produce "real" random numbers.
>
>A simple experiment is the pipeline
>	ulawtolin < /dev/audio | more
>which will give a series of small random numbers (around -100...100), which
>are pretty biased (seems lowest two bits tend to be zero etc.).
>
>What kind of a methods can you suggest for producing "clean" random
>bitstreams from this kind of biased data ?

How about using DES?  In other words,

	while (TRUE)
	{
	key = 56 (new) semirandom bits from /dev/audio
	data = 64 (new) semirandom bits from /dev/audio
	better_random[i++] = DES(key,data)
	}

This produces 64/120 = 0.533 output bits per semirandom input bit.


- Jonathan Thornburg <jonathan@einstein.ph.utexas.edu>
  ***** temporary alternate addr <jonathan@hermes.chpc.utexas.edu> *****
  University of Texas at Austin / Physics Dept / Center for Relativity
  and (for a few more months) University of British Columbia / Astronomy
