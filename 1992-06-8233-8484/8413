Path: msuinfo!netnews.upenn.edu!jvnc.net!darwin.sura.net!gatech!usenet.ins.cwru.edu!agate!ucbvax!ulysses!ulysses.att.com!smb
From: smb@ulysses.att.com (Steven Bellovin)
Newsgroups: sci.crypt
Subject: Re: generating one-time pads
Message-ID: <16871@ulysses.att.com>
Date: 24 Jun 92 18:03:44 GMT
References: <em.708842732@topgun> <60814@cup.portal.com> <1992Jun22.135040.15114@gandalf.ca>
Sender: netnews@ulysses.att.com
Lines: 49

There's a paper by Miklos Santha and Umesh Vazirani called ``Generating
Quasi-Random Sequences from Slightly-Random Sources''.  Unfortunately,
my copy doesn't indicate where it was published, except that was in some
IEEE publication in 1984, and the type style suggests a conference rather
than a journal.  Anyway, here's the abstract:

	Several applications require truly random bit sequences, whereas
	physical sources of randomness are at best imperfect.  We consider
	a general model for these *slightly-random* sources (e.g., zener
	diodes), and show how to convert their output into
	`random-looking' sequences, which we call *quasi-random*.  We show
	that quasi-random sequences are indistinguishable from truly
	random ones in a strong sense.  This enables us to prove that
	quasi-random sequences can be used in place of truly random ones
	for applications such as seeds for pseudo-random number
	generators, randomizing algorithms, and stochastic simulation
	experiments.

The algorithm allows for an adversary to introduce a bias 0<delta<1 in
the value of the output from the slightly-random source.  Anyway, here's
the algorithm:

	Input: m sequences of bits, each of length n

		x_11,...,x_1n
		...
		x_k1,...,x_kn
		....
		x_m1,...,x_mn

	Output: y=y_1,...,y_n

	for i = 1 to n do:
		y_i := parity(x_1i + ... + x_mi)
	end

In other words, you exclusive-or together the n-bit input words.

They also bound the bias of the output bits as being in the range

	[.5 - (1-2*delta)^m, .5 + (1-2*delta)^m]

*HOWEVER* -- they algorithm depends on the m input words being from
*different* slightly-random sources.  They also prove that ``there is
no algorithm to convert the output of a single slightly-random source
into quasi-random sequences, no matter how much bit compression is
allowed....  [There] is an adversary strategy so that the bias of the
extracted bit... is just as bad as any bit in the original source
output.''
