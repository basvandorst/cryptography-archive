Newsgroups: sci.crypt
Path: msuinfo!caen!sdd.hp.com!decwrl!csus.edu!netcomsv!mork!nagle
From: nagle@netcom.com (John Nagle)
Subject: Re: DES Keysearch machines, explain
Message-ID: <sp-l2c-.nagle@netcom.com>
Date: Mon, 08 Jun 92 08:01:35 GMT
Organization: Netcom - Online Communication Services  (408 241-9760 guest) 
Keywords: DES break brute force exhaustive search Diffe Hellman parallel engineering
References: <16774@ulysses.att.com> <1992Jun6.194147.7881@chpc.utexas.edu> <1992Jun7.184408.8925@cs.cornell.edu> <1992Jun7.195721.29395@chpc.utexas.edu> <1992Jun7.215415.13075@cs.cornell.edu>
Lines: 39

     The architecture of a brute-force DES cracker is simple, because
there's almost no intercommuncation.  All units are slaves to a control
CPU of modest capacity, which loads up each key-trying unit with the range
of keys to be tested and checks on the units periodically to see how they're
doing.  A simple bus/device register architecture will do the job.  It might
take a few minutes to load in a new problem, but so what?  Once the
thing is running, there's no intercommunication at all until some unit
sets its "I found it" flag, or everybody finishes without a find.

     As for fault tolerance, there are two approaches.  The simplest is
just not worry about bad units; if most of the units are working,
the odds are against the winning part of the keyspace being assigned to
a bad unit.  Alternatively, you can run test cases and find bad units,
then avoid them in parcelling out the keyspace amongst the units.
This is comparable to remapping bad tracks in disk formatting.

     On hardware architecture, an interesting goal might be to build a
16-unit DES cracker on a single chip capable of, say, 10 million keys
per second per unit.  Pins per chip is low; an 8-bit bus is enough.
Might even be able to use a 14-pin package, like a DRAM.  Envision these
things packed like DRAMS, but with a heat sink on each, a ceramic package,
and much higher airflow, and you've got the picture.

     How many do you need?  2^56 is 7.2E16.  Divide this by 10 million
keys per second per unit * 16 units per chip, and you get 450 million
chip-seconds needed.  This is 5,212 chip-days.  So we only need about
5,000 of those parts.  If we can put 128 on a board (a modest goal),
we only need 40 boards.  Standard rackmount card cages can hold 20
boards per cage, but we'll need big fan units and power supplies,
so we might only get one card cage per rack, for two racks.

     The end result is a machine that looks a lot like an old VAX 11/780.

     Is that chip buildable today?

					John Nagle


     
