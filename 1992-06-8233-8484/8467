Path: msuinfo!caen!sdd.hp.com!think.com!ames!agate!agate!phr
From: phr@soda.berkeley.edu (Paul Rubin)
Newsgroups: sci.crypt
Subject: Re: MD5, crypt() (was: New cancel algorithm ...)
Date: 27 Jun 92 22:35:59
Organization: CSUA/UCB
Lines: 30
Message-ID: <PHR.92Jun27223559@soda.berkeley.edu>
References: <1992Jun23.162627.5373@rwwa.COM> <BqGpyp.CCz@zoo.toronto.edu>
	<21642@oasys.dt.navy.mil> <BqJ6Mp.v9@zoo.toronto.edu>
NNTP-Posting-Host: soda.berkeley.edu
In-reply-to: henry@zoo.toronto.edu's message of Sun, 28 Jun 1992 00:56:46 GMT


   As far as I know, the only precise documentation for the password
   algorithm is its source... which is licensed software, under
   licensing terms that explicitly forbid publishing documentation on
   its innards without permission.  It is approximately DES, but there
   is enough undocumented detail to make duplication non-trivial.  I'm
   not aware of a redistributable clone.  It is, in any case, an
   obsolete method, if only because it is too fast.

I remember reading some document claiming the passwd algorithm is
DES iterated 25 times starting from a fixed string, using the password
as the key, with the two-character salt used to somehow perturb the DES
E-table to make the algorithm more resistant to someone doing
exhaustive search with a DES chip.  I don't remember whether the
E-table change is exactly specified but it may be feasible to reverse
engineer it from understanding DES (the E-table doesn't do very much).

I don't think that being too fast makes the passwd algorithm obsolete.
MD5 is supposed to also be fast, and if it isn't, hardware improvements
will make it fast.  The only reason speed is bad is dictionary attacks,
and dictionaries aren't growing nearly as fast as hardware speeds.
Secure passwords simply cannot be chosen from dictionaries.

Cloning the passwd algorithm is worthwhile because it would allow you
to share password files across a network with some machines using
Unix(tm) and some using a compatible Unix clone.  (The security-
related reasons to not want to do this are not always compelling).

If the Unix password encryption algorithm is not exactly specified
by POSIX, in my opinion it should be, for the reason above.
