Path: msuinfo!netnews.upenn.edu!jvnc.net!darwin.sura.net!europa.asd.contel.com!uunet!mcsun!uknet!edcastle!aiadrm
From: aiadrm@castle.ed.ac.uk (Alasdair D. McIntyre)
Newsgroups: sci.crypt
Subject: Trustworthy random number generation
Message-ID: <22658@castle.ed.ac.uk>
Date: 12 Jun 92 13:51:22 GMT
Organization: Edinburgh University
Lines: 63

I apologise if this is the wrong newsgroup to post this problem to, but
couldn't think of one more appropriate.  Anyway, here goes.  I recently
thought up the following interesting problem while thinking about an
e-mail based version of backgammon (a dice based board game).

Posit: two parties, A and B, on either end of a comms link.

Problem: The two parties are to agree upon a random number, K, of some
         fixed number of bits, N;  any bias which either party may exert
         upon the final value for K may present her with an advantage,
         which is to be avoided.  Once a value for K has been fixed, the
         parties will proceed to agree on a new K, independent of the
         previous one, or else terminate the process.  Note that a
         common pseudo-random number generator will not do, since
         one of the parties could run it ahead of time to obtain
         future K_i's (ie dice rolls).

Possible solutions:

     Discrete Exchange
         Each party generates a random number of length N bits
         by some private method (rolling a dice, sampling a noise
         diode, private large seed PRNG, even picking a number off
         the top of the head).  They then exchange these numbers,
         and agree to use the exclusive-or (or some other `fair'
         combining function) as the value for K.
         The problem now becomes one of ensuring that A sends K_a
         before receiving K_b, and symetrically B sends K_b before
         receiving K_a.  Otherwise, if for example A received K_b
         she could transmit DesiredValue .xor. K_b as his K_a, breaking
         trust.

     Interleaved exchange
         Each party exchanges alternate bits of their private
         K's, only sending a bit after receiving from their
         opposite number.  After the exchange of messages, the
         individual bits are combined to determine the global
         value of K.
         Now we have two problems: one party must initiate the
         exchange, this may put her at a (dis)advantage;  and
         knowledge gained early on in the exchange may give
         an advantage to one of the parties in biasing the
         outcome (really a variation on the first problem).

     Trusted bureau
         The third solution I came up with is to posit a third
         machine to which the parties have common access.  They
         each send a message requesting the next value of K to
         the machine, and it returns this value to each party.
         Alternatively each party sends its private key to the
         bureau, which then sends them to the opposite party
         once both have been received.
         This solution of course requires the existence of an
         appropriately trustworthy bureau, and it would be
         more elegant and more feasible to implement Trusted
         Random Rumber Generation (for want of a better tag)
         without such a device.

Does anyone out their have any thoughts on this?  Perhaps the
problem has already been solved a long time again?  Thanks for
any response.

- Alasdair -
