Newsgroups: sci.crypt
Path: msuinfo!uchinews!linac!pacific.mps.ohio-state.edu!cis.ohio-state.edu!news.sei.cmu.edu!fs7.ece.cmu.edu!crabapple.srv.cs.cmu.edu!PLAY.TRUST.CS.CMU.EDU!bsy
From: bsy+@CS.CMU.EDU (Bennet Yee)
Subject: Re: Trustworthy random number generation
Message-ID: <1992Jun12.163534.42881@cs.cmu.edu>
Date: Fri, 12 Jun 92 16:35:34 GMT
Organization: Cranberry Melon, School of Cucumber Science
Nntp-Posting-Host: play.trust.cs.cmu.edu
References:  <22658@castle.ed.ac.uk>
Reply-To: bsy+@cs.cmu.edu
Lines: 33

In article <22658@castle.ed.ac.uk>, aiadrm@castle.ed.ac.uk (Alasdair D. McIntyre) writes:
>I apologise if this is the wrong newsgroup to post this problem to, but
>couldn't think of one more appropriate.  Anyway, here goes.  I recently
>thought up the following interesting problem while thinking about an
>e-mail based version of backgammon (a dice based board game).
>
>Posit: two parties, A and B, on either end of a comms link.
>
>Problem: The two parties are to agree upon a random number, K, of some
>         fixed number of bits, N;  any bias which either party may exert
>         upon the final value for K may present her with an advantage,
>         which is to be avoided.  Once a value for K has been fixed, the
>         parties will proceed to agree on a new K, independent of the
>         previous one, or else terminate the process.  Note that a
>         common pseudo-random number generator will not do, since
>         one of the parties could run it ahead of time to obtain
>         future K_i's (ie dice rolls).

Let f be a one-way function.  A and B chose random numbers R_a and R_b
respectively.  They exchange f(R_a) and f(R_b) to ``commit'' to their
values.  Next, they disclose R_a and R_b to each other.  It is easy to
verify that R_a = f(R_a) and R_b = f(R_b), thus they can detect
attempts to change values.  Use bits inside of R = R_a xor R_b.

While o-w funcs are not proven to exist, there are many functions that
are thought to be hard to invert.  Discrete log is thought to be hard,
so pick modulus p (prime) and generator g, and let f(x) = g^x mod p.

-bsy

-- 
Bennet S. Yee		Phone: +1 412 268-7571		Email: bsy+@cs.cmu.edu
School of Computer Science, Carnegie Mellon, Pittsburgh, PA 15213-3890
