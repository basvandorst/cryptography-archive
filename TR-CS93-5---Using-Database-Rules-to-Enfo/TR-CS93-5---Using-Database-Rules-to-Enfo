Using Database Rules to Enforce Ternary Relationship Cardinality Constraints

				D.N. Hart

                       Computer  Science  Department
                            University  College
                     University  of  New  South  Wales
                   Australian  Defence  Force  Academy
                     Canberra,  ACT  2600,  AUSTRALIA

             Computer  Science  Department  Report  CS5/93


Introduction

In most real-life data models built using the popular Entity-Relationship 
technique originated by Peter Chen [Che, 1976], the vast majority of 
relationships are of binary or perhaps unary degree though occasionally 
relationships of ternary (and, very rarely, higher) degree occur too [Ull,1988 
p36].

The cardinality of unary and binary relationships is well understood, but 
while many treatments of entity-relationship data modelling include 
discussions of ternary and possibly higher degree relationships, the 
cardinality of such relationships is generally left unmentioned [e.g. Elm, 
1989], stated to be a simple extension of the binary case [Dat, 1990], or 
dismissed altogether as being meaningless [Haw, 1990].  Some authors [e.g. 
Mac, 1990; Teo, 1986] cover ternary relationships as well as their mapping 
into a relational database schema in some detail, but again treat their 
cardinality as a relatively straightforward extension of the binary case rather 
than in full generality as is done by Hart [Har, 1992].  A different approach 
has been adopted by Lenzerini & Santucci [Len, 1983] who treat ternary 
relationship cardinality in terms of the maximum and minimum participation 
of each entity type in the relationship as a whole, but without considering 
how the entity types are connected to each other (via the ternary 
relationship) in a pairwise sense.  This pairwise connectivity of the 
participating entity types is an important part of the semantics of the 
relationship and should be taken into account. both in the ER model and in 
the relational implementation based upon it.  This paper is concerned with 
how the cardinality of ternary relationships can be implemented in a 
relational database by means of database rules.

The cardinalities of unary and binary relationships in entity-relationship data 
models can be directly represented in the structure of a relational database 
schema through appropriate relation definition and correct placement of 
foreign keys [e.g. Bat, 1992 p319ff].  See, for example, Figure 1 which 
shows corresponding entity-relationship diagrams and relational schemas for 
typical unary and binary relationships of various cardinalities.  In this Figure 
the notation chosen shows referential integrity links as arrows, with each 
                                                              
foreign key at an arrow tail and the primary key to which it refers at the 
corresponding arrow head.

However, unlike the unary and binary cases, the cardinality of ternary (and 
higher) degree relationships cannot, in general, be captured directly in the 
relational schema in an analogous way.  To deal with ternary and higher 
degree relationship cardinalities requires the use of database rules.

In what follows only ternary relationships are considered although the 
principles discussed are extensible to higher degree relationships as well.


Ternary Relationship Cardinalities

Usually ternary relationships, like the one shown in entity-relationship and 
relational schema form in Figure 2, are assumed to be "many" in every 
direction.

                                                        

Figure 2

That is, for the relationship "supplied to" of Figure 2 there is the implicit 
assumption that:

a.	a project can be supplied with many parts and a part can be 
supplied to many projects;

b.	a project can use many suppliers and a supplier can supply 
many projects; and

c.	a part can be supplied by many suppliers and a supplier can 
supply many parts.

While this may be true, equally it may not.  If it is not, then the relational 
implementation of Figure 2 does not properly capture the required data 
semantics and it is in such cases that database rules can be used to 
advantage.

It can be shown that with n-ary relationships, unlike unary and binary ones, 
certain prima-facie possible cardinalities are in fact inconsistent [Har, 1992].  
A method based on graph theory is suited to distinguishing those relationship 
cardinalities that are valid from those that are not [op. cit.].  Briefly, the 
method uses the concept of a "cardinality graph" in which each entity type 
participating in the relationship is represented by a node on the graph, and 
the "pairwise cardinality" between each pair of the participating entity types 
by a labelled edge.  This "pairwise cardinality" is analogous to a binary 

                                                            

Figure 3
relationship cardinality constraint between the two entity types comprising 
the pair under consideration and specifies how instances of one entity type 
may be related to instances of the other through the n-ary relationship that 
connects them.  Figure 3 shows example cardinality graphs (and their 
interpretations) for the ternary relationship "supplied to" of Figure 2.

The cardinality graph of  Figure 3(a), and therefore its interpretation, is 
consistent while that of Figure 3(b) is not.  With respect to the latter, this can 
be seen because the fact that each project has only one supplier (the pairwise 
cardinality between project and supplier) and is supplied with many parts 
(the pairwise cardinality between project and part) is incompatible with the 
pairwise cardinality between supplier and part that says each supplier can 
supply only one part.


Valid Ternary Relationship Cardinalities

Whatever the cardinality of a ternary relationship, it can be represented in a 
relational schema as a separate relation containing three foreign keys (all not 
null) - one for each of the participating entity types.  But, depending on the 
actual cardinality constraint applying, there may be restrictions on the tuples 
permitted to coexist in that relation.  In other words, dependencies and/or 
uniqueness constraints will exist between the attributes within it (see, for 
example, [Lin, 1985] as well as Table 1 below).

Consider the abstract ternary relationship x and its relational representation 
x' between entity types A, B and C in Figure 4.

The different possible cardinalities of the relationship x in general affect:

a.	the choice of primary key for the relation x'; 

b.	the functional dependencies and/or uniqueness constraints 
within the relation x'.

There are 8 valid cardinalities that a ternary relationship such as x may take 
and these are shown as cardinality graphs in Table 1.  Also shown are the 
corresponding candidate key(s) and functional dependencies or uniqueness 
constraints that apply to the relation x' representing the ternary relationship.  
Of course, in the cardinality graphs of Table 1, the nodes may be permuted 
giving different cardinalities between the entity types A, B and C, but of all 
these possibilities only 8 are different in kind).

                                                           

Figure 4

If ternary relationship cardinality is treated as a simple extension of the 
binary case [e.g. Teo, 1986] then only 4 of the possibilities listed in Table 1 
are obtained - namely (a), (b), (e) and (h).  This is because, in these cases, 
each of the participating entity types has the same pairwise cardinality (1 or 
N) with respect to every other participating entity type in the relationship, so 
a single cardinality specifier for each entity type (assumed as a given in the 
simple extension of the binary case) is sufficient to completely describe the 
relationship.


Ternary Relationship Cardinality and Database Rules

Of the possibilities shown in Table 1, all except (a), (d) and (h) require the 
use of database rules to enforce the stated cardinality constraint.  As an 
example, consider the cardinality graph (b).  To enforce this constraint the 
following table and index definitions and database rule, written using the 
INGRES database management system syntax, are required (all attributes are 
assumed integer for convenience, and all database objects are represented by 
greek letters):
                                                            
Table Definition

CREATE TABLE x
	(a	INTEGER	NOT NULL,
	 b	INTEGER	NOT NULL,
	 g	INTEGER	NOT NULL);

Index Definition

CREATE UNIQUE INDEX x_idx ON x(b);

Database Procedure & Rule

CREATE PROCEDURE x_proc
	(a_val  INTEGER, g_val INTEGER) AS
	DECLARE	alpha		INTEGER		NOT NULL;
			gamma	INTEGER		NOT NULL;
			msg		VARCHAR(40)	NOT NULL;
			num_rows	INTEGER		NOT NULL;
	BEGIN
		SELECT COUNT(*) INTO :num_rows
		FROM x
		WHERE a = :a_val;
		IF num_rows != 0 THEN
			SELECT g INTO gamma
			FROM x
			WHERE a = :a_val;
			IF gamma != :g_val THEN
				msg = 'Incorrect value entered for g';
				RAISE ERROR 1 :msg;
				RETURN;
			ENDIF;
		ENDIF;
		SELECT COUNT(*) INTO :num_rows
		FROM x
		WHERE g = :g_val;
		IF num_rows != 0 THEN
			SELECT a INTO :alpha
			FROM x
			WHERE g = :g_val;
			IF alpha != :a_val THEN
				msg = 'Incorrect value entered for a';
				RAISE ERROR 1 :msg;
				RETURN;
			ENDIF;
		ENDIF;
	END;

CREATE RULE a_rule
	AFTER INSERT, UPDATE OF x
	EXECUTE x_proc (a_val =a ,g_vla = g );

In essence what this code does is:

a.	force the participation of each entity type in the relationship 
through the NOT NULL specification in the table definition;

b.	force each instance of the relationship to have a unique value of 
B (in accordance with the candidate key specification in Table 
1) through the unique index definition; and

c.	disallows the creation of any tuple that violates the 1:1 pairwise 
cardinality constraint between A and C by means of the 
database procedure and its triggering rule.

Similar rules can be written to enforce the constraints represented by the 
other entries in Table 1.


Normalization Considerations

The representation of the ternary relationship corresponding to cardinality 
graph (b) of Table 1 by the table x' violates the definition of third normal 
form because of the transitive dependency:

b . a ,a . g

or, alternatively:

b . g, g . a

However, uncritical decomposition of x' into two relations

x'_1(b, a) & x'_2 (a, g)

or

x'_3(b, g) & x'_4(g,a)

can be problematic since, in effect, this breaks the original entity-
relationship ternary relationship into two binary relationships and, in general, 
a ternary relationship is not equivalent to two (or any other number of) 
binary relationships [Teo, 1986].  In particular, such a decomposition would 
allow a tuple to exist in relation x'_1 without a corresponding tupe in x'_2 
which implies an association between an instance of B and one of A but 
without the participation of any instance of C.  By definition, this violates the 
meaning of a ternary relationship between entity types A, B and C.

Nonetheless, all that said, this ternary relationship between A, B and C could 
be represented by the relations x'_1 & x'_2 (or, equivalently x'_3 & x'_4) 
provided that an inter-relation constraint existed to check that corresponding 
tuples always existed in each relation.  This inter-relation constraint would 
also need to be implemented as a database rule.


Conclusion

The cardinality of entity-relationship unary and binary relationships has long 
been understood, as has the means for capturing this semantics in relational 
database schemas.  However, the cardinality of ternary and higher degree 
relationships has been less well understood with the result that means of 
implementing these types of constraints in the relational model have been 
overlooked.

This paper has shown that ternary relationship cardinalities cannot, in 
general, be captured by the stucture of the relational database schema alone.  
To do so requires database rules.  An example rule, using the INGRES 
database management system, for enforcing a ternary cardinality constraint 
has been exhibited.

References

[Bat, 1992]	Batini, C., Ceri, S. & Navathe, S.B. Conceptual Database 
Design - An Entity-Relationship Approach, 
Benjamin/Cummings (1992)

[Che, 1976]	Chen, P. The Entity-Relationship Model - Toward a Unified 
View of Data, ACM Transactions on Database Systems, Vol 
1, No 1, pp9-36 (March 1976)

[Dat, 1990]	Date, C.J. An Introduction to Database Systems, Vol 1, 5th 
ed, Addison Wesley (1990)

[Har, 1992]	Hart, D.N. Cardinality of Ternary and Higher Degree 
Relationships in the Entity-Relationship Data Model, 
University College, Australian Defence Force Academy 
Technical Report CS10/92

[Len, 1983]	Lenzerini, M. & Santucci, G. Cardinality Constraints in the 
Entity-Relationship Model,  in Davis, C.G. et al (eds) Entity-
Relationship Approach to Software Engineering, North-
Holland pp529-549 (1983)

[Lin, 1985]	Ling, T. A Normal Form for Entity-Relationship Diagrams, 
in Proceedings of the 4th International Conference on the 
Entity-Relationship Approach , IEEE Computer Society 
Press, pp24-35 (1985)

[Mac, 1990]	Maciaszek, L.A. Database Design and Implementation, 
Prentice-Hall (1990)

[Teo, 1986]	Teory, T.J., Yang, D. & Fry, J.P. A Logical Design 
Methodology for Relational Databases Using the Extended 
Entity-Relationship Model, ACM Computing Surveys, Vol 
18, No 2, pp197-222 (June 1986)

[Ull, 1988]	Ullman, J.D. Principles  of Database and Knowledge-Base 
Systems, Vol 1, Computer Science Press (1988)
