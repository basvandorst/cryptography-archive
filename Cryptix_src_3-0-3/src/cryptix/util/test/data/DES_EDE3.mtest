//
// DES_EDE3 test data
//

cipher DES_EDE3
data
//
//  This first sets are all straight DES, as the keys are all the same.
//
//   KEY
    <010101010101010101010101010101010101010101010101>   // k1 == k2 == k3
//  PLAINTEXT          CIPHERTEXT
    <95F8A5E5DD31D900> <8000000000000000>

    <010101010101010101010101010101010101010101010101>   // k1 == k2 == k3
    <9D64555A9A10B852> <0000001000000000>

    <3849674C2602319E3849674C2602319E3849674C2602319E>   // k1 == k2 == k3
    <51454B582DDF440A> <7178876E01F19B2A>

    <04B915BA43FEB5B604B915BA43FEB5B604B915BA43FEB5B6>   // k1 == k2 == k3
    <42FD443059577FA2> <AF37FB421F8C4095>


//
//  One 2-key set.
//
// for checking first phase of below, defaults to same
    <0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF>   // k1 == k2 == k3
    <736F6D6564617461> <3D124FE2198BA318>
//
//  To generate some test 2-key data using Eric Young's
//  DES program, I did this (Pentium/FreeBSD):
//
//      echo -n "somedata" | dd conv=swab | hexdump -x
//
//  Then, to test it with a key of X, I did this:
//
//      echo -n "somedata" |
//           des -b -3 -h -e  -k "X"  |
//           dd conv=swab bs=8 count=1 |hexdump -x
//  NOTE -b flag before -3 flag coz bug in des.c turns off 3des mode.
//
    <0123456789ABCDEF55555555555555550123456789ABCDEF>   // k1 == k3
    <736F6D6564617461> <FBABA1FF9D05E9B1>



//  Follows is the real 3-key test data.
//  To generate 3 key data, I hacked into it to add a -T mode
//  ... phone for details.
//  Caveat Cryptographer - locally generated data.
//
    <0123456789ABCDEF5555555555555555FEDCBA9876543210>
    <736F6D6564617461> <18d748e563620572>

    <0352020767208217860287665908219864056ABDFEA93457>
    <7371756967676C65> <c07d2a0fa566fa30>

    <010101010101010180010101010101010101010101010102>   // weak keys
    <0000000000000000> <e6e6dd5b7e722974>

    <10461034899880209107D0158919010119079210981A0101>   // weak keys
    <0000000000000000> <e1ef62c332fe825b>
