/*
 *                         _
 * Copyright (c) 1990 Stig Ostholm.
 * All Rights Reserved
 *
 *
 * The author takes no responsibility of actions caused by the use of this
 * software and does not guarantee the correctness of the functions.
 *
 * This software may be freely distributed an modified for non-commercial use
 * as long as the copyright notice is kept. If you modify any of the files,
 * you must add a comment in the modified file indicating who modified it
 * and what is modified.
 *
 * If you want to use this software for commercial purposes, contact the
 * author.
 *
 * If you find any bugs or porting problems, please inform me about the problem
 * and send the modifications (if there are any).
 *
 *
 * Additional restrictions due to national laws governing the use, import or
 * export of cryptographic software is the responsibility of the software user,
 * importer or exporter to follow.
 *
 */

#include	<stdio.h>
#include	<string.h>
#include	<des.h>
#include	"filekey.h"
#include	"config.h"


typedef int	(*crypt_func_p)(
#ifdef __STDC__
			des_cblock	 *input,
			des_cblock	 *output,
			int		 length,
			des_key_schedule schedule,
			des_cblock	 *ivec,
			int		 encrypt
#endif
);

typedef int	(*file_crypt_func_p)(
#ifdef __STDC__
			des_key_schedule schedule,
			FILE		 *rfd,
			FILE		 *wfd,
			des_cblock	 *ivec,
			int		 mode
#endif
);

typedef int	(read_write_func)(
#ifdef __STDC__
			char *,
			unsigned,
			unsigned,
			FILE *
#endif
);


static crypt_func_p		crypt_func = (crypt_func_p) 0;
static read_write_func		*read_func = (read_write_func *) 0;
static read_write_func		*write_func = (read_write_func *) 0;

char	*prog;

#define a_FLAG	0x0001L
#ifdef DES_STRING_MODE_CTH
# define b_FLAG	0x0002L
#endif /* DES_STRING_MODE_CTH */
#define c_FLAG	0x0004L
#define d_FLAG	0x0008L
#define e_FLAG	0x0010L
#define f_FLAG	0x0020L
#define h_FLAG	0x0040L
#define k_FLAG	0x0080L
#define C_FLAG	0x0100L
#define E_FLAG	0x0200L
#define F_FLAG	0x0400L
#define O_FLAG	0x0800L
#define P_FLAG	0x1000L
unsigned long	flags = 0L;

/*
 * Encryption/decryption functions.
 *
 */

#define BUF_SIZE 8192

/*
 * This routine does the encryption/decryption job without padding.
 */

static int	crypt_file_plain(
#ifdef __STDC__
	des_key_schedule schedule, FILE *rfd, FILE *wfd, des_cblock *ivec,
	int mode)
#else
	schedule, rfd, wfd, ivec, mode)
des_key_schedule	schedule;
FILE			*rfd, *wfd;
des_cblock		*ivec;
int			mode;
#endif
{
	register int	n;
	char		buf[BUF_SIZE];


	/* Do the encryption on compleat blocks */
	while ((n = fread(buf, sizeof(*buf), BUF_SIZE, rfd)) > 0) {

		(*crypt_func)((des_cblock *) buf, (des_cblock *) buf,
			      n, schedule, ivec, mode); 
		
		VOID fwrite(buf, sizeof(*buf), n, wfd);
		if (ferror(wfd))
			return 1;
	}

	return 0;
}

/*
 * Bitmask for bits contaning padding information
 */

/* 0x00001000 - 0x00000001 -> 0x00000111 (8 - 1 -> 7) */
#define PAD_INFO_BITS (DES_BLOCK_BYTES - 1)

static int	crypt_file_padding(
#ifdef __STDC__
	des_key_schedule schedule, FILE *rfd, FILE *wfd, des_cblock *ivec,
	int mode)
#else
	schedule, rfd, wfd, ivec, mode)
des_key_schedule	schedule;
FILE			*rfd, *wfd;
des_cblock		*ivec;
int			mode;
#endif
{
	register int		i, j, nr, nw, corrupt;
	register unsigned int	pad;
	register unsigned char	pad_char;
	char			ibuf[BUF_SIZE + DES_BLOCK_BYTES];
	char			obuf[BUF_SIZE];
	des_cblock		pbuf;


	corrupt = 0;

	if (mode == DES_ENCRYPT) {

		/* Do the encryption on compleat blocks */
		while ((nr = fread(ibuf, sizeof(*ibuf), BUF_SIZE, rfd)) ==
			BUF_SIZE) {

			(*crypt_func)((des_cblock *) ibuf, (des_cblock *) obuf,
				      nr, schedule, ivec, DES_ENCRYPT); 
		
			VOID (*write_func)(obuf, sizeof(*obuf), nr, wfd);
			if (ferror(wfd))
				return 1;
		}

		/* The last section handles padding to ensure that the	*/
		/* encryption is made on compleat eight byte block(s).	*/
		/* The last block will always contain 0 .. 7 bytes of	*/
		/* data, and the last byte contains a number indicating	*/
		/* how may bytes (0 .. 7) that are use for actual data.	*/
		/* Any remaining bits between data bits and the last is */
		/* padded with random bits.				*/
		pad = nr % DES_BLOCK_BYTES;
		nw = nr + (DES_BLOCK_BYTES - pad);
		VOID des_random_cblock((des_cblock *) pbuf);
		pad_char = (unsigned char) pbuf[DES_BLOCK_BYTES - 1];
		pad_char &= (unsigned char) ((~PAD_INFO_BITS) & 0xff);
		pad_char |= (unsigned char) pad;
		pbuf[DES_BLOCK_BYTES - 1] = (char) pad_char;
		for (i = nr, j = pad; i < nw; i++, j++)
			ibuf[i] = pbuf[j];

		(*crypt_func)((des_cblock *) ibuf, (des_cblock *) obuf, nw,
		      schedule, ivec, DES_ENCRYPT); 

		VOID (*write_func)(obuf, sizeof(*obuf), nw, wfd);

	} else {

		/* Do the decryption on the source file */

		/* Read the first block, return with error if the file	*/
		/* has 0 size.						*/
		if (!(nw = nr = (*read_func)(ibuf, sizeof(*ibuf), BUF_SIZE,
		    rfd)))
			return 1;

		/* Decrypt the the current input buffer into the output	*/
		/* buffer.						*/
		VOID (*crypt_func)((des_cblock *) ibuf, (des_cblock *) obuf,
				   nr, schedule, ivec, DES_DECRYPT); 

		/* Read until end of file is found */
		while ((nr = (*read_func)(ibuf, sizeof(*ibuf), BUF_SIZE, rfd))
			> 0) {

			/* Write the decrypted contentse of the		*/
			/* previous buffer.				*/
			VOID fwrite(obuf, sizeof(*obuf), nw, wfd);
			if (ferror(wfd))
				return 0;

			nw = nr;

			/* Decrypt the the current input buffer into	*/
			/* the output buffer.				*/
			VOID (*crypt_func)((des_cblock *) ibuf,
					   (des_cblock *) obuf, nr, schedule,
					   ivec, DES_DECRYPT); 

		}

		/* The last buffer contains padding information that	*/
		/* has to be removed. The buffer must contain at least	*/
		/* on block.						*/
		if (nw >= DES_BLOCK_BYTES) {
			/* The last block must contain an multiple of	*/
			/* cblocks.					*/
			corrupt = nw % DES_BLOCK_BYTES;
			/* The last byte in the block contains padding	*/
			/* infomration. Remove the padding bytes and	*/
			/* the padding info.				*/
			pad = (unsigned int) obuf[nw - 1];
			pad &= PAD_INFO_BITS;
			nw -= (DES_BLOCK_BYTES - pad);
		} else
			corrupt = 1;

		/* Write the last output buffer with padding		*/
		/* information removed.					*/
		VOID fwrite(obuf, sizeof(*obuf), nw, wfd);

	}

	return corrupt;
}

/*
 * Compute a 64-bit cryptographic checksum on the file.
 */

static int	crypt_file_checksum(
#ifdef __STDC__
	des_key_schedule schedule, FILE *rfd, FILE *wfd, des_cblock *ivec,
	int mode)
#else
	schedule, rfd, wfd, ivec, mode)
des_key_schedule	schedule;
FILE			*rfd, *wfd;
des_cblock		*ivec;
int			mode;
#endif
{
	register int	n;
	char		buf[BUF_SIZE + DES_BLOCK_BYTES];
	des_cblock 	sum;


	while ((n = fread(buf, sizeof(*buf), BUF_SIZE, rfd)) > 0)
		VOID des_cbc_cksum((des_cblock *) buf, (des_cblock *) sum,
				   n, schedule, ivec);

	VOID (*write_func)((char *) sum, sizeof(*sum), sizeof(sum), wfd);

	return 0;
}

/*
 * ASCII input/output functions
 */

int	ascii_read(
#ifdef __STDC__
	char *ptr, unsigned ptr_size, unsigned items, FILE *fd)
#else
	ptr, ptr_size, items, fd)
char		*ptr;
unsigned	ptr_size;
unsigned	items;
FILE		*fd;
#endif
{
	register int	n, l, r;
	char		buf[BUF_SIZE];

	
	n = ptr_size * items;
	r = 0;
	while (n >= DES_BLOCK_BYTES) {
		if (fgets(buf, BUF_SIZE, fd) == NULL)
			break;
		l = strlen(buf) - 1;
		if (buf[l] != '\n')
			continue;
		buf[l] = '\0';
		if (des_hex_to_cblock(buf, (des_cblock *) ptr))
			continue;
		r += DES_BLOCK_BYTES;
		ptr += DES_BLOCK_BYTES;
		n -= DES_BLOCK_BYTES;
	}
	return r / ptr_size;
}

int	ascii_write(
#ifdef __STDC__
	char *ptr, unsigned ptr_size, unsigned items, FILE *fd)
#else
	ptr, ptr_size, items, fd)
char		*ptr;
unsigned	ptr_size;
unsigned	items;
FILE		*fd;
#endif
{
	register int	n;
	des_cblock	*b;
	FILE		*old_fd;
	extern FILE	*des_print_file; 

	
	old_fd = des_print_file;
	des_print_file = fd;
	b = (des_cblock *) ptr;
	n = ptr_size * items;
	n = des_print_cblock(b, n / DES_BLOCK_BYTES);
	des_print_file = old_fd;
	return n * DES_BLOCK_BYTES;
}

/*
 * Get the encryption/decryption key.
 */

int	getkey(
#ifdef __STDC__
	des_cblock	*key,
	char		*string,
	char		*file)
#else
	key, string, file)
des_cblock	*key;
char		*string;
char		*file;
#endif
{
	if (flags & k_FLAG) {
		if (flags & h_FLAG) {
			if (des_hex_to_cblock(string, key)) {
				fprintf(stderr, "key is not a 64 bit hexadecimal number\n");
				goto error;
			}
			VOID des_set_key_parity(key);
		} else 
			VOID des_string_to_key(string, *key);
	} else if (flags & f_FLAG) {
		if (read_key(key, file, (flags & h_FLAG))) {
			fprintf(stderr, "Could not read key from \"%s\"\n",
				file);
			goto error;
		}
	} else {
		if ((flags & h_FLAG) ?
		    des_read_hexkey(key, "Hexkey: ", 1) :
		    des_read_password(key, "Key: ", 1))
			goto error;
	}
	
	return 0;

error:
	return 1;
}


main(argc, argv)
int	argc;
char	*argv[];
{
	register int		o, i, l, cr;
	register int		mode;
	register char		*prog, *rfname, *wfname, *strkey, *keyfile;
	FILE			*rfd, *wfd;
	des_key_schedule	schedule;
	des_cblock		key, ivec;
	file_crypt_func_p	file_crypt_func;
	extern int		optind;
	extern char		*optarg;


	/* The program name. */
	prog = (prog = strrchr(*argv, '/')) ? (prog + 1) : *argv;

	/* Set initial values. */
	mode = DES_ENCRYPT;
	strkey = keyfile = NULL;
	cr = 0;
	rfd = stdin;
	wfd = stdout;
	rfname = "<stdin>";
	wfname = "<stdout>";
	read_func = (read_write_func *) fread;
	write_func = (read_write_func *) fwrite;
	crypt_func = (crypt_func_p) des_cbc_encrypt;
	file_crypt_func = (file_crypt_func_p) crypt_file_padding;

	/* Get the command line arguments. */
#ifdef b_FLAG
	while ((o = getopt(argc, argv, "abcdef:hk:CEFOP")) != EOF)
#else  /* b_FLAG */
	while ((o = getopt(argc, argv, "acdef:hk:CEFOP")) != EOF)
#endif /* b_FLAG */
		switch (o) {
		case 'a':
			if (flags & a_FLAG)
				goto usage;
			read_func = (read_write_func *) ascii_read;
			write_func = (read_write_func *) ascii_write;
			/* Ascii input/output requires padding */
			file_crypt_func = (file_crypt_func_p) crypt_file_padding;
			flags |= a_FLAG;
			break;
#ifdef b_FLAG
		case 'b':
			if (flags & (b_FLAG | h_FLAG))
				goto usage;
			VOID des_set_string_mode(DES_STRING_MODE_CTH);
			flags |= b_FLAG;
			break;
#endif /* b_FLAG */
		case 'c':
			if (flags & (c_FLAG | d_FLAG | e_FLAG |
				     C_FLAG | E_FLAG | F_FLAG | O_FLAG | P_FLAG))
				goto usage;
			file_crypt_func = (file_crypt_func_p) crypt_file_checksum;
			flags |= c_FLAG;
			break;
		case 'd':
			if (flags & (c_FLAG | d_FLAG | e_FLAG))
				goto usage;
			mode = DES_DECRYPT;
			flags |= d_FLAG;
			break;
		case 'e':
			if (flags & (c_FLAG | d_FLAG | e_FLAG))
				goto usage;
			flags |= e_FLAG;
			break;
		case 'f':
			if (flags & (f_FLAG | k_FLAG))
				goto usage;
			l = strlen(optarg);
			if ((keyfile = (char *) malloc(l + 1)) == NULL)
				goto memalloc;
			VOID strcpy(keyfile, optarg);
			/* Destroy the argument vector key. */
			for (i = 0; i < l; i++)
				optarg[i] = '\0';
			flags |= f_FLAG;
			break;
		case 'h':
#ifdef b_FLAG
			if (flags & (h_FLAG | b_FLAG))
#else  /* b_FLAG */
			if (flags & h_FLAG)
#endif /* b_FLAG */
				goto usage;
			flags |= h_FLAG;
			break;
		case 'k':
			if (flags & (f_FLAG | k_FLAG))
				goto usage;
			l = strlen(optarg);
			if ((strkey = (char *) malloc(l + 1)) == NULL)
				goto memalloc;
			VOID strcpy(strkey, optarg);
			/* Destroy the argument vector key. */
			for (i = 0; i < l; i++)
				optarg[i] = '\0';
			flags |= k_FLAG;
			break;
		case 'C':
			if (flags & (c_FLAG | C_FLAG | E_FLAG | F_FLAG | O_FLAG | P_FLAG))
				goto usage;
			crypt_func = (crypt_func_p) des_cbc_encrypt;
			file_crypt_func = (file_crypt_func_p) crypt_file_padding;
			flags |= C_FLAG;
			break;
		case 'E':
			if (flags & (c_FLAG | C_FLAG | E_FLAG | F_FLAG | O_FLAG | P_FLAG))
				goto usage;
			crypt_func = (crypt_func_p) des_ecb2_encrypt;
			file_crypt_func = (file_crypt_func_p) crypt_file_padding;
			flags |= E_FLAG;
			break;
		case 'F':
			if (flags & (c_FLAG | C_FLAG | E_FLAG | F_FLAG | O_FLAG | P_FLAG))
				goto usage;
			crypt_func = (crypt_func_p) des_cfb8_encrypt;
			if (!(flags & a_FLAG))
				file_crypt_func = (file_crypt_func_p) crypt_file_plain;
			flags |= F_FLAG;
			break;
		case 'O':
			if (flags & (c_FLAG | C_FLAG | E_FLAG | F_FLAG | O_FLAG | P_FLAG))
				goto usage;
			crypt_func = (crypt_func_p) des_ofb8_encrypt;
			if (!(flags & a_FLAG))
				file_crypt_func = (file_crypt_func_p) crypt_file_plain;
			flags |= O_FLAG;
			break;
		case 'P':
			if (flags & (c_FLAG | C_FLAG | E_FLAG | F_FLAG | O_FLAG | P_FLAG))
				goto usage;
			crypt_func = (crypt_func_p) des_pcbc_encrypt;
			file_crypt_func = (file_crypt_func_p) crypt_file_padding;
			flags |= P_FLAG;
			break;
		case '?':
		default:
			goto usage;
		}
	if (!(flags & (c_FLAG | d_FLAG | e_FLAG)))
		goto usage;

	switch (argc - optind) {
	case 2:
		wfname = argv[optind + 1];
		wfd = NULL;
	case 1:
		rfname = argv[optind];
		rfd = NULL;
	case 0:
		break;
	default:
		goto usage;
	}

	/* If there was no key set on the argument line, fetch one from	*/
	/* the tty.							*/
	if (getkey((des_cblock *) key, strkey, keyfile))
		goto nokey;
	if (flags & k_FLAG)
		free(strkey);
	else if (flags & k_FLAG)
		free(keyfile);

	/* Make a key schedule */
	if (des_set_key((des_cblock *) key, schedule) < 0)
		goto weakkey;

	/* Open the file(s) */
	if (rfd == NULL) {
		/* Open the source file. */
		if ((rfd = fopen(rfname , "r")) == NULL)
			goto rfilerr;
		clearerr(rfd);
	}
	if (wfd == NULL) {
		/* Open the destination file. */
		if ((wfd = fopen(wfname , "w")) == NULL)
			goto wfilerr;
		clearerr(wfd);
	}

	/* Encrypt/decrypt the file */
	DES_ZERO_CBLOCK(ivec);
	des_return_ivec = DES_RETURN_IVEC;
	cr = (*file_crypt_func)(schedule, rfd, wfd, (des_cblock *) ivec, mode);

	/* Was there any error during read or write ? */
	if (ferror(rfd))
		goto rfilerr;
	if (ferror(wfd))
		goto wfilerr;

	/* No check is neccessary here */
	VOID fclose(rfd);
	rfd = NULL;

	/* This check is neccessary when dealing with AFS. */
	if (fclose(wfd) == EOF) {
		wfd = NULL;
		goto wfilerr;
	} else
		wfd = NULL;

	/* Was the encrypted file corrupt ? */
	if (cr)
		goto corrupt;

	exit(0);

	/* Error handling section */
usage:
#ifdef b_FLAG
	VOID fprintf(stderr, "Usage: %s -e|-d|-c [-h|-b] [-k strkey|-f keyfile] [-C|-P|-E|-F|-O] [-a] [-t] [infile [outfile]]\n", prog);
#else  /* b_FLAG */
	VOID fprintf(stderr, "Usage: %s -e|-d|-c [-h] [-k strkey|-f keyfile] [-C|-P|-E|-F|-O] [-a] [-t] [infile [outfile]]\n", prog);
#endif /* b_FLAG */
	exit(1);

memalloc:
	fputs(prog, stderr);
	perror(": Could not allocate memory, ");
	exit(1);

rfilerr:
	VOID fprintf(stderr, "%s: Open/read error on \"%s\"", prog, rfname);
	perror(", ");
	goto close_file;

wfilerr:
	VOID fprintf(stderr, "%s: Open/read error on \"%s\"", prog, wfname);
	perror(", ");
	goto close_file;

weakkey:
	VOID fprintf(stderr, "%s: The key generated is weak\n", prog);
	exit(1);

nokey:
	VOID fprintf(stderr, "%s: Can not obtain key\n", prog);
	exit(1);

corrupt:
	VOID fprintf(stderr, "%s: Encrypted file \"%s\" is corrupt\n", prog, rfname);
#ifdef b_FLAG
	if (!(flags & (b_FLAG | h_FLAG)))
		VOID fprintf(stderr, "%s: Try using the `-b' option\n", prog);
#endif /* b_FLAG */
	exit(1);

close_file:
	if (rfd)
		VOID fclose(rfd);
	if (wfd)
		VOID fclose(wfd);
	exit(1);
}
