Path: msuinfo!uwm.edu!ux1.cso.uiuc.edu!howland.reston.ans.net!noc.near.net!nic.umass.edu!twain.ucs.umass.edu!not-for-mail
From: quilty@twain.ucs.umass.edu (Lulu of the lotus-eaters)
Newsgroups: sci.crypt
Subject: Secured communications (symmetric v. asymmetric key)
Date: 15 Jul 1993 16:51:04 -0400
Organization: University of Massachusetts, Amherst
Lines: 87
Message-ID: <224fvoINNikd@twain.ucs.umass.edu>
NNTP-Posting-Host: twain.ucs.umass.edu

I'm curious what advantage really acrues to using an asymmetric
public-key system for secured communication over a two-way channel,
versus using a conventional single-key system.  If I understand it
correctly, the Diffie-Helman key-exchange system uses a public-key
system; but I don't actually know exactly how the system works, and
would be interested if anyone would provide a schematic sketch of it.

It occurs to me that one could secure a two-way communications link
using a symmetric-key system.  I assume here that the encryption
function is commutative (i.e E[X](E[Y](M)) = E[Y](E[X](M)), for all X
and Y, and either may hence be abbreviated below as 'E[XY](M)').  I
assume also, for convenience, that the domain and range of the
encryption function are identical -- though if they are not it
shouldn't pose a fundemental problem.  Let Alice and Bob each have
secret keys Sa and Sb, respectively, which they never reveal to
anyone.  Then they may secure a two way channel as below.


              Alice  <---------* channel *--------->  Bob

1. Generate random R

2. Calculate E[Sa](R)

3a. Transmit R, E[Sa](R) --------------------------> 3b. Record R, E[Sa](R)

                                                      4. Calculate E[Sb](R)

5b. Record [Sa](R)    <----------------------------  5a. Transmit E[Sb](R)

6a. Calculate E[SaSb](R)                             6a. Calculate E[SaSb](R)
    (privately) =df 'Ks'                                 (privately)

7. For Ma, generate E[Ks](Ma)                         7. Generate E[Ks](Mb)

8. Transmit encryption <--------* E[Ks](Mx) *-------> 8. Transmit encryption

9. Decrypt (privately)                                9. Decrypt (privately)

10. Repeat 7-9 as desired.

LIMITATIONS:
In this system, a compromise of either secret key will compromise the
content of the communication, since both E[Sa](R) and E[Sb](R) have
been transmitted unencrypted, and either Sa or Sb will produce the
session-key Ks.  However, Sa and Sb may be changed as frequently as
desired -- even erased after a single communication session (as Ks
should be, in any event).  But Sa (or Sb, as appropriate) will have to
be retained if later decryption of a recorded session is required.
This system provides no means of authenticating the party at the other
end.  Once a connection is made, one can be assured that one continues
communication in a secure fashion only with the party Ks was
negotiated with, but no proof of her identity is thereby established.
In a public-key system, identity could be proved if one had prior-
knowledge (or independent, anyway -- for example, via a key-server) of
the other party's public-key.  But in a system such as the Clipper, or
other telephone communication channel, one wouldn't generally expect
to have such a public-key.  As far as I can see, in such a context,
the single-key system I suggest is no worse than a public-key system.
In a public-key system, the above would differ basically only in step
3b, where E[Sa](R) could be verified as a "signature" to R (but only
if a public-key was already known.  My system, if anything, has the
advantage over a public-key one that Sx's may be changed frequently
without a key-distribution problem.

I'm sure all of the above is reinventing the wheel (and no doubt a
less elegant and effective wheel than others have built).  I suspect
that something like the schema I suggest is what is already widely
used in secured communications.  I would be interested if someone can
explain any details I've left out.  But I wanted to lay out the above,
so that I could explain my understanding of how a single-key secured
channel could work... in order that some kind soul may volunteer some
overlooked advantages to public-key systems.

Btw. I *am* aware that the above gives away a known plaintext R to an
enemy on a silver platter.  Hopefully, 'E' is a function which is not
too vulnerable to an attack with a small known plaintext.  But if it
isn't, it's probably not too much good to start with.  If there is a
way around transmitting such a known-plaintext, however, I'd be
interested.

Yours, Lulu...
-- 
      _/_/_/ THIS MESSAGE WAS BROUGHT TO YOU BY: Postmodern Enterprises _/_/_/ 
     _/_/    ~~~~~~~~~~~~~~~~[quilty@philos.umass.edu]~~~~~~~~~~~~~~~~~  _/_/ 
    _/_/  The opinions expressed here must be those of my employer...   _/_/ 
   _/_/_/_/_/_/_/_/_/_/ Surely you don't think that *I* believe them!  _/_/ 
