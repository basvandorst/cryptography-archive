Path: msuinfo!agate!howland.reston.ans.net!math.ohio-state.edu!cs.utexas.edu!rutgers!utcsri!relay.cs.toronto.edu!web.apc.org!colin
From: colin@web.apc.org (Colin Plumb)
Newsgroups: sci.crypt,alt.security.pgp
Subject: randseed.bin: PGP bug but not hole
Message-ID: <m0oDzBZ-000026C@web.apc.org>
Date: 8 Jul 93 16:54:40 GMT
Lines: 54
Xref: msuinfo sci.crypt:17853 alt.security.pgp:3575

I agree that using sizeof(char *) instead of sizeof(char[24]) is
not as designed and reduces the randomness derived from randseed.bin.

However, first of all, you'll find a fix on some FTP sites already.
(Try src.doc.ic.ac.uk and ghost.dsi.unimi.it.)

Second, it doesn't actually hurt much.  The bug was introduced as part of
some reengineering of the session key generation to cope with the fact
that an enemy may be able to read randseed.bin.  Since it's designed
to be secure with a known randseed.bin, the reduction in the possible range
isn't anything I can see how to exploit.

For the interested, the process is as follows:
- The randseed.bin file is read into a 24-byte buffer.
- The MD5 of the message being sent is computed.  (For speed, if you
  aren't signing the message, only the first 4K are used to compute
  the MD5.)
- The buffer is encrypted using IDEA and the MD5 result as the key.
- The buffer is used as the key and initial vector for a random number
  generator that also uses the time of day.

The assumption is that the message is unknown to the would-be interceptor,
so it can be used as an source of somewhat random bytes.

If an interceptor knows the randseed.bin, the message, and the time of day,
he can find the session key.  That can be used to confirm that a particular
encrypted message is a specific plaintext.  If you don't know the randseed.bin
file, but have a lot of time to waste, then the reduction from 2^192 to 2^32
makes it conceivable to apply this test to a given message, but those are
the only conditions.

Of course, all this assumes that the user hasn't typed anything, such
as a pass phrase, destination user ID, or something.  If the user has,
the random numbers from the keyboard timings are merged into the session
key.

PGP is awfully careful with its random numbers.  Even a bug like that
(and isn't it nice to have the source so you can tell if there *are* bugs
like that?) doesn't make the path to compromise much clearer.

So an attacker could, given an encrypted (but not signed) message, where
he knows roughly what time the encryption took place at, and has a small
set of candidate messages to test, and does not posess the randseed.bin
file but does have a lot of computing horsepower (there's still a factor
of 2^32 in there), confirm a guess as to which message it is.

That's quite specific.  It's not good to have any bugs, but that one is
not something I'm inclined to lose sleep over.

The paranoid are invited to make their randseed.bin files unreadable by
themselves, or zero-length and unwriteable, and PGP will prompt for
keystrokes to generate a truly random session key each time.
-- 
	-Colin
