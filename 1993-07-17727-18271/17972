Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!linac!att!princeton!allegra!ulysses!ulysses!smb
From: smb@research.att.com (Steven Bellovin)
Subject: Re: ufc-crypt ; password protocols
Message-ID: <1993Jul14.032200.29342@ulysses.att.com>
Date: Wed, 14 Jul 1993 03:22:00 GMT
References: <69246@mimsy.umd.edu> <CA2tCz.6qp@bunyip.cc.uq.oz.au> <WCS.93Jul13153831@rainier.ATT.COM>
Organization: AT&T Bell Laboratories
Lines: 40

In article <WCS.93Jul13153831@rainier.ATT.COM>, wcs@anchor.ho.att.com (Bill Stewart +1-908-949-0705) writes:
> In article <1993Jul13.143512.16723@ulysses.att.com> smb@research.att.com (Steven Bellovin) writes:
>    While changing the E-box would cause trouble for dedicated DES
>    crackers, as a general matter it seems to weaken DES somewhat.  
>    The E-box is tailored to match the P permutation and the S-boxes, 
>    and I think the key schedule generation algorithm; variants don't 
>    have as good avalanche properties.  (I.e., a change in a single 
>    key bit takes longer to affect the same number of plaintext bits). 
> 
> It probably would have made sense to use some salted DES iterations
> and some unsalted ones.  If I were redesigning the Unix password crypt()
> today I suppose I'd probably use MD5 instead of DES, with 30-60 bits
> worth of salt and arbitrarily long passwords.  

Several people have misunderstood me.  There's nothing wrong with weak
E-boxes for password hashing, especially given that DES is iterated
25 times.  No one is cryptanalyzing crypt(), and password-guessing
attacks aren't affected much by the details of salting.

As for more complex schemes -- there's nothing wrong with the current
salt length, though a few more bits wouldn't hurt.  There's no call for
30-60 bits.

The salt does two things:  it makes storage of precomputed dictionaries
difficult, and it masks password collisions.  For the former, a few
more bits would help, especially given current storage densities.
But you don't have to go up very much before you reach the point of
diminishing returns. 

As for collisions -- you only need enough different salts that the
probability of two hashed passwords in the same run don't have the
same salt, and that the same person using the same password on two
different machines won't be exposed in that fashion.  For the latter
case, the probability is already very low.  The first case is more
interesting, as there's a birthday paradox at work.  For 12 bits, the
probability of an overlap is 50% with only about 75 hashed passwords,
if my calculations are right.  For 16 bits, that happens at around 300,
and for 20 bits, at around 1200.  Most machines (note:  *most*) have
password files of far less than 1200 hundred entries, and even a
small number of overlaps won't change the work factor much for crypt.
