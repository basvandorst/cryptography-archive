Path: msuinfo!agate!howland.reston.ans.net!wupost!waikato.ac.nz!aukuni.ac.nz!cs18.cs.aukuni.ac.nz!pgut1
Newsgroups: sci.crypt
Subject: Re: File wiper? SOURCE INCLUDED HERE
Message-ID: <1993Jul3.035648.18279@cs.aukuni.ac.nz>
From: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Date: Sat, 3 Jul 1993 03:56:48 GMT
References: <C9HzMn.Lr5@hpcvsnz.cv.hp.com> <7GZEBSMG@math.fu-berlin.de>
Organization: Computer Science Dept. University of Auckland
Lines: 49

In <7GZEBSMG@math.fu-berlin.de> jiri@spider.chemie.fu-berlin.de (Jiri Pittner) writes:

>Here is the program I'm using on HP755 and Convex computers. To modify it on
>PC should not be difficult, but I don't know the systems calls there at all.
>You can modify it to overwrite the buffer several times and to overwrite the
>name in the directory, which is not done here.
 
This has a few problems:
 
1. Using a fixed pattern on a compressing filesystem is a Bad Thing.  If you
   fill, say, a 64K buffer with a set pattern of, say, all ones, any decent
   compression system (ie not DOS 6) will compress it down to almost nothing.
   Result: You wipe about 50 bytes instead of 64K.
 
2. Truncating just the file itself to zero bytes usually isn't enough.  On some
   filesystems this will leave a linked list of sectors containing the file's
   data on disk.  To break this chain you should truncate every 512 bytes
   starting from the end of the file.
 
3. Simply deleting the file leaves the filename, datestamp, and attributes open
   to examination.  You should really chmod() the attributes to 0, set the
   datestamp to an impossible value, and rename the file to nothing before
   deleting it.
 
4. Under MSDOS and OS/2, issue a disk reset after the last write to flush the
   cache.
 
I've used these techniques in a secure archiver I've written, it makes
recovery of the data... difficult.
 
>CAUTION: The program is based on the crucial assumption, that when you write
>to any file which already exists data of the same size as the file has, the
>filesystem does NOT allocate new blocks for the new content of the file, but
>writes  just over the old contents.  I am not a system programmer, but I think
>it is most logical if the system behaves in this way.
>
>Can anybody confirm me this assumption?
 
There are some persistent filesystems around, but (at the moment) they're
mostly experimental.  You probably won't have to worry about it for a while
yet.
 
Peter.
--
 pgut1@cs.aukuni.ac.nz||p_gutmann@cs.aukuni.ac.nz||gutmann_p@kosmos.wcc.govt.nz
peterg@kcbbs.gen.nz||peter@nacjack.gen.nz||peter@phlarnschlorpht.nacjack.gen.nz
             (In order of preference - one of 'em's bound to work)
             -- C++ will do for C what Algol 68 did for Algol --

