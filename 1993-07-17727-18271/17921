Path: msuinfo!agate!howland.reston.ans.net!xlink.net!math.fu-berlin.de!unidus.rz.uni-duesseldorf.de!lannert.rz.uni-duesseldorf.de!TSOS
From: TSOS@uni-duesseldorf.de (Detlef Lannert)
Newsgroups: sci.crypt,alt.security.pgp
Subject: Re: Short Cryptographic Signatures revisited
Date: Mon, 12 Jul 1993 09:36:07 GMT
Organization: Universitaetsrechenzentrum, Heinrich-Heine-Universitaet, Duesseldorf
Lines: 74
Message-ID: <TSOS.511.742469767@uni-duesseldorf.de>
References: <TSOS.509.742245599@uni-duesseldorf.de>
NNTP-Posting-Host: lannert.rz.uni-duesseldorf.de
Summary: A modest proposal -- messed up.
Keywords: signature, hash code, public-key algorithm
Xref: msuinfo sci.crypt:17921 alt.security.pgp:3660

I hate to follow-up on my own posting, but ...

In article <TSOS.509.742245599@uni-duesseldorf.de> TSOS@uni-duesseldorf.de (Detlef Lannert) writes:
-----BEGIN PGP SIGNED MESSAGE-----

 [...]
> Then the user computes a multiplicative inverse v:= x^{-1} mod (p-1) and
> keeps it safely as his/her secret key.
>
> To sign a message, its body (excluding the header and the .signature;
> trailing blanks should be discarded; newline characters normalised) is fed
> into a cryptographic checksum algorithm, e.g. MD5. Let c denote the result,
> interpreted as an integer number.
>
> The value s:= c * v mod (p-1) is ascii-armoured and, together with some
> control information, added to the message -- if possible, as an additional
> header line.
 [...]

Arrrrgggggghhh!  I'll never rewrite and post an article on a late Friday
evening...  This algorithm looks nice but does not work: It gives the
"secret" value v away immediately, once you know an s,c pair. In fact it
seems impossible to use cryptographic signatures that are based on discrete
logarithms and can be checked on the basis of public knowledge (public
keys, message checksum) without an additional degree of freedom for the
signatory. [I should not have trusted an algorithm that appears to be
simpler than ElGamal but does more or less a similar thing -- my only
excuse: it was late ...]

My original idea was that the sender chooses a random value r, computes
   s1=g^r mod p
   s2=r * c * v mod (p-1)
and attaches these to the message. The verifier checks whether
   k^s2 == s1^c
is fulfilled. I believe that it is basically secure (as much as discrete
logs are), but alas, it needs twice the bandwidth. And you might get more
security for the same number of bits with other algorithms.

On the other hand my suggestion is not really dependent on _which_
algorithm one chooses; the idea is -- and still remains -- to use smaller,
sort of temporary keys to generate not extremely, but sufficiently secure
signatures which can be transmitted in the header, wasting not too much
bandwidth and not depending on religious wars about standards for secure
mail.

Would there be a good compromise between security and "brevity"? Note
that a signature algorithm (and keyspace) does not need to be resistant
against attacks with future super-fast hardware if the keys expire after
a short time.

So go ahead, flame me for posting inconsiderately, but don't eat me alive!
;-)
But I'd even more like to hear other thoughts about "pretty safe",
convenient signature schemes which make it practical to have routine
signatures in the not too distant future.

- --
This article is in the public domain.

-----BEGIN PGP SIGNATURE-----
Version: 2.2

iQCVAgUBLEEv9DT52nfBH0L9AQEo0gP/eAn3gNxGYB5tUqhotfWWQtncTi824WHm
ckU+KkqBZBlZupKZFPt1tYKZqrJHuqwkhYkAOpaE0jTFhwwdrpJuTLg2nRlx9VnG
A9aomv2Z95WpQrjORQmMCpWJd2YcZ1sAg1Ht0ZflKeSwtF9Vs8pLzL6BIKsSlx7K
iGcGBPwsotE=
=Nry7
-----END PGP SIGNATURE-----
--
Detlef Lannert      DC3EK      E-Mail: tsos@rz.uni-duesseldorf.de
PGP 2.x key available (finger lannert@clio.rz.uni-duesseldorf.de)
Die Mathematiker sind eine Art Franzosen:  Redet man zu ihnen, so
uebersetzen sie es in ihre Sprache, und dann ist es alsobald ganz
etwas anderes.                         Johann Wolfgang von Goethe
