Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!vixen.cso.uiuc.edu!uchinews!att-out!cbfsb!cbnewsf.cb.att.com!rdell
From: rdell@cbnewsf.cb.att.com (richard.b.dell)
Subject: Re: Generating random bits: practical questions
Message-ID: <CAGv70.GIF@cbfsb.cb.att.com>
Sender: news@cbfsb.cb.att.com
Organization: AT&T
References: <1993Jul19.164311.28040@sun1x.res.utc.com>
Date: Tue, 20 Jul 1993 14:06:36 GMT
Lines: 75

In article <1993Jul19.164311.28040@sun1x.res.utc.com> koopman@utrc.utc.com writes:
>
>I need to generate a farily huge volume of random information,
>and need to use a method that eliminates the possibility of
>guessing other portions of the information given a moderately
>large subset of it.  (Huge = several Gbytes; moderately large = 1 Mbyte)

<deletions>

>The good news is that it's OK to take a few years to generate
>the Gbytes; the bad news is that it has to run on a PC,
>so I suspect speed will still be an issue.
>
>Here are some engineering trades I have in mind.  Comments?
>
>1) I plan to use a Soundblaster card input with no microphone.
>   Would a white noise generator be better? (I imagine I should
>   make sure the white noise isn't from a hardware LFSR!!)
>   Or a microphone with background noise?
>   I can't use a USENET feed as a source -- the PC won't have access.

I have built a dedicated 9600 baud random async string generator
in a Radio Shack handhelp size project box.  As I recall, only 
about 3 or 4 CMOS chips and a few discretes (a reverse breakdown
junction serves as the main noise source).  Powered from a 9 volt
battery, and automatically powers up when CTS or DTR is dropped
(can't remember which).  If you're interested, I'll try to dig out
the schematic.  (several GBytes/960 Bps = several tens of days).
The concept could run faster with faster chips, the limit is the
bandwidth of the noise source and associated amp and comparator.
The prototype front end had a flat noise spectrum out to over 10
MHz, which would allow operation in excess of 115KBaud.  The CMOS
version only has a flat spectrum to something in the high hundreds
of KHz. (Memory fails, but it was more than 500KHz)

>
>2) I can try to dig up a PC version of compress, but PKZIP
>   is more readily available.
>

I would suspect that compress would add some predictability to 
a hardware circuit.  My prime concern was any 60 cycle predictability,
the prototype highspeed circuit was very sensitive.

<deleted reference to eliminating compress patterns>

>
>4) I'd feel more comfortable doing some on-line analysis of
>   the random data for quality control purposes.  Knuth describes
>   random number tests.
>   a) are these tests collected someplace convenient (pref. in C)?
>      (if not, I'll scrounge through Numerical Recipes, etc.)
>   b) are there any additional tests that I could use to
>      test crypto strength in addition to "randomness"?
>

This I would be very interested in!  Please email or post some
sort of summary.  I have never exhaustively tested my device.
I am concerned about 60 Hz interference, as mentioned, as well
as any effects from the baud rate clock interfering with the
random stream.

>Pointers and comments appreciated.  I'm happy to "read the manual"
>as long as I find out which one I'm supposed to read.  

<grin>  Me too!  I keep looking at the darn box wondering how to
test it, or build it again better.

>(BTW, I'm a hardware jock, so I'm winging it with cryptography).
>

One hardware jock to another.

-- 
Richard Dell
