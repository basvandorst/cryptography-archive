Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!math.ohio-state.edu!wupost!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: Re: Cryptanalysis of Compressed Text
Message-ID: <16BFF13D3E.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
References:  <20sk9bINNkcv@twain.ucs.umass.edu>
Date: Fri, 02 Jul 93 22:33:28 CDT
Lines: 47

In article <20sk9bINNkcv@twain.ucs.umass.edu>
quilty@twain.ucs.umass.edu (Lulu of the lotus-eaters) writes:
 
>Can someone give me a short sketch of the cryptoanalytic techniques
>which could be used to break even simple encryptions of compressed
>files.
 
   Some articles you might find interesting:
 
   Eurocrypt '91:  "Enhancing Secrecy by Data Compression_, Boyd.
 
   Eurocrypt 'XX:  "An Information-Theoretic Treatment of Homophonic
  (XX = 89 or 90)   Substitution," or some such.  Massey.
 
   As a general rule, no compression method is likely to entirely
rid its output stream of redundancy.  A line from Boyd's article:
"...in the practice, for English text, only a modest increase of
unicity distance is possible, by a factor of between 3 and 6."
 
   Boyd also says that the best compression scheme he tried compressed
technical English down to 2.25 bits per character.  I've seen the figure
of 1 bit per character bounced around as the likely real information content
of English, but I've never seen a good argument for why that's the case.
Anyway, the weakness in this seems to me to be the fact that the analyst
should be assumed to know the compression algorithm.  This implies that
any patterns in the compressed stream would be known to the analyst, and
thus that a chosen- or known-plaintext attack might be able to exploit
these patterns.  Still, I don't think it's a bad idea to pre-compress your
text before sending it.
 
>All of this leaves to the side the known plaintext which $
>generally occurs in the headers of most encrypted files, but those can 
>simply be encrypted seperately or left as plaintext, in order not to 
>comprimise the encryption of the compression block.
 
   Yes.  Another application for one-time pads, perhaps?  Use some kind of
high-quality compression scheme with a random starting state.  Encrypt the
starting state with your one-time pad.  Encrypt the state, and the rest of
the compressed text, with your normal encryption scheme.  Alternatively,
just use a different key on the relatively small starting state and any
"overhead" in the compression stream (like changes to the dictionary)
than on the compressed text.
 
>
>Yours, Lulu...
 
   --John Kelsey, c445585@mizzou1.missouri.edu
