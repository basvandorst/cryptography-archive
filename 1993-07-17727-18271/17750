Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!uunet!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!news.mit.edu!jis
From: jis@MIT.EDU (Jeffrey I. Schiller)
Newsgroups: comp.protocols.kerberos,sci.crypt,comp.security.misc,alt.security.ripem,comp.infosystems.www
Subject: Re: Security services for HTTP:  Kerberos vs. PEM
Date: 2 Jul 93 01:18:49
Organization: Massachusetts Institute of Technology
Lines: 95
Message-ID: <JIS.93Jul2011849@big-screw.MIT.EDU>
References: <503.741393607@moose.cs.indiana.edu>
NNTP-Posting-Host: big-screw.mit.edu
In-reply-to: Marc VanHeyningen's message of Tue, 29 Jun 1993 17:40:07 -0500
Xref: msuinfo comp.protocols.kerberos:2187 sci.crypt:17750 comp.security.misc:4483 alt.security.ripem:258 comp.infosystems.www:599

Now back to the original question!

Whether or not Kerberos or PEM is a better method for authentication
depends a lot on exactly how the application is supposed to work.
Specifically the issues have to do with how large (and diverse) the user
community is, and how "real-time" the application is.

Kerberos is designed for quasi real-time applications. I.e., protocols
that operate by exchanging packets over a period of seconds or minutes.
For example, a Kerberos "authenticator" (the piece of data that you
include with a request to prove that it originated from you) has a five
minute lifetime. If a request is received beyond the five minute limit,
it will be rejected by an unmodified Kerberos implementation.

It is possible to modify Kerberos (or more exactly the software piece of
Kerberos that you link with your server application) to except
authenticators that are older then five minutes. However a modification
to accept authenticators that are hours (or days) old will significantly
effect the level of protection that Kerberos can offer (specifically
protection against request replay).

Kerberos works best with either a single site, or with a collection of
sites that are well connected. In other words between sites that have a
reliable IP-connected network between them. This is true with either
version 4 or version 5 of Kerberos [Version 5 permits a key hierarchy,
which eliminates the N^2 key problem, but all nodes of the key hierarchy
must be on-line and available at all times].

				  PEM

If you are going to use PEM, you almost certainly will want to use PEM
with asymmetric cryptography (i.e., public key). The PEM RFCs do not
define a mechanism for key distribution (for all the secret keys) when
it is used with symmetric cryptography. In fact Key Distribution is
exactly the problem that Kerberos was invented to solve. PEM with
symmetric encryption, as currently defined, really is only usable in one
to one communication (where the parties can exchange a key out of band).
It is possible to write a symmetric key PEM implementation that uses
Kerberos for key distribution, but I don't know of anyone who has done
so [Note: A Kerberos based PEM implementation cannot offer
non-repudiation nor can it offer privacy that is uncompromisable by a
Kerberos administrator. I can go into more details about these and other
issues related to PEM using Kerberos, but that is going beyond the scope
of this post].

PEM with asymmetric encryption is a good solution when you will be
sending MIME objects through a store and forward transport (aka email).
This is because it does not require "real time" transport to work. Of
course if you care about replay attacks (i.e., an attacker captures and
resends a legitimate query), you will have to build that into your
application.

Perhaps one of the key benefits of using PEM in such an application
becomes apparent when you have a large network (long delays between
message origination and receipt), when you have a large user community,
and perhaps most importantly, when you don't have IP connectivity
throughout the community. This benefit is the ability to send and
validate messages without the need for on-line real time Key
Distribution Centers (KDCs) [a Kerberos server *is* a KDC]

			As for patents and fees

If you are in the U.S. you should get and read very carefully the RSAREF
license agreement. Although I do not work for nor represent RSA Data
Security, I believe that it is fair to say that the following simple
rule applies if you want to determine whether or not what you wish to do
is within the scope of the RSAREF license:

     If you make money, you will need a specific license from RSA Data
     Security and you may have to pay royalties.

			   -- or rephrased --

     If you make money, they make money.

     Otherwise you are probably engaging in non-commercial use, and
     you can use RSAREF.

The whole idea of PEM is to facilitate applications like yours!

			       On Export

Simple Rule: If you use strong cryptography, you will likely need an
export license if you are in a COCOM country. This is independent of
whether you choose to use Kerberos, PEM or something else.

There are implementations of Kerberos available now in several
countries. The same is true of PEM, but they are not yet as well known.
Time will change this. I am personally aware of PEM implementations in
(obviously) the U.S., Britain and Sweden. There may be an implementation
in Switzerland as well (P.S. I don't believe Switzerland is a COCOM
country!).

			-Jeff

