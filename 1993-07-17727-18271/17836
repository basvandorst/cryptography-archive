Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!nic.umass.edu!twain.ucs.umass.edu!not-for-mail
From: quilty@twain.ucs.umass.edu (Lulu of the lotus-eaters)
Newsgroups: sci.crypt
Subject: Re: Need file signature algorithm
Date: 7 Jul 1993 22:11:34 -0400
Organization: University of Massachusetts, Amherst
Lines: 53
Message-ID: <21fvomINNt95@twain.ucs.umass.edu>
References: <C9tC6s.1Kx@world.std.com>
NNTP-Posting-Host: twain.ucs.umass.edu

In article <C9tC6s.1Kx@world.std.com> you write:
>I have a physically secure box which contains an imbedded processor
>collecting data.  I need to transmit the data from the secure box to a laptop.
>The laptop must be able to verify that the data did come from the alleged
>sender, and that the file has not been tampered with.  It is desireable
>that the file remain in cleartext with a signature appended to it.
>The algorithm should be public domain.

The obvious solution is some form of symmetric-key ("public-key")
system, probably one based on RSA (prime-number factoring).  Two
implementations of this are widely used:  RIPEM and PGP.  Another
poster discusses the scheme common to both of these in rather great
detail, and I think pretty good clarity (I skimmed it), in response to
you.  The idea behind the schemes, wrt authentication, are to produce
a hash of the message, and then encrypt the hash with the secure-box's
private-key.  Decrypting with the secure-box's public-key verifies
that the message came from the secure-box.  Then the hash is verified
as belonging to the message.  It would be possible to encrypt the
entire message as a signature, but this is *a lot* more computational
work, and wastes bandwidth pretty much needlessly (IMHO).

If encryption of methods is required, pretty much the same idea
applies.  A random key is produced, and the message is single-key
encrypted with the random key.  The random-key is then encrypted using
the destination's public-key (and hence decrypted with the
destination's private-key).  RIPEM uses DES (or triple-DES, I guess)
for the single-key encryption.  PGP uses IDEA.

As to the public-domain part, the answer is mixed -- but I don't think
it matters to much.  If I understand things right, RIPEM is
"public-domain"; but it is subject to export restrictions, and hence
cannot be exported outside the US (Still, no one's going to catch
you... and it's not illegal in the actual jurisdication of another
country).  PGP is copyrighted, but under a GNU-type copyright which
requires its free distribution, and availability of source code.
Since its produced outside the US, export restrictions do not apply.
There's lots of hoopla about PGP supposedly violating RSA (maker of
RIPEM, amongst other things) patents on this group; but it seems
pretty bogus to me in a number of ways.  Anyway, it's not really the
concern of an end-user like you how any possible future lawsuits turn
out (no more than I really care how cases between AMD and Intel turn
out just because I have an AMD CPU -- the point is, *I* won't have my
CPU or my software *recalled* if the maker turns out to violate
intellectual property laws).

Yours, Lulu...


-- 
      _/_/_/ THIS MESSAGE WAS BROUGHT TO YOU BY: Postmodern Enterprises _/_/_/ 
     _/_/    ~~~~~~~~~~~~~~~~[quilty@philos.umass.edu]~~~~~~~~~~~~~~~~~  _/_/ 
    _/_/  The opinions expressed here must be those of my employer...   _/_/ 
   _/_/_/_/_/_/_/_/_/_/ Surely you don't think that *I* believe them!  _/_/ 
