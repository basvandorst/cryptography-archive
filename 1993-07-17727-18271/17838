Path: msuinfo!agate!howland.reston.ans.net!xlink.net!math.fu-berlin.de!unidus.rz.uni-duesseldorf.de!lannert.rz.uni-duesseldorf.de!TSOS
From: TSOS@uni-duesseldorf.de (Detlef Lannert)
Newsgroups: sci.crypt
Subject: Re: Need file signature algorithm
Date: Thu, 8 Jul 1993 06:43:32 GMT
Organization: Universitaetsrechenzentrum, Heinrich-Heine-Universitaet, Duesseldorf
Lines: 63
Message-ID: <TSOS.496.742113811@uni-duesseldorf.de>
References: <C9tC6s.1Kx@world.std.com> <1993Jul8.003707.21066@wdl.loral.com>
NNTP-Posting-Host: lannert.rz.uni-duesseldorf.de
Summary: A secure hash algorithm should suffice.

In article <1993Jul8.003707.21066@wdl.loral.com> koontzd@nebula.lrmsc.loral.com (David Koontz ) writes:

>>From: swebb@world.std.com (Spencer L Webb)
>>
>>I am looking for a solution to the following problem.
>>
>>I have a physically secure box which contains an imbedded processor
>>collecting data.  I need to transmit the data from the secure box to a laptop.
>>
>>The laptop must be able to verify that the data did come from the alleged
>>sender, and that the file has not been tampered with.  It is desireable
>>that the file remain in cleartext with a signature appended to it.
>>
>>The algorithm should be public domain.
>
>In this case when you are only trying to prove to the laptop that the data
>came from the secure box, you can use a private key encryption scheme
>instead of a public key encryption scheme requiring licensing/royalties.
>
>When verification need only be done between two stations holding a common and
>private key for an encryption algorithm E, the sending station would encrypt 
>the message at the point of origin using the private key and encryption 
>algorithm E.  You could then use a computationally secure hash algorithm 
>(see attached) to figure a hash value for the encrypted data.
>
>The sender transmits the message en clair to the receiver, appending the
>hash result.
>
>At the receiving end, the message is encrypted in the private key,
>the hash value is figured and compared to the transmitted hash value,
>validating the message.


If the original poster (Spencer L Webb) just wants a signature but accepts 
the data to be transmitted in clear -- isn't it overkill to use an 
encryption algorithm at all?? 

I'd apply a hash algorithm (SHA might be fine if it spares you any 
licencing problems) to a concatenation of a secret string and the data. 
Transmit only the data, of course, plus the result from the hash 
algorithm. The receiver does the same calculation: Start the hash 
algorithm on the same secret string, then continue with the data, and 
compare the results.

This procedure is equivalent to using a non-standard, secret initial 
value for the hash algorithm's internal buffer; if the hashing is really 
secure, it should be impossible to reconstruct this initial value from a 
message of sufficient length (always include time stamps and random data 
to get a minimum message length of, say, 16 bytes). SHA as well as MD5 
should be perfectly suitable for this. 

[A public-key asymmetric encryption, as suggested by another poster, is 
IMHO equally unnecessary if the secret key string can be stored safely 
in the laptop computer. It is, however, not quite clear from the original 
post whether the laptop is regarded to be sufficiently (physically) 
secure.]

--
Detlef Lannert      DC3EK      E-Mail: tsos@rz.uni-duesseldorf.de
PGP 2.x key available (finger lannert@clio.rz.uni-duesseldorf.de)
Die Mathematiker sind eine Art Franzosen:  Redet man zu ihnen, so
uebersetzen sie es in ihre Sprache, und dann ist es alsobald ganz
etwas anderes.                         Johann Wolfgang von Goethe
