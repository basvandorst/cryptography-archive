Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!uunet!mnemosyne.cs.du.edu!nyx!aspring
From: aspring@nyx.cs.du.edu (andrew spring)
Subject: Use A Random Number, Go To Jail?
Message-ID: <1993Jul15.054550.9677@mnemosyne.cs.du.edu>
Sender: usenet@mnemosyne.cs.du.edu (netnews admin account)
Organization: Nyx, Public Access Unix @ U. of Denver Math/CS dept.
Distribution: usa
Date: Thu, 15 Jul 93 05:45:50 GMT
Lines: 33


Do export controls exist on random number generators?

If not, then what's to prevent me from implementing a block
cipher such as DES, IDEA, or some newly invented cipher in 
software and calling it a random number generator?
Let's say DES is implemented in software on your system as

void encrypt_des( int64 plain,  int64 * cipher, int64 key);
void decrypt_des( int64 cipher, int64 * plain,  int64 key);

Now let's simply rename the interface as:

void random1( int64 * seed, int64 * random, int64 initialState);
void random2( int64 * seed, int64 * random, int64 initialState);

and document the functions as being simply 2 similar versions of 
a random number algorithm?

The DES functions will certainly be able to do fulfill their 
cover story as RNG's; in fact they give much better random output 
than any of the other "real" RNG's I've tested them against (lower
chi-squared and all that).

This qualifies either as a lame attempt to circumvent the intent of
the export laws or a brilliant expose of the utter foolishness and 
unenforceability of those same laws, I'm not sure which.

What determines if a mathematical algorithm is a random number 
generator or an encryption scheme?  It's similarity to known 
examples of the two?  The quality of the random output it produces?
Whatever the exporter wants to call it? Whatever the government 
wants to call it?
