Newsgroups: sci.crypt
Path: msuinfo!caen!batcomputer!munnari.oz.au!bunyip.cc.uq.oz.au!psych.psy.uq.oz.au!eay
From: eay@psych.psy.uq.oz.au (Eric Young)
Subject: Re: ufc-crypt
Message-ID: <CA2tCz.6qp@bunyip.cc.uq.oz.au>
Sender: news@bunyip.cc.uq.oz.au (USENET News System)
Nntp-Posting-Host: grunt.psy.uq.oz.au
Organization: Psychology Department, University of Queensland
References:  <69246@mimsy.umd.edu>
Date: Tue, 13 Jul 1993 00:00:33 GMT
Lines: 51

In article <69246@mimsy.umd.edu>, humphrie@cs.umd.edu (Jim Humphries) writes:
|> Are there any UNIX crypt routines that are faster than ufc-crypt (the one
|> supplied with crack)?
The version I have is faster on some select machines and slower
on others.  I only have access to sparcs right now.
Some times            constant  changing
                        salt      salt
libdes gcc -O2 sparcIPC  870       873
libdes gcc -O2 sparc2   1385      1383
libdes gcc -O2 sparc10  2514      2510
size speeds
text    data    bss
8192    8192    0 
                      constant  changing
                        salt      salt
ufc    gcc -O2 sparcIPC 1055        49
ufc    gcc -O2 sparc2   1163        78
ufc    gcc -O2 sparc10  1410       166
size speeds
text    data    bss
16384   8192    167200

I claim that the difference in the performance is due to the small memory
requirements of my version.  In the case of the sparc2 and sparc10 the speed
is due to the code fitting in the on chip cache.  The sparc10 we have is the bottom of the range version so no 1meg (or whatever size it is) second level
cache.  My 8k of data fits in the on chip cache, the 167k from ufc does not.

The above times are set of quick runs I just made today, both ufc and my
fcrypt have run a bit faster when the machine has less people on it.
The other point to note is that ufc sets up tables dependent on the particular
salt.  Ufc is ideal for use in programs like Crack where lots of crypt()s are
done with the same salt.  For use as a general crypt() (random salts), hmmmm...
not much faster than the general crypt but with a 170k runtime overhead.
Ufc and my version basically use the same techniques but ufc has expanded
some of the tables to reduce the number of lookups.  The overhead ufc has
when changing salts could probably be reduced at the expense of a binary about
170k larger (note the 167k is bss, allocated at program startup).  Just different tradeoffs due to different design goals.  By fortuitous circumstances my is faster on some CPUs.
If I am wrong in my generalisation about ufc I'm sure I'll be corrected :-).

I seem to remember a few other machines where by code was faster but I cannot
come up with numbers at this point in time.

eric

BTW if anyone is interested, the fast crypt I am talking about above is
the one supplied in libdes (a DES library) that I had posted to comp.sources.misc
a while back (most recent version is @ ftp.psy.uq.oz.au (130.102.32.1) pub/DES).
-- 
Eric Young | Systems programmer - Psychology Dept. Queensland Uni.
AARNet     | eay@psych.psy.uq.oz.au

