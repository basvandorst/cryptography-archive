Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!uunet!pipex!uknet!pavo.csi.cam.ac.uk!rja14
From: rja14@cl.cam.ac.uk (Ross Anderson)
Subject: Re: Product cyphers, cypher block chaining and pipelining
Message-ID: <1993Jul1.104944.7779@infodev.cam.ac.uk>
Sender: news@infodev.cam.ac.uk (USENET news)
Nntp-Posting-Host: ely.cl.cam.ac.uk
Organization: U of Cambridge Computer Lab, UK
References: <C9G47A.3LI@dcs.ed.ac.uk>
Date: Thu, 1 Jul 1993 10:49:44 GMT
Lines: 92

In article <C9G47A.3LI@dcs.ed.ac.uk>, pdc@dcs.ed.ac.uk (Paul Crowley) writes:


|> why is DES so complex?

IBM have finally published the DES design criteria: see Report RC 81613 (81421)
by Don Coppersmith entitled `The Data Encryption Standard (DES) and its
Strength Against Attacks'. This is a fairly complete answer to your question.


|> If there is a single book that gives a survey both of modern symmetric
|> block cyphers and cryptanalytic techniqes for them rather than all this
|> Playfair cypher distraction I'd be most grateful for a pointer to it.

Eli Biham and Adi Shamir have written a book on differential cryptanalysis
which should be published in the next month or two. This covers a large number
of block ciphers, including DES. In the meantime there's their article in the
`Journal of Cryptology' a couple of years back, plus various conference papers.


|> For example, why have an initial permutation? 

Cynics say in order to make the algorithm run slower in software. More likely
that's how they clocked the data in to their first prototype board. Ask IBM!


|>                 Why widen the input to the confusion function from 32
|> bits to 48 using bit-selection table E before XORing with the key?  Why
|> permute with P afterwards? 

To spread the effect of a single bit input change as rapidly and completely
as possible through the structure. The IBM report gives detail on this.


|> Why is the key scheduling so complex? 

IBM had nothing to say on this point, but it was explained by Biham's paper at
Eurocrypt 93 last month. If the key scheduling is regular, there are attacks
based on related keys. Eg if you can get plaintexts encrypted with the target
key K and with K xor C, this can be dangerous (and the IBM 3848 used just such
`key variants').


|> My question is, why isn't cypher block chaining carried out after every
|> round of encryption?

Because then a chosen text attack could be mounted on partial DES. For example,
if you chain after 8 rounds, your opponent can attack the 8-round version of
DES, which is fairly trivial (this observation is also due to Biham).


|>                                                       Does the
|> intermediate state information passed on from block to block somehow
|> fall out at the other end, making cryptanalysis easier?

If you can guess relationships between intermediate states and find a way to
check these guesses, then you're well on the way to a break.


|> Are there any wide-state cyphers, ie cyphers which, in encrypting a
|> stream of blocks, carry a great deal of state from one block to the next?


There are wide-block ciphers which have the same effect. See for example
`Block Encryption', DJ Wheeler, Cambridge Tech report no 120 (1988).


|> Also, why do block cyphers work on such small blocks?  It's no extra
|> computational cost to work on kilobyte-sized blocks, and I would have
|> expected it to make analysis considerably more difficult.

It does seem to: there's more intermediate state to guess.


|>  Does it give too much scope to a chosen-plaintext attack?

Depends on the design.


|>     Of course, a good cypher will be designed to admit fast software
|> implementations too, unlike DES which seems to be designed to prevent
|> them.

True! A really fast, strong, software encryption algorithm would make a lot of
difference. At the low end, you could encrypt data on the fly in an 8-bit micro
and thus produce secure modems at zero extra marginal cost; at the high end,
you could provide secure PC-based videoconferencing without custom hardware.


Ross


