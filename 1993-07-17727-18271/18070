Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!uunet!psinntp!actcnews!sun1x!casun2.res.utc.com!koopman
From: koopman@PROBLEM_WITH_INEWS_DOMAIN_FILE (Philip Koopman)
Subject: Generating random bits: practical questions
Message-ID: <1993Jul19.164311.28040@sun1x.res.utc.com>
Summary: detailed implementation tradeoffs 
Sender: news@sun1x.res.utc.com
Nntp-Posting-Host: 192.19.50.60
Reply-To: koopman@utrc.utc.com
Organization: United Technologies Research Center
X-Newsreader: TIN [version 1.1 PL8]
Date: Mon, 19 Jul 1993 16:43:11 GMT
Lines: 60


I need to generate a farily huge volume of random information,
and need to use a method that eliminates the possibility of
guessing other portions of the information given a moderately
large subset of it.  (Huge = several Gbytes; moderately large = 1 Mbyte)
I suppose it's OK if the NSA can crack the information, but
not anyone with fewer than a handful of Crays to throw at the problem.

Looking at the FAQ, I imagine it would be OK to use (on my Sparcstation 2):

        cat /dev/audio | compress - | des private_key  > foo


The good news is that it's OK to take a few years to generate
the Gbytes; the bad news is that it has to run on a PC,
so I suspect speed will still be an issue.

Here are some engineering trades I have in mind.  Comments?

1) I plan to use a Soundblaster card input with no microphone.
   Would a white noise generator be better? (I imagine I should
   make sure the white noise isn't from a hardware LFSR!!)
   Or a microphone with background noise?
   I can't use a USENET feed as a source -- the PC won't have access.

2) I can try to dig up a PC version of compress, but PKZIP
   is more readily available.

3) I would think it would be a lot faster to xor the compressed
   stream with the output of an additive random number generator
   (e.g., Unix random(3)) with periodic (say, every 100Kbytes)
   reseeding from the compressed bit stream.  This should be
   faster than DES and exportable.  Is this a big gaping hole?
   I'm aware of the vulnerabilities of linear processes, but in
   this case I'd just be using it to obfuscate the structure
   of a "compress"ed high-entropy bit stream, not encrypt
   what I'd consider plain text.

4) I'd feel more comfortable doing some on-line analysis of
   the random data for quality control purposes.  Knuth describes
   random number tests.
   a) are these tests collected someplace convenient (pref. in C)?
      (if not, I'll scrounge through Numerical Recipes, etc.)
   b) are there any additional tests that I could use to
      test crypto strength in addition to "randomness"?

Pointers and comments appreciated.  I'm happy to "read the manual"
as long as I find out which one I'm supposed to read.  

Thanks for helping!

--

Phil Koopman          koopman@utrc.utc.com   (203) 727-1624
United Technologies Research Center (UTRC)
Silver Lane      M/S 48
East Hartford, CT  06108  USA
I don't speak for them, and they don't speak for me.
(BTW, I'm a hardware jock, so I'm winging it with cryptography).

