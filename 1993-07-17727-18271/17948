Newsgroups: sci.crypt
Path: msuinfo!caen!math.ohio-state.edu!cs.utexas.edu!uunet!Germany.EU.net!mcsun!dkuug!uts!daimi!glad
From: glad@daimi.aau.dk (Michael Glad)
Subject: Re: ufc-crypt
Message-ID: <1993Jul13.070306.3692@daimi.aau.dk>
Sender: news@daimi.aau.dk
Organization: DAIMI: Computer Science Department, Aarhus University, Denmark
References: <69246@mimsy.umd.edu> <CA2tCz.6qp@bunyip.cc.uq.oz.au>
Date: Tue, 13 Jul 93 07:03:06 GMT
Lines: 32

eay@psych.psy.uq.oz.au (Eric Young) writes:

>The other point to note is that ufc sets up tables dependent on the particular
>salt.  Ufc is ideal for use in programs like Crack where lots of crypt()s are
>done with the same salt.  For use as a general crypt() (random salts), hmmmm...
>not much faster than the general crypt but with a 170k runtime overhead.

UFC-crypt are actually being distributed along with the GNU C library and
is the standard crypt() on quite a few LINUX PC's.

> ent tradeoffs due to different design goals.  By fortuitous circumstances my is faster on some CPUs.
>If I am wrong in my generalisation about ufc I'm sure I'll be corrected :-).

>I seem to remember a few other machines where by code was faster but I cannot
>come up with numbers at this point in time.


Unless you run on large-cache machines, I'm afraid that Eric's implementation
generally beats UFC even if simple benchmarks may say the opposite. On 
HP 9000/705, I have seen dramatic performance gains in actual Crack performance
when using the crypt() from libdes instead of UFC-crypt. 
This is certainly due to caching issues. Some day, I'm going to measure actual
Crack performance on a large-cache snake. Sometime in the future when all 
machines have hardware caches in excess of 128k or when these broken pieces 
of hardware have been dropped altogether, things may change. 

	-- Michael

[ I'll be away from mail/news for about 16 days and will not be able
  to (re)comment follow-ups/mails. 
] 

