.TH CHAIN 1V VMB
'\"	last edit:	92/02/11	D A Gwyn
'\"	SCCS ID:	@(#)chain.1	1.1
.SH NAME
chain \- chain together overlapping token sequences
.SH SYNOPSIS
.ds cW (CW\" change to I (without the paren) if you don't have a CW font
.ds cB (CB\" change to B (without the paren) if you don't have a CB font
\f\*(cBchain\fP
[
\f\*(cB-d\fP
.I delims
] [
\f\*(cB-w\fP
.I wildcard
]
.SH DESCRIPTION
\f\*(cBchain\fP
reads from the text file on its standard input
a set of token sequences,
one sequence per line,
with tokens within each sequence separated by
one or more of a specified set of delimiter characters.
Each sequence represents a ``chain'' of tokens;
identical tokens may appear in more than one chain.
\f\*(cBchain\fP
then writes to its standard output a similar text file
in which each token sequence is a maximal-length chain
produced by merging together input chains that contain
identical non-wild-card tokens.
Each distinct non-wild-card input token
will appear exactly once in the output.
Tokens in the output sequences are separated by
the first specified delimiter character,
and
for any chain that forms a loop,
its corresponding output sequence
(which begins at an arbitrary token in the loop)
will have an extra delimiter appended to the last token.
(See the second
.SM EXAMPLE
below.)
.P
The default delimiter characters are space and horizontal tab;
thus output tokens by default are separated by single spaces.
The
\f\*(cB-d\fP
option may be used to specify a different delimiter character
or set of characters.
As a special case, specifying an empty string for the delimiter argument
causes each input character (other than new-line)
to be treated as a separate token,
and no delimiter characters to appear in the output.
.P
An important feature of
\f\*(cBchain\fP
is its support for match-anything input tokens (``wild cards'').
During the chaining process,
a wild-card input token
.RI ( i.e.
one identical to the string specified as the argument to the
\f\*(cB-w\fP
option)
is assumed to match any non-wild-card token.
Merging of chains occurs only when identical non-wild-card tokens are found,
and as such overlapping chains are merged
any non-wild-card token overrides
a wild card in the same position in the chain.
In the output sequences,
all unreplaced wild cards are output as wild-card tokens.
If (as is the default)
an empty string is specified as the wild-card token,
the effect is to disable the wild-card feature.
.SH HINTS
If these input and output formats aren't quite what you would like,
you can easily use
.IR sed (1)
and/or other standard utilities to convert them.
.P
The sequence containing the lexicographically first non-wild-card token
will be printed first,
then the sequence containing the lowest remaining unprinted token,
and so on.
It is not clear that any real use can be made of this particular property,
but there is probably
.I some
application.
.SH DIAGNOSTICS
Error messages are printed on the standard error output
and are meant to be self-explanatory.
The most common diagnostic is that two non-wild-card input tokens conflict,
meaning that the maximal set of chains
would have these two distinct tokens occupying the same position
within a single chain;
this fatal inconsistency indicates that the input data is incorrect.
.SH "EXIT CODES"
\f\*(cBchain\fP
returns a zero exit status if and only if no errors occur.
.bp
.SH EXAMPLES
.RS
\f\*(cB
.ta 8n 16n 24n 32n 40n 48n 56n 64n
.nf
$ \fP\f\*(cWchain -w '?' <<!
QUHW	MUCO	?	JUHQ	SAFA	LUBM
TUSK	RIMD	?	MUCO	?	JUHQ
!\fP\f\*(cB
TUSK RIMD QUHW MUCO ? JUHQ SAFA LUBM\fP
.ta .5i 1i 1.5i 2i 2.5i 3i 3.5i
.fi
.RE
.P
.RS
\f\*(cB
.nf
$ \fP\f\*(cWchain -d '-' <<!
b-c-d
e-f-g
a-b
d-a
!\fP\f\*(cB
a-b-c-d-
e-f-g
.fi
.RE
.P
.RS
\f\*(cB
.nf
$ \fP\f\*(cWchain -d '' <<!
FGJ
XYZ
RTI
PQS
KEB
ICH
ZAR
MNP
VWX
HOK
SUV
JLM
BDF
!\fP\f\*(cB
ARTICHOKEBDFGJLMNPQSUVWXYZ
.fi
.RE
.SH "SEE ALSO"
.IR tsort (1)
.SH AUTHOR
Douglas A.\& Gwyn, U.S.\& Army BRL/VLD-VMB
.SH BUGS
The current version of
\f\*(cBchain\fP
uses recursion,
which in the case of nearly sorted input
could nest quite deeply;
on some systems (those having small run-time stacks)
this could prevent sucessful execution.
For more-or-less random input token sequences,
this problem should seldom arise.
.P
Since the entire input must be stored before any output is generated,
\f\*(cBchain\fP
may run out of memory when fed extremely large input files.
