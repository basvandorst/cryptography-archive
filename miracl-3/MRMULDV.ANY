/*
 *  MIRACL routines muldiv, muldvm and muldvd
 *  mrmuldv.c
 *
 *  THIS FILE CONTAINS MANY VERSIONS OF THESE THREE ROUTINES
 *  COPY THIS FILE TO MRMULDV.C AND DELETE THOSE PARTS IRRELEVANT TO
 *  YOUR REQUIREMENTS
 * 
 *  muldiv() calculates (a*b+c)/m and (a*b+c)%m as quickly as possible. Should 
 *  ideally be written in assembly language of target machine for speed 
 *  and/or to allow largest possible MAXBASE. See mirdef.h. The problem is
 *  to avoid overflow in the calculation of the intermediate product a*b+c. 
 *  Note that this routine needs only work for UNSIGNED parameters 
 *
 *  muldvm() and muldvd() routines are necessary to support full-width number 
 *  base working.
 *
 *  muldvm - returns (a*base+c)/m and remainder
 *  muldvd - returns (a*b+c)/base and remainder 
 *
 *  Note that full-width base working may not be possible for all processors. 
 *  For example it cannot be used on a VAX with smalls defined as unsigned 
 *  ints. This is because the instruction set does not support unsigned 
 *  multiply and divide instructions. In such cases always use a maximum base 
 *  of MAXBASE rather than 0, and supply two dummy routines muldvm and muldvd 
 *  to satisfy the linker. 
 *
 *  Since parameter passing and returning is time-consuming, these routines 
 *  should be generated 'inline', if compiler allows it. Parameter passing
 *  by register will also be faster than via the stack. For even faster 
 *  operation, use in-line assembly to speed up the inner loops of routines 
 *  pmul(), sdiv(), padd(), psub(), multiply() and divide(). See these
 *  routines for details of MIcrosoft/Turbo C small/medium model inline 
 *  assembly, which gives a substantial speed-up.
 *
 *  NOTE: All other things being equal, versions of MIRACL with 32-bit smalls
 *  will run 3-4 times faster than versions with 16-bit smalls, even for medium
 *  precision arithmetic, such as used in Public Key systems. However this
 *  advantage will NOT be apparent when smalls are defined as longs, using 
 *  miracl.hpc for example. This is because the compilers are still 16-bit 
 *  oriented, they deal with longs very inefficiently, fetching them in two 
 *  16-bit halves. A true 32-bit compiler (with a 32-bit int type) running
 *  on a true 32-bit CPU will be three to four times faster. For example a 512 
 *  bit RSA decrypt takes 7.5 seconds on a 16Mhz 80386 based IBM PS/2 Model 80,
 *  using Turbo C++ version 1.0 (although only 3 seconds using some careful 
 *  in-line assembly - see above). The same operation using the Watcom C/386
 *  32-bit compiler takes 2.5 seconds. Many popular DOS compilers do not 
 *  support the 32-bit capability of the 80386/80486 (or its 32-bit wide data 
 *  bus), which is a great pity.
 *  
 *  Note that a portable C version of 'muldiv' is not possible on most 32-bit
 *  computers, as ints and longs are both 32-bits (but see Blakely-Sloan 
 *  method below). The portable versions may be used however if smalls are 
 *  defined as unsigned shorts, usually 16 bits. This would amount however to 
 *  using the 32-bit processor in a 16 bit mode and would be very inefficient 
 *  - up to 4 times slower. See mirdef.haf 
 *
 *  IMPORTANT NOTE - when using portable version make sure to use the
 *  correct definition of BIG/LITTLE_ENDIAN for your processor in mirdef.h
 *  8086 and ARM are little endian, 68000 and SPARC big endian
 *  (This refers to the byte-ordering used by these processors
 *  Big endians have the most significant byte in the lowest address.)
 *
 *  First the portable versions, for use when small is the same size 
 *  as short, and there is a double length long capable of holding the product 
 *  of two short types, usually 16 and 32 bits respectively. 
 *
 *  This is followed by various other assembly language implementations for 
 *  popular processors, computers and compilers.
 *

#include <mirdef.h>

#ifdef BIG_ENDIAN
#define MSD 0
#define LSD 1
#endif

#ifdef LITTLE_ENDIAN
#define MSD 1
#define LSD 0
#endif

union longasshorts { unsigned long p; unsigned short s[2]; };

unsigned short muldiv(a,b,c,m,rp)
unsigned short a,b,c,m,*rp;
{
    unsigned long p;
    unsigned short q;
    p=(unsigned long)a*b+c;
    q=p/m;
    *rp=p-(unsigned long)q*m;
    return q;
}

unsigned short muldvm(a,c,m,rp)
unsigned short a,c,m,*rp;
{
    unsigned short q;
    union longasshorts dble;
    dble.s[MSD]=a;
    dble.s[LSD]=c;
    q=dble.p/m;
    *rp=dble.p-(unsigned long)q*m;
    return q;
}

unsigned short muldvd(a,b,c,rp)
unsigned short a,b,c,*rp;
{
    union longasshorts dble;
    dble.p=(unsigned long)a*b+c;
    *rp=dble.s[LSD];
    return dble.s[MSD];
}

;
;   VAX11 version for Dec C compiler
;   with 32 bit int using 64-bit quadword
;   for the intermediate product. 
;   Use with mirdef.h32 - but change MAXBASE to ((small)1<<(MR_SBITS-2))
;   The problem is that the emul and ediv instructions work only
;   for signed types
;
    .entry muldiv,0
    subl   #4,sp
    emul   4(ap),8(ap),12(ap),r0   ;a*b+c
    ediv   16(ap),r0,r0,@20(ap)    ;quo. in r0, rem. in *rp
    ret
    .end
;
;   Fullwidth base working not possible on VAX, so no muldvm() or muldvd()
;   Supply dummies as below to satisfy linker
;

unsigned int muldvm(a,c,m,rp)
unsigned int a,c,m,*rp;
{}

unsigned short muldvd(a,b,c,rp)
unsigned short a,b,c,*rp;
{}

;
;  IBM-PC versions - small memory model only
;  Easily modified for other memory models
;
;  For large code models (e.g. medium)
;
;           change    _TEXT    to    mrmuldv_TEXT  (in three places)
;           change    NEAR     to    FAR
;           change    [bp+4]   to    [bp+6]
;           change    [bp+6]   to    [bp+8]
;           change    [bp+8]   to    [bp+10]
;           change    [bp+10]  to    [bp+12]
;           change    [bp+12]  to    [bp+14]
;
;  For large data models, see Turbo C version below for required modification
;
;  Microsoft C compiler V4.0+
;  Written for MS macro-assembler
;
        ASSUME CS:_TEXT
_TEXT   SEGMENT BYTE PUBLIC 'CODE'

        PUBLIC _muldiv
_muldiv PROC NEAR
        push bp                 ;standard C linkage
        mov  bp,sp

        mov  ax,[bp+4]          ;get a
        mul  WORD PTR [bp+6]    ;multiply by b
        add  ax,[bp+8]          ;add c to low word
        adc  dx,0h              ;add carry to high word
        div  WORD PTR [bp+10]   ;divide by m
        mov  bx,[bp+12]         ;get address for remainder
        mov  [bx],dx            ;store remainder

        pop  bp                 ;standard C return
        ret                     ;quotient in ax

_muldiv endP

        PUBLIC _muldvm
_muldvm PROC NEAR
        push bp                 ;standard C linkage
        mov  bp,sp

        mov  dx,[bp+4]          ;get a
        mov  ax,[bp+6]          ;add in c
        div  WORD PTR [bp+8]    ;divide by m
        mov  bx,[bp+10]         ;get address for remainder
        mov  [bx],dx            ;store remainder

        pop  bp                 ;standard C return
        ret                     ;quotient in ax

_muldvm endP

        PUBLIC _muldvd
_muldvd PROC NEAR
        push bp                 ;standard C linkage
        mov  bp,sp

        mov  ax,[bp+4]          ;get a
        mul  WORD PTR [bp+6]    ;multiply by b
        add  ax,[bp+8]          ;add c to low word
        adc  dx,0h              ;add carry to high word
        mov  bx,[bp+10]         ;get address for remainder
        mov  [bx],ax            ;store remainder
        mov  ax,dx
        pop  bp                 ;standard C return
        ret                     ;quotient in ax

_muldvd endP

_TEXT   ENDS
END

/*
 *  Turbo C compiler V1.5+, or Turbo/Borland C++. 
 *  Uses inline assembly feature
 *  Generates code identical to above Microsoft version, which
 *  can be used instead.
 */
unsigned int muldiv(a,b,c,m,rp)
unsigned int a,b,c,m,*rp;
{
    asm mov  ax,a             ;/* get a                     */
    asm mul  WORD PTR b       ;/* multiply by b             */
    asm add  ax,c             ;/* add c to low word         */
    asm adc  dx,0h            ;/* add carry to high word    */
    asm div  WORD PTR m       ;/* divide by m               */
    asm mov  bx,rp            ;/* get address for remainder */
    asm mov  [bx],dx          ;/* store remainder           */
    return (_AX);
}
/*    Replace last two asm lines when using large data memory models */
/*    asm les  bx, DWORD PTR rp          ; get address for remainder */
/*    asm mov  WORD PTR es:[bx],dx       ; store remainder           */

unsigned int muldvm(a,c,m,rp)
unsigned int a,c,m,*rp;
{
    asm mov dx,a              ;/* get a                     */
    asm mov ax,c              ;/* add in c to low word      */
    asm div WORD PTR m        ;/* divide by m               */
    asm mov bx,rp             ;/* get address for remainder */
    asm mov [bx],dx           ;/* store remainder           */
    return (_AX);
}
/*    Replace last two asm lines when using large data memory models */
/*    asm les  bx, DWORD PTR rp          ; get address for remainder */
/*    asm mov  WORD PTR es:[bx],dx       ; store remainder           */

unsigned int muldvd(a,b,c,rp)
unsigned int a,b,c,*rp;
{
    asm mov  ax,a             ;/* get a                     */
    asm mul  WORD PTR b       ;/* multiply by b             */
    asm add  ax,c             ;/* add c to low word         */
    asm adc  dx,0h            ;/* add carry to high word    */
    asm mov  bx,rp            ;/* get address for remainder */
    asm mov  [bx],ax          ;/* store remainder           */
    return (_DX);
}
/*    Replace last two asm lines when using large data memory models */
/*    asm les  bx, DWORD PTR rp          ; get address for remainder */
/*    asm mov  WORD PTR es:[bx],ax       ; store remainder           */

;
;  IBM-PC-8087 for Microsoft C compiler V4.0+
;  with 'small' defined as 'unsigned long' (32 bit). See mirdef.hpc
;  This allows IBM-PC to look a bit like a 32-bit computer
;  (which it isn't). To make use of this option:
;
;  (1) Must have 8087 Maths Co-processor (for speed and to hold 64-bit
;      intermediate product).
;
;  (2) Must use 'ANSI' enhanced type C compiler, e.g. Microsoft V3.0+
;      and must use header 'miracl.h' which declares function
;      parameter types. 
;
;      Note: some compilation warnings may be generated - ignore them.  
;
;  Note: This is NOT, in most cases, faster, but it does allow
;        very high precision calculations, e.g. 1000!
;
;  Note: No versions of muldvm() and muldvd() yet written for this method.
;
        ASSUME CS:_TEXT
_TEXT   SEGMENT BYTE PUBLIC 'CODE'

        PUBLIC _muldiv
_muldiv PROC NEAR
        push si                 ;standard C linkage
        push bp          
        mov  bp,sp

        finit                   ;initialise 8087
        fild  DWORD PTR [bp+6]  ;get a
        fimul DWORD PTR [bp+0ah];multiply by b
        fiadd DWORD PTR [bp+0eh];add c
        fild  DWORD PTR [bp+12h];get m
        fld st(1)               ;duplicate a*b+c on stack
        fprem                   ;get remainder
        fist  DWORD PTR [bp+0ah];store remainder in b
        fsubr st,st(2)          ;subtract rem from total
        fdiv st,st(1)           ;divide by m
        fist  DWORD PTR [bp+6]  ;store quotient in a
        wait

        mov  si,[bp+22]         ;get address for remainder
        mov  ax,[bp+10]
        mov  dx,[bp+12]         ;get remainder
        mov  [si],ax
        mov  [si+2],dx          ;store remainder
        mov  ax,[bp+6]
        mov  dx,[bp+8]          ;get quotient in dx:ax

        pop  bp                 ;standard C return
        pop  si
        ret

_muldiv endP

_TEXT   ENDS
END

;
;  IBM-80386 version - for Microsoft C V5.0+
;  Written for MS macro-assembler V5.0+ by Andrej Sauer 
;  with 'small' defined as 'unsigned long' (32 bit). See mirdef.hpc
;  Same comments apply as above (except for 8087 requirement)   
;  Note that this version will also work with the latest Zortech and
;  Borland compilers.
;
        .386
        ASSUME CS:_TEXT
_TEXT   SEGMENT USE16 PUBLIC 'CODE'

        PUBLIC _muldiv
_muldiv PROC  NEAR
        push  bp                     ;standard C linkage
        mov   ebp,esp

        mov   eax,[ebp+4]            ;get a
        mul   DWORD PTR [ebp+8]      ;multiply by b
        add   eax,DWORD PTR [ebp+12] ;add c to low word
        adc   edx,0h                 ;add carry to high word
        div   DWORD PTR [ebp+16]     ;divide by m
        movzx ebx,WORD PTR [ebp+20]  ;get address for remainder, zero high
        mov   [ebx],edx              ;store remainder
        shld  edx,eax,16             ;shift higher half of quotient
                                     ;into lower half of edx

        pop   bp                     ;standard C return
        ret                          ;quotient: high bits in dx, lows in ax

_muldiv endP

        PUBLIC _muldvm
_muldvm PROC  NEAR
        push  bp                     ;standard C linkage
        mov   ebp,esp

        mov   edx,[ebp+4]            ;get a
        mov   eax,[ebp+8]            ;add in c
        div   DWORD PTR [ebp+12]     ;divide by m
        movzx ebx,WORD PTR [ebp+16]  ;get address for remainder, zero high
        mov   [ebx],edx              ;store remainder
        shld  edx,eax,16             ;shift higher half of quotient
                                     ;into lower half of edx
        pop   bp                     ;standard C return
        ret                          ;quotient: high bits in dx, lows in ax

_muldvm endP


        PUBLIC _muldvd
_muldvd PROC  NEAR
        push  bp                     ;standard C linkage
        mov   ebp,esp

        mov   eax,[ebp+4]            ;get a
        mul   DWORD PTR [ebp+8]      ;multiply by b
        add   eax,DWORD PTR [ebp+12] ;add c to low word
        adc   edx,0h                 ;add carry to high word
        movzx ebx,WORD PTR [ebp+16]  ;get address for remainder, zero high
        mov   [ebx],eax              ;store remainder
        mov   eax,edx
        shld  edx,eax,16             ;shift higher half of quotient
                                     ;into lower half of edx

        pop   bp                     ;standard C return
        ret                          ;quotient: high bits in dx, lows in ax

_muldvd endP

_TEXT   ENDS
END

/
/  Version for 32-bit Sun 386i Workstation
/
        .file   "mrmuldv.c"
        .version        "sun386-1.0"
        .text
        .globl  muldiv
muldiv:
        pushl   %ebp
        movl    %esp,%ebp

        movl    8(%ebp),%eax         /get a
        mull    12(%ebp)             /multiply by b
        addl    16(%ebp),%eax        /add c to low word
        adcl    $0,%edx              /add carry to high word

        divl    20(%ebp)             /divide by m 
        movl    24(%ebp),%ebx        /get address for remainder
        movl    %edx,(%ebx)          /store remainder

        popl    %ebp
        ret

        .text
        .globl  muldvm
muldvm:
        pushl   %ebp
        movl    %esp,%ebp

        movl    8(%ebp),%edx       /get a
        movl    12(%ebp),%eax      /add in c
        divl    16(%ebp)           /divide by m

        movl    20(%ebp),%ebx      /get address for remainder
        movl    %edx,(%ebx)        /store remainder

        popl    %ebp
        ret

        .text
        .globl  muldvd
muldvd:
        pushl   %ebp
        movl    %esp,%ebp

        movl    8(%ebp),%eax       /get a
        mull    12(%ebp)           /multiply by b
        addl    16(%ebp),%eax      /add c to low word
        adcl    $0,%edx            /add carry to high word
        movl    20(%ebp),%ebx      /get address for remainder
        movl    %eax,(%ebx)        /store remainder
        movl    %edx,%eax          /get quotient

        popl    %ebp
        ret

;
;  Watcom C/386 32-bit compiler V7.0. Use with mirdef.h32
;  Most parameters passed in registers
;  Written for Phar Lap 386ASM macro-assembler
;

        .386
        ASSUME CS:_TEXT
_TEXT   SEGMENT BYTE PUBLIC 'CODE'

        PUBLIC muldiv_
muldiv_ PROC NEAR

        mul     edx                 ;multiply a*b
        add     eax,ebx             ;add in c
        adc     edx,0               ;carry
        div     ecx                 ;divide by m
        mov     ebx,[esp+4]
        mov     [ebx],edx           ;remainder
        ret     4                   ;quotient in eax

muldiv_ endP

        PUBLIC muldvm_
muldvm_ PROC NEAR

        xchg    eax,edx       ;a*base+c
        div     ebx           ;divide by m
        mov     [ecx],edx     ;store remainder
        ret                   ;quotient in eax

muldvm_ endP

        PUBLIC muldvd_
muldvd_ PROC NEAR

        mul     edx           ;multiply a*b
        add     eax,ebx       ;add in c
        adc     edx,0
        mov     [ecx],eax     ;store remainder
        mov     eax,edx       ;get quotient
        ret                   ;quotient in eax

muldvd_ endP

_TEXT   ENDS
END

;
;  Zortech C/386 32-bit compiler V2.1
;  Use with mirdef.h32
;  Written for Phar lap 386ASM macro-assembler
;

        .386
        ASSUME CS:_TEXT
_TEXT   SEGMENT BYTE PUBLIC 'CODE'

        PUBLIC _muldiv
_muldiv PROC NEAR

        mov     eax,DWORD PTR [esp+4]
        mul     DWORD PTR [esp+8]
        add     eax,DWORD PTR [esp+12]
        adc     edx,0         
        div     DWORD PTR [esp+16]
        mov     ebx,DWORD PTR [esp+20]
        mov     [ebx],edx         
        ret

_muldiv endP

        PUBLIC _muldvm
_muldvm PROC NEAR

        mov     edx,DWORD PTR [esp+4]
        mov     eax,DWORD PTR [esp+8]
        div     DWORD PTR [esp+12]
        mov     ebx,DWORD PTR [esp+16]
        mov     [ebx],edx
        ret              

_muldvm endP

        PUBLIC _muldvd
_muldvd PROC NEAR

        mov     eax,DWORD PTR [esp+4]
        mul     DWORD PTR [esp+8]
        add     eax,DWORD PTR [esp+12]
        adc     edx,0
        mov     ebx,DWORD PTR [esp+16]
        mov     [ebx],eax
        mov     eax,edx
        ret        

_muldvd endP

_TEXT   ENDS
END

unsigned int muldiv(a,b,c,m,rp)
unsigned int a,b,c,m,*rp;
{
    asm
    {
    ;
    ;  MACintosh version for Megamax or Lightspeed  Think C compiler
    ;  with 16-bit int, 68000 processor
    ;  A 32 bit version for the 68020, for use with mirdef.hpc (with smalls 
    ;  defined as unsigned longs) should be possible - but not implemented, 
    ;  as inline 68020 instructions not supported by current compilers
    ;
        move   a(A6),D1      ;get a
        mulu   b(A6),D1      ;multiply by b
        clr.l  D0
        move   c(A6),D0      ;get c
        add.l  D0,D1         ;D1 contains a*b+c
        divu   m(A6),D1      ;divide by m
        move   D1,D0         ;return with quotient in D0
        swap   D1            ;get remainder
        move.l rp(A6),A0     ;get address for remainder
        move   D1,(A0)       ;store remainder
    }
}

unsigned int muldvm(a,c,m,rp)
unsigned int a,c,m,*rp;
{
    asm
    {
    ; 
    ; Version of muldvm for Apple MAC
    ;
        clr.l  D1
        move   a(A6),D1      ;get a
        swap   D1            ;move a to high word
        move   c(A6),D1      ;add in c
        divu   m(A6),D1      ;divide by m
        move   D1,D0         ;return quotient in D0
        swap   D1            ;get remainder
        move.l rp(A6),A0     ;get address for remainder
        move   D1,(A0)       ;store remainder
    }
}

unsigned int muldvd(a,b,c,rp)
unsigned int a,b,c,*rp;
{
    asm
    {
    ;
    ; Version of muldvd for Apple MAC
    ;
        move   a(A6),D1      ;get a
        mulu   b(a6),D1      ;multiply by b
        clr.l  D0
        move   c(A6),D0      ;get c
        add.l  D0,D1         ;add in c
        move.l D1,D0         
        swap   D0            ;return quotient in D0
        move.l rp(A6),A0     ;get address for remainder
        move   D1,(A0)       ;store remainder
    }
}


unsigned int muldiv(a,b,c,m,rp)
unsigned int a,b,c,m,*rp;
{
    asm
    {
    ;
    ; 32016 processor version for BBC Master Scientific
    ; with 32-bit int, by Dudley Long, Rutherford-Appleton Labs.
    ; No muldvm() or muldvd()
    ;
        movd   a,0           ;move a to R0
        meid   b,0           ;multiply  by b, result extended
        addd   c,0           ;add c to extended number in R0 & R1
        addcd  #0,1
        deid   m,0           ;divide by m
        movd   0,0(rp)       ;remainder to *rp
        movd   1,0           ;quotient returned in R0
    }
}

;
; Acorn ARM Risc version (32-bit) for Archimedes micro
; Wingpass Macro Assembler
; Use with mirdef.h32
;
.INCLUDE "A.REGNAMES"

.AREA C$$code, .CODE, .READONLY

muldiv::
         MOV     ip, sp             ;standard linkage
         STMFD   sp!, {v1-v4}

         CMPS    a2,#0x80000000     ;check for b=MAXBASE
         MOVEQ   v3,a1,LSL #31      ;this idea is quicker because
         MOVEQ   v4,a1,LSR #1       ;of ARM barrel shifting capability
         BEQ     addin
         MOV     v1,a1,LSR #16      ;do it the hard way
         MOV     v2,a2,LSR #16
         BIC     a1,a1,v1,LSL #16
         BIC     a2,a2,v2,LSL #16
         MUL     v3,a1,a2           ;form partial products of a*b
         MUL     v4,v1,v2
         SUB     v1,v1,a1
         SUB     v2,a2,v2
         MLA     v1,v2,v1,v3        ;look - only 3 MULs!
         ADD     v1,v1,v4
         ADDS    v3,v3,v1,LSL #16
         ADC     v4,v4,v1,LSR #16
addin:
         ADDS    v3,v3,a3           ;now add in c
         ADCCS   v4,v4,#0

         CMPS    a4,#0x80000000     ;check for m=MAXBASE
         MOVEQ   a1,v3,LSR #31
         ADDEQ   a1,a1,v4,LSL #1
         BICEQ   v4,v3,#0x80000000
         BEQ     leave
         MOV     a1,#0              ;do long division by m

divlp:

.REPEAT 32                          ;2xfaster than a loop!
         MOVS    v3,v3,ASL #1       ;get next bit into carry
         ADC     v4,v4,v4           ;accumulate remainder
         CMPS    v4,a4
         SUBCS   v4,v4,a4
         ADC     a1,a1,a1           ;accumulate quotient
.ENDREPEAT

leave:
         LDR     v3,[ip]
         STR     v4,[v3]       ;store remainder
         LDMFD   sp!, {v1-v4}
         MOVS pc,lr

muldvm::
         STMFD   sp!, {v1-v2}

         MOV     v2,a1              ;'multiply' by 2^32
         MOV     v1,a2              ;add in c

         MOV     a1,#0              ;do long division by m

.REPEAT 32                          ;2xfaster than a loop!
         MOVS    v1,v1,ASL #1       ;get next bit into carry
         ADCS    v2,v2,v2           ;accumulate remainder
         CMPCCS  v2,a3
         SUBCS   v2,v2,a3
         ADC     a1,a1,a1           ;accumulate quotient
.ENDREPEAT

         STR     v2,[a4]       ;store remainder
         LDMFD   sp!, {v1-v2}
         MOVS    pc,lr


muldvd::
         STMFD   sp!, {v1-v2}

         MOV     ip,a1,LSR #16      ;do it the hard way
         MOV     v2,a2,LSR #16
         BIC     a1,a1,ip,LSL #16
         BIC     a2,a2,v2,LSL #16
         MUL     v1,a1,a2           ;form partial products of a*b
         MUL     a2,ip,a2
         MUL     a1,v2,a1
         MUL     v2,ip,v2
         ADDS    a1,a2,a1
         ADDCS   v2,v2,#0x10000
         ADDS    v1,v1,a1,LSL #16
         ADC     v2,v2,a1,LSR #16
         
         ADDS    v1,v1,a3           ;now add in c
         ADCCS   v2,v2,#0
         MOV     a1,v2              ;get quotient

         STR     v1,[a4]            ;store remainder
         LDMFD   sp!, {v1-v2}
         MOVS    pc,lr

;
;  Version for Pyramid 90x and 98x computers
;  from Rod Worley, Monash University, Victoria, Australia
;
;  No muldvm() or muldvd()
;
        .text 0
        .globl _muldiv
_muldiv:
        movw    pr0,pr8             ;save a in reg 8
        movw    $0x0,pr0            ;zero reg0 so long reg 0,1 is b
        emul    pr8,pr0             ;extended multiply by a
        addw    pr2,pr1             ;add c to extended result
        addwc   $0x0,pr0         
        ediv    pr3,pr0             ;extended div by m
        movw    pr1,(pr4)           ;store remainder
        ret                         ;return qotient in pr0

/* This is the transputer version, by A.H. Pepperdine   */
/* Assumes that the result will fit into a 32-bit word  */
/* The error flag will be set if                        */
/*           (a*b+c)/m >= 2**32                         */
/* ie. equivalently, if                                 */
/*           ( (a*b+c) >> 32) >= m                      */

unsigned int muldiv(unsigned int a, unsigned int b, unsigned int c,
                    unsigned int m, unsigned int * rp)
{
    unsigned int q;
    __asm
    {
      ldabc a, b, c;
      lmul  ;
      ld    m;
      ldiv  ;
      stab  q, *rp;
    }
    return q;
}

/* The base is 2**32, ie a full 32-bit unsigned integer */
/* The error flag will be set if the result will not fit*/
/* into a word, ie.                                     */
/* for muldvm that is if (a >= m)                       */
/* and for muldvd it cannot happen                      */

unsigned int muldvm(unsigned int a, unsigned int c,
                    unsigned int m, unsigned int * rp)
{
    unsigned int q;
    __asm
    {
      ldabc m, c, a;
      ldiv ;
      stab q, *rp;
    }
    return q;
}

unsigned int muldvd(unsigned int a, unsigned int b, unsigned int c,
                    unsigned int * rp)
{
    unsigned int q;
    __asm
    {
      ldabc a, b, c;
      lmul ;
      stab *rp, q;
    }
    return q;
}

/*  Blakley/Sloan portable method for Modular multiplication IEEE Trans 
    Computers C-34 March 1985 pp 290-292 eliminates need for double length 
    product - but will be slow. Might suit some RISC computers with no 
    multiply/divide instructions. To speed up try completely unravelling for() 
    loops.       
    
    This method should only be used if the small data type is twice the size 
    of the short data-type, e.g. on a PC using mirdef.hpc, or on a 32-bit 
    computer using mirdef.h32

    */ 

#include <mirdef.h>

#ifdef BIG_ENDIAN
#define MSD 0
#define LSD 1
#endif

#ifdef LITTLE_ENDIAN
#define MSD 1
#define LSD 0
#endif

union smallas2shorts { small p; unsigned short s[2]; };

small muldiv(a,b,c,m,rp)
small a,b,c,m;
small *rp;
{
    int i;
    small d,q=0,r=0;
    d=m-a;
    for (i=MR_SBITS/4;i>0;i--)
    { /* do it bit by bit */
        r<<=1;
        if ((utype)c<0) r++;
        c<<=1;
        q<<=1;
        if ((utype)b<0)
        {
            if (r>=m) { r-=d; q++; }
            else        r+=a;
        }
        if (r>=m) { r-=m; q++; }
        b<<=1;
        r<<=1;
        if ((utype)c<0) r++;
        c<<=1;
        q<<=1;
        if ((utype)b<0)
        {
            if (r>=m) { r-=d; q++; }
            else        r+=a;
        }
        if (r>=m) { r-=m; q++; }
        b<<=1;
        r<<=1;
        if ((utype)c<0) r++;
        c<<=1;
        q<<=1;
        if ((utype)b<0)
        {
            if (r>=m) { r-=d; q++; }
            else        r+=a;
        }
        if (r>=m) { r-=m; q++; }
        b<<=1;
        r<<=1;
        if ((utype)c<0) r++;
        c<<=1;
        q<<=1;
        if ((utype)b<0)
        {
            if (r>=m) { r-=d; q++; }
            else        r+=a;
        }
        if (r>=m) { r-=m; q++; }
        b<<=1;
    }
    *rp=r;
    return q;
}

small muldvm(a,c,m,rp)
small a,c,m;
small *rp;
{ /* modified Blakely-Sloan */
    register int i,carry;
    register small q=0,r=0;
    r=a;
    for (i=MR_SBITS/4;i>0;i--)
    { /* do it bit by bit */
        carry=0;
        if ((utype)r<0) carry=1;
        r<<=1;
        if ((utype)c<0) r++;
        c<<=1;
        q<<=1;
        if (carry || r>=m) { r-=m; q++; }
        carry=0;
        if ((utype)r<0) carry=1;
        r<<=1;
        if ((utype)c<0) r++;
        c<<=1;
        q<<=1;
        if (carry || r>=m) { r-=m; q++; }
        carry=0;
        if ((utype)r<0) carry=1;
        r<<=1;
        if ((utype)c<0) r++;
        c<<=1;
        q<<=1;
        if (carry || r>=m) { r-=m; q++; }
        carry=0;
        if ((utype)r<0) carry=1;
        r<<=1;
        if ((utype)c<0) r++;
        c<<=1;
        q<<=1;
        if (carry || r>=m) { r-=m; q++; }
    }
    *rp=r;
    return q;
}

small muldvd(a,b,c,rp)
small a,b,c;
small *rp;
{ /* multiply by parts */
    union smallas2shorts al,am1,am2,ar,as1,as2;
    small q,r;
    as1.p=a;
    as2.p=b;
    ar.p= (small)as1.s[LSD]*as2.s[LSD];  /* form partial products */
    al.p= (small)as1.s[MSD]*as2.s[MSD];
    am1.p=(small)as1.s[1]*as2.s[0];
    am2.p=(small)as1.s[0]*as2.s[1];
    am1.p+=am2.p;                        /* combine them - carefully */
    if (am1.p<am2.p) al.s[MSD]+=1;
    q=al.p;
    ar.s[MSD]+=am1.s[LSD];
    if (ar.s[MSD]<am1.s[LSD]) q++;
    q+=am1.s[MSD];
    r=ar.p;
    r+=c;
    if (r<c) q++;
    *rp=r;
    return q;
}   

/* SPARC assembler version of above. Note that when Full-width base 
   working is used, then muldvd() is the most time-critical of these
   three routines. Use with above C versions of muldvm and muldiv 
*/
          .global _muldvd
_muldvd:
          mov    %o1,%y       ;multiplier to y register
          andcc  %g0,%g0,%o4  ;zero partial product and clear flags
          nop                 ;twiddle thumbs while write 
          nop                 ;to %y register completes
          mulscc %o4,%o0,%o4  ;1 multiply a*b
          mulscc %o4,%o0,%o4  ;2
          mulscc %o4,%o0,%o4  ;3
          mulscc %o4,%o0,%o4  ;4
          mulscc %o4,%o0,%o4  ;5
          mulscc %o4,%o0,%o4  ;6
          mulscc %o4,%o0,%o4  ;7
          mulscc %o4,%o0,%o4  ;8
          mulscc %o4,%o0,%o4  ;9
          mulscc %o4,%o0,%o4  ;10
          mulscc %o4,%o0,%o4  ;11
          mulscc %o4,%o0,%o4  ;12
          mulscc %o4,%o0,%o4  ;13
          mulscc %o4,%o0,%o4  ;14
          mulscc %o4,%o0,%o4  ;15
          mulscc %o4,%o0,%o4  ;16
          mulscc %o4,%o0,%o4  ;17
          mulscc %o4,%o0,%o4  ;18
          mulscc %o4,%o0,%o4  ;19
          mulscc %o4,%o0,%o4  ;20
          mulscc %o4,%o0,%o4  ;21
          mulscc %o4,%o0,%o4  ;22
          mulscc %o4,%o0,%o4  ;23
          mulscc %o4,%o0,%o4  ;24
          mulscc %o4,%o0,%o4  ;25
          mulscc %o4,%o0,%o4  ;26
          mulscc %o4,%o0,%o4  ;27
          mulscc %o4,%o0,%o4  ;28
          mulscc %o4,%o0,%o4  ;29
          mulscc %o4,%o0,%o4  ;30
          mulscc %o4,%o0,%o4  ;31
          mulscc %o4,%o0,%o4  ;32
          mulscc %o4,%g0,%o4
          tst    %o0          ;adjust result
          bge 1f
          nop
          add    %o4,%o1,%o4
1:
          rd     %y,%o1       ;get LSBs
          addcc  %o1,%o2,%o1  ;add in c
          st     %o1,[%o3]    ;store remainder
          retl          
          addxcc %o4,%g0,%o0  ;delay slot - return quotient
*/

