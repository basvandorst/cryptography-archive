	I hate writing manuals to there is not man for this beta-version.
I also hate reading manuals and I want to put my hands on things fast so
here is how `atp' (Anti Tampering Program) works.

	Abstract: a dabase is maintained. In the database there are files
attributes like file-size, file-checksum and so on, for each file which
must be `tampering-protected'. First we create the database, then we
check the database comparing database's file attributes with real file
attributes.

After having compiled the stuff (edit atp.h first) try the following:

1 - Edit a file, let's say /tmp/foobar.
2 - setenv KEYWORD "<any password you like>"
3 - atp -v /tmp/foobar
	This records /tmp/foobar in the database.
4 - atp -vc /tmp/foobar
	To see database's contents.
5 - touch /tmp/foobar; chmod 4711 /tmp/foobar; Edit again the file..
	Change file attributes.
6 - atp -vk1
	Check the tampering. This is the program's purpose.
	Basically that's all.

So, if you record all system-files, executable, libraries, config-files,
you can check at a later time if something has changed. This is extremely
precious at these times. By using atp effectively you can be sure of
the integrity of your files, even if a nasty-hacker becomes root.

The database is encoded using DES in CBC mode. The IV is created from
the key and is key dependent. A check-structure containing MD4 checksum
and other informations is appended to the database and is encrypted with it. 

	The DES routines used are those of Antti Louko (alo@kampi.hut.fi),
from his crypt.dist package. MD4 is a RSADSI product, available at rsa.com.
Also I must thank Marco Negri (marco@ghost.dsi.unimi.it) for some C code
and suggestions and Ted Dunning (ted@NMSU.Edu) for an optimization of the
CRC32 code.

	I am willing to improve this program. This is a preliminary
version only. Please feel free to send me comments and bug reports.

Ciao,	David			(vince@ghost.dsi.unimi.it)

