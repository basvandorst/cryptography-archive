Path: msuinfo!agate!ames!hookup!yeshua.marcam.com!MathWorks.Com!solaris.cc.vt.edu!news.duke.edu!eff!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson; CMSC (G))
Newsgroups: sci.crypt
Subject: Re: A fast, simple resynch operation for stream ciphers
Date: 31 May 1994 20:30:32 GMT
Organization: University of Maryland, Baltimore County
Lines: 29
Message-ID: <2sg6p8$ah2@news.umbc.edu>
References: <16FC212ABCS86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: umbc7.umbc.edu
X-Newsreader: TIN [version 1.2 PL2]

C445585@mizzou1.missouri.edu wrote:
:  
:    To resynch, I've got a simple technique which I think is pretty
: universally applicable:
:  
:    1.  Each time you know you have synchronization, such as at the
:        very beginning of the communication, when you've just initialized
:        the internal state using the key, generate a block of keystream
:        equal in size to the cipher's internal state.
:  
:    2.  Start using the keystream for encrypting plaintext *after*
:        filling that block.  Thus, you don't reuse those keystream
:        bits for encryption.
:  
:    3.  When it's time to resynch, copy that block into the internal
:        state of the SSC.
:  

I can think of one clear case where this is not applicable.  What if
your stream generator is a block cipher in OFB mode ?  You would end
up generating the same key stream, except the first block, after each
resynch.  You need some idea of the independence between the next
state and the output.

Also, as Colin noted, it's not clear how you handle the synch points,
and I'm not sure exactly what problem you are trying to solve.  Could
you describe how a re-synch is negotiated ?

--Bryan 
