Newsgroups: talk.politics.crypto,alt.privacy.clipper,sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!swrinde!pipex!sunic!EU.net!uunet!allegra!ulysses!smb
From: smb@research.att.com (Steven Bellovin)
Subject: Re: Compromising the Clipper Key Escrow databases?
Message-ID: <CrIoC4.66B@ulysses.homer.att.com>
Sender: netnews@ulysses.homer.att.com (Shankar Ishwar)
Organization: AT&T Bell Laboratories
References: <Cr56tt.496@undergrad.math.uwaterloo.ca> <dbarber.771229776@crash.cts.com> <Cr6D8H.7oM@cbnewsh.cb.att.com> <bryner.1048.771568390@chemistry.utah.edu> <CrGnAI.7n0@apollo.hp.com> <bryner.1058.771796547@chemistry.utah.edu>
Date: Fri, 17 Jun 1994 01:04:51 GMT
Lines: 32
Xref: msuinfo talk.politics.crypto:6012 alt.privacy.clipper:4527 sci.crypt:28783

In article <bryner.1058.771796547@chemistry.utah.edu>, bryner@chemistry.utah.edu (Roger Bryner) writes:
> In article <CrGnAI.7n0@apollo.hp.com> sommerfeld@apollo.hp.com (Bill Sommerfeld) writes:
> >In my opinion, there's room for a second back door in the key
> >generation process.
> If not a bug on the keybord.
> 
> That makes it one of the most valuable keybords in existance.
> 
> Does anyone else think using this few random numbers is shity engeneering?

As always, engineering is a matter of delicate tradeoffs.  This is
one of them.

It's obvious to everyone that a hardware random number generator can
produce numbers that are more ``random''.  What's less obvious is that
such hardware is fairly sensitive, and subject to failure from things
like power supply interference.  Now, good design will minimize the
chances of such failures, but they can still occur, and without actually
sampling the output, it's very hard to know one is behaving properly.
And we *don't* want NSA watching the output that closely....

A software solution, on the other hand, is likely to always work as well
as it did initially.  If the randomizing function is good enough, and if
the amount of output from any true-random seed is small enough, there can
be greater *assurance* of the quality of the output.

So -- we have a choice between better best-case behavior, with a chance
of catastrophic worst-case failure, or lesser best-case output, but no
awful failure modes.

Maybe NSA could have done better, with more random inputs being used
at each stage.  But their design is not what I'd call obviously horrible.
