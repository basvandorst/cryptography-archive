Path: msuinfo!uwm.edu!news.moneng.mei.com!howland.reston.ans.net!vixen.cso.uiuc.edu!audi.ncsa.uiuc.edu!mitchell
From: David Mitchell <mitchell@ncsa.uiuc.edu>
Newsgroups: talk.politics.crypto,alt.privacy.clipper,sci.crypt
Subject: Re: Compromising the Clipper Key Escrow databases?
Date: 17 Jun 1994 16:21:46 GMT
Organization: #include <std.disclaimer>
Lines: 68
Distribution: world
Message-ID: <2tsiiq$k76@vixen.cso.uiuc.edu>
References: <Cr56tt.496@undergrad.math.uwaterloo.ca> <CrIoC4.66B@ulysses.homer.att.com> <2tr5d9$hli@nntp.ucs.ubc.ca> <2tr6gp$hmf@nntp.ucs.ubc.ca>
NNTP-Posting-Host: audi.ncsa.uiuc.edu
X-UserAgent: Version 1.1.3
X-XXMessage-ID: <AA273864D8030611@audi.ncsa.uiuc.edu>
X-XXDate: Fri, 17 Jun 94 11:24:20 GMT
Xref: msuinfo talk.politics.crypto:6018 alt.privacy.clipper:4530 sci.crypt:28799

In article <2tr6gp$hmf@nntp.ucs.ubc.ca> William Unruh,
unruh@physics.ubc.ca writes:
> David Mitchell <mitchell@ncsa.uiuc.edu> writes:
> >of the session key.  So, the attacker takes the checksum, and using
> >the known variables (IV, serial number, etc.), "distills" out the
> >16 bits of information from the session key.
> 
> I'm not sure this is right. The blaze attack changes both the encrypted
> session key and the serial number (ie 112 bits) All of the checksum
> info could be on the serial number. 

If the checksum was based only on the serial number, there would
be no need to generate a large number of LEAF's trying to find one
that would be accepted.  All that would be required would be to
have the Clipper generate a LEAF for session key A and replace
the LEAF in all future transmissions with the 'A' LEAF.

> For an unblown clipper chip, the arguement also does not work. Consider
> the following stupid checksum- take the last 16 bits of the encrypted
> session key and copy it into the checksum. The checksum obviously
> depencs on the session key, but it gives you absolutely no more
> information than does the encrypted key itself. It make it no easier to
> break the encrypted key than before.

You're missing the point.  The checksum HAS to include information
from the session key itself, not the encrypted session key.  One of the
main reasons for the checksum is to make sure that the 80 bits of
data that are supposed to be the encrypted session key in fact are
the encrypted session key.  Remember that the receiving Clipper chip
does not have the Unit key for the originating chip, and so cannot
verify the session key that way.

> Another stupid checksum would be to
> take the last 16 bits of the unencrypted key. This clearly does make the
> information needed to get the whole key smaller by 16 bits. Thus, the
> amount of information that the checksum provides something between 0
> bits and 16 bits. It all depends on the quality of the checksum.

 
> Remember that the 80 bits of the encrypted key depend in a one to one
> way on the session key. According to the arguement this should mean that
> you have 80 bits of information about the key.

There is a many to one relation between the 160-bit unit key/ session key
and the encrypted session key.  The encrypted key by itself does not
contain 80-bits of information about the session key.  It contains 80 bits
of information total.  The combination of encrypted key and unit key, 
however, DO provide 80 bits of information about the session key.

> Maybe you do, but it is
> rather useless. Furhtermore, each byte of the message itself depends on
> the session key, and if you for some reason you know the plaintext, it
> depends on the session key alone. You thus have far far more than 80
> bits of information about the session key.

No, you're not thinking about this in the right way.  You CAN'T have more
that 80 bits of information about the session key.  You can have 80 bits
of information dispersed throughout a much larger set of data, but there
are only 80 bits to know about the session key.

> Unfortunately, all that
> information does you no good if the encryption process is any good.

True, it would be possible to compute the checksum via some type of
one-way function, making it difficult to get the information out.  But
even this can be overcome via a massive pre-computation.  The result:
a look-up table correlating checksums with possible keys.  This can
be done.  The only question is how much computation is required.
