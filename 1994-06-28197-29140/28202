Newsgroups: sci.crypt
Path: msuinfo!agate!doc.ic.ac.uk!warwick!uknet!EU.net!sunic!trane.uninett.no!nac.no!nntp.nta.no!unik.no!thor
From: thor@unik.no (Thor Kristoffersen)
Subject: Re: How does one attack an easy scheme?
Message-ID: <1994May31.083436.26213@nntp.nta.no>
Sender: news@nntp.nta.no
Nntp-Posting-Host: janus.unik.no
Organization: Universitetsstudiene paa Kjeller (UNIK), University of Oslo, Norway
References:  <ZC7tWlY.tom_duda@delphi.com>
Date: Tue, 31 May 94 08:34:36 GMT
Lines: 40

In article <ZC7tWlY.tom_duda@delphi.com>, Thomas Duda <tom_duda@delphi.com> writes:
>I am, admittedly, new to cryptology. I've read the posts to this group for
>about three weeks and read the FAQ (gasp!). That's enough to tell me that
>the following encryption scheme would be easy to solve. Bearing in mind that
>cryptology is new to me and that, while I have a good understanding of the
>C language and moderate math skills, the method of attack escapes me.
> 
>   1) Get the current system time.
>   2) Use the time as a seed value for rand() /* yes, I know about rand()  */
>   3) Generate a random number.
>   4) Add the random number to the current byte of plaintext. Store the result.
>   5) Repeat steps three and four until the entire plaintext file has been
>      encrypted. Write the result to disk.
> 
>Obviously, decryption is the reverse of encryption, as long as one has the
>seed value. If, however, one does not have the seed value (which will be
>16 bits on my platform), what method would be used to attack the encrypted
>text? Brute force seems like an inelegant solution.

1. Assume that the phrase " is " will appear somewhere in
   the plaintext (pretty safe assumption). Set i=0.
2. Subtract " is " from bytes i..i+3 of the ciphertext. If
   the phrase " is " actually was at that position in the
   plaintext, you now have the output (and state) of rand().
3. Using this value as a seed, get the next few values of
   rand() and subtract from the ciphertext. If the output
   looks like English, you have cracked it. Otherwise, set
   i++, and try (2) again.

If the message contains the probable word, it can be cracked
in linear time of the length of the message.

The countermeasure is to hide the state of the generator, so
that the state cannot be deduced from the keystream. This is
essentially the approach used by all good stream ciphers.

>Tom

-- 
Thor Kristoffersen   -   Oslo, Norway   -   thork@ifi.uio.no
