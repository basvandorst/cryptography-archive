Path: msuinfo!netnews.upenn.edu!newsserver.jvnc.net!howland.reston.ans.net!swrinde!ihnp4.ucsd.edu!galaxy.ucr.edu!library.ucla.edu!news.mic.ucla.edu!unixg.ubc.ca!quartz.ucs.ualberta.ca!alberta!bigbrd!crs-sys!nextedm!spl4!cuugnet!cpubbs!Matthew.Mastracci
Newsgroups: sci.crypt
From: Matthew.Mastracci@matrix.cpubbs.cuug.ab.ca (Matthew Mastracci)
Reply-To: Matthew.Mastracci@matrix.cpubbs.cuug.ab.ca (Matthew Mastracci)
Subject: Re: Cracking a scheme..
Date: Tue, 28 Jun 94 07:50:48 
Message-ID: <328d_2e0fd823@cpubbs.cuug.ab.ca>
References: <hE4So96.padrote@delphi.com>
X-FTN-To: padrote@delphi.com
Organization: (201:5500/905)
Lines: 73

Hi padrote@delphi.com!

While padrote@delphi.com was confronting a Killer IC, he managed to report
this to All:

 >> What is the easiest way for a person to encrypt data for a
 >> program, but still retain a high level of security against ameteur
 >> hackers?  I've tried creating an xor procedure, using a key of
 >> gibberish that is the smae length as the file, but I don't think that
 >> it is very secure.  Also, size is factor, so I can't really implement
 >> something around the lines of PGP...

 pc> You don't give much information but consider the following: the program
 pc> you distribute to users must contain both the encryption algorithm *and*
 pc> the particular keys you use with it. Thus a determined hacker could just
 pc> disassemble your program and see how it decrypts the data file. Sorry,
 pc> but no algorithm on earth can prevent this, if at some time during the
 pc> running of your program you decrypt the data. If it appears inside the
 pc> machine, a determined hacker can get at it.

Sorry:  Here's some more information about it...

It's a registration key system that I've designed to be as secure as possible
from someone who does not have the ability to view the program as it runs with
SoftIce or GameTool, or does not have access to a disassembler.  The
registration key string is roughly 60 characters long, and is based on
checksums from various parts of the name.  I mainly want security in the fact
that someone can't just take a simple decrypting program and decode the file by
brute force.

A little more indepth:

1) reads the file
2) decrypts it
3) reads the name and key
4) checks them both with checksums
5) generates the key for the name and compares it to the one it just read
6) returns whether it is valid or not

 pc> So what do you mean by "ameteur hacker"? Someone who doesn't feel like
 pc> disassembling your program? If so, then I think xoring the file with a
 pc> random key is sufficient. The file looks like gibberish, and the only
 pc> way it can be decrypted is with the key. If you don't like the fact that
 pc> you have to store the key somewhere on the distribution disk, then use a
 pc> random number generator and make it up on the fly every time the program
 pc> runs.

Hey...  that's a good idea.  Have a random number seed, generate it by using
the system timer, place it at the beginning or end of the file, read it in
before decrypting the file and then generate the key in realtime.

 pc> I can think of certain special cases where you *could* make your data
 pc> 100% secure, but it depends on the application. Consider, for example, a
 pc> program implementing the game "Jeopardy". The program asks questions and
 pc> the user enters the answers. You want to store the answers on disk, but
 pc> you don't want people to read them without playing the game. Here
 pc> instead of storing the answers, you could use a hash function, and store
 pc> the hash of the answer. Then you compare the hash of the player's
 pc> response to the hash of the answer. Note however that there would be no
 pc> way for the player to "give up" and ask to see the correct answer. All
 pc> the program can do is tell him if he's right or wrong.

I believe that RA BBS software uses this method for storing passwords.  Would
there be a way to implement this sort of procedure in a system like above?

============================================================================
Regards,                 "We dance around in a ring and suppose,
  /\/\att /\/\astracci    but the secret sits in the middle and knows."
============================================================================
 pgp key: 1994/06/23 \\  54 20 05 07 95 01 85 6B  09 50 CB 57 3E D5 C5 74
==== EMail: madhacker@matrix.cpubbs.cuug.ab.ca   MetroNet: 201:5500/905 ====

---
