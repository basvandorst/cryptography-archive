Newsgroups: sci.crypt
Path: msuinfo!agate!darkstar.UCSC.EDU!news.hal.COM!olivea!decwrl!murky.apple.com!gallant.apple.com!NewsWatcher!user
From: pwd@apple.com (Patrick W. P. Dirks)
Subject: Re: ->->-> PLEASE help me ! <-<-<-
Sender: news@gallant.apple.com
Message-ID: <pwd-240694104605@17.130.21.114>
Date: Fri, 24 Jun 1994 18:46:05 GMT
References: <2ue72k$k2q@faui08o.informatik.uni-erlangen.de>
Organization: Apple Computer, Inc.
Followup-To: sci.crypt
Lines: 76

In article <2ue72k$k2q@faui08o.informatik.uni-erlangen.de>,
mlpeter@faui08o.informatik.uni-erlangen.de (Michael Peter) wrote:

> 
> Therefore I'm looking for a protocol (algorithm) that satisfies the following
> needs:
> 
>         E(M,K)=C
>         D(C,I)=M
>         F(I,S)=K
> 
>  with:
> 
>        M: Message to be transmitted (a key for a single key algorithm)
>           M should be about 64bit.
>        C: Chipertext. C MUST NOT be greater than 120bit, so it can be
>           transmitted via telephone.
>        I: System-id of the user's computer. Generated, for example, by a
>           one-way hash function of the computer's BIOS. C should be about
>           32-64 bit (because it has to be transmitted, too).
>        K: Key used to encrypt M. K cannot be chosen randomly, it depends
>           on I.
>        S: Secret information (trapdoor) that allows the computation of K
>           from I. (S could be the factorisation of an integer)
> 
>        E: Encryption function. Could be kept secret.
>        D: Decryption function. Public. Must not use S.
>        F: A function that derives K from a given I using S.
> 
This seems like a complicated expression of a standard CD-ROM distribution
problem (Bob buying something from Alice).  In essence, you want Bob's
system to be distinguished from everyone else's by some unique ID so that
Alice can compute a key for Bob that only Bob can use, together with his
unique system ID, to computer the real key used to encrypt the data on his
CD-ROM.

The problem is that, at some point, Bob (or the program running on Bob's
machine) must have the real key used to decrypt the information on the
CD-ROM Alice has previously supplied him.  At that point, the system is
vulnerable to attack; provided he can stop his decryption program at the
right point Bob can jot down the real key and pass that to Charlie the
Cheapskate who uses that together with a freestanding decryption program to
read the data from the CD.  This is more difficult with non-standard
encryption methods but these, too, can be reverse-engineered or even lifted
intact from the decryption program Alice supplied with the CD.

Alternatively, Charlie can patch the installation program (or force memory
at the right point in its exectution) to make HIS system ID match Bob's and
then use the same information supplied to Bob to have the program read the
data off the CD for him. This approach can be made more difficult by
quietly making the keys time-dependent, but system clocks are easily reset
as well.

Finally, there's the "traditional" approach: Bob can pass Charlie the
finished product once the decryption and installation is complete.

There's no foolproof way of setting up such a system: holes will always
remain, and the best you can hope for is to help keep honest people honest.
 It should suffice to construct an obscuring function X(key, id [, time])
which Alice can use to construct a tailored key for Bob, using Bob's id and
perhaps the current time to make the key good for an hour or so.   You then
need a complementary function Y(key, id [, time]) that Bob can use to
derive the real key for the decryption.  Any reasonable secret-key
encryption method ought to do the trick: combine the ID [and the time] into
a key to encrypt the real CD-ROM key.

Note that the system ID doesn't need to be permanent; the decryption
program could compute one on the fly, display it on the screen, and ask Bob
to tell Alice the ID over the phone in exchange for a tailored key that
Alice computes on the spot.

An interesting problem but, alas, I can't imagine a completely perfect
solution.

Hope this helps,
-Patrick Penzias Dirks.
