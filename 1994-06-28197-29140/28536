Path: msuinfo!agate!darkstar.UCSC.EDU!news.hal.COM!decwrl!waikato!auckland.ac.nz!news
From: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Newsgroups: sci.crypt
Subject: Re: random numbers from disk drive rotation latency -- help?
Date: 9 Jun 1994 06:09:50 GMT
Organization: University of Auckland
Lines: 29
Sender: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Message-ID: <2t6bne$4r3@ccu2.auckland.ac.nz>
References: <199406071512.QAA19140@an-teallach.com> <nagleCr28uB.EEz@netcom.com>
NNTP-Posting-Host: cs11.cs.aukuni.ac.nz
X-Newsreader: NN version 6.5.0 #7 (NOV)

nagle@netcom.com (John Nagle) writes:

>      Be careful about trying to measure disk latency.  Systems with
>buffering controllers or OSs with read-ahead may show overly repeatable
>results and thus serial correlation.  This is worth bearing in mind for
>software to be distributed - just because it generated random numbers on
>your machine doesn't necessarily imply it will generate random numbers on
>all machines.

>      If you're going to try this, generate psuedo-random addresses and
>seek to them.  This will produce much more random timing than sequential
>reads.  The psuedo-random addresses should be different if you run the
>program twice, so cacheing in controller or OS will not find the blocks
>in the cache.

That's the technique I've used when using the disk access latency as a
source of random numbers (one of several) in my encryption code.  You seek
to some random position on the disk, and measure the time with a very fast
(around 1 MHz) hardware timer.  As has been mentioned, one some systems such 
as PCMCIA solid-state disks, you're not going to get a lot of randomness.
A better analysis is given in garbo.uwasa.fi:/pc/crypt/sfs100.zip in the 
file sfs2.doc, but it's nowhere near as detailed as the work done by Donald
Davis - I just needed as much random data as I could get, and disk access
latency was one source for it (I also use various pieces of built-in hardware
such as video and disk controller hardware, system timers, and keystroke
latency - it's mostly explained in the above document).

Peter.

