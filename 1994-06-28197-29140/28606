Path: msuinfo!agate!overload.lbl.gov!lll-winken.llnl.gov!ames!hookup!grinch.tor.hookup.net!user
From: grinch@hookup.net (Reginald Braithwaite-Lee)
Newsgroups: sci.crypt
Subject: Re: Unforgeable printed forms
Followup-To: sci.crypt
Date: 11 Jun 1994 15:23:38 GMT
Organization: Who-ville
Lines: 34
Message-ID: <grinch-110694101434@grinch.tor.hookup.net>
References: <2tane1$mk1@tdc.dircon.co.uk>
NNTP-Posting-Host: grinch.tor.hookup.net

In article <2tane1$mk1@tdc.dircon.co.uk>, you wrote:

> Help requested.
> 
> Will anyone provide a solution (or a source of a solution) to
> this problem.
> 
> I need to laser print about 30 million forms each with a unique
> number (both in clear and as a barcode). It should not be
> possible (or at least take more than a year) for anyone to
> "forge" these forms (I don't care if they copy the one they have,
> but they must not be able to create new ones). To make it more
> interesting I need to publish the rules by which a third party
> can verify that the forms they hold are genuine (or at least
> copies of genuine forms). To be practical the resultant code
> printed on the form should be as short as possible, less than 40
> bytes would be nice.

Less than 40 bytes isn't going to work very well, but try either of the
following schemes. Both involve digital signatures. From your description,
it isn't clear whether it's the serial number you need to protect or the
entire form:

1) Serialize each form, then digitally sign the serial number. A verifier,
Victor, needs your public key but can easily determine whether the form is
original. A forger needs to create a new form with a new serial number and
can't sign the new form. Victor doesn't need to interact with you after
receiving a genuine copy of the public key from you.

This scheme protects the serial number only.

2) Compose the form in postscript and include a signature of the postscript
version of the form. To verify the form, Victor needs the postscript
version of the form and your digital signature.
