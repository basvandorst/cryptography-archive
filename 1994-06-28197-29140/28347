Path: msuinfo!agate!overload.lbl.gov!lll-winken.llnl.gov!sol.ctr.columbia.edu!howland.reston.ans.net!math.ohio-state.edu!jussieu.fr!univ-lyon1.fr!swidir.switch.ch!newsfeed.ACO.net!Austria.EU.net!EU.net!uunet!imsi.com!newshost!perry
From: perry@snark.imsi.com (Perry E. Metzger)
Newsgroups: sci.crypt,talk.politics.crypto,alt.privacy.clipper
Subject: Matt Blaze's Hack
Date: 03 Jun 1994 22:26:55 GMT
Organization: Partnership for an America Free Drug
Lines: 59
Message-ID: <PERRY.94Jun3182655@snark.imsi.com>
References: <tcmayCqsAM5.I8E@netcom.com> <2so5tl$q35@info-server.bbn.com>
Reply-To: perry@imsi.com
NNTP-Posting-Host: snark.imsi.com
Xref: msuinfo sci.crypt:28347 talk.politics.crypto:5851 alt.privacy.clipper:4413


Many people have misconceptions about what Matt did.

Based on his paper (no, you can't have a copy since he told me not to
distribute it; I'm sure he'll release it when its ready for prime
time) and discussions with him, the trick is this.

[I'll abreviate Escrowed Encryption Standard as EES -- its the proper
name for Clipper, Capstone, Tessera, etc.]

The LEAF acts much as an key to tell the EES unit that it should
function. It contains three elements:

1) the 32 bit unit id of the EES unit generating the LEAF
2) the 80 bit session key, encrypted in the escrowed key for that unit.
3) a 16 bit checksum based on the unencrypted session key and the
   initialization vector (IV) for the session.

All three components are concatenated to form a 128 bit unit, which is
encrypted in the family key in order to produce the LEAF, reportedly
using a unique mode of Skipjack.

The remote unit takes in the LEAF, decrypts it with the family key,
and checks the cleartext session key and IV to see if they produce the
proper 16 bit checksum. If so, it accepts the LEAF and functions
properly. Note that the encrypted key inside the LEAF is useless to
the remote EES since it doesn't have the other EES's escrowed key. It
has to rely on the cleartext session key and IV alone to check that
the checksum looks right.

Sadly for the NSA, the checksum is only 16 bits long. Given a session
key and initialization vector, I can fairly quickly generate a large
number of fake LEAFs (chosen at random) and find one that a captive
EES unit will accept as being the right LEAF for a given session
key/IV. The contents of the LEAF will be garbage, but the remote unit
will not know that, and will happily go along with using it. I needn't
know the family key, or even the checksum algorithm.

The point here is, of course, that I can freely interoperate with
non-rogue EES units -- I can communicate with non-subverted units
without revealing my privates hidden beneath the LEAF. (sorry for the
pun.)

By the way, Matt had to figure out the components of the checksum on
his own -- the mechanism for calculating it and where it came from
were not documented.

BTW, for those who have asked, in case the preceeding didn't make it
clear, can't you just reuse an old LEAF or a stolen LEAF because the
session key/IV won't correspond and the checksum won't be right -- you
have to generate and test.

--
Perry Metzger		perry@imsi.com
--
Are American citizens really so neurotically uptight about deviant
sexual behavior that we will allow our entire information
infrastructure to be dictated by the existence of pedophiles?
				-- Bruce Sterling
