Path: msuinfo!agate!ihnp4.ucsd.edu!usc!bloom-beacon.mit.edu!ai-lab!toast!lethin
From: lethin@toast.ai.mit.edu (Rich Lethin)
Newsgroups: sci.crypt
Subject: using chips for standards to crack the standards
Date: 9 Jun 1994 23:10:47 GMT
Organization: MIT Artificial Intelligence Lab
Lines: 33
Message-ID: <2t87hnINNkfs@life.ai.mit.edu>
NNTP-Posting-Host: toast.ai.mit.edu

I was thinking about Blaze's work (reported in 6/294 New York Times) where
he found that the 16-bit authentication checksum in the LEAF could be
discovered in about 20 minutes.  And I was thinking about trying to crack
DES by buying a bunch of DES chips and doing exhaustive 2^47 search in
parallel (which is apparently feasible).

It's sort of interesting that promulgation of a standard that leads to fast
chips to implement it also contributes weakening that standard.  DES is
easier to crack because DES chips are cheap and plentiful.

In the same way, cheap Capstone chips will contribute something to making
Skipjack more crackable.  Of course, the Skipjack key is 2^80, so
exhaustive attacks are still REALLY difficult :)

There was some discussion here last week about how the standard was
designed so that it would be difficult for an "opponent" to make truly
secure use of it.  Looks like this gets done via at least three ways: 1)
physical packaging to deter reverse engineering 2) a key length chosen so
that by the time the physical packaging is "cracked" security based on that
80-bit key will be considered "marginal" and 3) general FUD that would
prevent an opponent from using the technology (the FUD doesn't have to be
true to deter it) in any case.

Anyway, if someone had spare gates or real estate on a Capstone chip they
might want to add features for exhaustive key searches (eg. a special
"increment mode" on the session key and some sort of "success detection"
logic).  This could be put on all chips, or just put on at the request of a
"special customer" as a final metal option.  The physical packaging would
interfere with its discovery, and it would contribute to lowering the cost
of breaking and marginalizing the security of the algorithm.  Again,
though, the cost of building a useful machine would be close to
impractical; this "mask option" just contributes to making it a little less
impractical.
