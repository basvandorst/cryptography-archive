Path: msuinfo!agate!overload.lbl.gov!lll-winken.llnl.gov!ames!hookup!europa.eng.gtefsd.com!library.ucla.edu!galaxy.ucr.edu!ucrengr!datadec
From: datadec@ucrengr.ucr.edu (Kevin Marcus)
Newsgroups: sci.crypt
Subject: Cryptos with tables and algs
Date: 10 Jun 1994 22:48:51 GMT
Organization: University of California, Riverside   (College of Engineering/Computer Science)
Lines: 32
Message-ID: <2taqkj$7pk@galaxy.ucr.edu>
NNTP-Posting-Host: ucrengr.ucr.edu

What factor of difficulty to breaking does adding some kind of lookup table
to a crypto add?  Lets say I have a table which is ten elements long, and
then I do somethign stupid like an XOR of the original text to a byte in the
key.  Then, I use a hash function to give me a byte in the ten element long
table, and... say, add that in, as well. 

I thought about it, and it looks no more difficult to crack than a basic
byte XOR with ADD.  Is that correct?

Next, what about adding, say, a parabolic eqn into the formula.  Say, for
each iteration of the password with the original text, we also add a point
on a parabolic curve (or some other eqn) to this.  The point could be
calculated by simply taking the index into the original text we are at, and
then say, squaring it.  Things could be a make a little more complicated
by letting the overflow occur.

Anyone have any ideas?

While I'm at it, using a 256 byte character, is it true that to brute force
through a layer of XOR/ADD/XOR/ADD/XOR/ADD/... (or SUB instead of add!)
is 256 to the power of the number of xor and add's?  so for
XOR/ADD/XOR/ADD, it would be 256^4. 

Are there other more unique methods of solving this type of problem vs.
just a striaght XOR (which I've read about.)


-- 
  --=> Kevin Marcus:   datadec@ucrengr.ucr.edu,  tck@bend.ucsd.edu
  "ciafn  syoo,u  yroeua da rteh icso?o l ." <- Email for solution. 
  Computer  Science  Dept.,  University of California,  Riverside.
  .oOo.oOo.           T H I E V E S     S U C K          .oOo.oOo.
