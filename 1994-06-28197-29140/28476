Path: msuinfo!agate!dog.ee.lbl.gov!ihnp4.ucsd.edu!swrinde!pipex!demon!an-teallach.com!gtoal
Newsgroups: sci.crypt
From: gtoal@an-teallach.com (Graham Toal)
Cc: sci-crypt@demon.co.uk
Subject: Re: random numbers from disk drive rotation latency -- help?
X-Phone: +44 31 662 0366
X-Fax: +44 31 662 4678
X-Organisation: An Teallach Limited
Date: Tue, 7 Jun 1994 15:22:06 +0000
Message-ID: <199406071512.QAA19140@an-teallach.com>
Sender: usenet@demon.co.uk
Lines: 22

	What I'm looking for is an algorithm that will convert these semi-random
	numbers into a good random bit stream.  Any suggestions?

Take each value you get and exor *all* the bits in it to produce a
single bit of data - otherwise you might hit regularities caused
by the period of your clock.  Then take a suitably large block
of data and whiten it by passing it through a cryptographically
clean hash function, such as MD5.  Of course, this only works
relatively well if your original source of data is close to a
50:50 distribution of 1's and 0's.  If it's biased either way,
the whitened output (although more balanced in 0's and 1's) will
be easier to generate from simulated input.  Of course, if the
blocksize of your whitening function is large enough and the entropy
of the inputs also large enough (say O(128) 1's and O(512-128) 0's
feeding into a 512 bit mixing function) then it would still take
a 128-bit loop or worse to generate plausible inputs, so you'd
be relatively secure.

(Sorry if that's garbled but I don't have a lot of free time just now
for a clearer explanation... - back to work...)

G
