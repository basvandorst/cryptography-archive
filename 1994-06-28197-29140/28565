Path: msuinfo!agate!usenet.ins.cwru.edu!eff!news.kei.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: "non-weakening" combiners for keystream generation
Date: Thu, 09 Jun 94 19:52:10 CDT
Organization: University of Missouri, Columbia
Lines: 50
Message-ID: <16FD01176AS86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: mizzou1.missouri.edu

 
   I've been continuing to look at ways of generating cryptographically
strong keystreams, and I've come up with an idea that's probably not
original, but seemed worthwhile.
 
   Suppose I have a crypto-strength PRNG that nobody knows how to
break.  There are some operations I can perform on the PRNG output
that, if they made the resulting PRNG stream any easier to attack,
they would imply an attack on the original PRNG.  An example might
be to omit every other bit from the first PRNG--if this made the
resulting output stream weak, then there would clearly be an important
weakness in the original keystream.
 
   This can also be done with a combiner, designed to combine a
strong PRNG with a weak one in a way that, in general, won't make
the output from the combiner any weaker than the output from the
strong PRNG.  For example, suppose I take the output from DES in
OFB-mode, and then XOR it with the output from a feedback shift
register.  There will be extremely-low-probability ways for the
DES-OFB stream to interact badly with the LFSR, perhaps resulting
in a long stream of 0's in the keystream--but if that's generally
true for any significant number of possible LFSRs, or if there's
a general way to choose an LFSR that does that to the keystream,
then that implies a working attack against DES-OFB.
 
   This seems to be a kind of cryptographic "chicken-soup," because
it may or may not help, but it almost certainly can't hurt.
 
   Some combiners that seem to have the "chicken-soup" property are:
 
1.  Omit some symbols from the strong PRNG stream, based on the weaker
    PRNG's outputs.
 
2.  Shuffle the strong PRNG's output symbols, based on the weaker PRNG
    outputs.
 
3.  Use the weaker PRNG's outputs to choose among possible one-to-one
    mappings for the stronger PRNG's output symbols, ie choose between
    several 8-bit to 8-bit s-boxes.
 
4.  Use the weaker PRNG's outputs to choose different ways to combine
    the strong PRNG's output symbols, ie decide how to XOR-fold 8
    bytes down into 4.
 
   Now, this sort of combiner is going to cost time and memory in the
keystream-generating process, so these clearly can't just be appended
to a good PRNG in huge numbers.  I've got some ideas for their use,
which I'll discuss in my next post.
 
   --John Kelsey, c445585@mizzou1.missouri.edu
