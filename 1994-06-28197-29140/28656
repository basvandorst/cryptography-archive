Newsgroups: sci.crypt
Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!uhog.mit.edu!MathWorks.Com!europa.eng.gtefsd.com!library.ucla.edu!csulb.edu!csus.edu!netcom.com!ldresser
From: ldresser@netcom.com (Larry Dresser)
Subject: A Multi-Ked Pad?
Message-ID: <ldresserCrCKx2.A7C@netcom.com>
Summary:  A new encryption idea ("algorithm")
Keywords: encryption key pad 
Organization: NETCOM On-line Communication Services (408 261-4700 guest)
X-Newsreader: TIN [version 1.2 PL1]
Date: Mon, 13 Jun 1994 18:05:23 GMT
Lines: 59


   I've designed the basis of what I will call a multi-key pad.
Before you jump to the conclusion that this is just a variation
of a one-time pad, let me explain how it differs.  The primary
difference is that it requires at least two pads: one for data
and one is an offset pad that would instruct the data pad to
which data byte to use to encode next.  To work effectively, it
would require at least a few bytes of information to be encrypted
somewhere in the message such as which byte to begin on, which
would be a random number that would be different for each pad.
Many bytes of encrypted variables that would have various
"mystery "functions could be sent that would prevent anyone from
ever knowing what any of the variables were referencing or doing
or even where they were in the message, what they were and which
pad they referred to.  Of course, it could have multiple data and
offset pads that would also be referenced by using encrypted
variables.  The possiblities are nearly endless.  To break it,
you would have to try trillions and trillions of possibilities,
assuming that you ever broke what all of the encrypted variables
were doing. They alone would be a powerful unknown.  And that
assumes that the encrypted variables could be found.  Since they
are all random numbers, it would be difficult if not impossible
to locate them.

   Now what if this pad was just one method of several methods
that are used on the data with the first level being a creative
compression program that I designed just for the purpose of
encryption.  And of course some of the other levels would
consist of more traditional encryption methods including
DES type methods.

   The advantage of this method is that it would be much harder
to break than DES or any other method.  A relatively small set of
pads could be generated and still have 1000^1000+ possiblities.
And if someone generated large multi-key pads and coded
creatively, it would be impossible to break.  Of course,
every so often you would want to create new pads, just to be
sure.  But it wouldn't be a one-time pad anymore because it would
be safe for many many multiple uses, due to the almost limitless
number of possibilities.

   You would have 99.99% of the protection of a one-time pad
plus the protection of modern encryption methods like RSA or DES.
Another protection would be that since this is a very general
"algorithm" with infinite methods of implementation, it would be
nearly impossible to ever break without the source code of the
individual implementation, unless it was a lousy
implementation.

   Comments, anyone?

   Larry Dresser



-- 
 ----------------------------------------------------------
 |       Larry Dresser        (ldresser@netcom.com)       |
 ----------------------------------------------------------
