Path: msuinfo!agate!ames!hookup!grinch.tor.hookup.net!user
From: grinch@hookup.net (Reginald Braithwaite-Lee)
Newsgroups: sci.crypt
Subject: Re: License key encoding/decoding
Followup-To: sci.crypt
Date: Tue, 07 Jun 1994 14:14:58 -0500
Organization: Who-ville
Lines: 32
Message-ID: <grinch-070694141458@grinch.tor.hookup.net>
References: <Cr0EMH.JGp@cscns.com> <grinch-070694081355@grinch.tor.hookup.net> <Cr1AI2.4Hu@cscns.com>
NNTP-Posting-Host: grinch.tor.hookup.net

In article <Cr1AI2.4Hu@cscns.com>, zen@cscns.com (Zen) wrote:

...

> Actually, I would be the one running the hash on the fields (hostid, hostname,
> expr date), then generating the key.  Giving the key to the consumer, then
> having the application check the hash.
> 
> What is a good hash to use and how would I do this hash compression back
> out to ascii?

I recommend either MD/5 or SHA. Both algorithms are described in back
issues of Dr. Dobbs Journal as well as in Bruce Schneier's Applied
Cryptography. SHA takes an arbitrary binary string and converts it to a 20
byte value. I would then crunch it to 9 bytes with XORs or ADDs. A
straightforward RADIX-64 would expand this by 33%, to 12 characters, all of
which are easily entered by users at the keyboard ('A-Z','a-z','0-9','+', &
'/').

Since everyone is reading this, you could slightly obscure this method by
appending a secret value to the fields before performing the hash.

Regards,

-- 
Reginald Braithwaite-Lee
grinch@hookup.net

*** enquire about nCrypt, the strong cryptography app for Newton ***

Public Key Fingerprint: D8 B8 C1 D0 DD 56 20 B4  06 A2 81 83 87 E8 8B 64
(Send message with subject "HELP" to pgp-public-keys@pgp.ox.ac.uk)
