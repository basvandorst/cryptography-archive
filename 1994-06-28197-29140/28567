Path: msuinfo!agate!ames!hookup!grinch.tor.hookup.net!user
From: grinch@hookup.net (Reginald Braithwaite-Lee)
Newsgroups: sci.crypt
Subject: Re: md5 as a one-way function
Followup-To: sci.crypt
Date: Thu, 09 Jun 1994 22:26:44 -0500
Organization: Who-ville
Lines: 66
Message-ID: <grinch-090694222644@grinch.tor.hookup.net>
References: <Mouse.Wed_Jun__9_10_14_51_1994@collatz.mcrcim.mcgill.edu>
NNTP-Posting-Host: grinch.tor.hookup.net

In article <Mouse.Wed_Jun__9_10_14_51_1994@collatz.mcrcim.mcgill.edu>,
mouse@collatz.mcrcim.mcgill.edu (der Mouse) wrote:

> (Note cross-post and followup-to.  This is mostly a crypto question,
> but the application is security, hence comp.security.)
> 
> I have a question about md5, and I am not good enough to answer it...so
> I ask the net.
> 
> I was considering building a password hash function around md5.
> Specifically, I would generate a salt (nine bytes of data taken largely
> from the clock), compute its md5 checksum, convert it to a 20-character
> printable string by expressing it in base 94, then take the provided
> plaintext password, concatenate it with the aforementioned 20-character
> string, compute the md5 checksum of the result, express that as another
> 20-character string, and then store the resulting 40 characters as the
> password hash.  (In the environment I am considering using this in, I
> am not constrained by the usual UNIXish limitations of a two-character
> salt and a 13-character hash.)

Why all this conversion? You can MD5 any arbitrary binary string, so I
suggest appending your salt to the plaintext password, then MD5 the result.
The length of the salt is almost completely irrelevant--the general idea is
to (1) have more salts than passwords, ensuring that no two users get the
same hash, even if they have the same password, and (2) to make a
dictionary attack unfeasible. A 32-bit salt is probably enough, since it
adds complexity on the order of 2^32 to a dictionary attack.

If you wish to increase the security of the hash, try iterating the hash
repeatedly.

> Now, md5 is (last I heard) believed to be cryptographically strong as a
> checksum function, in that finding two data streams whose md5 checksum
> is the same, or finding a second data stream that checksums to the same
> thing as a given data stream, is approximately as hard as exhaustive
> search.

Well, finding two arbitrary values that 'collide' to the same result is
*much* easier than finding a collision for a given value.

> But this is not enough to make me confident that the hashing scheme I
> describe above is secure.  If md5 is strong in the sense that finding
> (de novo) a data stream with a given md5 checksum is approximately as
> hard as exhaustive search, then it is secure - but that's not quite the
> same as either of the statements in the previous paragraph.

There have been, apparantly, reservations about MD5 collisions. I doubt
your application becomes significantly vulnerable, even if there are some
isolated attacks.

> Any comments?  I'll try to follow sci.crypt for a while, but I would
> be grateful if anyone responding would be kind enough to mail me the
> response.
> 
> 					der Mouse
> 
> 			    mouse@collatz.mcrcim.mcgill.edu

-- 
Reginald Braithwaite-Lee
grinch@hookup.net

*** enquire about nCrypt, the strong cryptography app for Newton ***

Public Key Fingerprint: D8 B8 C1 D0 DD 56 20 B4  06 A2 81 83 87 E8 8B 64
(Send message with subject "HELP" to pgp-public-keys@pgp.ox.ac.uk)
