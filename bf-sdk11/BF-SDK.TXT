



				   BF-SDK


		      Blowfish Software Development Kit


				Version 1.1


		   (c) 1996 Markus Hahn & Cedric Reinartz







1. Disclaimer
~~~~~~~~~~~~~

This software is "as it is" .
The makers and developers of this package make no representation, warranty,
assurance or inducement, express or implied, as to its adequacy, sufficiency
or freedom from defect of any kind. Neither the makers or developers will
have any liability to any user resulting from the use of it nor are they
responsible for any data loss or computer failure resulting from any inherent
incompatibilities with any other software or hardware.




2. Introduction
~~~~~~~~~~~~~~~

This is the Blowfish System Development Kit.
It provides the basic functions to en-/decrypt data in ECB and CBC mode.
You can directly use it in Turbo/Borland Pascal, TASM/MASM and even
in MS Visual C++. Interfaces for other languages like Fortran or Cobol
are easy to implement.
To learn how Blowfish works, read BFCBCGR.TXT. Unfortunately it's only
in German (too less time), but you should be able to understand the
functionality of the BF-SDK easily by studying the examples in assembly,
Pascal or C++.

If you want to know more about Blowfish, data encryption and security, please
read
	"Applied Cryptography, 2nd Edition" by Bruce Schneier
			ISBN 0-472-11709-9

Just send an e-mail to Bruce (schneier@counterpane.com) to get an 15% discount.

To learn how to use the provided sources read PASCAL.TXT for the Turbo-
Pascal part, ASM.TXT for the assembly part and CPPTXT for the C++ part.

We're interested in any feedback! If you have any questions, suggestions or
improvements, please leave us an e-mail.




3. Files in this package
~~~~~~~~~~~~~~~~~~~~~~~~

sourcecode:	BFENG386.ASM	the engine, the heart of all
		BFE_ASM.INC	macros to help in writing assembly apps
		BLOWFISH.PAS	Pascal unit interface

		BLOWFISH.H	needed for C implementations
		CPP_DEMO.CPP	demo written in MS Visual C++

		ASM_DEMO.ASM	demo written in assembly language
		PAS_DEMO.PAS	demo written in Pascal


precompiled:    BFENG386.OBJ    object file of the cryptengine
                BLOWFISH.TPU    Borland Pascal Unit
		ASM_DEMO.EXE	assembly demo executable
		PAS_DEMO.EXE	Pascal demo executable
		CPP_DEMO.EXE	QuickWin demo for Windows 3.x (and above)


documentation:	BF-SDK.TXT	you're reading this now
                BFCBCGR.TXT     explanation of Blowfish (german only, sorry)

                ASM.TXT         explanation on how to use BF-SDK in Assembler
                CPP.TXT         explanation on how to use BF-SDK in C++
                PASCAL.TXT      explanation on how to use BF-SDK in Pascal

misc:           MAKEALL.BAT     batch file which compiles all the precompiled
                                from the source, except of the MSVC project
                FILE_ID.DIZ     BBS description



4. Technical Notes
~~~~~~~~~~~~~~~~~~

This software needs at least:

  -  IBM compatible AT-system with an 80386SX processor or better
  -  DOS 3.0 or above

achieved speed:    1.8 MB/sec on a Pentium90
                   2.7 MB/sec on a Pentium133

The actual version (1.1) is designed for 16bit systems, so you
should be able to use it in every - DOS real mode application
                                  - DOS 286 protected mode application
                                  - Windows 3.x application flawlessly.



5. Copyrights
~~~~~~~~~~~~~

Blowfish is a data encryption algorithm which was published in the Dr.Dobb's
Journal magazine, issue #213 on April 1994. It was developed by Bruce Schneier
and is unpatented and placed in the public domain.
In the September issue 1995 of DDJ Blowfish was (after a sponsored contest)
still unbreaked.
The advantages of this encryption algorithm is its design for 32bit CPUs like
the 80386 and above achieving an excellent performance with a maximum
gain of security.

The Blowfish implementation used in this software was done by:

	       Markus Hahn
	       Schellingstrasse 13
	       72622 Nuertingen
               Germany
               e-mail: hahn@pcmail.rz.fht-esslingen.de
and
               Cedric Reinartz
	       Schumannstrasse 51
	       40822 Mettmann
	       Germany
               e-mail: cer@servww4.ww.uni-erlangen.de (till end of 1996)




6. Distribution and usage limits
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The BF-SDK can be distributed freely if:

   - all files are distributed together
   - all files are unmodified
   - no fee (excluding material and shipping costs) is taken

If you use BF-SDK 1.1 for your own private purpose or if you developed
a program which is totally free and not bundled with a non-free product,
you can do so without paying any money (to us or someone else).

For any other use (especially profit use) you have to contact Markus Hahn
and Cedric Reinartz.

In any case you have to:

   - write a program documentation which contains the whole Copyright
     statement (part 5) from this text.
   - send us (both) a note that you are using it!




7. The real world
~~~~~~~~~~~~~~~~~

   The BF-SDK is used in the following products:


        * ASPICRYP by Cedric Reinartz, a DOS based TSR which hooks to an
          ASPI-Manager and encrypts the data going to a SCSI-device using the
          Blowfish algorithm in CBC mode.
          You can get it at:
                                     ftp.franken.de
                                     /pub/crypt/misc/ASPICRxx.ZIP

                                     ftp.garbo.uwasa.fi
                                     /pub/crypt/ASPICRxx.ZIP

        * Blowfish Advanced 7 (BFA7) by Markus Hahn
          a fast, secure and comfortable file encryption utility
          for 386+ and DOS. It'll soon be available for Windows 95, too.
          You can get it at:
                                     ftp.uni-stuttgart.de
                                     /pub/systems/pc/security/BFA7xx.ZIP

                                     ftp.garbo.uwasa.fi
                                     /pub/crypt/BFA7xx.ZIP




8. The Future
~~~~~~~~~~~~~

   It would be nice to have some CFB routines, which allows Blowfish
   to work as a stream cipher, encrypting and decrypting single bytes,
   although the performance will be decreased to about 12% of the
   original one.
   If you want to contribute something, send it to Cedric Reinartz
   or Markus Hahn.


- end of document -


