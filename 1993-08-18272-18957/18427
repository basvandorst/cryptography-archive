Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!digex.com!access.digex.net!mmurphy
From: mmurphy@access.digex.net (Mark L. Murphy)
Newsgroups: sci.crypt
Subject: Legal premise -- opinions?
Date: 5 Aug 1993 01:10:32 GMT
Organization: Express Access Online Communications, Greenbelt, MD USA
Lines: 31
Message-ID: <23pmm8$a9b@news1.digex.net>
NNTP-Posting-Host: access.digex.net
X-Newsreader: TIN [version 1.1 PL9]


I'm trying to come up with a concise statement of one of the
"PKP's-patents-don't-hold-water" theories.

Premise:
	Let X be something and Y be a collection of patented somethings.
	If X cannot be patented, then X cannot be in violation of the
patents held by arbitrary Y.

Or, to put it another way:
	If X is in violation of the patents of Y, then X itself could be
patented.  Moreover, had X been patented before Y, then Y might be in
violation of X's patent.

In terms of crypto, since pure algorithms and software implementations of
same are presumed to be unpatentable, then (according to the premise), a
software implementation of, say, RSA cannot be in violation of RSA's
patents.  After all, the patents on RSA refer to hardware implementations
of the algorithm.

Now, admittedly, relying on this premise would restrict one to pure
software implementations of patented crypto methods.  What my question to
my fellow armchair lawyers is: is the premise reasonable?  

One can strengthen their legal stance by using a software (hence,
unpatentable) implementation of an unpatented algorithm.  The premise, if
true, would hold back any arguments by PKP that their patents actually
cover the unpatented algorithm by virtue of an expansive
"all-public-key-algorithms" interpretation of their own patents.

Any thoughts?  Flame at will...
