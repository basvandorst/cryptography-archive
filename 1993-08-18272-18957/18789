Path: msuinfo!uwm.edu!vixen.cso.uiuc.edu!moe.ksu.ksu.edu!engr.uark.edu!news.ualr.edu!grapevine!john.eichler
Newsgroups: sci.crypt
Subject: random number generation
Message-ID: <9786.517.uupcb@grapevine.lrk.ar.us>
From: john.eichler@grapevine.lrk.ar.us (John Eichler) 
Date: 21 Aug 93 15:35:00 GMT
Reply-To: john.eichler@grapevine.lrk.ar.us (John Eichler) 
References: <25491kINN905@twain.ucs.umass.edu>
Distribution: world
Organization: The GrapeVine BBS *** N. Little Rock, AR *** (501) 753-8121
Lines: 68


Part 3 of 3

The one question I had was would it have been better to use modulus 52
instead of simple masking and throwing away bad values.  I did the same
counting procedure with a separate array using mod-52 and found a similar
flatness except for the last 4 values which, although flat between them-
selves, had about a 15 percent variation with the remaining values. This
was because 52 * 5 = 260 and 260 - 256 = 4.  Hence I concluded that using
the modulus was not the optimum approach.

Of course, the question was just how flat did all 256 byte combinations
come up with respect to distribution.  Below are the results I found in
doing such a measurement of the data.  I performed the same technique a
number of other times and the results looked pretty much the same.

46051 46072  46117  45723  45701  46325  45663  46064
46151 46120  46206  45503  46703  46270  46007  46041
45714 46316  46317  45727  46264  45740  45710  45652
46404 46106  45630  46001  45634  46475  46265  46174
45774 46360  46055  46507  46050  46176  46056  46251
46133 45432  46324  45422  45774  46415  46160  45744
45717 46556  46237  46254  45502  46067  46267  46051
46066 46036  45763  45762  46214  46166  46001  46116
46021 46175  46001  46400  45656  46003  46120  45620
46012 46020  45737  45723  45446  45602  45756  46255
45406 46304  46062  46144  46077  45760  45740  46207
46152 45523  45617  45625  46260  45771  46235  46026
45317 46356  46357  46205  46367  46154  46220  45665
45721 46313  45467  45725  46201  46210  46370  46033
46136 46041  45677  46432  46257  46112  46156  46065
46446 46563  46315  46023  46021  46221  46061  45773
45616 45551  46226  46311  46062  46267  46060  46273
46337 45634  46356  46140  45607  46234  46314  46374
45727 46317  46010  46176  45651  45765  46242  46023
46171 46072  46236  45677  45736  46236  46075  45552
46157 46257  45651  45720  46046  46642  45711  46260
46213 46322  46132  46052  45640  46103  46132  46122
46167 45647  46006  46475  45513  46147  46322  46010
46176 46137  45772  46101  46224  46151  46475  46215
46340 46073  46263  46074  46557  46056  45676  46557
45314 46137  46354  45777  46656  46143  46207  46161
45763 45777  46254  46424  46731  46071  46215  46420
45537 46145  46507  46025  45755  46244  46200  46216
46414 45752  46306  46051  46215  46051  46070  46430
45566 46470  46052  46071  45377  46075  46022  46142
46160 46142  46225  45702  46106  45651  46361  46023
46571 46461  45754  45747  45636  45524  45763  46237

On thing I did not do was to measure the occurrence of adjacent pairs
of bytes.  This would have, in my opinion, given even more evidence of
randomness.  But the hour was late and I was tired.  Maybe some other
day for that.

I present these results here as a seemingly good way to generate random
numbers given a good random seed.  Perhaps you may be able to enhance
the technique even further or be able to use it for some application ;)
Then again, maybe this is the way random people generate random numbers.

john

---
. SM 1.06 ----- . Email: john.eichler@grapevine.lrk.ar.us

----
The GrapeVine / Ferret Face BBS  (501) 753-8121
PGP Distribution Site, UseNet, RIME, ThrobNet, MediaNet, U'niNet, ForthNet
RecoveryNet, MetroLink.  Putting Communications back in Telecommunication
