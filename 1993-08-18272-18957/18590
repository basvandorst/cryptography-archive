Path: msuinfo!uwm.edu!vixen.cso.uiuc.edu!howland.reston.ans.net!darwin.sura.net!haven.umd.edu!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson)
Newsgroups: sci.crypt
Subject: Re: DES and one-time-pad generation
Date: 12 Aug 1993 19:37:33 -0400
Organization: University of Maryland, Baltimore County Campus
Lines: 81
Sender: olson@umbc.edu (Mr. Bryan G. Olson; CMSC (G))
Distribution: world
Message-ID: <24ek7tINNilo@umbc7.umbc.edu>
References: <f615l3L@quack.kfu.com> <gradyCBGIu0.Bu6@netcom.com> <CBJHJt.5xv@dcs.ed.ac.uk>  <1993Aug10.120932.1@admin.mcc.mass.edu> <PCL.93Aug12122705@rhodium.ox.ac.uk>
NNTP-Posting-Host: umbc7.umbc.edu


In article <PCL.93Aug12122705@rhodium.ox.ac.uk>, pcl@ox.ac.uk (Paul C Leyland) writes:
|> In article <1993Aug10.120932.1@admin.mcc.mass.edu> palmer@admin.mcc.mass.edu (Chris Palmer) writes:
|> 
|>    pdc@dcs.ed.ac.uk (Paul Crowley) asks why feedback causes short loops.
|> 
|>    A 64-bit block cipher E(M,K) maps 64-bit values to other 64-bit values.
|>    Hopefully it maps input to output 1 to 1 with no correlation, i.e., for
|>    all values of input 0..2**64-1 you will get as output all values
|>    0..2**64-1 in a scrambled order.
|> 
|>    Let's model this concept with a "perfect" 64-bit block cipher built by
|>    creating a lookup table of 2**64 elements. Initialize each element with
|>    its ordinal value. Shuffle each element with another element chosen at
|>    random using a hardware RNJ based on quantum events. You now have a
|>    lookup table with 1 to 1 mapping and no correlation. Look up element 0.
|>    element 0 points to element n. Element n points to another element and
|>    so on. But the odds are extremely slim that all the elements are chained
|>    together in one long loop. In reality there are probably many smaller
|>    loops, e.g. a-->b-->c-->a.
|> 
|> The expected size of a loop is of order sqrt(n).  This observation
|> (short loops in a random mapping) is used in Pollard's rho method of
|> integer factorization --- a prime factor p is found in order sqrt(p)
|> iterations.  The "random" mapping most often used is of the form x_i+1 =
|> (x_i)^2 + c for small c.  Sometimes (look up why for yourselves) a
|> higher power than the square is used.
|> 

But the question is not about a random mapping, it's about
a random permutation.  In a permutation no two elements in
the domain have the same image.  The rho method is a good
illustration.  The letter rho has a leader and then a loop:

    start-> ____
              /  \
             |    |
              \__/

A random permutation has no leader; the cycle must start
with the first element.  It will form an "o" not a rho.

Does this effect the cycle length ?  You bet.  In a random 
function you find a cycle when an element maps to any element
already found.  In a random permutation, it must map to the one
element at which you start.  The average cycle length (taking
the average over the elements, not the cycles) will be order (n), 
not order sqrt(n) (proof omitted).

Output feedback mode is defined to feed a variable number of
output bits back, and shift out as many from the previous input.
In practice, you should feed back all 64; this gives you a
permutation, since DES has an inverse (for a given key).


One final point about the differnce between a random function and
random permutation:

Suppose you choose p(x) and q(x) at random, independently from 
all one-to-one functions S -> S, for some large set S.
(A permutation is just a one-to-one function with the same domain
and range.)

Then p(q(x)) is also a permutation of S, and it will follow an
even distribution.

Suppose f(x) and g(x) are chosen at random, independently,
from all functions S -> S. 

Then f(g(x)) is a function S -> S but is NOT evenly distributed.

A random permutation of a random permutation is a random permutation.
A random  function of a random function is not a random function.
A random permutation of a random function, or a random function of
a random permutation, is a random function.

Cryptologists designing things which must look random should
keep these points in mind.

Bryan Olson
olson@umbc.edu
