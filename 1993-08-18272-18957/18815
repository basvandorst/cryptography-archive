Newsgroups: sci.crypt
Path: msuinfo!agate!dog.ee.lbl.gov!network.ucsd.edu!qualcom.qualcomm.com!unix.ka9q.ampr.org.qualcomm.com!karn
From: karn@unix.ka9q.ampr.org.qualcomm.com (Phil Karn)
Subject: Re: Passphrase proto-FAQ
Message-ID: <1993Aug23.055151.9586@qualcomm.com>
Sender: news@qualcomm.com
Nntp-Posting-Host: unix.ka9q.ampr.org
Reply-To: karn@servo.qualcomm.com
Organization: Qualcomm, Inc
References: <gradyCBIx4n.6n8@netcom.com> <TSOS.580.745665955@uni-duesseldorf.de>
Date: Mon, 23 Aug 1993 05:51:51 GMT
Lines: 17

In article <TSOS.580.745665955@uni-duesseldorf.de>, TSOS@uni-duesseldorf.de (Detlef Lannert) writes:
|> The cryptographic hash algorithms mentioned above will do a good job 
|> on crunching arbitrarily long passphrases into an implementation-
|> limited password size but are not really necessary. An algorithm like 
|> the one described by Peter K. Pearson in CACM 33 (1990) 6, pp 677-680 
|> ("Fast Hashing of Variable-Length Text Strings") is way faster and 
|> easier to implement.

This may be true, but a cryptographic hash like MD4 or MD5 is already
plenty fast on any modern CPU given that you're hashing manual input
from a keyboard.

And since you're presumably entering a passphrase into a cryptographic
subsystem of some kind that uses a cryptographic hash for message
authentication, you might as well reuse the same code anyway, right?

Phil
