Newsgroups: sci.crypt
Path: msuinfo!caen!destroyer!gatech!howland.reston.ans.net!math.ohio-state.edu!usc!elroy.jpl.nasa.gov!decwrl!parc!merkle
From: merkle@parc.xerox.com (Ralph Merkle)
Subject: Hash Signatures, an alternative to DSS?
Message-ID: <merkle.745716617@manarken>
Sender: news@parc.xerox.com
Organization: Xerox PARC
Date: 18 Aug 93 23:30:17 GMT
Lines: 72

The recent discussion concerning PKP's (Public Key Partners) efforts
to reach a licensing agreement with NIST about the DSS might stimulate
interest in hash signatures: an alternative digital signature method
which does not (to the best of my knowledge) require a license from PKP.
(Note that other patents do apply).

Major advantages:

1.)  Hash signatures can be based on any one-way hash function.
     The security of the signature depends on the security of the
     hash function.  For this reason, there is no need for
     a lengthy certification process.  If there is a one-way hash
     function that you feel is secure, you can use it to make a
     hash signature which is just as secure.

2.)  Because hash signatures are based purely on one-way hash functions,
     they cannot be used for secrecy.  They are not "encryption
     functions" and hence export regulations concerning "encryption
     functions" are not applicable.

3.)  Because computation and verification of the hash signature is
     done by repeatedly computing the underlieing one-way hash function,
     there is no need to do modular arithmetic.  The computational
     efficiency of both signing and checking is good.

4.)  Essentially all of the computations required to sign a message
     can be done prior to knowing the message.  The computations that
     must inherently be done after receipt of the message involve
     little more than hashing the message.

The major disadvantages of hash signatures are:

1.)  Although the size of the signature can vary rather dramatically
     depending on the system design, I would expect that in most
     systems it would be larger (anywhere from a factor of 2 to a factor
     of 10) than the size of the signature generated by other popular systems.
     This can be a significant disadvantage when the item being signed is
     relatively small (e.g., a hundred bits).  When the item being signed
     is larger (multiple kilobytes) or where many items can be "batched,"
     then this will not be a significant limitation.  The significance
     of this limitation will vary depending on the application.
     For "electronic documents" or computer programs (which often
     have a size of tens of kilobytes or more) this limitation should
     not be significant.

2.)  It is necessary for the signer to maintain a counter, and to
     count the number of signed messages.  Thus, the signing process
     does have a minimal amount of "state" that must be maintained.
     This does not appear to be a significant limitation, as the
     counter can be kept with the secret signing key.

3.)  The signing process requires somewhat more memory (RAM) for the
     signer.  Again, this does not appear to be a significant drawback.

An experimental C implementation of hash signatures has been publicly
available by anonymous FTP for the past few years.  It is available
from "parcftp" in directory "/pub/hashsig/hashSig1.0"  It includes
C source, man pages, legal notices, and both MD4 and Snefru as one way
hash functions.  At the time it was implemented, the SHA from NIST was
not available.  An obvious improvement would be to incorporate the
SHA.  This should make the resulting signature system as secure as
NIST's SHA.

The following patents are relevant:

#4,881,264, Digital Signature System and Method Based on a
            Conventional Encryption Function, by Ralph C Merkle,
            issued November 14, 1989.

#4,309,569, Method of Providing Digital Signatures, by Ralph C. Merkle,
            issued January 5, 1982.

