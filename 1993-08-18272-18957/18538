Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!wupost!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: Re: IDEA operating modes
Message-ID: <16C25FDEF.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
References: <16C23B4A0.C445585@mizzou1.missouri.edu> <wd6cmuCBFJ5q.I4s@netcom.com>
Date: Mon, 09 Aug 93 18:03:26 CDT
Lines: 39

In article <wd6cmuCBFJ5q.I4s@netcom.com>
wd6cmu@netcom.com (Eric Williams) writes:
 
>Can the IV be considered as just an
>extention to the IDEA key?
 
   Hmmm.  In CFB or CBC mode, there is no point in keeping the IV secret.
If you knew the key but not the IV for a file encrypted in CBC mode, you'd
be able to decrypt every block but the first one in the file.
 
   In OFB mode, the IV is more important for security, but you generally
have to assume your opponent will learn it, since he/she probably knows
at least one 64-bit block of plaintext.  Again, keeping the IV secret isn't
important.  Keeping the key secret, of course, is.
 
   As far as randomness goes, it's moderately important not to allow your
attacker to choose your IV.  Again, though, even if he/she could choose your
IV, he/she would still have a pretty hairy effort to mount a chosen-plaintext
attack.  (I described how to do this a few weeks ago.)
 
   Just as a sideline, you say you're encrypting several files with the same
password/key.  Why?  If you're implementing IDEA on your own, it's not too
much harder to include an additional 128-bit value at the beginning of the
file, and use that to encrypt your password-generated key, to generate a
key for a given file.  This probably isn't terribly important for your
application, but most attacks against encryption schemes require fairly large
amounts of ciphertext from a given key, usually with the input plaintext
known or chosen by the attacker.  Also, if you're implementing IDEA on your
own, make sure your method of hashing your password into a key turns out
well-balanced keys.  (You could probably randomly generate a set of character
strings, and flip individual bits to see if the hashed-key followed the
strict avalanche criterion, or something.)  I believe PGP uses the MD5 hash
for this.
 
>Eric Williams      |  Vincent: MC (B+S)t G+Y .10 Y L++ C+ T+ I+++ H+ S++ V+ F++
>wd6cmu@netcom.com  |  Murphy: DS W+(B+R)t+R Y .11 Y L C+ T- I+++ H+ A+ F+
>WD6CMU@WD6CMU.#NOCAL.CA.USA.NA
 
   --John Kelsey, c445585@mizzou1.missouri.edu
