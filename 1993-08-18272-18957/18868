Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!wupost!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: Double-encryption
Message-ID: <16C35F6B9.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
Date: Wed, 25 Aug 93 17:32:41 CDT
Lines: 47

   A few days ago, Bill Thomas asked some questions about double encryption
and brute force attacks and such.  I may have missed other replies, since
several messages have scrolled off since then, and since I've been pretty
busy.  Appologies if I'm repeating what others have recently said....
 
   Bill asked how an attacker launching a brute-force attack knew when
he or she got the right key (ie, how can you tell whether this is reasonable
plaintext or not).  If you know the format of the plaintext, it's generally
easy to guess.  English language encoded in ASCII has some very well-known
characteristics, as does LZ-compressed ASCII.  This sort of thing is probably
enough for most applications.  However, there are many ways to try to make
sure the format of the plaintext doesn't have any usable pattern.  Data
compression and homophonic coding (coding so that each possible symbol has
an equal chance of occurring in the plaintext) have been used/discussed as
ways of doing this.  Encrypting already-encrypted plaintext again with a
different algorithm (which Bill mentioned) is another workable method.  The
term for this is "superencipherment."  Superencipherment can work very well
or very badly, depending on how the different ciphers interact.  This can
get incredibly complex to figure out, though I'm imagine that DES and IDEA
(for example) are different enough to keep from having any odd weaknesses
that manifest when they're run in sequence.
 
   Generally, though, it's assumed that the analyst is likely to know at
least some of the plaintext.  This isn't a terribly unreasonable assumption
in most cases.
 
   Bill also asked about double-encryption with different keys.  This does
NOT resist brute force attack significantly better than single-encryption,
if your attacker knows just a small amount of the input plaintext.  To
break double-encryption, first build a table of a known plaintext block
encrypted under each key, ie the ith entry is the known plaintext encrypted
under key=i.  Then, build a second table of the corresponding known ciphertext
decrypted by each key, ie the ith entry is the known ciphertext decrypted
with key=i.  Find the matches.  You'll need to do this with several blocks,
to eliminate multiple matches (it seems like it would only take two or three
blocks, but I may be wrong).  This isn't much harder than a single-key
brute force search.  (This is called a "meet-in-the-middle" attack.)
 
   DES is sometimes used in "triple-encryption" mode.  This simply means
encrypting with key A, decrypting with key B, then encrypting with key A
again.  This has a key length of 112 bits, but can be broken with somewhat
less effort than that with a decent amount of known plaintext.  (I posted on
this a while back).  The attack still requires far too much time to be
practical.  Also, triple-encryption can be broken in O(2**64) steps, if you
have all 2**64 possible plaintext/ciphertext pairs.
 
   --John Kelsey, c445585@mizzou1.missouri.edu
