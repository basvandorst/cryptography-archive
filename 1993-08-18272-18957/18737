Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!virtech!johnw
From: johnw@vti.com (John Wiegley)
Subject: Re: Multidimensional encryption schemes..
Message-ID: <CC0x06.B9L@vti.com>
Organization: Virtual Technologies Inc.
X-Newsreader: Tin 1.1 PL5
References: <CBvGIJ.J4z@acsu.buffalo.edu>
Date: Thu, 19 Aug 1993 20:31:16 GMT
Lines: 89

I've been thinking about this multi-dimensional encryption scheme more,
and here's what I've got:

The incoming bit stream is a serial sequence of on and off bits.  This
is what I mean when I say "linear".

The password represents another, finite sequence of bits.

Using the bits of the password as 2-bit "tokens", I can generate a
mathematical equation.  For example, if I take 6 bit groups, and assign
a meaning to each 2-bit pair in the 6-bit group:

    6-bit group     1st 2-bit pair = term (x/y/z)
                    2nd 2-bit pair = power of term
                    3rd 2-bit pair = operator

Then the password itself represents an equation.  I would have to
include a method to be sure that the equation was irreducible, and that
it contained all three terms.  If it weren't irreducible, then it's
possible that a much simpler equation could be equivalent.  Also, I'm
trying to think of how I could have the _order_ be significant, so that
the password "mixelflix" wouldn't be equivalent to "xilflexim".

The password would undergo three transformations, each transformation
deriving its rules from the structure of the equation.  Equation #1
would be used to determine the SHAPE of the 3-d construct.  That is, 6
surface planes would have to be determined that would be modified to
produce a 3-dimensional figure with a total volume equal to the buffer
length (let's say 64K for now).

The second equation would determine how the construct was filled.  What
I was thinking of was this: use the equation to determine an axis; then
divide the construct into 1 bit-height planes along that axis.  Then,
find a 2-dimensional curve from the equation, and repeat that curve
inside a single 2d plane until it was filled.  Then, move to the next
higher plane, derive a different curve, and fill that plane.  Etc, until
the construct was filled.

The nature of deriving the shape of the construct, and the curve used to
map bits into each plane section, would be done from the
password-equation in such a way that the same password would always
produce the same fill.

Equation #3 would be used to empty the construct back out into a linear
sequence (serial).  Another axis would be chosen (from one of the two
remaining), and another sets of curves used to "read out" the bits from
each plane.

The resulting bit stream could scarcely have anything in common with the
original, unless it were mostly uniform.  In that case, perhaps a form
of data compression would be helpful before the encryption scheme
occured.

Decryption is a simple reversal.  That is, generate the construct using
Equation #1, fill the construct with Equation #3 -- going backwards, and
then empty it out backwards with Equation #2.  (And decompress if
necessary).

If the algorithm is worthwhile, then it ideally should be able to let
the dimensions and buffer size be selectable by the user.  However, the
number of dimensions, and the buffer size, would be directly related to
the resources consumed.  The construct would be a mass of bit cells,
where each bit cell would have at least n number of pointer links (where
n was the number of dimensions).

I haven't worked it all out yet, nor have I started coding.  There's a
bit of mathematics involved here, and I'm not even sure yet that it's
possibe (or pratical).

The advantages are: it uses no hash tables, or translation matrices;
it adds nothing to the data (or takes anything away); it employs an
alogrithm which cannot be derived from the distribution of the data,
without already knowing either the data, or the password; and everything
is keyed to the password.

Disadvantages are: it's probably VERY slow; it can be a memory hog,
depending on the parameters used; and the need for resources increases
exponentially with higher dimensions.

I call it MEDA (Multidimensional Encryption/Decryption Algorithm).

Let me know what you think,
  John

-- 
      /_\   Virtual                  John Wiegley
    /-~_  \    Technologies          johnw@vti.com
  /      ~-_\     Incorporated       703-430-9247,   FAX 703-450-4560
/_____________\      46030 Manekin Plaza, Suite 160, Dulles, VA 20166
