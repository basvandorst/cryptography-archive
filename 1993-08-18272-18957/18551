Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!math.ohio-state.edu!usc!elroy.jpl.nasa.gov!decwrl!csus.edu!netcom.com!wd6cmu
From: wd6cmu@netcom.com (Eric Williams)
Subject: Re: IDEA operating modes
Message-ID: <wd6cmuCBK3HL.BFq@netcom.com>
Organization: NETCOM On-line Communication Services (408 241-9760 guest)
X-Newsreader: TIN [version 1.1 PL8]
References: <16C25FDEF.C445585@mizzou1.missouri.edu>
Date: Tue, 10 Aug 1993 18:32:08 GMT
Lines: 41

John Kelsey (C445585@mizzou1.missouri.edu) wrote:
:    Just as a sideline, you say you're encrypting several files with the same
: password/key.  Why?  If you're implementing IDEA on your own, it's not too
: much harder to include an additional 128-bit value at the beginning of the
: file, and use that to encrypt your password-generated key, to generate a
: key for a given file.  This probably isn't terribly important for your
: application, but most attacks against encryption schemes require fairly large
: amounts of ciphertext from a given key, usually with the input plaintext
: known or chosen by the attacker.  

The intent is to encrypt files at the file block I/O level, so that the
encryption is transparent to the application that is accessing the
data.  (*If* you have the key, of course.  Anyone else just sees random
garbage in the file.)  Since the files never go anywhere else, and
encryption can't be done without the key in the first place, a chosen
plaintext attack isn't very likely.  I'll have to see if it's possible
to sneak another 128 bits into the file's directory entry to use with
the scheme you suggest.

If I use one of the feedback modes, I figured I'd have to re-start from
the IV for each file block so that random I/O could still be performed.
I was concerned that using the same IV for each block would compromise
encryption strength.

: Also, if you're implementing IDEA on your
: own, make sure your method of hashing your password into a key turns out
: well-balanced keys.  (You could probably randomly generate a set of character
: strings, and flip individual bits to see if the hashed-key followed the
: strict avalanche criterion, or something.)  I believe PGP uses the MD5 hash
: for this.

The key will be true randomly generated and stored in an EEPROM
cartridge that is removable.  (It even *looks* like a key.)  I thought
of XORing the key with a key phrase and storing the result in the cartridge
so that it would be unusable without the phrase, and visa-versa.

-- 
Eric Williams      |  Vincent: MC (B+S)t G+Y .10 Y L++ C+ T+ I+++ H+ S++ V+ F++
wd6cmu@netcom.com  |  Murphy: DS W+(B+R)t+R Y .11 Y L C+ T- I+++ H+ A+ F+
WD6CMU@WD6CMU.#NOCAL.CA.USA.NA

