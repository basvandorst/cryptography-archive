Path: msuinfo!agate!usenet.ins.cwru.edu!magnus.acs.ohio-state.edu!math.ohio-state.edu!usc!elroy.jpl.nasa.gov!decwrl!uunet!munnari.oz.au!mel.dit.csiro.au!its.csiro.au!dmssyd.syd.dms.CSIRO.AU!metro!sunb.ocs.mq.edu.au!laurel.ocs.mq.edu.au!ifarqhar
From: ifarqhar@laurel.ocs.mq.edu.au (Ian Farquhar)
Newsgroups: sci.crypt
Subject: Re: SKIPJACK Review, Interim Report
Date: 9 Aug 1993 07:40:02 GMT
Organization: Macquarie University
Lines: 143
Distribution: world
Message-ID: <244v0i$26c@sunb.ocs.mq.edu.au>
References: <1993Aug1.220927.4510@guvax.acc.georgetown.edu>
NNTP-Posting-Host: laurel.ocs.mq.edu.au
Summary: An interesting observation and some notes
Keywords: Clipper, SKIPJACK, ViaLink, Cray, Evaluation, CAPSTONE

Firstly, I would like to say thanks to Professor Denning for posting
the interim version of this report, rather than making us all wait
for the final version.   Considering that her usual appearance on the
net is accompanied by much unnecessary unpleasantness from her critics,
I believe that she deserves our thanks for once more stepping into
the fray to provide this information as she has.

In article <1993Aug1.220927.4510@guvax.acc.georgetown.edu> 
denning@guvax.acc.georgetown.edu writes:
>The purpose of this Interim Report is to
>report on our evaluation of the SKIPJACK algorithm.  A later Final
>Report will address the broader system issues.

When will the final report be released, is there an estimated delivery date
for that?  Will it also be posted to the network as this evaluation has?

>protecting all levels of classified data.  The specific algorithm,
>SKIPJACK, is intended to be used with sensitive but unclassified
>information.

This begs the question: if SKIPJACK is indeed as powerful as claimed,
why is it not cleared for the encryption of classified information?
This is, of course, a question which was also asked about DES, and the
general assumption was because the algorithm was vulnerable to attack.

I see two possibilities in the case of Clipper:

1. That SKIPJACK is indeed extremely strong, but that the NSA still
   feels it sensible to built extra complexity into higher-security
   cryptosystems in anticipation of breakthroughs in cryptanalysis.
2. That SKIPJACK is not as strong as it is claimed.  This could
   imply either a backdoor, or that the keyspace can be minimized somehow.
   ie. The paranoia theory.

This is, of course, not a question I expect an answer from the committee on! :)

>An implementation of  SKIPJACK optimized for a single processor on the
>8-processor Cray YMP performs about 89,000 encryptions per second.  At
>that rate, it would take more than 400 billion years to try all keys.
>Assuming the use of all 8 processors and aggressive vectorization, the
>time would be reduced to about a billion years.

I've been thinking about this paragraph for a couple of days, and have come
to a rather curious conclusion which I would like to present to the net
for discussion.  A couple of initial points:

	* The cycle time of a Cray Y-MP/8 is 6.0 nS
	* The "parcel" size for SKIPJACK is 64 bits, which is the size
	  of a Cray integer anyway.  This _should_ make implementation
	  of the cipher somewhat easier on a Cray (or indeed any CPU
	  which has a 64 bit integer LU/ALU.)
	* I'm assuming that 89K encryptions/sec means 89,000 by 64 bit 
	  parcels per second.
	* SKIPJACK is a 32 round cipher.
	* The reduction of 50 times between the "aggressively vectorized"
 	  version of SKIPJACK and the "optimized" version implies that
	  this implementation is not vectorized much, if at all.  It is
	  questionable if whether in some modes (eg. CBC) vectorization
	  would be possible.  I believe that it is safe to assume that
	  to support all four DES modes that the NSA software implementation
          is not vectorized.  50 is also interestly close to the vector
	  length of 64 plus startup times and inefficiencies.
	* We assume that there is no overhead to the implementation, and
	  all of the time is spent in the 32 rounds of the cipher (yes,
	  this is unrealistic, but to assume that there is an overhead
	  reduces the complexity anyway.)
	* Our aim is to determine how complex, on average, each round of
	  the SKIPJACK algorithm is.  We can only do this as a maximum
	  number of cycles per round, which is acceptable.

Making these assumptions, we can perform an interesting (if naive) calculation:

The CPI of a Cray for an arbitrary program is very difficult to determine,
but some samples I have seen suggest between about 1.2 (for a highly
vectorized piece of code) to about 4.1 (for the unvectorized Spice SPEC
benchmark written in Fortran):

        89,000 encryptions/second = 1 encryption every 11.24 mS
                         11.24 mS = ~1873 clock cycles
                      1873 cycles = ~1560 instructions at 1.2 CPI
                                  = ~49 cycles per round at 1.2 CPI *
                      1873 cycles = ~457 instructions at 4.1 CPI
                                  = ~15 cycles per round at 4.1 CPI *

So, we can assume that to implement each round requires somewhere between
say 15 and 50 instructions on a Y/MP, which means that although they're
complex non-linear functions, the functions themselves are not amazingly
convoluted to implement (unlike, say, DES where bit-permutations usually
consume a lot of cycles in software implementations.)

However, I reiterate that this calculation assumes:

1. Non- or very-poorly vectorized code (vectorizing it would decrease the
   CPI, or rather, increase the results per clock cycle and invalidate the
   above calculation.)
2. That the overhead of running the implementation (eg. file I/O) is
   zero.  This reduces the cycles executed per round, as they are being
   used elsewhere.

I'm rather loathe to post this, as I have nasty visions of being shot down
in flames.  Even so, if correct, it tends to implicate to me that:

1. Bit-wise permutations are not a major part of the algorithm (as these
   use huge amounts of time in software implementations of ciphers such as
   DES, and I don't think that it has the time to happen here.  Nor can
   I see any way for bit-wize permutations to elegantly vectorize, which
   again supports this comment, as we've been told that it could be
   vectorized which would reduce the execution time by a factor of 50.)
2. That the operations involved in each round are probably mathematical
   or boolean operations (similar to IDEA's.)
3. That each stage of the cipher is not particularly complex to implement.

Constructive comments on this are invited.  I am wholly willing to admit
that all of the above is complete and utter trash. :)

On other issues:

1. Has there been any announcement concerning the technology in which
   Clipper will be implemented (eg. 1 micron CMOS?)
2. We've had a post claiming that the anti-tampering technology was VLSI's
   ViaLink process.  Whether this is true or not is something I am rather
   wary of, however it is certainly feasable.  How dense are fuse-programmable
   standard cells such as ViaLink?  Does anyone have the brochures on this
   (I doubted that they would be sent if I requested them, so I didn't bother.
   If anyone from VLSI wants to send me some, please feel free to email for
   my address here.)
3. It occured to me that one way of reverse engineering the system would be
   to purchase a bulk-lot of unprogrammed Clipper chips, send them to Mitronix
   for programming, but replacing one or two with "trojan" versions,
   designed merely to grab the microcode.  One obvious way around this is
   to assume that the programming process can actively identify a trojan,
   although I have never seen this mentioned.  Would the evaluators like
   to comment on this protection?

BTW, my interest in the Clipper and SKIPJACK is purely personal interest.
I must admit that I probably wouldn't use a Clipper-protected phone if
I had an option, but that if I didn't and it was the only thing available, then 
it's probably better than plaintext-to-air.  Even so, I also must admit that
I find the views and policies which squash personal privacy in favor of
an ill-defined and non-publicly admitted "greater good" is rather abhorent,
but hardly unexpected these days.  *Sigh*

							Ian.
