Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!news.delphi.com!news.delphi.com!not-for-mail
From: mikeingl@news.delphi.com (MIKEINGLE@DELPHI.COM)
Newsgroups: sci.crypt
Subject: IDEA/PERMUTE/3DES high security?
Date: 25 Aug 1993 04:33:37 -0400
Organization: General Videotex Corporation
Lines: 120
Message-ID: <25f851$r9j@news.delphi.com>
NNTP-Posting-Host: news.delphi.com

(This is probably not original; the question is, is it a good idea?)
 
Is it possible to make a nearly unbreakable cipher by combining
two respected algorithms and permuting the data between encryptions?
With the threat of Clipper, unclassified cryptography needs an
algorithm which is generally agreed to be unbreakable. This could
be added as an option to PGP and RIPEM, and later used in a hardware
public-key-encryption device.
 
Choose, for instance, IDEA and triple-DES. Both are good 
algorithms. They have keys which are long enough to rule out any
possibility of a brute-force attack. They are resistant to known
methods of cryptanalysis. They have good dispersion and produce 
pseudo-random ciphertext. Whether the NSA could break either of 
these, using a classified method, is pure speculation.
 
IDEA and triple-DES are very different algorithms. DES is based on
bit manipulation and permutation tables, whereas IDEA uses 16-bit
arithmetic operations. This is good, because it means that if
either algorithm has a flaw, the other one is not likely to have
the same flaw.
 
Take a 64-byte section of plaintext. Encrypt it using triple-DES.
Then permute the ciphertext. A simple and fast method would be 
to take the first byte of each 8-byte DES block (bytes 0,8,16, 
and so on) and make the first 8 bytes of the reorganized section. 
Repeat with the second, third, etc. until the entire 64 bytes are 
reorganized. So:
 
0       0       0       0       0       0       0       0       
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@
becomes:
AIQYgow4BJRZhpx5...and so on.
 
Then, re-encrypt the section with IDEA, producing double-encrypted
ciphertext.
 
Suppose you now change one bit in the ciphertext and decrypt it.
When you decrypt IDEA, you get one 8-byte block of garbage (which
is indistinguishable from the rest of the still-encrypted data).
When you undo the reorganization, you get one bad byte in each DES
block. So when you DES decrypt, you get 64 bytes of garbage.
 
The compound cipher is effectively a 64-byte block cipher, in that
every bit in the 64 bytes depends on every other bit. Thus you would 
have to attack a 64-byte section i.e. you would need 64 bytes of 
plaintext to attempt a plaintext attack. And even if you had the 
64 bytes, you probably couldn't do anything with it. If you found 
a weakness in either cipher that allowed you to attack it, the same 
weakness would not exist in the other cipher (since they are based 
on different methods). So you could not attack the compound cipher. 
A combination of two ciphers, especially with the permutation, 
should be much more secure than a single cipher.
 
Of course, it would be slower than a single cipher, but there are
ways to make it usable. For example, the reorganization would be
performed by straight-line assembly language, with no loops. And
the encryption program would use a large disk buffer and 32-bit
assembly language. Or, better yet, use hardware. A widely trusted 
conventional cipher could be the basis for a public-key encryption 
chip to rival Clipper. Unlike software encryption, it would be
difficult to steal keys or sabotage the encryption.
                                                   
This chip, with all the necessary hardware self-contained, would 
make secure phones, faxes, computers, and everything very easy. 
RSA Data Security could make a fortune if they received only a 
small royalty on each one sold or imported. The design of the 
chip would be extremely public and readily available. Any company 
could produce them if it was willing to pay for the use of the 
RSA algorithm and any other proprietary algorithms used.
 
The chip would contain a hardware true-random-number generator;
facilities for executing RSA; MD5 or another message digest; and an
extremely secure conventional cipher such as the compound cipher
mentioned above. It would also contain nonvolatile (flash ROM)
registers to store its public key and secret key.
 
Hardware random numbers can be generated by several methods. One is
to measure the jitter in an unstable oscillator. Another is to
reverse bias a diode, right on the edge of zener breakdown, causing
it to produce white noise. These methods can be proven by quantum
mechanics to be inherently random.
 
The chip would be sold blank - no serial number or anything. The
user would instruct it to initialize itself by generating a key
pair. It would do this internally, producing and remembering a
public key and secret key. This might take a while, but you only
have to do it once. When this is finished, you can easily extract
the public key, but there would be no way to extract the secret key
from the chip. The chip would be designed to make it very difficult
and expensive to extract the secret key by physical surgery, thus
making key stealing hard. The secret key would be stored internally
in encrypted form, using a pass phrase much like PGP does, and the
chip would decrypt it before each operation.
 
In addition to the initialization, there would be at least five basic
operations. The chip could output its public key, encrypt, generate
signatures, decrypt, and check signatures.
 
You would need some way of revoking keys even after the chip was
stolen. The chip could generate its own revocation certificate when
it is initialized. This would be encrypted with the conventional
cipher and a pass phrase, then turned over to a trusted agency. If
the chip was stolen, the owner could call an 800 number, give the
key ID and pass phrase, and the agency would decrypt the revocation
and release it.
 
The chip would not need to be hard-wired into a device. It could 
be built into a card or other plug-in module, perhaps PCMCIA 
compatible. You could use this as an electronic identity, while 
retaining the option to remain anonymous by getting a second card 
and generating a new identity. The card might also contain a 
memory for other people's public keys.
 
You could, for example, insert the card into a pay phone and dial
your pass phrase. This would secure the call, allow you and the
recipient of the call to verify each others' identities, and pay
for the call with digital cash.
 

