Newsgroups: sci.crypt
Path: msuinfo!agate!usenet.ins.cwru.edu!news.ecn.bgu.edu!mp.cs.niu.edu!vixen.cso.uiuc.edu!howland.reston.ans.net!pipex!uknet!comlab.ox.ac.uk!pcl
From: pcl@foo.oucs.ox.ac.uk (Paul C Leyland)
Subject: Re: Factoring N=P*Q vs. general factoring
Message-ID: <PCL.94Feb16194548@foo.oucs.ox.ac.uk>
In-reply-to: sr@zen.mp.co.umist.ac.uk's message of Tue, 15 Feb 1994 17:16:40 GMT
References: <2jqpre$6j1@fbi-news.informatik.uni-dortmund.de>
	<SR.94Feb15171640@zen.mp.co.umist.ac.uk>
Date: 16 Feb 1994 19:45:47 GMT
Lines: 64

In article <SR.94Feb15171640@zen.mp.co.umist.ac.uk> sr@zen.mp.co.umist.ac.uk (Simon Read) writes:

   In article <2jqpre$6j1@fbi-news.informatik.uni-dortmund.de> eggenste@cantor.informatik.uni-dortmund.de (Heinz-Bernd Eggenstein (LS2)) writes:

      What kind of evidence is there to support the conjecture that
      factoring numbers N=p*q, p,q prime, is at least as difficult 
      as the general factorization problem?

   So far as I am aware there is no direct evidence that factoring primes

You mean "factoring into primes"

   is hard, except that no-one can find an easy way of doing it, which I
   think answers HALF of your question.

   There is an implicit part to your question which is "Is it easier to
   factor a number which is he product of only two primes than to do
   general factoring." Well, again as far as I'm aware, no one has
   admitted to looking at the problem from the "only two primes"
   viewpoint. It is almost certainly going to be slightly easier,
   although there is no general theory.

I'm not so sure of that.  Algorithms such as trial division, Pollard's
rho and ECM find the many-primes problem much easier on average than
the 2-primes problem.  This is because those algorithms find the
factors in approximate order of size.  The more factors a number has,
the more likely it is to have small factors (this statement can be
made more rigorous; I hope it is intuitively obvious).

Other algorithms, such as those based on Quadratic Sieve or Number
Field Sieve, find it equally easy to factor numbers irrespective of
the size or number of factors.

I'd suggest that you've got it the wrong way around but, as you
correctly state, no-one really knows.

   In any case the real issue is can the improvement in the complexity
   functions of modular exponentiation algorithms keep pace with the
   prime factoring algorithms because in most practical applications the
   key length can be increased.

At the moment, exponentiation algorithms are much faster than
factoring algorithms.  No-one has proved that they *must* be faster,
but almost everyone thinks they are intrinsically faster.

   For the moment the answer is, I think, that the evidence is empirical,
   but I'm not even sure HOW you would go about showing anything else.

It's easy to demonstrate fast exponentiation algorithms.  Read Knuth
Art of Computer Progrmming, Vol. 2 2nd Ed. for examples.  So far,
no-one has shown a polynomial time algorithm for factoring which runs
on a real computer, though there are tantalising glimpses of what
might be possible.  Again, see Knuth.  You'll also find a more
rigorous statement of my earlier assertion in that book.


Paul

--
Paul Leyland <pcl@black.ox.ac.uk>        | Hanging on in quiet desperation is
Oxford University Computing Services     |     the English way.
13 Banbury Road, Oxford, OX2 6NN, UK     | The time is gone, the song is over.
Tel: +44-865-273200  Fax: +44-865-273275 | Thought I'd something more to say.
Finger pcl@black.ox.ac.uk for PGP key    |
