Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!uknet!comlab.ox.ac.uk!pcl
From: pcl@foo.oucs.ox.ac.uk (Paul C Leyland)
Subject: Re: Factoring N=P*Q vs. general factoring
Message-ID: <PCL.94Feb21114701@foo.oucs.ox.ac.uk>
In-reply-to: lou@Cadence.COM's message of Sat, 19 Feb 1994 16:29:41 GMT
References: <2jqpre$6j1@fbi-news.informatik.uni-dortmund.de> <2jt8ii$ioa@linus.mitre.org>
	<lou.761675381@cadence.com>
Date: 21 Feb 1994 11:47:01 GMT
Lines: 53

In article <lou.761675381@cadence.com> lou@Cadence.COM (Louis K. Scheffer) writes:

   In <2jt8ii$ioa@linus.mitre.org> bs@gauss.mitre.org (Robert D. Silverman) writes:

   >Either a method depends on the size of the factors or it does not.
   >If it does, then that method will find it harder to factor N = pq,
   >(p ~ q ~ sqrt(N)) than an N which has small factors.

   This is not clear to me.  Suppose it depends on the size of the factors,
   but not in the simple way "bigger->slower".  For example, I think there
   is an algorithm which works better if the two factors are roughly equal
   in size.  (This is from some very early RSA articles, which said the


Bob omitted Fermat's factoring algorithm which does have the property you
describe.  The algorithm runs something like the following:

	To factor N, calculate  x =  int (sqrt (N)) + 1
	form y = x^2 - N

	while ( y is not a perfect square)
		x = x + 1
		y = x^2 - N

	The factors of N are (x - y) / 2 and (x + y) / 2


Although this method can be streamlined substantially, it is extremely
poor at factoring large numbers in general.  However, if y is small
(less than a few times sqrt(sqrt(N)) it generates its result very
quickly.

As far as I know, Fermat's method is largely a historical curiosity.
I know of only one place where it has been used in a serious modern
algorithm.  The double prime variation of the multiple polynomial
quadratic sieve makes use of a large number of factorizations of
intermediate results known to contain only two prime factors, both of
which are of similiar size.  The PPMPQS implementation which Lenstra
and Manasse have employed to great effect in the last few years used
to use Pollard's rho method.  I replaced the rho with Fermat's, giving
a substantial increase in average speed for the intermediate
factorizations.  Some while afterwards, Peter Montgomery replaced
Fermat's with the SQUFOF algorithm which ran even faster.  The latest
variant, being used in the on-going RSA-129 project first uses SQUFOF
and then goes on to try ECM if that fails.

Paul
--
Paul Leyland <pcl@black.ox.ac.uk>        | Hanging on in quiet desperation is
Oxford University Computing Services     |     the English way.
13 Banbury Road, Oxford, OX2 6NN, UK     | The time is gone, the song is over.
Tel: +44-865-273200  Fax: +44-865-273275 | Thought I'd something more to say.
Finger pcl@black.ox.ac.uk for PGP key    |
