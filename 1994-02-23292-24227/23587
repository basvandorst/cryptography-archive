Path: msuinfo!caen!usenet.cis.ufl.edu!eng.ufl.edu!spool.mu.edu!howland.reston.ans.net!europa.eng.gtefsd.com!fs7.ece.cmu.edu!queens.ece.cmu.edu!mes
From: mes@queens.ece.cmu.edu (Mark Edward Stahl)
Newsgroups: sci.crypt
Subject: Re: RNG's
Date: 8 Feb 1994 23:30:07 GMT
Organization: Electrical and Computer Engineering, Carnegie Mellon
Lines: 47
Message-ID: <2j979v$nob@fs7.ece.cmu.edu>
References: <CKLKvL.77q@crash.cts.com> <neuhaus.760301318@bloch>
NNTP-Posting-Host: queens.ece.cmu.edu
Keywords: rng, prng

In article <neuhaus.760301318@bloch>,
Stephan Neuhaus (DA Sturm) <neuhaus@bloch.informatik.uni-kl.de> wrote:
>kephart@crash.cts.com (Wray Kephart) writes:
>
>>When a random 1 or 0 was required, you
>>read the serial port. WRONG! The chip output was random however there
>>existed a _slight_ difference between the rise and fall times of the buffer.
>>This gave the data a slight skew towards 1's (slower rise, faster fall).
>
>This is true, but you can still use this device to generate uniformly
>distributed random numbers.  The trick allegedly goes back to von
>Neumann.  He used it to get a completely unbiased decision out of a
>probably biased coin.  You simply read your serial line until you get
>two different bits in a row.  Then you map 01 -> 1 and 10 -> 0 or vice
>versa.  This *assumes* that the bits as read from the serial line are
>independent.  (Proof: Since the bits are independent, we have P(01) =
>P(0)*P(1) = P(10) and hence your decision is completely unbiased.)

I'm a little confused by this.  Take the example of the biased coin.
Under this scheme the result is totally dependent on the first result.
If on your first throw you get a zero, you just keep throwing
repeatedly until you get a one, then stop (result zero.)  You knew *as
soon as the first zero came up* that the final result had to be zero.
Same with the case if the number one comes up first.  A zero or one
final result is fixed by whether a zero or one occurs on the first
toss, which as we said, is biased.

However, look at two tosses, x1 and x2. Assume P(0)= p, P(1)=q=(1-p).
The following table covers all cases:

       X1
   X2 \   0    1
       +----+----+
     0 | pp | pq |
       +----+----+
     1 | pq | qq |
       +----+----+

The secret to getting competely unbiases results is to read two
samples.  If they are the same, THROW THEM AWAY AND READ TWO MORE
SAMPLES.  If they are different, then can you use the mapping to get a
final, unbiased result.  ( P(01) = P(10) = pq )

>Stephan <neuhaus@informatik.uni-kl.de>

Mark Stahl

