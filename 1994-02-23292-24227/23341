Path: msuinfo!netnews.upenn.edu!dsinc!spool.mu.edu!sgiblab!gatekeeper.us.oracle.com!oracle!unrepliable!bounce
Newsgroups: sci.crypt
From: rjenkins@uucp (Robert Jenkins)
Subject: Re: another secure PRNG
Message-ID: <1994Feb1.224122.278@oracle.us.oracle.com>
Sender: usenet@oracle.us.oracle.com (Oracle News Poster)
Nntp-Posting-Host: kr2seq.us.oracle.com
Organization: /usr/local/news/organization
References: <1994Jan29.061539.8870@oracle.us.oracle.com>
Date: Tue, 1 Feb 1994 22:41:22 GMT
X-Disclaimer: This message was written by an unauthenticated user
              at Oracle Corporation.  The opinions expressed are those
              of the user and not necessarily those of Oracle.
Lines: 48

In article <1994Jan29.061539.8870@oracle.us.oracle.com> rjenkins@us.oracle.com (Robert Jenkins) writes:
>How fast can secure pseudorandom number generators be?  Is there a 
>nontrivial lower bound on their complexity?  I bet there isn't ...
>
>
>#define ALPHA 7
>typedef  unsigned int  u4;         /* unsigned four bytes, 32 bits */
>
>void prng(m,r,a,b)      /* stuff (1<<ALPHA) random values into r[] */
>u4 *m; u4 *r; u4 a; u4 b;
>{
>  register u4 i,x,y,z;
...

Oops!  I meant to pass _a_ and _b_ by reference.  I copied it wrong
out of the program where I ran tests.  Sloppy, sloppy.  Corrected:


#define ALPHA 7
typedef  unsigned int  u4;         /* unsigned four bytes, 32 bits */

void prng(m,r,aa,bb)    /* stuff (1<<ALPHA) random values into r[] */
u4 *m; u4 *r; u4 *aa; u4 *bb;
{
  register u4 a,b,i,x,y,z;

  a = *aa;  b = *bb;
  for (i=0; i<(1<<ALPHA); ++i)
  {
    x = m[i];                               /* recycle every value */
    y = m[z = a >> (32-ALPHA)];         /* choose y pseudorandomly */
    a = (a << ALPHA) ^ z;             /* barrelshift  a  by  ALPHA */
    m[i] = a + b;                                 /* secret memory */
    a    = a + y;                                   /* accumulator */
    r[i] = b + y;                     /* results given to the user */
    b = x;  /* b will be the old m[i-1], which is no longer in m[] */
  }
  *bb = b;  *aa = a;
}


int main()                        /* produce a billion random bits */
{
  u4 i, a, b, m[1<<ALPHA], r[1<<ALPHA];
  a = b = 1;   for (i=0; i<(1<<ALPHA); ++i) m[i] = 0;      /* seed */
  for (i=0; i<(1000000000/(32*(1<<ALPHA))); ++i) prng(m,r,&a,&b);
}

