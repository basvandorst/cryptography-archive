Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!uknet!comlab.ox.ac.uk!pcl
From: pcl@foo.oucs.ox.ac.uk (Paul C Leyland)
Subject: Re: Factoring N=P*Q vs. general factoring
Message-ID: <PCL.94Feb24094644@foo.oucs.ox.ac.uk>
In-reply-to: pcl@foo.oucs.ox.ac.uk's message of 21 Feb 1994 11:47:01 GMT
References: <2jqpre$6j1@fbi-news.informatik.uni-dortmund.de> <2jt8ii$ioa@linus.mitre.org>
	<lou.761675381@cadence.com> <PCL.94Feb21114701@foo.oucs.ox.ac.uk>
Date: 24 Feb 1994 09:46:43 GMT
Lines: 28

In article <PCL.94Feb21114701@foo.oucs.ox.ac.uk> pcl@foo.oucs.ox.ac.uk (Paul C Leyland) writes:

   Bob omitted Fermat's factoring algorithm which does have the property you
   describe.  The algorithm runs something like the following:

	   To factor N, calculate  x =  int (sqrt (N)) + 1
	   form y = x^2 - N

	   while ( y is not a perfect square)
		   x = x + 1
		   y = x^2 - N

	   The factors of N are (x - y) / 2 and (x + y) / 2


Oh dear.  I meant, of course, that the factors are (x +/- sqrt(y))/2
 as should be obvious.  Fermat's method relies on the identity
x^2 - y^2 = (x + y)(x - y) and attempts to represent N as the difference
of two squares.


Paul
--
Paul Leyland <pcl@black.ox.ac.uk>        | Hanging on in quiet desperation is
Oxford University Computing Services     |     the English way.
13 Banbury Road, Oxford, OX2 6NN, UK     | The time is gone, the song is over.
Tel: +44-865-273200  Fax: +44-865-273275 | Thought I'd something more to say.
Finger pcl@black.ox.ac.uk for PGP key    |
