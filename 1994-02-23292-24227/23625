Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!swrinde!elroy.jpl.nasa.gov!decwrl!netcomsv!netcom.com!jktaber
From: jktaber@netcom.com (John K. Taber)
Subject: Re: another amateur cipher scheme...
Message-ID: <jktaberCKzrJM.KGv@netcom.com>
Organization: None, I'm disorganized
X-Newsreader: TIN [version 1.2 PL1]
References: <2j81vl$n80@cnn.MOTOWN.GE.COM>
Date: Thu, 10 Feb 1994 04:38:10 GMT
Lines: 53

Peter C. Bosch, X3549 (pbosch@epi042.gesd) wrote:
: Comments on viability of this crypto-algorithm?

[snipping description of vernam type pseudo-random byte generator
using a number of circular buffers all relatively prime to each other]	


: I don't need security from Governmental Onslaught, but simply from PC
: hackers, and maybe a crypto-knowledgeable layperson. ( I.E., no one's 
: gonna _pay_ anyone to break this... )

: ===========================================================================
:  Peter C. Bosch       |            "Lead, follow, or get out of the way!"
:  pbosch@motown.ge.com |  				
:  Martin Marietta      |                           cogito ergo disclaimus.
: ===========================================================================

Now here's a crypto system I think I understand.  I don't know its 
strength, but I suspect it is not as strong as we would like to think.

Several points for strength.  
1.  Don't repeat the key stream.  If you encrypt one message, start the
wheels where you left off from the last message.  Otherwise, if you
encrypt a few messages with the same keystream, it is readily solvable.

Keep a counter of how many bytes have been encrypted.  For the next
message, set each wheel by its modulus of the count.
  wheel3 = count (mod 3)
  wheel5 = count (mod 5) etc, etc
transmit the starting count as a header for each message.

2.  I assume the password wheel is to provide a changeable message key.
As you describe it, it's too weak, really just a simple substitution on
top of the cipher.

Your real key is the random bytes of the wheels.  Use the original key
to encrypt the message key byte by byte, and replace the original key
byte by byte with the encrypted output of the message key.  This is
very violent.  You'll get a temporary set of wheels dependent on the
message key.

3.  The byte counter applies to the temporary wheels.

4.  Be sure the original wheels are genuinely random.  No PRNG for these!

Now, it is intriguing to consider how to analyze this class of cipher.

Any ideas, anybody? 


-- 
John K. Taber                        jktaber@netcom.com
=======================================================
