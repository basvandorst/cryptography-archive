Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!swrinde!sgiblab!pacbell.com!att-out!cbnewsj!merckx!mab
From: mab@research.att.com (Matt Blaze)
Subject: Re: Is this scheme solid ?
Organization: AT&T
Date: Mon, 7 Feb 1994 13:46:52 GMT
Message-ID: <mab.760628812@merckx>
Originator: mab@merckx
References: <1994Feb6.135534.25250@cs.nott.ac.uk>
Sender: news@cbnewsj.cb.att.com (NetNews Administrator)
Nntp-Posting-Host: merckx.l1135.att.com
Lines: 46

asb@cs.nott.ac.uk (Andrew Brown) writes:

>I'm about to release for testing an encrypted file system for a
>certain free Unix, and would like to know if the implementation method
>that I have chosen could be improved before I release it.

Yeah, file encryption in a file system is a bit harder than it looks -
none of the 4 "standard" cipher modes has all the properties you need
(random access, hiding structure, etc.)

>I get the passphrase from the user (up to 1023 characters) and hash it
>with MD5. The resulting hash is used as the 128 bit IDEA key. I hash
>the passphrase again with MD4 and keep only 64 bits to use as an IV.
>Are there any problems here ? Would it help to iterate MD5 about
>10,000 times to slow down a brute force passphrase search ?

Although no one knows how to "reverse" either MD4 or MD5 to recover the
hashed text, by using both functions on the same keyphrase for two different
purposes you risk leaking key bits if someone can compromise either.  Best to
decouple your IV generation from your encryption key, especially since there
is usually nothing to be gained by keeping the IV secret.

Also, it's a bad idea to rely on constant-time slowdowns to thwart
brute-force attacks, since such slowdowns tend to disappear very
rapidly as technology advances or against a smart adversary who can
optimize them out.  128 bits of key is plenty in any case (and if it
isn't, adding a factor of 10000 to the key crunching isn't going to
make any difference).

>Each block in the fs (1024 bytes) is encrypted as an independent unit,
>using the key and IV generated above using IDEA in CBC mode. This
>means that identical blocks will encipher to identical ciphertext - is
>this a problem ?

Why not use something derived from the block's offset in the file plus a
unique file id (the inode number, creation time, etc) as the
block IV?   Or you could use a combination of stream and block cipher
modes, as I do in CFS.

CFS is a (mostly) freely available research prototype encrypting file system
for NFS-equipped Unix-like OSs.  Unfortunately, export restrictions prohibit
me from sending the code for it to the UK, but you can anon ftp papers that
describe it (and the encryption mode issues) from research.att.com in the
files /dist/mab/cfs.ps and /dist/mab/cfs.notes.ms .

-matt
