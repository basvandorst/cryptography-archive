%!PS-Adobe-2.0
%  
%  Dancing-Men
%
%  This is a Type 3 Adobe Postscript font.
%  It implements the cipher characters used by 
%  Arthur Conan Doyle in his Sherlock Holmes story,
%  "The Adventure of the Dancing Men".
%  8 of the 26 letters of the alphabet are missing
%  from the story & hence from the font.
%  Also, Doyle made two mistakes--the letter R is
%  miscoded in one place, and the letters P and V
%  have (nearly?) identical ciphertext.
%
%  Upper case is used by convention in this font 
%  for the characters holding the flags, used in the
%  cipher to denote end-of-word.
%
%  See the program dancecnv.c for a simple conversion
%  tool to convert ASCII text into a form usable by
%  this font.  (E.g., the output contains only the
%  18 letters used in the font.)
%
%  Mark Riordan   mrr@ripem.msu.edu   3 August 1993

% 2 linewidth

%--- procedure Trunk -------------------------------------------------
%
%  
/Trunk {
	500 400 moveto
	500 700 lineto
	stroke
	500 700 40 0 360 arc
	closepath
%	0 setgray
	fill
} def 

%--- procedure MoveToShoulder
/MoveToShoulder {
	500 550 moveto 
} def

%--- procedure MoveToHip
/MoveToHip {
	500 400 moveto
} def

%--- procedure ArmDiagLf
%
% 
/ArmDiagLf {
	MoveToShoulder
	-180 130 rlineto
	stroke
} def

%--- procedure ArmDiagRt
/ArmDiagRt {
	gsave
	-1 1 scale
	SquareSize neg 0 translate
	ArmDiagLf
	grestore
} def

%--- procedure ArmSquareLf
/ArmSquareLf {
	MoveToShoulder
	-180 0 rlineto
	0 160 rlineto
	stroke
} def

%--- procedure ArmSquareRt
/ArmSquareRt {
	gsave
	-1 1 scale
	SquareSize neg 0 translate
	ArmSquareLf
	grestore
} def

%--- procedure ArmTriangLf
/ArmTriangLf {
	MoveToShoulder
	-110 -25 rlineto
	110 -125 rlineto
	stroke
} def

%--- procedure ArmTriangRt
/ArmTriangRt {
	gsave
	-1 1 scale
	SquareSize neg 0 translate
	ArmTriangLf
	grestore
} def

%--- procedure FlagDiagLf
/FlagDiagLf {
%	Rot
	MoveToShoulder
	-180 130 rmoveto
	0 160 rlineto
	-85 0 rlineto
	0 -60 rlineto
	85 0  rlineto
	stroke
%	Endrot
} def

%--- procedure FlagDiagRt
/FlagDiagRt {
%	Rot
	gsave
	-1 1 scale
	SquareSize neg 0 translate
	FlagDiagLf
	grestore
%	Endrot
} def

%--- procedure FlagSquareLf
/FlagSquareLf {
	MoveToShoulder
	-180 130 rmoveto
	0 160 rlineto
	-85 0 rlineto
	0 -60 rlineto
	85 0  rlineto
	stroke
} def

%--- procedure FlagSquareRt
/FlagSquareRt {
	gsave
	-1 1 scale
	SquareSize neg 0 translate
	FlagSquareLf
	grestore
} def

%--- procedure FlagNoneRt
/FlagNoneRt {
	MoveToShoulder
	100 130 rmoveto
	0 160 rlineto
	85 0 rlineto
	0 -60 rlineto
	-85 0  rlineto
	stroke
} def


%--- procedure LegDiagLf
/LegDiagLf {
	MoveToHip
	-130 -240 rlineto
	-60 30 rlineto
	stroke
} def

%--- procedure LegDiagRt
/LegDiagRt {
	gsave
	-1 1 scale
	SquareSize neg 0 translate
	LegDiagLf
	grestore
} def
	
%--- procedure LegStraightLf
/LegStraightLf {
	MoveToHip
	0 -240 rlineto
	-70 0 rlineto
	stroke
} def

%--- procedure LegStraightRt
/LegStraightRt {
	gsave
	-1 1 scale
	SquareSize neg 0 translate
	LegStraightLf
	grestore
} def

%--- procedure LegBentLf
/LegBentLf {
	MoveToHip
	-150 -70 rlineto
	80 -160 rlineto
	-70 -30 rlineto
	stroke
} def

%--- procedure LegBentRt
/LegBentRt {
	gsave
	-1 1 scale
	SquareSize neg 0 translate
	LegBentLf
	grestore
} def

%--- procedure LegOutLf
/LegOutLf {
	MoveToHip
	-180 0 rlineto
	0 70 rlineto
	stroke
} def

%--- procedure LegOutRt
/LegOutRt {
	gsave
	-1 1 scale
	SquareSize neg 0 translate
	LegOutLf
	grestore
} def



%--- procedure Advance
/Advance {
	SquareSize 0 translate 
} def

%--- procedure Rot
/Rot {
	gsave
	-6 rotate
%	-16 rotate
	28 setlinewidth
} def

%--- procedure Endrot
/Endrot {
	grestore
} def

%--- procedure r
/r {
	(dance.ps) run
} def

%--- procedure ShowChar
/ShowChar {
%	500 -90 moveto show
	pop
} def

/SquareSize 1000 def

/Return {
%	grestore
	0 -120 translate
	0 0 moveto
%	gsave
} def

/DMa {
%	Rot
	Trunk ArmDiagLf ArmDiagRt LegStraightLf LegBentRt
%	Endrot
	(a) ShowChar
} def

/DMb {
	Trunk LegBentLf LegBentRt
	(b) ShowChar
} def

/DMc {
	Trunk ArmDiagLf LegBentLf LegBentRt
	(c) ShowChar
} def

/DMd {
	gsave
	1 -1 scale
	SquareSize neg 0.0 mul SquareSize 0.9 mul neg translate
	Trunk ArmDiagRt LegDiagLf LegDiagRt
	grestore
	(d) ShowChar
} def

/DMe {
	Trunk ArmDiagLf ArmDiagRt LegDiagLf LegDiagRt
	(e) ShowChar
} def

/DMg {
	gsave
	1 -1 scale
	SquareSize neg 0.0 mul SquareSize 0.9 mul neg translate
	Trunk ArmDiagLf LegDiagLf LegDiagRt
	grestore
	(g) ShowChar
} def

/DMh {
	Trunk ArmDiagLf ArmDiagRt 
	MoveToHip
	0 -200 rlineto
	-70 -40 rlineto
	70 40 rmoveto
	70 -40 rlineto
	stroke
	(h) ShowChar
} def

/DMi {
	Trunk ArmDiagLf ArmDiagRt LegOutLf LegStraightRt
	(i) ShowChar
} def

/DMl {
	Trunk ArmSquareLf ArmTriangRt LegBentLf LegBentRt
	(l) ShowChar
} def

/DMm {
	Trunk ArmDiagLf ArmDiagRt LegBentLf LegBentRt
	(m) ShowChar
} def

/DMn {
	Trunk ArmTriangLf ArmDiagRt LegBentLf LegBentRt
	(n) ShowChar
} def

/DMo {
	Trunk ArmDiagLf ArmDiagRt LegBentLf LegStraightRt
	(o) ShowChar
} def

/DMp {
	Trunk LegOutLf LegStraightRt
	(p) ShowChar
} def

/DMr {
	Trunk ArmDiagLf ArmDiagRt LegStraightLf LegOutRt
	(r) ShowChar
} def

/DMs {
	Trunk ArmSquareLf ArmSquareRt LegBentLf LegBentRt
	(s) ShowChar
} def

/DMt {
	gsave
	1 -1 scale
	SquareSize neg 0.0 mul SquareSize 0.9 mul neg translate
	Trunk ArmDiagLf ArmDiagRt LegDiagLf LegDiagRt
	grestore
	(t) ShowChar
} def

/DMv {
	Trunk LegStraightRt
%	MoveToHip
	500 450 moveto
	-200 0 rlineto
	-28 70 rlineto
	stroke
	(v) ShowChar
} def

/DMy {
	Trunk ArmDiagRt LegBentLf LegBentRt
	(y) ShowChar
} def

%--- Font definition ---------------------------------------------
12 dict
begin
	/FontName /Dancing-Men def
	/FontType 3 def
	/FontBBox [ 0 0 0 0 ] def
	/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
	/Encoding 256 array def
		0 1 255 {
			Encoding exch /Dsp put
		} for
		Encoding (a) 0 get /Da put
		Encoding (b) 0 get /Db put
		Encoding (c) 0 get /Dc put
		Encoding (d) 0 get /Dd put
		Encoding (e) 0 get /De put
		Encoding (g) 0 get /Dg put
		Encoding (h) 0 get /Dh put
		Encoding (i) 0 get /Di put
		Encoding (l) 0 get /Dl put
		Encoding (m) 0 get /Dm put
		Encoding (n) 0 get /Dn put
		Encoding (o) 0 get /Do put
		Encoding (p) 0 get /Dp put
		Encoding (r) 0 get /Dr put
		Encoding (s) 0 get /Ds put
		Encoding (t) 0 get /Dt put
		Encoding (v) 0 get /Dv put
		Encoding (y) 0 get /Dy put
		Encoding (A) 0 get /DA put
		Encoding (B) 0 get /DB put
		Encoding (C) 0 get /DC put
		Encoding (D) 0 get /DD put
		Encoding (E) 0 get /DE put
		Encoding (G) 0 get /DG put
		Encoding (H) 0 get /DH put
		Encoding (I) 0 get /DI put
		Encoding (L) 0 get /DL put
		Encoding (M) 0 get /DM put
		Encoding (N) 0 get /DN put
		Encoding (O) 0 get /DO put
		Encoding (P) 0 get /DP put
		Encoding (R) 0 get /DR put
		Encoding (S) 0 get /DS put
		Encoding (T) 0 get /DT put
		Encoding (V) 0 get /DV put
		Encoding (Y) 0 get /DY put
%	/BoundingBoxes 53 dict def
%		BoundingBoxes begin
%			/.notdef { 0 0 0 0 } def
%			/Da { 0 0 1000 1000 } def
%			/Db { 0 0 1000 1000 } def
%		end
%	/Metrics 53 dict def
%		Metrics begin
%			/.notdef 0 def
%			/Da 1000 def
%			/Db 1000 def
%		end
	/UniqueID 1 def
	/CharProcs 53 dict def
	CharProcs begin
%=== Definitions of Characters ====================================
/Dsp {
} def

/Da {
	Rot DMa Endrot
} def

/Db {
	Rot DMb Endrot
} def

/Dc {
	Rot DMc Endrot
} def

/Dd {
	Rot DMd Endrot
} def

/De {
	Rot DMe Endrot
} def

/Dg {
	Rot DMg Endrot
} def

/Dh {
	Rot DMh Endrot
} def

/Di {
	Rot DMi Endrot
} def

/Dl {
	Rot DMl Endrot
} def

/Dm {
	Rot DMm Endrot
} def

/Dn {
	Rot DMn Endrot
} def

/Do {
	Rot DMo Endrot
} def

/Dp {
	Rot DMp Endrot
} def

/Dr {
	Rot DMr Endrot
} def

/Ds {
	Rot DMs Endrot
} def

/Dt {
	Rot DMt Endrot
} def

/Dv {
	Rot DMv Endrot
} def

/Dy {
	Rot DMy Endrot
} def

/DA {
	Rot
	DMa
	FlagDiagRt
	Endrot
} def

/DB {
	Rot DMb FlagNoneRt Endrot
} def

/DC {
	Rot DMc FlagDiagLf Endrot
} def

/DD {
	Rot DMd 
	1 -1 scale
	SquareSize neg 0.0 mul SquareSize 0.9 mul neg translate
	FlagDiagRt
	Endrot
} def

/DE {
	Rot DMe FlagDiagRt Endrot
} def

/DG {
	Rot DMg 
	1 -1 scale
	SquareSize neg 0.0 mul SquareSize 0.9 mul neg translate
	FlagDiagLf
	Endrot
} def

/DH {
	Rot DMh FlagDiagRt
	Endrot
} def

/DI {
	Rot DMi FlagDiagRt Endrot
} def

/DL {
	Rot DMl FlagSquareLf Endrot
} def

/DM {
	Rot DMm FlagDiagRt Endrot
} def

/DN {
	Rot DMn FlagDiagRt Endrot
} def

/DO {
	Rot DMo FlagDiagRt Endrot
} def

/DP {
	Rot DMp FlagNoneRt Endrot
} def

/DR {
	Rot DMr FlagDiagRt Endrot
} def

/DS {
	Rot DMs FlagSquareRt Endrot
} def

/DT {
	Rot DMt 	1 -1 scale
	SquareSize neg 0.0 mul SquareSize 0.9 mul neg translate
	FlagDiagRt
	Endrot
} def

/DV {
	Rot DMv FlagNoneRt Endrot
} def

/DY {
	Rot DMy FlagDiagRt Endrot
} def

%=== End Definitions of Characters ===============================
	end  % definition of CharProcs
	/BuildGlyph {
		exch
		begin
			600 0 0 0 1000 1000 setcachedevice
			CharProcs exch get
			exec
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		
%			dup
%			Metrics
%			exch get
%			0
%			2 index
%			BoundingBoxes
%			exch get exec
%			setcachedevice
%			CharProcs exch get
%			exec
			
		end
	} def

	currentdict
end
/Dancing-Men exch definefont
pop

%--- end Font definition -----------------------------------------

%--- Cut Here unless you want the test page ----------------


%0.15 0.15 scale
%18 setlinewidth
%0 4300 translate
%3 setlinewidth

40 680 translate
0 0 moveto
gsave

/Dancing-Men findfont
80 scalefont
setfont


(abcdefghij) show
Return
(klmnopqrst) show
Return
(uvwxyz) show
Return
(ABCDEFGHIJ) show
Return
(KLMNOPQRST) show
Return
(UVWXYZ) show
Return

/Dancing-Men findfont
34 scalefont
setfont

%40 480 moveto
(abcdefghijklmnopqrstuvwxyz) show

grestore

/Courier findfont
80 scalefont
setfont

20 -50 moveto
(abcdefghij) show
Return
20 -50 translate
0 0 moveto
(klmnopqrst) show
Return 
0 -10 translate
(uvwxyz) show
Return
0 10 translate
0 0 moveto
(ABCDEFGHIJ) show
Return
0 0 translate
(KLMNOPQRST) show
Return
0 0 translate
(UVWXYZ) show

/Times-Italic findfont
10 scalefont
setfont
(      Mark Riordan  3 August 1993) show

showpage

