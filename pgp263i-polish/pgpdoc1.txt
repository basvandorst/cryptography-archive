----------------------------------------------------------------------------
Podrêcznik PGP(tm), czê¶æ pierwsza: "Podstawy obs³ugi"

Polskie znaki: ISO-8859/2 (ISO-Latin/2) w oryginalnej dystrybucji

Ta wersja podrêcznika zosta³a napisana dla PGP 2.6.2i, ale jest ona równie¿
odpowiednia dla wersji 2.6.3. Opis ró¿nic miêdzy PGP 2.6.2 i 2.6.3 znajdziesz
w pliku "czytaj.263".
----------------------------------------------------------------------------


                          Phil's Pretty Good Software
                                  przedstawia




                                    =======
                                    PGP(tm)
                                    =======

                            Pretty Good(tm) Privacy

                                     czyli

                         kryptografia publiczna dla mas





                         ------------------------------
                         PGP(tm) Podrêcznik U¿ytkownika
                           Czê¶æ I: Podstawy obs³ugi
                         ------------------------------

                    autorstwa Philipa Zimmermanna (31.10.94)
                           t³umaczenie Pawe³ Krawczyk
                          korekta Janusz B. Wi¶niewski

                      PGP w wersji 2.6.2 - 30 wrze¶nia 94
             Program autorstwa Philipa Zimmermanna, i wielu innych

***
W skrócie: PGP(tm) jest programem zapewniaj±cym zaawansowan± ochronê
poczty elektronicznej (email) i danych przy wykorzystaniu kryptografii
z kluczem publicznym. Pozwala na bezpieczn± wymianê informacji z lud¼mi,
których nie musisz znaæ osobi¶cie, bez potrzeby utrzymywania specjalnych
kana³ów ³±czno¶ci do wymiany kluczy. PGP jest szybkie, ergonomiczne oraz
posiada bogaty zestaw funcji zarz±dzania kluczami, podpisami cyfrowymi
i kompresj± danych.
***

Program i dokumentacja (c) copyright 1990-1994 Philip Zimmermann.
Wszelkie prawa zastrze¿one. Informacje nt. licencji, dystrybucji, praw
autorskich, patentów, znaków towarowych, zastrze¿eñ wykorzystania
i eksportu zamieszczone s± w rozdziale "Kwestie prawne" drugiej czê¶ci
podrêcznika. Dystrybucj± PGP zajmuje siê Massachusetts Institute of
Technology.

T³umaczenie dokumentacji i komunikatów PGP za zgod± Autora, Philipa Zimmermana.
Polska wersja jêzykowa PGP copyright 1995-96 by Pawe³ Krawczyk.
Zabronione jest wprowadzanie jakichkolwiek zmian w jakimkolwiek pliku nale¿±cym
do polskiej wersji PGP bez pisemnej zgody autora. Jedyn± dopuszczaln±
(i wskazan±) zmian± jest konwersja standardów polskich znaków. Zabroniona jest
sprzeda¿ pakietu i nale¿±cych do niego plików bez zgody autora przek³adu.

Motto:
"Ma³o znaczy wszystko co robisz, ale bardzo wa¿ne jest by¶ to zrobi³ w ogóle"
                                                Mahatma Gandhi

Spis tre¶ci
===========
Przedmowa do wersji polskiej
Wstêp
Po co mi PGP?
Jak to dzia³a?
Instalacja
U¿ytkowanie
   ¦ci±gawka podstawowych komend
   Szyfrowanie listu
   Szyfrowanie listu dla wielu odbiorców
   Cyfrowy podpis (sygnowanie listu)
   Podpis i szyfrowanie
   U¿ywanie konwencjonalnej kryptografii
   Rozszyfrowywanie i sprawdzanie sygnatur
   Zarz±dzanie kluczami
      Generowanie klucza RSA
      Dodawanie klucza do bazy
      Usuwanie kluczy lub identyfikatorów z bazy
      Kopiowanie klucza z bazy
      Przegl±danie zawarto¶ci bazy
      Jak chroniæ klucz publiczny przed sfa³szowaniem?
      Jak PGP sprawdza wiarygodno¶æ kluczy?
      Jak chroniæ klucz tajny przed ujawnieniem?
      Uniewa¿nianie klucza publicznego
      Co zrobiæ w razie utraty klucza prywatnego?
Tematy zaawansowane
   Przesy³anie kryptogramów e-mailem: opakowanie ASCII
   Zmienne ¶rodowiskowe
   Konfiguracja PGP: plik CONFIG.TXT
S³abe punkty
O z³udnym poczuciu bezpieczeñstwa
Do u¿ytkowników Macintosha
Krótki przegl±d poleceñ PGP
Kwestie prawne
Podziêkowania
O Autorze


Przedmowa do wersji polskiej
============================

Wstêp
-----

PGP jest u nas dobrze znane i u¿ywane, jednak dla osób s³abo lub w ogóle
nie znaj±cych jêzyka angielskiego powa¿n± barier± mo¿e byæ ca³kowita
anglojêzyczno¶æ PGP. Równocze¶nie dla zapewnienia sobie rzeczywistego,
a nie z³udnego bezpieczeñstwa potrzebne jest zrozumienie podstawowych zasad
dzia³ania tego systemu. Na nic zaawansowane technologie szyfrowania, je¶li
pozwolisz by Twój klucz dosta³ siê w niepowo³ane rêce, lub pope³nisz inny,
równie prosty do pope³nienia b³±d.

Idea kryptografii publicznej nie jest nowa, ale dopiero PGP umo¿liwia jej
tak powszechne zastosowanie, "kryptografia publiczna dla mas", tak bowiem
brzmi jego podtytu³. PGP jest do tego programem freeware, co znaczy ¿e za
jego u¿ywanie i dystrybucjê prywatny u¿ytkownik nie musi _nic_ p³aciæ.
(szczegó³y licencji zawarte s± w za³±czonych dokumentach).

Instalacja
----------

Ze wzglêdów technicznych dystrybucjê spolszczonej wersji prowadzê
w dwóch wersjach, podobnie jak prowadzona jest dystrybucja samego PGP -
w pakiecie dla DOSa i Unixów.

Szczegó³y instalacji polskiej wersji znajdziesz w plikach !CZYTAJ.!PL
(DOS) lub INSTALACJA (UNIX).

Uwagi do przek³adu
------------------

T³umacz przyznaje, ¿e nie jest ekspertem w sprawach matematyki dyskretnej
i kryptografii (co nie znaczy ¿e nie ma o nich pojêcia), niemniej
stara³ siê zapewniæ w miarê jednolite, sensowne i niezbyt sztuczne s³ownictwo.

Ka¿da propozycja i uwaga bêdzie mile widziana, oraz zostanie uwzglêdniona
w kolejnych wydaniach, nastêpuj±cych równolegle z pojawianiem siê nowych
wersji PGP. Proszê pisaæ na adresy:

kravietz@pipeta.chemia.pk.edu.pl (email)
Pawe³ Krawczyk, 2:486/18.4       (FidoNet)

Osoby zainteresowane mog± otrzymywaæ informacje o nowych wersjach, dodatkach
i innych sprawach zwi±zanych z PGP. Wystarczy wys³aæ na mój adres (podany
powy¿ej) pusty list z dopiskiem w linii Subj: "sub PGP".

Najnowsz± wersjê pakietu mo¿na zawsze znale¼æ w archiwum FTP pod adresem
ftp://pipeta.chemia.pk.edu.pl/pub/pgp. Tam równie¿ mo¿na znale¿æ najnowsz±
wersjê PGP i innych przydatnych programów maj±cych zwi±zek z kryptografi±.

Uwagi t³umacza, który równie¿ musia³ odwalaæ robotê redaktora, s±
umieszczone w tek¶cie w [nawiasach z dopiskiem -PK].

Za pomoc w t³umaczeniu i korektê dziêkujê serdecznie Januszowi B. Wi¶niewskiemu
(2:486/22.5@fidonet). Jego uwagi maj± dopisek [-JBW].

W trakcie prac nad polskimi komunikatami nasz zespó³ powiêkszy³ siê o kilka
osób. S± to:

        Radoslaw Konrad Cetra <newartec@cksr.ac.bialystok.pl>,
        Boguslaw Chomienia <bugi@ettc.uw.bialystok.pl> i
        Kamil Iskra <iskra@student.uci.agh.edu.pl>

Radek jest równie¿ autorem polskojêzycznego pakietu dla Amigi, który jest
w przygotowaniu.

W obecnej chwili druga czê¶æ dokumentacji PGP nie jest jeszcze
dostêpna, g³ównie ze wzglêdu na przera¿aj±c± objêto¶æ ;). Mimo ¿e co
ciekawsze rozdzia³y s± w trakcie t³umaczenia, raczej nie spodziewamy
siê spolszczenia ca³o¶ci. Mam nadziejê ¿e t³umaczenie pierwszej -
podstawowej - czê¶ci podrêcznika swój cel popularyzatorski osi±gnê³o.
Osobom zainteresowanym dok³adniejszym poznaniem PGP chyba starczy na tyle
wytrwa³o¶ci, by czytaæ drug± czê¶æ po angielsku.


Wstêp
=====
Pretty Good(tm) Privacy (PGP), produkt Phil's Pretty Good Software, jest
zaawansowanym systemem kryptograficznym przeznaczonym dla systemów
MSDOS, Unix, VAX/VMS i innych. PGP pozwala na wygodn± wymianê plików lub
listów z zapewnieniem prywatno¶ci i wiarygodno¶ci. Prywatno¶æ w tym przypadku
oznacza, ¿e przeczytaæ dany list bêd± mog³y tylko osoby dla których bêdzie on
przeznaczony. Wiarygodno¶æ autorstwa listu gwarantuj± techniki "podpisu
cyfrowego".

Wygoda u¿ywania PGP to brak utrudnieñ wystêpuj±cych przy pracy
z konwencjonalnym oprogramowaniem kryptograficznym, zwi±zanych z zarz±dzaniem
kluczami. Do wymiany kluczy nie nie s± wymagane specjalne, bezpieczne kana³y
³±czno¶ci. Dzieje siê tak dziêki wykorzystaniu w PGP nowej i potê¿nej
technologii zwanej kryptografi± publiczn±.

PGP ³±czy wygodê systemu publicznego Rivest-Shamir-Adleman (RSA) z szybko¶ci±
tradycyjnej kryptografii, mechanizmami autoryzacji tekstów (podpisu cyfrowego),
kompresj± danych przed szyfrowaniem, ergonomicznym wykonaniem i wreszcie
zaawansowan± filozofi± zarz±dzania kluczami. Co wiêcej, PGP przeprowadza
wszystkie te operacje szybciej ni¿ wiêkszo¶æ innych implementacji tego
typu. PGP jest systemem dla wszystkich.

PGP nie posiada funkcji komunikacji modemowej itp. Do tego celu musisz
u¿ywaæ odrêbnych programów. [PGP jako takie nie jest równie¿ programem
do obs³ugi poczty elektronicznej; za to wiele takich programów przewiduje
mo¿liwo¶æ jego pod³±czenia, np. GoldED, elm-pgp; istnieje równie¿ specjalny
interfejs dla programów pracuj±cych w Windows (Eudora, Pegasus) zwany Private
Idaho -PK]

Pierwsza czê¶æ podrêcznika PGP pt. "Podstawy obs³ugi", omawia pokrótce g³ówne
opcje; powinien zapoznaæ siê z ni± ka¿dy u¿ytkownik.

W czê¶ci II pt. "Tematy szczegó³owe" opisane s± dok³adnie wszystkie oferowane
przez PGP funkcje i zastosowania. Przeznaczona jest przede wszystkim dla osób
pragn±cych szerzej poznaæ i wykorzystaæ PGP. Opis techniczny zastosowanych
algorytmów i formatów danych jest zawarty w odrêbnym dokumencie.


Po co mi PGP?
=============
PGP jest prywatne. PGP jest osobiste. Nie jest czê¶ci± ¿adnej inwestycji
ani kampanii, nale¿y tylko do Ciebie. Mo¿esz prowadziæ kampaniê polityczn±,
krytykowaæ podatki, uprawiaæ seks pozama³¿eñski lub robiæ co¶, co jest
niezgodne z prawem (pomimo ¿e w Twoim odczuciu nies³usznie). Cokolwiek by to
by³o, na pewno nie chcia³by¶, by Twoja prywatna poczta elektroniczna by³a
czytana przez kogo¶ innego. Nie ma nic z³ego w zapewnianiu sobie prywatno¶ci.
Prywatno¶æ jest jedn± z podstawowych zasad Konstytucji.

Byæ mo¿e s±dzisz, ¿e skoro Twój e-mail jest ca³kiem legalny, to nie ma
potrzeby stosowania kryptografii. Ale nawet je¶li jeste¶ przestrzegaj±cym
prawa obywatelem, to dlaczego wk³adasz list do koperty przed wys³aniem,
a nie piszesz na kartkach pocztowych? Dlaczego nie zgadzasz siê na
regularne testy na zawarto¶æ narkotyków w organizmie? [na razie jest to
paranoja dotycz±ca tylko czê¶ci amerykañskich pracowników -PK]
Dlaczego w³a¶ciwie wymagasz od policji nakazu rewizji, zanim przeszuka
Twoje mieszkanie? Czy¿by¶ co¶ ukrywa³? Czy tylko wywrotowcy i handlarze
narkotyków wk³adaj± listy do kopert? Czy te¿ paranoicy, trapieni mani±
prze¶ladowcz±. Czy praworz±dny obywatel ma jakiekolwiek uzasadnienie dla
szyfrowania swojej poczty elektronicznej?

Wyobra¼my sobie spo³eczeñstwo, w którym wszyscy prawowici obywatele
pisaliby listy na kartkach pocztowych. Gdyby jaki¶ odwa¿ny "dziwak"
próbowa³ zapewniæ sobie prywatno¶æ przy pomocy koperty, na pewno
wzbudzi³oby to podejrzenia. Byæ mo¿e nawet w³adze posunê³y by siê do
otwarcia koperty, w celu zbadania co te¿ mia³ ów cz³owiek do ukrycia.
Na szczê¶cie, nie zyjemy w takim spo³eczeñstwie, i przesy³anie listów
w kopertach jest rzecz± normaln±. Analogicznie, nie powinno wzbudzaæ
niczyich podejrzeñ przesy³anie e-mailu, legalnego czy nie, pod os³on±
szyfru. My¶l o tym, jak o formie solidarno¶ci spo³ecznej.

W obecnych czasach rz±d chc±c mieæ wgl±d w prywatne sprawy zwyk³ych
obywateli, musi ponie¶æ pewne wydatki, na przyk³ad na czajniki do
otwierania listów nad par±, pods³uch rozmów telefonicznych oraz
zbieranie i segregacjê uzyskanych tak informacji. Te tradycyjne metody
kontroli informacji nie op³acaj± siê na wiêksz± skalê..
Jednak obecnie poczta elektroniczna w znacz±cym stopniu zastêpuje
tradycyjne metody komunikacji. Równocze¶nie jest ona niezwykle ³atwa do
kontrolowania - e-mail mo¿na przegl±daæ w skali masowej ca³kiem automatycznie,
i w sposób niewidoczny dla adresata wynajdywaæ interesuj±cyce s³owa
kluczowe. Nie jest to pie¶ñ przysz³o¶ci - ju¿ obecnie miêdzynarodowa
wymiana poczty jest kontrolowana przez NSA [National Security Agency,
amerykañski odpowiednik naszego UOP -PK].

Zmierzamy szybko w stronê przysz³o¶ci, w której ca³e spo³eczeñstwo bêdzie
po³±czone pajêczyn± szybkich, ¶wiat³owodowych sieci komputerowych.
E-mail bêdzie czym¶ tak oczywistym, jak dzisiaj pocztówka czy telefon.
W³adze bêd± chroniæ nasze informacje szyframi najwy¿szej jako¶ci,
zaprojektowanymi przez pañstwowych specjalistów. Wiêkszo¶ci bêdzie
to odpowiadaæ. Ale z pewno¶ci± du¿a grupa ludzi bêdziê wola³a chroniæ
swoje dane na w³asn± rêkê.

Projekt ustawy o zapobieganiu przestêpczo¶æi z roku 1991 zawiera jeden
element, który mo¿e byæ znacz±cym krokiem w kierunku naruszania prywatno¶ci.
Je¶li sta³by siê on prawomocnym, zmusi³by wszystkich wytwórców sprzêtu
i oprogramowania szyfruj±cego do umieszczania w swoich wyrobach "pluskiew",
które pozwoli³y by na rozszyfrowanie wiadomo¶ci przez "uprawnione
osoby" w "uzasadnionych przypadkach". Projekt ten zosta³ zarzucony po
zdecydowanych protestach ze strony spo³eczeñstwa i kó³ przemys³owych.

Z kolei w roku 1992 FBI przedstawi³a Kongresowi Stanów Zjednoczonych
projekt ustawy o pods³uchu w telefonii cyfrowej [która zdobywa coraz
wiêksz± popularno¶æ, np. jako ISDN -PK].  Wed³ug projektu, ka¿dy nowy
telefon, faks czy modem pracuj±cy na ³±czach cyfrowych musia³by posiadaæ
wbudowane odpowiednie wyj¶cia, umo¿liwiaj±ce zdalny pods³uch agentom
FBI. Mimo ¿e projekt ten nie uzyska³ akceptacji w Kongresie, zosta³
ponownie przedstawiony dwa lata po¼niej.

Najbardziej alarmuj±cy jest fakt przyjêcia przez Bia³y Dom nowej ustawy,
przedstawionej przez NSA 16 kwietnia 1993 roku. Jej "bohaterem" jest
uk³ad scalony o nazwie "Clipper", implementuj±cy nowy, ¶ci¶le tajny algorytm
szyfrowania zaprojektowany przez NSA. Rz±d, zachêcaj±c producentów sprzêtu
komunikacyjnego do u¿ywania Clippera w ich urz±dzeniach, bêdzie równocze¶nie
posiada³ kopiê ka¿dego unikalnego klucza szyfruj±cego dane. Mimo to, nie ma
siê czego baæ, w³adze zapewniaj± ¿e prywatne dane bêd± czytane tylko wtedy,
gdy bêdzie to potrzebne. Jednak nastêpnym logicznym krokiem do zapewnienia
ca³kowitej skuteczno¶æi idei Clippera by³aby delegalizacja innych form
kryptografii!

Je¶li kryptografia by³aby przestêpstwem, to tylko przestêpcy mieliby zapewnion±
prawdziw± prywatno¶æ, bo o ile agencje wywiadowcze dysponuj± doskona³ymi
technologiami kryptograficznymi, to dysponuj± nimi równie¿ wielcy handlarze
broni± czy narkotykami, tak samo jak i wielkie, legalne korporacje. Normalni
obywatele i organizacje polityczne zwykle nie mog± sobie pozwoliæ na
zaawansowane technologie szyfrowania. A raczej nie mogli - do niedawna...

PGP oddaje prawo do prywatno¶ci, nale¿ne ka¿demu cz³owiekowi, w jego w³asne
rêce. Czu³em wzrastaj±ce spo³eczne zapotrzebowanie na nie. Dlatego te¿
napisa³em ten program.


Jak to dzia³a?
==============
Doskonale siê sk³ada, je¶li masz pewne podstawowe wiadomo¶ci na temat
kryptografii, a w szczególno¶ci kryptografii publicznej. Tak, czy inaczej,
poni¿ej wyja¶niê kilka podstawowych terminów zwi±zanych z kryptografi±.

Przyjmijmy, ¿e chcê napisaæ do Ciebie list, tak by nie móg³ go przeczytaæ nikt
poza Tob±. W tym celu szyfrujê go, tzn. przepuszczam przez przez
tak beznadziejnie skomplikowany, ale dzia³aj±cy wed³ug okre¶lonego
KLUCZA algorytm, by nie posiadaj±c _tego samego_ klucza, nie mo¿na by³o
doprowadziæ listu do pierwotnej postaci (rozszyfrowaæ). Tak przynajmniej
dzia³a konwencjonalna kryptografia "z jednym kluczem".

W konwencjonalnych systemach kryptograficznych, jak np. DES [u¿yw. np.
w Norton DISKREET -PK] ten sam klucz jest u¿ywany i do szyfrowania,
i od deszyfrowania. Oznacza to, ¿e klucz ten musi byc dostarczony do
adresata sposób, wykluczaj±cy ujawnienie osobom trzecim. Jest w tej metodzie
pewna niekonsekwencja - po co w takim razie szyfr, skoro i tak musi znale¼æ
siê sposób na bezpieczne przekazanie klucza?

W systemach kryptografii publicznej, ka¿dy z u¿ytkowników posiada _dwa_
klucze - publiczny, udostêpniany wszystkim, i prywatny (tajny), przechowywany
pieczo³owicie tylko przez w³a¶ciciela. Na podstawie znajomo¶ci klucza
publicznego, nie mo¿na odtworzyæ klucz prywatnego, i na odwrót.
Taki uk³ad wyklucza niebezpieczeñstwo przesy³ania przez publiczne sieci
komputerowe przesy³ania jakichkolwiek danych, umo¿liwiaj±cych dostêp do
listu osobom niepowo³anym.

Klucz publiczny s³u¿y do szyfrowania wiadomo¶ci, która jednak mo¿e byæ
rozszyfrowana tylko przy u¿yciu odpowiedniego klucza prywatnego. Klucz
publiczny i prywatny danego u¿ytkownika stanowi± unikaln± parê, tak ¿e nawet
osoba szyfruj±ca list czyim¶ kluczem publicznym nie mo¿e go przeczytaæ.

Unikalno¶æ kluczy pozwala równie¿ na autoryzacjê listów. Jest to mo¿liwe
wówczas gdy w procesie szyfrowania zostanie wykorzystany klucz prywatny,
który niejako "podpisuje" tekst wiadomo¶ci. Taki cyfrowy podpis (sygnatura)
pozwala nam upewniæ siê co do dwóch rzeczy: ¿e list pochodzi w rzeczywisto¶ci
od tej osoby od której wydaje siê pochodziæ, oraz ¿e dotar³ do nas w formie
niezmienionej. Zmiana zawarto¶ci listu i pó¼niejsze uzupe³nienie sygnatury
nie jest mo¿liwe.

Obydwie funkcje mog± byæ ³±czone: list najpierw jest podpisywany kluczem
prywatnym nadawcy, a potem szyfrowany kluczem publicznym odbiorcy.
Adresat odwraca kolejno¶æ przez rozszyfrowanie listu (swoim kluczem
prywatnym), a nastêpnie sprawdzenie zgodno¶ci sygnatury z kluczem
publicznym domniemanego autora. Obydwa kroki s± oczywi¶cie wykonywane
automatycznie przez program.

Dla zwiêkszenia szybko¶ci dzia³ania do¶æ wolnego algorytmu szyfrowania
kluczem publicznym zosta³ zastosowany trick, który wykorzystuje znacznie
szybsz± kryptografiê konwencjonaln± (z jednym kluczem). Tekst jawny
(oryginalna wiadomo¶æ) jest szyfrowany wysokiej jako¶ci szyfrem
konwencjonalnym, przy u¿yciu tworzonego losowego klucza, za ka¿dym razem
tworzonego od nowa. Klucz ten jest szyfrowany z kolei kluczem publicznym
adresata, i do³±czany do kryptogramu (zaszyfrowanej wiadomo¶ci). Odbiorca
u¿ywa swojego klucza prywatnego do odzyskania owego "tymczasowego klucza",
który z kolei s³u¿y do szybkiego rozszyfrowania wiadomo¶ci. [nawiasem
mówi±c, bardzo u³atwia to i skraca tworzenie kryptogramów przeznaczonych
dla wielu odbiorców -PK].

Ka¿dy klucz publiczny jest opisywany w pierwszym rzêdzie identyfikatorem
u¿ytkownika (userID) [dalej okre¶lanego równie¿ jako "nazwa u¿ytkownika" -PK],
sk³adaj±cym siê zwykle z imienia, nazwiska i adresu emailowego.
"Metryka" klucza publicznego, czyli postaæ w jakiej jest on przechowywany
i przenoszony sk³ada siê z identyfikatora u¿ytkownika, datownika okre¶laj±cego
czas stworzenia klucza i wreszcie w³a¶ciwego kodu klucza. Klucz prywatny ma tak±
sam± budowê, z t± ró¿nic±, ¿e jest on dodatkowo zaszyfrowany has³em, chroni±cym
go przed ujawnieniem na wypadek dostania siê w niepowo³ane rêce.
Metryki s± przechowywane s± w zbiorach - bazach kluczy, oddzielnych dla kluczy
publicznych i prywatnych. Ka¿dy u¿ykownik posiada zatem dwie bazy kluczy.

Klucz jest równie¿ opisywany za pomoc± identyfikatora cyfrowego
(numeru), który faktycznie jest jego "skrótem" (64 najmniej znacz±ce bity
klucza). Przy pracy wy¶wietlane s± tylko 32 bity identyfikatora.
Mimo ¿e czêsto ró¿ne klucze mog± mieæ ten sam identyfikator u¿ytkownika,
to w praktyce nie ma dwóch kluczy o tym samym identyfikatorze cyfrowym.

Do tworzenia podpisów cyfrowych (sygnatur) PGP u¿ywa algorytmu cyfrowego
"streszczenia" tekstu (message digest algorithm), który jest jego 128-mio
bitow± jednokierunkow± funkcj± mieszaj±c±. Jest ona analogiczna do
rozpowszechnionych sum kontrolnych i CRC, jednoznacznie odzwierciedlaj±cych
zawarto¶æ tekstu. W praktyce niemo¿liwe jest wprowadzenie do tekstu zmian
w taki sposób, by nie zmieni³y one sygnatury. Sygnatura jest nastêpnie
szyfrowana kluczem tajnym autora tekstu.

Dokument jest sygnowany przez dodanie na jego pocz±tku metryki, zawieraj±cej
identyfikator sygnuj±cego go klucza, zaszyfrowane "streszczenie" oraz datownik.
Przy sprawdzaniu poprawno¶ci sygnatury przez odbiorcê program u¿ywa
identyfikatora klucza do znalezienia go w bazie i stwierdzenia autorstwa.

Ka¿dy zaszyfrowany plik zawiera na pocz±tku identyfikator klucza publicznego
który zosta³ u¿yty do zaszyfrowania go. Pozwala to na odnalezienie przez
program odbiorcy odpowiedniego klucza prywatnego przy rozszyfrowaniu.
[mo¿na oczywi¶cie posiadaæ wiêcej ni¿ jedn± parê klucz prywatny/publiczny -PK]

Podsumowuj±c: w u¿yciu s± dwa rodzaje kluczy - prywatne i publiczne; dla
wygody manipulacji nie s± przechowywane pojedynczych plikach,  ale
w dwóch bazach kluczy - publiczne w jednej i prywatne w drugiej. Mo¿liwe jest
oczywi¶cie kopiowanie dowolnej liczby kluczy z bazy do pliku, na przyk³ad
w celu przes³ania swojego klucza publicznego przyjacielowi.

Instalacja
==========
PGP dla systemu MS-DOS jest rozprowadzane w postaci archiwum o nazwie
postaci: PGPxx.ZIP, gdzie xx jest numerem wersji (na przyk³ad dla
wersji 2.6.2 bêdzie to PGP262.ZIP). Do rozpakowania archiwum s³u¿y popularny
program PKUNZIP, lub unixowy "unzip". Archiwum zawiera szereg plików,
z których jako z pierwszym powieniene¶ zapoznaæ siê z dokumentem
README.DOC zawieraj±cym najwa¿niejsze informacje, uzupe³nienia i nowo¶ci
w aktualnej wesji PGP.

Je¶li posiadasz ju¿ starsz± wersjê PGP, powiniene¶ j± usun±æ dla unikniêcia
konfliktów nazw.

Instalacja PGP na Twoim komputerze ogranicza siê do skopiowania archiwum
do oddzielnego katalogu na twardym dysku (np. C:\PGP) i rozpakowania go
PKUNZIPem. Zalecane jest te¿ wprowadzenie paru dodatków do pliku AUTOEXEC.BAT,
ale mo¿na to zrobiæ pó¼niej. Je¶li instalujesz PGP po raz pierwszy,
nastêpnym krokiem bêdzie wygenerowanie pary kluczy - prywatnego
i publicznego - komend± "pgp -kg".

Instalacja w systemach Unix i VAX/VMS wymaga dodatkowo ¶ci±gniêcia
kodu ¼ród³owego PGP i skompilowania go lokalnym kompilatorem jêzyka C.
Do archiwum zawieraj±cego kod ¼ród³owy PGP do³±czon zosta³ plik
"Makefile" obs³ugiwany przez wiêkszo¶æ unixowych kompilatorów.

Szczegó³y instalacji oraz zalecane zmiany w AUTOEXEC.BAT opisane s±
w pliku SETUP.DOC,


U¿ytkowanie
===========
[Oto wykaz u¿ywanych przeze mnie nazw parametrów umieszczanych w linii
poleceñ wraz z krótkim wyja¶nieniem:

tekst_jawny = nazwa pliku przeznaczonego do zaszyfrowania; mo¿e to byæ
              równie dobrze plik binarny, np. ZIP, ale nazwa bierze siê
              z faktu, ¿e na ogó³ szyfrowane s± pliki tekstowe; jest ona
              zreszt± zgodna z terminologi± kryptograficzn±

nazwa       = jakakolwiek czê¶æ identyfikatora u¿ytkownika, pozwalaj±ca
              jednoznacznie okre¶liæ ¿±dany klucz; zwykle bêdzie to
              nazwisko w³a¶ciciela klucza lub czê¶æ jego adresu emailowego

szyfrogram  = nazwa pliku zawieraj±cego zaszyfrowany tekst, sygnaturê,
              b±d¼ klucz              -PK]


¦ci±gawka z podstawowych komend
-------------------------------
Krótk± listê podstawowych komend i opcji programu wy¶wietla polecenie:

        pgp -h


Szyfrowanie listu
-----------------
Szyfrowanie tekstu kluczem publicznym adresata:

        pgp -e tekst_jawny nazwa_odbiorcy

Komenda ta generuje szyfrogram w postaci pliku o nazwie pliku zawieraj±cego
tekst jawny z rozszerzeniem ".pgp". Przyk³ady:

        pgp -e list.txt Krzysztof
lub:
        pgp -e list.txt "Krzysztof S"

W pierwszym przypadku program przeszuka bazê kluczy znajduj±c± w pliku
"pubring.pgp" w poszukiwaniu metryki, zawieraj±cej ³añcuch "Krzysztof"
w polu identyfikatora u¿ytkowanika. W drugim przypadku znajdzie metryki
zawieraj±ce ³añcuch "Krzysztof S". A zatem ³añcuch zawieraj±cy wewn±trz
spacje musi byæ umieszczony w cudzys³owach. Ma³e i du¿e litery nie s±
rozró¿niane. Znaleziony klucz zostanie u¿yty do zaszyfrowania pliku,
podanego jako pierwszy parametr. [w praktyce PGP u¿yje do szyfrowania
tylko _pierwszego_ klucza zawieraj±cego podany ci±g znaków -PK]

Przed szyfrowaniem PGP próbuje poddaæ plik kompresji, co w znacz±cym
stopniu utrudnia z³amanie oraz powoduje, ¿e szyfrogram jest zwykle
o 1/3 mniejszy ni¿ oryginalny plik. [w przypadku tekstów -PK]

Do przes³ania zaszyfrowanego listu poczt± elektroniczn± szyfrogram
musi byæ dodatkowo przekodowany na znaki ASCII (patrz poni¿ej),
przez dodanie opcji -a.


Szyfrowanie listu dla wielu odbiorców
-------------------------------------
Je¶li chcesz, by Twój list mog³a przeczytaæ wiêcej ni¿ jedna osoba,
mo¿esz zaszyfrowaæ go kilkoma kluczami publicznymi. W tym celu nale¿y
dodaæ do linii poleceñ identyfikatory ich w³a¶cicieli. Ka¿dy z nich
bêdzie móg³ rozszyfrowaæ list:

        pgp -e list.txt Krzysztof Pawel Zenon

Program wygeneruje szyfrogram list.pgp, który bêd± mogli przeczytaæ
Krzysztof, Pawe³ i Zenon. W linii komend mo¿esz podaæ dowoln± liczbê
odbiorców, przy czym oczywi¶cie musisz posiadaæ klucz publiczny ka¿dego
z nich.


Cyfrowy podpis (sygnowanie listu)
---------------------------------
Do sk³adania pod listem cyfrowego podpisu Twojego tajnego klucza s³u¿y
polecenie:

        pgp -s plik_tekstowy [-u nazwa_twojego]

Pamiêtaj, ¿e argumenty umieszczone w [nawiasach] kwadratowych s± opcjonalne,
i nie trzeba ich zawsze wpisywaæ. Nie nale¿y równie¿ wpisywaæ samych nawiasów.

Polecenie to generuje opatrzony sygnatur± plik z rozszerzeniem ".pgp".
Na przyk³ad:

        pgp -s list.txt -u Dowejko

Program przeszuka bazê kluczy prywatnych "secring.pgp" w poszukiwaniu
klucza zawieraj±cego ³añcuch "Dowejko" w polu identyfikatora u¿ytkownika.
Jak ju¿ wspomniano, nie s± rozró¿niane ma³e i du¿e litery.
Znaleziony klucz zostanie u¿yty do podpisania pliku "list.txt", daj±c
w wyniku plik "list.pgp".

Je¶li nie podasz opcji -u, program u¿yje do podpisania pliku pierwszego
klucza znalezionego w bazie kluczy prywatnych.

PGP próbuje poddaæ podpisywany plik kompresji, dziêki czemu zwykle staje
siê on mniejszy, ale za to przestaje byæ normalnie czytelny. Taka forma
podpisywania mo¿e byæ wygodna np. do celów archiwizacji danych, ale nie
w przypadku podpisywania zwyk³ego tekstu ASCII przy wysy³aniu go
emailem lub do listy dyskusyjnej. W tej sytuacji pomocn± staje siê
opcja CLEARSIG, która powoduje ¿e PGP nie poddaje tekstu kompresji,
a sygnatura zostaje umieszczona na koñcu odpowiednio ograniczonego tekstu.
Opcja CLEARSIG jest opisana szczegó³owo w czê¶ci II dokumentacji.
W skrócie, mo¿emy to wyja¶niæ na przyk³adzie:

        pgp -sta list.txt

Spowoduje wygenerowanie pliku "list.asc" zawieraj±cego tekst w niezmienionej
postaci, wraz z czyteln± (zakodowan± w znakach ASCII) sygnatur±. Plik ten
jest ju¿ gotowy np. do wys³ania emailem.

Podpis i szyfrowanie
--------------------
Z³o¿enie cyfrowego podpisu pod tekstem, a nastêpnie zaszyfrowanie go
kluczem publicznym adresata:

        pgp -es tekst_jawny nazwa_odbiorcy [-u nazwa_twojego_klucza]

(argument w [nawiasach] jest opcjonalny)

Program wygeneruje plik z rozszerzeniem ".pgp". Plik wej¶ciowy zostanie
najpierw podpisany Twoim kluczem prywatnym, a nastêpnie zaszyfrowany
kluczem publicznym adresata. Program szuka klucza publicznego adresata
w bazie kluczy publicznych, pos³uguj±c siê podanym identyfikatorem.
Je¶li opu¶cisz ten identyfikator to PGP poprosi o jego podanie.
Klucz prywatny jest pobierany z bazy kluczy prywatnych i opuszczenie
jego nazwy (w opcji -u) spowoduje u¿ycie pierwszego znalezionego w bzaie
klucza.

PGP próbuje poddaæ wej¶ciowy plik kompresji.

Je¶li plik ma byæ przesy³any emailem, musi byæ przekodowany na znaki
ASCII. Nale¿y wówczas dodaæ opcjê -a.

Mo¿esz oczywi¶cie zaszyfrowaæ podpisany list do wiêcej ni¿ jednego
odbiorcy. Podaj ich identyfikatory w linii poleceñ.


U¿ywanie konwencjonalnej kryptografii
-------------------------------------
Czasem potrzebne jest zaszyfrowanie czego¶ w konwencjonalny sposób, jednym
has³em. Dzieje siê tak na przyk³ad w sytuacji, gdy chcesz zabezpieczyæ
plik który nie bêdzie nigdzie wysy³any, a mog± mieæ do niego dostêp osoby
niepowo³ane. Poniewa¿ szyfruje i deszyfruje go ta sama osoba, u¿ycie
kryptografii publicznej nie jest potrzebne.

Do szyfrowania pliku przy uzyciu konwencjonalnej kryptografii s³u¿y
polecenie:

        pgp -c plik

Wygeneruje zaszyfrowany plik o nazwie "plik.pgp", bez korzystania
z kluczy publicznych, identyfikatów itp. Zostaniesz natomiast poproszony
o podanie has³a, którym ma byæ zabezpieczony plik. Nie musi to byæ,
ani nawet nie powinno, has³o które zabezpiecza Twój klucz prywatny.
PGP próbuje poddaæ wej¶ciowy plik kompresji.

Otrzymany szyfrogram nigdy nie bêdzie dwa razy taki sam, nawet mimo u¿ycia
tego samego has³a.


Rozszyfrowywanie i sprawdzanie sygnatur
---------------------------------------
Podanie jako pierwszego parametru pliku bêd±cego szyfrogramem lub plikiem
z sygnatur± spowoduje roszyfrowanie lub sprawdzenie sygnatury:

        pgp szyfrogram [-o tekst_jawny]

(argument w [nawiasach] jest opcjonalny)

Domy¶lnie szyfrogram posiada rozszerzenie ".pgp". Opcjonalny parametr -o
definiuje plik do którego zostanie zapisany wyj¶ciowy tekst jawny.
Je¶li nie zostanie on podany, tekst jawny zostanie zapisany do pliku
o tej samej nazwie, ale bez rozszerzenia [je¿eli plik o danej nazwie ju¿
istnieje, PGP umo¿liwia podanie  "w biegu" nowej nazwy -JBW].
Je¶li zaszyfrowany plik posiada równie¿ sygnaturê, zostanie ona automatycznie
sprawdzona. Wy¶wietlony zostaje pe³ny identyfikator sygnatora.

Wszystkie czynno¶ci s± wykonywane ca³kiem automatycznie, zarówno je¶li
plik jest tylko zaszyfrowany, tylko podpisany lub poddany obu procesom
naraz. PGP równie¿ automatycznie odszukuje potrzebne klucze w obydwu
bazach, pos³uguj±c siê do tego zawartymi w szyfrogramie identyfikatorami.
Interwencja u¿ytkownika mo¿e byc wymagana jedynie dla podania has³a
odblokowuj±cego prywatny klucz.

PGP rozpozna tak¿e przypadek, gdy plik zosta³ zaszyfrowany konwencjonalnie
(z opcj± -c) i poprosi Ciê o has³o.


Zarz±dzanie kluczami
====================
Od czasów Juliusza Cezara, zarz±dzanie kluczami by³o zawsze najtrudniejsz±
czê¶ci± kryptografii. Jednym z najwiêkszych atutów PGP jest filozofia
obs³ugi i weryfikacji kluczy.

Generowanie klucza RSA
----------------------
Do generowania unikalnej pary kluczy - publicznego i prywatnego s³u¿y
polecenie:

        pgp -kg

PGP pozwala wybraæ jeden z trzech zalecanych rozmiarów kluczy (niski poziom
komercyjny, wysoki komercyjny, "wojskowy") i prosi o podanie albo wybranego
numeru, albo podanie w³asnej wielko¶ci klucza (w bitach), która w wersji 2.6.2i
mo¿e byc dowoln± liczb± do 2048. Odporno¶æ klucza na kryptoanalizê ro¶nie
wraz z jego rozmiarem, ale za to maleje prêdko¶æ jego przetwarzania.

Nastêpnie zostaniesz poproszony o podanie identyfikatora u¿ytkownika klucza,
czyli Twojego imienia i nazwiska. Przyjêtym standardem sta³o siê umieszczanie
po nazwisku adresu sieciowego w <nawiasach>. Dopuszczalne s± spacje i znaki
przestankowe:

        Stefan Kowalski <kowals@vijaya.edu>

Je¶li nie posiadasz adresu sieciowego, mo¿esz umie¶ciæ tam numer telefonu
lub inne przydatne pozosta³ym u¿ytkownikom informacje o Tobie, które dodatkowo
zapewni± unikalno¶æ Twojego identyfikatora.

Nastêpne pytanie PGP dotyczy has³a, które bêdzie chroniæ Twój klucz prywatny
w przypadku gdyby dosta³ siê w niepowo³ane rêce. Has³o nie musi sk³adaæ siê
z jednego s³owa - mo¿e to byæ ca³e zdanie ze spacjami, znakami przestankowymi,
cyframi itp. Nie ma metody odzyskania has³a, wiêc staraj siê go nie zapomnieæ.
Nie u¿ywaj krótkiego i prostego do zgadniêcia has³a, ani nie zapisuj go
w miejscu, w którym mog³oby byæ przez kogo¶ znalezione.
Je¶li nie chesz zabezpieczaæ klucza has³em, przyci¶niej ENTER.

[u¿ywanie _bezpiecznego_ has³a jest szczególnie wa¿ne w systemach
multipersonalnych, gdzie praktycznie ka¿dy (nie wierz administratorowi ;)
ma dostêp do Twojego konta; bezpieczne, znaczy d³ugie, ró¿norodne pod
wzglêdem znakowym i z niczym siê nie kojarz±ce potencjalnemu hackerowi;
z drugiej strony, nie bardzo ma chyba sens u¿ywania has³a w domu -PK]

Para kluczy - publiczny i prywatny - jest generowana na podstawie du¿ych
i naprawdê losowych liczb. Aby zapewniæ maksymaln± przypadkowo¶æ wyboru
tych liczb, program poprosi Ciê o wprowadzenie przypadkowego ci±gu znaków,
przypadkowego najlepiej zarówno pod wzglêdem czêstotliwo¶ci uderzeñ, jak
i zawarto¶ci. Losowo¶æ wynika tutaj w pewnym stopniu z nieprzewidywalno¶ci
wprowadzanych przez Ciebie znaków, wiêc nie przyciskaj w kó³ko tych samych
klawiszy.

Generowanie klucza RSA jest procesem wymagaj±cym sporej mocy obliczeniowej,
wiêc mo¿e trwaæ stosunkowo d³ugo - od kilkunastu sekund dla ma³ego klucza
na szybkim procesorze, do kilku minut dla du¿ego klucza na PC/XT. PGP wy¶wietla
postêp generowania.

Gotowa para kluczy jest rozmieszczana w bazach - odpowiednio publicznej
i prywatnej. U¿ywaj±c komendy -kx mo¿esz pó¼niej zrzuciæ swój klucz
publiczny do pliku, na przyk³ad w celu rozes³ania go znajomym. Klucza
prywatnego oczywi¶cie nie nale¿y nikomu dawaæ. Ka¿dy klucz prywatny jest
dodatkowo chroniony indywidualnym has³em (je¶li zosta³o za³o¿one).

Klucz prywatny powinien byæ zawsze umieszczony w miejscu do którego nikt poza
Tob± nie ma dostêpu. Ka¿dy u¿ytkownik powinien mieæ w³asny klucz prywatny,
osobi¶cie wygenerowany.

Je¶li PGP pokazuje komunikat o niemo¿no¶ci odnalezienia dokumentacji,
i w rezultacie odmawia generowania klucza, przeczytaj rozdzia³ o konfiguracji
opcji NOMANUAL w drugiej czê¶ci podrêcznika.


Dodawanie klucza do bazy
------------------------
Klucze publiczne i prywatne rozprowadzane s± w postaci baz. Czêsto
zachodzi potrzeba dodania czyjego¶ klucza do Twoich zbiorów.

S³u¿y do tego polecenie:

        pgp -ka plik_z_kluczem [baza_kluczy]

(argument w [nawiasach] jest opcjonalny)

Domy¶lnym rozszerzeniem pliku jest ".pgp". Domy¶ln± nazw± pliku zawieraj±cego
bazê kluczy jest "pubring.pgp" lub "secring.pgp", w zale¿nosæi od tego czy
chodzi o bazê kluczy publicznych czy prywatnych. W przypadku podania innych
nazw, domy¶lnym rozszerzeniem jest równie¿ ".pgp".

PGP przed dodaniem kluczy sprawdza obecn± zawarto¶æ bazy i pomija
duplikaty.

W dalszej czê¶ci podrêcznika wyja¶niona jest filozofia podpisywania
kluczy sygnaturami. Nale¿y tylko zaznaczyæ, ¿e podczas dodawania klucza
do bazy przepisywane s± równie¿ i jego sygnatury, natomiast je¶li klucz
ju¿ w bazie siê znajduje - tylko nowe sygnatury.

PGP zosta³o oryginalnie zaprojektowane do zarz±dzanie ma³ymi, osobistymi
bazami kluczy. Je¶li masz zamiar obs³ugiwaæ naprawdê du¿± bazê, przeczytaj
rozdzia³ "Obs³uga du¿ych baz kluczy" w drugiej czê¶ci podrêcznika.


Usuwanie kluczy lub identyfikatorów z bazy
------------------------------------------
Polecenie:

        pgp -kr nazwa_u¿ytkownika [baza_kluczy]

Powoduje przeszukanie bazy kluczy i usuniêcie identyfikatora lub klucza
pasuj±cego do podanego ³añcucha. Domy¶ln± nazw± bazy kluczy jest
"pubring.pgp". Je¶li znaleziony klucz posiada wiêcej ni¿ jeden identyfikator,
PGP zapyta Ciê, czy chcesz usun±æ ca³y klucz czy tylko wskazane identyfikatory.


Kopiowanie klucza z bazy
-------------------------
Polecenie:

        pgp -kx nazwa_u¿ytkownika plik_z_kluczem [baza_kluczy]

Kopiuje znaleziony klucz z bazy kluczy do wskazanego pliku. Jest to
przydatne, gdy chcesz daæ komu¶ konkretny klucz.

Wraz z kluczem kopiowane s± wszytkie uwierzytelniaj±ce go sygnatury.

Klucz zostanie zakodowany w znakach ASCII (do emailu) je¶li u¿yjesz
opcji -kxa.


Przegl±danie zawarto¶ci bazy kluczy
-------------------------------------
Do przegl±dania kluczy s³u¿y polecenie:

        pgp -kv[v] [nazwa_uzytkownika] [baza_kluczy]

Które wypisuje wszystkie klucze pasuj±ce do podanego identyfikatora.
Brak identyfikatora powoduje wy¶wietlenie wszystkich kluczy zawartych
w podanym pliku. Domy¶lnie przeszukiwana jest baza "pubring.pgp", by
przejrzeæ klucze prywatne, podaj "secring.pgp" (o ile tak nazywa siê
Twoja baza). Domy¶lnym rozszerzeniem pliku zawieraj±cego klucze jest
".pgp".

W dalszej czê¶ci podrêcznika zostanie wyja¶niona filozofia sygnowania
i certyfikowania cudzych kluczy publicznych. Tymczasem, do przegl±dania
wszystkich sygnatur opatruj±cych dany klucz s³uzy polecenie:

        pgp -kvv [nazwa_u¿ytkownika] [baza_kluczy]

Je¶li chcesz obejrzeæ zawarto¶æ innego, konkretnego pliku zawieraj±cego
klucze, mo¿liwe jest wydanie polecenia postaci:

        pgp plik_z_kluczami

PGP wymieni wszystkie znalezione w tym pliku klucze i spróbuje do³±czyæ
je do standardowej bazy kluczy.


Ochrona klucza publicznego przed sfa³szowaniem
----------------------------------------------
Systemy kryptografii publicznej cechuj± siê tym, ¿e nie ma potrzeby
chronienia klucza publicznego przed innymi u¿ytkownikami, wprost
przeciwnie, dobrze jest go szeroko rozpowszechniæ. Znacznie wa¿niejsz±
spraw± jest zapewnienie autentyczno¶ci klucza, tzn. pewno¶ci, ¿e nale¿y
on rzeczywi¶cie do osoby, której nazwisko na nim figuruje. Jest to jeden
ze s³abszych punktów w bezpieczeñstwie ca³ego systemu. Przedstawiê najprzód
potencjalne zagro¿enia, a potem sposoby ich unikniêcia.

Przypu¶æmy, ¿e chcesz wys³aæ zaszyfrowany list do prof. G±bki. W tym celu
¶ci±gasz jego klucz publiczny z najbli¿szego BBSu (serwera). Szyfrujesz
list tym kluczem i wysy³asz go poczt± elektroniczn±.

Ale na nieszczê¶cie niejaki Don Pedro, z³amawszy zabezpieczenia BBSu
umie¶ci³ w nim wygenerowany przez siebie, fa³szywie oznaczony nazwiskiem
prof. G±bki klucz publiczny. W ten sposób Don Pedro mo¿e (posiadaj±c pasuj±cy
klucz tajny) odczytaæ przeznaczon± dla profesora wiadomo¶æ, co wiêcej, mo¿e
j± potem zaszyfrowaæ prawdziwym kluczem publicznym profesora i doñ odes³aæ.
Mo¿e nawet robiæ dobre sygnatury, poniewa¿ wszyscy sprawdzaj±cy bêd± u¿ywaæ
fa³szywego klucza.

Jedyn± metod± zapobie¿enia zbrodni jest uniemo¿liwienie podrobienia klucza.
Problem rozwi±za³oby uzyskanie klucza profesora bezpo¶rednio od niego, ale co
zrobiæ je¶li mieszka on na Antypodach, albo akurat jest kompletnie nie do
z³apania?

Dobr± metod± jest uzyskanie klucza profesora od waszego wspólnego, zaufanego
znajomego - Smoka, który z pewno¶ci± posiada w³a¶ciw± kopiê klucza,
a do tego mieszka w pobli¿u. Smok móg³by po¶wiadczyæ prawdziwo¶æ tego
klucza, sk³adaj±c na nim swój podpis w³asnym kluczem prywatnym.

Da³oby to gwarancjê [opieraj±c± siê oczywi¶cie tylko na zaufaniu do Smoka
-PK] ¿e klucz prof. G±bki nie zosta³ podrobiony. Wymaga to jednak posiadania
dobrej kopii klucza publicznego Smoka, w celu sprawdzenia jego sygnatury.
Smok móg³by te¿ w razie potrzeby zaopatrzyæ profesora w Twój klucz publiczny.
Smok by³by zatem po¶rednikiem, osob± "przedstawiaj±c±" was sobie nawzajem.

Tak podpisany klucz mo¿e byæ spokojnie przes³any do BBSu, bez obawy ¿e
zostanie sfa³szowany, wymaga³oby to bowiem równie¿ sfa³szowania prywatnego
klucza Smoka i jego sygnatury.

Rolê po¶redników spe³niaja czêsto zaufane osoby specjalizuj±ce siê w funkcji
sprawdzania i podpisywania kluczy innych osób. Mog± to byæ operatorzy
popularnych serwerów kluczy. Ka¿dy klucz, niezale¿nie od tego jak± drog±
uzyskany, mo¿e byæ uznany za prawdziwy, pod warunkiem, ¿e zgadza siê sygnatura
po¶rednika.

Model absolutnie zaufanego serwera, po¶wiadczaj±cego klucze innych
u¿ytkowników jest wygodny i czasem u¿ywany w przypadku du¿ych,
sterowanych centralnie systemów firm lub instytucji.

Dla rozproszonych i pozbawionych centalnego zarz±dzania, "anarchistycznych"
systemów wygodniejszy jest protokó³ pozwalaj±cy wszystkim uzytkownikom na
po¶wiadczanie kluczy autentyczno¶ci ich przyjació³. PGP ma nawet tendencje
do naturalnego stymulowania takiego zdecentralizowanego podej¶cia do spraw
certyfikacji kluczy. Pzybli¿a ono lepiej spo³eczny model publicznego zaufania,
i pozwala u¿ytkownikom samodzielnie decydowaæ, komu powierzaj±
odpowiedzialno¶æ.

Kwestia prawid³owej autoryzacji kluczy jest zwykle Achillesow± piêt±
systemów kryptografii publicznej, tote¿ zastosowane w PGP rozwi±zania
programowe s± bardzo z³o¿one.
---
Klucza publicznego mo¿esz u¿yæ tylko wówczas, gdy masz PEWNO¦Æ ¿e nie
zosta³ on podrobiony i faktycznie nale¿y do osoby, której nazwisko nosi.
Pewno¶æ tê mo¿na zyskac na dwa sposoby: albo otrzymuj±c klucz bezpo¶rednio
od w³a¶ciciela, albo inn± drog±, pod warunkiem ¿e jest on sygnowany przez
osobê której w tej kwestii ufasz oraz posiadasz jej dobry klucz publiczny.
Wi±¿e siê z tym równie¿ konieczno¶æ opisywania kluczy pe³nym imieniem
i nazwiskiem.

W ¿adnym wypadku, niezale¿nie od pokusy, a taka bêdzie istnia³a na pewno,
nie ufaj kluczom ¶ci±gniêtym z BBSów je¶li nie s± opatrzone wiarygodn±
sygnatur±. Nieautoryzowany klucz mo¿e byæ podrobiony przez ka¿dego, w³±cznie
z administratorem danego systemu.

Sygnuj±c klucze innych osób pamiêtaj o odpowiedzialno¶ci jaka na Tobie
spoczywa - w ten sposób wyra¿asz swoje przekonanie, ¿e posiadaczem danego
klucza jest tylko i wy³±cznie jego - nominalny - w³a¶ciciel. Nie powiniene¶
opieraæ siê na zapewnieniach i hipotezach innych osób. Nie podpisuj klucza,
dopóki nie bêdziesz mia³ stuprocentowej pewno¶ci co do autorstwa klucza.
Najlepiej oczywi¶cie jest podpisywaæ tylko klucz uzyskany bezpo¶rednio od
w³a¶ciciela.

Podpisanie klucza jest czynno¶ci± wymagaj±c± znacznie wiêkszej pewno¶ci
co do jego autorstwa ni¿ na przyk³ad u¿ycie do zaszyfrowania listu.
Je¶li klucz jest opatrzony sygnatur± osoby której ufasz, spokojnie mo¿esz
go wykorzystaæ. Jednak samodzielnie podpisuj±c klucz powiniene¶ ¿±daæ
mo¿liwie najlepszej gwarancji, nawet je¶li wymaga³oby to skontaktowania siê
z potencjalnym w³a¶cicielem. Szczegó³y weryfikacji kluczy opisane s±
w rodziale "Weryfikacja klucza przez telefon" w II czê¶ci podrêcznika.

Oczywistym jest, ¿e gwarantuj±c wiarygodno¶æ klucza, nie mo¿esz zagwarantowaæ
wiarygodno¶ci i równowagi psychicznej samego autora. Twoja sygnatura stwierdza
jedynie, ¿e jeste¶ ca³kowicie pewien tego, ¿e dana osoba stworzy³a i nadal
posiada opisywany klucz. Podpisuj±c klucz szaleñca nie ryzykujesz niczym
swojego autorytetu, je¶li istotnie jest on rzeczywistym posiadaczem klucza.

Zaufanie nie przenosi siê z osoby na osobê. Na przyk³ad: mam przyjaciela
który nigdy nie k³amie. Ale jest on cz³owiekiem naiwnym, który uwa¿a ¿e
Prezydent mówi prawdê. Nie oznacza to jednak, ¿e i ja tak uwa¿am, mimo
ca³ego mojego zaufania do owego przyjaciela. Odnie¶my to do sygnatur: fakt,
¿e uznajê za wiarygodn± sygnaturê Smoka, nie oznacza wcale, ¿e ufam sygnaturze
prof. G±bki, mimo ¿e Smok uwa¿a profesora za godnego zaufania.

Dla Twojego w³asnego klucza publicznego najlepiej jest uzbieraæ najwieksz±
liczbê sygnatur od ró¿nych ludzi. Wzrasta w ten sposób prawdopodobieñstwo,
¿e u¿ywaj±ca go kiedy¶ osoba znajdzie w¶ród nich przynajmniej jedn± godn±
zaufania. Podpisawszy z kolei klucz innej osoby zwróæ go jej by mog³a dodaæ
do swojej bazy Twoj± sygnaturê.

PGP automatycznie sprawdza które klucze w bazie s± opatrzone sygnaturami
zaufanych uzytkowników i w razie potrzeby prosi o weryfikacjê i potwierdzenie
absolutnie zaufanym kluczem (czyli Twoim w³asnym). Zmiana dowolnego ogniwa
³añcucha sygnatur powoduje automatyczne uaktualnienie pozosta³ych.

Upewnij siê, ¿e Twoje klucze s± dobrze zabezpieczone przed sfa³szowaniem.
Na ich wiarygodno¶ci opiera siê ca³kowicie wiarygodno¶æ nowych kluczy,
sprawdzanych po ¶ci±gniêciu z serwera itp. Baza kluczy publicznych - tak
jak prywatnych - powininna znajdowaæ siê na systemie fizycznie odizolowanym
od sieci (np. osobistym notebooku). Niebezpieczne jest umieszczanie go
na wielozadaniowych i wielou¿ytkowych systemach sieciowych, nie tylko ze
wzglêdu na mo¿liwo¶æ ujawnienia, ale tak¿e podrobienia. Zawsze trzymaj
pewne kopie klucza prywatnego i publicznego na zabezpieczonej przed zapisem
dyskietce. Bêdziesz móg³ wtedy wykryæ ka¿de oszustwo porównuj±c posiadane
klucze z kopiami zapasowymi. Szczegó³y znajdziesz w II czê¶æi podrêcznika.

Teoretycznie mo¿liwe jest równie¿ wprowadzenie do samego programu PGP poprawek
uniemo¿liwiaj±ych wykrycie nieprawid³owo¶ci w kluczach lub sygnaturach.
[PGP jest rozprowadzane ³±cznie z kodem ¼ród³owym; przed takimi przeróbkami
zabezpiecza za³±czona sygnatura ka¿dego z dystrybucyjnych archiwów -PK]

Do¶æ skomplikowan± metod± zabezpieczenia bazy kluczy prywatnych jest
ka¿dorazowe sygnowanie go Twoim kluczem prywatnym. S³u¿y do tego opcja
"-sb" (rozdzia³ "Separating Signatures From Messages" w czê¶ci II).
Koniecznym warunkiem bezpieczeñstwa jest jednak w takiej sytuacji posiadanie
oddzielnej, zaufanej kopii klucza publicznego do sprawdzenia poprawno¶ci
sygnatury. Nie mo¿esz do tego celu u¿yæ klucza znajduj±cego siê ju¿ w bazie,
bo m.in. jego autentyczno¶æ chcesz stwierdziæ.

Jak PGP sprawdza wiarygodno¶æ klucza?
-------------------------------------
(przed pzeczytaniem tego rozdzia³u powiniene¶ zapoznaæ siê z rozdzia³em
"Ochrona klucza publicznego przed sfa³szowaniem")

PGP samo sprawdza czy ka¿dy z kluczy w bazie posiada wiarygodn± sugnaturê.
Twoim zadaniem jest jedynie decydowanie, którym osobom chcesz ufaæ jako
wprowadzaj±cym nowe klucze, oraz podpisanie ich kluczy Twoim kluczem
prywatnym, maj±cym status "aksjomatycznego" (absolutnie i z za³o¿enia
zaufanego). Jak ju¿ wspomniano, zmiana zaufania w stosunku do klucza
sygnatora automatycznie poci±gnie za sob± zmianê wiarygodno¶ci sygnowanych
przezeñ kluczy.

PGP kieruje siê dwoma - ca³kowicie odrêbnymi kryteriami przy ocenie
wiarygodno¶ci kluczy - nie wolno ich ³±czyæ:

        1) Czy dany klucz rzeczywi¶cie nale¿y do tego, kto wydaje siê
        byæ jego w³a¶cicielem? Innymi s³owy, czy zosta³ podpisany przez
        zaufan± osobê?

        2) Czy nale¿y do osoby, której mo¿esz zaufaæ jako sygnatorowi
        nowych kluczy?

PGP jest w stanie samodzielnie uzyskaæ odpowied¼ na pierwsze pytanie.
Na drugie musi odpowiedzieæ sam u¿ytkownik. Na podstawie udzielonej
odpowiedzi PGP automatycznie uzupe³ni te¿ odpowiedzi na pierwsze pytanie
w stosunku do innych kluczy podpisanych przez posiadacza akurat sprawdzanego
klucza.

Klucz po¶wiadczony przez zaufan± osobê [jej kluczem prywatnym -PK]
jest przez PGP uznawany za dobry. Z kolei klucze publiczne owych "zaufanych
osób" te¿ musz± byc podpisane: przez Ciebie lub przez innych "zaufanych".

Zaufanie do osoby swiadcz±cej inne klucze nie ma w za³o¿eniu odzwierciedlaæ
Twojej opinii tylko o odpowiedzialno¶ci tej osoby ale te¿ o jej kompetencji
do zarz±dzania kluczami. Dlatego te¿ PGP pozwala okresliæ to zaufanie
jako kilkustopniowe : brak zaufania, zaufanie nieznane, marginalne, pe³ne
oraz absolutne.
Twój wybór jest przechowywany razem z kluczem danej osoby. Poniewa¿ jest
on traktowany jako informacja prywatna i poufna, poziom zaufania nie jest
kopiowany wraz z kluczem.

Podczas obliczania wiarygodno¶ci klucza publicznego PGP bierze pod uwagê
wagê ka¿dej z opatruj±cych go sygnatur. Standardowo dwie sygnatury osób
marginalnie zaufanych znacz± tyle co jedna osoby w pe³ni zaufanej.
Ustawienie to mo¿e byc zmienione w zale¿no¶ci od indywidualnych potrzeb -
na przyk³ad mo¿esz ¿±daæ od PGP by o wiarygodno¶ci klucza decydowa³y
dwie sygnatury osób w pe³ni zaufanych lub trzy marginalnie.

Twój klucz publiczny posiada status klucza aksjomatycznego. Oznacza to ¿e
nie potrzebuje on ¿adnych dodatkowych sygnatur od osób trzecich by PGP
uzna³o go za wiarygodny. Z³o¿one przez Ciebie sygnatury równie¿ maj±
dla PGP status absolutnie zaufanych. PGP decyduje o tym czy dany klucz
nale¿y do Ciebie, czy nie, szukaj±c pasuj±cego doñ klucza prywatnego.

Podstawowym za³o¿eniem takiego, opartego na sygnaturach, zdecentralizowanego
i odpornego na infiltracjê systemu jest to ¿e w miarê up³ywu czasu ka¿dy
z u¿ytkowników gromadzi coraz wiêksz± pulê kluczy publicznych innych osób,
potencjalnie zaufanych. W ten sposób klucz dawany innym osobom opatrzony
jest coraz to wiêksz± liczb± sygnatur. Daje to nadziejê, ¿e gdy dotrze
on do której¶ z kolei osoby chc±cej go wykorzystaæ, znajdzie ona po¶ród
sygnatur przynajmniej jedn± - dwie godne zaufania.

Takie podej¶cie stroi w ¿ywej opozycji z oficjalnymi, sterowanymi przez
rz±d systemami zarz±dzania kluczami jak np. stosowany w Internecie
PEM (Privacy Enhanced Mail), który oparty jest na centralnej kontroli
i narzuconym z góry obiekcie zaufania. Standard ten opiera siê
na hierarchii Urzêdników Certyfikuj±cych którzy dyktuj± Ci komu masz ufaæ.
Kluczem do systemu PGP jest zdecentralizowana, probabilistyczna metoda
okre¶lania wiarygodno¶ci. PGP pozwala Ci samodzielnie decydowaæ komu
ufasz, ustawiaj±c Twój klucz na samym szczycie piramidy certyfikatów.
PGP jest dla ludzi którzy przed skokiem z samolotu wol± sami spakowaæ
sobie spadochron ;)


Jak chroniæ klucz tajny przed ujawnieniem?
------------------------------------------

Ochrona Twojego klucza prywatnego jest podstawowym warunkiem bezpieczeñstwa
Twoich danych. Równie dobrze nale¿y pilnowaæ zabezpieczaj±cego go has³a.
Je¶li zdarzy siê ¿e twój klucz prywatny dostanie siê w niepowo³ane rêce,
lepiej bez zw³oki zawiadom wszystkich (¿yczê szczê¶cia...) zainteresowanych
o tym przykrym zdarzeniu. Je¶li bêd± dalej, nie¶wiadomi, u¿ywaæ Twojego klucza
publicznego to na ujawnienie nara¿one bêd± wysy³ane do Ciebie listy,
a ka¿da opatrzona Twoim nazwiskiem sygnatura bêdzie z du¿ym prawdopodobieñstwem
fa³szywa. Niebezpieczeñstwo jest jeszcze wiêksze, je¶li Twój klucz cieszy³ siê
powszechnym zaufaniem.

Podstaw± bezpieczeñstwa klucza prywatnego jest posiadanie pe³nej fizycznej
kontroli nad nim. Klucz prywatny bêdzie stosunkowo bezpieczny, je¶li bêdziesz
go przechowywa³ na domowym komputerze, lub notebooku noszonym przy sobie.
Na du¿e niebezpieczeñstwo nara¿a go natomiast przechowywanie na w³±czonym do
sieci, wielodostepnym komputerze. Przy zdalnej pracy z terminala wcale
nietrudne do zrealizowania jest przechwycenie has³a odblokowuj±cego klucz,
a nastepnie kradzie¿ samego klucza. Je¶li musisz uzywaæ PGP na takim
komputerze, na przyk³ad w pracy, najlepszym rozwi±zaniem bêdzie przechowywanie
go na zabezpieczonej przed zapisem dyskietce zawsze noszonej ze sob±.

Has³o zabezpieczaj±ce klucz prywatny nigdy nie powinno byæ przechowywane
razem z kluczem. Mia³oby to taki sens jak noszenie przy kluczach od
mieszkania breloczka z adresem. Najlepszym jednak sposobem uchronienia
has³a przed ujawnieniem jest nie zapisywanie go nigdzie, poza w³asnym
mózgiem ;). Jesli masz zbyt wiele rzeczy na g³owie, by dodatkowo pamiêtaæ
wymy¶lne has³o i musisz go gdzie¶ zapisaæ, to przechowuj go w maksymalnie
bezpiecznym miejscu. Bezpieczeñstwo has³a jest nawet wa¿niejsze ni¿ samego
klucza.

Zawsze rób kopie bezpieczeñstwa kluczy. Pamiêtaj ¿e jeste¶ jedyn± osob±
posiadaj±c± tê parê kluczy. Utrata klucza prywatnego (w tym utrata has³a)
czyni bezwarto¶ciowymi wszytkie kopie Twojego klucza publicznego znajduj±ce
sie na ¶wiecie.

Zdecentralizowany charakter PGP oznacza równie¿, ¿e nie nale¿y za bardzo
wierzyæ w istnienie i funkcjonalno¶æ jakiej¶ centralnej listy utraconych
b±d¼ odtajnionych kluczy. Jedynym sposobem powiadomienia innych u¿ytkowników
o takim zdarzeniu jest rozes³anie wie¶ci o tym na wszystkie strony ¶wiata
i liczenie ¿e dotrze ona do zainteresowanych.


Uniewa¿nianie klucza publicznego
--------------------------------

Je¶li dojdzie do ujawnienia klucza, tzn. odtajnienia i klucza i broni±cego
go has³a (musisz siê jeszcze o tym jako¶ dowiedzieæ!), nale¿y wygenerowaæ
odpowiednie "zawiadomienie" - metrykê odtajnienia klucza.
S³u¿y do tego polecenie:

        pgp -kd nazwa_twojego_klucza

PGP wywo³ane w ten sposób generuje tak± metrykê, unikaln± dla danego klucza,
oraz opatrzon± jego sygnatur±.
Nale¿y j± teraz rozes³aæ do mo¿liwie najwiêkszej liczby posiadaczy Twojego
klucza publicznego. Ich PGP autoamtycznie zablokuje posiadane przez nich
kopie Twojego klucza przed ewentualnym u¿yciem. Oczywi¶cie w przypadku
odtajnienia klucza prywatnego nale¿y bezzw³ocznie stworzyæ now± parê kluczy.
Mo¿na wtedy wys³aæ znajomym nowy klucz publiczny, wraz z metryk± odtajnienia
starego.

Tego samego mechanizmu mo¿na u¿ywaæ w przypadku potrzeby uniewa¿nienia
starego klucza z innych powodów ni¿ jego odtajnienie.

Co zrobiæ w razie utraty klucza prywatnego?
-------------------------------------------

Normalnie do uniewa¿nienia klucza i zawiadomienia o tym innych u¿ytkowników
s³uzy opcja "-kd", generuj±ca certyfikat uniewa¿nienia klucza (patrz
"Uniewa¿nianie klucza publicznego").

Jednak w przypadku uszkodzenia lub zgubienia klucza prywatnego wygenerowanie
takiego certyfikatu nie jest mo¿liwe, bo do tego potrzebny jest sam klucz!
Przysz³e wersje PGP bêda mia³y wiêksze mo¿liwo¶ci w zakresie anulowania
kluczy w takiej sytuacji, np. autoryzacjê certyfikatu przez zaufan± osobê.
Obecnie jedyna metod± jest rozes³anie "s³ownego" zawiadomienia o konieczno¶ci
zablokowania kopii Twojego klucza publicznego znajduj±cych siê w posiadaniu
indywidualnych u¿ytkowników. Musi to byæ zrobione przez nich rêcznie, przez
wywo³anie PGP z opcj± "-kd" i Twoim nazwiskiem w linii poleceñ. PGP zablokuje
Twój klucz publiczny w ich bazach, tak ¿e nie bêdzie móg³ byæ wykorzystywany
do szyfrowania listów ani dalej kopiowany. W dalszym ci±gu bêd± oni mogli
sprawdzaæ nim Twoje sygnatury, lecz bêdzie wyswietlane odpowiednie ostrze¿enie.
Niemo¿liwe bêdzie równie¿ ponowne w³±czenie odblokowanej kopii tego samego
klucza do bazy. Wszystko to ma na celu powstrzymanie dalszego rozpowszechniania
niewa¿nego klucza publicznego.

Opcja "-kd" s³u¿y równie¿ do ponownego odblokowania danego klucza, je¶li jest
on zablokowany.

Tematy zaawansowane
===================
Ca³o¶æ zaawansowanych opcji i zastosowañ PGP jest opisana w drugiej czê¶ci
podrêcznika. [..która na razie jest nieprzet³umaczona ;( -PK]


Przesy³anie szyfrogramów e-mailem: opakowanie ASCII
---------------------------------------------------

Wiele sieciowych systemów pocztowych pozwala na przesy³anie listów
sk³adaj±cych siê tylko z 7-bitowych znaków ASCII, podczas gdy produkowany
przez PGP w³a¶ciwy szyfrogram sk³ada siê ze znaków 8-bitowych.
Dla obej¶cia tego problemu PGP stosuje algorytm kodowania plików binarnych
w znaki ASCII (radix-64), zbli¿on± do algorytmów stosowanych przez PEM, MIME
czy UUencode. Takie "opakowanie ASCII" (transport ASCII armor) zabezpiecza
szyfrogram przed zniszczeniem przez oprogramowanie pocztowe. Opakowanie
jest chronione przed ewentualnymi zniekszta³ceniami podczas transmisji
przez dodane sumy kontrolne CRC.

Algorytm radix-64 zamienia ka¿d± trójkê 8-bitowych bajtów w cztery 7-bitowe
znaki ASCII. Powiêksza to szyfrogram o ok. 33%, ale nie jest to tak wiele
przy za³o¿eniu ¿e prawdopodobnie plik zosta³ uprzednio poddany kompresji.

Wygenerowanie szyfrogramu w opakowaniu ASCII (podczas podpisywania lub
szyfrowania) powoduje opcja "a":

        pgp -sea list.txt nazwa_odbiorcy

W tym przyk³adzie do pliku "list.asc" zostanie zapisany szyfrogram
w opakowaniu ASCII podobnym do MIME czy UUencode. Plik ten bez problemów
mo¿e zostaæ przeczytany i wys³any przez oprogramowanie pocztowe Internetu
i ka¿dej innej sieci.

Kryptogram w poakowaniu ASCII rozszyfrowuje siê tak samo jak binarny:

        pgp list

PGP samo szuka najpierw pliku "list.asc" (ASCII) a potem "list.pgp"
(binarny). Automatycznie rozpozna obecno¶æ opakowania i usunie go,
tworz±c po¶redni plik ".pgp". Dalej roszyfrowanie toczy siê ju¿ jak
zwykle. Efektem dzia³ania jest "list.txt".

Wiêkszo¶æ Internetowego oprogramowania nie pozwala na przesy³anie
listów wiêkszych ni¿ 50 lub 65 tys. znaków [anonimowe remailery ograniczaj±
tê d³ugo¶æ 20-30 tys. -PK, w Fido obowi±zuje ograniczenie do 32K -JBW].
Je¶li wynikowy plik w opakowaniu bêdzie wiêkszy, to PGP potnie go na mniejsze
[wielko¶æ kawa³ków ustawia siê (2.6.2i) w pliku konfiguracyjnym -JBW] kawa³ki
z rozszerzeniami ".as1", ".as2", ".as3" itp. Odbiorca musi po³±czyæ wszystkie
kawa³ki w jeden du¿y plik przed rozszyfrowaniem. PGP ignoruje tekst nie
nale¿±cy do szyfrogramu (nag³ówki pocztowe, komentarze itp.).

By skopiowaæ swój klucz publiczny do pliku celem wys³ania go e-mailem
nale¿y równie¿ skorzystaæ z opcji "-a" podczas kopiowania (patrz "Kopiowanie
klucza z bazy ").

Je¶li zapomnia³e¶ dodaæ opakowania podczas szyfrowania lub kopiowania
klucza, mo¿esz to zrobiæ po¼niej. W tym celu wywo³aj PGP z sam± opcj±
"-a" podaj±c nazwê pliku binarnego do konwersji. PGP stworzy odpowiedni
plik ".asc".

Je¶li opatrujesz tekst swoim podpisem cyfrowym, to PGP normalnie podda go
kompresji. Tekstu wiêc nie bêdzie mo¿na odczytaæ bez ponownego u¿ycia
PGP. Taka metoda nadaje sie do celów archiwizacji, ale nie jest najlepsza
do sygnowania tekstów publikowanych np. w sieciowych grupach dyskusyjnych,
bo uniemo¿liwia przeczytanie listu od razu. PGP posiada jednak jeszcze
jedn± mo¿liwo¶æ sygnowania: tekst zostaje nietkniêty, a zapakowany
podpis cyfrowy jest umieszczany na koñcu. Oczywi¶cie PGP jest dalej potrzebne
odbiorcy do sprawdzenia podpisu. Szczegó³y dotycz±ce opcji CLEARSIG
opisane s± w II cze¶ci podrêcznika.

Zwykle do przesy³ania plików binarnych e-mailem wykorzystuje siê program
uuencode i podobne. PGP mo¿e z lepszymi wynikami zastêpowaæ uuencode.
Wystarczy u¿yæ samej opcji "-a" podaj±c nazwê pliku binarnego w linii komend.
Szczegó³y opisane s± w rozdziale "PGP jako lepsze UUencode" w
II czê¶ci podrêcznika.


Zmienne ¶rodowiskowe
--------------------

PGP potrzebuje do pracy kilku plików, takich jak baza kluczy
publicznych "pubring.pgp", prywatnych "secring.pgp", inicjator liczb
losowych "randseed.bin", plik konfiguracyjny PGP "config.txt" (lub "pgp.ini"
lub ".pgprc") i plik jêzykowy "language.txt". Katalog, w którym siê znajduj±,
okre¶la zmienna ¶rodowiskowa PGPPATH. Na przyk³ad pod MS-DOSem jej ustawianie
mo¿e wygl±daæ tak:

        SET PGPPATH=C:\PGP

Spowoduje to ¿e PGP bêdzie nastêpnym razem szukaæ w/w plików w katalogu
C:\PGP.  Powy¿sze polecenie najlepiej umie¶ciæ jest w pliku AUTOEXEC.BAT,
wtedy automatycznie bêdzie wykonywane przy ka¿dym rozpoczêciu pracy. Je¶li
zmienna PGPPATH nie zostanie zdefiniowana, PGP bêdzie szukaæ potrzebnych
plików w bie¿±cym katalogu.

[UWAGA: niektóre kiepsko napisane programy instalacyjne szukaj± w pliku
AUTOEXEC.BAT napisu "PATH=" i znajduj± go w powy¿szym tek¶cie, w wyniku
czego dopisuj± swoje ¶cie¿ki w niew³a¶ciwym miejscu - dlatego instaluj±c
oprogramowanie trzeciorzêdnych firm lepiej czasowo usun±æ lub "popsuæ"
to polecenie (swoj± drog± chyba nieszczê¶liwie wybrana nazwa) -JBW]

Konfiguracja PGP: plik CONFIG.TXT
---------------------------------

PGP ma mnóstwo konfigurowalnych opcji, które mog± byæ ustawione wedle
¿yczenia w pliku "config.txt", w katalogu okre¶lonym przez zmienn±
PGPPATH. W pliku konfiguracyjnym mo¿na równie¿ zdefiniowaæ czêsto
u¿ywane opcje, by nie wpisywaæ ich za ka¿dym razem w linii komend.

Dla zgodno¶ci z lokalnymi zwyczajami plik konfiguracyjny mo¿e siê nazywaæ
inaczej ni¿ "config.txt". Opcjonaln± nazw± pod MS-DOSem jest "pgp.ini",
a pod Unixem - ".pgprc".

W pliku konfiguracyjnym mo¿na na przyk³ad okre¶liæ gdzie PGP ma umieszczaæ
pliki tymczasowe, jakiego jêzyka u¿ywaæ i wiele innych parametrów.

Szczegó³owy opis wszystkich opcji konfiguracyjnych PGP znajduje siê
w II czê¶ci podrêcznika.

S³abe punkty
------------

Nie ma systemu nie do z³amania. PGP mo¿na podej¶æ na wiele sposobów.
Potencjalnie najs³absze punkty ca³ego systemu na które nale¿y
szczególnie uwa¿aæ, to ujawnienie has³a lub klucza prywatnego, sfa³szowanie
klucza publicznego, pliki które niby zosta³y skasowane, ale dalej gdzie¶
tam s±, wirusy i konie trojañskie, b³êdy w fizycznych zabezpieczeniach,
emisja elektromagnetyczna, zagro¿enia wynikaj±ce z pracy w systemach
wielodostêpnych, przechwytywanie pakietów sieciowych a nawet bezpo¶rednia
kryptoanaliza.

Zagro¿enia te s± przedyskutowane wyczerpuj±co w rozdziale "S³abe punkty"
w II czê¶ci podrêcznika.

O z³udnym poczuciu bezpieczeñstwa
=================================

Przy pracy z oprogramowaniem kryptograficznym zawsze nasuwa siê pytanie
o stopieñ bezpieczeñstwa zapewnianego przez dany produkt. Nawet bior±c
pod uwagê samodzielne sprawdzenie kodu ¼ród³owego, nie ka¿dy ma na tyle
do¶wiadczenia w kryptografii, by os±dziæ bezpieczeñstwo szyfru. Nawet
uwadze do¶wiadczonego kryptologa mog± uj¶æ drobne i trudne do odkrycia
s³abo¶ci algorytmu.

We wczesnych latach 70-tych, ucz±c siê w liceum, by³em przekonany ¿e
uda³o mi siê opracowaæ doskona³y algorytm szyfruj±cy. Prosty strumieñ
pseudolosowy by³ dodawany do tekstu jawnego, daj±c w wyniku szyfrogram.
Na pozór udaremnia³o to wszelkie próby analizy czêsto¶ciowej szyfrogramu
i by³o nie do z³amania nawet przez doskonale wyposa¿one s³u¿by specjalne.
By³em z niego bardzo dumny i bardzo pewny siebie. Tak szczeniacko pewny..

Kilka lat pó¼niej znalaz³em ten sam algorytm opisany w kilku wprowadzaj±cych
artyku³ach z dziedziny kryptografii. Fajnie, inni te¿ wpadli na ten pomys³.
Problem w tym, ¿e mój algorytm by³ przytoczony jako przyk³ad szyfru
ulegaj±cego elementarnym technikom kryptoanalitycznym. Tyle zosta³o
z mojego szyfru.

To wstydliwe do¶wiadczenie nauczy³o mnie, jak ³atwo wpa¶æ w fa³szywe
przekonanie o bezpieczeñstwie opracowanego algorytmu. Wiêkszo¶æ ludzi
ma³o zdaje sobie sprawê z tego, jak diabelnie trudno zaprojektowaæ
jest szyfr, który oprze siê d³ugotrwa³ym i zdeterminowanym próbom z³amania
przez dobrze wyposa¿onego przeciwnika. Wiêkszo¶æ mainstreamowych
programistów opracowa³o równie naiwne szyfry (czêsto analogiczne do mojego),
co wiêcej, sporo  wesz³o w sk³ad komercyjnych systemów i zosta³o sprzedanych
za ciê¿kie pieni±dze niczego nie podejrzewaj±cym u¿ytkownikom.

To tak jakby sprzedawaæ kierowcom pasy bezpieczeñstwa, które wygl±daj±
i le¿± doskonale, ale nie wytrzymuj± najs³abszego naprê¿enia. Poleganie
na nich mo¿e byæ bardziej niebezpieczne ni¿ jazda bez pasów.
Poleganie na s³abym algorytmie mo¿e wystawic istotne dane na ryzyko.
To ryzyko mog³oby nie zaistnieæ, gdyby¶ w ogóle obywa³ siê bez takich
szyfrów [zaszyfrowane dane stanowi± wiêksz± pokusê od niezaszyfrowanych,
na które przeciwnik móg³by nawet nie spojrzeæ -JBW]. A tak, prawdopodobnie
nawet nie bêdziesz wiedzia³ ¿e Twoje dane dosta³y siê w niepowo³ane rêce.

Spora rzesza komercyjnych programów u¿ywa federalnego standardu szyfrowania
danych DES, przyzwoitego szyfru konwencjonalnego zalecanego przez
w³adze do u¿ytku handlowego (zastanawiaj±ca rzecz, ¿e niezalecanego
dla danych oznaczonych jako poufne - hmm). DES mo¿e pracowaæ w kilku
trybach, ró¿ni±cych siê si³±. W³adze nie zalecaj± u¿ywania najprostszego
i najs³abszego trybu - elektronicznej ksi±¿ki kodowej (ECB). Zalecane
jest natomiast u¿ywanie innych trybów - CFB (sprzê¿enia zwrotnego)
i CBC (szyfrowania blokowego).

Tymczasem wiêkszo¶æ dostêpnych w handlu programów, z jakimi mia³em
kontakt, u¿ywa w³a¶nie trybu ECB. Rozmowa z autorami tych implementacji
przynios³a ciekawe efekty: ¿aden z nich nie s³ysza³ nawet o CBC czy CFB,
ani o s³abo¶ciach trybu ECB. Wynikaj±cy st±d wniosek, ¿e nie maj± oni
elementarnej wiedzy o kryptografii, niestety nie nastraja optymistycznie.
Czêste jest tak¿e niedpowiedzialne i niebezpieczne zarz±dzanie kluczami.
Programy te oferuj± tak¿e zamiennie szybsze algorytmy szyfruj±ce.
Przekonanie ich autorów o bezpieczeñstwie dorównuj±cym standardowi DES
jest równie¿ ca³kowicie b³êdne. Zwykle okazywa³y sie one prostymi wariacjami
mojego szyfru z lat szkolnych. Prawdopodobnie nie by³y one nawet dok³adnie
analizowane, a mimo to ich autorzy z przekonaniem zapewniali mnie
o ich bezpieczeñstwie, mówi±c ¿e spokojnie mogê im zaufaæ. Jestem pewien,
¿e wierz± oni w b³yskotliwo¶æ swoich algorytmów, ale sk±d ja mam nabraæ
takiej pewno¶ci nie maj±c okazji ich przeanalizowaæ?

Gwoli sprawiedliwo¶ci muszê przyznaæ, ¿e w wiêkszo¶ci przypadków owe
zastraszaj±co s³abe szyfry nie znjdowa³y miejsca w programach firm
specjalizuj±cych siê w kryptografii.

Niestety, nawet naprawdê dobre programy u¿ywaj±ce DES w silniejszych
trybach nie s± obecnie zbyt bezpieczne. Standardowa implementacja DES
u¿ywa klucza 56-bitowego, który mo¿e byæ dzi¶ ³atwo z³amany przez
wyczerpuj±ce przeszukiwania kluczy przy u¿yciu szybkich mikroprocesorów.
DES osi±gn±³ kres swojej u¿yteczno¶ci. Tak samo oprogramowanie na nim siê
opieraj±ce.

Amerykañska firma AccessData (87 East 600 South, Orem, utah 84058,
tel. 1-800-658-5199) sprzedaje za 185 USD program ³ami±cy szyfry
zastosowane w aplikacjach WordPerfect, Lotus 1-2-3, MS Excel, Symphony,
Qattro Pro, Paradox i MS Word 2.0. Program ten nie zgaduje hase³ - dokonuje
prawdziwej kryptoanalizy. Kupuj± go ludzie którzy zapomnieli hase³ do
swoich danych, kupuj± instytucje ¶ledcze. Eryk Thompson, autor,
powiedzia³ mi ¿e w rzeczywisto¶ci z³amanie has³a zajmuje programowi u³amek
sekundy. By nie wydawa³o siê to klientowi zbyt proste, algorytm zawiera
specjalne pêtle opó¼niaj±ce. Powiedzia³ te¿, ¿e z ³atwo¶ci± z³amany mo¿e byæ
szyfr programu PKZip i ¿e rz±dowi klienci regularnie korzystaj± z tej
us³ugi w innej firmie.

Kryptografiê mo¿na pod tym wzglêdem porównaæ do farmacji.  Jako¶æ szyfru,
tak jak jako¶æ lekarstwa mo¿e byæ ca³kowicie zwodnicza. Z³a penicylina
wygl±da dok³adnie tak samo jak dobra. Kryptogram wyprodukowany przez s³aby
algorytm szyfruj±cy nie wygl±da gorzej od wyprodukowanego przez silny algorytm.
W przeciwieñstwie do lekarza-szarlatana projektanci tych algorytmów rzadko
zdaj± sobie sprawê z ich wad. Dobry programista mo¿e zaprojektowaæ algorytm,
który bêdzie dzia³a³ bezb³êdnie, ale co z tego je¶li ma on nik³e pojêcie
o kryptografii? Poprawno¶æ dzia³ania nie implikuje poprawno¶ci
kryptograficznej.

Przekonanie o odporno¶ci szyfru na kryptoanalizê mo¿e sugerowaæ, ¿e mamy
do czynienia albo z nies³ychanie utalentowanym geniuszem, albo naiwnym
i niedo¶wiadczonym kryptologiem. Czasem spotykam ludzi, chc±cych
uzupe³niæ PGP o takie "nie³amalne" szyfry w³asnego pomys³u.

Przypomina mi siê rozmowa z Brianem Snowem, wysoko postawionym d³ugoletnim
kryptologiem z NSA. Powiedzia³ mi on, ¿e nigdy nie zaufa³by algorytmowi
wymy¶lonemu przez kogo¶, kto nie spêdzi³ uprzednio wiele czasu ³ami±c
szyfry. Mia³o to g³êboki sens. Zauwa¿y³em, ¿e praktycznie nikt, zajmuj±cy
sie kryptografi± na potrzeby rynku, nie spe³nia tego warunku.
- Zgadza siê, odpowiedzia³ Snow z u¶miechem - bardzo u³atwia to nam pracê
w NSA. Do¶æ nieprzyjemna ¶wiadomo¶æ. Wówczas i ja nie spe³nia³em tego
warunku.

W³adze równie¿ maj± na swoim koncie tworzenie takiego z³udnego poczucia
bezpieczeñstwa. Po Drugiej Wojnie ¦wiatowej, Amerykanie sprzedawali
niemieckie maszyny szyfruj±ce Enigma pañstwom Trzeciego ¦wiata.
Nie informowali jednak, ¿e Alianci z³amali Enigmê jeszcze w czasie wojny,
a fakt ten by³ utrzymywany w tajemnicy przez d³ugie lata. [w rzeczywisto¶ci
Enigma zosta³a z³amana jeszcze przed wojn±; dokona³a tego trójka polskich
matematyków, pracowników Biura Szyfrów w Warszawie -PK]. Szyfr Enigmy jest
stosowany po dzi¶ dzieñ jako standard w systemach Unix, czê¶ciowo dlatego
¿e w³adze ograniczy³y legalne stosowanie lepszych algorytmów. W roku 1977
próbowano nawet zapobiec publikacji algorytmu RSA. Du¿e ¶rodki zosta³y
podjête dla uniemo¿liwienia publicznego wykorzystania bezpiecznej telefonii
kodowanej.

G³ównym zadaniem amerykañskiej NSA jest gromadzenie i analiza informacji
wywiadowczych, zdobywanych g³ównie przez pods³uch prywatnych kana³ów
informacyjnych (James Bamford "The Puzzle Palace"). NSA jest doskonale
przygotowana do ³amania szyfrów, ale odciêcie spo³eczeñstwa od dobrych
algorytmów szyfruj±cych czyni ich zadanie niemal¿e trywialnym. NSA jest
równie¿ instytucj± odpowiedzialn± za ocenê oraz dopuszczanie do u¿ytku
algortymów szyfruj±cych. Krytycy porównuj± taki uk³ad do stawiania lisa
na stra¿y kurnika. Zaprojektowane przez NSA i dopuszczone do komercyjnego
wykorzystania algorytmy s± tajne i nikt nie mo¿e sprawdziæ na w³asn± rêkê
jaka jest ich rzeczywista warto¶æ. [chodzi tu zapewne o szyfr FELIX -PK]
Agencja chce, by spo³eczeñstwo jej zaufa³o i u¿ywa³o tych szyfrów ze
¶wiadomo¶ci±, ¿e co¶, co zosta³o przez specjalistów z NSA zaprojektowane
mo¿e byæ przez nich równie¿ bez trudu z³amane. Czy¿ nie jest to ¶wiadome
stwarzanie z³udnego poczucia bezpieczeñstwa?

Na jako¶æ amerykañskiego oprogramowania kryptograficznego mia³y wp³yw
trzy czynniki. Pierwszy z nich, to niemal powszechna nieznajomo¶æ
problemu w¶ród twórców tego oprogramowania. Prze¶wiadczenie tych ludzi
o w³asnej wiedzy i talencie w tym zakresie doprowadzi³o do prawdziwego
zalewu programów o naprawdê nik³ej warto¶ci. Drugi czynnik, to nieustanne
blokowanie prób wypuszczenia na rynek dobrej jako¶ci technologii
b±d¼ przez ograniczenia prawne b±d¼ naciski ekonomiczne. Zaostrzenie
przepisów dotycz±cych kontroli eksportu oprogramowania kryptograficznego
zaowocowa³o ograniczeniem prac prowadzonych przez prywatne firmy, pozbawione
w ten sposób ch³onnych rynków zbytu. Ostatnim ze sposobów na blokowanie
upowszechniania i rozwoju dobrych algorytmów szyfruj±cych jest przyznawanie
patentów na wszystkie systemy kryptografii publicznej jednej tylko firmie.
Wszystko to doprowadzi³o do tego, ¿e przed PGP nie by³o w Ameryce naprawdê
bezpiecznych danych.

Nie jestem ju¿ tak przekonany o "nie³amliwo¶ci" zastosowanych w PGP
rozwi±zañ, jak by³o to w przypadku mojego pamiêtnego szyfru z czasów
szkolnych. I by³by to z³y znak, gdybym w takim przekonaniu siê utrzymywa³.
Mam natomiast ¶wiadomo¶æ, ¿e PGP nie zawiera ¿adnego w znacz±cy sposób
ograniczaj±cego bezpieczeñstwo b³êdu, chocia¿ sam program oczywi¶cie
mo¿e mieæ pewne usterki. Algorytm RSA zosta³ zaprojektowany przez wysokiej
klasy specjalistów z najlepszych szkó³ kryptografii, i wielokrotnie by³
poddawany dog³êbnej analizie przez innych ludzi. PGP jest rozprowadzane
z kodem ¼ród³owym by umo¿liwiæ ka¿demu samodzieln± ocenê jako¶ci programu.
Oczywi¶cie nie pracujê dla NSA. Korzystanie z PGP nie zmusza nikogo do
dawania zaufania na kredyt.


Do u¿ytkowników Macintosha
==========================

PGP zosta³o oryginalnie napisane z my¶l± o pracy pod MSDOSem i Unixem,
istnieje jednak równie¿ jego wersja przeznaczona dla komputerów
Apple Macintosh. Podrêcznik ten tyczy g³ównie wersji dosowo/unixowej
w której wszystkie parametry podawane s± w linii poleceñ. Na Macu PGP
obs³ugiwane jest przez system rozwijanych menu i okien dialogowych,
posiada ono równie¿ zawsze dostêpn± pomoc dotycz±c± funkcji PGP.
Niezale¿nie od tego pakiet MacPGP powienien posiadaæ dodatkow± dokumentacjê
uwzglêdniaj±c± jego specyfikê.

Znacz±ca wiêkszo¶æ znakomitych programów dla Macintosha zosta³a napisana
od zera z my¶l± o tym systemie. Nie jest tak niestety w przypadku PGP.
Zosta³o ono przerobione z wersji unixowej i dostosowane do graficznego
interfejsu u¿ytkownika przez Zbigniewa Fiedorowicza, niemniej nadal mo¿e byæ
oparczone pewn± liczb± b³êdów. Trwaj± prace nad kolejn± wersj± PGP
przeznaczon± tym razem wy³±cznie dla Maca, opart± na najnowszej, obecnej
wersji PGP. Pomimo pluskiew w dotychczasowym MacPGP, nale¿y podkre¶liæ, ¿e
gdyby Zbigniew od pocz±tku powstrzymywa³ siê z implementacj± PGP na Macintosha
do czasu stworzenia nowej wersji, jego potencjalni u¿ytkownicy mógliby byæ
w dalszym ci±gu pozbawieni tego programu.


Krótki przegl±d poleceñ PGP
===========================

Szyfrowanie, deszyfrowanie, podpisy:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Szyfrowanie tekstu kluczem publicznym adresata:
        pgp -e plik_tekstowy nazwa_adresata

Sk³adanie elektronicznego podpisu (sygnatury) przy pomocy Twojego
klucza tajnego (tekst jest pakowany razem z sygnatur±):
        pgp -s plik_tekstowy [-u nazwa_twojego_klucza]

Elektroniczny podpis pod plikiem tekstowym (tekst nie jest pakowany,
sygnatura na koñcu):
        pgp -sta plik_tekstowy [-u nazwa_twojego_klucza]

Elektroniczny podpis, a nastêpnie szyfrowanie dokumentu kluczem
publicznym adresata:
        pgp -es plik_tekstowy nazwa_adresata [-u nazwa_twojego_klucza]

Rozszyfrowanie lub sprawdzenie elektronicznego podpisu pliku:
        pgp otrzymany_szyfrogram [-o plik_tekstowy]

Szyfrowanie pliku dla kilku odbiorców:
        pgp -e plik_tekstowy odbiorca1 odbiorca2 .. odbiorca-n

Zarz±dzanie kluczami:
~~~~~~~~~~~~~~~~~~~~~
Generowanie w³asnej pary kluczy - publicznego i prywatnego:
        pgp -kg

Dodawanie nowych kluczy do bazy:
        pgp -ka plik_z_nowymi_kluczami [zbiór_kluczy]

Wyci±ganie (kopiowanie) dowolnego klucza z bazy:
        pgp -kx nazwa_klucza plik_docelowy [baza_kluczy]
lub:    pgp -kxa nazwa_klucza plik_docelowy [baza_kluczy]

Przegl±danie bazy kluczy:
        pgp -kv[v] [nazwa_klucza] [baza_kluczy]

Sprawdzanie "odcisku" klucza, np. w celu uzgodnienia go
z w³a¶cicielem przez telefon:
        pgp -kvc [nazwa] [baza_kluczy]

Przegl±danie bazy i sprawdzanie sygnatur uwierzytelniaj±cych klucze
publiczne:
        pgp -kc [nazwa] [baza_kluczy]

Zmiana/dodawanie identyfikatorów u¿ytkownika lub has³a Twojego klucza
tajnego:
        pgp -ke nazwa_twojego_klucza [baza_kluczy]

Zmiana zaufania w stosunku do danego u¿ytkownika:
        pgp -ke nazwa_klucza [baza_kluczy]

Usuwanie klucza/identyfikatora z bazy kluczy publicznych:
        pgp -kr nazwa_klucza [baza_kluczy]

Uwierzytelnianie czyjego¶ klucza Twoim w³asnym (sygnowanie):
        pgp -ks nazwa_klucza [-u nazwa_twojego_klucza] [baza_kluczy]

Usuwanie wskazanych sygnatur z kluczy:
        pgp -krs nazwa_klucza [baza_kluczy]

Anulowanie Twojego klucza i wydanie certyfikatu odtajnienia klucza:
        pgp -kd nazwa_twojego_klucza

Blokowanie/uaktywnianie kluczy:
        pgp -kd nazwa_klucza

Ró¿ne:
~~~~~~
Rozszyfrowanie tekstu bez naruszania sygnatury:
        pgp -d szyfrogram

Tworzenie elektronicznego podpisu w postaci oddzielnego pliku:
        pgp -sb plik_tekstowy [-u nazwa_twojego_klucza]

Oddzielanie sygnatury od ju¿ podpisanego pliku:
        pgp -b szyfrogram

Opcje, które mog± wchodziæ w sk³ad innych poleceñ:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Dodanie opcji -a powoduje wygenerowanie szyfrogramu zapakowanego
w znaki ASCII, tak by mo¿na by³o go przes³ac poczt± itp. (jak uuencode):
        pgp -sea plik_tekstowy nazwa_adresata
lub:    pgp -kxa nazwa_klucza plik_docelowy [baza_kluczy]

Opcja -w (wipe) powoduje zamazanie i nadpisanie tekstu jawnego po sygnowaniu
lub/i zaszyfrowaniu; spryciarzom uniemo¿liwia jego odtworzenie:
        pgp -sew plik_tekstowy nazwa_adresata

Opcja -t (text) sugeruje, ¿e przetwarzany plik jest tekstem, i powinien
byæ przekonwertowany wg lokalnej specyfiki:
        pgp -seat plik_tekstowy nazwa_adresata

Sama opcja -m (more) pozwala na obejrzenie rozszyfrowanego tekstu:
        pgp -m szyfrogram

Opcja -m, u¿yta podczas szyfrowania, powoduje, ¿e po rozszyfrowaniu plik
nie bêdzie zapisany na dysk, tylko wy¶wietlony na ekranie ("For Your Eyes
Only"):
        pgp -steam plik_tekstowy nazwa_adresata

Opcja -p powoduje odzyskanie oryginalnej nazwy zaszyfrowanego pliku:
        pgp -p szyfrogram

Opcja -f umo¿liwia korzystanie z stdin i stdout na mod³ê Unixow±:
        pgp -feast nazwa_adresata <plik_wej >plik_wyj

[wg nomenklatury MSDOS-owej PGP pracuje w tym trybie jako tzw. filtr -
st±d "f" -JBW]



Kwestie prawne
==============

Dok³adne informacje na temat licencji PGP(tm), dystrybucji, praw autorskich,
patentów, ograniczeñ odpowiedzialno¶ci i eksportu znajduj± siê
w rozdziale "Kwestie prawne" drugiej czê¶ci podrêcznika.

PGP wykorzystuje algorytm kryptografii publicznej chroniony przez
amerykañski patent nr 4,405,829. Posiadaczem patentu jest firma Public
Key Partners (PKP) i naruszaniem jej praw mo¿e byæ u¿ywanie PGP w USA
bez licencji. Jest to omówione szczegó³owo w drugiej czê¶ci podrêcznika
oraz w licencji RSAREF rozprowadzanej z darmow± wersj± PGP. PKP zezwoli³a
na wykorzystanie patentu m.in firmie ViaCrypt (Phoenix, Arizona,
tel. 602-944-0773) sprzedaj±cej w pe³ni licencjonowan± wersjê PGP.

PGP jest programem typu freeware i nie mam nic przeciwko jego szerokiemu
rozpowszechnianiu, byle bym tylko nie otrzymywa³ niezliczonych pró¶b
o przys³anie kopii. Zamiast tego szukaj najnowszych wersji w licznych
BBSach i archiwach FTP w Internecie. Przed dalszym rozpowszechnianiem
PGP powiniene¶ jednak zapoznaæ siê z ograniczeniami eksportowymi
nak³adanymi przez amerykañskie prawo i zrozumieæ je.


Podziêkowania
=============

Liczne ¶rodki przedsiêwziêto dla uniemo¿liwienia wykorzystania PGP.
Jednak równie wiele osób po¶wiêca³o swój czas dla ich obej¶cia, dziêki
czemu PGP uzyska³o poniek±d status programu "podziemnego",
a wypracowanie jego ca³kowitej legalno¶ci wymaga³o wiele cierpliwo¶ci
i uporu. Chcia³bym tu szczególnie podziêkowaæ Halowi Abelsonowi,
Jeffowi Schillerowi, Brainaowi LaMachhia i Derekowi Atkinsowi z MIT
za ich zdeterminowane dzia³anie. Podziêkowania nale¿± siê równie¿
Jimowi Bruce i Davidowi Litsterowi z administracji MIT oraz Bobowi Prior
i Terry'emu Ehlingowiz z wydzia³u prasowego MIT. Dziêkujê te¿ ca³ej grupie
osób zajmuj±cych siê moj± obron± w nie koñcz±cych sie jeszcze problemach
prawnych. Od jakiego¶ czasu przesta³em nawet opowiadaæ dowcipy o prawnikach,
mog±c poznaæ tak wiele pozytywnych przyk³adów ich pracy, zw³aszcza ¿e
wielu z nich po¶wiêca³o swój czas pro bono.

Doskonalenie PGP zmieni³o siê szybko w zdumiewaj±ce zjawisko spo³eczne,
którego pod³o¿e polityczne zainspirowa³o zbiorowy wysi³ek wci±¿ rosn±cej
rzeszy programistów-ochotników.

Chcia³bym te¿ podziêkowaæ nastêpuj±cym osobom za wysi³ek w³o¿ony
w prace nad PGP. Pomimo ¿e by³em autorem pierwszej jego wersji,
wiekszo¶æ pó¼niejszych rozszerzeñ i udoskonaleñ jest efektem zbiorowej
pracy wielu ludzi, jedynie nadzorowanej przeze mnie jako kierownika projektu.

Branko Lancaster, Hal Finney i Peter Gutmann po¶wiêcili wiele czasu
i wysi³ku w³o¿onego w stworzenie PGP 2.0 i jego unixowych implementacji.

Hugh Kennedy przeniós³ PGP na system VAX/VMS, Lutz Frank na Atari ST,
a Cos Bosman i Colin Plumb na Commodore Amiga.

Przek³adu PGP na inne jêzyki dokonali: Jan-Loup Gailly (Francja),
Armando Ramos (Hiszpania), Felipe Rodriguez Svensson i Branko
Lancaster (Holandia), MiguelcAngel Gallardo (Hiszpania),
High Kennedy i Lutz Frank (Niemcy), David Vinzetti (W³ochy), Harry Bush
i Marin Gabalis (£otwa), Zygimantas Cepaitis (Litwa), Piotr Suszkow
i Andriej Czernow (Rosja) oraz Alexander Smischlajev na Esperanto.
Peter Gutmann zaoferowa³ równie¿ przet³umaczenie na nowozelandzki angielski,
ale w koñcu postanowili¶my pozostaæ przy amerykañskim.

Jean-Loup Gailly, Mark Adler i Richard B. Wales opublikowali kod
kompresji ZIP oraz udzielili pozwolenia na jego wykorzystanie w PGP.
Algorytm MD5 zosta³ opracowany i udostêpniony jako jako w³asno¶æ publiczna
przez Rona Rivesta. Szyfr IDEA(tm) zosta³ opracowny przez Xuejia Lai
i Jamesa L. Massey'a w ETH w Zurychu, a pozwolenia na wykorzystanie
w PGP udzieli³ Ascom-Tech AG.

Charlie Merritt udzieli³ mi rad co do przystosowania arytmetyki
zmiennoprzecinkowej do potrzeb kryptografii publicznej, a Jimmy Upton
dostarczy³ szybszych algorytmów mno¿enia i mno¿enia modulo. Thad Smith
zaimplementowa³ jeszcze szybszy algorytm mno¿enia modulo. Zhahai Stewart
podzieli³ siê kilkoma przydatnymi uwagami na temat formatu PGP itp.,
na przyk³ad wiêcej ni¿ jednego identyfikatora u¿ytkownika. Pomys³
zaufanych sygnatorów kluczy podsun±³ mi Whit Diffie. Kelly Goen
wykona³ wiêkszo¶æ pracy w zakresie publikacji PGP 1.0.

Du¿± pomoc w przy pisaniu PGP okazali równie¿ Colin Plumb, Derek
Atkins i Castor Fu. Wysi³ków nie szczêdzili równie¿ Hugh Miller,
Eric Hughes, Tim May Stephen Neuhaus i zbyt wielu innych, bym móg³ ich
sobie w tym miejscu przypomnieæ. Pierwsza wersja MacPGP jest dzie³em
Zbigniewa Fiedorowicza.

Po wypuszczeniu PGP 2.0 wielu programistów przys³a³o uwagi o b³êdach
i pomog³o w przeniesieniu go na inne komputery. Jest ich zbyt wielu
by dziêkowaæ tutaj ka¿demu z nich.


O autorze
=========

Philip Zimmermann jest komsultantem oprogramowania z 19-letnim
sta¿em w zakresie przetwarzania w czasie rzeczywistym, kryptografii,
autoryzacji i przesy³ania danych. Ma na swoim koncie projekty
i implementacje systemów uwierzytalniaj±cych w sieciach wymiany
danych finansowych, bezpieczeñstwa w sieciach, protoko³ów zarz±dzania
kluczami, aplikacji wielozadaniowych pracuj±cych w czasie rzeczywistym,
systemów operacyjnych i sieci lokalnych.

Dopasowane do konkretnych wymagañ systemy kryptograficzne
i uwierzytelniaj±ce, jak NIST DSS, dostêpne s± u Zimmermana oraz
zespo³ów zajmuj±cych siê ich rozwojem. Adres firmy konsultingowej
Zimmermanna:

Boulder Software Engineering
3021 Eleventh Street
Boulder, Colorado 80304  USA
Phone: 303-541-0140 (10:00am - 7:00pm Mountain Time)
Fax: po porozumieniu telefonicznym
Internet:  prz@acm.org

                                                    



