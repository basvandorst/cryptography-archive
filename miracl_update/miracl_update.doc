MIRACL - Recent update History.

Version 3.21

    Implementation of DSS - Digital Signature Standard. See files dssgen.c
    dssign.c and dssver.c for details

    NEW! - Inline 80386 assembly language in mrarth1/2 for even faster
    performance. To make use of this feature you will need (a) an 80386/80486
    based PC, and (b) Borland C++ V3.1 compiler. This compiler supports 
    generation of 386 code via its -3 switch (unlike Microsoft C++ V7.0)

    Note:
    (1) Use mirdef.hpc version of mirdef.h header to compile programs.
    (2) Use precompiled bcs386.lib version of the library, compiled from 
        bcxdoit.bat batch file.

    Try fact386.exe and rat386.exe programs, compiled in this manner. Twice as 
    fast as factor.exe and ratcalc.exe on 386 machines
    512 bit RSA signature takes 0.25 second on 33MHz 486

Version 3.22

    C++ headers reorganised. Number.h completely re-written. New files 
    big.cpp, flash.cpp and number.cpp introduced, which must be linked in
    to programs which use them. Note that Big's and ZZn's can now co-exist 
    sensibly in the same programs. Tested with Borland C++ V3.1 and Microsoft
    C++ Version 7.0. See new brent.cpp for example of use.
    See big.h for new facilities available for C++ programmers    
    
    New Chinese Remainder Thereom Class. See crt.h and crt.cpp, and see 
    decode.cpp for example of use.

Version 3.23

    New example program brick.c (and brick.cpp) implements the Brickell et al.
    method of speeding up modular exponentiation, using precomputation.
    Useful for serious implementations of the DSS.

    10% speed optimization for powmod(). See comments in mrarth3.c

    New module shs.c - implements new Secure Hashing Standard. Now
    used with dssign and dssver programs.

Version 3.24

    Some small bugs squashed. Global POINT renamed to RPOINT.
    mralloc.c module introduced - contains all C memory allocation
    and deallocation code. Useful if you need to write your own for
    embedded applications, MSDOS pop-up TSR's, or whatever. 
    IBM RS/6000 processor now supported (see mrmuldv.any)

    New function powmod2(a,b,c,d,n,w);
    returns w=a^b.c^d mod n

    This is quicker than doing two modular exponentiations, and might be 
    useful for some Crypto protocols. See dssver.c and dssver.cpp

Version 3.25

    Portable version given some overdue attention. If using C only code
    then define PORTABLE in your mirdef.h. This implements the code
    for muldvd()/muldvm()/muldiv() in-line in some time-critical routines, 
    which is faster and gives an optimizing compiler something to chew on.
    If PORTABLE is defined, then mrmuldv.c is not needed in library.
  
    Big/Little Endian dependencies removed.

    NEW! Program config.c automatically generates a suitable mirdef.h header 
    file. Simply compile and run this standard C program on your computer.
    Header mirdef.h simplified. Configuration/Installation made easier.
    
Version 3.26

    All C I/O now via fputc() and fgetc().
    68020+ processors now supported. Tested on NEXT computer. See mrmuldv.any

    Montgomery's Method now fully assimilated into MIRACL in new module
    mrmonty.c 

    Seven  new functions:-

    void prepare_monty (big n)  
    - prepares for using Montgomery modulus n
    void nres(big x, big y) 
    - Converts x to n-residue format in y
    void redc(big x, big y) 
    - Converts from n-residue back to normal format.
    void nres_modmult(big x,big y,big w) 
    - returns w=x*y mod n, where n is current Montgomery modulus,
    void nres_moddiv(big x,big y,big w) 
    - returns w=x/y mod n, where n is current Montgomery modulus,
    void nres_powmod(big x,big y,big w)
    - returns w=x^y mod n, where n is current Montgomery modulus

    void monty_powmod(big x,big y,big n,big w)
    - returns w=x^y mod n. This is a direct plug-in alternative for powmod(),
      i.e. parameters do not need to be converted to/from n-residue form.

    See decode.c and decode.cpp for examples of use. Up to 20% faster.
    512-bit RSA signature now down to 0.2 second on 33MHz 486

    NEW! - monty.h and monty.cpp direct plug-in replacements for number.h 
           and number.cpp. Uses Montgomery arithmetic internally for ZZn type.
           No other changes required - see brent.cpp,lenstra.cpp, williams.cpp
           and pollard.cpp. Somewhat faster.

Version 3.27

    Routine expb2() replaced by expint(b,n,x), where a big x = int b to
    the power of int n. This in turn used to improve bigdig() which was 
    slow for larger numbers.
     
    NEW:- Comba Modular Multiplier - for the ultimate speed. See mrcomba.c 
    Increases speed of modular arithmetic cryptosystems such as RSA by
    up to 100%. This implements the multiplication/reduction code as inline
    assembly code. The Modulus size must be fixed at compile time, by setting 
    #define MR_WORDS_80X86 in mirdef.h to the required number of words. For 
    example set it to 16 for fast 512 bit exponentiation on an 80386

    Currently only supported on 80x86 platforms with Borland C compiler.
    To use:-

    (1) Before compiling the MIRACL library, specify MR_WORDS_80X86 in mirdef.h 
        to your required size. Note that 512 bit RSA decoding, requires 256 
        bit exponentiation (using the Chinese Remainder Thereom).
 
    (3) Use Montgomery representation when implementing your crypto-system
        e.g. use monty_powmod(). Make sure the modulus used is the same size
        as specified by MR_WORDS_80X86.
 
    Note that this module generates a *lot* of code e.g. > 49kbytes for 
    MR_WORDS = 32

    512-bit  2 prime RSA decrypt/signature - 0.038 seconds on 60MHz Pentium.
    1024-bit 2 prime RSA decrypt/signature - 0.205  seconds     "
    2048-bit 2 prime RSA decrypt/signature - 1.34  seconds     "

    Note: PGP takes 12 seconds on the same hardware to do a 2048 bit signature

Version 3.28

    Some internal functions renamed and pre-fixed to reduce chances
    of name clashes with system functions. For example lzero() renamed
    to mr_lzero(). This does not effect documentation, as these internal 
    routines were never documented.

    New 5-bit sliding window technique implemented in the powmod() and 
    monty_powmod() functions used by many Crypto algorithms. This is close 
    to optimal for popular modulus sizes (such as 512 or 1024 bits). Gives a 
    5% or so improvement. 

    Normal in-line assembly optimised for Pentium processor.     

    Fast modular multiplication and squaring code written to exploit 80x87 
    co-processor on 80486DX/Pentium. This can be faster than the integer 
    method introduced in version 3.27 (thanks to Paul Rubin who suggested
    this idea to me). This code is *experimental*. If used on a Pentium modular
    exponentiation will generally be faster, but other functions will be
    slower (as it cannot be used in conjunction will a full-width
    number base). Use with care.

    To use:-

    (1) Choose a suitable number base for specification in mirsys(...,xxx)
        where xxx is usually 2^28 or 2^29. See comments in mr80x87.c for 
        guidance.

    (2) Before compiling the MIRACL library, specify MR_PENTIUM in mirdef.h. 
        (Note: config.c can be used to automatically generate a suitable 
        mirdef.h, and advise on the number base to be used - see step (1))  

    (3) Use Montgomery representation when implementing your crypto-system
        e.g. use monty_powmod().

    A problem has been found when using the 16 bit Borland C compiler in 
    32-bit mode (using mirdef.hpc and in-line 386 code). Sometimes big number 
    arrays are aligned on 32-bit boundaries, and sometimes they are not. If 
    they are, things run much faster. To work-around, include a variable at 
    the head of your main program

    static int PADDING;

    By including or deleting this declaration, the program may run faster/
    slower. Experiment.

    FINALLY - Got our hands on a the tools needed to generate protected mode
    (true 32-bit) executables with Borland C++. Requires Borland PowerPack
    for DOS (a so-called DOS extender), and the lastest version of TASM, which 
    supports the TASM32 utility. Using the 32-bit BCC32 -WX compiler, which 
    comes with Borland C++ V4.02+, and mirdef.h32 with MR_PENTIUM defined, the 
    fastest execution times on a PC have been achieved.

    1024-bit 2 prime RSA decrypt/signature - 0.14 seconds on 60MHz Pentium
    2048-bit 2 prime RSA decrypt/signature - 0.82 seconds     "
    4096-bit 2 prime RSA decrypt/signature - < 5  seconds     "

