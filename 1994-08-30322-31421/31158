Path: msuinfo!netnews.upenn.edu!dsinc!newsfeed.pitt.edu!gatech!newsxfer.itd.umich.edu!europa.eng.gtefsd.com!howland.reston.ans.net!swrinde!elroy.jpl.nasa.gov!netline-fddi.jpl.nasa.gov!nntp-server.caltech.edu!news.cerf.net!biivax.dp.beckman.com!dsg4.dse.beckman.com!a_rubin
Newsgroups: sci.crypt,sci.math
Subject: Re: P = NP? (was : How safe is RSA?)
Message-ID: <a_rubin.777834288@dsg4.dse.beckman.com>
From: a_rubin@dsg4.dse.beckman.com (Arthur Rubin)
Date: 25 Aug 94 17:04:48 GMT
References: <33bl3c$jj@linus.mitre.org> <strnlghtCv00G5.J6I@netcom.com><33dkh3$pl8@linus.m
   itre.org> <33e9m1$cee@agate.berkeley.edu><EACHUS.94Aug24114645@spectre.mitre
 .org><a_rubin.777759241@dsg4.dse.beckman.com> <EACHUS.94Aug24191851@spectre.mitre.org>
Organization: Beckman Instruments, Inc.
Nntp-Posting-Host: dsg4.dse.beckman.com
Lines: 49
Xref: msuinfo sci.crypt:31158 sci.math:78862

In <EACHUS.94Aug24191851@spectre.mitre.org> eachus@spectre.mitre.org (Robert I. Eachus) writes:


>   I said:

>   >                         (One of the worst features of P=NP, is that,
>   > if it is unprovable, you cannot prove that it is unprovable.)

>In article <a_rubin.777759241@dsg4.dse.beckman.com> a_rubin@dsg4.dse.beckman.com (Arthur Rubin) writes:

>  > I know what that means, but I'm not sure it's correct.  Can you explain in
>  > more detail?

>   Assume there exists a proof that P=NP is undecidable.  Then there
>no algorithm can exist that solves an NP-complete problem in P-time,
>since the existance of such an algorithm would mean that a proof that
>P=NP was possible.  But if no such algorithm can exist, then P/=NP.

>    Daniel Jimenez countered this earlier today, by saying that maybe
>the algorithm exists but you can't prove that it works in P-time.
>However, I think the shoe is on the other foot, again via
>counterexamples.  If there is such an algorithm it could be used to
>find any counterexamples for which it took longer than P-time.
>(Finding such a counterexample would be in NP.  "Find an input N for
>algorithm K for which the number of steps required is greater than
>some polynomial f(length(N))..." And if there are no counterexamples,
>P is proved to be equal NP whether or not that particular algorithm is
>in P-time.)  The actual polynomial doesn't matter to the proof, since
>I can assume, for the purpose of my proof, that I guess it correctly.

I see.  If there is a model of (Peano) Arithmentic in which P=NP, then
there is a P algorithm for (say) 3-SAT, one of the NP-complete problems,
with a bound p(n)....but if p has "infinite" coefficients, or "a" is
"infinite", then the proof doesn't transfer directly.

In other words, "P=NP" can be written as:

there exists an algorithm (coded by an integer "a", and a polynomial P
(coded by an integer "p"), such that for any input S of length n (coded by
a single integer), "a" applied to S produces the same answer as 3-SAT
applied to S within time p(n)

so "P=NP" is a Sigma-2 statement.  I don't think it the case that all
sigma-2 statements transfer in the form, "if undecidable, then true".
--
Arthur L. Rubin: a_rubin@dsg4.dse.beckman.com (work) Beckman Instruments/Brea
216-5888@mcimail.com 70707.453@compuserve.com arubin@pro-sol.cts.com (personal)
My opinions are my own, and do not represent those of my employer.
on vacation, without net access, Aug 25:2330 Z - Sept 12:1600 Z
