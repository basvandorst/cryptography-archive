Path: msuinfo!harbinger.cc.monash.edu.au!news.cs.su.oz.au!metro!inferno.mpx.com.au!spectrum.apana.org.au!triode.apana.org.au!not-for-mail
From: cskinner@triode.apana.org.au (Christopher T Skinner)
Newsgroups: sci.crypt,alt.security.pgp
Subject: Re: Cracking Military RSA
Followup-To: sci.crypt,alt.security.pgp
Date: 18 Aug 1994 01:07:38 +1000
Organization: Paul Black's Linux Node
Lines: 67
Message-ID: <32t93q$k5h@triode.apana.org.au>
References: <32k40g$39k@zippo.uwasa.fi> <jQGJkOwscgnS070yn@io.org>
NNTP-Posting-Host: localhost.apana.org.au
X-Newsreader: TIN [version 1.2 PL2]
Xref: msuinfo sci.crypt:30890 alt.security.pgp:19121

re: Factoring Large integers, and hence cracking "mil" pgp
Although the following reference discusses Discrete Logs, the heuristic 
is the same for factoring, so we can estimate the work required:

  Gordon D M  (Athens Georgia) Discrete Logarithms in GF(p) using
       the Number Field Sieve  revised Feb1992
       Siam J Disc Math v6 n1 pp124-138 Feb 1993
  DG says: "The general nfs is definitely not practical for any
       reasonable numbers"  {but see Buchmann et al in Crypto 93}
  There is some argument as to whether all these attacks use 
index-calculus, ie factor base attacks, which rely on the multiplicity of 
exponentiation methods. As far as I can see they all do, (except LUCdif).

  Work Function: (very roughly the number of Machine Instructions)

      Ln[a,b] = e^((b+o(1))(lnx^a.lnlnx^(1-a))

  a) Gaussian Integer method Lp[1/2,1]
  b)        special-nfs with Lp[2/5,1.00475]  (Special p only)
            f(m) = 0 mod p, f is monic with small coefficients
            typically r^e - s = 0  mod p
  c)        general-nfs with Lp[1/3,b]   b = 3^(2/3) = 2.080
  d)                   Coppersmith-nfs   b = 1.902
  e)               Lenstra-Adelman-nfs   b = 1.92
  f) LUCdif, work = p^(1/5)  LUC used in the analogous method to 
             Diffie-Hellman (DH) is NOT subject to index calculus so
             may be Much stronger than DH or "DSS". We assume the best 
             attack on LUCdif is a fifth power, but who knows?  

       Work Functions:

     bits  a        b        c        d        e        f       decimal
     428   7.0E17   1.2E12   1.6E19   3.7E17   5.4E17   5.9E25  129
     512   6.7E19   1.6E13   6.6E20   1.1E19   1.6E19   6.7E30  154
     584   2.6E21   1.3E14   1.2E22   1.5E20   2.4E20   1.4E35
     656   8.1E22   9.1E14   1.7E23   1.8E21   2.8E21   3.1E39
     728   2.2E24   5.7E15   2.2E24   1.8E22   2.9E22   6.8E43
     768   1.3E25   1.5E16   8.2E24   6.0E22   9.9E22   1.7E46
     872   1.0E27   1.7E17   2.2E26   1.2E24   2.1E24   3.2E52
    1024   4.4E29   4.4E18   1.8E28   6.8E25   1.2E26   4.5E61
    1088   5.0E30   1.6E19   1.0E29   3.3E26   5.9E26   3.2E65
    1152   5.3E31   5.7E19   5.4E29   1.5E27   2.8E27   2.3E69
    1344   4.6E34   2.0E21   6.1E31   1.2E29   2.2E29   8.3E80
    1448   1.5E36   1.2E22   6.6E32   1.0E30   2.0E30   1.5E87
    1512   1.2E37   3.6E22   2.7E33   3.7E30   7.2E30   1.1E91
    1576   9.3E37   1.0E23   1.1E34   1.3E31   2.6E31   7.7E94
    1640   6.9E38   2.9E23   4.2E34   4.5E31   9.0E31   5.5E98
    2048   1.2E44   1.4E26   1.1E38   6.3E34   1.4E35   2.0E123

  LUCDif at 512 bits is stronger than a) at 1024 bits
                                      c) at 1152 bits
                                      d) at 1512 bits
                                      e) at 1448 bits

  Currently the biggest effort is 5000 MIP years to factor RSA-129
  = 428 bits   5000MIP years = 1.6E17 operations (Machine Instructions)
  which is close to the 7.0E17 estimate a)  - a multiple of 4 is
  considered close in these estimates.
  If the number of MIPS doubles every 1.5 years,
  in 10 years we can expect 1.6E19 operations to be possible
              - this looks like mil-pgp vulnerable in 10 years
                or 100 times the recent 1600 box effort.
  in 30 years we can expect 1.6E23 operations
  in 45 years we can expect 1.6E26 operations
---------------------------------------------------------------------
C.T.Skinner NSW 

