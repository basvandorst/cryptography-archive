Path: msuinfo!agate!darkstar.UCSC.EDU!news.hal.COM!olivea!koriel!cs.utexas.edu!usc!nic-nac.CSU.net!charnel.ecst.csuchico.edu!yeshua.marcam.com!zip.eecs.umich.edu!newsxfer.itd.umich.edu!uunet!munnari.oz.au!newshost.anu.edu.au!dubhe.anu.edu.au!nunki.anu.edu.au!not-for-mail
From: jmr@cs.anu.edu.au (Mike Robson)
Newsgroups: sci.crypt,sci.math
Subject: Re: P = NP? (was : How safe is RSA?)
Date: 26 Aug 1994 09:57:53 +1000
Organization: Australian National University
Lines: 53
Message-ID: <33jb61INN1jg@nunki.anu.edu.au>
References: <33bl3c$jj@linus.mitre.org> <strnlghtCv00G5.J6I@netcom.com><33dkh3$pl8@linus.m 	itre.org> <33e9m1$cee@agate.berkeley.edu> 	<EACHUS.94Aug24114645@spectre.mitre.org> 	<a_rubin.777759241@dsg4.dse.beckman.com> 	<EACHUS.94Aug24191851@spectre.mitre.org> <MITCHELL.94Aug25134128@leadbelly.math.ufl.edu>
NNTP-Posting-Host: nunki.anu.edu.au
Xref: msuinfo sci.crypt:31182 sci.math:78896

mitchell@leadbelly.math.ufl.edu (Bill Mitchell) writes:


>In article <EACHUS.94Aug24191851@spectre.mitre.org> eachus@spectre.mitre.org (Robert I. Eachus) writes:

>>    Assume there exists a proof that P=NP is undecidable.  Then there
>> no algorithm can exist that solves an NP-complete problem in P-time,
>> since the existance of such an algorithm would mean that a proof that
>> P=NP was possible.  But if no such algorithm can exist, then P/=NP.
>> 
>>     Daniel Jimenez countered this earlier today, by saying that maybe
>> the algorithm exists but you can't prove that it works in P-time.
>> However, I think the shoe is on the other foot, again via
>> counterexamples.  If there is such an algorithm it could be used to
>> find any counterexamples for which it took longer than P-time.
>> (Finding such a counterexample would be in NP.  "Find an input N for
>> algorithm K for which the number of steps required is greater than
>> some polynomial f(length(N))..." 


>No.  Finding a counterexample of length n is NP in the input n.  In
>order to naively check that a proposed poly time algorithm is really
>poly time (and for that matter, to check that it solves the given
>problem) you have to check all possible inputs.  There's no complexity
>involved.



>Bill 
>--

>    Bill Mitchell
>    Dept of Mathematics
>    The University of Florida
>    mitchell@math.ufl.edu	(904) 392-8123

>



It is the correctness of the algorithm that is the crux of this, not its
polytimeness. This is because if there exists an algorithm A to solve SAT
(say) in time p, there is an algorithm A' which solves SAT and provably
runs in poly time (Simply run A while keeping a count of the number of
steps taken; if that number exceeds p(|input length|) return an arbitrary
result.)  
A' provably runs in poly time and actually always returns the same result as A.
However even if A provably solves SAT, we might be unable to prove the fact
that A' does (if we can't prove that A runs in time p).


Mike Robson

