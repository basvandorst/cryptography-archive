Path: msuinfo!agate!darkstar.UCSC.EDU!news.hal.COM!olivea!charnel.ecst.csuchico.edu!yeshua.marcam.com!MathWorks.Com!europa.eng.gtefsd.com!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson; CMSC (G))
Newsgroups: sci.crypt,sci.math
Subject: Re: P = NP? (was : How safe is RSA?)
Followup-To: sci.crypt,sci.math
Date: 25 Aug 1994 21:22:26 GMT
Organization: University of Maryland, Baltimore County
Lines: 46
Message-ID: <33j22i$466@news.umbc.edu>
References: <EACHUS.94Aug24191851@spectre.mitre.org>
NNTP-Posting-Host: umbc7.umbc.edu
X-Newsreader: TIN [version 1.2 PL2]
Xref: msuinfo sci.crypt:31178 sci.math:78883

In consideration of his claim that

    If P=NP is (true and) unprovable, 
    then there is no proof that it is unprovable,

Robert I. Eachus (eachus@spectre.mitre.org) wrote:

:    Assume there exists a proof that P=NP is undecidable.  Then there
: no algorithm can exist that solves an NP-complete problem in P-time,
: since the existance of such an algorithm would mean that a proof that
: P=NP was possible.  But if no such algorithm can exist, then P/=NP.

:     Daniel Jimenez countered this earlier today, by saying that maybe
: the algorithm exists but you can't prove that it works in P-time.

Or maybe you can't prove it's correct.

: However, I think the shoe is on the other foot, again via
: counterexamples.  If there is such an algorithm it could be used to
: find any counterexamples for which it took longer than P-time.
: (Finding such a counterexample would be in NP.  "Find an input N for
: algorithm K for which the number of steps required is greater than
: some polynomial f(length(N))..." And if there are no counterexamples,
: P is proved to be equal NP whether or not that particular algorithm is
: in P-time.)  The actual polynomial doesn't matter to the proof, since
: I can assume, for the purpose of my proof, that I guess it correctly.

I'm not convinced.  What NP language are you recognizing ?

I agree that if any NP-c language can be recognized in poly-time, then
for any NP language there exists a poly-time recognizer.

The logic here is very tricky.  We want to consider an algorithm which
is a poly-time recognizer for an NP-C language.  In the proof we have
to allow that it will always be correct and poly-time, but we can't
use the assumption that it is correct or poly-time.  I suggest the
following formulation:

Suppose you have an oracle who, for any NP language will give you
something he claims is a poly-time recognizer for that language.  How
would you proceed so that if the oracle did what he claimed, then you
would end up with a proof that P=NP ?  You are not, of course, allowed
to take the correctness of the oracle as a given.

--Bryan

