Path: msuinfo!uwm.edu!cs.utexas.edu!not-for-mail
From: ritter@io.com (Terry Ritter)
Newsgroups: sci.crypt
Subject: Re: weak encryption+compression+strong encryption=???
Date: 31 Jul 1994 23:56:27 -0500
Organization: UTexas Mail-to-News Gateway
Lines: 123
Sender: nobody@cs.utexas.edu
Message-ID: <199408010456.XAA18796@pentagon.io.com>
NNTP-Posting-Host: news.cs.utexas.edu

 In <31h86q$o2f@senator-bedfellow.MIT.EDU>
 solman@athena.mit.edu (Jason W Solinsky) writes:


>|>  Yes, I mean that any cipher which produces 64-symbol ciphertext
>|>  will produce compressable ciphertext.
>
>But why would you be producing 6 bit symbols if your communications channel
>takes 8 bit symbols? Is there some sort of efficiency gain that offsets the
>cost of an additional compression run? Is it a good idea to keep the fiber
>optics from feeling lonely by making sure that they constantly have bits
>flowing through them? :-)

 I suppose it may come as something of a shock to realize that many
 current communication systems transport only "7-bit" ASCII, not
 full 8-bit binary.  That's why we have UUENCODEing.  Existing
 corporate email systems often have this limitation.  So, my
 Penknife email system is designed to produce "6-bit" ASCII.

 Given that the output is 6-bit, there is no particular reason
 why the cipher algorithm necessarily need be an 8-bit algorithm
 throughout.


>Well, there are some of us who were fourteen when you filed that patent
>and have become interested in cryptography much more recently. (well at
>least one, anyway) And I have missed any mention of your cipher in the
>books and journal articles I have read since I first needed to use serious
>cryptography for the program I am writting, so I am interested in the
>details.

 OK.  Dynamic Substitution.  One of the few nonlinear stream-cipher
 combiners:

 The usual stream cipher combines data (plaintext) with a confusion
 sequence (running key) with an additive combiner (usually XOR) to
 get ciphertext.  This is fast and easy, but an additive combiner
 has virtually no strength at all under a "known plaintext" attack:

 We assume that The Opponent has some amount of both plaintext and
 the associated ciphertext.  The Opponent can then XOR these values
 together and find the confusion sequence.  Since the confusion
 sequence is produced by some sort of state machine (random number
 generator, RNG), the design of which we assume The Opponent knows,
 it may be possible for The Opponent to develop the internal state
 of the RNG, and thus break the cipher.

 The simple exclusive-OR combiner is both absolutely linear and
 stateless.  So I started looking for a nonlinear replacement with
 state which was still fast and, of course, reversible.  (It does
 little good to encipher data if the ciphertext cannot be
 deciphered later.)  I tried a lot of things which did not work.

 Eventually I came up with the idea of first using Simple
 Substitution to transform data into ciphertext, and then changing
 the content of the substitution table.  The suggested approach is
 to exchange the just-used entry with some entry selected "at
 random."  Thus, the table permutation changes through time.

 The typical form of Dynamic Substitution works like this:  First
 we take a plaintext value (for example, a byte), and translate
 that into a ciphertext value using an invertible substitution
 table; this "selects" one entry in the table.  Then we "select"
 an entry with a byte from a stream-cipher confusion stream.  Then
 we exchange the selected entries (or not, if they are both the
 same).

 The point of this is to destroy the usual weakness of Simple
 Substitution:  In Dynamic Substitution, the statistical frequency
 relationship among plaintext symbols is not retained in the
 ciphertext.  Whenever we use a substitution element it changes,
 and the more often we use it, the more often it changes.  Thus,
 even if The Opponent can identify a particular translation, it
 is immediately "changed" (that is, it subsequently contains an
 equal probability of being any symbol value).  Moreover, the
 confusion sequence is "hidden" in the changing table.  And if
 *either* input to the combiner is random-like, the output will be
 random-like (the data input can be fixed, constant, and the output
 will still be random-like).

 Deciphering is possible by creating an inverse table, and permuting
 it to retain the inverse property after each translation (this takes
 just another exchange, provided we can identify the elements to
 exchange, and this requires a forward table).

 The result is a fairly-fast, nonlinear, stream-cipher combiner with
 internal state, which is far stronger than exclusive-OR.  Certainly,
 "known plaintext" does not immediately reveal the confusion sequence
 into a Dynamic Substitution combiner, the way exclusive-OR does.
 Moreover, it now makes sense to use multiple DynSub combiners in
 sequence, or select one from an array of DynSub combiners, or both,
 opportunities which make very little sense for exclusive-OR.

 Precisely because Dynamic Substitution table permutations change
 through time it was interesting to consider the implication to a
 "re-originating" stream cipher, as might be applied at the data-
 transport level in, for example, TCP/IP.  The Penknife cipher
 re-originates on each and every ciphertext line.  This makes the
 cipher error-resilient, in that any possible ciphertext error
 is ended by the next error-free line.  And the independence of
 ciphertext lines means that the system can easily support the
 concatenation of ciphertext both when adding keys to an enciphered
 key file (alias file), and when creating a message archive.
 In the case of TCP/IP, frames could arrive out of sequence, be
 independently deciphered and then re-sequenced as necessary.
 This is often a block cipher application, but I have a reasonable
 stream-cipher approach, with much greater speed.  Of course, this
 is hardly the only possible approach.

 I hold the patent on Dynamic Substitution, and license that
 technology, and any ciphers built with that technology, as well as
 my other state-of-the-art ciphers.  Anyone seriously interested in
 obtaining rights to use my products, or in investigating my custom
 design or consulting services, should email me their name and
 business address for one of my brochures.

 I will also re-post the Penknife design document, which itself
 contains a short description of Dynamic Substitution.

 ---
 Terry Ritter   ritter@io.com


