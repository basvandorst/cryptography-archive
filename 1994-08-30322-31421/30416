Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!news.tamu.edu!news.utdallas.edu!wupost!news.bridge.com!ken
From: ken@bridge.com (Ken Hardy)
Newsgroups: comp.security.misc,sci.crypt
Subject: key exchange sans patent encumberance?
Date: 2 Aug 1994 16:35:14 GMT
Organization: Planet Earth
Lines: 24
Message-ID: <31lsk2$1ua@news.bridge.com>
NNTP-Posting-Host: ernie.bridge.com
X-Newsreader: TIN [version 1.2 PL2]
Xref: msuinfo comp.security.misc:11064 sci.crypt:30416

It's straight-forward enough to do user authentication without sending
a password in either plain- or cyphertext.  But how can a remote user
_set_ his password on a central system without eavesdroppers being able
to see the new password?  It must be transmitted to the central system
for subsequent authentications.

Diffie-Hellman obviously suggests itself.  Any of a number of public-key
algorithms could be adapted to the purpose of encrypting a password for
exchange.  But it looks as if _all_ public key algorithms are patented, as
is Diffie-Hellman.  Am I missing something?

What are my choices if I want to avoid any and all patent encumberances?
(Note that this is coming from a .com address.)  It's needed for an app.
that is likely to be exported, so the algorithm(s) need to be free & clear
in US, Europe, & beyond.  (ITAR regulations are another matter.)

I loathe using a secret key hardcoded into the remote program (it's a
program loggin in, not a human, though a human may need to be able to
enter and change a password or passphrase.)  Any suggestions for making
this more palatable, if it's my only choice?

----__-_____--__-__--_--__-___-__-__-___------

-KH
