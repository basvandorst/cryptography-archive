Newsgroups: sci.crypt,sci.math
Path: msuinfo!agate!spool.mu.edu!bloom-beacon.mit.edu!galois!tycchow
From: tycchow@math.mit.edu (Timothy Y. Chow)
Subject: Re: P = NP? (was : How safe is RSA?)
Message-ID: <1994Aug25.191514.593@galois.mit.edu>
Sender: usenet@galois.mit.edu
Nntp-Posting-Host: severi
Organization: None.  This saves me from writing a disclaimer.
References: <33bl3c$jj@linus.mitre.org> <EACHUS.94Aug24114645@spectre.mitre.org> <a_rubin.777759241@dsg4.dse.beckman.com> <EACHUS.94Aug24191851@spectre.mitre.org>
Date: Thu, 25 Aug 94 19:15:14 GMT
Lines: 43
Xref: msuinfo sci.crypt:31171 sci.math:78877

In article <EACHUS.94Aug24191851@spectre.mitre.org>,
Robert I. Eachus <eachus@spectre.mitre.org> wrote:

>   I said:
>   >                         (One of the worst features of P=NP, is that,
>   > if it is unprovable, you cannot prove that it is unprovable.)

As it stands, what you say is not peculiar to P = NP.  Assume ZFC is
consistent.  If S is any statement that is undecidable in ZFC, then
ZFC cannot prove that S is undecidable in ZFC, because that would 
be a proof of Con(ZFC) within ZFC.

Based on your further explanation, I think what you want to say is that
if P != NP is undecidable, then it is true.  Your argument is that if
P = NP then this fact could then be explicitly verified and therefore
provable.

>    Daniel Jimenez countered this earlier today, by saying that maybe
>the algorithm exists but you can't prove that it works in P-time.
>However, I think the shoe is on the other foot, again via
>counterexamples.  If there is such an algorithm it could be used to
>find any counterexamples for which it took longer than P-time.
>(Finding such a counterexample would be in NP.  "Find an input N for
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>algorithm K for which the number of steps required is greater than
>some polynomial f(length(N))..." And if there are no counterexamples,
>P is proved to be equal NP whether or not that particular algorithm is
>in P-time.)  The actual polynomial doesn't matter to the proof, since
>I can assume, for the purpose of my proof, that I guess it correctly.

The underlined portion is what I'm not completely convinced of.  Actually,
you only need to show that there is *some* algorithm (it doesn't have to
be the one that you use to exhibit P = NP) that verifies in finite time
that there are no counterexamples.  Certainly there is no *general*
algorithm that, given any algorithm and any polynomial as input, verifies
that the algorithm takes no longer than the given polynomial indicates
(in particular, this would solve the halting problem).  So how do we
know that there is an algorithm in this particular case?
-- 
Tim Chow     tycchow@math.mit.edu
Where a calculator on the ENIAC is equipped with 18,000 vacuum tubes and weighs
30 tons, computers in the future may have only 1,000 vacuum tubes and weigh
only 1 1/2 tons.                               ---Popular Mechanics, March 1949
