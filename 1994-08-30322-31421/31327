Newsgroups: sci.crypt
Path: msuinfo!agate!darkstar.UCSC.EDU!news.hal.COM!decwrl!netcomsv!netcom.com!netcom9!mjohnson
From: mjohnson@netcom9.netcom.com (Mark Johnson)
Subject: Re: Random character generator
In-Reply-To: marco@suncis.epm.br's message of 29 Aug 1994 06:45:44 -0500
Message-ID: <MJOHNSON.94Aug29091642@netcom9.netcom.com>
Sender: mjohnson@netcom.com (Mark Johnson)
Organization: Netcom, where Usenet costs only 19 dollars a month
References: <9408291142.AA03372@suncis.epm.br>
Date: Mon, 29 Aug 1994 16:16:42 GMT
Lines: 40


In article <9408291142.AA03372@suncis.epm.br> marco@suncis.epm.br (Palindrome  ) writes:
   >Hello, I am wondering where I could find a good random character
   >generator. Security is a concern, speed is NOT.


Given a stream of "good" random bits, it is trivially easy to create "good"
random characters (say the words ASCII Table twenty times and you'll
begin to see how).

How do you generate a stream of "good" random bits, then?  Since speed
is NOT a concern,

   1. Roll a 6-sided die.  If the uppermost face shows "1", "3", or "5",
      record the random bit 1.  Otherwise record the random bit 0.
      Repeat as often as necessary.

   2. Shuffle a standard deck of 52 cards.  Draw a card at random.  If its
      suit is clubs or spades, record the random bit 0.  Otherwise record
      the random bit 1.  Repeat as often as necessary.

   3. Throw a dart at the New York Stock Exchange listing of prices
      in your daily newspaper.  Whatever line the dart lands upon,
      compare the closing price of that stock, to the closing price
      of the stock on the line immediately above.  If the dart stock
      closing price is greater than the closing price of the stock
      immediately above, record the random bit "0".  Otherwise
      record the random bit 1.  Repeat as often as necessary.

   4. Go to the library or the bookstore and obtain a copy of "Codes and
      Cryptography" by Dominic Welch (Oxford Univ Press).  Read the
      section on Cryptographically Strong Random Number Generators.
      In the programming language of your choice, implement the Blum,
      Blum, and Shub algorithm as described by Welch.

   5. Watch the Usenet newsgroup "sci.crypt" for sporadic announcements
      of source code availability by ftp from Michigan State University.
      They have an implementation of the Blum, Blum, and Shub
      algorithm already written.  It is very slow (tens of bits per
      second).  It is cryptographically strong.
