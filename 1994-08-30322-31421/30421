Path: msuinfo!agate!darkstar.UCSC.EDU!news.hal.COM!olivea!charnel.ecst.csuchico.edu!nic-nac.CSU.net!usc!howland.reston.ans.net!spool.mu.edu!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!athena.mit.edu!thomasc
From: thomasc@athena.mit.edu (Thomas Wallace Colthurst)
Newsgroups: sci.crypt
Subject: Non-RSA Public Key Algorithms Wanted (long, summary)
Date: 2 Aug 1994 18:37:56 GMT
Organization: Massachusetts Institute of Technology
Lines: 98
Distribution: world
Message-ID: <31m3q4$fon@senator-bedfellow.MIT.EDU>
References: <199407240659.BAA07115@pentagon.io.com> <3120hb$t1u@news1.svc.portal.com> <EACHUS.94Jul29215646@spectre.mitre.org> <31gpqa$dv2@news1.svc.portal.com>
NNTP-Posting-Host: m66-080-1.mit.edu

I would like to thank everyone who responded for their very helpful
comments.  Besides those summarized below, Bruce Schneier pointed out
that his book, "APPLIED CRYPTOGRAPHY", covers many non RSA public
key algorithms in chapter XII, including Diffie-Hellman, Knapsack Algorithms,
Pohig-Hellman, Rabin, and Feige-Fiat-Shamir.  I would also like
to thank Jason Solinsky for his help.

-Thomas C

---------------------------------------

From: mpj@netcom.com (Michael Paul Johnson)

Elliptic curve cryptosystems are good alternatives to RSA for public key 
systems, technically.  RSADSI asserts (probably falsely) that this, too, 
violates their patents.  There is a whole book on Elliptic Curve 
cryptosystems and several magazine articles, but I don't have the 
references handy.

The private key side is easier.  I recommend using Diamond or Triple DES 
instead of IDEA to avoid patent problems.  See 
ftp://ftp.csn.net/mpj/I_will_not_export/crypto_???????/mpj/dlock.zip for 
more information on Diamond.  See ftp://ftp.csn.net/mpj/README.MPJ 
for the ???????.

There are two reasons to hash before encrypting with your private key for 
authentication purposes:  (1) to save time, and (2) to avoid certain 
weaknesses in RSA that get exposed if you encrypt the same text with both 
your public and private keys.  With kilobyte messages and kilobit keys, 
you will save time with the hash, since it would take about 8 
time-consuming RSA encryptions instead of just one with the hash.  Reason 
2 can also be avoided by using a separate key pair for authentication and 
for encryption.

------

From: rosingmg@ranger.rtsg.mot.com (Mike G. Rosing)

Tom,
	I have implemented an elliptic curve public key system described
in various journal articles and the book "Elliptic Curve Crypto Systems"
published by Klewer.  The authors of the book suggest that elliptic curves
are more robust than RSA, but they admit the math is slower.  For the public
key part, this is not that big a fraction of the compute time for message
transfers, especially at the 1K level.

As for hashing, you don't want to do that if you intend to recover the data!
However, you may wish to add an error correction scheme in which case something
similar to a hash could be generated.  usually, that's done at the hardware
level, or at least well removed from the original data.

What most encryption systems do is compress the data to remove as much
redundancy as possible (the zip type systems do this amazingly well).
This reduces the information content to the absolute minimum entropy possible.
The output of this compression is encrypted using the symetric key.

If you're interested in elliptic curve systems, I'll be happy to help you
get going with it.  The math is pretty deep, but I'm comfortable with it.
It does actually work!

---------

From: "Robert I. Eachus" <eachus@spectre.mitre.org>

   Check out:

A Simple Unpredictable Pseudo-Random Number Generator, by L. Blum, M.
Blum, and M. Shub, SIAM Journal of Computing, Vol 15, No. 2, May 1986.

   This paper shows how to use discrete logs in a PK cryptosystem.
(Latter related papers make the system more efficient, etc.  But this
covers the core.)

    The disadvantages of BBS compared to RSA are first that the
message length is larger that the message by N bits, and that it is
not as useful for digital signatures.  (Again the problem is message
extension.   Hmmm...just came up with an idea which would make BBS
digital signatures more expensive (in compute time) but eliminate the
expansion problem.)

-------------

From: rpl@dsg.npl.co.uk (Richard Lampard)

Thomas,

ElGamal, which is based upon discrete logs, is explained in:

ElGamal T. A Public Key Cryptosystem and a Signature Scheme Based on Discrete 
Logarithms. IEEE Trans on Information Theory IT-31, 4, July 1985.

McCurley proposes a variation on ElGamal in:

McCurley K S. A Key Dsitribution System Equivalent to Factoring. Journal of 
Cryptology 1, 2. 1988

The latter combines the difficulties of both factoring and computing discrete 
logs in order to increase security. 
