Path: msuinfo!agate!howland.reston.ans.net!gatech!news-feed-1.peachnet.edu!emory!slammer!iccdev!ftl!tim.farley
From: tim.farley@ftl.atl.ga.us (Tim Farley) 
Newsgroups: sci.crypt
Subject: ID of this crypto algorithm?
Message-ID: <7147.1454.uupcb@ftl.atl.ga.us>
Date: 6 Aug 94 12:07:00 GMT
Distribution: world
Organization: Faster-Than-Light, Atlanta GA USA, 404-292-8761
Reply-To: tim.farley@ftl.atl.ga.us (Tim Farley) 
Lines: 74

Time to play some Crypto-Jeopardy for you algorithm experts out
there!

I'm in the process of reverse-engineering a software product.
This product is known to use some encryption algorithms.

I'm reverse-engineering it for informational purposes (I'm
writing a book about this product) and am mainly interested in
just what algorithms it uses, not stealing any secrets or
anything like that.

Now, there are copyright notices on this product that indicate it
uses technology licensed from RSA Data Security, Inc.  So I
suspect that the encryption algorithm(s) contained within are RSA
algorithms anyway, which probably means they are public (and
possibly patented).  Therefore it surely won't hurt anyone if I
identify which algorithm is being used.

Anyway, I'm trying to figure out which algorithm it is without
going through the gory detail of laboriously reverse engineering
all the subroutines.  If you've ever looked at the assembly code
for encryption algorithms, its incredibly tedious stuff!

There is a 256-byte seemingly random table of bytes that gets
XOR'ed a byte at a time into something somewhere deep in the
algorithm.  It's obviously some sort of permutation table or
"s-box" sort of thing.

It occurred to me that someone who is familiar with the RSA
algorithms (or crypto algorithms in general) might be able to
tell me which algorithm this is just by seeing the table.
Knowing a little bit about other algorithms like DES that use
such tables, I know I can sometimes recognize the code just from
references to the table.

Anyone out there up to this challenge?  If so....

Here are the first 16 octets of the table, in hexadecimal:

BDh, 56h, EAh, F2h, A2h, F1h, ACh, 2Ah
B0h, 93h, D1h, 9Ch, 1Bh, 33h, FDh, D0h

Here are the last 16 octets of the table, in hexadecimal:

A7h, 1Ch, C9h, 09h, 69h, 9Ah, 83h, CFh
29h, 39h, B9h, E9h, 4Ch, FFh, 43h, ABh

I suspect that this is some sort of digital signature algorithm
or one-way hash, as it is used in a program that has to do with
identity authentication.  But it might be a block or stream
cipher.

I looked at the source code to both PGP 2.3 and PGP 2.6 (with
RSAREF) and neither contains a table similar to the one I am
trying to identify.

So far, I think I have eliminated the following algorithms as
possible suspects:

MD2
MD4
MD5
DES
NEWDES

Plus of course there are whole classes of algorithms that do not
use fixed permutation tables or s-boxes at all, such as IDEA,
that this clearly cannot be part of.

OK, you crypto-experts out there:  what algorithm is this?

--Tim Farley
76711.1175@compuserve.com

