Newsgroups: sci.crypt
Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!uhog.mit.edu!europa.eng.gtefsd.com!howland.reston.ans.net!pipex!uknet!cix.compulink.co.uk!klockstone
From: klockstone@cix.compulink.co.uk ("Keith Lockstone")
Subject: Re: PKZip Encryption
Message-ID: <CvBqz5.EGx@cix.compulink.co.uk>
Organization: Compulink Information eXchange
References: <33kdni$on@gco.apana.org.au>
Date: Tue, 30 Aug 1994 01:33:04 GMT
Lines: 141


For those interested in details of the latest PKZIP encryption 
scheme, here is an edited version of a document called 
APPNOTE.TXT from PKWARE's area on Compu$erve.  If you want the 
full document (about 1000 lines) I'll be pleased to email anybody 
a copy.
 
Regards,  Keith.
 
-----------------------------------------------------------------
  .
  .
  .
 
      CRC-32: (4 bytes)
 
          The CRC-32 algorithm was generously contributed by
          David Schwaderer and can be found in his excellent
          book "C Programmers Guide to NetBIOS" published by
          Howard W. Sams & Co. Inc.  The 'magic number' for
          the CRC is 0xdebb20e3.  The proper CRC pre and post
          conditioning is used, meaning that the CRC register
          is pre-conditioned with all ones (a starting value
          of 0xffffffff) and the value is post-conditioned by
          taking the one's complement of the CRC residual.
          If bit 3 of the general purpose flag is set, this
          field is set to zero in the local header and the correct
          value is put in the data descriptor and in the central
          directory.
  .
  .
  .
 
Decryption
----------
 
The encryption used in PKZIP was generously supplied by Roger
Schlafly.  PKWARE is grateful to Mr. Schlafly for his expert
help and advice in the field of data encryption.
 
PKZIP encrypts the compressed data stream.  Encrypted files must
be decrypted before they can be extracted.
 
Each encrypted file has an extra 12 bytes stored at the start of
the data area defining the encryption header for that file.  The
encryption header is originally set to random values, and then
itself encrypted, using three, 32-bit keys.  The key values are
initialized using the supplied encryption password.  After each byte
is encrypted, the keys are then updated using pseudo-random number
generation techniques in combination with the same CRC-32 algorithm
used in PKZIP and described elsewhere in this document.
 
The following is the basic steps required to decrypt a file:
 
1) Initialize the three 32-bit keys with the password.
2) Read and decrypt the 12-byte encryption header, further
   initializing the encryption keys.
3) Read and decrypt the compressed data stream using the
   encryption keys.
 
 
Step 1 - Initializing the encryption keys
-----------------------------------------
 
Key(0) <- 305419896
Key(1) <- 591751049
Key(2) <- 878082192
 
loop for i <- 0 to length(password)-1
    update_keys(password(i))
end loop
 
 
Where update_keys() is defined as:
 
 
update_keys(char):
  Key(0) <- crc32(key(0),char)
  Key(1) <- Key(1) + (Key(0) & 000000ffH)
  Key(1) <- Key(1) * 134775813 + 1
  Key(2) <- crc32(key(2),key(1) >> 24)
end update_keys
 
 
Where crc32(old_crc,char) is a routine that given a CRC value and a
character, returns an updated CRC value after applying the CRC-32
algorithm described elsewhere in this document.
 
 
Step 2 - Decrypting the encryption header
-----------------------------------------
 
The purpose of this step is to further initialize the encryption
keys, based on random data, to render a plaintext attack on the
data ineffective.
 
 
Read the 12-byte encryption header into Buffer, in locations
Buffer(0) thru Buffer(11).
 
loop for i <- 0 to 11
    C <- buffer(i) ^ decrypt_byte()
    update_keys(C)
    buffer(i) <- C
end loop
 
 
Where decrypt_byte() is defined as:
 
 
unsigned char decrypt_byte()
    local unsigned short temp
    temp <- Key(2) | 2
    decrypt_byte <- (temp * (temp ^ 1)) >> 8
end decrypt_byte
 
 
After the header is decrypted,  the last 1 or 2 bytes in Buffer
should be the high-order word/byte of the CRC for the file being
decrypted, stored in Intel low-byte/high-byte order.  Versions of
PKZIP prior to 2.0 used a 2 byte CRC check; a 1 byte CRC check is
used on versions after 2.0.  This can be used to test if the password
supplied is correct or not.
 
 
Step 3 - Decrypting the compressed data stream
----------------------------------------------
 
The compressed data stream can be decrypted as follows:
 
 
loop until done
    read a charcter into C
    Temp <- C ^ decrypt_byte()
    update_keys(temp)
    output Temp
end loop
  .
  .
  .
 
