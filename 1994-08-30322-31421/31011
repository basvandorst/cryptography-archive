Path: msuinfo!agate!howland.reston.ans.net!sol.ctr.columbia.edu!news.kei.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: Re: Self-destructive encryption util
Date: Sun, 21 Aug 94 22:17:56 CDT
Organization: University of Missouri, Columbia
Lines: 52
Message-ID: <170191399AS86.C445585@mizzou1.missouri.edu>
References: <Cu3o1D.6Ap@rci.ripco.com> <31vq0i$ph4@ousrvr.oulu.fi> <adamtCu4spG.136@netcom.com> <3232ja$7tl@ousrvr.oulu.fi>
NNTP-Posting-Host: mizzou1.missouri.edu

In article <3232ja$7tl@ousrvr.oulu.fi>
darkie@paju.oulu.fi (Tapio Erola) writes:
 
>Oh well, I was just thinking about quick way of making encrypted messages
>impossible to decrypt even with correct key. I did not intend to sound
>so ravingly paranoid, just thinking way to honestly tell "I cannot"
>to judge on case of "open it or go to jail for contempt" order.
>Rather paranoid feature, but interesting problem to think about.
 
   There are two easy ways to do this in the encryption program's
software.  First, you can use a unique random salt along with the
user's password to generate the encryption key.  Include the salt in
the encrypted file header, or whatever.  Make the salt he same length
as the key.  To kill the file unrecoverably, zero out the salt only.
The passphrase is no longer enough to generate the key.  Make sure
your software prominently displays "killed file--canot decrypt" when
trying to decrypt files with all-zero salts, and make sure your program
documentation prominently discusses the kill file feature.
 
   Second, generate a file encryption key for each file encrypted, and
then encrypt that key (in the file header or whatever) with the passphrase
generated key.  To kill, zero out the encrypted file key.  Do the same
documentation of this feature, so the cops or thugs interrogating you know
when to quit.
 
>Hey experts; Am I right assuming that if CBF-IDEA encrypted message
>is damaged, decrypting remaining message is practically impossible
>after damage? Or perhaps simple Zapping of FAT would do the trick.
>(10,000 piece puzzle without images. Disk would be effectively
>destroyed.)
 
   One of the important design criteria of CFB-encryption is that it
recovers from errors after a short span of ciphertext.  (CFB was originally
designed, I think, for communications, where occasional noise bursts
happen.)  So, if you clobber a block of CFB-encrypted text, it's still
recoverable.
 
   Zapping the FAT wouldn't be too secure, either.  There's a pattern
to how sectors are allocated by DOS, and unless your file encryptor
encrypts the cluster next and prev pointers, there will still be chains
of clusters on your disk.
 
   Zapping the FAT wouldn't be too secure, either.  There's a pattern
to how sectors are allocated by DOS, and unless your file encryptor
encrypts the cluster next and prev pointers, there will still be chains
of clusters on your disk.
 
>Tapio Erola
>txr@rieska.oulu.fi
>Univ. of Oulu, Dept. of Chemistry.
 
   --John Kelsey, c445585@mizzou1.missouri.edu
