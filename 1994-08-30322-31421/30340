Path: msuinfo!agate!howland.reston.ans.net!gatech!news-feed-1.peachnet.edu!news.duke.edu!MathWorks.Com!news2.near.net!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!athena.mit.edu!solman
From: solman@athena.mit.edu (Jason W Solinsky)
Newsgroups: sci.crypt
Subject: Re: SHA
Date: 31 Jul 1994 22:12:41 GMT
Organization: Massachusetts Institute of Technology
Lines: 43
Distribution: world
Message-ID: <31h7kp$o2f@senator-bedfellow.MIT.EDU>
References: <31egbp$nso@rzsun02.rrz.uni-hamburg.de> <31gbn2$16a@search01.news.aol.com> <31gjn5$bsa@mycroft.rand.org>
NNTP-Posting-Host: e51-007-3.mit.edu

In article <31gjn5$bsa@mycroft.rand.org>, jim@mycroft.rand.org (Jim Gillogly) writes:
|> In article <31gbn2$16a@search01.news.aol.com>,
|> RPerillo <rperillo@aol.com> wrote:
|> ...
|> >Zimmerman suggested using the SHA as a cypher, i did a periodicals search,
|> ...
|> >It should also be noted that the strength of hashing functions is a
|> >relatively new subject, with not that much research on. SHA was recently
|> 
|> When Phil Karn proposed using MD4 as the crypto engine in a cipher system
|> in Feb 1991 it sounded new to me; later discussion indicated that there had
|> been some math done earlier (Asiacrypt?) suggesting that several rounds of
|> the hash function were needed to make it strong enough.

Yeah Karn's original method was proven insecure by Luby and Rackoff [SIAM
Journal on Computing, April 1988 accoring the Appl. Crypt's bib.] who
proposed the following:

Let K = Kl|Kr where K is the key, and | is concatentation
Let P = Pl|Pr
Let H = secure one way hash function
Let C = Ciphertext

R1 = Pr XOR H(Kl|Pl)
L1 = Pl XOR H(Kr|Pr)
R2 = R1 XOR H(Kl|L1)
L2 = L1 XOR H(Kr|R1)

C  = L2|R2

(Can somebody verify this for me, because Schneier has written something
different in his book, but I seem to remember what I wrote above as correct.
It looks like Schneier might have made a couple of typo.s)

Anyway, I think Karn's original ommited the middle two steps (and changed the
L1 in the fourth step to L0 and the R2 in the fifth step to R1). To date, I
don't think that anybody has publicly exposed a weakness in this method.
All you need is a good fast secure one-way hash and you get blazingly fast
symetric encryption.

Cheers,

JWS
