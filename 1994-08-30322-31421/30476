Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!news.alpha.net!MathWorks.Com!yeshua.marcam.com!charnel.ecst.csuchico.edu!csusac!csus.edu!netcom.com!rlglende
From: rlglende@netcom.com (Robert Lewis Glendenning)
Subject: Re: The Sum of Multiple Linear Congruent PRNGs Mod N
Message-ID: <rlglendeCtzBr6.17G@netcom.com>
Organization: NETCOM On-line Communication Services (408 261-4700 guest)
References: <940802173003@are107.lds.loral.com>
Date: Wed, 3 Aug 1994 21:59:30 GMT
Lines: 48

In article <940802173003@are107.lds.loral.com>,
Karl Hahn <hahn@lds.loral.com> wrote:
>I read in the FAQ (and already knew) that a linear congruent PRNG works
>poorly for cryptography.
>
>What about using multple ones.  For example, I prepared a short program
>that uses all of the 53 primes (other than 2) less than 256 as moduli,
>and chooses a multiplier M_k for each prime P_k such that the sequence
>generated by modulus P_k will not repeat for P_k - 1 iterations.
>A hashing password (or phrase) typed in by the user serves to produce
>initial values for all the generators.
>
>The LCM of P_k - 1 over all the primes less than 256 is about
>2.6e25.  If the output is the sum mod 256 of all the generators,
>an attacker who wanted to guess the key would have to locate himself
>in a 2.6e25 byte long sequence.  If he were already in possession of,
>say, the first n bytes of the sequence, how difficult would it be for
>him to determine bytes n+1, n+2, etc?
>

I think there are many unbreakable sequence PRNGs.  The general
problem is solving a set of linear equations.  If the combiner of
different PRNGs hides the internal state of the PRNGs, it looks
to me very difficult to break.  (I am, however, not at all an
expert here.)

My favorite example is 33 LC PRNGs, with the 33rd cycled to select
a bit from each of the others.  You need to keep track of which
bit positions have been selected, and cycle until you find an un-
selected position.

My statistical analysis says this is real random, and the fact that
the bit in the output is dependent upon both the state of the
individual LC PRNG and the selector LC PRNG makes this a very tough
set of equations to solve.  You need *LOTS* of data, especially
given that stream cyphers XOR the pseudo-random stream with 
plain text.

More complex, non-linear combiners should work also.  E.g. generating
a block of PRNG output as above, then running MD5 over it to get
a single word of randomness.

All this is slow, but that is why we have fast computers 8*)

Lew
-- 
Lew Glendenning		rlglende@netcom.com
"Perspective is worth 80 IQ points."	Niels Bohr (or somebody like that).
