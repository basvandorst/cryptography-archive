Newsgroups: comp.security.misc,sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!usc!nic-nac.CSU.net!charnel.ecst.csuchico.edu!csusac!csus.edu!netcom.com!phr
From: phr@netcom.com (Paul Rubin)
Subject: Re: key exchange sans patent encumberance?
Message-ID: <phrCtyBKp.HJt@netcom.com>
Organization: NETCOM On-line Communication Services (408 261-4700 guest)
References: <31lsk2$1ua@news.bridge.com>
Date: Wed, 3 Aug 1994 08:58:00 GMT
Lines: 73
Xref: msuinfo comp.security.misc:11086 sci.crypt:30442

In article <31lsk2$1ua@news.bridge.com>, Ken Hardy <ken@bridge.com> wrote:
>It's straight-forward enough to do user authentication without sending
>a password in either plain- or cyphertext.  But how can a remote user
>_set_ his password on a central system without eavesdroppers being able
>to see the new password?  It must be transmitted to the central system
>for subsequent authentications.

If you are not going to send a password, why even *have* a password?
It sounds like you already plan to have a shared secret between the
user and the central system.  If you believe this secret is safe, you
can use it to send the new password.  But this is not all that satisfying
a plan.

>Diffie-Hellman obviously suggests itself.  Any of a number of public-key
>algorithms could be adapted to the purpose of encrypting a password for
>exchange.

Diffie-Hellman is vulnerable to man-in-the-middle attacks and takes a
lot of computation at both ends, but you have the right general idea.

>But it looks as if _all_ public key algorithms are patented, as
>is Diffie-Hellman.  Am I missing something?

Well, certain people claim that all PK algorithms are patented, but
those people have a very powerful interest in having you believe that
is true, and lots of other people think the claim is highly questionable.
A particularly relevant example: the US government asserts that the
Digital Signature Standard is not subject to any of the PK patents,
and the DSS may be just the right thing for you on technical grounds
(it takes a lot less computation at the signing end than DH or RSA would
need).  Method:
  1) central computer sends a challenge string to user
  2) user hashes the challenge string with SHA and signs the hash with DSS.
  3) Central computer checks the signature against user's public DSS record.

Note that PKP disagrees with the government about whether the public
key patents affect DSS.  There are untested assertions coming from
both sides.  You have to decide what to believe etc., what the likely
consequences for you are if you get hassled over the patents, and
whether you can withstand those consequences.  Keep in mind that new
and astonishing claims about patents and copyright are being invented
every day and most of them have not been tested.  I could assert that
my posting this article means no one could use the methods it
describes without my permission and some idiot would probably believe
me, the point being that just because someone asserts something
doesn't mean that the assertion is true.  You have to examine the
assertions yourself and decide what to do about them.  (Note: do not
construe anything I say to be legal advice; consult a professional for
that).  I am also not sure what export rules apply to DSS.

>What are my choices if I want to avoid any and all patent encumberances?

Join the League for Programming Freedom which aims to get rid of
software patents.  Write to lpf@uunet.uu.net for info.

>I loathe using a secret key hardcoded into the remote program (it's a
>program loggin in, not a human, though a human may need to be able to
>enter and change a password or passphrase.)  Any suggestions for making
>this more palatable, if it's my only choice?

You might consider a one-time pad system along the lines of S/Key.

For more practical advice, you need to specify in more detail what you
are trying to do.  Is it ok to store persistent info (DSS secret key)
on the user's remote computer, possibly in encrypted form?  Are you
willing to put cryptographic code in your product if it means filling
out some paperwork in order to export it (since it is used for
authentication only, getting approval is not difficult)?  How
much computing power is available at each end of the transaction?
Is this an interactive application where the user will type a password
at the start of each session?  If you describe in more detail how
you see your application being used, we (sci.crypt readers) may be
able to help you more.
