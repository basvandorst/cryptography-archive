Path: msuinfo!netnews.upenn.edu!dsinc!spool.mu.edu!howland.reston.ans.net!usc!nic-nac.CSU.net!charnel.ecst.csuchico.edu!yeshua.marcam.com!zip.eecs.umich.edu!newsxfer.itd.umich.edu!uunet!nwnexus!news.halcyon.com!coho!ken
From: ken@coho.halcyon.com (Ken Pizzini)
Newsgroups: sci.crypt
Subject: Re: Self-destructive encryption util
Date: 12 Aug 1994 21:38:44 GMT
Organization: What, me?
Lines: 22
Message-ID: <32gq54$13q@news.halcyon.com>
References: <Cu3o1D.6Ap@rci.ripco.com> <CuB3s4.3yB@agora.rdrop.com> <3 <1700F3E4S86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: coho.halcyon.com

In article <1700F3E4S86.C445585@mizzou1.missouri.edu>,
 <C445585@mizzou1.missouri.edu> wrote:
>   Do you know whether or not it makes it much harder to retrieve
>the original (overwritten) data if you use a completely unknown (to
>the attacker) string of bits to overwrite, or is it more important
>to use the right portion of 0s and 1s?  (I'm inclined to suspect that
>this depends on some very low-level details of the disk controller and
>the coding scheme used on the disk, etc.)

I am not fully knowledgeable about the limits of data recovery from
an overwritten disk, but drawing on the fact that the disk can only
hold some finite amount of information I would favor using random
data in each (or at least most -- one might add a few passes with
balanced 0-1, all-0, all-1 bits just for the heck of it) of the
overwrite passes.  In fact, for extra paranoia, one might always
pre-write a few rounds of random data before your real (encrypted)
data -- that way there are always several "layers" of random junk
in each recording domain, so there is no way to tell which one
might possibly be the "real" data.  But this does not obviate the
need for some other "destruct" mode.

		--Ken Pizzini
