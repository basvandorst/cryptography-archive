Path: msuinfo!agate!library.ucla.edu!europa.eng.gtefsd.com!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson; CMSC (G))
Newsgroups: sci.crypt,sci.math
Subject: Re: P = NP? (was : How safe is RSA?)
Followup-To: sci.crypt,sci.math
Date: 28 Aug 1994 22:16:04 GMT
Organization: University of Maryland, Baltimore County
Lines: 62
Message-ID: <33r2b4$qe7@news.umbc.edu>
References: <EACHUS.94Aug24191851@spectre.mitre.org>
NNTP-Posting-Host: umbc7.umbc.edu
X-Newsreader: TIN [version 1.2 PL2]
Xref: msuinfo sci.crypt:31293 sci.math:79081

This is my second response to the same post.
Robert I. Eachus (eachus@spectre.mitre.org) claimed:

If P=NP? is undecidable, then there is no proof it is undecidable. (1)

I'd like to put this claim into one of the categories of proven,
disproven, or open.  So far I think it's open.  Note that if
P=NP is decided on either side, then claim (1) is true.

Robert's argument follows the usual form for proving such a claim:
that a proof of undecidabillity would decide the question.  In particular
he says that if P=NP? is undecidable then P must not equal NP.  I don't
think Robert's proof is solid.

:    Assume there exists a proof that P=NP is undecidable.  Then there
: no algorithm can exist that solves an NP-complete problem in P-time,
: since the existance of such an algorithm would mean that a proof that
: P=NP was possible.  But if no such algorithm can exist, then P/=NP.

Does the existance of a poly-time algorithm to recognize some NP-C
language imply that there is a proof that P=NP as Robert claims ?
He attempts a constructive argument, showing that if such an algorithm
exists, then it can be used to prove it is poly-time.  I am both
unconvinced of this, and poly-time alone is not sufficient.

I think that the approach Robert took is the most promising.  I don't
see how to prove something like (1) other than the "if undecidable
then true/false" logic.  I also don't know see a non-constructive
approach to showing a proof of P=NP exists if P=NP.  Finally, the
only style of proof I can envision for P=NP would require an example
algorithm, and that we prove:

	the algorithm A recognizes language L
	language L is NP-C
	algorithm A is poly-time.

Now suppose we have a candidate algorithm A.  Can we come up with a
construction which will establish any of these 3, in the case that A
really is a poly-time recognizer for an NP-C language ?  The only
short-cut I see is defining L as the language recognized by A.

Given a recognizer for an NPC language L with a know polynomial
reduction to 3SAT, we can construct a recognizer which will output a
proof that the input string is in L whenever it accepts.  Thus given a
candidate A, we could construct a candidate A' and a proof that A'
will always be correct when it accepts.

If P=NP then NP=Co-NP, so not(L) is also NP and thus should have a
polynomial reduction to 3SAT.  Is it possible for there to be
polynomial reductions from L but none for which a proof of correctness
exists ?  

If we have proven polynomial reductions from both L and not(L) to 3SAT
and candidate machines for recognizing both, we can construct a
recognizer which will be correct whenever it terminates.  Then we just
have to prove the time.

Can anyone resolve the truth of (1), or am I right to leave it open ?


--Bryan

