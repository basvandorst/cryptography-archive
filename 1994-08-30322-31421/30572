Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!not-for-mail
From: ritter@io.com (Terry Ritter)
Newsgroups: sci.crypt
Subject: Testing hardware RNG's
Date: 7 Aug 1994 01:37:41 -0500
Organization: UTexas Mail-to-News Gateway
Lines: 53
Sender: nobody@cs.utexas.edu
Message-ID: <199408070637.BAA23590@pentagon.io.com>
NNTP-Posting-Host: news.cs.utexas.edu

 In <jathomasCu4yLs.G0L@netcom.com>
 jathomas@netcom.com (John A. Thomas) writes:


>However, for larger files, a small excess of "1" bits began
>to show up (about 0.5% excess).  The chi-squares for these samples became
>more skewed toward the high-probability values, as the sample size became
>larger.  To me, this indicates the generator has a slight bias.
>Averaging the samples with XOR eliminated this.

 Averaging may appear to eliminate the bias, but I am not at all
 sure that it eliminates the problem.

 The bias is telling you something.  Don't hide it!  Find it
 and *then* decide what to do!

 Why does the system want to count more odd-numbers of pulses
 than evens?  Could this be related to the carry logic?  We know
 that a resulting odd value has not just carried.  Could the clock
 gate be open such a short time that it closes (and the pulse ends)
 before the carry logic has had time to carry?  So, with a short
 pulse, when we have no carry the first FF clicks over, but when
 we have a carry, it does not?  Why not?  Or is this just an
 asymmetry in the number of gates in the path in the first FF?

 Assuming it is some sort of asymmetry, we can estimate the size:
 0.5% seems rather high; does this mean that one pulse out of 200
 is so short that the hardware does not work?  I guess if we
 assume that the 5 MHz clock is the source of the short pulses,
 this would put the short pulse at about 1 ns; is the hardware
 failing asymmetrically with 1 ns pulses?

 If the problem really is the carry logic, it would be nice to have
 a polynomial counter.  A faster counter chip might improve things
 in any case (10x greater speed should give .05%).


>Can anyone suggest specific additional tests (easily implemented, if
>possible!) to test the properties of this generator?

 Sure.  Do population testing.  Count the number of occurrences
 of each value in each trial.  Then use augmented doubles to
 predict the population.

 Also accumulate the occurrence counts into a distribution, and
 compare the accuracy of that distribution to the expected Poisson
 (or even Binomial), using chi-square or Kolmogorov-Smirnov.

 ---
 Terry Ritter   ritter@io.com



