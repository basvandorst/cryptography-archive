                            Examples using MFLOAT 2.0
                            =========================

This is a description of the short examples using MFLOAT. They are made
for learning MFLOAT by examples. Following examples are part of MFLOAT 2.0:

* BESSEL.CPP     Calculation of the Bessel function           (C++)
* DYNAMIC.CPP    Example for dynamic variables                (C++)
* EULER.CPP      Calculation of Euler's constant              (C++)
* GAMMA.CPP      Calculation of the complex gamma function    (C++)
* PI.CPP         Calculation of the number Pi                 (C++)
* PIAGM.CPP      Calculation of Pi using AGM                  (C++)
* POLAR.CPP      Calculation of polar coordinates             (C++)

* BESSEL.C       Calculation of the Bessel function           (C)
* DYNAMIC.C      Example for dynamic variables                (C)
* EULER.C        Calculation of Euler's constant              (C)
* GAMMA.C        Calculation of the gamma function            (C)
* PI.C           Calculation of the number Pi                 (C)
* PIAGM.C        Calculation of Pi using AGM                  (C)
* POLAR.C        Calculation of polar coordinates             (C)


* BESSEL.PAS     Calculation of the Bessel function           (PASCAL)
* DYNAMIC.PAS    Example for dynamic variables                (PASCAL)
* EULER.PAS      Calculation of Euler's constant              (PASCAL)
* GAMMA.PAS      Calculation of the gamma function            (PASCAL)
* PI.PAS         Calculation of the number Pi                 (PASCAL)
* PIAGM.PAS      Calculation of Pi using AGM                  (PASCAL)
* POLAR.PAS      Calculation of polar coordinates             (PASCAL)


Following files are necessary:

C++    : "MFLOATA.OBJ", "MFLOATB.OBJ", "MFLOAT.H", "MF_CPP.H", "MF_CPP.CPP"
C      : "MFLOATA.OBJ", "MFLOATB.OBJ", "MFLOAT.H"
PASCAL : "MFLOATA.OBJ", "MFLOATB.OBJ", "PFLOAT.PAS"

Used compiler:
C and C++: BORLAND C++ Version 3.1 or 4.0 or compatible
PASCAL   : TURBO PASCAL 6.0, 7.0 or BORLAND PASCAL
If you have another compiler, perhaps some modifications are necessary.





                               Calculation of pi
                               =================

There are many methods known to calculate the irrational number pi, which is
the relation between the perimeter and the diameter of a circle.

pi=16*arctan(1/5)-4*arctan(1/239);                    (John Machin 1680-1752)
pi=48*arctan(1/18)+32*arctan(1/57)-20*arctan(1/239);
pi=6*arctan(1/sqrt(3));                               (Abraham Sharp 1710)
pi=4*(1-1/3+1/5-1/7+....)                             (Leibniz 1646-1716)

The function arctan(x) is calculated using the series:

arctan(x) = x-x^3/3+x^5/5-x^7/7 + ......

The operation "x^.." means the power of x.

The advantage of the first two equations is, that they converge very fast and
every element of the series can be calculated recursively from the former
element by only two divisions by an integer. A division by an integer is very
fast for long MFLOAT-numbers. The third equation is built from the known
value: tan(pi/6)=1/sqrt(3). This method is slower than the former one. The
forth equation has only theoretical importance, in the numerical use this
equation is very bad.
The example program compares the different methods to calculate pi.

Further formulas for pi:

pi=88*arctan(1/28)+8*arctan(1/443)-20*arctan(1/1393)-40*arctan(1/11018)
pi=176*arctan(1/57)+28*arctan(1/239)-48*arctan(1/682)+96*arctan(1/12943)
pi=4*arctan(1/2)+4*arctan(1/5)+4*arctan(1/8)
pi=20*arctan(1/7)+8*arctan(3/79)
pi=12*arctan(1/4)+4*arctan(1/20)+4*arctan(1/1985)
pi=24*arctan(1/8)+8*arctan(1/57)+4*arctan(1/239)
pi=4*arctan(1/2)+4*arctan(1/3)

These formulas are slower than the first one of John Machin. All results
of the test programs are correct to 74 or 75 decimal digits behind the
point.


A very good convergent method for the calculation of pi is that of arithmetic
geometric mean. This method has been popular with the guys computing pi to
10^9 digits on the super computers. Their methods use FFT multiplication etc.

Consider following sequence:

          ------
       _  |  1
y(0) =  \ | ---
         \|  2

                  -----------
              _  |      2
          1 -  \ | 1 - y (k)                 2
                \|                          y (k)
y(k+1) = --------------------  =  ------------------------      k = 0,1,2,...
                  -----------      /        ---------- \  2
              _  |      2         |     _  |      2     |
          1 +  \ | 1 - y (k)      | 1 +  \ | 1 - y (k)  |
                \|                 \      \|           /


        1
a(0) = ---
        2

                          2   k+1
a(k+1) = a(k) * (1+y(k+1)) - 2   y(k+1)   k = 0,1,2,...

Then the sequence a(k) converges to 1/pi super quadradically, that is, you
get more than double the number of digits at each iteration.

You will get:

y(0)  = 7.07E-1
y(1)  = 1.72E-1
y(2)  = 7.47E-3
y(3)  = 1.40E-5
y(4)  = 4.86E-11
y(5)  = 5.92E-22
y(6)  = 8.75E-44
y(7)  = 1.91E-87
y(8)  = 9.16E-175
y(9)  = 2.08E-349
y(10) = 1.10E-698
.
.

If the series has converged very well, the change of a(k) is about:

              .  /  2     k+1 \
a(k+1) - a(k) = | ---- - 2     | y(k+1)
                 \ pi         /


and an estimate of the error is ( a(k+1) is neglected):

              1      .    2    / k+1      2  \
e(k) = pi - ------   =  pi  * | 2    -  ----  | y(k+1)
             a(k)              \         pi  /


k        estimation of error       calculated error using MFLOAT

1            2.48E-1                        2.27E-1
2            1.01E-3                        1.01E-3
3            7.38E-9                        7.38E-9
4            1.83E-19                       1.83E-19
5            5.47E-41                       5.47E-41
6            2.41E-84                       2.41E-84
7            2.31E-171                      2.31E-171
8            1.06E-345                      1.06E-345
9            1.11E-694                      1.11E-694
10           6.11E-1393                     6.11E-1393
.

This method is demonstrated in the programs "PIAGM.*". The result of pi is
correct to 74 decimal digits for this example.

References: [3][5][6]




                      Calculation of the Bessel Function
	              ==================================

The evaluation of the Bessel function for large arguments: There are some
series known, where some elements are very large and the result is small.
In this case numerical errors are very large. An example is the Bessel
function J0(x) for an argument x = 100.0.

                 2      2        4      2
J0(x) = 1 - (x/2) / (1!)  + (x/2) / (2!) - ......

The series converges very well, but there are problems with the accuracy
of the calculation. The test program shows the influence of the accuracy
of the calculation to the result.





	  Conversion of Cartesian coordinates to polar coordinates
	  ========================================================


 This example shows the use of the functions hypot(x,y) and atan2(x,y).
 This program also demonstrates the input of MFLOAT-numbers.






	       Calculation of Euler's or Mascheroni's constant
	       ===============================================


This constant is defined by following limit:

			 n
			 ___
		    /   \      1            \
gamma =      lim   |     >    ---   - ln(n)  |
	   n -> oo  \   /___   i            /
			i=1

The direct evaluation of the limit by setting n very high has no success,
because it converges miserably. The Euler-Maclaurin Formula is helpful
for the calculation of this limit (see [1]):

    p            p
   ___           /
  \             |                1   /           \
   >   F(k) =   |   F(t) dt   + --- | F(0) + F(p) |   +
  /___          |                2   \           /
   k=0         /
	       0

		 n-1
		 ___
		\     B(2k)   /  (2k-1)       (2k-1)   \
	     +   >   ------- |  F      (p) - F      (0) |  +
		/___  (2k)!   \                        /
		 k=1

			  p-1
			  ___
		 B(2n)   \      (2n)
	     +  -------   >    F    (k + d)               0 < d < 1
		 (2n)!   /___
			  k=0


The constants B(k) are Bernoulli's numbers, which are calculated by:

B(0) = 1
B(1) = -0.5

		     k-1
		     ___
		    \           B(2i)
B(2k) = 0.5 - (2k)!  >     ---------------    k=1,2,...
		    /___    (2k+1-2i)! i!
		     i=0

B(2k+1) = 0                                   k=1,2,...

Other formulas perhaps better formulas for Bernoulli numbers are available
in [4].

If you use

	  1
F(x) = -------
	m + x

following formula can be derived:

	 m-1                         n-1
	 ___                         ___
	\      1              1     \     B(2k)  -2k
gamma =  >    --- - ln(m) + ----  +  >   ------ m    + R
	/___   i             2m     /___   2k
	 i=1                         k=1


	     oo
	    ___
	   \           -(2n+1)
R =  B(2n)  >     (i+d)                  (0 < d < 1)   remainder
	   /___
	    i=m


The remainder can be estimated:

	   -2n                           -2n
      (m+1)            R            (m-1)
    ----------   <  --------   <  -----------
	2n            B(2n)           2n


By using this formula the constant gamma can be calculated up to 100 digits
very easily. The error of the calculation is due to the estimate of the
remainder and decreases as "n" increases to some optimal value, but there
is no convergence. For higher values of "n" the error increases and there
is no upper limit. The series is an asymptotical series.
For higher accuracy the number "m" can be increased, but the computational
effort increases too. 1000 digits are no problem for mfloat, but not for
this version (limited to 77 digits). The result of the test program is
correct to 74 digits.

A further method for the calculation of the Euler's constant is suggested
by Sweeney and a better formula is found by Brent [2][4].

gamma = S(n) - R(n) - ln(n)


        lu
        ___   k     k-1
       \     n  (-1)
S(n) =  >   -----------       lu = [alpha * n]   alpha=4.3191
       /___    k! k
        k=1

                    n-2
                    ___          k
        exp(-n)    \      k! (-1)
R(n) = ---------    >    ----------
           n       /___      k
                    k=1     n


This formula is perhaps for very high precision much faster and don't need
as much memory, but the accuracy of intermediate results must be much greater
than that of the result. Therefore the result using MFLOAT has 51 correct
digits (about 2/3 of the maximum precision).





	       Calculation of the Gamma Function for complex values
	       ====================================================

The gamma function is defined by:

	      oo
	      /
	     |    z-1  -t
gamma(z) =   |   t    e   dt      Re{z} > 0
	     |
	    /
	    0

There are also other definitions (see [1]). This integral is not suited for
numerical calculations. Therefore following formula is used:

					     n-1
	       /			     ___                         \
	      |	  			     \       B(2k)   1-2k         |
gamma(z) = exp|(z-0.5) ln(z)-z+0.5*ln(2 pi) + >   --------- z     + R(n,z)|
	      |                              /___  2k(2k-1)               |
	       \                             k=1                         /

Bound of the remainder:

	     |B(2n)| Ke(z)    1-2n
|R(n,z)| <= -------------- |z|
	      2n (2n-1)


Ke(z) = 1             for  Re{z} > |Im{z}|


	   |z|^2
Ke(z) =	-----------   for Re{z} <= |Im{z}|
	 |Im{z^2}|


Ke(z) ... error factor


This formulas are very good for high values for Re{z}. To get a high
value for the real-part of "z", the following recurrence formula is used
repeated times:

gamma(z+1) = z * gamma(z)

This is done, until some minimum real-part of "z" is achieved.

This method is used by the programs:
"GAMMA.CPP" in C++ for complex arguments
"GAMMA.C"   in C  for real arguments
"GAMMA.PAS" in PASCAL for real arguments

Only for C++ version:
If you want to calculate the gamma function for complex values, please
write the complex number in the format "(a,b)":
for example:
z = (1.2343,1.43)              (this is the input line at screen)





			       Dynamic variables
			       =================

This example demonstrates the use of dynamic variables. 2000 mfloat
variables are allocated on the heap. You need a large heap and in C or C++
the memory models "compact", "large" or "huge".
For further information of this simple example see the comments in the
files "DYNAMIC.CPP","DYNAMIC.C" and "DYNAMIC.PAS".





                     Comparison of the different languages
                     =====================================

Here is a simple part of a program, which is transferred to mfloat numbers:


original program in C or C++:
-----------------------------

/* this program has the only sense to show the transfer to mfloat*/
double a,b,c,x;
c=a*b+b/d*cos(a)-exp(x);


using MFLOAT in C:
-----------------

#include "MFLOAT.H"

mfloat a,b,c,x,help1,help2;
equm(helpt1,a);
multm(help1,b);
equm(help2,a);
cosm(help2);
multm(help2,b);
divm(help2,d);
addm(help1,help2);
equm(help2,x);
expm(help2);
subm(help1,help2);
equm(c,help1);

its also possible, to write a queue-code:

subm(addm(multm(equm(c,a),b),multm(divm(equm(help1,b),d),cosm(equm(help2,a)))),
     expm(equm(help3,x)));

Its perhaps a little bit faster, but nobody likes to read it.


using MFLOAT in C++:
--------------------

#include "MF_CPP.H"

mfloat a,b,c,x;
c=a*b+b/d*cos(a)-exp(x);



using MFLOAT in PASCAL:
-----------------------

uses pfloat;

mfloat a,b,c,x,help1,help2;
equm(helpt1,a);
multm(help1,b);
equm(help2,a);
cosm(help2);
multm(help2,b);
divm(help2,d);
addm(help1,help2);
equm(help2,x);
expm(help2);
subm(help1,help2);
equm(c,help1);

Queue-code is not possible.

Looking at this example, it is clear, that the C++ method is the best
language for understanding. It's also much simpler to find errors of the
algorithm of your program, if you use C++, because you think in operators
+,-,*,/ and not in functions of two arguments.


References:

[1] Abramowitz, M. and Stegun I.A.,
    Handbook of Mathematical Functions,
    National Bureau of Standards, Washington, D.C., 1964

[2] Beyer, W.A. and Waterman, M.S.
    Error Analysis of a Computation of Euler's Constant
    Mathematics of Computation, Vol. 28, April 1974, pp. 599-604

[3] Borwein, J.M., Borwein, P.B. ,
    Pi and the AGM,
    John Wiley & Sons 1987
    ISBN 0-471-83138-7

[4] Brent, R.P.,
    A FORTRAN Multiple-Precision Arithmetic Package
    ACM Trans. Math. Software, Vol. 4, 1978, pp. 57-70

[5] Brent,R.P.,
    Fast Multiple-Precision Evaluation of Elementary Functions,
    Journal of the ACM, Vol. 23, April 1976, pp. 242-251

[6] Salamin, E.,
    Computation of Pi Using Arithmetic-Geometric Mean,
    Mathematics of Computation, Vol. 30, July 1976, pp. 565-570


Calculated constants (1000 decimal digits):

pi =
3.
1415926535 8979323846 2643383279 5028841971 6939937510
5820974944 5923078164 0628620899 8628034825 3421170679
8214808651 3282306647 0938446095 5058223172 5359408128
4811174502 8410270193 8521105559 6446229489 5493038196
4428810975 6659334461 2847564823 3786783165 2712019091
4564856692 3460348610 4543266482 1339360726 0249141273
7245870066 0631558817 4881520920 9628292540 9171536436
7892590360 0113305305 4882046652 1384146951 9415116094
3305727036 5759591953 0921861173 8193261179 3105118548
0744623799 6274956735 1885752724 8912279381 8301194912
9833673362 4406566430 8602139494 6395224737 1907021798
6094370277 0539217176 2931767523 8467481846 7669405132
0005681271 4526356082 7785771342 7577896091 7363717872
1468440901 2249534301 4654958537 1050792279 6892589235
4201995611 2129021960 8640344181 5981362977 4771309960
5187072113 4999999837 2978049951 0597317328 1609631859
5024459455 3469083026 4252230825 3344685035 2619311881
7101000313 7838752886 5875332083 8142061717 7669147303
5982534904 2875546873 1159562863 8823537875 9375195778
1857780532 1712268066 1300192787 6611195909 2164201989
(using 400 mantissa-words, and John Machin's formula, error < 2e-1923)

gamma =
0.
5772156649 0153286060 6512090082 4024310421 5933593992
3598805767 2348848677 2677766467 0936947063 2917467495
1463144724 9807082480 9605040144 8654283622 4173997644
9235362535 0033374293 7337737673 9427925952 5824709491
6008735203 9481656708 5323315177 6611528621 1995015079
8479374508 5705740029 9213547861 4669402960 4325421519
0587755352 6733139925 4012967420 5137541395 4911168510
2807984234 8775872050 3843109399 7361372553 0608893312
6760017247 9537836759 2713515772 2610273492 9139407984
3010341777 1778088154 9570661075 0101619166 3340152278
9358679654 9725203621 2879226555 9536696281 7638879272
6801324310 1047650596 3703947394 9576389065 7296792960
1009015125 1959509222 4350140934 9871228247 9497471956
4697631850 6676129063 8110518241 9744486783 6380861749
4551698927 9230187739 1072945781 5543160050 0218284409
6053772434 2032854783 6701517739 4398700302 3703395183
2869000155 8193988042 7074115422 2781971652 3011073565
8339673487 1765049194 1812300040 6546931429 9929777956
9303100503 0863034185 6980323108 3691640025 8929708909
8548682577 7364288253 9549258736 2959613329 8574739302
(using mfloat 400 mantissa-words and method of Brent, n=1500, error < 3e-1275)
