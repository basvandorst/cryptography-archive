	    Formulas for complex operators and functions:
	    =============================================


For the operators +,-,* there are used standard formulas. Specially for the
operator (integer)*(mcomplex) (or in reverse order) the time saving procedure
"multi" of "MFLOAT.H" is used.

(a + i*b) + (c + i*d) = (a+c) + i*(b+d)
(a + i*b) - (c + i*d) = (a-c) + i*(b-d)
(a + i*b) * (c + i*d) = (a*c-b*d) + (a*d+b*c)

The main procedure of the division is programmed by the operator /=. First
of all, the exponents of two of the real and imaginary part of the second
term of the division are determined and both complex numbers (a and b) are
scaled by the two's exponent of the larger of both exponents. Therefore
the number "b" has an absolute value of about one after scaling. The scale
procedure is very fast, because the exponents of the numbers are manipulated
only. The division is performed by the formula:

a/b=a*conj(b)/norm(b).
This scaling has the advantage, that for the following examples you can
get the right results:

(1.2E+9000 + i*3.5E+9100) / (2.45E+7123 + i*6.3E+8123)
(1.2E-9000 + i*3.5E-9100) / (2.45E-7123 + i*6.3E-8123)

If no scaling is used, the calculation of the norm of "b" causes a runtime
error for the first example. At the second example the norm of "b" is zero,
because there is an underflow, which causes a division by zero. This problems
vanish by scaling both numbers "a" and "b". For a division by an integer the
time saving procedure "divi" of "MFLOAT.H" is used.

And now to the functions of "mcomplex":
The absolute value of a complex number is calculated by the function
"hypotm" (see "C.DOC") and uses scaling too. Therefore you can calculate
the absolute value for very large and very small complex numbers too, which
fails, if you simply use the formula:

abs(a)=sqrt(a.re*a.re+a.im*a.im);

Following formulas are used for further functions:

cos(x + i * y) = cos(x) * cosh(y) - i * sin(x) * sinh(y);

cosh(x + i * y) = cosh(x) * cos(y) + i * sinh(x) * sin(y);

exp(x + i * y) = exp(x) * (cos(y) + i * sin(y));

log(x + i * y) = log(abs(x + i * y)) + i * arg(x + i * y);

log10(x + i * y) = log(x + i * y) / log(10);

if a = 0 : if Re{b} > 0 : pow(a,b)=0
	   else         : pow: SINGULARITY error
else     : pow(a,b) = exp(log(a) * b)

sin(x + i * y) = sin(x) * cosh(y) + i * cos(x) * sinh(y);

sinh(x + i * y) = sinh(x) * cos(y) + i * cosh(x) * sin(y);

sqrt(x + i * y) = a + i * b:   (a >= 0)
if x > 0 : a = sqrt(0.5 * (abs(x + i * y) + x));
	   b = y / (2 * a);
else     : if y < 0 : b = -sqrt(0.5 * (abs(x + i * y) - x));
		      a = y / (2 * b);
	   else     : b = sqrt(0.5 * (abs(x + i * y) - x));
		      a = y / (2 * b);


tan(x + i * y) = (sin(x) + i * cos(x) * tanh(y)) /
		 (cos(x) - i * sin(x) * tanh(y));

tanh(x + i * y) = (cos(y) * tanh(x) + i * sin(y)) /
		  (cos(y) + i * sin(y) * tanh(x));


For the calculation of the inverse hyperbolic functions acosh, asinh and
atanh special formulas are used, which calculate the correct value of that
functions, as defined in "Pocketbook of mathematical function" from
Abramowitz and Stegun, at "4.6.Invers Hperbolic Functions". There are the
branch cuts defined too. For testing the results the pocket calculator HP-15C
(HEWLETT-PACKARD) is useful.

arcsin(z) = -i*Arsinh(i*z)

if Im{z} > 0 or (Im{z}=0 and Re{z} < 1) : arccos(z) = -i*Arcosh(z)
else                                    : arccos(z) = i*Arcosh(z)

arctan(z) =  -i*Artanh(i*z)

arccot(z) =  i*Arcoth(i*z)

       4
For |z|  > maximal representable number there is a very good estimate:

1.)
if Re{z}<0 or (Re{z}=0 and Im{z}<0) : Arsinh(z) = -Arsinh(|z|) - i*arg(-z)
else                        	    : Arsinh(z) = Arsinh(|z|) + i*arg(z)

2.)
Arcosh(z) =  Arsinh(|z|) + i*arg(z)


3.)
if Im{z}>0 or (Im{z}=0 and Re{z}<0) : Artanh(z) = Artanh(Re{z}/(|z|*|z|)) +
						  +i*arg(Im{z}/|z| + i*|z|)
else:  Artanh(z) = Artanh(Re{z}/(|z|*|z|)) + i*arg(-Im{z}/|z| - i*|z|)


For smaller arguments following calculations are suited well:

1.)
Arsinh(a + i*b) = x + i*y

r=(1-a*a-b*b)/2
s=sqrt(r*r+a*a)
if r > 0  : x=Arsinh(a/sqrt(r+s))
else      : if (a<0 or (a=0 and b<0))  : x = -Arsinh(sqrt(s-r))
	    else                       : x = Arsinh(sqrt(s-r))
t=(a*a-b*b+1)/2
if t > 0 : y=arg(sqrt(s+t) + i*b)
else     : if b > 0 : y=arg(|a| + i*sqrt(s-t))
	   else     : y=arg(|a| - i*sqrt(s-t))

2.)
Arcosh(a + i*b) = x + i*y

r=(1-a*a-b*b)/2
s=sqrt(r*r+b*b)
if r > 0 : x=Arsinh(|b|/sqrt(r+s))
else     : x=Arsinh(sqrt(s-r))
t=(b*b-a*a+1)/2
if t > 0 : if b < 0  : y=arg(a - i*sqrt(s+t))
	   else      : y=arg(a + i*sqrt(s+t))
else     : if a < 0  : y=arg(-sqrt(s-t) + i*b)
	   else      : y=arg(sqrt(s-t) + i*b)


3.)
Artanh(a + i*b) = x + i*y

r=(1-a*a-b*b)/2
s=sqrt(r*r+b*b)
t=(a*a+b*b+1)/2
x=Artanh(a/(s+t))
if r > 0 : y=arg(r+s + i*b)
else     : if b>0 or (b=0 and a<0) : y=arg(b + i*(s-r))
	   else                    : y=arg(-b - i*(s-r))

4.)
Arcoth(z) = Artanh(1/z)

The results of these formulas are about the same as the results of the
functions in <complex.h> of BORLAND C++. There are little differences:
examples: atan(-2*i),asin(2),acos(2) (Only this three inverse functions
are available in BORLAND C++.)