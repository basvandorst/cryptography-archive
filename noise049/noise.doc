

                                   NOISE.SYS

                              (Version 0.4.9-Beta)

                  A random-noise device driver for DOS boxes.

            by Robert Rothenburg Walking-Owl <wlkngowl@unix.asb.com>
                    Portions by Colin Plumb <colin@nyx.net>

                 Copyright (C) 1995-1996. All Rights Reserved.


      Note: if you have not yet done so, please check the "readme.1st" file
            included with this distribution.

      List of ingredients:

        1. License
        2. Introduction
        3. System requirements
        4. Installing the driver
        5. Using the driver to generate random numbers
        6. Device controller functions
        7. Technical notes
        8. References
        9. Credits


      1. License

      This program is free software; you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation; either version 2 of the License, or
      (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      General Public License for more details.

      You should have received a copy of the GNU General Public License
      along with this program; if not, write to the Free Software
      Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111 USA.

      1.1. Distributing the driver with other software

      You may freely distribute the driver with applications which use it
      in accordance with the GNU General Public License (found in the file
      "copying").

      You must include the documentation (this file) unchanged, along with
      the source code and the General Public License.

      1.2. Other legal miscellania

      Trademarks and copyrights of any products mentioned in this document
      belong to their respective owners.  Mention of a paricular product
      does not imply endoresement or derision of that product over another.


      2. Introduction

      Computers are deterministic beasts.  What comes out of the machine
      is related to what was put in before and what came out previously.
      This applies to the random number generators which can be found with
      many compilers and programming languages: they are more properly
      called "pseudo-random number generators" because they are not truly
      random.

      Avoiding philosophical hair-splitting, we can say that "truly random"
      data is unpredictable.  There are no correlations which allow one to
      guess when and where a particular bit pattern will occur with any
      reasonable certainty over any other bit pattern.

      Such high-quality randomness is necessary for applications that are
      sensitive to even the most subtle patterns in the data.  Many data-
      security and encryption systems are particularly vulnerable to poorly
      implemented key and initialization schemes (PKZip 1.0 and the recent
      crack of Netscape come to mind).  The results of some simulations can
      be skewed because of a bad random number generator.

      Although most computers are not equipped with special hardware to for
      "true" random number generation, there are still ways in which one
      sample high-quality random numbers.

      Subtle differences in the time between keystrokes, variation in disk
      access times (influenced by air turbulence in the drive), changes in
      mouse position, and even the drift between various hardware timers
      and CPU clock can be used.  The main difficulties involve using
      these and other sources in ways that preserve their randomness.

      NOISE.SYS uses these methods.  The samples are mixed into an entropy
      pool and processed using the revised Secure Hash Algorithm (SHA-1).
      The processing is done to insure that even if the samples are not
      optimum that the driver will still return "practically random" data.

      The driver sets up two devices, /dev/random and /dev/urandom which
      return a stream of random bytes when read.

      The difference between the two devices is that /dev/random will not
      return more than the estmated number of random bytes in the pool,
      while /dev/urandom will return as many bytes as are requested
      (repeatedly mixing the entropy pool to ensure that the data does not
      repeat).

      The purpose of designing the interface as a character device is to
      allow programs written in a variety of high- and low-level languages
      to be able to use the driver and have access to crypto-quality
      randomness.

      It is also a start at initiating a standard by which other types of
      drivers can be written, especially if and when specialized random-
      number generatng hardware becomes commonplace on PCs: drivers can
      be written for them which are compatible with pre-existing software.

      3. System requirements

      You need the following in order to run NOISE.SYS on your machine:

         o An 80386 or later processor on an IBM or compatible machine.
         o MS-DOS v3.3 or later, or compatible emulator or DOS box.
         o At least 3-4k of free memory to load the device driver.

      NOISE.SYS can also use a Soundblaster/Adlib compatible soundcard or
      a mouse as sources of randomness, if you have them.

      The driver was developed on an 486DX4 running AMIBIOS and MS-DOS 5.0
      and 4DOS 5.5.  The driver has been tested while in Windows and OS/2
      Warp 3.0 DOS sessions with no apparent problems.

      3.1. Potential Conflicts

      Multitasking systems such as Windows, Desqview and OS/2 take over
      some of the low-level hardware functions that NOISE.SYS monitors,
      effectually preventing the driver from collecting samples from those
      IRQs.

      For example, Windows 3.x takes over the timer and keyboard inter-
      rupts, preventing the driver from sampling them.  The driver will
      still be able to sample disk-access timings as well as use timings
      between Windows internal message broadcasts, and any samples taken
      before Window was loaded will also be used.

      See the technical notes for conflicts that occur with audio or mouse
      sampling, as well as the installation notes on when and where to
      load the driver.

      Because the driver installs two character devices named "random" and
      "urandom", you may not be able to access any files matching those
      filenames.  This is a quirk of some DOS versions, and not the
      driver.

      The reason these device names were chosen was for compatability with
      similar drivers running under Linux, FreeBSD and OS/2.

      3.2. Bug-free software is a rare thing...

      This driver uses a bit of low-level hardware programming and a few
      poorly-documented features of DOS.  Hence it may not work on some
      systems.

      If you encounter bugs and problems, the first thing you should do
      is re-read the section on conflicts and related technical notes. If
      that is not helpful, make sure you have the most current version of
      the program that might have fixed some bugs.

      4. Installing the driver

      The NOISE.SYS driver can be placed in your "config.sys" file as
      you would any other device driver.  If it encounters problem (such
      as an invalid option or processor) it will print an error message
      and abort loading.

      An example line in your configuration file may appear like so:

         device=c:\dos\system\noise.sys

      Note that you can place the driver in any directory you choose.  The
      "c:\dos\system\" path is used as an example only.

      To load the driver in high memory, use "devicehigh=" instead.

      4.1. Installation Options

      You can pass options to the driver to enable features when it is
      loaded.  For this version, that is the only way to enable features
      (until an API is written which allows configuration of the driver
      after it is installed).

      The following are valid options (case insensitive):

         /L        Displays the license agreement when installing.

         /I        Initialize the entropy pool with random keystrokes.

                   This option is only needed if you load the driver
                   from the command-line shortly before running an
                   application which uses it.

                   Note: the driver's method of entropy estimation is
                   relatively conservative.  You will have to type about
                   fifty or so keystrokes just to initialize it with only
                   160-bits of entropy.

         /K        Keep the entropy pool full after hashing.

                   After each hash, the driver assumes that 160-bits of
                   the entropy has been used up and subtracts that
                   amount from the estimate.

                   When this option is enabled, the driver will attempt
                   to keep the entropy pool filled with a minimum of
                   160-bits worth from "continuous" sources (clock
                   drift, mouse position, and audio-card); it will also
                   attempt to top off the entropy pool before reading
                   from /dev/random.

                   There is no guarantee that 160-bits of entropy will
                   be added, however.

                   This option may slow down read operations somewhat.

         /C        Sample clock drift.

                   While the system is idling during the command line,
                   the driver will perform a tight loop and sample the
                   drift between the timer and the cpu clock.

                   Drift sampling is disabled while Windows is actice
                   because the loops may interfere with timing-sensitive
                   applications (particularly communications and TCP/IP
                   stack drivers) under Windows.

                   An advantage of this method is that entropy can be
                   generated on an unattended machine.

         /M        Sample mouse position changes.

                   While the system is idling in DOS or Windows, the
                   driver will sample changes in mouse position.

                   Note that the system may become unstable if the mouse
                   driver is loaded after the noise driver is loaded.

         /A        Sample from the audio card.

                   If the driver has been built with the __samplaudio
                   option set, it will read bytes from the sound card
                   when the /K option is given.

                   This option is not yet fully implemented.

      A sample line using options might look like this:

         device=c:\dos\system\noise.sys /l /c

      The source code can be reassembled to change the default behavior of
      the driver.  Some of these changes will disable associated options.
      If the driver claims that one of the above options is invalid, it
      may be that the option was disabled at assembly time.

      See the technical notes and comments in the source code for more
      information.

      4.2. Loading the driver from the command line

      Older versions of NOISE.SYS (prior to v0.4.0) which only defined one
      device could be loaded by dynamic device-driver loading utilities
      such as Jim Kyle's DEVLOD.

      As of yet, I have been unable to find a utility which can load
      drivers such as the current version of NOISE.SYS, which defines
      multiple devices.  Some of the tested utilities aborted with an
      error, others crashed the system (see the "readme.1st" file).

      The source code for the driver included with this distribution
      contains patches to the sources for a few of these utilities (in
      the src/pat/ directory), enabling them to load this driver and
      some other multiple-device drivers, as well as run under DOS 6.

      Assuming that you have an updated version of DEVLOD or a similar
      utility, you could use the following from the command prompt, using
      similar syntax as you would in the CONFIG.SYS file.

         devlod c:\dos\system\noise.sys /i /m

      It is a good idea to use the /I option if you plan to immediately
      run an application that uses the driver after installing it this
      way.

      For more information about DEVLOD, see Jim Kyle, "Loading Device
      Drivers from the DOS Command Line", Dr. Dobb's Journal, November
      1991, pp. 30-42, (plus listings). A similar article also appears
      in Jim Kyle's "Undocumented DOS" book.

      Please do not send requests to the authors for this program.  It
      and similar programs can be found on various ftp-sites.

      4.3. Installation messages

      When installed, the driver will print a message indicating where
      in memory it was loaded and what interrupts it is latched to.

      4.4. Caveats (When and where to load the driver?)

      When and where the driver is loaded will affect its operation.  If
      you load the driver before another driver or TSR which takes over
      certain interrupts entirely, NOISE.SYS will not generate any samples
      from those interrupts.

      Using the /m or /p options before loading the mouse driver (or not
      loading the mouse driver at all) is useless at best and may cause
      your system to crash and burn at worst.  [This was a cause of many
      minutes of panic while developing the driver....]

      Loading the driver before any disk caching or encryption drivers will
      generate different types of sampling values than if it is loaded
      afterwards.  If you have special drivers for CD-ROMs, "flopticals" or
      large hard disks (over 750M) it is possible that NOISE.SYS will not
      even sample access times to these devices if loaded before their
      respective drivers.

      The KEYB.SYS driver will take over the keyboard interrupt and leave
      everything else unhooked.  Some ANSI drivers will allegedly do this
      as well.  You should load NOISE.SYS afer loading these.

      Because of this, it is best to make NOISE.SYS one of the last
      devices you load.  If possible, use a dynamic device driver loading
      utility in your "autoexec.bat" file.

      5. Using the driver to generate random numbers

      The simplest way to accumulate random data from the driver is to
      issue the following command from the DOS prompt:

            copy /a urandom lonoise.dat

      This will create a small, random-sized file named "lonoise.dat". It
      has relatively low-quality randomness because the file was read in
      text mode, so end-of-line and end-of-file characters are missing.

      You can also use the included "sample.com" utility to generate a
      binary file of random data:

            sample hinoise.dat 512

      This will create a file of 512 bytes of random data.  You can look at
      the C or Pascal source code for the sample utility included with the
      driver to see how this is done.

      By default, the utility will read from the /dev/urandom device.
      You can specify a different device, such as:

            sample hinoise.dat 512 /dev/random

      This will create a file of random data, but one that is smaller than
      the specified amount because /dev/random will not return more bytes
      than are estimated to be "truly random" in the pool.

      You can add the -a option when using the utility to append the data1
      to an existing file rather than overwrite it:

            sample mornoise.dat 64 -a

      5.1. Writing software which uses the driver

      You can read a pool of random bytes from the driver as you would from
      any other device.  It is important to remember to open the devices
      /dev/urandom or /dev/random in BINARY mode.

      Turbo Pascal programmers may find this difficult because the language
      does not enable one to read character devices in binary mode: you will
      have to write inline() or assembler procedures to access DOS functions
      directly (See the SAMPLE.PAS for an example kluge that accomplishes
      this.)  Note that in Turbo Pascal you would simply open a file named
      "urandom" (and not "\dev\urandom").

      If you wish to generate random words, long integers or floating point
      numbers, this will require some additional coding, but it is not a hard
      task.  It involves reading enough bytes from the stream to generate the
      desired number.

      For example, if you wish to generate a 16-bit number between 0 and N,
      read two bytes from the driver into a word and return that value,
      ignoring values >= N. (Returning a value modulo N will skew the data)

      For a random fraction between 0 and 1, read N bits from the device and
      return that value divided by 2^N.

      For floating point numbers, you may wish to directly fill the fields
      (significand, sign and exponent) appropriately with bits from the
      device.  Care should be taken to set the exponent properly, otherwise
      values will vary widely between the very miniscule to the very huge.
      Considering the extra work involved along with the variation of real
      types over multiple platforms and compilers, it's easier to generate
      fractions.

      Future versions of the driver may include libraries for random word,
      long integer and floating point generation.

      5.2. The differences between /dev/random and /dev/urandom

      Although both drivers will superficially return the same quality of
      randomness, /dev/random is more secure for generating keys for crypto
      applications.

      /dev/urandom will return as many bytes as the user requests, even
      though there may only be a few bits of entropy in the pool.  With
      each iteration of the hash function on the pool, the driver will
      remix the output back into the pool.  This will keep the driver from
      repeatinng its output (theoretically it can repeat, although the
      period is astronomical).

      However, when no new bits have been added to the pool, all subsequent
      bits output by /dev/urandom is predetermined.  The driver will behave
      as a pseudo-random number generator, although one that is difficult
      for an attacker to predict without full knowledge of the initial pool
      state.

      /dev/urandom is probably secure for generating initialization vectors
      and small session keys.  It is certainly adequate for simulations and
      games.

      For generating public-private key pairs or secure session keys, it is
      better to use /dev/random.  If you need more bits than the driver will
      return, than it is good to accumulate them as the program is running,
      and request that the user type in random keystrokes.

      5.3. Security Concerns

      When using or writing software for this driver that requires security
      (as with any good crypto application), it is important to make sure
      that the driver is working and that it hasn't been tampered with.

      A possible attack would be to give someone a hacked driver which could
      produce a known output stream that appears random: encrypted messages
      which used a key based soley on the driver's output could be read the
      attacker.

      Software should check the quality of the driver's output, as well as
      process it with a cipher or hash function to make such an attack
      difficult.

      5.4. PGP and NOISE.SYS

      In early 1996 someone posted a note to the cypherpunks list and to
      the alt.security.pgp newsgroup about having modified PGP 2.6.3i so
      as to use hardware RNGs and RNG devices for key generation.  While
      this is a nice idea, I have not yet seen the modifications made to
      determine if it samples from /dev/random with the assumption that
      only a limited amount of bits is returned by the device or if it
      expects the device to return a continuous stream of data.

      NOISE.SYS is still relatively too new, and it has not yet been
      fully analyzed for the security in generating something as lasting
      as public/private key pairs (although it probably is good enough
      for this task).

      Until further analysis and examination of this driver is done, I
      do not yet recommend using it for something like PGP, especially
      if it is not an "official" version of PGP designed for using a
      driver such as this one.


      5.5. Miscellanea

      It is a good idea to write software which uses the driver to be
      easily configrable to use similar drivers with other names (or
      perhaps random-noise files generated by other programs).  Because
      this is driver is still in beta, and because as of yet there are
      no standards for such drivers, the behavior of the device may
      change.

      Another important note: if your program takes over the interrupts
      that NOISE.SYS monitors, without calling the previous interrupts,
      you will essentially cripple the driver's sampling capabilities.

      6. Device controller functions

      The /dev/random device supports controller (IOCTL) functions which
      allow programs to configure the device.

      An IOCTL Read function will return the following record:

        Offset  Type    Description

           0    WORD    Size of record (self-inclusive)
           2    DWORD   Signature = 5A494F4Eh ('NOIZ')
           6    BYTE    Low version (ie, 44h = ?.4.4)
           7    BYTE    High version
           8    WORD    Driver Flags
                        Bit  0 = Windows
                        Bit  1 = Reserved
                        Bit  2 = Hashing or accumulation function disabled.
                        Bit 11 = "Keep full" disabled.
                        Bit 12 = Reserved
                        Bit 13 = Mouse position sampling disabled
                        Bit 14 = Audio card sampling disabled
                        Bit 15 = Clock drift sampling disabled
          10    WORD    Reserved
          12    WORD    Other
                        Bits 0..2 = FRACBITS (fractional bits used in est.)
                        Bits 3..6 = Hashing Order (for entropy estimation)
          14    WORD    Minimum entropy before outputting (bits<<FRACBITS)
          16    WORD    Top-off entropy used by "Keep full" (bits<<FRACBITS)
          18    WORD    Estimated entropy currently in pool (bits<<FRACBITS)
          20    WORD    Maximum bits pool can hold (bits<<FRACBITS)
          22    WORD    Audio Port used for sampling (0 if disabled)

      Driver settings can be changed by sending a control packet to the
      /dev/random device.  Control packets are expected to be in the
      following form:

           0    WORD    Size of control packet
           2    WORD    Command
           4    ????    Data

      The driver currently recognizes the following commands:

           2    WORD    0000h   = Set flags
           4    WORD    Flags (only Bits 11,13,14, and 15 are used)

           2    WORD    0001h   = Add samples to entropy pool
           4    ????    16-bit (Size-4)/2 samples

      Future versions of the driver may allow samples to be added by
      directly writing to the device.

      7. Technical notes

      Please refer to the source code files for the driver.  It is
      reasonably well-commented in English and pseudo-C code.  Some
      familiarity with 80386 assembly language is also necessary to
      understanding the code.

      See also the "changes.txt" and "to-do.txt" files for additional
      information.  Pointers to discussions of cryptography and random-
      number generation, as well as operating system and device internals
      can be found in the References section at the end of this document.

      7.1. Interrupt and IRQ Sampling

      The core of the driver hooks onto the keyboard (0x09), low-level
      disk access (0x13) and (if defined) the mouse (0x33) interrupts.
      Each time these interrupts are called, the driver gets a reading
      from the system timer and accumulates it in the entropy pool.

      Note that the source uses __sampleXX defines (1 enabled, 0 disabled)
      where XX is the interrupt number.  These defines refer to hooks
      only, and not necessarally entropy sources; that is, __sample08
      refers to a hook to IRQ0, but does not mean the driver samples IRQ0.

      Adding interrupts to sample that are not defined in the source is a
      relatively easy task using the GenericSampler and InstallSampler
      macros:

         GenericSampler _address

              Defines a generic interrupt handler that calls the original
              routine and then collects accumulates a sample from the
              timer.

         InstallSampler interrupt, _address

              Installs a new handler at _address for the given interrupt.
              The handler need not be one defined by GenericSampler, but
              it MUST store the latch for the original handler in the
              DWORD at _address-4 (see how it is done in the source code).

      What interrupts should or should not be sampled is an important
      issue.  Same events can be easily correlated with others, making
      them poor (if not insecure) choices, such as keystrokes and loading
      a file.  Others are either redundant or less useful (for example,
      there is far more entropy to be sampled from low level disk access
      by Int 13 than by the DOS Int 21).

      The serial port would be a good source to sample, but the default
      BIOS handler is almost never used by anything nowadays.  Communi-
      cations drivers and file transfer protocols install their own
      handlers onto Int 14, ignoring what's already hooked to it.

      When in doubt over the quality of samples and/or a conflict with
      other software, see both Ralf Brown's interrupt lists and check
      the driver's raw output (see below).

      7.1.1. Entropy estimation

      Older versions of the driver used a method similar to the random.c
      implementation for Linux, which estimated the number of bits added
      by a sample based loest value of the highest-order 1 bit in the
      last two delta values.

      The current version uses a variation of Mauerer's estimation
      method, which is also used by PGP 2.6's RNG.  The last several
      samples are kept in a table and a 9- or 10-bit hash is calculated
      and compared with a lookup table's measurement of when that hash
      last occurred.  The difference is used to estimate the relative
      number of bits added to the queue.

      The method is akin to data compression schemes.  Common values
      will occur most often, and hence have lower deltas and lower
      entropy estimations while less common values will have higher
      estimates of entropy added.  The advantage to this method is that
      it ignores the source of bits and focuses on the actual samples
      added, and how often.

      Although it is not accurate, it more likely underestimates the
      entropy of a given sample.

      7.1.2. Mouse movement

      The driver checks with the mouse driver to see if the mouse has
      been moved during the last call.  If so, the driver combines the
      horizontal and vertical changes in position (dx+(dy<<<8) and adds
      it to the entropy pool

      Mouse movement is checked during DOS Safe to Use Idle (Inx 0x28)
      and during 'keep-full' polling.

      7.1.3. Clock drift

      This is an experimental method that runs a tight loop on the CPU
      and uses the drift between the system timer and the processor as a
      source of entropy.

      Although it generates a relatively low amount of entropy, it has
      the advantage of being usable on an unattendend machine, as it is
      called from the DOS Safe to Use Idle (Int 0x28).

      Clock-drift will not be sampled while Windows is active, since it
      can interfere with other Windows programs that are timing-sensitive
      such as WinSock.

      7.1.4. Audio-input sampling

      The driver is capable of sampling the line or microphone input
      from a Soundblaster- or Adlib-compatible sound card as a source
      of entropy.

      The implementation of this is rather incomplete.  Problems can
      occur when sampling under Windows, OS/2 or when other programs
      are using the card, and the overhead to handle this appears not
      to be worthwhile without a lot of thoughtful recoding.

      Ideally, the driver should save the card's current state, set
      the microphone to stereo input and the gain to maximum, disable
      the speakers (feedback is not a pleasant thing), collect the
      samples, and then reset the card's status.

      Putting a microphone near a good source of white noise (such as
      the computer's fan) or connecting a special RNG device to the
      microphone input should be quite adequate as a source of noise.

      An alternative method (until this is implemented) is to use a
      utility to collect samples from the audio card and then send
      them to the driver using the controller functions.

      7.2. The accumulation function

      Older versions of the driver (v0.2.x) used a simple circular buffer
      where new data was simply xored or moved into it.  The flaw with
      that method is that samples would wipe out previous samples, irre-
      gardless of the entropy of the samples.  The effect was that more
      entropy was lost than accumulated.

      This was changed to an accumulation function (suggested by Colin
      Plumb) that distributes the samples evenly over the pool, and pre-
      serves some of the entropy when new samples are added.

      A description of the accumulation function can be found in the
      source code comments of "polynom.inc".

      7.3. Hashing

      The revised Secure Hash Alhorithm (SHA-1) is used to process the
      entropy pool for output.  It was selected over MD5 in part because
      it produces 160-bits of output rather than 128 bits, but also
      because a compact implementation that was readily available. Colin
      Plumb rewrote the SHA transformation routine with several improve-
      ments over the routine used in v0.2 of the driver (see the file
      "sha.inc").

      [Note that earlier versions of NOISE.SYS referred to the algorithm
      as "SHA-2", in part because of conflicting names to differentiate
      it from the earlier form of SHA in FIPS PUB 180.  In some places the
      algorithms have been referred to as SHA-1 and SHA-2, in others as
      SHA and SHA-1.  FIPS PUB 180-1 refers to the algorithm as SHA-1.]

      Only the transformation portion of the algorithm is used.  The
      entropy pool is equivalent to the the first 16 32-bit words of the
      W[] array, and byte-swapping has been left out of the expansion
      portion of the algorithm.

      For each hash performed, the resulting state is re-accumulated into
      the entropy pool, eliminating the need for a counter, as well as
      returning some of the entropy to the pool (although technically the
      entropy has been used up once it has been hashed).

      7.4. Testing the quality of samples

      The hashing and accumulation/entropy-estimation functions can be
      disabled by recompiling the driver with NOMIX and NOHASH set to 1.

      This is intended for testing of the raw samples generated by a
      given method of entropy accumulation.  It is not intended for use
      as a standard use of the driver.

      8. References

      The following is a list of technical documents and source codes which
      were consulted in the development of this driver:

      8.1. DOS techie:

        Baresel, Andre and Craig Jackson.  1995.  "Soundblaster Programming
          Information."  Version 0.90.
          <URL ftp://oak.oakland.edu/SimTel/msdos/sound/sblast09.zip>

        Brown, Ralf. 1995. MS-DOS Interrupt List (no. 48).

        "DOS Programmer's Reference" 2nd Edition.  Terry Dettmann and Jim Kyle,
          Eds.  Que Books.  1989.

        Kyle, Jim. 1990. "Loading Device Drivers from the DOS Command Line."
          Dr. Dobb's Journal.  November 1991. pp. 30-42, 90-98.

      8.2. Crypto and randomness:

        Eastlake, D, S. Crocker and J. Schiller. 1994.  RFC-1750. "Randomness
          Recommendations for Security." December 1994.

        Ellison, Carl <cme@tis.com> and Burt Kaliski <burt@rsa.com>. 1995.
          "P1363: Appendix E -- Cryptographic Random Numbers."  Draft V1.0.
          November 11, 1995.
          <URL http://www.clark.net/pub/cme/P1363/ranno.html> (Nov. 19, 1995.)

        FIPS PUB 180-1. 31 May 1994. "The Secure Hash Standard."

        Gutmann, Peter. 1992.  Source code for "shs.c" and "shsdrvr.c".

        Jenkins, Bob. 1994. "A tester of random number generators." from a
          post to sci.crypt, July 13, 1995.

        Maurer, Ueli M. 1990. "A Universal Statistical Test for Random Bit
          Generators."  CRYPTO '90.

        Mitchell, D.P. and Matt Blaze. 1995.  Source code for truerand().

          There is a similar truerand() implementation by Phil Karn as well.
          truerand() uses CPU clock-drift sampling as a source of entropy.

        Pickover, Clifford A. 1995. "Random number generators: pretty good
          ones are easy to find."  The Visual Computer (1995) 11:369-377.

          This article discusses some interesting visual methods for testing
          pseudo-RNGs.

        Rivest, Ron. 1992. RFC-1321.  "The MD5 Message Digest Algorithm."

        Schneier, Burce. 1994.  "Applied Cryptography."  New York: John Wiley
          and Sons, Inc.

        Theodore Ts'o. 1995. Source code to /dev/random ("random.c") for
          Linux. (September 23, 1995.)

      9. Credits

      The following people have contributed advice, comments, suggestions,
      utilities, pointers to information, or source code for this driver
      or the testing of it in some way:

            Mikael af Enehielm <mikael@unigraf.pp.fi>
            Peter Gutmann <pgut01@cs.aukland.ac.nz>
            Yih-Chun Hu <yihchun@u.washington.edu>
            Perry E. Metzger <perry@piermont.com>
            Colin Plumb <colin@nyx.net>
            Theodore T'so <tytso@mit.edu>
            David Wagner <daw@cs.berkeley.edu>
            Will Ware <wware@world.std.com>

      Colin Plumb deserves much thanks for proof-reading of the source,
      suggestions, and large code snippets.

      Note that any bugs in the driver are of my own doing, and not Colin's
      or anyone else's.

            -- Rob Rothenburg Walking-Owl <wlkngowl@unix.asb.com>
                                          <rrothenb@ic.sunysb.edu>

