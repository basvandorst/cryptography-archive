
Director, Computer Systems Laboratory                                25-NOV-91
ATTN: Proposed FIPS for DSS
Technology Building, Room B-154
National Institute of Standards and Technology
Gaithersburg, MD  20899

The  following are  my  written  comments to  "A Proposed  Federal Information
Processing Standard  for Digital Signature  Standard (DSS)"  which appeared on
pages 42980 - 42982 of the
FRI 30-AUG-91 Federal Register and in your draft standard dated 19-AUG-91.

I have  divided my written  comments into sections relating  to design choices
that NIST has made in this proposed standard.  I  discuss why the choices that
have been made are sub-optimal for the intended use of the DSS.

1.   CHOICE OF ALGORITHM FOR THE DSS

     The subscribers to my  journal expect the maximum  security possible from
     today's and tomorrow's  computationally-rich PCs.  The proposed  ElGamal-
     based Digital  Signature  Standard (DSS)  does not  provide the  features
     that  a DSS based  on the  RSA algorithm  would.   RSA could  provide the
     digital  signature capabilities  PLUS  provide  other important  computer
     security features,  notably public  key encryption/decryption.   From  my
     perspective,  public key encryption with authentication would be far more
     useful than just a Digital Signature Standard alone.

     Therefore, I recommend that  the proposed standard should  be modified to
     utilize the RSA algorithm instead of the ElGamal algorithm.

2.   CHOICE OF NON-EXTENSIBILITY IN THE PRIME MODULUS

     Most  of  the  cryptosystems  published  in  Cryptosystems  Journal   use
     EXTENSIBLE  keys.  This means that  the keys can  be as large or small as
     necessary.   For  example,  the  key sizes  may  vary over  5  orders  of
     magnitude to  allow  each  user  to select  the  level of  security  they
     require for their application.   There is a  very simple reason for this:
     different  individuals  and  organizations require  different  levels  of
     security based on  their risk assessments.   This  is not  an area  where
     "one size fits all".

     Therefore, I recommend that  the prime modulus not  be a fixed  size (512
     bits).

3.   CHOICE OF THE NUMBER OF BITS IN THE PRIME MODULUS

     The prime modulus  "p" should be larger than  the 512 bits proposed.  512
     bits provides an insufficient level of  security for some of the intended
     uses.  This decision can be likened to the selection  of a 56-bit key for
     DES [footnote 1]: it is too small.

     Ultimately, the DSS  must be judged  on the  level of security  provided.
     In Cryptosystems  Journal [footnote 2] I describe  a hypothetical  massivel
y-parallel
     computer which can process 2*10^18 operations per second.  While this  is
     a  more powerful  machine than  is currently available  (or likely  to be
     available in  the short-term),  the point  is that  my cryptosystems  can
     withstand  even such a  powerful adversary.   Unfortunately,  the 512-bit
     DSS can be defeated by such a massively parallel computer.

     The DSS can be broken by computing the secret variable "x" in

          O(exp(sqrt(ln p ln ln p)))

     operations (where "p" is the prime modulus). [footnote 3]

     In fact, there  are no less than six  separate algorithms that share  the
     same theoretical result of working in this order of time. [footnote 4]

     Calculating the answer to the equation for a 512-bit DSS yields

          exp(sqrt(ln 2^512 ln ln 2^512) operations
          ----------------------------------------- = 35 seconds
          2*10^18 operations per second

     In  other words,  the  512  bit DSS  can  be  quickly  broken by  a  very
     massively powerful brute-force attack.

     I must  point out the  similarity here to  a previous  NIST (NBS) design:
     the vulnerability of a 56-bit DES to a brute-force attack. [footnote 5]
     Let  us assume  that  the DSS  was  based,  instead  of a  512-bit  prime
     modulus, on  a 1024-bit  prime modulus.   Calculating the amount  of time
     necessary to calculate the secret value "x" would take:

          exp(sqrt(ln 2^1024 ln ln 2^1024) operations
          ------------------------------------------- = 1000 years
          2*10^18 operations per second

     In other words, a  DSS utilizing a 1024-bit  prime modulus would  be able
     to withstand a massive  brute force attack.   A 512-bit DSS is vulnerable
     to a massive brute force attack.


                 1FIPS PUB 46, issued 15-JAN-77 by NBS (now NIST).

                 2Cryptosystems Journal, Volume 1 Number 3, page 39.

                 3 Mathematical Cryptology for Computer Scientists and Mathemati
cians,  by
            Wayne Patterson, Published by Rowman & Littlefield, 1987, page 46.

                 4ibid

                 5 "Exhaustive Cryptanalysis  of the NBS Data Encryption Standard",  by W.  Diffie and M. E. Hellman, Computer, Vol 10, 1977, pages 74 - 84.


     Combining  together the  recommended improvements in section  (2) and (3)
     of  this letter, the  prime modulus "p" should be  allowed to vary from a
     minimum of 64 bits (providing little security) to  a maximum of 1024 bits
     (providing maximum security).

4.   OTHER ENHANCEMENTS TO THE STANDARD

     a.   Appendix 3,  while not  requiring a  specific  method of  generating
          random bits, fails to  address a key point.   Appendix 3  states two
          examples  of  how  to  generate  random  bits  (using  a  true noise
          hardware   randomizer  and  a  pseudorandom   function).    However,
          appendix 3 fails to state that these are  not equivalent in terms of
          their capabilities to generate random bits.

          For  these  reasons,  the following  statement  should  be added  to
          Appendix 3:

               "These  two example methods  stated are  not equivalent in
               their  abilities  to generate  random bits.    It is  well
               known  that the  security  of a  DSS (and  a cryptosystem)
               must depend on the security of  the secret keys.   Because
               the  quality of  the  secret keys  are  asymptotic  to the
               quality of the random bits used,  it must be stressed that
               a strong random number generator should be used."

     b.   In Appendix 4 change  the wording in the last sentence of the  third
          paragraph from:

               "It  is also  worth noting  that several  commercial firms have
               custom processors to do modular  arithmetic on the market". [my
               emphasis on this combined phrase]
                  to:
               "It is  also worth noting that several commercial firms already
               have  available   custom  processors   which  perform   modular
               arithmetic".

     c.   In  Appendix 5, the value "(h  + xr) mod q" is given.  However, q is
          160 bits  and the  value given is  280 bits.   Therefore, the  value
          stated is "(h + xr)" -- not taken "mod q".

5.   SUMMARY

     It would be beneficial to have  a Federal Information Processing Standard
     for Digital Signatures.  Unfortunately, the  draft standard suffers  from
     several  design  mistakes.   The  standard  should be  based  on the  RSA
     standard and should have  extensible keys.  The extensible keys should be
     sufficiently large to avoid the possibility  of a massive parallel brute-
     force attack.

Tony S. Patti
Editor & Publisher
Cryptosystems Journal
P.O. Box 188
Newtown, PA  18940-0188
E-Mail: tony_s_patti@cup.portal.com
