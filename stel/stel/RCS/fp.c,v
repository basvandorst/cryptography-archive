head	1.1;
access;
symbols;
locks
	vince:1.1; strict;
comment	@ * @;


1.1
date	94.06.03.20.23.21;	author vince;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * $Author:$
 * $Header:$
 * $Date:$
 * $Revision:$
 * $Locker:$
 */

#ifndef	lint
static char *rcsid = "@@(#) $Id:$";
#endif	lint


#include <stdio.h>
#include "lip.h"

main(argc, argv)
int	argc;
char	*argv[];
{
	verylong	n, n2;
	int		numbits, prob = 5, ccount = 0;

	int		c, vflg = 0, errflg = 0;
	extern char	*optarg;
	extern int	optind, optopt;

	while ((c = getopt(argc, argv, "vs:c:")) != EOF) {
		switch (c) {
			case	'v':
				vflg++;
				break;
			case	's':
				zrstarts(atoi(optarg));
				break;
			case	'c':
				ccount = atoi(optarg);
				break;
			case	'?':
				fprintf(stderr, "Unrecognized option: - %c\n",
								optopt);
				errflg++;
				break;
		}
	}

	if (errflg || argc != optind + 2) {
		fprintf(stderr, "Bad arguments\n");
		exit(1);
	}

	numbits = atoi(argv[optind]);
	prob = atoi(argv[optind + 1]);
	
	printf("bits = %d, prob = %d, ccount = %d\n", numbits, prob, ccount);

	while (1) {
		if (!zrandomprime(numbits, prob, &n, zrandomb)) {
			if (vflg)
				printf("zrandomprime() FAILED\n");
			continue;
		}
		if (vflg)
			zhwriteln(n);
		zsdiv(n, 2L, &n2);
		if (vflg)
			zhwriteln(n2);
		if (zcomposite(&n2, prob, 0))  {
			if (vflg)
				printf("n/2 is composite\n");
			continue;
		}

		if (ccount &&
		    (zcomposite(&n, ccount, 0) ||
		     zcomposite(&n2, ccount, 0))) {
			if (vflg)
				printf("numbers are NOT primes\n");
			continue;
		}
		printf("***** this one is good for for DH scheme:\n");
		zhwriteln(n);
		puts("*****");
	}
}
@
