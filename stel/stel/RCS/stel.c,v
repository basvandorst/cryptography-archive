head	1.122;
access;
symbols;
locks
	vince:1.122; strict;
comment	@ * @;


1.122
date	96.04.26.16.29.23;	author vince;	state Exp;
branches;
next	1.121;

1.121
date	96.04.03.08.40.32;	author vince;	state Exp;
branches;
next	1.120;

1.120
date	96.02.03.13.47.54;	author vince;	state Exp;
branches;
next	1.119;

1.119
date	96.02.03.13.24.46;	author vince;	state Exp;
branches;
next	1.118;

1.118
date	96.01.27.11.47.48;	author vince;	state Exp;
branches;
next	1.117;

1.117
date	96.01.26.15.15.13;	author vince;	state Exp;
branches;
next	1.116;

1.116
date	96.01.03.18.20.26;	author vince;	state Exp;
branches;
next	1.115;

1.115
date	95.12.22.10.55.10;	author vince;	state Exp;
branches;
next	1.114;

1.114
date	95.12.21.18.00.21;	author vince;	state Exp;
branches;
next	1.113;

1.113
date	95.12.21.10.58.55;	author vince;	state Exp;
branches;
next	1.112;

1.112
date	95.12.20.18.33.49;	author vince;	state Exp;
branches;
next	1.111;

1.111
date	95.12.15.16.36.17;	author vince;	state Exp;
branches;
next	1.110;

1.110
date	95.12.14.10.36.13;	author vince;	state Exp;
branches;
next	1.109;

1.109
date	95.12.05.15.36.22;	author vince;	state Exp;
branches;
next	1.108;

1.108
date	95.11.29.14.00.27;	author vince;	state Exp;
branches;
next	1.107;

1.107
date	95.11.29.13.18.46;	author vince;	state Exp;
branches;
next	1.106;

1.106
date	95.11.25.19.30.02;	author vince;	state Exp;
branches;
next	1.105;

1.105
date	95.11.25.19.13.48;	author vince;	state Exp;
branches;
next	1.104;

1.104
date	95.11.25.18.19.51;	author vince;	state Exp;
branches;
next	1.103;

1.103
date	95.11.25.17.38.15;	author vince;	state Exp;
branches;
next	1.102;

1.102
date	95.11.25.16.53.41;	author vince;	state Exp;
branches;
next	1.101;

1.101
date	95.11.24.14.19.06;	author vince;	state Exp;
branches;
next	1.100;

1.100
date	95.11.24.14.16.36;	author vince;	state Exp;
branches;
next	1.99;

1.99
date	95.11.24.14.13.18;	author vince;	state Exp;
branches;
next	1.98;

1.98
date	95.11.24.14.07.46;	author vince;	state Exp;
branches;
next	1.97;

1.97
date	95.11.24.14.04.05;	author vince;	state Exp;
branches;
next	1.96;

1.96
date	95.11.24.12.26.47;	author vince;	state Exp;
branches;
next	1.95;

1.95
date	95.11.24.10.38.28;	author vince;	state Exp;
branches;
next	1.94;

1.94
date	95.11.24.10.08.11;	author vince;	state Exp;
branches;
next	1.93;

1.93
date	95.11.24.08.06.44;	author vince;	state Exp;
branches;
next	1.92;

1.92
date	95.11.21.09.56.21;	author vince;	state Exp;
branches;
next	1.91;

1.91
date	95.08.28.10.40.57;	author vince;	state Exp;
branches;
next	1.90;

1.90
date	95.08.26.12.01.03;	author vince;	state Exp;
branches;
next	1.89;

1.89
date	95.08.26.09.47.35;	author vince;	state Exp;
branches;
next	1.88;

1.88
date	95.08.25.15.58.26;	author vince;	state Exp;
branches;
next	1.87;

1.87
date	95.08.25.14.06.17;	author vince;	state Exp;
branches;
next	1.86;

1.86
date	95.08.25.10.59.54;	author vince;	state Exp;
branches;
next	1.85;

1.85
date	95.08.23.19.53.36;	author vince;	state Exp;
branches;
next	1.84;

1.84
date	95.08.23.15.05.54;	author vince;	state Exp;
branches;
next	1.83;

1.83
date	95.08.23.11.16.54;	author vince;	state Exp;
branches;
next	1.82;

1.82
date	95.08.15.18.47.12;	author vince;	state Exp;
branches;
next	1.81;

1.81
date	95.07.29.19.52.54;	author vince;	state Exp;
branches;
next	1.80;

1.80
date	95.07.20.06.02.10;	author vince;	state Exp;
branches;
next	1.79;

1.79
date	95.07.19.18.58.54;	author vince;	state Exp;
branches;
next	1.78;

1.78
date	95.07.14.16.06.22;	author vince;	state Exp;
branches;
next	1.77;

1.77
date	95.07.14.13.58.45;	author vince;	state Exp;
branches;
next	1.76;

1.76
date	95.07.14.13.31.29;	author vince;	state Exp;
branches;
next	1.75;

1.75
date	95.07.14.11.36.25;	author vince;	state Exp;
branches;
next	1.74;

1.74
date	95.07.13.17.35.49;	author vince;	state Exp;
branches;
next	1.73;

1.73
date	95.07.13.11.03.57;	author vince;	state Exp;
branches;
next	1.72;

1.72
date	95.07.12.16.44.00;	author vince;	state Exp;
branches;
next	1.71;

1.71
date	95.07.08.15.49.32;	author vince;	state Exp;
branches;
next	1.70;

1.70
date	95.07.08.15.48.56;	author vince;	state Exp;
branches;
next	1.69;

1.69
date	95.07.05.15.21.22;	author vince;	state Exp;
branches;
next	1.68;

1.68
date	95.05.12.18.07.46;	author vince;	state Exp;
branches;
next	1.67;

1.67
date	95.05.12.18.00.14;	author vince;	state Exp;
branches;
next	1.66;

1.66
date	95.05.12.17.37.20;	author vince;	state Exp;
branches;
next	1.65;

1.65
date	95.05.12.17.29.50;	author vince;	state Exp;
branches;
next	1.64;

1.64
date	95.05.12.16.44.48;	author vince;	state Exp;
branches;
next	1.63;

1.63
date	95.05.10.18.00.18;	author vince;	state Exp;
branches;
next	1.62;

1.62
date	95.05.10.15.10.14;	author vince;	state Exp;
branches;
next	1.61;

1.61
date	95.05.01.18.28.42;	author vince;	state Exp;
branches;
next	1.60;

1.60
date	95.04.24.15.11.14;	author vince;	state Exp;
branches;
next	1.59;

1.59
date	95.04.22.11.13.50;	author vince;	state Exp;
branches;
next	1.58;

1.58
date	95.04.22.10.13.08;	author vince;	state Exp;
branches;
next	1.57;

1.57
date	95.04.22.09.42.58;	author vince;	state Exp;
branches;
next	1.56;

1.56
date	95.04.21.18.32.21;	author vince;	state Exp;
branches;
next	1.55;

1.55
date	95.04.21.18.27.26;	author vince;	state Exp;
branches;
next	1.54;

1.54
date	95.04.08.15.43.35;	author vince;	state Exp;
branches;
next	1.53;

1.53
date	95.04.08.14.38.50;	author vince;	state Exp;
branches;
next	1.52;

1.52
date	95.04.05.16.35.14;	author vince;	state Exp;
branches;
next	1.51;

1.51
date	95.04.03.16.56.36;	author vince;	state Exp;
branches;
next	1.50;

1.50
date	95.03.24.11.25.37;	author vince;	state Exp;
branches;
next	1.49;

1.49
date	95.02.27.18.09.48;	author vince;	state Exp;
branches;
next	1.48;

1.48
date	95.02.27.15.03.39;	author vince;	state Exp;
branches;
next	1.47;

1.47
date	95.02.27.11.42.10;	author vince;	state Exp;
branches;
next	1.46;

1.46
date	95.02.27.11.20.45;	author vince;	state Exp;
branches;
next	1.45;

1.45
date	95.02.27.11.19.27;	author vince;	state Exp;
branches;
next	1.44;

1.44
date	95.02.27.10.46.19;	author vince;	state Exp;
branches;
next	1.43;

1.43
date	95.02.27.07.59.00;	author vince;	state Exp;
branches;
next	1.42;

1.42
date	95.02.23.15.49.43;	author vince;	state Exp;
branches;
next	1.41;

1.41
date	95.02.21.20.54.24;	author vince;	state Exp;
branches;
next	1.40;

1.40
date	95.02.21.20.50.15;	author vince;	state Exp;
branches;
next	1.39;

1.39
date	95.02.21.17.34.49;	author vince;	state Exp;
branches;
next	1.38;

1.38
date	95.02.20.15.19.45;	author vince;	state Exp;
branches;
next	1.37;

1.37
date	95.02.20.13.43.47;	author vince;	state Exp;
branches;
next	1.36;

1.36
date	95.02.20.13.33.59;	author vince;	state Exp;
branches;
next	1.35;

1.35
date	95.02.20.10.23.35;	author vince;	state Exp;
branches;
next	1.34;

1.34
date	95.02.20.10.10.16;	author vince;	state Exp;
branches;
next	1.33;

1.33
date	95.02.16.15.42.44;	author vince;	state Exp;
branches;
next	1.32;

1.32
date	95.02.16.14.55.10;	author vince;	state Exp;
branches;
next	1.31;

1.31
date	95.02.15.16.53.25;	author vince;	state Exp;
branches;
next	1.30;

1.30
date	95.02.06.20.55.46;	author vince;	state Exp;
branches;
next	1.29;

1.29
date	95.01.24.15.55.43;	author vince;	state Exp;
branches;
next	1.28;

1.28
date	95.01.21.15.05.14;	author vince;	state Exp;
branches;
next	1.27;

1.27
date	95.01.21.14.26.31;	author vince;	state Exp;
branches;
next	1.26;

1.26
date	95.01.21.14.25.24;	author vince;	state Exp;
branches;
next	1.25;

1.25
date	95.01.19.12.46.07;	author vince;	state Exp;
branches;
next	1.24;

1.24
date	94.12.28.15.36.23;	author vince;	state Exp;
branches;
next	1.23;

1.23
date	94.12.28.12.18.20;	author vince;	state Exp;
branches;
next	1.22;

1.22
date	94.12.18.14.44.44;	author vince;	state Exp;
branches;
next	1.21;

1.21
date	94.11.28.18.26.12;	author vince;	state Exp;
branches;
next	1.20;

1.20
date	94.11.26.16.20.03;	author vince;	state Exp;
branches;
next	1.19;

1.19
date	94.11.26.15.55.48;	author vince;	state Exp;
branches;
next	1.18;

1.18
date	94.11.26.13.29.06;	author vince;	state Exp;
branches;
next	1.17;

1.17
date	94.11.26.13.15.59;	author vince;	state Exp;
branches;
next	1.16;

1.16
date	94.11.26.11.26.15;	author vince;	state Exp;
branches;
next	1.15;

1.15
date	94.10.25.15.52.11;	author vince;	state Exp;
branches;
next	1.14;

1.14
date	94.10.25.15.05.42;	author vince;	state Exp;
branches;
next	1.13;

1.13
date	94.10.25.14.43.04;	author vince;	state Exp;
branches;
next	1.12;

1.12
date	94.10.25.12.59.40;	author vince;	state Exp;
branches;
next	1.11;

1.11
date	94.10.24.18.17.21;	author vince;	state Exp;
branches;
next	1.10;

1.10
date	94.08.17.11.20.32;	author vince;	state Exp;
branches;
next	1.9;

1.9
date	94.08.16.17.01.50;	author vince;	state Exp;
branches;
next	1.8;

1.8
date	94.06.13.22.36.31;	author vince;	state Exp;
branches;
next	1.7;

1.7
date	94.06.13.16.44.05;	author vince;	state Exp;
branches;
next	1.6;

1.6
date	94.06.13.00.09.01;	author vince;	state Exp;
branches;
next	1.5;

1.5
date	94.06.13.00.04.42;	author vince;	state Exp;
branches;
next	1.4;

1.4
date	94.06.12.21.55.31;	author vince;	state Exp;
branches;
next	1.3;

1.3
date	94.06.06.16.27.39;	author vince;	state Exp;
branches;
next	1.2;

1.2
date	94.06.06.15.23.00;	author vince;	state Exp;
branches;
next	1.1;

1.1
date	94.06.06.14.41.02;	author vince;	state Exp;
branches;
next	;


desc
@@


1.122
log
@safety
@
text
@/*
 * $Author: vince $
 * $Header: /users/vince/src/stel/RCS/stel.c,v 1.121 1996/04/03 08:40:32 vince Exp vince $
 * $Date: 1996/04/03 08:40:32 $
 * $Revision: 1.121 $
 * $Locker: vince $
 */

#ifndef	lint
static char *rcsid = "@@(#) $Id: stel.c,v 1.121 1996/04/03 08:40:32 vince Exp vince $";
#endif	lint

#include <stdio.h>
#include <termios.h>
#include <signal.h>
#include <pwd.h>
#include <netinet/in.h>
#include <netdb.h>
#include <syslog.h>

#ifdef HAS_SYS_PARAM_H
#include <sys/param.h>
#endif

#ifdef AIX
#include <sys/ioctl.h>
#endif
#include "defs.h"

/* md5 stuff */
#include "global.h"
#include "md5.h"

/* idea stuff */
#include "idea.h"
extern IDEAkey		c_ideakey;	/* client */

/* des stuff */
/* #include "des.h" */
extern des_key_schedule	c_schedule1;	/* client */
extern des_key_schedule	c_schedule2;	/* client */
extern des_key_schedule	c_schedule3;	/* client */

/* IVs */
extern des_cblock	s_IV, c_IV;

extern int	logfh; /* log to file handler */

#define OPTIONS "l:np:tvrmMi14aDeh"

#define USAGE		\
"STEL: Secure TELnet, BETA VERSION, protocol id = %d\n\
Usage: %s [hostname] [options] [commands...]\n\
	hostname:	the system you want to connect to\n\
     	-l logname:	the username on the remote system\n\
	-p portnumber:	set port number\n\
	-i:		use IDEA cipher\n\
	-1:		use SINGLE DES cipher\n\
	-4:		use RC4 cipher\n\
	-n:		do not use data encryption\n\
	-r:		enter a random string to enhance randomness\n\
	-m:		use (small) 512 bits modulus\n\
	-M:		use (large) 2048 bits modulus\n\
	-a:		protect from active attacks\n\
	-t:		do not allocate a pseudo terminal\n\
	-e:		disable escape features\n\
	-v:		be verbose\n\
	-D:		be extra verbose\n\
	-h:		display this help screen\n\n\
Default port number is %d\n\
Default encryption algorithm is EDE TRIPLE DES\n\
Default Diffie-Hellman modulus size is 1024 bits\n\
Default escape character is '^]'\n"
#define USECRYPT	\
"This session is using %s encryption for all data transmissions.\r\n"
#define NOUSECRYPT	\
"WARNING: NOT USING DATA ENCRYPTION -- THIS SESSION IS INSECURE\r\n"
#define NOUSEPTY	\
"This session is not using pseudo terminals: passwords will be visible.\r\n"
#define BADOPTION	"option -%c is not compatible with previous options\n"
#define ACTIVEPROTECT	\
"This session is checking integrity and ordering for all data transmissions.\r\n"
struct termios		old, new;
int			ttyset;
static struct termios	saved_ttymode, noecho_ttymode; 

main(argc, argv)
int	argc;
char	*argv[];
{
	cpacket		pp;
	spacket		ppp;
	char		hostbuf[100], username[MAXUSERNAMELEN];
	char		*tohost, *env, *encmode;
	char		*rndstr, rndbuf[512], authbuf[STEL_SECRET_MAX_LEN];
	int		i, s;
	int		cipher;
	int		firstack, noptyflg, errflg, rflg;
	int		portnumber;
	extern char	*optarg;
	extern int	optind;
	struct passwd	*pwd;
	MD5_CTX		mdContext;
	unsigned char	digest[16];
	struct winsize	os_window;
	struct servent	*serv;

	void		trapper();

	char		*getstelsecret();

	/* using SYSV fashion */
	tohost = NULL;
	if (argc > 1 && argv[1][0] != '-') {
		tohost = argv[1]; /* server name */
		argv++;
		argc--;
	}

	/* parse options */
	errflg = noptyflg = rflg = 0;

	firstack = 0;
	rndstr = NULL;
	bzero(&pp, sizeof(pp));

	if ((serv = getservbyname(STELCLIENT, "tcp")) == NULL)
		portnumber = PORTNUM;
	else
		portnumber = htons(serv->s_port);
	
	while ((i = getopt(argc, argv, OPTIONS)) != -1)
		switch (i) {
			case	'l':
				strncpy(username, optarg, sizeof(username));
				strncpy(pp.username, optarg, sizeof(pp.username));
				break;

			case	't':
				noptyflg++;
				break;

			case	'n':
				if (firstack & FLG_USE_SINGLE ||
				    firstack & FLG_USE_IDEA ||
				    firstack & FLG_USE_RC4) {
					fprintf(stderr, BADOPTION, i);
					errflg++;
					break;
				}
				firstack |= FLG_NO_ENCRYPTION;
				break;

			case	'1':
				if (firstack & FLG_NO_ENCRYPTION ||
				    firstack & FLG_USE_IDEA ||
				    firstack & FLG_USE_RC4) {
					fprintf(stderr, BADOPTION, i);
					errflg++;
					break;
				}
				firstack |= FLG_USE_SINGLE;
				break;

			case	'i':
				if (firstack & FLG_NO_ENCRYPTION ||
				    firstack & FLG_USE_SINGLE ||
				    firstack & FLG_USE_RC4) {
					fprintf(stderr, BADOPTION, i);
					errflg++;
					break;
				}
				firstack |= FLG_USE_IDEA;
				break;

			case	'4':
				if (firstack & FLG_NO_ENCRYPTION ||
				    firstack & FLG_USE_SINGLE ||
				    firstack & FLG_USE_IDEA) {
					fprintf(stderr, BADOPTION, i);
					errflg++;
					break;
				}
				firstack |= FLG_USE_RC4;
				break;

			case	'm':
				if (firstack & FLG_NO_ENCRYPTION) {
					fprintf(stderr, BADOPTION, i);
					errflg++;
					break;
				}
				firstack |= FLG_SMALL_MODULUS;
				break;

			case	'M':
				if (firstack & FLG_NO_ENCRYPTION) {
					fprintf(stderr, BADOPTION, i);
					errflg++;
					break;
				}
				firstack |= FLG_LARGE_MODULUS;
				break;

			case	'a':
				firstack |= FLG_ACTIVE_ATTACKS;
				break;

			case	'r':
				if (firstack & FLG_NO_ENCRYPTION) {
					fprintf(stderr, BADOPTION, i);
					errflg++;
					break;
				}
				rflg++;
				break;

			case	'p':
				portnumber = atoi(optarg);
				if (portnumber < 0) {
					fprintf(stderr, "bad port number\n");
					errflg++;
				}
				break;

			case	'v':
				firstack |= FLG_BE_VERBOSE;
				break;

			case	'D':
				firstack |= FLG_BE_VERBOSE;
				firstack |= FLG_DEBUG;
				break;

			case	'e':
				firstack |= FLG_NO_ESCAPE;
				break;

			case	'h':
				(void)fprintf(stderr, USAGE,
						VERSION, STELCLIENT, PORTNUM);
				exit(0);
				break;
			
			case	'?':
			case	':':
				errflg++;
				break;
		}

	if (errflg) {
		(void)fprintf(stderr, "bad options -- %s -h for help.\n",
								STELCLIENT);
		exit(1);
	}

	if (rflg) {
		if (getstelpass("Enter a lenghty random string", rndbuf,
							sizeof(rndbuf))) {
			(void)fprintf(stderr, "string must be provided!\n");
			exit(1);
		}
		if (strlen(rndbuf) < 16) {
			(void)fprintf(stderr, "please enter a longer string!\n");
			exit(1);
		}
		rndstr = rndbuf;
	}

	/* set command */
	for (i = 0; optind < argc; optind++) {
		i += strlen(argv[optind]) + 1;
		if (i > sizeof(pp.command) - 2) {
			(void)fprintf(stderr, "command is too large.\n");
			exit(1);
		}
		(void)strcat(pp.command, argv[optind]);
		if (optind < argc -1)
			(void)strcat(pp.command, " ");
	}

	/* set username */
	if (pp.username[0] == '\0') {
		if ((pwd = getpwuid(getuid())) == NULL) {
			(void)fprintf(stderr, "Who are you?\n");
			exit(1);
		}
		strncpy(username, pwd->pw_name, sizeof(username));
		strncpy(pp.username, pwd->pw_name, sizeof(pp.username));
	}

	/* don't use terminals when deattached from a terminal */
	if (!isatty(0)) {
		noptyflg = 1;
		pp.mode |= FLG_DONTUSE_PTY;
	}
	/* command line option */
	else if (noptyflg)
		pp.mode |= FLG_DONTUSE_PTY;

	
	if (!noptyflg && isatty(0) && ioctl(0, TIOCGWINSZ, &os_window) >= 0) {
		pp.rows = os_window.ws_row;
		pp.cols = os_window.ws_col;
	}
	else {
		pp.rows = (-1);
		pp.cols = (-1);
	}

	/* set environment */
	if ((env = (char *)getenv("TERM")) != NULL)
		strncpy(pp.TERM, env, sizeof(pp.TERM));
	if ((env = (char *)getenv("DISPLAY")) != NULL)
		strncpy(pp.DISPLAY, env, sizeof(pp.DISPLAY));
	if ((env = (char *)getenv("LINES")) != NULL)
		strncpy(pp.LINES, env, sizeof(pp.LINES));
	if ((env = (char *)getenv("COLUMNS")) != NULL)
		strncpy(pp.COLUMNS, env, sizeof(pp.COLUMNS));
	if ((env = (char *)getenv("WINDOWID")) != NULL)
		strncpy(pp.WINDOWID, env, sizeof(pp.WINDOWID));
	/*
	if ((env = (char *)getenv("PATH")) != NULL)
		strncpy(pp.PATH, env, sizeof(pp.PATH));
	*/

	if (tohost == NULL) {
		printf("Hostname? ");
		if (fgets(hostbuf, sizeof(hostbuf), stdin) == NULL) {
			(void)fprintf(stderr, "no host?\n");
			exit(1);
		}
		tohost = hostbuf;
		rip(tohost);
		if (!strlen(tohost)) {
			(void)fprintf(stderr, "No host?\n");
			exit(1);
		}
	}

#ifdef __ultrix
	(void)openlog(STELCLIENT, LOG_WARNING);
#else
	(void)openlog(STELCLIENT, LOG_PID | LOG_ODELAY, LOG_DAEMON);
#endif

	if ((s = callsocket(tohost, portnumber)) == -1)
		exit(1);

	if (firstack & FLG_BE_VERBOSE)
		printf("Connected to %s on port %d.\n", tohost, portnumber);
	else
		printf("Connected to %s.\n", tohost);
	
#ifdef ASCIIBANNER
	/* silently get and ignore banner from server side */
	if (firstack & FLG_DEBUG)
		printf("\nEATING BANNER FROM SERVER\n");
	(void)eatbanner(s);
#endif
	
	/* tell master about user selected options */
	if (firstack & FLG_DEBUG)
		printf("\nSENDING FIRSTACK 0x%02X TO SERVER\n", firstack);
	i = htonl(firstack);
	if (write(s, &i, sizeof(firstack)) != sizeof(firstack)) {
		perror("write(firstack)");
		exit(1);
	}

	pp.mode = htonl(pp.mode);
	pp.rows = htonl(pp.rows);
	pp.cols = htonl(pp.cols);
	pp.version = htonl(VERSION);

	if (!(firstack & FLG_NO_ENCRYPTION)) {
		memcpy(pp.random, (char *)randomdigest(), 16);
		if (firstack & FLG_DEBUG) {
			hexdump("client stream randomizer: ", pp.random, 16);
		}
	}

	MD5Init(&mdContext);
	/* skip digest itself */
	MD5Update(&mdContext, &pp, sizeof(pp) - 16);
	MD5Final(pp.digest, &mdContext);

	if (!(firstack & FLG_NO_ENCRYPTION)) { /* encryption required */
		/* exchange keys */
		if (dhexchange(s, CLIENT_SIDE, firstack, rndstr) < 0) {
			perror("dhexchange()");
			exit(1);
		}

		/* use IDEA encryption */
		if (firstack & FLG_USE_IDEA) {
			encmode = "IDEA";
			cipher = IDEA_CIPHER;
		}

		/* use SINGLE DES encryption */
		else if (firstack & FLG_USE_SINGLE) {
			encmode = "SINGLE DES";
			cipher = DES_CIPHER;
		}

		/* use IDEA encryption */
		else if (firstack & FLG_USE_RC4) {
			encmode = "RC4";
			cipher = RC4_CIPHER;
		}

		/* use triple DES encryption by default */
		else {
			encmode = "TRIPLE DES";
			cipher = TRIPLEDES_CIPHER;
		}

		/* set client IV */
		memcpy(&c_IV, pp.random, 8);

		/* encrypt pp, skipping IV */
		cryptbuf((char *)&pp + 8, sizeof(pp) - 8, DES_ENCRYPT, cipher,
								CLIENT_SIDE);
	}

	if (firstack & FLG_DEBUG) {
		printf("\nSENDING ENVINFO TO SERVER\n");
		hexdump("first envinfo 20 bytes: ", &pp, 20);
		hexdump("next envinfo 20 random bytes : ",
							(char *)&pp + 20, 20);
		hexdump("next envinfo 20 random bytes : ",
							(char *)&pp + 40, 20);
	}

	if (write_data(s, &pp, sizeof(pp)) != sizeof(pp)) {
		perror("write()");
		exit(1);
	}

	/* we have send the packet to server, now let's listen to its reply */
	if ((i = read(s, &ppp, sizeof(ppp)) != sizeof(ppp))) {
		if (!i) {
			printf("Server has gone away.\n");
			exit(1);
		}
		perror("read()");
		exit(1);
	}

	if (!(firstack & FLG_NO_ENCRYPTION)) { /* encryption required */
		/* set server IV */
		memcpy(&s_IV, ppp.random, 8);

		/* decrypt it skipping server IV */
		cryptbuf((char *)&ppp + 8, sizeof(ppp) - 8, DES_DECRYPT,
							cipher, SERVER_SIDE);

	}

	/* check ppp integrity */
	MD5Init(&mdContext);
	/* skip digest itself */
	MD5Update(&mdContext, &ppp, sizeof(ppp) - 16);
	MD5Final(digest, &mdContext);

	if (memcmp(digest, ppp.digest, 16)) {
		printf("Received corrupted data from server!\n");
		exit(1);
	}

	ppp.sreply = ntohl(ppp.sreply);

	if (firstack & FLG_DEBUG) {
		printf("\nREAD REPLY FROM SERVER\n");
		printf("sreply flag: 0x%02X\n", ppp.sreply);

		if (!(firstack & FLG_NO_ENCRYPTION))
			hexdump("server stream randomizer: ", ppp.random, 16);
	}

	if (ppp.sreply & MSG_WRONG_VERSION) {
		printf("%s version mismatch.  Can not talk with server.\n",
								STELCLIENT);
		exit(1);
	}
					

	/* this is is weak, and it is intended as an experimental feature
	only.  the point is that /etc/stelsecret should be readable by the
	user.  this is no good since the user could make /etc/stelsecret
	public and thus completely defeat the mutual authentication method.
	actually, stel is supposed to be run as a SUID to root program in
	order to take advantage of this feature. I do not like SUIDed
	programs, though. */
	if (ppp.sreply & MSG_SYSTEM_AUTH_REQUIRED) {
		char	*systelsec;

		printf("Host mutual authentication is required by %s.\n",
								tohost);

		if ((systelsec = getstelsecret(ETC_STEL_SECRET_NAME, tohost)) == NULL) {
			printf("Cannot access %s\n", ETC_STEL_SECRET_NAME);
			if (getstelpass("Please enter it manually", authbuf,
							sizeof(authbuf))) {
				(void)fprintf(stderr, "No secret?\n");
				exit(1);
			}
			systelsec = authbuf;
		}

		i = mauth(s, systelsec, CLIENT_SIDE, firstack);
		bzero(systelsec, strlen(systelsec));
		if (i == -1) {
			perror("mauth()");
			exit(1);
		}
		else if (i == 1) {
			fprintf(stderr, "Host mutual authentication failed!\n");
			exit(1);
		}
		printf("Host mutual authentication OK\n");
	}

	/* restore ids, in case stel was a SUID program */
	if (setgid(getgid()) == -1) {
		perror("setgid()");
		exit(1);
	}
	if (setuid(getuid()) == -1) {
		perror("setuid()");
		exit(1);
	}

	if (ppp.sreply & MSG_LOGIN_AUTH_REQUIRED) {
		printf("User mutual authentication required by %s@@%s.\n",
							username, tohost);

		if (getstelpass("Enter stelsecret", authbuf, sizeof(authbuf))) {
			(void)fprintf(stderr, "No secret?\n");
			exit(1);
		}

		i = mauth(s, authbuf, CLIENT_SIDE, firstack);
		if (i == -1) {
			perror("mauth()");
			exit(1);
		}
		else if (i == 1) {
			fprintf(stderr, "User mutual authentication failed!\n");
			exit(1);
		}
		printf("User mutual authentication OK\n");
	}
		
	if (ppp.sreply == MSG_MUST_AUTH) {
		printf(
			"Mutual authentication required -- NOT using encryption, aborting...\n");
		exit(1);
	}
	
	if (ppp.sreply == MSG_CORRUPTED_DATA) {
		printf("Server received corrupted data from us!\n");
		exit(1);
	}

	/* server allocates a pseudo terminal */
	if (!noptyflg) {
		(void)signal(SIGINT, trapper);
		(void)signal(SIGQUIT, trapper);
		(void)signal(SIGHUP, trapper);
		(void)signal(SIGTERM, trapper);

		/* set terminal to raw */
		if (tcgetattr(0, &old) == -1) {
			perror("tcgetattr()");
			exit(1);
		}
		(void)memcpy(&new, &old, sizeof(struct termios));
		new.c_cc[VTIME] = 0;
		new.c_cc[VMIN]  = 1;
		new.c_cc[VINTR] = 0;
		new.c_lflag &= ~(ECHO | ISIG | ICANON);
		new.c_oflag &= ~(ONLCR | OPOST);
#ifndef SOLARIS
#if defined(BSD) && (BSD >= 199306)
		new.c_iflag &= ~(INLCR | ICRNL | IXON | IXOFF | 
							ISTRIP | BRKINT);
#else
		new.c_iflag &= ~(INLCR | ICRNL | IXON | IXOFF | IUCLC |
							ISTRIP | BRKINT);
#endif
#else /* !SOLARIS */
		new.c_iflag &= ~(INLCR | ICRNL | IXON | IXOFF | IUCLC |
							ISTRIP | BRKINT);
#endif /* SOLARIS */
		if (tcsetattr(0, TCSANOW, &new) == -1) {
			perror("tcgetattr()");
			exit(1);
		}
		ttyset = 1;
	}

	if (firstack & FLG_NO_ENCRYPTION)
		printf(NOUSECRYPT);
	else
		printf(USECRYPT, encmode);

	if (firstack & FLG_ACTIVE_ATTACKS)
		printf(ACTIVEPROTECT);

	/* escape status */
	if (noptyflg) {
		printf(NOUSEPTY);
		printf("Escape features disabled.\r\n");
	}
	else
		printf("Escape character is '^]'.\r\n");

	cprintf("please note the PID\r\n");
	cprintf("messages without the PID are originated by remote party\r\n");
	cprintf("----GOING REMOTE----\r\n\n");

	if (makeio(0, 1, s, -1, CLIENT_SIDE, firstack, tohost,
				&old, &new, NOTIMEOUT, username)) {
		if (logfh)
			(void)close(logfh);
		if (!noptyflg)
			(void)tcsetattr(0, TCSANOW, &old);
		cprintf("Connection with %s lost.\n", tohost);
		(void)shutdown(s, 2);
		(void)close(s);
		exit(1);
	}
	if (logfh)
		(void)close(logfh);
	(void)shutdown(s, 2);
	(void)close(s);
	if (!noptyflg)
		(void)tcsetattr(0, TCSANOW, &old);
	cprintf("Connection with %s closed.\n", tohost);
	return(0);
}

void
trapper(s)
int	s;
{
	(void)signal(s, trapper);

	(void)fprintf(stderr, "%s: trapped signal %d!\n", STELCLIENT, s);
	if (ttyset)
		(void)tcsetattr(0, TCSANOW, &old);
	exit(1);
}

getstelpass(prompt, buf, len)
char	*prompt, *buf;
int	len;
{
	void		(*oldsig) (); 
	void		gp_restore_ttymode();

	if (isatty(0)) {
		printf("%s: ", prompt);
		(void)fflush(stdout);
		/* ECHO OFF */
		tcgetattr(0, &saved_ttymode);
		if ((oldsig = signal(SIGINT, SIG_IGN)) != SIG_IGN)
			(void)signal(SIGINT, gp_restore_ttymode);
		tcgetattr(0, &noecho_ttymode);
		noecho_ttymode.c_lflag &= ~ECHO;
		tcsetattr(0, TCSANOW, &noecho_ttymode);
	}
	else {
		printf("%s (echo is on): ", prompt);
		(void)fflush(stdout);
	}

	/* get password */
	if (fgets(buf, len, stdin) == NULL)
		return(1);
	rip(buf);

	if (isatty(0)) {
		/* ECHO ON */
		tcsetattr(0, TCSANOW, &saved_ttymode);
		if (oldsig != SIG_IGN)
			(void)signal(SIGINT, oldsig);
		printf("\n");
	}
	return(0);
}

/* restore - restore terminal modes when user aborts command */
void gp_restore_ttymode()
{
	if (tcsetattr(0, TCSANOW, &saved_ttymode) == -1)
		perror("tcsetattr()");
	exit(1);
}

@


1.121
log
@safety
@
text
@d3 4
a6 4
 * $Header: /users/vince/src/stel/RCS/stel.c,v 1.120 1996/02/03 13:47:54 vince Exp $
 * $Date: 1996/02/03 13:47:54 $
 * $Revision: 1.120 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.120 1996/02/03 13:47:54 vince Exp $";
d52 2
a53 3
"STEL: Secure TELnet, %s\n\
please do not circulate -- bugs to stel-authors@@idea.sec.dsi.unimi.it\n\
Usage: %s [hostname] [-l logname] [-p port] [-i14nrmMatevDh] [commands...]\n\
d71 1
a71 1
Default encryption algorithm is TRIPLE DES\n\
a82 2
extern char		versionstring[];

d241 1
a241 1
					versionstring, STELCLIENT, PORTNUM);
d355 7
d364 1
a364 2
		printf("\nSENDING FIRSTACK 0x%02X TO SERVER\n",
								firstack);
@


1.120
log
@safety
@
text
@d3 4
a6 4
 * $Header: /home/vince/src/stel/RCS/stel.c,v 1.119 1996/02/03 13:24:46 vince Exp vince $
 * $Date: 1996/02/03 13:24:46 $
 * $Revision: 1.119 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.119 1996/02/03 13:24:46 vince Exp vince $";
a83 3
#define NOACTIVEPROTECT	\
"-a option not set: no protection from active attacks, no file transfer\r\n"

a607 2
	else if (firstack & FLG_BE_VERBOSE)
		printf(NOACTIVEPROTECT);
@


1.119
log
@safety
@
text
@d3 4
a6 4
 * $Header: /home/vince/src/stel/RCS/stel.c,v 1.118 1996/01/27 11:47:48 vince Exp $
 * $Date: 1996/01/27 11:47:48 $
 * $Revision: 1.118 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.118 1996/01/27 11:47:48 vince Exp $";
d558 1
a558 1
			"Mutual authentication required -- not using encryption, aborting...\n");
@


1.118
log
@safety
@
text
@d3 4
a6 4
 * $Header: /home/vince/src/stel/RCS/stel.c,v 1.117 1996/01/26 15:15:13 vince Exp vince $
 * $Date: 1996/01/26 15:15:13 $
 * $Revision: 1.117 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.117 1996/01/26 15:15:13 vince Exp vince $";
d136 1
a136 1
		portnumber = serv->s_port;
@


1.117
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel-dist/stel/RCS/stel.c,v 1.116 1996/01/03 18:20:26 vince Exp $
 * $Date: 1996/01/03 18:20:26 $
 * $Revision: 1.116 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.116 1996/01/03 18:20:26 vince Exp $";
d622 2
a623 2
	cprintf("please note the pid\r\n");
	cprintf("messages without the pid are originated by remote party\r\n");
@


1.116
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.115 1995/12/22 10:55:10 vince Exp $
 * $Date: 1995/12/22 10:55:10 $
 * $Revision: 1.115 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.115 1995/12/22 10:55:10 vince Exp $";
d49 1
a49 1
#define OPTIONS "l:np:tvrmMi14ADeh"
d53 2
a54 2
please do not circulate --- bugs to stel-authors@@idea.sec.dsi.unimi.it\n\
Usage: %s [hostname] [-l logname] [-p port] [-%s] [commands...]\n\
d65 1
a65 1
	-A:		do not protect from active attacks\n\
d85 1
a85 1
"-A option is set: no protection from active attacks, no file transfer\r\n"
a137 1
	firstack |= FLG_ACTIVE_ATTACKS;
d211 2
a212 2
			case	'A':
				firstack &= ~FLG_ACTIVE_ATTACKS;
d246 2
a247 3
				(void)fprintf(stderr,
					USAGE, versionstring,
					STELCLIENT, OPTIONS, PORTNUM);
d611 1
a611 1
	else
@


1.115
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.114 1995/12/21 18:00:21 vince Exp $
 * $Date: 1995/12/21 18:00:21 $
 * $Revision: 1.114 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.114 1995/12/21 18:00:21 vince Exp $";
d49 1
a49 1
#define OPTIONS "l:np:tvrmMi14AsDeh"
a65 1
	-s:		maximum security mode: aka -a -M -i -r\n\
d104 1
a104 1
	int		firstack, sreply, noptyflg, errflg, rflg;
a137 5
	/* testing */
	/*
	portnumber = 10006;
	*/

a252 12
			case	's':
				if (firstack & FLG_NO_ENCRYPTION) {
					fprintf(stderr, BADOPTION, i);
					errflg++;
					break;
				}
				firstack |= FLG_LARGE_MODULUS;
				firstack |= FLG_USE_IDEA;
				firstack |= FLG_ACTIVE_ATTACKS;
				rflg++;
				break;

@


1.114
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.113 1995/12/21 10:58:55 vince Exp $
 * $Date: 1995/12/21 10:58:55 $
 * $Revision: 1.113 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.113 1995/12/21 10:58:55 vince Exp $";
d49 1
a49 1
#define OPTIONS "l:np:tvrmMi14asDeh"
d65 1
a65 1
	-a:		protect against active attacks\n\
d85 2
d144 1
d218 2
a219 8
			case	'a':
				if (firstack & FLG_NO_ENCRYPTION) {
					fprintf(stderr, BADOPTION, i);
					errflg++;
					break;
				}

				firstack |= FLG_ACTIVE_ATTACKS;
d631 2
@


1.113
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.112 1995/12/20 18:33:49 vince Exp vince $
 * $Date: 1995/12/20 18:33:49 $
 * $Revision: 1.112 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.112 1995/12/20 18:33:49 vince Exp vince $";
a82 1
#define UNSUPOPTION	"compiled with -DSYSLOGINONLY, -%c option not supported\n"
a144 3
#ifdef SYSLOGINONLY
				fprintf(stderr, UNSUPOPTION, i);
#else
a146 1
#endif
a149 3
#ifdef SYSLOGINONLY
				fprintf(stderr, UNSUPOPTION, i);
#else
a150 1
#endif
a298 1
#ifndef SYSLOGINONLY
a319 1
#endif /* !SYSLOGINONLY */
a511 1
#ifndef SYSLOGINONLY
a577 1
#endif /* SYSLOGINONLY */
@


1.112
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel-dist/stel/RCS/stel.c,v 1.111 1995/12/15 16:36:17 vince Exp $
 * $Date: 1995/12/15 16:36:17 $
 * $Revision: 1.111 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.111 1995/12/15 16:36:17 vince Exp $";
d660 2
a661 1
	if (makeio(0, 1, s, firstack, tohost, &old, &new, 0, -1, NULL)) {
@


1.111
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel-dist/stel/RCS/stel.c,v 1.110 1995/12/14 10:36:13 vince Exp $
 * $Date: 1995/12/14 10:36:13 $
 * $Revision: 1.110 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.110 1995/12/14 10:36:13 vince Exp $";
d133 1
a133 1
	if ((serv = getservbyname(PRGNAME, "tcp")) == NULL)
d267 1
a267 1
					PRGNAME, OPTIONS, PORTNUM);
d291 1
a291 1
								PRGNAME);
d382 1
a382 1
	(void)openlog(PRGNAME, LOG_WARNING);
d384 1
a384 1
	(void)openlog(PRGNAME, LOG_PID | LOG_ODELAY, LOG_DAEMON);
d518 1
a518 1
								PRGNAME);
d656 3
a658 4
	printf("%s[%d]: please note the pid\r\n", PRGNAME, getpid());
	printf("%s[%d]: messages without the pid are originated by remote party\r\n",
							PRGNAME, getpid());
	printf("%s[%d]: ----GOING REMOTE----\r\n\n", PRGNAME, getpid());
d660 1
a660 1
	if (makeio(0, 1, s, firstack, tohost, &old, &new, 0)) {
d665 1
a665 2
		printf("%s[%d]: Connection with %s lost.\n",
						PRGNAME, getpid(), tohost);
d676 1
a676 2
	printf("%s[%d]: Connection with %s closed.\n",
						PRGNAME, getpid(), tohost);
d685 2
a686 2
	(void)fprintf(stderr, "%s[%d] trapped signal %d!\n",
						PRGNAME, getpid(), s);
@


1.110
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel-dist/stel/RCS/stel.c,v 1.109 1995/12/05 15:36:22 vince Exp $
 * $Date: 1995/12/05 15:36:22 $
 * $Revision: 1.109 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.109 1995/12/05 15:36:22 vince Exp $";
d47 2
d662 2
d672 2
@


1.109
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.108 1995/11/29 14:00:27 vince Exp $
 * $Date: 1995/11/29 14:00:27 $
 * $Revision: 1.108 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.108 1995/11/29 14:00:27 vince Exp $";
d20 1
d24 4
d137 1
d139 1
@


1.108
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.107 1995/11/29 13:18:46 vince Exp vince $
 * $Date: 1995/11/29 13:18:46 $
 * $Revision: 1.107 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.107 1995/11/29 13:18:46 vince Exp vince $";
d19 1
d371 6
@


1.107
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.106 1995/11/25 19:30:02 vince Exp $
 * $Date: 1995/11/25 19:30:02 $
 * $Revision: 1.106 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.106 1995/11/25 19:30:02 vince Exp $";
d58 1
a58 1
	-s:		maximum secure mode: aka -a -M -i -r\n\
@


1.106
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.105 1995/11/25 19:13:48 vince Exp $
 * $Date: 1995/11/25 19:13:48 $
 * $Revision: 1.105 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.105 1995/11/25 19:13:48 vince Exp $";
d33 1
a33 1
#include "des.h"
@


1.105
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.104 1995/11/25 18:19:51 vince Exp $
 * $Date: 1995/11/25 18:19:51 $
 * $Revision: 1.104 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.104 1995/11/25 18:19:51 vince Exp $";
d51 1
a51 1
	-1:		use SINGLE DES\n\
d54 1
a54 1
	-r:		use a random string to enhance randomness\n\
d58 1
a58 1
	-s:		extra secure mode: aka -a -M -i -r\n\
d67 1
a67 1
Default escape character is ^]\n"
@


1.104
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.103 1995/11/25 17:38:15 vince Exp vince $
 * $Date: 1995/11/25 17:38:15 $
 * $Revision: 1.103 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.103 1995/11/25 17:38:15 vince Exp vince $";
d518 2
a519 3
		if (firstack & FLG_BE_VERBOSE)
			printf("Host mutual authentication is required by %s.\n",
				tohost);
d555 2
a556 3
		if (firstack & FLG_BE_VERBOSE)
			printf("User mutual authentication required by %s@@%s.\n",
				username, tohost);
@


1.103
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.102 1995/11/25 16:53:41 vince Exp vince $
 * $Date: 1995/11/25 16:53:41 $
 * $Revision: 1.102 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.102 1995/11/25 16:53:41 vince Exp vince $";
d77 1
a77 2
"This session is protected against active attacks: checking integrity\n\r\
and ordering for all data transmissions.\r\n"
d381 1
a381 1
		printf("SENDING FIRSTACK 0x%02X TO SERVER\n",
d446 1
a446 1
		printf("SENDING ENVINFO TO SERVER\n");
d493 1
a493 1
		printf("READ REPLY FROM SERVER\n");
@


1.102
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.101 1995/11/24 14:19:06 vince Exp vince $
 * $Date: 1995/11/24 14:19:06 $
 * $Revision: 1.101 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.101 1995/11/24 14:19:06 vince Exp vince $";
d51 1
a51 1
	-1:		use single DES\n\
d420 1
a420 1
		/* use single DES encryption */
@


1.101
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.100 1995/11/24 14:16:36 vince Exp vince $
 * $Date: 1995/11/24 14:16:36 $
 * $Revision: 1.100 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.100 1995/11/24 14:16:36 vince Exp vince $";
d38 3
d103 1
d382 1
a382 1
		printf("SENDING FIRSTACK 0x%02X TO SERVER (unencrypted)\n",
a393 1
	memcpy(pp.random, (char *)randomdigest(), 16);
d395 6
a400 2
	if (firstack & FLG_DEBUG)
		hexdump("client stream randomizer: ", pp.random, 16);
d403 2
a404 2
	/* skip digest itself and padding */
	MD5Update(&mdContext, &pp, sizeof(pp) - 16 - 8);
d431 1
d438 6
a443 2
		/* encrypt */
		cryptbuf(&pp, sizeof(pp), DES_ENCRYPT, cipher, CLIENT_SIDE);
d447 1
a447 1
		printf("SENDING ENVINFO TO SERVER (encrypted)\n");
d461 5
a465 1
	if (read(s, &ppp, sizeof(ppp)) != sizeof(ppp)) {
d469 22
d494 11
a504 3
		printf("READ REPLY FROM SERVER (unencrypted)\n");
		printf("sereply flag: 0x%02X\n", ppp.sreply);
		hexdump("server stream randomizer: ", ppp.random, 16);
d506 1
d586 1
a586 1
		printf("Communication path is corrupted!\n");
@


1.100
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.99 1995/11/24 14:13:18 vince Exp vince $
 * $Date: 1995/11/24 14:13:18 $
 * $Revision: 1.99 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.99 1995/11/24 14:13:18 vince Exp vince $";
d458 1
a458 1
		hexdump("server stream randomizer: ", pp.random, 16);
@


1.99
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.98 1995/11/24 14:07:46 vince Exp vince $
 * $Date: 1995/11/24 14:07:46 $
 * $Revision: 1.98 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.98 1995/11/24 14:07:46 vince Exp vince $";
d62 1
a62 1
Default cipher algorithm is TRIPLE DES\n\
@


1.98
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.97 1995/11/24 14:04:05 vince Exp vince $
 * $Date: 1995/11/24 14:04:05 $
 * $Revision: 1.97 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.97 1995/11/24 14:04:05 vince Exp vince $";
d68 1
a68 2
"WARNING: NOT USING DATA ENCRYPTION -- THIS SESSION IS INSECURE\r\n\
DO NOT USE CONVENTIONAL PASSWORDS IN THIS SESSION!\r\n"
d70 1
a70 1
"This session is not using pseudo terminals.  Passwords will be exposed.\r\n"
@


1.97
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.96 1995/11/24 12:26:47 vince Exp vince $
 * $Date: 1995/11/24 12:26:47 $
 * $Revision: 1.96 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.96 1995/11/24 12:26:47 vince Exp vince $";
d394 1
a394 1
		hexdump("client IV: ", pp.random, 16);
d459 1
a459 1
		hexdump("server IV: ", pp.random, 16);
@


1.96
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.95 1995/11/24 10:38:28 vince Exp vince $
 * $Date: 1995/11/24 10:38:28 $
 * $Revision: 1.95 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.95 1995/11/24 10:38:28 vince Exp vince $";
d51 1
a51 1
	-r:		enter a random string to enhance randomness\n\
d55 2
a56 1
	-s:		secure mode: aka -a -M -i -r\n\
d62 1
a62 1
Default cipher algorithm is EDE TRIPLE DES\n\
d71 1
a71 1
"No access to tty; thus no job control in this session...\r\n"
d88 2
a89 1
	packet		pp;
d92 1
a92 1
	char		*rndstr, rndbuf[1024], authbuf[STEL_SECRET_MAX_LEN];
d379 1
a379 1
		printf("Sending firstack 0x%02X to server (unencrypted)\n",
d391 1
d393 3
d424 1
a424 1

d435 8
a442 2
	if (firstack & FLG_DEBUG)
		printf("Sending envinfo to server (encrypted)\n");
d450 1
a450 1
	if (read(s, &sreply, sizeof(sreply)) != sizeof(sreply)) {
d454 1
a454 1
	sreply = ntohl(sreply);
d456 5
a460 2
	if (firstack & FLG_DEBUG)
		printf("Read reply from server 0x%02X (unencrypted)\n", sreply);
d470 1
a470 1
	if (sreply & MSG_SYSTEM_AUTH_REQUIRED) {
d510 1
a510 1
	if (sreply & MSG_LOGIN_AUTH_REQUIRED) {
d533 1
a533 1
	if (sreply == MSG_MUST_AUTH) {
d539 1
a539 1
	if (sreply == MSG_CORRUPTED_DATA) {
a580 8
	/* pseudo terminal status */
	if (noptyflg) {
		/* direct disable escape features if pty not available */
		pp.mode |= FLG_NO_ESCAPE;
		printf(NOUSEPTY);
	}
	
	/* encryption status */
d590 5
a594 1
	if (!(firstack & FLG_NO_ESCAPE))
a595 2
	else
		printf("Escape features disabled.\r\n");
@


1.95
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.94 1995/11/24 10:08:11 vince Exp $
 * $Date: 1995/11/24 10:08:11 $
 * $Revision: 1.94 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.94 1995/11/24 10:08:11 vince Exp $";
d38 1
a38 1
#define OPTIONS "l:np:tvrmMi1asDeh"
d46 5
a50 3
	-p portnumber:	set port number (default port is %d)\n\
	-i:		use IDEA cipher (default is single EDE 3DES)\n\
	-1:		use single DES cipher (default is EDE 3DES)\n\
d52 2
a53 2
	-m:		use (small) 512 bits modulus (default is 1024 bits)\n\
	-M:		use (large) 2048 bits modulus (default is 1024 bits)\n\
d55 2
a56 3
	-s:		super secure mode: aka -a -M -i -r\n\
	-n:		do not use data encryption/authentication at all\n\
	-e:		disable escape features (^] is enabled by default)\n\
d59 5
a63 1
	-h:		display this help screen\n"
d150 2
a151 1
				    firstack & FLG_USE_IDEA) {
d161 2
a162 1
				    firstack & FLG_USE_IDEA) {
d172 2
a173 1
				    firstack & FLG_USE_SINGLE) {
d181 11
d413 5
@


1.94
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.93 1995/11/24 08:06:44 vince Exp $
 * $Date: 1995/11/24 08:06:44 $
 * $Revision: 1.93 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.93 1995/11/24 08:06:44 vince Exp $";
d54 1
a55 1
	-n:		do not use data encryption at all\n\
d57 1
a57 1
	-D:		be very berbose (display debug information)\n\
@


1.93
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.92 1995/11/21 09:56:21 vince Exp $
 * $Date: 1995/11/21 09:56:21 $
 * $Revision: 1.92 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.92 1995/11/21 09:56:21 vince Exp $";
d53 1
d62 2
a63 1
"WARNING: NOT USING DATA ENCRYPTION -- THIS SESSION IS INSECURE\r\n"
d69 2
a70 1
"Checking integrity and ordering for all data transmissions.\r\n"
a191 1
				/*
d197 1
a197 1
				*/
@


1.92
log
@safety
@
text
@d3 4
a6 4
 * $Header: /users/vince/src/stel/RCS/stel.c,v 1.93 1995/11/15 15:59:46 vince Exp vince $
 * $Date: 1995/11/15 15:59:46 $
 * $Revision: 1.93 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.93 1995/11/15 15:59:46 vince Exp vince $";
d189 1
d195 1
@


1.91
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.90 1995/08/26 12:01:03 vince Exp vince $
 * $Date: 1995/08/26 12:01:03 $
 * $Revision: 1.90 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.90 1995/08/26 12:01:03 vince Exp vince $";
d38 1
a38 1
#define OPTIONS "l:np:tvrmiasDeh"
d47 2
a48 1
	-i:		use a combination of IDEA and 3DES (default is 3DES)\n\
d50 2
a51 1
	-m:		use 2048 bits modulus (default is 1024 bits)\n\
a52 1
	-s:		extra secure mode, equal to -i -r -m -a\n\
d56 1
a56 1
	-D:		display debug and hexdump information\n\
a109 1
	firstack |= FLG_USE_TRIPLE; /* triple des by default */
d141 1
a141 1
				if (/* firstack & FLG_USE_TRIPLE || */
d150 1
a150 2
			/*
			case	'3':
d157 1
a157 1
				firstack |= FLG_USE_TRIPLE;
a158 1
			*/
d161 2
a162 2
				if (firstack & FLG_NO_ENCRYPTION /*
				    firstack & FLG_USE_TRIPLE */) {
a167 1
				firstack |= FLG_USE_TRIPLE;
d176 9
d253 1
a253 1
		(void)fprintf(stderr, "bad options -- %s -h for help\n",
d276 1
a276 1
			(void)fprintf(stderr, "command is too large\n");
d290 1
d339 1
a339 1
			(void)fprintf(stderr, "cannot connect to new.line.org!\n");
d381 1
a381 1
			encmode = "IDEA plus TRIPLE DES";
d385 4
a388 4
		/* use triple DES encryption */
		else if (firstack & FLG_USE_TRIPLE) {
			encmode = "TRIPLE DES";
			cipher = TRIPLEDES_CIPHER;
d391 1
a391 1
		/* use single DES encryption */
d393 2
a394 2
			encmode = "single DES";
			cipher = DES_CIPHER;
d425 2
a426 1
	order to take advantage of this feature.  */
d451 1
a451 1
			fprintf(stderr, "Host authentication failed\n");
d469 1
a469 1
			printf("User mutual authentication required by %s@@%s\n",
d483 1
a483 1
			fprintf(stderr, "User mutual authentication failed\n");
d492 1
a492 1
			"Mutual authentication required, not using encryption, aborting...\n");
d560 2
a561 3
	printf("%s[%d]: going remote, please note the pid\r\n",
							PRGNAME, getpid());
	printf("%s[%d]: messages without the pid are originated by the server\r\n\n",
d563 1
@


1.90
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.89 1995/08/26 09:47:35 vince Exp vince $
 * $Date: 1995/08/26 09:47:35 $
 * $Revision: 1.89 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.89 1995/08/26 09:47:35 vince Exp vince $";
d43 1
a43 1
Usage: %s [hostname] [-l logname] [-p portnum] [-%s] [commands...]\n\
@


1.89
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.88 1995/08/25 15:58:26 vince Exp $
 * $Date: 1995/08/25 15:58:26 $
 * $Revision: 1.88 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.88 1995/08/25 15:58:26 vince Exp $";
a37 1
#ifndef SYSLOGINONLY
d39 1
a39 19
#define USAGE		\
"STEL: Secure TELnet, %s\n\
Please do NOT circulate --- bugs to stel-authors@@idea.sec.dsi.unimi.it\n\
Usage: %s [hostname] [-l logname] [-p portnum] [-irmasenvDh] [commands...]\n\
	hostname:	the system you want to connect to\n\
	-l logname:	the username on the remote system\n\
	-p portnumber:	set port number (default port is %d)\n\
	-i:		use a combination of IDEA and 3DES (default is 3DES)\n\
	-r:		enter a random string to enhance randomness\n\
	-m:		use 2048 bits modulus (default is 1024 bits)\n\
	-a:		protect against active attacks\n\
	-s:		extra secure mode, equal to -i -r -m -a\n\
	-e:		disable escape features (^] is enabled by default)\n\
	-n:		do not use data encryption at all\n\
	-v:		be verbose\n\
	-D:		display debug and hexdump information\n\
	-h:		display this help screen\n"
#else /* !SYSLOGINONLY */
#define OPTIONS "np:vrmiasDeh"
d42 2
a43 2
Please do NOT circulate --- bugs to stel-authors@@idea.sec.dsi.unimi.it\n\
Usage: %s [hostname] [-p portnum] [-irmasenvDh]\n\
d45 1
a56 1
#endif /* SYSLOGINONLY */
d64 1
d66 1
a66 1
"Checking integrity and synchronization for all data transmissions.\r\n"
d79 2
a80 1
	char		*tohost, hostbuf[100], *env, *encmode;
a122 1
#ifndef SYSLOGINONLY
d124 6
a129 2
				(void)strncpy(pp.username, optarg,
						sizeof(pp.username));
d133 3
d137 1
a138 2
#endif /* !SYSLOGINONLY */
			
d222 3
a224 2
				(void)fprintf(stderr, USAGE,
					versionstring, PRGNAME, PORTNUM);
d284 1
a284 1
		(void)strncpy(pp.username, pwd->pw_name, sizeof(pp.username));
d309 1
a309 1
		(void)strncpy(pp.TERM, env, sizeof(pp.TERM));
d311 1
a311 1
		(void)strncpy(pp.DISPLAY, env, sizeof(pp.DISPLAY));
d313 1
a313 1
		(void)strncpy(pp.LINES, env, sizeof(pp.LINES));
d315 1
a315 1
		(void)strncpy(pp.COLUMNS, env, sizeof(pp.COLUMNS));
d317 1
a317 1
		(void)strncpy(pp.WINDOWID, env, sizeof(pp.WINDOWID));
d320 1
a320 1
		(void)strncpy(pp.PATH, env, sizeof(pp.PATH));
d414 2
a415 2
	only. the point is that /etc/stelsecret should be readable by the
	user. this is no good since the user could make /etc/stelsecret
d417 2
a418 3
	as an alternative it is possible to make stel a SUID to root program.
	but I do not like this too much since we have to deal with core
	dumps and things like that */
d423 2
a424 2
			printf("trying %s mutual authentication\n",
							ETC_STEL_SECRET_NAME);
d427 1
a427 2
			printf( "Cannot access local system stelsecret (%s)\n",
							ETC_STEL_SECRET_NAME);
d443 1
a443 1
			fprintf(stderr, "Authentication failed\n");
d446 1
a446 3
		if (firstack & FLG_BE_VERBOSE)
			printf("%s mutual authentication succeeded\n",
							ETC_STEL_SECRET_NAME);
d461 2
a462 2
			printf("%s mutual authentication required\n",
							STEL_SECRET_NAME);
d475 1
a475 1
			fprintf(stderr, "Authentication failed\n");
d478 1
a478 3
		if (firstack & FLG_BE_VERBOSE)
			printf("%s mutual authentication succeeded\n",
							STEL_SECRET_NAME);
d484 1
a484 1
			"Mutual authentication required by server, can't do it, aborting\n");
@


1.88
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.87 1995/08/25 14:06:17 vince Exp vince $
 * $Date: 1995/08/25 14:06:17 $
 * $Revision: 1.87 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.87 1995/08/25 14:06:17 vince Exp vince $";
d112 1
a112 1
	char		*getetcstelsecret();
d343 1
a343 1
			(void)fprintf(stderr, "cannot connect to new.line!\n");
@


1.87
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.86 1995/08/25 10:59:54 vince Exp $
 * $Date: 1995/08/25 10:59:54 $
 * $Revision: 1.86 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.86 1995/08/25 10:59:54 vince Exp $";
d84 1
a84 1
"Checking integrity and ordering for all data transmissions.\r\n"
d438 1
a438 1
		if ((systelsec = getetcstelsecret(CLIENT_SIDE)) == NULL) {
a567 5

#ifdef IDLETIMEOUT
	printf("session idle timeout set to %d minutes.\r\n", IDLETIMEOUT);
#endif

@


1.86
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.85 1995/08/23 19:53:36 vince Exp vince $
 * $Date: 1995/08/23 19:53:36 $
 * $Revision: 1.85 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.85 1995/08/23 19:53:36 vince Exp vince $";
d43 1
a43 1
Usage: %s [hostname] [-l logname] [-p portnum] [-irmasentvDh] [commands...]\n\
a53 1
	-t:		do not use pseudo terminals\n\
d579 1
a579 1
	if (makeio(0, 1, s, firstack, tohost, &old, &new)) {
@


1.85
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.84 1995/08/23 15:05:54 vince Exp $
 * $Date: 1995/08/23 15:05:54 $
 * $Revision: 1.84 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.84 1995/08/23 15:05:54 vince Exp $";
d99 1
a99 1
	unsigned char	*rndstr, rndbuf[1024], authbuf[STEL_SECRET_MAX_LEN];
a111 1
	static void	restore_ttymode();
d353 1
a353 2
		fprintf(stderr, "Connected to %s on port %d.\n",
						tohost, portnumber);
d355 1
a355 1
		fprintf(stderr, "Connected to %s.\n", tohost);
d529 2
a530 1
#if (defined(BSD) && (BSD >= 199306))
d537 4
d583 1
a583 1
		fprintf(stderr, "%s[%d]: Connection with %s lost.\n",
d593 1
a593 1
	(void)fprintf(stderr, "%s[%d]: Connection with %s closed.\n",
a609 7
/* restore - restore terminal modes when user aborts command */
static void restore_ttymode()
{
    tcsetattr(0, TCSANOW, &saved_ttymode);
    exit(1);
}

d615 1
d623 1
a623 1
			signal(SIGINT, restore_ttymode);
d642 1
a642 1
			signal(SIGINT, oldsig);
d647 9
@


1.84
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.83 1995/08/23 11:16:54 vince Exp vince $
 * $Date: 1995/08/23 11:16:54 $
 * $Revision: 1.83 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.83 1995/08/23 11:16:54 vince Exp vince $";
d51 1
a51 1
	-s:		extra secure mode, equal to -i -r -m -c\n\
d249 1
@


1.83
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.82 1995/08/15 18:47:12 vince Exp vince $
 * $Date: 1995/08/15 18:47:12 $
 * $Revision: 1.82 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.82 1995/08/15 18:47:12 vince Exp vince $";
d404 1
a404 2
		for (i = 0; i < sizeof(pp); i++)
			CFBcrypt((char *)&pp + i, DES_ENCRYPT, cipher, CLIENT_SIDE);
@


1.82
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.81 1995/07/29 19:52:54 vince Exp vince $
 * $Date: 1995/07/29 19:52:54 $
 * $Revision: 1.81 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.81 1995/07/29 19:52:54 vince Exp vince $";
d39 1
a39 1
#define OPTIONS "l:np:tvrmisDeh"
d43 1
a43 1
Usage: %s [hostname] [-l logname] [-p portnum] [-irmsentvDh] [commands...]\n\
d50 2
a51 1
	-s:		secure mode, equal to -i -r -m\n\
d59 1
a59 1
#define OPTIONS "np:vrmisDeh"
d63 1
a63 1
Usage: %s [hostname] [-p portnum] [-irmsenvDh]\n\
d69 2
a70 1
	-s:		secure mode, equal to -i -r -m\n\
d84 2
d196 9
d558 3
d568 1
a568 1
	printf("Session idle timeout set to %d minutes.\r\n", IDLETIMEOUT);
@


1.81
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.80 1995/07/20 06:02:10 vince Exp vince $
 * $Date: 1995/07/20 06:02:10 $
 * $Revision: 1.80 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.80 1995/07/20 06:02:10 vince Exp vince $";
d550 5
@


1.80
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.79 1995/07/19 18:58:54 vince Exp vince $
 * $Date: 1995/07/19 18:58:54 $
 * $Revision: 1.79 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.79 1995/07/19 18:58:54 vince Exp vince $";
d38 2
d57 18
d136 1
a136 1
	while ((i = getopt(argc, argv, "l:np:tvrmisDeh")) != -1)
d138 1
d144 6
a200 4
			case	't':
				noptyflg++;
				break;
			
d264 1
d285 1
d413 1
d487 1
d491 1
a491 1
			"Mutual authentication required by server, cannot use -n!\n");
@


1.79
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.78 1995/07/14 16:06:22 vince Exp vince $
 * $Date: 1995/07/14 16:06:22 $
 * $Revision: 1.78 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.78 1995/07/14 16:06:22 vince Exp vince $";
d263 1
a263 1
	else if (!isatty(0)) {
@


1.78
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.77 1995/07/14 13:58:45 vince Exp $
 * $Date: 1995/07/14 13:58:45 $
 * $Revision: 1.77 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.77 1995/07/14 13:58:45 vince Exp $";
d124 1
a124 1
				if (firstack & FLG_USE_TRIPLE ||
d306 1
a306 1
			(void)fprintf(stderr, "cannot connect to /dev/null\n");
@


1.77
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.76 1995/07/14 13:31:29 vince Exp vince $
 * $Date: 1995/07/14 13:31:29 $
 * $Revision: 1.76 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.76 1995/07/14 13:31:29 vince Exp vince $";
d349 1
a349 1
			encmode = "IDEA plus triple DES";
d355 1
a355 1
			encmode = "triple DES";
@


1.76
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.75 1995/07/14 11:36:25 vince Exp vince $
 * $Date: 1995/07/14 11:36:25 $
 * $Revision: 1.75 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.75 1995/07/14 11:36:25 vince Exp vince $";
d524 1
a524 1
	printf("%s[%d]: going remote, please not the pid\r\n",
@


1.75
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.74 1995/07/13 17:35:49 vince Exp $
 * $Date: 1995/07/13 17:35:49 $
 * $Revision: 1.74 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.74 1995/07/13 17:35:49 vince Exp $";
d367 1
a367 1
			CFBcrypt((char *)&pp + i, DES_ENCRYPT, cipher, c_ideakey, c_schedule1, c_schedule2, c_schedule3);
@


1.74
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.73 1995/07/13 11:03:57 vince Exp $
 * $Date: 1995/07/13 11:03:57 $
 * $Revision: 1.73 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.73 1995/07/13 11:03:57 vince Exp $";
d24 2
d338 1
a338 2
	MD5Final(&mdContext);
	memcpy(pp.digest, mdContext.digest, 16);
@


1.73
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.72 1995/07/12 16:44:00 vince Exp $
 * $Date: 1995/07/12 16:44:00 $
 * $Revision: 1.72 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.72 1995/07/12 16:44:00 vince Exp $";
d39 1
a39 1
Usage: %s [hostname] [-l logname] [-p portnum] [-r3imentsvDh] [commands...]\n\
d43 1
a43 1
	-i:		use a combination of IDEA plus 3DES (default is 3DES)\n\
d114 1
a114 1
	while ((i = getopt(argc, argv, "l:np:tvr3misDeh")) != -1)
d131 1
d141 1
d144 2
a145 2
				if (firstack & FLG_NO_ENCRYPTION ||
				    firstack & FLG_USE_TRIPLE) {
@


1.72
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.71 1995/07/08 15:49:32 vince Exp vince $
 * $Date: 1995/07/08 15:49:32 $
 * $Revision: 1.71 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.71 1995/07/08 15:49:32 vince Exp vince $";
d43 1
d45 2
a46 3
	-3:		use triple DES encryption (default is single DES)\n\
	-i:		use IDEA encryption (default is DES)\n\
	-m:		use 1024 bits modulus (default is 512 bits)\n\
a49 1
	-s:		secure mode, equal to -3 -m -r\n\
d102 1
d149 1
d202 1
a202 2
				if (firstack & FLG_NO_ENCRYPTION ||
				    firstack & FLG_USE_IDEA) {
d208 1
a208 1
				firstack |= FLG_USE_TRIPLE;
d225 1
a225 1
		if (getstelpass("Enter a random string", rndbuf,
d301 4
d346 1
a346 1
			encmode = "IDEA";
a347 1
			/* ideacfb(&pp, sizeof(pp)); */
d420 3
d454 3
@


1.71
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.70 1995/07/08 15:48:56 vince Exp vince $
 * $Date: 1995/07/08 15:48:56 $
 * $Revision: 1.70 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.70 1995/07/08 15:48:56 vince Exp vince $";
d26 4
d32 3
a34 2
extern des_key_schedule	schedule1, schedule2;
extern des_cblock	IV;
d39 1
a39 1
Usage: %s [hostname] [-l logname] [-p portnum] [-r3imentvDh] [commands...]\n\
d50 1
d52 1
a52 1
	-D:		be extra verbose (debugging info)\n\
d76 1
d114 1
a114 1
	while ((i = getopt(argc, argv, "l:np:tvr3miDeh")) != -1)
d199 12
d343 2
a344 1
			ideacfb(&pp, sizeof(pp));
d349 2
a350 8
			encmode = "Triple DES";

			des_cbc_encrypt((des_cblock *)&pp, (des_cblock *)&pp,
				sizeof(pp), schedule1, (des_cblock *)IV, DES_ENCRYPT);
			des_cbc_encrypt((des_cblock *)&pp, (des_cblock *)&pp,
				sizeof(pp), schedule2, (des_cblock *)IV, DES_DECRYPT);
			des_cbc_encrypt((des_cblock *)&pp, (des_cblock *)&pp,
				sizeof(pp), schedule1, (des_cblock *)IV, DES_ENCRYPT);
d356 2
d359 3
a361 3
			des_cbc_encrypt((des_cblock *)&pp, (des_cblock *)&pp,
				sizeof(pp), schedule1, (des_cblock *)IV, DES_ENCRYPT);
		}
@


1.70
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.69 1995/07/05 15:21:22 vince Exp $
 * $Date: 1995/07/05 15:21:22 $
 * $Revision: 1.69 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.69 1995/07/05 15:21:22 vince Exp $";
d33 1
a33 1
bugs to stel-authors@@idea.sec.dsi.unimi.it\n\
@


1.69
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.68 1995/05/12 18:07:46 vince Exp vince $
 * $Date: 1995/05/12 18:07:46 $
 * $Revision: 1.68 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.68 1995/05/12 18:07:46 vince Exp vince $";
d32 3
a34 3
"STEL: Secure TELnet, BETA -- bugs to stel-authors@@idea.sec.dsi.unimi.it\n\
%s\n\
Usage: %s <hostname> [-l logname] [-p portnum] [-r3imentvD] [commands...]\n\
d46 2
a47 1
	-D:		be extra verbose\n"
d56 2
d67 1
a67 1
	char		*tohost, *env, *encmode;
d84 6
a89 3
	if (argc < 2) {
		(void)fprintf(stderr, USAGE, rcsid, PRGNAME, PORTNUM);
		exit(1);
a91 5
	/* using SYSV fashion */
	tohost = argv[1]; /* server name */
	argv++;
	argc--;

d107 1
a107 1
	while ((i = getopt(argc, argv, "l:np:tvr3miDe")) != -1)
d187 6
d199 3
a201 3
	if (errflg || tohost == NULL) {
		(void)fprintf(stderr, "bad options\n\n");
		(void)fprintf(stderr, USAGE, rcsid, PRGNAME);
d274 10
d306 1
a306 1
	pp.version = VERSION;
d496 3
a498 1
	printf("%s[%d]: all following messages are orginated by server\r\n\n",
a500 1
	
d504 2
a505 1
		fprintf(stderr, "Connection with %s lost.\n", tohost);
d514 2
a515 1
	(void)fprintf(stderr, "Connection with %s closed.\n", tohost);
d524 2
a525 1
	(void)fprintf(stderr, "trapped signal %d\n", s);
@


1.68
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.67 1995/05/12 18:00:14 vince Exp vince $
 * $Date: 1995/05/12 18:00:14 $
 * $Revision: 1.67 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.67 1995/05/12 18:00:14 vince Exp vince $";
a472 3
	printf("%s[%d]: all subsequent messages are orginated by server\r\n",
							PRGNAME, getpid());

d475 1
a475 1
		printf("Escape character is '^]'.\r\n\n");
d477 4
a480 1
		printf("Escape features disabled.\r\n\n");
@


1.67
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.66 1995/05/12 17:37:20 vince Exp $
 * $Date: 1995/05/12 17:37:20 $
 * $Revision: 1.66 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.66 1995/05/12 17:37:20 vince Exp $";
d473 3
d478 1
a478 1
		printf("Escape character is '^]'.\r\n");
d480 1
a480 1
		printf("Escape features disabled.\r\n");
a481 2
	printf("%s[%d]: all subsequent messages are orginated by server\r\n\n\n",
							PRGNAME, getpid());
@


1.66
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.64 1995/05/12 16:44:48 vince Exp $
 * $Date: 1995/05/12 16:44:48 $
 * $Revision: 1.64 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.64 1995/05/12 16:44:48 vince Exp $";
d475 1
a475 1
		printf("Escape character is '^]'.\r\n\n");
d477 4
a480 1
		printf("Escape features disabled.\r\n\n");
@


1.65
log
@safety
@
text
@d48 1
a48 1
"%s[%d]: This session is using %s encryption for all data transmissions.\r\n"
d50 1
a50 1
"\n%s[%d]: WARNING: NOT USING DATA ENCRYPTION -- THIS SESSION IS INSECURE\r\n"
d271 2
a272 2
		fprintf(stderr, "%s[%d]: Connected to %s on port %d.\n",
					PRGNAME, getpid(), tohost, portnumber);
d274 1
a274 2
		fprintf(stderr, "%s[%d]: Connected to %s.\n",
						PRGNAME, getpid(), tohost);
d469 1
a469 1
		printf(NOUSECRYPT, PRGNAME, getpid());
d471 1
a471 1
		printf(USECRYPT, PRGNAME, getpid(), encmode);
d475 1
a475 2
		printf("%s[%d]: going remote, escape character is '^]'.\r\n\n",
							PRGNAME, getpid());
d477 1
a477 2
		printf("%s[%d]: going remote, escape features disabled.\r\n\n",
							PRGNAME, getpid());
@


1.64
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.63 1995/05/10 18:00:18 vince Exp $
 * $Date: 1995/05/10 18:00:18 $
 * $Revision: 1.63 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.63 1995/05/10 18:00:18 vince Exp $";
d48 1
a48 1
"This session is using %s encryption for all data transmissions.\r\n"
d50 1
a50 1
"\nWARNING: NOT USING DATA ENCRYPTION -- THIS SESSION IS INSECURE\r\n"
d271 2
a272 2
		fprintf(stderr, "Connected to %s on port %d.\n",
							tohost, portnumber);
d274 2
a275 1
		fprintf(stderr, "Connected to %s.\n", tohost);
d470 1
a470 1
		printf(NOUSECRYPT);
d472 1
a472 1
		printf(USECRYPT, encmode);
d476 2
a477 1
		printf("Escape character is '^]'.\r\n");
d479 2
a480 1
		printf("Escape features disabled.\r\n");
a481 2
	printf("%s[%d]: going remote...\r\n\n", PRGNAME, getpid());

@


1.63
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.62 1995/05/10 15:10:14 vince Exp $
 * $Date: 1995/05/10 15:10:14 $
 * $Revision: 1.62 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.62 1995/05/10 15:10:14 vince Exp $";
d475 1
a475 1
		printf("Escape character is '^]'.\r\n\n");
d477 3
a479 1
		printf("Escape features disabled.\r\n\n");
@


1.62
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.61 1995/05/01 18:28:42 vince Exp $
 * $Date: 1995/05/01 18:28:42 $
 * $Revision: 1.61 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.61 1995/05/01 18:28:42 vince Exp $";
d19 3
d419 1
a419 1
"Mutual authentication required by server, cannot use -n!\n", pwd->pw_name);
d446 4
d452 1
@


1.61
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.60 1995/04/24 15:11:14 vince Exp $
 * $Date: 1995/04/24 15:11:14 $
 * $Revision: 1.60 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.60 1995/04/24 15:11:14 vince Exp $";
d18 1
d65 1
a65 1
	int		portnumber = PORTNUM;
d70 2
d95 8
d238 10
d283 5
a293 2
	pp.mode = htonl(pp.mode);

d440 1
@


1.60
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.59 1995/04/22 11:13:50 vince Exp vince $
 * $Date: 1995/04/22 11:13:50 $
 * $Revision: 1.59 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.59 1995/04/22 11:13:50 vince Exp vince $";
d28 1
a28 1
"STEL: Secure TELnet, BETA VERSION -- bugs to stel-beta-test@@dsi.unimi.it\n\
@


1.59
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.58 1995/04/22 10:13:08 vince Exp vince $
 * $Date: 1995/04/22 10:13:08 $
 * $Revision: 1.58 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.58 1995/04/22 10:13:08 vince Exp vince $";
d28 1
a28 1
"STEL: Secure TELnet, BETA VERSION -- bugs to vince@@dsi.unimi.it\n\
@


1.58
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.57 1995/04/22 09:42:58 vince Exp vince $
 * $Date: 1995/04/22 09:42:58 $
 * $Revision: 1.57 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.57 1995/04/22 09:42:58 vince Exp vince $";
d337 1
a337 1
			printf( "Cannot access system stelsecret (%s)\n",
d339 1
a339 2
			printf("Please enter it manually\n");
			if (getstelpass("Enter system stelsecret", authbuf,
@


1.57
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.56 1995/04/21 18:32:21 vince Exp $
 * $Date: 1995/04/21 18:32:21 $
 * $Revision: 1.56 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.56 1995/04/21 18:32:21 vince Exp $";
d330 1
a330 1
		char	*systemstelsecret;
d336 1
a336 1
		if ((p = getetcstelsecret(CLIENT_SIDE)) == NULL) {
d345 1
a345 1
			systemstelsecret = authbuf;
d348 2
a349 2
		i = mauth(s, systemstelsecret, CLIENT_SIDE, firstack);
		bzero(systemstelsecret, strlen(systemstelsecret));
@


1.56
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.55 1995/04/21 18:27:26 vince Exp vince $
 * $Date: 1995/04/21 18:27:26 $
 * $Revision: 1.55 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.55 1995/04/21 18:27:26 vince Exp vince $";
d38 1
a38 1
	-e:		disable escape feature (^] is enabled by default)\n\
d40 1
a40 1
	-t:		do not allocate pseudo terminals\n\
d42 1
a42 1
	-D:		debug mode\n"
d322 10
a331 1
	if (sreply & MSG_LOGIN_AUTH_REQUIRED) {
d333 2
a334 2
			printf("%s mutual authentication required\n",
							STEL_SECRET_NAME);
d336 10
a345 3
		if (getstelpass("Enter stelsecret", authbuf, sizeof(authbuf))) {
			(void)fprintf(stderr, "No secret?\n");
			exit(1);
d348 2
a349 1
		i = mauth(s, authbuf, CLIENT_SIDE, firstack);
d359 8
a366 4
		
	if (sreply == MSG_MUST_AUTH) {
		printf(\
"authentication required for %s, must use encryption!\n", pwd->pw_name);
d370 1
a370 3
	if (sreply & MSG_SYSTEM_AUTH_REQUIRED) {
		char	*p;

d372 2
a373 2
			printf("trying %s mutual authentication\n",
							ETC_STEL_SECRET_NAME);
d375 3
a377 10
		if ((p = getetcstelsecret()) == NULL) {
			printf( "Cannot access system stelsecret (%s)\n",
							ETC_STEL_SECRET_NAME);
			printf("Please enter it manually\n");
			if (getstelpass("Enter system stelsecret", authbuf,
						sizeof(authbuf))) {
				(void)fprintf(stderr, "No secret?\n");
				exit(1);
			}
			p = authbuf;
d380 1
a380 1
		i = mauth(s, p, CLIENT_SIDE, firstack);
@


1.55
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.54 1995/04/08 15:43:35 vince Exp $
 * $Date: 1995/04/08 15:43:35 $
 * $Revision: 1.54 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.54 1995/04/08 15:43:35 vince Exp $";
d357 1
a357 1
			printf("Cannot access %s. Please enter it manually\n",
d359 1
d380 2
a381 2
		printf(\
"mutual authentication required, must use encryption!\n", pwd->pw_name);
@


1.54
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.53 1995/04/08 14:38:50 vince Exp vince $
 * $Date: 1995/04/08 14:38:50 $
 * $Revision: 1.53 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.53 1995/04/08 14:38:50 vince Exp vince $";
d28 1
a28 1
"STEL: Secure TELnet -- version 0.98 beta\n\
d33 1
a33 1
	-p portnumber:	set port number (default is port %d)\n\
d35 1
a35 1
	-3:		use triple DES encryption (default is DES)\n\
a68 1
	void		(*oldsig) (); 
d73 2
d185 2
a186 3
		printf("Enter a random string: ");
		(void)fflush(stdout);
		if (fgets(rndbuf, sizeof(rndbuf), stdin) == NULL) {
a189 1
		rip(rndbuf);
d322 20
a341 3
	switch (sreply) {
		case	MSG_OKAY_DATA:
			break;
d343 8
a350 19
		case	MSG_AUTH_REQUIRED:
			if (firstack & FLG_BE_VERBOSE)
				printf("Mutual authentication required\n");

			if (isatty(0)) {
				printf("Enter stelsecret: ");
				(void)fflush(stdout);
				/* ECHO OFF */
				tcgetattr(0, &saved_ttymode);
				if ((oldsig = signal(SIGINT, SIG_IGN)) != SIG_IGN)
					signal(SIGINT, restore_ttymode);
				tcgetattr(0, &noecho_ttymode);
				noecho_ttymode.c_lflag &= ~ECHO;
				tcsetattr(0, TCSANOW, &noecho_ttymode);
			}
			else {
				printf("Enter stelsecret (echo is on): ");
				(void)fflush(stdout);
			}
d352 9
a360 2
			/* get password */
			if (fgets(authbuf, sizeof(authbuf), stdin) == NULL) {
d364 2
a365 9
			rip(authbuf);

			if (isatty(0)) {
				/* ECHO ON */
				tcsetattr(0, TCSANOW, &saved_ttymode);
				if (oldsig != SIG_IGN)
					signal(SIGINT, oldsig);
				printf("\n");
			}
d367 3
a369 14
			i = mauth(s, authbuf, CLIENT_SIDE, firstack);
			if (i == -1) {
				perror("mauth()");
				exit(1);
			}
			else if (i == 1) {
				fprintf(stderr, "Authentication failed\n");
				exit(1);
			}
			break;
		
		case	MSG_MUST_AUTH:
			printf(\
"authentication required for %s, must use encryption!\n", pwd->pw_name);
d371 3
a373 4

		default	:
		case	MSG_CORRUPTED_DATA:
			printf("Communication path is corrupted!\n");
d375 12
d466 37
@


1.53
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.52 1995/04/05 16:35:14 vince Exp $
 * $Date: 1995/04/05 16:35:14 $
 * $Revision: 1.52 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.52 1995/04/05 16:35:14 vince Exp $";
d30 1
a30 1
Usage: %s <hostname> [-l logname] [-r3ilnpevD] [commands...]\n\
d32 1
a32 1
	logname:	the username on the remote system\n\
d40 1
a40 1
	-p:		do not allocate pseudo terminals\n\
@


1.52
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.51 1995/04/03 16:56:36 vince Exp $
 * $Date: 1995/04/03 16:56:36 $
 * $Revision: 1.51 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.51 1995/04/03 16:56:36 vince Exp $";
d33 1
d37 1
a37 1
	-m:		use 1024 bits module (default is 512 bits)\n\
d44 1
a44 1
"\nThis session is using %s encryption for all data transmissions.\n\r"
d46 1
a46 1
"\nWARNING: NOT USING DATA ENCRYPTION -- THIS SESSION IS INSECURE\n\r"
d48 1
a48 1
"No access to tty; thus no job control in this session...\n"
d64 1
d75 1
a75 1
		(void)fprintf(stderr, USAGE, rcsid, PRGNAME);
d91 1
a91 1
	while ((i = getopt(argc, argv, "l:npvr3miDe")) != -1)
d146 4
d151 5
a155 1
				noptyflg++;
d244 1
a244 1
	if ((s = callsocket(tohost, PORTNUM)) == -1)
d248 2
a249 1
		fprintf(stderr, "Connected to %s on port %d.\n", tohost, PORTNUM);
a329 2
			printf("Enter stelsecret: ");
			(void)fflush(stdout);
d331 15
a345 7
			/* ECHO OFF */
			tcgetattr(0, &saved_ttymode);
			if ((oldsig = signal(SIGINT, SIG_IGN)) != SIG_IGN)
				signal(SIGINT, restore_ttymode);
			tcgetattr(0, &noecho_ttymode);
			noecho_ttymode.c_lflag &= ~ECHO;
			tcsetattr(0, TCSANOW, &noecho_ttymode);
d347 1
d354 7
a360 5
			/* ECHO ON */
			tcsetattr(0, TCSANOW, &saved_ttymode);
			if (oldsig != SIG_IGN)
				signal(SIGINT, oldsig);
			printf("\n");
d410 7
@


1.51
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.50 1995/03/24 11:25:37 vince Exp $
 * $Date: 1995/03/24 11:25:37 $
 * $Revision: 1.50 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.50 1995/03/24 11:25:37 vince Exp $";
d17 1
d72 5
d88 2
a89 1
	while ((i = getopt(argc, argv, "l:npvr3miDe")) != EOF)
d162 1
d168 1
d217 1
a217 1
	
d246 2
a247 1
	if (write(s, &firstack, sizeof(firstack)) != sizeof(firstack)) {
d258 2
d307 2
d398 1
a398 1
		printf("Escape character is '^]'.\n\n\r");
d400 1
a400 1
		printf("Escape features disabled.\n\n\r");
@


1.50
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.49 1995/02/27 18:09:48 vince Exp vince $
 * $Date: 1995/02/27 18:09:48 $
 * $Revision: 1.49 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.49 1995/02/27 18:09:48 vince Exp vince $";
a17 3

/* lenstra stuff */
#include "lip.h"
@


1.49
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.48 1995/02/27 15:03:39 vince Exp $
 * $Date: 1995/02/27 15:03:39 $
 * $Revision: 1.48 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.48 1995/02/27 15:03:39 vince Exp $";
d45 1
a45 1
"\nThis session is using %s encryption for all data transmissions.\n"
d47 1
a47 1
"\nWARNING: NOT USING DATA ENCRYPTION -- THIS SESSION IS INSECURE\n"
@


1.48
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.47 1995/02/27 11:42:10 vince Exp $
 * $Date: 1995/02/27 11:42:10 $
 * $Revision: 1.47 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.47 1995/02/27 11:42:10 vince Exp $";
d286 2
a287 2
		printf("Sending environment to server (%s encrypted)\n",
								encmode);
@


1.47
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.46 1995/02/27 11:20:45 vince Exp vince $
 * $Date: 1995/02/27 11:20:45 $
 * $Revision: 1.46 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.46 1995/02/27 11:20:45 vince Exp vince $";
d47 1
a47 1
"\nWARNING: NO ENCRYPTION, NO AUTHENTICATION -- THIS IS SESSION IS INSECURE\n"
d235 5
a239 2

	/* tell master if we want to use encryption */
d278 1
a278 1
			encmode = "Single DES";
d285 3
d298 2
d344 1
a344 1
"stelsecret required for %s, must use encryption!\n", pwd->pw_name);
a352 5
	if (firstack & FLG_NO_ENCRYPTION)
		printf(NOUSECRYPT);
	else
		printf(USECRYPT, encmode);

d379 7
@


1.46
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.44 1995/02/27 10:46:19 vince Exp $
 * $Date: 1995/02/27 10:46:19 $
 * $Revision: 1.44 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.44 1995/02/27 10:46:19 vince Exp $";
d45 1
a45 1
"This session is using %s encryption for all data transmissions.\n"
d47 1
a47 1
"WARNING: NO ENCRYPTION, NO AUTHENTICATION -- THIS IS SESSION IS INSECURE\n"
d61 1
a61 1
	char		*tohost, *env;
a248 2
		char	*mode;

d257 1
a257 1
			mode = "IDEA";
d263 1
a263 1
			mode = "Triple DES";
d275 1
a275 1
			mode = "Single DES";
a279 2

		fprintf(stderr, USECRYPT, mode);
a280 2
	else
		fprintf(stderr, NOUSECRYPT);
d333 5
d344 5
@


1.45
log
@safety
@
text
@d39 1
a41 1
	-e:		disable escape feature (^] is enabled by default)\n\
d43 1
a43 1
	-D:		be very verbose (debug mode)\n"
@


1.44
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.43 1995/02/27 07:59:00 vince Exp vince $
 * $Date: 1995/02/27 07:59:00 $
 * $Revision: 1.43 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.43 1995/02/27 07:59:00 vince Exp vince $";
a337 1
			printf("Mutual authentication succeeded\n");
@


1.43
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.42 1995/02/23 15:49:43 vince Exp $
 * $Date: 1995/02/23 15:49:43 $
 * $Revision: 1.42 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.42 1995/02/23 15:49:43 vince Exp $";
a50 5
#define AUTHFAILED	\
"\nAuthentication failed. There are two possible reasons for that:\n\
1. You simply typed in the wrong stelsecret, being stelsecret the\n\
   contents of ~%s/.stelsecret on the remote system;\n\
2. A Man In The Middle attack was taking place!!!\n"
d335 1
a335 5
				if (firstack & FLG_BE_VERBOSE)
					printf(AUTHFAILED, pwd->pw_name );
				else
					fprintf(stderr, "Authentication failed\n");
				/****/
@


1.42
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.41 1995/02/21 20:54:24 vince Exp $
 * $Date: 1995/02/21 20:54:24 $
 * $Revision: 1.41 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.41 1995/02/21 20:54:24 vince Exp $";
d43 1
a43 1
	-D:		be extra verbose\n"
d334 1
a334 1
			i = mauth(s, authbuf, CLIENT_SIDE);
d347 1
@


1.41
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.40 1995/02/21 20:50:15 vince Exp vince $
 * $Date: 1995/02/21 20:50:15 $
 * $Revision: 1.40 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.40 1995/02/21 20:50:15 vince Exp vince $";
d57 3
a59 2
struct termios	old, new;
int		ttyset;
d74 1
d77 1
d228 1
d231 1
d313 9
d327 7
d411 7
@


1.40
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.39 1995/02/21 17:34:49 vince Exp vince $
 * $Date: 1995/02/21 17:34:49 $
 * $Revision: 1.39 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.39 1995/02/21 17:34:49 vince Exp vince $";
d52 1
a52 1
"Authentication failed. There are two possible reasons for that:\n\
d323 1
@


1.39
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.38 1995/02/20 15:19:45 vince Exp vince $
 * $Date: 1995/02/20 15:19:45 $
 * $Revision: 1.38 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.38 1995/02/20 15:19:45 vince Exp vince $";
d51 5
d66 1
a66 1
	unsigned char	*rndstr, rndbuf[1024];
d68 1
a68 1
	int		firstack, noptyflg, errflg, rflg;
d71 3
a74 1
	MD5_CTX		mdContext;
a197 1
		struct passwd	*pwd;
d199 1
a199 1
			(void)fprintf(stderr, "who are you?\n");
d237 1
a237 1
	if (write(s, &firstack, sizeof(firstack)) == -1) {
d258 1
a258 1
		else if (firstack & FLG_USE_IDEA) {
d291 40
@


1.38
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.37 1995/02/20 13:43:47 vince Exp vince $
 * $Date: 1995/02/20 13:43:47 $
 * $Revision: 1.37 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.37 1995/02/20 13:43:47 vince Exp vince $";
d32 1
a32 1
Usage: %s <hostname> [-l logname] [-r3ilnpv] [commands...]\n\
d41 1
d50 1
a50 1
#define BADOPTION	"option -%c is not compatible with previous options"
d80 1
a80 1
	while ((i = getopt(argc, argv, "l:npvr3miD")) != EOF)
d148 4
d259 1
a259 1
			mode = "triple DES";
d271 1
a271 1
			mode = "single DES";
d313 4
a316 1
	printf("Escape character is '^]'.\n\n\r");
@


1.37
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.35 1995/02/20 10:23:35 vince Exp $
 * $Date: 1995/02/20 10:23:35 $
 * $Revision: 1.35 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.35 1995/02/20 10:23:35 vince Exp $";
d41 2
a42 2
	-v:		be verbose\n"
	-D:		be very verbose\n"
@


1.36
log
@safety
@
text
@d247 1
a247 1
		if (firstack & FLG_USE_IDEA) {
@


1.35
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.33 1995/02/16 15:42:44 vince Exp $
 * $Date: 1995/02/16 15:42:44 $
 * $Revision: 1.33 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.33 1995/02/16 15:42:44 vince Exp $";
d22 2
d42 1
d46 1
a46 1
"WARNING: NO ENCRYPTION AUTHENTICATION -- THIS IS SESSION IS NOT SECURE\n"
d66 1
d75 1
d79 1
a79 1
	while ((i = getopt(argc, argv, "l:npvr3mi")) != EOF)
d142 5
d221 1
a221 2
		fprintf(stderr, "Connected to %s on port %d.\n",
							tohost, PORTNUM);
d231 6
d308 1
a308 1
	printf("Escape character is '^]'.\n\r");
@


1.34
log
@safety
@
text
@d35 1
a35 1
	-i:		use IDEA encryption\n\
@


1.33
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.32 1995/02/16 14:55:10 vince Exp vince $
 * $Date: 1995/02/16 14:55:10 $
 * $Revision: 1.32 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.32 1995/02/16 14:55:10 vince Exp vince $";
d19 1
d22 1
a22 1
#ifndef IDEA
d24 1
a24 1
extern des_key_schedule	schedule1;
a25 1
#endif
a26 1
/*
d28 10
a37 5
"%s\n\
Usage: %s hostname [-l logname] [-npt] [commands...]\n\
	hostname:	the system you what to connect to\n\
	logname:	the username you want to be on the remote system\n\
	-n:		do not encrypt data transmissions\n\
a38 1
	-t:		transfer mode, suitable for file transfer\n\
a39 11
*/
#define	USAGE	"%s\nUsage: %s hostname [-r] [-l logname] [commands...]\n"

#ifdef IDEA
#define USECRYPT	\
"This session is using IDEA encryption for all data transmissions.\n"
#else /* !IDEA */
#ifdef TRIPLE
#define USECRYPT	\
"This session is using TRIPLE DES encryption for all data transmissions.\n"
#else /* !TRIPLE */
d41 1
a41 4
"This session is using DES encryption for all data transmissions.\n"
#endif /* TRIPLE */
#endif /* IDEA */

d43 1
a43 1
"WARNING: plaintext data transmissions -- THIS IS AN UNSECURE SESSION\n"
d46 1
a46 7
#define TRANSFERMODE	\
"Warning: transfer mode; thus no pseudo terminal allocated, terminal echo\n\
always on, no prompts and you must authenticate yourself blindly.\n"
#define PLSUSETRN	\
"Warning: standard output is not a terminal; use -t for file transfer.\n"
#define PTYFLGIGN	"-t already set; ignoring -p option\n"
#define PTYFLGOVR	"-t option overrides -p otion\n"
d59 1
a59 1
	int		vflg, noptyflg, cryptflg, errflg, trnflg, rflg;
d70 2
a71 1
	vflg = errflg = noptyflg = trnflg = rflg = 0;
a72 1
	cryptflg = FLG_USE_ENCRYPTION; /* encrypt by default */
d74 1
a74 2
	/* "l:nptv" */
	while ((i = getopt(argc, argv, "l:nvr")) != EOF)
d80 1
d82 7
a88 1
				cryptflg = FLG_DONTUSE_ENCRYPTION;
d90 9
a98 5
			case	'p':
				if (trnflg)
					(void)fprintf(stderr, PTYFLGIGN);
				else
					noptyflg = 1;
d100 9
a108 2
			case	'v':
				vflg++;
d110 8
a117 5
			case	't':
				if (noptyflg)
					(void)fprintf(stderr, PTYFLGOVR);
				else
					trnflg++;
d119 1
d121 5
d128 9
d141 1
a183 6
	/*
	if (trnflg) {
		noptyflg = 1;
		pp.mode |= (FLG_DONTUSE_PTY | FLG_TRANSFER_MODE);
	}
	*/
d210 1
a210 1
	if (vflg)
d217 2
a218 2
	if (write(s, &cryptflg, sizeof(cryptflg)) == -1) {
		perror("write(cryptflg)");
d221 6
a226 2
	if (cryptflg == FLG_USE_ENCRYPTION) {
		if (dhexchange(s, 0, vflg, rndstr) < 0) {
d230 6
a235 1
		fprintf(stderr, USECRYPT);
d237 21
a257 6
#ifdef IDEA
		ideacfb(&pp, sizeof(pp));
#else
		des_cbc_encrypt((des_cblock *)&pp, (des_cblock *)&pp,
			sizeof(pp), schedule1, (des_cblock *)IV, DES_ENCRYPT);
#endif
a261 12
	/*
	if (trnflg)
		fprintf(stderr, TRANSFERMODE);
	else if (noptyflg)
		fprintf(stderr, NOUSEPTY);
	*/

	/*
	if (!trnflg && isatty(0) && !isatty(1))
		fprintf(stderr, PLSUSETRN);
	*/

d295 1
a295 1
	if (makeio(0, 1, s, cryptflg, tohost, &old, &new)) {
@


1.32
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.31 1995/02/15 16:53:25 vince Exp vince $
 * $Date: 1995/02/15 16:53:25 $
 * $Revision: 1.31 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.31 1995/02/15 16:53:25 vince Exp vince $";
d73 2
a74 1
	char		*tohost, *env, *rndstr, rndbuf[1024];
d136 4
@


1.31
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.30 1995/02/06 20:55:46 vince Exp $
 * $Date: 1995/02/06 20:55:46 $
 * $Revision: 1.30 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.30 1995/02/06 20:55:46 vince Exp $";
d38 1
a38 1
#define	USAGE	"%s\nUsage: %s hostname [-l logname] [commands...]\n"
d73 1
a73 1
	char		*tohost, *env;
d75 1
a75 1
	int		vflg, noptyflg, cryptflg, errflg, trnflg;
d86 2
a87 1
	vflg = errflg = noptyflg = trnflg = 0;
d91 1
a91 1
	while ((i = getopt(argc, argv, "l:nv")) != EOF)
d115 3
d127 11
d204 1
a204 1
		if (dhexchange(s, 0, vflg) < 0) {
@


1.30
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.29 1995/01/24 15:55:43 vince Exp vince $
 * $Date: 1995/01/24 15:55:43 $
 * $Revision: 1.29 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.29 1995/01/24 15:55:43 vince Exp vince $";
d254 2
@


1.29
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.28 1995/01/21 15:05:14 vince Exp $
 * $Date: 1995/01/21 15:05:14 $
 * $Revision: 1.28 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.28 1995/01/21 15:05:14 vince Exp $";
d253 1
a253 1
		fprintf(stderr, "Lost connection\n");
@


1.28
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.26 1995/01/21 14:25:24 vince Exp vince $
 * $Date: 1995/01/21 14:25:24 $
 * $Revision: 1.26 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.26 1995/01/21 14:25:24 vince Exp vince $";
d73 1
a73 1
	char		*tohost;
d161 12
a172 5
	(void)strncpy(pp.TERM, getenv("TERM"), sizeof(pp.TERM));
	(void)strncpy(pp.DISPLAY, getenv("DISPLAY"), sizeof(pp.DISPLAY));
	(void)strncpy(pp.LINES, getenv("LINES"), sizeof(pp.LINES));
	(void)strncpy(pp.COLUMNS, getenv("COLUMNS"), sizeof(pp.COLUMNS));
	(void)strncpy(pp.WINDOWID, getenv("WINDOWID"), sizeof(pp.WINDOWID));
@


1.27
log
@safety
@
text
@d241 1
a241 1
	printf("Escape character is '^]'.\n");
d243 1
a243 1
	if (makeio(0, 1, s, cryptflg, &old, &new)) {
@


1.26
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.25 1995/01/19 12:46:07 vince Exp $
 * $Date: 1995/01/19 12:46:07 $
 * $Revision: 1.25 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.25 1995/01/19 12:46:07 vince Exp $";
d240 2
@


1.25
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.24 1994/12/28 15:36:23 vince Exp $
 * $Date: 1994/12/28 15:36:23 $
 * $Revision: 1.24 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.24 1994/12/28 15:36:23 vince Exp $";
d241 1
a241 1
	if (makeio(0, 1, s, cryptflg)) {
@


1.24
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.23 1994/12/28 12:18:20 vince Exp vince $
 * $Date: 1994/12/28 12:18:20 $
 * $Revision: 1.23 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.23 1994/12/28 12:18:20 vince Exp vince $";
d159 7
@


1.23
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.22 1994/12/18 14:44:44 vince Exp $
 * $Date: 1994/12/18 14:44:44 $
 * $Revision: 1.22 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.22 1994/12/18 14:44:44 vince Exp $";
d185 1
a185 1
				sizeof(pp), schedule1, IV, DES_ENCRYPT);
@


1.22
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/stel/RCS/stel.c,v 1.21 1994/11/28 18:26:12 vince Exp $
 * $Date: 1994/11/28 18:26:12 $
 * $Revision: 1.21 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: stel.c,v 1.21 1994/11/28 18:26:12 vince Exp $";
d43 5
a47 1
#else
d49 4
a52 2
"This session is using triple DES encryption for all data transmissions.\n"
#endif
d89 2
a90 1
	while ((i = getopt(argc, argv, "l:nptv")) != EOF)
d145 1
d150 1
a174 2
		if (vflg)
			fprintf(stderr, "Exchanging keys with DH scheme...\n");
d184 2
a185 2
		des_cbc_encrypt(&pp, &pp, sizeof(pp), &schedule1, IV,
						DES_ENCRYPT);
d191 1
d196 1
d198 1
d201 1
@


1.21
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.20 1994/11/26 16:20:03 vince Exp $
 * $Date: 1994/11/26 16:20:03 $
 * $Revision: 1.20 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.20 1994/11/26 16:20:03 vince Exp $";
d27 1
d37 2
@


1.20
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.19 1994/11/26 15:55:48 vince Exp vince $
 * $Date: 1994/11/26 15:55:48 $
 * $Revision: 1.19 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.19 1994/11/26 15:55:48 vince Exp vince $";
d45 1
a45 1
"WARNING: plaintext data transmissions -- THIS IS AN UNSECURE SESSION.\n"
d53 2
d90 4
a93 1
				noptyflg = 1;
d99 4
a102 1
				trnflg++;
d121 2
a122 1
		(void)strcat(pp.command, " ");
d151 5
a155 1
	fprintf(stderr, "Connected to %s.\n", tohost);
d165 1
a165 1
		if (dhexchange(s, 0) < 0) {
d230 1
a230 1
	fprintf(stderr, "Connection with %s closed.\n", tohost);
@


1.19
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.18 1994/11/26 13:29:06 vince Exp $
 * $Date: 1994/11/26 13:29:06 $
 * $Revision: 1.18 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.18 1994/11/26 13:29:06 vince Exp $";
d29 1
a29 1
Usage: %s hostname [-l logname] [-npt] [command]\n\
d31 2
a32 2
	logname:	the username you want to become on the remote system\n\
	-n:		do not use encryption for data transmission\n\
d34 2
a35 1
	-t:		transfer mode, suitable for file transfer\n"
d45 1
a45 1
"WARNING!!! plaintext data transmissions -- THIS IS AN UNSECURE SESSION!\n"
d47 1
a47 1
"Warning: no access to tty; thus no job control in this session...\n"
d49 2
a50 2
"Warning: transfer mode; thus no pseudo terminal allocated, no prompts\n\
and you must authenticate yourself blindly in this session.\n"
@


1.18
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.17 1994/11/26 13:15:59 vince Exp vince $
 * $Date: 1994/11/26 13:15:59 $
 * $Revision: 1.17 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.17 1994/11/26 13:15:59 vince Exp vince $";
d63 1
a63 2
	int		vflg, noptyflg, cryptflg, errflg;
	int		trnflg = 0;
d74 1
a74 1
	vflg = errflg = noptyflg = 0;
a124 3
	/* don't use terminals when running a command -- command execution
	   is often used for data transmission, so we do not want ^M$s */
	/* trnflg = pp.command[0] != '\0'; */
d172 1
a172 1
	if (isatty(0) && !isatty(1))
@


1.17
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.16 1994/11/26 11:26:15 vince Exp vince $
 * $Date: 1994/11/26 11:26:15 $
 * $Revision: 1.16 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.16 1994/11/26 11:26:15 vince Exp vince $";
d32 3
a34 3
	-n:		No encryption for data transmission is used\n\
	-p:		no Pseudo terminal is allocated\n\
	-t:		Transfer mode, suitable for file transfer\n"
d50 2
d153 2
a154 1
		fprintf(stderr, "Exchanging keys with DH scheme...\n");
d176 3
d220 1
a220 1
	fprintf(stderr, "Connection closed.\n");
@


1.16
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.15 1994/10/25 15:52:11 vince Exp $
 * $Date: 1994/10/25 15:52:11 $
 * $Revision: 1.15 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.15 1994/10/25 15:52:11 vince Exp $";
d27 9
a35 1
#define USAGE	"Usage: %s hostname [-l logname] [-np] [command]\n"
d47 3
d62 1
d76 1
a76 1
	while ((i = getopt(argc, argv, "l:npv")) != EOF)
d91 3
d99 1
a99 1
		(void)fprintf(stderr, USAGE, PRGNAME);
d123 5
a127 2
	/* set mode */
	if (!isatty(0))
d129 4
a132 3
/* #ifdef RSHLIKE */
	/* don't use terminals when running a command. obsolete */
	if (pp.command[0] != '\0')
a133 2
/* #endif */
	if (noptyflg)
d135 5
a139 1
		
d168 3
a170 1
	if (noptyflg)
@


1.15
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.14 1994/10/25 15:05:42 vince Exp $
 * $Date: 1994/10/25 15:05:42 $
 * $Revision: 1.14 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.14 1994/10/25 15:05:42 vince Exp $";
d111 1
a111 1
#ifdef RSHLIKE
d115 1
a115 1
#endif
d184 1
a184 1
		fprintf(stderr, "IO connection error\n");
d191 1
a191 1
	puts("Connection closed.");
@


1.14
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.13 1994/10/25 14:43:04 vince Exp $
 * $Date: 1994/10/25 14:43:04 $
 * $Revision: 1.13 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.13 1994/10/25 14:43:04 vince Exp $";
d30 1
a30 1
"This session is using IDEA encryption for all data transmissions.\n\n"
d33 1
a33 1
"This session is using triple DES encryption for all data transmissions.\n\n"
d36 3
a38 1
"Warning!!! plaintext data transmissions -- THIS IS AN UNSECURE SESSION!\n\n"
d147 3
d182 3
a184 2
		perror("makeio()");
		(void)tcsetattr(0, TCSANOW, &old);
@


1.13
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.12 1994/10/25 12:59:40 vince Exp vince $
 * $Date: 1994/10/25 12:59:40 $
 * $Revision: 1.12 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.12 1994/10/25 12:59:40 vince Exp vince $";
a36 2
#define NOUSEPTY	\
"Notice: no controlling terminal allocated, echo to terminal is always on\n"
d114 1
a114 1
	if (noptyflg) {
a115 2
		fprintf(stderr, NOUSEPTY);
	}
a121 1

d144 1
a144 1
		
@


1.12
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.11 1994/10/24 18:17:21 vince Exp $
 * $Date: 1994/10/24 18:17:21 $
 * $Revision: 1.11 $
 * $Locker:  $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.11 1994/10/24 18:17:21 vince Exp $";
d27 1
a27 1
#define USAGE	"Usage: dhs hostname [-l logname] [-np] [command]\n"
d36 3
a38 1
"Warning: not using encryption. This is an UNSECURE session.\n\n"
d84 1
a84 1
		(void)fprintf(stderr, USAGE);
d116 1
a116 1
	if (noptyflg)
d118 2
d126 1
d190 1
@


1.11
log
@safety
@
text
@d3 4
a6 4
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.10 1994/08/17 11:20:32 vince Exp vince $
 * $Date: 1994/08/17 11:20:32 $
 * $Revision: 1.10 $
 * $Locker: vince $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.10 1994/08/17 11:20:32 vince Exp vince $";
d117 1
a117 2
	if ((s = callsocket(tohost, PORTNUM)) == -1) {
		perror(tohost);
a118 1
	}
@


1.10
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.9 1994/08/16 17:01:50 vince Exp vince $
 * $Date: 1994/08/16 17:01:50 $
 * $Revision: 1.9 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.9 1994/08/16 17:01:50 vince Exp vince $";
d147 1
a147 1
	if (write(s, &pp, sizeof(pp)) == -1) {
@


1.9
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.8 1994/06/13 22:36:31 vince Exp vince $
 * $Date: 1994/06/13 22:36:31 $
 * $Revision: 1.8 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.8 1994/06/13 22:36:31 vince Exp vince $";
d20 2
d23 3
d28 4
a31 1

d34 1
a37 3
extern des_key_schedule	schedule1;
extern des_cblock	IV;

d109 3
a111 1
	if (pp.command[0] != '\0') /* rsh like */
d113 1
d131 1
a131 1
		if (dhexchange(s) < 0) {
d137 3
d142 1
@


1.8
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.7 1994/06/13 16:44:05 vince Exp vince $
 * $Date: 1994/06/13 16:44:05 $
 * $Revision: 1.7 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.7 1994/06/13 16:44:05 vince Exp vince $";
d25 1
a25 1
"This session is using triple DES encryption for all transmissions.\n\n"
d127 1
@


1.7
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.5 1994/06/13 00:04:42 vince Exp vince $
 * $Date: 1994/06/13 00:04:42 $
 * $Revision: 1.5 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.5 1994/06/13 00:04:42 vince Exp vince $";
d22 1
a22 1
#define USAGE	"Usage: client hostname [-l logname] [-dnp] [command]\n"
d24 8
d41 2
a42 1
	int		i, s, noptyflg, cryptflg, errflg;
d53 1
a53 1
	errflg = noptyflg = 0;
d56 1
a56 1
	while ((i = getopt(argc, argv, "l:dnp")) != EOF)
d68 3
d72 1
a72 1
				errflg = 1;
d90 1
d103 2
d113 1
a113 1
	printf("Connected to %s.\n", tohost);
d121 1
a121 1
		printf("Exchanging keys with DH scheme...\n");
d126 3
a128 9
		printf("\
Using triple DES encryption for all data transmissions\n\n");
		/* FIX: encrypt pp packet */
	}
	else {
		printf("\
WARNING: this sessions is not using encryption thus it is vulberable\n\
to eavesdropping and active tapping attacks. Do not use conventional\n\
passwords in this session!\n\n");
d130 2
a172 1
	printf("\nConnection closed.\n");
@


1.6
log
@safety
@
text
@d33 1
a33 1
	int		i, s, errflg = 0;
d38 1
a38 2
	bzero(&pp, sizeof(pp));

d44 3
d54 1
a54 1
				pp.mode |= FLG_NOUSEPTY;
d57 1
a57 1
				pp.mode |= FLG_NOENCRYPT;
d60 1
a60 1
				errflg++;
d87 5
d100 3
a102 4
	printf("Exchanging DES key with DH scheme\n");
	(void)fflush(stdout);
	if (dhexchange(s) < 0) {
		perror("dhexchange()");
d105 17
a121 1
	printf("Using DES encryption for all data transmissions\n");
d127 24
a150 9
	(void)signal(SIGINT, trapper);
	(void)signal(SIGQUIT, trapper);
	(void)signal(SIGHUP, trapper);
	(void)signal(SIGTERM, trapper);

	/* set terminal to raw */
	if (tcgetattr(0, &old) == -1) {
		perror("tcgetattr()");
		exit(1);
a151 11
	(void)memcpy(&new, &old, sizeof(struct termios));
	new.c_cc[VTIME] = 0;
	new.c_cc[VMIN]  = 1;
	new.c_lflag &= ~(ECHO | ISIG | ICANON);
	new.c_oflag &= ~(ONLCR | OPOST);
	new.c_iflag &= ~(INLCR | ICRNL | IXON | IXOFF | IUCLC |
						ISTRIP | BRKINT);
	if (tcsetattr(0, TCSANOW, &new) == -1) {
		perror("tcgetattr()");
		exit(1);
	}
d153 1
a153 1
	if (makeio(0, 1, s)) {
d160 3
a162 1
	(void)tcsetattr(0, TCSANOW, &old);
@


1.5
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.4 1994/06/12 21:55:31 vince Exp vince $
 * $Date: 1994/06/12 21:55:31 $
 * $Revision: 1.4 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.4 1994/06/12 21:55:31 vince Exp vince $";
d132 1
@


1.4
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.3 1994/06/06 16:27:39 vince Exp vince $
 * $Date: 1994/06/06 16:27:39 $
 * $Revision: 1.3 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.3 1994/06/06 16:27:39 vince Exp vince $";
d16 1
d20 1
d31 2
a32 2
	char		*tohost, *remoteuser, command[1024];
	int		debug, nopty, nocrypt;
d38 2
a44 2
	remoteuser = NULL;
	debug = nopty = nocrypt = 0;
d48 2
a49 4
				remoteuser = optarg;
				break;
			case	'd':
				debug++;
d52 1
a52 1
				nopty++;
d55 1
a55 1
				nocrypt++;
d69 1
a69 1
		if (i > sizeof(command) - 2) {
d73 11
a83 2
		(void)strcat(command, argv[optind]);
		(void)strcat(command, " ");
d85 1
d90 14
a103 3
	/*
	dhexchange(s);
	*/
a126 7
	/*
	if (dhexchange(s) < 0) {
		perror("dhexchange()");
		exit(1);
	}
	*/
	
@


1.3
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.2 1994/06/06 15:23:00 vince Exp vince $
 * $Date: 1994/06/06 15:23:00 $
 * $Revision: 1.2 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.2 1994/06/06 15:23:00 vince Exp vince $";
d14 3
d18 1
a18 1
#include "defs.h"
d22 3
d34 1
d41 2
a42 1
	remoteuser = debug = nopty = nocrypt = 0;
a60 2
	
	
a75 1

d80 32
d115 1
d119 1
d121 11
@


1.2
log
@safety
@
text
@d3 3
a5 3
 * $Header: /res/usr/vince/src/dh/RCS/slave.c,v 1.1 1994/06/06 14:41:02 vince Exp vince $
 * $Date: 1994/06/06 14:41:02 $
 * $Revision: 1.1 $
d10 1
a10 1
static char *rcsid = "@@(#) $Id: slave.c,v 1.1 1994/06/06 14:41:02 vince Exp vince $";
d76 4
a79 2

	(void) write(s, "ciao\n", 5);
d81 1
@


1.1
log
@Initial revision
@
text
@d2 5
a6 5
 * $Author:$
 * $Header:$
 * $Date:$
 * $Revision:$
 * $Locker:$
d10 1
a10 1
static char *rcsid = "@@(#) $Id:$";
a13 5
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <netdb.h>
#include <errno.h>
d23 2
a24 2
	char		*tohost, command[1024];
	int		remoteuser, debug, nopty, nocrypt;
a78 31
}

callsocket(hostname, portnum)
char	*hostname;
int	portnum;
{
	struct sockaddr_in	sa;
	struct hostent		*hp;
	int			s, on = 1;
	extern int		errno;

	if ((hp = gethostbyname(hostname)) == NULL) {
		errno = ECONNREFUSED;
		return(-1);
	}

	bzero(&sa, sizeof(sa));
	(void)memcpy((char *) &sa.sin_addr, hp->h_addr, hp->h_length);
	sa.sin_family = hp->h_addrtype;
	sa.sin_port = htons((u_short)portnum);

	if ((s = socket(hp->h_addrtype, SOCK_STREAM, 0)) < 0)
		return(-1);
	if (setsockopt(s, SOL_SOCKET, SO_KEEPALIVE, (char *)&on,
							sizeof(on)) == -1)
		return(-1);
	
	if (connect(s, &sa, sizeof sa) < 0)
		return(-1);
	
	return(s);
@
