CFBcrypt	sub.c	/^void			CFBcrypt(databyte, mode, cipher, side)$/
CONTROL	makeio.c	/^#define CONTROL(x)	((x) & 0x1f)		\/* CTRL(x) is not/
Decode	md5c.c	/^static void Decode (output, input, len)$/
Encode	md5c.c	/^static void Encode (output, input, len)$/
F	md5c.c	/^#define F(x, y, z) (((x) & (y)) | ((~x) & (z)))$/
FF	md5c.c	/^#define FF(a, b, c, d, x, s, ac) { \\$/
G	md5c.c	/^#define G(x, y, z) (((x) & (z)) | ((y) & (~z)))$/
GG	md5c.c	/^#define GG(a, b, c, d, x, s, ac) { \\$/
H	md5c.c	/^#define H(x, y, z) ((x) ^ (y) ^ (z))$/
HH	md5c.c	/^#define HH(a, b, c, d, x, s, ac) { \\$/
I	md5c.c	/^#define I(x, y, z) ((y) ^ ((x) | (~z)))$/
II	md5c.c	/^#define II(a, b, c, d, x, s, ac) { \\$/
MD5Final	md5c.c	/^void MD5Final (digest, context)$/
MD5Init	md5c.c	/^void MD5Init (context)$/
MD5Transform	md5c.c	/^static void MD5Transform (state, block)$/
MD5Update	md5c.c	/^void MD5Update (context, input, inputLen)$/
MD5_memcpy	md5c.c	/^static void MD5_memcpy (output, input, len)$/
MD5_memset	md5c.c	/^static void MD5_memset (output, value, len)$/
MUL	idea.c	/^#define MUL(x,y) (x = mul(low16(x),y))$/
Midea	idea.c	/^void main(void)$/
Msdihook	sdihook.c	/^main(argc, argv)$/
Mstel	stel.c	/^main(argc, argv)$/
Msteld	steld.c	/^main(argc, argv)$/
ROTATE_LEFT	md5c.c	/^#define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> /
UpdateCRC	crc32.c	/^void UpdateCRC(s, len)$/
callsocket	sub.c	/^callsocket(hostname, portnum)$/
cfbshift	idea.c	/^static void cfbshift(register byteptr iv, register/
cipher_idea	idea.c	/^void cipher_idea(word16 in[4], word16 out[4], regi/
close_idea	idea.c	/^void close_idea(void)	\/* erase current key schedul/
close_idearand	idea.c	/^void close_idearand(void)$/
control	sub.c	/^control(c)$/
cryptbuf	makeio.c	/^cryptbuf(buf, len, dec, cipher, side)$/
de_key_idea	idea.c	/^static void de_key_idea(IDEAkey Z, IDEAkey DK)$/
deadchild	makeio.c	/^deadchild()$/
detachfrompty	steld.c	/^detachfrompty()$/
dhexchange	sub.c	/^dhexchange(s, side, firstack, rndstr)$/
dochannel	makeio.c	/^dochannel(channel, out, buf, firstack, remhostname/
doescape	makeio.c	/^doescape(remhostname, old, new, firstack, buf, len/
doinput	makeio.c	/^doinput(in, channel, buf, firstack, remhostname, o/
domatch	makeio.c	/^domatch(buf, pat)$/
en_key_idea	idea.c	/^static void en_key_idea(word16 *userkey, word16 *Z/
establish	sub.c	/^establish(portnum)$/
fireman	sub.c	/^fireman()$/
from_match	login_access.c	/^static int from_match(tok, string)$/
getconnection	sub.c	/^getconnection(s, hostname)$/
getetcstelsecret	sub.c	/^getetcstelsecret(side)$/
getpty	sub.c	/^int	getpty(line)$/
getstelpass	stel.c	/^getstelpass(prompt, buf, len)$/
getstelsecret	steld.c	/^getstelsecret(user)$/
gp_restore_ttymode	stel.c	/^void gp_restore_ttymode()$/
hexdump	sub.c	/^hexdump(prompt, buf, len)$/
idea_ecb	idea.c	/^\/* static *\/ void idea_ecb(word16 *inbuf, word16 */
ideacfb	idea.c	/^void ideacfb(byteptr buf, int count)$/
idearand	idea.c	/^byte idearand(void)$/
idletimeout	makeio.c	/^idletimeout()$/
init_idearand	idea.c	/^void init_idearand(byte key[16], byte seed[8], wor/
init_this_key_idea	idea.c	/^void init_this_key_idea(word16 *ZZ, byte key[16], /
initcfb_idea	idea.c	/^void initcfb_idea(word16 iv0[4], byte key[16], boo/
initkey_idea	idea.c	/^static void initkey_idea(byte key[16], boolean dec/
internalrnd	sub.c	/^internalrnd()$/
inv	idea.c	/^CONST static uint16 inv(uint16 x)     $/
issdiregistered	steld.c	/^issdiregistered(user)$/
killoptions	sub.c	/^killoptions(s, host)$/
list_match	login_access.c	/^static int list_match(list, item, match_fn)$/
login	login.c	/^login(ut)$/
login_access	login_access.c	/^login_access(user, from)$/
logout	logout.c	/^logout(line)$/
logwtmp	logwtmp.c	/^logwtmp(line, name, host)$/
low16	idea.c	/^#define low16(x) ((x) & 0xFFFF)$/
makeio	makeio.c	/^makeio(in, out, channel, firstack, remhostname, ol/
mauth	sub.c	/^mauth(s, authbuf, side, firstack)$/
min	makeio.c	/^#define min(x, y)	(x < y ? x  : y)$/
mkrnd	sub.c	/^mkrnd(str, rnd, modulo, logging)$/
mkunixauth	steld.c	/^mkunixauth(usepty, fail)$/
mul	idea.c	/^CONST static uint16 mul(register uint16 a, registe/
myhostname	login_access.c	/^static char *myhostname()$/
netgroup_match	login_access.c	/^static int netgroup_match(group, machine, user)$/
peername	sub.c	/^peername(fd)$/
putvar	steld.c	/^putvar(name, value)$/
read_data	sub.c	/^int		read_data(s, buf, n)$/
runshell	steld.c	/^runshell(pp, usepty)$/
sd_restore_ttymode	sdihook.c	/^void sd_restore_ttymode()$/
sdiauth	sdihook.c	/^sdiauth(usepty, user)$/
serveclient	steld.c	/^serveclient(fh, timeout)$/
setterminal	steld.c	/^setterminal(usepty, ttyline, pfdin, pfdout, rows, /
shadow_getpwnam	steld.c	/^shadow_getpwnam(user)$/
sigmask	makeio.c	/^#define sigmask(n)	((unsigned int)1 << (((n) - 1) /
sk_restore_ttymode	makeio.c	/^void sk_restore_ttymode()$/
skeyresp	makeio.c	/^skeyresp(line, automjr)$/
sleepexit	steld.c	/^sleepexit(eval)$/
storeskeybuf	makeio.c	/^storeskeybuf(buf, len)$/
string_match	login_access.c	/^static int string_match(tok, string)$/
timeexpired	steld.c	/^timeexpired(s)$/
trapper	stel.c	/^trapper(s)$/
updwtmp	updwtmp.c	/^updwtmp(file, ut)$/
user_match	login_access.c	/^static int user_match(tok, string)$/
utmp_init	utmp_init.c	/^utmp_init(line, user, id)$/
utmp_login	utmp_login.c	/^utmp_login(line, user, host)$/
utmp_logout	utmp_logout.c	/^utmp_logout(line)$/
utmp_ptsid	utmp_init.c	/^char   *utmp_ptsid(line, tag)$/
utmpx_init	utmpx_init.c	/^utmpx_init(line, user, id)$/
utmpx_login	utmpx_login.c	/^utmpx_login(line, user, host)$/
utmpx_logout	utmpx_logout.c	/^utmpx_logout(line)$/
utmpx_ptsid	utmpx_init.c	/^char   *utmpx_ptsid(line, tag)$/
write_data	sub.c	/^int		write_data(s, buf, n)$/
xorbuf	idea.c	/^static void xorbuf(register byteptr buf, register /
