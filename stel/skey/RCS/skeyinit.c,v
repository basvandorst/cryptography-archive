head	1.11;
access;
symbols;
locks
	vince:1.11; strict;
comment	@ * @;


1.11
date	96.03.28.10.13.17;	author vince;	state Exp;
branches;
next	1.10;

1.10
date	95.11.27.13.43.34;	author vince;	state Exp;
branches;
next	1.9;

1.9
date	95.07.14.16.06.28;	author vince;	state Exp;
branches;
next	1.8;

1.8
date	95.04.20.17.31.25;	author vince;	state Exp;
branches;
next	1.7;

1.7
date	95.04.18.12.08.40;	author vince;	state Exp;
branches;
next	1.6;

1.6
date	95.04.14.16.51.41;	author vince;	state Exp;
branches;
next	1.5;

1.5
date	95.01.24.15.23.58;	author vince;	state Exp;
branches;
next	1.4;

1.4
date	95.01.24.12.50.43;	author vince;	state Exp;
branches;
next	1.3;

1.3
date	95.01.02.17.31.33;	author vince;	state Exp;
branches;
next	1.2;

1.2
date	94.12.10.12.59.47;	author vince;	state Exp;
branches;
next	1.1;

1.1
date	94.12.08.18.00.33;	author vince;	state Exp;
branches;
next	;


desc
@@


1.11
log
@automatic
@
text
@/*   change password or add user to S/KEY authentication system.
 *   S/KEY is a tradmark of Bellcore  */

#include <stdio.h>
#include <string.h>
#include <pwd.h>
#include "skey.h"
#include <stdio.h>
#include <time.h>

extern int optind;
extern char *optarg;

char * readpass();

#ifdef SKEYD
#ifdef SKEYINITINSECURE
/* this violates standard skeylookup() syntax */
int skeylookup __ARGS((struct skey *mp,char *name, int staylocal));
#endif /* SKEYINITINSECURE */
#else
int skeylookup __ARGS((struct skey *mp,char *name));
#endif


#define NAMELEN 2

int
main(argc,argv)
int argc;
char *argv[];
{
	struct skey skey;
	int rval,n,nn,i,defaultsetup;
	char seed[18],tmp[80],key[8];
	struct passwd *ppuser,*pp;
	/* increased defaultseed size, tnx to markl@@rugrat.glyphic.com */
	char defaultseed[100], passwd[256],passwd2[256] ;
#ifdef SKEYINITINSECURE
#ifdef SKEYD
	char line[BUFLEN], answer[BUFLEN];
#endif
#endif /* SKEYINITINSECURE */

	time_t now;
	struct tm *tm;
	char tbuf[27],buf[60];
	char lastc, me[80];
	int l;

	time(&now);
	tm = localtime(&now);
	strftime(tbuf, sizeof(tbuf), "%M%j", tm);

	if ((gethostname (defaultseed, sizeof (defaultseed))) < 0)
		exit (-1);
	strcpy(&defaultseed[NAMELEN],tbuf);

	pp = ppuser = getpwuid(getuid());
	strcpy(me,pp->pw_name);
	defaultsetup = 1;
	if( argc > 1){
		if(strcmp("-s", argv[1]) == 0)
			defaultsetup = 0;
		else
			pp = getpwnam(argv[1]);
		if(argc > 2)
			pp = getpwnam(argv[2]);

	}
	if(pp == NULL){
		printf("User unknown\n");
		exit(1);
	}
	if(strcmp( pp->pw_name,me) != 0){
		if(getuid() != 0){
			/* Only root can change other's passwds */
			printf("Permission denied.\n");
			exit(1);
		}
	}

#ifdef SKEYD
#ifndef SKEYINITINSECURE
	printf("Notice: skey.init works with LOCAL key file only\n");
#endif
#endif

	/* vince */
	bzero(&skey, sizeof(skey));
#ifdef SKEYD
#ifdef SKEYINITINSECURE
	rval = skeylookup(&skey,pp->pw_name,0); /* use skeyd if available */
#else /* it is secure, i.e., local updates only */
	rval = skeylookup(&skey,pp->pw_name,1); /* prevent using of network */
#endif /* SKEYINITINSECURE */
#else
	rval = skeylookup(&skey,pp->pw_name);
#endif /* SKEYD */
	switch(rval){
	case -1:
		perror("error in opening database");
		exit(1);
	case 0:
		printf("Updating %s:\n",pp->pw_name);
		printf("Old key: %s\n",skey.seed);
		/* lets be nice if they have a skey.seed that ends in 0-8 just add one*/
		l = strlen(skey.seed);
		if( l > 0){
			lastc = skey.seed[l-1];
			if( isdigit(lastc) && lastc != '9' ){
				strcpy(defaultseed, skey.seed);
				defaultseed[l-1] = lastc + 1;
			}
			if( isdigit(lastc) && lastc == '9' && l < 16){
				strcpy(defaultseed, skey.seed);
				defaultseed[l-1] = '0';
				defaultseed[l] = '0';
				defaultseed[l+1] = '\0';
			}
		}
		break;
	case 1:
		printf("Adding %s:\n",pp->pw_name);
		break;
	}
    n = 99;
    if( ! defaultsetup){
	printf("Reminder you need the 6 english words from the skey command.\n");
	for(i=0;;i++){
		if(i >= 2) exit(1);
		printf("Enter sequence count from 1 to 10000: ");
		fgets(tmp,sizeof(tmp),stdin);
		n = atoi(tmp);
		if(n > 0 && n < 10000)
			break;	/* Valid range */
		printf("Count must be > 0 and < 10000\n");
	}
    }
    if( !defaultsetup){
	printf("Enter new key [default %s]: ", defaultseed);
	fflush(stdout);
	fgets(seed,sizeof(seed),stdin);
	rip(seed);
	if(strlen(seed) > 16){
		printf("Seed truncated to 16 chars\n");
		seed[16] = '\0';
	}
	if( seed[0] == '\0') strcpy(seed,defaultseed);
	for(i=0;;i++){
		if(i >= 2) exit(1);
		printf("s/key %d %s\ns/key access password: ",n,seed);
		fgets(tmp,sizeof(tmp),stdin);
		rip(tmp);
		backspace(tmp);
		if(tmp[0] == '?'){
			printf("Enter 6 English words from secure S/Key calculation.\n");
			continue;
		}
		if(tmp[0] == '\0'){
			exit(1);
		}
		if(etob(key,tmp) == 1 || atob8(key,tmp) == 0)
			break;	/* Valid format */
		printf("Invalid format, try again with 6 English words.\n");
	}
    } else {
	/* Get user's secret password */
	fprintf(stderr,"Reminder - Only use this method if you are directly connected.\n");
	fprintf(stderr,"If you are using telnet or dial-in exit with no password and use keyinit -s.\n");
	for(i=0;;i++){
		if(i >= 2) exit(1);
		fprintf(stderr,"Enter secret password: ");
		readpass(passwd,sizeof(passwd));
		if(passwd[0] == '\0'){
			exit(1);
		}
		fprintf(stderr,"Again secret password: ");
		readpass(passwd2,sizeof(passwd));
		if(passwd2[0] == '\0'){
			exit(1);
		}
		if(strlen(passwd) < 4 && strlen(passwd2) < 4) {
			fprintf(stderr, "Sorry your password must be longer\n\r");
			exit(1);
		}
		if(strcmp(passwd,passwd2) == 0) break;
		fprintf(stderr, "Sorry no match\n");
		
	
	}
	strcpy(seed,defaultseed);

	/* Crunch seed and password into starting key */
	if(keycrunch(key,seed,passwd) != 0){
		fprintf(stderr,"%s: key crunch failed\n",argv[0]);
		exit(1);
	}
	nn = n;
	while(nn-- != 0)
		fff(key);
    }
	time(&now);
	tm = localtime(&now);
	strftime(tbuf, sizeof(tbuf), " %b %d,%Y %T", tm);

	/*DAVE*/
	if (skey.val == NULL)
		skey.val = (char *) malloc(16+1);
	/*DAVE*/
	btoa8(skey.val,key);

#ifdef SKEYINITINSECURE /* unsafe -- see below */
#ifdef SKEYD
	sprintf(line,"%s %04d %-16s %s %-21s\n",pp->pw_name,n,
		seed,skey.val, tbuf);
	if (skeytalk(FORCEKEYUPDATE, line, answer)) {
		printf(
		"NOT using skey authentication server for key file updating\n");
#endif
		/* did we used local key file? */
		if (skey.keyfile == NULL) {
			printf("Can not use local key file!\n");
			exit(1);
		}
		
		fprintf(skey.keyfile,"%s %04d %-16s %s %-21s\n",
					pp->pw_name,n, seed,skey.val, tbuf);
		fclose(skey.keyfile);
#ifdef SKEYD
	}
#endif
#else /* !SKEYINITINSECURE */
	/* not using skeyd for key initalization. this way the protocol
	   is safer. it is not acceptable, in fact, to allow clients
	   to init the centralized key file.  it would be easy, for
	   a malicious hacker, to create a new key file entry or to
	   change (that is, initialise) root's key entry.  the security
	   of all systems should depend upon the security of the master
	   site only, so the server site does not trust client sites
	   and remote inits are forbidden. */
	fprintf(skey.keyfile,"%s %04d %-16s %s %-21s\n",pp->pw_name,n,
		seed,skey.val, tbuf);
	fclose(skey.keyfile);
#endif /* SKEYINITINSECURE */

	printf("\nID %s s/key is %d %s\n",pp->pw_name,n,seed);
	printf("%s\n",btoe(buf,key));
#ifdef HEXIN
	printf("%s\n",put8(buf,key));
#endif
	return 0;
}
@


1.10
log
@automatic
@
text
@d17 1
d20 1
@


1.9
log
@automatic
@
text
@d17 1
d234 1
a234 1
	   to init the centralized key file. it would be easy, for
d236 4
a239 3
	   change (that is, init) root's key entry. the security of
	   all systems shoudl depend upon the security of the master
	   site only */
@


1.8
log
@automatic
@
text
@d34 2
a35 1
	char defaultseed[17], passwd[256],passwd2[256] ;
@


1.7
log
@automatic
@
text
@d89 1
a89 1
	rval = skeylookup(&skey,pp->pw_name,0);
d91 1
a91 1
	rval = skeylookup(&skey,pp->pw_name,1);
@


1.6
log
@automatic
@
text
@d16 3
d20 2
d85 9
d95 1
@


1.5
log
@automatic
@
text
@d19 1
d30 1
d34 1
d74 6
d194 1
d214 13
@


1.4
log
@automatic
@
text
@d189 2
a190 2
		perror("connection to skey server");
		printf("NOT using skeyd for key file updating\n");
d194 1
a194 1
			printf("error in opening local /etc/skeykeys!\n");
@


1.3
log
@automatic
@
text
@a32 1

d61 1
a61 1
		return 1;
d67 1
a67 1
			return(1);
a70 2


d75 1
a75 1
		return 1;
d169 1
a169 1
		return 1;
d188 14
a201 3
	if (skeytalk(UPDATEKEYS, line, answer)) {
		perror("skeytalk()");
		exit(1);
a202 4
#else
	fprintf(skey.keyfile,"%s %04d %-16s %s %-21s\n",pp->pw_name,n,
		seed,skey.val, tbuf);
	fclose(skey.keyfile);
@


1.2
log
@automatic
@
text
@d29 3
d187 9
d199 1
@


1.1
log
@auto
@
text
@d173 1
a173 1
		f(key);
@
