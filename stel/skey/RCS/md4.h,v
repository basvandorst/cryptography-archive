head	1.3;
access;
symbols;
locks
	vince:1.3; strict;
comment	@ * @;


1.3
date	95.04.14.14.29.44;	author vince;	state Exp;
branches;
next	1.2;

1.2
date	94.12.09.16.33.17;	author vince;	state Exp;
branches;
next	1.1;

1.1
date	94.12.08.18.00.45;	author vince;	state Exp;
branches;
next	;


desc
@@


1.3
log
@automatic
@
text
@/* MD4.H - header file for MD4C.C
 */

/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
   rights reserved.

   License to copy and use this software is granted provided that it
   is identified as the "RSA Data Security, Inc. MD4 Message-Digest
   Algorithm" in all material mentioning or referencing this software
   or this function.

   License is also granted to make and use derivative works provided
   that such works are identified as "derived from the RSA Data
   Security, Inc. MD4 Message-Digest Algorithm" in all material
   mentioning or referencing the derived work.

   RSA Data Security, Inc. makes no representations concerning either
   the merchantability of this software or the suitability of this
   software for any particular purpose. It is provided "as is"
   without express or implied warranty of any kind.

   These notices must be retained in any copies of any part of this
   documentation and/or software.
 */

/* POINTER defines a generic pointer type */
typedef unsigned char *POINTER;

#ifdef MSDOS
typedef unsigned long UINT4;
#else
typedef unsigned long int UINT4;
#endif /* MSDOS */

/* MD4 context. */
typedef struct {
  UINT4 state[4];                                   /* state (ABCD) */
  UINT4 count[2];        /* number of bits, modulo 2^64 (lsb first) */
  unsigned char buffer[64];                         /* input buffer */
} MD4_CTX;

void MD4Init();
void MD4Update();
void MD4Final();
@


1.2
log
@automatic
@
text
@d1 1
a1 18
#ifdef	__STDC__
#ifdef __ARGS
#undef __ARGS
#endif
#define	__ARGS(X) X	/* For ANSI C */
#else
#ifdef __ARGS
#undef __ARGS
#endif
#define	__ARGS(X) ()
#endif

/* 
 *
 * md4.h -- Header file for implementation of MD4 Message Digest Algorithm
 * Updated: 2/13/90 by Ronald L. Rivest
 * (C) 1990 RSA Data Security, Inc.
 * Reformatted and de-linted - 2/12/91 Phil Karn
d4 20
a23 10
/* MDstruct is the data structure for a message digest computation. */
typedef struct {
	unsigned long buffer[4];/* Holds 4-word result of MD computation */
	unsigned char count[8];	/* Number of bits processed so far */
	unsigned int done;	/* Nonzero means MD computation finished */
} MDstruct, *MDptr;

/* MDbegin(MD)
 * Input: MD -- an MDptr
 * Initialize the MDstruct prepatory to doing a message digest computation.
a24 1
extern void MDbegin __ARGS((MDptr MDp));
d26 2
a27 13
/* MDupdate(MD,X,count)
 * Input: MD -- an MDptr
 *        X -- a pointer to an array of unsigned characters.
 *        count -- the number of bits of X to use (an unsigned int).
 * Updates MD using the first ``count'' bits of X.
 * The array pointed to by X is not modified.
 * If count is not a multiple of 8, MDupdate uses high bits of last byte.
 * This is the basic input routine for a user.
 * The routine terminates the MD computation when count < 512, so
 * every MD computation should end with one call to MDupdate with a
 * count less than 512.  Zero is OK for a count.
 */
extern void MDupdate __ARGS((MDptr MDp,unsigned char *X,unsigned int count));
d29 5
a33 7
/* MDprint(MD)
 * Input: MD -- an MDptr
 * Prints message digest buffer MD as 32 hexadecimal digits.
 * Order is from low-order byte of buffer[0] to high-order byte of buffer[3].
 * Each byte is printed with high-order hexadecimal digit first.
 */
extern void MDprint __ARGS((MDptr MDp));
d35 10
a44 1
/* End of md4.h */
@


1.1
log
@auto
@
text
@d2 3
d7 3
@
