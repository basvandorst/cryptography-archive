Path: msuinfo!uwm.edu!cs.utexas.edu!sun-barr!olivea!charnel!rat!usc!howland.reston.ans.net!agate!dog.ee.lbl.gov!network.ucsd.edu!pacbell.com!pacbell!osc!jgk
From: jgk@osc.COM (Joe Keane)
Newsgroups: sci.crypt
Subject: Re: 32 bit Encryption Algorithm?
Summary: It doesn't exist.
Keywords: toy
Message-ID: <5988@osc.COM>
Date: 26 Feb 93 02:25:04 GMT
References: <12120@uqcspe.cs.uq.oz.au> <WCS.93Feb22190721@rainier.ATT.COM>
Organization: Versant Object Technology
Lines: 38

In article <12120@uqcspe.cs.uq.oz.au> spart@cs.uq.oz.au (Geoffrey
Green,HONS93) writes:
>What would be suitable encryption algorithm to use on a machine that can only
>handle 32 bit numbers? For efficiency, it would probably use a 32 bit key,
>and encrypt 32 bit packets.  I am looking for something that is reasonably
>secure.

Sorry, but your requirements are contradictory.  Any encryption algorithm with
either 32-bit keys or 32-bit blocks is a toy.  In my opinion, an algorithm
with 64-bit keys and/or blocks is dangerously close to a toy.  If it was
designed almost twenty years ago, it probably made sense at the time, but i
wouldn't use it today.

I think your concerns about efficiency may be misguided.  The machine's word
size is something to keep in mind, but it shouldn't determine your algorithm.
Any algorithm you write in portable C should work fine on an 8-bit machine or
a 64-bit machine.  It's just that some machines are faster than others.  As an
extreme example, a while ago some Japanese researchers built a 1 GIPS 4-bit
Josephson computer, and this will obviously blow away your average 32-bit
SPARC despite the smaller word size.

For a given algorithm and number of rounds, the key size or block size
shouldn't make a drastic difference in the running time.  In most algorithms
the user-supplied key is expanded into a much larger internal key, so making
the user key bigger probably only changes your initialization.  And of course
it's more work to encrypt a bigger block, but there are less blocks to
encrypt, so it's not obvious that small blocks will be faster.

One thing to consider is how much data you can hold in registers.  If your
data block is in registers instead of fast cache, you'll run a couple times
faster.  On a decent machine you can guarantee that a 256-bit block will be in
registers, so that's a reasonable block size to use.

Given all that, Merkle's Khufu is probably as good as anything.

--
Joe Keane, amateur cryptologist
jgk@osc.com (uunet!amdcad!osc!jgk)
