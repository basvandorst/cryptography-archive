Path: msuinfo!netnews.upenn.edu!dsinc!spool.mu.edu!uwm.edu!cs.utexas.edu!milano!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Newsgroups: sci.crypt
Subject: Re: What's wrong with this picture?
Message-ID: <1993Feb11.220939.21992@cactus.org>
Date: 11 Feb 93 22:09:39 GMT
References: <3598@blue.cis.pitt.edu> <1993Feb10.220507.17664@csi.uottawa.ca> <1993Feb11.170918.342@netcom.com>
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
Lines: 72


 In <1993Feb11.170918.342@netcom.com> rlglende@netcom.com (Robert
 Lewis Glendenning) writes:


>My understanding of the weaknesses of PseudoRNGs is that they can be
>predicted from the sequence, independently of cycle length.

 Well, not quite *independent* of cycle length.  But an n-bit LFSR
 is completely defined by only 2n bits of its sequence.

 On the other hand, a *huge* linear generator can make this a little
 more interesting.  I have demonstrated a degree-11,213 Additive RNG
 in my CLOAK cipher (released to U.S. sci.crypt in 1990, and still
 available on CompuServe in the BPascal, Vintage Pascal library
 (BROWSE for "cipher")).

 This RNG has an internal state of 4 * 11,213 BYTES, or over 43K.
 IF the internal state was randomly obtained, certainly we could
 not hope to recover all that state with under 43K of ciphertext.
 If we assume that each message uses its own message key (CLOAK
 does) then, for messages shorter than 43K, we would expect that
 it would be *impossible* to break the RNG.

 Alas, in practice, the initial RNG state is clearly *not*
 random--although, in CLOAK, the RNG output is non-linearly
 filtered, so the RNG cannot be analyzed directly--and this means
 that our statement of strength again becomes equivocal.  The
 inability to make a flat statement of security is the usual
 situation, and both RSA and DES have this same problem.


>I have _not_ seen discussions of what happens when you xor/add/genop
>the output of different _classes_ of PRNGs.  This seems safe to me.

 It is not clear to me that the "class-ness" of the RNG matters
 much, assuming they are linear systems of comparable size.  The
 first issue is whether one can see through the combining function.
 Following Siegenthaler, we can hope to do this for nonlinear
 functions, and even addition is nonlinear at the bit level.


>Nevertheless, I believe that the government does not permit the use of
>XOR stream cyphers based on PRNGs for serious traffic.  This implies
>a weakness in PRNGs or the XOR stream cypher.  Anybody know which?

 I would like to know more about this government prohibition.
 This sounds a great deal like the type of cipher the government
 *encourages* in civilian systems.

 Certainly, once we assume that the Opponent has known plaintext,
 a stream cipher with an XOR combiner immediately exposes the
 confusion sequence.  If we assume a small, simple LFSR (or even
 a not-so-small GFSR or Additive RNG), we may consider the cipher
 broken.

 On the other hand, no cipher designer in his or her right mind
 would consider such a cipher secure.  Thus, we are dealing either
 with incredibly naive designers, or some sort of pressure for
 a less secure system.  This could be government pressure, but
 might also be from the customer.

 Since any form of processing takes time, it is almost inevitable
 that a stronger cipher will take more time than a weaker one.
 Note that this extra time will be consumed on each and every
 message, whereas there may be only a very few really sensitive
 messages.  In this case, the customer may prefer to take some
 risk of disclosure to get a faster system.  My customers count
 cycles in the inner loop.

 ---
 Terry Ritter   ritter@cactus.org
