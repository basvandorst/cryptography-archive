Path: msuinfo!caen!zaphod.mps.ohio-state.edu!uwm.edu!spool.mu.edu!agate!doc.ic.ac.uk!pipex!bnr.co.uk!uknet!edcastle!dcs.ed.ac.uk!pdc
From: pdc@dcs.ed.ac.uk (Paul Crowley)
Newsgroups: sci.crypt
Subject: More on spoofing
Message-ID: <C26so1.E2p@dcs.ed.ac.uk>
Date: 9 Feb 93 15:07:12 GMT
Sender: cnews@dcs.ed.ac.uk (UseNet News Admin)
Reply-To: pdc@dcs.ed.ac.uk (Paul Crowley)
Organization: Edinburgh University
Lines: 67

I think I've proven an extraordinarily strange result about the
possibility of an anti-spoofing protocol.  If I'm wrong, flame away; but
if I'm right, you too can marvel at just how strange the world really
is.

First the less interesting bit: a successful spoofing protocol has to
involve more than a straightforward exchange of text.  Think of the
protocol presented to the user as a box: plain text goes in at one end
and comes out the other, and it can do that in either direction.  If
there is only ever one bit of plain text "in the box" at a time, then
there is nothing to stop a spoofer putting two of the boxes next to each
other and passing the bits of plain text along as they arrive.  At some
point in the anti-spoof protocol, there has to be plain text from both
users in the box at once, a sort of cross-shaped communication.

What's so special about plain text, you ask?  This is the more
interesting bit.  Spoofing done by a human is indetectible, unless you
and the person you want to communicate with share some information that
the spoofer can't detect.  I can simply use your name and take bits of
your text, modify or delete any bits you try and use for an anti-spoof
system, and pass it on.  In this way, I'm like the kid who has an
argument between his teacher and his Dad by relays; he takes the
response his teacher says to him, goes to Dad that night, and finds out
what he would have said.

Supposing, then, that there is an anti-spoofing protocol that fails
against a human but works against any computer.  In that case, you could
use the protocol as part of the Turing Test, and no machine could pass
it.  To put it another way, the biggest set of computers you might hope
to detect is those that fail the Turing Test, and if you want to detect
as many of them as possible then your test should resemble the Turing
Test.  That's what's so special about plain text.

The logic of the above paragraph has been keeping me awake at night,
it's pretty tricky.  Look at it another way again, to come up with a
good anti-spoof protocol is to state some essential difference between
people and computers.  And for fans of Blade Runner, Voigt-Kampff tests
are not allowed :-)

The upshot of all this is that the best you can do to detect a spoof is
a weird bit of cross-shaped Turing testing of the spoofer.  This is my
earlier algorithm with added thought.

The test goes like this:  I indicate that I want to start communicating
with you, but I need to Turing test you first.  We compose initial
messages, append our public keys, and MD5 hash them.  Once we've
exchanged hash keys, we exchange messages; repeat until both parties
are satisfied that neither is a machine.

Now, our spoofer can't pass on the MD5 hashes they receive, because
that'll commit the exchange to public keys that it doesn't undersand. 
But it won't get any further with either of us until we get hash keys,
so it'll have to compose a message of its own with one of its own
public keys appended and send that.

Later on, I'll get to ask it about that message.  It can't pass those
queries onto you, so it'll have to answer them itself.  It's forced to
carry out the whole exchange by itself, and the sophistication with
which it does so constitutes a simple form of Turing Test.

I *think* I've proven that this protocol (with minor variations) is the
only possible anti-spoofing system.  I also think this is one if the
strangest results I've ever set eyes on.
  __                                  _____
\/ o\ Paul Crowley   pdc@dcs.ed.ac.uk \\ //
/\__/ Trust me. I know what I'm doing. \X/
Cthulhu, Cthulhu, bo-bthulhu, banana-fana-fo-fthulhu, me-mi-mo-mthulhu, Cthulhu!
