Path: msuinfo!uwm.edu!csd4.csd.uwm.edu!markh
From: markh@csd4.csd.uwm.edu (Mark)
Newsgroups: sci.crypt,sci.math
Subject: Re: "Card-shuffling" algorithms
Date: 27 Feb 1993 01:57:14 GMT
Organization: Computing Services Division, University of Wisconsin - Milwaukee
Lines: 31
Message-ID: <1mmhpqINNhr5@uwm.edu>
References: <1993Feb25.201917.1717@ee.eng.ohio-state.edu>
NNTP-Posting-Host: 129.89.7.4
Xref: msuinfo sci.crypt:13891 sci.math:40206

In article <1993Feb25.201917.1717@ee.eng.ohio-state.edu> butzerd@columbia.eng.ohio-state.edu (Dane C. Butzer) writes:
>Does anybody know of an algorithm that will randomly shuffle a deck in one
>pass, with one random number chosen per card, given a "good" random number
>generator?  Is such an algorithm even believed to be possible?


Impossible.  Shuffling is the inverse of sorting, which is an N log(N) process.
Therefore you need log(N) passes at the very least.

Take any comparison-based sorting algorithm at all.  Replace the comparison
operation:

Compare(A, B) = 0 if A <= B
                1 if A > B

with the randomizer

Random(A, B) = 0 or 1 with equal probability.

The result is a shuffling algorithm.

The converse is true too.  Take any transposition-based random shuffling
algorithm.  Replace the random transposition function

Transpose(A, B) = (A, B) or (B, A) with equal probability

with a comparison-based transposition function:

Permute(A, B) = (A, B) if A <= B, or (B, A) if A > B.

The result is a sorting algorithm.
