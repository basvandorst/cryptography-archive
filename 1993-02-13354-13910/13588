Newsgroups: sci.crypt
Path: msuinfo!caen!sol.ctr.columbia.edu!usc!cs.utexas.edu!milano!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Subject: Re: What's wrong with this picture?
Message-ID: <1993Feb12.190649.1886@cactus.org>
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
References: <3598@blue.cis.pitt.edu> <C2Ax51.Mo4@jabba.ess.harris.com> <C2CApq.197@jabba.ess.harris.com>
Date: Fri, 12 Feb 1993 19:06:49 GMT
Lines: 144


 In <C2CApq.197@jabba.ess.harris.com> mvm@caesun6.epg.harris.com
 (Matt Mahoney) replies to my earlier message.

 [ Sorry about quoting everything, but I'm having trouble
   understanding the response in the context of my message. ]

>ritter@cactus.org (Terry Ritter) writes:
>> In <C2Ax51.Mo4@jabba.ess.harris.com> mvm@caesun6.epg.harris.com
>> (Matt Mahoney) writes:
>>
>>>wbdst+@pitt.edu (William B Dwinnell) writes:
>>>
>>>[Cipher using XOR with PRNG...]
>>>
>>>This works only if you take care to use a cryptograpically secure
>>>pseudo random number generator, such as MD5(k+1), MD5(k+2), MD5(k+3)...,
>>>where k is your key.
>>
>> 1.  MD5 sure looks complex, but that is hardly proof that the
>>     function is "cryptographically secure."
>
>There is no proof that DES or RSA or any other cipher (with key
>shorter than message) is secure.  (I will surely be flamed if wrong).
>Then again, none of these have been broken either (yet).

 Correct, there is no such proof.  Thus, we say (at least under our
 breath) that such designs (MD5, DES, and RSA--*and* virtually every
 other cipher design--are *allegedly* cryptographically secure.

 Certainly we don't assert that something is "cryptographically
 secure" unless we have very good reason (that is, more than just
 hopes and dreams) to know this.  That way we don't mislead anyone.


>> 2.  MD5 was designed to hash a large document into a smaller
>>     value.  It was *not* designed to be a "cryptographically
>>     secure random number generator."
>
>I previously posted a PRNG using R[i] = MD5(R[i-1]+key) and nobody
>poked any holes in it.  It is postulated that finding x from MD5(x)
>requires 2^128 operations (i.e. brute force), so breaking either of
>of these MD5 ciphers is equivalent to breaking MD5.

 Excuse me, but does posting any design and having "no holes poked"
 imply that the design is strong?  I've seen lots of strange things
 go by that I didn't have time for, or didn't feel like engaging.
 So much of the time the conversation ends up as "Yes it is!",
 "No it isn't!", that any response often takes on overtones of a
 Quixotic quest.

 Designers have long "postulated" lots of things about their ciphers.
 Almost nobody deliberately builds a cipher that can be cracked;
 almost every cipher is "postulated" to be secure.  But lots of
 ciphers get cracked anyway.  So much for "postulation."

 The "postulation" that "breaking either of these MD5 ciphers is
 equivalent to breaking MD5" is almost certainly meaningless
 without some significant chain of reasoning to back it up.


>> 3.  This same sort of "secure random number generator" has been
>>     previously proposed using RSA as the one-way function.  Alas,
>>     Shamir [1] shows that while a one-way function may be
>>     difficult to invert for individual values, the same does not
>>     necessarily apply to sequences.
>
>You are right.  Finding k from R[i]=MD5(k+i) doesn't help me refute
>either MD5 postulate.  (The other is that finding x1 != x2 such that
>MD5(x1) = MD5(x2) requires 2^64 operations).  I hope that since MD5
>and RSA both came from the same people, that they considered sequence
>based attacks.

 We appear to be having trouble communicating.

 As an example "to illustrate the trickiness of formal proofs of
 security," Shamir [1] proposed that a counting sequence (starting
 from some seed S) into a one-way function would produce a good RNG.
 He says:

    "The difficulty of extracting S from a *single* value of f(S+i)
    is guaranteed by the one-way nature of f.  However, without
    further assumption on f, one cannot formally prove that S
    cannot be extracted from *pairs* of values (such as f(S),
    f(S+1))."

 And then:

    "A simple example which shows that good one-way functions can
    be misused as sequence generators is supplied by the RSA
    encryption function . . . ."

 (Shamir did give some alternate approaches for using RSA as
 an RNG.)

 In other words, simply because a cipher function is "strong" doing
 what it is designed to do is no reason to believe that every system
 that uses that function will be similarly "strong."  It is necessary
 to know the limits of each of the components, and the weaknesses
 as well of various architectures of secure components.

 Thus, according to the reasoning in the response, we *know* that
 a similar system, using RSA instead of MD5, is susceptible to
 sequence based attacks.  Consequently, we must also mistrust MD5
 since it *is* "from the same people."

 In reality, the main problem comes from using MD5 in a way for
 which it was not designed.


 However, there are real reasons to mistrust MD5:

    1) The decisions made during the MD5 design, and the technology
    which supported those decisions, are not public, and, therefore,
    cannot be questioned.

    2) The MD5 design is complex, and, therefore, cannot readily be
    analyzed.  This is not at all the same thing as saying that
    MD5 is strong; in fact, if there is weakness, complexity hides
    that from ordinary designers, but the weakness may well be
    exploited by a tight-mouthed Opponent with huge resources.
    Complex designs are *exactly* what such an Opponent would want.

    3) Personally, I find something basically strange about saying
    "well, the internal function is not secure if you go through
    it once, but since we go through it <n> times, it must be
    secure."  This is almost like saying that we could start with
    any of our simple ciphers, and we only need iterate them enough
    to make them secure.  Is there something special about
    Substitution/Permutation functions which makes repeated
    application work better than for other cipher functions?  I see
    no reason to believe this, so I distrust the fundamental logic.


 Reference:

 [1]  Shamir, A.  1981.  On the generation of cryptographically
      strong pseudo-random sequences.  8th International
      Colloquium on Automata, Language, and Programming.  544-550.

 ---
 Terry Ritter   ritter@cactus.org


