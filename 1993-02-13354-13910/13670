Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!wupost!howland.reston.ans.net!newsserver.jvnc.net!darwin.sura.net!sgiblab!sgigate!sgi!wdl1!wdl39!mab
From: mab@wdl39.wdl.loral.com (Mark A Biggar)
Subject: Re: Decimals
Message-ID: <1993Feb17.231118.19415@wdl.loral.com>
Sender: news@wdl.loral.com
Organization: Loral Western Development Labs
References: <_b53qg=@rpi.edu> <5830012@hplsla.hp.com>
Date: Wed, 17 Feb 1993 23:11:18 GMT
Lines: 27

In article <5830012@hplsla.hp.com> ericb@hplsla.hp.com (Eric Backus) writes:
>Vesselin Bontchev writes:
>> mhcoffin@tolstoy.uwaterloo.ca (Michael Coffin) writes:
>> > You might if you want the right answer.  Don't use bc for anything
>> > important.  Some, if not all, versions of bc have a bug in the
>> > division algorithm.  Here's an example, (on a SparcStation 2):
>> >     % bc
>> >     a = 512323978668400342662142456021339603384123963276263800698706
>> >     b = 45862908082782345
>> >     c = a/b
>> >     a-(b*c)
>> >     -267488614159371026654933884467539
>> > The last line is obviously wrong since the answer should be in the
>> > range [0..b-1].  The last line should be 31295982937361006.
>> Hmm, is this a bug or just an overflow? Because I tried it on a VAX
>> and got exactly the same (negative) result... If it is a bug, is there
>> a fixed version of bc available?
>I get the same bug on HP-UX 8.0.  It IS a bug, but fortunately GNU bc
>version 1.02 does not have this bug.  So if you need a more reliable
>and much faster bc, get GNU bc 1.02.

The bigint math package in Perl get the right answer.

--
Mark Biggar
mab@wdl1.wdl.loral.com

