Newsgroups: sci.crypt
Path: msuinfo!caen!spool.mu.edu!yale.edu!ira.uka.de!math.fu-berlin.de!news.netmbx.de!Germany.EU.net!mcsun!sun4nl!spider.research.ptt.nl!research.ptt.nl!walvdrk_r
From: walvdrk_r@research.ptt.nl (Kees van der Wal)
Subject: Re: Wanted: very fast random number generator
Message-ID: <1993Jan31.153553.1@research.ptt.nl>
Sender: usenet@spider.research.ptt.nl (USEnet News)
Nntp-Posting-Host: dnlts0.research.ptt.nl
Organization: PTT Research, The Netherlands
References: <C1H7tG.7At.2@cs.cmu.edu>
Date: Sun, 31 Jan 1993 13:35:53 GMT
Lines: 20

In article <C1H7tG.7At.2@cs.cmu.edu>, tgl+@cs.cmu.edu (Tom Lane) writes:

> What I need is a very very fast random number generator; it does NOT need to
> be cryptographically strong.  The application is in generating random noise
> for dithering a color image.  I need about 8 random bits on each call
> (randomness of the low order bits is less important than the higher).
> Ideally it would take, say, just a shift and XOR per value.  The code has to
> be portable C, so circular shifts and other non-C operations are out.
> 
> I think something along the lines of a shift register with a constant
> pattern XORed in after every shift might solve my problem.  But I don't
> know how to design such a thing.  Info or references would be appreciated.

If the length of the sequence before it is repeated is not too long, the 
fastest may be to use an array of bytes (8 bits) with a suitable length (e.g. 
256 or 1K). Initialise the array with any suitable sequence and retrieve the 
"random" bytes in a cyclic manner.


Succes, <kees>
