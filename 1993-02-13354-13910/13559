Newsgroups: sci.crypt
Path: msuinfo!caen!spool.mu.edu!howland.reston.ans.net!usenet.ins.cwru.edu!agate!linus!linus.mitre.org!gauss!bs
From: bs@gauss.mitre.org (Robert D. Silverman)
Subject: Re: [Q] Searching for Primitive Roots in Z_p^*
Message-ID: <1993Feb11.155901.3301@linus.mitre.org>
Sender: news@linus.mitre.org (News Service)
Nntp-Posting-Host: gauss.mitre.org
Organization: Research Computer Facility, MITRE Corporation, Bedford, MA
References: <ACHIM.93Feb11160454@terpi.informatik.rwth-aachen.de>
Distribution: sci
Date: Thu, 11 Feb 1993 15:59:01 GMT
Lines: 28

In article <ACHIM.93Feb11160454@terpi.informatik.rwth-aachen.de> achim@terpi.informatik.rwth-aachen.de (Achim Gsell) writes:
>For the implementiation of discrete logarithm based protocolls I am 
>looking for algorithm that generates primes p and primitive roots in
>the multipl. finit group of Z mod p. The generation of a prime p is
>easy (also with known factorisation), but to get a primitive root the
>best algorithm I know is a ad hoc search (picking randomly an number between
>1 and p-1 and test it). What other algorithms are known?
 
Well, I wouldn't try 1. However:

This is the best way I know. 

(1) The number of primitive roots is phi(p-1). Thus the 'probability'
    that a 'random' integer is a prim. root is  phi(p-1)/(p-1)  which
    is asymptotic to exp(-gamma) ~ .56 
 
(2) One could also simply test 2,3,5,6,7,10,11,13,14....
    If the GRH is true you will find a prim. root less than 4 log^2 p.

By the way. In order to test a candidate one needs the factorization
of p-1. For large p finding this factorization may well be impossible.
So how do you test your candidates?

--
Bob Silverman
These are my opinions and not MITRE's.
Mitre Corporation, Bedford, MA 01730
"You can lead a horse's ass to knowledge, but you can't make him think"
