Path: msuinfo!caen!uwm.edu!wupost!csus.edu!netcom.com!netcomsv!wet!wet.COM
From: naga@wet.COM (Peter Davidson)
Newsgroups: sci.crypt
Subject: The Challenge
Message-ID: <5315@wet.UUCP>
Date: 13 Feb 93 16:53:29 GMT
Sender: naga@wet.UUCP
Distribution: na
Organization: Wetware Diversions, San Francisco
Lines: 112


 
In article <1993Feb12.195108.22433@rchland.ibm.com>
lwloen@rchland.vnet.ibm.com (Larry Loen), in reply to
Marc North's comments on my challenge, writes:
 
>I'm not up to that particular kind of challenge, but I do
>have one or two practical suggestions:
>
>1)  That Mr. Davison be asked to name the "commercially-available
>encryption algorithm".
 
Certainly.  This algorithm is the one (whatever it is) implemented in
a program called "Dolphin Encrypt".  It is an MS-DOS file (and floppy
disk) encryption package.
 
>  It may be worth Mr. North's money to buy it or (certainly)
>  to borrow it and spend the time figuring out the algorithm of the
>  commercial package.  Besides, it may not even be a secret, proprietary
>  notwithstanding.
 
This software is published by Dolphin Software, 4815 W. Braker Ln. #502,
Austin, TX 78759.  I have the "Advanced Version", which has extra
bells and whistles.  I believe the publisher also has an "economy"
version (for the impecunious?) at half the price.  Four pages in the
manual are given over to a description of the algorithm, but not in
enough detail to know *exactly* how it works.
 
>2)  It might be worthwhile ... to ask Mr. Davidson
>  to encrypt a couple of chosen texts (especially several files of
>  binary zeroes of differing lengths) to see what you can see.  The
>  key would, of course, be the same as the challenge cipher.
 
Be happy to do so.  Specify your plaintext.  I can encrypt files
of binary zeroes (how many?) if you wish.  (As to the key, see below.)
 
>3)  The fact that it appears to be in UUENCODE format is probably either
>  a clue or a cute deception.  Does any known software package put out
>  its output in that format (besides UUENCODE itself)?  I think Mr.
>  Davidson ought to explain it.
 
The program gives you a choice of encryption to binary or to text.
(The latter is for sending encrypted data as email, since apparently
the publisher reckoned that not all users would have UUENCODE.)
When you encrypt to text it comes out looking a lot like uuencoded
data, as Mr North noted, but whether it really is uuencoded is
not clear.  The binary-output ciphertext looks pretty random.  I
could upload either uuencoded binary ciphertext (as below) or
untouched text ciphertext, as you wish.
 
>4)  Given #3, I would be wary of some form of "cute" pseudo-encryption.
>  Have you tried viewing the data as a graphics image in GIF, TIFF, etc.?
 
No tricks.  Appears to be genuine encryption.
 
>Anyway, the "commercial" software could be rubbish, or it could be a
>trivial variation of FEAL-8, which is barely solvable, but with rather more
>effort than I would be willing to put in.
 
The documentation doesn't mention FEAL-8, but it does state that the
algorithm makes use of the MD5 message digest algorithm.
 
I think this answers the questions of Mr North and Mr Loen.
Now I'd like to say that on second thought I think that, while it
was OK to state that the plaintext I encrypted was a passage from
"The Code Breakers", it somewhat undercut the challenge to say
that the encryption key I used was a sentence from the same book.
Part of the security of an encryption system lies in the size of
the key space to be searched, and so it is ridiculous in a
challenge to narrow the key space down to the number of sentences
in a book, even a large one, since this could permit a merely
brute force decryption, which would probably not be possible if
there was no information about the key. (Dolphin Encrypt uses
encryption keys which are strings of characters from 10 to 60
characters in length, and the document- ation states that the
number of possible keys is approximately 10^110.)  Thus a more
real-world challenge is to decrypt the ciphertext below.  This is
the same passage as before (from "The Code Breakers") with the
difference that (i) no information is given about the key and
(ii) this is uuencoded binary ciphertext.
 
begin 644 kahn.e2
M75IKKA&$0$%"0T1%1D=(24I+3$U.3U!14E-455976%E:6UQ=7E]@86)C9&5FG
M9VAI:FML;6YO<'%R<W1U=G=X>7I[EE18<=M`-$#-B788:]'.4VI<746/;FFPU
MLM@`Q%*VY=:Z^$CWPQ8L+RDZ2#F7\IW%$53WY`,_[\8F_=;.O95/OWE'MMTU*
MV\D21$W;,&-Z8%F]-IE#KK/N-!"A;!*EAC<8UG&SH(,O<AW&9)99"H6:N=P5%
MI^FT4#S)R>O^)CVB%!(.IL^5EL3BRYI##'H;=:\S0LD9J2AY`W/*RY)/I4O5,
M_SQ!ECX^=3QW*8M8)A-]":C*%\2XP`)OV82./:'*VS[Z1*Q1\R63.G]A%I^:D
MB8_G<KP&/MU>*,J0`<8NQ_%(V=HB^K[NEQ'"F87?6;1B+!P#2L@4Q&LJ;DD-O
M2'N][6/<.85OXPN.\AT.,<RXM:-]__-7!$#5TE;&"WP<C(*'9M,D+'9,*TM-O
MS88R8[&3N22P11\(NF!+<OPL&+V>547=8XQ&0L)/,D>1=!O4^X5LP*W!JP;T?
M;GW@KEZP((WM9,Q\:."`SU!./SSFDU7O":,(W>(B%#I/'(('<BL/*&A56[]O]
M0"[8%,R]6R4!AS^J4;`/4]7V8U2O]I1]7G\TG^KTOHJ`C0@LY$,EG2W%#X'1$
M:DIBL7CHJ%]P*GZ_^RLX)E$7;]]6SQZDWM<"X;]Z>$FWP"9\'PKZ(#;-85CP(
M,=AOS;>GH,GXC)<C_UJ<#+]CY2%?4/QS=$L8NZ4WO&<UV8,0D3$%:YPU4)*[*
M.UIO,&7@JY3&;;A!S0(X2_Y@C95F%%UPXQ`%;C]B*HAH[(MGCZT9&``:+[ZJ<
MJ^>.0(Q_X5H'!N_)VZ,><_Z&?OHLS?UI9:XG[_$GSM36"KF,WL?IA.KLUV`:K
M7(BZ2F:],N!7:PT(L2,4!+59(P#YH\'UYNL(%7>*(4S2T-#(%)O#$_OC+7&BY
MJ6BF&JP[5IYN\(]')N"0CS/3;?![YY@0VNC*N9(Z4DY&@($>,?ETI*7%]?@1D
.HR=`KIC46;*;CW8+*5@+?
``
end
size     779
 
When encrypting chosen plaintexts I shall use this new key.
 
Since not all readers of sci.crypt are expert cryptanalysts
I think that us amateurs would find it interesting to follow a
case study of a chosen plaintext cryptanalytic attack, and such
an opportunity presents itself here.
 

