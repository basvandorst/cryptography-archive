Newsgroups: sci.crypt
Path: msuinfo!caen!zaphod.mps.ohio-state.edu!usc!sol.ctr.columbia.edu!eff!news.oc.com!utacfd.uta.edu!rwsys!sneaky!gordon
From: gordon@sneaky.lonestar.org (Gordon Burditt)
Subject: Re: What's wrong with this picture?
Message-ID: <C2BIxv.444@sneaky.lonestar.org>
Organization: Gordon Burditt
References: <3598@blue.cis.pitt.edu>
Date: Fri, 12 Feb 1993 04:24:56 GMT
Lines: 51

>First, we know that any stream CORxxx [sorry] XORed with a random stream
>is a random stream.  
True.
>                     Second, we have pseudorandom number generators 
>which have fairly long cycles, and if they're not long enough, we can
>make them longer, by XORing 2 or more random number strams streams
>together, as long as they don't have the same cycle, ixx right? (This

Pseudorandom streams are not random streams.  Regardless of the nice
statistical properties of pseudorandom streams, they often suffer
a problem that makes use in cryptography fatally flawed.  I must
not be able to predict the next number based on the previous sequence
of numbers, or the stream is cryptographically useless.  Some 
pseudorandom numbers CALCULATE the next number based only on the previous 
one.  Most aren't that bad:  they have some "hidden state", but that
can often be derived from a sequence of a few numbers.  (Note that this
is the difference between breaking into a house with an unlocked door vs.
breaking into a house with an unlocked door that sticks a little).

It's easy to get the original stream from the ciphertext:  guess some
plaintext.  Try common words or phrases.  Headers and signatures on
email have a lot of structure.  Give your opponent a proposed treaty 
to send back to his national government from the embassy, and intercept 
the corresponding ciphertext.  Note that if you EVER re-use the same
stream (DON'T), XORing two messages together gets you the XOR of the 
plaintext, with the key removed entirely.

XORing two streams with cycle lengths X and Y gets you a stream with a
minimum cycle of the least-common-multiple of X and Y.  It is best
if X and Y are relatively prime, so the LCM will be X*Y.  HOWEVER,
the ease of predicting the next number based on previous ones has
little to do with the cycle length.  You can get really long cycle
lengths with a really stupid generator:  increment the last number
and mod by some large number.

Example of a pseudorandom number generator that's cryptographically strong:
Choose a DES key K.  Choose an initial 64-bit seed S.  Return as a
random number the 64-bit value DES_encrypt(S, K), then increment S
for the next number.  

>may be a time performance problem.) So, all we need do is build this 
>random number generator which is really powerful, in terms of the

Measuring the "power" of a random number generator by its cycle length
is much like measuring the "power" of an automobile by the smell of
its exhaust.

>size of its cycle, then XOR it with the clear text, and voila! it is

					Gordon L. Burditt
					sneaky.lonestar.org!gordon
