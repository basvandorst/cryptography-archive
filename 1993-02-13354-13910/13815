Newsgroups: sci.crypt,sci.math
Path: msuinfo!uwm.edu!wupost!sdd.hp.com!hpscit.sc.hp.com!cupnews0.cup.hp.com!dhepner
From: dhepner@cup.hp.com (Dan Hepner)
Subject: Re: "Card-shuffling" algorithms
Sender: news@cup.hp.com (News Admin)
Message-ID: <C2xpHF.1v7@cup.hp.com>
Date: Wed, 24 Feb 1993 03:53:38 GMT
Distribution: usa
References: <C2xAxr.9Ln@mentor.cc.purdue.edu>
Organization: Hewlett-Packard
X-Newsreader: TIN [version 1.1 PL8.2]
Followup-To: sci.crypt,sci.math
Lines: 74
Xref: msuinfo sci.crypt:13815 sci.math:39986


Thanks for the critical analysis of the card shuffling algorithm.  I'm
sure you guys are right, that there's some difference, and this is not
in any way a dispute over which is correct.  But can you tell me how
much difference it makes?  Could we predict the "winner" or the "loser"?
I mean, it's not obvious.  I used the three card deck, as advised by both 
people who made essentially the same recommendation to perfect "my" 
algorithm (which was pointed out as being suggested in its correct form 
long ago by Knuth).

After running a few million shuffle runs, using the defective algorithm,
and detecting no clear winner, I ran two 10 million shuffles, here's the 
results:

result 12 = 1666501
result 21 = 1667602
result 102 = 1667695
result 120 = 1666712
result 201 = 1665961
result 210 = 1665529

(winner = 102, loser = 201)

Try again:

result 12 = 1664888
result 21 = 1668300
result 102 = 1666078
result 120 = 1668013
result 201 = 1665154
result 210 = 1667567
289.3u 0.2s 4:50 99%

(winner = 120, loser = 012, both different)

Dan Hepner

If you really care, here's the program which generates those results.
---------------------------------------------------------
#include <stdio.h>

int cards[3];

int count [222];

main ()
{
    int i,r,n, temp, loop, a,b,c;
    srand48(time(0));
    for (i=0; i<3; i++)
	cards[i] = i;
    for (loop=0; loop < 10000000; loop++)
    {
	for (n=0; n<3; n++)
	{
	    r = lrand48() % 3; 
	    temp = cards[r];
	    cards[r] = cards[n];
	    cards[n] = temp;
	}
	i = (cards[0] * 100 + (cards[1] * 10) + cards[2]);
	count[i] ++;
     }
     for (a=0; a< 3; a++)
	for (b=0; b<3; b++)
	   for (c=0; c<3; c++)
	   {
	      if ((a != b) && (a != c) && (b != c)) 
	      {
	         i = (100 * a) + (10 * b) + c;
	         printf ("result %d = %d\n", i, count[i]);
              }
           }
}
