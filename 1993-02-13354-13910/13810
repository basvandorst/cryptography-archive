Newsgroups: sci.crypt,sci.math
Path: msuinfo!caen!zaphod.mps.ohio-state.edu!howland.reston.ans.net!gatech!purdue!mentor.cc.purdue.edu!seaman.cc.purdue.edu!ags
From: ags@seaman.cc.purdue.edu (Dave Seaman)
Subject: Re: "Card-shuffling" algorithms
Message-ID: <C2xAxr.9Ln@mentor.cc.purdue.edu>
Sender: news@mentor.cc.purdue.edu (USENET News)
Organization: Purdue University
References: <1993Feb23.054706.13862@nwnexus.WA.COM> <C2x6pD.54F@cup.hp.com>
Distribution: usa
Date: Tue, 23 Feb 1993 22:39:26 GMT
Lines: 32
Xref: msuinfo sci.crypt:13810 sci.math:39969

In article <C2x6pD.54F@cup.hp.com> dhepner@cup.hp.com (Dan Hepner) writes:
>1. create an array[52] of int
>2. initialize the array, array[n] = n.
>3. for n = 1 to 52 
>     generate a random integer 'r', 1..52
>     temp = array[r]
>     array[r] = array[n]
>     array[n] = temp
>4. you now have a shuffled deck of cards

But not a randomly shuffled deck of cards. Some arrangements will
be much more likely than others.  Try it with a deck of 3 cards
instead of 52, and you will see that the algorithm generates 3
random numbers in the range 1..3, for a total of 3^3 = 27 different
possible sequences of random numbers.  The number of permutations
is 3! = 6. Since 6 does not divide 27, it follows that the 6 possible
permutations are not generated with equal probability.

A correct version of step 3 for the 52-card case is:

3. for n := 52 downto 2
	 generate a random integer 'r' in the range 1..n 
	 swap array[r] <-> array[n]

There are 52! possible choices of the random numbers in running
this algorithm, and each results in a different final arrangement
of the array. If the random number generator is good, then all
arrangements of the array are equally likely.

--
Dave Seaman
ags@seaman.cc.purdue.edu
