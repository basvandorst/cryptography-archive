Newsgroups: sci.crypt
Path: msuinfo!caen!zaphod.mps.ohio-state.edu!darwin.sura.net!newsserver.jvnc.net!gmd.de!Germany.EU.net!mcsun!chsun!bernina!caronni
From: caronni@nessie.cs.id.ethz.ch (Germano Caronni)
Subject: Re: More on spoofing
Message-ID: <1993Feb9.210627.7557@bernina.ethz.ch>
Sender: news@bernina.ethz.ch (USENET News System)
Organization: Swiss Federal Institute of Technology (ETH), Zurich, CH
References: <C26so1.E2p@dcs.ed.ac.uk>
Date: Tue, 9 Feb 1993 21:06:27 GMT
Lines: 120


In article <C26so1.E2p@dcs.ed.ac.uk> pdc@dcs.ed.ac.uk (Paul Crowley) writes:
>I think I've proven an extraordinarily strange result about the
>possibility of an anti-spoofing protocol.  If I'm wrong, flame away; but
>if I'm right, you too can marvel at just how strange the world really
>is.
>
>... part deleted ...
>
>The test goes like this:  I indicate that I want to start communicating
>with you, but I need to Turing test you first.  We compose initial
>messages, append our public keys, and MD5 hash them.  Once we've
>exchanged hash keys, we exchange messages; repeat until both parties
>are satisfied that neither is a machine.
>
>Now, our spoofer can't pass on the MD5 hashes they receive, because
>that'll commit the exchange to public keys that it doesn't undersand. 
>But it won't get any further with either of us until we get hash keys,
>so it'll have to compose a message of its own with one of its own
>public keys appended and send that.
>
>Later on, I'll get to ask it about that message.  It can't pass those
>queries onto you, so it'll have to answer them itself.  It's forced to
>carry out the whole exchange by itself, and the sophistication with
>which it does so constitutes a simple form of Turing Test.

GREAT! I have broken my head trying to poke holes in it, but I am not
sure I succeeded. I even think, the concept could be enlarged :-)

First I tried to change the scenario from exchange of turing-questions
to exchange of random-data. This, as already discussed, does not work.
(Does not work only if spoofing part knows that actually random-numbers
of such and such format will get exchanged)
Then I changed the scenario to exchange of data which is hidden by a complex
cryptografic function. Like encrypting the text n times with some key.
Does not work. I guess.

Now Your Turing-Test:
A sends: Inquire-For-Turing-Test
B has to receive this, eventually.

Let's assume you have high-quality spoofing: Then a human will intercept
your request, and B will never know you wanted to talk with him, as the
interceptor will do all the talk. Eventually the interceptor will even
start a discussion about the same topic with B, then you are spoofed. 
This is a terribly expensive way of spoofing, but it will work.

If B receives your Inquire-For-Turing-Test
B replies: Ready
A receives this.

There your test starts:

A: H1=H(Q1,Akey,R1)
			    B: H2=H(Q2,Bkey,R2,H1)
A: Q1,Akey,R1,H3=H(Q3,H2)
			    B: Q2,Bkey,R2,H4=H(A1,Q4,H3)    * encrypt with Akey
A: Q3,H5=H(A2,Q5,H4)                                        * encrypt with Bkey
			    B: A1,Q4,H6=H(A3,Q6,H5)
A: A2,Q5,H7=H(A4,Q7,H6)
			    B: A3,Q6,H8=H(A5,Q8,H7)
A: A4,Q7,H9=H(A6,Q9,H8)
			    B: A4,Q8,H10=H(A7,Q10,H9)
A: Trust,H(H10,R2)
                            B: Trust,H(H9,R1)

Ri are random numbers
Hi are computed hashes
Qi are Questions
Ai are replies to Qi
Akey and Bkey are the public keys.

Above scheme means: A computes Hash on (Q1,Akey,R1) remembers it as H1 and sends
it to B. B replies with it's H2. A sends Q1,Akey,R1,H3. B ckecks against H1
and if ok replies with (etc etc)...
A and B will start encrypting with the given Public Key as soon as
possible. Just to hinder listening machines to gain samples of
Turing-Tests which could be used for a play-back. 
I have included Random Data in the first two hashes, to make sure, no
machine can GUESS what Question A poses for the Turing-Test. (If the machine
would guess the first question correctly, and there were no random-data,
the machine could successfully introduce itself in the protocol.)
For the same reason, the last Hash is usually included in the next hash
so that the chain of Questions&Answers can not be broken. I don't know
if inclusion of the initial Ri is really needed at the end of the discussion,
where Trust is granted, but it pleases my inner eye :-)

Now, Mr. Crowley, did I get your idea right, or have I complicated/
simplified it to much ?

We should look at the nature of the Qi and Ai. If the test is
designed for two humans to find out, if the other end is human too,
it will be a Turing test.
But would it be possible to design a test which would allow two machines
to find out, if there is a human spoofer in the middle ? Kind of
Anti-Turing test ? If anybody could figure out something like this,
would an Anti-Turing test be able to help us here ?
Just finding out that there is no machine in the middle, and finding
out that there is no human in the middle, would be an intriguing idea :_))

For the Turing test: I compare the Turing Test with the Usage of a Protocol
which two humans can use, but a machine and a human can not use successfully
to communicate.

If you make the Qi and Ai above digital samples of voice, mixed with quite
an amount of noise, no machine would be, at current state-of-the-art 
be able to understand the Questions. But the human brain (at the other side)
could filter out the noise, understand, and reply in the same form)

Easier to do, than a pure Turing-Test, which could be quite annoying, in it's
complexity :-)

Glad to hear comments!

	Germano Caronni
-- 
Instruments register only through things they're designed to register.
Space still contains infinite unknowns.

Germano Caronni    caronni@nessie.cs.id.ethz.ch
