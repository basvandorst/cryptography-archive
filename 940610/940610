From jefft@netcom.com  Fri Jun 10 09:27:17 1994
Received: from netcom.com (netcom2.netcom.com) by scss3.cl.msu.edu (4.1/4.7)  id AA05967; Fri, 10 Jun 94 09:27:17 EDT
Received: by netcom.com (8.6.8.1/SMI-4.1/Netcom)
	id GAA09240; Fri, 10 Jun 1994 06:27:32 -0700
Date: Fri, 10 Jun 1994 06:27:32 -0700
From: jefft@netcom.com (Jeff Thompson)
Message-Id: <199406101327.GAA09240@netcom.com>
To: ripem-dev@ripem.msu.edu
In-Reply-To: <9406100037.AA06068@MIT.EDU> (raylau@MIT.EDU)
Subject: Re: RIPEM cert chain question


> How would you logistically accomplish this since a certificate only has
> an issuer DN and not an issuer pubkeyinfo?  (I think my recollection
> is correct.)

The RIPEM database looks up by common name, since that's what's in the
Username: field in the public key file.  If I start with the
certificate for the third party and try to select the certificate for
the issuer (you), I will get the certificate I made for you with your
new address since it still has the same common name.  I would in fact
have to put extra code in to reject this one.  As it is, I would
simply use the public key in the certificate I made for you and verify
the signature on the certificate you made for the third party.  (Then
I would use my own public key to verify the certificate I made for you
and the chain is complete.)

- Jeff
From jefft@netcom.com  Fri Jun 10 09:36:27 1994
Received: from netcom.com (netcom7.netcom.com) by scss3.cl.msu.edu (4.1/4.7)  id AA06000; Fri, 10 Jun 94 09:36:27 EDT
Received: by netcom.com (8.6.8.1/SMI-4.1/Netcom)
	id GAA12424; Fri, 10 Jun 1994 06:36:41 -0700
Date: Fri, 10 Jun 1994 06:36:41 -0700
From: jefft@netcom.com (Jeff Thompson)
Message-Id: <199406101336.GAA12424@netcom.com>
To: ripem-dev@ripem.msu.edu
In-Reply-To: <199406101327.GAA09240@netcom.com> (jefft@netcom.com)
Subject: Re: RIPEM cert chain question


Another way to state my cert chain question is, if we could identify
the issuer of a certificate simply by public key (not DN), would we?
The certificate is supposed to vouch for the subject public key and
subject DN, not the issuer DN.  If the issuer changes their name 87
times since when they make a certificate for someone, what do I care,
as long as they have the same keypair?  All I care is that I have a
certificate which says the issuer's public key is still trustworthy,
and so I trust them to make a certificate for the third party.

- Jeff
From raylau@MIT.EDU  Fri Jun 10 11:19:45 1994
Received: from MIT.EDU (ATHENA-AS-WELL.MIT.EDU) by scss3.cl.msu.edu (4.1/4.7)  id AA06151; Fri, 10 Jun 94 11:19:45 EDT
Received: from PRIMAVERA.MIT.EDU by MIT.EDU with SMTP
	id AA04072; Fri, 10 Jun 94 11:19:45 EDT
From: raylau@MIT.EDU
Received: by primavera.MIT.EDU (5.57/4.7) id AA18048; Fri, 10 Jun 94 11:19:42 -0400
Message-Id: <9406101519.AA18048@primavera.MIT.EDU>
To: ripem-dev@scss3.cl.msu.edu
Subject: Re: RIPEM cert chain question 
In-Reply-To: Your message of Fri, 10 Jun 94 09:27:25 -0400.
             <199406101327.GAA09240@netcom.com> 
Date: Fri, 10 Jun 94 11:19:42 EDT

I forgot about the looking up by CN part...  I wonder, how much does
performance degrade when you have multiple certs with the same CN?

In any case, I don't think certifications should remain valid after a
DN change mainly because, as David suggests, DNs denote more than
identities but roles as well.  Thus a revocation of a certain DN should
filter downwards...

 -Ray
From strnlght@netcom.com  Fri Jun 10 12:06:46 1994
Received: from netcom.com (netcom11.netcom.com) by scss3.cl.msu.edu (4.1/4.7)  id AA06253; Fri, 10 Jun 94 12:06:46 EDT
Received: by netcom.com (8.6.8.1/SMI-4.1/Netcom)
	id JAA01237; Fri, 10 Jun 1994 09:07:01 -0700
From: strnlght@netcom.com (David Sternlight)
Message-Id: <199406101607.JAA01237@netcom.com>
Subject: Re: RIPEM cert chain question
To: ripem-dev@ripem.msu.edu
Date: Fri, 10 Jun 1994 09:07:00 -0700 (PDT)
In-Reply-To: <199406101336.GAA12424@netcom.com> from "Jeff Thompson" at Jun 10, 94 09:36:31 am
Reply-To: david@sternlight.com
X-Mailer: ELM [version 2.4 PL23]
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Content-Length: 2434      

Jeff restates:> 
> 
> Another way to state my cert chain question is, if we could identify
> the issuer of a certificate simply by public key (not DN), would we?
> The certificate is supposed to vouch for the subject public key and
> subject DN, not the issuer DN.  If the issuer changes their name 87
> times since when they make a certificate for someone, what do I care,
> as long as they have the same keypair?  All I care is that I have a
> certificate which says the issuer's public key is still trustworthy,
> and so I trust them to make a certificate for the third party.

This is an issue that makes one's head hurt because there are so many
ramifications: change of certifier (distinguished) name but not role; change
of role but not name; change of both name and role. It also involves where
you put the onus for the continued validity or the invalidation of the
certificates and from what date; whether you make the user get new
certificates just because a DN changed or not, whether the DN was
web-of-trust to an individual or a corporate identity, etc.

I started to think about the permutations when I realized that the only
mechanical protection in the system is the key server. Whether it's RSADSI
and all the owners of its certification hardware, or IPRA-wide, RSADSI will
not certify another key to a DN that still has a valid key. They will add
DNs to a key IF they are properly authenticated, but that's it.

Thus the "protection" built into the certification system (at least for
RSADSI-type certificates) is the DN, not the key. Though in theory it won't
happen because RSA isn't suppost to be able to generate the same key twice
with commonly used key lengths, if it did RSADSI would certify the same key
to two entirely different DNs. Thus the certification system has protection
against two different users with the same DN, but none against two different
users (certifierrs) with the same key pair. Ripem should be consistent with
that--then the issues of DN changes, etc. are left where they  belong--with
the certification authorities and the users, not with Ripem.

In addition, a user wants to see ripem say that such and such is certified
by (say) the RSADSI Persona Heirarchy, not by key 0xf3gnoiwhatever. So Ripem
has to get and display the DN anyway, and the way it works internally should
be consistent with the impression it is giving the user--that the
"certifier" is the DN, not the key.

David
From strnlght@netcom.com  Fri Jun 10 12:44:54 1994
Received: from netcom.com (netcom11.netcom.com) by scss3.cl.msu.edu (4.1/4.7)  id AA06357; Fri, 10 Jun 94 12:44:54 EDT
Received: by netcom.com (8.6.8.1/SMI-4.1/Netcom)
	id JAA07752; Fri, 10 Jun 1994 09:45:07 -0700
From: strnlght@netcom.com (David Sternlight)
Message-Id: <199406101645.JAA07752@netcom.com>
Subject: Re: RIPEM cert chain question
To: ripem-dev@ripem.msu.edu
Date: Fri, 10 Jun 1994 09:45:05 -0700 (PDT)
Reply-To: david@sternlight.com
X-Mailer: ELM [version 2.4 PL23]
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Content-Length: 4006      

By the way, in case it's not clear from the context, when in my last message
I said:

I started to think about the permutations when I realized that the only
mechanical protection in the system is the key server.

What I meant was

..the only mechanical protection in the system is the certifying hardware
and software, and subsequently the kind of key server Mark Riordan runs,
where the certification authority won't issue a new/second certificate to a
(lower-level certifier's) existing DN which already has a valid certificate,
nor a (certifier's) key accepted for storage on a server for a DN already
present there with a valid key

unless first the holder of the key for that DN cancels the old key with a
valid signature.

Thus the protection in that system is via DN, not key, and Ripem should be
consistent with that. Until a DN-key relationship is revoked, it is the
certifier's DN that "counts" to the user. If it changes, the certifier can
and should register the old key with the new DN if it is changed for
administrative, not substantive reasons. Ripem should not "help out" the
user by recognizing the certifier's key as valid if the DN changes. It is up
to the holder of the old DN to either leave it with the old key as still
valid, or cancel it, if the DN change means a role change. Ripem MUST NOT
assume anything about this.

Thus it is both conceivable and permissible by the Certification authorities
and the key servers that a partcular key pairin the certification heirarchy
might have more than one DN associated with it. It is not mechanically
permitted (at least under the RSADSI PCA rules and the Riordan key server
rules) for the same (certifier's) DN to have more than one key.

Contradictions get resolved by the holder of the certifying key's actions
with respect to the certifier of THAT key, and by the key server's handling
of keys, and ultimately by the user, and should not be handled by Ripem.
Since the system prevents two keys for the same DN (if we're talking DN's
now, not user names) this won't occur as a problem for Ripem. But the system
permits two DNs with the same key, and if Ripem intervened with this, it
would cause needless headaches.

If the PKCS/RFC certification model is combined with web-of-trust in Ripem
it is, of course possible for a web-of-trust certifier (signer) to try to
have more than one key for the same user name (DN). This should be
considered a violation, for consistency with both the PKCS/RFC model and
also for common sense reasons. It is already the way, in effect, Mark
Riordan's key server works, as I understand it.

If the PGP crowd wants to do this more loosely, that's their business, but
should not affect Ripem's common sense here. In fact, though, as I recall
the existing web of PGP key servers won't take a second key for the same
user name without first having the first revoked. Ripem's treatment of its
own data base (the public key file) should be consistent with this. An
attempt to store a second key under the same user name or DN should be
refused until the earlier key is revoked/cancelled/removed.

It is too great a threat to the integrity of certificates/signatures to
loosen this to permit users to have more than one key for the same
DN/Username (when I say Username I mean in those cases where the Username IS
the DN because one is simulating heirarchical certificates with web-of-trust
identifiers).

Finally, in the case where we are moving away from key servers, one's public
key file becomes one's key server. The above arguments all apply. Two
different keys on the same DN/User Name (recall that a certifier's key is
just another key in the public key file as far as Ripem is concerned) should
be regarded as an error, not permitted if a new key is being entered, and
the user forced to purge one or another if he entered this contradiction by
hand with an editor.

I hope my thinking, and my exposition here is clear and I haven't overlooked
anything material. This is a tricky subject.

David

