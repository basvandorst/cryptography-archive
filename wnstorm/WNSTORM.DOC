==========================================================================
                         White Noise Storm (tm)
          
          Copyright (C) 1992,1993,1994 by Ray (Arsen) Arachelian
          All Rights Reserved, General Technical Data Restricted.

==========================================================================
          
Software License:

          This software is subject to the following license. Any use
          or  distribution of this  software indicates  agreement to
	  this license.

          This  software may  be  freely  distributed  by  any means,
          on any media as long  as it is distributed  completly along 
          with all its supporting files (documentation, etc.) without 
          modifications.   This  program may  not be sold, in part or
          whole without the express permission of the author, however 
          the media on which this program  is distributed may be sold
          (as in a  shareware collection, etc.)  as long as no  money
          is  specifically charged for this software.  This  software
          is hereby  distributed  as freeware and no shareware fee is
          requested for its use.

          Due to ITAR export  restrictions on cryptographic software,
          this software may not be exported out of the  United States
          of  America  until  such  time  as  these restrictions  are
          removed.

          Modifications of this program may be distributed so long as
          the  copyright notices  are left  intact, and the  modified
          version(s) of this software are marked as such.  The author
          of this  software retains  the  copyright and all rights to
          any modified  version of  this software.  Modifications  of
          this software are not copyrightable by others.

          The source code of this  program may not be included in any
	  other  software  packages, in  part  or whole  without  the
          expressly written authorization of the author.  Please feel
          free to  contact the author  if you would like  to use this
          code in your programs.

          The  author is not  resposible  for any damage(s) or losses
	  occuring  from  the  use  of this  product, or  any  errors
	  contained  within  this software and/or its  documentation.
	  This program is distributed "as is" and the user uses it at
	  their own risk.   The use of this software is not protected
	  by warranties, implied or expressly stated.   Nor  is  this
	  software guaranteed for a fitness to a purpose.

	  The names "White Noise Storm" and "WNSTORM" are trade marks
	  of the  author refrerring to this software.  Any commercial
	  products  mentioned in this software and this  document may
	  be trademarks, copyrighted, owned, etc. by their respective
	  owners.


==========================================================================

				- LICENSE -


USAGE:
=======

WNSTORM {COMMAND} PLAINTEXT CYPHERTEXT PASSKEY {OPTIONS}

The possible commands are

  E - Encrypt  (IE: WNSTORM E MYTEXT.TXT MYCRYPT.TXT "MyPasskey Phrase"


  D - Decrypt  (IE: WNSTORM E MYTEXT.TXT MYCRYPT.TXT "MyPasskey Phrase"


The Plaintext is the file pathname of the plaintext file to encryt.
The Cyphertext is the file pathname of the output file.

The Passkey is the passkey (password) to encrypt/decrypt the file
with.  If this is to contain spaces, you should put quotes around it
as shown in the examples.

The possible options are:

 -Sx Max Window Size: This option sets the maximum window size for
		      the encryption.  If you specify the -N option,
		      you must provide this option for the decryption.
		      -S5 is the default, -S3 is the minimum, -S31
		      is the maximum.  This option has a large effect
		      on the size of your cyphertext.  -S10 will give
		      you a cyphertext of approximatly five times the
		      original plaintext.

 -N  No Header:       This option implements the stealth mode which
		      removes the signature header from an encryption.
		      To decrypt a stealth mode cyphertext, you must
		      append the -N option and the -Sx option if one
		      was provided durring encryption.  Without the
		      header WNSTORM cannot know what -S option was
		      choses, though it will default to 5.

 -V  View Statistics: This option will only work for encryption, and
		      will display several screens of statistics
		      when the operation is completed.

 -T  Trace:           This option will provide a detailed channel
		      by channel trace of the bit locations as the
		      plaintext is encrypted or recovered.

 -B  BitFix:          This option will invoke a statistical bit fix
		      command that will fix up the number of 1 or 0
		      bits (and possibly their values) in a window
		      which were replaced by the cyphertext bits.
		      This option will only work for encryption.

				- USAGE 1 -



 -RF:file RND file    This option will let WNSTORM use a datafile
		      whose name is specified instead of the
		      random number function.  The file should be
		      large enough to hold all the cyphertext that
		      WNSTORM will insert in the stream.  A good
		      measure will be the size of the plaintext
		      file multiplied by the half of the maximum
		      window size specified by the -S option. This
		      option is useful for steganographic processing
		      of the lower bits of a sound, image, etc.


 -RD:dev  RNG device  This option is similar to the -RF option,
		      however instead of a file, the data is to
		      come from a device "dev".  For instance if
		      you had a random number generator attached
		      to the COM1 device that returns random
		      numbers at a rate of 2400 bps, which you'd
		      like WNSTORM to use instead of the Borland
		      C rand() function, you should use
		      -RD:COM1:2400 as an option.



Steganography is the science of hiding information in a medium where it
will not be noticed.  For instance durring WWI and WWII, it was illegal
for a childs like drawing to be mailed or passed from person to person,
because it could contain hidden meanings or symbols.  A classic example
of this is a child's drawing of a ship on water.  Since the water can
be a set of wavy broken lines, some long, some short, it can contain
Morse code!  WNSTORM is useful in aiding steganography.

For Stegonography, you will also need two programs that remove the least
significant bytes of a picture, sound or movie file, (or least significant
bits if an abundance of data is available,) and put them in a file.

You would then use that file as your source of random numbers using the
-RF:filename -N, and -Sx options.  You'd then take the cyphertext produced
by WNSTORM and inject it back into the least significant bytes (or bits) of
your picture, sound, movie, etc.  The person receiving the file would then
use the same program to extract the LSB's from the picture, sound, movie,
etc. and use WNSTORM to decrypt your hidden message.

I and possibly others, will write short remove/inject programs for various
data formats for sounds and images such as PCX, TIFF, VOX, AIFF, etc which
could be used with WNSTORM.

				- USAGE 2 -



White Noise is the name given to the sounds one would hear if he tuned in
to a radio or tv station that was not transmitting anything.  Hence
in computer terms White Noise simply means random data, not containing
any meaning what so ever.

The principle behind White Noise Storm Encryption mentioned from here
on as WNSTORM is hiding encrypted data inside a storm of random data.

The system consists of active data channels, which following a certain
formula will constantly switch themselves within a window of x characters.

The size of this window will also varry based on one of the data channels
called "command."  The command channel contains hidden commands for the
next pass.  The commands are simply decisions which change one of the
channels or the size of the command window in the next data window.

In simple English the command channel commands mean one of the below:

 For the next window, the first data channel will be xxxx
 For the next window, the second data channel will be xxxx, etc.
 For the next window, the command channel will be xxxx
 For the next window, swap the xth data channel with the yth data channel.
 For the next window, rotate, swap, interlace, the data channels.
 For the next window, the window size will be xxxx characters long.

In this version of the program, the data is recursivly encrypted.
Although the source code may not show recursion, the data is encrypted with
the password, a passkey code which is  derived from the password, the
position of the current password letter, and the past decrypted password key.

For each window, the data stream is first "seeded" with random garbage
data, the character is encrypted, the command channel is chosen, and
the encrypted character is then split up into eight data channels.  Each
of these data channels contains one bit of the plaintext character.

Since each data character is encrypted with the previous data character
as well, if decryption fails for one character, all future characters to
be decrypted will also fail, thus producing garbage.

The simple data pre-encryption scheme of encoding the text with the
passkey and the previous character may be replaced or fortified by other
formal data encryption methods such as DES, IDEA, RSA, etc.

The size of the character window, the command channel, and the data channels,
are chosen before the encryption begins, with a function called "seedpassword"
which uses the password and the passkey (which it generates based on the
password.)  Thus if a wrong password is chosen, the channels, window size,
location of the eight data channels, and future positioning of these
channels will not match, and decryption will not be possible.

			       - Theory 1 -



Further more, while the data channel bits may not overlap one another,
several of these may occupy the same byte.  For added security, the
command channel is actually the whole window, random numbers included.
The reason for this is to prevent an attack where the cyphertext is
modified bit by bit to reveal which bits are used.  In other words,
every bit in the window is used.

Thus we need at least two characters for a minimum window size to generate
a window: the eight data bit channels, the command channel.   However,
for security reasons, probability would show that if we were to use the
minimum size window, it would be fairly easy to usea brute force method
to figure out which channels do what.  Therefore the minimum window size
limit this software uses is 3 bytes, so that we allow the possibility for
the window to change between 2 and 3.

Also there is the possibility that when the window size changes, we may
have one channel (data or command) which would move outside the range of
the new window size as can be seen in figure 3, pass 4 and pass 5.  In
such a case, the command decypher code (figure 1,2) will also correct
this error by moving the channel so that it would fit within the window.

Figures 1 and 2 show block diagrams of the operations performed for
encryption and decryption.


				- Theory 2 -


============================================================================

      ENCRYPTION DIAGRAM:                   DECRYPTION DIAGRAM:

===============================     =====================================

 [ seed password &  ]                   [  seed password &   ]
 [ select channels  ]                   [  select channels   ]
	 |                                       |<-----------------+
 [ seed window with ]                   [   read window      ]      |
 [ random data      ]                            |                  |
	 |<-----------------+           [ Join data channels ]      |
 [ read a character ]       |                    |                  |
	 |                  |           [ Decrypt character  ]      ^
 [    encrypt it    ]       |                    |                  |
	 |                  |           [   Write character  ]      |
 [ split it into the]       |                    |                  |
 [  data channels   ]       ^           [  Decypher command  ]      |
	 |                  |           [  and select new    ]      ^
 [Write the window  ]       |           [channels or window  ]      |
	 |                  |           [size.               ]      |
 [Decypher command  ]       |                    |                  |
 [and select new    ]       |                    |                  |
 [channels or window]       ^                    +---------->-------+
 [size              ]       |
	 |                  |
	 +------------->----+

			     Figure 1 and 2

===========================================================================

				- Theory 3 -

===========================================================================
 Data Stream sample:  (This is a simplified fictitious example and not
 based on the actual workings of the program.)

 ===========================
 ||LEGEND:    xx - stream ||
 ||           1  - data1  ||
 ||           2  - data2  ||
 ||           3  - data3  ||
 ||     /\/\/\/\/\/\/\/\  ||
 ||           8  - data8  ||
 ===========================

Pass  DATA  STREAM                                          WinSize
---- ------------------------------------------------------ -------
 0   2 4   1  6  3 8    5     7
     xxxxxxxx xxxxxxxx xxxxxxxxx                              3
     Commands: Swap 2,6 NextWinSize=6

 1   6 4   1  2  3 8    5     7
     xxxxxxxx xxxxxxxx xxxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx   6
     Commands: Rotate bits right, NextWinSize=3

 2    6 4   1  2  3 8    5     7                              3
     xxxxxxxx xxxxxxxx xxxxxxxxx
     Commands: pick new bits, NextWinSize=5

 3    1  6       5     3           7 4         2
     xxxxxxxx xxxxxxxx xxxxxxxxx xxxxxxxx xxxxxxxx            5
     Commands: etc.


			    Figure 3

============================================================================


				- Theory 4 -


 PORTABILITY:
 ------------

 This code is written for Borland C / Turbo C, however it should be
 portable to other compilers and operating systems.

 This code can be ported over to other operating system, however on non-
 80x86 machines, the rotate functions may have to be rewritten if the
 left shift is eqivalent to divide by two instead of multiply by two.

 Assumptions ARE made about the size of a character byte being 8 bits.
 This should hopefully not be a problem as the AND operator is used
 to trim off everying but the low 8 bits (again assuming little-
 endian processor.)  Should it become a promlem, define CHAR to be int:8

 This program assumes that 1<<1 = 2 and 2>>1 =1 and that bit 0 holds
 the decimal value of 1, bit 7 holds the decimal value of 127.



 -----------------------------------------------------------------------


 Depending on what LIMITCHNL value the user chooses, this program will
 generate a coded file which is approximatly SizeOfFile*LIMITCHNL/2.

 The output of this file is in 8 bit binary.  To use it to send mail,
 you should process the output of this with uuencode, HQX, btoa, or
 some other similar 8-bit binary -> 7 bit coded ascii.


 -----------------------------------------------------------------------

 A lot of this code is arbitrarily written.  The basic premise upon
 which the arbitrary decisions I've made rely upon the functionality
 of data bits.  AND is used to trim off unwanted bits.  IE: x & 7 will
 make sure we trim off all bits so that the result will be a number
 between 0 and 7.  Sometimes a right shift operation is used to get
 at high nibbles (bits 7-4) ie:  (x>>4 & 0x0f.)  XOR is possibly one
 of the most famous and useful encryption methods.  If c=a^b, then
 b=c^a, and simultaneously a=c^b.  With XOR, you can exchange the key
 and the plaintext you wish to encrypt.  But it's operations are not
 used for encrypting only, they are used as primitive decision makers
 between chosing paths.

				- Theory 5 -


 The raison d'etre of White Noise Storm is data hiding.  This makes it
 a good program to use for steganography.

 The encryption process depends on the random number generator.  It is
 greatly emphasized that you should pick a random number generator that
 does NOT have strong idiosyncracies or a heavy bias.  Random number
 generators based on the time of day are fine, except that most of
 today's operating systems will stamp a creation date on a file.  Hence
 a random number generator based on only a clock may give out some
 information to a cryptographer, aiding him in cracking the coded text.

 Today's technology does however provide the possibility of a hardware
 random number generator based on a very small radioactive particle and
 a sensor and supporting circuitry.  Or a couple of zener diodes.

 Another method of getting random numbers is to record noise off a
 sound port, then take only some of the bits out of the noise to strip
 off 60Hz hums, redundacies, etc...

 The receiving side will be able to decrypt the coded text no matter how
 flawed or biased your random number generator is.  However if the
 RNG is very poor, you will sacrifice some of the security offered by
 this program.

 If WNSTORM is used as part of a stego system, the random number generator
 should be replaced with the actual LSB data.  Keep in mind that the data
 you feed WNS will be lost and replaced by similar data containing the
 hidden text, so the least significant bytes of your picture, sound, etc.
 should be chosen so that they are not important to the integrety of the
 image, sound, etc.

 In addition, there is code which bases the current encryption of the
 data on the previous plaintext character.  That is if you have a stream
 of text "ABCDEFGHIJKL", and you manage to decrypt the code upto "D", but
 miss E, and mistake it for a "Q", the result will be an immediate bunch
 of garbage following the ABCD.  Because of this, and the further nature
 of the algorithms employed by this encryption method, it is vital that
 your medium of transportation be secure and very reliable, for if a
 single bit is changed in the encrypted stream, the remaining file after
 the change is rendered useless and unrecoverable.

				- Theory 6 -



 The metaphore of this code is as follows.  Suppose we have a device,
 like a radio, but which uses a varying number of channels.  Sometimes
 two channels, sometimes five, sometimes nine, sometimes any number of
 channels upto a specified limit (LIMITCHNL.)   Let's further suppose
 that most of the time we will be sending random, white noise down
 these channels.  A spy wouldn't be able to make any sense of the data
 sent via these channels because they would simply be random noise.
 (Here is where a good random number generator is VITAL!)  But suppose
 that we had a way, a formula based on a password, to take only some
 pieces of that data and put them back together again.  In this way,
 we could hide valuable data within a stream of gibberish.  But if the
 spy knew this formula, he could try a brute force method with every
 password imagineable on the text until he found the correct text.

 Fortunatly for us, unlike a radio where a spy can monitor ALL
 frequencies and distinguish between them, the way White Noise Storm
 encrypts the data, there is no external way for our spy to find out
 how many channels we are using per iterration, nor which bit of
 data resides in which channel.

 Yet, we must make sure that we limit our suposed spy in his options,
 and force him to use a very large key space to prevent him from
 using brute force.  The current program accepts upto 150 characters as
 the password key.  This restriction can be easily removed.

 Furthermore, most of today's encryption methods rely on a byte level
 operation.  So let's render the spy's tools useless by taking our
 data apart into bits, and scattering the bits across our channels.
 Every once in a while, we'll swap two of the bits, and every once
 in a while we'll also either rotate all the bits to the left, or
 to the right, or do some other sort of scramble operation on them.

 Another thing, since we are using many channels of information, let's
 spread the bits across these channels.  Some of the bits might wind
 up residing in the same byte, others in other bytes, but this would
 depend on our password key.  The larger the number of channels we
 use, the more spread out our bits can be, thus the more secure our
 data can be (also, the larger the resulting cypher text.)

 There are a lot of variables here to prove a major headache to any
 cryptographer or spy.  First we have a very large key (150 chars
 or 1200 bits!)  We then have a number of data channels, which change
 for every character.  For the first plain text character we may have
 5 channels, for the next, we may have 3, for the next 6, and so on.
 The window size depends on our password.  Additionally we may
 specify an upper limit to the window size.  If we use a different
 one than the spy, he will fail.  (In a sense the window size
 limit parameter is part of the passkey.)

				- Theory 7 -


 A variable number of bytes per window is written.  That is
 if we have a limit of 5 chanels, we don't write 5 bytes for every
 iteration.  That would help give the spy too much information. If
 for a given iteration we happen to have 5 channels, we write 5
 bytes.  If we have 3, we write 3 bytes.  This way our spy cannot
 guess where one window begins or ends.

 We have eight bits of data which may reside anywhere within the
 random number window, and their values are swapped around as
 we go.  That is for each bit, our spy doesn't know it's value
 (1,2,4,8...128,) nor does he know which channel a particular bit
 may reside in.  Bit 1 may become bit 4 in the next window, and
 move from byte 6 in the window to byte 1, etc.

 To make things worse, if he makes a mistake in the begining of his
 guess, he would lose the whole text.  That is even if he were to
 guess a close passkey, the password seeding methods would prevent
 him from noticing it.

 However, our spy is not to assume that we are transferring just
 text.  To protect ourselves, we should compress that text with a
 high quality compressor such as PKZIP, ZOO, ARJ, or even better,
 a proprietary scheme that is unrecognizeable to our spy.   So
 even if he should guess the password, there's no way for him to
 know if he succeeded or not.  We may wish to strip off the headers
 from a compressor as they are a dead giveaway.

 To make matters worse for our spy, we won't waste the random noise
 that makes up the window.  We will use this random garbage in
 conjunction with the password we chose as the function for deciding
 when to swap bits, switch channel size, etc.  The reason for this
 is to prevent our spy from modifying the cypher text bit by bit to
 see which bits are unused.  In WNSTORM, all bits in a window are
 used for the commands of the next round.

 This implementation is the "public" version.  It can be modified
 in several places by replacing certain key values, and certain
 ordered operations to produce private, more secure versions which
 can only be decrypted by the same software.  (This is known as
 security through obscurity, and has its own [dis]advantages.)

 The data is not just hidden, but also encrypted. It would be fairly
 easy to insert a modified version of the DES algorithm to encode and
 decode the data before scattering it or restoring it from the stream,
 thus making this an even stronger crypto-system..

				- Theory 8 -


 There are several flaws or features (depending on your point of
 view,) which you should be aware of:


  o The encrypted data produced is many times the original size.
    However, the larger the LIMITCHANL size, the more secure your
    data is, though it would require more storage space.  Compress
    your plaintext before encrypting it.  You won't be able to
    compress the encrypted text as random numbers without patterns
    do not compress.  (Similarily, using a high power compressor
    such as a fractal compressor can tell you if an encrypted text
    has patterns in it.  The less the compression, the better the
    encryption, as less patterns are available, the less a spy has
    to go on to decrypt the stream.)

  o By default, a signature is pasted indicating that the file is
    is encrypted.  However there is a stealth mode that removes
    this header.

    In the current version, the maximum channel size is stored as
    the first byte of the stream.  This is because decoding the
    stream without knowing this value is impossible.  This value
    is >NOT< stored if the stealth mode is used.  You should use
    the stealth mode if it is possible. (Knowing the max size can
    help a statistician figure out the approximate size of the
    plaintext, and most cypher breakers will use statistics!)

  o The header (not in stealth mode) only contains the signature
    and limitchannel values.  It does not contain any CRC or
    checksum of the passkey or data.  If you enter an incorrect
    passkey you will get garbage.

  o You will need a error-free storage/transmission medium for
    for your encrypted data as any change in the encrypted stream
    will result in the total loss of data after the position where
    an error was introduced.

    A good method of sending data which is far more important to
    be kept secret than received would be to take the encrypted
    data and send it in portions by several different methods.
    By different portions, I don't mean take the 1st 20K or so
    of the file, but rather take every 1st byte in every 3 bytes
    and send that as the 1st file, every 2nd byte in that same 3
    bytes, etc...  Then send each piece by a different method.

    Since all of the data is required to decrypt any of the data
    this makes if far more difficult for a spy to enter into your
    system by the delivery routes.  Of course if the spy happens
    to be someone at the receiving site who is trusted, the data
    is jeopardized anyhow, but other precautions can also be taken.

  o Currently it is illegal to export encryption systems outside of
    the United States of America.  Since this is possibly a strong
    crypto scheme, is not exportable.


				- Theory 9 -


In conclusion, I hope that by distributing this new crypto system, that
others will help evaluate its strength and usefullness.  This documentation
was written somewhat hastily, and may be fixed up in future versions.

In the interest of spreading the use of cryptography, and ending the
ITAR restriction of cryptographic software, I am releasing this program
to the public, complete with source code.

If you are interested in cyphers please join the cypherpunks lists.  This
list is absolutely free.  All you need is a mailbox on an internet connected
system on which to receive the discussion of the list.  To subscribe to
the cypherpunks mailing list, send a message to
cypherpunks-requests@toad.com with "subscribe" as the subject.  Beware that
you will receive anywhere between forty to seventy messages a day!

You may contact me by sending internet mail at rarachel@photon.poly.edu,
sunder@intercon.com, or to RayDude@Aol.Com.

Please feel free to send any comments, suggestions, or requests via the
above addresses.

				- Conclusion -

