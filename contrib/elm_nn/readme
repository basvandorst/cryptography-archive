To integrate PGP 2.3 and above with Elm and NN:

0) Make sure the path of Perl in the first line of each of the three
files reflects the full path of this utility for your system. Also,
make sure that the EDITOR and PAGER environment variables reflect your
editor and pager of choice (vi and less will be used by default).

1) Put the files morepgp, mailpgp, and postpgp in one of the
directories on your PATH.

2) Modify your ~/.elm/elmrc file to contain the following lines:

	editor	=	mailpgp
	pager	=	morepgp

3) Modify your ~/.nn/init file to contain the following lines:

	set editor	postpgp

That's all folks! Now, each time you post a message or reply to a
message with nn, after you exit your editor, you will be asked whether
you want to sign your message. Each time you compose a private message
with elm, or reply to a message, and leave the editor, you'll be asked
whether you want to sign and/or encrypt the message. When you browse a
message, if it contains any PGP blocks, those will be properly
interpreted. When you reply to a message containing PGP blocks, you'll
have them properly decrypted and quoted in your editor.

BUGS

1) You cannot encrypt messages that you mail from nn. You can only
sign them.

2) When you reply to a PGP-encryted message, the encrypted message is
temporarily kept on the disk, which is a security hole.

3) The temporary files are not wiped out, they are just deleted.

4) The scripts are ugly, reflecting my lack of knowledge of Perl. In
fact, I don't know Perl at all; I hacked somebody else's scripts. If
you know Perl better then me, please feel free to improve the scripts
and don't forget to mail me a copy of the improved version.

I can be contacted as Vesselin Bontchev at
bontchev@fbihh.informatik.uni-hamburg.de

-------------------Changes by Greg Spencer------------------------

1) The encrypted message is no longer kept on the disk in morepgp, just
in mailpgp.  You don't need to worry about reading mail, just replying
to or composing it (you don't really need to worry much anyhow, it's
only readable by you, and only from a tmpfile in /tmp -- do you trust
your sysadmin??).  You can't get around that because elm doesn't work
that way.

2) signals are now trapped so that the scripts will clean up any
extraneous files.

3) you are automatically added to the list of people allowed to decode a
message. [V.B.: This has been removed, since it can be controlled by the
EncryptToSelf variable in config.txt.]

4) keys are automatically detected when a message is shown, and you are
asked if you would like to add them (and if you trust them, etc.).
They are also left intact in the output of the script (for no real
reason)

5) the default action (if you just hit return twice after editing) is to
sign a file but NOT encode it, since not everyone has PGP 
(unfortunatly! :-( )

6) recipients are now entered as a comma separated list, instead of blank
separated (allows multiple-word ids to be used).

7) The blocks are now labeled correctly when they come out of morepgp.

8) morepgp waits for a keypress after running pgp (but only if it runs
pgp).

9) The scripts are less ugly. :-)

I didn't touch postpgp (I don't have nn).

new environment variables:

	PGPCOMMAND 	-- place where pgp can be found
	EDITOR		-- editor to use (also looks at VISUAL)
	PREFIX		-- reply prefix (defaults to "> ")
	PGPID		-- id used find the key you use to encode
			   (also looks at SIGNATURE) [V.B.: not used]

Have Fun!

			-Greg Spencer (greg@graphics.cornell.edu)
