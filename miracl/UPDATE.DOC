MIRACL - Recent update History.

Version 3.13

    Watcom C/386 V7.0 now supported. Works with Pharlap DOS extender to give
    full 32-bit performance on 386 based PC. Up to 4 times faster.
    A fast 32-bit version of RATCALC is now also possible. See wcdoit.bat.
    Also Zortech DOS386 V2.18 compiler. Watch out for its dodgy Optimizer.
    Some concessions made to suppress warning messages output by over fussy 
    ANSI compatible compilers. In-line Turbo C assembly versions of multiply(), 
    divide(),premult() and subdiv(). Up to 2-3 times faster. This version of
    TCS.LIB now on distribution diskette.

Version 3.14

    New routine mirexit() allows tidy exit and cleanup when MIRACL routines
    are no longer needed. Flushes buffers and restores internal big 
    variables to the heap, which allows MIRACL to be re-entered via 
    a subsequent mirsys() invocation. Makes a natural C++ destructor
    function for the 'miracl' dummy type.
    Header file mirdef.haf introduced for portable use on a 32-bit 
    computer.
    Hint: For fastest inputting of Ascii text to a big number a la Public Key 
    programs, and if full width base is possible and supported, use  
    'mirsys(...,256);' initially. Now Ascii bytes may be directly input and 
    output via 'innum(x,fp);' and 'otnum(x,fp);' without a time-consuming 
    change of base. 
    IMPORTANT: The method of I/O to and from big variables has been changed.
    The global variable STROUT is no longer necessary. To redirect output to 
    OBUFF use otnum(x,NULL) or cotnum(x,NULL). To input from a string, copy
    the string to IBUFF and use innum(x,NULL) or cinnum(x,NULL). The NULL file
    pointer is now used to indicate to the I/O routines that no file accesses 
    are to be performed. This change is NOT reflected in the current manual.

Version 3.15

    Schnorr's random number generator abandoned, and replaced with faster
    BBS system in PC-SCRAMBLER, which now moves to version 4.0
    Routine lconv() renamed to lgconv() - old name causes a problem for
    SUN compiler for SPARC. Problem in bnmuldvx.any fixed - the portable 
    version wasn't as portable as we thought.

Version 3.16

    Flash random number routine frand() extracted from bnrand.c into seperate 
    module bnfrnd.c. The problem was that this routine, which isn't used in 
    any example program, was pulling flash routines into programs which only 
    required big arithmetic, making them larger than necessary.
    Very obscure bug in Turbo C assembly language code in bnarth1.c found and
    swatted.
    Major upgrade to Scrambler program, now at V5.0

Version 3.17

    Microsoft C V6.0 supported. In-line assembly feature exploited for
    faster performance. PC-Scrambler now faster/more secure as a result.

Version 3.18

    In-line assembly versions tweeked up a bit - up to 10% faster in some 
    applications. New loop-back mode in PC-SCRAMBLER V5.1
    New Chinese Remainder Thereom module bncrt.c introduced. See decode.c
    for example of use. Three new routines

    (1) bool crt_init(int np,big *m);
        where np is the number of moduli, and m is an array of big moduli.
        Returns FALSE if there is a problem.

    (2) void crt(big *rem,big x);
        Calculates the unique big x, which yield the given big remainders.

    (3) void crt_end()
        Cleans up after application of the CRT.

    Similar routines for use with 'small' moduli are in module bnscrt.c

    Also four new routines introduced to simplify conversation from big/flash 
    variables to/from null-terminated strings: instr(),otstr(),cinstr() & 
    cotstr(). For example cinstr(x,"11111111111") converts the string (treated 
    as a number to base IOBASE) to flash or big number x.

    Therefore cinnum(x,NULL) or cotnum(x,NULL) no longer necessary (or valid).
    See 3.14 above.

    NOTE: The Borland convention for C++ files and headers is now used. This 
          is not reflected in the current documentation, which uses the 
          Glockenspiel conventions.
    NOTE: bnmuldv.any and bnmuldvx.any now combined into single bnmuldv.any 
          file
    NOTE: Globals WRAP & LINE removed. They weren't very useful. WRAP is now 
          always OFF. 

    It is now possible to create a smaller, integer only (no flash 
    arithmetic) version of MIRACL by deleting the definition of MR_FLASH in 
    mirdef.h before compiling the library. This also enables larger big values 
    to be handled. See fact.c

    Also by defining MR_STRIPPED_DOWN, an even smaller library can be
    produced. This should be used only with extreme caution. See bncore.c
    All error messages are lost.

Version 3.19

    Sun SPARC processor now supported. See bnmuldv.any. 
    New example programs implement Pollard's methods for calculating discrete 
    logarithms, see kangaroo.c trap.c and index.c for details.
    Files bn*.* renamed to mr*.* - NOT documented in current manual.
    All internal globals now prefixed with mr_ or MR_ to prevent name clashes
    with User or Operating System globals.
    Also:   ERCON  renamed to  MR_ERCON
            ERNUM  renamed to  MR_ERNUM
            NTRY   renamed to  MR_NTRY

Version 3.2

    New manual. Distribution now on single 1.44 Mb diskette. Various
    tidy-ups.

Version 3.21

    Implementation of DSS - Digital Signature Standard. See files dssgen.c
    dssign.c and dssver.c for details

    NEW! - Inline 80386 assembly language in mrarth1/2 for even faster
    performance. To make use of this feature you will need (a) an 80386/80486
    based PC, and (b) Borland C++ V3.1 compiler. This compiler supports 
    generation of 386 code via its -3 switch (unlike Microsoft C++ V7.0)

    Note:
    (1) Use mirdef.hpc version of mirdef.h header to compile programs.
    (2) Use precompiled bcs386.lib version of the library, compiled from 
        bcxdoit.bat batch file.

    Try fact386.exe and rat386.exe programs, compiled in this manner. Twice as 
    fast as factor.exe and ratcalc.exe on 386 machines
    512 bit RSA signature takes 0.4 second on 33MHz 486

Version 3.22

    C++ headers reorganised. Number.h completely re-written. New files 
    big.cpp, flash.cpp and number.cpp introduced, which must be linked in
    to programs which use them. Note that Big's and ZZn's can now co-exist 
    sensibly in the same programs. Tested with Borland C++ V3.1 and Microsoft
    C++ Version 7.0. See new brent.cpp for example of use.
    See big.h for new facilities available for C++ programmers    
    
    New Chinese Remainder Thereom Class. See crt.h and crt.cpp, and see 
    decode.cpp for example of use.

Version 3.23

    New example program brick.c (and brick.cpp) implements the Brickell et al.
    method of speeding up modular exponentiation, using precomputation.
    Useful for serious implementations of the DSS.

    10% speed optimization for powmod(). See comments in mrarth3.c

    New module shs.c - implements new Secure Hashing Standard. Now
    used with dssign and dssver programs.

