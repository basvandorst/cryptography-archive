MIRACL - Bug warnings

The MIRACL library is written in standard C and has been tested on many
combinations of computer and compiler. It should work on any system which 
supports C as defined by Kernighan and Richie. The author is interested to 
hear of any problems that arise with other configurations.  

Remember - not all compilers are perfect! MIRACL already contains work-
arounds which were necessary to circumvent bugs in certain compilers. 
Some of the routines in MIRACL stretch a compiler's completeness to
the limit. 

For example Zortech C & C++ V2.0 does not convert properly from unsigned int 
to double. It thinks that (double)32768 is 32769.000(!). This would make flash 
arithmetic potentially inaccurate when used with this compiler. A work-around 
is implemented in mrdouble.c. Fixed in V2.1

In Watcom C/386 V7.0 the pow() function occasionally blows up with a spurious
Overflow range error when using the /fpi option. Use /fpc instead. This 
compiler also generates internal compiler errors when using unsigned shorts, 
and so is unsafe for use with mirdef.haf

Borland C++ V3.1 is VERY fussy about prototypes. Disable warnings, otherwise 
compilation of mrcore.c and others might fail with Too Many Warnings message. 


Some drastic bugs, however, cannot be avoided.

For example Microsoft C Version 5.0 and earlier sometimes gets the wrong
answer when dividing two unsigned longs. For example try dividing 4294967167 
by 71583361. It gets 60. The correct answer is 59. This problem makes it 
impossible to use a full-width base using this compiler with 'smalls' defined
as 'unsigned long'. This problem was fixed in version 5.1 (but think of
Star Wars - the Strategic Defence Initiative - and worry).

Lightspeed Think C V3.0 for the Apple MAC uses an incorrect prototype for the 
routine modf used in mrdouble.c. It declares it as - double modf(double,int *),
whereas it should be - double modf(double,double *). 

Zortech DOS386 (V2.18) optimizer screws up mrarth1.c. Also gives an internal
error when compiling qsieve.c. The infuriating inability of this compiler
to cast from (unsigned long) to (double) - it treats it as a conversion from
(signed long) to (double) - means that a full width base cannot be used
with flash arithmetic. Zortech are aware of this bug, but seem to be in no
hurry to fix it. Note the above fix for their 16-bit compiler won't work
for the 386 compiler. This compiler can not be recommended


Other possible problems:

When using RATCALC.EXE on an IBM PC or compatible, be sure to set up your
system to use US Code Page 437, otherwise certain graphics characters will 
appear incorrectly on the screen. See your DOS documentation for details. The 
same applies to PC-SCRAMBLER. 

Remember to include stdio.h BEFORE including miracl.h in your C programs.
Similarily include I/O libraries before big.h, number.h or flash.h in C++ 
programs. This is important as certain types (such as FILE *) need to be 
defined before the MIRACL headers are included.

In the MIRACL routines the miracl.h and mirdef.h include files are mentioned 
in angle brackets. This means the compiler should look for them in system 
directories, NOT in your directory. If they must be in your directory, edit 
all source files and change #include <miracl.h> to #include "miracl.h", and 
#include <mirdef.h> to #include "mirdef.h". 

Most user problems arise due to building the MIRACL library with the wrong
MIRDEF.H file, or by inclusion of the wrong assembly language routines
from mrmuldv.any. Be careful. Only use MIRDEF.H32 if you have both a true 32-
bit CPU AND a true 32-bit compiler. 

If for example you wish to use the pseudo-32-bit mode of operation on a 386 
based PC you will have to (1) copy MIRDEF.HPC to MIRDEF.H (2) recompile 
MIRACL.LIB using this new header, and (3) ensure that you are using the 
appropriate versions of muldiv, muldvd and muldvm from MRMULDV.ANY. The 
Microsoft 80386 versions will also work with the Zortech, and Borland 
compilers.  

If you have any other problems with MIRACL, please let us know.

DISCLAIMER

In no event will the Authors be liable to you for any damages, including 
any lost profits, lost savings or other incidental or consequential 
damages arising out of the use of or inability to use these programs, 
even if the Authors have been advised of the possibility of such damages, 
or for any claim by any other party.  

