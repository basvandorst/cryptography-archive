CRYPTMPJ.DOC
Documentation file for CRYPTMPJ.EXE.

WHAT IS CRYPTMPJ?

CRYPTMPJ is a file encryption utility written by Mike Johnson.  It uses a 16
byte key and a 16 byte initialization vector.  The algorithm is explained in
THESIS.DOC and most of the source code is in CRYPTMPJ.PAS.

LEGALITIES

The MPJ encryption algorithm is in the public domain and is free.  The program
CRYPTMPJ and this file are Copyright (C) 1988 by Michael Paul Johnson.  All
rights are reserved.  Permission is granted for these files to be posted on
bulletin boards and given away freely for trial use purposes.  It is the
responsibility of the user to determine the suitability of this program for
his/her intended use.  No liability of any sort will be assumed by the author
for any damages or loss of data resulting from the use of this program. This
program is intended to protect the privacy of data while stored or transmitted
over the phone.  Its used for any illegal activity is NOT condoned by the
author.  It is recommended that you try this program out on noncritical data
before you use it on anything important to make sure that you understand how
it works.  While I believe that this program is reliable, if you find any
bugs, please let me know by mail so that I can correct them.

REGISTRATION

If you use this program regularly, then you are required to register it by
sending $20.00 to the author at P. O. Box 1151, Longmont, CO 80502-1151.  
Registration entitles you to support by mail (not by phone) at the above
address, and to notification of any upgrades that may happen later.

I TOLD YOU SO!

WARNING:  This program encrypts files "in place" for maximum security.  This
means that if you lose or forget the key, all of Norton's and Mace's help
won't get your data back again.  Before you try this program on important
data, try it on some expendable files to make sure you understand how it
works.  If you are encrypting a file for transmission by telephone, but would
like to keep a copy in the clear on your disk, make a copy of your file(s)
first, then encrypt the copy (copies).

CAUTION:  If you accidentally encrypt or decrypt a file with the wrong key, do
the inverse operation (decrypt if you encrypted, encrypt if you decrypted)
with the same wrong key, then try again with the right key.  If you want
protection against attempted decryption with the wrong key, use CRYPTE instead.

CAUTION:  Do not shut off or reboot your computer in the middle of an
encryption or decryption.  It could render a file partially encrypted and
partially decrypted -- a difficult thing to recover from.

CAUTION:  If someone else tries to decrypt your file with a different key, the
file becomes unrecoverable unless you know the key they tried.  It is
therefore wise to back up your files often (for this as well as other reasons).

HOW TO USE CRYPTMPJ

If the above didn't scare you away, here is how to use this program.

CRYPTMPJ may be operated in either command line or interactive mode.  Either
way, the following information is required:

(1)  The key you are using.

(2)  The initialization vector you wish to use.

(3)  The name of an internal key file, if you wish to use one.

(4)  Do you want to Encrypt or Decrypt?

(5)  Which files do you want to encrypt or decrypt?

The key consists of 16 numbers from 0 to 255, separated by spaces.  These may
be entered into an ASCII text file, with a space and/or end of line between
each one.  If you are in interactive mode, they may be typed directly into the
program.  The initialization vector consists of 16 numbers in the same format. 
In the key file, they follow the key.

An example key file looks like this:
255  20  11  13 129  15 102  17  32  77  98  21  18 241 122 188
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16

The program uses the first 16 numbers in the key file to generate an internal
key.  This process takes a few minutes.  To save time when you use the same
key again, you may chose to save the internal key in an internal key file. 
Once you have done this, the internal key can be read in directly very
rapidly.  The internal key file is 40960 bytes long, and is a binary file. 
Although it is not documented in my thesis (THESIS.DOC), the internal key file
may be generated directly with a random number generator such as RANDKEY or
FASTKEY (distributed with CRYPTE, another encryption algorithm), provided that
the key file is exactly 40960 bytes long.  If you do this, you MUST use the
internal key file, since the internal key made this way probably can't be made
with a 16 byte key.

Even if you use an internal key file, you must still have a key file if you
use a non-default initialization vector.  If an internal key file is read in,
the key is not read from the key file, and may or may not match.

If you use CRYPTMPJ in a batch file, or run it from the command line, the way
to do it is:

CRYPTMPJ keyfile intkeyfile|NO E|D filespec [filespec(s)]

keyfile is the name of the key file (ASCII text file with 16 or 32 numbers
from 0 to 255, separated by spaces).  If there are 32 numbers, the
initialization vector will be read from here, otherwise the default
initialization vector will be used.

intkeyfile|NO means that you either put the file name of the internal key file
that you want to read or write here, or if you don't want to generate an
internal key file, put the word NO here.  If the internal key file exists, the
key will be read from here.

E|D means that you put the letter E to encrypt or the letter D to decrypt here.

The filespecs (one to 16 of them) contain the file names (possibly including
drive and path names) that you want to encrypt or decrypt.  The file names may
include the DOS wildcards ? and *.

For example, if ONE.KEY is the example above and ONEINT.KEY does not exist,

CRYPTMPJ A:ONE.KEY A:ONEINT.KEY E *.WK? C:\WP\*.DOC

Encrypts all worksheet files in the current directory and all document files
in the C:\WP directory with the key and initialization vector in ONE.KEY.  It
also writes the internal key into ONEINT.KEY.  Note that the keyfiles are left
on a floppy disk, which can then be removed and locked up or taken with you. 
If you then reinsert the same floppy disk (with the key files on it) and issue
the command

CRYPTMPJ A:ONE.KEY A:ONEINT.KEY D *.WK? C:\WP\*.DOC

the program reads in the key from ONEINT.KEY and the initialization vector
from ONE.KEY and uses it to decrypt the same files that were encrypted by the
last command.

KEY SELECTION

The best keys are randomly selected.  Most computer "random" functions aren't
really random, so if you want maximum security, flip a coin 128 times.  Write
down a 1 for each head and a 0 for each tail, in order.  Group the 1s and 0s
into groups of 8 bits, and convert each of those 16 binary numbers to a
decimal number.

INITIALIZATION VECTOR SELECTION

The initialzation vector may be selected randomly, or you may choose to use
the default.  Varying the initialization vector is not nearly as important to
security as varying the key, and the default is probably good enough.

KEY PROTECTION

Since the MPJ encryption algorithm is published in detail, your encrypted data
is only as secure against prying eyes as you keep the key.  If you use
encryption to protect data on your hard disk from unauthorized disclosure,
don't put your key on your hard disk.  Put it on a floppy disk and lock the
floppy disk up.  If you are using encryption to protect data from evesdropping
while sending it over phone lines, send the keys in advance, by mail -- not
over the same phone lines.

HOW SECURE IS CRYPTMPJ?

Very.  As far as I know, no one has broken it yet.  It is better than DES,
which is used by banks to protect wire money transfers.  If you find a
weakness, please let me know.

WHAT IS CRYPTMPJ FOR?

This program is designed to protect corporate proprietary data, personnel
records, and other sensitive data in the public sector (as opposed to military
& diplomatic stuff).  If you need to secure military & diplomatic stuff,
contact the NSA -- don't use this program unless they tell you to.  If you
intend use this program for good, then may God bless you.  If you intend to
use this program for any evil purpose, then may God help your adversaries.

*******************************************************************************
