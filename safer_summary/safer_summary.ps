%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% AUTHOR
%     Richard De Moliner (demoliner@isi.ee.ethz.ch)
%     Signal and Information Processing Laboratory
%     Swiss Federal Institute of Technology
%     CH-8092 Zurich, Switzerland
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.28 841.89 0 1 5 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.28 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(SAFER: Secure And Fast Encryption Routine) 147.89 761.69 T
70.87 70.87 524.41 771.02 C
70.87 109.97 521.57 757.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.21 565.68 155.91 586.95 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
1 12 Q
(PHT) 116.22 572.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.65 671.98 162.99 693.24 R
7 X
V
0 X
N
(LOG) 136.49 678.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
85.04 707.97 127.56 729.23 R
7 X
V
0 X
N
(XOR) 93.63 714.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
127.56 707.97 170.08 729.23 R
7 X
V
0 X
N
(ADD) 135.82 714.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
170.08 707.97 212.6 729.23 R
7 X
V
0 X
N
(ADD) 178.34 714.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.6 707.97 255.12 729.23 R
7 X
V
0 X
N
(XOR) 221.19 714.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
255.12 707.97 297.64 729.23 R
7 X
V
0 X
N
(XOR) 263.71 714.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
297.64 707.97 340.16 729.23 R
7 X
V
0 X
N
(ADD) 305.9 714.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
340.16 707.97 382.68 729.23 R
7 X
V
0 X
N
(ADD) 348.42 714.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
382.68 707.97 425.2 729.23 R
7 X
V
0 X
N
(XOR) 391.27 714.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
85.04 637.1 127.56 658.36 R
7 X
V
0 X
N
(ADD) 93.3 643.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
127.56 637.1 170.08 658.36 R
7 X
V
0 X
N
(XOR) 136.15 643.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
170.08 637.1 212.6 658.36 R
7 X
V
0 X
N
(XOR) 178.67 643.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.6 637.1 255.12 658.36 R
7 X
V
0 X
N
(ADD) 220.86 643.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
255.12 637.1 297.64 658.36 R
7 X
V
0 X
N
(ADD) 263.38 643.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
297.64 637.1 340.16 658.36 R
7 X
V
0 X
N
(XOR) 306.23 643.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
340.16 637.1 382.68 658.36 R
7 X
V
0 X
N
(XOR) 348.75 643.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
382.68 637.1 425.2 658.36 R
7 X
V
0 X
N
(ADD) 390.94 643.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
219.68 671.98 248.03 693.24 R
7 X
V
0 X
N
(EXP) 222.52 678.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
92.13 671.98 120.47 693.24 R
7 X
V
0 X
N
(EXP) 94.96 678.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
177.16 671.98 205.51 693.24 R
7 X
V
0 X
N
(LOG) 179.01 678.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
304.72 671.98 333.07 693.24 R
7 X
V
0 X
N
(LOG) 306.57 678.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
347.24 671.98 375.59 693.24 R
7 X
V
0 X
N
(LOG) 349.09 678.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
262.2 671.98 290.55 693.24 R
7 X
V
0 X
N
(EXP) 265.04 678.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
389.76 671.98 418.11 693.24 R
7 X
V
0 X
N
(EXP) 392.6 678.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
184.25 565.68 240.95 586.95 R
7 X
V
0 X
N
(PHT) 201.26 572.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 565.68 325.98 586.95 R
7 X
V
0 X
N
(PHT) 286.3 572.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
354.33 565.68 411.02 586.95 R
7 X
V
0 X
N
(PHT) 371.34 572.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.21 601.12 155.91 622.38 R
7 X
V
0 X
N
(PHT) 116.22 607.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
184.25 601.12 240.95 622.38 R
7 X
V
0 X
N
(PHT) 201.26 607.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 601.12 325.98 622.38 R
7 X
V
0 X
N
(PHT) 286.3 607.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
354.33 601.12 411.02 622.38 R
7 X
V
0 X
N
(PHT) 371.34 607.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.21 530.25 155.91 551.51 R
7 X
V
0 X
N
(PHT) 116.22 536.79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
184.25 530.25 240.95 551.51 R
7 X
V
0 X
N
(PHT) 201.26 536.79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 530.25 325.98 551.51 R
7 X
V
0 X
N
(PHT) 286.3 536.79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
354.33 530.25 411.02 551.51 R
7 X
V
0 X
N
(PHT) 371.34 536.79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
109.61 740.21 106.3 728.68 102.99 740.21 106.3 740.21 4 Y
V
106.3 749.94 106.3 740.21 2 L
N
152.13 740.21 148.82 728.68 145.51 740.21 148.82 740.21 4 Y
V
148.82 749.94 148.82 740.21 2 L
N
194.65 740.21 191.34 728.68 188.03 740.21 191.34 740.21 4 Y
V
191.34 749.94 191.34 740.21 2 L
N
237.17 740.21 233.86 728.68 230.55 740.21 233.86 740.21 4 Y
V
233.86 749.94 233.86 740.21 2 L
N
279.68 740.21 276.38 728.68 273.07 740.21 276.38 740.21 4 Y
V
276.38 749.94 276.38 740.21 2 L
N
322.2 740.21 318.9 728.68 315.59 740.21 318.9 740.21 4 Y
V
318.9 749.94 318.9 740.21 2 L
N
364.73 740.21 361.42 728.68 358.11 740.21 361.42 740.21 4 Y
V
361.42 749.94 361.42 740.21 2 L
N
407.24 740.21 403.94 728.68 400.63 740.21 403.94 740.21 4 Y
V
403.94 749.94 403.94 740.21 2 L
N
106.3 707.42 106.3 693.24 2 L
N
148.82 707.42 148.82 693.24 2 L
N
191.34 707.42 191.34 693.24 2 L
N
233.86 707.42 233.86 693.24 2 L
N
276.38 707.42 276.38 693.24 2 L
N
318.9 707.42 318.9 693.24 2 L
N
361.42 707.42 361.42 693.24 2 L
N
403.94 707.42 403.94 693.24 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.3 671.98 106.3 657.81 2 L
N
148.82 671.98 148.82 657.81 2 L
N
191.34 671.98 191.34 657.81 2 L
N
233.86 671.98 233.86 657.81 2 L
N
276.38 671.98 276.38 657.81 2 L
N
318.9 671.98 318.9 657.81 2 L
N
361.42 671.98 361.42 657.81 2 L
N
403.94 671.98 403.94 657.81 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.3 636.55 106.3 622.38 2 L
N
148.82 636.55 148.82 622.38 2 L
N
191.34 636.55 191.34 622.38 2 L
N
233.86 636.55 233.86 622.38 2 L
N
276.38 636.55 276.38 622.38 2 L
N
318.9 636.55 318.9 622.38 2 L
N
361.42 636.55 361.42 622.38 2 L
N
403.94 636.55 403.94 622.38 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.3 530.25 106.3 516.08 2 L
N
148.82 530.25 148.82 516.08 2 L
N
191.34 530.25 191.34 516.08 2 L
N
233.86 530.25 233.86 516.08 2 L
N
276.38 530.25 276.38 516.08 2 L
N
318.9 530.25 318.9 516.08 2 L
N
361.42 530.25 361.42 516.08 2 L
N
403.94 530.25 403.94 516.08 2 L
N
106.3 601.12 106.3 586.95 2 L
N
191.34 601.12 148.82 586.95 2 L
N
276.38 601.12 191.34 586.95 2 L
N
361.42 601.12 233.86 586.95 2 L
N
148.82 601.12 276.38 586.95 2 L
N
233.86 601.12 318.9 586.95 2 L
N
318.9 601.12 361.42 586.95 2 L
N
403.94 601.12 403.94 586.95 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.3 565.69 106.3 551.51 2 L
N
191.34 565.69 148.82 551.51 2 L
N
276.38 565.69 191.34 551.51 2 L
N
361.42 565.69 233.86 551.51 2 L
N
148.82 565.69 276.38 551.51 2 L
N
233.86 565.69 318.9 551.51 2 L
N
318.9 565.69 361.42 551.51 2 L
N
403.94 565.69 403.94 551.51 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
436.73 715.29 425.2 718.6 436.73 721.9 436.73 718.6 4 Y
V
436.73 718.6 446.46 718.6 2 L
N
436.73 644.42 425.2 647.73 436.73 651.04 436.73 647.73 4 Y
V
436.73 647.73 446.46 647.73 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(K) 453.54 714.5 T
1 9.6 Q
(1) 462.21 711.5 T
1 12 Q
(K) 453.54 643.64 T
1 9.6 Q
(2) 462.21 640.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
85.04 466.47 127.56 487.73 R
7 X
V
0 X
N
1 12 Q
(XOR) 93.63 473.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
127.56 466.47 170.08 487.73 R
7 X
V
0 X
N
(ADD) 135.82 473.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
170.08 466.47 212.6 487.73 R
7 X
V
0 X
N
(ADD) 178.34 473.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.6 466.47 255.12 487.73 R
7 X
V
0 X
N
(XOR) 221.19 473.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
255.12 466.47 297.64 487.73 R
7 X
V
0 X
N
(XOR) 263.71 473.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
297.64 466.47 340.16 487.73 R
7 X
V
0 X
N
(ADD) 305.9 473.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
340.16 466.47 382.68 487.73 R
7 X
V
0 X
N
(ADD) 348.42 473.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
382.68 466.47 425.2 487.73 R
7 X
V
0 X
N
(XOR) 391.27 473.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
436.73 473.8 425.2 477.1 436.73 480.41 436.73 477.1 4 Y
V
436.73 477.1 446.46 477.1 2 L
N
(K) 453.54 473.01 T
1 9.6 Q
(2r+1) 462.21 470.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.3 501.91 106.3 487.73 2 L
N
148.82 501.91 148.82 487.73 2 L
N
191.34 501.91 191.34 487.73 2 L
N
233.86 501.91 233.86 487.73 2 L
N
276.38 501.91 276.38 487.73 2 L
N
318.9 501.91 318.9 487.73 2 L
N
361.42 501.91 361.42 487.73 2 L
N
403.94 501.91 403.94 487.73 2 L
N
106.3 516.08 106.3 501.91 2 L
11 X
N
148.82 516.08 148.82 501.91 2 L
N
191.34 516.08 191.34 501.91 2 L
N
233.86 516.08 233.86 501.91 2 L
N
276.38 516.08 276.38 501.91 2 L
N
318.9 516.08 318.9 501.91 2 L
N
361.42 516.08 361.42 501.91 2 L
N
403.94 516.08 403.94 501.91 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
109.61 456.75 106.3 445.21 102.99 456.75 106.3 456.75 4 Y
0 X
V
106.3 466.47 106.3 456.75 2 L
N
152.13 456.75 148.82 445.21 145.51 456.75 148.82 456.75 4 Y
V
148.82 466.47 148.82 456.75 2 L
N
194.65 456.75 191.34 445.21 188.03 456.75 191.34 456.75 4 Y
V
191.34 466.47 191.34 456.75 2 L
N
237.17 456.75 233.86 445.21 230.55 456.75 233.86 456.75 4 Y
V
233.86 466.47 233.86 456.75 2 L
N
279.68 456.75 276.38 445.21 273.07 456.75 276.38 456.75 4 Y
V
276.38 466.47 276.38 456.75 2 L
N
322.2 456.75 318.9 445.21 315.59 456.75 318.9 456.75 4 Y
V
318.9 466.47 318.9 456.75 2 L
N
364.73 456.75 361.42 445.21 358.11 456.75 361.42 456.75 4 Y
V
361.42 466.47 361.42 456.75 2 L
N
407.24 456.75 403.94 445.21 400.63 456.75 403.94 456.75 4 Y
V
403.94 466.47 403.94 456.75 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
85.04 381.43 127.56 402.69 R
7 X
V
0 X
N
1 12 Q
(XOR) 93.63 387.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
127.56 381.43 170.08 402.69 R
7 X
V
0 X
N
(SUB) 137.15 387.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
170.08 381.43 212.6 402.69 R
7 X
V
0 X
N
(SUB) 179.67 387.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.6 381.43 255.12 402.69 R
7 X
V
0 X
N
(XOR) 221.19 387.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
255.12 381.43 297.64 402.69 R
7 X
V
0 X
N
(XOR) 263.71 387.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
297.64 381.43 340.16 402.69 R
7 X
V
0 X
N
(SUB) 307.23 387.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
340.16 381.43 382.68 402.69 R
7 X
V
0 X
N
(SUB) 349.75 387.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
382.68 381.43 425.2 402.69 R
7 X
V
0 X
N
(XOR) 391.27 387.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
436.73 388.76 425.2 392.06 436.73 395.37 436.73 392.06 4 Y
V
436.73 392.06 446.46 392.06 2 L
N
(K) 453.54 387.97 T
1 9.6 Q
(2r+1) 462.21 384.97 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
109.61 414.23 106.3 402.69 102.99 414.23 106.3 414.23 4 Y
V
106.3 423.95 106.3 414.23 2 L
N
152.13 414.23 148.82 402.69 145.51 414.23 148.82 414.23 4 Y
V
148.82 423.95 148.82 414.23 2 L
N
194.65 414.23 191.34 402.69 188.03 414.23 191.34 414.23 4 Y
V
191.34 423.95 191.34 414.23 2 L
N
237.17 414.23 233.86 402.69 230.55 414.23 233.86 414.23 4 Y
V
233.86 423.95 233.86 414.23 2 L
N
279.68 414.23 276.38 402.69 273.07 414.23 276.38 414.23 4 Y
V
276.38 423.95 276.38 414.23 2 L
N
322.2 414.23 318.9 402.69 315.59 414.23 318.9 414.23 4 Y
V
318.9 423.95 318.9 414.23 2 L
N
364.73 414.23 361.42 402.69 358.11 414.23 361.42 414.23 4 Y
V
361.42 423.95 361.42 414.23 2 L
N
407.24 414.23 403.94 402.69 400.63 414.23 403.94 414.23 4 Y
V
403.94 423.95 403.94 414.23 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.3 381.43 106.3 367.26 2 L
N
148.82 381.43 148.82 367.26 2 L
N
191.34 381.43 191.34 367.26 2 L
N
233.86 381.43 233.86 367.26 2 L
N
276.38 381.43 276.38 367.26 2 L
N
318.9 381.43 318.9 367.26 2 L
N
361.42 381.43 361.42 367.26 2 L
N
403.94 381.43 403.94 367.26 2 L
N
106.3 367.26 106.3 353.09 2 L
11 X
N
148.82 367.26 148.82 353.09 2 L
N
191.34 367.26 191.34 353.09 2 L
N
233.86 367.26 233.86 353.09 2 L
N
276.38 367.26 276.38 353.09 2 L
N
318.9 367.26 318.9 353.09 2 L
N
361.42 367.26 361.42 353.09 2 L
N
403.94 367.26 403.94 353.09 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.21 282.22 155.91 303.48 R
7 X
V
0 X
N
1 12 Q
(IPHT) 114.23 288.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
184.25 282.22 240.95 303.48 R
7 X
V
0 X
N
(IPHT) 199.27 288.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 282.22 325.98 303.48 R
7 X
V
0 X
N
(IPHT) 284.31 288.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
354.33 282.22 411.02 303.48 R
7 X
V
0 X
N
(IPHT) 369.35 288.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.21 317.65 155.91 338.91 R
7 X
V
0 X
N
(IPHT) 114.23 324.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
184.25 317.65 240.95 338.91 R
7 X
V
0 X
N
(IPHT) 199.27 324.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 317.65 325.98 338.91 R
7 X
V
0 X
N
(IPHT) 284.31 324.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
354.33 317.65 411.02 338.91 R
7 X
V
0 X
N
(IPHT) 369.35 324.19 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.21 246.79 155.91 268.05 R
7 X
V
0 X
N
(IPHT) 114.23 253.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
184.25 246.79 240.95 268.05 R
7 X
V
0 X
N
(IPHT) 199.27 253.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 246.79 325.98 268.05 R
7 X
V
0 X
N
(IPHT) 284.31 253.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
354.33 246.79 411.02 268.05 R
7 X
V
0 X
N
(IPHT) 369.35 253.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.3 353.09 106.3 338.91 2 L
N
148.82 353.09 148.82 338.91 2 L
N
191.34 353.09 191.34 338.91 2 L
N
233.86 353.09 233.86 338.91 2 L
N
276.38 353.09 276.38 338.91 2 L
N
318.9 353.09 318.9 338.91 2 L
N
361.42 353.09 361.42 338.91 2 L
N
403.94 353.09 403.94 338.91 2 L
N
106.3 246.79 106.3 232.61 2 L
N
148.82 246.79 148.82 232.61 2 L
N
191.34 246.79 191.34 232.61 2 L
N
233.86 246.79 233.86 232.61 2 L
N
276.38 246.79 276.38 232.61 2 L
N
318.9 246.79 318.9 232.61 2 L
N
361.42 246.79 361.42 232.61 2 L
N
403.94 246.79 403.94 232.61 2 L
N
106.3 303.48 106.3 317.65 2 L
N
191.34 303.48 148.82 317.65 2 L
N
276.38 303.48 191.34 317.65 2 L
N
361.42 303.48 233.86 317.65 2 L
N
148.82 303.48 276.38 317.65 2 L
N
233.86 303.48 318.9 317.65 2 L
N
318.9 303.48 361.42 317.65 2 L
N
403.94 303.48 403.94 317.65 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.3 268.05 106.3 282.22 2 L
N
191.34 268.05 148.82 282.22 2 L
N
276.38 268.05 191.34 282.22 2 L
N
361.42 268.05 233.86 282.22 2 L
N
148.82 268.05 276.38 282.22 2 L
N
233.86 268.05 318.9 282.22 2 L
N
318.9 268.05 361.42 282.22 2 L
N
403.94 268.05 403.94 282.22 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.65 175.37 162.99 196.63 R
7 X
V
0 X
N
(EXP) 137.49 181.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
85.04 140.49 127.56 161.75 R
7 X
V
0 X
N
(XOR) 93.63 147.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
127.56 140.49 170.08 161.75 R
7 X
V
0 X
N
(SUB) 137.15 147.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
170.08 140.49 212.6 161.75 R
7 X
V
0 X
N
(SUB) 179.67 147.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.6 140.49 255.12 161.75 R
7 X
V
0 X
N
(XOR) 221.19 147.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
255.12 140.49 297.64 161.75 R
7 X
V
0 X
N
(XOR) 263.71 147.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
297.64 140.49 340.16 161.75 R
7 X
V
0 X
N
(SUB) 307.23 147.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
340.16 140.49 382.68 161.75 R
7 X
V
0 X
N
(SUB) 349.75 147.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
382.68 140.49 425.2 161.75 R
7 X
V
0 X
N
(XOR) 391.27 147.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
85.04 211.35 127.56 232.61 R
7 X
V
0 X
N
(SUB) 94.63 217.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
127.56 211.35 170.08 232.61 R
7 X
V
0 X
N
(XOR) 136.15 217.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
170.08 211.35 212.6 232.61 R
7 X
V
0 X
N
(XOR) 178.67 217.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
212.6 211.35 255.12 232.61 R
7 X
V
0 X
N
(SUB) 222.19 217.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
255.12 211.35 297.64 232.61 R
7 X
V
0 X
N
(SUB) 264.71 217.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
297.64 211.35 340.16 232.61 R
7 X
V
0 X
N
(XOR) 306.23 217.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
340.16 211.35 382.68 232.61 R
7 X
V
0 X
N
(XOR) 348.75 217.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
382.68 211.35 425.2 232.61 R
7 X
V
0 X
N
(SUB) 392.27 217.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
219.68 175.37 248.03 196.63 R
7 X
V
0 X
N
(LOG) 221.53 181.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
92.13 175.37 120.47 196.63 R
7 X
V
0 X
N
(LOG) 93.97 181.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
177.16 175.37 205.51 196.63 R
7 X
V
0 X
N
(EXP) 180 181.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
304.72 175.37 333.07 196.63 R
7 X
V
0 X
N
(EXP) 307.56 181.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
347.24 175.37 375.59 196.63 R
7 X
V
0 X
N
(EXP) 350.08 181.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
262.2 175.37 290.55 196.63 R
7 X
V
0 X
N
(LOG) 264.05 181.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
389.76 175.37 418.11 196.63 R
7 X
V
0 X
N
(LOG) 391.61 181.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.3 210.81 106.3 196.63 2 L
N
148.82 210.81 148.82 196.63 2 L
N
191.34 210.81 191.34 196.63 2 L
N
233.86 210.81 233.86 196.63 2 L
N
276.38 210.81 276.38 196.63 2 L
N
318.9 210.81 318.9 196.63 2 L
N
361.42 210.81 361.42 196.63 2 L
N
403.94 210.81 403.94 196.63 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.3 175.37 106.3 161.2 2 L
N
148.82 175.37 148.82 161.2 2 L
N
191.34 175.37 191.34 161.2 2 L
N
233.86 175.37 233.86 161.2 2 L
N
276.38 175.37 276.38 161.2 2 L
N
318.9 175.37 318.9 161.2 2 L
N
361.42 175.37 361.42 161.2 2 L
N
403.94 175.37 403.94 161.2 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
436.73 147.81 425.2 151.12 436.73 154.43 436.73 151.12 4 Y
V
436.73 151.12 446.46 151.12 2 L
N
436.73 218.68 425.2 221.98 436.73 225.29 436.73 221.98 4 Y
V
436.73 221.98 446.46 221.98 2 L
N
(K) 453.54 147.03 T
1 9.6 Q
(1) 462.21 144.03 T
1 12 Q
(K) 453.54 217.89 T
1 9.6 Q
(2) 462.21 214.89 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
109.61 130.76 106.3 119.23 102.99 130.76 106.3 130.76 4 Y
V
106.3 140.49 106.3 130.76 2 L
N
152.13 130.76 148.82 119.23 145.51 130.76 148.82 130.76 4 Y
V
148.82 140.49 148.82 130.76 2 L
N
194.65 130.76 191.34 119.23 188.03 130.76 191.34 130.76 4 Y
V
191.34 140.49 191.34 130.76 2 L
N
237.17 130.76 233.86 119.23 230.55 130.76 233.86 130.76 4 Y
V
233.86 140.49 233.86 130.76 2 L
N
279.68 130.76 276.38 119.23 273.07 130.76 276.38 130.76 4 Y
V
276.38 140.49 276.38 130.76 2 L
N
322.2 130.76 318.9 119.23 315.59 130.76 318.9 130.76 4 Y
V
318.9 140.49 318.9 130.76 2 L
N
364.73 130.76 361.42 119.23 358.11 130.76 361.42 130.76 4 Y
V
361.42 140.49 361.42 130.76 2 L
N
407.24 130.76 403.94 119.23 400.63 130.76 403.94 130.76 4 Y
V
403.94 140.49 403.94 130.76 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
467.72 346 481.89 346 488.98 339.36 488.98 246.35 496.06 239.7 488.98 233.06 488.98 140.05
 481.89 133.4 467.72 133.4 9 L
1 H
N
77.95 438.13 517.32 438.13 2 L
3 H
11 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
(one) 0 -270 507.63 214.04 TF
(round) 0 -270 507.63 237.37 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
467.72 735.76 481.89 735.76 488.98 729.12 488.98 636.11 496.06 629.47 488.98 622.82 488.98 529.81
 481.89 523.17 467.72 523.17 9 L
1 H
N
(one) 0 -270 507.63 603.8 TF
(round) 0 -270 507.63 627.13 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Encryption) 439.37 445.21 T
(Decryption) 439.37 423.95 T
70.87 70.87 524.41 771.02 C
0 0 595.28 841.89 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.28 841.89 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 14 Q
0 X
0 0 0 1 0 0 0 K
(Key Schedule) 251.73 426.97 T
1 12 Q
(For SAFER K-64 the same key scheduling is applied but with) 70.87 121.66 T
(.) 418.87 121.66 T
(Recommendations:) 70.87 101.21 T
( for SAFER K-64 and) 198.96 101.21 T
( for SAFER K-128) 345.71 101.21 T
70.87 70.87 524.41 771.02 C
70.87 466.3 524.41 759.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
413.01 702.33 455.53 723.59 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
1 12 Q
(SUB) 422.6 708.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
417.7 603.12 474.39 624.38 R
7 X
V
0 X
N
(PHT) 434.71 609.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
417.7 560.6 474.39 581.86 R
7 X
V
0 X
N
(IPHT) 432.71 567.14 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
467.06 710.96 455.53 714.26 467.06 717.57 467.06 714.26 4 Y
V
467.06 714.26 476.79 714.26 2 L
N
(k) 483.88 710.17 T
470.61 635.91 467.3 624.38 463.99 635.91 467.3 635.91 4 Y
V
467.3 645.64 467.3 635.91 2 L
N
(a) 474.39 630.27 T
1 9.6 Q
(2) 479.72 627.27 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
428.09 635.91 424.78 624.38 421.48 635.91 424.78 635.91 4 Y
V
424.78 645.64 424.78 635.91 2 L
N
1 12 Q
(a) 431.87 630.27 T
1 9.6 Q
(1) 437.2 627.27 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
470.61 593.39 467.3 581.86 463.99 593.39 467.3 593.39 4 Y
V
467.3 603.12 467.3 593.39 2 L
N
1 12 Q
(b) 474.39 587.75 T
1 9.6 Q
(2) 480.39 584.75 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
428.09 593.39 424.78 581.86 421.48 593.39 424.78 593.39 4 Y
V
424.78 603.12 424.78 593.39 2 L
N
1 12 Q
(b) 431.87 587.75 T
1 9.6 Q
(1) 437.87 584.75 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
470.61 550.87 467.3 539.34 463.99 550.87 467.3 550.87 4 Y
V
467.3 560.6 467.3 550.87 2 L
N
1 12 Q
(a) 474.39 545.23 T
1 9.6 Q
(2) 479.72 542.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
428.09 550.87 424.78 539.34 421.48 550.87 424.78 550.87 4 Y
V
424.78 560.6 424.78 550.87 2 L
N
1 12 Q
(a) 431.87 545.23 T
1 9.6 Q
(1) 437.2 542.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
(b) 389.65 520.73 T
1 9.6 Q
(1) 395.65 517.73 T
1 12 Q
( = \0502 a) 400.45 520.73 T
1 9.6 Q
(1) 431.54 517.73 T
1 12 Q
( + a) 436.34 520.73 T
1 9.6 Q
(2) 454.44 517.73 T
1 12 Q
(\051 mod 256) 459.24 520.73 T
(b) 389.65 508.73 T
1 9.6 Q
(2) 395.65 505.73 T
1 12 Q
( = \050a) 400.45 508.73 T
1 9.6 Q
(1) 422.54 505.73 T
1 12 Q
( + a) 427.34 508.73 T
1 9.6 Q
(2) 445.44 505.73 T
1 12 Q
(\051 mod 256) 450.24 508.73 T
(a) 389.65 489.98 T
1 9.6 Q
(1) 394.98 486.98 T
1 12 Q
( = \050b) 399.78 489.98 T
1 9.6 Q
(1) 422.54 486.98 T
1 12 Q
( - b) 427.34 489.98 T
1 9.6 Q
(2) 443.34 486.98 T
1 12 Q
(\051 mod 256) 448.14 489.98 T
(a) 389.65 477.98 T
1 9.6 Q
(2) 394.98 474.98 T
1 12 Q
( = \050-b) 399.78 477.98 T
1 9.6 Q
(1) 426.54 474.98 T
1 12 Q
( + 2 b) 431.34 477.98 T
1 9.6 Q
(2) 459.1 474.98 T
1 12 Q
(\051 mod 256) 463.9 477.98 T
437.58 735.13 434.27 723.59 430.96 735.13 434.27 735.13 4 Y
V
434.27 744.85 434.27 735.13 2 L
N
(x) 441.36 729.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
437.58 692.61 434.27 681.07 430.96 692.61 434.27 692.61 4 Y
V
434.27 702.33 434.27 692.61 2 L
N
(y) 441.36 686.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(y = \050x - k\051 mod 256) 404.4 665.8 T
256.4 702.33 298.92 723.59 R
7 X
V
0 X
N
(ADD) 264.66 708.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
310.45 710.96 298.92 714.26 310.45 717.57 310.45 714.26 4 Y
V
310.45 714.26 320.17 714.26 2 L
N
(k) 327.26 710.17 T
280.96 735.13 277.65 723.59 274.35 735.13 277.65 735.13 4 Y
V
277.65 744.85 277.65 735.13 2 L
N
(x) 284.74 729.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
280.96 692.61 277.65 681.07 274.35 692.61 277.65 692.61 4 Y
V
277.65 702.33 277.65 692.61 2 L
N
(y) 284.74 686.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(y = \050x + k\051 mod 256) 246.4 665.8 T
99.78 702.33 142.3 723.59 R
7 X
V
0 X
N
(XOR) 108.38 708.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
153.84 710.96 142.3 714.26 153.84 717.57 153.84 714.26 4 Y
V
153.84 714.26 163.56 714.26 2 L
N
(k) 170.65 710.17 T
124.35 735.13 121.04 723.59 117.73 735.13 121.04 735.13 4 Y
V
121.04 744.85 121.04 735.13 2 L
N
(x) 128.13 729.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
124.35 692.61 121.04 681.07 117.73 692.61 121.04 692.61 4 Y
V
121.04 702.33 121.04 692.61 2 L
N
(y) 128.13 686.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(bit-by-bit XOR) 101.38 665.8 T
124.04 560.6 152.39 581.86 R
7 X
V
0 X
N
(EXP) 126.88 567.14 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
141.52 593.39 138.21 581.86 134.91 593.39 138.21 593.39 4 Y
V
138.21 603.12 138.21 593.39 2 L
N
(x) 145.3 587.75 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
141.52 550.87 138.21 539.34 134.91 550.87 138.21 550.87 4 Y
V
138.21 560.6 138.21 550.87 2 L
N
(y) 145.3 545.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(y = 45) 92.1 520.91 T
1 9.6 Q
(x) 122.87 525.71 T
1 12 Q
( in GF\050257\051) 127.67 520.91 T
280.65 556.31 309 577.57 R
7 X
V
0 X
N
(LOG) 282.5 562.84 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
298.14 589.1 294.83 577.57 291.52 589.1 294.83 589.1 4 Y
V
294.83 598.83 294.83 589.1 2 L
N
(x) 301.92 583.45 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
298.14 546.58 294.83 535.05 291.52 546.58 294.83 546.58 4 Y
V
294.83 556.31 294.83 546.58 2 L
N
(y) 301.92 540.94 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(y = log) 237.65 519.78 T
1 9.6 Q
(45) 271.75 516.78 T
1 12 Q
(\050x\051 in GF\050257\051) 281.35 519.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(exception: EXP\050128\051 = 0) 78 506.95 T
(exception: LOG\0500\051 = 128) 233.62 506.51 T
(\050modulo-2-sum\051) 98.89 653.8 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
70.87 70.87 524.41 771.02 C
0 0 595.28 841.89 C
70.87 70.87 524.41 771.02 C
70.87 138.66 524.41 422.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
89.49 305.61 77.95 308.91 89.49 312.22 89.49 308.91 4 Y
0 X
0 0 0 1 0 0 0 K
V
113.39 308.91 89.49 308.91 2 L
0.5 H
2 Z
N
1 12 Q
(K) 81.17 317.83 T
1 9.6 Q
(2) 89.84 314.83 T
1 12 Q
(B) 124.15 389.39 T
1 9.6 Q
(i, j) 132.15 386.39 T
1 12 Q
( = EXP\050EXP\0509 i + j\051\051) 142.29 389.39 T
(i = 2, 3, .. 2r+1) 148.55 376.12 T
(j = 1, 2, .. 8) 156.93 364.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 401.04 439.37 415.21 R
7 X
V
3 H
0 X
N
(User Selected Eight-Byte-Key Ka) 272.85 404.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 188.44 439.37 202.61 R
7 X
V
0.5 H
0 X
N
(Rotate Each Byte Left by 6 Bits) 277.67 191.87 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
347.24 344.35 517.32 358.52 R
7 X
V
3 H
0 X
N
(User Selected Eight-Byte-Key Kb) 350.47 347.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
113.39 301.83 255.12 316 R
7 X
V
0.5 H
0 X
N
(Byte-by-Byte mod 256 add) 118.76 305.26 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
113.39 273.48 255.12 287.65 R
7 X
V
0 X
N
(Byte-by-Byte mod 256 add) 118.76 276.91 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
113.39 245.14 255.12 259.31 R
7 X
V
0 X
N
(Byte-by-Byte mod 256 add) 118.76 248.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
113.39 216.79 255.12 230.96 R
7 X
V
0 X
N
(Byte-by-Byte mod 256 add) 118.76 220.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
113.39 174.27 255.12 188.44 R
7 X
V
0 X
N
(Byte-by-Byte mod 256 add) 118.76 177.7 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
113.39 145.92 255.12 160.1 R
7 X
V
0 X
N
(Byte-by-Byte mod 256 add) 118.76 149.35 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 316 439.37 330.17 R
7 X
V
0 X
N
(Rotate Each Byte Left by 6 Bits) 277.67 319.43 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
347.24 287.65 517.32 301.83 R
7 X
V
0 X
N
(Rotate Each Byte Left by 6 Bits) 355.62 291.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 259.31 439.37 273.48 R
7 X
V
0 X
N
(Rotate Each Byte Left by 6 Bits) 277.67 262.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
347.24 230.96 517.32 245.14 R
7 X
V
0 X
N
(Rotate Each Byte Left by 6 Bits) 355.62 234.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
269.29 372.69 439.37 386.87 R
7 X
V
0 X
N
(Rotate Each Byte Right by 3 Bits) 274.33 376.12 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
347.24 160.1 517.32 174.27 R
7 X
V
0 X
N
(Rotate Each Byte Left by 6 Bits) 355.62 163.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
315.12 285.02 311.81 273.48 308.5 285.02 311.81 285.02 4 Y
V
311.81 316 311.81 285.02 2 L
N
474.8 344.35 474.8 337.26 325.98 337.26 318.9 344.35 304.72 344.35 297.64 337.26 255.12 337.26 7 L
N
266.65 277.26 255.12 280.57 266.65 283.88 266.65 280.57 4 Y
V
474.8 287.65 474.8 280.57 325.98 280.57 318.9 287.65 304.72 287.65 297.64 280.57 266.65 280.57 7 L
N
266.65 220.57 255.12 223.88 266.65 227.18 266.65 223.88 4 Y
V
474.8 230.96 474.8 223.88 325.98 223.88 318.9 230.96 304.72 230.96 297.64 223.88 266.65 223.88 7 L
N
266.65 149.7 255.12 153.01 266.65 156.32 266.65 153.01 4 Y
V
474.8 160.1 474.8 153.01 325.98 153.01 318.9 160.1 304.72 160.1 297.64 153.01 266.65 153.01 7 L
N
266.65 305.61 255.12 308.91 266.65 312.22 266.65 308.91 4 Y
V
311.81 308.91 266.65 308.91 2 L
N
266.65 248.91 255.12 252.22 266.65 255.53 266.65 252.22 4 Y
V
311.81 252.22 266.65 252.22 2 L
N
266.65 178.05 255.12 181.36 266.65 184.66 266.65 181.36 4 Y
V
311.81 181.36 266.65 181.36 2 L
N
311.81 188.44 311.81 181.36 2 L
N
311.81 259.31 311.81 238.05 2 L
N
315.12 214.15 311.81 202.61 308.5 214.15 311.81 214.15 4 Y
V
311.81 223.88 311.81 214.15 2 L
N
311.81 238.05 311.81 223.88 2 L
11 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
474.8 230.96 474.8 209.7 2 L
0 X
N
478.11 185.8 474.8 174.27 471.49 185.8 474.8 185.8 4 Y
V
474.8 195.53 474.8 185.8 2 L
N
474.8 209.7 474.8 195.53 2 L
11 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
478.11 313.36 474.8 301.83 471.49 313.36 474.8 313.36 4 Y
0 X
V
474.8 344.35 474.8 313.36 2 L
N
478.11 256.67 474.8 245.14 471.49 256.67 474.8 256.67 4 Y
V
474.8 287.65 474.8 256.67 2 L
N
315.12 341.71 311.81 330.17 308.5 341.71 311.81 341.71 4 Y
V
311.81 372.69 311.81 341.71 2 L
N
315.12 398.4 311.81 386.87 308.5 398.4 311.81 398.4 4 Y
V
311.81 401.04 311.81 398.4 2 L
N
186.28 323.43 184.25 316.35 182.22 323.43 184.25 323.43 4 Y
V
198.43 323.43 184.25 323.43 184.25 323.43 3 L
N
(B) 199.13 321.08 T
1 9.6 Q
(2) 207.14 318.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
186.28 295.09 184.25 288 182.22 295.09 184.25 295.09 4 Y
V
198.43 295.09 184.25 295.09 184.25 295.09 3 L
N
1 12 Q
(B) 199.13 292.74 T
1 9.6 Q
(3) 207.14 289.74 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
186.28 266.74 184.25 259.65 182.22 266.74 184.25 266.74 4 Y
V
198.43 266.74 184.25 266.74 184.25 266.74 3 L
N
1 12 Q
(B) 199.13 264.39 T
1 9.6 Q
(4) 207.14 261.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
186.28 238.39 184.25 231.3 182.22 238.39 184.25 238.39 4 Y
V
198.43 238.39 184.25 238.39 184.25 238.39 3 L
N
1 12 Q
(B) 199.13 236.04 T
1 9.6 Q
(5) 207.14 233.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
186.28 195.87 184.25 188.79 182.22 195.87 184.25 195.87 4 Y
V
198.43 195.87 184.25 195.87 184.25 195.87 3 L
N
1 12 Q
(B) 199.13 193.53 T
1 9.6 Q
(2r) 207.14 190.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
186.28 167.53 184.25 160.44 182.22 167.53 184.25 167.53 4 Y
V
198.43 167.53 184.25 167.53 184.25 167.53 3 L
N
1 12 Q
(B) 199.13 165.18 T
1 9.6 Q
(2r+1) 207.14 162.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
89.49 277.26 77.95 280.57 89.49 283.88 89.49 280.57 4 Y
V
113.39 280.57 89.49 280.57 2 L
N
1 12 Q
(K) 81.17 289.49 T
1 9.6 Q
(3) 89.84 286.49 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
89.49 248.91 77.95 252.22 89.49 255.53 89.49 252.22 4 Y
V
113.39 252.22 89.49 252.22 2 L
N
1 12 Q
(K) 81.17 261.14 T
1 9.6 Q
(4) 89.84 258.14 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
89.49 220.57 77.95 223.88 89.49 227.18 89.49 223.88 4 Y
V
113.39 223.88 89.49 223.88 2 L
N
1 12 Q
(K) 81.17 232.79 T
1 9.6 Q
(5) 89.84 229.79 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
89.49 178.05 77.95 181.36 89.49 184.66 89.49 181.36 4 Y
V
113.39 181.36 89.49 181.36 2 L
N
1 12 Q
(K) 81.17 190.28 T
1 9.6 Q
(2r) 89.84 187.28 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
89.49 149.7 77.95 153.01 89.49 156.32 89.49 153.01 4 Y
V
113.39 153.01 89.49 153.01 2 L
N
1 12 Q
(K) 81.17 161.93 T
1 9.6 Q
(2r+1) 89.84 158.93 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
89.49 333.95 77.95 337.26 89.49 340.57 89.49 337.26 4 Y
V
113.39 337.26 89.49 337.26 2 L
N
1 12 Q
(K) 81.17 346.18 T
1 9.6 Q
(1) 89.84 343.18 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
255.12 337.26 113.39 337.26 2 L
N
85.04 216.79 85.04 202.61 2 L
11 X
N
184.25 209.7 184.25 202.61 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
70.87 70.87 524.41 771.02 C
0 0 595.28 841.89 C
371.19 113.21 418.87 131.66 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
0 X
0 0 0 1 0 0 0 K
(K) 372.19 121.66 T
2 9 Q
(a) 380.65 117.46 T
2 12 Q
(K) 403.91 121.66 T
2 9 Q
(b) 412.37 117.46 T
1 12 Q
(=) 391.15 121.66 T
0 0 595.28 841.89 C
166.53 96.21 198.96 111.21 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
0 X
0 0 0 1 0 0 0 K
(r) 167.53 101.21 T
1 F
(6) 190.96 101.21 T
(=) 178.2 101.21 T
0 0 595.28 841.89 C
307.28 96.21 345.71 111.21 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
0 X
0 0 0 1 0 0 0 K
(r) 308.28 101.21 T
1 F
(1) 331.71 101.21 T
(0) 337.71 101.21 T
(=) 318.95 101.21 T
0 0 595.28 841.89 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Trailer
%%BoundingBox: 0 0 595.28 841.89
%%PageOrder: Ascend
%%Pages: 2
%%DocumentFonts: Helvetica-Bold
%%+ Times-Roman
%%+ Times-Italic
%%EOF
