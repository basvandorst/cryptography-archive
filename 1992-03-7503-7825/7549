Xref: msuinfo comp.lang.c:48941 comp.os.msdos.programmer:11804 sci.crypt:7549
Path: msuinfo!uchinews!ncar!zaphod.mps.ohio-state.edu!uakari.primate.wisc.edu!ames!haven.umd.edu!wam.umd.edu!joel
From: joel@wam.umd.edu (Joel M. Hoffman)
Newsgroups: comp.lang.c,comp.os.msdos.programmer,sci.crypt
Subject: Re: "Hiding" variables in C
Message-ID: <1992Mar4.152202.10254@wam.umd.edu>
Date: 4 Mar 92 15:22:02 GMT
References: <hr8fd90@sgi.sgi.com>
Sender: usenet@wam.umd.edu (USENET News system)
Organization: University of Maryland at College Park
Lines: 32
Nntp-Posting-Host: rac2.wam.umd.edu

In article <hr8fd90@sgi.sgi.com> rpw3@rigden.wpd.sgi.com (Rob Warnock) writes:
>amesml@monu1.cc.monash.edu.au (Mark L. Ames) writes:
>+---------------
>| I want to "hide" a variable in a C program so that it will
>| resist decompilation.
>| I'm not familiar with decompilation
>| techniques, but I have read that some machine instructions can
>| be misintrepreted when decompiling to assembler.
>+---------------
>
>Obfuscation can make it hard to find out what's going on, but not impossible.
>

A common trick is to throw a disassembler out of phase, by mixing up
data and instructions such that the disassembler thinks there's a
multi-byte command when what you really have is data+command.  I don't
have a manual handy, but it's something like this:

0000 Command-byte-1           / The disassembler thinks this is one three-
0001 Command-byte-2          <  byte command, but really it's a one-
0002 Command-byte-3           \ byte command starting at 0001

.
.
.

0100 JMP 0001

It's not foolproof, because anyone tracing the code will find the JMP,
but it works fairly against automatic disassembling.

-Joel
