Path: msuinfo!caen!spool.mu.edu!uunet!polari!rwing!eskimo!kurt
From: kurt@eskimo.celestial.com (Kurt Cockrm 762-6417)
Newsgroups: sci.crypt
Subject: Re: What is the PGP program?
Keywords: Pretty Good Privacy, GATT, wet/dry work, end/means tradeoff
Message-ID: <1992Mar27.181226.25693@eskimo.celestial.com>
Date: 27 Mar 92 18:12:26 GMT
Article-I.D.: eskimo.1992Mar27.181226.25693
References: <1992Mar25.223037.4231@percy.rain.com>
Organization: Cores 'R Us
Lines: 62

In article <1992Mar25.223037.4231@percy.rain.com> leop@percy.rain.com (Leo) writes:
>Is PGP (on a PC) the Pretty Good Privacy program, or something like
>that?  Would someone provide details of the encryption methods used
>and how secure data encrypted using this program is?
>
>Thanks!

Well, I'm no crypto/security expert (as I demonstrate below :) ), but I'll
pass on what little I know after hacking on the code for a little bit.

The program was written by Phil Zimmerman about the same time as the infamous
SB2066, the bill that would have mandated trapdoors in commercial (and free?
does anybody know?) crypto software sold in the US.

It actually uses 2 methods, because of the compute-intensiveness of
RSA;  RSA on a message of any appreciable size would take a long time.
Hence, messages are encoded/decoded using a method called "Bass-O-Matic",
a private key system.  Bass-O-Matic (BOM) keys are encrypted/decrypted using
RSA.  The BOM keys are relatively short, ensuring that RSA does not take a
long time.  The software takes a fair amount of care to wipe extraneous data
both on disk and on the stack.  Random numbers are gotten by collecting
the intervals between successive key strokes.  You can specify the grade
of encryption - casual, commercial, or military.  There are also facilities
for key management.

So it's *not* full RSA in that RSA is applied to the *whole plaintext*, but
just to the BOM key, which then encrypts/decrypts the plaintext.
This allows BOM keys to be public.

The method was named Bass-O-Matic after a Saturday Nite Live skit involving
a fish and a blender; paraphrasing a comment in the code, Bass-O-Matic does
to data what the blender did to the fish.

I saw a post (in sci.crypt, I think) recently to the effect that a number
of people in New Zealand (as I recall) were working on a port of an enhanced
PGP to unix.  Subsequently another rather ambiguous post (I think it might
have been from or concerning Phil Z) indicated that either it might *not* be
coming out [ :( ] or that it might *not* be named PGP.  I vaguely recall
that Phil said he would no longer work on PGP, but this by no means precludes
others, particularly overseas, from working on it.  I believe that it
was being done overseas in an attempt to evade US export controls and the
the RSA monopoly of Public Key Partners.  Currently, so I understand, a new
GATT agreement containing extensive revisions in the area of software patents
is being negotiated.  Let's hope it's released *before* the agreement is
finalized.

Corrections or more up-to-date information would be greatly appreciated.

As a passing observation, note that even RSA-style does not buy you total
privacy;  for example, using RSA on a multi-user system would not protect
you from the system administrator or from a cracker.  Maybe everybody here
is already aware of this, in which case I apologise.
These methods just force the bad guys to use old-fashioned "wetwork" and
"black-bag" methods which are much harder to do covertly than modern
"drywork" methods.  To the extent that the bad guys are relatively
squeamish/penurious, this is Pretty Good Protection.  Much depends on what
the plaintext is worth to the bad guys.  All *any* encryption method does
is raise the costs of acquiring the plaintext information.  How deep are
your pockets?  How squeamish are you?  Does the end justify the means?
Sorry about getting off the track :) .

kurt@grogatch.celestial.com (Kurt Cockrum)
