Path: msuinfo!caen!zaphod.mps.ohio-state.edu!qt.cs.utexas.edu!cs.utexas.edu!uunet!mcsun!uknet!acorn!abcl!ahaley
From: ahaley@abcl.co.uk (Andrew Haley)
Newsgroups: sci.crypt
Subject: Re: ZIP password cracking
Message-ID: <1215@eouk9.abcl.co.uk>
Date: 13 Mar 92 19:44:27 GMT
References: <13101@chorus.fr>
Organization: EO Computer Limited, Cambridge, UK
Lines: 58

In Message-ID: <13101@chorus.fr> jloup@nocturne.chorus.fr (Jean-Loup
Gailly) said:

> One advantage of the pkzip encryption is that it is very fast. A
> strong encryption such as DES would be significantly slower. 

I very strongly disagree about this.  The excuse about strong
encryption being slow is repeated so often that people start to
believe it.  I just made some measurements on a 1.2 Meg file: (vmunix
from a SUN-4, if anyone really wants to know.)

	PKZIP time: 15 seconds

Using PKZIP 1.93 alpha with the -es (speed) option.  This generated a
700Kbyte ZIPfile.

The fastest available DES software (SDCRYPT) was then used to encrypt
the ZIPfile:

	SDCRYPT time: 6.5 seconds.

Less than 50% extra.

> I have analyzed a little the pkzip encryption scheme and found that it
> would be actually much stronger under two conditions:

> - the password check should be removed. Extraction could be made to
>   temporary files first to avoid overwriting valid data with garbage.

This really doesn't help.  Suppose an attacker has both the plaintext
and the ciphertext; all he has to do is decrypt the first few bytes of
the file, and compare.  Then he knows the key, and can alter the
ciphertext without being detected or decrypt other files.

> - the 10 byte random header must be truly random. (See appnote.txt
>   in pkz110eu.exe for the description of this header.) In the portable
>   zip, the 'random' header is not sufficiently random, thus creating
>   a weakness. If the 'random' header is known, the encryption can be
>   broken very quickly, even with long passwords.

The only really safe way to generate cryptographically random numbers
in the absence of special hardware is to start with a random secret
seed.  This can be generated from some secret key entered by the user.
Why bother?  It's better to use straight DES (or similar) in CBC mode.
Then you don't need random numbers.

> Jean-loup Gailly jloup@chorus.fr

There are strong algorithms which are considerably faster than DES
when implemented in software.  For example, FEAL-8 (secure in CBC
mode, AFAIK, although probably not as good as DES) encrypts the above
file in about 3 seconds.  I venture (without any real proof :-) that
given any reasonable compression algorithm, encrypting the resultant
file will be considerably faster than the compression.  Let's not let
these guys off the hook on the grounds of performance; we in sci.crypt
should know better!

Andrew Haley.
