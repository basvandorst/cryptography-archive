Xref: msuinfo comp.lang.c:48901 comp.os.msdos.programmer:11762 sci.crypt:7534
Path: msuinfo!uchinews!linac!convex!darwin.sura.net!wupost!zaphod.mps.ohio-state.edu!mips!mips!munnari.oz.au!goanna!minyos.xx.rmit.oz.au!monu6!monu1.cc.monash.edu.au!amesml
From: amesml@monu1.cc.monash.edu.au (Mark L. Ames)
Newsgroups: comp.lang.c,comp.os.msdos.programmer,sci.crypt
Subject: "Hiding" variables in C
Keywords: decompilation, assembler
Message-ID: <1992Mar3.054607.21156@monu1.cc.monash.edu.au>
Date: 3 Mar 92 05:46:07 GMT
Followup-To: poster
Organization: Monash University, Australia.
Lines: 17


I want to "hide" a variable in a C program so that it will
resist decompilation. I'm not familiar with decompilation
techniques, but I have read that some machine instructions can
be misintrepreted when decompiling to assembler.

Is there some way to do this in C? I've thought of declaring a
global pointer to the variable and assigning values to it by
calls to functions that declare a set of values, XOR them and
return the result which can be used in constructing the final
value. But I don't know if all that jumping around really
achieves anything. 

The application is for 80x86 machines. The dialect is Turbo C
2.0, which supports in-line assembler.

Please reply by email -- I'll post results.
