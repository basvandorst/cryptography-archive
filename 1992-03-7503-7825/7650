Path: msuinfo!caen!spool.mu.edu!uunet!mcsun!corton!chorus!nocturne.chorus.fr!jloup
From: jloup@nocturne.chorus.fr (Jean-Loup Gailly)
Newsgroups: sci.crypt
Subject: Re: ZIP password cracking (from original poster)
Message-ID: <13101@chorus.fr>
Date: 12 Mar 92 13:36:16 GMT
Article-I.D.: chorus.13101
References: <1992Mar9.160340.9665@husc3.harvard.edu> <1k1hmhkpdh@netcom.com> <1992Mar10.124138.17989@uwm.edu>
Sender: jloup@chorus.fr
Reply-To: jloup@nocturne.chorus.fr (Jean-Loup Gailly)
Organization: Chorus systemes, Saint Quentin en Yvelines, France
Lines: 66

Phil Katz is aware of the weakness of his encryption scheme, precisely
because it was a deliberate decision. pkxarc did not allow for a quick
check of valid passwords. As a result, it was possible to extract
a file, overwriting a file on disk, and discover only at the end
that the provided password was incorrect (because of a failed CRC check).
So the valid file on disk was overwritten with garbage.

Phil has had many complaints from users about this pkxarc feature.  For
this reason, he added the password check in pkzip, which does create a
weakness in the encryption. Phil has written himself a small program which
can test 10,000 passwords a second on a 486/33, that is, about twice the
reported speed of Paul Kocher's program.  Such a program is trivial to
write. It is useless to discuss about releasing or not Kocher's program
since an equivalent program can be written in half an hour.

Phil knows this. A public release of Kocher's program would probably
not make him change his mind. His argument is that people should use
long (>10 characters) passwords.

One advantage of the pkzip encryption is that it is very fast. A
strong encryption such as DES would be significantly slower. The
encryption used in ARJ is even weaker than that of pkzip, but Robert
Jung has always been quite clear on this. Similarly, the readme file
for the portable zip encryption package (zcrypt10.zip) clearly says:

  Short passwords consisting of lower case letters only can be recovered
  in a few hours on any workstation. But for casual cryptography designed
  to keep your mother from reading your mail, it's OK.

I have analyzed a little the pkzip encryption scheme and found that
it would be actually much stronger under two conditions:

- the password check should be removed. Extraction could be made to
  temporary files first to avoid overwriting valid data with garbage.

- the 10 byte random header must be truly random. (See appnote.txt
  in pkz110eu.exe for the description of this header.) In the portable
  zip, the 'random' header is not sufficiently random, thus creating
  a weakness. If the 'random' header is known, the encryption can be
  broken very quickly, even with long passwords.

Under these conditions, I think that the fastest way to break the
encryption is exhaustive search of likely passwords. (Counterexamples are
welcome.) According to Robert Jung, the encryption scheme of arj can be
defeated much more easily.


An unrelated topic is the autoverification feature of pkzip. It is indeed
a shame that it can be defeated so easily. I don't mind a weak encryption
for my own files provided I am aware of the weakness. (I can still use
DES on the zip file afterwards if I care about the security.) But I do care
about the authenticity of files I get by ftp.

Jean-loup Gailly
jloup@chorus.fr

PS: The portable zip and its encryption package are available by anonymous
    ftp. See the comp.compression FAQ for details.

	 wuarchive.wustl.edu:/mirrors/misc/unix/zip10ex.zip
	 wuarchive.wustl.edu:/mirrors/misc/unix/unzip41.tar-z
         wuarchive.wustl.edu:/mirrors3/garbo.uwasa.fi/arcutil/zcrypt10.zip
           Non US residents must get the encryption code from garbo (see below)
	 garbo.uwasa.fi:/unix/arcers/zip10ex.zip
	 garbo.uwasa.fi:/unix/arcers/unzip41.tar.Z.
         garbo.uwasa.fi:/pc/arcutil/zcrypt10.zip  (encryption code)
