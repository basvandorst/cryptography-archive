Xref: msuinfo comp.lang.c:48931 comp.os.msdos.programmer:11798 sci.crypt:7543
Path: msuinfo!uchinews!ncar!asuvax!cs.utexas.edu!sun-barr!ames!sgi!rigden.wpd.sgi.com!rpw3
From: rpw3@rigden.wpd.sgi.com (Rob Warnock)
Newsgroups: comp.lang.c,comp.os.msdos.programmer,sci.crypt
Subject: Re: "Hiding" variables in C
Message-ID: <hr8fd90@sgi.sgi.com>
Date: 4 Mar 92 07:33:46 GMT
Sender: rpw3@rigden.wpd.sgi.com
Organization: Silicon Graphics, Inc.  Mountain View, CA
Lines: 35

amesml@monu1.cc.monash.edu.au (Mark L. Ames) writes:
+---------------
| I want to "hide" a variable in a C program so that it will
| resist decompilation.
+---------------

Good luck!  ;-}

+---------------
| I'm not familiar with decompilation
| techniques, but I have read that some machine instructions can
| be misintrepreted when decompiling to assembler.
+---------------

Obfuscation can make it hard to find out what's going on, but not impossible.

Consider this: If "some machine instructions can be misintrepreted when
decompiling" then some machine instructions can be misintrepreted when
being executed by the CPU. ...which is probably undesirable.

Conversely, if you want you program to run correctly, you will have to live
with it being interpreted correctly by a (possibly part-human) decompiler.


-Rob

p.s. The only sure-fire way to mask executable code is to have the CPU chip
itself provide internal decryption in series with the instruction-stream
fetch engine. And then you still have the problem of key distribution.

-----
Rob Warnock, MS-9U/510		rpw3@sgi.com
Silicon Graphics, Inc.		(415)335-1673
2011 N. Shoreline Blvd.
Mountain View, CA  94039-7311
