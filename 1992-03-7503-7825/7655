Xref: msuinfo comp.lang.c:49327 comp.os.msdos.programmer:12040 sci.crypt:7655
Newsgroups: comp.lang.c,comp.os.msdos.programmer,sci.crypt
Path: msuinfo!caen!zaphod.mps.ohio-state.edu!rpi!news-server.csri.toronto.edu!torsqnt!hybrid!torag!zooid!ross
From: ross@zooid.guild.org (Ross Ridge)
Subject: Re: "Hiding" variables in C
Reply-To: ross@zooid.UUCP (Ross Ridge)
Organization: The Zoo of Ids
Date: Tue, 10 Mar 1992 18:56:44 GMT
Message-ID: <1992Mar10.185644.12149@zooid.guild.org>
References: <hr8fd90@sgi.sgi.com> <1992Mar06.191513.41268@yuma.acns.colostate.edu>

>Machines to not perform a sequential scans, but rather interpret instructions
>to which they have been dispatched.  Dissassemblers (and I presume decompilers)
>can be tripped up when machine instructions don't start immediately after a
>jump or branch instruction.  If you have a sequence:
>    code-ending-in-jump-or-branch
>    funny-stuff
>    more-code
>it's non-obvious where more-code starts.  You might find the first jump
>target in more-code (unless the jump target is dynamically created in
>the code (through some indexing or look-up operation)), but the analysis
>is difficult and likely to be absent in a decompiler.

Speaking as someone who's disassembled a fair bit of code, this wouldn't
phase me at all.  Heck quite a few compilers I've used do case statments
like this. 

							Ross Ridge
-- 
Ross Ridge - The Great HTMU					     l/	 //
								    [OO][oo]
ross@zooid.guild.org						    /()\/()/
uunet.ca!torag!zooid!ross					     db	 //
