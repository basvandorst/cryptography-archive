Path: msuinfo!uchinews!ncar!elroy.jpl.nasa.gov!swrinde!mips!panasonic.com!chorus.mei!icspub!creamy!nttlab!yecl-news!sucaba!okamoto
From: okamoto@sucaba.ntt.jp (Tatsuaki OKAMOTO)
Newsgroups: sci.crypt
Subject: Comments on DSS
Message-ID: <548@sucaba.NTT.JP>
Date: 27 Feb 92 02:03:55 GMT
Sender: news@sucaba.NTT.JP
Distribution: sci
Organization: NTT Network Information Systems Laboratories, Yokosuka, Japan.
Lines: 474


FYI ---

A letter to NIST commenting on the proposed Digital Signature Standard
(DSS).

--- Tatsuaki Okamoto
NTT Laboratories.
----------------------------------------------------------------------
February 26, 1992

Director, Computer Systems Laboratory \par
ATTN: Proposed FIPS for DSS\par
Technology Building, Room B-154 \par
National Institute of Standards and Technology\par
Gaithersburg, MD 20899 \par

Dear Director:

This letter is in response to your proposal Digital Signature Standard
(DSS). It provides information about a promising DSS candidate,
that seems to be more appropriate for the national standard of
digital signatures than the proposed DSS.

A standardized algorithm should support a wide range of applications.
In particular, digital signatures will be used mainly in application 
areas involving smart cards, such as credit cards, identification cards,
and electronic cash (wallet) [3,4,5].
Therefore, if a signature scheme is selected that is inefficient 
when implemented on smart cards, then the DSS will not be used 
in these major application areas of digital signatures.

Hence, we believe that the standardized digital signature algorithm 
should be efficient when implemented on regular smart cards
with 8-bit CPU, RAM, ROM, and EEPROM.
For example, it should take less than a few seconds
for both signature generation and verification through 
software implementation on regular smart cards.
The key size should be less than a few hundred bytes
to match the memory limitation of smart cards.
Here note that signature generation should be efficient 
since it is executed on the smart card in many applications, 
and signature verification should also be efficient
since one often verifies a lot of signature messages, and mutual
authentication is useful in many applications [3,4,5], 
where the terminal and smart card check each other; 
the smart card also executes signature verification.

To our knowledge, only the signature scheme called ESIGN 
[1, 2] (see Appendix A) can satisfy these conditions.
The chief contenders including the proposed DSS are flawed 
(see Appendix B). The signature generation speed of ESIGN is 
at least ten times higher than that of the DSS, and the verification 
speed of our scheme is at least thirty times higher than that 
of the DSS.

Our software implementation of ESIGN on a regular smart card 
(8 bit microprocessor of 5 MHz, 256 bytes of RAM, and 8 Kbytes EEPROM)
ensures that the computation for signature generation takes 
less than 4 seconds. A precomputation technique can reduce 
the computation time for signature generation to less than 0.2 seconds.
The computation time for signature verification is also very fast,
less than 2 seconds on the smart card (and less than 0.1 second on a PC).  
These computation times have been reduced recently with a more 
sophisticated implementation.

Security is one of the most important factors to be considered 
for cryptographic algorithms. The quadratic version of ESIGN 
(parameter $k$ is 2) was broken by Brickell and DeLaurentis 
in 1985 ([1], page 49), several months after this signature scheme 
was originally presented. However, no attack on the higher degree 
versions ($k$ is more than 3) has been reported in the last 6 years, 
although many excellent researchers have attempted this ([1], pp.49-50).
We conjecture that to break our higher degree version (ESIGN) 
is as hard as factoring $n$ (see Appendix A, Section A4). 

To summarize, the proposed DSS is not likely to have satisfactory
properties for many smart card applications involving 
digital signatures. A national standard should be determined 
considering the major application areas of digital signatures 
such as smart card applications. ESIGN seems to be the most 
promising signature scheme for such applications.

Therefore, we recommend strongly that you consider alternatives 
to DSS that have reasonable properties for smart card applications.

Sincerely yours,


Tatsuaki Okamoto

NTT Yokosuka R \& D center, Room-309A  
1-2356, Take, Yokosuka-shi, 238-03 Japan
Tel: +81-468-59-2511
Fax: +81-468-59-3858
Email: okamoto@sucaba.ntt.jp 

References

[1] T. Okamoto, " A Fast Signature Scheme Based on 
Congruential Polynomial Operations," IEEE Transactions on Information 
Theory, Vol.36, No.1, pp.47-53 (1990)
[2] A. Fujioka, T. Okamoto, and S. Miyaguchi, 
"ESIGN: An Efficient Digital Signature Implementation for Smart Cards," 
Proceedings of Eurocrypt'91, LNCS 547, Springer-Verlag, pp.446-457 (1991)
[3] S. Even, O. Goldreich, and Y. Yacobi, 
"Electronic Wallet," Proceedings of \hfill\break Crypto'83, Plenum Press, 
pp.383-386 (1984)
[4] J.C.Kennedy and J. K. Omura, "Advanced Smart Card Prototype 
with Public Key Signature Capability and Biometric Unlock," 
Proceedings of Securetech/CardTech'91 (1991)
[5] M.Abadi, M.Burrows, C.Kaufman, and B.Lampson,
"Authentication and Delegation with Smart Cards," 
Technical Report 67, Digital Systems Research Center (1990)

Encl: Appendix A and Appendix B.

----------------->8(Cut here)------------------------>8

%This is the plain Tex file of Appendix A and B
%------------------------
\hsize=80mm
\vsize=220mm
\font\lg=cmr10 scaled \magstep1 \font\bg=cmr10 scaled \magstep3
\baselineskip14pt
\magnification \magstep1
%\nopagenumbers

\centerline{\lg Appendix A. \ (ESIGN: Efficient Digital Signature Scheme)}

\parindent 20pt

\vskip 10pt
This appendix gives a brief introduction of the efficient digital
signature scheme, ESIGN.
For more detailed information on ESIGN, see references [1,2].
\vskip 10pt
\beginsection {\bf A1. Introduction} \par
\vskip 5pt

ESIGN is an efficient digital signature scheme [1,2], and its
computation speed is much faster than that of the proposed DSS, 
while its key length and signature length are comparable to those 
of the DSS. Our software implementation of ESIGN on an 8 bit
micro-processor for smart cards yields a computation time for
signature generation of less than 4 seconds\footnote\dag{Here, parameter
$k$ is 8 (see Section A5), and the size of $n$ is 768 bits. If we use a
16 or 32 bit micro-processor, the computation time can be much shorter
than indicated above. Although a residue table technique was used
in the implementation shown in [2], no table (or memory required) 
technique is used while the performance and the required RAM size 
has been improved in our latest implementation.}.  
A pre-computation technique can reduce the computation time for signature 
generation to less than 0.2 seconds.

Moreover, this software implementation is compact enough for smart
cards; the program size is less than 3Kbytes. Practical identification
schemes based on ESIGN can be realized [2].

ESIGN is based on modular lower-degree exponential operations whose
degrees are more than three. The secret key consists of two large
prime numbers, $p$ and $q$, and the public key, $n$, is their product,
$n=p^2q$. The security of this scheme depends on the difficulty of
factoring $n$.

\vskip 10pt
\leftline{\bf A2. Notations}
\vskip 5pt

$\lceil x\rceil$ denotes the least integer which is larger than or
equal to $x$.  $f(x) \bmod n$ denotes an integer $y$ such that $n$
divides $f(x) - y$ and $0 \leq y \leq n-1$. $x/y \bmod n$ denotes an
integer $z$ such that $n$ divides $yz - x$ and $0 \leq z \leq n-1$
(this modular division can be calculated efficiently through the
extended Euclidean algorithm).  $|n|$ denotes the bit size of $n$ (or
$|n|= \lceil \log_2 n \rceil$).

\vskip 10pt
\leftline{ \bf A3. Procedures}
\vskip 5pt

\leftline{\sl (1) Keys, message and signature:}

\item{a)} {\sl Secret key:} \quad large prime numbers $p, q$  $ ( p>q )$.
\item{b)} {\sl Public key:} \quad positive integers $n = p^2q$.
\item{c)} {\sl Message:} \quad a positive integer $m$. (The size of $m$ 
can be much larger than the size of $n$).
\item{d)} {\sl Signature:} \quad an integer $s (0 \leq s \leq n-1)$.

\vskip 5pt
\leftline{\sl (2) Key generation: } 
When originator $A$ joins the system, he generates his secret and public 
keys and publishes the public key. The secret key is known only to $A$.

\leftline{\sl (3) Signature generation:}
The signature $s$ of a message $m$ is computed by originator $A$ 
as follows:

\item{a)} Pick a random number $x$ ($0 \leq x \leq pq-1$).
\item{b)} Compute the signature $s$ such that
          $$ w = \lceil (h(m)- x^k \bmod n)/(pq) \rceil, $$
          $$ y = w/(kx^{k-1}) \bmod p, $$
          $$ s = x + ypq, $$
where $h$ is a one-way hash function ($ 0 \leq h(m) \leq n-1$ for any 
positive integer $m$), $k$ is an integer ($4 \leq k$; see Section A5 
for the recommended values of $k$).      
Function $h$ and parameter $k$ can be fixed in the system. 

\vskip 5pt
\leftline{\sl (4) Signature sending:}
After generating the signature $s$, originator $A$ sends message $m$ 
along with $s$ to receiver $B$, who verifies it.

\vskip 5pt
\leftline{\sl (5) Signature verification:}
The signed message $(s, m)$ is considered valid if the below 
verification inequality  holds.
 $$ h(m)\leq s^k \bmod n < h(m) + 2^{\lceil 2|n|/3 \rceil}.$$

\vskip 10pt
\leftline{ \bf A4. Conjecture on Security}
\vskip 5pt

If the following conjecture is true, 
ESIGN is as safe as the RSA scheme or the Rabin scheme.
In particular, when $k$ is even (e.g., 8, 16, $\ldots$), 
the conjecture implies that 
breaking ESIGN is as difficult as factoring.

\parindent 0pt
{\sl Conjecture:} \quad
Problem $A$ is expected polynomial-time reducible to problem $B$.

{\sl Problem $A$:} Given three positive integers, $M$ and $n$, and $k$, 
solve $s$ which satisfies
       $$ s^k \equiv M \pmod n.$$

{\sl Problem $B$:} Given four positive integers, $M, n$, $\delta$, 
and $k$, and positive real number $\varepsilon$, 
solve $s$ which satisfies
       $$ M \leq s^k \bmod n < M +\delta,            $$
       $$ |\delta| = ({k-1 \over k} - \varepsilon) |n|. $$

\parindent 20pt
\vskip 10pt
\leftline{ \bf A5. Some Remarks on Implementation}
\vskip 5pt

\leftline{\sl (1) Parameters:}

The recommended values of $k$ are 8, 16, 32, 64, 128, 256, 512, 
and 1024\footnote\dag{When parameter $k$ is one of these recommended values, 
the computation times for signature generation are 
at most about 6 seconds, using our software implementation with 
an 8 bit micro-processor typical in smart cards. 
Moreover, when we use the pre-computation technique (see A5.(2)),
the computation time for signature generation is constant 
(e.g., 0.2 seconds) regardless of the value of $k$. }.
The sizes of $p$ and $q$ are recommended to be about 256 bits 
(then, the size of $n$ is 768 bits).

\leftline{\sl (2) Pre-computation:} 

The computation time of this algorithm seems to be fast enough for
many practical applications, as described in the above.  We can,
moreover, increase the speed of signature generation dramatically by
using pre-computation. Thus we can almost ignore the time taken for
signature generation in many applications including many anticipated 
smart card applications.

\vskip 5pt
\leftline{\sl Signature generation with precomputation:}

\item{a)} (Pre-computation) Pick a random number $x$ 
($0 \leq x \leq pq-1$).
Compute $(u, v)$ such that
          $$ u = x^k \bmod n, $$
          $$ v = 1/(kx^{k-1}) \bmod p. $$ 
\item{b)} (Signature generation) Compute signature $s$ of a message 
$m$ such that
          $$ w = \lceil (h(m)- u)/(pq) \rceil, $$
          $$ y = w\cdot v \bmod p, $$
          $$ s = x + ypq. $$

Using pre-computation, 
the computation time for signature generation is about 5 percent of 
the computation time for signature generation without pre-computation. 
That is, using our software implementation with an 8 bit micro-processor,
the computation time for pre-computation is less than 4 seconds and 
for signature generation it is about 0.2 seconds. 
Therefore, if we use pre-computation, whose running time is just 
4 seconds, before the CPU receives the message to be signed, 
then the digital signature of the message can be generated in 
0.2 seconds (effectively instantaneous for humans).
  

\vskip 10pt
\centerline{ \bf References}
\vskip 5pt

\parindent 20pt
\item{[1]} T. Okamoto, \char'134 A Fast Signature Scheme Based on 
Congruential Polynomial Operations," IEEE Transactions on Information 
Theory, Vol.36, No.1, pp.47-53 (1990)
\item{[2]} A. Fujioka, T. Okamoto, and S. Miyaguchi, \char'134 
ESIGN: An Efficient Digital Signature Implementation for Smart Cards," 
Proceedings of Eurocrypt'91, LNCS 547, Springer-Verlag, pp.446-457 (1991)


\vfill\eject

\centerline{\lg Appendix B.}
\centerline{\lg (Comparison of DSS, ESIGN, and other 
practical schemes)}

\parindent 20pt

\vskip 25pt
This appendix gives a rough comparison of the proposed DSS, ESIGN, 
and other practical signature schemes such as the RSA scheme, the 
Schnorr scheme [1], and the Micali-Shamir variant [5] of the Fiat-Shamir
scheme [2].

\vskip 5pt 

We compare the computation time of these schemes in the light of the 
required number of modular multiplications and modular inversions.
We also compare the key and signature lengths.

Let $j M(|n|)$ denote the amount of work to perform $j$ 
modular multiplications whose modulus size is $|n|$ bits,
and $j I(|n|)$ denote the amount of work to perform $j$
modular inversions whose modulus size is $|n|$ bits,
where $|n|$ denotes the bit size of $n$.    

Here, we estimate the performance based on unsophisticated 
implementations. Although several sophisticated techniques 
have been proposed to perform the modular exponent and other 
modular operations [3, 4], we can roughly compare them based on 
unsophisticated implementations, since the sophisticated techniques 
can be applied to almost all of these schemes, and some techniques 
are not appropriate for smart card implementation because of 
the large memory required for technique implementation.  

We assume that the modulus $p$ and $q$ for DSS are 512 bits
and 160 bits respectively, the modulus $n$ for RSA is 512 bits,
the modulus $p$ and $q$ for Schnorr are 512 bits and 140 bits respectively,
the modulus $n$ for Micali-Shamir is 512 bits, and the modulus $n$ 
for ESIGN is 768 bits. The security parameter for Schnorr and 
Micali-Shamir is supposed to be 72 ($k=72$ and $t=1$ for Micali-Shamir; 
$k=8$ and $d=6$ for Schnorr), $e=3$ for RSA, and $k=8$ for ESIGN.
The rough estimation of the amount of work to generate and verify
the signature of DSS, RSA, Schnorr, Fiat-Shamir, and ESIGN
is as follows:

\vskip 5pt 

\leftline{\bf Generation:}
\item{(1)} DSS: $240 M(512)^{(3)} + I(160)$.
\item{(2)} RSA: $750 M(512)^{(3)}$.
\item{(3)} Schnorr: $12M(512)^{(2)}$.
\item{(4)} Micali-Shamir: $37M(512)$.
\item{(5)} ESIGN: $3M(768) + I(256)$ $< 13M(512)^{(1),(2)}$.

\vskip 5pt

\leftline{\bf Verification:}
\item{(1)} DSS: $400 M(512)^{(3)} + I(160)$.
\item{(2)} RSA: $2M(512)^{(3)}$.
\item{(3)} Schnorr: $230M(512)$.
\item{(4)} Micali-Shamir: $2M(512)$. 
\item{(5)} ESIGN: $3M(768)$ $< 7M(512)^{(1)}$.

\vskip 5pt 

\leftline{\bf Keys (System, Public and Secret) and Signature lengths:}
\item{(1)} DSS: 1184 bits (System), 512 bits (Public), 160 bits (Secret),
                320 bits (Signature).
\item{(2)} RSA: 2 bits (System), 512 bits (Public), 512 bits (Secret), 
                512 bits (Signature).
\item{(3)} Schnorr: 1164 bits (System), 512 bits (Public), 
                    (140 + 5280) bits (Secret), 212 bits (Signature).
\item{(4)} Micali-Shamir: about 1000bits (System), 512 bits (Public), 
                          36864 bits (Secret), 584 bits (Signature).
\item{(5)} ESIGN: 2 bits (System), 768 bits (Public), 512 bits (Secret), 
                  768 bits (Signature).

\vskip 5pt
Here, the system key denotes common parameters among all users, 
and a pair of public key and secret key corresponds to each user.
That is, $(p,q,g)$ for DSS, $e$ for RSA, $(p,q, \alpha)$ for Schnorr,
$(v_1, \ldots, v_k)$ for Micali-Shamir, and $k$ for ESIGN are systems 
keys. In Schnorr, a table (5280 bits) is required to generate 
a signature and must be stored with the secret key.   
Usually the system key should be stored with the secret key 
to generate a signature. 

\vskip 5pt 

\leftline{\bf Note (1):}
Suppose that $M(b_1)= M(b_2)(b_1/b_2)^2$, and $I(b_1)= I(b_2)(b_1/b_2)^3$
and set $c=I(512)/M(512)$. Then, the signature generation of ESIGN 
requires $3M(768)+I(256)$ $ < 1.5^2\times 3 M(512) + 0.5^3 c M(512)$
$= (6.75 + 0.125 c) M(512)$. Here, since $c$ is considered less than 50, 
the signature generation of ESIGN requires at most $13 M(512)$.
On the other hand, the signature verification of ESIGN requires 
$3M(768)$ $ = 1.5^2\times 3 M(512)$ $= 6.75 M(512)$. 

\leftline{\bf Note (2):}
Pre-computation techniques can be used to reduce the
signature generation time for DSS, Schnorr and ESIGN
(see [1] for Schnorr and Appendix A for ESIGN).

Then the comparison for signature generation is as follows:

\vskip 5pt 

\leftline{\bf Pre-computation:}
\item{(1)} DSS: $240M(512)$.
\item{(2)} RSA: 0.
\item{(3)} Schnorr: $12M(512)$.
\item{(4)} Micali-Shamir: $M(512)$.
\item{(5)} ESIGN: $13M(512)$.

\vskip 5pt 

\leftline{\bf Generation:}
\item{(1)} DSS: $I(160)$.
\item{(2)} RSA: $750 M(512)$.
\item{(3)} Schnorr: almost 0.
\item{(4)} Micali-Shamir: $36M(512)$.
\item{(5)} ESIGN: almost 0.

\vskip 5pt
\leftline{\bf Note (3):}
By Kaliski's theoretical estimation [4], the performance of DSS and RSA
with more sophisticated techniques is as follows:

\vskip 3pt 

\leftline{\bf Generation:}
\item{(1)} DSS: $172.5 M(512) + I(160)$.
\item{(2)} RSA: $160M(512)$.

\vskip 3pt

\leftline{\bf Verification:}
\item{(1)} DSS: $242.2M(512) + I(160)$.
\item{(2)} RSA: $1.75M(512)$.

\vskip 10pt
\centerline{ \bf References}
\vskip 5pt

\parindent 20pt
\item{[1]} C.P. Schnorr, \char'134 Efficient Identification and 
Signatures for Smart Cards," 
Proceedings of Crypto'89, LNCS 435, Springer-Verlag, pp.239-252 (1990)
\item{[2]} A. Fiat and A. Shamir, 
\char'134 How to Prove Yourself: Practical Solutions of 
Identification and Signature Problems," 
Proceedings of Crypto'86, LNCS 263, \hfill\break 
Springer-Verlag, pp.186-194 (1987)
\item{[3]} D. Knuth, The Art  of Computer Programming, Vol. 2. Reading,
MA: Addison-Wesley, 1981.
\item{[4]} B. Kaliski, \char'134 A Letter to NIST Commenting 
on the Proposed Digital Signature Standard (DSS),''
November 4, 1991.
\item{[5]} S. Micali and A. Shamir, 
\char'134 An Improvement of the Fiat-Shamir Identification and 
Signature Scheme," 
Proceedings of Crypto'88, LNCS 403, Springer-Verlag, pp.244-247 (1990)

\bye
