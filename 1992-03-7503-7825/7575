Xref: msuinfo comp.lang.c:49079 comp.os.msdos.programmer:11876 sci.crypt:7575
Path: msuinfo!caen!zaphod.mps.ohio-state.edu!think.com!ames!decwrl!nntp1.radiomail.net!fernwood!portal!cup.portal.com!ts
From: ts@cup.portal.com (Tim W Smith)
Newsgroups: comp.lang.c,comp.os.msdos.programmer,sci.crypt
Subject: Re: "Hiding" variables in C
Message-ID: <55500@cup.portal.com>
Date: Sat,  7 Mar 92 02:35:09 PST
Organization: The Portal System (TM)
References: <hr8fd90@sgi.sgi.com> <1992Mar5.210232.3211@b11.ingr.com>

> Use self-modifying code.  Then the snooper would have to stop your program
> and examine it at the right time.  Examining the executable on disk
> would eventually uncover the self-modifying part, but would make for
> more work for the snooper.  You could have self-modifying code modify
> the code that modifies other code ....  Hmmm, maybe you could encrypt
> parts of your code too.  Then decrypt it at run-time and execute the
> decrypted version.  There too, the snooper could still figure out what
> you did.  I guess it boils down to how much work do want the snooper

One thing I've seen that can be real annoying to crack is to have most
of the code encrypted.  When the program loads, the non-encrypted part
computes the decryption key.

One of the inputs to the decryption key computation is a CRC of the
decryption code.

This means that if you stick a breakpoint at the end of the descryption
code so that you can look and see what the key is, you don't get the
right value, because the breakpoint changes the CRC!  Make sure that
the decryption algorithm loops enough times to discourage someone from
single stepping through it.

							Tim Smith
