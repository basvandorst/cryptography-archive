Path: msuinfo!caen!zaphod.mps.ohio-state.edu!pacific.mps.ohio-state.edu!linac!att!ucbvax!windsor.a92104.sai.com!mark
From: mark@windsor.a92104.sai.com (Mark Windsor)
Newsgroups: sci.crypt
Subject: Re: Phil Karn's encryption
Message-ID: <29d1d044@windsor.a92104.sai.com>
Date: 26 Mar 92 13:32:00 GMT
Sender: daemon@ucbvax.BERKELEY.EDU
Lines: 99

I got some requests for the source to the implementation I made of
the encryption algorithm described by Phil Karn here a few weeks ago.
Phil mentioned a couple of references for earlier discoveries of the
same basic idea.  I was able to look up the one in Crypto '89 (see
the comment below for the exact reference).  It uses the basic idea
of a one-way function iterated three times, but doesn't specifically
choose the MD4/MD5 functions.

Here is the source to the basic module which encrypts a 32-byte block
of data using two 48-byte keys to produce a 32-byte output.  To make
this into an actual encryption program you have to build the framework
that reads the keys and reads and writes the data.  You also need to
decide whether you will use a simple ECB mode or a CBC.  I wrote code
to do CBC but I'm not that happy with it.  I'd want to take a look
at some other examples before I would upload it.

This code relies on the library function "bcopy", which copies bytes from
its first argument to its second argument, with the number of bytes in
the third argument.  Some systems may have to change this to "memcpy"
or something similar, and possibly reverse the order of the first two
arguments.

It calls the function "Transform" to do the hashing.  This is in MD5.C
available through FTP from <rsa.com>.  You can discard the other routines
in MD5.C, since they aren't used, and you will have to remove the "static"
declaration from Transform in that module so that it can be callable from
outside.

This code has compiled and run.

---------------------- CUT HERE -----------------------
/*
 *   Karn encryption
 *	Based on Phil Karn, sci.crypt, 13 Feb 1992
 *	See also his comments from sci.crypt, 23 Mar 1992.
 *	The method is a variant of that described in
 *	Zheng, Matsumoto and Imai, Crypto 89.
 *	See also, "A New Class of Cryptosystems Based on
 *	Interconnection Networks" by
 *	michaelp@terpsichore.informatic.rwth-aachen.de
 *
 *	A method for turning a hash function, here MD5, into a fast
 *	secret-key encryption.
 *
 *	This does triple hashing with nondistinct keys.
 */

typedef unsigned long UINT4;

/* Initial values for MD5 Transform hash function */
static UINT4 ihash[4] = {
  0x67452301L, 0xefcdab89L, 0x98badcfeL, 0x10325476L };

/* MD5 hash function */
extern void Transform ();


/* Basic transform for Karn encryption.  Take two 16-byte
   half-buffers, two 48-byte keys (which must be distinct), and use
   the MD5 Transform algorithm to produce two 16-byte output
   half-buffers.

   This is reversible: If we get out1 and out2 from in1, in2, key1, key2,
   then we can get in2 and in1 from out2, out1, key1, key2.

   in1, in2, out1, and out2 should point to 16-byte buffers.
   By convention, in1 and in2 are two halves of a 32-byte input
   buffer, and out1 and out2 are two halves of a 32-byte output
   buffer.

   key1 and key2 should point to 48-byte buffers with different contents.
 */
void
karn (out1, out2, in1, in2, key1, key2)
UINT4 *out1, *out2, *in1, *in2, *key1, *key2;
{
	int	i;
	UINT4	buf[16];
	UINT4	hash[4];
	UINT4	temp[4];

	bcopy (ihash, hash, sizeof(hash));
	bcopy (in1, buf, 16);
	bcopy (key1, buf+4, 48);
	Transform (hash, buf);
	for (i=0; i<4; ++i)
		temp[i] = buf[i] = in2[i] ^ hash[i];
	bcopy (ihash, hash, sizeof(hash));
	bcopy (key2, buf+4, 48);
	Transform (hash, buf);
	for (i=0; i<4; ++i)
		out2[i] = buf[i] = in1[i] ^ hash[i];
	bcopy (ihash, hash, sizeof(hash));
	bcopy (key1, buf+4, 48);
	Transform (hash, buf);
	for (i=0; i<4; ++i)
		out1[i] = temp[i] ^ hash[i];
}
---------------------- CUT HERE -----------------------
