Xref: msuinfo comp.lang.c:49070 comp.os.msdos.programmer:11871 sci.crypt:7574
Newsgroups: comp.lang.c,comp.os.msdos.programmer,sci.crypt
Path: msuinfo!caen!sdd.hp.com!think.com!ames!sgi!rigden.wpd.sgi.com!rpw3
From: rpw3@rigden.wpd.sgi.com (Rob Warnock)
Subject: Re: "Hiding" variables in C
Message-ID: <hv2vdms@sgi.sgi.com>
Sender: rpw3@rigden.wpd.sgi.com
Organization: Silicon Graphics, Inc.  Mountain View, CA
Date: Sat, 7 Mar 1992 05:15:06 GMT

bentson@CS.ColoState.EDU (Randolph Bentson) writes:
+---------------
| rpw3@rigden.wpd.sgi.com (Rob Warnock) writes:
| >Consider this: If "some machine instructions can be misintrepreted when
| >decompiling" then some machine instructions can be misintrepreted when
| >being executed by the CPU. ...which is probably undesirable.
| Machines do not perform a sequential scans, but rather interpret instructions
| to which they have been dispatched. Dissassemblers (and I presume decompilers)
| can be tripped up when machine instructions don't start immediately after a
| jump or branch instruction.
+---------------

So who ever said a disassembler has to perform a sequential scan? The state
of the art has improve a lot over "DEBUG". There exist disassemblers and
"transliterators" (disassemble in one machine architecture and re-assemble
for another machine architecture) today which effectively do full control
and data flow analysis.

Consider simply *running* the program under a simulator or emulator, and
accumulating a table of the instructions executed.


-Rob


