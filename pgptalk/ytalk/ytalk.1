.TH YTALK 1 "8 June 1993"
.SH NAME
ytalk \- talk to another user
.SH SYNOPSIS
.B ytalk
[
.B \-s
]
[
.B \-o
.I file
]
[
.B \-w
.I width
]
[
.B \-b
.I bar
]
[
.B \-i
.I prompt
]
[
.B \-u
.I prompt
]
.I username
\&.\|.\|.
.SH DESCRIPTION
.LP
The
.B ytalk
program allows several users to chat over a network.
It works almost exactly like the
.SM UNIX
.BR talk (1)
program and even communicates with the same talk daemon(s), but
.B ytalk
allows for multiple connections.
As you experiment with or use this software,
please bear in mind that
.B ytalk
is not completely finished.
It performs every major function it is designed to perform,
and as a whole is much preferable to
.SM UNIX
.BR talk .
However, there are several more features
currently being added
(including an X Window System interface) which are not yet complete.
.LP
Usernames can be formatted in any of the following six ways:
.TP
.I name
Talk to some user on your machine
.TP
.I name@host
Talk to some user on a different machine
.TP
.I name#tty
Talk to some user on your machine, on a particular terminal
.TP
.I name@host#tty
Talk to some user on a different machine, on a particular terminal
.TP
.I name#tty@host
Talk to some user on a different machine, on a particular terminal
.TP
.I name@host tty
Talk to some user on a different machine, on a particular terminal
.LP
For each user on the command line,
.B ytalk
will attempt to connect to the talk
daemon on the specified user's host
and determine if that user has left an
invitation for you to call.
If not,
.B ytalk
leaves an invitation for the user on
your machine and tells the user's talk daemon
to send an announcement to his screen.
There is not yet a dedicated
.B ytalk
daemon, but there will be.
Right now,
.B ytalk
is able to communicate with
.I both
existing versions of
.SM UNIX
talk daemons.
For any particular host,
.B ytalk
will attempt to communicate with
a talk daemon, if the caller's host also supports that talk daemon.
If the two hosts have no daemon in common,
then
.SM UNIX
talk will not function at all,
but a connection is possible through (and only through)
.BR ytalk .
.LP
Once a connection has been established between two users,
they can chat back and forth to their hearts' content.
The connection is terminated when one of them hits control-C.
.LP
.B ytalk
is perfectly compatible with
.SM UNIX
talk,
and they can even converse with each other without any problems.
However, many of the features of
.B ytalk
can only operate when you are connected to a user
who is also using
.BR ytalk .
For the rest of this document,
it will be assumed that all connected users are using
.BR ytalk ,
unless otherwise stated.
.LP
If you specified more than one user on the
.B ytalk
command line, then
.B ytalk
will process and add each user to the conversation
as they respond to your invitation.
As each new user enters the conversation, the screen is further
subdivided into smaller and smaller windows,
one for each connected user.
Right now, the number of connected users is limited
by the number of lines on your terminal (or window),
as each connected user needs at least four lines.
The absolute maximum number of connections is set to 20 right now,
but this can be changed.
.LP
As each new user is added to the conversation,
.B ytalk
will transmit information about that user to all other connected
.B ytalk
users so that their screens will also subdivide
and incorporate the new user.
If the new user is using
.SM UNIX
talk, then information about the user will
.I not
be transmitted,
as the user's screen would be unable to accept multiple connections.
I have given brief thought to allowing at least the output of
.SM UNIX
talk users to be transmitted to all connected
.B ytalk
users, but I have not written any code to do so.  Note that
even though
.SM UNIX
.B talk
cannot handle multiple connections, it is still possible for
.B ytalk
to handle multiple
.SM UNIX
.B talk
connections.  For example,
george (using
.BR ytalk )
could communicate with fred and joe (both using
.SM UNIX
.BR talk ),
but fred and joe would be unaware of each other.  The best way to
understand the limitations that
.SM UNIX
.B talk
places on
.B ytalk
is to test various connections between the two and see how things work.
.LP
It can be annoying when you are busily chatting with some user,
and someone else attempts to talk to you,
sending that talk daemon message to your screen
and messing everything up.
Also, in any multi-talk environment it should be easy
to add new users to the conversation, and remove any particular users
from the conversation on the fly.
Hence, the ESC menu.  Whenever you are using
.BR ytalk ,
you can hit the ESCAPE key to bring up a menu which, at this
moment, has five options:
.TP
.B a
Add a new user to session
.TP
.B d
Delete a user from session
.TP
.B o
Output a user to a file
.TP
.B x
Encrypt toggle (asks for passphrase)
.TP
.B p
Encrypt toggle (use PGP)
.LP
By choosing option
.BR a ,
you are given the opportunity to type the name of any
user you wish to include into the conversation.
Again,
.B ytalk
will accept an invitation from that user if an invitation exists,
or will leave an invitation and ring the given user.
.LP
By choosing option
.BR d ,
you can type the name of any connected user, and that
connection will be terminated.
.LP
By choosing option
.BR o ,
you can type the name of any connected user and the
name of a file, and all further output from that user will be dumped to the
specified file.  The file, if it exists, will be
.IR overwritten .
Note that this is not the same as the command line
.B \-o
option.
.LP
By choosing options
.B x
or
.BR p ,
encryption is enabled.
If encryption is already on, it is disabled.
The
.B x
option uses a private password for authentication.
All parties must enter the same password.
The
.B p
option uses PGP for authentication.
You should have the
.B PGPPATH
environment variable set for the latter to work.
If encryption is enabled and another user joins,
that user will not be using encryption.
Someone must type ESC-x or ESC-p to initiate encryption with the new
user.

Oh, one other thing:  when user
.I A
attempts to ytalk to user
.IR B ,
but user
.I B
is already ytalking with user
.IR C ,
user
.IR A 's
.B ytalk
program will realize that user
.I B
is already using
.BR ytalk ,
and will communicate with user
.IR B 's
.B ytalk
program directly in order to initialize the conversation.
User B will see a nice windowed message like:
.br
Do you wish to talk with user A?
.br
and he or she will be prompted for a yes/no answer.
This, in my opinion, is much preferable to blitting the announcement
message and messing up user
.IR B 's
screen.
.SH OPTIONS
.TP
.BI \-o " file"
Log the talk session and append to file
.TP
.B \-s
Log talk side by side
.TP
.BI \-w " width"
Fold logged talk lines at width
.TP
.BI \-b " bar"
Column separator for option
.B \-s
(default: ``|'')
.TP
.BI \-i " prompt"
Prompt for logged talkers lines
.TP
.BI \-u " prompt"
Prompt for logged responders lines
.SH AUTHOR
If you have any ideas, comments, or questions,
I'd be happy to hear from you at <yenne@ccwf.cc.utexas.edu>.

For all matters regarding encryption within
.BR ytalk ,
send email to <miron@extropia.wimsey.com>,
<neuhaus@informatik.uni-kl.de>, or <pcl@ox.ac.uk>.

.SH BUGS

Sometimes, multiple simultaneous sessions are difficult to set up.
For example, user A may be able to talk with both of users B and C,
but B and C are unable to talk with each other directly.  In such a
case, B and/or C should carry on attempting to set up the connection -
it usually works at a subsequent attempt.

Using PGP encryption to swap session keys may make your pass
phrase visible to sufficiently competent snoopers.  Caveat emptor.

If PGP fails for some reason, the resulting error messages which are
displayed can be enigmatic.

Incomplete, as mentioned above.

The man page is far too chatty for a reference manual.

.SH SEE ALSO

pgp(1), talk(1), talkd(8)
