Newsgroups: comp.ai.genetic,sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!mnemosyne.cs.du.edu!nyx!colin
From: colin@nyx.cs.du.edu (Colin Plumb)
Subject: Re: What are the best random numbers for genetic algorithms (was: Re: GA random no. gen.
Message-ID: <1993Oct13.033953.18408@mnemosyne.cs.du.edu>
X-Disclaimer: Nyx is a public access Unix system run by the University
	of Denver for the Denver community.  The University has neither
	control over nor responsibility for the opinions of users.
Sender: usenet@mnemosyne.cs.du.edu (netnews admin account)
Organization: Nyx, Public Access Unix at U. of Denver Math/CS dept.
References: <29e54i$e6c@fbi-news.informatik.uni-dortmund.de> <RICE.93Oct12114922@hpp-ss10-1.stanford.edu> <29f8bm$gcu@senator-bedfellow.MIT.EDU>
Date: Wed, 13 Oct 93 03:39:53 GMT
Lines: 27
Xref: msuinfo comp.ai.genetic:1509 sci.crypt:20361

In article <29f8bm$gcu@senator-bedfellow.MIT.EDU> fuellen@athena.mit.edu (Georg Fuellen) writes:
>Why does the new generation of rng's not come across ?
>
>Possible reasons:
>
>- They are communicated only in hard-to-read and hard-to-get 
>  journal/proceedings articles.
>- They are too inefficient (but see [MS91] ).
>- Nobody needs this perfect randomness (see for instance [KR88] ).
>- Implementation may need special software (e.g. large integer arithmetic) 
>- There are patents and arms export problems.
>
>I'd like to hear opinions about this. Since my view is rather theoretic,
>I may be as far off as George Marsaglia. 

Basically, cryptographically strong RNGs are much more complicated and slower,
and I don't think anyone needs them unless one has a very smart "opponent".
A genetic algorithm might be able to adapt to a simple RNG, but using, say
a large period additive congruential RNG followed by a scrambler (e.g. Knuth's
Algorithm B) should be effectively random to genetic algorithms for the
near future.

>   Proc. of CRYPTO 89, Springer Verlag, pp.461-480.
>[MS91]     S. Micali, C.P. Schnorr, Efficient, Perfect Polynomial Random Number
>   Generators. J. Cryptology, 1991, pp. 157-172.

Here, "efficient" means parallelizable.  It's still a lot of work.
