Newsgroups: sci.math.symbolic,sci.math,sci.physics,sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!munnari.oz.au!metro!magma
From: magma@maths.su.oz.au (Magma)
Subject: The MAGMA System for Computational Algebra
Message-ID: <magma.751251776@galois>
Summary: Announcement of the MAGMA System for Computational Algebra
Keywords: Computer Algebra
Sender: magma@maths.su.oz.au
Nntp-Posting-Host: galois.maths.su.oz.au
Organization: School of Mathematics and Statistics, University of Sydney
Date: Fri, 22 Oct 1993 01:02:56 GMT
Lines: 240
Xref: msuinfo sci.math.symbolic:9561 sci.math:55213 sci.physics:63776 sci.crypt:20596


       Announcement of the MAGMA System for Computational Algebra


Introduction
------------

Magma is a radically new software system for computational algebra, number 
theory and geometry. It provides a mathematically rigorous environment 
for computing with algebraic structures (groups, rings, fields, modules, 
algebras), geometric structures and combinatorial structures.

A novel feature of the system lies in its emphasis on *structural* computation. 
By this is meant the ability to perform operations such as finding a
"standard basis", testing membership, determining global properties etc 
for an algebraic structure, which may be finite or infinite.

Magma was launched at a conference held at Queen Mary and Westfield College,
London, August 23 -- 27, 1993. As distribution will commence late in November,
1993, this document is intended to provide some general information.

Two companion documents, "Summary of categories and their operators in Magma", 
and "Examples of Magma calculations and programs" are available upon request.

Types
-----

The system design adapts ideas from Object-Oriented programming where the
OO classes are derived from notions in Universal Algebra and Category Theory.
The primary concept is that of a *magma* (a set with a law of composition). 
Thus, types correspond to magmas; a collection of magmas sharing a common 
representation form a category (e.g. the category of permutation groups); 
a collection of categories satisfying the same set of identical relations 
form a variety (e.g. the variety of groups). In particular,

   + The variety operations -- substructure, homomorphic image, and Cartesian 
     product are available as uniform constructors across all categories.

   + Functors may be used to move between categories.

Every object created in Magma, is either a magma or is defined in terms of 
one or more magmas. This approach provides the user with precise control 
over the operations that may be performed on an object x since these are 
completely determined by the magma to which x belongs.

The aggregate data types are sets (finite and infinite), sequences (finite and 
infinite), Cartesian products, tuples, and mappings. A feature of the language 
is the provision of powerful set and sequence constructors based on the use of 
predicates.

The Language
-----------

The main features of the user language are:

   + Imperative language with standard imperative-style statements and
     procedures
   + The language contains an essentially functional subset providing standard 
     features such as closures, higher-order functions, and partial evaluation
   + Dynamic typing
   + The general aggregate data types correspond to the fundamental concepts of
     algebra: set, sequence, mapping, magma
   + Universal structure constructors provide a general mechanism for 
     constructing magmas
   + Simple but powerful notation for constructing sets and sequences
     in a natural mathematical style
   + Set and sequence operations are implemented with a strong emphasis 
     on efficiency
   + Coercion between magmas (including automatic coercion)
   + User-defined OO classes will be available in 1994

The Kernel Magmas
-----------------

The efficiency of Magma's implementations of fundamental algorithms is designed
to be similar to that achieved by specialist programs. This is achieved by 
having optimized implementations of a large number of fundamental algebraic 
algorithms encoded as part of the C kernel of the system. To avoid having to 
re-implement many highly complex algorithms, an internal *software bus* allows 
the integration of C code written independently at the cost of a modest amount 
of effort. Consequently, many key Magma functions are implemented by highly 
optimized programs written by the experts in the appropriate areas.  

The major categories of magma currently supported in the kernel include:

   + Semigroups: Finitely presented semigroups 

   + Groups: Finitely presented groups, finite abstract groups, permutation 
     groups, soluble groups and matrix groups

   + Rings: Ring of integers, order in a number field; 

   + Fields: Galois fields, rational field, number fields, function fields, 
     real field, complex field

   + Algebras: Finitely presented algebras, polynomial algebras, matrix 
     algebras, power series algebras, group algebras (in preparation)

   + Modules: R-modules (with scalar or matrix action); Hom(M, N), where M and
     N are R-modules; K[G]-modules; lattices

   + Geometric structures: Elliptic curves (in preparation)

   + Incidence structures: Graphs, codes, finite geometries (in preparation)


Features of the Mathematical Function Library
---------------------------------------------

The library of intrinsic functions contains implementations of approximately
2000 algebraic and geometric algorithms. Highlights include:

   + Fast machinery for polynomial algebra, particularly for the factorization
     of univariate polynomials over GF(q) and Z. Magma supports calculation
     with ideals in rings. Groebner basis algorithms for both commutative
    and non-commutative polynomial rings will be installed in the near future.

   + A package for finite fields that uses distinct representations for fields
     GF(q), where q is small, prime fields GF(p), where p may be multiple
     precision, and GF(p^n), where p is small but n is large (e.g. p=2, n=1000).
 
   + The KANT system developed by Michael's Pohst's group for constructive
    algebraic number theory. This package includes facilities for calculating 
    integral bases, ideal class groups and systems of fundamental units for
    fields of degree in excess of 20.

  + A new generation of permutation group algorithms that enables users 
    to routinely perform computations, such as computing a chief series,
    in short base groups having degree up to at least a million. Backtrack
    searches are conducted using Jeff Leon's new package. 

  + New algorithms and programs for most of the critical processes for finitely 
    presented groups. Included among these is George Havas's new Todd-Coxeter 
    procedure and Sims' new backtrack-based low index subgroups algorithm.

  + Extensive machinery for computing with modules and their homomorphisms.
    This includes highly optimized code for modules over finite fields and 
    over the ring of integers.
        
  + A graph theory module containing many functions for determining graph 
    invariants as well as Brendan McKay's graph automorphism program (nauty). 

  + A coding theory package including many constructions for linear codes 
    together with machinery for determining important invariants such as the
    minimum weight, the weight enumerator and the automorphism group.

Data Bases
----------

A subsequent release of the system will include an integrated data-base 
facility to support the use of large mathematical data bases. The data base 
will contain such things as all quadratic fields having discriminant less 
than a million, all vertex-transitive graphs having up to 24 vertices, 
all 2-groups having order dividing 256, etc.

The Environment
---------------

  + Interactive line editing
  + History system with recall and editing of previous lines
  + A hierarchical on-line help facility
  + Ability to save and restore user workspaces
  + Environment variables for configuring style of output, etc.
  + Verbose options for built-in functions
  + Logging of output, input/output with external files, etc.
  + A socket mechanism for communicating with other processes (in preparation)

Documentation
-------------

There are three main components of the documentation:

  + J. Cannon and C. Playoust: An Introduction to MAGMA, 250 pages;

  + W. Bosma and J. Cannon: The MAGMA Handbook, 600 pages;

  + On-line help.

The Magma Introduction does not assume any previous knowledge of programming 
languages or computer algebra and provides a gentle introduction to the system.
It is particularly suitable for undergraduate use. The Magma Handbook provides 
complete documentation for every language and environmental feature. An on-line 
help system provides a variety of levels of information. In particular, it 
provides access to the Handbook descriptions of all function and operators.

Cayley and Magma
----------------

Magma has been developed by the Computational Algebra Group at the University 
of Sydney with funding provided by the Australian Research Council. Between
1975 and 1985, this group produced the Cayley system for group theory and 
related areas. Some 18 years of field experience with Cayley provided 
a starting point for the design of Magma. However, Magma is designed as a
general algebra system in contrast to the more limited objectives of Cayley.
In addition to providing a vast expansion in its coverage of algebra, Magma 
currently contains approximately 90 per cent of the facilities of Cayley and 
the remainder will be installed over the next few months.

Distribution of Magma will commence in November 1993 with the public release
of Magma V1. 

At that time distribution of Cayley will cease. While Cayley and Magma are not 
compatible, a translator has been written to assist in the conversion of Cayley
code to Magma code. All Cayley sites with a license current on or after 
1 January, 1993 will be automatically upgraded to Magma.

Platforms
---------

The initial release of Magma will be available for the following processors:

     SUN 4, SUN 10 under SUNOS 4.x and Solaris 2
     DECstation under Ultrix
     DEC Alpha under Ultrix  (Available in 1994)
     IBM RS6000 under AIX
     HP9000/700 series under HP-UX
     Apollo M680x0 based machines, DN10000                
     386/486 PC (Available first quarter 1994)
     Macintosh running A/UX 2.01 or higher (Available in 1994)

It is planned to make available a low-cost student version for 386/486 PCs. 
Implementations for other UNIX-based machines will depend upon demand.

Ordering Information
--------------------

For more information, or to order the system, contact

        The Secretary
        Computational Algebra Group
        School of Mathematics
        University of Sydney
        NSW 2006 
        Australia

 Email: magma@maths.su.oz.au
 Telephone: +61 2 692 3338
 Fax: +61 2 692 4534

                ---------------------------
