Path: msuinfo!uwm.edu!cs.utexas.edu!usc!randvax!aja.rand.org!jim
From: jim@rand.org (Jim Gillogly)
Newsgroups: sci.crypt,alt.security.pgp
Subject: Re: PASSPHRASE FAQ
Message-ID: <29hcdf$llu@aja.rand.org>
Date: 13 Oct 93 17:03:43 GMT
References: <13486.492.uupcb@grapevine.lrk.ar.us> <1993Oct12.182448.9893@ntg.com> <9328618.23863@mulga.cs.mu.oz.au>
Organization: Banzai Institute
Lines: 32
NNTP-Posting-Host: mycroft.rand.org
Xref: msuinfo sci.crypt:20377 alt.security.pgp:5579

I suppose this should head out to a C newsgroup if it proceeds further, but
regarding one line of my SHA (Secure Hash Algorithm) code,

>>>#define S(n, X) ((X << n) | (X >> (32 - n)))    /* Barrel roll */

In article <9328618.23863@mulga.cs.mu.oz.au>, Greg Rose <ggr@toora.acci.COM.AU> wrote:
>Two nits to pick, though. It still assumes a 32
>bit machine, although for most cryptographic
>purposes the extra bits on a 64 bit machine will
>be ignored anyway. Much more important is that the

I'll believe it, I guess, though I don't know a compiler with 64-bit longs
personally.  Most compilers I know about define longs as either 32 bits
(usual) or 16 bits (for which my code breaks, and for which I don't have a
modern version of the compiler), and the 64-bit quantities get called
"long long".  I don't have any K&R to offer for this one.

As long as we're picking nits, I'll point out that Peter Gutmann's
implementation of SHA works for low-endian systems as well as high-endian.
The version of my code under discussion does not.  <This> is what I would
agree is a fair cop, and will be addressed fixed in my next release, if any.

>it looks like it should. The #define should as a
>matter of principle look like:
>#define S(n, X) (((X) << (n)) | ((X) >> (32 - (n))))

Yawn.  While true in general for a macro that's going to be used in every
possible context, in the context of my program, n and X are single
constants and expressions respectively.
-- 
	Jim Gillogly
	Sterday, 22 Winterfilth S.R. 1993, 17:03
