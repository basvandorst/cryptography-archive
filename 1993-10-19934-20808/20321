Path: msuinfo!agate!howland.reston.ans.net!pipex!uunet!ddsw1!indep1!clifto
From: clifto@indep1.UUCP (Cliff Sharp)
Newsgroups: sci.crypt
Subject: Re: Low information conte
Message-ID: <2542@indep1.UUCP>
Date: 11 Oct 93 11:53:14 GMT
References: <CEoBBw.6pI@acsu.buffalo.edu> <49.1806.212.0NEB1FFA@cdreams.com> <CEpC6I.Ksr@acsu.buffalo.edu>
Organization: as little as possible
Lines: 41

In article <CEpC6I.Ksr@acsu.buffalo.edu> boyd@acsu.buffalo.edu (Daniel F Boyd) writes:
>In article <49.1806.212.0NEB1FFA@cdreams.com> 
>israel.silverman@cdreams.com (Israel Silverman) writes:
>>   Given that most messages consist of A WHOLE MESSAGE, would it not add
>>   substantial security to totally bury the message in noise of an
>>   additional factor of 10 or 100 times the message? 
>
>If you want to discuss this further, it might help if you would
>explain yourself more precisely; how exactly (like, show me a program
>that does it) are you hiding the message in random noise?

   I think I understand what Israel's getting at, but even if I've got it
wrong, what's wrong with making the actual message the end of a stream
which begins with a random number of garbage bytes?  This way the message
"Got it.  Thanks." could be 8K long, say, while the next run gives the message
"Now is the time for all good men to come to the aid of their Hillary"
repeated seventeen times might be 4700 bytes.  Then encipher, using whatever
algorithm.  This way the difficulty of a plaintext attack increases; with
a simple autoencipherment placed between the first and second steps, it
further obfuscates the process, and all you'd need as a primer key for the
autoencipherment would be the first RN.
   Although there's no real need to give a definite method for finding the
first character of the message (i.e., the last random character + 1), there
are probably several methods which could be applied simply to do so.  (It
should be obvious to the recipient what the message is when he sees plaintext
like "#x*9zK$+x4gGot it. Thanks.")  One possible method is to watch the
RNG as it goes, making sure that it never produces a consecutive set of
six octets which sum to 1203 (if the sixth produces this sum, it's skipped
and the next RN is chosen instead), then padding the end of the RN stream
with six random octets which sum to 1203.  (If anyone cares to reply to this
article, please address this last part separately, as it's not of the
essence to the original idea.)  That way, one can automagically eliminate
the random octet stream and go straight to the original message.

   Now, I'm not saying this is a strong system, but (especially if this is
what Israel meant) what are its weaknesses?
-- 
+------------------------------------------------------------------------------+
|   Cliff Sharp  |      clifto@indep1.chi.il.us   OR  clifto@indep1.uucp       |
|     WA9PDM     |                 Use whichever one works                     |
+------------------------------------------------------------------------------+
