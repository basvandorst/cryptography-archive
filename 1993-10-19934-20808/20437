Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!spool.mu.edu!howland.reston.ans.net!xlink.net!news.belwue.de!news.dfn.de!news.dkrz.de!rzsun2.informatik.uni-hamburg.de!bontchev
From: bontchev@news.informatik.uni-hamburg.de (Vesselin Bontchev)
Subject: Re: Checking that code has not been modified?
Message-ID: <CExuM3.98B@informatik.uni-hamburg.de>
Sender: news@informatik.uni-hamburg.de (Mr. News)
Organization: University of Hamburg, Germany
X-Newsreader: TIN [version 1.1 PL9]
References: <4795@teslab.lab.oz.au>
Date: Fri, 15 Oct 1993 12:27:38 GMT
Lines: 62

Andrew Phillips (andrew@teslab.lab.oz.au) writes:

> Although, a CRC is excellent for detecting noise, random errors etc,
> I believe that if it was known how the Kobetron worked it would be
> quite easy to generate an EPROM that had different contents but still
> had the same signature.  For example, certain critical parts of the
> EPROM could be modified and then other unused parts also changed to
> give the same signature.

If the method is indeed a CRC - yes.

> contents had been modified.  Someone here suggested the CRC idea
> could be improved by using larger CRCs and generating both forward
> and backward CRCs to create a "signature".

Nope. Forgind a CRC-N (usually N=16 or 32) takes in the worst case
solving a system of N linear equations with binary (0 or 1)
coefficients. I strongly suspect that there are even faster methods.
And forgind N different CRCs is as easy as forging a single CRC which
is based on a polynomial that is the LCM of the generator polynomials
of the CRCs.

> My gut feeling is that any signature using CRCs could be readily
> faked. 

Your feeling is right.

> I also had a gut feeling that public key cryptography could
> be the solution and after reading the Cryptography FAQ of sci.crypt I
> have a rough idea of how, as explained here.

No need to resort to public key cryptography. A simple one-way hash
will do.

> Create a one-way hash of the (authentic) EPROM.  Use this to verify
> EPROMs in the field. 

Yes, that's it.

> From my understanding of the FAQ there are
> one-way hash functions where it is impossible to create messages
> which have the same hash value even if you know the original message
> and the hash value. 

Practically impossible, yes.

> But it seems to me that, at least for small hash
> values (which would be best for practical reasons) a brute force
> (trial and error) method could be used to produce a message with the
> same hash as the original.

There are no "small" hash values. MD4 and MD5 (and MD2?) always
produce a 128-bit hash value, regardless of the input, and SHA
produces a 160-bit hash value.

Regards,
Vesselin
--
Vesselin Vladimirov Bontchev          Virus Test Center, University of Hamburg
Tel.:+49-40-54715-224, Fax: +49-40-54715-226      Fachbereich Informatik - AGN
< PGP 2.3 public key available on request. > Vogt-Koelln-Strasse 30, rm. 107 C
e-mail: bontchev@fbihh.informatik.uni-hamburg.de        22527 Hamburg, Germany
