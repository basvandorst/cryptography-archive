Path: msuinfo!uwm.edu!cs.utexas.edu!usc!yeshua.marcam.com!zip.eecs.umich.edu!umn.edu!lynx.unm.edu!dns1.NMSU.Edu!opus!ted
From: ted@crl.nmsu.edu (Ted Dunning)
Newsgroups: sci.crypt,comp.security.misc
Subject: Re: DES is dead...
Date: 1 Oct 93 09:35:11
Organization: Computing Research Lab
Lines: 40
Message-ID: <TED.93Oct1093511@lole.crl.nmsu.edu>
References: <Sep.7.00.34.20.1993.15481@net.bio.net> <1993Sep29.022010.12390@cirrus.com>
	<strnlghtCE3xL9.4G2@netcom.com> <PCL.93Sep30112940@rhodium.ox.ac.uk>
	<strnlghtCE6GoB.HM3@netcom.com>
NNTP-Posting-Host: lole.nmsu.edu
In-reply-to: strnlght@netcom.com's message of Thu, 30 Sep 1993 17:31:23 GMT
Xref: msuinfo sci.crypt:19993 comp.security.misc:5466



In article <strnlghtCE6GoB.HM3@netcom.com> strnlght@netcom.com (David
Sternlight) writes:

   > Or am I missing something?  > >I think you may be missing
   something.  There are many ways of searching >a space sequentially.
   It is not clear, in general, that you as a victim >will be able to
   predict the order in which keys will be tried by an >attacker.

   I think not. This whole discussion is one "in probability". That
   was the original (and I think incorrect) argument.

   Thus as long as the search scheme tries any key only once, after it
   has run for a while, if one changes one's key there is a finite
   probability one has changed it to a key that has already been
   unsuccessfully searched, and thus the probability of detection on a
   single search of the space (in that instance) falls to zero.

and you don't think the attacker won't notice this?  as soon as you
change your key, a brute searcher will toss previous search results
and state and start fresh (in the current or a random position in
their secret sequence).

  Given the complexity, simulation is one approach and another reader
  has kindly set up a simulation model (which he posted) and drawn the
  results. It shows that my analysis is correct and the original
  poster's incorrect on empirical grounds, though I have been arguing
  on theoretical ones.

it shows that the expected time to cracking is roughly N/2 when the
password is changed very rarely and increases to a limit at N when
password is changed very often.

for an attacker with half a wit, the expected time to solution never
increases beyond N.  for an attacker without half a wit (i.e. one who
never repeats a key in spite of noticing you have changed your
password), the expected time to solution can be as large as desired.
but then, that is a reasonable working definition of witless.

