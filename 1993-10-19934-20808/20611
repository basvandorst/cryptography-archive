Path: msuinfo!agate!overload.lbl.gov!s1.gov!pearson
From: pearson@s1.gov (Peter K Pearson)
Newsgroups: sci.crypt
Subject: Re: Crypto cracking
Date: 23 Oct 1993 00:05:38 GMT
Organization: Lawrence Livermore National Laboratory
Lines: 35
Distribution: usa
Message-ID: <2a9sgi$g0m@s1.gov>
References: <5804@wet.UUCP>
NNTP-Posting-Host: s1.gov
Keywords: complexity, pseudorandom numbers
Originator: pearson@s1.gov


In article <5804@wet.UUCP>, naga@wet.COM (Peter Davidson) writes:
|>  
|> I agree with what you say above about novices, but just as complexity
|> does not imply security, so also complexity does not imply insecurity,
|> contrary to what some readers of your original posting may have concluded.
|>  
|> I think it is in fact true that "the more complex [a cryptosystem] is,
|> the harder it will be to invert."  Were you to give an example of a
|> complex cryptosystem that can easily be cracked (and I'm sure you
|> could invent one) it would not disprove this statement.  To show that
|> it "isn't really true" you would have to show that complexity never
|> (or almost never) enhances security.

The ways in which complexity can reduce security in an encryption scheme
are the same ways complexity can ruin a pseudorandom number generator:
(1) complexity can make it difficult to verify that the algorithm is
functioning as intended, and (2) complexity can make it impossible to
prove that the algorithm has the intended properties.

Encryption has a lot in common with the generation of pseudorandom
numbers. Typically, the most basic desire of the designer of a cipher
system is that his ciphertext be indistinguishable from random bits.
(Indeed, pseudorandom number generators are regularly suggested for
stream ciphers.) That's why Donald Knuth's chapter on random numbers
(in The Art of Computer Programming) is so popular with readers of
this group.

Of particular relevance to the subject of complexity and security
is Knuth's description of the super-duper pseudorandom number
generator he once build around a combination of several diverse
randomizing operations. It turned out to be an amazingly poor
pseudorandom number generator, for reasons that could never be
surmised by analysis of the algorithm.

