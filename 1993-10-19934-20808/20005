Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!racerx!ken
From: ken@Bridge.COM (Ken Hardy)
Newsgroups: sci.crypt,comp.security.misc,alt.security
Subject: Re: Secure identification of software versions
Message-ID: <1706@racerx.bridge.COM>
Date: 1 Oct 93 21:49:37 GMT
References: <1993Sep28.210824.15279@cs.ucla.edu> <1993Sep29.094815.25347@infodev.cam.ac.uk>
Sender: news@racerx.bridge.COM
Followup-To: sci.crypt
Organization: Planet Earth
Lines: 31
Nntp-Posting-Host: ernie
Xref: msuinfo sci.crypt:20005 comp.security.misc:5476 alt.security:12320

In article <1993Sep29.094815.25347@infodev.cam.ac.uk> rja14@cl.cam.ac.uk (Ross Anderson) writes:
>
>On the other hand, identifying an executable by means of a digital
>signature is fairly straightforward.

It's straightforward & secure if you keep a record of a digital
signature on files you distribute.  As long as the list of signatures
remains secure in your hands, you can check a given file against the
list with confidence.

I'd like a means of verifying a file based on a digital signature
stored within it.  Unfortunately, I can think of no surefire way to
keep someone from simply re-signing it after modification.

My particular situation involves scripts distributed in text form that
can be easily hacked.  I wrote a utility that scans the file, replacing
a template, normally in a comment line, with a digital signature.  A
second verification utility recalculates the signature and compares it
to the one found in the file.

Unfortunately, the only thing that stops someone from resigning a
modified file is the "secret" nature of the signature algorithm.  Since
I'd like to distribute the verifyer with the signed files (so it's
there to do checking when trouble arises) someone could disassemble it
to recreate my algorithm.  I guess this is an example of "security
through obscurity"; obfuscation cannot be guaranteed.

-- 

Ken Hardy
ken@bridge.com  (racerx!ken) --__-_____--__-__--_--__-___-__-__-___----
