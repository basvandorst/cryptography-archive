Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!sunic!news.funet.fi!uwasa.fi!garbo.uwasa.fi!hensel
From: hensel@garbo.uwasa.fi (Mike Hensel)
Subject: Re: IDEA key questions
Message-ID: <1993Oct14.225310.14782@uwasa.fi>
Sender: news@uwasa.fi (Network news)
Nntp-Posting-Host: garbo.uwasa.fi
Organization: University of Vaasa, Finland
Date: Thu, 14 Oct 1993 22:53:10 GMT
Lines: 30


 
>
>>>So just do an MD5 hash of the password first. This will give you 128
>>
>>A better approach might be to encrypt a password with itself multiple times.
>>IDEA itself should distribute bits regularly at least as good as MD5.
>
>   Hmmm.  This is true, but it's easy to screw up the implementation.
>
>   Keep in mind that your output key needs to depend on at least as many
>passphrase-dependent bits as there are key bits to generate.  For example,
>suppose you used a key not derived from the passphrase, K, to generate a
>key from a passphrase.  Suppose you have a buffer of 256 bytes, and you
>simply fill the buffer up from the left with passphrase bytes.  Now, if
>you encrypted the buffer forward in CBC mode with K, your last 128 bits
>in the buffer would usually wind up depending totally on the 64 bits of
>state carried into the next to last block's encryption.  Even if the
>passphrase was repeated to fill the buffer, the last 64 bits of buffer
>would probably contain far less than 64 bits of entropy, so even with
>the first 64 bits of key based on a strong 64-bit hash of the passphrase,
>the last 64 bits would be weaker.
 
Yes, because blocksize < keysize with IDEA. however, if you repeat this
operation a hundred times, each time using the last 128 bits of the buffer
as the new key, i think this should give you enough bits of entropy (unless
blocksize is much smaller than keysize). or am i missing something?
 
-- 
Mike Hensel
