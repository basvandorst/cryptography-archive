Path: msuinfo!uwm.edu!cs.utexas.edu!convex!constellation!aardvark.ucs.uoknor.edu!news.ualr.edu!grapevine!grady@netcom.com
Newsgroups: comp.org.eff.talk,sci.crypt,alt.security.pgp
Subject: PASSPHRASE FAQ
Message-ID: <13328.492.uupcb@grapevine.lrk.ar.us>
From: grady@netcom.com@grapevine.lrk.ar.us (Grady@Netcom.Com) 
Date: 4 Oct 93 01:56:00 GMT
Reply-To: grady@netcom.com@grapevine.lrk.ar.us (Grady@Netcom.Com) 
Followup-To: sci.crypt,alt.security.pgp
Distribution: world
Organization: The GrapeVine BBS *** N. Little Rock, AR *** (501) 753-8121
Lines: 151
Xref: msuinfo comp.org.eff.talk:20917 sci.crypt:20188 alt.security.pgp:5422

This article split by uuPCB: Part # 9 of 7

From: grady@netcom.com (Grady Ward)
Date: Sun, 3 Oct 1993 04:16:32 GMT

GG ( c, d, a, b, in[ 7], S23, 0x676F02D9L); /* 31 */
GG ( b, c, d, a, in[12], S24, 0x8D2A4C8AL); /* 32 */

/* Round 3 */
#define S31 4
#define S32 11
#define S33 16
#define S34 23
HH ( a, b, c, d, in[ 5], S31, 0xFFFA3942L); /* 33 */
HH ( d, a, b, c, in[ 8], S32, 0x8771F681L); /* 34 */
HH ( c, d, a, b, in[11], S33, 0x6D9D6122L); /* 35 */
HH ( b, c, d, a, in[14], S34, 0xFDE5380CL); /* 36 */
HH ( a, b, c, d, in[ 1], S31, 0xA4BEEA44L); /* 37 */
HH ( d, a, b, c, in[ 4], S32, 0x4BDECFA9L); /* 38 */
HH ( c, d, a, b, in[ 7], S33, 0xF6BB4B60L); /* 39 */
HH ( b, c, d, a, in[10], S34, 0xBEBFBC70L); /* 40 */
HH ( a, b, c, d, in[13], S31, 0x289B7EC6L); /* 41 */
HH ( d, a, b, c, in[ 0], S32, 0xEAA127FAL); /* 42 */
HH ( c, d, a, b, in[ 3], S33, 0xD4EF3085L); /* 43 */
HH ( b, c, d, a, in[ 6], S34, 0x04881D05L); /* 44 */
HH ( a, b, c, d, in[ 9], S31, 0xD9D4D039L); /* 45 */
HH ( d, a, b, c, in[12], S32, 0xE6DB99E5L); /* 46 */
HH ( c, d, a, b, in[15], S33, 0x1FA27CF8L); /* 47 */
HH ( b, c, d, a, in[ 2], S34, 0xC4AC5665L); /* 48 */

/* Round 4 */
#define S41 6
#define S42 10
#define S43 15
#define S44 21
II ( a, b, c, d, in[ 0], S41, 0xF4292244L); /* 49 */
II ( d, a, b, c, in[ 7], S42, 0x432AFF97L); /* 50 */
II ( c, d, a, b, in[14], S43, 0xAB9423A7L); /* 51 */
II ( b, c, d, a, in[ 5], S44, 0xFC93A039L); /* 52 */
II ( a, b, c, d, in[12], S41, 0x655B59C3L); /* 53 */
II ( d, a, b, c, in[ 3], S42, 0x8F0CCC92L); /* 54 */
II ( c, d, a, b, in[10], S43, 0xFFEFF47DL); /* 55 */
II ( b, c, d, a, in[ 1], S44, 0x85845DD1L); /* 56 */
II ( a, b, c, d, in[ 8], S41, 0x6FA87E4FL); /* 57 */
II ( d, a, b, c, in[15], S42, 0xFE2CE6E0L); /* 58 */
II ( c, d, a, b, in[ 6], S43, 0xA3014314L); /* 59 */
II ( b, c, d, a, in[13], S44, 0x4E0811A1L); /* 60 */
II ( a, b, c, d, in[ 4], S41, 0xF7537E82L); /* 61 */
II ( d, a, b, c, in[11], S42, 0xBD3AF235L); /* 62 */
II ( c, d, a, b, in[ 2], S43, 0x2AD7D2BBL); /* 63 */
II ( b, c, d, a, in[ 9], S44, 0xEB86D391L); /* 64 */

buf[0] += a;
buf[1] += b;
buf[2] += c;
buf[3] += d;
}


/*

MD5 test vectors:
d41d8cd98f00b204e9800998ecf8427e ""
0cc175b9c0f1b6a831c399e269772661 "a"
900150983cd24fb0d6963f7d28e17f72 "abc"
f96b697d7cb7938d525a2f31aaf161d0 "message digest"
c3fcd3d76192e4007dfb496cca67e13b "abcdefghijklmnopqrstuvwxyz"
d174ab98d277d9f5a5611c2c9f419d9f
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijk\
lmnopqrstuvwxyz0123456789"
57edf4a22be3c955ac49da2e2107b67a
"1234567890123456789012345678901234567\
8901234567890123456789012345678901234567890"
900150983cd24fb0d6963f7d28e17f72 foo

*/



Appendix D. The Secure Hash Algorithm

/* Implementation of NIST's Secure Hash Algorithm (FIPS 180)
* Lightly bummed for execution efficiency.
*
* Jim Gillogly 3 May 1993
*
* Compile: cc -O -o sha sha.c
*
* To remove the test wrapper and use just the nist_hash()
routine,
* compile with -DONT_WRAP
*
* Usage: sha [-vt] [filename ...]
*
*      -v switch: output the filename as well
*      -t switch: suppress spaces between 32-bit blocks
*
*      If no input files are specified, process standard input.
*
* Output: 40-hex-digit digest of each file specified (160 bits)
*
* Synopsis of the function calls:
*
*   sha_file(char *filename, unsigned long *buffer)
*      Filename is a file to be opened and processed.
*      buffer is a user-supplied array of 5 or more longs.
*      The 5-word buffer is filled with 160 bits of non-
terminated hash.
*      Returns 0 if successful, non-zero if bad file.
*
*   void sha_stream(FILE *stream, unsigned long *buffer)
*      Input is from already-opened stream, not file.
*
* void sha_memory(char *mem, long length, unsigned long *buffer)
*      Input is a memory block "length" bytes long.
*
* Caveat:
* Not tested for case that requires the high word of the length,
*      which would be files larger than 1/2 gig or so.
*
* Limitation:
* sha_memory (the memory block function) will deal with blocks no
longer
* than 4 gigabytes; for longer samples, the stream version will
* probably be most convenient (e.g. perl moby_data.pl | sha).
*
* Bugs:
*      The standard is defined for bit strings; I assume bytes.
*
* test vector:
"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
* should compute:
*                  0xd2516ee1L
*                  0xacfa5bafL
*                  0x33dfc1c4L
*                  0x71e43844L
*                  0x9ef134c8L
*
* test vector: "abc"
* should compute:
*                  0x0164b8a9L

RBBS-UTI v3.01: by Bob Snyder - this copy NOT Registered
---
* PC Assist * Reston, Va. * (703) 264-1826
* PostLink(tm) v1.05  PCASSIST (#5267) : RelayNet(tm)

----
The GrapeVine Bulletin Board System  (501) 753-8121
PGP Distribution Site, UseNet, RIME, ThrobNet, MediaNet, U'niNet, ForthNet
RecoveryNet, MetroLink.  Putting Communications back in Telecommunication
