Newsgroups: sci.crypt
Path: msuinfo!agate!spool.mu.edu!sdd.hp.com!saimiri.primate.wisc.edu!caen!hellgate.utah.edu!math.utah.edu!news.math.utah.edu!willett
From: willett@math.utah.edu (Lon Willett)
Subject: Re: Privacy-Enhanced Mail: Crypto Problems
Sender: news@math.utah.edu
Date: Tue, 5 Oct 1993 06:50:50 GMT
References: <1993Sep24.063530.21163@cactus.org> <27vvdj$mjc@nic.umass.edu>
	<28l6d8$n13@vixen.cso.uiuc.edu><CECDwC.5Io@acsu.buffalo.edu>
	<753@organic_sw.win.net>
In-Reply-To: merriman@organic_sw.win.net's message of Sun, 03 Oct 1993 22: 08:15 GMT
Reply-To: willett@math.utah.edu
Organization: Department of Mathematics, University of Utah
Message-ID: <WILLETT.93Oct5005053@solitude.math.utah.edu>
Lines: 63

In article <753@organic_sw.win.net> merriman@organic_sw.win.net (David K. Merriman) writes:

   I think that's the point: _which one_?  If you're given a captured string
   of apparently-random characters, how do you proceed?  Which algorithm to
   try first?  Or has been noted elsewhere, what's to stop someone from
   starting a message with "----- Begin PGP encryped message -----", and then
   using DES-CBC? Or what if the encrypted data doesn't use a 'recognized'
   algorithm (a rotten thing to do - _lie_ about what algorithm is being
   used.....)?

But this doesn't really buy you all that much.  I don't really trust
"unrecognized algorithms".  And if someone who has the resources to
(try to) crack DES/3DES/IDEA/etc is trying to decipher your messages,
then it is a safe bet that they have the resources to put one group
working on each assumption, and a few others trying out miscellaneous
other possibilities.  Note that this is maybe 5-10 times the effort,
which is "the same as" adding 2-4 bits to the key (for brute force
deciphering).  So it's not that impressive an increase in difficulty,
especially if they've penetrated your security to the point of knowing
what your options are (and anyone who is bothering to try to decipher
IDEA will probably put a lot of effort into non-algorithmic attacks).

On the other hand, every bit is a bit.  So ideally crypt programs will
allow multiple encryption techniques (and even an interface to plug in
your own special favorite), and will keep the type of private/session
encryption used secret (the type of encrytion used should be
distributed with the private/session key, assuming distinct session
keys; public key encryption obviously can't have a secret type).  But
it just isn't all that terribly important.

As for fooling the bad guys by putting a bogus wrapper on messages:
that might possibly work for a bit, but since the idea has been posted
here, you can probably count on them to be onto that trick.  That's
the difficulty in steganography (which is what that is a variant of);
it only works if the enemy doesn't know about it.

(BTW, I'm new to this stuff.  "Steganography" is the word meaning the
tricks of hiding the messages, isn't it?)

If you want a few simple tricks to set up extra-secure communication
channels, these occur to me (using PGP, similar for other systems):

    Try to keep your "public" key(s) secret, and frequently change
    them.  Make sure your system for changing and updating them is
    reliable (the bad guys might prevent some of your messages from
    being delivered).

    Hack PGP to produce something that looks exactly like an encrypted
    message.  But put random or bogus data inside (there are a couple
    of possibilities here, depending on what you think the attack will
    be based on; ideally you will be a lot more knowledgeable than I
    am when you design this).  Then have this program send off
    messages an order of magnitude more often than you do yourself.
    This makes the bad guys work a lot harder doing per-message
    attacks (they have to try to decrypt a lot of bogus messages).  It
    also limits the usefulness of traffic analysis (you should tune
    the message generation to send fewer bogus messages when you send
    more real ones).  Your recipient can just discard the messages
    that don't decipher properly.  NB: this doesn't affect attacks
    based on factoring the RSA public key.

--Lon Willett
  willett@math.utah.edu
