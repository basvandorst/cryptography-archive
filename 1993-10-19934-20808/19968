Newsgroups: sci.crypt,comp.security.misc,alt.security
Path: msuinfo!uwm.edu!math.ohio-state.edu!usc!elroy.jpl.nasa.gov!ucla-cs!geoff
From: geoff@ficus.cs.ucla.edu (Geoff Kuenning)
Subject: Re: Secure identification of software versions
Message-ID: <1993Sep30.220019.5389@cs.ucla.edu>
Sender: usenet@cs.ucla.edu (Mr Usenet)
Nntp-Posting-Host: exeter.cs.ucla.edu
Organization: UCLA, Computer Science Department
References: <1993Sep28.210824.15279@cs.ucla.edu> <1993Sep29.094815.25347@infodev.cam.ac.uk>
Date: Thu, 30 Sep 93 22:00:19 GMT
Lines: 31
Xref: msuinfo sci.crypt:19968 comp.security.misc:5452 alt.security:12314

In article <1993Sep29.094815.25347@infodev.cam.ac.uk>
rja14@cl.cam.ac.uk (Ross Anderson) writes:

> You have to validate the compiler too, or the attacker will just put the 
> trapdoor there instead.

...and similarly any libraries used, and perhaps other involved
software such as the shell used to invoke it, the "make" command,
etc...

Thanks for pointing this out;  it hadn't occurred to me.  I guess this
means that, as a practical matter, the answer is "no, you can't
validate source."

> There was an article on this about ten years ago
> (a Turing lecture I think) - the writer showed how you could propagate an

It was Ken Thompson's Turing lecture, as I recall.  Most interesting
reading.

> On the other hand, identifying an executable by means of a digital
> signature is fairly straightforward.

In my case, I'd want each executable to have access to a list of
trusted signatures.  I presume that this couldn't be built in, since
it would change the cryptographic hash.  However, it would probably be
OK to read it from a file, since presumably the honest user has no
incentive to modify the file to allow connections from the dishonest
ones.
-- 
	Geoff Kuenning	geoff@maui.cs.ucla.edu	geoff@ITcorp.com
