Path: msuinfo!netnews.upenn.edu!newsserver.jvnc.net!news.edu.tw!news!nctuccca.edu.tw!uunet!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!athena.mit.edu!fuellen
From: fuellen@athena.mit.edu (Georg Fuellen)
Newsgroups: comp.ai.genetic,sci.crypt
Subject: Re: What are the best random numbers for genetic algorithms (was: Re: GA random no. gen.
Message-ID: <29i2fk$hsr@senator-bedfellow.MIT.EDU>
Date: 13 Oct 93 23:20:20 GMT
References: <29e54i$e6c@fbi-news.informatik.uni-dortmund.de>  <RICE.93Oct12114922@hpp-ss10-1.stanford.edu>  <29f8bm$gcu@senator-bedfellow.MIT.EDU>  <1993Oct13.033953.18408@mnemosyne.cs.du.edu>  <1993Oct13.103015.11420@infodev.cam.ac.uk> <MJOHNSON.93Oct13071535@netcom
Organization: Massachusetts Institute of Technology
Lines: 74
NNTP-Posting-Host: milanese.mit.edu
Xref: msuinfo comp.ai.genetic:1611 sci.crypt:20656

Summary: The Blum-Blum-Shub generator is an oldtimer, 
         The Micali-Schnorr generator is not that unefficient,
         Linear Congruential Generators are predictable (i.e. not random)

In article <MJOHNSON.93Oct13071535@netcom4.Netcom.COM>, 
mjohnson@netcom4.Netcom.COM (Mark Johnson) writes:
|> Source code for the Blum-Blum-Shub cryptographically strong
|> random number generator, is available on the Michigan
|> State ftp server.
|> 
|> As you would expect, in exchange for its cryptographic
|> strength, it is slow.  Very slow.

Well, this guy doesnt count. It's almost 10 years old.
The paper was submitted in 1884, I think. Well, ok, you can add 100 years,
but it's still an oldtimer :-)

In article <1993Oct13.033953.18408@mnemosyne.cs.du.edu>, 
colin@nyx.cs.du.edu (Colin Plumb) writes:
[...]
|> >[MS91]     S. Micali, C.P. Schnorr, Efficient, Perfect Polynomial Random Number
|> >   Generators. J. Cryptology, 1991, pp. 157-172.
|> 
|> Here, "efficient" means parallelizable.  It's still a lot of work.

Yes, in the end Micali and Schnorr propose a parallel version.
But the "sequential polymomial Generator" they propose based on RSA
is rather efficient even w/o parallelization, especially if their conjecture
holds that more than log(log(modulus)) bits can be extracted per cycle. 
But you're right, linear congruential generators are more efficient
and easier to implement.

In article <29hg8c$dhm@senator-bedfellow.MIT.EDU>,
apk@athena.mit.edu (Alan Kaufman) writes:
|> "Is a RNG good?"  Well, the place to turn is Knuth's book, 
|> Semi-Numerical Algorithms.
|> 
|> Also, "good" depends on context.  If you are using a sequence of 
|> calls to a RNG to generate n-tuples, and that particular RNG has
|> some unpleasant lattice structure in n-space, that would be "bad".
|> The same RNG used for a different application might be fine.
|> 
|> In any event, here's a simple RNG, Marsaglia's "SuperDuper" generator,
|> with good properties (ie it passes all the basic and not so basic tests
|> for a sequence of iid uniforms).  This is the RNG used in popular
|> statistics language S-PLUS, if that means anything.
|> 
|> Go to the source -- read Knuth.
|> 
|> Good luck,

Good luck. Marsaglia's "SuperDuper" contains a linear congruential generator,
which IS PREDICTABLE (not random) [Stern87]. I doubt whether combining that one
with a Tausworthe generator makes things much better.
But I'd like to be corrected.
Anyway, "SuperDuper", "AWC/SWB" or "Ultra" may give you sufficient
randomness in a lot of cases. 

Even if a generator passes "all [...] tests for a sequence of iid uniforms",
I think it's still far from unpredictable, which according to 
Yao's Test Theorem [Yao82],[Kranakis85] is equivalent to passing 
_all_ polynomial size statistical tests asymptotically. 
Again, I'd like to be corrected.

References:
[Stern87]  J. Stern, Secret Linear Congruential Generators are 
   not Cryptographically secure. Proc. of IEEE STOC, 1987, pp. 421-426        
[MS91]     S. Micali, C.P. Schnorr, Efficient, Perfect Polynomial Random Number
   Generators. J. Cryptology, 1991, pp. 157-172.
[Kranakis85] E. Kranakis, Primality and Cryptography, 1985.

georg
fuellen@mit.edu
The transitive closure of all disclaimers made on usenet last year applies to this message.
