Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!wupost!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: Re: IDEA key questions
Message-ID: <16C66116A2.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
References:  <1993Oct12.172118.14655@uwasa.fi>
Date: Wed, 13 Oct 93 19:48:47 CDT
Lines: 39

>>So just do an MD5 hash of the password first. This will give you 128
>>pretty regularly distributed bits, if MD5 is any good...
>
>A better approach might be to encrypt a password with itself multiple times.
>IDEA itself should distribute bits regularly at least as good as MD5.
 
   Hmmm.  This is true, but it's easy to screw up the implementation.
 
   Keep in mind that your output key needs to depend on at least as many
passphrase-dependent bits as there are key bits to generate.  For example,
suppose you used a key not derived from the passphrase, K, to generate a
key from a passphrase.  Suppose you have a buffer of 256 bytes, and you
simply fill the buffer up from the left with passphrase bytes.  Now, if
you encrypted the buffer forward in CBC mode with K, your last 128 bits
in the buffer would usually wind up depending totally on the 64 bits of
state carried into the next to last block's encryption.  Even if the
passphrase was repeated to fill the buffer, the last 64 bits of buffer
would probably contain far less than 64 bits of entropy, so even with
the first 64 bits of key based on a strong 64-bit hash of the passphrase,
the last 64 bits would be weaker.
 
   You need to make sure your key-generator carries at least as many bits
of internal state as there are key bits.  (Straight MD2, MD4, MD5, or SHS
will work well for 128-bit keys without modification, to the extent that
each of those hash functions is one-way, diffuses entropy well, and puts
out uncorrelated output bits.  For 3-key triple encryption, even SHS will
need to be modified or used carefully, or we'll be basing our 168-bit keys
on 160-bit internal state.)
 
   Of course, you can carry 128 bits of internal state in an IDEA-based
key generator, but it takes a bit more work....  (Ie, use some hashed-
together version of the passphrase's bits as a key, then use that key
to hash together passphrase bits for your output key.  Or, keep two
64-bit blocks of state, and make sure that each one is dependent on the
other and on each passphrase bit....)
 
>Mike Hensel
 
    --John Kelsey, c445585@mizzou1.missouri.edu
