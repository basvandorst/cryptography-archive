Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!psinntp!psinntp!crypto!mab
From: mab@crypto.com (Matt Blaze)
Subject: Re: crypto drivers && defraggers
References: <5793@wet.uucp> <29eaef$o6t@cs.umb.edu>
Organization: Research
Date: Tue, 12 Oct 1993 17:03:10 GMT
Message-ID: <1993Oct12.170310.10786@crypto.com>
Distribution: usa
Lines: 46

jbb@terminus.cs.umb.edu (John B. Brown) writes on the problems of trying to
protect files with an encrypting disk driver:
...
>	Both NFS and RFS transfer streams at application level,
>ergo, plaintext. The plain-text would be available to any and
>all present detection methods every time the disk was accessed.
>	It doesn't sound like plug and play, to me.

Right.  There are at least four good reasons why the disk device is usually
too low an abstraction for protecting file data.  First, as you observe,
in a client-server setup the network traffic remains in the clear,
and it's almost always easier to compromise network traffic than it
is to steal a physical disk.  Worse, such an arrangement requires
unconditional trust in the both your file server and your connection
to it, since the client keys are maintained there.  Second, the granularity
seen at the driver (disks) may not match the granularity at which you
want to assign keys (files, directories, whatever).  Even if
you do want to protect an entire disk with the same key, backups
and restores become cumbersome (or insecure)  if you can't easily
manipulate individual encrypted files.  Third, again
in client-server environments, the expensive encryption operations
take place at the server, even though it doesn't need access to
the cleartext.  This doesn't scale very well, and could quickly
lead to bottlenecks if several clients require encryption services
simultaneously.  Finally, portability becomes something of a
nightmare when the encryption scheme depends on the details of
the disk layout, etc.

A better solution is to encrypt in the file system.  This
has the advantage that it can use whatever granularity the
FS naturally offers for grouping files for key management, you
don't depend on details of the driver or disk layout, and you
can do everything on the client side.  This last point is
especially important with shared file servers - you get encryption
of the network "for free" with no work at the server, and you
don't have to trust the server with cleartext or keys.

I outline these points and present the design of an encrypting
file system for Unix, in my paper "A cryptographic file
system for Unix", which will be at the ACM Conference on
Computing and Communication Secruity next month.  You
can ftp a PostScript preprint from research.att.com in
the file /dist/mab/cfs.ps .

-matt

