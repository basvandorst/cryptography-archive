Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!sol.ctr.columbia.edu!news.kei.com!ub!acsu.buffalo.edu!boyd
From: boyd@acsu.buffalo.edu (Daniel F Boyd)
Subject: Re: PEM Crypto Discussion: Restart
Message-ID: <CECFLC.69G@acsu.buffalo.edu>
Sender: nntp@acsu.buffalo.edu
Nntp-Posting-Host: autarch-14.acsu.buffalo.edu
Reply-To: boyd@acsu.buffalo.edu (Daniel F Boyd)
Organization: UB
References: <1993Oct2.210838.761@cactus.org>
Date: Sun, 3 Oct 1993 22:53:35 GMT
Lines: 61

In article <1993Oct2.210838.761@cactus.org> ritter@cactus.org 
(Terry Ritter) writes:
>  1. PEM openly and unnecessarily displays the existence of a cipher
>     in the construct:   ----- BEGIN PRIVACY-ENHANCED MESSAGE -----.

The cipher is generally known already, as part of the standard.
Otherwise, people couldn't communicate with the standard.  The cipher
is also already strong enough to resist attack or PEM wouldn't be
using it.  Sending big blocks of apparently-random noise displays the
existence of a cipher anyway.

Finding out what cipher you're using is the EASY part for the enemy.
Breaking the cipher itself is the hard part.

>  2. PEM openly and unnecessarily discloses the cipher identification
>     and mode (for example, "DES-CBC").
> 
>     Again, this discloses something which should be private.

No, THE CIPHER IDENTIFICATION AND MODE IS ASSUMED TO BE PUBLIC.
That's the Fundamental Assumption of Cryptography; the enemy knows
everything about the system EXCEPT your private key.

>     Again, it is unnecessary to openly display this information,
>     because the cipher specification could simply be transferred
>     with the key, or negotiated as a conversation continues from an
>     initial contact in a known cipher and mode (DES-CBC).

How can you have an initial contact in DES-CBC?  DES is a private-key
cipher.  When was the DES key transmitted, to enable the recipient to
read this initial contact?

Besides, remember that the enemy will have a copy of the PEM standard,
so any standardized initial contact will be understandable by the
enemy -- unless you use a public-key system.

>  3. PEM seems to unnecessarily prohibit the direct use of ciphers
>     which are designed to produce radix-64 ciphertext, requiring
>     instead ciphers to produce "binary" (e.g., radix-256) data,
>     which is then coded into network-transportable ASCII.

You have this backwards.

It's more restrictive to REQUIRE a cipher to produce radix-64
ciphertext, than to ALLOW it to produce arbitrary binary ciphertext.

>     This is wrong, because it prevents a cipher designer from
>     incorporating the radix-64 coding in the cipher itself, 

Nothing prevents the cipher designer from including any transformation
they want to.  The PEM standard just says, 'When you're through,
here's how to map to ASCII'.

>  4. Vesselin Bontchev points out that "A public key encrypted
>     message should not reveal who has signed it or who is able to
>     decrypt it."

Watching the routing of the message betrays this anyway.  You can't
foil traffic analysis except by sending lots of fake messages.


