Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!vixen.cso.uiuc.edu!sdd.hp.com!news.cs.indiana.edu!mvanheyn@cs.indiana.edu
From: Marc VanHeyningen <mvanheyn@cs.indiana.edu>
Subject: Re: PEM Crypto Discussion: Restart
Message-ID: <28720.749846032@prickly.cs.indiana.edu>
Sender: mvanheyn@cs.indiana.edu
Organization: Computer Science Dept, Indiana University
References: <1993Oct2.210838.761@cactus.org> <21106.749708812@moose.cs.indiana.edu> <1993Oct5.074229.24052@cactus.org>
Date: Tue, 05 Oct 1993 13:33:52 -0500
Lines: 167

Thus said ritter@cactus.org (Terry Ritter):
> In <21106.749708812@moose.cs.indiana.edu>
>  Marc VanHeyningen <mvanheyn@cs.indiana.edu> writes:
>>> 1. PEM openly and unnecessarily displays the existence of a cipher
>>>    in the construct:   ----- BEGIN PRIVACY-ENHANCED MESSAGE -----.
>>[...]
>>
>>For the use of cryptographic mail to be widespread, it must be
>>convenient.  This means that user agents must be able to detect
>>encrypted messages so they may be processed automatically.  This also
>>means that Bad Guys will be able to detect encrypted messages.
>
> The way this response is constructed, I read it as supposedly being
> an argument that *if* we have cryptographic mail, *then* user agents
> must be able to identify an enciphered message *from the message
> itself*.  This argument is only partially correct.  While it *is*
> necessary to announce the *initial use* of cipher (which should be
> the default cipher); it is *not* necessary to announce this in
> all subsequent messages, as PEM does.

What you're talking about is making each message part of an ongoing
conversation in which there is "state" information from previous
messages which is critical to decoding subsequent messages.  This
could be a good idea for some applications, though it introduces tons
of additional concerns both for the specification and the
implementation.  How do you handle messages that arrive out of order?
How about messages that are simply lost?  That cross in mid-stream?
How much state information will there be?  How is it stored?  What if
it's lost?  What if it's compromised?  What if I want to be able to
read and send mail from multiple locations but I don't want to have to
constantly be synchronizing state information about which keys I use
with whom?  How much will the process of acceptance and implementation
be slowed by adding all this complexity?  How much benefit will the
average user who is not a cypherpunk get from all this?

>>> 3. PEM seems to unnecessarily prohibit the direct use of ciphers
>>>    which are designed to produce radix-64 ciphertext, requiring
>>>    instead ciphers to produce "binary" (e.g., radix-256) data,
>>>    which is then coded into network-transportable ASCII.
>>>[...]
>>
>>Such a design would be silly and inefficient in the long run.  The
>>necessity of encoding data into printable characters is a temporary
>>side effect of current mail transport systems
>
> In that case, one might reasonably wonder why PEM requires such
> encoding.  And, since PEM *does* require it, why a cipher design
> which performs better for the same strength (by doing its own
> coding) is not reasonable and efficient in the "short run,"
> whatever that may turn out to be.  If so, it is hardly the place
> of the PEM specification to prohibit it.

PEM is a specification for sending encrypted data via email.  When
the working group began their efforts, there did not exist a standard
for encoding arbitrary binary information for robust transport across
various hostile mail transport systems.  PEM defined one, since such
is obviously necessary for transport of encrypted mail.  MIME liked
PEM's base64 standard, and adopted it themselves; the integration of
PEM and MIME layers the concepts of transport encoding and encryption
as they should be.  PEM has such encoding because it was necessary at
the time.  Once the MIME-PEM spec becomes an RFC, PEM will no longer
require such encoding at that layer.

>>; 8-bit clean mail is not
>>hard to do, and sending unnecessarily encoded data would be wasteful.
>
> I believe the issues of cipher design, and cipher/coding efficiency
> belong to the cipher designer, and not in the PEM specification.
> PEM should specify the transportable character set, plus rules
> establishing line delimiters and length limits, and leave it at
> that.

So how to you guarantee that implementations will be interoperable?
Why should the cipher designer be worrying about mail encoding
considerations?  Of existing "real" ciphers, which of them were
designed with encoding considerations in mind?

I believe that issues of encoding efficiency should be left to general
standards for sending arbitrary content via email such as MIME, and
that it is totally orthogonal to cipher design.

>>The MIME-PEM standard separates encoding into the more general MIME
>>encoding rules, which is where it belongs.
>
> I am discussing PEM because an article on PEM was recently
> published in the Communications of the ACM, and because I think the
> cryptographic design should be better, or at least people should be
> informed that what they are getting is hardly the height of secure
> design.  MIME is something else again.

You were the one who started talking about encoding concerns and how
neat it would be to label message contents as "binary" or "image".
That is what MIME does, and why it would be dumb to re-invent the
wheel.  I am telling you why encoding contents for transport through
mail systems should not be in the same layer as the encryption.
Considering PEM without considering MIME would be like considering it
without considering RFC 821.

>>The fact that the standards making process was done in a mailing list
>>and at working group meetings is hardly unique to PEM.  Newsgroups
>>have much too low a signal-noise ratio to actually accomplish
>>anything.
>
> The RFC's speak for themselves as to the quality of the PEM
> development.  It simply is not possible to argue that a
> cryptosystem which announces the existence of cipher, and names
> the particular cipher and mode in every message, is stronger than
> some design, otherwise equivalent, which does not.   One *could*
> argue that protecting the cipher type has a minor effect, is
> unnecessary, irrelevant, too late, etc., but *not* that the
> current design is *stronger* than the alternative.  I find this
> a disturbing stance for a standard *deliberately* positioned as
> a *privacy* standard.

There are lots of tradeoffs.  Hiding the existence of a cipher would
arguably enhance the security for the paranoid (but then, the truly
paranoid will send their messages hidden in the low-order bits of
soundfiles and images anyway, and there by definition can't be a
standard for such.)  The changes you propose would make the standard
significantly more complex (god knows it's complex enough and has
taken long enough to do already), make it harder to build compliant
implementations, and hinder interoperability.  A better PEM would be
no good if nobody used it because it didn't exist, wasn't reliably
interoperable, barfed on bad state information every time a message
got bounced because a machine was down, or wouldn't let me read email
from my laptop because I didn't remember to update the state
information before I left home.

>>I'll freely agree that there are some significant limitations to PEM,
>>some of which make sense and some of which don't.  It's not at all
>>clear to me that the existing system of distinguished names is a great
>>one, for instance.  But I don't find many of the objections you
>>mention above terribly compelling.
>
> I find my objections very compelling, all the more because they
> cost almost nothing beyond the vision of a better design.  Clearly,
> the group "design vision" did not include a desire to hide either
> the existence of cipher, or the particular cipher used.

This is true.  Presumably they didn't think the costs were worth the
benefits.  Why not ask them?

> But I wonder why, if you see other problems, you have not come
> forth to discuss them in a forum which may be able to understand
> them, and which may be more receptive to that information.
> Certainly there is more chance that end users may be informed
> about inherent security problems in a cryptosystem design when
> doubts are discussed here.  At least the crypies would know.

Whom are you addressing as "you"?  I have nothing to do with the PEM
working group (well, I have exchanged email with a few people who are
on it.)  I wish they were more active on USENET, but considering the
low level of discussion typical here, a discussion of PEM would
probably boil down to something like:

  "There should be more bits in the key, because the strength of any
cipher is directly proportional to the number of bits."
  "You should use uuencode instead of base64 because it's better."
  "PEM is all part of an NSA conspiracy to deprive the people of real
privacy.  They're the same people who faked the moon landings in a
Hollywood soundstage."

I can't say as I blame them for having better things to do.  If you
really want to know the answers, go to the mailing list and ask the
working group.  If you'd rather just grandstand, by all means rave on.
--
Marc VanHeyningen  mvanheyn@cs.indiana.edu  MIME, RIPEM & HTTP spoken here
