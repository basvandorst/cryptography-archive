Path: msuinfo!agate!saffron.CS.Berkeley.EDU!joel
From: joel@saffron.CS.Berkeley.EDU (Joel A. Fine)
Newsgroups: sci.crypt,comp.security.misc,alt.security,rec.games.netrek
Subject: Re: Secure identification of software versions
Date: 30 Sep 1993 22:56:47 GMT
Organization: UC Berkeley, Computer Science Division
Lines: 43
Distribution: world
Message-ID: <28fo7f$aa6@agate.berkeley.edu>
References: <1993Sep28.210824.15279@cs.ucla.edu>
Reply-To: joel@cs.berkeley.edu
NNTP-Posting-Host: saffron.cs.berkeley.edu
Xref: msuinfo sci.crypt:19966 comp.security.misc:5451 alt.security:12313 rec.games.netrek:22704

In article <1993Sep28.210824.15279@cs.ucla.edu>, geoff@ficus.cs.ucla.edu (Geoff Kuenning) writes:
|> I've been trying to come up with an algorithm that would reliably
|> identify a particular program as having been compiled from a certain
|> version of the source code.  This is mostly a mental exercise, arising
|> from the following problem:
|> 
|> There are a number of multi-player games available on the net, for
|> example okbridge and FIBS.  A problem has arisen with cheating and
|> trust; for example, in okbridge I've seen cases where a person logged
|> in four times under four different names, and then deliberately played
|> each hand so that one of the four would get an impossibly high score
|> (generally by having the losing side resign instantly).  There are
|> various programmatic things that can be done to alleviate some of
|> these problems, but if you're distributing the game as source code,
|> there's nothing to prevent a cheater from modifying the source to work
|> around the prevention code.
|> 
|> "OK," I thought, "let's do a cryptographic hash of the source code,
|> pass the identifier to the remote side, and let them do a comparison
|> against the hashes of all known versions."  But a bad guy could easily
|> interpose a "good" copy of the source into whatever process was used
|> to generate the cryptographic hash.  (For example, since the hash
|> would have to be well-known, he could just use a debugger to patch the
|> correct value into the compiled binary).  I came up with some slightly
|> more complicated schemes, but as fast as I invented them, I invented
|> simple attacks that would defeat them.
|> 
|> So, as an intellectual problem (I doubt that, even if I ever write an
|> Internet game, I'd have time to implement any such security feature),
|> is there any way to securely identify a remote client as having been
|> compiled from a particular source?  Note that I am explicitly
|> excluding binary distributions from the problem statement (I presume,
|> though I haven't thought it through, that binary distributions are a
|> much simpler problem but still non-trivial).


Take a look at netrek. Its authors have come up with a clean, public-key based
solution to this problem.

(Any netrek hackers out there want to send this person a pointer to the docs?)

- Joel Fine
joel@cs.berkeley.edu
