Path: msuinfo!uwm.edu!rutgers!news.cs.indiana.edu!mvanheyn@cs.indiana.edu
From: mvanheyn@cs.indiana.edu (Marc VanHeyningen)
Newsgroups: sci.crypt
Subject: Re: PEM Crypto Discussion: Restart
Message-ID: <7589.749963635@moose.cs.indiana.edu>
Date: 7 Oct 93 03:13:55 GMT
References: <1993Oct2.210838.761@cactus.org> <28720.749846032@prickly.cs.indiana.edu> <1993Oct6.074405.21503@cactus.org>
Sender: mvanheyn@cs.indiana.edu
Organization: Computer Science Dept, Indiana University
Lines: 110

Thus said ritter@cactus.org (Terry Ritter):
> In <28720.749846032@prickly.cs.indiana.edu>
> Marc VanHeyningen <mvanheyn@cs.indiana.edu> writes:
>>What you're talking about is making each message part of an ongoing
>>conversation in which there is "state" information from previous
>>messages which is critical to decoding subsequent messages.  This
>>could be a good idea for some applications, though it introduces tons
>>of additional concerns both for the specification and the
>>implementation.  How do you handle messages that arrive out of order?
>>How about messages that are simply lost?  That cross in mid-stream?
>>How much state information will there be?  How is it stored?  What if
>>it's lost?  What if it's compromised?  What if I want to be able to
>>read and send mail from multiple locations but I don't want to have to
>>constantly be synchronizing state information about which keys I use
>>with whom?  How much will the process of acceptance and implementation
>>be slowed by adding all this complexity?  How much benefit will the
>>average user who is not a cypherpunk get from all this?
>
> [ ... ]
> Questions like these are a normal part of design.  Finding the
> answers, and a design which has the right answers, is what design
> people do.  It may take more than a minute or so.

In other words, you don't know how to solve the above problems.  I
assert that it is not possible to solve them without creating a
bloated standard that is less robust, less elegant, less likely to be
successfully implemented and used widely, and generally less useful.

[snip]

>>Why should the cipher designer be worrying about mail encoding
>>considerations?
>
> Because a designer who does so can reap the benefit of using the
> additional complexity into the encoding step, thus producing a
> stronger cipher for little additional processing cost.  The name
> of the game in software ciphers is strength for speed.

The name of the game in data encoding is to balance maximum
bandwidth against maximum portability across transport systems that
may mung data.  The computational cost of simple encoding is
negligible, and so would be the benefits of the system you claim might
be possible.

>>Of existing "real" ciphers, which of them were
>>designed with encoding considerations in mind?
>
> Presumably, none.  Silly them.  I guess they did not anticipate
> PEM and its particular coding.

Or they thought, correctly, that transport encoding is totally
unrelated to cipher design.

[ more of the same deleted, this gets boring after a while ]

>>Considering PEM without considering MIME would be like considering it
>>without considering RFC 821.
>
> The ACM article appears to describe MIME as multimedia email, which
> PEM is being extended to use.

MIME is more than just multimedia email, though it's often labeled as
that. 

[ ... ]
> I am pointing out that PEM is not an appropriate model for secure
> email in general, unless one has an interest in having less-than-
> the-best-security email.

This is all true.  For the-best-security, you should be using
one-time-pads, the strongest cipher in existence because they are
provably impossible to cryptanalyze.  You also need to generate large
amounts of spurious traffic continuously between every two people on
the planet, so that traffic analysis will not be possible.  And who
knows what else.  The objective is not to provide the-best-security,
but to provide adequate security in a standard which is not too
difficult to implement and use.

[snip]
> that you would have something to say.  Guess I was wrong.

I do have something to say.  If you have well-founded, defensible
complaints about things that PEM can't do, you have a number of
options:

1.  Talk with the working group to find out why they did things the
    way they did, and see if it's possible and desirable to extend the
    standard to nullify your objections.  This is the approach taken
    by RIPEM developers regarding some things, such as using a
    symmetric cipher stronger than simple DES.

2.  Find a different, non-PEM standard more to your liking.  X.400
    doesn't include everything you want, but it has more than PEM.

3.  Create a new standard more to your liking, and get people to
    accept it.

4.  Create an implementation of a mail security program that satisfies
    your vision, and worry about standards and interoperability later.
    This is the approach taken by the PGP camp; they obviously have
    been somewhat successful, though their product falls short of your
    vision of the-best-security.

5.  Whine in vague terms about how something can be done without
    saying how to do it.

Determining which of the above options is most likely to accomplish
anything is left as an exercise to the reader.
--
Marc VanHeyningen  mvanheyn@cs.indiana.edu  MIME, RIPEM & HTTP spoken here
