Path: msuinfo!uwm.edu!cs.utexas.edu!math.ohio-state.edu!darwin.sura.net!europa.eng.gtefsd.com!news.ans.net!malgudi.oar.net!witch!cyberg!fb
Newsgroups: sci.crypt,sci.math
Message-ID: <14@cyberg.win.net>
References: <CErF0o.4nA@chinet.chinet.com><29fg2e$55o@news.delphi.com>
Reply-To: fb@cyberg.win.net (Francis Barrett)
From: fb@cyberg.win.net (Francis Barrett)
Date: Wed, 13 Oct 1993 15:33:06 GMT
Subject: Re: Digits of pi
Lines: 56
Xref: msuinfo sci.crypt:20379 sci.math:54608

 
In article <29fg2e$55o@news.delphi.com>,
TODANIELS@DELPHI.COM (todaniel@news.delphi.com) writes:

>Does someone have a simple formula for computing the digits of
>pi that can be implemented using a basic language like C??

>I know its a loaded question, but I'll take any help I can get.

Providing you have an efficient subroutine package for multiprecision
arithmetic, there are a number of quickly convergent iterations which
can be employed to calculate many digits of Pi.  

My favorite is a quartic iteration based on an elliptic function called
the Singular Value Function of the Second Kind.  It converges exponentially
to 1/Pi as its argument increases.  There is a rich set of "modular 
equations" which algebraically relate values of this function for 
different values of its argument.  Repeating these formulas as iterations
allows us to compute the value of this function for increasingly large
arguments and consequently the value of Pi.

This technique is based on the work of the eccentric Indian
mathematician Srinivasa Ramanujan.

The basic iteration goes like this...

 Y[N+1] = (1-(1-Y[N]^4)^0.25)/(1+(1-Y[N]^4)^0.25)
 A[N+1] = (1+Y[N+1])^4*A[N]-4^(N+1)*SQRT(R)*Y[N+1]*(1+Y[N+1]+Y[N+1]^2)

This will compute approximately 45 million decimal digits of Pi in 
only 12 iterations with R = 4.

This formula works for any positive R, but the initial values of the 
iteration, Y[0] and A[0] are dependent on the R chosen.  A[0] should 
be the Singular Value Function of the Second Kind evaluated at R and 
Y[0] should be the square root of the another function, called the
Singular Value Function of the First Kind, again evaluated at R.

For instance, if we choose R = 2, the correct starting values turn out
to be A[0] = SQRT(2)-1 and Y[0] = SQRT(SQRT(2)-1).

Then the iteration looks like this...

N      Y[N]          A[N]         1/A[N]
0   0.6435942530  0.414213562   2.41421356
1   0.0235239602  0.318310704   3.14158459
2   0.0000000383  0.318309886   3.14159265

As you can see, the convergence to Pi is quite rapid, and each iteration 
gives approximately four times the number of decimal places as the 
previous one.

Using techniques like these, and an efficient multiprecision package,
computation of Pi to millions of places is well within the computational
power of the typical personal computer.


---------------------------------------------------------------
Francis Barrett, F.R.C. |  Thou canst not travel on the path  |
The Cybernetics Guild   |  before thou hast become the Path   |
fb@cyberg.win.net       |  itself.                            |
---------------------------------------------------------------

