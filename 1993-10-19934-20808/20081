Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!usc!cs.utexas.edu!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Subject: Re: PEM Crypto Discussion: Restart
Message-ID: <1993Oct4.034652.29959@cactus.org>
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
References: <1993Oct2.210838.761@cactus.org> <CECFLC.69G@acsu.buffalo.edu>
Date: Mon, 4 Oct 1993 03:46:52 GMT
Lines: 181


 In <CECFLC.69G@acsu.buffalo.edu> boyd@acsu.buffalo.edu (Daniel F Boyd)
 writes:


>In article <1993Oct2.210838.761@cactus.org> ritter@cactus.org
>(Terry Ritter) writes:
>>  1. PEM openly and unnecessarily displays the existence of a cipher
>>     in the construct:   ----- BEGIN PRIVACY-ENHANCED MESSAGE -----.
>
>The cipher is generally known already, as part of the standard.

 *You* apparently assume this.  Apparently the PEM people *also*
 assume this, which is exactly my point.

 *I* do not assume this.

 In the context of cipher *design* it is reasonable to assume that
 The Opponent knows the cipher.

 In the context of *fielding* a cipher system, the knowledge of the
 cipher selection is yet another complication which would be stupid
 to simply give away.


>Otherwise, people couldn't communicate with the standard.

 Nonsense.  Clearly, you have not been reading my articles.

 Only the original cipher (for the first contacts) must be known.
 Then, under cover of that cipher, a new cipher can be negotiated.


>The cipher
>is also already strong enough to resist attack or PEM wouldn't be
>using it.

 Nonsense.  Strength is not a precise, measurable quantity.  There
 is room for substantial disagreement among experts about the
 strength of a cipher.

 PEM currently has one cipher: DES-CBC.  Question:  Now that DES
 alone is shown attackable, just how much extra strength does CBC
 provide; and how do your prove your figure?

 The ability to negotiate ciphers eliminates the need to throw out
 an Email standard just because a particular cipher is found weak.
 The ability to negotiate under cover makes the cipher selection a
 factor of strength, as opposed to simply giving it away.

>Sending big blocks of apparently-random noise displays the
>existence of a cipher anyway.

 Nonsense.  Data compression can produce random-like data.  Computer
 object-code can appear random-like.  Sufficient analysis may well
 detect the difference, but if PEM were implemented properly, each
 and every PEM message would have to undergo such analysis.  This
 helps to minimize the number of organizations capable of attack.


>Finding out what cipher you're using is the EASY part for the enemy.
>Breaking the cipher itself is the hard part.

 Only comparatively.  Announcing the cipher ID is a "red flag" in a
 number of senses:  It deliberately flaunts a sensitive government
 issue, and it may cause problems for particular individuals on
 particular nodes.  Worse, should The Opponent ever be able to
 break a particular cipher, they may find it worthwhile to simply
 scan for the properly-flagged messages which are breakable.  Hiding
 the cipher type would require The Opponent to examine each message.


>>  2. PEM openly and unnecessarily discloses the cipher identification
>>     and mode (for example, "DES-CBC").
>>
>>     Again, this discloses something which should be private.
>
>No, THE CIPHER IDENTIFICATION AND MODE IS ASSUMED TO BE PUBLIC.

 *You* probably do assume it; *I* do not.


>That's the Fundamental Assumption of Cryptography; the enemy knows
>everything about the system EXCEPT your private key.

 I am aware that some people call this "The Fundamental Assumption":
 thus we see the difference between *name* and *reality*.  Certainly
 *I* never cast a vote for that name.

 Actually, in the context of cipher design, this is a fundamental
 *goal*.  Not all goals, unfortunately, are achieved, nor do we, in
 cryptography, necessarily know when they have been missed.  In the
 context of fielding a cipher system, it is silly.


>>     Again, it is unnecessary to openly display this information,
>>     because the cipher specification could simply be transferred
>>     with the key, or negotiated as a conversation continues from an
>>     initial contact in a known cipher and mode (DES-CBC).
>
>How can you have an initial contact in DES-CBC?  DES is a private-key
>cipher.  When was the DES key transmitted, to enable the recipient to
>read this initial contact?

 The delivery of keys through public-key technology is supported
 by PEM.

 Clearly, if we have a cipher, keys must be transported somehow,
 if not by PK, then in some other way.  The data are protected by
 secret-key cipher in any case.  Key transport should be essentially
 irrelevant to hidden cipher-type negotiation.


>Besides, remember that the enemy will have a copy of the PEM standard,
>so any standardized initial contact will be understandable by the
>enemy -- unless you use a public-key system.

 Having a hidden cipher negotiation process means that, once that
 process has occurred, The Opponent will no longer know the cipher.
 Thus, we increase the work factor (at essentially no cost to us
 other than the specification), or require The Opponent to monitor
 every transmission from everybody, all the time.  Any Opponent with
 the power to do *that* need not waste time with silly technical
 attacks on ciphertext.


>>  3. PEM seems to unnecessarily prohibit the direct use of ciphers
>>     which are designed to produce radix-64 ciphertext, requiring
>>     instead ciphers to produce "binary" (e.g., radix-256) data,
>>     which is then coded into network-transportable ASCII.
>
>You have this backwards.
>
>It's more restrictive to REQUIRE a cipher to produce radix-64
>ciphertext, than to ALLOW it to produce arbitrary binary ciphertext.

 OK by me.

 In practice there is no difference, because, given DES-CBC, it is
 still necessary to specify the radix-64 coder.  (I would like to
 see a general User Key to DES key hash standardized as well, since
 this would allow one User Key to be used under various different
 ciphers.)


>>     This is wrong, because it prevents a cipher designer from
>>     incorporating the radix-64 coding in the cipher itself,
>
>Nothing prevents the cipher designer from including any transformation
>they want to.  The PEM standard just says, 'When you're through,
>here's how to map to ASCII'.

 As I understand it, PEM standardizes a particular process which
 takes radix-256 ciphertext to radix-64.  The only way this is
 really practical is if the cipher does produce radix-256 ciphertext.
 If a cipher produces radix-64, it would seem to have to convert
 that to radix-256 to use the standard conversion process.

 Therefore, as far as I can tell, the standard does indeed prevent
 a cipher producing radix-64 from being a practical cipher under PEM.


>>  4. Vesselin Bontchev points out that "A public key encrypted
>>     message should not reveal who has signed it or who is able to
>>     decrypt it."
>
>Watching the routing of the message betrays this anyway.  You can't
>foil traffic analysis except by sending lots of fake messages.

 It is not always true that a particular routing identifies the
 ultimate target.  Indeed, the message could be a ciphered envelope
 containing within it the true ciphered message for forwarding.
 It is not clear than The Opponent would be able to relate the
 reception of one message with the consequent sending of another.

 Forwarding is possible under any Email cipher scheme.

 ---
 Terry Ritter   ritter@cactus.org


