Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!uunet!olivea!decwrl!pa.dec.com!oct17.dfe.dec.com!ryn.mro4.dec.com!3d.enet.dec.com!roth
From: roth@3d.enet.dec.com (Jim Roth)
Subject: Re: What are the best random numbers for genetic algorithms (was: Re: GA random no. gen.
Message-ID: <CEyDr3.LwK@ryn.mro4.dec.com>
Sender: news@ryn.mro4.dec.com (USENET News System)
Organization: Digital Equipment Corporation
References:   <9310132045.AA27577@redwood.csl.sri.com>
Date: Fri, 15 Oct 1993 20:17:55 GMT
Lines: 40


In article <9310132045.AA27577@redwood.csl.sri.com>, boucher@csl.sri.com (Peter K. Boucher) writes...
>|> No way, I am afraid.  I have some papers and other in the pipeline that show
>|> this is not a safe combination.  All right, your chances of being badly
>|> caught are low, but there are some major flaws.  Also note that Marsaglia
>|> does not recommend additive congruential generators on their own, but adds
>|> them to something else (modulo 1).

>Hi.  I wrote an additive congruential generator that is based on an 
>irreducible trinomial (X^1361 + X^378 + 1).  It keeps 1361 longs worth 
>of state (plus a few pointers).  Could you please tell me what's wrong 
>with it, and where I can get something better?

The problem is after you've seen 1361 longs worth of the stream,
you can predict forwards and backwards in time.  Even just outputing
the high k bits of n bit internal state per array element doesn't
really solve the problem since the stream is still easy to predict.

Suggestions involving xoring the output of two streams with
relatively prime periods will help, as will shuffling the output
of one stream with another, but the problem is still that the
nonlinearity is only applied in a simple way.

Cryptographically strong generators should have a much higher degree
of nonlinearity with care taken that the bits are reasonably
unbiased, though I do not know of any general results of, say,
the difficulty of breaking the case of one generator shuffling the
output of another.

In fact, I don't know if merely using one pseudo random bit stream to
decide on dropping bits output by another with relatively prime period
would be secure or not - I've heard of such jittering schemes being
suggested.  This would clearly be a really fast way to generate a good
bitstream if it was viable, though you'd need a fifo to handle the
somewhat unpredictable availability of the next bit...

Has anybody come across anything in the open literature on this?
I think Terry Ritter posted something once.

- Jim
