Newsgroups: alt.security.pgp,alt.security.ripem,sci.crypt
Path: msuinfo!agate!spool.mu.edu!bloom-beacon.mit.edu!news.kei.com!ub!galileo.cc.rochester.edu!news
From: gtf@math.rochester.edu (Geoffrey T. Falk)
Subject: PROPOSAL for the future of privacy on the Internet
Message-ID: <1993Oct24.020017.27478@galileo.cc.rochester.edu>
Keywords: PGP, RSA
Sender: news@galileo.cc.rochester.edu
Nntp-Posting-Host: gauss.math.rochester.edu
Organization: University of Rochester Computing Center
Date: Sun, 24 Oct 93 02:00:17 GMT
Lines: 175
Xref: msuinfo alt.security.pgp:5808 alt.security.ripem:351 sci.crypt:20621

-----BEGIN PGP SIGNED MESSAGE-----

Embracing the Future of Public-Key Cryptography:  A Possible
Direction for the Future of the Internet

<abridged first draft, October 23, 1993>

	(c) 1993 Geoffrey T. Falk
	University of Rochester
	Department of Mathematics
	Rochester, NY 14627
	<gtf@math.rochester.edu>


I. Introduction

The discovery of public-key cryptography by Diffie and Hellman [1]
has sparked a revolution in computer communications. Unfortunately,
most electronic communications are still unprotected. Although
thousands of people worldwide are already using PGP [2] and similar
programs, the technology has not entered widespread use. The barriers
to the widespread dissemination of this technology are twofold:
legal and technical.

The legal considerations are well known. Until the problems with
US export restrictions and patents can be solved, it is unlikely
that we will see public-key cryptography in common use. However,
the current discussions taking place in Washington make me optimistic
that the legal status of PGP and similar software will soon be put
on more stable ground. When the US lifts its export controls on
cryptographic software, it is likely that use of the RSA algorithm
[3] can be licensed, and David Sternlight [4] will finally be happy.

As for the technical considerations, we can take the steps right
now to put the revolution on a sound footing. The main purpose of
this article is to suggest some ways we might proceed. My eventual
hope is that every operating system will come with standardized
public-key facilities, right alongside the standards of UUCP, Mail,
and News.

Much of the functionality of the original PGP (RSA, IDEA, signators,
trust parameters, the "trust web") is fundamental. However, PGP is
itself clumsy and inadequate, and cannot form the mainstay of this
project in its present form.


II. Functionality

Ideally there would be a suite of programs, making up the complete
functionality of the system. Roughly, this will entail one executable
for each of the following functions:

	i)   enciphering and signing messages
	ii)  decrypting messages and verifying signatures
	iii) IDEA [5] for conventional encryption
	iv)  key generation
	v)   Internet key server daemon (see below.)

i), ii) and iii) would provide essentially the same functionality
as does PGP (and should be made compatible with its message formats).
They should be written with a view to completely invisible integration
into existing electronic mail. Ideally, with the possible exception
of conventional encryption, the user should never have to invoke
encryption and decryption directly.

Key generation should be as painless as possible. Requiring the
user to enter hundreds of random keystrokes as a way to generate
random numbers is unacceptable.

[As an aside, I point out that it would be valuable for computers
to come with hardware random number generators built in. Generating
good random numbers in software for cryptographic and other purposes
is a very difficult theoretical problem. On the other hand it is
simple to produce a device (using a noisy diode, for instance) that
produces perfectly random numbers. This is not as absurd as it
sounds. The vast majority of personal computers have built-in system
clocks, because the global computing environment demands it. With
the widespread use of cryptography, random number sources will
similarly be required. Hardware manufacturers take note!]

At present, to make effective use of PGP one must maintain a huge
keyring file containing a copy of everybody's public key. Keyservers
were meant to obviate this need, but for many reasons they are
inadequate. As the key database grows, no server could be expected
to contain a complete list of keys. Rather, I suggest a distributed
approach.

An internet key service protocol would be implemented. Each machine
on the Internet would maintain a list of public keys for its own
users, as well as for those which it serves by non-instantaneous
means such as UUCP. When electronic mail is to be sent, the public
key could be obtained via an automatic request to the recipient's
machine. The sender's machine would then check the validity of the
key (and inform the user if the key is not known to be valid, as
does PGP).

Of course, all keys would have to be signed in order to be used.
I suggest that each Internet node have its own key, and sign the
public keys of all its users and of all adjacent nodes. The physical
connectivity of the Internet would then guarantee that one has
trust connectivity with any person to whom one can send electronic
mail in the first place.


III. Software Design

As the proposed system will be part of the public domain, it will
of course need to be programmer-friendly as well as user-friendly.

Development would be coordinated by one person outside of the US.
A professional programmer versed in principles of good software
design, this person would be responsible for ensuring that all code
contributed to the project is adequately readable and uses good
programming practices and efficient algorithms.

The core cryptographic functions and data structures are encapsulated
into a library that is then be available for use in applications,
such as for instance a public-key analogue of Kerberos, or a secure
talk program. A C++ version of this library would be maintained in
parallel with the up-to-date C version. A version of the library
based on RSAREF [6] would be available to users in the US, and it
would be interchangeable with the non-US version as far as
functionality is concerned. (When the legal situation improves,
this need will be obviated, as well as the need for development to
take place outside of the US.)

Different versions of the software should be made available for
different platforms, rather than the current situation with PGP's
source code having numerous #ifdefs to cope with differing machine
types.


IV. Conclusion

To my knowledge no project of the aforementioned scope or significance
is underway. It will be interesting to see what, if anything,
happens as a result of this article.


V. Footnotes

1 Diffie, W. and Hellman, M. E. <reference>

2 PGP (Pretty Good Privacy) is a piece of software allowing virtually
anybody with a computer to take advantage of the powerful technology
of public-key cryptography. Written originally by Phillip R.
Zimmermann in Boulder, Colorado, PGP development has been moved
outside of the US for legal reasons. The current version contains
contributions by dozens of people and can be compiled on many
different hardware architectures.

3 RSA (Rivest-Shamir-Adelman) public-key cryptosystem, is patented
in the US and Canada. The patent is held by PKP (Public Key Partners)
Inc. The algorithm is based on a mathematical theorem, and many
people believe such things should not be patentable.

4 David Sternlight <strnlght@netcom.com> has frequently expressed
his objections to the use of PGP on legal grounds.

5 IDEA is a conventional cryptosystem used in PGP. It was developed in
Switzerland.

6 RSAREF is a package of RSA algorithms from PKP available within
the US. It is not licensed for commercial applications or for
export. The advantage of using it is simply that of standardization.

-----BEGIN PGP SIGNATURE-----
Version: 2.3a

iQCVAgUBLMnfp6p4Me9Y1dw3AQFi3QQAmdmhFRkym73iwl/ggSlQ3FrfMaJrWXex
rPdzMiDk5UwO6iIIW5+79z8l/tcCkUDAKHZuGI1ieYBEdLheTXpebNGAkYKwvRxi
XwKa395X0JC7iAv+z1WbUknjYbfyqK8d87g4qkffnsSMBtifmtLmhjbvO0nCwIql
dr5QIau0iV8=
=eDR0
-----END PGP SIGNATURE-----
