Newsgroups: sci.crypt
Path: msuinfo!agate!spool.mu.edu!sdd.hp.com!elroy.jpl.nasa.gov!swrinde!cs.utexas.edu!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Subject: PEM Crypto Discussion: Restart
Message-ID: <1993Oct2.210838.761@cactus.org>
Keywords: PEM Cryptography Mail Privacy
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
Date: Sat, 2 Oct 1993 21:08:38 GMT
Lines: 133


 Now that we have gotten through the preliminary objections :-), it
 is time to re-present my thesis that--as presently defined--the
 Privacy Enhanced Mail RFC's have cryptographic problems:


 1. PEM openly and unnecessarily displays the existence of a cipher
    in the construct:   ----- BEGIN PRIVACY-ENHANCED MESSAGE -----.

    This discloses information unnecessarily, and in some future
    situation could cause embarrassment or legal problems for a user.
    It unnecessarily flaunts a sensitive government issue.  Plus,
    it virtually prevents a user from arguing that the decision to
    use cipher is itself a personal, private decision (the letter
    *inside* the envelope) which should not even be open to
    inspection or discussion.

    It is not *necessary* to announce that a message is in cipher,
    because, before such a message can be deciphered, a key must
    have been transported anyway.  And since a key *was* transported,
    the idea that subsequent messages would be in cipher (and in
    exactly what particular cipher) could have been transported
    as well.  Yes, each end would have to "remember" what cipher to
    use--just like they "remember" the keys.


 2. PEM openly and unnecessarily discloses the cipher identification
    and mode (for example, "DES-CBC").

    Again, this discloses something which should be private.

    Again, it is unnecessary to openly display this information,
    because the cipher specification could simply be transferred
    with the key, or negotiated as a conversation continues from
    an initial contact in a known cipher and mode (DES-CBC).  A
    negotiation would normally proceed automatically, without user
    notice or interaction.  Indeed, negotiation should be dynamic,
    and various ciphers might be used in a continuing conversation.
    If we assume that a sizable key was transported, that same key
    could be used for each different cipher.  Each cipher would be
    required to convert an arbitrary-length key (text *or* binary)
    into the internal state required by that cipher.

    Negotiated cipher selection would allow various different ciphers
    to be selected, depending on individual requirements (one size
    does *not* fit all).  Moreover, the use of any of the ciphers
    could be discontinued simply by removing it from each local
    negotiation list, with no system-wide redesign required.
    (Current conversations would have to re-negotiate and eventually
    change to a different cipher, of course.)  When a new cipher
    design comes out, it would only be necessary to install the
    software and place its identifier on the local list.  Thus, the
    scheme converts a requirement for society-wide convulsive change
    into a simple software upgrade.

    While a cipher registry might be useful, such a registry is by
    no means a requirement:  Individual stations could negotiate a
    common cipher identifier as specified by the cipher designer.


 3. PEM seems to unnecessarily prohibit the direct use of ciphers
    which are designed to produce radix-64 ciphertext, requiring
    instead ciphers to produce "binary" (e.g., radix-256) data,
    which is then coded into network-transportable ASCII.

    This is wrong, because it prevents a cipher designer from
    incorporating the radix-64 coding in the cipher itself, thus
    simultaneously gaining efficiency and strength in a translation
    which is otherwise cryptographically useless.

    It is unnecessary, because it would have sufficed to describe
    the standard technique used to encode "binary" ciphertext, while
    leaving the door open for any other encoding, or any cipher
    which produced only the symbols in the network-transportable set.
    (One could argue that alternate ciphers could do this under PEM,
    but the RFC's seem pretty specific about the separation between
    cipher and network-ASCII encoding.)


 4. Vesselin Bontchev points out that "A public key encrypted
    message should not reveal who has signed it or who is able to
    decrypt it."


 And there certainly are other points not related to crypto.


 I have no idea whether there is anything to be done about these
 problems, but I do find it strange that the crypto design was not
 discussed here in sci.crypt before publishing RFC's.  I think an
 open newsgroup discussion must be preferable to the "smoke-filled
 back-room" of a mailing list.  Many of us are simply not interested
 in the politics of the standards process.  The current design is
 less than it could be, regardless of whatever compromises have been
 necessary to achieve some sort of agreement.

 Is PEM better than nothing?  I am not so sure.  The issue is not
 "PEM or nothing":  Email with similar security is available now
 in programs running on individual PC's.  PEM does leak private
 information unnecessarily, and, left unmodified, must foster many
 systems which have these problems.

 I would like to see PEM as the addressed envelope, delivering an
 arbitrary internal message which is coded to network-ASCII for
 transmission.  Perhaps only the first occurrence of ciphering
 would announce itself as a ciphering envelope.  From there, simple
 conventions could govern the interpretation of the first cipher
 from a correspondent as being in DES-CBC.  Simple standards could
 establish the existence of a private control channel riding
 "piggyback" on the private message exchange.  Simple conventions
 could cover the use of this channel in a private negotiation to use
 a better cipher, or to change ciphers (or stop ciphering) mid-
 conversation.  And all of this could occur in a form which looks
 exactly like any other arbitrary internal message.

 There is some advantage to considering the standardization of the
 internal message format to carry control in addition to data.  This
 might support an arbitrary further interpretation of message data
 for currently unknown purposes.  The control area could say (in
 essence) "the message is text,"  "the message is graphics," "the
 message is an 80x86 binary," etc.--all necessary distinctions and
 not, as far as I know, addressed in PEM.  Use of the control area
 to carry the message "start ciphering" could correspond to the
 "first occurrence," described above.

 In any case, it would seem that either every PEM message must be
 ciphered (the use of PEM thus implying "start ciphering"), or there
 must be a (transient) open indication that ciphering has started.
 But there need be and should be no continuous open reminder.

 ---
 Terry Ritter   ritter@cactus.org

