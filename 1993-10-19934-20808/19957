Newsgroups: sci.crypt,comp.security.misc
Path: msuinfo!agate!howland.reston.ans.net!usc!elroy.jpl.nasa.gov!decwrl!csus.edu!netcom.com!strnlght
From: strnlght@netcom.com (David Sternlight)
Subject: Re: DES is dead...
Message-ID: <strnlghtCE6GoB.HM3@netcom.com>
Organization: DSI/USCRPAC
References: <Sep.7.00.34.20.1993.15481@net.bio.net> <1993Sep29.022010.12390@cirrus.com> <strnlghtCE3xL9.4G2@netcom.com> <PCL.93Sep30112940@rhodium.ox.ac.uk>
Date: Thu, 30 Sep 1993 17:31:23 GMT
Lines: 60
Xref: msuinfo sci.crypt:19957 comp.security.misc:5445

In article <PCL.93Sep30112940@rhodium.ox.ac.uk>,
Paul C Leyland <pcl@ox.ac.uk> wrote:
>In article <strnlghtCE3xL9.4G2@netcom.com> strnlght@netcom.com (David Sternlight) writes:
>
>   Key search, being sequential, has quite different probability properties
>   than independent coin tosses, unless the key search is random rather than
>   sequential. Random key search is unlikely to be used in a "brute force"
>   approach.
>
>   Or am I missing something?
>
>I think you may be missing something.  There are many ways of searching
>a space sequentially.  It is not clear, in general, that you as a victim
>will be able to predict the order in which keys will be tried by an
>attacker.  For instance, suppose that I have a number of DES key search
>engines which is relatively prime to 2^56.  To be concrete, let us say I
>have a million and one of them.  I now pick a million and one random
>starting points, with the constraint that each starting point modulo a
>million and one is a different integer.  I then perform a linear search
>on each machine, incrementing the key used by each machine by a million
>and one between trials.  I cover the search space simply and
>economically, but you are hard pushed to guess which part of it will be
>searched early or late.
>

I think not. This whole discussion is one "in probability". That was the
original (and I think incorrect) argument.

Thus as long as the search scheme tries any key only once, after it has run
for a while, if one changes one's key there is a finite probability one has
changed it to a key that has already been unsuccessfully searched, and thus
the probability of detection on a single search of the space (in that
instance) falls to zero. The next step in the calculation is to determine
the probability that any key falls into the now-excluded space. Given the
complexity, simulation is one approach and another reader has kindly set up
a simulation model (which he posted) and drawn the results. It shows that my
analysis is correct and the original poster's incorrect on empirical
grounds, though I have been arguing on theoretical ones.

Key variables also include the length of the full space search, the
frequency of key change, etc. But except for a true pseudo-random search in
which the same key might be repeatedly tested, or in the case of a trivial
cryptosystem where the full space search time is much less than any
reasonable key change interval, the original poster is incorrect. Since one
cannot guarantee the search scheme used by an adversary, the original
poster's idea that one shouldn't change keys is also unwise.

(Some here have made the correct observation that changing keys doesn't
prevent past traffic from being cracked. That wasn't, however, the original
poster's argument.)

David


David


-- 
David Sternlight         When the mouse laughs at the cat,
                         there is a hole nearby.--Nigerian Proverb
