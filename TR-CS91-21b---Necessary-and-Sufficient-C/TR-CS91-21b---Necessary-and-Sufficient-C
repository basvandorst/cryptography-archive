                             __                         __
           || Prob {C2n [G1; G 1] = 1} - Prob {C2n [G3; G 1] = 1} | -
                             __
            | Prob {C2n [G3; G 1] = 1} - Prob {C2n [G3; G2] = 1} |  -

         | Prob {C2n [G3; G2] = 1} - Prob {C2n [P2n ; P2n ] = 1} || <   _1__nc2


If either G2 or G3 is not pseudorandom, it can be shown that G1 is not super

pseudorandom. As a justification, consider there is a distinguishing circuit wi*
 *th

m oracle gates such that distinguishes G3 from a random permutation with a

probability better than _1__nc2when m random 2n bit strings are input to its

oracle gates, then there is a super distinguishing circuit with at most 2m

normal oracles and 2m inverse oracles for G1 with the same probability.

Consider it can be proven that G3 is pseudorandom. It can be shown that

                             __                         __            1
            | Prob {C2n [G1; G 1] = 1} - Prob {C2n [G3; G 1] = 1} |< ____nc2

             __
Since G3 and G 1 would be independent of each other, and G1 is assumed to be

super pseudorandom. Hence, the following inequality would also be valid,

                            __
           | Prob {C2n [G3; G 1] = 1} - Prob {C2n [G3; G2] = 1} |  +

          | Prob {C2n [G3; G2] = 1} - Prob {C2n [P2n ; P2n ] = 1} |<    _1__nc2


It can be concluded that


            | Prob {C2n [G3; G2] = 1} - Prob {C2n [P2n ; P2n ] = 1} |< _1__nc2


In other words, G2 and G3 are independent of each other. This completes the

proof of Theorem 1.                                                            2



Corollary  1    Let  f1; f2; : :;:fi 2r Fn  such  that  G1 = _(fi; : :;:f1)  be*
 *  a

pseudorandom  permutation.   G1  is  super  pseudorandom  if  and  only  if

G2 = _(fi; : :;:f2)  and  G3 = _(f1; : :;:fi-1)  are  pseudorandom

permutations.



Proof  :  It was shown in lemma 2, given f2 and fi-1 are two independent

pseudorandom functions, if G2 and G3 are pseudorandom, they would be

independent too. As it was shown in Theorem 1, when G2 and G3 are

independent, G1 is super pseudorandom. Moreover, It was also shown that if


G1 is super pseudorandom then G2 and G3 are independent of each other, and

when they are independent both should be pseudorandom and satisfy the

conditions given in the axiom of Theorem 1. This finishes the proof.         2


Ohnishi [3] showed it is possible to use two independent pseudorandom

functions, instead of three, in a three round DES-like structure to obtain a

pseudorandom permutation, i.e., _(f2; f2; f1) is a pseudorandom permutation

generator. Applying his results and result of Theorem 1 the following corollary

can be shown to be true.


Corollary  2    Let  f1; f2 2r Fn ,  then  G1 = _(f2; f2; f1; f1)  is  a  super

pseudorandom  permutation.


Although Theorem 1 states the necessary and sufficient conditions for super

pseudorandomness in probabilistic terms, in practice we can construct super

distinguishing circuits with a distinguishing probability near 1, for some

structures. We investigate the validity of the above theorem and we construct

super distinguishing circuits for some special cases.


Lemma  3   Let  f 2r Hn  then  _(f 2; f; f; f )  is  not  super  pseudorandom  *
 *and

there  is  a  super  distinguishing  circuit  SC2n  with  4  normal  and

inverse  oracle  gates.



Proof  :  Considering Theorem 1, _(f 2; f; f; f ) would be super pseudorandom

if _(f 2; f; f ) and _(f; f; f ) are independent. Zheng, Matsumoto and Imai [6]

showed that it is impossible to get pseudorandom permutation with three

rounds of DES-like permutations and a single random functions, so neither

_(f 2; f; f ) nor _(f; f; f ) are pseudorandom, and they are not independent.

Therefore _(f 2; f; f; f ) cannot be a super pseudorandom permutation, due to

Theorem 1. The structure of a super distinguishing circuit SC2n is as follows:

Let O^0; ^O1; ^O3be normal oracle gates and O~2 be an inverse oracle gate. Deno*
 *te

by (Lu k Ru ) and (Su k Tu ) the input to and the output of the u-th oracle gate

respectively, and by 0n 2  n a n-bit string of all 0.


   1.  The input to O^0 is (L0 k R0) = (0n k 0n )


   2.  The input to O^1 is (L1 k R1) = (0n k T0)


   3.  The input to O~2 is (L2 k R2) = (0n k 0n )


   4.  The input to O^3 is (L3 k R3) = (S2 k T2   T0)


   5.  SC2n outputs a bit 1 if and only if T3 = T0   T1


When a function _(f 2; f; f; f ) is used to evaluate the oracle gates the

probability that SC2n outputs a bit 1 is equal to 1, and when a function is

drawn randomly and uniformly from P2n the probability that SC2n outputs 1

is equal to _1_2n. Thus SC2n is a super distinguishing circuit for _(f 2; f; f;*
 * f ). 2


Lemma 3 can be generalised in the following theorem.


Theorem  2   Let  f 2r Hn ,  there  is  a  super  distinguishing  circuit  for

_(f l; f k; f j; f i)  with  p + q + 4  normal  and  inverse  oracle  gates,  w*
 *here

p; q  satisfy

                             i + j - l = (q - p)(j + k)



Proof  :  Due to the impossibility results of Zheng et al. [6], neither

_(f l; f k; f j) nor _(f i; f j; f k) is pseudorandom. Thus, due to Theorem 1,

_(f l; f k; f j; f i) is not super pseudorandom .

We managed to construct a distinguisher for the following case:

Let O^0; ^O1; : :;:^Op+1 and O^p+q+3  be normal oracle gates and O~p+2; : :;:~O*
 *p+q+2

be inverse oracle gates, where p; q satisfy: i + j + k + p(j + k) = l + k + q(j*
 * + k)

or,

                             i + j - l = (q - p)(j + k)

The structure of SC2n is as follows:


   1.  The input to O^0 is (L0 k R0) = (0n k 0n )


   2.  The input to O^1 is (L1 k R1) = (0n k T0) and the input for O^2 to O^p+1*
 * is

       (Lu k Ru ) = (0n k Tu-1   Ru-1 )


   3.  The input to O~p+2 is (Lp+2 k Rp+2 ) = (0n k 0n )


   4.  The input to O~p+3 is (Lp+3 k Rp+3 ) = (Sp+3 k 0n ) and the input for O~*
 *p+4

       to O~p+q+2  is (Lu k Ru ) = (Lu-1   Tu-1  k 0n )


   5.  The input to O^p+q+3  is (Lp+q+3  k Rp+q+3 ) = (Sp+q+2  k Tp   Tp+q+2 )


   6.  SC2n outputs a bit 1 if and only if Tp+q+3  = Tp   Tp+1


When a function _(f l; f k; f j; f i) is used to evaluate the oracle gates and

i + j + k + p(j + k) = l + k + q(j + k), the probability that C2n outputs a bit*
 * 1

is equal to 1, and when a function is drawn randomly and uniformly from P2n

the probability that C2n outputs 1 is equal to _1_2n.                          *
 *   2
6    Super  Pseudorandomness  in  Generalised  DES-like  Permutations


A DES-like permutation is a permutation in P2n by applying functions in Hn .

Zheng et al. [7] made three types of permutations in Pkn by generalisations of

the construction of the DES-like permutation and application of functions in

Hn , and called them type-1, type-2 and type-3 Feistel type transformations.

They suggested that a permutation consisting of k + 2 rounds of type-2 or

type-3 transformations is a super pseudorandom permutation, where each

round is associated with a random function tuple. In this section, we show that

k2 rounds of type-1 transformation are required to get a super pseudorandom

permutation.

First, we give the definition of type-1 transformations, according to [7]. Then,

the necessary and sufficient conditions for super pseudorandomness of this type

of transformations would be presented, and accordingly, some cases which are

pseudorandom but cannot be super pseudorandom would be given. Finally, it

is shown that k2 rounds of type-1 transformations makes a super

pseudorandom permutation.



6.1    Type-1  Transformations


Let g1;i2 Hkn be a function associated with an fi 2 Hn and be defined by

           g1;i(B1 k B2 k : :k:Bk) = (B2   fi(B1) k B3 k : :k:Bk k B1)

where Bj 2  n for 1   j   k and k 2 N . Functions defined in such a way are

called type-1 transformations. g1;ican be decomposed into g1;i= Lrot O ss1;i,

where

         ss1;i(B1 k B2 k : :k:Bk)   =    (B1 k B2   fi(B1) k B3 k : :k:Bk)

         Lrot(B1 k B2 k : :k:Bk)    =    (B2 k B3 k : :k:Bk k B1)

g1;iis an invertible permutation on  kn , and its inverse, denoted by __g1;iis

given by __g1;i= ss1;iO Rrot where

              Rrot(B1 k B2 k : :k:Bk) = (Bk k B1 k B2 k : :k:Bk-1 )


For f1; f2; : :;:fs 2 Hn , define _1(fs; : :;:f2; f1) = g1;sO :_:O:g1;2O g1;1. *
 *Note

that _1 is an invertible permutation on  kn , and its inverse _ 1 is defined by

                      __                    __    __         __
                      _1(f1; f2; : :;:fs) = g1;1O g1;2O : :O:g1;s



6.2    The  Necessary  and  Sufficient  Conditions  for  Super

       Pseudorandomness  of  Type-1  Transformations


It can be shown that 2k - 1 rounds of type-1 transformations where, each

round is associated with a randomly and independently chosen function from

Fn , is a pseudorandom permutation.

The following lemma is from [7] and formally represents the above statement.


Lemma  4   Let  Q  be  a  polynomial  in  n  and  Ckn  be  an  oracle  circuit

with  Q(n) < 2n  oracle  gates,  then

                                                                               *
 *2(n)
 | Prob {Ckn [Pkn ] = 1} - Prob {Ckn [_1(f2k-1 ; : :;:f2; f1)] = 1} |  (k_-_1)Q*
 *______2n


where  f1; f2; : :;:f2k-1 2r Fn .


Although the above lemma states that _1(f2k-1 ; : :;:f2; f1) is pseudorandom, it

is interesting to note that it is not super pseudorandom. This has been

presented in the following lemma, where a super distinguishing circuit has been

presented in the proof.


Lemma  5   For  any  f2k-1 ; : :;:f2; f1 2r Fn ,  there  is  super  distinguish*
 *ing

circuit  SCkn  for  _1(f2k-1 ; : :;:f2; f1).



Proof  :  Let B1; B2; : :;:Bk be strings of length n. The super distinguishing

circuit has two oracles, i.e., a normal oracle and an inverse oracle. The input*
 * to

the normal oracle is B1 k B2 k : :k:Bk. Let S1 k S2 k : :k:Sk be the output of

this oracle. Let the input to the inverse oracle gate be S1 + ff k S2 k : :k:Sk

where ff is an arbitrary n-bit string. The output of SC2n is 1 if and only if t*
 *he

last n bits of the output from the inverse oracle gate is equal to Bk + ff. It *
 *can

be verified that the output of SC2n is always 1 when the normal and_inverse

oracle gates are computed by using _1 for normal oracle gates and _ 1 for

inverse oracle gates. On the other hand, if the oracle gates are computed using

a permutation randomly chosen from Pkn , the output of SCkn is 1 with

probability _1_2n.                                                             *
 *    2


It can be easily verified that by using an inverse oracle, together with a norm*
 *al

oracle, the effect of f2k-1  is virtually removed. In other_words, the super

distinguisher actually evaluates the inverse oracle with _ 1(f1; f2; : :;:f2k-2*
 * ),

which is not pseudorandom by any means.

It can also be shown that the effect of f2k-2 ; : :;:fk+2  and fk can also be

removed (individually) by taking procedures similar to the procedure which is

given in the proof of Theorem 1. If there existed a construction with type-1

transformations G1 such that removing_the last k random functions in G1 and

the first k random functions in G 1, the remaining structures would remain

pseudorandom, then G1 would be a super pseudorandom permutation.

Based on the obove observation, we give the necessary and sufficient conditions

for super pseudorandomness of i rounds of type-1 transformations.


Theorem  3   Let  G1 = _1(fi; : :;:f1)  be  a  pseudorandom  permutation  where

G1 2 Pkn  and  consists  of  i  rounds  of  type-1  transformations  and

f1; f2; : :;:fi 2r Hn .   G1  is  a  super  pseudorandom  permutation  if  and

only  if_ G2;j= _1(fi; : :;:fj+1 )_O_Lrot O _1(fj-1 ; : :f:1)  and

G3;j= _ 1(f1; : :;:fi-j) O Rrot O _1 (fi-j+2 ; : :;:fi)  are  pseudorandom

permutations,  for  j = 1; 2; : :;:k  and  i - j 6= kl,  where  l = b i_kc.



Proof  Sketch:  Note that type-1 transformation is a generalisation of DES-like

permutations, and the effect of fi-j+1  in the inverse oracle gates and the eff*
 *ect

of fj in normal oracle gates can be removed individually by applying normal

and oracle gates consequently, for j = 1; 2; : :;:k and i - j 6= kl, where l = *
 *b i_kc.

For justifying the theorem, two following claims should be proven to be true for

each j:


   1.  If G1 is super pseudorandom, then G2;j and G3;j are pseudorandom.


   2.  If G2;j and G3;j are pseudorandom, then G1 is super pseudorandom.


The validity of the above claims can be checked for each j easily. For instance,

consider_j = 1, then G2;1 = _1(fi; : :;:f2) O Lrot and

G3;1 = _ 1(f1; : :;:fi-1) O Rrot. Similar to the proof of Lemma 2, it can be

shown that G2;1 and G3;1 are independent if and only if they are

pseudorandom. In addition, similar to the proof of Theorem 1, it can be shown

that if G2;1 and G3;1 are independent, G1 is super pseudorandom. For

j = 2; : :;:k the proofs can also be obtained by repeating a similar method and


procedure. Note that when i - j = b i_kck, the effect of fi-j+1  would not be

removed with inverse and normal oracle gates, due to the structure of type-1

transformations, so it is not necessary_to prove the above claims for it. Since*
 * all

possible reductions of _1 and _ 1 would remain pseudorandom having even

super distinguishing circuits, then _1 would be a super pseudorandom

permutation.                                                                   2


Although it was already stated in Lemma 4 that 2k - 1 rounds of type-1

permutation _1 give a pseudorandom permutation, it would not follow

immediately that 3k - 2 rounds of this transformation would yield a super

pseudorandom permutation since 2k - 1 rounds, or even 3k - 2 rounds, of its

inverse transformation __gis not pseudorandom. It can be shown that

k(k - 1) + 1 rounds of __gis pseudorandom, which has been stated in the

following lemma formally.

                __
Lemma  6   Let  _1 be  a  permutation  defined  by

                __                          __               __    __
                _1(fk2-k+1 ; : :;:f2; f1) = g1;k2-k+1 O : :O:g1;2O g1;1


Let  Q  be  a  polynomial  in  n  and  Ckn  be  an  oracle  circuit  with

Q(n) < 2n  oracle  gates,  then

                                   __                                  (k2 - 1)*
 *Q2(n)
| Prob {Ckn [Pkn ] = 1}-Prob {Ckn [_ 1(fk2-k+1 ; : :;:f2; f1)] = 1} |  ________*
 *_______2n+1


where  f1; f2; : :;:fk2-k+1  2r Fn .



Proof  :  The proof of this lemma is very similar to the proof of Lemma 4,

presented in [7], and is omitted here.                                         *
 *  2


Since, according to Theorem 3, by application of normal and reverse oracle_

gates, the effect of only k - 1 rounds of _ and only k - 1 rounds of _ 1 can be

removed, k2 = k2 - k + 1 + (k - 1) > 2k - 1 + (k - 1) rounds of type-1

transformation can resist against super distinguishing circuits. This is stated*
 * in

the following theorem formally.


Theorem  4   Let  Q  be  a  polynomial  in  n  and  SCkn  be  a  super

distinguishing  circuit  with  Q(n) < 2n  normal  and  inverse  oracle

gates,  then

                                                                       2 - 1)Q2*
 *(n)
| Prob {SCkn [Pkn ] = 1} - Prob {SCkn [_1(fk2; : :;:f2; f1)] = 1} |  (k________*
 *_____2n


where  f1; f2; : :;:fk2 2r Fn .



Proof  :  To obtain a pseudorandom permutation, G2;j and G3;j should be

pseudorandom for j = 1; 2; : :;:k - 1, where for _1(fk2; : :;:f2; f1),


                 G2;j= _1(fk2; : :;:fj+1 ) O Lrot O _1(fj-1 ; : :;:f1)


and                  __                            __

               G3;j= _ 1(f1; : :;:fk2-j ) O Rrot O _1 (fk2-j+2 ; : :;:fk2)

G2;j is partitioned into two parts where a part always consists more than 2k - 1

rounds, so in the normal oracles even if the effect of the other k - 1 rounds of

_1 could be removed, the remaining would maintain pseudorandomness. G3;j is

also partitioned into two parts where a part always consists at least k2 - k + 1

rounds,_so_in the inverse oracles even if the effect of the other k - 1 rounds *
 *of

_ 1 could be removed, the remaining would maintain pseudorandomness.

Hence, G2;j and G3;j are pseudorandom for all j = 1; 2; : :;:k - 1, then G1 is a

super pseudorandom permutation. The probability that a super distinguisher

circuit outputs 1, in the worst case, is equal to the probability that a

distinguishing circuit for _1_outputs 1, plus the probability2that2a

distinguishing circuit for _ 1 outputs 1 and is equal to (k_-1)Q_(n)_2n        *
 *  2
7    Conclusions  and  Open  Problems


If a block cryptosystem is super pseudorandom it is secure against chosen

plaintext / ciphertext attack which is a much stronger attack than plaintext

attack. We showed that a cryptosystem which consists of DES-like

permutations and is secure against plaintext attack can be enhanced to a super

pseudorandom cryptosystem by only applying one more random function with

adding one more round of DES-like permutations. A problem is how  to

construct  a  super  pseudorandom  permutation  from  a  single

pseudorandom  function.

It can be shown that _1(fk-1 ; : :;:f1; fk; fk-1 ; : :;:f1) is not pseudorandom

although it consists of 2k - 1 rounds of DES-like permutation. On the other

hand it can be conjectured that _1(f2; : :;:f2; f1; : :;:f1), where f1 is used *
 *in k

rounds and f2 is used in k - 1, is pseudorandom. Another open problem is

what  is  the  minimum  number  of  random  functions  needed  to  achieve

super  pseudorandomness  with  k2  rounds  of  type-1  transformations.


                              ACKNOWLEDGMENT


We  would  like  to  thank  Cathy  Newberry  and  other  members  of  CCSR

for  their  help  and  assistance  during  the  preparation  of  this  work.

The  first  author  would  also  like  to  thank  the  organising  committee

of  ASIACRYPT  '91  for  their  generous  support.



References


[1]  O. Goldreich, S. Goldwasser, and S. Micali. How to construct random

     functions. Journal  of  the  ACM, 33(4):792-807, 1986.


[2]  Michael Luby and Charles Rackoff. How to Construct Pseudorandom

     Permutations from Pseudorandom Functions. SIAM  Journal  on

     Computing, 17(2):373-386, 1988.


[3]  Y. Ohnishi. A study on data security. Master's thesis, Tohoku University,

     1988. in Japanese.


[4]  Josef Pieprzyk. How to Construct Pseudorandom Permutations from Single

     Pseudorandom Functions. In Advances  in  Cryptology  -  EUROCRYPT  '90,

     volume 473 of Lecture  Notes  in  Computer  Science, pages 140-150.

     Springer-Verlag, 1991.


[5]  A. C. Yao. Theory and applications of trapdoor functions. In the  23rd

     IEEE  Symposium  on  the  Foundations  of  Computer  Science, pages

     80-91, 1982.


[6]  Yuliang Zheng, Tsumoto Matsumoto, and Hideki Imai. Impossibility and

     Optimality Results on Constructing Pseudorandom Permutations. In

     Advances  in  Cryptology  -  EUROCRYPT  '89, volume 434 of Lecture

     Notes  in  Computer  Science, pages 412-422. Springer-Verlag, 1990.


[7]  Yuliang Zheng, Tsumoto Matsumoto, and Hideki Imai. On the

     Construction of Block Ciphers Provably Secure and Not Relying on any

     Unproved Hypotheses. In Advances  in  Cryptology  -  CRYPTO  '89,

     volume 435 of Lecture  Notes  in  Computer  Science, pages 461-480.

     Springer-Verlag, 1990.

