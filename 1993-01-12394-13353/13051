Path: msuinfo!netnews.upenn.edu!newsserver.jvnc.net!yale.edu!qt.cs.utexas.edu!cs.utexas.edu!uunet!autodesk!drake
From: drake@Autodesk.COM (Dan Drake)
Newsgroups: sci.crypt,alt.security.pgp
Subject: Re: Zimmermann's responses to Sidelnikov's PGP critique
Message-ID: <18402@autodesk.COM>
Date: 18 Jan 93 19:42:03 GMT
References: <bontchev.727111551@fbihh>
Followup-To: sci.crypt
Organization: Autodesk Inc., Sausalito CA, USA
Lines: 94
Xref: msuinfo sci.crypt:13051 alt.security.pgp:1230


Meaning no disrespect to Mr Bontchev's marvelous excursion into the
delights of FORTRAN, a couple of errata for the record:

bontchev@fbihh.informatik.uni-hamburg.de (Vesselin Bontchev) writes:
> ...
> 
> Ah, yes, FORTRAN was a really nice language, wasn't it? Identifiers
> limited to 8 alphanumerics - who needs more? Do you -really- need
> function names like square_root_double(), when you can simply call the
> library subroutine SQRTQQ or something like that? And of course - the
> convenience of the identifiers whose type is defined by their first
> letter, so that all identifiers beginning with I-M are considered
> integer, while the others are real. Unless some joker re-defines them
> explicitely in the beginning or uses the nice NAMELIST declaration...

You mean IMPLICIT, right?  NAMELIST is I/O.

> Of course, all varables not mentioned anywhere are initialized to zero
> without a glitch from the compiler, 
Well, it depends on the compiler.  Maybe they're random.

> so that mistyping I11, intead I1I
> screws up you program completely and you can spend weeks wondering
> why. This is done to stimulate the alertness of the programmer.  
And random values make you even more alert!  But there were some nice
guys like CDC who used Negative Indefinite (NaN in later terminology)
and trapped when they found that operand; very nice, unless, of course,
the uninitialized storage was INTEGER.

> ...
> Recursion? You must be kidding! Don't you know that every recursive
> algorithm can be expressed in an iterative way? The conversion is left
> as an exersize to the reader... FORTRAN doesn't have recursion.
> Period. A subroutine is not allowed to call itself. Even two
> subroutines are not allowed to call each other - and the compiler
> performs several very clever moves, in order to detect that and to
> report it as an error...
That was a GOOD compiler.  The lesser ones let you make the calls and
blow up in random ways.  (Discussion of cases that are valid though
static analysis shows mutual recursion is omitted.)

> ...
> 
> parameter passing. The parameters to the subroutines are not passed by
> value or by address, no sir, that's too primitive! They are passed by
> name! 
Or by reference -- Algol having defined call-by-name to be something
else again.

> Which allows in some implementations to change the value of some
> constants. E.g., you don't like 4 to be four any more? Easy, pass it
> as parameter by name to a subroutine that simply increments its only
> argument and from that point on you get 4=5... Now, doesn't it sound
> like a language designed by David Sternlight?
Well do I remember the program that had
      NINE1 = 9
      NINE2 = 9
      etc
and no manifest constants of 9 anywhere else, because there had once
been a bug that caused 9 to get clobbered, and this stuff had been
needed to debug it.

> 
> Of course, not all of the above "features" are available in all
> implementations. But, as somebody said, the best thing with the
> standards is that there are so many of them to choose from. Thus we
> have Fortran II, Fortran IV, Fortran-88, RATFOR (for those quiche
> eaters who cannot live without structured programming, IF-THEN-ELSE
> constructs, and BEGIN-END blocks - only until they grow up, of course,
> and learn how to use the arithmetic IF)...
> 
> ...
> ...  And I thought that we are talking about the science of
> cryptography in sci.crypt... Obviously wrong newsgroup, sorry. This
> one should be talk.typesetting or alt.david.sternlights.nonsense.and.flame.wars.

And I have to apologize for this further contribution of nonsense, but
with 120 messages in the thread, no one who cares about his time will
be reading this stuff anyway.

BTW, if your compiler accepts X to mean 1X in a FORMAT statement, and it
doesn't require a comma for a separator after X (both true for some
compilers, though maybe not Standard), parse

      INTEGER X5H, FORMAT(5)
      PRINT 10
10    FORMAT(X5H)=A(5)

responses to alt.lang.bash.fortran

--
Dan Drake                 Therefore, send not to know for whom the bell tolls;
drake@Autodesk.com        It tolls for Them.
