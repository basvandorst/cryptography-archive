Path: msuinfo!caen!spool.mu.edu!agate!doc.ic.ac.uk!uknet!acorn!eoe!ahaley
From: ahaley@eoe.co.uk (Andrew Haley)
Newsgroups: sci.crypt
Subject: Re: How fast is DES?
Message-ID: <1494@eouk9.eoe.co.uk>
Date: 8 Jan 93 09:43:38 GMT
References: <1ihdcmINNslg@fbi-news.Informatik.Uni-Dortmund.DE>
Organization: EO Europe Limited, Cambridge, UK
Lines: 44
X-Newsreader: TIN [version 1.1 PL6]

Holger Muenx (muenx@heike.informatik.uni-dortmund.de) wrote:
: 
: Guten Tag!
: 
:   Due to the complexity of the DES algorithm involving various bit
: swapping and table lookup operations during multiple iterations I am
: wondering how fast the DES is in praxis.

DES can be converted to shift/ mask/ lookup/ XOR in the inner loops.
No bit permutations are needed.

:   Is it possible for a software solution to reach an encryption rate
: of about 100kB/sec (read 100 * 1024 Byte not 100 * 1024 Bit per second)
: on a typical PC (say, Intel 386DX 33MHz)?

Using SDCRYPT, which is (still, AFAIK) the fastest DES implementation
available on a PC results in:

	486/33     229223 bytes/sec
	386/40     175497 bytes/sec

I haven't got a 386/33, but extrapolating these figures suggests that
your performance requirements would comfortably be exceeded on such a
machine.

:   If not: are there any other secure encryption/decryption algorithms
: which are running faster?

The only thing I have seen which might be faster is Khufu.  Certainly
IDEA (as used in PGP) isn't any faster, and if you use enough rounds
in FEAL to make it resistant to differential cryptanalysis that isn't
much faster either.  There are others, such as REDOC-II, but I don't
think that they would have much of a speed advantage when implemented
in software.

Another possibility is using a hash function such as MD4 as a stream
cipher generator.  One advantage of using stream ciphers is that the
stream can be generated offline, so that when you want to transmit a
message it can be done instantly.  The total processing time to
encrypt will not be any less, but the stream can be generated while
the processor would otherwise be idle, effectively reducing the
encryption overhead to zero.

Andrew.
