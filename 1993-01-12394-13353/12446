Newsgroups: sci.crypt
Path: msuinfo!caen!zaphod.mps.ohio-state.edu!moe.ksu.ksu.edu!hobbes.physics.uiowa.edu!news.uiowa.edu!news
From: jones@pyrite.cs.uiowa.edu (Douglas W. Jones,201H MLH,3193350740,3193382879)
Subject: Re: Another well-intentioned novice's question
Sender: news@news.uiowa.edu (News)
Message-ID: <1993Jan4.142817.8171@news.uiowa.edu>
Date: Mon, 4 Jan 1993 14:28:17 GMT
References: <1993Jan04.051300.26089@rat.csc.calpoly.edu>
Nntp-Posting-Host: pyrite.cs.uiowa.edu
Organization: University of Iowa, Iowa City, IA, USA
Lines: 38

From article <1993Jan04.051300.26089@rat.csc.calpoly.edu>,
by rteasdal@polyslo.csc.calpoly.edu (Rusty):
>                                           ... cryptographic	
> efficiency would be greatly enhanced by compressing a message
> before encrypting it, the better to remove repetitive patterns
> from the plaintext.
> 
> 	I don't see, though, that standard (i.e. LZW) compression
> algorithms actually do remove any of the redundancy from the text;

If you compress text with a good data compression program, the
compressed text looks like a random bit pattern.  Encrypting one
random looking bit pattern typically produces another, and
cryptanalysis of such patterns is far harder than analysis of
encrypted normal text because the compression process has removed
(some of) the redundancy which cryptanalytical techniques rely on
to break codes.

It's also worth noting that many compression algorithms can
themselves be used for (private key) encryption.  The source model
used by the algorithm is, in effect, the key.  For some compression
algorithms, the resulting cryptosystems are pretty weak, but for
others, little is known about their security.

For example, I proposed (in CACM, some years ago) an adaptive
compression algorithm based on splay trees (or splay tries?) where
the initial tree used for prefix code construction is the key.  I
have heard nothing about the security of this algorithm since I
published it, although I believe that it is vulnerable to a
controlled text attack (that is, if you can select the text to be
encrypted, you can infer the key that was used).

If anyone's curious, I have been distributing a UNIX based data
compression utility based on my algorithm for a number of years.
It's about half the speed of LZW and produces equally compact output
(sometimes better, sometimes worse).
					Doug Jones
					jones@cs.uiowa.edu
