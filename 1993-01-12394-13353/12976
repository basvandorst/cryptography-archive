Newsgroups: comp.theory,sci.crypt,sci.math,rec.puzzles
Path: msuinfo!caen!uunet!haven.umd.edu!decuac!pa.dec.com!engage.pko.dec.com!nntpd.lkg.dec.com!ryn.mro4.dec.com!3d.enet.dec.com!roth
From: roth@3d.enet.dec.com (Jim Roth)
Subject: Re: Looking for random permutation generation algorithms
Message-ID: <1993Jan16.015822.16404@ryn.mro4.dec.com>
Sender: news@ryn.mro4.dec.com (USENET News System)
Organization: Digital Equipment Corporation
Date: 15 JAN 93 20:30:01    
Lines: 23
Xref: msuinfo comp.theory:6240 sci.crypt:12976 sci.math:38374 rec.puzzles:20362


In article <sumner.727036572@milo.math.scarolina.edu>, sumner@math.scarolina.edu (David Sumner) writes...
> 
>To quickly generate a 'random' permutation of  1, 2, ..., n:

>  Initialize  A[n] as the array [1, 2, 3, 4,..., n]

>        for i=1 to n
>        z = random(n)  
>        t = a[i]
>        a[i] = a[z]
>        a[z] = t
>        next i

>The loop exits with A holding a pseudo random permutation of 
>1, 2, 3, ..., n.

The problem with this approach is not all possible permutations will have
equal probability of being chosen.  Consider a simple case of only 3 or
4 items to see this.  In fact, with 4 items there is a permutation
that is nearly twice as likely to be chosen than some of the others.

- Jim
