Path: msuinfo!netnews.upenn.edu!dsinc!ub!zaphod.mps.ohio-state.edu!darwin.sura.net!jabba.ess.harris.com!caesun6!mvm
From: mvm@caesun6.epg.harris.com (Matt Mahoney)
Newsgroups: sci.crypt
Subject: Re: MD5 as an encryption engine?
Message-ID: <C0FrsE.Kp8@jabba.ess.harris.com>
Date: 6 Jan 93 14:19:25 GMT
Expires: Wed, 6 Jan 1993 05:00:00 GMT
References: <TODD.92Dec30124821@palomar.tivoli.com>
Sender: usenet@jabba.ess.harris.com (Usenet News Feed Account)
Reply-To: mvm@epg.harris.com (Matt Mahoney)
Distribution: sci
Organization: Engineering Productivity Group, Harris Corp., Melbourne, FL
Lines: 31
Nntp-Posting-Host: su3f.ess.harris.com

todd@palomar.tivoli.com writes:

>Isn't it a simple matter to use an algorithm like MD5 to produce a
>very strong cipher?

Yes.  A couple of months ago I proposed using MD5 to generate a pseudo
one time pad R from a key K as follows:

  R[1] = MD5(K)
  R[i] = MD5(R[i-1] + K), i > 1 

And then encrypt by XORing the plaintext with R.  (+ could be addition, 
XOR, concatenation, etc.)

I believe this is secure as long as K is not reused.  Otherwise the XOR
of two ciphertexts yields the XOR of the plaintexts, a significant weakness.

One protocol allowing K to be reused might be to add a salt (a random 
number) known to both parties and different for each message:

  R[1] = MD5(K + salt)
  R[i] = MD5(R[i-1] + K + salt)
  ciphertext = salt, plaintext XOR R

This method (and one-time pads) are not immune to forgery if part of
the plaintext is known.  One way to defeat this is to add a checksum
to the plaintext (using MD5 of course).

--------------------------------        _\/_
Matt Mahoney, mvm@epg.harris.com       |(TV)|  Drug of the Nation
#include <disclaimer.h>                |____|
