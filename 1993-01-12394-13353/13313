Newsgroups: alt.security.pgp,sci.crypt
Path: msuinfo!caen!sdd.hp.com!zaphod.mps.ohio-state.edu!howland.reston.ans.net!spool.mu.edu!yale.edu!ira.uka.de!math.fu-berlin.de!news.netmbx.de!Germany.EU.net!mcsun!sunic!news.lth.se!pollux.lu.se!magnus
From: magnus@thep.lu.se (Magnus Olsson)
Subject: PGP key handling misfeature?
Message-ID: <1993Jan29.144756.10102@pollux.lu.se>
Followup-To: alt.security.pgp 
Sender: news@pollux.lu.se (Owner of news files)
Nntp-Posting-Host: dirac.thep.lu.se
Organization: Theoretical Physics, Lund University, Sweden
Date: Fri, 29 Jan 1993 14:47:56 GMT
Lines: 84
Xref: msuinfo alt.security.pgp:1323 sci.crypt:13313

I've been hit by what I think is a rather irritating misfeature of PGP
2.1. Alternatively, it might be just that I haven't read the manual
sufficiently thoroughly, hence the question mark in the subject line. 

Anyway, the situation is this:

When I first installed PGP, I created a test key peir for myself, and
gave it the user ID "Magnus". When I was convinced that everything
worked OK, I created my official key, with user ID "Magnus Olsson
<magnus@thep.lu.se>". This is the key I've distributed to people.
Since I was using 2.0 at the time, I couldn't access the test key at
all (PGP uses the last added key where a substring of the user ID
matches the specified user ID), but that was no problem. In 2.1, that
is cured, since one can specify the (unique) key ID instead of the user
ID. 

So far, so good.

The trouble started when somebody complained that my public key was
signed by an unknown user. OK, I thought, that unknow user is in fact
me, with my test key, so I'll distribute the test key as well.
However, when I'd done that, I received a message that had
inadvertently been encrypted with my test key - the sender had added
my test key _after_ he added my official key, and when he wrote "pgp
-ea somefile Magnus" the silly program of course assumed that he meant
my test key.

Now, this is really bad. And what's even worse is this:

It was suggested to me that I create a backup key pair, distribute the
public key and lock the secret key in a bank vault, and only use it if
I need to revoke my official key. However, if I did that, my backup
key would be added _after_ my official key, PGP would assume that
people would want to use this key isntead of my official one, and I'd
have to put the backup secret key on my computer (which I don't want
to do) to be able to decode their messages. So I had to desist from
doing this.


So, I think that PGP needs the following new features:

1) A possibility not only to add a new user ID to one's public key,
but to remove the old user ID altogether (that way, I could change the
user ID of my test key so it didn't contain the string "Magnus", which
would solve the problem above). For security reasons, this should only
be allowed for the owner of the key.

2) A possibility to specify when distributing a key certificate that
"This key is secondary to my other keys, and should _not_ be used by
default if there are other keys that match the specified user ID". In
this way, I could distribute a new key with a user ID containg "Magnus
Olsson", and people would still be using my old key by default.


If anybody has better suggestions they're welcome.

BTW, in order to solve the problem with my test key being used instead
of my official key, I hereby revoke it. Below my .sig is a revocation
certificate, together with my official public key.

              Magnus Olsson                | \e+      /_
    Department of Theoretical Physics      |  \  Z   / q
        University of Lund, Sweden         |   >----<           
 magnus@thep.lu.se, thepmo@seldc52.bitnet  |  /      \===== g
PGP key available via finger or on request | /e-      \q


-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: 2.1

mQBNAir5uBIAAAECAOJ1VWyTVaVOCjxACC9OiEGPSCMxyU7Cnzmu35ubDRYx+FB/
95kLB4w4TQwadkohIpYwyDtySFpEoOa6OmikGr0ABRG0IU1hZ251cyBPbHNzb24g
PG1hZ251c0B0aGVwLmx1LnNlPrQXPHRoZXBtb0BzZWxkYzUyLmJpdG5ldD4=
=pBwf
-----END PGP PUBLIC KEY BLOCK-----
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: 2.1

mQA9Airwf7UAAAEBgLNNLTKGVDGuWpet1nIDTLhxuPDmG/cGIXv/gyIK1mx1qFvX
9QAXqgV7nIeivbOnfQAFEYkARQIFICtjGQ17nIeivbOnfQEB0wwBf2G43ILHsR6n
0nhCQQhXYtLPLJMz4G1wtC9nRvBQmqi57nPVZUBA55lXNhIm6wTAk7QsVGVzdCBr
ZXkgKE1hZ251cyBPbHNzb24gPG1hZ251c0B0aGVwLmx1LnNlPim0Bk1hZ251cw==
=kwra
-----END PGP PUBLIC KEY BLOCK-----
