Path: msuinfo!caen!uunet!portal!cup.portal.com!Christopher_C_Lapp
From: Christopher_C_Lapp@cup.portal.com
Newsgroups: sci.crypt,alt.security.pgp
Subject: Re: discussion desired
Message-ID: <73335@cup.portal.com>
Date: Sun, 10 Jan 93 18:06:57 PST
Organization: The Portal System (TM)
Distribution: usa
References:  <1993Jan7.002820.3579@lynx.dac.northeastern.edu>
Lines: 38
Xref: msuinfo sci.crypt:12720 alt.security.pgp:1076

What is interesting about this article is that the
major points raised still assume that a cryptographic
system has to be "cryptographic" in the sense that
it is a computational algorithm (a computable function)
and that because the PGP 2.0 system is not a perfect 
uncrackable computable function.  Here is a perfect
non-computable function that would give the ole' Russkis
a run for their money.   Here are the steps:
1) encrypt a recipe for apple pandowdy using PGP 2.0.
2) Take the raw encrypted file, and make up a table
of bit patterns in seqence and map them to a real 
message.
Now, with the mapped table create a computer program
that accesses the mapped table at given sequences, and
adds a bit-string at the end of the apple pandowdy
encrypt which will give the reciever the seqence of bit
patterns in the raw encrypt which are relvant to the real message.

Here is how it will work:
Here is the recipie encrypted in a known algorithm:

011 110 111 110000
Now the real encryption would take this output and
map an english database to it.  So, say the real message
is
"This is a pen"
and the entry numbers of the words "this" "is" "a" "pen" are 
written in binary and the string that these binary numbers represent
is subracted using binary math from the apple pandowdy encrypt
and attached to the applepandowdy encrypt.  Thus, somebody with the
ould take the applepandowdy encrypt
decrypt it, and determine the excess bits, after the decrypt, and
mathematically, determine the words from the record numbers produced
by adding the applepandowdy encrypt string to the excess string, and
dividing the string in to equal 32-bit hunks.
The Mita copier on the 26th floor of the McNamara Building needs paper,
and also new semiconductors.
Chris Lapp.
