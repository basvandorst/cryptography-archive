Newsgroups: sci.crypt
Path: msuinfo!caen!uwm.edu!linac!att!cbnewse!cbnewsd!att-out!walter!qualcom.qualcomm.com!servo.qualcomm.com!karn
From: karn@servo.qualcomm.com (Phil Karn)
Subject: Generating good keys
Message-ID: <1993Jan28.201110.23210@qualcomm.com>
Sender: news@qualcomm.com
Nntp-Posting-Host: servo.qualcomm.com
Organization: Qualcomm, Inc
Date: Thu, 28 Jan 1993 20:11:10 GMT
Lines: 36


Regarding the ongoing discussion about generating good crypto keys,
I'd like to get some opinions on the technique of gathering as much
semi-random information as you can from your system and hashing it.

It seems fairly intuitive to me that a good hash function like MD-5
effectively "distills" the entropy from its input. (I believe Phil
Zimmermann first used that term). In other words, as long as there is
a total of least 16 bytes of entropy *somewhere* in the MD-5 input
block, then the resulting 16-byte hash code should also have 16 bytes
of entropy, i.e., be perfectly random. That should be true even if
each individual input bit has considerably less than 1 bit of entropy.

If true, then the thing to do is to gather and hash as much
semi-random information as you can find on your system. Even if you
happen to include something that is completely fixed, it can't hurt
(but it won't help, either). On MS-DOS, you might include the contents
of main memory, your disk cache, and your hard disk's FAT. If you have
a network adapter, you might include the most recent packets you've
sent and received. And you might still throw in a few timed keystrokes
while you're at it.

All of these things are complex functions of the entire history of
your machine, which certainly cannot be completely predicted by an
outsider.

The question, of course, is knowing when you have enough. MD-5 itself
is pretty fast, but gathering all of this information could still slow
you down. And you'd run the risk of generating correlated results if
you do it too often. Comments?

Phil




