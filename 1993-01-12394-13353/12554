Newsgroups: sci.crypt
Path: msuinfo!caen!zaphod.mps.ohio-state.edu!moe.ksu.ksu.edu!hobbes.physics.uiowa.edu!news.uiowa.edu!news
From: jones@pyrite.cs.uiowa.edu (Douglas W. Jones,201H MLH,3193350740,3193382879)
Subject: Re: Encryption plus compression (Was: Another well-intentioned novice's quest)
Sender: news@news.uiowa.edu (News)
Message-ID: <1993Jan6.221731.23956@news.uiowa.edu>
Date: Wed, 6 Jan 1993 22:17:31 GMT
References: <1993Jan6.215140.18753@ee.eng.ohio-state.edu>
Nntp-Posting-Host: pyrite.cs.uiowa.edu
Organization: University of Iowa, Iowa City, IA, USA
Lines: 29

From article <1993Jan6.215140.18753@ee.eng.ohio-state.edu>,
by butzerd@blanc.eng.ohio-state.edu (Dane C. Butzer):
> 
> Sorry if this has been brought up, but don't many compression programs put
> some type of table at the start of the compressed file (defining what
> characters map to what uncompressed sequences, for example)?

Yes, and such programs shouldn't be used in the context of encryption, for
the reasons you suppose.

LZW and other adaptive compression algorithms don't put such tables there
because they start with an initial table that is fixed and then adapt this
table to the statistics of the data being compressed.  (As an aside, to
use such compresson algorithms to do encryption, make this initial table
a function of the key instead of a constant).

In the case of LZW, the initial table is typically a mapping from single
characters to themselves (but with a 9th bit tacked on to indicate that
the characters are sequences of length 1).  This makes LZW somewhat
vulnerable to analysis, but the simple expedient of prefixing the text to
be compressed with a fixed length string of random bytes (prior to
compression) and then discarding these when the string is uncompressed
can eliminate this problem.

In the case of LZW, I believe this string has to be fairly long.  In the
case of my splay-tree based compression algorithm, a fairly short string
will suffice.
				Doug Jones
				jones@cs.uiowa.edu
