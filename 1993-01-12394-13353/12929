Newsgroups: sci.crypt
Path: msuinfo!caen!zaphod.mps.ohio-state.edu!usc!sol.ctr.columbia.edu!The-Star.honeywell.com!umn.edu!csus.edu!netcom.com!cliftonr
From: cliftonr@netcom.com (Pope Clifton)
Subject: Something about cryptology
Message-ID: <1993Jan15.085414.3196@netcom.com>
Organization: Inst. for Epistemological Pathology
X-Newsreader: TIN [version 1.1 PL8]
Date: Fri, 15 Jan 1993 08:54:14 GMT
Lines: 48

  Far be it from me to interrupt the ongoing flame wars, but I have an idea
and/or question relating to cryptology which I have been thinking about for
the last 6 years or so, since I first started read up on the subject.

Background:  The fundamental idea of public-key systems, as they exist
today, is to define a pair of mathematical functions of which one is the
inverse of the other, and in which one (at least) is not computable from the
other in any reasonable period of time.  The way this is done in RSA is to
derive both functions (the private key and the public key) from a pair of
large prime numbers, in such a way that only the product of the primes can
be deduced from knowing the public key.  

[Yes, I'm putting this in very loose and conceptual terms.  It's been a fair
while since I looked at the actual RSA algorithm, and it's the concept I'm
trying to get across.]

This works in practise because the prime factoring of large numbers has been
known for a long time to be a mathematically difficult problem, and there
don't seem to be any breakthroughs that would make it radically easier.
However, it's not a problem which is _proven_ to be mathematically or
computationally intractable.  In theory some bright guy could come along
today and publish a new algorithm for factoring large numbers, and all the
RSA-based codes would be obsolete overnight.  (Unlikely, but possible.)
More scary is that someone could come up with some major improvements to
factoring algorithms, keep them under wraps for the NSA, and give them the
ability to peel back all RSA or prime factors based codes, without the rest
of the world being wise.

There are however, a large class of problems which have been demonstrated
either to be computationally intractable or to be NP-complete (i.e. the time
to solve the problem goes up at least exponentionally with the number of
elements, and therefore a lower bound can be placed on the time required to
solve the problem.)  My question is whether anyone has published any work on
trying to derive public-key code systems from NP-complete problems?

I vaguely remember the knapsack code was supposed to be related to an
NP-complete problem, but it turned out to have a major flaw allowing it to
be inverted effectively and hence was useless for public key.

Sorry if I'm pitching this at the wrong level for the group (too high? too
low?) but I thought the question might be interesting to discuss.

  -- Clifton

--
cliftonr@netcom.com     Home: +1 808 521 9073  Work: +1 808 625 3234
Clifton Royston, Pope of the Church of the Subgenius in Paradise
- Dissecting personal psychopathology at the edge of the 20th century -
