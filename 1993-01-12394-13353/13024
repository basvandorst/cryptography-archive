Path: msuinfo!netnews.upenn.edu!newsserver.jvnc.net!yale.edu!ira.uka.de!Sirius.dfn.de!rzsun2.informatik.uni-hamburg.de!fbihh!bontchev
From: bontchev@fbihh.informatik.uni-hamburg.de (Vesselin Bontchev)
Newsgroups: sci.crypt,alt.security.pgp
Subject: Re: Zimmermann's responses to Sidelnikov's PGP critique
Message-ID: <bontchev.727111551@fbihh>
Date: 15 Jan 93 15:25:51 GMT
References: <1993Jan13.183512.13281@csi.uottawa.ca> <1993Jan14.032341.1507@netcom.com> <1j3t73INNatr@terminator.rs.itd.umich.edu> <1993Jan14.192614.167@netcom.com>
Sender: news@informatik.uni-hamburg.de (Mr. News)
Reply-To: bontchev@fbihh.informatik.uni-hamburg.de
Organization: Virus Test Center, University of Hamburg
Lines: 109
Xref: msuinfo sci.crypt:13024 alt.security.pgp:1220

strnlght@netcom.com (David Sternlight) writes:

> So tell me, Peter, do you not know that ** mean exponentiation, that
> simple mathematical operators and parentheses have their usual
> meaning, and that most functions are self-explanatory, such as ABS(x).

Ah, yes, FORTRAN was a really nice language, wasn't it? Identifiers
limited to 8 alphanumerics - who needs more? Do you -really- need
function names like square_root_double(), when you can simply call the
library subroutine SQRTQQ or something like that? And of course - the
convenience of the identifiers whose type is defined by their first
letter, so that all identifiers beginning with I-M are considered
integer, while the others are real. Unless some joker re-defines them
explicitely in the beginning or uses the nice NAMELIST declaration...
Of course, all varables not mentioned anywhere are initialized to zero
without a glitch from the compiler, so that mistyping I11, intead I1I
screws up you program completely and you can spend weeks wondering
why. This is done to stimulate the alertness of the programmer. After
all, strong typing is for people with weak memories... Dynamic memory?
What dynaminc memory? You must be kidding, this is a commie plot
devised by that quishe eater Niklaus Wirth... All you have is simple
variables and arrays. After all, everybody knows that all this nonsense
- strings, lists, stacks, heaps, and the other silly stuff is nothing
more than arrays and can be simulated with arrays.

Recursion? You must be kidding! Don't you know that every recursive
algorithm can be expressed in an iterative way? The conversion is left
as an exersize to the reader... FORTRAN doesn't have recursion.
Period. A subroutine is not allowed to call itself. Even two
subroutines are not allowed to call each other - and the compiler
performs several very clever moves, in order to detect that and to
report it as an error...

Ah, but we were talking about readability? No problems, FORTRAN is one
of the most readable languages! You can insert spaces whenever you
want, including in the names of the variables. They are simply ignored
during the compilation. Of course this makes the life of the designer
of the parser damn't difficult, because it must be able to distinguish
between constructs like

	FORI=1

which is an assignment operator and

	FORI=1,10

which means a loop with control variable I, taking values from 1 to
10. You just feel lucky that the FOR operator does not allow variables
to be used as limits of the loop - only constants, please.

There are many other nice things in this really wonderful language,
like the EQUIVALENCE operator, which allows you to poke almost
anywhere in memory (and then wonder who destroyed the value of the
control variable of the innermost loop just before the program was
about to print the result of 10 hours heavy computations), like the
possibility to use assigned GOTOs, like the requirement to put all
labels (numners only allowed!) in column 1-5, reserve column 6 to mean
continuation from the above line, and put all operators from column 7
to the left - but not too much to the left, because they will be
automatically truncated at column 72... Of course, you are allowed
only one operator per line, but at least you don't have to put a
semicolon at the end of each of them (now, don't you really hate those
semicolons in C or Pascal?), and so on, and so on...

But maybe the best feature of the language is its unique method for
parameter passing. The parameters to the subroutines are not passed by
value or by address, no sir, that's too primitive! They are passed by
name! Which allows in some implementations to change the value of some
constants. E.g., you don't like 4 to be four any more? Easy, pass it
as parameter by name to a subroutine that simply increments its only
argument and from that point on you get 4=5... Now, doesn't it sound
like a language designed by David Sternlight?

Of course, not all of the above "features" are available in all
implementations. But, as somebody said, the best thing with the
standards is that there are so many of them to choose from. Thus we
have Fortran II, Fortran IV, Fortran-88, RATFOR (for those quiche
eaters who cannot live without structured programming, IF-THEN-ELSE
constructs, and BEGIN-END blocks - only until they grow up, of course,
and learn how to use the arithmetic IF)...

Yes, FORTRAN was a really wonderful language... A friend of mine used
to load his assembly programs as DATA operators in FORTRAN and CALL
the array containing them... Ah, golden years... :-)

> That's all one needs to know to communicate in the context of the
> present discussion about Sidelnikov, without any of the arcana (to
> many) of TeX.

Really? OK, go on, express the context of Nuehaus' message in
FORTRAN. I would like everybody who has had the chance to never learn
this language to see how clumsy it is...

> We're not talking about typesetting here, but about
> getting a few relatively simple formulas to come out the other end of
> the pipe to someone of unknown computer credentials in a way that can
> be read easily and immediately.

Ah? And I thought that we are talking about the science of
cryptography in sci.crypt... Obviously wrong newsgroup, sorry. This
one should be talk.typesetting or alt.david.sternlights.nonsense.and.flame.wars.

Regards,
Vesselin
-- 
Vesselin Vladimirov Bontchev          Virus Test Center, University of Hamburg
Tel.:+49-40-54715-224, Fax: +49-40-54715-226      Fachbereich Informatik - AGN
< PGP 2.1 public key available on request. > Vogt-Koelln-Strasse 30, rm. 107 C
e-mail: bontchev@fbihh.informatik.uni-hamburg.de    D-2000 Hamburg 54, Germany
