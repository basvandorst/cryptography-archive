Newsgroups: sci.crypt
Path: msuinfo!caen!spool.mu.edu!yale.edu!ira.uka.de!rz.uni-karlsruhe.de!stepsun.uni-kl.de!uklirb!posthorn!vier!neuhaus
From: neuhaus@vier.informatik.uni-kl.de (Stephan Neuhaus (HiWi Mattern))
Subject: Good way to test IDEA key generation?
Message-ID: <neuhaus.727461712@vier>
Keywords: IDEA,statistics,tests
Sender: news@posthorn.informatik.uni-kl.de (News system account)
Nntp-Posting-Host: vier.informatik.uni-kl.de
Cc: neuhaus@informatik.uni-kl.de,uri@watson.ibm.com,prz@sage.cgd.ucar.edu,bontchev@fbihh.informatik.uni-hamburg.de
Organization: University of Kaiserslautern, Germany
Date: Tue, 19 Jan 1993 16:41:52 GMT
Lines: 83

Hello.

I am currently investigating methods of testing the randomness of
PGP's IDEA keys.  The problem is that IDEA keys are 128 bits long, and
very uncomfortable to handle.  For example, I have no desire to
compute, say, a linear correlation coefficient from those 128-bit
numbers themselves.

I have considered (and already implemented) two methods of dealing
with this problem.  They might or might not be valid and that is where
I am seeking your advice.

One method assumes that a good sequence of IDEA keys is nothing more
than a stream of independent random bits which happen to come in
batches of 128 at a time.  Therefore, testing is easy: Write a number
of keys to a file.  Then test the bits, pairs of bits, triples, etc.
The only applicable test seems to be the serial test (in a nearly
arbitrary large number of dimensions).  I can think about several
convolutions, such as taking only every other bit etc, but it'll stay
a serial test nontheless.

For those who don't know, the serial test in d dimensions tests the
equidistribution of d consecutive elements (in this case, bits) when
they are viewed as d-dimensional vectors.  In this particular case,
the serial test is very easy to implement (take d consecutive bits,
put them in an integer i and increment counts[i]).

The other method assumes that IDEA keys are more properly viewed as
128-bit fractions, with the binary point at the extreme left.  In this
case, a number of different and independent tests are available: The
gap test, maximum-of-t test, run test, permutation test, and so on.
These tests cannot be carried out on the individual bits; at least I
know of no modification to these tests that will let me make a
maximum-of-t test (say) on the bits, because the granularity is too
low: The maximum is either 0 or 1, with no values in between.

Unfortunately, the spectral test cannot be used, since that is only
applicable to linear congruential generators, i.e., you have to know
the multiplier and modulus in order to carry it out.  PGP's method for
generating IDEA keys is nothing like that.

The latter method suffers from a loss of precision, however, since an
IDEA key has 128 bits, but a double (typically) has only 53
significant bits in the mantissa (counting the normalization bit).

What seems clear to me is that if the fractions aren't random, then
the IDEA keys aren't random as well.  What about the other way?  Is
there a way to test a sequence of bits for the following properties:

	a) Are the bits independent?
	b) Are they "uniformly distributed" in {0, 1}?

The serial test will take care of b) in any dimension.  What about a?
(The serial test will also detect dependence, but my sources don't say
how strong this test is.)  Can any of the tests for real-valued
distributions be adapted to work on the bits in a sequence of IDEA
keys?  Which of the above two assumptions is valid (if any)?

Oh, by the way, when you view PGP's IDEA keys as fractions, their
linear correlation is just what you would expect from independent
random numbers: It is approximately normally distributed with mean 0
and standard deviation 1/sqrt(n), where n is the number of
observations made.  This includes 10% outliers that are out of the 2
sigma interval around the mean.

These numbers also pass the equidistribution test (KS-test) and the
serial test in two dimensions (chi-square test) with 25 categories (5
in each dimension).  The significances in either case are very nearly
uniformly distributed between 0 and 1.

The bits pass the serial test (chi-square test) in dimensions 1 to 8
with 2**d categories (2 in each dimension).  In this case, the
significances are also very nearly uniformly distributed between 0 and
1 (with some outliers occasionally).  I will make my tools and results
available as soon as I have completed my investigations.  PGP uses
lots of random numbers, and I will take a look at some of them.

Thank you in advance, and have fun.

-- 
Stephan <neuhaus@informatik.uni-kl.de>
sig closed for inventory.  Please leave your pickaxe outside.
PGP 2.1 public key available on request.  Note the expiration date.
