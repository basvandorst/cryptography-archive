Newsgroups: sci.crypt
Path: msuinfo!caen!uunet!mcsun!chsun!bernina!caronni
From: caronni@nessie.cs.id.ethz.ch (Germano Caronni)
Subject: Re: About spoof's again
Message-ID: <1993Jan19.195821.2680@bernina.ethz.ch>
Sender: news@bernina.ethz.ch (USENET News System)
Organization: Swiss Federal Institute of Technology (ETH), Zurich, CH
References: <1993Jan18.070144.20359@netcom.com> <1993Jan18.170802.15444@bernina.ethz.ch> <C12I97.G3o@dcs.ed.ac.uk>
Date: Tue, 19 Jan 1993 19:58:21 GMT
Lines: 45

In article <C12I97.G3o@dcs.ed.ac.uk> pdc@dcs.ed.ac.uk (Paul Crowley) writes:
>Quoting caronni@nessie.cs.id.ethz.ch (Germano Caronni) in article <1993Jan18.170802.15444@bernina.ethz.ch>:
>>Unless the spoofer is not able to recognize such a hash. This would imply
>>security through obscurity ? Why is this NOT practical ?
>It's just a pain.
I agree :-)
>by an "anti-spoof protocol" I mean something we could
>adopt as an Internet standard that users could be ignorant of, and would
>still stop spoofers.  I think it's impossible.

I think it could perhaps be done. At least if the delays between sender and
recipient (sp?) are known and limited to some value (seconds).
It would not stop spoofers, but it would detect them.
Let's say we take every <user settable>th message and encryt it N
times. <during this encryption phase no communication takes place,
or you use a windowing protocoll, which can fill in empty slots
later, and deliver them to the recipient at appropriate time.>
We send the N time encrypted message.
Now if B experiences a timeout, B may *suspect* that there is spoofing,
and knows that there is something wrong.
This timeout would depend on usual delays, the value N and the currently
available computing power of enemies :-)
Probably it would be better if you take a mechanism which does hinder
the spoofer more han 2N ...
Something like sending the product of two primes, and using the
larger prime of the two to encrypt messages. (Still everything enclosed
in a standard public-key encryption scheme)
Now if you change this key during an interactive! session, the recipient
would remark a delay between your statements and the keychange.
Naturally there will always be a delay in communication, as the recipient
has to factorize that number himself ...
This does not count for the problem when a spoofer intentionally slows
down the communication to have time to calculate...

Now, where am I wrong ? Excuse my bad spelling and the vague form in which
this is presented, but basically (in my head:-) ) this seems to work....
Friendly greetings,
		Germano Caronni


-- 
Instruments register only through things they're designed to register.
Space still contains infinite unknowns.

Germano Caronni    caronni@nessie.cs.id.ethz.ch
