Path: msuinfo!netnews.upenn.edu!cs.widener.edu!eff!sol.ctr.columbia.edu!howland.reston.ans.net!zaphod.mps.ohio-state.edu!pacific.mps.ohio-state.edu!cis.ohio-state.edu!news.sei.cmu.edu!bb3.andrew.cmu.edu!crabapple.srv.cs.cmu.edu!andrew.cmu.edu!ts49+
From: strong+@CMU.EDU (Thomas W. Strong, Jr.)
Newsgroups: comp.theory,sci.crypt,sci.math,rec.puzzles
Subject: Re: Generating a Random Permutation
Message-ID: <4fKlI4200WB8Aps_9A@andrew.cmu.edu>
Date: 18 Jan 93 20:37:24 GMT
References: <sumner.727366153@milo.math.scarolina.edu>
Organization: Komitet Gosudarstvennoi Bezopaznosti
Lines: 32
In-Reply-To: <sumner.727366153@milo.math.scarolina.edu>
Xref: msuinfo comp.theory:6247 sci.crypt:13060 sci.math:38490 rec.puzzles:20404

sumner@math.scarolina.edu (David Sumner) writes:
> In an earlier post I wrote that an easy way to generate a
> random permutation of the integers 1-n was:
> >      ++++++++++++++
> >  Initialize  A[n] as the array [1, 2, 3, 4,..., n]
> >        for i=1 to n
> >        z = random(n)
> >        t = a[i]
> >        a[i] = a[z]
> >        a[z] = t
> >        next i
> >    ++++++++++++++
> There is a typo in this. The line 'z = random(n)' should
> be 'z = random(i)' Then it is easy to see that, in fact, 
> every permutation of 1-n appears with equal likelihood. It
> is assumed here that random(n) returns a random integer
> between 1 and n inclusive. Also,the loop might as well start
> with i=2.

I have to agree with the algorithm as originally presented.  What it
effectively does is it takes each item and puts it in a random position.
(it may put it back where it started from (1 in n chance) or it may move
some item twice, but every item has an equal chance to be in any
position.  If you replace the random(n) with random(i), the lower
numbered elements will tent to be near the beginning of the array, since
the only way they can be moved forward is if one of the later swaps
happens to exchange with them.  If you're not convinced, run your
algorithm a few times (actually a few hundred or so) and take a look at
the linear correlation between the array indices and the contents.

 -----------------------------------------------------------------
  Tom Strong              N3NBB              ts49+@andrew.cmu.edu
