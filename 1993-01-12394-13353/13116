Path: msuinfo!srvr1.engin.umich.edu!zaphod.mps.ohio-state.edu!howland.reston.ans.net!spool.mu.edu!uunet!mcsun!uknet!edcastle!dcs.ed.ac.uk!pdc
From: pdc@dcs.ed.ac.uk (Paul Crowley)
Newsgroups: sci.crypt
Subject: Re: Second cousin to a spoof proof
Message-ID: <C15n7L.8Js@dcs.ed.ac.uk>
Date: 20 Jan 93 13:38:08 GMT
References: <C13L7D.1M7@dcs.ed.ac.uk> <1993Jan19.192254.5085@netcom.com>
Sender: cnews@dcs.ed.ac.uk (UseNet News Admin)
Reply-To: pdc@dcs.ed.ac.uk (Paul Crowley)
Organization: Edinburgh University
Lines: 47

Quoting rcain@netcom.com (Robert Cain) in article <1993Jan19.192254.5085@netcom.com>:
>What if I can say something to Alice that the spoof *must* substitute
>something arbitrary for (in my voice at best?)  I've gotten this far with
>the problem.

In fact, I'm completely wrong about this being a second cousin to a
proof; sorry.  All you need to do is send a public key; I, too, will
send a public key, but it won't help me.  Alice then chooses *two* IDEA
keys and encrypts one using one public key and one using the other, and
sends them both to you.  You can now send secure information to Alice
using one of the IDEA keys, and the fact that I can too doesn't help me
because my original aim was to read everything you wanted to send to
each other.

Here's an anti-spoof protocol that I suspect works if you and Alice
want to send a couple of insecure "hello there" messages to each other
before you start talking; in some ways this is cheating though.  You
write the hello message that you want to send to Alice, include your
public key, find the MD5 hash, and send it to her.  She gets the hash,
writes a hello message for you, includes her public key and the hash
you sent her in the message, and sends the MD5 hash of that message to
you.  You then send your original message to her and on receipt she
sends hers to you, and then you have each other's public keys.

In order to spoof this I have to write the actual English text of your
"hello there" messages for you; if you were to make reference to these
messages in your first encyphered messages to each other, I'd have to
edit the text so that it referred to the one I made up rather than the
one you wrote, and this gets stupidly hard.  The reason I have to do
this is because in order to elicit a response from Alison I have to send
her the MD5 hash of *some* "hello there" message, but not that of the
one you tried to send her because that's wrapped up with your public
key.

This has extraordinarily serious disadvantages, notably that every time
someone wants to initiate secure conversation with you you have to find
two inane things to say to them, one of which refers to the inane thing
they said to you, a sort of electronic variant of "Whose line is it
anyway?".  They have to be inane because they're insecure and they're
both first messages.  This definitely doesn't work for automated
communication so it's not a real solution, but it's a start.

By the way, I didn't really intend for you to become the "Bob" of this
discussion; I hope you don't mind...
  __                                  _____
\/ o\ Paul Crowley   pdc@dcs.ed.ac.uk \\ //
/\__/ Trust me. I know what I'm doing. \X/ 
