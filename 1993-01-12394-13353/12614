Path: msuinfo!netnews.upenn.edu!dsinc!spool.mu.edu!sdd.hp.com!swrinde!network.ucsd.edu!qualcom.qualcomm.com!servo.qualcomm.com!karn
From: karn@servo.qualcomm.com (Phil Karn)
Newsgroups: sci.crypt
Subject: Re: How fast is DES?
Message-ID: <1993Jan8.063123.5194@qualcomm.com>
Date: 8 Jan 93 06:31:23 GMT
References: <1ihdcmINNslg@fbi-news.Informatik.Uni-Dortmund.DE>
Sender: news@qualcomm.com
Organization: Qualcomm, Inc
Lines: 21
Nntp-Posting-Host: servo.qualcomm.com

In article <1ihdcmINNslg@fbi-news.Informatik.Uni-Dortmund.DE> muenx@heike.informatik.uni-dortmund.de (Holger Muenx) writes:
>  Is it possible for a software solution to reach an encryption rate
>of about 100kB/sec (read 100 * 1024 Byte not 100 * 1024 Bit per second)
>on a typical PC (say, Intel 386DX 33MHz)?

Well, my DES code (ucsd.edu, /hamradio/packet/tcpip/crypto/des.tar.Z)
when compiled and run on a 486DX-50 using GCC under 386BSD encrypts 1
million 64-bit blocks (8 megabytes) in 90.5 seconds of CPU time.
That's not quite the rate you want, and on a faster machine too.  Oh
well.

I groveled over this code quite a bit when I wrote it, and I doubt
there are any *major* improvements to be found that wouldn't either
impair its portability or greatly increase memory requirements. On the
other hand, adding inline assembler or (especially) precomputing some
very big tables (megabytes) *can* definitely pay off. My Bellcore
colleague Dave Feldmeier wrote a paper on this exact subject for Crypto
a few years back when we were building fast UNIX password crackers;
you might look it up. (Can't remember the year offhand).

Phil
