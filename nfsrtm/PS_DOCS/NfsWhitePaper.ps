%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 11 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .62 FMFILL
2 .69 FMFILL
3 .76 FMFILL
4 .83 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .38 FMFILL
18 .31 FMFILL
19 .24 FMFILL
20 .17 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "4" 4
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
54 750.68 540 750.68 2 L
0.25 H
0 Z
0 X
0 K
N
0 8 Q
(\322What if My Response is Bad?\323) 189 737.5 T
54 75.33 540 75.33 2 L
2 Z
N
1 12 Q
(4) 54 59.9 T
2 10 Q
(Some Facts about NFS Response T) 189 59.9 T
(ime) 328.64 59.9 T
3 F
(\245) 189 683.31 T
4 F
(Keep network loading down. Limit the number of workstations and \336leservers on a) 202.74 683.31 T
(net so that the network load is under 30% at peak times. A good alternate rule of) 202.74 671.31 T
(thumb is to limit suspect networks to 15 to 20 workstations as an experiment. If) 202.74 659.31 T
-0.16 (using diskless workstations, consider making this number even smaller at \336rst. Mon-) 202.74 647.31 P
(itor the collisions rate over the LAN to measure your progress.) 202.74 635.31 T
3 F
(\245) 189 620.31 T
4 F
-0.09 (Use high speed routers. It is common mistake to use a workstation or \336leserver with) 202.74 620.31 P
(two ethernet interfaces as a bridge between subnets. This often) 202.74 608.31 T
1 F
(DOUBLES) 456.15 608.31 T
4 F
( NFS) 503.92 608.31 T
(response time.) 202.74 596.31 T
3 F
(\245) 189 581.31 T
4 F
(A) 202.74 581.31 T
(void overloading any one \336leserver) 209.22 581.31 T
(. Spread popular \336les over multiple \336leservers.) 350.23 581.31 T
3 F
(\245) 189 566.31 T
4 F
(A) 202.74 566.31 T
(void overloading any one \336lesystem. Make sure that you are not spending all of) 209.22 566.31 T
(your time with a \336lesystem level bottleneck instead of a \336leserver bottleneck.) 202.74 554.31 T
3 F
(\245) 189 539.31 T
4 F
-0.11 (A) 202.74 539.31 P
-0.11 (void SymLinks in common \336le paths. These generate lar) 209.22 539.31 P
-0.11 (ge numbers of NFS opera-) 434.41 539.31 P
(tions since SymLinks are not cached on the client side. The worst are SymLinks) 202.74 527.31 T
(which are near the root of \336lesystems so that a high percentage of \336le lookups will) 202.74 515.31 T
(result in SymLink traversals.) 202.74 503.31 T
3 F
(\245) 189 488.31 T
4 F
(V) 202.74 488.31 T
(erify that your operating systems are properly tuned. Y) 208.85 488.31 T
(our \336leserver should not be) 427.41 488.31 T
(dropping packets, should have lots of nfsd\325) 202.74 476.31 T
(s and a good hit rate on its \336lename and) 374.58 476.31 T
(buf) 202.74 464.31 T
(fer caches. Y) 215.89 464.31 T
(our clients should not be aggressively retrying commands when the) 267.33 464.31 T
(server becomes too loaded.) 202.74 452.31 T
-0.1 (There are many other items to watch, but these will get you started. For those situations) 189 428.31 P
(where you suspect that you might have a problem or where you need to have a better) 189 416.31 T
-0.07 (feel for your overall system\325) 189 404.31 P
-0.07 (s performance, consider investigating AIM\325) 301.97 404.31 P
-0.07 (s) 476.28 404.31 P
2 F
-0.07 (SharpShooter) 482.6 404.31 P
4 F
(distributed Client/Server Performance Monitor) 189 392.31 T
(. It will help you to track down your) 375.83 392.31 T
(loading on a client by client and \336leserver by \336leserver basis. It will even help you to) 189 380.31 T
(monitor \336lesystem level loading. It will also allow you to study graphical displays of) 189 368.31 T
(your network loading to help you to manage your resources and plan future expansions.) 189 356.31 T
(If you have any comments or questions regarding NFSR) 189 332.31 T
(TM, you can contact AIM) 413.81 332.31 T
(T) 189 320.31 T
(echnology at \050408\051748-8649 or nfsrtm-comments@aim.com.) 194.41 320.31 T
72 358.69 144 430.69 C
72 358.69 144 430.69 R
6 X
0 K
V
80 362.69 152 416.69 R
V
2 10 Q
0 X
(SharpShooter) 80 410.02 T
4 F
(can help \336nd) 80 398.02 T
(problems.) 80 386.02 T
0 0 612 792 C
72 358.69 144 430.69 R
1 H
0 Z
0 X
0 K
N
FMENDPAGE
%%EndPage: "4" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
72 750.68 558 750.68 2 L
0.25 H
0 Z
0 X
0 K
N
0 8 Q
(So what is \322Good Enough?\323) 207 737.5 T
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(Some Facts about NFS Response T) 207 59.9 T
(ime) 346.64 59.9 T
1 12 Q
(3) 552 59.9 T
207 672.98 558 675.98 C
207 675.13 558 675.13 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 14 Q
0 X
0 K
(So what is \322Good Enough?\323) 207 680.64 T
4 10 Q
(Since each environment varies by mix and the mix varies minute by minute, it is dif) 207 652.31 T
(\336-) 542.17 652.31 T
(cult to de\336ne an acceptable threshold of performance. It is common to have GetAttr) 207 640.31 T
(operations \050generally the most common operation\051 responding in about 1 millisecond) 207 628.31 T
-0.33 (\0500.001 seconds\051 while write operations for the same \336leserver can take 100 milliseconds) 207 616.31 P
(\0500.100 seconds\051.) 207 604.31 T
(Even lightly loaded \050on average\051 systems will routinely take \322long times\323 to service) 207 580.31 T
(faster operations occurring during periods of peak loading. In other words, it is \322nor-) 207 568.31 T
(mal\323 to have some operations which violate a given performance threshold. The key is) 207 556.31 T
(to monitor not only the performance threshold but also the percentage which violates) 207 544.31 T
(the threshold. Using the command \322nfsstat -m\323 one is able to view a subset of the per-) 207 532.31 T
-0.11 (formance characteristics of a working system. T) 207 520.31 P
-0.11 (ypically) 398.01 520.31 P
-0.11 (, read operations will operate in) 429.56 520.31 P
(the 7-12 millisecond range for lightly loaded system. W) 207 508.31 T
(rite operations will typically) 430.07 508.31 T
(take 4 to 5 times longer than reads.) 207 496.31 T
207 439.98 558 442.98 C
207 442.13 558 442.13 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 14 Q
0 X
0 K
(Computing Your Own Performance Thr) 207 447.64 T
(eshold) 429.59 447.64 T
4 10 Q
(The \336rst question to be answered is: \322At what point in the day does my response time) 207 419.31 T
-0.14 (\336rst slow down to an unacceptable level?\323 At this time, run the NFSR) 207 407.31 P
-0.14 (TM program with) 484.29 407.31 P
-0.12 (a narrow window of 5 to 10 minutes. This will tell you what the average response times) 207 395.31 P
(are for the various \336leservers and give you an idea of how busy these \336leservers truly) 207 383.31 T
(are. \050Don\325) 207 371.31 T
(t for) 247.89 371.31 T
(get that many of the NFS operations which take place are \322hidden\323 ones) 264.64 371.31 T
(generated by background tasks, paging, swapping and other activities which are often) 207 359.31 T
(ignored.\051 Then run NFSR) 207 347.31 T
(TM at a time of minimal load such as early in the morning or) 309.11 347.31 T
(late in the evening when backups are not being run. Lastly run it at a time with peak) 207 335.31 T
(loading. This will give you three data points from which to calculate your local thresh-) 207 323.31 T
(olds.) 207 311.31 T
(The ideal threshold is one in which more than 90% of all NFS requests are serviced) 207 287.31 T
(under the threshold *and* response time is viewed as \322good\323 to \322satisfactory) 207 275.31 T
(.\323 There-) 514.18 275.31 T
(fore, a good starting point is either the \336rst value measured above or the average of the) 207 263.31 T
-0.22 (three readings. Once this threshold value is calculated, NFSR) 207 251.31 P
-0.22 (TM will allow you to mon-) 450 251.31 P
-0.19 (itor \336leserver performance over longer periods of time so that you can better judge your) 207 239.31 P
(\336leserver performance.) 207 227.31 T
207 170.98 558 173.98 C
207 173.13 558 173.13 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 14 Q
0 X
0 K
(\322What if My Response is Bad?\323) 207 178.64 T
4 10 Q
(First of all, don\325) 207 154.31 T
(t panic. There are many possible causes for poor performance\321most) 271.78 154.31 T
(are easily \336xable. The following is a quick list of \322easy \336xes.\323) 207 142.31 T
3 F
(\245) 207 124.31 T
4 F
-0.03 (Remove remote mounts going through routers and/or bridges. For best performance) 220.74 124.31 P
(make sure that most operations go to \336leservers on the local subnet.) 220.74 112.31 T
72 619 144 688.68 C
72 619 144 688.68 R
6 X
0 K
V
83 615.68 155 669.68 R
V
4 10 Q
0 X
(NFS load) 83 663.02 T
(changes very) 83 651.02 T
(quickly) 83 639.02 T
(.) 112.33 639.02 T
0 0 612 792 C
72 619 144 688.68 R
1 H
0 Z
0 X
0 K
N
72 385 144 458 C
72 385 144 458 R
6 X
0 K
V
76 391 148 445 R
V
4 10 Q
0 X
(\322Good\323 response) 76 438.33 T
(time can mean) 76 426.33 T
(50 ms. Bad can) 76 414.33 T
(mean 15 ms.) 76 402.33 T
0 0 612 792 C
72 385 144 458 R
1 H
0 Z
0 X
0 K
N
FMENDPAGE
%%EndPage: "3" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
54 750.68 540 750.68 2 L
0.25 H
0 Z
0 X
0 K
N
0 8 Q
(Not all NFS operations are created equal.) 189 737.5 T
54 75.33 540 75.33 2 L
2 Z
N
1 12 Q
(2) 54 59.9 T
2 10 Q
(Some Facts about NFS Response T) 189 59.9 T
(ime) 328.64 59.9 T
4 F
(These commands can be classi\336ed into several areas:) 189 683.31 T
0 8 Q
(1.) 189 665.31 T
4 10 Q
(Read Operations: GetAttr) 202.74 665.31 T
(, LookUp, ReadLink, Read,) 305.05 665.31 T
(ReadDir -- These operations) 418.31 665.31 T
(return information or data) 202.74 653.31 T
(about \336les. The server) 308.78 653.31 T
(\325) 397.97 653.31 T
(s buf) 400.75 653.31 T
(fer cache will contain) 420.27 653.31 T
(this) 509.09 653.31 T
(information in a lar) 202.74 641.31 T
(ge portion of the cases.) 280.01 641.31 T
0 8 Q
(2.) 189 626.31 T
4 10 Q
(W) 202.74 626.31 T
(rite operations: SetAttr) 211.78 626.31 T
(, W) 302.99 626.31 T
(rite, -- These operations) 317.02 626.31 T
(cause existing data to be modi-) 415 626.31 T
(\336ed. The NFS protocol) 202.74 614.31 T
(requires that the server not reply until these changes) 297.41 614.31 T
(have) 508.09 614.31 T
(been sent to \322stable store\323 -- disk or other) 202.74 602.31 T
(medium that will be relatively immune) 371.78 602.31 T
(from system) 202.74 590.31 T
(failures. Another term for these operations is) 254.94 590.31 T
(\322Synchronous.\323) 436.47 590.31 T
0 8 Q
(3.) 189 575.31 T
4 10 Q
(Housekeeping operations: Create, Remove, Rename, Link,) 202.74 575.31 T
(SymLink, MkDir) 440.35 575.31 T
(,) 509.37 575.31 T
(RmDir) 202.74 563.31 T
(, StatFS -- most of these) 230.11 563.31 T
(functions are also synchronous since they involve) 329.23 563.31 T
(modifying the \336lesystem in ways which could make) 202.74 551.31 T
(crash recovery dif) 413.73 551.31 T
(\336cult. The) 485.7 551.31 T
(exception is StatFS) 202.74 539.31 T
(which provides \336lesystem statistics such as the) 282.43 539.31 T
(amount of free) 472.6 539.31 T
(space, etc.) 202.74 527.31 T
0 8 Q
(4.) 189 512.31 T
4 10 Q
-0.27 (Unimplemented operations: Null, Root, W) 202.74 512.31 P
-0.27 (riteCache --) 371.73 512.31 P
-0.27 (these functions are de\336ned as) 421.15 512.31 P
(NO-OPs \050they perform no) 202.74 500.31 T
(actual function\051. Null is used to verify NFS services) 309.89 500.31 T
(by) 520.3 500.31 T
(the automounter command. W) 202.74 488.31 T
(riteCache and Root are) 323.93 488.31 T
-0.03 (functions which are for future) 418.3 488.31 P
(use and are outdated,) 202.74 476.31 T
(respectively) 289.62 476.31 T
(. Except for Null, these functions should) 337.26 476.31 T
(never be) 501.32 476.31 T
(called.) 202.74 464.31 T
189 407.98 540 410.98 C
189 410.13 540 410.13 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 14 Q
0 X
0 K
(Not all NFS operations ar) 189 415.64 T
(e cr) 334.65 415.64 T
(eated equal.) 355.49 415.64 T
4 10 Q
(Dif) 189 391.31 T
(ferent NFS operations take dif) 202.14 391.31 T
(ferent periods of time. Read operations have a high) 322.99 391.31 T
-0.06 (probability of hitting the server) 189 379.31 P
-0.06 (\325) 314.03 379.31 P
-0.06 (s buf) 316.81 379.31 P
-0.06 (fer cache and therefore are usually the fastest oper-) 336.27 379.31 P
(ations being dependent solely on CPU speeds. This is fortunate since they are also usu-) 189 367.31 T
-0.04 (ally the most popular operations. W) 189 355.31 P
-0.04 (rite operations are typically much slower since they) 331.62 355.31 P
(are limited not by CPU speed but by mechanical disk movements. Most housekeeping) 189 343.31 T
(operations are also mechanically limited.) 189 331.31 T
(Synchronous operations can become very slow when many synchronous operations) 189 307.31 T
-0.13 (queue on the same disk. Furthermore, once a \336leserver begins to slow because of a load) 189 295.31 P
(of synchronous operations, read operations which are not in the buf) 189 283.31 T
(fer cache are also) 458.34 283.31 T
(slowed.) 189 271.31 T
(This picture is further complicated by the fact that the \322mix\323 of NFS operation varies) 189 247.31 T
(wildly from place to place and minute to minute. For example, in CAD environments,) 189 235.31 T
(read operations dominate throughout most of the day but write operations dominate) 189 223.31 T
-0.19 (before lunch and quitting time as databases are saved. In software development environ-) 189 211.31 P
(ments, the load of synchronous operations is more continuous and heavier on average) 189 199.31 T
(\050though will usually be less than the peak under CAD environments\051.) 189 187.31 T
(It is common for a \336leserver to go a second or more between NFS requests. It is also) 189 163.31 T
(common for a server to receive 200 or more NFS operations in a single second. The) 189 151.31 T
-0.35 (NFS load is at best called \322bursty) 189 139.31 P
-0.35 (.\323 However) 320.04 139.31 P
-0.35 (, most servers respond quickly when lightly) 365.35 139.31 P
(loaded and slower as the load increases.) 189 127.31 T
71 351 162 423 C
71 351 162 423 R
6 X
0 K
V
76 343.31 158 408.31 R
V
4 10 Q
0 X
(NFS performance) 76 401.65 T
-0.89 (is heavily dependent) 76 389.65 P
(upon your local) 76 377.65 T
(\322mix.\323) 76 365.65 T
0 0 612 792 C
71 351 162 423 R
1 H
0 Z
0 X
0 K
N
FMENDPAGE
%%EndPage: "2" 1
%%Page: "1" 1
612 792 0 FMBEGINPAGE
72 750.68 198 750.68 2 L
0.25 H
0 Z
0 X
0 K
N
0 9 Q
(June 18, 1992) 72 737.84 T
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
N
1 12 Q
(1) 552 59.9 T
2 24 Q
-0.88 (Some Facts about NFS) 207 659 S
-0.88 (Response T) 207 629 S
-0.88 (ime) 306.76 629 S
0 12 Q
(Robert E. Cousins,) 207 577 T
(AIM T) 207 561 T
(echnology) 238.76 561 T
1 10 Q
(A brief discussion of NFS) 207 526.33 T
(technology) 207 514.33 T
(, r) 252.54 514.33 T
(esponse time) 261.79 514.33 T
(issues, and AIM\325) 207 502.33 T
(s NFS) 278.54 502.33 T
(Response T) 207 490.33 T
(ime Monitor) 255.96 490.33 T
(\050NFSR) 207 478.33 T
(TM\051.) 236.07 478.33 T
207 412.98 558 415.98 C
207 415.14 558 415.14 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 14 Q
0 X
0 K
(What is NFS?) 207 420.65 T
4 10 Q
(NFS is a network protocol which allows a client computer \050such as a workstation\051 to) 207 396.32 T
-0.08 (remotely access disk \336les on a server computer \050such as a \336leserver\051. There are 18 NFS) 207 384.32 P
(operations which can be viewed as the primitive operations upon which all other \336le) 207 372.32 T
-0.21 (operations can be built. NFS operations are implemented using a facility known as RPC) 207 360.32 P
(\050Remote Procedure Call\051. A feature of RPC is that a client makes a request and the) 207 348.32 T
-0.14 (server replies once the operation is complete. \050The client never \322trusts\323 the server -- if a) 207 336.32 P
(request is not matched by a reply within a short period of time, the client is responsible) 207 324.32 T
(for retrying the operation.\051 The list of NFS operations are:) 207 312.32 T
0 8 Q
(T) 220.74 288.32 T
(ABLE 1.) 225.04 288.32 T
4 9 Q
(Null) 220.74 271.98 T
(Create) 303 271.98 T
(GetAttr) 220.74 256.98 T
(Remove) 303 256.98 T
(SetAttr) 220.74 241.98 T
(Rename) 303 241.98 T
(Root) 220.74 226.98 T
(Link) 303 226.98 T
(LookUp) 220.74 211.98 T
(SymLink) 303 211.98 T
(ReadLink) 220.74 196.98 T
(MkDir) 303 196.98 T
(Read) 220.74 181.98 T
(RmDir) 303 181.98 T
(W) 220.74 166.98 T
(riteCache) 228.87 166.98 T
(ReadDir) 303 166.98 T
(W) 220.74 151.98 T
(rite) 228.87 151.98 T
(StatFS) 303 151.98 T
214.74 281.98 378 281.98 2 L
V
0.5 H
0 Z
N
FMENDPAGE
%%EndPage: "1" 0
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 4 -1
%%DocumentFonts: Helvetica-Bold
%%+ Times-Bold
%%+ Times-Italic
%%+ Courier-Bold
%%+ Times-Roman
