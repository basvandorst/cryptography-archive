cd in SSLeay-0.6.1 and type

patch -p0 -l <061-062.patch

*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./Configure	Fri Jul 12 09:53:34 1996
--- ./Configure	Thu Jul 25 10:26:44 1996
***************
*** 93,99 ****
  "linux-elf",	"gcc:-DL_ENDIAN -DTERMIO -O3 -fomit-frame-pointer -m486 -Wall::BN_LLONG MD2_CHAR RC4_INDEX:asm/x86-lnx.o",
  "debug-linux-elf","gcc:-DL_ENDIAN -DTERMIO -g -O -m486 -Wall -Wuninitialized:-lefence:BN_LLONG MD2_CHAR RC4_INDEX:asm/x86-lnx.o",
  "linux-aout",	"gcc:-DL_ENDIAN -DTERMIO -O3 -fomit-frame-pointer -m486 -Wall::BN_LLONG MD2_CHAR RC4_INDEX:asm/x86-lnxa.o",
! "NetBSD",	"gcc:-DTERMIOS -D_ANSI_SOURCE -O3 -fomit-frame-pointer -m486 -Wall::BN_LLONG MD2_CHAR RC4_INDEX:x86-lnx.o",
  "FreeBSD",   "gcc:-DTERMIO -D_ANSI_SOURCE -DHAVE_MD -O2 -m486 -Wall:-ldes -lmd:BN_LLONG RC4_INDEX:",
  #"bsdi-gcc",	"shlicc2:-O3 -ffast-math-m486::RSA_LLONG MD2_CHAR RC4_INDEX:",
  "bsdi-gcc",     "gcc2:-O3 -ffast-math -m486::RSA_LLONG MD2_CHAR RC4_INDEX:",
--- 93,100 ----
  "linux-elf",	"gcc:-DL_ENDIAN -DTERMIO -O3 -fomit-frame-pointer -m486 -Wall::BN_LLONG MD2_CHAR RC4_INDEX:asm/x86-lnx.o",
  "debug-linux-elf","gcc:-DL_ENDIAN -DTERMIO -g -O -m486 -Wall -Wuninitialized:-lefence:BN_LLONG MD2_CHAR RC4_INDEX:asm/x86-lnx.o",
  "linux-aout",	"gcc:-DL_ENDIAN -DTERMIO -O3 -fomit-frame-pointer -m486 -Wall::BN_LLONG MD2_CHAR RC4_INDEX:asm/x86-lnxa.o",
! "NetBSD-sparc",	"gcc:-DTERMIOS -O3 -fomit-frame-pointer -mv8 -Wall::BN_LLONG MD2_CHAR RC4_INDEX:",
! "NetBSD-x86",	"gcc:-DTERMIOS -D_ANSI_SOURCE -O3 -fomit-frame-pointer -m486 -Wall::BN_LLONG MD2_CHAR RC4_INDEX:x86-lnx.o",
  "FreeBSD",   "gcc:-DTERMIO -D_ANSI_SOURCE -DHAVE_MD -O2 -m486 -Wall:-ldes -lmd:BN_LLONG RC4_INDEX:",
  #"bsdi-gcc",	"shlicc2:-O3 -ffast-math-m486::RSA_LLONG MD2_CHAR RC4_INDEX:",
  "bsdi-gcc",     "gcc2:-O3 -ffast-math -m486::RSA_LLONG MD2_CHAR RC4_INDEX:",
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./INSTALL	Wed Jul 10 09:46:08 1996
--- ./INSTALL	Thu Jul 25 15:44:47 1996
***************
*** 18,24 ****
  # to set the install locations if you don't like
  # the default location of /usr/local/ssl
  # Do this by running
! perl util/ssldir /new/ssl/home
  # if you have perl, or by hand if not.
  
  # If things have been stuffed up with the sym links, run
--- 18,24 ----
  # to set the install locations if you don't like
  # the default location of /usr/local/ssl
  # Do this by running
! perl util/ssldir.pl /new/ssl/home
  # if you have perl, or by hand if not.
  
  # If things have been stuffed up with the sym links, run
***************
*** 53,58 ****
--- 53,64 ----
  While in theory this stuff is optional, it often makes a big
  difference in performance and when using assember, it is importaint
  for the 'Bignum bits' match those required by the assember code.
+ A warning for people using gcc with sparc cpu's.  Gcc needs the -mv8
+ flag to use the hardware multiply instruction which was not present in
+ earlier versions of the sparc CPU.  I define it by default.  If you
+ have an old sparc, and it crashes, try rebuilding with this flag
+ removed.  I am leaving this flag on by default because it makes
+ things run 4 times faster :-)
  
  # clean out all the old stuff
  make clean
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./Makefile.ssl	Fri Jul 12 17:21:03 1996
--- ./Makefile.ssl	Thu Jul 25 16:20:02 1996
***************
*** 1,6 ****
  #
  # Makefile for all the SSL related library routines and utilities
! VERSION	= 0.6.1
  #
  # make install will install:
  #   libraries into $INSTALLTOP/lib
--- 1,6 ----
  #
  # Makefile for all the SSL related library routines and utilities
! VERSION	= 0.6.2
  #
  # make install will install:
  #   libraries into $INSTALLTOP/lib
***************
*** 38,46 ****
  #	    system defines as well, i.e. _REENTERANT for Solaris 2.[34]
  # TERMIO  - Define the termio terminal subsystem, needed if sgtty is missing.
  # TERMIOS - Define the termios terminal subsystem, Silicon Graphics.
  
  CC= cc
! CFLAG= -O -DNOPROTO
  PEX_LIBS= -L. -L.. -L../.. -L../../..
  EX_LIBS= 
  BN_MULW= bn_mulw.o
--- 38,47 ----
  #	    system defines as well, i.e. _REENTERANT for Solaris 2.[34]
  # TERMIO  - Define the termio terminal subsystem, needed if sgtty is missing.
  # TERMIOS - Define the termios terminal subsystem, Silicon Graphics.
+ # LOCK_DEBUG - turns on lots of lock debug output :-)
  
  CC= cc
! CFLAG= -O4 -DNOPROTO -DNOCONST
  PEX_LIBS= -L. -L.. -L../.. -L../../..
  EX_LIBS= 
  BN_MULW= bn_mulw.o
***************
*** 62,68 ****
  EDIRS=	times doc bugs util include certs ms shlib
  MISC=	COPYRIGHT Configure INSTALL Makefile.ssl Makefile \
  	RAMBLINGS README README.050 README.051 README.052 TODO \
! 	README.060 README.061 \
  	VERSION PROBLEMS MINFO makefile.one e_os.h \
  	MICROSOFT
  WDIRS=	windows
--- 63,69 ----
  EDIRS=	times doc bugs util include certs ms shlib
  MISC=	COPYRIGHT Configure INSTALL Makefile.ssl Makefile \
  	RAMBLINGS README README.050 README.051 README.052 TODO \
! 	README.060 README.061 README.062 \
  	VERSION PROBLEMS MINFO makefile.one e_os.h \
  	MICROSOFT
  WDIRS=	windows
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./README	Fri Jul 12 09:28:30 1996
--- ./README	Wed Jul 24 07:56:42 1996
***************
*** 1,4 ****
! 		SSLeay 0.6.1 12-Jul-1996
  		Copyright (c) 1996, Eric Young
  		All rights reserved.
  
--- 1,4 ----
! 		SSLeay 0.6.2 24-Jul-1996
  		Copyright (c) 1996, Eric Young
  		All rights reserved.
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./TODO	Wed Jul 10 09:46:09 1996
--- ./TODO	Thu Jul 25 09:03:51 1996
***************
*** 24,34 ****
  + X509 callback.  I need to callback the application to retrieve certificates
    and CRL.
  
- - Improve the maths libraries (esp a^b%m).  I'm coming to the conclusion
-   that it may not be worth the effort.  The 'best' appear to only be
-   %30 faster and the amount of time I would have to spend would not be worth
-   it unless I got payed :-).  I know the algorithms, it's just time.
-   
  *<- designates the things I'm activly working on.
  +<- designates that which I have next in the queue.
  
--- 24,29 ----
*** /dev/null	Thu Jul 25 17:44:25 1996
--- ./README.062	Wed Jul 24 23:25:20 1996
***************
*** 0 ****
--- 1,35 ----
+ 0.6.2
+ 
+ This is most bug fixes and functionality improvements.
+ 
+ Additions are
+ - More thread debugging patches, the thread stuff is still being
+   tested, but for those keep to play with stuff, have a look in
+   crypto/cryptlib.c.  The application needs to define 1 (or optionaly
+   a second) callback that is used to implement locking.  Compiling
+   with LOCK_DEBUG spits out lots of locking crud :-).
+   This is what I'm currently working on.
+ - SSL_CTX_set_default_passwd_cb() can be used to define the callback
+   function used in the SSL*_file() functions used to load keys.  I was
+   always of the opinion that people should call
+   PEM_read_RSAPrivateKey() and pass the callback they want to use, but
+   it appears they just want to use the SSL_*_file() function() :-(.
+ - 'enc' now has a -kfile so a key can be read from a file.  This is
+   mostly used so that the passwd does not appear when using 'ps',
+   which appears imposible to stop under solaris.
+ - X509v3 certificates now work correctly.  I even have more examples
+   in my tests :-).  There is now a X509_EXTENSION type that is used in
+   X509v3 certificates and CRLv2.
+ - Fixed that signature type error :-(
+ - Fixed quite a few potential memory leaks and problems when reusing
+   X509, CRL and REQ structures.
+ - EVP_set_pw_prompt() now sets the library wide default password
+   prompt.
+ - The 'pkcs7' command will now, given the -print_certs flag, output in
+   pem format, all certificates and CRL contained within.  This is more
+   of a pre-emtive thing for the new verisign distribution method.  I
+   should also note, that this also gives and example in code, of how
+   to do this :-), or for that matter, what is involved in going the
+   other way (list of certs and crl -> pkcs7).
+ - Added RSA's DESX to the DES library.  It is also available via the
+   EVP_desx_cbc() method and via 'enc desx'. 
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./VERSION	Fri Jul 12 09:39:34 1996
--- ./VERSION	Thu Jul 25 10:26:56 1996
***************
*** 1,4 ****
! Version 0.6.1 01/07/1996 eay
  	- WIN32_rename added for apps/ca.c, thanks to 
  	  Andy Brown <a.brown@nexor.co.uk> for the patch.
  	- Added doc/ssl.doc which is a minimal function list.
--- 1,45 ----
! Version 0.6.2 eay
! 	- Cleanup of CA.sh - prompted by John Franks <john@math.nwu.edu>
! 	- Added DESX, I need to get some test vectors for it.
! 	  It takes a 24 bit key, 56 bits are the DES key and the
! 	  2 whitening 8 byte blocks are indenedantly supplied.
! 	- More thread related patches from
! 	  David Weisman <weisman@oberon.osf.org>.
! 	- Added SSL_CTX_set_default_passwd_cb() which sets the password
! 	  retrieval callback.  If present it is used, else system default.
! 	- Bug in crypto/bss_mem.c mem_gets(), thanks to
! 	  Santeri Paavolainen <sjpaavol@cc.helsinki.fi>
! 	- -kfile option for apps/enc.  This can be used to read a key from
! 	  a file.  This has mostly been put in because of the problems with
! 	  clearing a password from a command line argument which does
! 	  not work from OS's like solaris.
! 	- Fixed the X509v3 attributes stuff.  I was not reading the
! 	  optional boolean value and I was also assuming that the
! 	  X509v3 stuff was the same as PKCS#10 attributes.  Wrong!
! 	  There is now a X509_EXTENSION type which is used by CRLv2 and
! 	  X509v3.  I have also updates CRL to the new format but I need
! 	  test cases.
! 	- Cleaned up the error message for a bad decrypt in s_server.c
! 	- Modifed the signature type generated in a_sign.c
! 	- Fixed a problem with X509 structure re-use.  I have also
! 	  added a new flag to the ASN1_OBJECT type so dynamically
! 	  allocated structures can be diferentiated from static ones
! 	- Some new Netscape object identifiers have been added.
! 	- Added -print_certs to apps/pkcs7.c.  This will now extract CRL and
! 	  certificates from PKCS7 data. 
! 	- Found and fixed a bug in PEM_X509_INFO_read_bio().
! 	- With "Simon J. Gerraty" <sjg@zen.void.oz.au> prompting, the
! 	  PEM pass phrase, when you are using the default callback, is
! 	  now only used if the EVP_set_pw_prompt() function has not been
! 	  used to set a default library prompt.
! 	- Some modes to i2d_X509_NAME to make it thread safe - thanks
! 	  to Gordon Chaffee <chaffee@odie.CS.Berkeley.EDU>
! 	- crypto/Makefile.ssl 'make depend' problem fixed. - thanks to
! 	  Eugene Crosser <crosser@online.ru>
! 	- More C++ things I missed for the headers - thanks to
! 	  Sampo Kellomaki <sampo@neuronio.pt>
! 
! Version 0.6.1 13/07/1996 eay
  	- WIN32_rename added for apps/ca.c, thanks to 
  	  Andy Brown <a.brown@nexor.co.uk> for the patch.
  	- Added doc/ssl.doc which is a minimal function list.
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./MINFO	Fri Jul 12 17:22:09 1996
--- ./MINFO	Thu Jul 25 16:07:09 1996
***************
*** 16,31 ****
  MAKEFILE=Makefile.ssl
  MAN1=1
  MAN3=3
! MISC=COPYRIGHT Configure INSTALL Makefile.ssl Makefile RAMBLINGS README README.050 README.051 README.052 TODO README.060 README.061 VERSION PROBLEMS MINFO makefile.one e_os.h MICROSOFT
! NAME=SSLeay-0.6.1
  ONEDIRS=out tmp
  PEX_LIBS=-L. -L.. -L../.. -L../../..
  SHELL=/bin/sh
! TARFILE=SSLeay-0.6.1.tar
  TOP=.
! VERSION=0.6.1
  WDIRS=windows
! WTARFILE=SSLeay-0.6.1-win.tar
  RELATIVE_DIRECTORY=
  RELATIVE_DIRECTORY=crypto
  ALL=Makefile README cryptlib.c cryptlib.h date.h crypto.h cryptoall.h
--- 16,31 ----
  MAKEFILE=Makefile.ssl
  MAN1=1
  MAN3=3
! MISC=COPYRIGHT Configure INSTALL Makefile.ssl Makefile RAMBLINGS README README.050 README.051 README.052 TODO README.060 README.061 README.062 VERSION PROBLEMS MINFO makefile.one e_os.h MICROSOFT
! NAME=SSLeay-0.6.2
  ONEDIRS=out tmp
  PEX_LIBS=-L. -L.. -L../.. -L../../..
  SHELL=/bin/sh
! TARFILE=SSLeay-0.6.2.tar
  TOP=.
! VERSION=0.6.2
  WDIRS=windows
! WTARFILE=SSLeay-0.6.2-win.tar
  RELATIVE_DIRECTORY=
  RELATIVE_DIRECTORY=crypto
  ALL=Makefile README cryptlib.c cryptlib.h date.h crypto.h cryptoall.h
***************
*** 98,104 ****
  TOP=../..
  RELATIVE_DIRECTORY=
  RELATIVE_DIRECTORY=crypto/des
! ALL=Makefile des.org des_locl.org cbc3_enc.c cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c ecb3_enc.c ecb_enc.c ede_enc.c enc_read.c enc_writ.c fcrypt.c ncbc_enc.c ofb64enc.c ofb_enc.c pcbc_enc.c qud_cksm.c rand_key.c read_pwd.c rpc_enc.c set_key.c str2key.c cfb64ede.c ofb64ede.c supp.c des_locl.h rpc_des.h podd.h sk.h spr.h des_ver.h des.h
  APPS=
  CC=cc
  CFLAG=-g
--- 98,104 ----
  TOP=../..
  RELATIVE_DIRECTORY=
  RELATIVE_DIRECTORY=crypto/des
! ALL=Makefile des.org des_locl.org cbc3_enc.c cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c ecb3_enc.c ecb_enc.c ede_enc.c enc_read.c enc_writ.c fcrypt.c ncbc_enc.c ofb64enc.c ofb_enc.c pcbc_enc.c qud_cksm.c rand_key.c read_pwd.c rpc_enc.c set_key.c xcbc_enc.c str2key.c cfb64ede.c ofb64ede.c supp.c des_locl.h rpc_des.h podd.h sk.h spr.h des_ver.h des.h
  APPS=
  CC=cc
  CFLAG=-g
***************
*** 110,121 ****
  INCLUDES=
  INSTALLTOP=/usr/local/ssl
  LIB=../../libcrypto.a
! LIBOBJ=set_key.o ecb_enc.o ede_enc.o cbc_enc.o cbc3_enc.o ecb3_enc.o cfb64enc.o cfb64ede.o cfb_enc.o ofb64ede.o enc_read.o enc_writ.o fcrypt.o ncbc_enc.o ofb64enc.o ofb_enc.o str2key.o pcbc_enc.o qud_cksm.o rand_key.o read_pwd.o rpc_enc.o cbc_cksm.o supp.o
! LIBSRC=cbc3_enc.c cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c ecb3_enc.c ecb_enc.c ede_enc.c enc_read.c enc_writ.c fcrypt.c ncbc_enc.c ofb64enc.c ofb_enc.c pcbc_enc.c qud_cksm.c rand_key.c read_pwd.c rpc_enc.c set_key.c str2key.c cfb64ede.c ofb64ede.c supp.c
  MAKE=make -f Makefile.ssl
  MAKEDEPEND=makedepend -fMakefile.ssl
  MAKEFILE=Makefile.ssl
! SRC=cbc3_enc.c cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c ecb3_enc.c ecb_enc.c ede_enc.c enc_read.c enc_writ.c fcrypt.c ncbc_enc.c ofb64enc.c ofb_enc.c pcbc_enc.c qud_cksm.c rand_key.c read_pwd.c rpc_enc.c set_key.c str2key.c cfb64ede.c ofb64ede.c supp.c
  TEST=destest.c
  TOP=../..
  RELATIVE_DIRECTORY=
--- 110,121 ----
  INCLUDES=
  INSTALLTOP=/usr/local/ssl
  LIB=../../libcrypto.a
! LIBOBJ=set_key.o ecb_enc.o ede_enc.o cbc_enc.o cbc3_enc.o ecb3_enc.o cfb64enc.o cfb64ede.o cfb_enc.o ofb64ede.o enc_read.o enc_writ.o fcrypt.o ncbc_enc.o ofb64enc.o ofb_enc.o str2key.o pcbc_enc.o qud_cksm.o rand_key.o xcbc_enc.o read_pwd.o rpc_enc.o cbc_cksm.o supp.o
! LIBSRC=cbc3_enc.c cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c ecb3_enc.c ecb_enc.c ede_enc.c enc_read.c enc_writ.c fcrypt.c ncbc_enc.c ofb64enc.c ofb_enc.c pcbc_enc.c qud_cksm.c rand_key.c read_pwd.c rpc_enc.c set_key.c xcbc_enc.c str2key.c cfb64ede.c ofb64ede.c supp.c
  MAKE=make -f Makefile.ssl
  MAKEDEPEND=makedepend -fMakefile.ssl
  MAKEFILE=Makefile.ssl
! SRC=cbc3_enc.c cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c ecb3_enc.c ecb_enc.c ede_enc.c enc_read.c enc_writ.c fcrypt.c ncbc_enc.c ofb64enc.c ofb_enc.c pcbc_enc.c qud_cksm.c rand_key.c read_pwd.c rpc_enc.c set_key.c xcbc_enc.c str2key.c cfb64ede.c ofb64ede.c supp.c
  TEST=destest.c
  TOP=../..
  RELATIVE_DIRECTORY=
***************
*** 419,425 ****
  TOP=../..
  RELATIVE_DIRECTORY=
  RELATIVE_DIRECTORY=crypto/evp
! ALL=Makefile encode.c digest.c evp_enc.c evp_key.c e_ecb_d.c e_cbc_d.c e_cfb_d.c e_ofb_d.c e_ecb_i.c e_cbc_i.c e_cfb_i.c e_ofb_i.c e_ecb_3d.c e_cbc_3d.c e_rc4.c e_names.c e_cfb_3d.c e_ofb_3d.c e_ecb_r2.c e_cbc_r2.c e_cfb_r2.c e_ofb_r2.c m_md2.c m_md5.c m_sha.c m_sha1.c m_dss.c m_dss1.c m_names.c p_open.c p_seal.c p_sign.c p_verify.c p_lib.c bio_md.c evp_err.c envelope.h
  APPS=
  CC=cc
  CFLAG=-g
--- 419,425 ----
  TOP=../..
  RELATIVE_DIRECTORY=
  RELATIVE_DIRECTORY=crypto/evp
! ALL=Makefile encode.c digest.c evp_enc.c evp_key.c e_ecb_d.c e_cbc_d.c e_cfb_d.c e_ofb_d.c e_ecb_i.c e_cbc_i.c e_cfb_i.c e_ofb_i.c e_ecb_3d.c e_cbc_3d.c e_rc4.c e_names.c e_cfb_3d.c e_ofb_3d.c e_xcbc_d.c e_ecb_r2.c e_cbc_r2.c e_cfb_r2.c e_ofb_r2.c m_md2.c m_md5.c m_sha.c m_sha1.c m_dss.c m_dss1.c m_names.c p_open.c p_seal.c p_sign.c p_verify.c p_lib.c bio_md.c evp_err.c envelope.h
  APPS=
  CC=cc
  CFLAG=-g
***************
*** 433,444 ****
  INCLUDES=-I.. -I../../include
  INSTALLTOP=/usr/local/ssl
  LIB=../../libcrypto.a
! LIBOBJ=encode.o digest.o evp_enc.o evp_key.o e_ecb_d.o e_cbc_d.o e_cfb_d.o e_ofb_d.o e_ecb_i.o e_cbc_i.o e_cfb_i.o e_ofb_i.o e_ecb_3d.o e_cbc_3d.o e_rc4.o e_names.o e_cfb_3d.o e_ofb_3d.o e_ecb_r2.o e_cbc_r2.o e_cfb_r2.o e_ofb_r2.o m_md2.o m_md5.o m_sha.o m_sha1.o m_dss.o m_dss1.o m_names.o p_open.o p_seal.o p_sign.o p_verify.o p_lib.o bio_md.o evp_err.o
! LIBSRC=encode.c digest.c evp_enc.c evp_key.c e_ecb_d.c e_cbc_d.c e_cfb_d.c e_ofb_d.c e_ecb_i.c e_cbc_i.c e_cfb_i.c e_ofb_i.c e_ecb_3d.c e_cbc_3d.c e_rc4.c e_names.c e_cfb_3d.c e_ofb_3d.c e_ecb_r2.c e_cbc_r2.c e_cfb_r2.c e_ofb_r2.c m_md2.c m_md5.c m_sha.c m_sha1.c m_dss.c m_dss1.c m_names.c p_open.c p_seal.c p_sign.c p_verify.c p_lib.c bio_md.c evp_err.c
  MAKE=make -f Makefile.ssl
  MAKEDEPEND=makedepend -fMakefile.ssl
  MAKEFILE=Makefile.ssl
! SRC=encode.c digest.c evp_enc.c evp_key.c e_ecb_d.c e_cbc_d.c e_cfb_d.c e_ofb_d.c e_ecb_i.c e_cbc_i.c e_cfb_i.c e_ofb_i.c e_ecb_3d.c e_cbc_3d.c e_rc4.c e_names.c e_cfb_3d.c e_ofb_3d.c e_ecb_r2.c e_cbc_r2.c e_cfb_r2.c e_ofb_r2.c m_md2.c m_md5.c m_sha.c m_sha1.c m_dss.c m_dss1.c m_names.c p_open.c p_seal.c p_sign.c p_verify.c p_lib.c bio_md.c evp_err.c
  TEST=
  TOP=../..
  RELATIVE_DIRECTORY=
--- 433,444 ----
  INCLUDES=-I.. -I../../include
  INSTALLTOP=/usr/local/ssl
  LIB=../../libcrypto.a
! LIBOBJ=encode.o digest.o evp_enc.o evp_key.o e_ecb_d.o e_cbc_d.o e_cfb_d.o e_ofb_d.o e_ecb_i.o e_cbc_i.o e_cfb_i.o e_ofb_i.o e_ecb_3d.o e_cbc_3d.o e_rc4.o e_names.o e_cfb_3d.o e_ofb_3d.o e_xcbc_d.o e_ecb_r2.o e_cbc_r2.o e_cfb_r2.o e_ofb_r2.o m_md2.o m_md5.o m_sha.o m_sha1.o m_dss.o m_dss1.o m_names.o p_open.o p_seal.o p_sign.o p_verify.o p_lib.o bio_md.o evp_err.o
! LIBSRC=encode.c digest.c evp_enc.c evp_key.c e_ecb_d.c e_cbc_d.c e_cfb_d.c e_ofb_d.c e_ecb_i.c e_cbc_i.c e_cfb_i.c e_ofb_i.c e_ecb_3d.c e_cbc_3d.c e_rc4.c e_names.c e_cfb_3d.c e_ofb_3d.c e_xcbc_d.c e_ecb_r2.c e_cbc_r2.c e_cfb_r2.c e_ofb_r2.c m_md2.c m_md5.c m_sha.c m_sha1.c m_dss.c m_dss1.c m_names.c p_open.c p_seal.c p_sign.c p_verify.c p_lib.c bio_md.c evp_err.c
  MAKE=make -f Makefile.ssl
  MAKEDEPEND=makedepend -fMakefile.ssl
  MAKEFILE=Makefile.ssl
! SRC=encode.c digest.c evp_enc.c evp_key.c e_ecb_d.c e_cbc_d.c e_cfb_d.c e_ofb_d.c e_ecb_i.c e_cbc_i.c e_cfb_i.c e_ofb_i.c e_ecb_3d.c e_cbc_3d.c e_rc4.c e_names.c e_cfb_3d.c e_ofb_3d.c e_xcbc_d.c e_ecb_r2.c e_cbc_r2.c e_cfb_r2.c e_ofb_r2.c m_md2.c m_md5.c m_sha.c m_sha1.c m_dss.c m_dss1.c m_names.c p_open.c p_seal.c p_sign.c p_verify.c p_lib.c bio_md.c evp_err.c
  TEST=
  TOP=../..
  RELATIVE_DIRECTORY=
***************
*** 492,498 ****
  TOP=../..
  RELATIVE_DIRECTORY=
  RELATIVE_DIRECTORY=crypto/asn1
! ALL=Makefile README a_object.c a_bitstr.c a_utctm.c a_int.c a_octet.c a_print.c a_type.c a_set.c a_dup.c a_d2i_fp.c a_i2d_fp.c a_sign.c a_verify.c x_algor.c x_val.c x_pubkey.c x_sig.c x_req.c x_attrib.c x_name.c x_cinf.c x_x509.c x_crl.c x_info.c x_spki.c d2i_r_pr.c i2d_r_pr.c d2i_r_pu.c i2d_r_pu.c d2i_s_pr.c d2i_s_pu.c d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c t_req.c t_x509.c t_pkey.c p7_i_s.c p7_signi.c p7_signd.c p7_recip.c p7_enc_c.c p7_evp.c p7_dgst.c p7_s_e.c p7_enc.c p7_lib.c f_int.c i2d_dh.c d2i_dh.c n_pkey.c a_hdr.c x_pkey.c asn1_par.c asn1_lib.c asn1_err.c asn1.h asn1_mac.h
  APPS=
  CC=cc
  CFLAG=-g
--- 492,498 ----
  TOP=../..
  RELATIVE_DIRECTORY=
  RELATIVE_DIRECTORY=crypto/asn1
! ALL=Makefile README a_object.c a_bitstr.c a_utctm.c a_int.c a_octet.c a_print.c a_type.c a_set.c a_dup.c a_d2i_fp.c a_i2d_fp.c a_sign.c a_verify.c x_algor.c x_val.c x_pubkey.c x_sig.c x_req.c x_attrib.c x_name.c x_cinf.c x_x509.c x_crl.c x_info.c x_spki.c d2i_r_pr.c i2d_r_pr.c d2i_r_pu.c i2d_r_pu.c d2i_s_pr.c d2i_s_pu.c d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c t_req.c t_x509.c t_pkey.c p7_i_s.c p7_signi.c p7_signd.c p7_recip.c p7_enc_c.c p7_evp.c p7_dgst.c p7_s_e.c p7_enc.c p7_lib.c f_int.c i2d_dh.c d2i_dh.c n_pkey.c a_hdr.c x_pkey.c a_bool.c x_exten.c asn1_par.c asn1_lib.c asn1_err.c asn1.h asn1_mac.h
  APPS=
  CC=cc
  CFLAG=-g
***************
*** 506,517 ****
  INCLUDES=-I.. -I../../include
  INSTALLTOP=/usr/local/ssl
  LIB=../../libcrypto.a
! LIBOBJ=a_object.o a_bitstr.o a_utctm.o a_int.o a_octet.o a_print.o a_type.o a_set.o a_dup.o a_d2i_fp.o a_i2d_fp.o a_sign.o a_verify.o x_algor.o x_val.o x_pubkey.o x_sig.o x_req.o x_attrib.o x_name.o x_cinf.o x_x509.o x_crl.o x_info.o x_spki.o d2i_r_pr.o i2d_r_pr.o d2i_r_pu.o i2d_r_pu.o d2i_s_pr.o d2i_s_pu.o d2i_pu.o d2i_pr.o i2d_pu.o i2d_pr.o t_req.o t_x509.o t_pkey.o p7_i_s.o p7_signi.o p7_signd.o p7_recip.o p7_enc_c.o p7_evp.o p7_dgst.o p7_s_e.o p7_enc.o p7_lib.o f_int.o i2d_dh.o d2i_dh.o n_pkey.o a_hdr.o x_pkey.o asn1_par.o asn1_lib.o asn1_err.o
! LIBSRC=a_object.c a_bitstr.c a_utctm.c a_int.c a_octet.c a_print.c a_type.c a_set.c a_dup.c a_d2i_fp.c a_i2d_fp.c a_sign.c a_verify.c x_algor.c x_val.c x_pubkey.c x_sig.c x_req.c x_attrib.c x_name.c x_cinf.c x_x509.c x_crl.c x_info.c x_spki.c d2i_r_pr.c i2d_r_pr.c d2i_r_pu.c i2d_r_pu.c d2i_s_pr.c d2i_s_pu.c d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c t_req.c t_x509.c t_pkey.c p7_i_s.c p7_signi.c p7_signd.c p7_recip.c p7_enc_c.c p7_evp.c p7_dgst.c p7_s_e.c p7_enc.c p7_lib.c f_int.c i2d_dh.c d2i_dh.c n_pkey.c a_hdr.c x_pkey.c asn1_par.c asn1_lib.c asn1_err.c
  MAKE=make -f Makefile.ssl
  MAKEDEPEND=makedepend -fMakefile.ssl
  MAKEFILE=Makefile.ssl
! SRC=a_object.c a_bitstr.c a_utctm.c a_int.c a_octet.c a_print.c a_type.c a_set.c a_dup.c a_d2i_fp.c a_i2d_fp.c a_sign.c a_verify.c x_algor.c x_val.c x_pubkey.c x_sig.c x_req.c x_attrib.c x_name.c x_cinf.c x_x509.c x_crl.c x_info.c x_spki.c d2i_r_pr.c i2d_r_pr.c d2i_r_pu.c i2d_r_pu.c d2i_s_pr.c d2i_s_pu.c d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c t_req.c t_x509.c t_pkey.c p7_i_s.c p7_signi.c p7_signd.c p7_recip.c p7_enc_c.c p7_evp.c p7_dgst.c p7_s_e.c p7_enc.c p7_lib.c f_int.c i2d_dh.c d2i_dh.c n_pkey.c a_hdr.c x_pkey.c asn1_par.c asn1_lib.c asn1_err.c
  TEST=
  TOP=../..
  RELATIVE_DIRECTORY=
--- 506,517 ----
  INCLUDES=-I.. -I../../include
  INSTALLTOP=/usr/local/ssl
  LIB=../../libcrypto.a
! LIBOBJ=a_object.o a_bitstr.o a_utctm.o a_int.o a_octet.o a_print.o a_type.o a_set.o a_dup.o a_d2i_fp.o a_i2d_fp.o a_sign.o a_verify.o x_algor.o x_val.o x_pubkey.o x_sig.o x_req.o x_attrib.o x_name.o x_cinf.o x_x509.o x_crl.o x_info.o x_spki.o d2i_r_pr.o i2d_r_pr.o d2i_r_pu.o i2d_r_pu.o d2i_s_pr.o d2i_s_pu.o d2i_pu.o d2i_pr.o i2d_pu.o i2d_pr.o t_req.o t_x509.o t_pkey.o p7_i_s.o p7_signi.o p7_signd.o p7_recip.o p7_enc_c.o p7_evp.o p7_dgst.o p7_s_e.o p7_enc.o p7_lib.o f_int.o i2d_dh.o d2i_dh.o n_pkey.o a_hdr.o x_pkey.o a_bool.o x_exten.o asn1_par.o asn1_lib.o asn1_err.o
! LIBSRC=a_object.c a_bitstr.c a_utctm.c a_int.c a_octet.c a_print.c a_type.c a_set.c a_dup.c a_d2i_fp.c a_i2d_fp.c a_sign.c a_verify.c x_algor.c x_val.c x_pubkey.c x_sig.c x_req.c x_attrib.c x_name.c x_cinf.c x_x509.c x_crl.c x_info.c x_spki.c d2i_r_pr.c i2d_r_pr.c d2i_r_pu.c i2d_r_pu.c d2i_s_pr.c d2i_s_pu.c d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c t_req.c t_x509.c t_pkey.c p7_i_s.c p7_signi.c p7_signd.c p7_recip.c p7_enc_c.c p7_evp.c p7_dgst.c p7_s_e.c p7_enc.c p7_lib.c f_int.c i2d_dh.c d2i_dh.c n_pkey.c a_hdr.c x_pkey.c a_bool.c x_exten.c asn1_par.c asn1_lib.c asn1_err.c
  MAKE=make -f Makefile.ssl
  MAKEDEPEND=makedepend -fMakefile.ssl
  MAKEFILE=Makefile.ssl
! SRC=a_object.c a_bitstr.c a_utctm.c a_int.c a_octet.c a_print.c a_type.c a_set.c a_dup.c a_d2i_fp.c a_i2d_fp.c a_sign.c a_verify.c x_algor.c x_val.c x_pubkey.c x_sig.c x_req.c x_attrib.c x_name.c x_cinf.c x_x509.c x_crl.c x_info.c x_spki.c d2i_r_pr.c i2d_r_pr.c d2i_r_pu.c i2d_r_pu.c d2i_s_pr.c d2i_s_pu.c d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c t_req.c t_x509.c t_pkey.c p7_i_s.c p7_signi.c p7_signd.c p7_recip.c p7_enc_c.c p7_evp.c p7_dgst.c p7_s_e.c p7_enc.c p7_lib.c f_int.c i2d_dh.c d2i_dh.c n_pkey.c a_hdr.c x_pkey.c a_bool.c x_exten.c asn1_par.c asn1_lib.c asn1_err.c
  TEST=
  TOP=../..
  RELATIVE_DIRECTORY=
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./makefile.one	Fri Jul 12 17:22:11 1996
--- ./makefile.one	Thu Jul 25 16:07:10 1996
***************
*** 148,214 ****
  	$(OBJ_D)/enc_read.o $(OBJ_D)/enc_writ.o $(OBJ_D)/fcrypt.o \
  	$(OBJ_D)/ncbc_enc.o $(OBJ_D)/ofb64enc.o $(OBJ_D)/ofb_enc.o \
  	$(OBJ_D)/str2key.o $(OBJ_D)/pcbc_enc.o $(OBJ_D)/qud_cksm.o \
! 	$(OBJ_D)/rand_key.o $(OBJ_D)/read_pwd.o $(OBJ_D)/rpc_enc.o \
! 	$(OBJ_D)/cbc_cksm.o $(OBJ_D)/supp.o $(OBJ_D)/rc4_enc.o \
! 	$(OBJ_D)/rc2_ecb.o $(OBJ_D)/rc2_skey.o $(OBJ_D)/rc2_cbc.o \
! 	$(OBJ_D)/rc2cfb64.o $(OBJ_D)/rc2ofb64.o $(OBJ_D)/i_cbc.o \
! 	$(OBJ_D)/i_cfb64.o $(OBJ_D)/i_ofb64.o $(OBJ_D)/i_ecb.o \
! 	$(OBJ_D)/i_skey.o $(OBJ_D)/bn_add.o $(OBJ_D)/bn_div.o \
! 	$(OBJ_D)/bn_exp.o $(OBJ_D)/bn_lib.o $(OBJ_D)/bn_mod.o \
! 	$(OBJ_D)/bn_mul.o $(OBJ_D)/bn_print.o $(OBJ_D)/bn_rand.o \
! 	$(OBJ_D)/bn_shift.o $(OBJ_D)/bn_sub.o $(OBJ_D)/bn_word.o \
! 	$(OBJ_D)/bn_gcd.o $(OBJ_D)/bn_prime.o $(OBJ_D)/bn_err.o \
! 	$(OBJ_D)/bn_sqr.o $(OBJ_D)/bn_mulw.o $(OBJ_D)/bn_recp.o \
! 	$(OBJ_D)/bn_mont.o $(OBJ_D)/rsa_enc.o $(OBJ_D)/rsa_gen.o \
! 	$(OBJ_D)/rsa_lib.o $(OBJ_D)/rsa_sign.o $(OBJ_D)/rsa_err.o \
! 	$(OBJ_D)/dsa_lib.o $(OBJ_D)/dsa_vrf.o $(OBJ_D)/dsa_sign.o \
! 	$(OBJ_D)/dsa_err.o $(OBJ_D)/dh_gen.o $(OBJ_D)/dh_key.o \
! 	$(OBJ_D)/dh_lib.o $(OBJ_D)/dh_check.o $(OBJ_D)/dh_err.o \
! 	$(OBJ_D)/buffer.o $(OBJ_D)/bio_lib.o $(OBJ_D)/bio_cb.o \
! 	$(OBJ_D)/buf_err.o $(OBJ_D)/bss_mem.o $(OBJ_D)/bss_null.o \
! 	$(OBJ_D)/bss_fd.o $(OBJ_D)/bss_file.o $(OBJ_D)/bss_sock.o \
! 	$(OBJ_D)/bf_buff.o $(OBJ_D)/stack.o $(OBJ_D)/lhash.o \
! 	$(OBJ_D)/lh_stats.o $(OBJ_D)/md5_rand.o $(OBJ_D)/randfile.o \
! 	$(OBJ_D)/err.o $(OBJ_D)/err_all.o $(OBJ_D)/obj_dat.o \
! 	$(OBJ_D)/obj_lib.o $(OBJ_D)/obj_err.o $(OBJ_D)/encode.o \
! 	$(OBJ_D)/digest.o $(OBJ_D)/evp_enc.o $(OBJ_D)/evp_key.o \
! 	$(OBJ_D)/e_ecb_d.o $(OBJ_D)/e_cbc_d.o $(OBJ_D)/e_cfb_d.o \
! 	$(OBJ_D)/e_ofb_d.o $(OBJ_D)/e_ecb_i.o $(OBJ_D)/e_cbc_i.o \
! 	$(OBJ_D)/e_cfb_i.o $(OBJ_D)/e_ofb_i.o $(OBJ_D)/e_ecb_3d.o \
! 	$(OBJ_D)/e_cbc_3d.o $(OBJ_D)/e_rc4.o $(OBJ_D)/e_names.o \
! 	$(OBJ_D)/e_cfb_3d.o $(OBJ_D)/e_ofb_3d.o $(OBJ_D)/e_ecb_r2.o \
! 	$(OBJ_D)/e_cbc_r2.o $(OBJ_D)/e_cfb_r2.o $(OBJ_D)/e_ofb_r2.o \
! 	$(OBJ_D)/m_md2.o $(OBJ_D)/m_md5.o $(OBJ_D)/m_sha.o \
! 	$(OBJ_D)/m_sha1.o $(OBJ_D)/m_dss.o $(OBJ_D)/m_dss1.o \
! 	$(OBJ_D)/m_names.o $(OBJ_D)/p_open.o $(OBJ_D)/p_seal.o \
! 	$(OBJ_D)/p_sign.o $(OBJ_D)/p_verify.o $(OBJ_D)/p_lib.o \
! 	$(OBJ_D)/bio_md.o $(OBJ_D)/evp_err.o $(OBJ_D)/pem_sign.o \
! 	$(OBJ_D)/pem_seal.o $(OBJ_D)/pem_info.o $(OBJ_D)/pem_lib.o \
! 	$(OBJ_D)/pem_err.o $(OBJ_D)/x509_def.o $(OBJ_D)/x509_r2x.o \
! 	$(OBJ_D)/x509_cmp.o $(OBJ_D)/x509_obj.o $(OBJ_D)/x509_req.o \
! 	$(OBJ_D)/x509_vrf.o $(OBJ_D)/x509_crt.o $(OBJ_D)/x509_ath.o \
! 	$(OBJ_D)/x509_err.o $(OBJ_D)/a_object.o $(OBJ_D)/a_bitstr.o \
! 	$(OBJ_D)/a_utctm.o $(OBJ_D)/a_int.o $(OBJ_D)/a_octet.o \
! 	$(OBJ_D)/a_print.o $(OBJ_D)/a_type.o $(OBJ_D)/a_set.o \
! 	$(OBJ_D)/a_dup.o $(OBJ_D)/a_d2i_fp.o $(OBJ_D)/a_i2d_fp.o \
! 	$(OBJ_D)/a_sign.o $(OBJ_D)/a_verify.o $(OBJ_D)/x_algor.o \
! 	$(OBJ_D)/x_val.o $(OBJ_D)/x_pubkey.o $(OBJ_D)/x_sig.o \
! 	$(OBJ_D)/x_req.o $(OBJ_D)/x_attrib.o $(OBJ_D)/x_name.o \
! 	$(OBJ_D)/x_cinf.o $(OBJ_D)/x_x509.o $(OBJ_D)/x_crl.o \
! 	$(OBJ_D)/x_info.o $(OBJ_D)/x_spki.o $(OBJ_D)/d2i_r_pr.o \
! 	$(OBJ_D)/i2d_r_pr.o $(OBJ_D)/d2i_r_pu.o $(OBJ_D)/i2d_r_pu.o \
! 	$(OBJ_D)/d2i_s_pr.o $(OBJ_D)/d2i_s_pu.o $(OBJ_D)/d2i_pu.o \
! 	$(OBJ_D)/d2i_pr.o $(OBJ_D)/i2d_pu.o $(OBJ_D)/i2d_pr.o \
! 	$(OBJ_D)/t_req.o $(OBJ_D)/t_x509.o $(OBJ_D)/t_pkey.o \
! 	$(OBJ_D)/p7_i_s.o $(OBJ_D)/p7_signi.o $(OBJ_D)/p7_signd.o \
! 	$(OBJ_D)/p7_recip.o $(OBJ_D)/p7_enc_c.o $(OBJ_D)/p7_evp.o \
! 	$(OBJ_D)/p7_dgst.o $(OBJ_D)/p7_s_e.o $(OBJ_D)/p7_enc.o \
! 	$(OBJ_D)/p7_lib.o $(OBJ_D)/f_int.o $(OBJ_D)/i2d_dh.o \
! 	$(OBJ_D)/d2i_dh.o $(OBJ_D)/n_pkey.o $(OBJ_D)/a_hdr.o \
! 	$(OBJ_D)/x_pkey.o $(OBJ_D)/asn1_par.o $(OBJ_D)/asn1_lib.o \
! 	$(OBJ_D)/asn1_err.o $(OBJ_D)/meth_lib.o $(OBJ_D)/x509meth.o \
! 	$(OBJ_D)/by_file.o $(OBJ_D)/by_dir.o $(OBJ_D)/meth_err.o \
! 	$(OBJ_D)/conf.o $(OBJ_D)/conf_err.o $(OBJ_D)/txt_db.o
  
  RSAGLUEOBJ=$(OBJ_D)/rsaref.o \
  	$(OBJ_D)/rsar_err.o
--- 148,216 ----
  	$(OBJ_D)/enc_read.o $(OBJ_D)/enc_writ.o $(OBJ_D)/fcrypt.o \
  	$(OBJ_D)/ncbc_enc.o $(OBJ_D)/ofb64enc.o $(OBJ_D)/ofb_enc.o \
  	$(OBJ_D)/str2key.o $(OBJ_D)/pcbc_enc.o $(OBJ_D)/qud_cksm.o \
! 	$(OBJ_D)/rand_key.o $(OBJ_D)/xcbc_enc.o $(OBJ_D)/read_pwd.o \
! 	$(OBJ_D)/rpc_enc.o $(OBJ_D)/cbc_cksm.o $(OBJ_D)/supp.o \
! 	$(OBJ_D)/rc4_enc.o $(OBJ_D)/rc2_ecb.o $(OBJ_D)/rc2_skey.o \
! 	$(OBJ_D)/rc2_cbc.o $(OBJ_D)/rc2cfb64.o $(OBJ_D)/rc2ofb64.o \
! 	$(OBJ_D)/i_cbc.o $(OBJ_D)/i_cfb64.o $(OBJ_D)/i_ofb64.o \
! 	$(OBJ_D)/i_ecb.o $(OBJ_D)/i_skey.o $(OBJ_D)/bn_add.o \
! 	$(OBJ_D)/bn_div.o $(OBJ_D)/bn_exp.o $(OBJ_D)/bn_lib.o \
! 	$(OBJ_D)/bn_mod.o $(OBJ_D)/bn_mul.o $(OBJ_D)/bn_print.o \
! 	$(OBJ_D)/bn_rand.o $(OBJ_D)/bn_shift.o $(OBJ_D)/bn_sub.o \
! 	$(OBJ_D)/bn_word.o $(OBJ_D)/bn_gcd.o $(OBJ_D)/bn_prime.o \
! 	$(OBJ_D)/bn_err.o $(OBJ_D)/bn_sqr.o $(OBJ_D)/bn_mulw.o \
! 	$(OBJ_D)/bn_recp.o $(OBJ_D)/bn_mont.o $(OBJ_D)/rsa_enc.o \
! 	$(OBJ_D)/rsa_gen.o $(OBJ_D)/rsa_lib.o $(OBJ_D)/rsa_sign.o \
! 	$(OBJ_D)/rsa_err.o $(OBJ_D)/dsa_lib.o $(OBJ_D)/dsa_vrf.o \
! 	$(OBJ_D)/dsa_sign.o $(OBJ_D)/dsa_err.o $(OBJ_D)/dh_gen.o \
! 	$(OBJ_D)/dh_key.o $(OBJ_D)/dh_lib.o $(OBJ_D)/dh_check.o \
! 	$(OBJ_D)/dh_err.o $(OBJ_D)/buffer.o $(OBJ_D)/bio_lib.o \
! 	$(OBJ_D)/bio_cb.o $(OBJ_D)/buf_err.o $(OBJ_D)/bss_mem.o \
! 	$(OBJ_D)/bss_null.o $(OBJ_D)/bss_fd.o $(OBJ_D)/bss_file.o \
! 	$(OBJ_D)/bss_sock.o $(OBJ_D)/bf_buff.o $(OBJ_D)/stack.o \
! 	$(OBJ_D)/lhash.o $(OBJ_D)/lh_stats.o $(OBJ_D)/md5_rand.o \
! 	$(OBJ_D)/randfile.o $(OBJ_D)/err.o $(OBJ_D)/err_all.o \
! 	$(OBJ_D)/obj_dat.o $(OBJ_D)/obj_lib.o $(OBJ_D)/obj_err.o \
! 	$(OBJ_D)/encode.o $(OBJ_D)/digest.o $(OBJ_D)/evp_enc.o \
! 	$(OBJ_D)/evp_key.o $(OBJ_D)/e_ecb_d.o $(OBJ_D)/e_cbc_d.o \
! 	$(OBJ_D)/e_cfb_d.o $(OBJ_D)/e_ofb_d.o $(OBJ_D)/e_ecb_i.o \
! 	$(OBJ_D)/e_cbc_i.o $(OBJ_D)/e_cfb_i.o $(OBJ_D)/e_ofb_i.o \
! 	$(OBJ_D)/e_ecb_3d.o $(OBJ_D)/e_cbc_3d.o $(OBJ_D)/e_rc4.o \
! 	$(OBJ_D)/e_names.o $(OBJ_D)/e_cfb_3d.o $(OBJ_D)/e_ofb_3d.o \
! 	$(OBJ_D)/e_xcbc_d.o $(OBJ_D)/e_ecb_r2.o $(OBJ_D)/e_cbc_r2.o \
! 	$(OBJ_D)/e_cfb_r2.o $(OBJ_D)/e_ofb_r2.o $(OBJ_D)/m_md2.o \
! 	$(OBJ_D)/m_md5.o $(OBJ_D)/m_sha.o $(OBJ_D)/m_sha1.o \
! 	$(OBJ_D)/m_dss.o $(OBJ_D)/m_dss1.o $(OBJ_D)/m_names.o \
! 	$(OBJ_D)/p_open.o $(OBJ_D)/p_seal.o $(OBJ_D)/p_sign.o \
! 	$(OBJ_D)/p_verify.o $(OBJ_D)/p_lib.o $(OBJ_D)/bio_md.o \
! 	$(OBJ_D)/evp_err.o $(OBJ_D)/pem_sign.o $(OBJ_D)/pem_seal.o \
! 	$(OBJ_D)/pem_info.o $(OBJ_D)/pem_lib.o $(OBJ_D)/pem_err.o \
! 	$(OBJ_D)/x509_def.o $(OBJ_D)/x509_r2x.o $(OBJ_D)/x509_cmp.o \
! 	$(OBJ_D)/x509_obj.o $(OBJ_D)/x509_req.o $(OBJ_D)/x509_vrf.o \
! 	$(OBJ_D)/x509_crt.o $(OBJ_D)/x509_ath.o $(OBJ_D)/x509_err.o \
! 	$(OBJ_D)/a_object.o $(OBJ_D)/a_bitstr.o $(OBJ_D)/a_utctm.o \
! 	$(OBJ_D)/a_int.o $(OBJ_D)/a_octet.o $(OBJ_D)/a_print.o \
! 	$(OBJ_D)/a_type.o $(OBJ_D)/a_set.o $(OBJ_D)/a_dup.o \
! 	$(OBJ_D)/a_d2i_fp.o $(OBJ_D)/a_i2d_fp.o $(OBJ_D)/a_sign.o \
! 	$(OBJ_D)/a_verify.o $(OBJ_D)/x_algor.o $(OBJ_D)/x_val.o \
! 	$(OBJ_D)/x_pubkey.o $(OBJ_D)/x_sig.o $(OBJ_D)/x_req.o \
! 	$(OBJ_D)/x_attrib.o $(OBJ_D)/x_name.o $(OBJ_D)/x_cinf.o \
! 	$(OBJ_D)/x_x509.o $(OBJ_D)/x_crl.o $(OBJ_D)/x_info.o \
! 	$(OBJ_D)/x_spki.o $(OBJ_D)/d2i_r_pr.o $(OBJ_D)/i2d_r_pr.o \
! 	$(OBJ_D)/d2i_r_pu.o $(OBJ_D)/i2d_r_pu.o $(OBJ_D)/d2i_s_pr.o \
! 	$(OBJ_D)/d2i_s_pu.o $(OBJ_D)/d2i_pu.o $(OBJ_D)/d2i_pr.o \
! 	$(OBJ_D)/i2d_pu.o $(OBJ_D)/i2d_pr.o $(OBJ_D)/t_req.o \
! 	$(OBJ_D)/t_x509.o $(OBJ_D)/t_pkey.o $(OBJ_D)/p7_i_s.o \
! 	$(OBJ_D)/p7_signi.o $(OBJ_D)/p7_signd.o $(OBJ_D)/p7_recip.o \
! 	$(OBJ_D)/p7_enc_c.o $(OBJ_D)/p7_evp.o $(OBJ_D)/p7_dgst.o \
! 	$(OBJ_D)/p7_s_e.o $(OBJ_D)/p7_enc.o $(OBJ_D)/p7_lib.o \
! 	$(OBJ_D)/f_int.o $(OBJ_D)/i2d_dh.o $(OBJ_D)/d2i_dh.o \
! 	$(OBJ_D)/n_pkey.o $(OBJ_D)/a_hdr.o $(OBJ_D)/x_pkey.o \
! 	$(OBJ_D)/a_bool.o $(OBJ_D)/x_exten.o $(OBJ_D)/asn1_par.o \
! 	$(OBJ_D)/asn1_lib.o $(OBJ_D)/asn1_err.o $(OBJ_D)/meth_lib.o \
! 	$(OBJ_D)/x509meth.o $(OBJ_D)/by_file.o $(OBJ_D)/by_dir.o \
! 	$(OBJ_D)/meth_err.o $(OBJ_D)/conf.o $(OBJ_D)/conf_err.o \
! 	$(OBJ_D)/txt_db.o
  
  RSAGLUEOBJ=$(OBJ_D)/rsaref.o \
  	$(OBJ_D)/rsar_err.o
***************
*** 719,724 ****
--- 721,729 ----
  $(OBJ_D)/rand_key.o: $(SRC_D)/crypto/des/rand_key.c
  	$(CC) -o $(OBJ_D)/rand_key.o $(LIB_CFLAGS) -c $(SRC_D)/crypto/des/rand_key.c
  
+ $(OBJ_D)/xcbc_enc.o: $(SRC_D)/crypto/des/xcbc_enc.c
+ 	$(CC) -o $(OBJ_D)/xcbc_enc.o $(LIB_CFLAGS) -c $(SRC_D)/crypto/des/xcbc_enc.c
+ 
  $(OBJ_D)/read_pwd.o: $(SRC_D)/crypto/des/read_pwd.c
  	$(CC) -o $(OBJ_D)/read_pwd.o $(LIB_CFLAGS) -c $(SRC_D)/crypto/des/read_pwd.c
  
***************
*** 974,979 ****
--- 979,987 ----
  $(OBJ_D)/e_ofb_3d.o: $(SRC_D)/crypto/evp/e_ofb_3d.c
  	$(CC) -o $(OBJ_D)/e_ofb_3d.o $(LIB_CFLAGS) -c $(SRC_D)/crypto/evp/e_ofb_3d.c
  
+ $(OBJ_D)/e_xcbc_d.o: $(SRC_D)/crypto/evp/e_xcbc_d.c
+ 	$(CC) -o $(OBJ_D)/e_xcbc_d.o $(LIB_CFLAGS) -c $(SRC_D)/crypto/evp/e_xcbc_d.c
+ 
  $(OBJ_D)/e_ecb_r2.o: $(SRC_D)/crypto/evp/e_ecb_r2.c
  	$(CC) -o $(OBJ_D)/e_ecb_r2.o $(LIB_CFLAGS) -c $(SRC_D)/crypto/evp/e_ecb_r2.c
  
***************
*** 1231,1236 ****
--- 1239,1250 ----
  
  $(OBJ_D)/x_pkey.o: $(SRC_D)/crypto/asn1/x_pkey.c
  	$(CC) -o $(OBJ_D)/x_pkey.o $(LIB_CFLAGS) -c $(SRC_D)/crypto/asn1/x_pkey.c
+ 
+ $(OBJ_D)/a_bool.o: $(SRC_D)/crypto/asn1/a_bool.c
+ 	$(CC) -o $(OBJ_D)/a_bool.o $(LIB_CFLAGS) -c $(SRC_D)/crypto/asn1/a_bool.c
+ 
+ $(OBJ_D)/x_exten.o: $(SRC_D)/crypto/asn1/x_exten.c
+ 	$(CC) -o $(OBJ_D)/x_exten.o $(LIB_CFLAGS) -c $(SRC_D)/crypto/asn1/x_exten.c
  
  $(OBJ_D)/asn1_par.o: $(SRC_D)/crypto/asn1/asn1_par.c
  	$(CC) -o $(OBJ_D)/asn1_par.o $(LIB_CFLAGS) -c $(SRC_D)/crypto/asn1/asn1_par.c
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./e_os.h	Fri Jul 12 09:35:46 1996
--- ./e_os.h	Wed Jul 24 15:33:19 1996
***************
*** 53,59 ****
  #endif
  
  #ifndef DEVRANDOM
! #undef DEVRANDOM  /* set this to you 'random' device if you have one */
  #endif
  
  #if defined(NOCONST)
--- 53,59 ----
  #endif
  
  #ifndef DEVRANDOM
! #undef DEVRANDOM  /* set this to your 'random' device if you have one */
  #endif
  
  #if defined(NOCONST)
***************
*** 60,195 ****
  #define const
  #endif
  
- #if defined(WIN32) || defined(WIN16)
- #ifndef WINDOWS
- #define WINDOWS
- #ifndef MSDOS
- #define MSDOS
- #endif
- #endif
- #endif
  
! #ifdef VC_DEBUG
! #define _DEBUG
! #include <crtdbg.h>
! #endif
! 
  /* The following is used becaue of the small stack in some
   * Microsoft operating systems */
  #if defined(WIN16) || defined(MSDOS)
! #define MS_STATIC	static
  #else
! #define MS_STATIC
  #endif
  
! #ifdef WIN16
! #define MS_CALLBACK	_far _loadds
! #define MS_FAR		_far
! #else
! #define MS_CALLBACK
! #define MS_FAR
  #endif
  
! #if defined(WINDOWS) || defined(MSDOS)
! #define RFILE	"rand.dat"
  #else
! #define RFILE	".rand"
  #endif
  
  #if defined(WINDOWS) || defined(MSDOS)
  
! #ifdef WINDOWS
! #include <windows.h>
! #include <stddef.h>
! #include <errno.h>
! #include <string.h>
! #include <malloc.h>
! #endif
! #include <io.h>
! #include <fcntl.h>
  
! #define EXIT(n)		return(n);
! #define LIST_SEPERATOR_CHAR ';'
! #define X_OK	0
! #define W_OK	2
! #define R_OK	4
! #define SSLEAY_CONF	"ssleay.cnf"
! #define NUL_DEV		"nul"
  
! #else /* The unix world */
  
! #include <unistd.h>
  
! #define SSLEAY_CONF	"ssleay.conf"
! #define LIST_SEPERATOR_CHAR ':'
! #ifndef MONOLITH
! #define EXIT(n)		exit(n); return(n)
! #else
! #define EXIT(n)		return(n)
! #endif
! #define NUL_DEV		"/dev/null"
  
! #define SSLeay_getpid()	getpid()
  
  #endif
  
  #ifdef USE_SOCKETS
! #if defined(WINDOWS) || defined(MSDOS)
! /* windows world */
! #include <winsock.h>
  
! #ifdef NO_SOCK
! #define SSLeay_Write(a,b,c)     (-1)
! #define SSLeay_Read(a,b,c)      (-1)
! #else
! #define SSLeay_Write(a,b,c)     send((a),(b),(c),0)
! #define SSLeay_Read(a,b,c)      recv((a),(b),(c),0)
! #endif
  
! #define SHUTDOWN(fd)    { shutdown((fd),2); closesocket((fd)); }
  
! #else
  
! #ifndef MSDOS
! /* unix world */
! #include <netdb.h>
! #include <sys/types.h>
! #include <sys/socket.h>
! #include <sys/param.h>
! #include <sys/time.h> /* Needed under linux for FD_XXX */
! #include <netinet/in.h>
  
  
! #if defined(NeXT) || defined(_NEXT_SOURCE)
! #include <sys/fcntl.h>
! #include <sys/types.h>
! #endif
  
! #ifdef AIX
! #include <sys/select.h>
! #endif
  
! #if defined(sun)
! #include <sys/filio.h>
! #else
! #include <sys/ioctl.h>
! #endif
  
! #define SSLeay_Read(a,b,c)     read((a),(b),(c))
! #define SSLeay_Write(a,b,c)    write((a),(b),(c))
! #define SHUTDOWN(fd)    { shutdown((fd),2); close((fd)); }
! #define INVALID_SOCKET	-1
  #endif
- #endif
- #endif
  
  #ifndef NOPROTO
  #define P_CC_CC	const void *,const void *
  #define P_I_I	int,int 
  #define P_V	void 
  #else
  #define P_CC_CC
  #define P_I_I
  #define P_V
  #endif
  
--- 60,205 ----
  #define const
  #endif
  
  
! /********************************************************************
!  The Microsoft section
!  ********************************************************************/
  /* The following is used becaue of the small stack in some
   * Microsoft operating systems */
  #if defined(WIN16) || defined(MSDOS)
! #  define MS_STATIC	static
  #else
! #  define MS_STATIC
  #endif
  
! #if defined(WIN32) || defined(WIN16)
! #  ifndef WINDOWS
! #    define WINDOWS
! #  endif
! #  ifndef MSDOS
! #    define MSDOS
! #  endif
  #endif
  
! #ifdef WIN16
! #  define MS_CALLBACK	_far _loadds
! #  define MS_FAR	_far
  #else
! #  define MS_CALLBACK
! #  define MS_FAR
  #endif
  
  #if defined(WINDOWS) || defined(MSDOS)
  
! #  ifdef WINDOWS
! #    include <windows.h>
! #    include <stddef.h>
! #    include <errno.h>
! #    include <string.h>
! #    include <malloc.h>
! #  endif
! #  include <io.h>
! #  include <fcntl.h>
  
! #  define EXIT(n)		return(n);
! #  define LIST_SEPERATOR_CHAR ';'
! #  define X_OK	0
! #  define W_OK	2
! #  define R_OK	4
! #  define SSLEAY_CONF	"ssleay.cnf"
! #  define NUL_DEV		"nul"
! #  define RFILE		"rand.dat"
  
! #else /* The non-microsoft world world */
  
! #  ifdef VMS
! #    include <unixlib.h>
! #  else
! #    include <unistd.h>
! #  endif
  
! #  define SSLEAY_CONF	"ssleay.conf"
! #  define RFILE		".rand"
! #  define LIST_SEPERATOR_CHAR ':'
! #  ifndef MONOLITH
! #    define EXIT(n)		exit(n); return(n)
! #  else
! #    define EXIT(n)		return(n)
! #  endif
! #  define NUL_DEV		"/dev/null"
  
! #  define SSLeay_getpid()	getpid()
  
  #endif
  
+ /*************/
+ 
  #ifdef USE_SOCKETS
! #  if defined(WINDOWS) || defined(MSDOS)
!       /* windows world */
! #    include <winsock.h>
  
! #    ifdef NO_SOCK
! #      define SSLeay_Write(a,b,c)     (-1)
! #      define SSLeay_Read(a,b,c)      (-1)
! #    else
! #      define SSLeay_Write(a,b,c)     send((a),(b),(c),0)
! #      define SSLeay_Read(a,b,c)      recv((a),(b),(c),0)
! #    endif
  
! #    define SHUTDOWN(fd)    { shutdown((fd),2); closesocket((fd)); }
  
! #  else
  
! #    ifndef VMS
!       /* unix world */
! #      include <netdb.h>
! #      include <sys/types.h>
! #      include <sys/socket.h>
! #      include <sys/param.h>
! #      include <sys/time.h> /* Needed under linux for FD_XXX */
! #      include <netinet/in.h>
! #    endif
  
+ #    if defined(NeXT) || defined(_NEXT_SOURCE)
+ #      include <sys/fcntl.h>
+ #      include <sys/types.h>
+ #    endif
  
! #    ifdef AIX
! #      include <sys/select.h>
! #    endif
  
! #    if defined(sun)
! #      include <sys/filio.h>
! #    else
! #      include <sys/ioctl.h>
! #    endif
  
! #    ifdef VMS
! #      include <unixio.h>
! #    endif
  
! #    define SSLeay_Read(a,b,c)     read((a),(b),(c))
! #    define SSLeay_Write(a,b,c)    write((a),(b),(c))
! #    define SHUTDOWN(fd)    { shutdown((fd),2); close((fd)); }
! #    define INVALID_SOCKET	-1
! #  endif
  #endif
  
+ /***********************************************/
+ 
  #ifndef NOPROTO
  #define P_CC_CC	const void *,const void *
  #define P_I_I		int,int 
+ #define P_I_I_P_I	int,int,char *,int
+ #define P_IP_I_I_P_I	int *,int,int,char *,int
  #define P_V		void 
  #else
  #define P_CC_CC
  #define P_I_I
+ #define P_IP_I_I_P_I
+ #define P_I_I_P_I
  #define P_V
  #endif
  
***************
*** 199,210 ****
  
  /* do we need to do this for getenv.
   * Just define getenv for use under windows */
- 
- #if defined(MSDOS) || defined(_Windows)
- #define LIST_SEPERATOR_CHAR ';'
- #else
- #define LIST_SEPERATOR_CHAR ':'
- #endif
  
  #ifdef WIN16
  /* How to do this needs to be thought out a bit more.... */
--- 209,214 ----
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/asn1.err	Wed Jul 10 09:46:49 1996
--- ./crypto/asn1/asn1.err	Sat Jul 20 23:41:11 1996
***************
*** 21,117 ****
  #define ASN1_F_ASN1_VERIFY				 117
  #define ASN1_F_BN_TO_ASN1_INTEGER			 118
  #define ASN1_F_D2I_ASN1_BIT_STRING			 119
! #define ASN1_F_D2I_ASN1_BYTES				 120
! #define ASN1_F_D2I_ASN1_HEADER				 121
! #define ASN1_F_D2I_ASN1_INTEGER				 122
! #define ASN1_F_D2I_ASN1_OBJECT				 123
! #define ASN1_F_D2I_ASN1_OCTET_STRING			 124
! #define ASN1_F_D2I_ASN1_PRINT_TYPE			 125
! #define ASN1_F_D2I_ASN1_SET				 126
! #define ASN1_F_D2I_ASN1_TYPE				 127
! #define ASN1_F_D2I_ASN1_UTCTIME				 128
! #define ASN1_F_D2I_DHPARAMS				 129
! #define ASN1_F_D2I_DSAPRIVATEKEY			 130
! #define ASN1_F_D2I_DSAPUBLICKEY				 131
! #define ASN1_F_D2I_NETSCAPE_PKEY			 132
! #define ASN1_F_D2I_NETSCAPE_RSA				 133
! #define ASN1_F_D2I_NETSCAPE_RSA_2			 134
! #define ASN1_F_D2I_NETSCAPE_SPKAC			 135
! #define ASN1_F_D2I_NETSCAPE_SPKI			 136
! #define ASN1_F_D2I_PKCS7				 137
! #define ASN1_F_D2I_PKCS7_DIGEST				 138
! #define ASN1_F_D2I_PKCS7_ENCRYPT			 139
! #define ASN1_F_D2I_PKCS7_ENC_CONTENT			 140
! #define ASN1_F_D2I_PKCS7_ENVELOPE			 141
! #define ASN1_F_D2I_PKCS7_ISSUER_AND_SERIAL		 142
! #define ASN1_F_D2I_PKCS7_RECIP_INFO			 143
! #define ASN1_F_D2I_PKCS7_SIGNED				 144
! #define ASN1_F_D2I_PKCS7_SIGNER_INFO			 145
! #define ASN1_F_D2I_PKCS7_SIGN_ENVELOPE			 146
! #define ASN1_F_D2I_PRIVATEKEY				 147
! #define ASN1_F_D2I_PUBLICKEY				 148
! #define ASN1_F_D2I_RSAPRIVATEKEY			 149
! #define ASN1_F_D2I_RSAPUBLICKEY				 150
! #define ASN1_F_D2I_X509					 151
! #define ASN1_F_D2I_X509_ALGOR				 152
! #define ASN1_F_D2I_X509_ATTRIBUTE			 153
! #define ASN1_F_D2I_X509_CINF				 154
! #define ASN1_F_D2I_X509_CRL				 155
! #define ASN1_F_D2I_X509_CRL_INFO			 156
! #define ASN1_F_D2I_X509_KEY				 157
! #define ASN1_F_D2I_X509_NAME				 158
! #define ASN1_F_D2I_X509_NAME_ENTRY			 159
! #define ASN1_F_D2I_X509_PKEY				 160
! #define ASN1_F_D2I_X509_PUBKEY				 161
! #define ASN1_F_D2I_X509_REQ				 162
! #define ASN1_F_D2I_X509_REQ_INFO			 163
! #define ASN1_F_D2I_X509_REVOKED				 164
! #define ASN1_F_D2I_X509_SIG				 165
! #define ASN1_F_D2I_X509_VAL				 166
! #define ASN1_F_I2A_ASN1_OBJECT				 167
! #define ASN1_F_I2D_ASN1_HEADER				 168
! #define ASN1_F_I2D_DHPARAMS				 169
! #define ASN1_F_I2D_DSAPRIVATEKEY			 170
! #define ASN1_F_I2D_DSAPUBLICKEY				 171
! #define ASN1_F_I2D_NETSCAPE_RSA				 172
! #define ASN1_F_I2D_PKCS7				 173
! #define ASN1_F_I2D_PRIVATEKEY				 174
! #define ASN1_F_I2D_PUBLICKEY				 175
! #define ASN1_F_I2D_RSAPRIVATEKEY			 176
! #define ASN1_F_I2D_RSAPUBLICKEY				 177
! #define ASN1_F_I2D_X509_ATTRIBUTE			 178
! #define ASN1_F_NETSCAPE_PKEY_NEW			 179
! #define ASN1_F_NETSCAPE_SPKAC_NEW			 180
! #define ASN1_F_NETSCAPE_SPKI_NEW			 181
! #define ASN1_F_PKCS7_DIGEST_NEW				 182
! #define ASN1_F_PKCS7_ENCRYPT_NEW			 183
! #define ASN1_F_PKCS7_ENC_CONTENT_NEW			 184
! #define ASN1_F_PKCS7_ENVELOPE_NEW			 185
! #define ASN1_F_PKCS7_ISSUER_AND_SERIAL_NEW		 186
! #define ASN1_F_PKCS7_NEW				 187
! #define ASN1_F_PKCS7_RECIP_INFO_NEW			 188
! #define ASN1_F_PKCS7_SIGNED_NEW				 189
! #define ASN1_F_PKCS7_SIGNER_INFO_NEW			 190
! #define ASN1_F_PKCS7_SIGN_ENVELOPE_NEW			 191
! #define ASN1_F_X509_ALGOR_NEW				 192
! #define ASN1_F_X509_ATTRIBUTE_NEW			 193
! #define ASN1_F_X509_CINF_NEW				 194
! #define ASN1_F_X509_CRL_INFO_NEW			 195
! #define ASN1_F_X509_CRL_NEW				 196
! #define ASN1_F_X509_DHPARAMS_NEW			 197
! #define ASN1_F_X509_INFO_NEW				 198
! #define ASN1_F_X509_KEY_NEW				 199
! #define ASN1_F_X509_NAME_ENTRY_NEW			 200
! #define ASN1_F_X509_NAME_NEW				 201
! #define ASN1_F_X509_NEW					 202
! #define ASN1_F_X509_PKEY_NEW				 203
! #define ASN1_F_X509_PUBKEY_NEW				 204
! #define ASN1_F_X509_REQ_INFO_NEW			 205
! #define ASN1_F_X509_REQ_NEW				 206
! #define ASN1_F_X509_REVOKED_NEW				 207
! #define ASN1_F_X509_SIG_NEW				 208
! #define ASN1_F_X509_VAL_FREE				 209
! #define ASN1_F_X509_VAL_NEW				 210
  
  /* Reason codes. */
  #define ASN1_R_BAD_CLASS				 100
--- 21,120 ----
  #define ASN1_F_ASN1_VERIFY				 117
  #define ASN1_F_BN_TO_ASN1_INTEGER			 118
  #define ASN1_F_D2I_ASN1_BIT_STRING			 119
! #define ASN1_F_D2I_ASN1_BOOLEAN				 120
! #define ASN1_F_D2I_ASN1_BYTES				 121
! #define ASN1_F_D2I_ASN1_HEADER				 122
! #define ASN1_F_D2I_ASN1_INTEGER				 123
! #define ASN1_F_D2I_ASN1_OBJECT				 124
! #define ASN1_F_D2I_ASN1_OCTET_STRING			 125
! #define ASN1_F_D2I_ASN1_PRINT_TYPE			 126
! #define ASN1_F_D2I_ASN1_SET				 127
! #define ASN1_F_D2I_ASN1_TYPE				 128
! #define ASN1_F_D2I_ASN1_UTCTIME				 129
! #define ASN1_F_D2I_DHPARAMS				 130
! #define ASN1_F_D2I_DSAPRIVATEKEY			 131
! #define ASN1_F_D2I_DSAPUBLICKEY				 132
! #define ASN1_F_D2I_NETSCAPE_PKEY			 133
! #define ASN1_F_D2I_NETSCAPE_RSA				 134
! #define ASN1_F_D2I_NETSCAPE_RSA_2			 135
! #define ASN1_F_D2I_NETSCAPE_SPKAC			 136
! #define ASN1_F_D2I_NETSCAPE_SPKI			 137
! #define ASN1_F_D2I_PKCS7				 138
! #define ASN1_F_D2I_PKCS7_DIGEST				 139
! #define ASN1_F_D2I_PKCS7_ENCRYPT			 140
! #define ASN1_F_D2I_PKCS7_ENC_CONTENT			 141
! #define ASN1_F_D2I_PKCS7_ENVELOPE			 142
! #define ASN1_F_D2I_PKCS7_ISSUER_AND_SERIAL		 143
! #define ASN1_F_D2I_PKCS7_RECIP_INFO			 144
! #define ASN1_F_D2I_PKCS7_SIGNED				 145
! #define ASN1_F_D2I_PKCS7_SIGNER_INFO			 146
! #define ASN1_F_D2I_PKCS7_SIGN_ENVELOPE			 147
! #define ASN1_F_D2I_PRIVATEKEY				 148
! #define ASN1_F_D2I_PUBLICKEY				 149
! #define ASN1_F_D2I_RSAPRIVATEKEY			 150
! #define ASN1_F_D2I_RSAPUBLICKEY				 151
! #define ASN1_F_D2I_X509					 152
! #define ASN1_F_D2I_X509_ALGOR				 153
! #define ASN1_F_D2I_X509_ATTRIBUTE			 154
! #define ASN1_F_D2I_X509_CINF				 155
! #define ASN1_F_D2I_X509_CRL				 156
! #define ASN1_F_D2I_X509_CRL_INFO			 157
! #define ASN1_F_D2I_X509_EXTENSION			 158
! #define ASN1_F_D2I_X509_EXTENSION_NEW			 159
! #define ASN1_F_D2I_X509_KEY				 160
! #define ASN1_F_D2I_X509_NAME				 161
! #define ASN1_F_D2I_X509_NAME_ENTRY			 162
! #define ASN1_F_D2I_X509_PKEY				 163
! #define ASN1_F_D2I_X509_PUBKEY				 164
! #define ASN1_F_D2I_X509_REQ				 165
! #define ASN1_F_D2I_X509_REQ_INFO			 166
! #define ASN1_F_D2I_X509_REVOKED				 167
! #define ASN1_F_D2I_X509_SIG				 168
! #define ASN1_F_D2I_X509_VAL				 169
! #define ASN1_F_I2A_ASN1_OBJECT				 170
! #define ASN1_F_I2D_ASN1_HEADER				 171
! #define ASN1_F_I2D_DHPARAMS				 172
! #define ASN1_F_I2D_DSAPRIVATEKEY			 173
! #define ASN1_F_I2D_DSAPUBLICKEY				 174
! #define ASN1_F_I2D_NETSCAPE_RSA				 175
! #define ASN1_F_I2D_PKCS7				 176
! #define ASN1_F_I2D_PRIVATEKEY				 177
! #define ASN1_F_I2D_PUBLICKEY				 178
! #define ASN1_F_I2D_RSAPRIVATEKEY			 179
! #define ASN1_F_I2D_RSAPUBLICKEY				 180
! #define ASN1_F_I2D_X509_ATTRIBUTE			 181
! #define ASN1_F_NETSCAPE_PKEY_NEW			 182
! #define ASN1_F_NETSCAPE_SPKAC_NEW			 183
! #define ASN1_F_NETSCAPE_SPKI_NEW			 184
! #define ASN1_F_PKCS7_DIGEST_NEW				 185
! #define ASN1_F_PKCS7_ENCRYPT_NEW			 186
! #define ASN1_F_PKCS7_ENC_CONTENT_NEW			 187
! #define ASN1_F_PKCS7_ENVELOPE_NEW			 188
! #define ASN1_F_PKCS7_ISSUER_AND_SERIAL_NEW		 189
! #define ASN1_F_PKCS7_NEW				 190
! #define ASN1_F_PKCS7_RECIP_INFO_NEW			 191
! #define ASN1_F_PKCS7_SIGNED_NEW				 192
! #define ASN1_F_PKCS7_SIGNER_INFO_NEW			 193
! #define ASN1_F_PKCS7_SIGN_ENVELOPE_NEW			 194
! #define ASN1_F_X509_ALGOR_NEW				 195
! #define ASN1_F_X509_ATTRIBUTE_NEW			 196
! #define ASN1_F_X509_CINF_NEW				 197
! #define ASN1_F_X509_CRL_INFO_NEW			 198
! #define ASN1_F_X509_CRL_NEW				 199
! #define ASN1_F_X509_DHPARAMS_NEW			 200
! #define ASN1_F_X509_INFO_NEW				 201
! #define ASN1_F_X509_KEY_NEW				 202
! #define ASN1_F_X509_NAME_ENTRY_NEW			 203
! #define ASN1_F_X509_NAME_NEW				 204
! #define ASN1_F_X509_NEW					 205
! #define ASN1_F_X509_PKEY_NEW				 206
! #define ASN1_F_X509_PUBKEY_NEW				 207
! #define ASN1_F_X509_REQ_INFO_NEW			 208
! #define ASN1_F_X509_REQ_NEW				 209
! #define ASN1_F_X509_REVOKED_NEW				 210
! #define ASN1_F_X509_SIG_NEW				 211
! #define ASN1_F_X509_VAL_FREE				 212
! #define ASN1_F_X509_VAL_NEW				 213
  
  /* Reason codes. */
  #define ASN1_R_BAD_CLASS				 100
***************
*** 125,166 ****
  #define ASN1_R_BAD_TYPE					 108
  #define ASN1_R_BIT_STRING_TOO_SHORT			 109
  #define ASN1_R_BN_LIB					 110
! #define ASN1_R_DECODING_ERROR				 111
! #define ASN1_R_ERROR_STACK				 112
! #define ASN1_R_EXPECTING_AN_INTEGER			 113
! #define ASN1_R_EXPECTING_AN_OBJECT			 114
! #define ASN1_R_EXPECTING_AN_OCTET_STRING		 115
! #define ASN1_R_EXPECTING_A_BIT_STRING			 116
! #define ASN1_R_EXPECTING_A_SEQUENCE			 117
! #define ASN1_R_EXPECTING_A_UTCTIME			 118
! #define ASN1_R_HEADER_TOO_LONG				 119
! #define ASN1_R_IV_TOO_LARGE				 120
! #define ASN1_R_LENGTH_ERROR				 121
! #define ASN1_R_LENGTH_MISMATCH				 122
! #define ASN1_R_MISSING_EOS				 123
! #define ASN1_R_NON_HEX_CHARACTERS			 124
! #define ASN1_R_NOT_ENOUGH_DATA				 125
! #define ASN1_R_NOT_EOC_IN_INDEFINITLE_LENGTH_SEQUENCE	 126
! #define ASN1_R_ODD_NUMBER_OF_CHARS			 127
! #define ASN1_R_PARSING					 128
! #define ASN1_R_PRIVATE_KEY_HEADER_MISSING		 129
! #define ASN1_R_SHORT_LINE				 130
! #define ASN1_R_TAG_VALUE_TOO_HIGH			 131
! #define ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD 132
! #define ASN1_R_TOO_LONG					 133
! #define ASN1_R_UNABLE_TO_DECODE_RSA_KEY			 134
! #define ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY		 135
! #define ASN1_R_UNKNOWN_ATTRIBUTE_TYPE			 136
! #define ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM		 137
! #define ASN1_R_UNKNOWN_OBJECT_TYPE			 138
! #define ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE			 139
! #define ASN1_R_UNSUPORTED_CIPHER			 140
! #define ASN1_R_UNSUPORTED_ENCRYPTION_ALGORITHM		 141
! #define ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE		 142
! #define ASN1_R_UTCTIME_TOO_LONG				 143
! #define ASN1_R_WRONG_EXPLICIT_TAG			 144
! #define ASN1_R_WRONG_PRINTABLE_TYPE			 145
! #define ASN1_R_WRONG_TAG				 146
  
  #ifdef  __cplusplus
  }
--- 128,171 ----
  #define ASN1_R_BAD_TYPE					 108
  #define ASN1_R_BIT_STRING_TOO_SHORT			 109
  #define ASN1_R_BN_LIB					 110
! #define ASN1_R_BOOLEAN_IS_WRONG_LENGTH			 111
! #define ASN1_R_DECODING_ERROR				 112
! #define ASN1_R_ERROR_STACK				 113
! #define ASN1_R_EXPECTING_AN_INTEGER			 114
! #define ASN1_R_EXPECTING_AN_OBJECT			 115
! #define ASN1_R_EXPECTING_AN_OCTET_STRING		 116
! #define ASN1_R_EXPECTING_A_BIT_STRING			 117
! #define ASN1_R_EXPECTING_A_BOOLEAN			 118
! #define ASN1_R_EXPECTING_A_SEQUENCE			 119
! #define ASN1_R_EXPECTING_A_UTCTIME			 120
! #define ASN1_R_HEADER_TOO_LONG				 121
! #define ASN1_R_IV_TOO_LARGE				 122
! #define ASN1_R_LENGTH_ERROR				 123
! #define ASN1_R_LENGTH_MISMATCH				 124
! #define ASN1_R_MISSING_EOS				 125
! #define ASN1_R_NON_HEX_CHARACTERS			 126
! #define ASN1_R_NOT_ENOUGH_DATA				 127
! #define ASN1_R_NOT_EOC_IN_INDEFINITLE_LENGTH_SEQUENCE	 128
! #define ASN1_R_ODD_NUMBER_OF_CHARS			 129
! #define ASN1_R_PARSING					 130
! #define ASN1_R_PRIVATE_KEY_HEADER_MISSING		 131
! #define ASN1_R_SHORT_LINE				 132
! #define ASN1_R_TAG_VALUE_TOO_HIGH			 133
! #define ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD 134
! #define ASN1_R_TOO_LONG					 135
! #define ASN1_R_UNABLE_TO_DECODE_RSA_KEY			 136
! #define ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY		 137
! #define ASN1_R_UNKNOWN_ATTRIBUTE_TYPE			 138
! #define ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM		 139
! #define ASN1_R_UNKNOWN_OBJECT_TYPE			 140
! #define ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE			 141
! #define ASN1_R_UNSUPORTED_CIPHER			 142
! #define ASN1_R_UNSUPORTED_ENCRYPTION_ALGORITHM		 143
! #define ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE		 144
! #define ASN1_R_UTCTIME_TOO_LONG				 145
! #define ASN1_R_WRONG_EXPLICIT_TAG			 146
! #define ASN1_R_WRONG_PRINTABLE_TYPE			 147
! #define ASN1_R_WRONG_TAG				 148
  
  #ifdef  __cplusplus
  }
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/asn1.h	Fri Jul 12 13:52:15 1996
--- ./crypto/asn1/asn1.h	Sat Jul 20 23:44:08 1996
***************
*** 127,132 ****
--- 127,133 ----
  	int nid;
  	int length;
  	unsigned char *data;
+ 	int dynamic;	/* Should we free this one */
  	} ASN1_OBJECT;
  
  /*
***************
*** 239,244 ****
--- 240,248 ----
  ASN1_BIT_STRING *d2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a,unsigned char **pp,
  			long length);
  
+ int		i2d_ASN1_BOOLEAN(int a,unsigned char **pp);
+ int 		d2i_ASN1_BOOLEAN(int *a,unsigned char **pp,long length);
+ 
  int		i2d_ASN1_INTEGER(ASN1_BIT_STRING *a,unsigned char **pp);
  ASN1_BIT_STRING *d2i_ASN1_INTEGER(ASN1_BIT_STRING **a,unsigned char **pp,
  			long length);
***************
*** 361,366 ****
--- 365,372 ----
  void		ASN1_BIT_STRING_free();
  int		i2d_ASN1_BIT_STRING();
  ASN1_BIT_STRING *d2i_ASN1_BIT_STRING();
+ int		i2d_ASN1_BOOLEAN();
+ int 		d2i_ASN1_BOOLEAN();
  int		i2d_ASN1_INTEGER();
  ASN1_BIT_STRING *d2i_ASN1_INTEGER();
  int ASN1_UTCTIME_check();
***************
*** 439,535 ****
  #define ASN1_F_ASN1_VERIFY				 117
  #define ASN1_F_BN_TO_ASN1_INTEGER			 118
  #define ASN1_F_D2I_ASN1_BIT_STRING			 119
! #define ASN1_F_D2I_ASN1_BYTES				 120
! #define ASN1_F_D2I_ASN1_HEADER				 121
! #define ASN1_F_D2I_ASN1_INTEGER				 122
! #define ASN1_F_D2I_ASN1_OBJECT				 123
! #define ASN1_F_D2I_ASN1_OCTET_STRING			 124
! #define ASN1_F_D2I_ASN1_PRINT_TYPE			 125
! #define ASN1_F_D2I_ASN1_SET				 126
! #define ASN1_F_D2I_ASN1_TYPE				 127
! #define ASN1_F_D2I_ASN1_UTCTIME				 128
! #define ASN1_F_D2I_DHPARAMS				 129
! #define ASN1_F_D2I_DSAPRIVATEKEY			 130
! #define ASN1_F_D2I_DSAPUBLICKEY				 131
! #define ASN1_F_D2I_NETSCAPE_PKEY			 132
! #define ASN1_F_D2I_NETSCAPE_RSA				 133
! #define ASN1_F_D2I_NETSCAPE_RSA_2			 134
! #define ASN1_F_D2I_NETSCAPE_SPKAC			 135
! #define ASN1_F_D2I_NETSCAPE_SPKI			 136
! #define ASN1_F_D2I_PKCS7				 137
! #define ASN1_F_D2I_PKCS7_DIGEST				 138
! #define ASN1_F_D2I_PKCS7_ENCRYPT			 139
! #define ASN1_F_D2I_PKCS7_ENC_CONTENT			 140
! #define ASN1_F_D2I_PKCS7_ENVELOPE			 141
! #define ASN1_F_D2I_PKCS7_ISSUER_AND_SERIAL		 142
! #define ASN1_F_D2I_PKCS7_RECIP_INFO			 143
! #define ASN1_F_D2I_PKCS7_SIGNED				 144
! #define ASN1_F_D2I_PKCS7_SIGNER_INFO			 145
! #define ASN1_F_D2I_PKCS7_SIGN_ENVELOPE			 146
! #define ASN1_F_D2I_PRIVATEKEY				 147
! #define ASN1_F_D2I_PUBLICKEY				 148
! #define ASN1_F_D2I_RSAPRIVATEKEY			 149
! #define ASN1_F_D2I_RSAPUBLICKEY				 150
! #define ASN1_F_D2I_X509					 151
! #define ASN1_F_D2I_X509_ALGOR				 152
! #define ASN1_F_D2I_X509_ATTRIBUTE			 153
! #define ASN1_F_D2I_X509_CINF				 154
! #define ASN1_F_D2I_X509_CRL				 155
! #define ASN1_F_D2I_X509_CRL_INFO			 156
! #define ASN1_F_D2I_X509_KEY				 157
! #define ASN1_F_D2I_X509_NAME				 158
! #define ASN1_F_D2I_X509_NAME_ENTRY			 159
! #define ASN1_F_D2I_X509_PKEY				 160
! #define ASN1_F_D2I_X509_PUBKEY				 161
! #define ASN1_F_D2I_X509_REQ				 162
! #define ASN1_F_D2I_X509_REQ_INFO			 163
! #define ASN1_F_D2I_X509_REVOKED				 164
! #define ASN1_F_D2I_X509_SIG				 165
! #define ASN1_F_D2I_X509_VAL				 166
! #define ASN1_F_I2A_ASN1_OBJECT				 167
! #define ASN1_F_I2D_ASN1_HEADER				 168
! #define ASN1_F_I2D_DHPARAMS				 169
! #define ASN1_F_I2D_DSAPRIVATEKEY			 170
! #define ASN1_F_I2D_DSAPUBLICKEY				 171
! #define ASN1_F_I2D_NETSCAPE_RSA				 172
! #define ASN1_F_I2D_PKCS7				 173
! #define ASN1_F_I2D_PRIVATEKEY				 174
! #define ASN1_F_I2D_PUBLICKEY				 175
! #define ASN1_F_I2D_RSAPRIVATEKEY			 176
! #define ASN1_F_I2D_RSAPUBLICKEY				 177
! #define ASN1_F_I2D_X509_ATTRIBUTE			 178
! #define ASN1_F_NETSCAPE_PKEY_NEW			 179
! #define ASN1_F_NETSCAPE_SPKAC_NEW			 180
! #define ASN1_F_NETSCAPE_SPKI_NEW			 181
! #define ASN1_F_PKCS7_DIGEST_NEW				 182
! #define ASN1_F_PKCS7_ENCRYPT_NEW			 183
! #define ASN1_F_PKCS7_ENC_CONTENT_NEW			 184
! #define ASN1_F_PKCS7_ENVELOPE_NEW			 185
! #define ASN1_F_PKCS7_ISSUER_AND_SERIAL_NEW		 186
! #define ASN1_F_PKCS7_NEW				 187
! #define ASN1_F_PKCS7_RECIP_INFO_NEW			 188
! #define ASN1_F_PKCS7_SIGNED_NEW				 189
! #define ASN1_F_PKCS7_SIGNER_INFO_NEW			 190
! #define ASN1_F_PKCS7_SIGN_ENVELOPE_NEW			 191
! #define ASN1_F_X509_ALGOR_NEW				 192
! #define ASN1_F_X509_ATTRIBUTE_NEW			 193
! #define ASN1_F_X509_CINF_NEW				 194
! #define ASN1_F_X509_CRL_INFO_NEW			 195
! #define ASN1_F_X509_CRL_NEW				 196
! #define ASN1_F_X509_DHPARAMS_NEW			 197
! #define ASN1_F_X509_INFO_NEW				 198
! #define ASN1_F_X509_KEY_NEW				 199
! #define ASN1_F_X509_NAME_ENTRY_NEW			 200
! #define ASN1_F_X509_NAME_NEW				 201
! #define ASN1_F_X509_NEW					 202
! #define ASN1_F_X509_PKEY_NEW				 203
! #define ASN1_F_X509_PUBKEY_NEW				 204
! #define ASN1_F_X509_REQ_INFO_NEW			 205
! #define ASN1_F_X509_REQ_NEW				 206
! #define ASN1_F_X509_REVOKED_NEW				 207
! #define ASN1_F_X509_SIG_NEW				 208
! #define ASN1_F_X509_VAL_FREE				 209
! #define ASN1_F_X509_VAL_NEW				 210
  
  /* Reason codes. */
  #define ASN1_R_BAD_CLASS				 100
--- 445,544 ----
  #define ASN1_F_ASN1_VERIFY				 117
  #define ASN1_F_BN_TO_ASN1_INTEGER			 118
  #define ASN1_F_D2I_ASN1_BIT_STRING			 119
! #define ASN1_F_D2I_ASN1_BOOLEAN				 120
! #define ASN1_F_D2I_ASN1_BYTES				 121
! #define ASN1_F_D2I_ASN1_HEADER				 122
! #define ASN1_F_D2I_ASN1_INTEGER				 123
! #define ASN1_F_D2I_ASN1_OBJECT				 124
! #define ASN1_F_D2I_ASN1_OCTET_STRING			 125
! #define ASN1_F_D2I_ASN1_PRINT_TYPE			 126
! #define ASN1_F_D2I_ASN1_SET				 127
! #define ASN1_F_D2I_ASN1_TYPE				 128
! #define ASN1_F_D2I_ASN1_UTCTIME				 129
! #define ASN1_F_D2I_DHPARAMS				 130
! #define ASN1_F_D2I_DSAPRIVATEKEY			 131
! #define ASN1_F_D2I_DSAPUBLICKEY				 132
! #define ASN1_F_D2I_NETSCAPE_PKEY			 133
! #define ASN1_F_D2I_NETSCAPE_RSA				 134
! #define ASN1_F_D2I_NETSCAPE_RSA_2			 135
! #define ASN1_F_D2I_NETSCAPE_SPKAC			 136
! #define ASN1_F_D2I_NETSCAPE_SPKI			 137
! #define ASN1_F_D2I_PKCS7				 138
! #define ASN1_F_D2I_PKCS7_DIGEST				 139
! #define ASN1_F_D2I_PKCS7_ENCRYPT			 140
! #define ASN1_F_D2I_PKCS7_ENC_CONTENT			 141
! #define ASN1_F_D2I_PKCS7_ENVELOPE			 142
! #define ASN1_F_D2I_PKCS7_ISSUER_AND_SERIAL		 143
! #define ASN1_F_D2I_PKCS7_RECIP_INFO			 144
! #define ASN1_F_D2I_PKCS7_SIGNED				 145
! #define ASN1_F_D2I_PKCS7_SIGNER_INFO			 146
! #define ASN1_F_D2I_PKCS7_SIGN_ENVELOPE			 147
! #define ASN1_F_D2I_PRIVATEKEY				 148
! #define ASN1_F_D2I_PUBLICKEY				 149
! #define ASN1_F_D2I_RSAPRIVATEKEY			 150
! #define ASN1_F_D2I_RSAPUBLICKEY				 151
! #define ASN1_F_D2I_X509					 152
! #define ASN1_F_D2I_X509_ALGOR				 153
! #define ASN1_F_D2I_X509_ATTRIBUTE			 154
! #define ASN1_F_D2I_X509_CINF				 155
! #define ASN1_F_D2I_X509_CRL				 156
! #define ASN1_F_D2I_X509_CRL_INFO			 157
! #define ASN1_F_D2I_X509_EXTENSION			 158
! #define ASN1_F_X509_EXTENSION_NEW			 159
! #define ASN1_F_D2I_X509_KEY				 160
! #define ASN1_F_D2I_X509_NAME				 161
! #define ASN1_F_D2I_X509_NAME_ENTRY			 162
! #define ASN1_F_D2I_X509_PKEY				 163
! #define ASN1_F_D2I_X509_PUBKEY				 164
! #define ASN1_F_D2I_X509_REQ				 165
! #define ASN1_F_D2I_X509_REQ_INFO			 166
! #define ASN1_F_D2I_X509_REVOKED				 167
! #define ASN1_F_D2I_X509_SIG				 168
! #define ASN1_F_D2I_X509_VAL				 169
! #define ASN1_F_I2A_ASN1_OBJECT				 170
! #define ASN1_F_I2D_ASN1_HEADER				 171
! #define ASN1_F_I2D_DHPARAMS				 172
! #define ASN1_F_I2D_DSAPRIVATEKEY			 173
! #define ASN1_F_I2D_DSAPUBLICKEY				 174
! #define ASN1_F_I2D_NETSCAPE_RSA				 175
! #define ASN1_F_I2D_PKCS7				 176
! #define ASN1_F_I2D_PRIVATEKEY				 177
! #define ASN1_F_I2D_PUBLICKEY				 178
! #define ASN1_F_I2D_RSAPRIVATEKEY			 179
! #define ASN1_F_I2D_RSAPUBLICKEY				 180
! #define ASN1_F_I2D_X509_ATTRIBUTE			 181
! #define ASN1_F_NETSCAPE_PKEY_NEW			 182
! #define ASN1_F_NETSCAPE_SPKAC_NEW			 183
! #define ASN1_F_NETSCAPE_SPKI_NEW			 184
! #define ASN1_F_PKCS7_DIGEST_NEW				 185
! #define ASN1_F_PKCS7_ENCRYPT_NEW			 186
! #define ASN1_F_PKCS7_ENC_CONTENT_NEW			 187
! #define ASN1_F_PKCS7_ENVELOPE_NEW			 188
! #define ASN1_F_PKCS7_ISSUER_AND_SERIAL_NEW		 189
! #define ASN1_F_PKCS7_NEW				 190
! #define ASN1_F_PKCS7_RECIP_INFO_NEW			 191
! #define ASN1_F_PKCS7_SIGNED_NEW				 192
! #define ASN1_F_PKCS7_SIGNER_INFO_NEW			 193
! #define ASN1_F_PKCS7_SIGN_ENVELOPE_NEW			 194
! #define ASN1_F_X509_ALGOR_NEW				 195
! #define ASN1_F_X509_ATTRIBUTE_NEW			 196
! #define ASN1_F_X509_CINF_NEW				 197
! #define ASN1_F_X509_CRL_INFO_NEW			 198
! #define ASN1_F_X509_CRL_NEW				 199
! #define ASN1_F_X509_DHPARAMS_NEW			 200
! #define ASN1_F_X509_INFO_NEW				 201
! #define ASN1_F_X509_KEY_NEW				 202
! #define ASN1_F_X509_NAME_ENTRY_NEW			 203
! #define ASN1_F_X509_NAME_NEW				 204
! #define ASN1_F_X509_NEW					 205
! #define ASN1_F_X509_PKEY_NEW				 206
! #define ASN1_F_X509_PUBKEY_NEW				 207
! #define ASN1_F_X509_REQ_INFO_NEW			 208
! #define ASN1_F_X509_REQ_NEW				 209
! #define ASN1_F_X509_REVOKED_NEW				 210
! #define ASN1_F_X509_SIG_NEW				 211
! #define ASN1_F_X509_VAL_FREE				 212
! #define ASN1_F_X509_VAL_NEW				 213
  
  /* Reason codes. */
  #define ASN1_R_BAD_CLASS				 100
***************
*** 543,584 ****
  #define ASN1_R_BAD_TYPE					 108
  #define ASN1_R_BIT_STRING_TOO_SHORT			 109
  #define ASN1_R_BN_LIB					 110
! #define ASN1_R_DECODING_ERROR				 111
! #define ASN1_R_ERROR_STACK				 112
! #define ASN1_R_EXPECTING_AN_INTEGER			 113
! #define ASN1_R_EXPECTING_AN_OBJECT			 114
! #define ASN1_R_EXPECTING_AN_OCTET_STRING		 115
! #define ASN1_R_EXPECTING_A_BIT_STRING			 116
! #define ASN1_R_EXPECTING_A_SEQUENCE			 117
! #define ASN1_R_EXPECTING_A_UTCTIME			 118
! #define ASN1_R_HEADER_TOO_LONG				 119
! #define ASN1_R_IV_TOO_LARGE				 120
! #define ASN1_R_LENGTH_ERROR				 121
! #define ASN1_R_LENGTH_MISMATCH				 122
! #define ASN1_R_MISSING_EOS				 123
! #define ASN1_R_NON_HEX_CHARACTERS			 124
! #define ASN1_R_NOT_ENOUGH_DATA				 125
! #define ASN1_R_NOT_EOC_IN_INDEFINITLE_LENGTH_SEQUENCE	 126
! #define ASN1_R_ODD_NUMBER_OF_CHARS			 127
! #define ASN1_R_PARSING					 128
! #define ASN1_R_PRIVATE_KEY_HEADER_MISSING		 129
! #define ASN1_R_SHORT_LINE				 130
! #define ASN1_R_TAG_VALUE_TOO_HIGH			 131
! #define ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD 132
! #define ASN1_R_TOO_LONG					 133
! #define ASN1_R_UNABLE_TO_DECODE_RSA_KEY			 134
! #define ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY		 135
! #define ASN1_R_UNKNOWN_ATTRIBUTE_TYPE			 136
! #define ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM		 137
! #define ASN1_R_UNKNOWN_OBJECT_TYPE			 138
! #define ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE			 139
! #define ASN1_R_UNSUPORTED_CIPHER			 140
! #define ASN1_R_UNSUPORTED_ENCRYPTION_ALGORITHM		 141
! #define ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE		 142
! #define ASN1_R_UTCTIME_TOO_LONG				 143
! #define ASN1_R_WRONG_EXPLICIT_TAG			 144
! #define ASN1_R_WRONG_PRINTABLE_TYPE			 145
! #define ASN1_R_WRONG_TAG				 146
  
  #ifdef  __cplusplus
  }
--- 552,595 ----
  #define ASN1_R_BAD_TYPE					 108
  #define ASN1_R_BIT_STRING_TOO_SHORT			 109
  #define ASN1_R_BN_LIB					 110
! #define ASN1_R_BOOLEAN_IS_WRONG_LENGTH			 111
! #define ASN1_R_DECODING_ERROR				 112
! #define ASN1_R_ERROR_STACK				 113
! #define ASN1_R_EXPECTING_AN_INTEGER			 114
! #define ASN1_R_EXPECTING_AN_OBJECT			 115
! #define ASN1_R_EXPECTING_AN_OCTET_STRING		 116
! #define ASN1_R_EXPECTING_A_BIT_STRING			 117
! #define ASN1_R_EXPECTING_A_BOOLEAN			 118
! #define ASN1_R_EXPECTING_A_SEQUENCE			 119
! #define ASN1_R_EXPECTING_A_UTCTIME			 120
! #define ASN1_R_HEADER_TOO_LONG				 121
! #define ASN1_R_IV_TOO_LARGE				 122
! #define ASN1_R_LENGTH_ERROR				 123
! #define ASN1_R_LENGTH_MISMATCH				 124
! #define ASN1_R_MISSING_EOS				 125
! #define ASN1_R_NON_HEX_CHARACTERS			 126
! #define ASN1_R_NOT_ENOUGH_DATA				 127
! #define ASN1_R_NOT_EOC_IN_INDEFINITLE_LENGTH_SEQUENCE	 128
! #define ASN1_R_ODD_NUMBER_OF_CHARS			 129
! #define ASN1_R_PARSING					 130
! #define ASN1_R_PRIVATE_KEY_HEADER_MISSING		 131
! #define ASN1_R_SHORT_LINE				 132
! #define ASN1_R_TAG_VALUE_TOO_HIGH			 133
! #define ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD 134
! #define ASN1_R_TOO_LONG					 135
! #define ASN1_R_UNABLE_TO_DECODE_RSA_KEY			 136
! #define ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY		 137
! #define ASN1_R_UNKNOWN_ATTRIBUTE_TYPE			 138
! #define ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM		 139
! #define ASN1_R_UNKNOWN_OBJECT_TYPE			 140
! #define ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE			 141
! #define ASN1_R_UNSUPORTED_CIPHER			 142
! #define ASN1_R_UNSUPORTED_ENCRYPTION_ALGORITHM		 143
! #define ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE		 144
! #define ASN1_R_UTCTIME_TOO_LONG				 145
! #define ASN1_R_WRONG_EXPLICIT_TAG			 146
! #define ASN1_R_WRONG_PRINTABLE_TYPE			 147
! #define ASN1_R_WRONG_TAG				 148
  
  #ifdef  __cplusplus
  }
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/asn1_err.c	Wed Jul 10 09:46:50 1996
--- ./crypto/asn1/asn1_err.c	Sat Jul 20 23:47:54 1996
***************
*** 72,77 ****
--- 72,78 ----
  {ERR_PACK(0,ASN1_F_ASN1_VERIFY,0),	"ASN1_VERIFY"},
  {ERR_PACK(0,ASN1_F_BN_TO_ASN1_INTEGER,0),	"BN_to_ASN1_INTEGER"},
  {ERR_PACK(0,ASN1_F_D2I_ASN1_BIT_STRING,0),	"d2i_ASN1_BIT_STRING"},
+ {ERR_PACK(0,ASN1_F_D2I_ASN1_BOOLEAN,0),	"d2i_ASN1_BOOLEAN"},
  {ERR_PACK(0,ASN1_F_D2I_ASN1_BYTES,0),	"d2i_ASN1_bytes"},
  {ERR_PACK(0,ASN1_F_D2I_ASN1_HEADER,0),	"d2i_ASN1_HEADER"},
  {ERR_PACK(0,ASN1_F_D2I_ASN1_INTEGER,0),	"d2i_ASN1_INTEGER"},
***************
*** 109,114 ****
--- 110,117 ----
  {ERR_PACK(0,ASN1_F_D2I_X509_CINF,0),	"D2I_X509_CINF"},
  {ERR_PACK(0,ASN1_F_D2I_X509_CRL,0),	"D2I_X509_CRL"},
  {ERR_PACK(0,ASN1_F_D2I_X509_CRL_INFO,0),	"D2I_X509_CRL_INFO"},
+ {ERR_PACK(0,ASN1_F_D2I_X509_EXTENSION,0),	"D2I_X509_EXTENSION"},
+ {ERR_PACK(0,ASN1_F_X509_EXTENSION_NEW,0),	"X509_EXTENSION_NEW"},
  {ERR_PACK(0,ASN1_F_D2I_X509_KEY,0),	"D2I_X509_KEY"},
  {ERR_PACK(0,ASN1_F_D2I_X509_NAME,0),	"D2I_X509_NAME"},
  {ERR_PACK(0,ASN1_F_D2I_X509_NAME_ENTRY,0),	"D2I_X509_NAME_ENTRY"},
***************
*** 179,184 ****
--- 182,188 ----
  {ASN1_R_BAD_TYPE                         ,"bad type"},
  {ASN1_R_BIT_STRING_TOO_SHORT             ,"bit string too short"},
  {ASN1_R_BN_LIB                           ,"bn lib"},
+ {ASN1_R_BOOLEAN_IS_WRONG_LENGTH          ,"boolean is wrong length"},
  {ASN1_R_DECODING_ERROR                   ,"decoding error"},
  {ASN1_R_ERROR_STACK                      ,"error stack"},
  {ASN1_R_EXPECTING_AN_INTEGER             ,"expecting an integer"},
***************
*** 185,190 ****
--- 189,195 ----
  {ASN1_R_EXPECTING_AN_OBJECT              ,"expecting an object"},
  {ASN1_R_EXPECTING_AN_OCTET_STRING        ,"expecting an octet string"},
  {ASN1_R_EXPECTING_A_BIT_STRING           ,"expecting a bit string"},
+ {ASN1_R_EXPECTING_A_BOOLEAN              ,"expecting a boolean"},
  {ASN1_R_EXPECTING_A_SEQUENCE             ,"expecting a sequence"},
  {ASN1_R_EXPECTING_A_UTCTIME              ,"expecting a utctime"},
  {ASN1_R_HEADER_TOO_LONG                  ,"header too long"},
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/asn1_lib.c	Fri Jul 12 09:28:28 1996
--- ./crypto/asn1/asn1_lib.c	Wed Jul 24 07:56:41 1996
***************
*** 57,63 ****
  static void asn1_put_length();
  #endif
  
! char *ASN1_version="ASN1 part of SSLeay 0.6.1 12-Jul-1996";
  
  int ASN1_check_infinite_end(p,len)
  unsigned char **p;
--- 57,63 ----
  static void asn1_put_length();
  #endif
  
! char *ASN1_version="ASN1 part of SSLeay 0.6.2 24-Jul-1996";
  
  int ASN1_check_infinite_end(p,len)
  unsigned char **p;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/asn1_mac.h	Wed Jul 10 09:46:50 1996
--- ./crypto/asn1/asn1_mac.h	Sun Jul 21 00:36:26 1996
***************
*** 100,105 ****
--- 100,111 ----
  	if (func(&(b),&c.p,c.slen) == NULL) goto err; \
  	c.slen-=(c.p-c.q);
  
+ #define M_ASN1_D2I_get_opt(b,func,type) \
+ 	if ((c.slen != 0) && (M_ASN1_next == (V_ASN1_UNIVERSAL|(type)))) \
+ 		{ \
+ 		M_ASN1_D2I_get(b,func); \
+ 		}
+ 
  #define M_ASN1_D2I_get_IMP_opt(b,func,tag,type) \
  	if ((c.slen != 0) && (M_ASN1_next == (V_ASN1_CONTEXT_SPECIFIC|(tag)))) \
  		{ \
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/asn1_par.c	Wed Jul 10 09:46:50 1996
--- ./crypto/asn1/asn1_par.c	Sun Jul 21 14:37:02 1996
***************
*** 84,89 ****
--- 84,91 ----
  		sprintf(str,"appl [ %d ]",tag);
  	else if ((tag == V_ASN1_EOC) /* && (xclass == V_ASN1_UNIVERSAL) */)
  		p="EOC";
+ 	else if (tag == V_ASN1_BOOLEAN)
+ 		p="BOOLEAN";
  	else if (tag == V_ASN1_INTEGER)
  		p="INTEGER";
  	else if (tag == V_ASN1_BIT_STRING)
***************
*** 251,256 ****
--- 253,272 ----
  					if (BIO_puts(bp,":BAD OBJECT") <= 0)
  						goto end;
  					}
+ 				}
+ 			else if (tag == V_ASN1_BOOLEAN)
+ 				{
+ 				int ii;
+ 
+ 				opp=op;
+ 				ii=d2i_ASN1_BOOLEAN(NULL,&opp,len+hl);
+ 				if (ii < 0)
+ 					{
+ 					if (BIO_puts(bp,"Bad boolean\n"))
+ 						goto end;
+ 					}
+ 				sprintf(str,"%d",ii);
+ 				BIO_puts(bp,str);
  				}
  			else if (tag == V_ASN1_INTEGER)
  				{
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/a_object.c	Wed Jul 10 09:46:48 1996
--- ./crypto/asn1/a_object.c	Wed Jul 17 16:45:35 1996
***************
*** 157,164 ****
  
  	/* only the ASN1_OBJECTs from the 'table' will have values
  	 * for ->sn or ->ln */
! 	if ((a == NULL) || ((*a) == NULL) ||
! 		((*a)->sn != NULL) || ((*a)->ln != NULL))
  		{
  		if ((ret=ASN1_OBJECT_new()) == NULL) return(NULL);
  		}
--- 157,163 ----
  
  	/* only the ASN1_OBJECTs from the 'table' will have values
  	 * for ->sn or ->ln */
! 	if ((a == NULL) || ((*a) == NULL) || !(*a)->dynamic)
  		{
  		if ((ret=ASN1_OBJECT_new()) == NULL) return(NULL);
  		}
***************
*** 178,190 ****
--- 177,194 ----
  		i=ASN1_R_EXPECTING_AN_OBJECT;
  		goto err;
  		}
+ 	if ((ret->data != NULL) || (ret->length < len))
+ 		{
+ 		if (ret->data != NULL) free(ret->data);
  		ret->data=(unsigned char *)malloc((int)len);
  		if (ret->data == NULL)
  			{ i=ERR_R_MALLOC_FAILURE; goto err; }
+ 		}
  	memcpy(ret->data,p,(int)len);
  	ret->length=(int)len;
  	ret->sn=NULL;
  	ret->ln=NULL;
+ 	/* ret->dynamic=1; we know it is dynamic */
  	p+=len;
  
  	if (a != NULL) (*a)=ret;
***************
*** 212,217 ****
--- 216,222 ----
  	ret->nid=0;
  	ret->sn=NULL;
  	ret->ln=NULL;
+ 	ret->dynamic=1;
  	return(ret);
  	}
  
***************
*** 218,225 ****
  void ASN1_OBJECT_free(a)
  ASN1_OBJECT *a;
  	{
! 	if (a == NULL) return;
! 	if ((a->sn != NULL) || (a->ln != NULL)) return;
  	if (a->data != NULL) free(a->data);
  	free(a);
  	}
--- 223,229 ----
  void ASN1_OBJECT_free(a)
  ASN1_OBJECT *a;
  	{
! 	if ((a == NULL) || !a->dynamic) return;
  	if (a->data != NULL) free(a->data);
  	free(a);
  	}
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/a_set.c	Wed Jul 10 09:46:48 1996
--- ./crypto/asn1/a_set.c	Wed Jul 17 16:45:35 1996
***************
*** 69,75 ****
  	r=ASN1_object_size(1,ret,ex_tag);
  	if (pp == NULL) return(r);
  
! 	p=*pp;
  	ASN1_put_object(&p,1,ret,ex_tag,ex_class);
  	for (i=0; i<sk_num(a); i++)
  		func(sk_value(a,i),&p);
--- 69,75 ----
  	r=ASN1_object_size(1,ret,ex_tag);
  	if (pp == NULL) return(r);
  
! 	p= *pp;
  	ASN1_put_object(&p,1,ret,ex_tag,ex_class);
  	for (i=0; i<sk_num(a); i++)
  		func(sk_value(a,i),&p);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/a_sign.c	Wed Jul 10 09:46:48 1996
--- ./crypto/asn1/a_sign.c	Sat Jul 20 00:16:22 1996
***************
*** 87,93 ****
  			a->parameter->type=V_ASN1_NULL;
  			}
  		ASN1_OBJECT_free(a->algorithm);
! 		a->algorithm=OBJ_nid2obj(type->type);
  		if (a->algorithm == NULL)
  			{
  			ASN1err(ASN1_F_ASN1_SIGN,ASN1_R_UNKNOWN_OBJECT_TYPE);
--- 87,93 ----
  			a->parameter->type=V_ASN1_NULL;
  			}
  		ASN1_OBJECT_free(a->algorithm);
! 		a->algorithm=OBJ_nid2obj(type->pkey_type);
  		if (a->algorithm == NULL)
  			{
  			ASN1err(ASN1_F_ASN1_SIGN,ASN1_R_UNKNOWN_OBJECT_TYPE);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/a_type.c	Wed Jul 10 09:46:48 1996
--- ./crypto/asn1/a_type.c	Wed Jul 17 16:45:35 1996
***************
*** 201,207 ****
  	ASN1_TYPE *ret=NULL;
  
  	M_ASN1_New_Malloc(ret,ASN1_TYPE);
! 	ret->type=-1;
  	ret->value.ptr=NULL;
  	return(ret);
  	M_ASN1_New_Error(ASN1_F_ASN1_TYPE_NEW);
--- 201,207 ----
  	ASN1_TYPE *ret=NULL;
  
  	M_ASN1_New_Malloc(ret,ASN1_TYPE);
! 	ret->type= -1;
  	ret->value.ptr=NULL;
  	return(ret);
  	M_ASN1_New_Error(ASN1_F_ASN1_TYPE_NEW);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/a_verify.c	Wed Jul 10 09:46:49 1996
--- ./crypto/asn1/a_verify.c	Wed Jul 17 16:45:36 1996
***************
*** 68,74 ****
  	EVP_MD_CTX ctx;
  	EVP_MD *type;
  	unsigned char *p,*buf_in=NULL;
! 	int ret=-1,i,inl;
  
  	i=OBJ_obj2nid(a->algorithm);
  	type=EVP_get_MDbyname(OBJ_nid2sn(i));
--- 68,74 ----
  	EVP_MD_CTX ctx;
  	EVP_MD *type;
  	unsigned char *p,*buf_in=NULL;
! 	int ret= -1,i,inl;
  
  	i=OBJ_obj2nid(a->algorithm);
  	type=EVP_get_MDbyname(OBJ_nid2sn(i));
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/Makefile.ssl	Fri Jul 12 17:21:31 1996
--- ./crypto/asn1/Makefile.ssl	Thu Jul 25 16:06:33 1996
***************
*** 33,39 ****
  	p7_i_s.c p7_signi.c p7_signd.c p7_recip.c p7_enc_c.c p7_evp.c \
  	p7_dgst.c p7_s_e.c p7_enc.c p7_lib.c \
  	f_int.c i2d_dh.c d2i_dh.c n_pkey.c \
! 	a_hdr.c x_pkey.c \
  	asn1_par.c asn1_lib.c $(ERRC).c
  LIBOBJ= a_object.o a_bitstr.o a_utctm.o a_int.o a_octet.o a_print.o \
  	a_type.o a_set.o a_dup.o a_d2i_fp.o a_i2d_fp.o \
--- 33,39 ----
  	p7_i_s.c p7_signi.c p7_signd.c p7_recip.c p7_enc_c.c p7_evp.c \
  	p7_dgst.c p7_s_e.c p7_enc.c p7_lib.c \
  	f_int.c i2d_dh.c d2i_dh.c n_pkey.c \
! 	a_hdr.c x_pkey.c a_bool.c x_exten.c \
  	asn1_par.c asn1_lib.c $(ERRC).c
  LIBOBJ= a_object.o a_bitstr.o a_utctm.o a_int.o a_octet.o a_print.o \
  	a_type.o a_set.o a_dup.o a_d2i_fp.o a_i2d_fp.o \
***************
*** 47,53 ****
  	p7_i_s.o p7_signi.o p7_signd.o p7_recip.o p7_enc_c.o p7_evp.o \
  	p7_dgst.o p7_s_e.o p7_enc.o p7_lib.o \
  	f_int.o i2d_dh.o d2i_dh.o n_pkey.o \
! 	a_hdr.o x_pkey.o \
  	asn1_par.o asn1_lib.o $(ERRC).o
  
  SRC= $(LIBSRC)
--- 47,53 ----
  	p7_i_s.o p7_signi.o p7_signd.o p7_recip.o p7_enc_c.o p7_evp.o \
  	p7_dgst.o p7_s_e.o p7_enc.o p7_lib.o \
  	f_int.o i2d_dh.o d2i_dh.o n_pkey.o \
! 	a_hdr.o x_pkey.o a_bool.o x_exten.o \
  	asn1_par.o asn1_lib.o $(ERRC).o
  
  SRC= $(LIBSRC)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/pkcs8.c	Wed Jul 10 09:46:52 1996
--- ./crypto/asn1/pkcs8.c	Tue Jul 23 21:41:31 1996
***************
*** 103,115 ****
  	M_ASN1_New_Error(ASN1_F_X509_NEW);
  	}
  
! void X509_free(a)
  X509 *a;
  	{
  	if (a == NULL) return;
! 	CS_BEGIN
! 	if (--a->references > 0) return;
! 	CS_END
  	X509_CINF_free(a->cert_info);
  	X509_ALGOR_free(a->sig_alg);
  	ASN1_BIT_STRING_free(a->signature);
--- 103,118 ----
  	M_ASN1_New_Error(ASN1_F_X509_NEW);
  	}
  
! void X509_KEY_free(a)
  X509 *a;
  	{
+ 	int i;
+ 
  	if (a == NULL) return;
! 
! 	i=CRYPTO_add_lock(&a->references,-1,CRYPTO_LOCK_X509_KEY);
! 	if (i > 0) return;
! 
  	X509_CINF_free(a->cert_info);
  	X509_ALGOR_free(a->sig_alg);
  	ASN1_BIT_STRING_free(a->signature);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/x_attrib.c	Wed Jul 10 09:46:53 1996
--- ./crypto/asn1/x_attrib.c	Sat Jul 20 23:07:13 1996
***************
*** 56,61 ****
--- 56,62 ----
   * ASN1err(ASN1_F_I2D_X509_ATTRIBUTE,ASN1_R_UNKNOWN_ATTRIBUTE_TYPE);
   */
  
+ /* sequence */
  int i2d_X509_ATTRIBUTE(a,pp)
  X509_ATTRIBUTE *a;
  unsigned char **pp;
***************
*** 99,105 ****
  	M_ASN1_D2I_start_sequence();
  	M_ASN1_D2I_get(ret->object,d2i_ASN1_OBJECT);
  	ret->nid=OBJ_obj2nid(ret->object);
! 	if (M_ASN1_next == (V_ASN1_CONSTRUCTED|V_ASN1_UNIVERSAL|V_ASN1_SET))
  		{
  		ret->set=1;
  		M_ASN1_D2I_get_set(ret->value.set,d2i_ASN1_TYPE);
--- 100,108 ----
  	M_ASN1_D2I_start_sequence();
  	M_ASN1_D2I_get(ret->object,d2i_ASN1_OBJECT);
  	ret->nid=OBJ_obj2nid(ret->object);
! 
! 	if ((c.slen != 0) &&
! 		(M_ASN1_next == (V_ASN1_CONSTRUCTED|V_ASN1_UNIVERSAL|V_ASN1_SET)))
  		{
  		ret->set=1;
  		M_ASN1_D2I_get_set(ret->value.set,d2i_ASN1_TYPE);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/x_cinf.c	Wed Jul 10 09:46:53 1996
--- ./crypto/asn1/x_cinf.c	Sun Jul 21 14:19:04 1996
***************
*** 58,64 ****
  X509_CINF *a;
  unsigned char **pp;
  	{
! 	int v1=0;
  	M_ASN1_I2D_vars(a);
  
  	M_ASN1_I2D_len_EXP_opt(a->version,i2d_ASN1_INTEGER,0,v1);
--- 58,64 ----
  X509_CINF *a;
  unsigned char **pp;
  	{
! 	int v1=0,v2=0;
  	M_ASN1_I2D_vars(a);
  
  	M_ASN1_I2D_len_EXP_opt(a->version,i2d_ASN1_INTEGER,0,v1);
***************
*** 70,76 ****
  	M_ASN1_I2D_len(a->key,			i2d_X509_PUBKEY);
  	M_ASN1_I2D_len_IMP_opt(a->issuerUID,	i2d_ASN1_BIT_STRING);
  	M_ASN1_I2D_len_IMP_opt(a->subjectUID,	i2d_ASN1_BIT_STRING);
! 	M_ASN1_I2D_len_IMP_set_opt(a->attributes,i2d_X509_ATTRIBUTE,3);
  
  	M_ASN1_I2D_seq_total();
  
--- 70,76 ----
  	M_ASN1_I2D_len(a->key,			i2d_X509_PUBKEY);
  	M_ASN1_I2D_len_IMP_opt(a->issuerUID,	i2d_ASN1_BIT_STRING);
  	M_ASN1_I2D_len_IMP_opt(a->subjectUID,	i2d_ASN1_BIT_STRING);
! 	M_ASN1_I2D_len_EXP_set_opt(a->extensions,i2d_X509_EXTENSION,3,V_ASN1_SEQUENCE,v2);
  
  	M_ASN1_I2D_seq_total();
  
***************
*** 83,89 ****
  	M_ASN1_I2D_put(a->key,			i2d_X509_PUBKEY);
  	M_ASN1_I2D_put_IMP_opt(a->issuerUID,	i2d_ASN1_INTEGER,1);
  	M_ASN1_I2D_put_IMP_opt(a->subjectUID,	i2d_ASN1_INTEGER,2);
! 	M_ASN1_I2D_put_IMP_set_opt(a->attributes,i2d_X509_ATTRIBUTE,3);
  
  	M_ASN1_I2D_finish();
  	}
--- 83,89 ----
  	M_ASN1_I2D_put(a->key,			i2d_X509_PUBKEY);
  	M_ASN1_I2D_put_IMP_opt(a->issuerUID,	i2d_ASN1_INTEGER,1);
  	M_ASN1_I2D_put_IMP_opt(a->subjectUID,	i2d_ASN1_INTEGER,2);
! 	M_ASN1_I2D_put_EXP_set_opt(a->extensions,i2d_X509_EXTENSION,3,V_ASN1_SEQUENCE,v2);
  
  	M_ASN1_I2D_finish();
  	}
***************
*** 105,110 ****
--- 105,118 ----
  		if (ret->version->data != NULL)
  			ver=ret->version->data[0];
  		}
+ 	else
+ 		{
+ 		if (ret->version != NULL)
+ 			{
+ 			ASN1_INTEGER_free(ret->version);
+ 			ret->version=NULL;
+ 			}
+ 		}
  	M_ASN1_D2I_get(ret->serialNumber,d2i_ASN1_INTEGER);
  	M_ASN1_D2I_get(ret->signature,d2i_X509_ALGOR);
  	M_ASN1_D2I_get(ret->issuer,d2i_X509_NAME);
***************
*** 113,118 ****
--- 121,136 ----
  	M_ASN1_D2I_get(ret->key,d2i_X509_PUBKEY);
  	if (ver >= 1) /* version 2 extensions */
  		{
+ 		if (ret->issuerUID != NULL)
+ 			{
+ 			ASN1_BIT_STRING_free(ret->issuerUID);
+ 			ret->issuerUID=NULL;
+ 			}
+ 		if (ret->subjectUID != NULL)
+ 			{
+ 			ASN1_BIT_STRING_free(ret->subjectUID);
+ 			ret->issuerUID=NULL;
+ 			}
  		M_ASN1_D2I_get_IMP_opt(ret->issuerUID,d2i_ASN1_BIT_STRING,  1,
  			V_ASN1_BIT_STRING);
  		M_ASN1_D2I_get_IMP_opt(ret->subjectUID,d2i_ASN1_BIT_STRING, 2,
***************
*** 120,127 ****
  		}
  	if (ver >= 2) /* version 3 extensions */
  		{
! 		M_ASN1_D2I_get_IMP_set_opt(ret->attributes,
! 			d2i_X509_ATTRIBUTE,3);
  		}
  	M_ASN1_D2I_Finish(a,X509_CINF_free,ASN1_F_D2I_X509_CINF);
  	}
--- 138,149 ----
  		}
  	if (ver >= 2) /* version 3 extensions */
  		{
! 		if (ret->extensions != NULL)
! 			while (sk_num(ret->extensions))
! 				X509_EXTENSION_free((X509_EXTENSION *)
! 					sk_pop(ret->extensions));
! 		M_ASN1_D2I_get_set_EXP_opt(ret->extensions,d2i_X509_EXTENSION,3,
! 			V_ASN1_SEQUENCE);
  		}
  	M_ASN1_D2I_Finish(a,X509_CINF_free,ASN1_F_D2I_X509_CINF);
  	}
***************
*** 140,146 ****
  	M_ASN1_New(ret->key,X509_PUBKEY_new);
  	ret->issuerUID=NULL;
  	ret->subjectUID=NULL;
! 	ret->attributes=NULL;
  	return(ret);
  	M_ASN1_New_Error(ASN1_F_X509_CINF_NEW);
  	}
--- 162,168 ----
  	M_ASN1_New(ret->key,X509_PUBKEY_new);
  	ret->issuerUID=NULL;
  	ret->subjectUID=NULL;
! 	ret->extensions=NULL;
  	return(ret);
  	M_ASN1_New_Error(ASN1_F_X509_CINF_NEW);
  	}
***************
*** 158,164 ****
  	X509_PUBKEY_free(a->key);
  	ASN1_BIT_STRING_free(a->issuerUID);
  	ASN1_BIT_STRING_free(a->subjectUID);
! 	sk_pop_free(a->attributes,	X509_ATTRIBUTE_free);
  	free(a);
  	}
  
--- 180,186 ----
  	X509_PUBKEY_free(a->key);
  	ASN1_BIT_STRING_free(a->issuerUID);
  	ASN1_BIT_STRING_free(a->subjectUID);
! 	sk_pop_free(a->extensions,X509_EXTENSION_free);
  	free(a);
  	}
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/x_crl.c	Wed Jul 10 09:46:53 1996
--- ./crypto/asn1/x_crl.c	Tue Jul 23 21:41:17 1996
***************
*** 102,125 ****
--- 102,136 ----
  X509_CRL_INFO *a;
  unsigned char **pp;
  	{
+ 	long l=0;
  	M_ASN1_I2D_vars(a);
  
  	if (sk_num(a->revoked) != 0)
  		qsort((char *)a->revoked->data,sk_num(a->revoked),
  			sizeof(X509_REVOKED *),(int (*)(P_CC_CC))X509_REVOKED_seq_cmp);
+ 	if ((a->version != NULL) && ((l=ASN1_INTEGER_get(a->version)) != 0))
+ 		{
+ 		M_ASN1_I2D_len(a->version,i2d_ASN1_INTEGER);
+ 		}
  	M_ASN1_I2D_len(a->sig_alg,i2d_X509_ALGOR);
  	M_ASN1_I2D_len(a->issuer,i2d_X509_NAME);
  	M_ASN1_I2D_len(a->lastUpdate,i2d_ASN1_UTCTIME);
  	M_ASN1_I2D_len(a->nextUpdate,i2d_ASN1_UTCTIME);
  	M_ASN1_I2D_len_SEQ_opt(a->revoked,i2d_X509_REVOKED);
+ 	M_ASN1_I2D_len_IMP_set_opt(a->extensions,i2d_X509_EXTENSION,0);
  
  	M_ASN1_I2D_seq_total();
  
+ 	if ((a->version != NULL) && (l != 0))
+ 		{
+ 		M_ASN1_I2D_put(a->version,i2d_ASN1_INTEGER);
+ 		}
  	M_ASN1_I2D_put(a->sig_alg,i2d_X509_ALGOR);
  	M_ASN1_I2D_put(a->issuer,i2d_X509_NAME);
  	M_ASN1_I2D_put(a->lastUpdate,i2d_ASN1_UTCTIME);
  	M_ASN1_I2D_put(a->nextUpdate,i2d_ASN1_UTCTIME);
  	M_ASN1_I2D_put_SEQ_opt(a->revoked,i2d_X509_REVOKED);
+ 	M_ASN1_I2D_put_IMP_set_opt(a->extensions,i2d_X509_EXTENSION,0);
  
  	M_ASN1_I2D_finish();
  	}
***************
*** 129,143 ****
  unsigned char **pp;
  long length;
  	{
! 	int i;
  	M_ASN1_D2I_vars(a,X509_CRL_INFO *,X509_CRL_INFO_new);
  
  	M_ASN1_D2I_Init();
  	M_ASN1_D2I_start_sequence();
  	M_ASN1_D2I_get(ret->sig_alg,d2i_X509_ALGOR);
  	M_ASN1_D2I_get(ret->issuer,d2i_X509_NAME);
  	M_ASN1_D2I_get(ret->lastUpdate,d2i_ASN1_UTCTIME);
  	M_ASN1_D2I_get(ret->nextUpdate,d2i_ASN1_UTCTIME);
  	M_ASN1_D2I_get_seq_opt(ret->revoked,d2i_X509_REVOKED);
  
  	if (ret->revoked != NULL)
--- 140,169 ----
  unsigned char **pp;
  long length;
  	{
! 	int i,ver=0;
  	M_ASN1_D2I_vars(a,X509_CRL_INFO *,X509_CRL_INFO_new);
  
+ 
  	M_ASN1_D2I_Init();
  	M_ASN1_D2I_start_sequence();
+ 	M_ASN1_D2I_get_opt(ret->version,d2i_ASN1_INTEGER,V_ASN1_INTEGER);
+ 	if (ret->version != NULL)
+ 		ver=ret->version->data[0];
+ 	
+ 	if ((ver == 0) && (ret->version != NULL))
+ 		{
+ 		ASN1_INTEGER_free(ret->version);
+ 		ret->version=NULL;
+ 		}
  	M_ASN1_D2I_get(ret->sig_alg,d2i_X509_ALGOR);
  	M_ASN1_D2I_get(ret->issuer,d2i_X509_NAME);
  	M_ASN1_D2I_get(ret->lastUpdate,d2i_ASN1_UTCTIME);
  	M_ASN1_D2I_get(ret->nextUpdate,d2i_ASN1_UTCTIME);
+ 	if (ret->revoked != NULL)
+ 		{
+ 		while (sk_num(ret->revoked))
+ 			X509_REVOKED_free((X509_REVOKED *)sk_pop(ret->revoked));
+ 		}
  	M_ASN1_D2I_get_seq_opt(ret->revoked,d2i_X509_REVOKED);
  
  	if (ret->revoked != NULL)
***************
*** 148,153 ****
--- 174,191 ----
  			}
  		}
  
+ 	if (ver >= 1)
+ 		{
+ 		if (ret->extensions != NULL)
+ 			{
+ 			while (sk_num(ret->extensions))
+ 				X509_REVOKED_free((X509_REVOKED *)
+ 				sk_pop(ret->extensions));
+ 			}
+ 			
+ 		M_ASN1_D2I_get_IMP_set_opt(ret->extensions,d2i_X509_EXTENSION,0);
+ 		}
+ 
  	M_ASN1_D2I_Finish(a,X509_CRL_INFO_free,ASN1_F_D2I_X509_CRL_INFO);
  	}
  
***************
*** 203,213 ****
--- 241,253 ----
  	X509_CRL_INFO *ret=NULL;
  
  	M_ASN1_New_Malloc(ret,X509_CRL_INFO);
+ 	ret->version=NULL;
  	M_ASN1_New(ret->sig_alg,X509_ALGOR_new);
  	M_ASN1_New(ret->issuer,X509_NAME_new);
  	M_ASN1_New(ret->lastUpdate,ASN1_UTCTIME_new);
  	M_ASN1_New(ret->nextUpdate,ASN1_UTCTIME_new);
  	M_ASN1_New(ret->revoked,sk_new_null);
+ 	M_ASN1_New(ret->extensions,sk_new_null);
  	ret->revoked->comp=(int (*)())X509_REVOKED_cmp;
  	return(ret);
  	M_ASN1_New_Error(ASN1_F_X509_CRL_INFO_NEW);
***************
*** 239,249 ****
--- 279,291 ----
  X509_CRL_INFO *a;
  	{
  	if (a == NULL) return;
+ 	ASN1_INTEGER_free(a->version);
  	X509_ALGOR_free(a->sig_alg);
  	X509_NAME_free(a->issuer);
  	ASN1_UTCTIME_free(a->lastUpdate);
  	ASN1_UTCTIME_free(a->nextUpdate);
  	sk_pop_free(a->revoked,X509_REVOKED_free);
+ 	sk_pop_free(a->extensions,X509_EXTENSION_free);
  	free(a);
  	}
  
***************
*** 250,264 ****
  void X509_CRL_free(a)
  X509_CRL *a;
  	{
  	if (a == NULL) return;
  
! 	CRYPTO_w_lock(CRYPTO_LOCK_X509_CRL);
! 	if (--a->references > 0)
! 		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_X509_CRL);
! 		return;
! 		}
! 	CRYPTO_w_unlock(CRYPTO_LOCK_X509_CRL);
  
  	X509_CRL_INFO_free(a->crl);
  	X509_ALGOR_free(a->sig_alg);
--- 292,303 ----
  void X509_CRL_free(a)
  X509_CRL *a;
  	{
+ 	int i;
+ 
  	if (a == NULL) return;
  
! 	i=CRYPTO_add(&a->references,-1,CRYPTO_LOCK_X509_CRL);
! 	if (i > 0) return;
  
  	X509_CRL_INFO_free(a->crl);
  	X509_ALGOR_free(a->sig_alg);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/x_info.c	Wed Jul 10 09:46:53 1996
--- ./crypto/asn1/x_info.c	Tue Jul 23 21:42:08 1996
***************
*** 72,86 ****
  void X509_INFO_free(x)
  X509_INFO *x;
  	{
  	if (x == NULL) return;
  
! 	CRYPTO_w_lock(CRYPTO_LOCK_X509_INFO);
! 	if (--x->references > 0)
! 		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_X509_INFO);
! 		return;
! 		}
! 	CRYPTO_w_unlock(CRYPTO_LOCK_X509_INFO);
  
  	if (x->x509 != NULL) X509_free(x->x509);
  	if (x->crl != NULL) X509_CRL_free(x->crl);
--- 72,83 ----
  void X509_INFO_free(x)
  X509_INFO *x;
  	{
+ 	int i;
+ 
  	if (x == NULL) return;
  
! 	i=CRYPTO_add(&x->references,-1,CRYPTO_LOCK_X509_INFO);
! 	if (i > 0) return;
  
  	if (x->x509 != NULL) X509_free(x->x509);
  	if (x->crl != NULL) X509_CRL_free(x->crl);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/x_name.c	Wed Jul 10 09:46:53 1996
--- ./crypto/asn1/x_name.c	Wed Jul 17 22:45:13 1996
***************
*** 97,102 ****
--- 97,103 ----
  	int set=0,r,ret=0;
  	int i;
  	unsigned char *p;
+ 	int size=0;
  
  	if (a == NULL) return(0);
  	for (i=0; i<sk_num(a); i++)
***************
*** 105,128 ****
  		if (fe == NULL)
  			{
  			fe=ne;
! 			fe->size=0;
  			}
  
  		if (ne->set != set)
  			{
! 			ret+=ASN1_object_size(1,fe->size,V_ASN1_SET);
  			fe=ne;
! 			fe->size=0;
  			set=ne->set;
  			}
! 		fe->size+=i2d_X509_NAME_ENTRY(ne,NULL);
  		}
  
! 	ret+=ASN1_object_size(1,fe->size,V_ASN1_SET);
  
  	M_ASN1_I2D_seq_total();
  
! 	set=-1;
  	for (i=0; i<sk_num(a); i++)
  		{
  		ne=(X509_NAME_ENTRY *)sk_value(a,i);
--- 106,132 ----
  		if (fe == NULL)
  			{
  			fe=ne;
! 			size=0;
  			}
  
  		if (ne->set != set)
  			{
! 			ret+=ASN1_object_size(1,size,V_ASN1_SET);
! 			fe->size=size;
  			fe=ne;
! 			size=0;
  			set=ne->set;
  			}
! 		size+=i2d_X509_NAME_ENTRY(ne,NULL);
  		}
  
! 	ret+=ASN1_object_size(1,size,V_ASN1_SET);
! 	if (fe != NULL)
! 		fe->size=size;
  
  	M_ASN1_I2D_seq_total();
  
! 	set= -1;
  	for (i=0; i<sk_num(a); i++)
  		{
  		ne=(X509_NAME_ENTRY *)sk_value(a,i);
***************
*** 146,151 ****
--- 150,162 ----
  	int set=0;
  	int index=0;
  	M_ASN1_D2I_vars(a,X509_NAME *,X509_NAME_new);
+ 
+ 	if (sk_num(ret) > 0)
+ 		{
+ 		while (sk_num(ret) > 0)
+ 			X509_NAME_ENTRY_free((X509_NAME_ENTRY *)
+ 				sk_pop(ret));
+ 		}
  
  	M_ASN1_D2I_Init();
  	M_ASN1_D2I_start_sequence();
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/x_pkey.c	Wed Jul 10 09:46:53 1996
--- ./crypto/asn1/x_pkey.c	Tue Jul 23 22:08:18 1996
***************
*** 120,134 ****
  void X509_PKEY_free(x)
  X509_PKEY *x;
  	{
  	if (x == NULL) return;
  
! 	CRYPTO_w_lock(CRYPTO_LOCK_X509_PKEY);
! 	if (--x->references > 0)
! 		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_X509_PKEY);
! 		return;
! 		}
! 	CRYPTO_w_unlock(CRYPTO_LOCK_X509_PKEY);
  
  	if (x->enc_algor != NULL) X509_ALGOR_free(x->enc_algor);
  	if (x->enc_pkey != NULL) ASN1_OCTET_STRING_free(x->enc_pkey);
--- 120,131 ----
  void X509_PKEY_free(x)
  X509_PKEY *x;
  	{
+ 	int i;
+ 
  	if (x == NULL) return;
  
! 	i=CRYPTO_add(&x->references,-1,CRYPTO_LOCK_X509_PKEY);
! 	if (i > 0) return;
  
  	if (x->enc_algor != NULL) X509_ALGOR_free(x->enc_algor);
  	if (x->enc_pkey != NULL) ASN1_OCTET_STRING_free(x->enc_pkey);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/x_req.c	Wed Jul 10 09:46:53 1996
--- ./crypto/asn1/x_req.c	Tue Jul 23 21:43:08 1996
***************
*** 210,224 ****
  void X509_REQ_free(a)
  X509_REQ *a;
  	{
  	if (a == NULL) return;
  
! 	CRYPTO_w_lock(CRYPTO_LOCK_X509_REQ);
! 	if (--a->references > 0)
! 		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_X509_REQ);
! 		return;
! 		}
! 	CRYPTO_w_unlock(CRYPTO_LOCK_X509_REQ);
  
  	X509_REQ_INFO_free(a->req_info);
  	X509_ALGOR_free(a->sig_alg);
--- 210,221 ----
  void X509_REQ_free(a)
  X509_REQ *a;
  	{
+ 	int i;
+ 
  	if (a == NULL) return;
  
! 	i=CRYPTO_add(&a->references,-1,CRYPTO_LOCK_X509_REQ);
! 	if (i > 0) return;
  
  	X509_REQ_INFO_free(a->req_info);
  	X509_ALGOR_free(a->sig_alg);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/asn1/x_x509.c	Wed Jul 10 09:46:54 1996
--- ./crypto/asn1/x_x509.c	Tue Jul 23 21:43:34 1996
***************
*** 115,129 ****
  void X509_free(a)
  X509 *a;
  	{
  	if (a == NULL) return;
  
! 	CRYPTO_w_lock(CRYPTO_LOCK_X509);
! 	if (--a->references > 0)
! 		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_X509);
! 		return;
! 		}
! 	CRYPTO_w_unlock(CRYPTO_LOCK_X509);
  
  	X509_CINF_free(a->cert_info);
  	X509_ALGOR_free(a->sig_alg);
--- 115,126 ----
  void X509_free(a)
  X509 *a;
  	{
+ 	int i;
+ 
  	if (a == NULL) return;
  
! 	i=CRYPTO_add(&a->references,-1,CRYPTO_LOCK_X509);
! 	if (i > 0) return;
  
  	X509_CINF_free(a->cert_info);
  	X509_ALGOR_free(a->sig_alg);
*** /dev/null	Thu Jul 25 17:44:26 1996
--- ./crypto/asn1/a_bool.c	Sat Jul 20 12:24:38 1996
***************
*** 0 ****
--- 1,110 ----
+ /* crypto/asn1/a_bool.c */
+ /* Copyright (C) 1995-1996 Eric Young (eay@mincom.oz.au)
+  * All rights reserved.
+  * 
+  * This file is part of an SSL implementation written
+  * by Eric Young (eay@mincom.oz.au).
+  * The implementation was written so as to conform with Netscapes SSL
+  * specification.  This library and applications are
+  * FREE FOR COMMERCIAL AND NON-COMMERCIAL USE
+  * as long as the following conditions are aheared to.
+  * 
+  * Copyright remains Eric Young's, and as such any Copyright notices in
+  * the code are not to be removed.  If this code is used in a product,
+  * Eric Young should be given attribution as the author of the parts used.
+  * This can be in the form of a textual message at program startup or
+  * in documentation (online or textual) provided with the package.
+  * 
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+  * are met:
+  * 1. Redistributions of source code must retain the copyright
+  *    notice, this list of conditions and the following disclaimer.
+  * 2. Redistributions in binary form must reproduce the above copyright
+  *    notice, this list of conditions and the following disclaimer in the
+  *    documentation and/or other materials provided with the distribution.
+  * 3. All advertising materials mentioning features or use of this software
+  *    must display the following acknowledgement:
+  *    This product includes software developed by Eric Young (eay@mincom.oz.au)
+  * 
+  * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
+  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+  * SUCH DAMAGE.
+  * 
+  * The licence and distribution terms for any publically available version or
+  * derivative of this code cannot be changed.  i.e. this code cannot simply be
+  * copied and put under another distribution licence
+  * [including the GNU Public Licence.]
+  */
+ 
+ #include <stdio.h>
+ #include "cryptlib.h"
+ #include "asn1.h"
+ 
+ /* ASN1err(ASN1_F_D2I_ASN1_BOOLEAN,ASN1_R_EXPECTING_A_BOOLEAN);
+  * ASN1err(ASN1_F_D2I_ASN1_BOOLEAN,ASN1_R_BOOLEAN_IS_WRONG_LENGTH);
+  */
+ 
+ int i2d_ASN1_BOOLEAN(a,pp)
+ int a;
+ unsigned char **pp;
+ 	{
+ 	int r;
+ 	unsigned char *p;
+ 
+ 	r=ASN1_object_size(0,1,V_ASN1_BOOLEAN);
+ 	if (pp == NULL) return(r);
+ 	p= *pp;
+ 
+ 	ASN1_put_object(&p,0,1,V_ASN1_BOOLEAN,V_ASN1_UNIVERSAL);
+ 	*(p++)= (unsigned char)a;
+ 	*pp=p;
+ 	return(r);
+ 	}
+ 
+ int d2i_ASN1_BOOLEAN(a, pp, length)
+ int *a;
+ unsigned char **pp;
+ long length;
+ 	{
+ 	int ret= -1;
+ 	unsigned char *p;
+ 	long len;
+ 	int inf,tag,xclass;
+ 	int i=0;
+ 
+ 	p= *pp;
+ 	inf=ASN1_get_object(&p,&len,&tag,&xclass,length);
+ 	if (inf == 0xff)
+ 		{
+ 		i=ASN1_R_BAD_OBJECT_HEADER;
+ 		goto err;
+ 		}
+ 
+ 	if (tag != V_ASN1_BOOLEAN)
+ 		{
+ 		i=ASN1_R_EXPECTING_A_BOOLEAN;
+ 		goto err;
+ 		}
+ 
+ 	if (len != 1)
+ 		{
+ 		i=ASN1_R_BOOLEAN_IS_WRONG_LENGTH;
+ 		goto err;
+ 		}
+ 	ret= (int)*(p++);
+ 	if (a != NULL) (*a)=ret;
+ 	*pp=p;
+ 	return(ret);
+ err:
+ 	ASN1err(ASN1_F_D2I_ASN1_BOOLEAN,i);
+ 	return(ret);
+ 	}
*** /dev/null	Thu Jul 25 17:44:26 1996
--- ./crypto/asn1/x_exten.c	Sat Jul 20 23:43:38 1996
***************
*** 0 ****
--- 1,131 ----
+ /* crypto/asn1/x_exten.c */
+ /* Copyright (C) 1995-1996 Eric Young (eay@mincom.oz.au)
+  * All rights reserved.
+  * 
+  * This file is part of an SSL implementation written
+  * by Eric Young (eay@mincom.oz.au).
+  * The implementation was written so as to conform with Netscapes SSL
+  * specification.  This library and applications are
+  * FREE FOR COMMERCIAL AND NON-COMMERCIAL USE
+  * as long as the following conditions are aheared to.
+  * 
+  * Copyright remains Eric Young's, and as such any Copyright notices in
+  * the code are not to be removed.  If this code is used in a product,
+  * Eric Young should be given attribution as the author of the parts used.
+  * This can be in the form of a textual message at program startup or
+  * in documentation (online or textual) provided with the package.
+  * 
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+  * are met:
+  * 1. Redistributions of source code must retain the copyright
+  *    notice, this list of conditions and the following disclaimer.
+  * 2. Redistributions in binary form must reproduce the above copyright
+  *    notice, this list of conditions and the following disclaimer in the
+  *    documentation and/or other materials provided with the distribution.
+  * 3. All advertising materials mentioning features or use of this software
+  *    must display the following acknowledgement:
+  *    This product includes software developed by Eric Young (eay@mincom.oz.au)
+  * 
+  * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
+  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+  * SUCH DAMAGE.
+  * 
+  * The licence and distribution terms for any publically available version or
+  * derivative of this code cannot be changed.  i.e. this code cannot simply be
+  * copied and put under another distribution licence
+  * [including the GNU Public Licence.]
+  */
+ 
+ #include <stdio.h>
+ #include "cryptlib.h"
+ #include "objects.h"
+ #include "asn1_mac.h"
+ 
+ /*
+  * ASN1err(ASN1_F_D2I_X509_EXTENSION,ASN1_R_LENGTH_MISMATCH);
+  * ASN1err(ASN1_F_X509_EXTENSION_NEW,ASN1_R_LENGTH_MISMATCH);
+  */
+ 
+ int i2d_X509_EXTENSION(a,pp)
+ X509_EXTENSION *a;
+ unsigned char **pp;
+ 	{
+ 	int k=0;
+ 	int r=0,ret=0;
+ 	unsigned char **p=NULL;
+ 
+ 	if (a == NULL) return(0);
+ 
+ 	p=NULL;
+ 	for (;;)
+ 		{
+ 		if (k)
+ 			{
+ 			r=ASN1_object_size(1,ret,V_ASN1_SEQUENCE);
+ 			if (pp == NULL) return(r);
+ 			p=pp;
+ 			ASN1_put_object(p,1,ret,V_ASN1_SEQUENCE,
+ 				V_ASN1_UNIVERSAL);
+ 			}
+ 
+ 		ret+=i2d_ASN1_OBJECT(a->object,p);
+ 		if (a->critical)
+ 			ret+=i2d_ASN1_BOOLEAN(a->critical,p);
+ 		ret+=i2d_ASN1_OCTET_STRING(a->value,p);
+ 		if (k++) return(r);
+ 		}
+ 	}
+ 
+ X509_EXTENSION *d2i_X509_EXTENSION(a,pp,length)
+ X509_EXTENSION **a;
+ unsigned char **pp;
+ long length;
+ 	{
+ 	M_ASN1_D2I_vars(a,X509_EXTENSION *,X509_EXTENSION_new);
+ 
+ 	M_ASN1_D2I_Init();
+ 	M_ASN1_D2I_start_sequence();
+ 	M_ASN1_D2I_get(ret->object,d2i_ASN1_OBJECT);
+ 
+ 	if ((c.slen != 0) &&
+ 		(M_ASN1_next == (V_ASN1_UNIVERSAL|V_ASN1_BOOLEAN)))
+ 		{
+ 		c.q=c.p;
+ 		if (d2i_ASN1_BOOLEAN(&ret->critical,&c.p,c.slen) < 0) goto err;
+ 		c.slen-=(c.p-c.q);
+ 		}
+ 	M_ASN1_D2I_get(ret->value,d2i_ASN1_OCTET_STRING);
+ 
+ 	M_ASN1_D2I_Finish(a,X509_EXTENSION_free,ASN1_F_D2I_X509_EXTENSION);
+ 	}
+ 
+ X509_EXTENSION *X509_EXTENSION_new()
+ 	{
+ 	X509_EXTENSION *ret=NULL;
+ 
+ 	M_ASN1_New_Malloc(ret,X509_EXTENSION);
+ 	M_ASN1_New(ret->object,ASN1_OBJECT_new);
+ 	M_ASN1_New(ret->value,ASN1_OCTET_STRING_new);
+ 	ret->critical=0;
+ 	return(ret);
+ 	M_ASN1_New_Error(ASN1_F_X509_EXTENSION_NEW);
+ 	}
+ 	
+ void X509_EXTENSION_free(a)
+ X509_EXTENSION *a;
+ 	{
+ 	if (a == NULL) return;
+ 	ASN1_OBJECT_free(a->object);
+ 	ASN1_OCTET_STRING_free(a->value);
+ 	free(a);
+ 	}
+ 
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/bn/bn_lib.c	Fri Jul 12 13:48:16 1996
--- ./crypto/bn/bn_lib.c	Wed Jul 24 07:56:41 1996
***************
*** 49,59 ****
  #include "cryptlib.h"
  #include "bn.h"
  
! char *BN_version="Big Number part of SSLeay 0.6.1 12-Jul-1996";
  
  static BN_ULONG data_one=1L;
  static BIGNUM const_one={&data_one,1,1,0};
! BIGNUM *BN_value_one=&const_one;
  
  char *BN_options()
  	{
--- 49,59 ----
  #include "cryptlib.h"
  #include "bn.h"
  
! char *BN_version="Big Number part of SSLeay 0.6.2 24-Jul-1996";
  
  static BN_ULONG data_one=1L;
  static BIGNUM const_one={&data_one,1,1,0};
! BIGNUM *BN_value_one= &const_one;
  
  char *BN_options()
  	{
***************
*** 425,432 ****
  		else	return(1);
  		}
  	if (a->neg == 0)
! 		{ gt=1; lt=-1; }
! 	else	{ gt=-1; lt=1; }
  
  	if (a->top > b->top) return(gt);
  	if (a->top < b->top) return(lt);
--- 425,432 ----
  		else	return(1);
  		}
  	if (a->neg == 0)
! 		{ gt=1; lt= -1; }
! 	else	{ gt= -1; lt=1; }
  
  	if (a->top > b->top) return(gt);
  	if (a->top < b->top) return(lt);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/bn/bn_prime.c	Wed Jul 10 09:46:56 1996
--- ./crypto/bn/bn_prime.c	Wed Jul 17 16:45:41 1996
***************
*** 154,160 ****
  void (*callback)(P_I_I);
  BN_CTX *ctx;
  	{
! 	int i,j,c2=0,ret=-1;
  	BIGNUM *check;
  
  	check=ctx->bn[ctx->tos++];
--- 154,160 ----
  void (*callback)(P_I_I);
  BN_CTX *ctx;
  	{
! 	int i,j,c2=0,ret= -1;
  	BIGNUM *check;
  
  	check=ctx->bn[ctx->tos++];
***************
*** 183,189 ****
  BIGNUM *n;
  BN_CTX *ctx;
  	{
! 	int k,i,nb,ret=-1;
  	BIGNUM *d,*dd,*tmp;
  	BIGNUM *d1,*d2,*x,*n1,*inv;
  
--- 183,189 ----
  BIGNUM *n;
  BN_CTX *ctx;
  	{
! 	int k,i,nb,ret= -1;
  	BIGNUM *d,*dd,*tmp;
  	BIGNUM *d1,*d2,*x,*n1,*inv;
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/bn/bn_print.c	Wed Jul 10 09:46:56 1996
--- ./crypto/bn/bn_print.c	Wed Jul 17 16:45:41 1996
***************
*** 115,121 ****
  		}
  	else
  		{
! 		ret=*bn;
  		BN_zero(ret);
  		}
  
--- 115,121 ----
  		}
  	else
  		{
! 		ret= *bn;
  		BN_zero(ret);
  		}
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/bn/bn_recp.c	Wed Jul 10 09:46:56 1996
--- ./crypto/bn/bn_recp.c	Wed Jul 17 16:45:41 1996
***************
*** 97,103 ****
  BIGNUM *m;
  BN_CTX *ctx;
  	{
! 	int nm,ret=-1;
  	BIGNUM *t;
  
  	t=ctx->bn[ctx->tos++];
--- 97,103 ----
  BIGNUM *m;
  BN_CTX *ctx;
  	{
! 	int nm,ret= -1;
  	BIGNUM *t;
  
  	t=ctx->bn[ctx->tos++];
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/bn/bn_sub.c	Wed Jul 10 09:46:57 1996
--- ./crypto/bn/bn_sub.c	Wed Jul 17 16:45:41 1996
***************
*** 100,106 ****
  		}
  	memcpy(rp,ap,sizeof(*rp)*(max-i));
  /*	for (; i<max; i++)
! 		*(rp++)=*(ap++);*/
  
  	r->top=max;
  	bn_fix_top(r);
--- 100,106 ----
  		}
  	memcpy(rp,ap,sizeof(*rp)*(max-i));
  /*	for (; i<max; i++)
! 		*(rp++)= *(ap++);*/
  
  	r->top=max;
  	bn_fix_top(r);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/bn/wei_mulw.c	Wed Jul 10 09:46:57 1996
--- ./crypto/bn/wei_mulw.c	Wed Jul 17 16:45:42 1996
***************
*** 369,375 ****
  			bn_recursize_mul(&(r[N1]),&(t[N2]),
  				&(t[N0]),&(t[N1]),half);
  			bn_sub_words(&(r[N2]),&(r[N2]),&(t[N0]),half);
! 			carry=-1;
  			break;
  		case -2:
  			bn_sub_words(&(t[N0]),&(a[N1]),&(a[N0]),half);
--- 369,375 ----
  			bn_recursize_mul(&(r[N1]),&(t[N2]),
  				&(t[N0]),&(t[N1]),half);
  			bn_sub_words(&(r[N2]),&(r[N2]),&(t[N0]),half);
! 			carry= -1;
  			break;
  		case -2:
  			bn_sub_words(&(t[N0]),&(a[N1]),&(a[N0]),half);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/buffer/bss_mem.c	Fri Jul 12 17:19:13 1996
--- ./crypto/buffer/bss_mem.c	Tue Jul 23 19:47:30 1996
***************
*** 118,124 ****
  char *out;
  int outl;
  	{
! 	int ret=-1;
  	BUF_MEM *bm;
  	int i;
  	char *from,*to;
--- 118,124 ----
  char *out;
  int outl;
  	{
! 	int ret= -1;
  	BUF_MEM *bm;
  	int i;
  	char *from,*to;
***************
*** 139,145 ****
  	else if (bm->length == 0)
  		{
  		b->flags|=(BIO_FLAGS_READ|BIO_FLAGS_SHOULD_RETRY);
! 		ret=-1;
  		}
  	return(ret);
  	}
--- 139,145 ----
  	else if (bm->length == 0)
  		{
  		b->flags|=(BIO_FLAGS_READ|BIO_FLAGS_SHOULD_RETRY);
! 		ret= -1;
  		}
  	return(ret);
  	}
***************
*** 149,155 ****
  char *in;
  int inl;
  	{
! 	int ret=-1;
  	int blen;
  	BUF_MEM *bm;
  
--- 149,155 ----
  char *in;
  int inl;
  	{
! 	int ret= -1;
  	int blen;
  	BUF_MEM *bm;
  
***************
*** 235,241 ****
  int size;
  	{
  	int i,j;
! 	int ret=-1;
  	char *p;
  	BUF_MEM *bm=(BUF_MEM *)bp->ptr;
  
--- 235,241 ----
  int size;
  	{
  	int i,j;
! 	int ret= -1;
  	char *p;
  	BUF_MEM *bm=(BUF_MEM *)bp->ptr;
  
***************
*** 243,249 ****
  	if (j <= 0) return(0);
  	p=bm->data;
  	for (i=0; i<j; i++)
! 		if (p[i] == '\n') break;
  	/* i is the max to copy */
  	if ((size-1) < i) i=size-1;
  	i=mem_read(bp,buf,i);
--- 243,255 ----
  	if (j <= 0) return(0);
  	p=bm->data;
  	for (i=0; i<j; i++)
! 		{
! 		if (p[i] == '\n')
! 			{
! 			i++;
! 			break;
! 			}
! 		}
  	/* i is the max to copy */
  	if ((size-1) < i) i=size-1;
  	i=mem_read(bp,buf,i);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/buffer/buf_prt.c	Wed Jul 10 09:46:58 1996
--- ./crypto/buffer/buf_prt.c	Wed Jul 17 16:45:43 1996
***************
*** 57,63 ****
  int size;
  	{
  	int i,j;
! 	int ret=-1;
  	char *p;
  
  	switch (bp->type)
--- 57,63 ----
  int size;
  	{
  	int i,j;
! 	int ret= -1;
  	char *p;
  
  	switch (bp->type)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/conf/conf.c	Fri Jul 12 09:28:26 1996
--- ./crypto/conf/conf.c	Wed Jul 24 07:56:40 1996
***************
*** 84,90 ****
  
  #define scan_esc(p)	((*(++p) == '\0')?(p):(++p))
  
! char *CONF_version="CONF part of SSLeay 0.6.1 12-Jul-1996";
  
  LHASH *CONF_load(h,file,line)
  LHASH *h;
--- 84,90 ----
  
  #define scan_esc(p)	((*(++p) == '\0')?(p):(++p))
  
! char *CONF_version="CONF part of SSLeay 0.6.2 24-Jul-1996";
  
  LHASH *CONF_load(h,file,line)
  LHASH *h;
***************
*** 164,170 ****
  		/* check for line continuation */
  		if (bufnum >= 2)
  			{
! 			p=&(buff->data[bufnum-1]);
  			while ((p != buff->data) && (IS_WS(*p)))
  				p--;
  			if (	((p >= buff->data) && (*p == '\\')) &&
--- 164,170 ----
  		/* check for line continuation */
  		if (bufnum >= 2)
  			{
! 			p= &(buff->data[bufnum-1]);
  			while ((p != buff->data) && (IS_WS(*p)))
  				p--;
  			if (	((p >= buff->data) && (*p == '\\')) &&
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/cryptlib.c	Fri Jul 12 09:28:29 1996
--- ./crypto/cryptlib.c	Wed Jul 24 19:11:24 1996
***************
*** 64,74 ****
  #include "crypto.h"
  #include "date.h"
  
  char *SSLeay_version(t)
  int t;
  	{
  	if (t == SSLEAY_VERSION)
! 		return("SSLeay 0.6.1 12-Jul-1996");
  	if (t == SSLEAY_OPTIONS)
  		{
  		static char buf[100];
--- 64,95 ----
  #include "crypto.h"
  #include "date.h"
  
+ /* real #defines in crypto.h, keep these upto date */
+ static char* lock_names[CRYPTO_NUM_LOCKS] =
+ 	{
+ 	"<<ERROR>>",
+ 	"err",
+ 	"err_hash",
+ 	"x509",
+ 	"x509_info",
+ 	"x509_pkey",
+ 	"x509_crl",
+ 	"x509_req",
+ 	"dsa",
+ 	"rsa",
+ 	"evp_pkey",
+ 	"certificate_ctx",
+ 	"ssl_ctx",
+ 	"ssl_cert",
+ 	"ssl_session",
+ 	"ssl",
+ 	};
+ 
  char *SSLeay_version(t)
  int t;
  	{
  	if (t == SSLEAY_VERSION)
! 		return("SSLeay 0.6.2 24-Jul-1996");
  	if (t == SSLEAY_OPTIONS)
  		{
  		static char buf[100];
***************
*** 115,138 ****
  	}
  
  #ifndef NOPROTO
! static void (MS_FAR *locking_callback)(int mode,int type)=NULL;
  static unsigned long (MS_FAR *id_callback)(void)=NULL;
  #else
  static void (MS_FAR *locking_callback)()=NULL;
  static unsigned long (MS_FAR *id_callback)()=NULL;
  #endif
  
! void (*CRYPTO_get_locking_callback())(P_I_I)
  	{
  	return(locking_callback);
  	}
  
  void CRYPTO_set_locking_callback(func)
! void (*func)(P_I_I);
  	{
  	locking_callback=func;
  	}
  
  unsigned long (*CRYPTO_get_id_callback(P_V))(P_V)
  	{
  	return(id_callback);
--- 136,174 ----
  	}
  
  #ifndef NOPROTO
! static void (MS_FAR *locking_callback)(int mode,int type,
! 	char *file,int line)=NULL;
! static int (MS_FAR *add_lock_callback)(int *pointer,int amount,
! 	int type,char *file,int line)=NULL;
  static unsigned long (MS_FAR *id_callback)(void)=NULL;
  #else
  static void (MS_FAR *locking_callback)()=NULL;
+ static int (MS_FAR *add_lock_callback)()=NULL;
  static unsigned long (MS_FAR *id_callback)()=NULL;
  #endif
  
! void (*CRYPTO_get_locking_callback())(P_I_I_P_I)
  	{
  	return(locking_callback);
  	}
  
+ int (*CRYPTO_get_add_lock_callback())(P_IP_I_I_P_I)
+ 	{
+ 	return(add_lock_callback);
+ 	}
+ 
  void CRYPTO_set_locking_callback(func)
! void (*func)(P_I_I_P_I);
  	{
  	locking_callback=func;
  	}
  
+ void CRYPTO_set_add_lock_callback(func)
+ int (*func)(P_IP_I_I_P_I);
+ 	{
+ 	add_lock_callback=func;
+ 	}
+ 
  unsigned long (*CRYPTO_get_id_callback(P_V))(P_V)
  	{
  	return(id_callback);
***************
*** 165,176 ****
  	return(ret);
  	}
  
! void CRYPTO_lock(mode,type)
  int mode;
  int type;
  	{
! /*	fprintf(stderr,"mode= %02X  type= %d\n",mode,type);*/
  
  	if (locking_callback != NULL)
! 		locking_callback(mode,type);
  	}
--- 201,286 ----
  	return(ret);
  	}
  
! void CRYPTO_lock(mode,type,file,line)
  int mode;
  int type;
+ char *file;
+ int line;
  	{
! #ifdef LOCK_DEBUG
! 		{
! 		char *rw_text,*operation_text;
  
+ 		if (mode & CRYPTO_LOCK)
+ 			operation_text="lock  ";
+ 		else if (mode & CRYPTO_UNLOCK)
+ 			operation_text="unlock";
+ 		else
+ 			operation_text="ERROR ";
+ 
+ 		if (mode & CRYPTO_READ)
+ 			rw_text="r";
+ 		else if (mode & CRYPTO_WRITE)
+ 			rw_text="w";
+ 		else
+ 			rw_text="ERROR";
+ 
+ 		fprintf(stderr,"lock:%08lx:(%s)%s %-18s %s:%d\n",
+ 			CRYPTO_thread_id(), rw_text, operation_text,
+ 			CRYPTO_get_lock_name(type), file, line);
+ 		}
+ #endif
  	if (locking_callback != NULL)
! 		locking_callback(mode,type,file,line);
! 	}
! 
! int CRYPTO_add_lock(pointer,amount,type,file,line)
! int *pointer;
! int amount;
! int type;
! char *file;
! int line;
! 	{
! 	int ret;
! 
! 	if (add_lock_callback != NULL)
! 		{
! #ifdef LOCK_DEBUG
! 		int before= *pointer;
! #endif
! 
! 		ret=add_lock_callback(pointer,amount,type,file,line);
! #ifdef LOCK_DEBUG
! 		fprintf(stderr,"ladd:%08lx:%2d+%2d->%2d %-18s %s:%d\n",
! 			CRYPTO_thread_id(),
! 			before,amount,ret,
! 			CRYPTO_get_lock_name(type),
! 			file,line);
! #endif
! 		*pointer=ret;
! 		}
! 	else
! 		{
! 		CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type,file,line);
! 
! 		ret= *pointer+amount;
! #ifdef LOCK_DEBUG
! 		fprintf(stderr,"ladd:%08lx:%2d+%2d->%2d %-18s %s:%d\n",
! 			CRYPTO_thread_id(),
! 			*pointer,amount,ret,
! 			CRYPTO_get_lock_name(type),
! 			file,line);
! #endif
! 		*pointer=ret;
! 		CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_WRITE,type,file,line);
! 		}
! 	return(ret);
! 	}
! 
! char *CRYPTO_get_lock_name(type)
! int type;
! 	{
! 	if ((type < 0) || (type >= CRYPTO_NUM_LOCKS))
! 		return("ERROR");
! 	return(lock_names[type]);
  	}
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/crypto.c	Wed Jul 10 09:46:21 1996
--- ./crypto/crypto.c	Thu Jul 25 08:48:20 1996
***************
*** 112,117 ****
--- 112,118 ----
  #include "asn1/a_hdr.c"
  #include "asn1/a_i2d_fp.c"
  #include "asn1/a_int.c"
+ #include "asn1/a_bool.c"
  #include "asn1/a_object.c"
  #include "asn1/a_octet.c"
  #include "asn1/a_print.c"
***************
*** 152,157 ****
--- 153,159 ----
  #include "asn1/t_x509.c"
  #include "asn1/x_algor.c"
  #include "asn1/x_attrib.c"
+ #include "asn1/x_exten.c"
  #include "asn1/x_cinf.c"
  #include "asn1/x_crl.c"
  #include "asn1/x_info.c"
***************
*** 208,213 ****
--- 210,216 ----
  #include "des/enc_writ.c"
  #include "des/fcrypt.c"
  #include "des/ncbc_enc.c"
+ #include "des/xcbc_enc.c"
  #include "des/ofb64ede.c"
  #include "des/ofb64enc.c"
  #include "des/ofb_enc.c"
***************
*** 234,239 ****
--- 237,243 ----
  #include "evp/digest.c"
  #include "evp/e_cbc_3d.c"
  #include "evp/e_cbc_d.c"
+ #include "evp/e_xcbc_d.c"
  #include "evp/e_cbc_i.c"
  #include "evp/e_cbc_r2.c"
  #include "evp/e_cfb_3d.c"
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/crypto.h	Fri Jul 12 09:18:05 1996
--- ./crypto/crypto.h	Wed Jul 24 07:58:09 1996
***************
*** 54,60 ****
  
  /* This is more to be used to check the correct DLL is being used
   * in the MS world. */
! #define SSLEAY_VERSION_NUMBER	0x0610	/* Version 0.5.1c would be 0513 */
  
  #define SSLEAY_VERSION		0
  #define SSLEAY_OPTIONS		1
--- 54,60 ----
  
  /* This is more to be used to check the correct DLL is being used
   * in the MS world. */
! #define SSLEAY_VERSION_NUMBER	0x0620	/* Version 0.5.1c would be 0513 */
  
  #define SSLEAY_VERSION		0
  #define SSLEAY_OPTIONS		1
***************
*** 61,66 ****
--- 61,70 ----
  #define SSLEAY_CFLAGS		2
  #define SSLEAY_BUILT_ON		3
  
+ /* When changing the CRYPTO_LOCK_* list, be sure to maintin the text lock
+  * names in cryptlib.c
+  */
+ 
  #define	CRYPTO_LOCK_ERR			1
  #define	CRYPTO_LOCK_ERR_HASH		2
  #define	CRYPTO_LOCK_X509		3
***************
*** 86,95 ****
  /* The following stuff is not being used, it was not finished for
   * SSLeay 0.6.0 */
  #ifndef CRYPTO_w_lock
! #define CRYPTO_w_lock(type)	CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type)
! #define CRYPTO_w_unlock(type)	CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_WRITE,type)
! #define CRYPTO_r_lock(type)	CRYPTO_lock(CRYPTO_LOCK|CRYPTO_READ,type)
! #define CRYPTO_r_unlock(type)	CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_READ,type)
  #endif
  
  #ifndef NOPROTO
--- 90,106 ----
  /* The following stuff is not being used, it was not finished for
   * SSLeay 0.6.0 */
  #ifndef CRYPTO_w_lock
! #define CRYPTO_w_lock(type)	\
! 	CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)
! #define CRYPTO_w_unlock(type)	\
! 	CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)
! #define CRYPTO_r_lock(type)	\
! 	CRYPTO_lock(CRYPTO_LOCK|CRYPTO_READ,type,__FILE__,__LINE__)
! #define CRYPTO_r_unlock(type)	\
! 	CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_READ,type,__FILE__,__LINE__)
! #define CRYPTO_add(addr,amount,type)	\
! 	CRYPTO_add_lock(addr,amount,type,__FILE__,__LINE__)
! 
  #endif
  
  #ifndef NOPROTO
***************
*** 97,108 ****
  char *SSLeay_version(int type);
  unsigned long SSLeay(void);
  
! void CRYPTO_lock(int mode, int type);
! void CRYPTO_set_locking_callback(void (*func)(int mode,int type));
! void (*CRYPTO_get_locking_callback(void))(int mode,int type);
  void CRYPTO_set_id_callback(unsigned long (*func)(void));
  unsigned long (*CRYPTO_get_id_callback(void))(void);
  unsigned long CRYPTO_thread_id(void);
  
  #else
  
--- 108,127 ----
  char *SSLeay_version(int type);
  unsigned long SSLeay(void);
  
! void CRYPTO_lock(int mode, int type,char *file,int line);
! void CRYPTO_set_locking_callback(void (*func)(int mode,int type,char *file,
! 		int line));
! void (*CRYPTO_get_locking_callback(void))(int mode,int type,char *file,
! 		int line);
! void CRYPTO_set_add_lock_callback(int (*func)(int *num,int mount,
! 		int type,char *file, int line));
! int (*CRYPTO_get_add_lock_callback(void))(int *num,int mount,
! 		int type,char *file,int line);
  void CRYPTO_set_id_callback(unsigned long (*func)(void));
  unsigned long (*CRYPTO_get_id_callback(void))(void);
  unsigned long CRYPTO_thread_id(void);
+ char *CRYPTO_get_lock_name(int type);
+ int CRYPTO_add_lock(int *pointer,int amount,int type, char *file,int line);
  
  #else
  
***************
*** 112,120 ****
--- 131,143 ----
  void CRYPTO_lock();
  void CRYPTO_set_locking_callback();
  void (*CRYPTO_get_locking_callback())();
+ void CRYPTO_set_add_lock_callback();
+ int (*CRYPTO_get_add_lock_callback())();
  void CRYPTO_set_id_callback();
  unsigned long (*CRYPTO_get_id_callback())();
  unsigned long CRYPTO_thread_id();
+ char *CRYPTO_get_lock_name();
+ int CRYPTO_add_lock();
  
  #endif
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/date.h	Fri Jul 12 12:35:05 1996
--- ./crypto/date.h	Thu Jul 25 16:20:08 1996
***************
*** 1 ****
! #define DATE	"Fri Jul 12 12:35:05 EST 1996"
--- 1 ----
! #define DATE	"Thu Jul 25 16:20:08 EST 1996"
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/cfb64ede.c	Wed Jul 10 09:47:02 1996
--- ./crypto/des/cfb64ede.c	Wed Jul 17 16:45:44 1996
***************
*** 63,69 ****
  	{
  	register DES_LONG v0,v1;
  	register long l=length;
! 	register int n=*num;
  	DES_LONG ti[2];
  	unsigned char *iv,c,cc;
  
--- 63,69 ----
  	{
  	register DES_LONG v0,v1;
  	register long l=length;
! 	register int n= *num;
  	DES_LONG ti[2];
  	unsigned char *iv,c,cc;
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/cfb64enc.c	Wed Jul 10 09:47:02 1996
--- ./crypto/des/cfb64enc.c	Wed Jul 17 16:45:44 1996
***************
*** 63,69 ****
  	{
  	register DES_LONG v0,v1;
  	register long l=length;
! 	register int n=*num;
  	DES_LONG ti[2];
  	unsigned char *iv,c,cc;
  
--- 63,69 ----
  	{
  	register DES_LONG v0,v1;
  	register long l=length;
! 	register int n= *num;
  	DES_LONG ti[2];
  	unsigned char *iv,c,cc;
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/des.h	Fri Jul 12 17:21:04 1996
--- ./crypto/des/des.h	Thu Jul 25 16:20:03 1996
***************
*** 110,115 ****
--- 110,116 ----
  #define ecb_encrypt des_ecb_encrypt
  #define cbc_encrypt des_cbc_encrypt
  #define ncbc_encrypt des_ncbc_encrypt
+ #define xcbc_encrypt des_xcbc_encrypt
  #define cbc_cksum des_cbc_cksum
  #define quad_cksum des_quad_cksum
  
***************
*** 138,143 ****
--- 139,147 ----
  	des_key_schedule schedule,des_cblock *ivec,int enc);
  void des_ncbc_encrypt(des_cblock *input,des_cblock *output,long length,
  	des_key_schedule schedule,des_cblock *ivec,int enc);
+ void des_xcbc_encrypt(des_cblock *input,des_cblock *output,long length,
+ 	des_key_schedule schedule,des_cblock *ivec,
+ 	des_cblock *inw,des_cblock *outw,int enc);
  void des_3cbc_encrypt(des_cblock *input,des_cblock *output,long length,
  	des_key_schedule sk1,des_key_schedule sk2,
  	des_cblock *ivec1,des_cblock *ivec2,int enc);
***************
*** 213,218 ****
--- 217,223 ----
  DES_LONG des_cbc_cksum();
  void des_cbc_encrypt();
  void des_ncbc_encrypt();
+ void des_xcbc_encrypt();
  void des_3cbc_encrypt();
  void des_cfb_encrypt();
  void des_ede3_cfb64_encrypt();
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/des.org	Wed Jul 10 09:47:02 1996
--- ./crypto/des/des.org	Thu Jul 25 08:24:30 1996
***************
*** 110,115 ****
--- 110,116 ----
  #define ecb_encrypt des_ecb_encrypt
  #define cbc_encrypt des_cbc_encrypt
  #define ncbc_encrypt des_ncbc_encrypt
+ #define xcbc_encrypt des_xcbc_encrypt
  #define cbc_cksum des_cbc_cksum
  #define quad_cksum des_quad_cksum
  
***************
*** 138,143 ****
--- 139,147 ----
  	des_key_schedule schedule,des_cblock *ivec,int enc);
  void des_ncbc_encrypt(des_cblock *input,des_cblock *output,long length,
  	des_key_schedule schedule,des_cblock *ivec,int enc);
+ void des_xcbc_encrypt(des_cblock *input,des_cblock *output,long length,
+ 	des_key_schedule schedule,des_cblock *ivec,
+ 	des_cblock *inw,des_cblock *outw,int enc);
  void des_3cbc_encrypt(des_cblock *input,des_cblock *output,long length,
  	des_key_schedule sk1,des_key_schedule sk2,
  	des_cblock *ivec1,des_cblock *ivec2,int enc);
***************
*** 213,218 ****
--- 217,223 ----
  DES_LONG des_cbc_cksum();
  void des_cbc_encrypt();
  void des_ncbc_encrypt();
+ void des_xcbc_encrypt();
  void des_3cbc_encrypt();
  void des_cfb_encrypt();
  void des_ede3_cfb64_encrypt();
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/destest.c	Fri Jul 12 14:00:14 1996
--- ./crypto/des/destest.c	Thu Jul 25 08:37:47 1996
***************
*** 219,224 ****
--- 219,231 ----
  	0x46,0x8e,0x91,0x15,0x78,0x88,0xba,0x68,
  	0x1d,0x26,0x93,0x97,0xf7,0xfe,0x62,0xb4};
  
+ static unsigned char xcbc_ok[32]={
+ 	0x86,0x74,0x81,0x0D,0x61,0xA4,0xA5,0x48,
+ 	0xB9,0x93,0x03,0xE1,0xB8,0xBB,0xBD,0xBD,
+ 	0x64,0x30,0x0B,0xB9,0x06,0x65,0x81,0x76,
+ 	0x04,0x1D,0x77,0x62,0x17,0xCA,0x2B,0xD2,
+ 	};
+ 
  static unsigned char cbc3_ok[32]={
  	0x3F,0xE3,0x01,0xC9,0x62,0xAC,0x01,0xD0,
  	0x22,0x13,0x76,0x3C,0x1C,0xBD,0x4C,0xDC,
***************
*** 386,391 ****
--- 393,426 ----
  	if (memcmp(cbc_in,cbc_data,32) != 0)
  		{
  		printf("cbc_encrypt decrypt error\n");
+ 		err=1;
+ 		}
+ 
+ 	printf("Doing desx cbc\n");
+ 	if ((j=des_key_sched((C_Block *)cbc_key,ks)) != 0)
+ 		{
+ 		printf("Key error %d\n",j);
+ 		err=1;
+ 		}
+ 	memset(cbc_out,0,40);
+ 	memset(cbc_in,0,40);
+ 	memcpy(iv3,cbc_iv,sizeof(cbc_iv));
+ 	des_xcbc_encrypt((C_Block *)cbc_data,(C_Block *)cbc_out,
+ 		(long)strlen((char *)cbc_data)+1,ks,
+ 		(C_Block *)iv3,
+ 		(C_Block *)cbc2_key, (C_Block *)cbc3_key, DES_ENCRYPT);
+ 	if (memcmp(cbc_out,xcbc_ok,32) != 0)
+ 		{
+ 		printf("des_xcbc_encrypt encrypt error\n");
+ 		}
+ 	memcpy(iv3,cbc_iv,sizeof(cbc_iv));
+ 	des_xcbc_encrypt((C_Block *)cbc_out,(C_Block *)cbc_in,
+ 		(long)strlen((char *)cbc_data)+1,ks,
+ 		(C_Block *)iv3,
+ 		(C_Block *)cbc2_key, (C_Block *)cbc3_key, DES_DECRYPT);
+ 	if (memcmp(cbc_in,cbc_data,32) != 0)
+ 		{
+ 		printf("des_xcbc_encrypt decrypt error\n");
  		err=1;
  		}
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/Makefile.ssl	Fri Jul 12 17:21:22 1996
--- ./crypto/des/Makefile.ssl	Thu Jul 25 16:06:23 1996
***************
*** 23,28 ****
--- 23,29 ----
  	ecb3_enc.c ecb_enc.c  ede_enc.c  enc_read.c enc_writ.c \
  	fcrypt.c   ncbc_enc.c ofb64enc.c ofb_enc.c  pcbc_enc.c \
  	qud_cksm.c rand_key.c read_pwd.c rpc_enc.c  set_key.c  \
+ 	xcbc_enc.c \
  	str2key.c  cfb64ede.c ofb64ede.c supp.c
  
  LIBOBJ= set_key.o  ecb_enc.o  ede_enc.o  cbc_enc.o  cbc3_enc.o \
***************
*** 29,34 ****
--- 30,36 ----
  	ecb3_enc.o cfb64enc.o cfb64ede.o cfb_enc.o  ofb64ede.o \
  	enc_read.o enc_writ.o fcrypt.o   ncbc_enc.o ofb64enc.o \
  	ofb_enc.o  str2key.o  pcbc_enc.o qud_cksm.o rand_key.o \
+ 	xcbc_enc.o \
  	read_pwd.o rpc_enc.o  cbc_cksm.o supp.o
  
  SRC= $(LIBSRC)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/ecb_enc.c	Fri Jul 12 09:28:26 1996
--- ./crypto/des/ecb_enc.c	Wed Jul 24 07:56:40 1996
***************
*** 49,55 ****
  #include "spr.h"
  
  char *libdes_version="libdes v 3.24 - 20-Apr-1996 - eay";
! char *DES_version="DES part of SSLeay 0.6.1 12-Jul-1996";
  
  char *des_options()
  	{
--- 49,55 ----
  #include "spr.h"
  
  char *libdes_version="libdes v 3.24 - 20-Apr-1996 - eay";
! char *DES_version="DES part of SSLeay 0.6.2 24-Jul-1996";
  
  char *des_options()
  	{
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/new_rkey.c	Wed Jul 10 09:47:05 1996
--- ./crypto/des/new_rkey.c	Wed Jul 17 16:50:38 1996
***************
*** 160,167 ****
   *                                     to a truly nasty sequence using system
   *                                     supplied volatile variables.
   */
  void
! des_init_random_number_generator(key)
  	des_cblock *key;
  {
  	/* 64-bit structures */
--- 160,168 ----
   *                                     to a truly nasty sequence using system
   *                                     supplied volatile variables.
   */
+ /* Name shortened for VMS - there is a macro for the old name */
  void
! des_init_random_num_generator(key)
  	des_cblock *key;
  {
  	/* 64-bit structures */
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/ofb64ede.c	Wed Jul 10 09:47:05 1996
--- ./crypto/des/ofb64ede.c	Wed Jul 17 16:45:46 1996
***************
*** 60,66 ****
  int *num;
  	{
  	register DES_LONG v0,v1;
! 	register int n=*num;
  	register long l=length;
  	des_cblock d;
  	register char *dp;
--- 60,66 ----
  int *num;
  	{
  	register DES_LONG v0,v1;
! 	register int n= *num;
  	register long l=length;
  	des_cblock d;
  	register char *dp;
***************
*** 97,103 ****
  			l2c(v1,dp);
  			save++;
  			}
! 		*(out++)=*(in++)^d[n];
  		n=(n+1)&0x07;
  		}
  	if (save)
--- 97,103 ----
  			l2c(v1,dp);
  			save++;
  			}
! 		*(out++)= *(in++)^d[n];
  		n=(n+1)&0x07;
  		}
  	if (save)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/ofb64enc.c	Wed Jul 10 09:47:05 1996
--- ./crypto/des/ofb64enc.c	Wed Jul 17 16:45:46 1996
***************
*** 60,66 ****
  int *num;
  	{
  	register DES_LONG v0,v1,t;
! 	register int n=*num;
  	register long l=length;
  	des_cblock d;
  	register char *dp;
--- 60,66 ----
  int *num;
  	{
  	register DES_LONG v0,v1,t;
! 	register int n= *num;
  	register long l=length;
  	des_cblock d;
  	register char *dp;
***************
*** 86,92 ****
  			t=ti[1]; l2c(t,dp);
  			save++;
  			}
! 		*(out++)=*(in++)^d[n];
  		n=(n+1)&0x07;
  		}
  	if (save)
--- 86,92 ----
  			t=ti[1]; l2c(t,dp);
  			save++;
  			}
! 		*(out++)= *(in++)^d[n];
  		n=(n+1)&0x07;
  		}
  	if (save)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/read_pwd.c	Wed Jul 10 09:47:06 1996
--- ./crypto/des/read_pwd.c	Wed Jul 17 16:53:06 1996
***************
*** 105,111 ****
  #define TTY_set(tty,data)	ioctl(tty,TIOCSETP,data)
  #endif
  
! #if !defined(_LIBC) && !defined(MSDOS)
  #include <sys/ioctl.h>
  #endif
  
--- 105,111 ----
  #define TTY_set(tty,data)	ioctl(tty,TIOCSETP,data)
  #endif
  
! #if !defined(_LIBC) && !defined(MSDOS) && !defined(VMS)
  #include <sys/ioctl.h>
  #endif
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/des/VERSION	Wed Jul 10 09:47:01 1996
--- ./crypto/des/VERSION	Thu Jul 25 10:28:35 1996
***************
*** 1,7 ****
! Version 3.24 20/04/95
  	The DES_PTR macro option checked and used by SSLeay configuration
  
! Version 3.23 11/04/95
  	Added DES_LONG.  If defined to 'unsigned int' on the DEC Alpha,
  	it gives a %20 speedup :-)
  	Fixed the problem with des.pl under perl5.  The patches were
--- 1,15 ----
! Version 3.25 17/07/96
! 	des_init_random_number_generator() shortened due to VMS linker
! 	limits.
! 	Added RSA's DESX cbc mode.  It is a form of cbc encryption, with 2
! 	8 byte quantites xored before and after encryption.
! 	des_xcbc_encryption() - the name is funny to preserve the des_
! 	prefix on all functions.
! 
! Version 3.24 20/04/96
  	The DES_PTR macro option checked and used by SSLeay configuration
  
! Version 3.23 11/04/96
  	Added DES_LONG.  If defined to 'unsigned int' on the DEC Alpha,
  	it gives a %20 speedup :-)
  	Fixed the problem with des.pl under perl5.  The patches were
*** /dev/null	Thu Jul 25 17:44:26 1996
--- ./crypto/des/xcbc_enc.c	Thu Jul 25 11:05:06 1996
***************
*** 0 ****
--- 1,132 ----
+ /* crypto/des/xcbc_enc.c */
+ /* Copyright (C) 1995-1996 Eric Young (eay@mincom.oz.au)
+  * All rights reserved.
+  * 
+  * This file is part of an SSL implementation written
+  * by Eric Young (eay@mincom.oz.au).
+  * The implementation was written so as to conform with Netscapes SSL
+  * specification.  This library and applications are
+  * FREE FOR COMMERCIAL AND NON-COMMERCIAL USE
+  * as long as the following conditions are aheared to.
+  * 
+  * Copyright remains Eric Young's, and as such any Copyright notices in
+  * the code are not to be removed.  If this code is used in a product,
+  * Eric Young should be given attribution as the author of the parts used.
+  * This can be in the form of a textual message at program startup or
+  * in documentation (online or textual) provided with the package.
+  * 
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+  * are met:
+  * 1. Redistributions of source code must retain the copyright
+  *    notice, this list of conditions and the following disclaimer.
+  * 2. Redistributions in binary form must reproduce the above copyright
+  *    notice, this list of conditions and the following disclaimer in the
+  *    documentation and/or other materials provided with the distribution.
+  * 3. All advertising materials mentioning features or use of this software
+  *    must display the following acknowledgement:
+  *    This product includes software developed by Eric Young (eay@mincom.oz.au)
+  * 
+  * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
+  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+  * SUCH DAMAGE.
+  * 
+  * The licence and distribution terms for any publically available version or
+  * derivative of this code cannot be changed.  i.e. this code cannot simply be
+  * copied and put under another distribution licence
+  * [including the GNU Public Licence.]
+  */
+ 
+ #include "des_locl.h"
+ 
+ /* RSA's DESX */
+ void des_xcbc_encrypt(input, output, length, schedule, ivec, inw,outw,encrypt)
+ des_cblock (*input);
+ des_cblock (*output);
+ long length;
+ des_key_schedule schedule;
+ des_cblock (*ivec);
+ des_cblock (*inw);
+ des_cblock (*outw);
+ int encrypt;
+ 	{
+ 	register DES_LONG tin0,tin1;
+ 	register DES_LONG tout0,tout1,xor0,xor1;
+ 	register DES_LONG inW0,inW1,outW0,outW1;
+ 	register unsigned char *in,*out;
+ 	register long l=length;
+ 	DES_LONG tin[2];
+ 	unsigned char *iv;
+ 
+ 	in=(unsigned char *)inw;
+ 	c2l(in,inW0);
+ 	c2l(in,inW1);
+ 	in=(unsigned char *)outw;
+ 	c2l(in,outW0);
+ 	c2l(in,outW1);
+ 
+ 	in=(unsigned char *)input;
+ 	out=(unsigned char *)output;
+ 	iv=(unsigned char *)ivec;
+ 
+ 	if (encrypt)
+ 		{
+ 		c2l(iv,tout0);
+ 		c2l(iv,tout1);
+ 		for (; l>0; l-=8)
+ 			{
+ 			if (l >= 8)
+ 				{
+ 				c2l(in,tin0);
+ 				c2l(in,tin1);
+ 				}
+ 			else
+ 				c2ln(in,tin0,tin1,l);
+ 			tin0^=tout0^inW0; tin[0]=tin0;
+ 			tin1^=tout1^inW1; tin[1]=tin1;
+ 			des_encrypt((DES_LONG *)tin,schedule,DES_ENCRYPT);
+ 			tout0=tin[0]^outW0; l2c(tout0,out);
+ 			tout1=tin[1]^outW1; l2c(tout1,out);
+ 			}
+ 		iv=(unsigned char *)ivec;
+ 		l2c(tout0,iv);
+ 		l2c(tout1,iv);
+ 		}
+ 	else
+ 		{
+ 		c2l(iv,xor0);
+ 		c2l(iv,xor1);
+ 		for (; l>0; l-=8)
+ 			{
+ 			c2l(in,tin0); tin[0]=tin0^outW0;
+ 			c2l(in,tin1); tin[1]=tin1^outW1;
+ 			des_encrypt((DES_LONG *)tin,schedule,DES_DECRYPT);
+ 			tout0=tin[0]^xor0^inW0;
+ 			tout1=tin[1]^xor1^inW1;
+ 			if (l >= 8)
+ 				{
+ 				l2c(tout0,out);
+ 				l2c(tout1,out);
+ 				}
+ 			else
+ 				l2cn(tout0,tout1,out,l);
+ 			xor0=tin0;
+ 			xor1=tin1;
+ 			}
+ 		iv=(unsigned char *)ivec;
+ 		l2c(xor0,iv);
+ 		l2c(xor1,iv);
+ 		}
+ 	tin0=tin1=tout0=tout1=xor0=xor1=0;
+ 	inW0=inW1=outW0=outW1=0;
+ 	tin[0]=tin[1]=0;
+ 	}
+ 
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/dh/dh_gen.c	Wed Jul 10 09:47:08 1996
--- ./crypto/dh/dh_gen.c	Wed Jul 17 16:45:48 1996
***************
*** 79,85 ****
  	{
  	BIGNUM *p=NULL,*t1,*t2;
  	DH *ret=NULL;
! 	int g,ok=-1;
  	BN_CTX *ctx=NULL;
  
  	ret=DH_new();
--- 79,85 ----
  	{
  	BIGNUM *p=NULL,*t1,*t2;
  	DH *ret=NULL;
! 	int g,ok= -1;
  	BN_CTX *ctx=NULL;
  
  	ret=DH_new();
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/dh/dh_key.c	Wed Jul 10 09:47:08 1996
--- ./crypto/dh/dh_key.c	Wed Jul 17 16:45:48 1996
***************
*** 107,113 ****
  	{
  	BN_CTX *ctx;
  	BIGNUM *tmp;
! 	int ret=-1;
  
  	ctx=BN_CTX_new();
  	if (ctx == NULL) goto err;
--- 107,113 ----
  	{
  	BN_CTX *ctx;
  	BIGNUM *tmp;
! 	int ret= -1;
  
  	ctx=BN_CTX_new();
  	if (ctx == NULL) goto err;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/dh/dh_lib.c	Fri Jul 12 09:28:27 1996
--- ./crypto/dh/dh_lib.c	Wed Jul 24 07:56:41 1996
***************
*** 50,56 ****
  #include "bn.h"
  #include "dh.h"
  
! char *DH_version="Diffie-Hellman part of SSLeay 0.6.1 12-Jul-1996";
  
  DH *DH_new()
  	{
--- 50,56 ----
  #include "bn.h"
  #include "dh.h"
  
! char *DH_version="Diffie-Hellman part of SSLeay 0.6.2 24-Jul-1996";
  
  DH *DH_new()
  	{
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/dsa/dsa_lib.c	Fri Jul 12 09:28:27 1996
--- ./crypto/dsa/dsa_lib.c	Wed Jul 24 07:56:41 1996
***************
*** 53,59 ****
  #include "dsa.h"
  #include "asn1.h"
  
! char *DSA_version="\0DSA part of SSLeay 0.6.1 12-Jul-1996";
  
  DSA *DSA_new()
  	{
--- 53,59 ----
  #include "dsa.h"
  #include "asn1.h"
  
! char *DSA_version="\0DSA part of SSLeay 0.6.2 24-Jul-1996";
  
  DSA *DSA_new()
  	{
***************
*** 82,96 ****
  void DSA_free(r)
  DSA *r;
  	{
  	if (r == NULL) return;
  
! 	CRYPTO_w_lock(CRYPTO_LOCK_DSA);
! 	if (--r->references > 0)
! 		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_DSA);
! 		return;
! 		}
! 	CRYPTO_w_unlock(CRYPTO_LOCK_DSA);
  
  	if (r->x != NULL) BN_clear_free(r->x);
  	if (r->y != NULL) BN_clear_free(r->y);
--- 82,93 ----
  void DSA_free(r)
  DSA *r;
  	{
+ 	int i;
+ 
  	if (r == NULL) return;
  
! 	i=CRYPTO_add(&r->references,-1,CRYPTO_LOCK_DSA);
! 	if (i > 0) return;
  
  	if (r->x != NULL) BN_clear_free(r->x);
  	if (r->y != NULL) BN_clear_free(r->y);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/error/err.c	Wed Jul 10 09:47:11 1996
--- ./crypto/error/err.c	Wed Jul 24 15:42:38 1996
***************
*** 124,138 ****
  	if (init)
  		{
  		CRYPTO_w_lock(CRYPTO_LOCK_ERR);
! 		if(!init)
  			{
  			CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  			return;
  			}
  		CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  
- 
- 		init=0;
  		ERR_load_strings(0,ERR_str_libraries);
  		ERR_load_strings(0,ERR_str_reasons);
  		ERR_load_strings(ERR_LIB_SYS,ERR_str_functs);
--- 124,137 ----
  	if (init)
  		{
  		CRYPTO_w_lock(CRYPTO_LOCK_ERR);
! 		if (init == 0)
  			{
  			CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  			return;
  			}
+ 		init=0;
  		CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  
  		ERR_load_strings(0,ERR_str_libraries);
  		ERR_load_strings(0,ERR_str_reasons);
  		ERR_load_strings(ERR_LIB_SYS,ERR_str_functs);
***************
*** 143,157 ****
  int lib;
  ERR_STRING_DATA *str;
  	{
- 	CRYPTO_w_lock(CRYPTO_LOCK_ERR_HASH);
- 
  	if (error_hash == NULL)
  		{
  		error_hash=lh_new(err_hash,err_cmp);
! 		if (error_hash == NULL) return;
  		ERR_load_ERR_strings();
  		}
  
  	while (str->error)
  		{
  		str->error|=ERR_PACK(lib,0,0);
--- 142,162 ----
  int lib;
  ERR_STRING_DATA *str;
  	{
  	if (error_hash == NULL)
  		{
+ 		CRYPTO_w_lock(CRYPTO_LOCK_ERR_HASH);
  		error_hash=lh_new(err_hash,err_cmp);
! 		if (error_hash == NULL)
! 			{
! 			CRYPTO_w_unlock(CRYPTO_LOCK_ERR_HASH);
! 			return;
! 			}
! 		CRYPTO_w_unlock(CRYPTO_LOCK_ERR_HASH);
! 
  		ERR_load_ERR_strings();
  		}
  
+ 	CRYPTO_w_lock(CRYPTO_LOCK_ERR_HASH);
  	while (str->error)
  		{
  		str->error|=ERR_PACK(lib,0,0);
***************
*** 158,164 ****
  		lh_insert(error_hash,(char *)str);
  		str++;
  		}
- 
  	CRYPTO_w_unlock(CRYPTO_LOCK_ERR_HASH);
  	}
  
--- 163,168 ----
***************
*** 182,190 ****
  	{
  	ERR_STATE *es;
  
- 	CRYPTO_w_lock(CRYPTO_LOCK_ERR);
- 
  	es=ERR_get_state();
  	es->top=(es->top+1)%ERR_NUM_ERRORS;
  	if (es->top == es->bottom)
  		es->bottom=(es->bottom+1)%ERR_NUM_ERRORS;
--- 186,193 ----
  	{
  	ERR_STATE *es;
  
  	es=ERR_get_state();
+ 
  	es->top=(es->top+1)%ERR_NUM_ERRORS;
  	if (es->top == es->bottom)
  		es->bottom=(es->bottom+1)%ERR_NUM_ERRORS;
***************
*** 192,198 ****
  	es->err_file[es->top]=file;
  	es->err_line[es->top]=line;
  
- 	CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  	}
  
  void ERR_clear_error()
--- 195,200 ----
***************
*** 200,208 ****
  	int i;
  	ERR_STATE *es;
  
- 	CRYPTO_w_lock(CRYPTO_LOCK_ERR);
- 
  	es=ERR_get_state();
  	for (i=0; i<ERR_NUM_ERRORS; i++)
  		{
  		es->err_buffer[i]=0;
--- 202,209 ----
  	int i;
  	ERR_STATE *es;
  
  	es=ERR_get_state();
+ 
  	for (i=0; i<ERR_NUM_ERRORS; i++)
  		{
  		es->err_buffer[i]=0;
***************
*** 210,217 ****
  		es->err_line[i]= -1;
  		}
  	es->top=es->bottom=0;
- 
- 	CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  	}
  
  unsigned long ERR_peek_error()
--- 211,216 ----
***************
*** 219,232 ****
  	int i;
  	ERR_STATE *es;
  
! 	CRYPTO_r_lock(CRYPTO_LOCK_ERR);
! 
  	es=ERR_get_state();
  
  	if (es->bottom == es->top) return(0);
  	i=(es->bottom+1)%ERR_NUM_ERRORS;
  
- 	CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  
  	return(es->err_buffer[i]);
  	}
--- 218,230 ----
  	int i;
  	ERR_STATE *es;
  
! 	/* should be fine since only one thread should ever be playing
! 	 * with the value returned from this call */
  	es=ERR_get_state();
  
  	if (es->bottom == es->top) return(0);
  	i=(es->bottom+1)%ERR_NUM_ERRORS;
  
  
  	return(es->err_buffer[i]);
  	}
***************
*** 237,245 ****
  	unsigned long ret;
  	ERR_STATE *es;
  
- 	CRYPTO_w_lock(CRYPTO_LOCK_ERR);
- 
  	es=ERR_get_state();
  	if (es->bottom == es->top) return(0);
  	i=(es->bottom+1)%ERR_NUM_ERRORS;
  	es->bottom=i;
--- 235,242 ----
  	unsigned long ret;
  	ERR_STATE *es;
  
  	es=ERR_get_state();
+ 
  	if (es->bottom == es->top) return(0);
  	i=(es->bottom+1)%ERR_NUM_ERRORS;
  	es->bottom=i;
***************
*** 246,252 ****
  	ret=es->err_buffer[i];
  	es->err_buffer[i]=0;
  
- 	CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  
  	return(ret);
  	}
--- 243,248 ----
***************
*** 258,269 ****
  	int i=0;
  	ERR_STATE *es;
  
- 	CRYPTO_r_lock(CRYPTO_LOCK_ERR);
- 
  	es=ERR_get_state();
  	if (es->bottom == es->top)
  		{
- 		CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  		return(0);
  		}
  
--- 254,263 ----
  	int i=0;
  	ERR_STATE *es;
  
  	es=ERR_get_state();
+ 
  	if (es->bottom == es->top)
  		{
  		return(0);
  		}
  
***************
*** 271,278 ****
  	*file=es->err_file[i];
  	*line=es->err_line[i];
  
- 	CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
- 
  	return(es->err_buffer[i]);
  	}
  
--- 265,270 ----
***************
*** 284,297 ****
  	unsigned long ret;
  	ERR_STATE *es;
  
- 	CRYPTO_r_lock(CRYPTO_LOCK_ERR);
- 
  	es=ERR_get_state();
  	if (es->bottom == es->top)
- 		{
- 		CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  		return(0);
- 		}
  
  	i=(es->bottom+1)%ERR_NUM_ERRORS;
  	es->bottom=i;
--- 276,285 ----
  	unsigned long ret;
  	ERR_STATE *es;
  
  	es=ERR_get_state();
+ 
  	if (es->bottom == es->top)
  		return(0);
  
  	i=(es->bottom+1)%ERR_NUM_ERRORS;
  	es->bottom=i;
***************
*** 302,308 ****
  	es->err_file[i]="";
  	es->err_line[i]= -1;
  
- 	CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  	return(ret);
  	}
  
--- 290,295 ----
***************
*** 316,323 ****
  	unsigned long l,f,r;
  	int i;
  
- 	CRYPTO_r_lock(CRYPTO_LOCK_ERR);
- 
  	l=ERR_GET_LIB(e);
  	f=ERR_GET_FUNC(e);
  	r=ERR_GET_REASON(e);
--- 303,308 ----
***************
*** 342,349 ****
  		sprintf(&(ret[i]),":reason(%ld)",r);
  	else	sprintf(&(ret[i]),":%s",rs);
  
- 	CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
- 
  	return(ret);
  	}
  
--- 327,332 ----
***************
*** 497,504 ****
--- 480,489 ----
  	if (pid == 0)
  		pid=(unsigned long)CRYPTO_thread_id();
  	tmp.pid=pid;
+ 	CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  	p=(ERR_STATE *)lh_retrieve(thread_hash,(char *)&tmp);
  	if (p != NULL) free(p);
+ 	CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  	}
  
  ERR_STATE *ERR_get_state()
***************
*** 509,524 ****
--- 494,520 ----
  
  	pid=(unsigned long)CRYPTO_thread_id();
  
+ 	CRYPTO_r_lock(CRYPTO_LOCK_ERR);
  	if (thread_hash == NULL)
  		{
+ 		CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
+ 		CRYPTO_w_lock(CRYPTO_LOCK_ERR);
+ 		if (thread_hash == NULL)
+ 			{
  			thread_hash=lh_new(pid_hash,pid_cmp);
+ 			CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  			if (thread_hash == NULL) return(&fallback);
  			}
  		else
+ 			CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
+ 		}
+ 	else
  		{
  		tmp.pid=pid;
  		ret=(ERR_STATE *)lh_retrieve(thread_hash,(char *)&tmp);
+ 		CRYPTO_r_unlock(CRYPTO_LOCK_ERR);
  		}
+ 
  	/* ret == the error state, if NULL, make a new one */
  	if (ret == NULL)
  		{
***************
*** 527,533 ****
--- 523,531 ----
  		ret->pid=pid;
  		ret->top=0;
  		ret->bottom=0;
+ 		CRYPTO_w_lock(CRYPTO_LOCK_ERR);
  		tmpp=(ERR_STATE *)lh_insert(thread_hash,(char *)ret);
+ 		CRYPTO_w_unlock(CRYPTO_LOCK_ERR);
  		if (tmpp != NULL) /* old entry - should not happen */
  			free(tmpp);
  		}
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/evp/encode.c	Wed Jul 10 09:47:13 1996
--- ./crypto/evp/encode.c	Wed Jul 17 16:45:51 1996
***************
*** 215,221 ****
  unsigned char *in;
  int inl;
  	{
! 	int seof=-1,eof=0,rv=-1,ret=0,i,v,n,j;
  	unsigned char *d;
  
  	n=ctx->num;
--- 215,221 ----
  unsigned char *in;
  int inl;
  	{
! 	int seof= -1,eof=0,rv= -1,ret=0,i,v,n,j;
  	unsigned char *d;
  
  	n=ctx->num;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/evp/envelope.h	Wed Jul 10 09:47:13 1996
--- ./crypto/evp/envelope.h	Thu Jul 25 11:35:19 1996
***************
*** 192,198 ****
--- 192,207 ----
  			{
  			C_Block oiv;	/* original iv */
  			C_Block iv;	/* working iv */
+ 			C_Block inw;
+ 			C_Block outw;
  			des_key_schedule ks;/* key schedule */
+ 			} desx_cbc;
+ 
+ 		struct
+ 			{
+ 			C_Block oiv;	/* original iv */
+ 			C_Block iv;	/* working iv */
+ 			des_key_schedule ks;/* key schedule */
  			des_key_schedule ks2;/* key schedule (for ede) */
  			des_key_schedule ks3;/* key schedule (for ede3) */
  			int num;	/* used by cfb mode */
***************
*** 258,265 ****
  	unsigned char enc_data[80];     /* data to encode */
  	} EVP_ENCODE_CTX;
  
! #define EVP_ENCODE_LENGTH(l)    (((l+2)/3*4)+(l/48+1)*2)
! #define EVP_DECODE_LENGTH(l)    ((l+3)/4*3)
  
  #define EVP_SignInit(a,b)		EVP_DigestInit(a,b)
  #define EVP_SignUpdate(a,b,c)		EVP_DigestUpdate(a,b,c)
--- 267,274 ----
  	unsigned char enc_data[80];     /* data to encode */
  	} EVP_ENCODE_CTX;
  
! #define EVP_ENCODE_LENGTH(l)    (((l+2)/3*4)+(l/48+1)*2+80)
! #define EVP_DECODE_LENGTH(l)    ((l+3)/4*3+80)
  
  #define EVP_SignInit(a,b)		EVP_DigestInit(a,b)
  #define EVP_SignUpdate(a,b,c)		EVP_DigestUpdate(a,b,c)
***************
*** 374,379 ****
--- 383,389 ----
  EVP_CIPHER *EVP_des_cbc(void);
  EVP_CIPHER *EVP_des_ede_cbc(void);
  EVP_CIPHER *EVP_des_ede3_cbc(void);
+ EVP_CIPHER *EVP_desx_cbc(void);
  EVP_CIPHER *EVP_rc4(void);
  EVP_CIPHER *EVP_idea_ecb(void);
  EVP_CIPHER *EVP_idea_cfb(void);
***************
*** 448,453 ****
--- 458,465 ----
  EVP_MD *EVP_md5();
  EVP_MD *EVP_sha();
  EVP_MD *EVP_sha1();
+ EVP_MD *EVP_dss();
+ EVP_MD *EVP_dss1();
  
  EVP_CIPHER *EVP_des_ecb();
  EVP_CIPHER *EVP_des_ede();
***************
*** 461,466 ****
--- 473,479 ----
  EVP_CIPHER *EVP_des_cbc();
  EVP_CIPHER *EVP_des_ede_cbc();
  EVP_CIPHER *EVP_des_ede3_cbc();
+ EVP_CIPHER *EVP_desx_cbc();
  EVP_CIPHER *EVP_rc4();
  EVP_CIPHER *EVP_idea_ecb();
  EVP_CIPHER *EVP_idea_cfb();
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/evp/evp_enc.c	Fri Jul 12 09:28:28 1996
--- ./crypto/evp/evp_enc.c	Wed Jul 24 07:56:41 1996
***************
*** 49,55 ****
  #include "cryptlib.h"
  #include "envelope.h"
  
! char *EVP_version="EVP part of SSLeay 0.6.1 12-Jul-1996";
  
  void EVP_CipherInit(ctx,data,key,iv,enc)
  EVP_CIPHER_CTX *ctx;
--- 49,55 ----
  #include "cryptlib.h"
  #include "envelope.h"
  
! char *EVP_version="EVP part of SSLeay 0.6.2 24-Jul-1996";
  
  void EVP_CipherInit(ctx,data,key,iv,enc)
  EVP_CIPHER_CTX *ctx;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/evp/e_names.c	Wed Jul 10 09:47:12 1996
--- ./crypto/evp/e_names.c	Wed Jul 24 23:14:28 1996
***************
*** 74,79 ****
--- 74,84 ----
  	if (	(strcmp(name,SN_des_ede3_ofb) == 0) ||
  		(strcmp(name,LN_des_ede3_ofb) == 0))
  		return(     EVP_des_ede3_ofb());
+ 	if (	(strcmp(name,SN_desx_cbc) == 0) ||
+ 		(strcmp(name,LN_desx_cbc) == 0) ||
+ 		(strcmp(name,"DESX") == 0) ||
+ 		(strcmp(name,"desx") == 0))
+ 		return(     EVP_desx_cbc());
  	if (	(strcmp(name,SN_des_cbc) == 0) ||
  		(strcmp(name,LN_des_cbc) == 0) ||
  		(strcmp(name,"DES") == 0) ||
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/evp/Makefile.ssl	Fri Jul 12 17:21:29 1996
--- ./crypto/evp/Makefile.ssl	Thu Jul 25 16:06:32 1996
***************
*** 25,31 ****
  	e_ecb_d.c e_cbc_d.c e_cfb_d.c e_ofb_d.c \
  	e_ecb_i.c e_cbc_i.c e_cfb_i.c e_ofb_i.c \
  	e_ecb_3d.c e_cbc_3d.c e_rc4.c e_names.c \
! 	e_cfb_3d.c e_ofb_3d.c \
  	e_ecb_r2.c e_cbc_r2.c e_cfb_r2.c e_ofb_r2.c \
  	m_md2.c m_md5.c m_sha.c m_sha1.c m_dss.c m_dss1.c m_names.c \
  	p_open.c p_seal.c p_sign.c p_verify.c p_lib.c \
--- 25,31 ----
  	e_ecb_d.c e_cbc_d.c e_cfb_d.c e_ofb_d.c \
  	e_ecb_i.c e_cbc_i.c e_cfb_i.c e_ofb_i.c \
  	e_ecb_3d.c e_cbc_3d.c e_rc4.c e_names.c \
! 	e_cfb_3d.c e_ofb_3d.c e_xcbc_d.c \
  	e_ecb_r2.c e_cbc_r2.c e_cfb_r2.c e_ofb_r2.c \
  	m_md2.c m_md5.c m_sha.c m_sha1.c m_dss.c m_dss1.c m_names.c \
  	p_open.c p_seal.c p_sign.c p_verify.c p_lib.c \
***************
*** 35,41 ****
  	e_ecb_d.o e_cbc_d.o e_cfb_d.o e_ofb_d.o \
  	e_ecb_i.o e_cbc_i.o e_cfb_i.o e_ofb_i.o \
  	e_ecb_3d.o e_cbc_3d.o e_rc4.o e_names.o \
! 	e_cfb_3d.o e_ofb_3d.o \
  	e_ecb_r2.o e_cbc_r2.o e_cfb_r2.o e_ofb_r2.o \
  	m_md2.o m_md5.o m_sha.o m_sha1.o m_dss.o m_dss1.o m_names.o \
  	p_open.o p_seal.o p_sign.o p_verify.o p_lib.o \
--- 35,41 ----
  	e_ecb_d.o e_cbc_d.o e_cfb_d.o e_ofb_d.o \
  	e_ecb_i.o e_cbc_i.o e_cfb_i.o e_ofb_i.o \
  	e_ecb_3d.o e_cbc_3d.o e_rc4.o e_names.o \
! 	e_cfb_3d.o e_ofb_3d.o e_xcbc_d.o \
  	e_ecb_r2.o e_cbc_r2.o e_cfb_r2.o e_ofb_r2.o \
  	m_md2.o m_md5.o m_sha.o m_sha1.o m_dss.o m_dss1.o m_names.o \
  	p_open.o p_seal.o p_sign.o p_verify.o p_lib.o \
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/evp/p_lib.c	Wed Jul 10 09:47:15 1996
--- ./crypto/evp/p_lib.c	Tue Jul 23 21:52:31 1996
***************
*** 85,99 ****
  void EVP_PKEY_free(x)
  EVP_PKEY *x;
  	{
  	if (x == NULL) return;
  
! 	CRYPTO_w_lock(CRYPTO_LOCK_EVP_PKEY);
! 	if (--x->references > 0)
! 		{
! 		CRYPTO_w_lock(CRYPTO_LOCK_EVP_PKEY);
! 		return;
! 		}
! 	CRYPTO_w_lock(CRYPTO_LOCK_EVP_PKEY);
  
  	switch (x->type)
  		{
--- 85,96 ----
  void EVP_PKEY_free(x)
  EVP_PKEY *x;
  	{
+ 	int i;
+ 
  	if (x == NULL) return;
  
! 	i=CRYPTO_add(&x->references,-1,CRYPTO_LOCK_EVP_PKEY);
! 	if (i > 0) return;
  
  	switch (x->type)
  		{
*** /dev/null	Thu Jul 25 17:44:26 1996
--- ./crypto/evp/e_xcbc_d.c	Wed Jul 24 23:20:04 1996
***************
*** 0 ****
--- 1,106 ----
+ /* crypto/evp/e_xcbc_d.c */
+ /* Copyright (C) 1995-1996 Eric Young (eay@mincom.oz.au)
+  * All rights reserved.
+  * 
+  * This file is part of an SSL implementation written
+  * by Eric Young (eay@mincom.oz.au).
+  * The implementation was written so as to conform with Netscapes SSL
+  * specification.  This library and applications are
+  * FREE FOR COMMERCIAL AND NON-COMMERCIAL USE
+  * as long as the following conditions are aheared to.
+  * 
+  * Copyright remains Eric Young's, and as such any Copyright notices in
+  * the code are not to be removed.  If this code is used in a product,
+  * Eric Young should be given attribution as the author of the parts used.
+  * This can be in the form of a textual message at program startup or
+  * in documentation (online or textual) provided with the package.
+  * 
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+  * are met:
+  * 1. Redistributions of source code must retain the copyright
+  *    notice, this list of conditions and the following disclaimer.
+  * 2. Redistributions in binary form must reproduce the above copyright
+  *    notice, this list of conditions and the following disclaimer in the
+  *    documentation and/or other materials provided with the distribution.
+  * 3. All advertising materials mentioning features or use of this software
+  *    must display the following acknowledgement:
+  *    This product includes software developed by Eric Young (eay@mincom.oz.au)
+  * 
+  * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
+  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+  * SUCH DAMAGE.
+  * 
+  * The licence and distribution terms for any publically available version or
+  * derivative of this code cannot be changed.  i.e. this code cannot simply be
+  * copied and put under another distribution licence
+  * [including the GNU Public Licence.]
+  */
+ 
+ #include <stdio.h>
+ #include "cryptlib.h"
+ #include "envelope.h"
+ #include "objects.h"
+ 
+ #ifndef NOPROTO
+ static void desx_cbc_init_key(EVP_CIPHER_CTX *ctx, unsigned char *key,
+ 	unsigned char *iv);
+ static void desx_cbc_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
+ 	unsigned char *in, unsigned int inl);
+ #else
+ static void desx_cbc_init_key();
+ static void desx_cbc_cipher();
+ #endif
+ 
+ static EVP_CIPHER d_xcbc_cipher=
+ 	{
+ 	NID_desx_cbc,
+ 	8,24,8,
+ 	desx_cbc_init_key,
+ 	desx_cbc_init_key,
+ 	desx_cbc_cipher,
+ 	};
+ 
+ EVP_CIPHER *EVP_desx_cbc()
+ 	{
+ 	return(&d_xcbc_cipher);
+ 	}
+ 	
+ static void desx_cbc_init_key(ctx,key,iv)
+ EVP_CIPHER_CTX *ctx;
+ unsigned char *key;
+ unsigned char *iv;
+ 	{
+ 	if (iv != NULL)
+ 		memcpy(&(ctx->c.desx_cbc.oiv[0]),iv,8);
+ 	memcpy(&(ctx->c.desx_cbc.iv[0]),&(ctx->c.desx_cbc.oiv[0]),8);
+ 	if (key != NULL)
+ 		{
+ 		des_set_key((des_cblock *)key,ctx->c.desx_cbc.ks);
+ 		memcpy(&(ctx->c.desx_cbc.inw[0]),&(key[8]),8);
+ 		memcpy(&(ctx->c.desx_cbc.outw[0]),&(key[16]),8);
+ 		}
+ 	}
+ 
+ static void desx_cbc_cipher(ctx,out,in,inl)
+ EVP_CIPHER_CTX *ctx;
+ unsigned char *out;
+ unsigned char *in;
+ unsigned int inl;
+ 	{
+ 	des_xcbc_encrypt(
+ 		(des_cblock *)in,(des_cblock *)out,
+ 		(long)inl, ctx->c.desx_cbc.ks,
+ 		(des_cblock *)&(ctx->c.desx_cbc.iv[0]),
+ 		(des_cblock *)&(ctx->c.desx_cbc.inw[0]),
+ 		(des_cblock *)&(ctx->c.desx_cbc.outw[0]),
+ 		ctx->encrypt);
+ 	}
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/idea/i_cfb64.c	Wed Jul 10 09:47:16 1996
--- ./crypto/idea/i_cfb64.c	Wed Jul 17 16:45:53 1996
***************
*** 63,69 ****
  int encrypt;
  	{
  	register unsigned long v0,v1,t;
! 	register int n=*num;
  	register long l=length;
  	unsigned long ti[2];
  	unsigned char *iv,c,cc;
--- 63,69 ----
  int encrypt;
  	{
  	register unsigned long v0,v1,t;
! 	register int n= *num;
  	register long l=length;
  	unsigned long ti[2];
  	unsigned char *iv,c,cc;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/idea/i_ecb.c	Fri Jul 12 09:28:26 1996
--- ./crypto/idea/i_ecb.c	Wed Jul 24 07:56:40 1996
***************
*** 48,54 ****
  #include "idea.h"
  #include "idea_lcl.h"
  
! char *IDEA_version="IDEA part of SSLeay 0.6.1 12-Jul-1996";
  
  char *idea_options()
  	{
--- 48,54 ----
  #include "idea.h"
  #include "idea_lcl.h"
  
! char *IDEA_version="IDEA part of SSLeay 0.6.2 24-Jul-1996";
  
  char *idea_options()
  	{
***************
*** 86,92 ****
  	x4=d[1];
  	x3=(x4>>16);
  
! 	p=&(key->data[0][0]);
  	for (i=0; i<8; i++)
  		{
  		x1&=0xffff;
--- 86,92 ----
  	x4=d[1];
  	x3=(x4>>16);
  
! 	p= &(key->data[0][0]);
  	for (i=0; i<8; i++)
  		{
  		x1&=0xffff;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/idea/i_ofb64.c	Wed Jul 10 09:47:16 1996
--- ./crypto/idea/i_ofb64.c	Wed Jul 17 16:45:53 1996
***************
*** 61,67 ****
  int *num;
  	{
  	register unsigned long v0,v1,t;
! 	register int n=*num;
  	register long l=length;
  	unsigned char d[8];
  	register char *dp;
--- 61,67 ----
  int *num;
  	{
  	register unsigned long v0,v1,t;
! 	register int n= *num;
  	register long l=length;
  	unsigned char d[8];
  	register char *dp;
***************
*** 87,93 ****
  			t=ti[1]; l2n(t,dp);
  			save++;
  			}
! 		*(out++)=*(in++)^d[n];
  		n=(n+1)&0x07;
  		}
  	if (save)
--- 87,93 ----
  			t=ti[1]; l2n(t,dp);
  			save++;
  			}
! 		*(out++)= *(in++)^d[n];
  		n=(n+1)&0x07;
  		}
  	if (save)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/lhash/lhash.c	Fri Jul 12 09:28:26 1996
--- ./crypto/lhash/lhash.c	Wed Jul 24 07:56:40 1996
***************
*** 45,51 ****
   * [including the GNU Public Licence.]
   */
  
! char *lh_version="lhash part of SSLeay 0.6.1 12-Jul-1996";
  
  /* Code for dynamic hash table routines
   * Author - Eric Young v 2.0
--- 45,51 ----
   * [including the GNU Public Licence.]
   */
  
! char *lh_version="lhash part of SSLeay 0.6.2 24-Jul-1996";
  
  /* Code for dynamic hash table routines
   * Author - Eric Young v 2.0
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/Makefile.ssl	Fri Jul 12 17:21:21 1996
--- ./crypto/Makefile.ssl	Thu Jul 25 16:06:21 1996
***************
*** 120,126 ****
  	done;
  
  depend:
! 	$(MAKEDEPEND) $(INCLUDES) $(PROGS) $(LIBSRC)
  	@for i in $(SDIRS) ;\
  	do \
  	(cd $$i; echo "making depend in $$i..."; \
--- 120,126 ----
  	done;
  
  depend:
! 	$(MAKEDEPEND) $(INCLUDE) $(PROGS) $(LIBSRC)
  	@for i in $(SDIRS) ;\
  	do \
  	(cd $$i; echo "making depend in $$i..."; \
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/md/md2_dgst.c	Fri Jul 12 09:28:26 1996
--- ./crypto/md/md2_dgst.c	Wed Jul 24 07:56:40 1996
***************
*** 50,56 ****
  #include <string.h>
  #include "md2.h"
  
! char *MD2_version="MD2 part of SSLeay 0.6.1 12-Jul-1996";
  
  /* Implemented from RFC1319 The MD2 Message-Digest Algorithm
   */
--- 50,56 ----
  #include <string.h>
  #include "md2.h"
  
! char *MD2_version="MD2 part of SSLeay 0.6.2 24-Jul-1996";
  
  /* Implemented from RFC1319 The MD2 Message-Digest Algorithm
   */
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/md/md5_dgst.c	Fri Jul 12 09:28:27 1996
--- ./crypto/md/md5_dgst.c	Wed Jul 24 07:56:40 1996
***************
*** 48,54 ****
  #include <stdio.h>
  #include "md5_locl.h"
  
! char *MD5_version="MD5 part of SSLeay 0.6.1 12-Jul-1996";
  
  /* Implemented from RFC1321 The MD5 Message-Digest Algorithm
   */
--- 48,54 ----
  #include <stdio.h>
  #include "md5_locl.h"
  
! char *MD5_version="MD5 part of SSLeay 0.6.2 24-Jul-1996";
  
  /* Implemented from RFC1321 The MD5 Message-Digest Algorithm
   */
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/meth/by_file.c	Wed Jul 10 09:47:20 1996
--- ./crypto/meth/by_file.c	Tue Jul 23 21:53:00 1996
***************
*** 170,178 ****
  			{
  			xi=(X509_INFO *)sk_value(ctx->args,i);
  
! 			CRYPTO_w_lock(CRYPTO_LOCK_X509_INFO);
! 			xi->references++;
! 			CRYPTO_w_unlock(CRYPTO_LOCK_X509_INFO);
  
  			sk_push(sk,(char *)xi);
  			}
--- 170,176 ----
  			{
  			xi=(X509_INFO *)sk_value(ctx->args,i);
  
! 			CRYPTO_add(&xi->references,1,CRYPTO_LOCK_X509_INFO);
  
  			sk_push(sk,(char *)xi);
  			}
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/objects/objects.h	Wed Jul 10 09:47:21 1996
--- ./crypto/objects/objects.h	Wed Jul 24 23:17:31 1996
***************
*** 312,327 ****
  #define SN_netscape			"Netscape"
  #define LN_netscape			"Netscape Communications Corp."
  #define NID_netscape			57
! /* #define OBJ_netscape			2L,16L,840L,113730L */
! #define OBJ_netscape			2L,16L,840L,11370L
  
! #define LN_netscape_gif2		"ns-gif-2"
! #define NID_netscape_gif2		58
! #define OBJ_netscape_gif2		2L,16L,840L,11370L,1L,2L
  
! #define LN_netscape_gif3		"ns-gif-3"
! #define NID_netscape_gif3		59
! #define OBJ_netscape_gif3		2L,16L,840L,11370L,1L,3L
  
  #define SN_des_ede_cfb			"DES-EDE-CFB"
  #define LN_des_ede_cfb			"des-ede-cfb"
--- 312,328 ----
  #define SN_netscape			"Netscape"
  #define LN_netscape			"Netscape Communications Corp."
  #define NID_netscape			57
! #define OBJ_netscape			2L,16L,840L,1L,113730L
  
! #define SN_netscape_cert_extension	"nsCertExt"
! #define LN_netscape_cert_extension	"Netscape Certificate Extension"
! #define NID_netscape_cert_extension	58
! #define OBJ_netscape_cert_extension	OBJ_netscape,1L
  
! #define SN_netscape_data_type		"nsDataType"
! #define LN_netscape_data_type		"Netscape Data Type"
! #define NID_netscape_data_type		59
! #define OBJ_netscape_data_type		OBJ_netscape,2L
  
  #define SN_des_ede_cfb			"DES-EDE-CFB"
  #define LN_des_ede_cfb			"des-ede-cfb"
***************
*** 374,379 ****
--- 375,429 ----
  #define SN_dsaWithSHA1			"DSS-SHA1"
  #define LN_dsaWithSHA1			"sha1WithDSSEncryption"
  #define NID_dsaWithSHA1			70
+ 
+ #define SN_netscape_cert_type		"nsCertType"
+ #define LN_netscape_cert_type		"Netscape Cert Type"
+ #define NID_netscape_cert_type		71
+ #define OBJ_netscape_cert_type		OBJ_netscape_cert_extension,1L
+ 
+ #define SN_netscape_base_url		"nsBaseUrl"
+ #define LN_netscape_base_url		"Netscape Base Url"
+ #define NID_netscape_base_url		72
+ #define OBJ_netscape_base_url		OBJ_netscape_cert_extension,2L
+ 
+ #define SN_netscape_revocation_url	"nsRevocationUrl"
+ #define LN_netscape_revocation_url	"Netscape Revocation Url"
+ #define NID_netscape_revocation_url	73
+ #define OBJ_netscape_revocation_url	OBJ_netscape_cert_extension,3L
+ 
+ #define SN_netscape_ca_revocation_url	"nsCaRevocationUrl"
+ #define LN_netscape_ca_revocation_url	"Netscape CA Revocation Url"
+ #define NID_netscape_ca_revocation_url	74
+ #define OBJ_netscape_ca_revocation_url	OBJ_netscape_cert_extension,4L
+ 
+ #define SN_netscape_renewal_url		"nsRenewalUrl"
+ #define LN_netscape_renewal_url		"Netscape Renewal Url"
+ #define NID_netscape_renewal_url	75
+ #define OBJ_netscape_renewal_url	OBJ_netscape_cert_extension,7L
+ 
+ #define SN_netscape_ca_policy_url	"nsCaPolicyUrl"
+ #define LN_netscape_ca_policy_url	"Netscape CA Policy Url"
+ #define NID_netscape_ca_policy_url	76
+ #define OBJ_netscape_ca_policy_url	OBJ_netscape_cert_extension,8L
+ 
+ #define SN_netscape_ssl_server_name	"nsSslServerName"
+ #define LN_netscape_ssl_server_name	"Netscape SSL Server Name"
+ #define NID_netscape_ssl_server_name	77
+ #define OBJ_netscape_ssl_server_name	OBJ_netscape_cert_extension,12L
+ 
+ #define SN_netscape_comment		"nsComment"
+ #define LN_netscape_comment		"Netscape Comment"
+ #define NID_netscape_comment		78
+ #define OBJ_netscape_comment		OBJ_netscape_cert_extension,13L
+ 
+ #define SN_netscape_cert_sequence	"nsCertSequence"
+ #define LN_netscape_cert_sequence	"Netscape Certificate Sequence"
+ #define NID_netscape_cert_sequence	79
+ #define OBJ_netscape_cert_sequence	OBJ_netscape_data_type,5L
+ 
+ #define SN_desx_cbc			"DESX-CBC"
+ #define LN_desx_cbc			"desx-cbc"
+ #define NID_desx_cbc			80
  
  #include "asn1.h"
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/objects/obj_dat.c	Wed Jul 10 09:47:21 1996
--- ./crypto/objects/obj_dat.c	Wed Jul 24 23:21:13 1996
***************
*** 151,157 ****
  int OBJ_ln2nid(s)
  char *s;
  	{
! 	ASN1_OBJECT o,*oo=&o,**op;
  
  	o.ln=s;
  	op=(ASN1_OBJECT **)OBJ_bsearch((char *)&oo,(char *)ln_objs,NUM_LN,
--- 151,157 ----
  int OBJ_ln2nid(s)
  char *s;
  	{
! 	ASN1_OBJECT o,*oo= &o,**op;
  
  	o.ln=s;
  	op=(ASN1_OBJECT **)OBJ_bsearch((char *)&oo,(char *)ln_objs,NUM_LN,
***************
*** 163,169 ****
  int OBJ_sn2nid(s)
  char *s;
  	{
! 	ASN1_OBJECT o,*oo=&o,**op;
  
  	o.sn=s;
  	op=(ASN1_OBJECT **)OBJ_bsearch((char *)&oo,(char *)sn_objs,NUM_SN,
--- 163,169 ----
  int OBJ_sn2nid(s)
  char *s;
  	{
! 	ASN1_OBJECT o,*oo= &o,**op;
  
  	o.sn=s;
  	op=(ASN1_OBJECT **)OBJ_bsearch((char *)&oo,(char *)sn_objs,NUM_SN,
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/objects/obj_dat.h	Wed Jul 10 15:17:49 1996
--- ./crypto/objects/obj_dat.h	Wed Jul 24 23:17:36 1996
***************
*** 50,61 ****
   * perl obj_dat.pl < objects.h > obj_dat.h
   */
  
! #define NUM_NID 71
! #define NUM_SN 42
! #define NUM_LN 71
! #define NUM_OBJ 54
  
! static unsigned char lvalues[377]={
  0x2A,0x86,0x48,0x86,0xF7,0x0D,               /* [  0] OBJ_rsadsi */
  0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,          /* [  6] OBJ_pkcs */
  0x2A,0x86,0x48,0x86,0xF7,0x0D,0x02,0x02,     /* [ 13] OBJ_md2 */
--- 50,61 ----
   * perl obj_dat.pl < objects.h > obj_dat.h
   */
  
! #define NUM_NID 81
! #define NUM_SN 54
! #define NUM_LN 81
! #define NUM_OBJ 63
  
! static unsigned char lvalues[462]={
  0x2A,0x86,0x48,0x86,0xF7,0x0D,               /* [  0] OBJ_rsadsi */
  0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,          /* [  6] OBJ_pkcs */
  0x2A,0x86,0x48,0x86,0xF7,0x0D,0x02,0x02,     /* [ 13] OBJ_md2 */
***************
*** 102,208 ****
  0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x07,/* [297] OBJ_pkcs9_challengePassword */
  0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x08,/* [306] OBJ_pkcs9_unstructuredAddress */
  0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x09,/* [315] OBJ_pkcs9_extCertAttributes */
! 0x60,0x86,0x48,0xD8,0x6A,                    /* [324] OBJ_netscape */
! 0x60,0x86,0x48,0xD8,0x6A,0x01,0x02,          /* [329] OBJ_netscape_gif2 */
! 0x60,0x86,0x48,0xD8,0x6A,0x01,0x03,          /* [336] OBJ_netscape_gif3 */
! 0x2B,0x0E,0x02,0x1A,0x05,                    /* [343] OBJ_sha1 */
! 0x2B,0x0E,0x03,0x02,0x0C,                    /* [348] OBJ_dsaWithSHA */
! 0x2B,0x0E,0x03,0x02,0x0D,                    /* [353] OBJ_dss */
! 0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x05,0x0B,/* [358] OBJ_pbeWithSHA1AndRC2_CBC */
! 0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x05,0x0C,/* [367] OBJ_pbeWithSHA1AndRC4 */
  };
  
  static ASN1_OBJECT nid_objs[NUM_NID]={
  {"UNDEF","undefined",NID_undef,0,NULL},
! {"rsadsi","rsadsi",NID_rsadsi,6,&(lvalues[0])},
! {"pkcs","pkcs",NID_pkcs,7,&(lvalues[6])},
! {"MD2","md2",NID_md2,8,&(lvalues[13])},
! {"MD5","md5",NID_md5,8,&(lvalues[21])},
! {"RC4","rc4",NID_rc4,8,&(lvalues[29])},
! {"rsaEncryption","rsaEncryption",NID_rsaEncryption,9,&(lvalues[37])},
  {"RSA-MD2","md2withRSAEncryption",NID_md2withRSAEncryption,9,
! 	&(lvalues[46])},
  {"RSA-MD5","md5withRSAEncryption",NID_md5withRSAEncryption,9,
! 	&(lvalues[55])},
  {"pbeWithMD2AndDES-CBC","pbeWithMD2AndDES-CBC",
! 	NID_pbeWithMD2AndDES_CBC,9,&(lvalues[64])},
  {"pbeWithMD5AndDES-CBC","pbeWithMD5AndDES-CBC",
! 	NID_pbeWithMD5AndDES_CBC,9,&(lvalues[73])},
! {"X500","X500",NID_X500,1,&(lvalues[82])},
! {"X509","X509",NID_X509,2,&(lvalues[83])},
! {"CN","commonName",NID_commonName,3,&(lvalues[85])},
! {"C","countryName",NID_countryName,3,&(lvalues[88])},
! {"L","localityName",NID_localityName,3,&(lvalues[91])},
! {"SP","stateOrProvinceName",NID_stateOrProvinceName,3,&(lvalues[94])},
! {"O","organizationName",NID_organizationName,3,&(lvalues[97])},
  {"OU","organizationalUnitName",NID_organizationalUnitName,3,
! 	&(lvalues[100])},
! {"RSA","rsa",NID_rsa,4,&(lvalues[103])},
! {"pkcs7","pkcs7",NID_pkcs7,8,&(lvalues[107])},
! {"pkcs7-data","pkcs7-data",NID_pkcs7_data,9,&(lvalues[115])},
  {"pkcs7-signedData","pkcs7-signedData",NID_pkcs7_signed,9,
! 	&(lvalues[124])},
  {"pkcs7-envelopedData","pkcs7-envelopedData",NID_pkcs7_enveloped,9,
! 	&(lvalues[133])},
  {"pkcs7-signedAndEnvelopedData","pkcs7-signedAndEnvelopedData",
! 	NID_pkcs7_signedAndEnveloped,9,&(lvalues[142])},
  {"pkcs7-digestData","pkcs7-digestData",NID_pkcs7_digest,9,
! 	&(lvalues[151])},
  {"pkcs7-encryptedData","pkcs7-encryptedData",NID_pkcs7_encrypted,9,
! 	&(lvalues[160])},
! {"pkcs3","pkcs3",NID_pkcs3,8,&(lvalues[169])},
! {"dhKeyAgreement","dhKeyAgreement",NID_dhKeyAgreement,9,&(lvalues[177])},
! {"DES-ECB","des-ecb",NID_des_ecb,5,&(lvalues[186])},
! {"DES-CFB","des-cfb",NID_des_cfb,5,&(lvalues[191])},
! {"DES-CBC","des-cbc",NID_des_cbc,5,&(lvalues[196])},
  {"DES-EDE","des-ede",NID_des_ede,0,NULL},
! {"DES-EDE3","des-ede3",NID_des_ede3,8,&(lvalues[201])},
  {"IDEA-CBC","idea-cbc",NID_idea_cbc,0,NULL},
  {"IDEA-CFB","idea-cfb",NID_idea_cfb,0,NULL},
  {"IDEA-ECB","idea-ecb",NID_idea_ecb,0,NULL},
! {"RC2-CBC","rc2-cbc",NID_rc2_cbc,8,&(lvalues[209])},
  {"RC2-ECB","rc2-ecb",NID_rc2_ecb,0,NULL},
  {"RC2-CFB","rc2-cfb",NID_rc2_cfb,0,NULL},
  {"RC2-OFB","rc2-ofb",NID_rc2_ofb,0,NULL},
! {"SHA","sha",NID_sha,5,&(lvalues[217])},
  {"RSA-SHA","shaWithRSAEncryption",NID_shaWithRSAEncryption,0,NULL},
  {"DES-EDE-CBC","des-ede-cbc",NID_des_ede_cbc,0,NULL},
! {"DES-EDE3-CBC","des-ede3-cbc",NID_des_ede3_cbc,8,&(lvalues[222])},
! {"DES-OFB","des-ofb",NID_des_ofb,5,&(lvalues[230])},
  {"IDEA-OFB","idea-ofb",NID_idea_ofb,0,NULL},
! {"pkcs9","pkcs9",NID_pkcs9,8,&(lvalues[235])},
! {"Email","emailAddress",NID_pkcs9_emailAddress,9,&(lvalues[243])},
  {"unstructuredName","unstructuredName",NID_pkcs9_unstructuredName,9,
! 	&(lvalues[252])},
! {"contentType","contentType",NID_pkcs9_contentType,9,&(lvalues[261])},
  {"messageDigest","messageDigest",NID_pkcs9_messageDigest,9,
! 	&(lvalues[270])},
! {"signingTime","signingTime",NID_pkcs9_signingTime,9,&(lvalues[279])},
  {"countersignature","countersignature",NID_pkcs9_countersignature,9,
! 	&(lvalues[288])},
  {"challengePassword","challengePassword",NID_pkcs9_challengePassword,
! 	9,&(lvalues[297])},
  {"unstructuredAddress","unstructuredAddress",
! 	NID_pkcs9_unstructuredAddress,9,&(lvalues[306])},
  {"extendedCertificateAttributes","extendedCertificateAttributes",
! 	NID_pkcs9_extCertAttributes,9,&(lvalues[315])},
! {"Netscape","Netscape Communications Corp.",NID_netscape,5,
! 	&(lvalues[324])},
! {"ns-gif-2","ns-gif-2",NID_netscape_gif2,7,&(lvalues[329])},
! {"ns-gif-3","ns-gif-3",NID_netscape_gif3,7,&(lvalues[336])},
  {"DES-EDE-CFB","des-ede-cfb",NID_des_ede_cfb,0,NULL},
  {"DES-EDE3-CFB","des-ede3-cfb",NID_des_ede3_cfb,0,NULL},
  {"DES-EDE-OFB","des-ede-ofb",NID_des_ede_ofb,0,NULL},
  {"DES-EDE3-OFB","des-ede3-ofb",NID_des_ede3_ofb,0,NULL},
! {"SHA1","sha1",NID_sha1,5,&(lvalues[343])},
  {"RSA-SHA1","sha1WithRSAEncryption",NID_sha1WithRSAEncryption,0,NULL},
! {"DSS-SHA","shaWithDSSEncryption",NID_dsaWithSHA,5,&(lvalues[348])},
! {"DSS","dssEncryption",NID_dss,5,&(lvalues[353])},
  {"pbeWithSHA1AndRC2-CBC","pbeWithSHA1AndRC2-CBC",
! 	NID_pbeWithSHA1AndRC2_CBC,9,&(lvalues[358])},
  {"pbeWithSHA1AndRC4","pbeWithSHA1AndRC4",NID_pbeWithSHA1AndRC4,9,
! 	&(lvalues[367])},
  {"DSS-SHA1","sha1WithDSSEncryption",NID_dsaWithSHA1,0,NULL},
  };
  
  static ASN1_OBJECT *sn_objs[NUM_SN]={
--- 102,238 ----
  0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x07,/* [297] OBJ_pkcs9_challengePassword */
  0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x08,/* [306] OBJ_pkcs9_unstructuredAddress */
  0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x09,/* [315] OBJ_pkcs9_extCertAttributes */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,          /* [324] OBJ_netscape */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x01,     /* [331] OBJ_netscape_cert_extension */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x02,     /* [339] OBJ_netscape_data_type */
! 0x2B,0x0E,0x02,0x1A,0x05,                    /* [347] OBJ_sha1 */
! 0x2B,0x0E,0x03,0x02,0x0C,                    /* [352] OBJ_dsaWithSHA */
! 0x2B,0x0E,0x03,0x02,0x0D,                    /* [357] OBJ_dss */
! 0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x05,0x0B,/* [362] OBJ_pbeWithSHA1AndRC2_CBC */
! 0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x05,0x0C,/* [371] OBJ_pbeWithSHA1AndRC4 */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x01,0x01,/* [380] OBJ_netscape_cert_type */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x01,0x02,/* [389] OBJ_netscape_base_url */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x01,0x03,/* [398] OBJ_netscape_revocation_url */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x01,0x04,/* [407] OBJ_netscape_ca_revocation_url */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x01,0x07,/* [416] OBJ_netscape_renewal_url */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x01,0x08,/* [425] OBJ_netscape_ca_policy_url */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x01,0x0C,/* [434] OBJ_netscape_ssl_server_name */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x01,0x0D,/* [443] OBJ_netscape_comment */
! 0x60,0x86,0x48,0x01,0x86,0xF8,0x42,0x02,0x05,/* [452] OBJ_netscape_cert_sequence */
  };
  
  static ASN1_OBJECT nid_objs[NUM_NID]={
  {"UNDEF","undefined",NID_undef,0,NULL},
! {"rsadsi","rsadsi",NID_rsadsi,6,&(lvalues[0]),0},
! {"pkcs","pkcs",NID_pkcs,7,&(lvalues[6]),0},
! {"MD2","md2",NID_md2,8,&(lvalues[13]),0},
! {"MD5","md5",NID_md5,8,&(lvalues[21]),0},
! {"RC4","rc4",NID_rc4,8,&(lvalues[29]),0},
! {"rsaEncryption","rsaEncryption",NID_rsaEncryption,9,&(lvalues[37]),0},
  {"RSA-MD2","md2withRSAEncryption",NID_md2withRSAEncryption,9,
! 	&(lvalues[46]),0},
  {"RSA-MD5","md5withRSAEncryption",NID_md5withRSAEncryption,9,
! 	&(lvalues[55]),0},
  {"pbeWithMD2AndDES-CBC","pbeWithMD2AndDES-CBC",
! 	NID_pbeWithMD2AndDES_CBC,9,&(lvalues[64]),0},
  {"pbeWithMD5AndDES-CBC","pbeWithMD5AndDES-CBC",
! 	NID_pbeWithMD5AndDES_CBC,9,&(lvalues[73]),0},
! {"X500","X500",NID_X500,1,&(lvalues[82]),0},
! {"X509","X509",NID_X509,2,&(lvalues[83]),0},
! {"CN","commonName",NID_commonName,3,&(lvalues[85]),0},
! {"C","countryName",NID_countryName,3,&(lvalues[88]),0},
! {"L","localityName",NID_localityName,3,&(lvalues[91]),0},
! {"SP","stateOrProvinceName",NID_stateOrProvinceName,3,&(lvalues[94]),0},
! {"O","organizationName",NID_organizationName,3,&(lvalues[97]),0},
  {"OU","organizationalUnitName",NID_organizationalUnitName,3,
! 	&(lvalues[100]),0},
! {"RSA","rsa",NID_rsa,4,&(lvalues[103]),0},
! {"pkcs7","pkcs7",NID_pkcs7,8,&(lvalues[107]),0},
! {"pkcs7-data","pkcs7-data",NID_pkcs7_data,9,&(lvalues[115]),0},
  {"pkcs7-signedData","pkcs7-signedData",NID_pkcs7_signed,9,
! 	&(lvalues[124]),0},
  {"pkcs7-envelopedData","pkcs7-envelopedData",NID_pkcs7_enveloped,9,
! 	&(lvalues[133]),0},
  {"pkcs7-signedAndEnvelopedData","pkcs7-signedAndEnvelopedData",
! 	NID_pkcs7_signedAndEnveloped,9,&(lvalues[142]),0},
  {"pkcs7-digestData","pkcs7-digestData",NID_pkcs7_digest,9,
! 	&(lvalues[151]),0},
  {"pkcs7-encryptedData","pkcs7-encryptedData",NID_pkcs7_encrypted,9,
! 	&(lvalues[160]),0},
! {"pkcs3","pkcs3",NID_pkcs3,8,&(lvalues[169]),0},
! {"dhKeyAgreement","dhKeyAgreement",NID_dhKeyAgreement,9,
! 	&(lvalues[177]),0},
! {"DES-ECB","des-ecb",NID_des_ecb,5,&(lvalues[186]),0},
! {"DES-CFB","des-cfb",NID_des_cfb,5,&(lvalues[191]),0},
! {"DES-CBC","des-cbc",NID_des_cbc,5,&(lvalues[196]),0},
  {"DES-EDE","des-ede",NID_des_ede,0,NULL},
! {"DES-EDE3","des-ede3",NID_des_ede3,8,&(lvalues[201]),0},
  {"IDEA-CBC","idea-cbc",NID_idea_cbc,0,NULL},
  {"IDEA-CFB","idea-cfb",NID_idea_cfb,0,NULL},
  {"IDEA-ECB","idea-ecb",NID_idea_ecb,0,NULL},
! {"RC2-CBC","rc2-cbc",NID_rc2_cbc,8,&(lvalues[209]),0},
  {"RC2-ECB","rc2-ecb",NID_rc2_ecb,0,NULL},
  {"RC2-CFB","rc2-cfb",NID_rc2_cfb,0,NULL},
  {"RC2-OFB","rc2-ofb",NID_rc2_ofb,0,NULL},
! {"SHA","sha",NID_sha,5,&(lvalues[217]),0},
  {"RSA-SHA","shaWithRSAEncryption",NID_shaWithRSAEncryption,0,NULL},
  {"DES-EDE-CBC","des-ede-cbc",NID_des_ede_cbc,0,NULL},
! {"DES-EDE3-CBC","des-ede3-cbc",NID_des_ede3_cbc,8,&(lvalues[222]),0},
! {"DES-OFB","des-ofb",NID_des_ofb,5,&(lvalues[230]),0},
  {"IDEA-OFB","idea-ofb",NID_idea_ofb,0,NULL},
! {"pkcs9","pkcs9",NID_pkcs9,8,&(lvalues[235]),0},
! {"Email","emailAddress",NID_pkcs9_emailAddress,9,&(lvalues[243]),0},
  {"unstructuredName","unstructuredName",NID_pkcs9_unstructuredName,9,
! 	&(lvalues[252]),0},
! {"contentType","contentType",NID_pkcs9_contentType,9,&(lvalues[261]),0},
  {"messageDigest","messageDigest",NID_pkcs9_messageDigest,9,
! 	&(lvalues[270]),0},
! {"signingTime","signingTime",NID_pkcs9_signingTime,9,&(lvalues[279]),0},
  {"countersignature","countersignature",NID_pkcs9_countersignature,9,
! 	&(lvalues[288]),0},
  {"challengePassword","challengePassword",NID_pkcs9_challengePassword,
! 	9,&(lvalues[297]),0},
  {"unstructuredAddress","unstructuredAddress",
! 	NID_pkcs9_unstructuredAddress,9,&(lvalues[306]),0},
  {"extendedCertificateAttributes","extendedCertificateAttributes",
! 	NID_pkcs9_extCertAttributes,9,&(lvalues[315]),0},
! {"Netscape","Netscape Communications Corp.",NID_netscape,7,
! 	&(lvalues[324]),0},
! {"nsCertExt","Netscape Certificate Extension",
! 	NID_netscape_cert_extension,8,&(lvalues[331]),0},
! {"nsDataType","Netscape Data Type",NID_netscape_data_type,8,
! 	&(lvalues[339]),0},
  {"DES-EDE-CFB","des-ede-cfb",NID_des_ede_cfb,0,NULL},
  {"DES-EDE3-CFB","des-ede3-cfb",NID_des_ede3_cfb,0,NULL},
  {"DES-EDE-OFB","des-ede-ofb",NID_des_ede_ofb,0,NULL},
  {"DES-EDE3-OFB","des-ede3-ofb",NID_des_ede3_ofb,0,NULL},
! {"SHA1","sha1",NID_sha1,5,&(lvalues[347]),0},
  {"RSA-SHA1","sha1WithRSAEncryption",NID_sha1WithRSAEncryption,0,NULL},
! {"DSS-SHA","shaWithDSSEncryption",NID_dsaWithSHA,5,&(lvalues[352]),0},
! {"DSS","dssEncryption",NID_dss,5,&(lvalues[357]),0},
  {"pbeWithSHA1AndRC2-CBC","pbeWithSHA1AndRC2-CBC",
! 	NID_pbeWithSHA1AndRC2_CBC,9,&(lvalues[362]),0},
  {"pbeWithSHA1AndRC4","pbeWithSHA1AndRC4",NID_pbeWithSHA1AndRC4,9,
! 	&(lvalues[371]),0},
  {"DSS-SHA1","sha1WithDSSEncryption",NID_dsaWithSHA1,0,NULL},
+ {"nsCertType","Netscape Cert Type",NID_netscape_cert_type,9,
+ 	&(lvalues[380]),0},
+ {"nsBaseUrl","Netscape Base Url",NID_netscape_base_url,9,
+ 	&(lvalues[389]),0},
+ {"nsRevocationUrl","Netscape Revocation Url",
+ 	NID_netscape_revocation_url,9,&(lvalues[398]),0},
+ {"nsCaRevocationUrl","Netscape CA Revocation Url",
+ 	NID_netscape_ca_revocation_url,9,&(lvalues[407]),0},
+ {"nsRenewalUrl","Netscape Renewal Url",NID_netscape_renewal_url,9,
+ 	&(lvalues[416]),0},
+ {"nsCaPolicyUrl","Netscape CA Policy Url",NID_netscape_ca_policy_url,
+ 	9,&(lvalues[425]),0},
+ {"nsSslServerName","Netscape SSL Server Name",
+ 	NID_netscape_ssl_server_name,9,&(lvalues[434]),0},
+ {"nsComment","Netscape Comment",NID_netscape_comment,9,&(lvalues[443]),0},
+ {"nsCertSequence","Netscape Certificate Sequence",
+ 	NID_netscape_cert_sequence,9,&(lvalues[452]),0},
+ {"DESX-CBC","desx-cbc",NID_desx_cbc,0,NULL},
  };
  
  static ASN1_OBJECT *sn_objs[NUM_SN]={
***************
*** 220,225 ****
--- 250,256 ----
  &(nid_objs[61]),/* "DES-EDE3-CFB" */
  &(nid_objs[63]),/* "DES-EDE3-OFB" */
  &(nid_objs[45]),/* "DES-OFB" */
+ &(nid_objs[80]),/* "DESX-CBC" */
  &(nid_objs[67]),/* "DSS" */
  &(nid_objs[66]),/* "DSS-SHA" */
  &(nid_objs[70]),/* "DSS-SHA1" */
***************
*** 248,257 ****
--- 279,310 ----
  &(nid_objs[64]),/* "SHA1" */
  &(nid_objs[16]),/* "SP" */
  &(nid_objs[ 0]),/* "UNDEF" */
+ &(nid_objs[72]),/* "nsBaseUrl" */
+ &(nid_objs[76]),/* "nsCaPolicyUrl" */
+ &(nid_objs[74]),/* "nsCaRevocationUrl" */
+ &(nid_objs[58]),/* "nsCertExt" */
+ &(nid_objs[79]),/* "nsCertSequence" */
+ &(nid_objs[71]),/* "nsCertType" */
+ &(nid_objs[78]),/* "nsComment" */
+ &(nid_objs[59]),/* "nsDataType" */
+ &(nid_objs[75]),/* "nsRenewalUrl" */
+ &(nid_objs[73]),/* "nsRevocationUrl" */
+ &(nid_objs[77]),/* "nsSslServerName" */
  };
  
  static ASN1_OBJECT *ln_objs[NUM_LN]={
+ &(nid_objs[72]),/* "Netscape Base Url" */
+ &(nid_objs[76]),/* "Netscape CA Policy Url" */
+ &(nid_objs[74]),/* "Netscape CA Revocation Url" */
+ &(nid_objs[71]),/* "Netscape Cert Type" */
+ &(nid_objs[58]),/* "Netscape Certificate Extension" */
+ &(nid_objs[79]),/* "Netscape Certificate Sequence" */
+ &(nid_objs[78]),/* "Netscape Comment" */
  &(nid_objs[57]),/* "Netscape Communications Corp." */
+ &(nid_objs[59]),/* "Netscape Data Type" */
+ &(nid_objs[75]),/* "Netscape Renewal Url" */
+ &(nid_objs[73]),/* "Netscape Revocation Url" */
+ &(nid_objs[77]),/* "Netscape SSL Server Name" */
  &(nid_objs[11]),/* "X500" */
  &(nid_objs[12]),/* "X509" */
  &(nid_objs[54]),/* "challengePassword" */
***************
*** 271,276 ****
--- 324,330 ----
  &(nid_objs[61]),/* "des-ede3-cfb" */
  &(nid_objs[63]),/* "des-ede3-ofb" */
  &(nid_objs[45]),/* "des-ofb" */
+ &(nid_objs[80]),/* "desx-cbc" */
  &(nid_objs[28]),/* "dhKeyAgreement" */
  &(nid_objs[67]),/* "dssEncryption" */
  &(nid_objs[48]),/* "emailAddress" */
***************
*** 285,292 ****
  &(nid_objs[ 4]),/* "md5" */
  &(nid_objs[ 8]),/* "md5withRSAEncryption" */
  &(nid_objs[51]),/* "messageDigest" */
- &(nid_objs[58]),/* "ns-gif-2" */
- &(nid_objs[59]),/* "ns-gif-3" */
  &(nid_objs[17]),/* "organizationName" */
  &(nid_objs[18]),/* "organizationalUnitName" */
  &(nid_objs[ 9]),/* "pbeWithMD2AndDES-CBC" */
--- 339,344 ----
***************
*** 342,352 ****
  &(nid_objs[66]),/* OBJ_dsaWithSHA                   1 3 14 3 2 12 */
  &(nid_objs[67]),/* OBJ_dss                          1 3 14 3 2 13 */
  &(nid_objs[41]),/* OBJ_sha                          1 3 14 3 2 18 */
- &(nid_objs[57]),/* OBJ_netscape                     2 16 840 11370 */
  &(nid_objs[ 1]),/* OBJ_rsadsi                       1 2 840 113549 */
  &(nid_objs[ 2]),/* OBJ_pkcs                         1 2 840 113549 1 */
! &(nid_objs[58]),/* OBJ_netscape_gif2                2 16 840 11370 1 2 */
! &(nid_objs[59]),/* OBJ_netscape_gif3                2 16 840 11370 1 3 */
  &(nid_objs[27]),/* OBJ_pkcs3                        1 2 840 113549 1 3 */
  &(nid_objs[20]),/* OBJ_pkcs7                        1 2 840 113549 1 7 */
  &(nid_objs[47]),/* OBJ_pkcs9                        1 2 840 113549 1 9 */
--- 394,402 ----
  &(nid_objs[66]),/* OBJ_dsaWithSHA                   1 3 14 3 2 12 */
  &(nid_objs[67]),/* OBJ_dss                          1 3 14 3 2 13 */
  &(nid_objs[41]),/* OBJ_sha                          1 3 14 3 2 18 */
  &(nid_objs[ 1]),/* OBJ_rsadsi                       1 2 840 113549 */
  &(nid_objs[ 2]),/* OBJ_pkcs                         1 2 840 113549 1 */
! &(nid_objs[57]),/* OBJ_netscape                     2 16 840 1 113730 */
  &(nid_objs[27]),/* OBJ_pkcs3                        1 2 840 113549 1 3 */
  &(nid_objs[20]),/* OBJ_pkcs7                        1 2 840 113549 1 7 */
  &(nid_objs[47]),/* OBJ_pkcs9                        1 2 840 113549 1 9 */
***************
*** 356,361 ****
--- 406,413 ----
  &(nid_objs[ 5]),/* OBJ_rc4                          1 2 840 113549 3 4 */
  &(nid_objs[44]),/* OBJ_des_ede3_cbc                 1 2 840 113549 3 7 */
  &(nid_objs[33]),/* OBJ_des_ede3                     1 2 840 113549 3 17 */
+ &(nid_objs[58]),/* OBJ_netscape_cert_extension      2 16 840 1 113730 1 */
+ &(nid_objs[59]),/* OBJ_netscape_data_type           2 16 840 1 113730 2 */
  &(nid_objs[ 6]),/* OBJ_rsaEncryption                1 2 840 113549 1 1 1 */
  &(nid_objs[ 7]),/* OBJ_md2withRSAEncryption         1 2 840 113549 1 1 2 */
  &(nid_objs[ 8]),/* OBJ_md5withRSAEncryption         1 2 840 113549 1 1 4 */
***************
*** 379,383 ****
--- 431,444 ----
  &(nid_objs[54]),/* OBJ_pkcs9_challengePassword      1 2 840 113549 1 9 7 */
  &(nid_objs[55]),/* OBJ_pkcs9_unstructuredAddress    1 2 840 113549 1 9 8 */
  &(nid_objs[56]),/* OBJ_pkcs9_extCertAttributes      1 2 840 113549 1 9 9 */
+ &(nid_objs[71]),/* OBJ_netscape_cert_type           2 16 840 1 113730 1 1 */
+ &(nid_objs[72]),/* OBJ_netscape_base_url            2 16 840 1 113730 1 2 */
+ &(nid_objs[73]),/* OBJ_netscape_revocation_url      2 16 840 1 113730 1 3 */
+ &(nid_objs[74]),/* OBJ_netscape_ca_revocation_url   2 16 840 1 113730 1 4 */
+ &(nid_objs[75]),/* OBJ_netscape_renewal_url         2 16 840 1 113730 1 7 */
+ &(nid_objs[76]),/* OBJ_netscape_ca_policy_url       2 16 840 1 113730 1 8 */
+ &(nid_objs[77]),/* OBJ_netscape_ssl_server_name     2 16 840 1 113730 1 12 */
+ &(nid_objs[78]),/* OBJ_netscape_comment             2 16 840 1 113730 1 13 */
+ &(nid_objs[79]),/* OBJ_netscape_cert_sequence       2 16 840 1 113730 2 5 */
  };
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/objects/obj_dat.pl	Wed Jul 10 09:47:21 1996
--- ./crypto/objects/obj_dat.pl	Wed Jul 17 15:43:55 1996
***************
*** 98,104 ****
  
  			push(@lvalues,sprintf("%-45s/* [%3d] %s */\n",
  				$z,$lvalues,$obj{$nid{$i}}));
! 			$out.="$length,&(lvalues[$lvalues])";
  			$lvalues+=$length;
  			}
  		else
--- 98,104 ----
  
  			push(@lvalues,sprintf("%-45s/* [%3d] %s */\n",
  				$z,$lvalues,$obj{$nid{$i}}));
! 			$out.="$length,&(lvalues[$lvalues]),0";
  			$lvalues+=$length;
  			}
  		else
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/objects/obj_lib.c	Wed Jul 10 09:47:21 1996
--- ./crypto/objects/obj_lib.c	Wed Jul 24 23:21:13 1996
***************
*** 74,79 ****
--- 74,80 ----
  	r->nid=o->nid;
  	r->ln=o->ln;
  	r->sn=o->sn;
+ 	r->dynamic=1;
  	return(r);
  	}
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/pem/pem_info.c	Wed Jul 10 09:47:22 1996
--- ./crypto/pem/pem_info.c	Wed Jul 17 16:45:56 1996
***************
*** 133,138 ****
--- 133,140 ----
  			d2i=(char *(*)())d2i_RSAPrivateKey;
  			if (xi->x_pkey != NULL) X509_PKEY_free(xi->x_pkey);
  			xi->x_pkey=X509_PKEY_new();
+ 			if ((xi->x_pkey->dec_pkey=EVP_PKEY_new()) == NULL)
+ 				goto err;
  			xi->x_pkey->dec_pkey->type=EVP_PKEY_RSA;
  			pp=(char **)&(xi->x_pkey->dec_pkey->pkey.rsa);
  			if ((int)strlen(header) > 10) /* assume encrypted */
***************
*** 143,148 ****
--- 145,152 ----
  			d2i=(char *(*)())d2i_DSAPrivateKey;
  			if (xi->x_pkey != NULL) X509_PKEY_free(xi->x_pkey);
  			xi->x_pkey=X509_PKEY_new();
+ 			if ((xi->x_pkey->dec_pkey=EVP_PKEY_new()) == NULL)
+ 				goto err;
  			xi->x_pkey->dec_pkey->type=EVP_PKEY_DSA;
  			pp=(char **)&(xi->x_pkey->dec_pkey->pkey.dsa);
  			if ((int)strlen(header) > 10) /* assume encrypted */
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/pem/pem_lib.c	Fri Jul 12 09:28:27 1996
--- ./crypto/pem/pem_lib.c	Wed Jul 24 07:56:41 1996
***************
*** 60,66 ****
  #include "des.h"
  #endif
  
! char *PEM_version="PEM part of SSLeay 0.6.1 12-Jul-1996";
  
  #define MIN_LENGTH	4
  
--- 60,66 ----
  #include "des.h"
  #endif
  
! char *PEM_version="PEM part of SSLeay 0.6.2 24-Jul-1996";
  
  #define MIN_LENGTH	4
  
***************
*** 92,101 ****
  	return(-1);
  #else
  	int i,j;
  
  	for (;;)
  		{
! 		i=EVP_read_pw_string(buf,num,"Enter PEM pass phrase:",w);
  		if (i != 0)
  			{
  			PEMerr(PEM_F_DEF_CALLBACK,PEM_R_PROBLEMS_GETTING_PASSWORD);
--- 92,106 ----
  	return(-1);
  #else
  	int i,j;
+ 	char *prompt;
  
+ 	prompt=EVP_get_pw_prompt();
+ 	if (prompt == NULL)
+ 		prompt="Enter PEM pass phrase:";
+ 
  	for (;;)
  		{
! 		i=EVP_read_pw_string(buf,num,prompt,w);
  		if (i != 0)
  			{
  			PEMerr(PEM_F_DEF_CALLBACK,PEM_R_PROBLEMS_GETTING_PASSWORD);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/pem/pem_seal.c	Wed Jul 10 09:47:23 1996
--- ./crypto/pem/pem_seal.c	Wed Jul 17 16:45:57 1996
***************
*** 65,71 ****
  int npubk;
  	{
  	unsigned char key[EVP_MAX_KEY_LENGTH];
! 	int ret=-1;
  	int i,j,max=0;
  	char *s=NULL;
  
--- 65,71 ----
  int npubk;
  	{
  	unsigned char key[EVP_MAX_KEY_LENGTH];
! 	int ret= -1;
  	int i,j,max=0;
  	char *s=NULL;
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/rand/md5_rand.c	Fri Jul 12 09:28:28 1996
--- ./crypto/rand/md5_rand.c	Wed Jul 24 07:56:41 1996
***************
*** 71,77 ****
  static unsigned char md[MD5_DIGEST_LENGTH];
  static int count=0;
  
! char *RAND_version="RAND part of SSLeay 0.6.1 12-Jul-1996";
  
  void RAND_cleanup()
  	{
--- 71,77 ----
  static unsigned char md[MD5_DIGEST_LENGTH];
  static int count=0;
  
! char *RAND_version="RAND part of SSLeay 0.6.2 24-Jul-1996";
  
  void RAND_cleanup()
  	{
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/rc2/rc2cfb64.c	Wed Jul 10 09:47:25 1996
--- ./crypto/rc2/rc2cfb64.c	Wed Jul 17 16:45:58 1996
***************
*** 63,69 ****
  int encrypt;
  	{
  	register unsigned long v0,v1,t;
! 	register int n=*num;
  	register long l=length;
  	unsigned long ti[2];
  	unsigned char *iv,c,cc;
--- 63,69 ----
  int encrypt;
  	{
  	register unsigned long v0,v1,t;
! 	register int n= *num;
  	register long l=length;
  	unsigned long ti[2];
  	unsigned char *iv,c,cc;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/rc2/rc2ofb64.c	Wed Jul 10 09:47:25 1996
--- ./crypto/rc2/rc2ofb64.c	Wed Jul 17 16:45:58 1996
***************
*** 61,67 ****
  int *num;
  	{
  	register unsigned long v0,v1,t;
! 	register int n=*num;
  	register long l=length;
  	unsigned char d[8];
  	register char *dp;
--- 61,67 ----
  int *num;
  	{
  	register unsigned long v0,v1,t;
! 	register int n= *num;
  	register long l=length;
  	unsigned char d[8];
  	register char *dp;
***************
*** 87,93 ****
  			t=ti[1]; l2c(t,dp);
  			save++;
  			}
! 		*(out++)=*(in++)^d[n];
  		n=(n+1)&0x07;
  		}
  	if (save)
--- 87,93 ----
  			t=ti[1]; l2c(t,dp);
  			save++;
  			}
! 		*(out++)= *(in++)^d[n];
  		n=(n+1)&0x07;
  		}
  	if (save)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/rc2/rc2_ecb.c	Fri Jul 12 09:28:27 1996
--- ./crypto/rc2/rc2_ecb.c	Wed Jul 24 07:56:41 1996
***************
*** 48,54 ****
  #include "rc2.h"
  #include "rc2_locl.h"
  
! char *RC2_version="RC2 part of SSLeay 0.6.1 12-Jul-1996";
  
  /* RC2 as implemented frm a posting from
   * Newsgroups: sci.crypt
--- 48,54 ----
  #include "rc2.h"
  #include "rc2_locl.h"
  
! char *RC2_version="RC2 part of SSLeay 0.6.2 24-Jul-1996";
  
  /* RC2 as implemented frm a posting from
   * Newsgroups: sci.crypt
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/rc2/rc2_skey.c	Wed Jul 10 09:47:25 1996
--- ./crypto/rc2/rc2_skey.c	Wed Jul 17 16:45:58 1996
***************
*** 82,88 ****
  	RC2_INT *k,*kk,tmp;
  	unsigned int c,d;
  
! 	kk=k=&(key->data[0]);
  	*k=0; /* for if there is a zero length key */
  
  	if (len > 128) len=128;
--- 82,88 ----
  	RC2_INT *k,*kk,tmp;
  	unsigned int c,d;
  
! 	kk=k= &(key->data[0]);
  	*k=0; /* for if there is a zero length key */
  
  	if (len > 128) len=128;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/rc4/rc4_enc.c	Fri Jul 12 17:21:05 1996
--- ./crypto/rc4/rc4_enc.c	Thu Jul 25 16:20:04 1996
***************
*** 58,64 ****
   * speedup on x86 */
  #undef RC4_INDEX
  
! char *RC4_version="RC4 part of SSLeay 0.6.1 12-Jul-1996";
  
  char *RC4_options()
  	{
--- 58,64 ----
   * speedup on x86 */
  #undef RC4_INDEX
  
! char *RC4_version="RC4 part of SSLeay 0.6.2 24-Jul-1996";
  
  char *RC4_options()
  	{
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/rc4/rc4_enc.org	Fri Jul 12 09:28:27 1996
--- ./crypto/rc4/rc4_enc.org	Wed Jul 24 07:56:41 1996
***************
*** 58,64 ****
   * speedup on x86 */
  #undef RC4_INDEX
  
! char *RC4_version="RC4 part of SSLeay 0.6.1 12-Jul-1996";
  
  char *RC4_options()
  	{
--- 58,64 ----
   * speedup on x86 */
  #undef RC4_INDEX
  
! char *RC4_version="RC4 part of SSLeay 0.6.2 24-Jul-1996";
  
  char *RC4_options()
  	{
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/rsa/rsa_enc.c	Wed Jul 10 09:47:27 1996
--- ./crypto/rsa/rsa_enc.c	Wed Jul 17 16:45:58 1996
***************
*** 65,71 ****
  RSA *rsa;
  	{
  	BIGNUM *f=NULL,*ret=NULL;
! 	int i,j,k,num=0,r=-1;
  	unsigned char *p;
  	unsigned char *buf=NULL;
  	BN_CTX *ctx;
--- 65,71 ----
  RSA *rsa;
  	{
  	BIGNUM *f=NULL,*ret=NULL;
! 	int i,j,k,num=0,r= -1;
  	unsigned char *p;
  	unsigned char *buf=NULL;
  	BN_CTX *ctx;
***************
*** 139,145 ****
  RSA *rsa;
  	{
  	BIGNUM *f=NULL,*ret=NULL;
! 	int i,j,k,num=0,r=-1;
  	unsigned char *p;
  	unsigned char *buf=NULL;
  	BN_CTX *ctx;
--- 139,145 ----
  RSA *rsa;
  	{
  	BIGNUM *f=NULL,*ret=NULL;
! 	int i,j,k,num=0,r= -1;
  	unsigned char *p;
  	unsigned char *buf=NULL;
  	BN_CTX *ctx;
***************
*** 213,219 ****
  RSA *rsa;
  	{
  	BIGNUM *f=NULL,*ret=NULL;
! 	int i,j,num=0,r=-1;
  	unsigned char *p;
  	unsigned char *buf=NULL;
  	BN_CTX *ctx;
--- 213,219 ----
  RSA *rsa;
  	{
  	BIGNUM *f=NULL,*ret=NULL;
! 	int i,j,num=0,r= -1;
  	unsigned char *p;
  	unsigned char *buf=NULL;
  	BN_CTX *ctx;
***************
*** 302,308 ****
  RSA *rsa;
  	{
  	BIGNUM *f=NULL,*ret=NULL;
! 	int i,j,num=0,r=-1;
  	unsigned char *p;
  	unsigned char *buf=NULL;
  	BN_CTX *ctx;
--- 302,308 ----
  RSA *rsa;
  	{
  	BIGNUM *f=NULL,*ret=NULL;
! 	int i,j,num=0,r= -1;
  	unsigned char *p;
  	unsigned char *buf=NULL;
  	BN_CTX *ctx;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/rsa/rsa_gen.c	Wed Jul 10 09:47:27 1996
--- ./crypto/rsa/rsa_gen.c	Wed Jul 17 16:45:59 1996
***************
*** 58,64 ****
  	{
  	RSA *rsa=NULL;
  	BIGNUM *r0=NULL,*r1=NULL,*r2=NULL,*r3=NULL,*tmp;
! 	int bitsp,bitsq,ok=-1,n=0;
  	BN_CTX *ctx=NULL,*ctx2=NULL;
  
  	ctx=BN_CTX_new();
--- 58,64 ----
  	{
  	RSA *rsa=NULL;
  	BIGNUM *r0=NULL,*r1=NULL,*r2=NULL,*r3=NULL,*tmp;
! 	int bitsp,bitsq,ok= -1,n=0;
  	BN_CTX *ctx=NULL,*ctx2=NULL;
  
  	ctx=BN_CTX_new();
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/rsa/rsa_lib.c	Fri Jul 12 09:28:27 1996
--- ./crypto/rsa/rsa_lib.c	Wed Jul 24 07:56:41 1996
***************
*** 50,56 ****
  #include "bn.h"
  #include "rsa.h"
  
! char *RSA_version="RSA part of SSLeay 0.6.1 12-Jul-1996";
  
  RSA *RSA_new()
  	{
--- 50,56 ----
  #include "bn.h"
  #include "rsa.h"
  
! char *RSA_version="RSA part of SSLeay 0.6.2 24-Jul-1996";
  
  RSA *RSA_new()
  	{
***************
*** 79,93 ****
  void RSA_free(r)
  RSA *r;
  	{
  	if (r == NULL) return;
  
! 	CRYPTO_w_lock(CRYPTO_LOCK_RSA);
! 	if (--r->references > 0)
! 		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_RSA);
! 		return;
! 		}
! 	CRYPTO_w_unlock(CRYPTO_LOCK_RSA);
  
  	if (r->n != NULL) BN_clear_free(r->n);
  	if (r->e != NULL) BN_clear_free(r->e);
--- 79,90 ----
  void RSA_free(r)
  RSA *r;
  	{
+ 	int i;
+ 
  	if (r == NULL) return;
  
! 	i=CRYPTO_add(&r->references,-1,CRYPTO_LOCK_RSA);
! 	if (i > 0) return;
  
  	if (r->n != NULL) BN_clear_free(r->n);
  	if (r->e != NULL) BN_clear_free(r->e);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/sha/sha1dgst.c	Fri Jul 12 09:28:28 1996
--- ./crypto/sha/sha1dgst.c	Wed Jul 24 07:56:41 1996
***************
*** 51,57 ****
  #include "sha.h"
  #include "sha_locl.h"
  
! char *SHA1_version="SHA1 part of SSLeay 0.6.1 12-Jul-1996";
  
  /* Implemented from SHA-1 document - The Secure Hash Algorithm
   */
--- 51,57 ----
  #include "sha.h"
  #include "sha_locl.h"
  
! char *SHA1_version="SHA1 part of SSLeay 0.6.2 24-Jul-1996";
  
  /* Implemented from SHA-1 document - The Secure Hash Algorithm
   */
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/sha/sha_dgst.c	Fri Jul 12 09:28:28 1996
--- ./crypto/sha/sha_dgst.c	Wed Jul 24 07:56:41 1996
***************
*** 51,57 ****
  #include "sha.h"
  #include "sha_locl.h"
  
! char *SHA_version="SHA part of SSLeay 0.6.1 12-Jul-1996";
  
  /* Implemented from SHA document - The Secure Hash Algorithm
   */
--- 51,57 ----
  #include "sha.h"
  #include "sha_locl.h"
  
! char *SHA_version="SHA part of SSLeay 0.6.2 24-Jul-1996";
  
  /* Implemented from SHA document - The Secure Hash Algorithm
   */
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/stack/stack.c	Fri Jul 12 09:28:28 1996
--- ./crypto/stack/stack.c	Wed Jul 24 07:56:41 1996
***************
*** 58,64 ****
  #undef MIN_NODES
  #define MIN_NODES	4
  
! char *STACK_version="STACK part of SSLeay 0.6.1 12-Jul-1996";
  
  #ifndef NOPROTO
  #define	FP_ICC	(int (*)(const void *,const void *))
--- 58,64 ----
  #undef MIN_NODES
  #define MIN_NODES	4
  
! char *STACK_version="STACK part of SSLeay 0.6.2 24-Jul-1996";
  
  #ifndef NOPROTO
  #define	FP_ICC	(int (*)(const void *,const void *))
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/txt_db/txt_db.c	Fri Jul 12 09:28:29 1996
--- ./crypto/txt_db/txt_db.c	Wed Jul 24 07:56:41 1996
***************
*** 54,60 ****
  #undef BUFSIZE
  #define BUFSIZE	512
  
! char *TXT_DB_version="TXT_DB part of SSLeay 0.6.1 12-Jul-1996";
  
  TXT_DB *TXT_DB_read(in,num)
  BIO *in;
--- 54,60 ----
  #undef BUFSIZE
  #define BUFSIZE	512
  
! char *TXT_DB_version="TXT_DB part of SSLeay 0.6.2 24-Jul-1996";
  
  TXT_DB *TXT_DB_read(in,num)
  BIO *in;
***************
*** 251,257 ****
  	long i,j,n,nn,l,tot=0;
  	char *p,**pp,*f;
  	BUF_MEM *buf=NULL;
! 	long ret=-1;
  
  	if ((buf=BUF_MEM_new()) == NULL)
  		goto err;
--- 251,257 ----
  	long i,j,n,nn,l,tot=0;
  	char *p,**pp,*f;
  	BUF_MEM *buf=NULL;
! 	long ret= -1;
  
  	if ((buf=BUF_MEM_new()) == NULL)
  		goto err;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/x509/x509.h	Wed Jul 10 09:47:30 1996
--- ./crypto/x509/x509.h	Sun Jul 21 00:18:57 1996
***************
*** 99,104 ****
--- 99,111 ----
  
  #define X509_NAME	STACK /* of X509_NAME_ENTRY */
  
+ typedef struct X509_extension_st
+ 	{
+ 	ASN1_OBJECT *object;
+ 	int critical;
+ 	ASN1_OCTET_STRING *value;
+ 	} X509_EXTENSION;
+ 
  typedef struct X509_req_info_st
  	{
  	ASN1_INTEGER *version;
***************
*** 128,134 ****
  	X509_PUBKEY *key;
  	ASN1_BIT_STRING *issuerUID;	/* [ 1 ] optional in v2 */
  	ASN1_BIT_STRING *subjectUID;	/* [ 2 ] optional in v2 */
! 	STACK *attributes;		/* [ 3 ] optional in v3 */
  	} X509_CINF;
  
  typedef struct x509_st
--- 135,141 ----
  	X509_PUBKEY *key;
  	ASN1_BIT_STRING *issuerUID;		/* [ 1 ] optional in v2 */
  	ASN1_BIT_STRING *subjectUID;		/* [ 2 ] optional in v2 */
! 	STACK /* X509_EXTENSION */ *extensions;	/* [ 3 ] optional in v3 */
  	} X509_CINF;
  
  typedef struct x509_st
***************
*** 148,158 ****
--- 155,167 ----
  
  typedef struct X509_crl_info_st
  	{
+ 	ASN1_INTEGER *version;
  	X509_ALGOR *sig_alg;
  	X509_NAME *issuer;
  	ASN1_UTCTIME *lastUpdate;
  	ASN1_UTCTIME *nextUpdate;
  	STACK /* X509_REVOKED */ *revoked;
+ 	STACK /* [0] X509_EXTENSION */ *extensions;
  	} X509_CRL_INFO;
  
  typedef struct X509_crl_st
***************
*** 306,312 ****
  #define X509_CRL_verify(a,r) ASN1_verify((int (*)())i2d_X509_CRL_INFO, \
  	a->sig_alg, a->signature,(char *)a->crl,r)
  
! #define NETSCAPE_SPKI_verify(a,r) ASN1_sign((int (*)())i2d_NETSCAPE_SPKAC, \
  		a->sig_algor,a->signature, (char *)a->spkac,r)
  
  #define X509_sign(x,pkey,md) \
--- 315,321 ----
  #define X509_CRL_verify(a,r) ASN1_verify((int (*)())i2d_X509_CRL_INFO, \
  	a->sig_alg, a->signature,(char *)a->crl,r)
  
! #define NETSCAPE_SPKI_verify(a,r) ASN1_verify((int (*)())i2d_NETSCAPE_SPKAC, \
  		a->sig_algor,a->signature, (char *)a->spkac,r)
  
  #define X509_sign(x,pkey,md) \
***************
*** 463,468 ****
--- 472,483 ----
  X509_ATTRIBUTE *d2i_X509_ATTRIBUTE(X509_ATTRIBUTE **a,unsigned char **pp,
  			long length);
  
+ X509_EXTENSION *X509_EXTENSION_new(void );
+ void		X509_EXTENSION_free(X509_EXTENSION *a);
+ int		i2d_X509_EXTENSION(X509_EXTENSION *a,unsigned char **pp);
+ X509_EXTENSION *d2i_X509_EXTENSION(X509_EXTENSION **a,unsigned char **pp,
+ 			long length);
+ 
  X509_NAME_ENTRY *X509_NAME_ENTRY_new(void);
  void		X509_NAME_ENTRY_free(X509_NAME_ENTRY *a);
  int		i2d_X509_NAME_ENTRY(X509_NAME_ENTRY *a,unsigned char **pp);
***************
*** 614,619 ****
--- 629,638 ----
  void		X509_ATTRIBUTE_free();
  int		i2d_X509_ATTRIBUTE();
  X509_ATTRIBUTE *d2i_X509_ATTRIBUTE();
+ X509_EXTENSION *X509_EXTENSION_new();
+ void		X509_EXTENSION_free();
+ int		i2d_X509_EXTENSION();
+ X509_EXTENSION *d2i_X509_EXTENSION();
  X509_NAME_ENTRY *X509_NAME_ENTRY_new();
  void		X509_NAME_ENTRY_free();
  int		i2d_X509_NAME_ENTRY();
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/x509/x509_ath.c	Wed Jul 10 09:47:30 1996
--- ./crypto/x509/x509_ath.c	Wed Jul 17 18:02:23 1996
***************
*** 75,81 ****
  	{
  	int i;
  
! 	CRYPTO_w_unlock(CRYPTO_LOCK_X509);
  	CRYPTO_w_lock(CRYPTO_LOCK_CERTIFICATE_CTX);
  
  	if (a->certs != NULL)
--- 75,81 ----
  	{
  	int i;
  
! 	CRYPTO_w_lock(CRYPTO_LOCK_X509);
  	CRYPTO_w_lock(CRYPTO_LOCK_CERTIFICATE_CTX);
  
  	if (a->certs != NULL)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/x509/x509_obj.c	Wed Jul 10 09:47:30 1996
--- ./crypto/x509/x509_obj.c	Wed Jul 17 16:46:01 1996
***************
*** 96,102 ****
  		lold=l;
  		l+=1+l1+1+l2;
  		if (!BUF_MEM_grow(b,l+1)) goto err;
! 		p=&(b->data[lold]);
  		*(p++)='/';
  		memcpy(p,s,(unsigned int)l1); p+=l1;
  		*(p++)='=';
--- 96,102 ----
  		lold=l;
  		l+=1+l1+1+l2;
  		if (!BUF_MEM_grow(b,l+1)) goto err;
! 		p= &(b->data[lold]);
  		*(p++)='/';
  		memcpy(p,s,(unsigned int)l1); p+=l1;
  		*(p++)='=';
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/x509/x509_r2x.c	Wed Jul 10 09:47:30 1996
--- ./crypto/x509/x509_r2x.c	Sun Jul 21 00:41:48 1996
***************
*** 83,90 ****
  		{
  		if ((xi->version=ASN1_INTEGER_new()) == NULL) goto err;
  		if (!ASN1_INTEGER_set(xi->version,2)) goto err;
! 		xi->attributes=ri->attributes;
! 		ri->attributes=NULL;
  		}
  
  	X509_NAME_free(xi->subject); 
--- 83,90 ----
  		{
  		if ((xi->version=ASN1_INTEGER_new()) == NULL) goto err;
  		if (!ASN1_INTEGER_set(xi->version,2)) goto err;
! /*		xi->extensions=ri->attributes; <- bad, should not ever be done
! 		ri->attributes=NULL; */
  		}
  
  	X509_NAME_free(xi->subject); 
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./crypto/x509/x509_vrf.c	Fri Jul 12 09:28:28 1996
--- ./crypto/x509/x509_vrf.c	Wed Jul 24 07:56:41 1996
***************
*** 78,84 ****
  void RSA_print_bytes();
  #endif
  
! char *X509_version="X509 part of SSLeay 0.6.1 12-Jul-1996";
  
  int X509_add_cert_file(ctx,file, type)
  CERTIFICATE_CTX *ctx;
--- 78,84 ----
  void RSA_print_bytes();
  #endif
  
! char *X509_version="X509 part of SSLeay 0.6.2 24-Jul-1996";
  
  int X509_add_cert_file(ctx,file, type)
  CERTIFICATE_CTX *ctx;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl.err	Wed Jul 10 09:46:32 1996
--- ./ssl/ssl.err	Sat Jul 20 23:41:13 1996
***************
*** 63,108 ****
  #define SSL_R_BAD_CHECKSUM				 101
  #define SSL_R_BAD_MAC_DECODE				 102
  #define SSL_R_BAD_RESPONSE_ARGUMENT			 103
! #define SSL_R_BAD_SSL_FILETYPE				 104
! #define SSL_R_BAD_SSL_SESSION_ID_LENGTH			 105
! #define SSL_R_BAD_STATE					 106
! #define SSL_R_BAD_WRITE_RETRY				 107
! #define SSL_R_CHALLENGE_IS_DIFFERENT			 108
! #define SSL_R_CIPHER_CODE_TOO_LONG			 109
! #define SSL_R_CIPHER_TABLE_SRC_ERROR			 110
! #define SSL_R_CONECTION_ID_IS_DIFFERENT			 111
! #define SSL_R_INVALID_CHALLENGE_LENGTH			 112
! #define SSL_R_NO_CERTIFICATE_SET			 113
! #define SSL_R_NO_CERTIFICATE_SPECIFIED			 114
! #define SSL_R_NO_CIPHER_LIST				 115
! #define SSL_R_NO_CIPHER_MATCH				 116
! #define SSL_R_NO_CIPHER_WE_TRUST			 117
! #define SSL_R_NO_PRIVATEKEY				 118
! #define SSL_R_NO_PUBLICKEY				 119
! #define SSL_R_NO_READ_METHOD_SET			 120
! #define SSL_R_NO_WRITE_METHOD_SET			 121
! #define SSL_R_NULL_SSL_CTX				 122
! #define SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE		 123
! #define SSL_R_PEER_ERROR				 124
! #define SSL_R_PEER_ERROR_CERTIFICATE			 125
! #define SSL_R_PEER_ERROR_NO_CIPHER			 126
! #define SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE	 127
! #define SSL_R_PERR_ERROR_NO_CERTIFICATE			 128
! #define SSL_R_PUBLIC_KEY_ENCRYPT_ERROR			 129
! #define SSL_R_PUBLIC_KEY_IS_NOT_RSA			 130
! #define SSL_R_PUBLIC_KEY_NO_RSA				 131
! #define SSL_R_READ_WRONG_PACKET_TYPE			 132
! #define SSL_R_REVERSE_KEY_ARG_LENGTH_IS_WRONG		 133
! #define SSL_R_REVERSE_MASTER_KEY_LENGTH_IS_WRONG	 134
! #define SSL_R_REVERSE_SSL_SESSION_ID_LENGTH_IS_WRONG	 135
! #define SSL_R_SHORT_READ				 136
! #define SSL_R_SSL_SESSION_ID_IS_DIFFERENT		 137
! #define SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY		 138
! #define SSL_R_UNDEFINED_INIT_STATE			 139
! #define SSL_R_UNKNOWN_REMOTE_ERROR_TYPE			 140
! #define SSL_R_UNKNOWN_STATE				 141
! #define SSL_R_UNSUPORTED_CIPHER				 142
! #define SSL_R_X509_LIB					 143
  
  #ifdef  __cplusplus
  }
--- 63,109 ----
  #define SSL_R_BAD_CHECKSUM				 101
  #define SSL_R_BAD_MAC_DECODE				 102
  #define SSL_R_BAD_RESPONSE_ARGUMENT			 103
! #define SSL_R_BAD_RSA_DECRYPT				 104
! #define SSL_R_BAD_SSL_FILETYPE				 105
! #define SSL_R_BAD_SSL_SESSION_ID_LENGTH			 106
! #define SSL_R_BAD_STATE					 107
! #define SSL_R_BAD_WRITE_RETRY				 108
! #define SSL_R_CHALLENGE_IS_DIFFERENT			 109
! #define SSL_R_CIPHER_CODE_TOO_LONG			 110
! #define SSL_R_CIPHER_TABLE_SRC_ERROR			 111
! #define SSL_R_CONECTION_ID_IS_DIFFERENT			 112
! #define SSL_R_INVALID_CHALLENGE_LENGTH			 113
! #define SSL_R_NO_CERTIFICATE_SET			 114
! #define SSL_R_NO_CERTIFICATE_SPECIFIED			 115
! #define SSL_R_NO_CIPHER_LIST				 116
! #define SSL_R_NO_CIPHER_MATCH				 117
! #define SSL_R_NO_CIPHER_WE_TRUST			 118
! #define SSL_R_NO_PRIVATEKEY				 119
! #define SSL_R_NO_PUBLICKEY				 120
! #define SSL_R_NO_READ_METHOD_SET			 121
! #define SSL_R_NO_WRITE_METHOD_SET			 122
! #define SSL_R_NULL_SSL_CTX				 123
! #define SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE		 124
! #define SSL_R_PEER_ERROR				 125
! #define SSL_R_PEER_ERROR_CERTIFICATE			 126
! #define SSL_R_PEER_ERROR_NO_CIPHER			 127
! #define SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE	 128
! #define SSL_R_PERR_ERROR_NO_CERTIFICATE			 129
! #define SSL_R_PUBLIC_KEY_ENCRYPT_ERROR			 130
! #define SSL_R_PUBLIC_KEY_IS_NOT_RSA			 131
! #define SSL_R_PUBLIC_KEY_NO_RSA				 132
! #define SSL_R_READ_WRONG_PACKET_TYPE			 133
! #define SSL_R_REVERSE_KEY_ARG_LENGTH_IS_WRONG		 134
! #define SSL_R_REVERSE_MASTER_KEY_LENGTH_IS_WRONG	 135
! #define SSL_R_REVERSE_SSL_SESSION_ID_LENGTH_IS_WRONG	 136
! #define SSL_R_SHORT_READ				 137
! #define SSL_R_SSL_SESSION_ID_IS_DIFFERENT		 138
! #define SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY		 139
! #define SSL_R_UNDEFINED_INIT_STATE			 140
! #define SSL_R_UNKNOWN_REMOTE_ERROR_TYPE			 141
! #define SSL_R_UNKNOWN_STATE				 142
! #define SSL_R_UNSUPORTED_CIPHER				 143
! #define SSL_R_X509_LIB					 144
  
  #ifdef  __cplusplus
  }
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl.h	Wed Jul 10 09:46:32 1996
--- ./ssl/ssl.h	Wed Jul 24 14:26:47 1996
***************
*** 166,172 ****
  	 * the same as cert->x509 */
  	X509 *peer;
  
! 	unsigned int references;
  	unsigned long timeout;
  	unsigned long time;
  
--- 166,172 ----
  	 * the same as cert->x509 */
  	X509 *peer;
  
! 	int references;
  	unsigned long timeout;
  	unsigned long time;
  
***************
*** 210,216 ****
  	 * SSL_SESSION_free() when it has finished using it.  Otherwise,
  	 * on 0, it means the callback has finished with it. */
  #ifndef NOPROTO
! 	int (*new_session_cb)(SSL_SESSION *new);
  #else
  	int (*new_session_cb)();
  #endif
--- 210,216 ----
  	 * SSL_SESSION_free() when it has finished using it.  Otherwise,
  	 * on 0, it means the callback has finished with it. */
  #ifndef NOPROTO
! 	int (*new_session_cb)(SSL_SESSION *new_session);
  #else
  	int (*new_session_cb)();
  #endif
***************
*** 221,234 ****
  	SSL_SESSION *(*get_session_cb)();
  #endif
  
! 	long sess_connect;	/* SSL new (expensive) connection */
! 	long sess_connect_good;	/* SSL new (expensive) connection */
! 	long sess_accept;	/* SSL connection failues */
! 	long sess_accept_good;	/* SSL connection failues */
! 	long sess_miss;		/* session lookup misses  */
! 	long sess_timeout;	/* session reuse attempt on timeouted session */
! 	long sess_hit;		/* session reuse actually done */
! 	long sess_cb_hit;	/* session-id that was not in the cache was
  				 * passed back via the callback.  This
  				 * indicates that the application is supplying
  				 * session-id's from other processes -
--- 221,234 ----
  	SSL_SESSION *(*get_session_cb)();
  #endif
  
! 	int sess_connect;	/* SSL new (expensive) connection */
! 	int sess_connect_good;	/* SSL new (expensive) connection */
! 	int sess_accept;	/* SSL connection failues */
! 	int sess_accept_good;	/* SSL connection failues */
! 	int sess_miss;		/* session lookup misses  */
! 	int sess_timeout;	/* session reuse attempt on timeouted session */
! 	int sess_hit;		/* session reuse actually done */
! 	int sess_cb_hit;	/* session-id that was not in the cache was
  				 * passed back via the callback.  This
  				 * indicates that the application is supplying
  				 * session-id's from other processes -
***************
*** 262,267 ****
--- 262,270 ----
  	int default_read_ahead;
  	int default_verify_mode;
  	int (*default_verify_callback)();
+ 
+ 	/* Default password callback. */
+ 	int (*default_passwd_callback)();
  	} SSL_CTX;
  
  #define SSL_SESS_CACHE_OFF	0x00
***************
*** 548,553 ****
--- 551,559 ----
  /* this is for backward compatablility */
  #define SSL_get_pref_cipher(s,n)	SSL_get_cipher_list(s,n)
  #define SSL_set_pref_cipher(c,n)	SSL_set_cipher_list(c,n)
+ /* VMS linker has a 31 char name limit */
+ #define SSL_CTX_set_cert_verify_callback(a,b,c) \
+ 		SSL_CTX_set_cert_verify_cb((a),(b),(c))
  
  #ifndef NOPROTO
  #ifdef HEADER_BUFFER_H
***************
*** 632,638 ****
  #endif
  
  void SSL_CTX_set_default_verify(SSL_CTX *ctx,int mode,int (*callback)());
! void SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx, int (*cb)(),char *arg);
  int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);
  int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, unsigned char *d, long len);
  int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, char *file, int type);
--- 638,644 ----
  #endif
  
  void SSL_CTX_set_default_verify(SSL_CTX *ctx,int mode,int (*callback)());
! void SSL_CTX_set_cert_verify_cb(SSL_CTX *ctx, int (*cb)(),char *arg);
  int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);
  int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, unsigned char *d, long len);
  int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, char *file, int type);
***************
*** 644,649 ****
--- 650,657 ----
  int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, unsigned char *d);
  int SSL_CTX_use_certificate_file(SSL_CTX *ctx, char *file, int type);
  
+ void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx,int (*cb)());
+ 
  #else
  
  #ifdef HEADER_BUFFER_H
***************
*** 728,734 ****
  #endif
  
  void SSL_CTX_set_default_verify();
! void SSL_CTX_set_cert_verify_callback();
  int SSL_CTX_use_RSAPrivateKey();
  int SSL_CTX_use_RSAPrivateKey_ASN1();
  int SSL_CTX_use_RSAPrivateKey_file();
--- 736,742 ----
  #endif
  
  void SSL_CTX_set_default_verify();
! void SSL_CTX_set_cert_verify_cb();
  int SSL_CTX_use_RSAPrivateKey();
  int SSL_CTX_use_RSAPrivateKey_ASN1();
  int SSL_CTX_use_RSAPrivateKey_file();
***************
*** 739,744 ****
--- 747,754 ----
  int SSL_CTX_use_certificate_ASN1();
  int SSL_CTX_use_certificate_file();
  
+ void SSL_CTX_set_default_passwd_cb();
+ 
  #endif
  
  /* tjh added these two dudes to enable external control
***************
*** 813,858 ****
  #define SSL_R_BAD_CHECKSUM				 101
  #define SSL_R_BAD_MAC_DECODE				 102
  #define SSL_R_BAD_RESPONSE_ARGUMENT			 103
! #define SSL_R_BAD_SSL_FILETYPE				 104
! #define SSL_R_BAD_SSL_SESSION_ID_LENGTH			 105
! #define SSL_R_BAD_STATE					 106
! #define SSL_R_BAD_WRITE_RETRY				 107
! #define SSL_R_CHALLENGE_IS_DIFFERENT			 108
! #define SSL_R_CIPHER_CODE_TOO_LONG			 109
! #define SSL_R_CIPHER_TABLE_SRC_ERROR			 110
! #define SSL_R_CONECTION_ID_IS_DIFFERENT			 111
! #define SSL_R_INVALID_CHALLENGE_LENGTH			 112
! #define SSL_R_NO_CERTIFICATE_SET			 113
! #define SSL_R_NO_CERTIFICATE_SPECIFIED			 114
! #define SSL_R_NO_CIPHER_LIST				 115
! #define SSL_R_NO_CIPHER_MATCH				 116
! #define SSL_R_NO_CIPHER_WE_TRUST			 117
! #define SSL_R_NO_PRIVATEKEY				 118
! #define SSL_R_NO_PUBLICKEY				 119
! #define SSL_R_NO_READ_METHOD_SET			 120
! #define SSL_R_NO_WRITE_METHOD_SET			 121
! #define SSL_R_NULL_SSL_CTX				 122
! #define SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE		 123
! #define SSL_R_PEER_ERROR				 124
! #define SSL_R_PEER_ERROR_CERTIFICATE			 125
! #define SSL_R_PEER_ERROR_NO_CIPHER			 126
! #define SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE	 127
! #define SSL_R_PERR_ERROR_NO_CERTIFICATE			 128
! #define SSL_R_PUBLIC_KEY_ENCRYPT_ERROR			 129
! #define SSL_R_PUBLIC_KEY_IS_NOT_RSA			 130
! #define SSL_R_PUBLIC_KEY_NO_RSA				 131
! #define SSL_R_READ_WRONG_PACKET_TYPE			 132
! #define SSL_R_REVERSE_KEY_ARG_LENGTH_IS_WRONG		 133
! #define SSL_R_REVERSE_MASTER_KEY_LENGTH_IS_WRONG	 134
! #define SSL_R_REVERSE_SSL_SESSION_ID_LENGTH_IS_WRONG	 135
! #define SSL_R_SHORT_READ				 136
! #define SSL_R_SSL_SESSION_ID_IS_DIFFERENT		 137
! #define SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY		 138
! #define SSL_R_UNDEFINED_INIT_STATE			 139
! #define SSL_R_UNKNOWN_REMOTE_ERROR_TYPE			 140
! #define SSL_R_UNKNOWN_STATE				 141
! #define SSL_R_UNSUPORTED_CIPHER				 142
! #define SSL_R_X509_LIB					 143
  
  #ifdef  __cplusplus
  }
--- 823,869 ----
  #define SSL_R_BAD_CHECKSUM				 101
  #define SSL_R_BAD_MAC_DECODE				 102
  #define SSL_R_BAD_RESPONSE_ARGUMENT			 103
! #define SSL_R_BAD_RSA_DECRYPT				 104
! #define SSL_R_BAD_SSL_FILETYPE				 105
! #define SSL_R_BAD_SSL_SESSION_ID_LENGTH			 106
! #define SSL_R_BAD_STATE					 107
! #define SSL_R_BAD_WRITE_RETRY				 108
! #define SSL_R_CHALLENGE_IS_DIFFERENT			 109
! #define SSL_R_CIPHER_CODE_TOO_LONG			 110
! #define SSL_R_CIPHER_TABLE_SRC_ERROR			 111
! #define SSL_R_CONECTION_ID_IS_DIFFERENT			 112
! #define SSL_R_INVALID_CHALLENGE_LENGTH			 113
! #define SSL_R_NO_CERTIFICATE_SET			 114
! #define SSL_R_NO_CERTIFICATE_SPECIFIED			 115
! #define SSL_R_NO_CIPHER_LIST				 116
! #define SSL_R_NO_CIPHER_MATCH				 117
! #define SSL_R_NO_CIPHER_WE_TRUST			 118
! #define SSL_R_NO_PRIVATEKEY				 119
! #define SSL_R_NO_PUBLICKEY				 120
! #define SSL_R_NO_READ_METHOD_SET			 121
! #define SSL_R_NO_WRITE_METHOD_SET			 122
! #define SSL_R_NULL_SSL_CTX				 123
! #define SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE		 124
! #define SSL_R_PEER_ERROR				 125
! #define SSL_R_PEER_ERROR_CERTIFICATE			 126
! #define SSL_R_PEER_ERROR_NO_CIPHER			 127
! #define SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE	 128
! #define SSL_R_PERR_ERROR_NO_CERTIFICATE			 129
! #define SSL_R_PUBLIC_KEY_ENCRYPT_ERROR			 130
! #define SSL_R_PUBLIC_KEY_IS_NOT_RSA			 131
! #define SSL_R_PUBLIC_KEY_NO_RSA				 132
! #define SSL_R_READ_WRONG_PACKET_TYPE			 133
! #define SSL_R_REVERSE_KEY_ARG_LENGTH_IS_WRONG		 134
! #define SSL_R_REVERSE_MASTER_KEY_LENGTH_IS_WRONG	 135
! #define SSL_R_REVERSE_SSL_SESSION_ID_LENGTH_IS_WRONG	 136
! #define SSL_R_SHORT_READ				 137
! #define SSL_R_SSL_SESSION_ID_IS_DIFFERENT		 138
! #define SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY		 139
! #define SSL_R_UNDEFINED_INIT_STATE			 140
! #define SSL_R_UNKNOWN_REMOTE_ERROR_TYPE			 141
! #define SSL_R_UNKNOWN_STATE				 142
! #define SSL_R_UNSUPORTED_CIPHER				 143
! #define SSL_R_X509_LIB					 144
  
  #ifdef  __cplusplus
  }
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_auth.c	Wed Jul 10 09:46:33 1996
--- ./ssl/ssl_auth.c	Wed Jul 24 14:27:10 1996
***************
*** 136,141 ****
--- 136,143 ----
  	ret->default_verify_callback=NULL;
  	ret->default_cert=NULL;
  
+ 	ret->default_passwd_callback=NULL;
+ 
  	return(ret);
  err:
  	if (ret != NULL) SSL_CTX_free(ret);
***************
*** 145,159 ****
  void SSL_CTX_free(a)
  SSL_CTX *a;
  	{
  	if (a == NULL) return;
  
! 	CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
! 	if (--a->references > 0)
! 		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
! 		return;
! 		}
! 	CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
  
  	if (a->sessions != NULL)
  		{
--- 147,158 ----
  void SSL_CTX_free(a)
  SSL_CTX *a;
  	{
+ 	int i;
+ 
  	if (a == NULL) return;
  
! 	i=CRYPTO_add(&a->references,-1,CRYPTO_LOCK_SSL_CTX);
! 	if (i > 0) return;
  
  	if (a->sessions != NULL)
  		{
***************
*** 172,178 ****
  	free(a);
  	}
  
! void SSL_CTX_set_cert_verify_callback(ctx,cb,arg)
  SSL_CTX *ctx;
  int (*cb)();
  char *arg;
--- 171,184 ----
  	free(a);
  	}
  
! void SSL_CTX_set_default_passwd_cb(ctx,cb)
! SSL_CTX *ctx;
! int (*cb)();
! 	{
! 	ctx->default_passwd_callback=cb;
! 	}
! 
! void SSL_CTX_set_cert_verify_cb(ctx,cb,arg)
  SSL_CTX *ctx;
  int (*cb)();
  char *arg;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_cert.c	Fri Jul 12 12:50:55 1996
--- ./ssl/ssl_cert.c	Wed Jul 24 14:27:10 1996
***************
*** 73,85 ****
  void ssl_cert_free(c)
  CERT *c;
  	{
! 	CRYPTO_w_lock(CRYPTO_LOCK_SSL_CERT);
! 	if (--c->references > 0)
! 		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CERT);
! 		return;
! 		}
! 	CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CERT);
  
  	if (c->x509 != NULL) X509_free(c->x509);
  	if (c->privatekey != NULL) EVP_PKEY_free(c->privatekey);
--- 73,82 ----
  void ssl_cert_free(c)
  CERT *c;
  	{
! 	int i;
! 
! 	i=CRYPTO_add(&c->references,-1,CRYPTO_LOCK_SSL_CERT);
! 	if (i > 0) return;
  
  	if (c->x509 != NULL) X509_free(c->x509);
  	if (c->privatekey != NULL) EVP_PKEY_free(c->privatekey);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_clnt.c	Wed Jul 10 09:46:33 1996
--- ./ssl/ssl_clnt.c	Wed Jul 24 14:27:10 1996
***************
*** 116,128 ****
  		case SSL_ST_CONNECT:
  			if ((buf=BUF_MEM_new()) == NULL)
  				{
! 				ret=-1;
  				goto end;
  				}
  			if (!BUF_MEM_grow(buf,
  				SSL_MAX_RECORD_LENGTH_3_BYTE_HEADER))
  				{
! 				ret=-1;
  				goto end;
  				}
  			if (s->init_buf) free(s->init_buf);
--- 116,128 ----
  		case SSL_ST_CONNECT:
  			if ((buf=BUF_MEM_new()) == NULL)
  				{
! 				ret= -1;
  				goto end;
  				}
  			if (!BUF_MEM_grow(buf,
  				SSL_MAX_RECORD_LENGTH_3_BYTE_HEADER))
  				{
! 				ret= -1;
  				goto end;
  				}
  			if (s->init_buf) free(s->init_buf);
***************
*** 170,176 ****
  			 * start encrypting, so lets fire it up :-) */
  			if (!s->session->cipher->crypt_init(s,1))
  				{
! 				ret=-1;
  				goto end;
  				}
  			s->clear_text=0;
--- 170,176 ----
  			 * start encrypting, so lets fire it up :-) */
  			if (!s->session->cipher->crypt_init(s,1))
  				{
! 				ret= -1;
  				goto end;
  				}
  			s->clear_text=0;
***************
*** 225,239 ****
  				SSL_add_session(s->ctx,s->session) &&
  				(s->ctx->new_session_cb != NULL))
  				{
! 				CRYPTO_w_lock(CRYPTO_LOCK_SSL_SESSION);
! 				s->session->references++;
! 				CRYPTO_w_unlock(CRYPTO_LOCK_SSL_SESSION);
  
  				if (!s->ctx->new_session_cb(s->session))
  					{
! 					CRYPTO_w_lock(CRYPTO_LOCK_SSL_SESSION);
! 					s->session->references--;
! 					CRYPTO_w_unlock(CRYPTO_LOCK_SSL_SESSION);
  					}
  				}
  
--- 225,237 ----
  				SSL_add_session(s->ctx,s->session) &&
  				(s->ctx->new_session_cb != NULL))
  				{
! 				CRYPTO_add(&s->session->references,1,
! 					CRYPTO_LOCK_SSL_SESSION);
  
  				if (!s->ctx->new_session_cb(s->session))
  					{
! 					CRYPTO_add(&s->session->references,-1,
! 						CRYPTO_LOCK_SSL_SESSION);
  					}
  				}
  
***************
*** 395,404 ****
  
  	/* hmmm, can we have the problem of the other session with this
  	 * cert, free's it before we increment the reference count. */
  	CRYPTO_w_lock(CRYPTO_LOCK_X509);
  	s->session->peer=s->session->cert->x509;
  	s->session->peer->references++;
! 	CRYPTO_w_lock(CRYPTO_LOCK_X509);
  
  	/* get conn_id */
  	if (s->conn_id_length != s->state_conn_id_length)
--- 393,404 ----
  
  	/* hmmm, can we have the problem of the other session with this
  	 * cert, free's it before we increment the reference count. */
+ 	CRYPTO_w_lock(CRYPTO_LOCK_SSL_SESSION);
  	CRYPTO_w_lock(CRYPTO_LOCK_X509);
  	s->session->peer=s->session->cert->x509;
  	s->session->peer->references++;
! 	CRYPTO_w_unlock(CRYPTO_LOCK_X509);
! 	CRYPTO_w_unlock(CRYPTO_LOCK_SSL_SESSION);
  
  	/* get conn_id */
  	if (s->conn_id_length != s->state_conn_id_length)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_err.c	Wed Jul 10 09:46:33 1996
--- ./ssl/ssl_err.c	Wed Jul 24 14:27:10 1996
***************
*** 69,83 ****
  {ERR_PACK(0,SSL_F_SSL_ACCEPT,0),	"SSL_accept"},
  {ERR_PACK(0,SSL_F_SSL_CERT_NEW,0),	"SSL_CERT_NEW"},
  {ERR_PACK(0,SSL_F_SSL_CONNECT,0),	"SSL_connect"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_CERTIFICATE,0),	"SSL_CTX_USE_CERTIFICATE"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1,0),	"SSL_CTX_USE_CERTIFICATE_ASN1"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_CERTIFICATE_FILE,0),	"SSL_CTX_USE_CERTIFICATE_FILE"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_PRIVATEKEY,0),	"SSL_CTX_USE_PRIVATEKEY"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1,0),	"SSL_CTX_USE_PRIVATEKEY_ASN1"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE,0),	"SSL_CTX_USE_PRIVATEKEY_FILE"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_RSAPRIVATEKEY,0),	"SSL_CTX_USE_RSAPRIVATEKEY"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1,0),	"SSL_CTX_USE_RSAPRIVATEKEY_ASN1"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE,0),	"SSL_CTX_USE_RSAPRIVATEKEY_FILE"},
  {ERR_PACK(0,SSL_F_SSL_ENC_DES_CBC_INIT,0),	"SSL_ENC_DES_CBC_INIT"},
  {ERR_PACK(0,SSL_F_SSL_ENC_DES_CFB_INIT,0),	"SSL_ENC_DES_CFB_INIT"},
  {ERR_PACK(0,SSL_F_SSL_ENC_DES_EDE3_CBC_INIT,0),	"SSL_ENC_DES_EDE3_CBC_INIT"},
--- 69,83 ----
  {ERR_PACK(0,SSL_F_SSL_ACCEPT,0),	"SSL_accept"},
  {ERR_PACK(0,SSL_F_SSL_CERT_NEW,0),	"SSL_CERT_NEW"},
  {ERR_PACK(0,SSL_F_SSL_CONNECT,0),	"SSL_connect"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_CERTIFICATE,0),	"SSL_CTX_use_certificate"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1,0),	"SSL_CTX_use_certificate_ASN1"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_CERTIFICATE_FILE,0),	"SSL_CTX_use_certificate_file"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_PRIVATEKEY,0),	"SSL_CTX_use_PrivateKey"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1,0),	"SSL_CTX_use_PrivateKey_ASN1"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE,0),	"SSL_CTX_use_PrivateKey_file"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_RSAPRIVATEKEY,0),	"SSL_CTX_use_RSAPrivateKey"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1,0),	"SSL_CTX_use_RSAPrivateKey_ASN1"},
! {ERR_PACK(0,SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE,0),	"SSL_CTX_use_RSAPrivateKey_file"},
  {ERR_PACK(0,SSL_F_SSL_ENC_DES_CBC_INIT,0),	"SSL_ENC_DES_CBC_INIT"},
  {ERR_PACK(0,SSL_F_SSL_ENC_DES_CFB_INIT,0),	"SSL_ENC_DES_CFB_INIT"},
  {ERR_PACK(0,SSL_F_SSL_ENC_DES_EDE3_CBC_INIT,0),	"SSL_ENC_DES_EDE3_CBC_INIT"},
***************
*** 95,102 ****
  {ERR_PACK(0,SSL_F_SSL_SESSION_PRINT_FP,0),	"SSL_SESSION_print_fp"},
  {ERR_PACK(0,SSL_F_SSL_SET_CERTIFICATE,0),	"SSL_SET_CERTIFICATE"},
  {ERR_PACK(0,SSL_F_SSL_SET_FD,0),	"SSL_set_fd"},
! {ERR_PACK(0,SSL_F_SSL_SET_RFD,0),	"SSL_SET_RFD"},
! {ERR_PACK(0,SSL_F_SSL_SET_WFD,0),	"SSL_SET_WFD"},
  {ERR_PACK(0,SSL_F_SSL_STARTUP,0),	"SSL_STARTUP"},
  {ERR_PACK(0,SSL_F_SSL_USE_CERTIFICATE,0),	"SSL_use_certificate"},
  {ERR_PACK(0,SSL_F_SSL_USE_CERTIFICATE_ASN1,0),	"SSL_use_certificate_ASN1"},
--- 95,102 ----
  {ERR_PACK(0,SSL_F_SSL_SESSION_PRINT_FP,0),	"SSL_SESSION_print_fp"},
  {ERR_PACK(0,SSL_F_SSL_SET_CERTIFICATE,0),	"SSL_SET_CERTIFICATE"},
  {ERR_PACK(0,SSL_F_SSL_SET_FD,0),	"SSL_set_fd"},
! {ERR_PACK(0,SSL_F_SSL_SET_RFD,0),	"SSL_set_rfd"},
! {ERR_PACK(0,SSL_F_SSL_SET_WFD,0),	"SSL_set_wfd"},
  {ERR_PACK(0,SSL_F_SSL_STARTUP,0),	"SSL_STARTUP"},
  {ERR_PACK(0,SSL_F_SSL_USE_CERTIFICATE,0),	"SSL_use_certificate"},
  {ERR_PACK(0,SSL_F_SSL_USE_CERTIFICATE_ASN1,0),	"SSL_use_certificate_ASN1"},
***************
*** 117,122 ****
--- 117,123 ----
  {SSL_R_BAD_CHECKSUM                      ,"bad checksum"},
  {SSL_R_BAD_MAC_DECODE                    ,"bad mac decode"},
  {SSL_R_BAD_RESPONSE_ARGUMENT             ,"bad response argument"},
+ {SSL_R_BAD_RSA_DECRYPT                   ,"bad rsa decrypt"},
  {SSL_R_BAD_SSL_FILETYPE                  ,"bad ssl filetype"},
  {SSL_R_BAD_SSL_SESSION_ID_LENGTH         ,"bad ssl session id length"},
  {SSL_R_BAD_STATE                         ,"bad state"},
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_idea.c	Wed Jul 10 09:46:34 1996
--- ./ssl/ssl_idea.c	Wed Jul 24 14:27:10 1996
***************
*** 84,90 ****
  	md5d1=s->key_material=(unsigned char *)malloc(MD5_DIGEST_LENGTH*2);
  	if (s->key_material == NULL) goto err;
  	s->key_material_length=MD5_DIGEST_LENGTH*2;
! 	md5d2=&(s->key_material[MD5_DIGEST_LENGTH]);
  	
  	ssl_generate_key_material(s);
  
--- 84,90 ----
  	md5d1=s->key_material=(unsigned char *)malloc(MD5_DIGEST_LENGTH*2);
  	if (s->key_material == NULL) goto err;
  	s->key_material_length=MD5_DIGEST_LENGTH*2;
! 	md5d2= &(s->key_material[MD5_DIGEST_LENGTH]);
  	
  	ssl_generate_key_material(s);
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_lib.c	Fri Jul 12 09:28:30 1996
--- ./ssl/ssl_lib.c	Wed Jul 24 14:27:10 1996
***************
*** 61,67 ****
  #include "ssl_rsa.h"
  #include "ssl_null.h"
  
! char *SSL_version="SSLeay 0.6.1 12-Jul-1996";
  
  /* THIS ARRAY MUST BE KEPT ORDERED BY c1, c2 and c3.
   * basically the second last 'value' which is a #define for these 3
--- 61,67 ----
  #include "ssl_rsa.h"
  #include "ssl_null.h"
  
! char *SSL_version="SSLeay 0.6.2 24-Jul-1996";
  
  /* THIS ARRAY MUST BE KEPT ORDERED BY c1, c2 and c3.
   * basically the second last 'value' which is a #define for these 3
***************
*** 179,185 ****
  #define NUM_OF(x) (sizeof(x) / sizeof(char *))
  static int num_pref_cipher=NUM_OF(pref_cipher);
  
! #if !defined(WIN16) && !defined(_DLL)
  FILE *SSL_LOG=stderr;
  FILE *SSL_ERR=stderr;
  #else
--- 179,185 ----
  #define NUM_OF(x) (sizeof(x) / sizeof(char *))
  static int num_pref_cipher=NUM_OF(pref_cipher);
  
! #if !defined(WIN16) && !defined(_DLL) && !defined(VMS)
  FILE *SSL_LOG=stderr;
  FILE *SSL_ERR=stderr;
  #else
***************
*** 303,319 ****
  	s->session=NULL;
  	s->cert=ctx->default_cert;
  	if (ctx->default_cert != NULL)
! 		ctx->default_cert->references++;
  	s->verify_mode=ctx->default_verify_mode;
  	s->verify_callback=ctx->default_verify_callback;
  	s->ctx=ctx;
  	s->debug=0;
  	s->info_callback=NULL;
! 	CS_BEGIN;
! 	CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
! 	ctx->references++;
! 	CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
! 	CS_END;
  	s->state_ccl=NULL;
  
  	s->verify_result=VERIFY_OK;
--- 303,317 ----
  	s->session=NULL;
  	s->cert=ctx->default_cert;
  	if (ctx->default_cert != NULL)
! 		{
! 		CRYPTO_add(&ctx->default_cert->references,1,CRYPTO_LOCK_X509);
! 		}
  	s->verify_mode=ctx->default_verify_mode;
  	s->verify_callback=ctx->default_verify_callback;
  	s->ctx=ctx;
  	s->debug=0;
  	s->info_callback=NULL;
! 	CRYPTO_add(&ctx->references,1,CRYPTO_LOCK_SSL_CTX);
  	s->state_ccl=NULL;
  
  	s->verify_result=VERIFY_OK;
***************
*** 420,426 ****
  int SSL_get_fd(s)
  SSL *s;
  	{
! 	int ret=-1;
  	BIO *b;
  
  	b=SSL_get_rbio(s);
--- 418,424 ----
  int SSL_get_fd(s)
  SSL *s;
  	{
! 	int ret= -1;
  	BIO *b;
  
  	b=SSL_get_rbio(s);
***************
*** 649,656 ****
  	{
  	X509 *r;
  	
  	CRYPTO_r_lock(CRYPTO_LOCK_SSL_SESSION);
- 	CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
  
  	if ((s == NULL) || (s->session == NULL))
  		r=NULL;
--- 647,654 ----
  	{
  	X509 *r;
  	
+ 	CRYPTO_w_lock(CRYPTO_LOCK_X509);
  	CRYPTO_r_lock(CRYPTO_LOCK_SSL_SESSION);
  
  	if ((s == NULL) || (s->session == NULL))
  		r=NULL;
***************
*** 661,672 ****
  
  	if (r == NULL)
  		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
  		return(0);
  		}
  
  	r->references++;
! 	CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
  
  	return(r);
  	}
--- 659,670 ----
  
  	if (r == NULL)
  		{
! 		CRYPTO_w_unlock(CRYPTO_LOCK_X509);
  		return(0);
  		}
  
  	r->references++;
! 	CRYPTO_w_unlock(CRYPTO_LOCK_X509);
  
  	return(r);
  	}
***************
*** 724,731 ****
  void SSL_copy_session_id(t,f)
  SSL *t,*f;
  	{
! 	CRYPTO_r_lock(CRYPTO_LOCK_SSL);
! 
  	SSL_set_session(t,SSL_get_session(f));
  
  	CRYPTO_r_lock(CRYPTO_LOCK_X509);
--- 722,728 ----
  void SSL_copy_session_id(t,f)
  SSL *t,*f;
  	{
! 	/* Do we need to to SSL locking? */
  	SSL_set_session(t,SSL_get_session(f));
  
  	CRYPTO_r_lock(CRYPTO_LOCK_X509);
***************
*** 734,738 ****
  
  	t->cert=f->cert;
  	CRYPTO_r_unlock(CRYPTO_LOCK_X509);
- 	CRYPTO_r_unlock(CRYPTO_LOCK_SSL);
  	}
--- 731,734 ----
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_pkt.c	Wed Jul 10 09:46:35 1996
--- ./ssl/ssl_pkt.c	Wed Jul 24 14:27:10 1996
***************
*** 255,261 ****
  		else
  			{
  			SSLerr(SSL_F_READ_N,SSL_R_NO_READ_METHOD_SET);
! 			i=-1;
  			}
  #ifdef PKT_DEBUG
  		if (s->debug & 0x01) sleep(1);
--- 255,261 ----
  		else
  			{
  			SSLerr(SSL_F_READ_N,SSL_R_NO_READ_METHOD_SET);
! 			i= -1;
  			}
  #ifdef PKT_DEBUG
  		if (s->debug & 0x01) sleep(1);
***************
*** 343,349 ****
  		else
  			{
  			SSLerr(SSL_F_WRITE_PENDING,SSL_R_NO_WRITE_METHOD_SET);
! 			i=-1;
  			}
  #ifdef PKT_DEBUG
  		if (s->debug & 0x01) sleep(1);
--- 343,349 ----
  		else
  			{
  			SSLerr(SSL_F_WRITE_PENDING,SSL_R_NO_WRITE_METHOD_SET);
! 			i= -1;
  			}
  #ifdef PKT_DEBUG
  		if (s->debug & 0x01) sleep(1);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_rc2.c	Wed Jul 10 09:46:35 1996
--- ./ssl/ssl_rc2.c	Wed Jul 24 14:27:10 1996
***************
*** 76,82 ****
  		}
  	md5d1=s->key_material=(unsigned char *)malloc(MD5_DIGEST_LENGTH*2);
  	if (s->key_material == NULL) goto err;
! 	md5d2=&(s->key_material[MD5_DIGEST_LENGTH]);
  	s->key_material_length=MD5_DIGEST_LENGTH*2;
  
  	ssl_generate_key_material(s);
--- 76,82 ----
  		}
  	md5d1=s->key_material=(unsigned char *)malloc(MD5_DIGEST_LENGTH*2);
  	if (s->key_material == NULL) goto err;
! 	md5d2= &(s->key_material[MD5_DIGEST_LENGTH]);
  	s->key_material_length=MD5_DIGEST_LENGTH*2;
  
  	ssl_generate_key_material(s);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_rc4.c	Wed Jul 10 09:46:35 1996
--- ./ssl/ssl_rc4.c	Wed Jul 24 14:27:10 1996
***************
*** 76,82 ****
  	md5d1=s->key_material=(unsigned char *)malloc(MD5_DIGEST_LENGTH*2);
  	if (s->key_material == NULL) goto err;
  	s->key_material_length=MD5_DIGEST_LENGTH*2;
! 	md5d2=&(s->key_material[MD5_DIGEST_LENGTH]);
  	
  	ssl_generate_key_material(s);
  
--- 76,82 ----
  	md5d1=s->key_material=(unsigned char *)malloc(MD5_DIGEST_LENGTH*2);
  	if (s->key_material == NULL) goto err;
  	s->key_material_length=MD5_DIGEST_LENGTH*2;
! 	md5d2= &(s->key_material[MD5_DIGEST_LENGTH]);
  	
  	ssl_generate_key_material(s);
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_rsa.c	Wed Jul 10 09:46:36 1996
--- ./ssl/ssl_rsa.c	Wed Jul 24 14:27:10 1996
***************
*** 152,161 ****
  
  	if (!ssl_set_cert_type(c,SSL_CT_X509_CERTIFICATE)) return(0);
  	if (c->x509 != NULL) X509_free(c->x509);
- 	CS_BEGIN;
  	c->x509=x;
! 	x->references++;
! 	CS_END;
  	if (c->publickey != NULL) EVP_PKEY_free(c->publickey);
  	pkey=X509_extract_key(x);
  	if (pkey == NULL)
--- 152,159 ----
  
  	if (!ssl_set_cert_type(c,SSL_CT_X509_CERTIFICATE)) return(0);
  	if (c->x509 != NULL) X509_free(c->x509);
  	c->x509=x;
! 	CRYPTO_add(&x->references,1,CRYPTO_LOCK_X509);
  	if (c->publickey != NULL) EVP_PKEY_free(c->publickey);
  	pkey=X509_extract_key(x);
  	if (pkey == NULL)
***************
*** 202,208 ****
  	else if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		x=PEM_read_bio_X509(in,NULL,NULL);
  		}
  	else
  		{
--- 200,206 ----
  	else if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		x=PEM_read_bio_X509(in,NULL,ssl->ctx->default_passwd_callback);
  		}
  	else
  		{
***************
*** 273,281 ****
  	c->privatekey->type=EVP_PKEY_RSA;
  	c->privatekey->pkey.rsa=rsa;
  
! 	CS_BEGIN;
! 	rsa->references++;
! 	CS_END;
  	return(1);
  	}
  
--- 271,277 ----
  	c->privatekey->type=EVP_PKEY_RSA;
  	c->privatekey->pkey.rsa=rsa;
  
! 	CRYPTO_add(&rsa->references,1,CRYPTO_LOCK_RSA);
  	return(1);
  	}
  
***************
*** 313,319 ****
  	else if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		rsa=PEM_read_bio_RSAPrivateKey(in,NULL,NULL);
  		}
  	else
  		{
--- 309,316 ----
  	else if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		rsa=PEM_read_bio_RSAPrivateKey(in,NULL,
! 			ssl->ctx->default_passwd_callback);
  		}
  	else
  		{
***************
*** 375,383 ****
  	if (!ssl_set_cert_type(c,SSL_CT_X509_CERTIFICATE)) return(0);
  	if (c->privatekey) EVP_PKEY_free(c->privatekey);
  	c->privatekey=pkey;
! 	CS_BEGIN;
! 	pkey->references++;
! 	CS_END;
  	return(1);
  	}
  
--- 372,378 ----
  	if (!ssl_set_cert_type(c,SSL_CT_X509_CERTIFICATE)) return(0);
  	if (c->privatekey) EVP_PKEY_free(c->privatekey);
  	c->privatekey=pkey;
! 	CRYPTO_add(&pkey->references,1,CRYPTO_LOCK_EVP_PKEY);
  	return(1);
  	}
  
***************
*** 410,416 ****
  	if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		pkey=PEM_read_bio_PrivateKey(in,NULL,NULL);
  		}
  	else
  		{
--- 405,412 ----
  	if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		pkey=PEM_read_bio_PrivateKey(in,NULL,
! 			ssl->ctx->default_passwd_callback);
  		}
  	else
  		{
***************
*** 468,477 ****
  
  	if (!ssl_set_cert_type(c,SSL_CT_X509_CERTIFICATE)) return(0);
  	if (c->x509 != NULL) X509_free(c->x509);
- 	CS_BEGIN;
  	c->x509=x;
! 	x->references++;
! 	CS_END;
  	if (c->publickey != NULL) EVP_PKEY_free(c->publickey);
  	pkey=X509_extract_key(x);
  	if (pkey == NULL)
--- 464,471 ----
  
  	if (!ssl_set_cert_type(c,SSL_CT_X509_CERTIFICATE)) return(0);
  	if (c->x509 != NULL) X509_free(c->x509);
  	c->x509=x;
! 	CRYPTO_add(&x->references,1,CRYPTO_LOCK_X509);
  	if (c->publickey != NULL) EVP_PKEY_free(c->publickey);
  	pkey=X509_extract_key(x);
  	if (pkey == NULL)
***************
*** 518,524 ****
  	else if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		x=PEM_read_bio_X509(in,NULL,NULL);
  		}
  	else
  		{
--- 512,518 ----
  	else if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		x=PEM_read_bio_X509(in,NULL,ctx->default_passwd_callback);
  		}
  	else
  		{
***************
*** 588,596 ****
  	c->privatekey->type=EVP_PKEY_RSA;
  	c->privatekey->pkey.rsa=rsa;
  
! 	CS_BEGIN;
! 	rsa->references++;
! 	CS_END;
  	return(1);
  	}
  
--- 582,588 ----
  	c->privatekey->type=EVP_PKEY_RSA;
  	c->privatekey->pkey.rsa=rsa;
  
! 	CRYPTO_add(&rsa->references,1,CRYPTO_LOCK_RSA);
  	return(1);
  	}
  
***************
*** 628,634 ****
  	else if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		rsa=PEM_read_bio_RSAPrivateKey(in,NULL,NULL);
  		}
  	else
  		{
--- 620,627 ----
  	else if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		rsa=PEM_read_bio_RSAPrivateKey(in,NULL,
! 			ctx->default_passwd_callback);
  		}
  	else
  		{
***************
*** 689,697 ****
  	if (!ssl_set_cert_type(c,SSL_CT_X509_CERTIFICATE)) return(0);
  	if (c->privatekey) EVP_PKEY_free(c->privatekey);
  	c->privatekey=pkey;
! 	CS_BEGIN;
! 	pkey->references++;
! 	CS_END;
  	return(1);
  	}
  
--- 682,688 ----
  	if (!ssl_set_cert_type(c,SSL_CT_X509_CERTIFICATE)) return(0);
  	if (c->privatekey) EVP_PKEY_free(c->privatekey);
  	c->privatekey=pkey;
! 	CRYPTO_add(&pkey->references,1,CRYPTO_LOCK_EVP_PKEY);
  	return(1);
  	}
  
***************
*** 724,730 ****
  	if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		pkey=PEM_read_bio_PrivateKey(in,NULL,NULL);
  		}
  	else
  		{
--- 715,722 ----
  	if (type == SSL_FILETYPE_PEM)
  		{
  		j=ERR_R_PEM_LIB;
! 		pkey=PEM_read_bio_PrivateKey(in,NULL,
! 			ctx->default_passwd_callback);
  		}
  	else
  		{
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_sess.c	Wed Jul 10 09:46:36 1996
--- ./ssl/ssl_sess.c	Wed Jul 24 14:27:10 1996
***************
*** 113,118 ****
--- 113,119 ----
  			return(0);
  			}
  
+ 		CRYPTO_r_lock(CRYPTO_LOCK_SSL_CTX);
  		for (;;)
  			{
  			SSL_SESSION *r;
***************
*** 123,128 ****
--- 124,130 ----
  			if (r == NULL) break;
  			/* else - woops a session_id match */
  			}
+ 		CRYPTO_r_unlock(CRYPTO_LOCK_SSL_CTX);
  		}
  	else
  		{
***************
*** 143,157 ****
  	/* conn_init();*/
  	data.session_id_length=len;
  	data.session_id=session;
! 	if ((ret=(SSL_SESSION *)lh_retrieve(s->ctx->sessions,(char *)&data))
! 		== NULL)
  		{
! 		s->ctx->sess_miss++;
  		ret=NULL;
  		if ((s->ctx->get_session_cb != NULL) &&
  			((ret=s->ctx->get_session_cb(session,len)) != NULL))
  			{
! 			s->ctx->sess_cb_hit++;
  			/* The following should not return 1, otherwise,
  			 * things are very strange */
  			SSL_add_session(s->ctx,ret);
--- 145,164 ----
  	/* conn_init();*/
  	data.session_id_length=len;
  	data.session_id=session;
! 
! 	CRYPTO_r_lock(CRYPTO_LOCK_SSL_CTX);
! 	ret=(SSL_SESSION *)lh_retrieve(s->ctx->sessions,(char *)&data);
! 	CRYPTO_r_unlock(CRYPTO_LOCK_SSL_CTX);
! 
! 	if (ret == NULL)
  		{
! 		CRYPTO_add(&s->ctx->sess_miss,1,CRYPTO_LOCK_SSL_CTX);
  		ret=NULL;
  		if ((s->ctx->get_session_cb != NULL) &&
  			((ret=s->ctx->get_session_cb(session,len)) != NULL))
  			{
! 			CRYPTO_add(&s->ctx->sess_cb_hit,1,CRYPTO_LOCK_SSL_CTX);
! 
  			/* The following should not return 1, otherwise,
  			 * things are very strange */
  			SSL_add_session(s->ctx,ret);
***************
*** 166,174 ****
  	 * it and then due to a time-out decided to 'free' it we could
  	 * be in trouble.  So I'll increment it now, then double decrement
  	 * later - am I speaking rubbish?. */
! 	CS_BEGIN;
! 	ret->references++;
! 	CS_END;
  
  	if ((long)(ret->time+ret->timeout) < (long)time(NULL)) /* timeout */
  		{
--- 173,179 ----
  	 * it and then due to a time-out decided to 'free' it we could
  	 * be in trouble.  So I'll increment it now, then double decrement
  	 * later - am I speaking rubbish?. */
! 	CRYPTO_add(&ret->references,1,CRYPTO_LOCK_SSL_SESSION);
  
  	if ((long)(ret->time+ret->timeout) < (long)time(NULL)) /* timeout */
  		{
***************
*** 175,187 ****
  #ifdef SSL_DEBUG
  		SSL_TRACE(SSL_ERR,"TIMEOUT ON SSL_SESSION\n");
  #endif
! 		s->ctx->sess_timeout++;
  		SSL_remove_session(s->ctx,ret); /* remove it from the cache */
  		SSL_SESSION_free(ret);		/* again to actually free it */
  		return(0);
  		}
- 	s->ctx->sess_hit++;
  
  	/* ret->time=time(NULL); */ /* rezero timeout? */
  	/* again, just leave the session 
  	 * if it is the same session, we have just incremented and
--- 180,193 ----
  #ifdef SSL_DEBUG
  		SSL_TRACE(SSL_ERR,"TIMEOUT ON SSL_SESSION\n");
  #endif
! 		CRYPTO_add(&s->ctx->sess_timeout,1,CRYPTO_LOCK_SSL_CTX);
  		SSL_remove_session(s->ctx,ret); /* remove it from the cache */
  		SSL_SESSION_free(ret);		/* again to actually free it */
  		return(0);
  		}
  
+ 	CRYPTO_add(&s->ctx->sess_hit,1,CRYPTO_LOCK_SSL_CTX);
+ 
  	/* ret->time=time(NULL); */ /* rezero timeout? */
  	/* again, just leave the session 
  	 * if it is the same session, we have just incremented and
***************
*** 199,208 ****
  	SSL_SESSION *s;
  
  	/* conn_init(); */
! 	CS_BEGIN;
! 	c->references++;
! 	CS_END;
  	s=(SSL_SESSION *)lh_insert(ctx->sessions,(char *)c);
  	/* If the same session if is being 're-added', free the old
  	 * one when the last person stops using it.
  	 * This will also work if it is alread in the cache.
--- 205,216 ----
  	SSL_SESSION *s;
  
  	/* conn_init(); */
! 	CRYPTO_add(&c->references,1,CRYPTO_LOCK_SSL_SESSION);
! 
! 	CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
  	s=(SSL_SESSION *)lh_insert(ctx->sessions,(char *)c);
+ 	CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
+ 
  	/* If the same session if is being 're-added', free the old
  	 * one when the last person stops using it.
  	 * This will also work if it is alread in the cache.
***************
*** 224,230 ****
--- 232,240 ----
  
  	if ((c->session_id != NULL) && (c != NULL))
  		{
+ 		CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
  		r=(SSL_SESSION *)lh_delete(ctx->sessions,(char *)c);
+ 		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
  		if (r == NULL)
  			{
  #ifdef SSL_DEBUG
***************
*** 240,248 ****
  void SSL_SESSION_free(ss)
  SSL_SESSION *ss;
  	{
! 	CS_BEGIN;
! 	if (--ss->references > 0) return;
! 	CS_END;
  	if (ss->key_arg != NULL)
  		{
  		memset(ss->key_arg,0,ss->key_arg_length);
--- 250,260 ----
  void SSL_SESSION_free(ss)
  SSL_SESSION *ss;
  	{
! 	int i;
! 
! 	i=CRYPTO_add(&ss->references,-1,CRYPTO_LOCK_SSL_SESSION);
! 	if (i > 0) return;
! 
  	if (ss->key_arg != NULL)
  		{
  		memset(ss->key_arg,0,ss->key_arg_length);
***************
*** 269,286 ****
  	{
  	int ret=0;
  
- 	CS_BEGIN;
  	if (session != NULL)
  		{
  		if (s->session != NULL)
  			SSL_SESSION_free(s->session);
! 		CS_BEGIN
! 		session->references++;
! 		CS_END
  		s->session=session;
  		ret=1;
  		}
- 	CS_END;
  	return(ret);
  	}
  
--- 281,296 ----
  	{
  	int ret=0;
  
  	if (session != NULL)
  		{
+ 		/* CRYPTO_w_lock(CRYPTO_LOCK_SSL);*/
  		if (s->session != NULL)
  			SSL_SESSION_free(s->session);
! 		CRYPTO_add(&session->references,1,CRYPTO_LOCK_SSL_SESSION);
  		s->session=session;
+ 		/* CRYPTO_w_unlock(CRYPTO_LOCK_SSL);*/
  		ret=1;
  		}
  	return(ret);
  	}
  
***************
*** 343,351 ****
--- 353,363 ----
  	tp.cache=SSL_CTX_sessions(s);
  	if (tp.cache == NULL) return;
  	tp.time=t;
+ 	CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
  	i=tp.cache->down_load;
  	tp.cache->down_load=0;
  	lh_doall_arg(tp.cache,(void (*)())timeout,(char *)&tp);
  	tp.cache->down_load=i;
+ 	CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
  	}
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ssl/ssl_srvr.c	Wed Jul 10 09:46:36 1996
--- ./ssl/ssl_srvr.c	Wed Jul 24 14:27:10 1996
***************
*** 122,131 ****
  		case SSL_ST_BEFORE:
  		case SSL_ST_ACCEPT:
  			if ((buf=BUF_MEM_new()) == NULL)
! 				{ ret=-1; goto end; }
  			if (!BUF_MEM_grow(buf,(int)
  				SSL_MAX_RECORD_LENGTH_3_BYTE_HEADER))
! 				{ ret=-1; goto end; }
  			if (s->init_buf) free(s->init_buf);
  			s->init_buf=(unsigned char *)buf->data;
  			free(buf);
--- 122,131 ----
  		case SSL_ST_BEFORE:
  		case SSL_ST_ACCEPT:
  			if ((buf=BUF_MEM_new()) == NULL)
! 				{ ret= -1; goto end; }
  			if (!BUF_MEM_grow(buf,(int)
  				SSL_MAX_RECORD_LENGTH_3_BYTE_HEADER))
! 				{ ret= -1; goto end; }
  			if (s->init_buf) free(s->init_buf);
  			s->init_buf=(unsigned char *)buf->data;
  			free(buf);
***************
*** 171,177 ****
  			 * be encrypted. */
  			if (!s->session->cipher->crypt_init(s,0))
  				{
! 				ret=-1;
  				goto end;
  				}
  			s->clear_text=0;
--- 171,177 ----
  			 * be encrypted. */
  			if (!s->session->cipher->crypt_init(s,0))
  				{
! 				ret= -1;
  				goto end;
  				}
  			s->clear_text=0;
***************
*** 238,251 ****
  				&& SSL_add_session(s->ctx,s->session) &&
  				(s->ctx->new_session_cb != NULL))
  				{
! 				CS_BEGIN;
! 				s->session->references++;
! 				CS_END;
  				if (!s->ctx->new_session_cb(s->session))
  					{
! 					CS_BEGIN;
! 					s->session->references--;
! 					CS_END;
  					}
  				}
  
--- 238,249 ----
  				&& SSL_add_session(s->ctx,s->session) &&
  				(s->ctx->new_session_cb != NULL))
  				{
! 				CRYPTO_add(&s->session->references,1,
! 					CRYPTO_LOCK_SSL_SESSION);
  				if (!s->ctx->new_session_cb(s->session))
  					{
! 					CRYPTO_add(&s->session->references,-1,
! 						CRYPTO_LOCK_SSL_SESSION);
  					}
  				}
  
***************
*** 263,269 ****
  
  		default:
  			SSLerr(SSL_F_SSL_ACCEPT,SSL_R_UNKNOWN_STATE);
! 			ret=-1;
  			goto end;
  			BREAK;
  			}
--- 261,267 ----
  
  		default:
  			SSLerr(SSL_F_SSL_ACCEPT,SSL_R_UNKNOWN_STATE);
! 			ret= -1;
  			goto end;
  			BREAK;
  			}
***************
*** 356,369 ****
  		}
  	i=s->cert->private_decrypt(s->cert,s->state_enc,
  		&(p[s->state_clear]),&(p[s->state_clear]));
  	j=s->session->cipher->enc_bits/8;
  	/* fix so we will not accept clear ciphers when using
  	 * non-export ciphers */
! 	if (	((j == 0) && (i != (int)(s->session->cipher->key_size))) ||
  		((j != 0) && (i != j)))
  		{
! 		SSL_TRACE(SSL_ERR,"i=%d enc_bits=%d\n",i,
  			s->session->cipher->enc_bits/8);
  		ssl_return_error(s);
  		return(-1);
  		}
--- 354,370 ----
  		}
  	i=s->cert->private_decrypt(s->cert,s->state_enc,
  		&(p[s->state_clear]),&(p[s->state_clear]));
+ 	/* j will be 0 or '5' for export ciphers */
  	j=s->session->cipher->enc_bits/8;
  	/* fix so we will not accept clear ciphers when using
  	 * non-export ciphers */
! 	if (	(i < 0) ||
! 		((j == 0) && (i != (int)(s->session->cipher->key_size))) ||
  		((j != 0) && (i != j)))
  		{
! 		SSL_TRACE(SSL_ERR,"RSA decrypt error - i=%d enc_bits=%d\n",i,
  			s->session->cipher->enc_bits/8);
+ 		SSLerr(SSL_F_GET_CLIENT_MASTER_KEY,SSL_R_BAD_RSA_DECRYPT);
  		ssl_return_error(s);
  		return(-1);
  		}
***************
*** 494,500 ****
  
  		/* now for each preference, copy across */
  		i=0;
! 		cp=&cc;
  		for (;;)
  			{
  			str=SSL_get_cipher_list(s,i++);
--- 495,501 ----
  
  		/* now for each preference, copy across */
  		i=0;
! 		cp= &cc;
  		for (;;)
  			{
  			str=SSL_get_cipher_list(s,i++);
***************
*** 586,594 ****
  			if (s->session->cert != NULL)
  				ssl_cert_free(s->session->cert);
  			s->session->cert=s->cert;		
! 			CS_BEGIN;
! 			s->cert->references++;
! 			CS_END;
  			}
  
  		if (s->session->cert == NULL)
--- 587,593 ----
  			if (s->session->cert != NULL)
  				ssl_cert_free(s->session->cert);
  			s->session->cert=s->cert;		
! 			CRYPTO_add(&s->cert->references,1,CRYPTO_LOCK_X509);
  			}
  
  		if (s->session->cert == NULL)
***************
*** 757,763 ****
  	{
  	unsigned char *p,*p2,*buf2;
  	unsigned char *ccd;
! 	int i,j,ctype,ret=-1;
  	X509 *x509=NULL;
  
  	if (s->state_ccl == NULL)
--- 756,762 ----
  	{
  	unsigned char *p,*p2,*buf2;
  	unsigned char *ccd;
! 	int i,j,ctype,ret= -1;
  	X509 *x509=NULL;
  
  	if (s->state_ccl == NULL)
***************
*** 894,902 ****
  			if (s->session->peer != NULL)
  				X509_free(s->session->peer);
  			s->session->peer=x509;
! 			CS_BEGIN
! 			x509->references++;
! 			CS_END
  			ret=1;
  			goto end;
  			}
--- 893,899 ----
  			if (s->session->peer != NULL)
  				X509_free(s->session->peer);
  			s->session->peer=x509;
! 			CRYPTO_add(&x509->references,1,CRYPTO_LOCK_X509);
  			ret=1;
  			goto end;
  			}
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./rsaref/rsaref.c	Wed Jul 10 09:46:31 1996
--- ./rsaref/rsaref.c	Wed Jul 17 16:45:27 1996
***************
*** 239,245 ****
  	if ((i=RSAPublicDecrypt(to,&outlen,from,len,&RSAkey)) != 0)
  		{
  		RSAREFerr(RSAREF_F_RSA_PUBLIC_DECRYPT,i);
! 		outlen=-1;
  		}
  err:
  	memset(&RSAkey,0,sizeof(RSAkey));
--- 239,245 ----
  	if ((i=RSAPublicDecrypt(to,&outlen,from,len,&RSAkey)) != 0)
  		{
  		RSAREFerr(RSAREF_F_RSA_PUBLIC_DECRYPT,i);
! 		outlen= -1;
  		}
  err:
  	memset(&RSAkey,0,sizeof(RSAkey));
***************
*** 271,277 ****
  	if ((i=RSAPublicEncrypt(to,&outlen,from,len,&RSAkey,&rnd)) != 0)
  		{
  		RSAREFerr(RSAREF_F_RSA_PUBLIC_DECRYPT,i);
! 		outlen=-1;
  		goto err;
  		}
  err:
--- 271,277 ----
  	if ((i=RSAPublicEncrypt(to,&outlen,from,len,&RSAkey,&rnd)) != 0)
  		{
  		RSAREFerr(RSAREF_F_RSA_PUBLIC_DECRYPT,i);
! 		outlen= -1;
  		goto err;
  		}
  err:
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/apps.h	Fri Jul 12 17:17:56 1996
--- ./apps/apps.h	Wed Jul 24 20:12:50 1996
***************
*** 78,94 ****
  
  #endif
  
  #if defined(MONOLITH) && !defined(SSLEAY)
! #  define apps_startup()
  #else
  #  if defined(MSDOS) || defined(WIN16) || defined(WIN32)
  #    ifdef _O_BINARY
! #      define apps_startup() _fmode=_O_BINARY
  #    else
! #      define apps_startup() _fmode=O_BINARY
  #    endif
  #  else
! #    define apps_startup()
  #  endif
  #endif
  
--- 78,102 ----
  
  #endif
  
+ #include <signal.h>
+ 
+ #ifdef SIGPIPE
+ #define do_pipe_sig()	signal(SIGPIPE,SIG_IGN)
+ #else
+ #define do_pipe_sig()
+ #endif
+ 
  #if defined(MONOLITH) && !defined(SSLEAY)
! #  define apps_startup()	do_pipe_sig()
  #else
  #  if defined(MSDOS) || defined(WIN16) || defined(WIN32)
  #    ifdef _O_BINARY
! #      define apps_startup()	_fmode=_O_BINARY; do_pipe_sig()
  #    else
! #      define apps_startup()	_fmode=O_BINARY; do_pipe_sig()
  #    endif
  #  else
! #    define apps_startup()	do_pipe_sig()
  #  endif
  #endif
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/asn1pars.c	Wed Jul 10 09:46:10 1996
--- ./apps/asn1pars.c	Wed Jul 24 08:14:27 1996
***************
*** 182,188 ****
  		for (;;)
  			{
  			if (!BUF_MEM_grow(buf,(int)num+LSIZE)) goto end;
! 			p=&(buf->data[num]);
  			j=BIO_gets(in,p,LSIZE);
  			if (j <= 0)
  				{
--- 182,188 ----
  		for (;;)
  			{
  			if (!BUF_MEM_grow(buf,(int)num+LSIZE)) goto end;
! 			p= &(buf->data[num]);
  			j=BIO_gets(in,p,LSIZE);
  			if (j <= 0)
  				{
***************
*** 238,244 ****
  #endif
  
  	if (length == 0) length=(unsigned int)num;
! 	ASN1_parse(out,(unsigned char *)&(str[offset]),length);
  	ret=0;
  end:
  	if (in != NULL) BIO_free(in);
--- 238,248 ----
  #endif
  
  	if (length == 0) length=(unsigned int)num;
! 	if (!ASN1_parse(out,(unsigned char *)&(str[offset]),length))
! 		{
! 		ERR_print_errors(bio_err);
! 		goto end;
! 		}
  	ret=0;
  end:
  	if (in != NULL) BIO_free(in);
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/ca.c	Fri Jul 12 14:35:49 1996
--- ./apps/ca.c	Wed Jul 24 08:14:27 1996
***************
*** 173,179 ****
  	int gencrl=0;
  	long crldays=0;
  	long crlhours=0;
! 	long errorline=-1;
  	char *configfile=NULL;
  	char *md=NULL;
  	char *policy=NULL;
--- 173,179 ----
  	int gencrl=0;
  	long crldays=0;
  	long crlhours=0;
! 	long errorline= -1;
  	char *configfile=NULL;
  	char *md=NULL;
  	char *policy=NULL;
***************
*** 1029,1035 ****
  	X509_CINF *ci;
  	X509_NAME_ENTRY *ne;
  	X509_NAME_ENTRY tmp,*tne,*push;
! 	int ok=-1,i,j;
  	char *p;
  	CONF_VALUE *cv;
  	char *row[DB_NUMBER],**rrow,**irow=NULL;
--- 1029,1035 ----
  	X509_CINF *ci;
  	X509_NAME_ENTRY *ne;
  	X509_NAME_ENTRY tmp,*tne,*push;
! 	int ok= -1,i,j;
  	char *p;
  	CONF_VALUE *cv;
  	char *row[DB_NUMBER],**rrow,**irow=NULL;
***************
*** 1336,1343 ****
  /* #ifdef 1 */
  	if (j)
  		{
! 		ci->attributes=req->req_info->attributes;
! 		req->req_info->attributes=NULL;
  		}
  /* #endif */
  
--- 1336,1343 ----
  /* #ifdef 1 */
  	if (j)
  		{
! /*		ci->extensions=req->req_info->attributes;
! 		req->req_info->attributes=NULL;*/
  		}
  /* #endif */
  
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/CA.sh	Wed Jul 10 09:46:10 1996
--- ./apps/CA.sh	Thu Jul 25 10:01:38 1996
***************
*** 13,18 ****
--- 13,19 ----
  # you want/need ... I'll make even this a little cleaner later.
  #
  #
+ # 25-Jul-96 eay    Cleaned up filenames some more.
  # 11-Jun-96 eay    Fixed a few filename missmatches.
  # 03-May-96 eay    Modified to use 'ssleay cmd' instead of 'cmd'.
  # 18-Apr-96 tjh    Original hacking
***************
*** 28,33 ****
--- 29,36 ----
  CA='ssleay ca'
  
  CATOP=./demoCA
+ CAKEY=./cakey.pem
+ CACERT=./cacert.pem
  
  for i
  do
***************
*** 38,44 ****
      ;;
  -newcert) 
      # create a certificate
!     $REQ -new -x509 -keyout newreq.pem -out newreq.pem
      ;;
  -newreq) 
      # create a certificate request
--- 41,47 ----
      ;;
  -newcert) 
      # create a certificate
!     $REQ -new -x509 -keyout newreq.pem -out newreq.pem -days 365
      ;;
  -newreq) 
      # create a certificate request
***************
*** 58,74 ****
  	echo "01" > ${CATOP}/serial
  	touch ${CATOP}/index.txt
      fi
!     if [ ! -f ${CATOP}/private/CAkey.pem ]; then
  	echo "CA certificate filename (or enter to create)"
  	read FILE
  
  	# ask user for existing CA certificate
  	if [ "$FILE" ]; then
! 	    cp $CERTIFICATE ${CATOP}/private/CAkey.pem
  	else
  	    echo "Making CA certificate ..."
! 	    $REQ -new -x509 -keyout ${CATOP}/private/CAkey.pem \
! 			   -out ${CATOP}/CAcert.pem
  	fi
      fi
      ;;
--- 61,77 ----
  	echo "01" > ${CATOP}/serial
  	touch ${CATOP}/index.txt
      fi
!     if [ ! -f ${CATOP}/private/$CAKEY ]; then
  	echo "CA certificate filename (or enter to create)"
  	read FILE
  
  	# ask user for existing CA certificate
  	if [ "$FILE" ]; then
! 	    cp $CERTIFICATE ${CATOP}/private/$CAKEY
  	else
  	    echo "Making CA certificate ..."
! 	    $REQ -new -x509 -keyout ${CATOP}/private/$CAKEY \
! 			   -out ${CATOP}/$CACERT
  	fi
      fi
      ;;
***************
*** 85,95 ****
  -verify) 
      shift
      if [ -z "$1" ]; then
! 	    verify -CAfile demoCA/CAcert.pem newcert.pem
      else
  	for j
  	do
! 	    verify -CAfile demoCA/CAcert.pem $j
  	done
      fi
      exit 0
--- 88,98 ----
  -verify) 
      shift
      if [ -z "$1" ]; then
! 	    verify -CAfile $CATOP/$CACERT newcert.pem
      else
  	for j
  	do
! 	    verify -CAfile $CATOP/$CACERT $j
  	done
      fi
      exit 0
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/crl2p7.c	Wed Jul 10 09:46:11 1996
--- ./apps/crl2p7.c	Wed Jul 24 08:14:27 1996
***************
*** 130,136 ****
  		else if (strcmp(*argv,"-certfile") == 0)
  			{
  			if (--argc < 1) goto bad;
! 			certfile=*(++argv);
  			}
  		else
  			{
--- 130,136 ----
  		else if (strcmp(*argv,"-certfile") == 0)
  			{
  			if (--argc < 1) goto bad;
! 			certfile= *(++argv);
  			}
  		else
  			{
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/enc.c	Wed Jul 10 09:46:11 1996
--- ./apps/enc.c	Thu Jul 25 11:16:30 1996
***************
*** 146,153 ****
  		else if (strcmp(*argv,"-k") == 0)
  			{
  			if (--argc < 1) goto bad;
! 			str=*(++argv);
  			}
  		else if (strcmp(*argv,"-K") == 0)
  			{
  			if (--argc < 1) goto bad;
--- 146,186 ----
  		else if (strcmp(*argv,"-k") == 0)
  			{
  			if (--argc < 1) goto bad;
! 			str= *(++argv);
  			}
+ 		else if (strcmp(*argv,"-kfile") == 0)
+ 			{
+ 			static char buf[128];
+ 			FILE *in;
+ 			char *file;
+ 			int i;
+ 
+ 			if (--argc < 1) goto bad;
+ 			file= *(++argv);
+ 			in=fopen(file,"r");
+ 			if (in == NULL)
+ 				{
+ 				fprintf(stderr,"unable to read key from '%s'\n",
+ 					file);
+ 				goto bad;
+ 				}
+ 			buf[0]='\0';
+ 			fgets(buf,128,in);
+ 			fclose(in);
+ 			i=strlen(buf);
+ 			if ((i > 0) &&
+ 				((buf[i-1] == '\n') || (buf[i-1] == '\r')))
+ 				buf[--i]='\0';
+ 			if ((i > 0) &&
+ 				((buf[i-1] == '\n') || (buf[i-1] == '\r')))
+ 				buf[--i]='\0';
+ 			if (i < 1)
+ 				{
+ 				fprintf(stderr,"zero length password\n");
+ 				goto bad;
+ 				}
+ 			str=buf;
+ 			}
  		else if (strcmp(*argv,"-K") == 0)
  			{
  			if (--argc < 1) goto bad;
***************
*** 176,181 ****
--- 209,215 ----
  			fprintf(stderr,"%-14s decrypt\n","-d");
  			fprintf(stderr,"%-14s base64 encode/decode, depending on encryption flag\n","-a/-base64");
  			fprintf(stderr,"%-14s key is the next argument\n","-k");
+ 			fprintf(stderr,"%-14s key is the first line of the file argument\n","-kfile");
  			fprintf(stderr,"%-14s key/iv in hex is the next argument\n","-K/-iv");
  			fprintf(stderr,"%-14s print the iv/key (then exit if -P)\n","-[pP]");
  			fprintf(stderr,"%-14s buffer size\n","-bufsize <n>");
***************
*** 203,209 ****
  			fprintf(stderr," -%-12s -%-12s -%-12s -%-12s",
  				LN_des_ede,LN_des_ede_cbc,
  				LN_des_ede_cfb,LN_des_ede_ofb);
! 			fprintf(stderr," -none\n");
  
  
  			fprintf(stderr," -%-12s -%-12s -%-12s -%-12s",
--- 237,243 ----
  			fprintf(stderr," -%-12s -%-12s -%-12s -%-12s",
  				LN_des_ede,LN_des_ede_cbc,
  				LN_des_ede_cfb,LN_des_ede_ofb);
! 			fprintf(stderr," -desx -none\n");
  
  
  			fprintf(stderr," -%-12s -%-12s -%-12s -%-12s",
***************
*** 237,245 ****
  
  		for (n=0; *bufsize; bufsize++)
  			{
! 			i=*bufsize;
  			if ((i <= '9') && (i >= '0'))
! 				n=n*10+'i'-'0';
  			else if (i == 'k')
  				{
  				n*=1024;
--- 271,279 ----
  
  		for (n=0; *bufsize; bufsize++)
  			{
! 			i= *bufsize;
  			if ((i <= '9') && (i >= '0'))
! 				n=n*10+i-'0';
  			else if (i == 'k')
  				{
  				n*=1024;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/g_ssleay.pl	Wed Jul 10 09:46:11 1996
--- ./apps/g_ssleay.pl	Thu Jul 25 10:58:39 1996
***************
*** 46,52 ****
  
  foreach (
  	"base64",
! 	"des", "des3", "idea", "rc4", "rc2",
  	"des-ecb", "des-ede",    "des-ede3",
  	"des-cbc", "des-ede-cbc","des-ede3-cbc",
  	"des-cfb", "des-ede-cfb","des-ede3-cfb",
--- 46,52 ----
  
  foreach (
  	"base64",
! 	"des", "des3", "desx", "idea", "rc4", "rc2",
  	"des-ecb", "des-ede",    "des-ede3",
  	"des-cbc", "des-ede-cbc","des-ede3-cbc",
  	"des-cfb", "des-ede-cfb","des-ede3-cfb",
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/mklinks	Fri Jul 12 12:52:18 1996
--- ./apps/mklinks	Thu Jul 25 10:58:58 1996
***************
*** 1,5 ****
  #!/bin/sh
! for i in verify asn1parse req dgst dh enc gendh errstr ca crl rsa x509 genrsa s_server s_client s_filter speed hashdir s_time s_mult version pkcs7 crl2pkcs7 md2 md5 sha sha1 base64 des des3 idea rc4 rc2 des-ecb des-ede des-ede3 des-cbc des-ede-cbc des-ede3-cbc des-cfb des-ede-cfb des-ede3-cfb des-ofb des-ede-ofb des-ede3-ofb idea-cbc idea-ecb idea-cfb idea-ofb rc2-cbc rc2-ecb rc2-cfb rc2-ofb 
  do
  echo making symlink for $i
  /bin/rm -f $i
--- 1,5 ----
  #!/bin/sh
! for i in verify asn1parse req dgst dh enc gendh errstr ca crl rsa x509 genrsa s_server s_client s_filter speed hashdir s_time s_mult version pkcs7 crl2pkcs7 md2 md5 sha sha1 base64 des des3 desx idea rc4 rc2 des-ecb des-ede des-ede3 des-cbc des-ede-cbc des-ede3-cbc des-cfb des-ede-cfb des-ede3-cfb des-ofb des-ede-ofb des-ede3-ofb idea-cbc idea-ecb idea-cfb idea-ofb rc2-cbc rc2-ecb rc2-cfb rc2-ofb 
  do
  echo making symlink for $i
  /bin/rm -f $i
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/pkcs7.c	Wed Jul 10 09:46:12 1996
--- ./apps/pkcs7.c	Wed Jul 24 08:14:27 1996
***************
*** 46,55 ****
--- 46,57 ----
   */
  
  #include <stdio.h>
+ #include <stdlib.h>
  #include <string.h>
  #include <time.h>
  #include "apps.h"
  #include "err.h"
+ #include "objects.h"
  #include "envelope.h"
  #include "x509.h"
  #include "pkcs7.h"
***************
*** 77,82 ****
--- 79,85 ----
  	BIO *in=NULL,*out=NULL;
  	int informat,outformat;
  	char *infile,*outfile,*prog;
+ 	int print_certs=0;
  	int ret=0;
  
  	apps_startup();
***************
*** 115,120 ****
--- 118,125 ----
  			if (--argc < 1) goto bad;
  			outfile= *(++argv);
  			}
+ 		else if (strcmp(*argv,"-print_certs") == 0)
+ 			print_certs=1;
  		else if (strcmp(*argv,"-des") == 0)
  			enc=EVP_des_cbc();
  		else if (strcmp(*argv,"-des3") == 0)
***************
*** 142,147 ****
--- 147,153 ----
  		fprintf(stderr," -outform arg  output format - one of DER TXT PEM\n");
  		fprintf(stderr," -in arg       inout file\n");
  		fprintf(stderr," -out arg      output file\n");
+ 		fprintf(stderr," -print_certs  print any certs or crl in the input\n");
  		fprintf(stderr," -des          encrypt PEM output with cbc des\n");
  		fprintf(stderr," -des3         encrypt PEM output with ede cbc des using 168 bit key\n");
  #ifndef NO_IDEA
***************
*** 197,202 ****
--- 203,282 ----
  			perror(outfile);
  			goto end;
  			}
+ 		}
+ 
+ 	if (print_certs)
+ 		{
+ 		int i;
+ 		STACK *certs=NULL;
+ 		STACK *crls=NULL;
+ 
+ 		i=OBJ_obj2nid(p7->type);
+ 		switch (i)
+ 			{
+ 		case NID_pkcs7_signed:
+ 			certs=p7->d.sign->cert;
+ 			crls=p7->d.sign->crl;
+ 			break;
+ 		case NID_pkcs7_signedAndEnveloped:
+ 			certs=p7->d.signed_and_enveloped->cert;
+ 			crls=p7->d.signed_and_enveloped->crl;
+ 			break;
+ 		default:
+ 			break;
+ 			}
+ 
+ 		if (certs != NULL)
+ 			{
+ 			char *a;
+ 			X509 *x;
+ 
+ 			for (i=0; i<sk_num(certs); i++)
+ 				{
+ 				x=(X509 *)sk_value(certs,i);
+ 
+ 				a=X509_NAME_oneline(X509_get_subject_name(x));
+ 				BIO_puts(out,"subject=");
+ 				BIO_puts(out,a);
+ 				free(a);
+ 
+ 				a=X509_NAME_oneline(X509_get_issuer_name(x));
+ 				BIO_puts(out,"\nissuer= ");
+ 				BIO_puts(out,a);
+ 				BIO_puts(out,"\n");
+ 				free(a);
+ 
+ 				PEM_write_bio_X509(out,x);
+ 				BIO_puts(out,"\n");
+ 				}
+ 			}
+ 		if (crls != NULL)
+ 			{
+ 			X509_CRL *crl;
+ 			char *a;
+ 
+ 			for (i=0; i<sk_num(crls); i++)
+ 				{
+ 				crl=(X509_CRL *)sk_value(crls,i);
+ 
+ 				a=X509_NAME_oneline(crl->crl->issuer);
+ 				BIO_puts(out,"issuer= ");
+ 				BIO_puts(out,a);
+ 				free(a);
+ 
+ 				BIO_puts(out,"\nlast update=");
+ 				ASN1_UTCTIME_print(out,crl->crl->lastUpdate);
+ 				BIO_puts(out,"\nnext update=");
+ 				ASN1_UTCTIME_print(out,crl->crl->nextUpdate);
+ 				BIO_puts(out,"\n");
+ 
+ 				PEM_write_bio_X509_CRL(out,crl);
+ 				BIO_puts(out,"\n");
+ 				}
+ 			}
+ 
+ 		ret=0;
+ 		goto end;
  		}
  
  	if 	(outformat == FORMAT_ASN1)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/progs.h	Fri Jul 12 12:52:18 1996
--- ./apps/progs.h	Thu Jul 25 10:58:58 1996
***************
*** 99,104 ****
--- 99,105 ----
  	{FUNC_TYPE_CIPHER,"base64",enc_main},
  	{FUNC_TYPE_CIPHER,"des",enc_main},
  	{FUNC_TYPE_CIPHER,"des3",enc_main},
+ 	{FUNC_TYPE_CIPHER,"desx",enc_main},
  #ifndef NO_IDEA
  	{FUNC_TYPE_CIPHER,"idea",enc_main},
  #endif
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/req.c	Wed Jul 10 09:46:13 1996
--- ./apps/req.c	Wed Jul 24 08:14:27 1996
***************
*** 695,701 ****
  
  	if (sk_num(sk))
  		{
! 		i=-1;
  start:		for (;;)
  			{
  			i++;
--- 695,701 ----
  
  	if (sk_num(sk))
  		{
! 		i= -1;
  start:		for (;;)
  			{
  			i++;
***************
*** 738,744 ****
  				fprintf(stderr,"to be sent with your certificate request\n");
  				}
  
! 			i=-1;
  start2:			for (;;)
  				{
  				i++;
--- 738,744 ----
  				fprintf(stderr,"to be sent with your certificate request\n");
  				}
  
! 			i= -1;
  start2:			for (;;)
  				{
  				i++;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/rmlinks	Fri Jul 12 12:52:18 1996
--- ./apps/rmlinks	Thu Jul 25 10:58:58 1996
***************
*** 1,5 ****
  #!/bin/sh
! for i in verify asn1parse req dgst dh enc gendh errstr ca crl rsa x509 genrsa s_server s_client s_filter speed hashdir s_time s_mult version pkcs7 crl2pkcs7 md2 md5 sha sha1 base64 des des3 idea rc4 rc2 des-ecb des-ede des-ede3 des-cbc des-ede-cbc des-ede3-cbc des-cfb des-ede-cfb des-ede3-cfb des-ofb des-ede-ofb des-ede3-ofb idea-cbc idea-ecb idea-cfb idea-ofb rc2-cbc rc2-ecb rc2-cfb rc2-ofb 
  do
  echo removing $i
  /bin/rm -f $i
--- 1,5 ----
  #!/bin/sh
! for i in verify asn1parse req dgst dh enc gendh errstr ca crl rsa x509 genrsa s_server s_client s_filter speed hashdir s_time s_mult version pkcs7 crl2pkcs7 md2 md5 sha sha1 base64 des des3 desx idea rc4 rc2 des-ecb des-ede des-ede3 des-cbc des-ede-cbc des-ede3-cbc des-cfb des-ede-cfb des-ede3-cfb des-ofb des-ede-ofb des-ede3-ofb idea-cbc idea-ecb idea-cfb idea-ofb rc2-cbc rc2-ecb rc2-cfb rc2-ofb 
  do
  echo removing $i
  /bin/rm -f $i
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/ssleay.c	Wed Jul 10 09:46:17 1996
--- ./apps/ssleay.c	Wed Jul 24 23:18:34 1996
***************
*** 218,224 ****
  		(strcmp(argv[0],"exit") == 0) ||
  		(strcmp(argv[0],"bye") == 0))
  		{
! 		ret=-1;
  		goto end;
  		}
  	else
--- 218,224 ----
  		(strcmp(argv[0],"exit") == 0) ||
  		(strcmp(argv[0],"bye") == 0))
  		{
! 		ret= -1;
  		goto end;
  		}
  	else
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/s_filter.c	Wed Jul 10 09:46:16 1996
--- ./apps/s_filter.c	Wed Jul 24 08:14:27 1996
***************
*** 133,139 ****
  		con->port[i]=	-1;
  		con->socket[i]=	-1;
  		con->readfd[i]=	-1;
! 		con->writefd[i]=-1;
  		}
  	}
  
--- 133,139 ----
  		con->port[i]=	-1;
  		con->socket[i]=	-1;
  		con->readfd[i]=	-1;
! 		con->writefd[i]= -1;
  		}
  	}
  
***************
*** 315,324 ****
  	/* stdio(1) <convert> program(2) */
  	if ((((int)c->port[0]) == -1) && (((int)c->port[1]) == -1))
  		{
! 		c->socket[0]=-1;
  		c->readfd[0]=fileno(stdin);
  		c->writefd[0]=fileno(stdout);
! 		c->socket[1]=-1;
  		if (argc > 0)
  			{
  #ifndef WINDOWS
--- 315,324 ----
  	/* stdio(1) <convert> program(2) */
  	if ((((int)c->port[0]) == -1) && (((int)c->port[1]) == -1))
  		{
! 		c->socket[0]= -1;
  		c->readfd[0]=fileno(stdin);
  		c->writefd[0]=fileno(stdout);
! 		c->socket[1]= -1;
  		if (argc > 0)
  			{
  #ifndef WINDOWS
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/s_mult.c	Wed Jul 10 09:46:16 1996
--- ./apps/s_mult.c	Wed Jul 24 08:14:27 1996
***************
*** 602,620 ****
  		{
  		fprintf(stderr,"%4ld items in the session cache\n",
  			SSL_CTX_sess_number(m_ctx));
! 		fprintf(stderr,"%4ld client connects (SSL_connect())\n",
  			SSL_CTX_sess_connect(m_ctx));
! 		fprintf(stderr,"%4ld client connects that finished\n",
  			SSL_CTX_sess_connect_good(m_ctx));
! 		fprintf(stderr,"%4ld server connects (SSL_accept())\n",
  			SSL_CTX_sess_accept(m_ctx));
! 		fprintf(stderr,"%4ld server connects that finished\n",
  			SSL_CTX_sess_accept_good(m_ctx));
! 		fprintf(stderr,"%4ld session cache hits\n",
  			SSL_CTX_sess_hits(m_ctx));
! 		fprintf(stderr,"%4ld session cache misses\n",
  			SSL_CTX_sess_misses(m_ctx));
! 		fprintf(stderr,"%4ld session cache timeouts\n",
  			SSL_CTX_sess_timeouts(m_ctx));
  		}
  	else
--- 602,620 ----
  		{
  		fprintf(stderr,"%4ld items in the session cache\n",
  			SSL_CTX_sess_number(m_ctx));
! 		fprintf(stderr,"%4d client connects (SSL_connect())\n",
  			SSL_CTX_sess_connect(m_ctx));
! 		fprintf(stderr,"%4d client connects that finished\n",
  			SSL_CTX_sess_connect_good(m_ctx));
! 		fprintf(stderr,"%4d server connects (SSL_accept())\n",
  			SSL_CTX_sess_accept(m_ctx));
! 		fprintf(stderr,"%4d server connects that finished\n",
  			SSL_CTX_sess_accept_good(m_ctx));
! 		fprintf(stderr,"%4d session cache hits\n",
  			SSL_CTX_sess_hits(m_ctx));
! 		fprintf(stderr,"%4d session cache misses\n",
  			SSL_CTX_sess_misses(m_ctx));
! 		fprintf(stderr,"%4d session cache timeouts\n",
  			SSL_CTX_sess_timeouts(m_ctx));
  		}
  	else
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/s_server.c	Wed Jul 10 09:46:16 1996
--- ./apps/s_server.c	Wed Jul 24 08:14:27 1996
***************
*** 73,79 ****
  
  #undef BUFSIZZ
  #define BUFSIZZ	8*1024
! static int accept_socket=-1;
  
  #define TEST_CERT	"server.pem"
  #undef PROG
--- 73,79 ----
  
  #undef BUFSIZZ
  #define BUFSIZZ	8*1024
! static int accept_socket= -1;
  
  #define TEST_CERT	"server.pem"
  #undef PROG
***************
*** 249,265 ****
  	{
  	fprintf(fp,"%4ld items in the session cache\n",
  		SSL_CTX_sess_number(ctx));
! 	fprintf(fp,"%4ld client connects (SSL_connect())\n",
  		SSL_CTX_sess_connect(ctx));
! 	fprintf(fp,"%4ld client connects that finished\n",
  		SSL_CTX_sess_connect_good(ctx));
! 	fprintf(fp,"%4ld server connects (SSL_accept())\n",
  		SSL_CTX_sess_accept(ctx));
! 	fprintf(fp,"%4ld server connects that finished\n",
  		SSL_CTX_sess_accept_good(ctx));
! 	fprintf(fp,"%4ld session cache hits\n",SSL_CTX_sess_hits(ctx));
! 	fprintf(fp,"%4ld session cache misses\n",SSL_CTX_sess_misses(ctx));
! 	fprintf(fp,"%4ld session cache timeouts\n",SSL_CTX_sess_timeouts(ctx));
  	}
  
  static int sv_body(hostname, s)
--- 249,265 ----
  	{
  	fprintf(fp,"%4ld items in the session cache\n",
  		SSL_CTX_sess_number(ctx));
! 	fprintf(fp,"%4d client connects (SSL_connect())\n",
  		SSL_CTX_sess_connect(ctx));
! 	fprintf(fp,"%4d client connects that finished\n",
  		SSL_CTX_sess_connect_good(ctx));
! 	fprintf(fp,"%4d server connects (SSL_accept())\n",
  		SSL_CTX_sess_accept(ctx));
! 	fprintf(fp,"%4d server connects that finished\n",
  		SSL_CTX_sess_accept_good(ctx));
! 	fprintf(fp,"%4d session cache hits\n",SSL_CTX_sess_hits(ctx));
! 	fprintf(fp,"%4d session cache misses\n",SSL_CTX_sess_misses(ctx));
! 	fprintf(fp,"%4d session cache timeouts\n",SSL_CTX_sess_timeouts(ctx));
  	}
  
  static int sv_body(hostname, s)
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./apps/s_socket.c	Fri Jul 12 13:57:39 1996
--- ./apps/s_socket.c	Wed Jul 24 08:14:27 1996
***************
*** 131,137 ****
  		static struct protoent myproto;
  
  		myproto.p_proto=0;
! 		prot=&myproto;
  #else
  		fprintf(stderr,"unable to find tcp protocol number");
  		return(0);
--- 131,137 ----
  		static struct protoent myproto;
  
  		myproto.p_proto=0;
! 		prot= &myproto;
  #else
  		fprintf(stderr,"unable to find tcp protocol number");
  		return(0);
***************
*** 192,198 ****
  	int ret=0;
  	struct sockaddr_in server;
  	struct protoent *prot;
! 	int s=-1,i;
  /*	struct linger ling;*/
  
  #ifdef WINDOWS
--- 192,198 ----
  	int ret=0;
  	struct sockaddr_in server;
  	struct protoent *prot;
! 	int s= -1,i;
  /*	struct linger ling;*/
  
  #ifdef WINDOWS
***************
*** 222,228 ****
  /*		static struct protoent myproto;
  
  		myproto.p_proto=0;
! 		prot=&myproto; */
  
  		i=WSAGetLastError();
  		fprintf(stderr,"unable to start WINSOCK: error code=%d\n",i);
--- 222,228 ----
  /*		static struct protoent myproto;
  
  		myproto.p_proto=0;
! 		prot= &myproto; */
  
  		i=WSAGetLastError();
  		fprintf(stderr,"unable to start WINSOCK: error code=%d\n",i);
Binary files /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./test/.rand and ./test/.rand differ
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./test/certCA.ss.srl	Fri Jul 12 12:59:01 1996
--- ./test/certCA.ss.srl	Thu Jul 25 12:06:02 1996
***************
*** 1 ****
! 73
--- 1 ----
! 80
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./test/Makefile.ssl	Fri Jul 12 17:21:35 1996
--- ./test/Makefile.ssl	Thu Jul 25 16:06:37 1996
***************
*** 87,96 ****
--- 87,102 ----
  	./$(RC4TEST)
  	./$(RANDTEST)
  	@sh ./testenc
+ 	@echo test normal x509v1 certificate
  	@sh ./tx509 2>/dev/null
+ 	@echo test first x509v3 certificate
+ 	@sh ./tx509 v3-cert1.pem 2>/dev/null
+ 	@echo test second x509v3 certificate
+ 	@sh ./tx509 v3-cert2.pem 2>/dev/null
  	@sh ./trsa 2>/dev/null
  	@sh ./tcrl 2>/dev/null
  	@sh ./treq 2>/dev/null
+ 	@sh ./tpkcs7 2>/dev/null
  	@echo starting big number library test, could take a while...
  	@(./$(BNTEST)|bc) | awk '{ \
  if ($$0 != "0") {print "error"; exit(1); } \
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./test/ssleay.conf	Wed Jul 10 09:46:38 1996
--- ./test/ssleay.conf	Thu Jul 25 09:55:53 1996
***************
*** 3,9 ****
  # This is mostly being used for generation of certificate requests.
  #
  
! RANDFILE		= $HOME/.rand
  
  ####################################################################
  [ ca ]
--- 3,9 ----
  # This is mostly being used for generation of certificate requests.
  #
  
! RANDFILE		= $ENV::HOME/.rand
  
  ####################################################################
  [ ca ]
***************
*** 12,27 ****
  ####################################################################
  [ CA_default ]
  
! dir		= ./demoCA		# Where everything is kept
  certs		= $dir/certs		# Where the issued certs are kept
  crl_dir		= $dir/crl		# Where the issued crl are kept
  database	= $dir/index.txt	# database index file.
  new_certs_dir	= $dir/new_certs	# default place for new certs.
  
! certificate	= $dir/CAcert.pem 	# The CA certificate
  serial		= $dir/serial 		# The current serial number
  crl		= $dir/crl.pem 		# The current CRL
! private_key	= $dir/private/CAkey.pem# The private key
  RANDFILE	= $dir/private/.rand	# private random number file
  
  default_days	= 365			# how long to certify for
--- 12,27 ----
  ####################################################################
  [ CA_default ]
  
! dir		= ./democa		# Where everything is kept
  certs		= $dir/certs		# Where the issued certs are kept
  crl_dir		= $dir/crl		# Where the issued crl are kept
  database	= $dir/index.txt	# database index file.
  new_certs_dir	= $dir/new_certs	# default place for new certs.
  
! certificate	= $dir/cacert.pem 	# The CA certificate
  serial		= $dir/serial 		# The current serial number
  crl		= $dir/crl.pem 		# The current CRL
! private_key	= $dir/private/cakey.pem# The private key
  RANDFILE	= $dir/private/.rand	# private random number file
  
  default_days	= 365			# how long to certify for
***************
*** 58,68 ****
  [ req ]
  default_bits		= 512
  default_keyfile 	= privkey.pem
  attributes		= req_attributes
  
! [ req_attributes ]
  countryName			= Country Name (2 letter code)
  countryName_default		= AU
  
  stateOrProvinceName		= State or Province Name (full name)
  stateOrProvinceName_default	= Queensland
--- 58,71 ----
  [ req ]
  default_bits		= 512
  default_keyfile 	= privkey.pem
+ distinguished_name	= req_distinguished_name
  attributes		= req_attributes
  
! [ req_distinguished_name ]
  countryName			= Country Name (2 letter code)
  countryName_default		= AU
+ countryName_min			= 2
+ countryName_max			= 2
  
  stateOrProvinceName		= State or Province Name (full name)
  stateOrProvinceName_default	= Queensland
***************
*** 76,80 ****
--- 79,92 ----
  organizationalUnitName_default	= MTR
  
  commonName			= Common Name (eg, YOUR name)
+ commonName_max			= 64
  
  emailAddress			= Email Address
+ emailAddress_max		= 40
+ 
+ [ req_attributes ]
+ challengePassword		= A challenge password
+ challengePassword_min		= 4
+ challengePassword_max		= 20
+ 
+ unstructuredName		= An optional company name
*** /dev/null	Thu Jul 25 17:47:23 1996
--- ./test/tpkcs7	Wed Jul 24 07:55:03 1996
***************
*** 0 ****
--- 1,51 ----
+ #!/bin/sh
+ 
+ PATH=../apps:$PATH
+ export PATH
+ 
+ cmd='../apps/ssleay pkcs7'
+ 
+ if [ "$1"x != "x" ]; then
+ 	t=$1
+ else
+ 	t=testp7.pem
+ fi
+ 
+ echo testing pkcs7 conversions
+ cp $t fff.p
+ 
+ echo "p -> d"
+ $cmd -in fff.p -inform p -outform d >f.d
+ if [ $? != 0 ]; then exit 1; fi
+ echo "p -> p"
+ $cmd -in fff.p -inform p -outform p >f.p
+ if [ $? != 0 ]; then exit 1; fi
+ 
+ echo "d -> d"
+ $cmd -in f.d -inform d -outform d >ff.d1
+ if [ $? != 0 ]; then exit 1; fi
+ echo "p -> d"
+ $cmd -in f.p -inform p -outform d >ff.d3
+ if [ $? != 0 ]; then exit 1; fi
+ 
+ echo "d -> p"
+ $cmd -in f.d -inform d -outform p >ff.p1
+ if [ $? != 0 ]; then exit 1; fi
+ echo "p -> p"
+ $cmd -in f.p -inform p -outform p >ff.p3
+ if [ $? != 0 ]; then exit 1; fi
+ 
+ cmp fff.p f.p
+ if [ $? != 0 ]; then exit 1; fi
+ cmp fff.p ff.p1
+ if [ $? != 0 ]; then exit 1; fi
+ cmp fff.p ff.p3
+ if [ $? != 0 ]; then exit 1; fi
+ 
+ cmp f.p ff.p1
+ if [ $? != 0 ]; then exit 1; fi
+ cmp f.p ff.p3
+ if [ $? != 0 ]; then exit 1; fi
+ 
+ /bin/rm -f f.* ff.* fff.*
+ exit 0
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./test/testenc	Wed Jul 10 09:46:41 1996
--- ./test/testenc	Thu Jul 25 11:29:46 1996
***************
*** 2,13 ****
  
  testsrc=Makefile.ssl
  test=./p
  
  cat $testsrc >$test;
  
  echo cat
! ../apps/ssleay enc < $test > $test.cipher
! ../apps/ssleay enc < $test.cipher >$test.clear
  cmp $test $test.clear
  if [ $? != 0 ]
  then
--- 2,14 ----
  
  testsrc=Makefile.ssl
  test=./p
+ cmd=../apps/ssleay
  
  cat $testsrc >$test;
  
  echo cat
! $cmd enc < $test > $test.cipher
! $cmd enc < $test.cipher >$test.clear
  cmp $test $test.clear
  if [ $? != 0 ]
  then
***************
*** 16,23 ****
  	/bin/rm $test.cipher $test.clear
  fi
  echo base64
! ../apps/ssleay enc -a -e < $test > $test.cipher
! ../apps/ssleay enc -a -d < $test.cipher >$test.clear
  cmp $test $test.clear
  if [ $? != 0 ]
  then
--- 17,24 ----
  	/bin/rm $test.cipher $test.clear
  fi
  echo base64
! $cmd enc -a -e < $test > $test.cipher
! $cmd enc -a -d < $test.cipher >$test.clear
  cmp $test $test.clear
  if [ $? != 0 ]
  then
***************
*** 29,42 ****
  for i in rc4 \
  	des-cfb des-ede-cfb des-ede3-cfb \
  	des-ofb des-ede-ofb des-ede3-ofb \
! 	des-ecb des-ede des-ede3 \
  	des-cbc des-ede-cbc des-ede3-cbc \
  	idea-ecb idea-cfb idea-ofb idea-cbc \
  	rc2-ecb rc2-cfb rc2-ofb rc2-cbc 
  do
  	echo $i
! 	../apps/ssleay $i -e -k test < $test > $test.$i.cipher
! 	../apps/ssleay $i -d -k test < $test.$i.cipher >$test.$i.clear
  	cmp $test $test.$i.clear
  	if [ $? != 0 ]
  	then
--- 30,43 ----
  for i in rc4 \
  	des-cfb des-ede-cfb des-ede3-cfb \
  	des-ofb des-ede-ofb des-ede3-ofb \
! 	des-ecb des-ede des-ede3 desx \
  	des-cbc des-ede-cbc des-ede3-cbc \
  	idea-ecb idea-cfb idea-ofb idea-cbc \
  	rc2-ecb rc2-cfb rc2-ofb rc2-cbc 
  do
  	echo $i
! 	$cmd $i -bufsize 113 -e -k test < $test > $test.$i.cipher
! 	$cmd $i -bufsize 157 -d -k test < $test.$i.cipher >$test.$i.clear
  	cmp $test $test.$i.clear
  	if [ $? != 0 ]
  	then
***************
*** 46,53 ****
  	fi
  
  	echo $i base64
! 	../apps/ssleay $i -a -e -k test < $test > $test.$i.cipher
! 	../apps/ssleay $i -a -d -k test < $test.$i.cipher >$test.$i.clear
  	cmp $test $test.$i.clear
  	if [ $? != 0 ]
  	then
--- 47,54 ----
  	fi
  
  	echo $i base64
! 	$cmd $i -bufsize 113 -a -e -k test < $test > $test.$i.cipher
! 	$cmd $i -bufsize 157 -a -d -k test < $test.$i.cipher >$test.$i.clear
  	cmp $test $test.$i.clear
  	if [ $? != 0 ]
  	then
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./test/testkey.pem	Fri Jul 12 12:58:52 1996
--- ./test/testkey.pem	Thu Jul 25 12:04:46 1996
***************
*** 1,9 ****
  -----BEGIN RSA PRIVATE KEY-----
! MIIBOgIBAAJBAOpk9I4HdRH9oN6m6qujQ043bdnC6pJ/rB3V3XblAVyKk3NFLMdr
! uSTY7OR1j90/Zw7BoILnVuImz6P6THtZ34UCAwEAAQJAbXdumzIyY4+O5M0Rhc0+
! rrXGUM/uGzMTH+/0eQVkiGGukAoHUSR4auKYqiCDGbU3Q/D8GUj++VRc/I8utdzM
! lQIhAP9thSfsyocNFm53OV36AzzS+PG2LYKuaBg3rvxIvOvjAiEA6utfhPUHTuu/
! a2z/3Ns6WaX2zVfYXTQPXEnXTy9uM3cCIQCHFQF9itHUuEwroWu6UnUR3rT/B4xr
! 9xZf8FrfWwxmZwIgZQeu/8ZFS1q16yRocXpTAOUQXEVwRr0x8fXLxEFYuocCIGGz
! dqQ8RB8Lw/cqNFXYeloNbKImgOR4Ecd3yvB0UmC1
  -----END RSA PRIVATE KEY-----
--- 1,9 ----
  -----BEGIN RSA PRIVATE KEY-----
! MIIBOQIBAAJBANFjVEIGzKyCo1WmeSjFPkJHbhM4256nIGHcI77ToFD+QjCVdpn7
! xc+Awbo82Pfx00jM5pAv28In8mAqOK6bYvkCAwEAAQJAByjvW6ah3xBEh4w+vl8o
! RtnscKnUELPETrRZYJAZ/krzoCqwtt7r5eUf1sq5n3/DzAN1NqrFfTGeUjrmv2JN
! 9QIhAOw8usc039rSGI137jrGcGP4H9uI8hpTtIkySVUIec5fAiEA4ueYVA6sy0Dq
! zgdMK+7cye24Nk8Yucgc4FfkNGFbHacCIGvCvBS4utBvfAG0TniDIquHeMjE7GM0
! Aat/w9HFHwMTAiBeZ6MuHejwq/LFg63CfaAo95n0JpaP/V1eTdMpo/Pn8wIgakiV
! nAFovCteZOVhlNDNjHQacWfoJHz/d/9/91c8AVI=
  -----END RSA PRIVATE KEY-----
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./test/testreq.pem	Fri Jul 12 12:58:53 1996
--- ./test/testreq.pem	Thu Jul 25 12:04:46 1996
***************
*** 1,9 ****
  -----BEGIN CERTIFICATE REQUEST-----
! MIIBPjCB6gIBADCBhDELMAkGA1UEBhMCQVUxEzARBgNVBAgTClF1ZWVuc2xhbmQx
  ETAPBgNVBAcTCEJyaXNiYW5lMRcwFQYDVQQKEw5NaW5jb20gUHR5IEx0ZDETMBEG
  A1UEAxMKRXJpYyBZb3VuZzEfMB0GCSqGSIb3DQEJARYQZWF5QG1pbmNvbS5vei5h
! dTBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQDqZPSOB3UR/aDepuqro0NON23ZwuqS
! f6wd1d125QFcipNzRSzHa7kk2OzkdY/dP2cOwaCC51biJs+j+kx7Wd+FAgMBAAGg
! ADAMBggqhkiG9w0CBQUAA0EAwkkoDjG8vaauv7tCy/nzkc3GmgZ5VvZF+hZFSUaZ
! Yi9sLuXpK2xe0MOaIp5ptHHP1z2l4ngRaBM4vdf6Pdm9cQ==
  -----END CERTIFICATE REQUEST-----
--- 1,9 ----
  -----BEGIN CERTIFICATE REQUEST-----
! MIIBPzCB6gIBADCBhDELMAkGA1UEBhMCQVUxEzARBgNVBAgTClF1ZWVuc2xhbmQx
  ETAPBgNVBAcTCEJyaXNiYW5lMRcwFQYDVQQKEw5NaW5jb20gUHR5IEx0ZDETMBEG
  A1UEAxMKRXJpYyBZb3VuZzEfMB0GCSqGSIb3DQEJARYQZWF5QG1pbmNvbS5vei5h
! dTBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQDRY1RCBsysgqNVpnkoxT5CR24TONue
! pyBh3CO+06BQ/kIwlXaZ+8XPgMG6PNj38dNIzOaQL9vCJ/JgKjium2L5AgMBAAGg
! ADANBgkqhkiG9w0BAQQFAANBAMTBb4fZ/BMsuePqpif6l2U8SkIcnzRUsy+mzU/E
! WJ/X6T/og0AWYv49iqNmG9VoAvIHx3QWBCJtqyWS/RAYtMY=
  -----END CERTIFICATE REQUEST-----
*** /dev/null	Thu Jul 25 17:47:23 1996
--- ./test/testp7.pem	Wed Jul 24 07:51:20 1996
***************
*** 0 ****
--- 1,46 ----
+ -----BEGIN PKCS7-----
+ MIAGCSqGSIb3DQEHAqCAMIIIBwIBATEAMIAGCSqGSIb3DQEHAQAAoIIGPDCCBHIw
+ ggQcoAMCAQICEHkvjiX1iVGQMenF9HgIjI8wDQYJKoZIhvcNAQEEBQAwYjERMA8G
+ A1UEBxMISW50ZXJuZXQxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTQwMgYDVQQL
+ EytWZXJpU2lnbiBDbGFzcyAxIENBIC0gSW5kaXZpZHVhbCBTdWJzY3JpYmVyMB4X
+ DTk2MDcxOTAwMDAwMFoXDTk3MDMzMDIzNTk1OVowgdUxETAPBgNVBAcTCEludGVy
+ bmV0MRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE0MDIGA1UECxMrVmVyaVNpZ24g
+ Q2xhc3MgMSBDQSAtIEluZGl2aWR1YWwgU3Vic2NyaWJlcjEoMCYGA1UECxMfRGln
+ aXRhbCBJRCBDbGFzcyAxIC0gU01JTUUgVGVzdDFHMEUGA1UECxM+d3d3LnZlcmlz
+ aWduLmNvbS9yZXBvc2l0b3J5L0NQUy0xLjAgSW5jLiBieSBSZWYuLExJQUIuTFRE
+ KGMpOTYwWzANBgkqhkiG9w0BAQEFAANKADBHAkAOy7xxCAIkOfuIA2LyRpxgKlDO
+ Rl8htdXYhF5iBGUx1GYaK6KF+bK/CCI0l4j2OfWGFBUrwGoWqxTNcWgTfMzRAgMB
+ AAGjggI5MIICNTAJBgNVHRMEAjAAMIICJgYDVR0DBIICHTCCAhkwggIVMIICEQYL
+ YIZIAYb4RQEHAQEwggIAFoIBq1RoaXMgY2VydGlmaWNhdGUgaW5jb3Jwb3JhdGVz
+ IGJ5IHJlZmVyZW5jZSwgYW5kIGl0cyB1c2UgaXMgc3RyaWN0bHkgc3ViamVjdCB0
+ bywgdGhlIFZlcmlTaWduIENlcnRpZmljYXRpb24gUHJhY3RpY2UgU3RhdGVtZW50
+ IChDUFMpLCBhdmFpbGFibGUgYXQ6IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9D
+ UFMtMS4wOyBieSBFLW1haWwgYXQgQ1BTLXJlcXVlc3RzQHZlcmlzaWduLmNvbTsg
+ b3IgYnkgbWFpbCBhdCBWZXJpU2lnbiwgSW5jLiwgMjU5MyBDb2FzdCBBdmUuLCBN
+ b3VudGFpbiBWaWV3LCBDQSA5NDA0MyBVU0EgVGVsLiArMSAoNDE1KSA5NjEtODgz
+ MCBDb3B5cmlnaHQgKGMpIDE5OTYgVmVyaVNpZ24sIEluYy4gIEFsbCBSaWdodHMg
+ UmVzZXJ2ZWQuIENFUlRBSU4gV0FSUkFOVElFUyBESVNDTEFJTUVEIGFuZCBMSUFC
+ SUxJVFkgTElNSVRFRC6gDgYMYIZIAYb4RQEHAQEBoQ4GDGCGSAGG+EUBBwEBAjAv
+ MC0WK2h0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9yZXBvc2l0b3J5L0NQUy0xLgMw
+ DQYJKoZIhvcNAQEEBQADQQDAmA7km/3iJWEsWN9Z2WU2gmZAknx45WnDKHxMa3Bf
+ gNsh6BLk/ngkJKjNKTDR13XVHqEPUY1flbjATZputw1GMIIBwjCCAWygAwIBAgIQ
+ fAmE6tW5ERSQWDneu3KfSTANBgkqhkiG9w0BAQIFADA+MQswCQYDVQQGEwJVUzEX
+ MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xFjAUBgNVBAsTDVRFU1QgUm9vdCBQQ0Ew
+ HhcNOTYwNzE3MDAwMDAwWhcNOTcwNzE3MjM1OTU5WjBiMREwDwYDVQQHEwhJbnRl
+ cm5ldDEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xNDAyBgNVBAsTK1ZlcmlTaWdu
+ IENsYXNzIDEgQ0EgLSBJbmRpdmlkdWFsIFN1YnNjcmliZXIwXDANBgkqhkiG9w0B
+ AQEFAANLADBIAkEA7Fc6zYJw4WwCWa1ni3fYNbzGSQNluuw990024GusjLfhEk1h
+ MsIUukTT/n8yxoO7rYp4x+LS+tHF2tBtuxg7CwIDAQABoyIwIDALBgNVHQ8EBAMC
+ AQYwEQYJYIZIAYb4QgEBBAQDAgIEMA0GCSqGSIb3DQEBAgUAA0EAFKem0cJGg9nd
+ TAbP5o1HIEyNn11ZlvLU5v1Hejs1MKQt72IMm4jjgOH+pjguXW8lB6yzrK4oVOO2
+ UNCaNQ1H26GCAa0wgeYwgZEwDQYJKoZIhvcNAQECBQAwYjERMA8GA1UEBxMISW50
+ ZXJuZXQxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTQwMgYDVQQLEytWZXJpU2ln
+ biBDbGFzcyAxIENBIC0gSW5kaXZpZHVhbCBTdWJzY3JpYmVyFw05NjA3MTcxNzU5
+ MjlaFw05NzA3MTgwMDAwMDBaMA0GCSqGSIb3DQEBAgUAA0EAubVWYTsWsQmste9f
+ +UgMw8BkjDlM25fwQLrCfmmnLxjewey10kSROypUaJLb+r4oRALc0fG9XfZsaiiI
+ gotQHjCBwTBtMA0GCSqGSIb3DQEBAgUAMD4xCzAJBgNVBAYTAlVTMRcwFQYDVQQK
+ Ew5WZXJpU2lnbiwgSW5jLjEWMBQGA1UECxMNVEVTVCBSb290IFBDQRcNOTYwNzE3
+ MTc0NDA5WhcNOTgwNzE3MDAwMDAwWjANBgkqhkiG9w0BAQIFAANBAHitA0/xAukC
+ jHzeh1AMT/l2oC68N+yFb+aJPHBBMxc6gG2MaKjBNwb5hcXUllMlExONA3ju10f7
+ owIq3s3wx10xAAAAAAA=
+ -----END PKCS7-----
*** /dev/null	Thu Jul 25 17:47:23 1996
--- ./test/v3-cert1.pem	Sun Jul 21 14:26:40 1996
***************
*** 0 ****
--- 1,16 ----
+ -----BEGIN CERTIFICATE-----
+ MIICjTCCAfigAwIBAgIEMaYgRzALBgkqhkiG9w0BAQQwRTELMAkGA1UEBhMCVVMx
+ NjA0BgNVBAoTLU5hdGlvbmFsIEFlcm9uYXV0aWNzIGFuZCBTcGFjZSBBZG1pbmlz
+ dHJhdGlvbjAmFxE5NjA1MjgxMzQ5MDUrMDgwMBcROTgwNTI4MTM0OTA1KzA4MDAw
+ ZzELMAkGA1UEBhMCVVMxNjA0BgNVBAoTLU5hdGlvbmFsIEFlcm9uYXV0aWNzIGFu
+ ZCBTcGFjZSBBZG1pbmlzdHJhdGlvbjEgMAkGA1UEBRMCMTYwEwYDVQQDEwxTdGV2
+ ZSBTY2hvY2gwWDALBgkqhkiG9w0BAQEDSQAwRgJBALrAwyYdgxmzNP/ts0Uyf6Bp
+ miJYktU/w4NG67ULaN4B5CnEz7k57s9o3YY3LecETgQ5iQHmkwlYDTL2fTgVfw0C
+ AQOjgaswgagwZAYDVR0ZAQH/BFowWDBWMFQxCzAJBgNVBAYTAlVTMTYwNAYDVQQK
+ Ey1OYXRpb25hbCBBZXJvbmF1dGljcyBhbmQgU3BhY2UgQWRtaW5pc3RyYXRpb24x
+ DTALBgNVBAMTBENSTDEwFwYDVR0BAQH/BA0wC4AJODMyOTcwODEwMBgGA1UdAgQR
+ MA8ECTgzMjk3MDgyM4ACBSAwDQYDVR0KBAYwBAMCBkAwCwYJKoZIhvcNAQEEA4GB
+ AH2y1VCEw/A4zaXzSYZJTTUi3uawbbFiS2yxHvgf28+8Js0OHXk1H1w2d6qOHH21
+ X82tZXd/0JtG0g1T9usFFBDvYK8O0ebgz/P5ELJnBL2+atObEuJy1ZZ0pBDWINR3
+ WkDNLCGiTkCKp0F5EWIrVDwh54NNevkCQRZita+z4IBO
+ -----END CERTIFICATE-----
*** /dev/null	Thu Jul 25 17:47:23 1996
--- ./test/v3-cert2.pem	Sun Jul 21 14:41:09 1996
***************
*** 0 ****
--- 1,16 ----
+ -----BEGIN CERTIFICATE-----
+ MIICiTCCAfKgAwIBAgIEMeZfHzANBgkqhkiG9w0BAQQFADB9MQswCQYDVQQGEwJD
+ YTEPMA0GA1UEBxMGTmVwZWFuMR4wHAYDVQQLExVObyBMaWFiaWxpdHkgQWNjZXB0
+ ZWQxHzAdBgNVBAoTFkZvciBEZW1vIFB1cnBvc2VzIE9ubHkxHDAaBgNVBAMTE0Vu
+ dHJ1c3QgRGVtbyBXZWIgQ0EwHhcNOTYwNzEyMTQyMDE1WhcNOTYxMDEyMTQyMDE1
+ WjB0MSQwIgYJKoZIhvcNAQkBExVjb29rZUBpc3NsLmF0bC5ocC5jb20xCzAJBgNV
+ BAYTAlVTMScwJQYDVQQLEx5IZXdsZXR0IFBhY2thcmQgQ29tcGFueSAoSVNTTCkx
+ FjAUBgNVBAMTDVBhdWwgQS4gQ29va2UwXDANBgkqhkiG9w0BAQEFAANLADBIAkEA
+ 6ceSq9a9AU6g+zBwaL/yVmW1/9EE8s5you1mgjHnj0wAILuoB3L6rm6jmFRy7QZT
+ G43IhVZdDua4e+5/n1ZslwIDAQABo2MwYTARBglghkgBhvhCAQEEBAMCB4AwTAYJ
+ YIZIAYb4QgENBD8WPVRoaXMgY2VydGlmaWNhdGUgaXMgb25seSBpbnRlbmRlZCBm
+ b3IgZGVtb25zdHJhdGlvbiBwdXJwb3Nlcy4wDQYJKoZIhvcNAQEEBQADgYEAi8qc
+ F3zfFqy1sV8NhjwLVwOKuSfhR/Z8mbIEUeSTlnH3QbYt3HWZQ+vXI8mvtZoBc2Fz
+ lexKeIkAZXCesqGbs6z6nCt16P6tmdfbZF3I3AWzLquPcOXjPf4HgstkyvVBn0Ap
+ jAFN418KF/Cx4qyHB4cjdvLrRjjQLnb2+ibo7QU=
+ -----END CERTIFICATE-----
*** /dev/null	Thu Jul 25 17:47:23 1996
--- ./test/p	Thu Jul 25 12:28:38 1996
***************
*** 0 ****
--- 1,221 ----
+ #
+ # test/Makefile.ssl
+ #
+ 
+ DIR=		test
+ TOP=		..
+ CC=		cc
+ INCLUDES=	-I../include
+ CFLAG=		-g
+ INSTALLTOP=	/usr/local/ssl
+ MAKEFILE=	Makefile.ssl
+ MAKE=		make -f $(MAKEFILE)
+ MAKEDEPEND=	makedepend -f$(MAKEFILE)
+ 
+ PEX_LIBS=
+ EX_LIBS= -lnsl -lsocket
+ 
+ CFLAGS= $(INCLUDES) $(CFLAG)
+ 
+ GENERAL=Makefile.ssl
+ 
+ DLIBCRYPTO= ../libcrypto.a
+ DLIBSSL= ../libssl.a
+ LIBCRYPTO= -L.. -lcrypto
+ LIBSSL= -L.. -lssl
+ 
+ BNTEST=		bntest
+ IDEATEST=	ideatest
+ SHATEST=	shatest
+ SHA1TEST=	sha1test
+ MD2TEST=	md2test
+ MD5TEST=	md5test
+ RC4TEST=	rc4test
+ RC2TEST=	rc2test
+ DESTEST=	destest
+ RANDTEST=	randtest
+ DHTEST=		dhtest
+ METHTEST=	methtest
+ SSLTEST=	ssltest
+ 
+ EXE=	$(BNTEST) $(IDEATEST) $(MD2TEST)  $(MD5TEST)  $(RC4TEST) \
+ 	$(DESTEST) $(SHATEST) $(SHA1TEST) $(RANDTEST) $(DHTEST) \
+ 	$(METHTEST) $(RC2TEST) $(SSLTEST)
+ 
+ OBJ=	$(BNTEST).o $(IDEATEST).o $(MD2TEST).o  $(MD5TEST).o  $(RC4TEST).o \
+ 	$(DESTEST).o $(SHATEST).o $(SHA1TEST).o $(RANDTEST).o $(DHTEST).o \
+ 	$(METHTEST).o $(RC2TEST).o $(SSLTEST).o
+ SRC=	$(BNTEST).c $(IDEATEST).c $(MD2TEST).c  $(MD5TEST).c  $(RC4TEST).c \
+ 	$(DESTEST).c $(SHATEST).c $(SHA1TEST).c $(RANDTEST).c $(DHTEST).c \
+ 	$(METHTEST).c $(RC2TEST).c $(SSLTEST).c
+ 
+ EXHEADER= 
+ HEADER=	$(EXHEADER)
+ 
+ ALL=    $(GENERAL) $(SRC) $(HEADER)
+ 
+ top:
+ 	(cd ..; $(MAKE) DIRS=$(DIR) all)
+ 
+ all:	exe
+ 
+ exe:	$(EXE)
+ 
+ files:
+ 	perl $(TOP)/util/files.pl Makefile.ssl >> $(TOP)/MINFO
+ 
+ links:
+ 	/bin/rm -f Makefile
+ 	$(TOP)/util/point.sh Makefile.ssl Makefile ;
+ 
+ errors:
+ 
+ install:
+ 
+ tags:
+ 	ctags $(SRC)
+ 
+ tests:	exe
+ 	@(cd ../apps; $(MAKE)  CC='${CC}' CFLAG='${CFLAG}' INSTALLTOP='${INSTALLTOP}' PEX_LIBS='${PEX_LIBS}' EX_LIBS='${EX_LIBS}' all)
+ 	./$(DESTEST)
+ 	./$(IDEATEST)
+ 	./$(SHATEST)
+ 	./$(SHA1TEST)
+ 	./$(MD5TEST)
+ 	./$(MD2TEST)
+ 	./$(RC2TEST)
+ 	./$(RC4TEST)
+ 	./$(RANDTEST)
+ 	@sh ./testenc
+ 	@echo test normal x509v1 certificate
+ 	@sh ./tx509 2>/dev/null
+ 	@echo test first x509v3 certificate
+ 	@sh ./tx509 v3-cert1.pem 2>/dev/null
+ 	@echo test second x509v3 certificate
+ 	@sh ./tx509 v3-cert2.pem 2>/dev/null
+ 	@sh ./trsa 2>/dev/null
+ 	@sh ./tcrl 2>/dev/null
+ 	@sh ./treq 2>/dev/null
+ 	@sh ./tpkcs7 2>/dev/null
+ 	@echo starting big number library test, could take a while...
+ 	@(./$(BNTEST)|bc) | awk '{ \
+ if ($$0 != "0") {print "error"; exit(1); } \
+ if (((NR+1)%64) == 0) print NR+1," tests done"; }'
+ 	@echo "The following command should have some OK's and some failures"
+ 	../apps/ssleay verify -CApath ../certs ../certs/*.pem
+ 	@echo "Generate as set or DH parameters"
+ 	./$(DHTEST)
+ 	@sh ./testgen
+ 	@echo "Generate and certify a test certificate"
+ 	./$(SSLTEST)
+ 	./$(SSLTEST) -server_auth -CApath ../certs
+ 	./$(SSLTEST) -client_auth -CApath ../certs
+ 	./$(SSLTEST) -server_auth -client_auth -CApath ../certs
+ 	@sh ./testss
+ 
+ lint:
+ 	lint -DLINT $(INCLUDES) $(SRC)>fluff
+ 
+ depend:
+ 	$(MAKEDEPEND) $(INCLUDES) $(PROGS) $(SRC)
+ 
+ dclean:
+ 	perl -pe 'if (/^# DO NOT DELETE THIS LINE/) {print; exit(0);}' $(MAKEFILE) >Makefile.new
+ 	mv -f Makefile.new $(MAKEFILE)
+ 
+ clean:
+ 	/bin/rm -f *.o *.obj lib tags core .nfs* *.old *.bak fluff $(EXE) *.ss
+ 
+ $(DLIBCRYPTO):
+ 
+ $(BNTEST): $(BNTEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(BNTEST) $(CFLAGS) $(BNTEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(IDEATEST): $(IDEATEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(IDEATEST) $(CFLAGS) $(IDEATEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(MD2TEST): $(MD2TEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(MD2TEST) $(CFLAGS) $(MD2TEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(SHATEST): $(SHATEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(SHATEST) $(CFLAGS) $(SHATEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(SHA1TEST): $(SHA1TEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(SHA1TEST) $(CFLAGS) $(SHA1TEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(MD5TEST): $(MD5TEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(MD5TEST) $(CFLAGS) $(MD5TEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(RC2TEST): $(RC2TEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(RC2TEST) $(CFLAGS) $(RC2TEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(RC4TEST): $(RC4TEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(RC4TEST) $(CFLAGS) $(RC4TEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(DESTEST): $(DESTEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(DESTEST) $(CFLAGS) $(DESTEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(RANDTEST): $(RANDTEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(RANDTEST) $(CFLAGS) $(RANDTEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(DHTEST): $(DHTEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(DHTEST) $(CFLAGS) $(DHTEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(METHTEST): $(METHTEST).o $(DLIBCRYPTO)
+ 	$(CC) -o $(METHTEST) $(CFLAGS) $(METHTEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ $(SSLTEST): $(SSLTEST).o $(DLIBSSL) $(DLIBCRYPTO)
+ 	$(CC) -o $(SSLTEST) $(CFLAGS) $(SSLTEST).o $(PEX_LIBS) $(LIBSSL) $(LIBCRYPTO) $(EX_LIBS)
+ 
+ # DO NOT DELETE THIS LINE -- make depend depends on it.
+ 
+ bntest.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ bntest.o: /usr/include/stdlib.h /usr/include/string.h ../include/buffer.h
+ bntest.o: ../include/bn.h ../include/rand.h ../include/x509.h
+ bntest.o: ../include/stack.h ../include/asn1.h /usr/include/time.h
+ bntest.o: ../include/envelope.h ../include/md2.h ../include/md5.h
+ bntest.o: ../include/sha.h ../include/des.h ../include/rc4.h ../include/rc2.h
+ bntest.o: ../include/idea.h ../include/rsa.h ../include/dsa.h ../include/dh.h
+ bntest.o: ../include/err.h /usr/include/errno.h /usr/include/sys/errno.h
+ ideatest.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ ideatest.o: /usr/include/string.h /usr/include/stdlib.h ../include/idea.h
+ md2test.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ md2test.o: /usr/include/stdlib.h /usr/include/string.h ../include/md2.h
+ md5test.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ md5test.o: /usr/include/string.h /usr/include/stdlib.h ../include/md5.h
+ rc4test.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ rc4test.o: /usr/include/stdlib.h /usr/include/string.h ../include/rc4.h
+ destest.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ destest.o: /usr/include/stdlib.h /usr/include/unistd.h
+ destest.o: /usr/include/sys/types.h /usr/include/sys/machtypes.h
+ destest.o: /usr/include/sys/unistd.h /usr/include/string.h ../include/des.h
+ shatest.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ shatest.o: /usr/include/string.h /usr/include/stdlib.h ../include/sha.h
+ sha1test.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ sha1test.o: /usr/include/string.h /usr/include/stdlib.h ../include/sha.h
+ randtest.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ randtest.o: /usr/include/stdlib.h ../include/rand.h
+ dhtest.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ dhtest.o: /usr/include/stdlib.h /usr/include/string.h ../include/buffer.h
+ dhtest.o: ../include/bn.h ../include/dh.h
+ methtest.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ methtest.o: /usr/include/stdlib.h ../include/rsa.h ../include/bn.h
+ methtest.o: ../include/x509.h ../include/stack.h ../include/asn1.h
+ methtest.o: /usr/include/time.h ../include/envelope.h ../include/md2.h
+ methtest.o: ../include/md5.h ../include/sha.h ../include/des.h
+ methtest.o: ../include/rc4.h ../include/rc2.h ../include/idea.h
+ methtest.o: ../include/dsa.h ../include/dh.h ../include/meth.h
+ methtest.o: ../include/err.h /usr/include/errno.h /usr/include/sys/errno.h
+ rc2test.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ rc2test.o: /usr/include/string.h /usr/include/stdlib.h ../include/rc2.h
+ ssltest.o: /usr/include/stdio.h /usr/include/sys/feature_tests.h
+ ssltest.o: /usr/include/stdlib.h /usr/include/string.h /usr/include/errno.h
+ ssltest.o: /usr/include/sys/errno.h ../include/buffer.h ../e_os.h
+ ssltest.o: /usr/include/unistd.h /usr/include/sys/types.h
+ ssltest.o: /usr/include/sys/machtypes.h /usr/include/sys/unistd.h
+ ssltest.o: ../include/x509.h ../include/stack.h ../include/asn1.h
+ ssltest.o: /usr/include/time.h ../include/bn.h ../include/envelope.h
+ ssltest.o: ../include/md2.h ../include/md5.h ../include/sha.h
+ ssltest.o: ../include/des.h ../include/rc4.h ../include/rc2.h
+ ssltest.o: ../include/idea.h ../include/rsa.h ../include/dsa.h
+ ssltest.o: ../include/dh.h ../include/ssl.h ../include/err.h
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./doc/cipher.doc	Wed Jul 10 09:46:22 1996
--- ./doc/cipher.doc	Wed Jul 24 23:11:36 1996
***************
*** 57,62 ****
--- 57,63 ----
  EVP_CIPHER *EVP_des_cbc();     /* DES in cbc mode,     iv=8, block=8, key= 8 */
  EVP_CIPHER *EVP_des_ede_cbc(); /* DES in cbc ede mode, iv=8, block=8, key=16 */
  EVP_CIPHER *EVP_des_ede3_cbc();/* DES in cbc ede mode, iv=8, block=8, key=24 */
+ EVP_CIPHER *EVP_desx_cbc();    /* DES in desx cbc mode,iv=8, block=8, key=24 */
  EVP_CIPHER *EVP_rc4();         /* RC4,                 iv=0, block=1, key=16 */
  EVP_CIPHER *EVP_idea_ecb();    /* IDEA in ecb mode,    iv=0, block=8, key=16 */
  EVP_CIPHER *EVP_idea_cfb();    /* IDEA in cfb mode,    iv=8, block=1, key=16 */
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./doc/des.doc	Wed Jul 10 09:46:22 1996
--- ./doc/des.doc	Wed Jul 24 22:52:03 1996
***************
*** 147,152 ****
--- 147,166 ----
  	to pass in subsequent calls to des_ncbc_encrypt().  I advise using
  	des_ncbc_encrypt() instead of des_cbc_encrypt();
  
+ void des_xcbc_encrypt(
+ des_cblock *input,
+ des_cblock *output,
+ long length,
+ des_key_schedule sk,
+ des_cblock *ivec,
+ des_cblock *inw,
+ des_cblock *outw,
+ int enc);
+ 	This is RSA's DESX mode of DES.  It uses inw and outw to
+ 	'whiten' the encryption.  inw and outw are secret (unlike the iv)
+ 	and are as such, part of the key.  So the key is sort of 24 bytes.
+ 	This is much better than cbc des.
+ 	
  void des_3cbc_encrypt(
  des_cblock *input,
  des_cblock *output,
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./util/crypto.num	Wed Jul 10 09:46:45 1996
--- ./util/crypto.num	Wed Jul 24 23:28:18 1996
***************
*** 571,573 ****
--- 571,587 ----
  x509_by_file                       571
  x509_lookup                        572
  BIO_s_file_internal_w16            573
+ d2i_ASN1_BOOLEAN                   574
+ i2d_ASN1_BOOLEAN                   575
+ X509_EXTENSION_new                 576
+ X509_EXTENSION_free                577
+ i2d_X509_EXTENSION                 578
+ d2i_X509_EXTENSION                 579
+ CRYPTO_get_add_lock_callback       580
+ CRYPTO_set_add_lock_callback       581
+ CRYPTO_add_lock                    582
+ CRYPTO_get_lock_name               583
+ EVP_dss                            584
+ EVP_dss1                           585
+ EVP_desx_cbc                       586
+ des_xcbc_encrypt                   587
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./util/mkdef.pl	Wed Jul 10 09:46:46 1996
--- ./util/mkdef.pl	Wed Jul 24 08:38:25 1996
***************
*** 154,159 ****
--- 154,161 ----
  		{ return($1); }
  	elsif (/(CRYPTO_get_id_callback)/)
  		{ return($1); }
+ 	elsif (/(CRYPTO_get_add_lock_callback)/)
+ 		{ return($1); }
  	else
  		{
  		/\s\**(\S+)\s*\(/;
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./util/ssl.num	Wed Jul 10 14:54:50 1996
--- ./util/ssl.num	Wed Jul 24 08:36:22 1996
***************
*** 2,8 ****
  ERR_load_SSL_strings			2
  SSL_CTX_free				3
  SSL_CTX_new				4
! SSL_CTX_set_cert_verify_callback	5
  SSL_CTX_set_cipher_list			6
  SSL_CTX_set_default_verify		7
  SSL_ERR					8
--- 2,8 ----
  ERR_load_SSL_strings			2
  SSL_CTX_free				3
  SSL_CTX_new				4
! SSL_CTX_set_cert_verify_cb		5
  SSL_CTX_set_cipher_list			6
  SSL_CTX_set_default_verify		7
  SSL_ERR					8
***************
*** 69,71 ****
--- 69,72 ----
  SSL_CTX_use_certificate_file		69
  SSL_set_rfd				70
  SSL_set_wfd				71
+ SSL_CTX_set_default_passwd_cb           72
Binary files /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/.rand and ./ms/.rand differ
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/CERTCA.SRL	Wed Jul 10 09:46:27 1996
--- ./ms/CERTCA.SRL	Wed Jul 24 20:52:07 1996
***************
*** 1 ****
! 27
--- 1 ----
! 2A
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/CERTCA.SS	Wed Jul 10 09:46:27 1996
--- ./ms/CERTCA.SS	Wed Jul 24 20:51:54 1996
***************
*** 1,10 ****
  -----BEGIN CERTIFICATE-----
! MIIBWjCCAQUCAQAwDAYIKoZIhvcNAgUFADA5MQswCQYDVQQGEwJBVTEXMBUGA1UE
! ChMORG9kZ3kgQnJvdGhlcnMxETAPBgNVBAMTCERvZGd5IENBMB4XDTcwMDEwMTEy
! MDAwMFoXDTk2MDgwOTE1MTIwOFowOTELMAkGA1UEBhMCQVUxFzAVBgNVBAoTDkRv
! ZGd5IEJyb3RoZXJzMREwDwYDVQQDEwhEb2RneSBDQTBcMA0GCSqGSIb3DQEBAQUA
! A0sAMEgCQQDFvq8EN+lsASpIoYI9lOqSsPf6IIfWUo04YeBitD8yTkZnbvCr5emo
! fUxd9bGOWxpLnkztQ1gugq5vP2VFSX3DAgMBAAEwDAYIKoZIhvcNAgUFAANBAEkt
! RkX6+e4S1bMhqOxItkebE1IYyOVRZhpJzkP9vA+ni/Zec8KJlJS3Yp8dnwkVJcWD
! izOHKSaqphxbpHBRtJ8=
  -----END CERTIFICATE-----
--- 1,10 ----
  -----BEGIN CERTIFICATE-----
! MIIBXDCCAQYCAQAwDQYJKoZIhvcNAQEEBQAwOTELMAkGA1UEBhMCQVUxFzAVBgNV
! BAoTDkRvZGd5IEJyb3RoZXJzMREwDwYDVQQDEwhEb2RneSBDQTAeFw03MDAxMDEx
! MjAwMDBaFw05NjA4MjMxMDQ5MThaMDkxCzAJBgNVBAYTAkFVMRcwFQYDVQQKEw5E
! b2RneSBCcm90aGVyczERMA8GA1UEAxMIRG9kZ3kgQ0EwXDANBgkqhkiG9w0BAQEF
! AANLADBIAkEAstE7YptkoiP6FfP7h/yvEiI/TMaHzlvvpt3oysyB2hdh4LxJBHk0
! Lj9KwTp/2Y7MhOazTY+lGCTjyHcy2WM4pwIDAQABMA0GCSqGSIb3DQEBBAUAA0EA
! ZCmrsrstxwLeuxv1ec1uiJfhS9qiqcwl8uIDxo/7pjV0DZ+5dN3bIt2kUIVm+DQt
! o06CdWkWssUQeKzKy15gUQ==
  -----END CERTIFICATE-----
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/CERTU.SS	Wed Jul 10 09:46:27 1996
--- ./ms/CERTU.SS	Wed Jul 24 20:52:07 1996
***************
*** 1,10 ****
  -----BEGIN CERTIFICATE-----
! MIIBWzCCAQYCASYwDAYIKoZIhvcNAgUFADA5MQswCQYDVQQGEwJBVTEXMBUGA1UE
! ChMORG9kZ3kgQnJvdGhlcnMxETAPBgNVBAMTCERvZGd5IENBMB4XDTk2MDcxMDE1
! MTIxNFoXDTk2MDgwOTE1MTIxNFowOjELMAkGA1UEBhMCQVUxFzAVBgNVBAoTDkRv
! ZGd5IEJyb3RoZXJzMRIwEAYDVQQDEwlBIEJyb3RoZXIwXDANBgkqhkiG9w0BAQEF
! AANLADBIAkEA49W56oJT5nlQLRdNCk9tUoaR8/KTYPATAdJr7K2f3eTQEj2bmTi2
! 180hsM9Lbq03HdfHuA1aSwqVy0p9gXRkJQIDAQABMAwGCCqGSIb3DQIFBQADQQAx
! oxwfsrwtpXT8m5WwhPe3qDnBqJxtJCZNdfD6RUUoVaYEvc8oxiYAXftksLNwX1v2
! uWnU7dxYjIsWYsKvF+b1
  -----END CERTIFICATE-----
--- 1,10 ----
  -----BEGIN CERTIFICATE-----
! MIIBXTCCAQcCASkwDQYJKoZIhvcNAQEEBQAwOTELMAkGA1UEBhMCQVUxFzAVBgNV
! BAoTDkRvZGd5IEJyb3RoZXJzMREwDwYDVQQDEwhEb2RneSBDQTAeFw05NjA3MjQx
! MDQ5MzFaFw05NjA4MjMxMDQ5MzFaMDoxCzAJBgNVBAYTAkFVMRcwFQYDVQQKEw5E
! b2RneSBCcm90aGVyczESMBAGA1UEAxMJQSBCcm90aGVyMFwwDQYJKoZIhvcNAQEB
! BQADSwAwSAJBANgxVmtg+5HMLTs94Jfx8b/aw1tweGtcr6qnfvngXfHaH420ib8l
! FhfK4kOoN8O9wIsDevJSa4unjUHtYLStvG0CAwEAATANBgkqhkiG9w0BAQQFAANB
! AEExW1khAtwVtA1k590bSx3ra2mPkpOPancf9hdX9NgP5WxzDbF1YSsMAlGWRZab
! /F88dlDPpqJ62llEnw4sz9E=
  -----END CERTIFICATE-----
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/crypto16.def	Fri Jul 12 17:22:21 1996
--- ./ms/crypto16.def	Thu Jul 25 16:07:20 1996
***************
*** 126,134 ****
--- 126,138 ----
      _CONF_get_section                   @112
      _CONF_get_string                    @113
      _CONF_load                          @114
+     _CRYPTO_add_lock                    @582
+     _CRYPTO_get_add_lock_callback       @580
      _CRYPTO_get_id_callback             @115
+     _CRYPTO_get_lock_name               @583
      _CRYPTO_get_locking_callback        @116
      _CRYPTO_lock                        @117
+     _CRYPTO_set_add_lock_callback       @581
      _CRYPTO_set_id_callback             @118
      _CRYPTO_set_locking_callback        @119
      _CRYPTO_thread_id                   @120
***************
*** 219,224 ****
--- 223,231 ----
      _EVP_des_ede_cfb                    @207
      _EVP_des_ede_ofb                    @208
      _EVP_des_ofb                        @209
+     _EVP_desx_cbc                       @586
+     _EVP_dss                            @584
+     _EVP_dss1                           @585
      _EVP_get_MDbyname                   @210
      _EVP_get_cipherbyname               @211
      _EVP_get_pw_prompt                  @212
***************
*** 342,347 ****
--- 349,356 ----
      _X509_CRL_INFO_new                  @336
      _X509_CRL_free                      @337
      _X509_CRL_new                       @338
+     _X509_EXTENSION_free                @577
+     _X509_EXTENSION_new                 @576
      _X509_INFO_free                     @339
      _X509_INFO_new                      @340
      _X509_NAME_ENTRY_free               @341
***************
*** 409,414 ****
--- 418,424 ----
      _bn_sqr_words                       @405
      _crypt                              @406
      _d2i_ASN1_BIT_STRING                @407
+     _d2i_ASN1_BOOLEAN                   @574
      _d2i_ASN1_HEADER                    @408
      _d2i_ASN1_IA5STRING                 @409
      _d2i_ASN1_INTEGER                   @410
***************
*** 447,452 ****
--- 457,463 ----
      _d2i_X509_CINF                      @443
      _d2i_X509_CRL                       @444
      _d2i_X509_CRL_INFO                  @445
+     _d2i_X509_EXTENSION                 @579
      _d2i_X509_NAME                      @446
      _d2i_X509_NAME_ENTRY                @447
      _d2i_X509_PKEY                      @448
***************
*** 489,497 ****
--- 500,510 ----
      _des_set_odd_parity                 @485
      _des_string_to_2keys                @486
      _des_string_to_key                  @487
+     _des_xcbc_encrypt                   @587
      _i2a_ASN1_INTEGER                   @488
      _i2a_ASN1_OBJECT                    @489
      _i2d_ASN1_BIT_STRING                @490
+     _i2d_ASN1_BOOLEAN                   @575
      _i2d_ASN1_HEADER                    @491
      _i2d_ASN1_IA5STRING                 @492
      _i2d_ASN1_INTEGER                   @493
***************
*** 526,531 ****
--- 539,545 ----
      _i2d_X509_CINF                      @522
      _i2d_X509_CRL                       @523
      _i2d_X509_CRL_INFO                  @524
+     _i2d_X509_EXTENSION                 @578
      _i2d_X509_NAME                      @525
      _i2d_X509_NAME_ENTRY                @526
      _i2d_X509_PKEY                      @527
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/crypto32.def	Fri Jul 12 17:22:24 1996
--- ./ms/crypto32.def	Thu Jul 25 16:07:22 1996
***************
*** 121,129 ****
--- 121,133 ----
      CONF_get_section                   @112
      CONF_get_string                    @113
      CONF_load                          @114
+     CRYPTO_add_lock                    @582
+     CRYPTO_get_add_lock_callback       @580
      CRYPTO_get_id_callback             @115
+     CRYPTO_get_lock_name               @583
      CRYPTO_get_locking_callback        @116
      CRYPTO_lock                        @117
+     CRYPTO_set_add_lock_callback       @581
      CRYPTO_set_id_callback             @118
      CRYPTO_set_locking_callback        @119
      CRYPTO_thread_id                   @120
***************
*** 216,221 ****
--- 220,228 ----
      EVP_des_ede_cfb                    @207
      EVP_des_ede_ofb                    @208
      EVP_des_ofb                        @209
+     EVP_desx_cbc                       @586
+     EVP_dss                            @584
+     EVP_dss1                           @585
      EVP_get_MDbyname                   @210
      EVP_get_cipherbyname               @211
      EVP_get_pw_prompt                  @212
***************
*** 345,350 ****
--- 352,359 ----
      X509_CRL_INFO_new                  @336
      X509_CRL_free                      @337
      X509_CRL_new                       @338
+     X509_EXTENSION_free                @577
+     X509_EXTENSION_new                 @576
      X509_INFO_free                     @339
      X509_INFO_new                      @340
      X509_NAME_ENTRY_free               @341
***************
*** 414,419 ****
--- 423,429 ----
      bn_sqr_words                       @405
      crypt                              @406
      d2i_ASN1_BIT_STRING                @407
+     d2i_ASN1_BOOLEAN                   @574
      d2i_ASN1_HEADER                    @408
      d2i_ASN1_IA5STRING                 @409
      d2i_ASN1_INTEGER                   @410
***************
*** 452,457 ****
--- 462,468 ----
      d2i_X509_CINF                      @443
      d2i_X509_CRL                       @444
      d2i_X509_CRL_INFO                  @445
+     d2i_X509_EXTENSION                 @579
      d2i_X509_NAME                      @446
      d2i_X509_NAME_ENTRY                @447
      d2i_X509_PKEY                      @448
***************
*** 494,502 ****
--- 505,515 ----
      des_set_odd_parity                 @485
      des_string_to_2keys                @486
      des_string_to_key                  @487
+     des_xcbc_encrypt                   @587
      i2a_ASN1_INTEGER                   @488
      i2a_ASN1_OBJECT                    @489
      i2d_ASN1_BIT_STRING                @490
+     i2d_ASN1_BOOLEAN                   @575
      i2d_ASN1_HEADER                    @491
      i2d_ASN1_IA5STRING                 @492
      i2d_ASN1_INTEGER                   @493
***************
*** 531,536 ****
--- 544,550 ----
      i2d_X509_CINF                      @522
      i2d_X509_CRL                       @523
      i2d_X509_CRL_INFO                  @524
+     i2d_X509_EXTENSION                 @578
      i2d_X509_NAME                      @525
      i2d_X509_NAME_ENTRY                @526
      i2d_X509_PKEY                      @527
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/KEYCA.SS	Wed Jul 10 09:46:27 1996
--- ./ms/KEYCA.SS	Wed Jul 24 20:51:53 1996
***************
*** 1,9 ****
  -----BEGIN RSA PRIVATE KEY-----
! MIIBOgIBAAJBAMW+rwQ36WwBKkihgj2U6pKw9/ogh9ZSjThh4GK0PzJORmdu8Kvl
! 6ah9TF31sY5bGkueTO1DWC6Crm8/ZUVJfcMCAwEAAQJAe1RD/5OHh47qekYQ3quD
! 6V1qK5wiXC88WI/izGyyhYJmE/LXLPnQcrhPdYo0rcoUjaVeSpFHRAlrqo3BIkVE
! kQIhAPkz5FUlWrZ5Xq91tRLYwFXfMOvBevuOtuDwLePNbmdNAiEAyyN6GnSpmtkv
! NYqIYbs8lHMUR8fWh7TZOGIpS44JkU8CIQDwvQeUlbx3UPJ+kDh313qeujlZVxUG
! lUzoKj46tkc0dQIgPZB08wukU0+7JQjlKGlshLkTzmVcOSiwJIxrY4CambUCIB3T
! 2Ds01cHhDkGefOdObGfrN7cYF+xibRKEta6estLm
  -----END RSA PRIVATE KEY-----
--- 1,9 ----
  -----BEGIN RSA PRIVATE KEY-----
! MIIBOwIBAAJBALLRO2KbZKIj+hXz+4f8rxIiP0zGh85b76bd6MrMgdoXYeC8SQR5
! NC4/SsE6f9mOzITms02PpRgk48h3MtljOKcCAwEAAQJACnudoaA+fArj5FmTS1uS
! 39tGHrgcygo1uHCV7x2iFyjikHqpdJfdL6qn4MFTskdUt1nYcfa/oj57kVEnGGr/
! AQIhAOq1wWUjU9jV6L00PsnYTJ7eBdR5QlrUlq704PcuSFFBAiEAwwmVFLQl55Hr
! LCyNmthpSqhwrQBVLfIfnB6RAiCBJ+cCIQCX5SqUtokz4jOuBtq/rBDiG5OwTw1n
! VP9zmJziuvwoQQIgaF4yVrfoKLke/a6BwEDaZ0cntIwfCM0uOR7qPhcixjUCIQDI
! UoXzsduS4isiiuMcTV+mAJADt9595Q0U/LopxkoOug==
  -----END RSA PRIVATE KEY-----
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/KEYU.SS	Wed Jul 10 09:46:28 1996
--- ./ms/KEYU.SS	Wed Jul 24 20:52:05 1996
***************
*** 1,9 ****
  -----BEGIN RSA PRIVATE KEY-----
! MIIBOgIBAAJBAOPVueqCU+Z5UC0XTQpPbVKGkfPyk2DwEwHSa+ytn93k0BI9m5k4
! ttfNIbDPS26tNx3Xx7gNWksKlctKfYF0ZCUCAwEAAQJAXuD2V26GugfzF5QIhS6m
! fCOGTGzMayYPBEc4oot7c8+4Yl2G9/CnE4gBC5DSGlANlddrond3pExCvILjWcLX
! AQIhAP2xUNV3e8DDqHXD7oPuzmUY9OiHZ5S7o6kBRouDHvoVAiEA5eg0Yy1pE04e
! 2b3PbejU4OWVwQssX87GRdE0PCosldECIQCrldBccRHskOlRrZGW/l/ulPCgjWSL
! flX1Kv2xwp+i+QIgReJEclUuWGjppcQ1ljIs60O+NpS/40uGJ1jFKPik3tECIFrY
! 6rjPXrpgdhKX8hsL1bDtIa2TUqpeHI41exx3+v1+
  -----END RSA PRIVATE KEY-----
--- 1,9 ----
  -----BEGIN RSA PRIVATE KEY-----
! MIIBOgIBAAJBANgxVmtg+5HMLTs94Jfx8b/aw1tweGtcr6qnfvngXfHaH420ib8l
! FhfK4kOoN8O9wIsDevJSa4unjUHtYLStvG0CAwEAAQJBALN5UerWmkHRJIOXvMmn
! GzBQZfmVBwLp8RNU9X5vGs5Y5VeHwNV5Q4ynnNU2hLYyE1lnXDc32WP2mGAWRtUV
! ZekCIQDs+gavonTVFIyXWHt8363cOe75ioDGJZCgSxKL7Ty4CwIhAOmMMUL9JK28
! NKiSAHGKUVOoUG9OVZm2J/UcWn4lnRBnAiAvYvvNSS4VoctPRElFOjE49Xi8+54u
! gTp/YyOtSV436wIgd7VcKrIGcubdNupfP9NeDDthvyuvxLIRmRmHaNFuyFECIFYC
! Xh61F/rOeGsh0Lc1PfoDcDQ9oUodT4ak7G4wxhQX
  -----END RSA PRIVATE KEY-----
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/msdos.mak	Fri Jul 12 17:22:12 1996
--- ./ms/msdos.mak	Thu Jul 25 16:07:12 1996
***************
*** 145,211 ****
  	$(OBJ_D)\enc_read.obj $(OBJ_D)\enc_writ.obj $(OBJ_D)\fcrypt.obj \
  	$(OBJ_D)\ncbc_enc.obj $(OBJ_D)\ofb64enc.obj $(OBJ_D)\ofb_enc.obj \
  	$(OBJ_D)\str2key.obj $(OBJ_D)\pcbc_enc.obj $(OBJ_D)\qud_cksm.obj \
! 	$(OBJ_D)\rand_key.obj $(OBJ_D)\read_pwd.obj $(OBJ_D)\rpc_enc.obj \
! 	$(OBJ_D)\cbc_cksm.obj $(OBJ_D)\supp.obj $(OBJ_D)\rc4_enc.obj \
! 	$(OBJ_D)\rc2_ecb.obj $(OBJ_D)\rc2_skey.obj $(OBJ_D)\rc2_cbc.obj \
! 	$(OBJ_D)\rc2cfb64.obj $(OBJ_D)\rc2ofb64.obj $(OBJ_D)\i_cbc.obj \
! 	$(OBJ_D)\i_cfb64.obj $(OBJ_D)\i_ofb64.obj $(OBJ_D)\i_ecb.obj \
! 	$(OBJ_D)\i_skey.obj $(OBJ_D)\bn_add.obj $(OBJ_D)\bn_div.obj \
! 	$(OBJ_D)\bn_exp.obj $(OBJ_D)\bn_lib.obj $(OBJ_D)\bn_mod.obj \
! 	$(OBJ_D)\bn_mul.obj $(OBJ_D)\bn_print.obj $(OBJ_D)\bn_rand.obj \
! 	$(OBJ_D)\bn_shift.obj $(OBJ_D)\bn_sub.obj $(OBJ_D)\bn_word.obj \
! 	$(OBJ_D)\bn_gcd.obj $(OBJ_D)\bn_prime.obj $(OBJ_D)\bn_err.obj \
! 	$(OBJ_D)\bn_sqr.obj $(BN_MULW_OBJ) $(OBJ_D)\bn_recp.obj \
! 	$(OBJ_D)\bn_mont.obj $(OBJ_D)\rsa_enc.obj $(OBJ_D)\rsa_gen.obj \
! 	$(OBJ_D)\rsa_lib.obj $(OBJ_D)\rsa_sign.obj $(OBJ_D)\rsa_err.obj \
! 	$(OBJ_D)\dsa_lib.obj $(OBJ_D)\dsa_vrf.obj $(OBJ_D)\dsa_sign.obj \
! 	$(OBJ_D)\dsa_err.obj $(OBJ_D)\dh_gen.obj $(OBJ_D)\dh_key.obj \
! 	$(OBJ_D)\dh_lib.obj $(OBJ_D)\dh_check.obj $(OBJ_D)\dh_err.obj \
! 	$(OBJ_D)\buffer.obj $(OBJ_D)\bio_lib.obj $(OBJ_D)\bio_cb.obj \
! 	$(OBJ_D)\buf_err.obj $(OBJ_D)\bss_mem.obj $(OBJ_D)\bss_null.obj \
! 	$(OBJ_D)\bss_fd.obj $(OBJ_D)\bss_file.obj $(OBJ_D)\bss_sock.obj \
! 	$(OBJ_D)\bf_buff.obj $(OBJ_D)\stack.obj $(OBJ_D)\lhash.obj \
! 	$(OBJ_D)\lh_stats.obj $(OBJ_D)\md5_rand.obj $(OBJ_D)\randfile.obj \
! 	$(OBJ_D)\err.obj $(OBJ_D)\err_all.obj $(OBJ_D)\obj_dat.obj \
! 	$(OBJ_D)\obj_lib.obj $(OBJ_D)\obj_err.obj $(OBJ_D)\encode.obj \
! 	$(OBJ_D)\digest.obj $(OBJ_D)\evp_enc.obj $(OBJ_D)\evp_key.obj \
! 	$(OBJ_D)\e_ecb_d.obj $(OBJ_D)\e_cbc_d.obj $(OBJ_D)\e_cfb_d.obj \
! 	$(OBJ_D)\e_ofb_d.obj $(OBJ_D)\e_ecb_i.obj $(OBJ_D)\e_cbc_i.obj \
! 	$(OBJ_D)\e_cfb_i.obj $(OBJ_D)\e_ofb_i.obj $(OBJ_D)\e_ecb_3d.obj \
! 	$(OBJ_D)\e_cbc_3d.obj $(OBJ_D)\e_rc4.obj $(OBJ_D)\e_names.obj \
! 	$(OBJ_D)\e_cfb_3d.obj $(OBJ_D)\e_ofb_3d.obj $(OBJ_D)\e_ecb_r2.obj \
! 	$(OBJ_D)\e_cbc_r2.obj $(OBJ_D)\e_cfb_r2.obj $(OBJ_D)\e_ofb_r2.obj \
! 	$(OBJ_D)\m_md2.obj $(OBJ_D)\m_md5.obj $(OBJ_D)\m_sha.obj \
! 	$(OBJ_D)\m_sha1.obj $(OBJ_D)\m_dss.obj $(OBJ_D)\m_dss1.obj \
! 	$(OBJ_D)\m_names.obj $(OBJ_D)\p_open.obj $(OBJ_D)\p_seal.obj \
! 	$(OBJ_D)\p_sign.obj $(OBJ_D)\p_verify.obj $(OBJ_D)\p_lib.obj \
! 	$(OBJ_D)\bio_md.obj $(OBJ_D)\evp_err.obj $(OBJ_D)\pem_sign.obj \
! 	$(OBJ_D)\pem_seal.obj $(OBJ_D)\pem_info.obj $(OBJ_D)\pem_lib.obj \
! 	$(OBJ_D)\pem_err.obj $(OBJ_D)\x509_def.obj $(OBJ_D)\x509_r2x.obj \
! 	$(OBJ_D)\x509_cmp.obj $(OBJ_D)\x509_obj.obj $(OBJ_D)\x509_req.obj \
! 	$(OBJ_D)\x509_vrf.obj $(OBJ_D)\x509_crt.obj $(OBJ_D)\x509_ath.obj \
! 	$(OBJ_D)\x509_err.obj $(OBJ_D)\a_object.obj $(OBJ_D)\a_bitstr.obj \
! 	$(OBJ_D)\a_utctm.obj $(OBJ_D)\a_int.obj $(OBJ_D)\a_octet.obj \
! 	$(OBJ_D)\a_print.obj $(OBJ_D)\a_type.obj $(OBJ_D)\a_set.obj \
! 	$(OBJ_D)\a_dup.obj $(OBJ_D)\a_d2i_fp.obj $(OBJ_D)\a_i2d_fp.obj \
! 	$(OBJ_D)\a_sign.obj $(OBJ_D)\a_verify.obj $(OBJ_D)\x_algor.obj \
! 	$(OBJ_D)\x_val.obj $(OBJ_D)\x_pubkey.obj $(OBJ_D)\x_sig.obj \
! 	$(OBJ_D)\x_req.obj $(OBJ_D)\x_attrib.obj $(OBJ_D)\x_name.obj \
! 	$(OBJ_D)\x_cinf.obj $(OBJ_D)\x_x509.obj $(OBJ_D)\x_crl.obj \
! 	$(OBJ_D)\x_info.obj $(OBJ_D)\x_spki.obj $(OBJ_D)\d2i_r_pr.obj \
! 	$(OBJ_D)\i2d_r_pr.obj $(OBJ_D)\d2i_r_pu.obj $(OBJ_D)\i2d_r_pu.obj \
! 	$(OBJ_D)\d2i_s_pr.obj $(OBJ_D)\d2i_s_pu.obj $(OBJ_D)\d2i_pu.obj \
! 	$(OBJ_D)\d2i_pr.obj $(OBJ_D)\i2d_pu.obj $(OBJ_D)\i2d_pr.obj \
! 	$(OBJ_D)\t_req.obj $(OBJ_D)\t_x509.obj $(OBJ_D)\t_pkey.obj \
! 	$(OBJ_D)\p7_i_s.obj $(OBJ_D)\p7_signi.obj $(OBJ_D)\p7_signd.obj \
! 	$(OBJ_D)\p7_recip.obj $(OBJ_D)\p7_enc_c.obj $(OBJ_D)\p7_evp.obj \
! 	$(OBJ_D)\p7_dgst.obj $(OBJ_D)\p7_s_e.obj $(OBJ_D)\p7_enc.obj \
! 	$(OBJ_D)\p7_lib.obj $(OBJ_D)\f_int.obj $(OBJ_D)\i2d_dh.obj \
! 	$(OBJ_D)\d2i_dh.obj $(OBJ_D)\n_pkey.obj $(OBJ_D)\a_hdr.obj \
! 	$(OBJ_D)\x_pkey.obj $(OBJ_D)\asn1_par.obj $(OBJ_D)\asn1_lib.obj \
! 	$(OBJ_D)\asn1_err.obj $(OBJ_D)\meth_lib.obj $(OBJ_D)\x509meth.obj \
! 	$(OBJ_D)\by_file.obj $(OBJ_D)\by_dir.obj $(OBJ_D)\meth_err.obj \
! 	$(OBJ_D)\conf.obj $(OBJ_D)\conf_err.obj $(OBJ_D)\txt_db.obj
  
  RSAGLUEOBJ=$(OBJ_D)\rsaref.obj \
  	$(OBJ_D)\rsar_err.obj
--- 145,213 ----
  	$(OBJ_D)\enc_read.obj $(OBJ_D)\enc_writ.obj $(OBJ_D)\fcrypt.obj \
  	$(OBJ_D)\ncbc_enc.obj $(OBJ_D)\ofb64enc.obj $(OBJ_D)\ofb_enc.obj \
  	$(OBJ_D)\str2key.obj $(OBJ_D)\pcbc_enc.obj $(OBJ_D)\qud_cksm.obj \
! 	$(OBJ_D)\rand_key.obj $(OBJ_D)\xcbc_enc.obj $(OBJ_D)\read_pwd.obj \
! 	$(OBJ_D)\rpc_enc.obj $(OBJ_D)\cbc_cksm.obj $(OBJ_D)\supp.obj \
! 	$(OBJ_D)\rc4_enc.obj $(OBJ_D)\rc2_ecb.obj $(OBJ_D)\rc2_skey.obj \
! 	$(OBJ_D)\rc2_cbc.obj $(OBJ_D)\rc2cfb64.obj $(OBJ_D)\rc2ofb64.obj \
! 	$(OBJ_D)\i_cbc.obj $(OBJ_D)\i_cfb64.obj $(OBJ_D)\i_ofb64.obj \
! 	$(OBJ_D)\i_ecb.obj $(OBJ_D)\i_skey.obj $(OBJ_D)\bn_add.obj \
! 	$(OBJ_D)\bn_div.obj $(OBJ_D)\bn_exp.obj $(OBJ_D)\bn_lib.obj \
! 	$(OBJ_D)\bn_mod.obj $(OBJ_D)\bn_mul.obj $(OBJ_D)\bn_print.obj \
! 	$(OBJ_D)\bn_rand.obj $(OBJ_D)\bn_shift.obj $(OBJ_D)\bn_sub.obj \
! 	$(OBJ_D)\bn_word.obj $(OBJ_D)\bn_gcd.obj $(OBJ_D)\bn_prime.obj \
! 	$(OBJ_D)\bn_err.obj $(OBJ_D)\bn_sqr.obj $(BN_MULW_OBJ) \
! 	$(OBJ_D)\bn_recp.obj $(OBJ_D)\bn_mont.obj $(OBJ_D)\rsa_enc.obj \
! 	$(OBJ_D)\rsa_gen.obj $(OBJ_D)\rsa_lib.obj $(OBJ_D)\rsa_sign.obj \
! 	$(OBJ_D)\rsa_err.obj $(OBJ_D)\dsa_lib.obj $(OBJ_D)\dsa_vrf.obj \
! 	$(OBJ_D)\dsa_sign.obj $(OBJ_D)\dsa_err.obj $(OBJ_D)\dh_gen.obj \
! 	$(OBJ_D)\dh_key.obj $(OBJ_D)\dh_lib.obj $(OBJ_D)\dh_check.obj \
! 	$(OBJ_D)\dh_err.obj $(OBJ_D)\buffer.obj $(OBJ_D)\bio_lib.obj \
! 	$(OBJ_D)\bio_cb.obj $(OBJ_D)\buf_err.obj $(OBJ_D)\bss_mem.obj \
! 	$(OBJ_D)\bss_null.obj $(OBJ_D)\bss_fd.obj $(OBJ_D)\bss_file.obj \
! 	$(OBJ_D)\bss_sock.obj $(OBJ_D)\bf_buff.obj $(OBJ_D)\stack.obj \
! 	$(OBJ_D)\lhash.obj $(OBJ_D)\lh_stats.obj $(OBJ_D)\md5_rand.obj \
! 	$(OBJ_D)\randfile.obj $(OBJ_D)\err.obj $(OBJ_D)\err_all.obj \
! 	$(OBJ_D)\obj_dat.obj $(OBJ_D)\obj_lib.obj $(OBJ_D)\obj_err.obj \
! 	$(OBJ_D)\encode.obj $(OBJ_D)\digest.obj $(OBJ_D)\evp_enc.obj \
! 	$(OBJ_D)\evp_key.obj $(OBJ_D)\e_ecb_d.obj $(OBJ_D)\e_cbc_d.obj \
! 	$(OBJ_D)\e_cfb_d.obj $(OBJ_D)\e_ofb_d.obj $(OBJ_D)\e_ecb_i.obj \
! 	$(OBJ_D)\e_cbc_i.obj $(OBJ_D)\e_cfb_i.obj $(OBJ_D)\e_ofb_i.obj \
! 	$(OBJ_D)\e_ecb_3d.obj $(OBJ_D)\e_cbc_3d.obj $(OBJ_D)\e_rc4.obj \
! 	$(OBJ_D)\e_names.obj $(OBJ_D)\e_cfb_3d.obj $(OBJ_D)\e_ofb_3d.obj \
! 	$(OBJ_D)\e_xcbc_d.obj $(OBJ_D)\e_ecb_r2.obj $(OBJ_D)\e_cbc_r2.obj \
! 	$(OBJ_D)\e_cfb_r2.obj $(OBJ_D)\e_ofb_r2.obj $(OBJ_D)\m_md2.obj \
! 	$(OBJ_D)\m_md5.obj $(OBJ_D)\m_sha.obj $(OBJ_D)\m_sha1.obj \
! 	$(OBJ_D)\m_dss.obj $(OBJ_D)\m_dss1.obj $(OBJ_D)\m_names.obj \
! 	$(OBJ_D)\p_open.obj $(OBJ_D)\p_seal.obj $(OBJ_D)\p_sign.obj \
! 	$(OBJ_D)\p_verify.obj $(OBJ_D)\p_lib.obj $(OBJ_D)\bio_md.obj \
! 	$(OBJ_D)\evp_err.obj $(OBJ_D)\pem_sign.obj $(OBJ_D)\pem_seal.obj \
! 	$(OBJ_D)\pem_info.obj $(OBJ_D)\pem_lib.obj $(OBJ_D)\pem_err.obj \
! 	$(OBJ_D)\x509_def.obj $(OBJ_D)\x509_r2x.obj $(OBJ_D)\x509_cmp.obj \
! 	$(OBJ_D)\x509_obj.obj $(OBJ_D)\x509_req.obj $(OBJ_D)\x509_vrf.obj \
! 	$(OBJ_D)\x509_crt.obj $(OBJ_D)\x509_ath.obj $(OBJ_D)\x509_err.obj \
! 	$(OBJ_D)\a_object.obj $(OBJ_D)\a_bitstr.obj $(OBJ_D)\a_utctm.obj \
! 	$(OBJ_D)\a_int.obj $(OBJ_D)\a_octet.obj $(OBJ_D)\a_print.obj \
! 	$(OBJ_D)\a_type.obj $(OBJ_D)\a_set.obj $(OBJ_D)\a_dup.obj \
! 	$(OBJ_D)\a_d2i_fp.obj $(OBJ_D)\a_i2d_fp.obj $(OBJ_D)\a_sign.obj \
! 	$(OBJ_D)\a_verify.obj $(OBJ_D)\x_algor.obj $(OBJ_D)\x_val.obj \
! 	$(OBJ_D)\x_pubkey.obj $(OBJ_D)\x_sig.obj $(OBJ_D)\x_req.obj \
! 	$(OBJ_D)\x_attrib.obj $(OBJ_D)\x_name.obj $(OBJ_D)\x_cinf.obj \
! 	$(OBJ_D)\x_x509.obj $(OBJ_D)\x_crl.obj $(OBJ_D)\x_info.obj \
! 	$(OBJ_D)\x_spki.obj $(OBJ_D)\d2i_r_pr.obj $(OBJ_D)\i2d_r_pr.obj \
! 	$(OBJ_D)\d2i_r_pu.obj $(OBJ_D)\i2d_r_pu.obj $(OBJ_D)\d2i_s_pr.obj \
! 	$(OBJ_D)\d2i_s_pu.obj $(OBJ_D)\d2i_pu.obj $(OBJ_D)\d2i_pr.obj \
! 	$(OBJ_D)\i2d_pu.obj $(OBJ_D)\i2d_pr.obj $(OBJ_D)\t_req.obj \
! 	$(OBJ_D)\t_x509.obj $(OBJ_D)\t_pkey.obj $(OBJ_D)\p7_i_s.obj \
! 	$(OBJ_D)\p7_signi.obj $(OBJ_D)\p7_signd.obj $(OBJ_D)\p7_recip.obj \
! 	$(OBJ_D)\p7_enc_c.obj $(OBJ_D)\p7_evp.obj $(OBJ_D)\p7_dgst.obj \
! 	$(OBJ_D)\p7_s_e.obj $(OBJ_D)\p7_enc.obj $(OBJ_D)\p7_lib.obj \
! 	$(OBJ_D)\f_int.obj $(OBJ_D)\i2d_dh.obj $(OBJ_D)\d2i_dh.obj \
! 	$(OBJ_D)\n_pkey.obj $(OBJ_D)\a_hdr.obj $(OBJ_D)\x_pkey.obj \
! 	$(OBJ_D)\a_bool.obj $(OBJ_D)\x_exten.obj $(OBJ_D)\asn1_par.obj \
! 	$(OBJ_D)\asn1_lib.obj $(OBJ_D)\asn1_err.obj $(OBJ_D)\meth_lib.obj \
! 	$(OBJ_D)\x509meth.obj $(OBJ_D)\by_file.obj $(OBJ_D)\by_dir.obj \
! 	$(OBJ_D)\meth_err.obj $(OBJ_D)\conf.obj $(OBJ_D)\conf_err.obj \
! 	$(OBJ_D)\txt_db.obj
  
  RSAGLUEOBJ=$(OBJ_D)\rsaref.obj \
  	$(OBJ_D)\rsar_err.obj
***************
*** 693,698 ****
--- 695,703 ----
  $(OBJ_D)\rand_key.obj: $(SRC_D)\crypto\des\rand_key.c
  	$(CC) /Fo$(OBJ_D)\rand_key.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\rand_key.c
  
+ $(OBJ_D)\xcbc_enc.obj: $(SRC_D)\crypto\des\xcbc_enc.c
+ 	$(CC) /Fo$(OBJ_D)\xcbc_enc.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\xcbc_enc.c
+ 
  $(OBJ_D)\read_pwd.obj: $(SRC_D)\crypto\des\read_pwd.c
  	$(CC) /Fo$(OBJ_D)\read_pwd.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\read_pwd.c
  
***************
*** 948,953 ****
--- 953,961 ----
  $(OBJ_D)\e_ofb_3d.obj: $(SRC_D)\crypto\evp\e_ofb_3d.c
  	$(CC) /Fo$(OBJ_D)\e_ofb_3d.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_ofb_3d.c
  
+ $(OBJ_D)\e_xcbc_d.obj: $(SRC_D)\crypto\evp\e_xcbc_d.c
+ 	$(CC) /Fo$(OBJ_D)\e_xcbc_d.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_xcbc_d.c
+ 
  $(OBJ_D)\e_ecb_r2.obj: $(SRC_D)\crypto\evp\e_ecb_r2.c
  	$(CC) /Fo$(OBJ_D)\e_ecb_r2.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_ecb_r2.c
  
***************
*** 1206,1211 ****
--- 1214,1225 ----
  $(OBJ_D)\x_pkey.obj: $(SRC_D)\crypto\asn1\x_pkey.c
  	$(CC) /Fo$(OBJ_D)\x_pkey.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\x_pkey.c
  
+ $(OBJ_D)\a_bool.obj: $(SRC_D)\crypto\asn1\a_bool.c
+ 	$(CC) /Fo$(OBJ_D)\a_bool.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\a_bool.c
+ 
+ $(OBJ_D)\x_exten.obj: $(SRC_D)\crypto\asn1\x_exten.c
+ 	$(CC) /Fo$(OBJ_D)\x_exten.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\x_exten.c
+ 
  $(OBJ_D)\asn1_par.obj: $(SRC_D)\crypto\asn1\asn1_par.c
  	$(CC) /Fo$(OBJ_D)\asn1_par.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\asn1_par.c
  
***************
*** 1402,1407 ****
--- 1416,1422 ----
  y
  +$(BN_MULW_OBJ) &
  +$(OBJ_D)\a_bitstr.obj &
+ +$(OBJ_D)\a_bool.obj &
  +$(OBJ_D)\a_d2i_fp.obj &
  +$(OBJ_D)\a_dup.obj &
  +$(OBJ_D)\a_hdr.obj &
***************
*** 1492,1497 ****
--- 1507,1513 ----
  +$(OBJ_D)\e_ofb_i.obj &
  +$(OBJ_D)\e_ofb_r2.obj &
  +$(OBJ_D)\e_rc4.obj &
+ +$(OBJ_D)\e_xcbc_d.obj &
  +$(OBJ_D)\ecb3_enc.obj &
  +$(OBJ_D)\ecb_enc.obj &
  +$(OBJ_D)\ede_enc.obj &
***************
*** 1602,1607 ****
--- 1618,1624 ----
  +$(OBJ_D)\x_attrib.obj &
  +$(OBJ_D)\x_cinf.obj &
  +$(OBJ_D)\x_crl.obj &
+ +$(OBJ_D)\x_exten.obj &
  +$(OBJ_D)\x_info.obj &
  +$(OBJ_D)\x_name.obj &
  +$(OBJ_D)\x_pkey.obj &
***************
*** 1611,1616 ****
--- 1628,1634 ----
  +$(OBJ_D)\x_spki.obj &
  +$(OBJ_D)\x_val.obj &
  +$(OBJ_D)\x_x509.obj &
+ +$(OBJ_D)\xcbc_enc.obj &
  
  
  <<
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/nt.mak	Fri Jul 12 17:22:18 1996
--- ./ms/nt.mak	Thu Jul 25 16:07:16 1996
***************
*** 148,214 ****
  	$(OBJ_D)\enc_read.obj $(OBJ_D)\enc_writ.obj $(OBJ_D)\fcrypt.obj \
  	$(OBJ_D)\ncbc_enc.obj $(OBJ_D)\ofb64enc.obj $(OBJ_D)\ofb_enc.obj \
  	$(OBJ_D)\str2key.obj $(OBJ_D)\pcbc_enc.obj $(OBJ_D)\qud_cksm.obj \
! 	$(OBJ_D)\rand_key.obj $(OBJ_D)\read_pwd.obj $(OBJ_D)\rpc_enc.obj \
! 	$(OBJ_D)\cbc_cksm.obj $(OBJ_D)\supp.obj $(OBJ_D)\rc4_enc.obj \
! 	$(OBJ_D)\rc2_ecb.obj $(OBJ_D)\rc2_skey.obj $(OBJ_D)\rc2_cbc.obj \
! 	$(OBJ_D)\rc2cfb64.obj $(OBJ_D)\rc2ofb64.obj $(OBJ_D)\i_cbc.obj \
! 	$(OBJ_D)\i_cfb64.obj $(OBJ_D)\i_ofb64.obj $(OBJ_D)\i_ecb.obj \
! 	$(OBJ_D)\i_skey.obj $(OBJ_D)\bn_add.obj $(OBJ_D)\bn_div.obj \
! 	$(OBJ_D)\bn_exp.obj $(OBJ_D)\bn_lib.obj $(OBJ_D)\bn_mod.obj \
! 	$(OBJ_D)\bn_mul.obj $(OBJ_D)\bn_print.obj $(OBJ_D)\bn_rand.obj \
! 	$(OBJ_D)\bn_shift.obj $(OBJ_D)\bn_sub.obj $(OBJ_D)\bn_word.obj \
! 	$(OBJ_D)\bn_gcd.obj $(OBJ_D)\bn_prime.obj $(OBJ_D)\bn_err.obj \
! 	$(OBJ_D)\bn_sqr.obj $(BN_MULW_OBJ) $(OBJ_D)\bn_recp.obj \
! 	$(OBJ_D)\bn_mont.obj $(OBJ_D)\rsa_enc.obj $(OBJ_D)\rsa_gen.obj \
! 	$(OBJ_D)\rsa_lib.obj $(OBJ_D)\rsa_sign.obj $(OBJ_D)\rsa_err.obj \
! 	$(OBJ_D)\dsa_lib.obj $(OBJ_D)\dsa_vrf.obj $(OBJ_D)\dsa_sign.obj \
! 	$(OBJ_D)\dsa_err.obj $(OBJ_D)\dh_gen.obj $(OBJ_D)\dh_key.obj \
! 	$(OBJ_D)\dh_lib.obj $(OBJ_D)\dh_check.obj $(OBJ_D)\dh_err.obj \
! 	$(OBJ_D)\buffer.obj $(OBJ_D)\bio_lib.obj $(OBJ_D)\bio_cb.obj \
! 	$(OBJ_D)\buf_err.obj $(OBJ_D)\bss_mem.obj $(OBJ_D)\bss_null.obj \
! 	$(OBJ_D)\bss_fd.obj $(OBJ_D)\bss_file.obj $(OBJ_D)\bss_sock.obj \
! 	$(OBJ_D)\bf_buff.obj $(OBJ_D)\stack.obj $(OBJ_D)\lhash.obj \
! 	$(OBJ_D)\lh_stats.obj $(OBJ_D)\md5_rand.obj $(OBJ_D)\randfile.obj \
! 	$(OBJ_D)\err.obj $(OBJ_D)\err_all.obj $(OBJ_D)\obj_dat.obj \
! 	$(OBJ_D)\obj_lib.obj $(OBJ_D)\obj_err.obj $(OBJ_D)\encode.obj \
! 	$(OBJ_D)\digest.obj $(OBJ_D)\evp_enc.obj $(OBJ_D)\evp_key.obj \
! 	$(OBJ_D)\e_ecb_d.obj $(OBJ_D)\e_cbc_d.obj $(OBJ_D)\e_cfb_d.obj \
! 	$(OBJ_D)\e_ofb_d.obj $(OBJ_D)\e_ecb_i.obj $(OBJ_D)\e_cbc_i.obj \
! 	$(OBJ_D)\e_cfb_i.obj $(OBJ_D)\e_ofb_i.obj $(OBJ_D)\e_ecb_3d.obj \
! 	$(OBJ_D)\e_cbc_3d.obj $(OBJ_D)\e_rc4.obj $(OBJ_D)\e_names.obj \
! 	$(OBJ_D)\e_cfb_3d.obj $(OBJ_D)\e_ofb_3d.obj $(OBJ_D)\e_ecb_r2.obj \
! 	$(OBJ_D)\e_cbc_r2.obj $(OBJ_D)\e_cfb_r2.obj $(OBJ_D)\e_ofb_r2.obj \
! 	$(OBJ_D)\m_md2.obj $(OBJ_D)\m_md5.obj $(OBJ_D)\m_sha.obj \
! 	$(OBJ_D)\m_sha1.obj $(OBJ_D)\m_dss.obj $(OBJ_D)\m_dss1.obj \
! 	$(OBJ_D)\m_names.obj $(OBJ_D)\p_open.obj $(OBJ_D)\p_seal.obj \
! 	$(OBJ_D)\p_sign.obj $(OBJ_D)\p_verify.obj $(OBJ_D)\p_lib.obj \
! 	$(OBJ_D)\bio_md.obj $(OBJ_D)\evp_err.obj $(OBJ_D)\pem_sign.obj \
! 	$(OBJ_D)\pem_seal.obj $(OBJ_D)\pem_info.obj $(OBJ_D)\pem_lib.obj \
! 	$(OBJ_D)\pem_err.obj $(OBJ_D)\x509_def.obj $(OBJ_D)\x509_r2x.obj \
! 	$(OBJ_D)\x509_cmp.obj $(OBJ_D)\x509_obj.obj $(OBJ_D)\x509_req.obj \
! 	$(OBJ_D)\x509_vrf.obj $(OBJ_D)\x509_crt.obj $(OBJ_D)\x509_ath.obj \
! 	$(OBJ_D)\x509_err.obj $(OBJ_D)\a_object.obj $(OBJ_D)\a_bitstr.obj \
! 	$(OBJ_D)\a_utctm.obj $(OBJ_D)\a_int.obj $(OBJ_D)\a_octet.obj \
! 	$(OBJ_D)\a_print.obj $(OBJ_D)\a_type.obj $(OBJ_D)\a_set.obj \
! 	$(OBJ_D)\a_dup.obj $(OBJ_D)\a_d2i_fp.obj $(OBJ_D)\a_i2d_fp.obj \
! 	$(OBJ_D)\a_sign.obj $(OBJ_D)\a_verify.obj $(OBJ_D)\x_algor.obj \
! 	$(OBJ_D)\x_val.obj $(OBJ_D)\x_pubkey.obj $(OBJ_D)\x_sig.obj \
! 	$(OBJ_D)\x_req.obj $(OBJ_D)\x_attrib.obj $(OBJ_D)\x_name.obj \
! 	$(OBJ_D)\x_cinf.obj $(OBJ_D)\x_x509.obj $(OBJ_D)\x_crl.obj \
! 	$(OBJ_D)\x_info.obj $(OBJ_D)\x_spki.obj $(OBJ_D)\d2i_r_pr.obj \
! 	$(OBJ_D)\i2d_r_pr.obj $(OBJ_D)\d2i_r_pu.obj $(OBJ_D)\i2d_r_pu.obj \
! 	$(OBJ_D)\d2i_s_pr.obj $(OBJ_D)\d2i_s_pu.obj $(OBJ_D)\d2i_pu.obj \
! 	$(OBJ_D)\d2i_pr.obj $(OBJ_D)\i2d_pu.obj $(OBJ_D)\i2d_pr.obj \
! 	$(OBJ_D)\t_req.obj $(OBJ_D)\t_x509.obj $(OBJ_D)\t_pkey.obj \
! 	$(OBJ_D)\p7_i_s.obj $(OBJ_D)\p7_signi.obj $(OBJ_D)\p7_signd.obj \
! 	$(OBJ_D)\p7_recip.obj $(OBJ_D)\p7_enc_c.obj $(OBJ_D)\p7_evp.obj \
! 	$(OBJ_D)\p7_dgst.obj $(OBJ_D)\p7_s_e.obj $(OBJ_D)\p7_enc.obj \
! 	$(OBJ_D)\p7_lib.obj $(OBJ_D)\f_int.obj $(OBJ_D)\i2d_dh.obj \
! 	$(OBJ_D)\d2i_dh.obj $(OBJ_D)\n_pkey.obj $(OBJ_D)\a_hdr.obj \
! 	$(OBJ_D)\x_pkey.obj $(OBJ_D)\asn1_par.obj $(OBJ_D)\asn1_lib.obj \
! 	$(OBJ_D)\asn1_err.obj $(OBJ_D)\meth_lib.obj $(OBJ_D)\x509meth.obj \
! 	$(OBJ_D)\by_file.obj $(OBJ_D)\by_dir.obj $(OBJ_D)\meth_err.obj \
! 	$(OBJ_D)\conf.obj $(OBJ_D)\conf_err.obj $(OBJ_D)\txt_db.obj
  
  RSAGLUEOBJ=$(OBJ_D)\rsaref.obj \
  	$(OBJ_D)\rsar_err.obj
--- 148,216 ----
  	$(OBJ_D)\enc_read.obj $(OBJ_D)\enc_writ.obj $(OBJ_D)\fcrypt.obj \
  	$(OBJ_D)\ncbc_enc.obj $(OBJ_D)\ofb64enc.obj $(OBJ_D)\ofb_enc.obj \
  	$(OBJ_D)\str2key.obj $(OBJ_D)\pcbc_enc.obj $(OBJ_D)\qud_cksm.obj \
! 	$(OBJ_D)\rand_key.obj $(OBJ_D)\xcbc_enc.obj $(OBJ_D)\read_pwd.obj \
! 	$(OBJ_D)\rpc_enc.obj $(OBJ_D)\cbc_cksm.obj $(OBJ_D)\supp.obj \
! 	$(OBJ_D)\rc4_enc.obj $(OBJ_D)\rc2_ecb.obj $(OBJ_D)\rc2_skey.obj \
! 	$(OBJ_D)\rc2_cbc.obj $(OBJ_D)\rc2cfb64.obj $(OBJ_D)\rc2ofb64.obj \
! 	$(OBJ_D)\i_cbc.obj $(OBJ_D)\i_cfb64.obj $(OBJ_D)\i_ofb64.obj \
! 	$(OBJ_D)\i_ecb.obj $(OBJ_D)\i_skey.obj $(OBJ_D)\bn_add.obj \
! 	$(OBJ_D)\bn_div.obj $(OBJ_D)\bn_exp.obj $(OBJ_D)\bn_lib.obj \
! 	$(OBJ_D)\bn_mod.obj $(OBJ_D)\bn_mul.obj $(OBJ_D)\bn_print.obj \
! 	$(OBJ_D)\bn_rand.obj $(OBJ_D)\bn_shift.obj $(OBJ_D)\bn_sub.obj \
! 	$(OBJ_D)\bn_word.obj $(OBJ_D)\bn_gcd.obj $(OBJ_D)\bn_prime.obj \
! 	$(OBJ_D)\bn_err.obj $(OBJ_D)\bn_sqr.obj $(BN_MULW_OBJ) \
! 	$(OBJ_D)\bn_recp.obj $(OBJ_D)\bn_mont.obj $(OBJ_D)\rsa_enc.obj \
! 	$(OBJ_D)\rsa_gen.obj $(OBJ_D)\rsa_lib.obj $(OBJ_D)\rsa_sign.obj \
! 	$(OBJ_D)\rsa_err.obj $(OBJ_D)\dsa_lib.obj $(OBJ_D)\dsa_vrf.obj \
! 	$(OBJ_D)\dsa_sign.obj $(OBJ_D)\dsa_err.obj $(OBJ_D)\dh_gen.obj \
! 	$(OBJ_D)\dh_key.obj $(OBJ_D)\dh_lib.obj $(OBJ_D)\dh_check.obj \
! 	$(OBJ_D)\dh_err.obj $(OBJ_D)\buffer.obj $(OBJ_D)\bio_lib.obj \
! 	$(OBJ_D)\bio_cb.obj $(OBJ_D)\buf_err.obj $(OBJ_D)\bss_mem.obj \
! 	$(OBJ_D)\bss_null.obj $(OBJ_D)\bss_fd.obj $(OBJ_D)\bss_file.obj \
! 	$(OBJ_D)\bss_sock.obj $(OBJ_D)\bf_buff.obj $(OBJ_D)\stack.obj \
! 	$(OBJ_D)\lhash.obj $(OBJ_D)\lh_stats.obj $(OBJ_D)\md5_rand.obj \
! 	$(OBJ_D)\randfile.obj $(OBJ_D)\err.obj $(OBJ_D)\err_all.obj \
! 	$(OBJ_D)\obj_dat.obj $(OBJ_D)\obj_lib.obj $(OBJ_D)\obj_err.obj \
! 	$(OBJ_D)\encode.obj $(OBJ_D)\digest.obj $(OBJ_D)\evp_enc.obj \
! 	$(OBJ_D)\evp_key.obj $(OBJ_D)\e_ecb_d.obj $(OBJ_D)\e_cbc_d.obj \
! 	$(OBJ_D)\e_cfb_d.obj $(OBJ_D)\e_ofb_d.obj $(OBJ_D)\e_ecb_i.obj \
! 	$(OBJ_D)\e_cbc_i.obj $(OBJ_D)\e_cfb_i.obj $(OBJ_D)\e_ofb_i.obj \
! 	$(OBJ_D)\e_ecb_3d.obj $(OBJ_D)\e_cbc_3d.obj $(OBJ_D)\e_rc4.obj \
! 	$(OBJ_D)\e_names.obj $(OBJ_D)\e_cfb_3d.obj $(OBJ_D)\e_ofb_3d.obj \
! 	$(OBJ_D)\e_xcbc_d.obj $(OBJ_D)\e_ecb_r2.obj $(OBJ_D)\e_cbc_r2.obj \
! 	$(OBJ_D)\e_cfb_r2.obj $(OBJ_D)\e_ofb_r2.obj $(OBJ_D)\m_md2.obj \
! 	$(OBJ_D)\m_md5.obj $(OBJ_D)\m_sha.obj $(OBJ_D)\m_sha1.obj \
! 	$(OBJ_D)\m_dss.obj $(OBJ_D)\m_dss1.obj $(OBJ_D)\m_names.obj \
! 	$(OBJ_D)\p_open.obj $(OBJ_D)\p_seal.obj $(OBJ_D)\p_sign.obj \
! 	$(OBJ_D)\p_verify.obj $(OBJ_D)\p_lib.obj $(OBJ_D)\bio_md.obj \
! 	$(OBJ_D)\evp_err.obj $(OBJ_D)\pem_sign.obj $(OBJ_D)\pem_seal.obj \
! 	$(OBJ_D)\pem_info.obj $(OBJ_D)\pem_lib.obj $(OBJ_D)\pem_err.obj \
! 	$(OBJ_D)\x509_def.obj $(OBJ_D)\x509_r2x.obj $(OBJ_D)\x509_cmp.obj \
! 	$(OBJ_D)\x509_obj.obj $(OBJ_D)\x509_req.obj $(OBJ_D)\x509_vrf.obj \
! 	$(OBJ_D)\x509_crt.obj $(OBJ_D)\x509_ath.obj $(OBJ_D)\x509_err.obj \
! 	$(OBJ_D)\a_object.obj $(OBJ_D)\a_bitstr.obj $(OBJ_D)\a_utctm.obj \
! 	$(OBJ_D)\a_int.obj $(OBJ_D)\a_octet.obj $(OBJ_D)\a_print.obj \
! 	$(OBJ_D)\a_type.obj $(OBJ_D)\a_set.obj $(OBJ_D)\a_dup.obj \
! 	$(OBJ_D)\a_d2i_fp.obj $(OBJ_D)\a_i2d_fp.obj $(OBJ_D)\a_sign.obj \
! 	$(OBJ_D)\a_verify.obj $(OBJ_D)\x_algor.obj $(OBJ_D)\x_val.obj \
! 	$(OBJ_D)\x_pubkey.obj $(OBJ_D)\x_sig.obj $(OBJ_D)\x_req.obj \
! 	$(OBJ_D)\x_attrib.obj $(OBJ_D)\x_name.obj $(OBJ_D)\x_cinf.obj \
! 	$(OBJ_D)\x_x509.obj $(OBJ_D)\x_crl.obj $(OBJ_D)\x_info.obj \
! 	$(OBJ_D)\x_spki.obj $(OBJ_D)\d2i_r_pr.obj $(OBJ_D)\i2d_r_pr.obj \
! 	$(OBJ_D)\d2i_r_pu.obj $(OBJ_D)\i2d_r_pu.obj $(OBJ_D)\d2i_s_pr.obj \
! 	$(OBJ_D)\d2i_s_pu.obj $(OBJ_D)\d2i_pu.obj $(OBJ_D)\d2i_pr.obj \
! 	$(OBJ_D)\i2d_pu.obj $(OBJ_D)\i2d_pr.obj $(OBJ_D)\t_req.obj \
! 	$(OBJ_D)\t_x509.obj $(OBJ_D)\t_pkey.obj $(OBJ_D)\p7_i_s.obj \
! 	$(OBJ_D)\p7_signi.obj $(OBJ_D)\p7_signd.obj $(OBJ_D)\p7_recip.obj \
! 	$(OBJ_D)\p7_enc_c.obj $(OBJ_D)\p7_evp.obj $(OBJ_D)\p7_dgst.obj \
! 	$(OBJ_D)\p7_s_e.obj $(OBJ_D)\p7_enc.obj $(OBJ_D)\p7_lib.obj \
! 	$(OBJ_D)\f_int.obj $(OBJ_D)\i2d_dh.obj $(OBJ_D)\d2i_dh.obj \
! 	$(OBJ_D)\n_pkey.obj $(OBJ_D)\a_hdr.obj $(OBJ_D)\x_pkey.obj \
! 	$(OBJ_D)\a_bool.obj $(OBJ_D)\x_exten.obj $(OBJ_D)\asn1_par.obj \
! 	$(OBJ_D)\asn1_lib.obj $(OBJ_D)\asn1_err.obj $(OBJ_D)\meth_lib.obj \
! 	$(OBJ_D)\x509meth.obj $(OBJ_D)\by_file.obj $(OBJ_D)\by_dir.obj \
! 	$(OBJ_D)\meth_err.obj $(OBJ_D)\conf.obj $(OBJ_D)\conf_err.obj \
! 	$(OBJ_D)\txt_db.obj
  
  RSAGLUEOBJ=$(OBJ_D)\rsaref.obj \
  	$(OBJ_D)\rsar_err.obj
***************
*** 722,727 ****
--- 724,732 ----
  $(OBJ_D)\rand_key.obj: $(SRC_D)\crypto\des\rand_key.c
  	$(CC) /Fo$(OBJ_D)\rand_key.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\rand_key.c
  
+ $(OBJ_D)\xcbc_enc.obj: $(SRC_D)\crypto\des\xcbc_enc.c
+ 	$(CC) /Fo$(OBJ_D)\xcbc_enc.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\xcbc_enc.c
+ 
  $(OBJ_D)\read_pwd.obj: $(SRC_D)\crypto\des\read_pwd.c
  	$(CC) /Fo$(OBJ_D)\read_pwd.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\read_pwd.c
  
***************
*** 977,982 ****
--- 982,990 ----
  $(OBJ_D)\e_ofb_3d.obj: $(SRC_D)\crypto\evp\e_ofb_3d.c
  	$(CC) /Fo$(OBJ_D)\e_ofb_3d.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_ofb_3d.c
  
+ $(OBJ_D)\e_xcbc_d.obj: $(SRC_D)\crypto\evp\e_xcbc_d.c
+ 	$(CC) /Fo$(OBJ_D)\e_xcbc_d.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_xcbc_d.c
+ 
  $(OBJ_D)\e_ecb_r2.obj: $(SRC_D)\crypto\evp\e_ecb_r2.c
  	$(CC) /Fo$(OBJ_D)\e_ecb_r2.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_ecb_r2.c
  
***************
*** 1234,1239 ****
--- 1242,1253 ----
  
  $(OBJ_D)\x_pkey.obj: $(SRC_D)\crypto\asn1\x_pkey.c
  	$(CC) /Fo$(OBJ_D)\x_pkey.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\x_pkey.c
+ 
+ $(OBJ_D)\a_bool.obj: $(SRC_D)\crypto\asn1\a_bool.c
+ 	$(CC) /Fo$(OBJ_D)\a_bool.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\a_bool.c
+ 
+ $(OBJ_D)\x_exten.obj: $(SRC_D)\crypto\asn1\x_exten.c
+ 	$(CC) /Fo$(OBJ_D)\x_exten.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\x_exten.c
  
  $(OBJ_D)\asn1_par.obj: $(SRC_D)\crypto\asn1\asn1_par.c
  	$(CC) /Fo$(OBJ_D)\asn1_par.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\asn1_par.c
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/ntdll.mak	Fri Jul 12 17:22:19 1996
--- ./ms/ntdll.mak	Thu Jul 25 16:07:17 1996
***************
*** 148,214 ****
  	$(OBJ_D)\enc_read.obj $(OBJ_D)\enc_writ.obj $(OBJ_D)\fcrypt.obj \
  	$(OBJ_D)\ncbc_enc.obj $(OBJ_D)\ofb64enc.obj $(OBJ_D)\ofb_enc.obj \
  	$(OBJ_D)\str2key.obj $(OBJ_D)\pcbc_enc.obj $(OBJ_D)\qud_cksm.obj \
! 	$(OBJ_D)\rand_key.obj $(OBJ_D)\read_pwd.obj $(OBJ_D)\rpc_enc.obj \
! 	$(OBJ_D)\cbc_cksm.obj $(OBJ_D)\supp.obj $(OBJ_D)\rc4_enc.obj \
! 	$(OBJ_D)\rc2_ecb.obj $(OBJ_D)\rc2_skey.obj $(OBJ_D)\rc2_cbc.obj \
! 	$(OBJ_D)\rc2cfb64.obj $(OBJ_D)\rc2ofb64.obj $(OBJ_D)\i_cbc.obj \
! 	$(OBJ_D)\i_cfb64.obj $(OBJ_D)\i_ofb64.obj $(OBJ_D)\i_ecb.obj \
! 	$(OBJ_D)\i_skey.obj $(OBJ_D)\bn_add.obj $(OBJ_D)\bn_div.obj \
! 	$(OBJ_D)\bn_exp.obj $(OBJ_D)\bn_lib.obj $(OBJ_D)\bn_mod.obj \
! 	$(OBJ_D)\bn_mul.obj $(OBJ_D)\bn_print.obj $(OBJ_D)\bn_rand.obj \
! 	$(OBJ_D)\bn_shift.obj $(OBJ_D)\bn_sub.obj $(OBJ_D)\bn_word.obj \
! 	$(OBJ_D)\bn_gcd.obj $(OBJ_D)\bn_prime.obj $(OBJ_D)\bn_err.obj \
! 	$(OBJ_D)\bn_sqr.obj $(BN_MULW_OBJ) $(OBJ_D)\bn_recp.obj \
! 	$(OBJ_D)\bn_mont.obj $(OBJ_D)\rsa_enc.obj $(OBJ_D)\rsa_gen.obj \
! 	$(OBJ_D)\rsa_lib.obj $(OBJ_D)\rsa_sign.obj $(OBJ_D)\rsa_err.obj \
! 	$(OBJ_D)\dsa_lib.obj $(OBJ_D)\dsa_vrf.obj $(OBJ_D)\dsa_sign.obj \
! 	$(OBJ_D)\dsa_err.obj $(OBJ_D)\dh_gen.obj $(OBJ_D)\dh_key.obj \
! 	$(OBJ_D)\dh_lib.obj $(OBJ_D)\dh_check.obj $(OBJ_D)\dh_err.obj \
! 	$(OBJ_D)\buffer.obj $(OBJ_D)\bio_lib.obj $(OBJ_D)\bio_cb.obj \
! 	$(OBJ_D)\buf_err.obj $(OBJ_D)\bss_mem.obj $(OBJ_D)\bss_null.obj \
! 	$(OBJ_D)\bss_fd.obj $(OBJ_D)\bss_file.obj $(OBJ_D)\bss_sock.obj \
! 	$(OBJ_D)\bf_buff.obj $(OBJ_D)\stack.obj $(OBJ_D)\lhash.obj \
! 	$(OBJ_D)\lh_stats.obj $(OBJ_D)\md5_rand.obj $(OBJ_D)\randfile.obj \
! 	$(OBJ_D)\err.obj $(OBJ_D)\err_all.obj $(OBJ_D)\obj_dat.obj \
! 	$(OBJ_D)\obj_lib.obj $(OBJ_D)\obj_err.obj $(OBJ_D)\encode.obj \
! 	$(OBJ_D)\digest.obj $(OBJ_D)\evp_enc.obj $(OBJ_D)\evp_key.obj \
! 	$(OBJ_D)\e_ecb_d.obj $(OBJ_D)\e_cbc_d.obj $(OBJ_D)\e_cfb_d.obj \
! 	$(OBJ_D)\e_ofb_d.obj $(OBJ_D)\e_ecb_i.obj $(OBJ_D)\e_cbc_i.obj \
! 	$(OBJ_D)\e_cfb_i.obj $(OBJ_D)\e_ofb_i.obj $(OBJ_D)\e_ecb_3d.obj \
! 	$(OBJ_D)\e_cbc_3d.obj $(OBJ_D)\e_rc4.obj $(OBJ_D)\e_names.obj \
! 	$(OBJ_D)\e_cfb_3d.obj $(OBJ_D)\e_ofb_3d.obj $(OBJ_D)\e_ecb_r2.obj \
! 	$(OBJ_D)\e_cbc_r2.obj $(OBJ_D)\e_cfb_r2.obj $(OBJ_D)\e_ofb_r2.obj \
! 	$(OBJ_D)\m_md2.obj $(OBJ_D)\m_md5.obj $(OBJ_D)\m_sha.obj \
! 	$(OBJ_D)\m_sha1.obj $(OBJ_D)\m_dss.obj $(OBJ_D)\m_dss1.obj \
! 	$(OBJ_D)\m_names.obj $(OBJ_D)\p_open.obj $(OBJ_D)\p_seal.obj \
! 	$(OBJ_D)\p_sign.obj $(OBJ_D)\p_verify.obj $(OBJ_D)\p_lib.obj \
! 	$(OBJ_D)\bio_md.obj $(OBJ_D)\evp_err.obj $(OBJ_D)\pem_sign.obj \
! 	$(OBJ_D)\pem_seal.obj $(OBJ_D)\pem_info.obj $(OBJ_D)\pem_lib.obj \
! 	$(OBJ_D)\pem_err.obj $(OBJ_D)\x509_def.obj $(OBJ_D)\x509_r2x.obj \
! 	$(OBJ_D)\x509_cmp.obj $(OBJ_D)\x509_obj.obj $(OBJ_D)\x509_req.obj \
! 	$(OBJ_D)\x509_vrf.obj $(OBJ_D)\x509_crt.obj $(OBJ_D)\x509_ath.obj \
! 	$(OBJ_D)\x509_err.obj $(OBJ_D)\a_object.obj $(OBJ_D)\a_bitstr.obj \
! 	$(OBJ_D)\a_utctm.obj $(OBJ_D)\a_int.obj $(OBJ_D)\a_octet.obj \
! 	$(OBJ_D)\a_print.obj $(OBJ_D)\a_type.obj $(OBJ_D)\a_set.obj \
! 	$(OBJ_D)\a_dup.obj $(OBJ_D)\a_d2i_fp.obj $(OBJ_D)\a_i2d_fp.obj \
! 	$(OBJ_D)\a_sign.obj $(OBJ_D)\a_verify.obj $(OBJ_D)\x_algor.obj \
! 	$(OBJ_D)\x_val.obj $(OBJ_D)\x_pubkey.obj $(OBJ_D)\x_sig.obj \
! 	$(OBJ_D)\x_req.obj $(OBJ_D)\x_attrib.obj $(OBJ_D)\x_name.obj \
! 	$(OBJ_D)\x_cinf.obj $(OBJ_D)\x_x509.obj $(OBJ_D)\x_crl.obj \
! 	$(OBJ_D)\x_info.obj $(OBJ_D)\x_spki.obj $(OBJ_D)\d2i_r_pr.obj \
! 	$(OBJ_D)\i2d_r_pr.obj $(OBJ_D)\d2i_r_pu.obj $(OBJ_D)\i2d_r_pu.obj \
! 	$(OBJ_D)\d2i_s_pr.obj $(OBJ_D)\d2i_s_pu.obj $(OBJ_D)\d2i_pu.obj \
! 	$(OBJ_D)\d2i_pr.obj $(OBJ_D)\i2d_pu.obj $(OBJ_D)\i2d_pr.obj \
! 	$(OBJ_D)\t_req.obj $(OBJ_D)\t_x509.obj $(OBJ_D)\t_pkey.obj \
! 	$(OBJ_D)\p7_i_s.obj $(OBJ_D)\p7_signi.obj $(OBJ_D)\p7_signd.obj \
! 	$(OBJ_D)\p7_recip.obj $(OBJ_D)\p7_enc_c.obj $(OBJ_D)\p7_evp.obj \
! 	$(OBJ_D)\p7_dgst.obj $(OBJ_D)\p7_s_e.obj $(OBJ_D)\p7_enc.obj \
! 	$(OBJ_D)\p7_lib.obj $(OBJ_D)\f_int.obj $(OBJ_D)\i2d_dh.obj \
! 	$(OBJ_D)\d2i_dh.obj $(OBJ_D)\n_pkey.obj $(OBJ_D)\a_hdr.obj \
! 	$(OBJ_D)\x_pkey.obj $(OBJ_D)\asn1_par.obj $(OBJ_D)\asn1_lib.obj \
! 	$(OBJ_D)\asn1_err.obj $(OBJ_D)\meth_lib.obj $(OBJ_D)\x509meth.obj \
! 	$(OBJ_D)\by_file.obj $(OBJ_D)\by_dir.obj $(OBJ_D)\meth_err.obj \
! 	$(OBJ_D)\conf.obj $(OBJ_D)\conf_err.obj $(OBJ_D)\txt_db.obj
  
  RSAGLUEOBJ=$(OBJ_D)\rsaref.obj \
  	$(OBJ_D)\rsar_err.obj
--- 148,216 ----
  	$(OBJ_D)\enc_read.obj $(OBJ_D)\enc_writ.obj $(OBJ_D)\fcrypt.obj \
  	$(OBJ_D)\ncbc_enc.obj $(OBJ_D)\ofb64enc.obj $(OBJ_D)\ofb_enc.obj \
  	$(OBJ_D)\str2key.obj $(OBJ_D)\pcbc_enc.obj $(OBJ_D)\qud_cksm.obj \
! 	$(OBJ_D)\rand_key.obj $(OBJ_D)\xcbc_enc.obj $(OBJ_D)\read_pwd.obj \
! 	$(OBJ_D)\rpc_enc.obj $(OBJ_D)\cbc_cksm.obj $(OBJ_D)\supp.obj \
! 	$(OBJ_D)\rc4_enc.obj $(OBJ_D)\rc2_ecb.obj $(OBJ_D)\rc2_skey.obj \
! 	$(OBJ_D)\rc2_cbc.obj $(OBJ_D)\rc2cfb64.obj $(OBJ_D)\rc2ofb64.obj \
! 	$(OBJ_D)\i_cbc.obj $(OBJ_D)\i_cfb64.obj $(OBJ_D)\i_ofb64.obj \
! 	$(OBJ_D)\i_ecb.obj $(OBJ_D)\i_skey.obj $(OBJ_D)\bn_add.obj \
! 	$(OBJ_D)\bn_div.obj $(OBJ_D)\bn_exp.obj $(OBJ_D)\bn_lib.obj \
! 	$(OBJ_D)\bn_mod.obj $(OBJ_D)\bn_mul.obj $(OBJ_D)\bn_print.obj \
! 	$(OBJ_D)\bn_rand.obj $(OBJ_D)\bn_shift.obj $(OBJ_D)\bn_sub.obj \
! 	$(OBJ_D)\bn_word.obj $(OBJ_D)\bn_gcd.obj $(OBJ_D)\bn_prime.obj \
! 	$(OBJ_D)\bn_err.obj $(OBJ_D)\bn_sqr.obj $(BN_MULW_OBJ) \
! 	$(OBJ_D)\bn_recp.obj $(OBJ_D)\bn_mont.obj $(OBJ_D)\rsa_enc.obj \
! 	$(OBJ_D)\rsa_gen.obj $(OBJ_D)\rsa_lib.obj $(OBJ_D)\rsa_sign.obj \
! 	$(OBJ_D)\rsa_err.obj $(OBJ_D)\dsa_lib.obj $(OBJ_D)\dsa_vrf.obj \
! 	$(OBJ_D)\dsa_sign.obj $(OBJ_D)\dsa_err.obj $(OBJ_D)\dh_gen.obj \
! 	$(OBJ_D)\dh_key.obj $(OBJ_D)\dh_lib.obj $(OBJ_D)\dh_check.obj \
! 	$(OBJ_D)\dh_err.obj $(OBJ_D)\buffer.obj $(OBJ_D)\bio_lib.obj \
! 	$(OBJ_D)\bio_cb.obj $(OBJ_D)\buf_err.obj $(OBJ_D)\bss_mem.obj \
! 	$(OBJ_D)\bss_null.obj $(OBJ_D)\bss_fd.obj $(OBJ_D)\bss_file.obj \
! 	$(OBJ_D)\bss_sock.obj $(OBJ_D)\bf_buff.obj $(OBJ_D)\stack.obj \
! 	$(OBJ_D)\lhash.obj $(OBJ_D)\lh_stats.obj $(OBJ_D)\md5_rand.obj \
! 	$(OBJ_D)\randfile.obj $(OBJ_D)\err.obj $(OBJ_D)\err_all.obj \
! 	$(OBJ_D)\obj_dat.obj $(OBJ_D)\obj_lib.obj $(OBJ_D)\obj_err.obj \
! 	$(OBJ_D)\encode.obj $(OBJ_D)\digest.obj $(OBJ_D)\evp_enc.obj \
! 	$(OBJ_D)\evp_key.obj $(OBJ_D)\e_ecb_d.obj $(OBJ_D)\e_cbc_d.obj \
! 	$(OBJ_D)\e_cfb_d.obj $(OBJ_D)\e_ofb_d.obj $(OBJ_D)\e_ecb_i.obj \
! 	$(OBJ_D)\e_cbc_i.obj $(OBJ_D)\e_cfb_i.obj $(OBJ_D)\e_ofb_i.obj \
! 	$(OBJ_D)\e_ecb_3d.obj $(OBJ_D)\e_cbc_3d.obj $(OBJ_D)\e_rc4.obj \
! 	$(OBJ_D)\e_names.obj $(OBJ_D)\e_cfb_3d.obj $(OBJ_D)\e_ofb_3d.obj \
! 	$(OBJ_D)\e_xcbc_d.obj $(OBJ_D)\e_ecb_r2.obj $(OBJ_D)\e_cbc_r2.obj \
! 	$(OBJ_D)\e_cfb_r2.obj $(OBJ_D)\e_ofb_r2.obj $(OBJ_D)\m_md2.obj \
! 	$(OBJ_D)\m_md5.obj $(OBJ_D)\m_sha.obj $(OBJ_D)\m_sha1.obj \
! 	$(OBJ_D)\m_dss.obj $(OBJ_D)\m_dss1.obj $(OBJ_D)\m_names.obj \
! 	$(OBJ_D)\p_open.obj $(OBJ_D)\p_seal.obj $(OBJ_D)\p_sign.obj \
! 	$(OBJ_D)\p_verify.obj $(OBJ_D)\p_lib.obj $(OBJ_D)\bio_md.obj \
! 	$(OBJ_D)\evp_err.obj $(OBJ_D)\pem_sign.obj $(OBJ_D)\pem_seal.obj \
! 	$(OBJ_D)\pem_info.obj $(OBJ_D)\pem_lib.obj $(OBJ_D)\pem_err.obj \
! 	$(OBJ_D)\x509_def.obj $(OBJ_D)\x509_r2x.obj $(OBJ_D)\x509_cmp.obj \
! 	$(OBJ_D)\x509_obj.obj $(OBJ_D)\x509_req.obj $(OBJ_D)\x509_vrf.obj \
! 	$(OBJ_D)\x509_crt.obj $(OBJ_D)\x509_ath.obj $(OBJ_D)\x509_err.obj \
! 	$(OBJ_D)\a_object.obj $(OBJ_D)\a_bitstr.obj $(OBJ_D)\a_utctm.obj \
! 	$(OBJ_D)\a_int.obj $(OBJ_D)\a_octet.obj $(OBJ_D)\a_print.obj \
! 	$(OBJ_D)\a_type.obj $(OBJ_D)\a_set.obj $(OBJ_D)\a_dup.obj \
! 	$(OBJ_D)\a_d2i_fp.obj $(OBJ_D)\a_i2d_fp.obj $(OBJ_D)\a_sign.obj \
! 	$(OBJ_D)\a_verify.obj $(OBJ_D)\x_algor.obj $(OBJ_D)\x_val.obj \
! 	$(OBJ_D)\x_pubkey.obj $(OBJ_D)\x_sig.obj $(OBJ_D)\x_req.obj \
! 	$(OBJ_D)\x_attrib.obj $(OBJ_D)\x_name.obj $(OBJ_D)\x_cinf.obj \
! 	$(OBJ_D)\x_x509.obj $(OBJ_D)\x_crl.obj $(OBJ_D)\x_info.obj \
! 	$(OBJ_D)\x_spki.obj $(OBJ_D)\d2i_r_pr.obj $(OBJ_D)\i2d_r_pr.obj \
! 	$(OBJ_D)\d2i_r_pu.obj $(OBJ_D)\i2d_r_pu.obj $(OBJ_D)\d2i_s_pr.obj \
! 	$(OBJ_D)\d2i_s_pu.obj $(OBJ_D)\d2i_pu.obj $(OBJ_D)\d2i_pr.obj \
! 	$(OBJ_D)\i2d_pu.obj $(OBJ_D)\i2d_pr.obj $(OBJ_D)\t_req.obj \
! 	$(OBJ_D)\t_x509.obj $(OBJ_D)\t_pkey.obj $(OBJ_D)\p7_i_s.obj \
! 	$(OBJ_D)\p7_signi.obj $(OBJ_D)\p7_signd.obj $(OBJ_D)\p7_recip.obj \
! 	$(OBJ_D)\p7_enc_c.obj $(OBJ_D)\p7_evp.obj $(OBJ_D)\p7_dgst.obj \
! 	$(OBJ_D)\p7_s_e.obj $(OBJ_D)\p7_enc.obj $(OBJ_D)\p7_lib.obj \
! 	$(OBJ_D)\f_int.obj $(OBJ_D)\i2d_dh.obj $(OBJ_D)\d2i_dh.obj \
! 	$(OBJ_D)\n_pkey.obj $(OBJ_D)\a_hdr.obj $(OBJ_D)\x_pkey.obj \
! 	$(OBJ_D)\a_bool.obj $(OBJ_D)\x_exten.obj $(OBJ_D)\asn1_par.obj \
! 	$(OBJ_D)\asn1_lib.obj $(OBJ_D)\asn1_err.obj $(OBJ_D)\meth_lib.obj \
! 	$(OBJ_D)\x509meth.obj $(OBJ_D)\by_file.obj $(OBJ_D)\by_dir.obj \
! 	$(OBJ_D)\meth_err.obj $(OBJ_D)\conf.obj $(OBJ_D)\conf_err.obj \
! 	$(OBJ_D)\txt_db.obj
  
  RSAGLUEOBJ=$(OBJ_D)\rsaref.obj \
  	$(OBJ_D)\rsar_err.obj
***************
*** 722,727 ****
--- 724,732 ----
  $(OBJ_D)\rand_key.obj: $(SRC_D)\crypto\des\rand_key.c
  	$(CC) /Fo$(OBJ_D)\rand_key.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\rand_key.c
  
+ $(OBJ_D)\xcbc_enc.obj: $(SRC_D)\crypto\des\xcbc_enc.c
+ 	$(CC) /Fo$(OBJ_D)\xcbc_enc.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\xcbc_enc.c
+ 
  $(OBJ_D)\read_pwd.obj: $(SRC_D)\crypto\des\read_pwd.c
  	$(CC) /Fo$(OBJ_D)\read_pwd.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\read_pwd.c
  
***************
*** 977,982 ****
--- 982,990 ----
  $(OBJ_D)\e_ofb_3d.obj: $(SRC_D)\crypto\evp\e_ofb_3d.c
  	$(CC) /Fo$(OBJ_D)\e_ofb_3d.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_ofb_3d.c
  
+ $(OBJ_D)\e_xcbc_d.obj: $(SRC_D)\crypto\evp\e_xcbc_d.c
+ 	$(CC) /Fo$(OBJ_D)\e_xcbc_d.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_xcbc_d.c
+ 
  $(OBJ_D)\e_ecb_r2.obj: $(SRC_D)\crypto\evp\e_ecb_r2.c
  	$(CC) /Fo$(OBJ_D)\e_ecb_r2.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_ecb_r2.c
  
***************
*** 1234,1239 ****
--- 1242,1253 ----
  
  $(OBJ_D)\x_pkey.obj: $(SRC_D)\crypto\asn1\x_pkey.c
  	$(CC) /Fo$(OBJ_D)\x_pkey.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\x_pkey.c
+ 
+ $(OBJ_D)\a_bool.obj: $(SRC_D)\crypto\asn1\a_bool.c
+ 	$(CC) /Fo$(OBJ_D)\a_bool.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\a_bool.c
+ 
+ $(OBJ_D)\x_exten.obj: $(SRC_D)\crypto\asn1\x_exten.c
+ 	$(CC) /Fo$(OBJ_D)\x_exten.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\x_exten.c
  
  $(OBJ_D)\asn1_par.obj: $(SRC_D)\crypto\asn1\asn1_par.c
  	$(CC) /Fo$(OBJ_D)\asn1_par.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\asn1_par.c
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/REQ2CA.SS	Wed Jul 10 09:46:28 1996
--- ./ms/REQ2CA.SS	Wed Jul 24 20:51:56 1996
***************
*** 6,29 ****
              Public Key Algorithm: rsaEncryption
              Public Key: (512 bit)
                  Modulus:
!                     00:c5:be:af:04:37:e9:6c:01:2a:48:a1:82:3d:94:
!                     ea:92:b0:f7:fa:20:87:d6:52:8d:38:61:e0:62:b4:
!                     3f:32:4e:46:67:6e:f0:ab:e5:e9:a8:7d:4c:5d:f5:
!                     b1:8e:5b:1a:4b:9e:4c:ed:43:58:2e:82:ae:6f:3f:
!                     65:45:49:7d:c3
                  Exponent: 65537 (0x10001)
          Attributes:
              a0:00
!     Signature Algorithm: md5
!         48:d8:d1:ff:46:e6:11:74:18:23:77:8b:55:ec:13:07:db:96:
!         e1:2f:4f:9b:12:af:11:8e:0b:9d:e0:b7:dd:03:be:d4:8f:8c:
!         b4:37:62:28:10:12:26:b0:0b:84:57:cf:8f:a3:cd:6e:3c:fa:
!         05:3f:b1:d4:ff:d0:00:5d:ba:75
  -----BEGIN CERTIFICATE REQUEST-----
! MIHwMIGcAgEAMDkxCzAJBgNVBAYTAkFVMRcwFQYDVQQKEw5Eb2RneSBCcm90aGVy
! czERMA8GA1UEAxMIRG9kZ3kgQ0EwWjALBgkqhkiG9w0BAQEDSwAwSAJBAMW+rwQ3
! 6WwBKkihgj2U6pKw9/ogh9ZSjThh4GK0PzJORmdu8Kvl6ah9TF31sY5bGkueTO1D
! WC6Crm8/ZUVJfcMCAwEAAaAAMAwGCCqGSIb3DQIFBQADQQBI2NH/RuYRdBgjd4tV
! 7BMH25bhL0+bEq8Rjgud4LfdA77Uj4y0N2IoEBImsAuEV8+Po81uPPoFP7HU/9AA
! Xbp1
  -----END CERTIFICATE REQUEST-----
--- 6,29 ----
              Public Key Algorithm: rsaEncryption
              Public Key: (512 bit)
                  Modulus:
!                     00:b2:d1:3b:62:9b:64:a2:23:fa:15:f3:fb:87:fc:
!                     af:12:22:3f:4c:c6:87:ce:5b:ef:a6:dd:e8:ca:cc:
!                     81:da:17:61:e0:bc:49:04:79:34:2e:3f:4a:c1:3a:
!                     7f:d9:8e:cc:84:e6:b3:4d:8f:a5:18:24:e3:c8:77:
!                     32:d9:63:38:a7
                  Exponent: 65537 (0x10001)
          Attributes:
              a0:00
!     Signature Algorithm: md5withRSAEncryption
!         51:76:ee:39:87:61:8b:f5:c7:14:03:24:d0:d6:98:7b:6d:c9:
!         df:e5:ee:fd:02:5d:27:a7:4e:50:76:71:b1:b4:27:2e:9f:47:
!         1f:46:e4:24:e3:55:49:59:2d:2b:dc:ad:f0:0a:6b:50:e1:be:
!         8d:04:6c:eb:4f:01:36:8e:38:4f
  -----BEGIN CERTIFICATE REQUEST-----
! MIHxMIGcAgEAMDkxCzAJBgNVBAYTAkFVMRcwFQYDVQQKEw5Eb2RneSBCcm90aGVy
! czERMA8GA1UEAxMIRG9kZ3kgQ0EwWjALBgkqhkiG9w0BAQEDSwAwSAJBALLRO2Kb
! ZKIj+hXz+4f8rxIiP0zGh85b76bd6MrMgdoXYeC8SQR5NC4/SsE6f9mOzITms02P
! pRgk48h3MtljOKcCAwEAAaAAMA0GCSqGSIb3DQEBBAUAA0EAUXbuOYdhi/XHFAMk
! 0NaYe23J3+Xu/QJdJ6dOUHZxsbQnLp9HH0bkJONVSVktK9yt8AprUOG+jQRs608B
! No44Tw==
  -----END CERTIFICATE REQUEST-----
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/REQCA.SS	Wed Jul 10 09:46:28 1996
--- ./ms/REQCA.SS	Wed Jul 24 20:51:53 1996
***************
*** 1,8 ****
  -----BEGIN CERTIFICATE REQUEST-----
! MIHyMIGeAgEAMDkxCzAJBgNVBAYTAkFVMRcwFQYDVQQKEw5Eb2RneSBCcm90aGVy
! czERMA8GA1UEAxMIRG9kZ3kgQ0EwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAxb6v
! BDfpbAEqSKGCPZTqkrD3+iCH1lKNOGHgYrQ/Mk5GZ27wq+XpqH1MXfWxjlsaS55M
! 7UNYLoKubz9lRUl9wwIDAQABoAAwDAYIKoZIhvcNAgUFAANBADIL/jqU1xcafEhG
! bWnp6p7yH7gANMRC4xXHFWVcufgqvfb94KkOkqM1g+fwtq4l0HoJOpFvT+71lKTt
! B5tRY10=
  -----END CERTIFICATE REQUEST-----
--- 1,8 ----
  -----BEGIN CERTIFICATE REQUEST-----
! MIHzMIGeAgEAMDkxCzAJBgNVBAYTAkFVMRcwFQYDVQQKEw5Eb2RneSBCcm90aGVy
! czERMA8GA1UEAxMIRG9kZ3kgQ0EwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAstE7
! YptkoiP6FfP7h/yvEiI/TMaHzlvvpt3oysyB2hdh4LxJBHk0Lj9KwTp/2Y7MhOaz
! TY+lGCTjyHcy2WM4pwIDAQABoAAwDQYJKoZIhvcNAQEEBQADQQAtz9LYedYi5mF6
! oHvR5YMUF8eYoSbyv0E2IcORmaibbI1mRBJt/KyXip3dUrD1tNWhVNcGjsnoiKgZ
! xcVZg663
  -----END CERTIFICATE REQUEST-----
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/REQU.SS	Wed Jul 10 09:46:28 1996
--- ./ms/REQU.SS	Wed Jul 24 20:52:05 1996
***************
*** 1,8 ****
  -----BEGIN CERTIFICATE REQUEST-----
! MIHzMIGfAgEAMDoxCzAJBgNVBAYTAkFVMRcwFQYDVQQKEw5Eb2RneSBCcm90aGVy
! czESMBAGA1UEAxMJQSBCcm90aGVyMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAOPV
! ueqCU+Z5UC0XTQpPbVKGkfPyk2DwEwHSa+ytn93k0BI9m5k4ttfNIbDPS26tNx3X
! x7gNWksKlctKfYF0ZCUCAwEAAaAAMAwGCCqGSIb3DQIFBQADQQCJrMGYWSfR4dbE
! Qp7FlLAUAQT2CoCs2n7a0+JDUgPB0UUiR6F5eVp0EsRn8My3ToDTUjj8T/z4dd/0
! kOjgnVL3
  -----END CERTIFICATE REQUEST-----
--- 1,8 ----
  -----BEGIN CERTIFICATE REQUEST-----
! MIH0MIGfAgEAMDoxCzAJBgNVBAYTAkFVMRcwFQYDVQQKEw5Eb2RneSBCcm90aGVy
! czESMBAGA1UEAxMJQSBCcm90aGVyMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANgx
! Vmtg+5HMLTs94Jfx8b/aw1tweGtcr6qnfvngXfHaH420ib8lFhfK4kOoN8O9wIsD
! evJSa4unjUHtYLStvG0CAwEAAaAAMA0GCSqGSIb3DQEBBAUAA0EApCj1prkhCwJ8
! dMjkHtA/VDnS+xf7eXDhZOxAZ66FJDgYvR5+8WR/ehv/r72ThESpf4/5pdM28TCL
! mHz2t/d+GQ==
  -----END CERTIFICATE REQUEST-----
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/ssl16.def	Fri Jul 12 17:22:25 1996
--- ./ms/ssl16.def	Thu Jul 25 16:07:23 1996
***************
*** 19,26 ****
      _ERR_load_SSL_strings               @2
      _SSL_CTX_free                       @3
      _SSL_CTX_new                        @4
!     _SSL_CTX_set_cert_verify_callback   @5
      _SSL_CTX_set_cipher_list            @6
      _SSL_CTX_set_default_verify         @7
      _SSL_CTX_use_PrivateKey             @61
      _SSL_CTX_use_PrivateKey_ASN1        @62
--- 19,27 ----
      _ERR_load_SSL_strings               @2
      _SSL_CTX_free                       @3
      _SSL_CTX_new                        @4
!     _SSL_CTX_set_cert_verify_cb         @5
      _SSL_CTX_set_cipher_list            @6
+     _SSL_CTX_set_default_passwd_cb      @72
      _SSL_CTX_set_default_verify         @7
      _SSL_CTX_use_PrivateKey             @61
      _SSL_CTX_use_PrivateKey_ASN1        @62
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/ssl32.def	Fri Jul 12 17:22:26 1996
--- ./ms/ssl32.def	Thu Jul 25 16:07:24 1996
***************
*** 11,18 ****
      ERR_load_SSL_strings               @2
      SSL_CTX_free                       @3
      SSL_CTX_new                        @4
!     SSL_CTX_set_cert_verify_callback   @5
      SSL_CTX_set_cipher_list            @6
      SSL_CTX_set_default_verify         @7
      SSL_CTX_use_PrivateKey             @61
      SSL_CTX_use_PrivateKey_ASN1        @62
--- 11,19 ----
      ERR_load_SSL_strings               @2
      SSL_CTX_free                       @3
      SSL_CTX_new                        @4
!     SSL_CTX_set_cert_verify_cb         @5
      SSL_CTX_set_cipher_list            @6
+     SSL_CTX_set_default_passwd_cb      @72
      SSL_CTX_set_default_verify         @7
      SSL_CTX_use_PrivateKey             @61
      SSL_CTX_use_PrivateKey_ASN1        @62
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/tenc.bat	Wed Jul 10 09:46:30 1996
--- ./ms/tenc.bat	Thu Jul 25 11:28:37 1996
***************
*** 1,14 ****
  rem called by testenc
  
  echo test %1 %2 %3 %4 %5 %6 
! %ssleay% %1 %2 %3 %4 %5 %6 -e -k test -in %input% -out %tmp1%
! %ssleay% %1 %2 %3 %4 %5 %6 -d -k test -in %tmp1% -out %out1%
  %cmp% %input% %out1%
  if errorlevel 1 goto err
  
  echo test base64 %1 %2 %3 %4 %5 %6 
! %ssleay% %1 %2 %3 %4 %5 %6 -a -e -k test -in %input% -out %tmp1%
! %ssleay% %1 %2 %3 %4 %5 %6 -a -d -k test -in %tmp1% -out %out1%
  %cmp% %input% %out1%
  
  :err
--- 1,14 ----
  rem called by testenc
  
  echo test %1 %2 %3 %4 %5 %6 
! %ssleay% %1 %2 %3 %4 %5 %6 -e -bufsize 113 -k test -in %input% -out %tmp1%
! %ssleay% %1 %2 %3 %4 %5 %6 -d -bufsize 157 -k test -in %tmp1% -out %out1%
  %cmp% %input% %out1%
  if errorlevel 1 goto err
  
  echo test base64 %1 %2 %3 %4 %5 %6 
! %ssleay% %1 %2 %3 %4 %5 %6 -a -e -bufsize 113 -k test -in %input% -out %tmp1%
! %ssleay% %1 %2 %3 %4 %5 %6 -a -d -bufsize 157 -k test -in %tmp1% -out %out1%
  %cmp% %input% %out1%
  
  :err
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/test.bat	Wed Jul 10 09:46:30 1996
--- ./ms/test.bat	Wed Jul 24 20:48:14 1996
***************
*** 47,52 ****
--- 47,56 ----
  call %test%\testenc %bin%\ssleay
  if errorlevel 1 goto done
  
+ echo testpem
+ call %test%\testpem %bin%\ssleay
+ if errorlevel 1 goto done
+ 
  echo verify
  copy ..\certs\*.pem cert.tmp >nul
  %bin%\ssleay verify -CAfile cert.tmp ..\certs\*.pem
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/w31.mak	Fri Jul 12 17:22:15 1996
--- ./ms/w31.mak	Thu Jul 25 16:07:13 1996
***************
*** 148,214 ****
  	$(OBJ_D)\enc_read.obj $(OBJ_D)\enc_writ.obj $(OBJ_D)\fcrypt.obj \
  	$(OBJ_D)\ncbc_enc.obj $(OBJ_D)\ofb64enc.obj $(OBJ_D)\ofb_enc.obj \
  	$(OBJ_D)\str2key.obj $(OBJ_D)\pcbc_enc.obj $(OBJ_D)\qud_cksm.obj \
! 	$(OBJ_D)\rand_key.obj $(OBJ_D)\read_pwd.obj $(OBJ_D)\rpc_enc.obj \
! 	$(OBJ_D)\cbc_cksm.obj $(OBJ_D)\supp.obj $(OBJ_D)\rc4_enc.obj \
! 	$(OBJ_D)\rc2_ecb.obj $(OBJ_D)\rc2_skey.obj $(OBJ_D)\rc2_cbc.obj \
! 	$(OBJ_D)\rc2cfb64.obj $(OBJ_D)\rc2ofb64.obj $(OBJ_D)\i_cbc.obj \
! 	$(OBJ_D)\i_cfb64.obj $(OBJ_D)\i_ofb64.obj $(OBJ_D)\i_ecb.obj \
! 	$(OBJ_D)\i_skey.obj $(OBJ_D)\bn_add.obj $(OBJ_D)\bn_div.obj \
! 	$(OBJ_D)\bn_exp.obj $(OBJ_D)\bn_lib.obj $(OBJ_D)\bn_mod.obj \
! 	$(OBJ_D)\bn_mul.obj $(OBJ_D)\bn_print.obj $(OBJ_D)\bn_rand.obj \
! 	$(OBJ_D)\bn_shift.obj $(OBJ_D)\bn_sub.obj $(OBJ_D)\bn_word.obj \
! 	$(OBJ_D)\bn_gcd.obj $(OBJ_D)\bn_prime.obj $(OBJ_D)\bn_err.obj \
! 	$(OBJ_D)\bn_sqr.obj $(BN_MULW_OBJ) $(OBJ_D)\bn_recp.obj \
! 	$(OBJ_D)\bn_mont.obj $(OBJ_D)\rsa_enc.obj $(OBJ_D)\rsa_gen.obj \
! 	$(OBJ_D)\rsa_lib.obj $(OBJ_D)\rsa_sign.obj $(OBJ_D)\rsa_err.obj \
! 	$(OBJ_D)\dsa_lib.obj $(OBJ_D)\dsa_vrf.obj $(OBJ_D)\dsa_sign.obj \
! 	$(OBJ_D)\dsa_err.obj $(OBJ_D)\dh_gen.obj $(OBJ_D)\dh_key.obj \
! 	$(OBJ_D)\dh_lib.obj $(OBJ_D)\dh_check.obj $(OBJ_D)\dh_err.obj \
! 	$(OBJ_D)\buffer.obj $(OBJ_D)\bio_lib.obj $(OBJ_D)\bio_cb.obj \
! 	$(OBJ_D)\buf_err.obj $(OBJ_D)\bss_mem.obj $(OBJ_D)\bss_null.obj \
! 	$(OBJ_D)\bss_fd.obj $(OBJ_D)\bss_file.obj $(OBJ_D)\bss_sock.obj \
! 	$(OBJ_D)\bf_buff.obj $(OBJ_D)\stack.obj $(OBJ_D)\lhash.obj \
! 	$(OBJ_D)\lh_stats.obj $(OBJ_D)\md5_rand.obj $(OBJ_D)\randfile.obj \
! 	$(OBJ_D)\err.obj $(OBJ_D)\err_all.obj $(OBJ_D)\obj_dat.obj \
! 	$(OBJ_D)\obj_lib.obj $(OBJ_D)\obj_err.obj $(OBJ_D)\encode.obj \
! 	$(OBJ_D)\digest.obj $(OBJ_D)\evp_enc.obj $(OBJ_D)\evp_key.obj \
! 	$(OBJ_D)\e_ecb_d.obj $(OBJ_D)\e_cbc_d.obj $(OBJ_D)\e_cfb_d.obj \
! 	$(OBJ_D)\e_ofb_d.obj $(OBJ_D)\e_ecb_i.obj $(OBJ_D)\e_cbc_i.obj \
! 	$(OBJ_D)\e_cfb_i.obj $(OBJ_D)\e_ofb_i.obj $(OBJ_D)\e_ecb_3d.obj \
! 	$(OBJ_D)\e_cbc_3d.obj $(OBJ_D)\e_rc4.obj $(OBJ_D)\e_names.obj \
! 	$(OBJ_D)\e_cfb_3d.obj $(OBJ_D)\e_ofb_3d.obj $(OBJ_D)\e_ecb_r2.obj \
! 	$(OBJ_D)\e_cbc_r2.obj $(OBJ_D)\e_cfb_r2.obj $(OBJ_D)\e_ofb_r2.obj \
! 	$(OBJ_D)\m_md2.obj $(OBJ_D)\m_md5.obj $(OBJ_D)\m_sha.obj \
! 	$(OBJ_D)\m_sha1.obj $(OBJ_D)\m_dss.obj $(OBJ_D)\m_dss1.obj \
! 	$(OBJ_D)\m_names.obj $(OBJ_D)\p_open.obj $(OBJ_D)\p_seal.obj \
! 	$(OBJ_D)\p_sign.obj $(OBJ_D)\p_verify.obj $(OBJ_D)\p_lib.obj \
! 	$(OBJ_D)\bio_md.obj $(OBJ_D)\evp_err.obj $(OBJ_D)\pem_sign.obj \
! 	$(OBJ_D)\pem_seal.obj $(OBJ_D)\pem_info.obj $(OBJ_D)\pem_lib.obj \
! 	$(OBJ_D)\pem_err.obj $(OBJ_D)\x509_def.obj $(OBJ_D)\x509_r2x.obj \
! 	$(OBJ_D)\x509_cmp.obj $(OBJ_D)\x509_obj.obj $(OBJ_D)\x509_req.obj \
! 	$(OBJ_D)\x509_vrf.obj $(OBJ_D)\x509_crt.obj $(OBJ_D)\x509_ath.obj \
! 	$(OBJ_D)\x509_err.obj $(OBJ_D)\a_object.obj $(OBJ_D)\a_bitstr.obj \
! 	$(OBJ_D)\a_utctm.obj $(OBJ_D)\a_int.obj $(OBJ_D)\a_octet.obj \
! 	$(OBJ_D)\a_print.obj $(OBJ_D)\a_type.obj $(OBJ_D)\a_set.obj \
! 	$(OBJ_D)\a_dup.obj $(OBJ_D)\a_d2i_fp.obj $(OBJ_D)\a_i2d_fp.obj \
! 	$(OBJ_D)\a_sign.obj $(OBJ_D)\a_verify.obj $(OBJ_D)\x_algor.obj \
! 	$(OBJ_D)\x_val.obj $(OBJ_D)\x_pubkey.obj $(OBJ_D)\x_sig.obj \
! 	$(OBJ_D)\x_req.obj $(OBJ_D)\x_attrib.obj $(OBJ_D)\x_name.obj \
! 	$(OBJ_D)\x_cinf.obj $(OBJ_D)\x_x509.obj $(OBJ_D)\x_crl.obj \
! 	$(OBJ_D)\x_info.obj $(OBJ_D)\x_spki.obj $(OBJ_D)\d2i_r_pr.obj \
! 	$(OBJ_D)\i2d_r_pr.obj $(OBJ_D)\d2i_r_pu.obj $(OBJ_D)\i2d_r_pu.obj \
! 	$(OBJ_D)\d2i_s_pr.obj $(OBJ_D)\d2i_s_pu.obj $(OBJ_D)\d2i_pu.obj \
! 	$(OBJ_D)\d2i_pr.obj $(OBJ_D)\i2d_pu.obj $(OBJ_D)\i2d_pr.obj \
! 	$(OBJ_D)\t_req.obj $(OBJ_D)\t_x509.obj $(OBJ_D)\t_pkey.obj \
! 	$(OBJ_D)\p7_i_s.obj $(OBJ_D)\p7_signi.obj $(OBJ_D)\p7_signd.obj \
! 	$(OBJ_D)\p7_recip.obj $(OBJ_D)\p7_enc_c.obj $(OBJ_D)\p7_evp.obj \
! 	$(OBJ_D)\p7_dgst.obj $(OBJ_D)\p7_s_e.obj $(OBJ_D)\p7_enc.obj \
! 	$(OBJ_D)\p7_lib.obj $(OBJ_D)\f_int.obj $(OBJ_D)\i2d_dh.obj \
! 	$(OBJ_D)\d2i_dh.obj $(OBJ_D)\n_pkey.obj $(OBJ_D)\a_hdr.obj \
! 	$(OBJ_D)\x_pkey.obj $(OBJ_D)\asn1_par.obj $(OBJ_D)\asn1_lib.obj \
! 	$(OBJ_D)\asn1_err.obj $(OBJ_D)\meth_lib.obj $(OBJ_D)\x509meth.obj \
! 	$(OBJ_D)\by_file.obj $(OBJ_D)\by_dir.obj $(OBJ_D)\meth_err.obj \
! 	$(OBJ_D)\conf.obj $(OBJ_D)\conf_err.obj $(OBJ_D)\txt_db.obj
  
  RSAGLUEOBJ=$(OBJ_D)\rsaref.obj \
  	$(OBJ_D)\rsar_err.obj
--- 148,216 ----
  	$(OBJ_D)\enc_read.obj $(OBJ_D)\enc_writ.obj $(OBJ_D)\fcrypt.obj \
  	$(OBJ_D)\ncbc_enc.obj $(OBJ_D)\ofb64enc.obj $(OBJ_D)\ofb_enc.obj \
  	$(OBJ_D)\str2key.obj $(OBJ_D)\pcbc_enc.obj $(OBJ_D)\qud_cksm.obj \
! 	$(OBJ_D)\rand_key.obj $(OBJ_D)\xcbc_enc.obj $(OBJ_D)\read_pwd.obj \
! 	$(OBJ_D)\rpc_enc.obj $(OBJ_D)\cbc_cksm.obj $(OBJ_D)\supp.obj \
! 	$(OBJ_D)\rc4_enc.obj $(OBJ_D)\rc2_ecb.obj $(OBJ_D)\rc2_skey.obj \
! 	$(OBJ_D)\rc2_cbc.obj $(OBJ_D)\rc2cfb64.obj $(OBJ_D)\rc2ofb64.obj \
! 	$(OBJ_D)\i_cbc.obj $(OBJ_D)\i_cfb64.obj $(OBJ_D)\i_ofb64.obj \
! 	$(OBJ_D)\i_ecb.obj $(OBJ_D)\i_skey.obj $(OBJ_D)\bn_add.obj \
! 	$(OBJ_D)\bn_div.obj $(OBJ_D)\bn_exp.obj $(OBJ_D)\bn_lib.obj \
! 	$(OBJ_D)\bn_mod.obj $(OBJ_D)\bn_mul.obj $(OBJ_D)\bn_print.obj \
! 	$(OBJ_D)\bn_rand.obj $(OBJ_D)\bn_shift.obj $(OBJ_D)\bn_sub.obj \
! 	$(OBJ_D)\bn_word.obj $(OBJ_D)\bn_gcd.obj $(OBJ_D)\bn_prime.obj \
! 	$(OBJ_D)\bn_err.obj $(OBJ_D)\bn_sqr.obj $(BN_MULW_OBJ) \
! 	$(OBJ_D)\bn_recp.obj $(OBJ_D)\bn_mont.obj $(OBJ_D)\rsa_enc.obj \
! 	$(OBJ_D)\rsa_gen.obj $(OBJ_D)\rsa_lib.obj $(OBJ_D)\rsa_sign.obj \
! 	$(OBJ_D)\rsa_err.obj $(OBJ_D)\dsa_lib.obj $(OBJ_D)\dsa_vrf.obj \
! 	$(OBJ_D)\dsa_sign.obj $(OBJ_D)\dsa_err.obj $(OBJ_D)\dh_gen.obj \
! 	$(OBJ_D)\dh_key.obj $(OBJ_D)\dh_lib.obj $(OBJ_D)\dh_check.obj \
! 	$(OBJ_D)\dh_err.obj $(OBJ_D)\buffer.obj $(OBJ_D)\bio_lib.obj \
! 	$(OBJ_D)\bio_cb.obj $(OBJ_D)\buf_err.obj $(OBJ_D)\bss_mem.obj \
! 	$(OBJ_D)\bss_null.obj $(OBJ_D)\bss_fd.obj $(OBJ_D)\bss_file.obj \
! 	$(OBJ_D)\bss_sock.obj $(OBJ_D)\bf_buff.obj $(OBJ_D)\stack.obj \
! 	$(OBJ_D)\lhash.obj $(OBJ_D)\lh_stats.obj $(OBJ_D)\md5_rand.obj \
! 	$(OBJ_D)\randfile.obj $(OBJ_D)\err.obj $(OBJ_D)\err_all.obj \
! 	$(OBJ_D)\obj_dat.obj $(OBJ_D)\obj_lib.obj $(OBJ_D)\obj_err.obj \
! 	$(OBJ_D)\encode.obj $(OBJ_D)\digest.obj $(OBJ_D)\evp_enc.obj \
! 	$(OBJ_D)\evp_key.obj $(OBJ_D)\e_ecb_d.obj $(OBJ_D)\e_cbc_d.obj \
! 	$(OBJ_D)\e_cfb_d.obj $(OBJ_D)\e_ofb_d.obj $(OBJ_D)\e_ecb_i.obj \
! 	$(OBJ_D)\e_cbc_i.obj $(OBJ_D)\e_cfb_i.obj $(OBJ_D)\e_ofb_i.obj \
! 	$(OBJ_D)\e_ecb_3d.obj $(OBJ_D)\e_cbc_3d.obj $(OBJ_D)\e_rc4.obj \
! 	$(OBJ_D)\e_names.obj $(OBJ_D)\e_cfb_3d.obj $(OBJ_D)\e_ofb_3d.obj \
! 	$(OBJ_D)\e_xcbc_d.obj $(OBJ_D)\e_ecb_r2.obj $(OBJ_D)\e_cbc_r2.obj \
! 	$(OBJ_D)\e_cfb_r2.obj $(OBJ_D)\e_ofb_r2.obj $(OBJ_D)\m_md2.obj \
! 	$(OBJ_D)\m_md5.obj $(OBJ_D)\m_sha.obj $(OBJ_D)\m_sha1.obj \
! 	$(OBJ_D)\m_dss.obj $(OBJ_D)\m_dss1.obj $(OBJ_D)\m_names.obj \
! 	$(OBJ_D)\p_open.obj $(OBJ_D)\p_seal.obj $(OBJ_D)\p_sign.obj \
! 	$(OBJ_D)\p_verify.obj $(OBJ_D)\p_lib.obj $(OBJ_D)\bio_md.obj \
! 	$(OBJ_D)\evp_err.obj $(OBJ_D)\pem_sign.obj $(OBJ_D)\pem_seal.obj \
! 	$(OBJ_D)\pem_info.obj $(OBJ_D)\pem_lib.obj $(OBJ_D)\pem_err.obj \
! 	$(OBJ_D)\x509_def.obj $(OBJ_D)\x509_r2x.obj $(OBJ_D)\x509_cmp.obj \
! 	$(OBJ_D)\x509_obj.obj $(OBJ_D)\x509_req.obj $(OBJ_D)\x509_vrf.obj \
! 	$(OBJ_D)\x509_crt.obj $(OBJ_D)\x509_ath.obj $(OBJ_D)\x509_err.obj \
! 	$(OBJ_D)\a_object.obj $(OBJ_D)\a_bitstr.obj $(OBJ_D)\a_utctm.obj \
! 	$(OBJ_D)\a_int.obj $(OBJ_D)\a_octet.obj $(OBJ_D)\a_print.obj \
! 	$(OBJ_D)\a_type.obj $(OBJ_D)\a_set.obj $(OBJ_D)\a_dup.obj \
! 	$(OBJ_D)\a_d2i_fp.obj $(OBJ_D)\a_i2d_fp.obj $(OBJ_D)\a_sign.obj \
! 	$(OBJ_D)\a_verify.obj $(OBJ_D)\x_algor.obj $(OBJ_D)\x_val.obj \
! 	$(OBJ_D)\x_pubkey.obj $(OBJ_D)\x_sig.obj $(OBJ_D)\x_req.obj \
! 	$(OBJ_D)\x_attrib.obj $(OBJ_D)\x_name.obj $(OBJ_D)\x_cinf.obj \
! 	$(OBJ_D)\x_x509.obj $(OBJ_D)\x_crl.obj $(OBJ_D)\x_info.obj \
! 	$(OBJ_D)\x_spki.obj $(OBJ_D)\d2i_r_pr.obj $(OBJ_D)\i2d_r_pr.obj \
! 	$(OBJ_D)\d2i_r_pu.obj $(OBJ_D)\i2d_r_pu.obj $(OBJ_D)\d2i_s_pr.obj \
! 	$(OBJ_D)\d2i_s_pu.obj $(OBJ_D)\d2i_pu.obj $(OBJ_D)\d2i_pr.obj \
! 	$(OBJ_D)\i2d_pu.obj $(OBJ_D)\i2d_pr.obj $(OBJ_D)\t_req.obj \
! 	$(OBJ_D)\t_x509.obj $(OBJ_D)\t_pkey.obj $(OBJ_D)\p7_i_s.obj \
! 	$(OBJ_D)\p7_signi.obj $(OBJ_D)\p7_signd.obj $(OBJ_D)\p7_recip.obj \
! 	$(OBJ_D)\p7_enc_c.obj $(OBJ_D)\p7_evp.obj $(OBJ_D)\p7_dgst.obj \
! 	$(OBJ_D)\p7_s_e.obj $(OBJ_D)\p7_enc.obj $(OBJ_D)\p7_lib.obj \
! 	$(OBJ_D)\f_int.obj $(OBJ_D)\i2d_dh.obj $(OBJ_D)\d2i_dh.obj \
! 	$(OBJ_D)\n_pkey.obj $(OBJ_D)\a_hdr.obj $(OBJ_D)\x_pkey.obj \
! 	$(OBJ_D)\a_bool.obj $(OBJ_D)\x_exten.obj $(OBJ_D)\asn1_par.obj \
! 	$(OBJ_D)\asn1_lib.obj $(OBJ_D)\asn1_err.obj $(OBJ_D)\meth_lib.obj \
! 	$(OBJ_D)\x509meth.obj $(OBJ_D)\by_file.obj $(OBJ_D)\by_dir.obj \
! 	$(OBJ_D)\meth_err.obj $(OBJ_D)\conf.obj $(OBJ_D)\conf_err.obj \
! 	$(OBJ_D)\txt_db.obj
  
  RSAGLUEOBJ=$(OBJ_D)\rsaref.obj \
  	$(OBJ_D)\rsar_err.obj
***************
*** 726,731 ****
--- 728,736 ----
  $(OBJ_D)\rand_key.obj: $(SRC_D)\crypto\des\rand_key.c
  	$(CC) /Fo$(OBJ_D)\rand_key.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\rand_key.c
  
+ $(OBJ_D)\xcbc_enc.obj: $(SRC_D)\crypto\des\xcbc_enc.c
+ 	$(CC) /Fo$(OBJ_D)\xcbc_enc.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\xcbc_enc.c
+ 
  $(OBJ_D)\read_pwd.obj: $(SRC_D)\crypto\des\read_pwd.c
  	$(CC) /Fo$(OBJ_D)\read_pwd.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\read_pwd.c
  
***************
*** 981,986 ****
--- 986,994 ----
  $(OBJ_D)\e_ofb_3d.obj: $(SRC_D)\crypto\evp\e_ofb_3d.c
  	$(CC) /Fo$(OBJ_D)\e_ofb_3d.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_ofb_3d.c
  
+ $(OBJ_D)\e_xcbc_d.obj: $(SRC_D)\crypto\evp\e_xcbc_d.c
+ 	$(CC) /Fo$(OBJ_D)\e_xcbc_d.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_xcbc_d.c
+ 
  $(OBJ_D)\e_ecb_r2.obj: $(SRC_D)\crypto\evp\e_ecb_r2.c
  	$(CC) /Fo$(OBJ_D)\e_ecb_r2.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_ecb_r2.c
  
***************
*** 1239,1244 ****
--- 1247,1258 ----
  $(OBJ_D)\x_pkey.obj: $(SRC_D)\crypto\asn1\x_pkey.c
  	$(CC) /Fo$(OBJ_D)\x_pkey.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\x_pkey.c
  
+ $(OBJ_D)\a_bool.obj: $(SRC_D)\crypto\asn1\a_bool.c
+ 	$(CC) /Fo$(OBJ_D)\a_bool.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\a_bool.c
+ 
+ $(OBJ_D)\x_exten.obj: $(SRC_D)\crypto\asn1\x_exten.c
+ 	$(CC) /Fo$(OBJ_D)\x_exten.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\x_exten.c
+ 
  $(OBJ_D)\asn1_par.obj: $(SRC_D)\crypto\asn1\asn1_par.c
  	$(CC) /Fo$(OBJ_D)\asn1_par.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\asn1_par.c
  
***************
*** 1435,1440 ****
--- 1449,1455 ----
  y
  +$(BN_MULW_OBJ) &
  +$(OBJ_D)\a_bitstr.obj &
+ +$(OBJ_D)\a_bool.obj &
  +$(OBJ_D)\a_d2i_fp.obj &
  +$(OBJ_D)\a_dup.obj &
  +$(OBJ_D)\a_hdr.obj &
***************
*** 1525,1530 ****
--- 1540,1546 ----
  +$(OBJ_D)\e_ofb_i.obj &
  +$(OBJ_D)\e_ofb_r2.obj &
  +$(OBJ_D)\e_rc4.obj &
+ +$(OBJ_D)\e_xcbc_d.obj &
  +$(OBJ_D)\ecb3_enc.obj &
  +$(OBJ_D)\ecb_enc.obj &
  +$(OBJ_D)\ede_enc.obj &
***************
*** 1635,1640 ****
--- 1651,1657 ----
  +$(OBJ_D)\x_attrib.obj &
  +$(OBJ_D)\x_cinf.obj &
  +$(OBJ_D)\x_crl.obj &
+ +$(OBJ_D)\x_exten.obj &
  +$(OBJ_D)\x_info.obj &
  +$(OBJ_D)\x_name.obj &
  +$(OBJ_D)\x_pkey.obj &
***************
*** 1644,1649 ****
--- 1661,1667 ----
  +$(OBJ_D)\x_spki.obj &
  +$(OBJ_D)\x_val.obj &
  +$(OBJ_D)\x_x509.obj &
+ +$(OBJ_D)\xcbc_enc.obj &
  
  
  <<
*** /var/spool/ftp/pub/Crypto/SSL/062/SSLeay-0.6.1/./ms/w31dll.mak	Fri Jul 12 17:22:16 1996
--- ./ms/w31dll.mak	Thu Jul 25 16:07:15 1996
***************
*** 148,214 ****
  	$(OBJ_D)\enc_read.obj $(OBJ_D)\enc_writ.obj $(OBJ_D)\fcrypt.obj \
  	$(OBJ_D)\ncbc_enc.obj $(OBJ_D)\ofb64enc.obj $(OBJ_D)\ofb_enc.obj \
  	$(OBJ_D)\str2key.obj $(OBJ_D)\pcbc_enc.obj $(OBJ_D)\qud_cksm.obj \
! 	$(OBJ_D)\rand_key.obj $(OBJ_D)\read_pwd.obj $(OBJ_D)\rpc_enc.obj \
! 	$(OBJ_D)\cbc_cksm.obj $(OBJ_D)\supp.obj $(OBJ_D)\rc4_enc.obj \
! 	$(OBJ_D)\rc2_ecb.obj $(OBJ_D)\rc2_skey.obj $(OBJ_D)\rc2_cbc.obj \
! 	$(OBJ_D)\rc2cfb64.obj $(OBJ_D)\rc2ofb64.obj $(OBJ_D)\i_cbc.obj \
! 	$(OBJ_D)\i_cfb64.obj $(OBJ_D)\i_ofb64.obj $(OBJ_D)\i_ecb.obj \
! 	$(OBJ_D)\i_skey.obj $(OBJ_D)\bn_add.obj $(OBJ_D)\bn_div.obj \
! 	$(OBJ_D)\bn_exp.obj $(OBJ_D)\bn_lib.obj $(OBJ_D)\bn_mod.obj \
! 	$(OBJ_D)\bn_mul.obj $(OBJ_D)\bn_print.obj $(OBJ_D)\bn_rand.obj \
! 	$(OBJ_D)\bn_shift.obj $(OBJ_D)\bn_sub.obj $(OBJ_D)\bn_word.obj \
! 	$(OBJ_D)\bn_gcd.obj $(OBJ_D)\bn_prime.obj $(OBJ_D)\bn_err.obj \
! 	$(OBJ_D)\bn_sqr.obj $(BN_MULW_OBJ) $(OBJ_D)\bn_recp.obj \
! 	$(OBJ_D)\bn_mont.obj $(OBJ_D)\rsa_enc.obj $(OBJ_D)\rsa_gen.obj \
! 	$(OBJ_D)\rsa_lib.obj $(OBJ_D)\rsa_sign.obj $(OBJ_D)\rsa_err.obj \
! 	$(OBJ_D)\dsa_lib.obj $(OBJ_D)\dsa_vrf.obj $(OBJ_D)\dsa_sign.obj \
! 	$(OBJ_D)\dsa_err.obj $(OBJ_D)\dh_gen.obj $(OBJ_D)\dh_key.obj \
! 	$(OBJ_D)\dh_lib.obj $(OBJ_D)\dh_check.obj $(OBJ_D)\dh_err.obj \
! 	$(OBJ_D)\buffer.obj $(OBJ_D)\bio_lib.obj $(OBJ_D)\bio_cb.obj \
! 	$(OBJ_D)\buf_err.obj $(OBJ_D)\bss_mem.obj $(OBJ_D)\bss_null.obj \
! 	$(OBJ_D)\bss_fd.obj $(OBJ_D)\bss_file.obj $(OBJ_D)\bss_sock.obj \
! 	$(OBJ_D)\bf_buff.obj $(OBJ_D)\stack.obj $(OBJ_D)\lhash.obj \
! 	$(OBJ_D)\lh_stats.obj $(OBJ_D)\md5_rand.obj $(OBJ_D)\randfile.obj \
! 	$(OBJ_D)\err.obj $(OBJ_D)\err_all.obj $(OBJ_D)\obj_dat.obj \
! 	$(OBJ_D)\obj_lib.obj $(OBJ_D)\obj_err.obj $(OBJ_D)\encode.obj \
! 	$(OBJ_D)\digest.obj $(OBJ_D)\evp_enc.obj $(OBJ_D)\evp_key.obj \
! 	$(OBJ_D)\e_ecb_d.obj $(OBJ_D)\e_cbc_d.obj $(OBJ_D)\e_cfb_d.obj \
! 	$(OBJ_D)\e_ofb_d.obj $(OBJ_D)\e_ecb_i.obj $(OBJ_D)\e_cbc_i.obj \
! 	$(OBJ_D)\e_cfb_i.obj $(OBJ_D)\e_ofb_i.obj $(OBJ_D)\e_ecb_3d.obj \
! 	$(OBJ_D)\e_cbc_3d.obj $(OBJ_D)\e_rc4.obj $(OBJ_D)\e_names.obj \
! 	$(OBJ_D)\e_cfb_3d.obj $(OBJ_D)\e_ofb_3d.obj $(OBJ_D)\e_ecb_r2.obj \
! 	$(OBJ_D)\e_cbc_r2.obj $(OBJ_D)\e_cfb_r2.obj $(OBJ_D)\e_ofb_r2.obj \
! 	$(OBJ_D)\m_md2.obj $(OBJ_D)\m_md5.obj $(OBJ_D)\m_sha.obj \
! 	$(OBJ_D)\m_sha1.obj $(OBJ_D)\m_dss.obj $(OBJ_D)\m_dss1.obj \
! 	$(OBJ_D)\m_names.obj $(OBJ_D)\p_open.obj $(OBJ_D)\p_seal.obj \
! 	$(OBJ_D)\p_sign.obj $(OBJ_D)\p_verify.obj $(OBJ_D)\p_lib.obj \
! 	$(OBJ_D)\bio_md.obj $(OBJ_D)\evp_err.obj $(OBJ_D)\pem_sign.obj \
! 	$(OBJ_D)\pem_seal.obj $(OBJ_D)\pem_info.obj $(OBJ_D)\pem_lib.obj \
! 	$(OBJ_D)\pem_err.obj $(OBJ_D)\x509_def.obj $(OBJ_D)\x509_r2x.obj \
! 	$(OBJ_D)\x509_cmp.obj $(OBJ_D)\x509_obj.obj $(OBJ_D)\x509_req.obj \
! 	$(OBJ_D)\x509_vrf.obj $(OBJ_D)\x509_crt.obj $(OBJ_D)\x509_ath.obj \
! 	$(OBJ_D)\x509_err.obj $(OBJ_D)\a_object.obj $(OBJ_D)\a_bitstr.obj \
! 	$(OBJ_D)\a_utctm.obj $(OBJ_D)\a_int.obj $(OBJ_D)\a_octet.obj \
! 	$(OBJ_D)\a_print.obj $(OBJ_D)\a_type.obj $(OBJ_D)\a_set.obj \
! 	$(OBJ_D)\a_dup.obj $(OBJ_D)\a_d2i_fp.obj $(OBJ_D)\a_i2d_fp.obj \
! 	$(OBJ_D)\a_sign.obj $(OBJ_D)\a_verify.obj $(OBJ_D)\x_algor.obj \
! 	$(OBJ_D)\x_val.obj $(OBJ_D)\x_pubkey.obj $(OBJ_D)\x_sig.obj \
! 	$(OBJ_D)\x_req.obj $(OBJ_D)\x_attrib.obj $(OBJ_D)\x_name.obj \
! 	$(OBJ_D)\x_cinf.obj $(OBJ_D)\x_x509.obj $(OBJ_D)\x_crl.obj \
! 	$(OBJ_D)\x_info.obj $(OBJ_D)\x_spki.obj $(OBJ_D)\d2i_r_pr.obj \
! 	$(OBJ_D)\i2d_r_pr.obj $(OBJ_D)\d2i_r_pu.obj $(OBJ_D)\i2d_r_pu.obj \
! 	$(OBJ_D)\d2i_s_pr.obj $(OBJ_D)\d2i_s_pu.obj $(OBJ_D)\d2i_pu.obj \
! 	$(OBJ_D)\d2i_pr.obj $(OBJ_D)\i2d_pu.obj $(OBJ_D)\i2d_pr.obj \
! 	$(OBJ_D)\t_req.obj $(OBJ_D)\t_x509.obj $(OBJ_D)\t_pkey.obj \
! 	$(OBJ_D)\p7_i_s.obj $(OBJ_D)\p7_signi.obj $(OBJ_D)\p7_signd.obj \
! 	$(OBJ_D)\p7_recip.obj $(OBJ_D)\p7_enc_c.obj $(OBJ_D)\p7_evp.obj \
! 	$(OBJ_D)\p7_dgst.obj $(OBJ_D)\p7_s_e.obj $(OBJ_D)\p7_enc.obj \
! 	$(OBJ_D)\p7_lib.obj $(OBJ_D)\f_int.obj $(OBJ_D)\i2d_dh.obj \
! 	$(OBJ_D)\d2i_dh.obj $(OBJ_D)\n_pkey.obj $(OBJ_D)\a_hdr.obj \
! 	$(OBJ_D)\x_pkey.obj $(OBJ_D)\asn1_par.obj $(OBJ_D)\asn1_lib.obj \
! 	$(OBJ_D)\asn1_err.obj $(OBJ_D)\meth_lib.obj $(OBJ_D)\x509meth.obj \
! 	$(OBJ_D)\by_file.obj $(OBJ_D)\by_dir.obj $(OBJ_D)\meth_err.obj \
! 	$(OBJ_D)\conf.obj $(OBJ_D)\conf_err.obj $(OBJ_D)\txt_db.obj
  
  RSAGLUEOBJ=$(OBJ_D)\rsaref.obj \
  	$(OBJ_D)\rsar_err.obj
--- 148,216 ----
  	$(OBJ_D)\enc_read.obj $(OBJ_D)\enc_writ.obj $(OBJ_D)\fcrypt.obj \
  	$(OBJ_D)\ncbc_enc.obj $(OBJ_D)\ofb64enc.obj $(OBJ_D)\ofb_enc.obj \
  	$(OBJ_D)\str2key.obj $(OBJ_D)\pcbc_enc.obj $(OBJ_D)\qud_cksm.obj \
! 	$(OBJ_D)\rand_key.obj $(OBJ_D)\xcbc_enc.obj $(OBJ_D)\read_pwd.obj \
! 	$(OBJ_D)\rpc_enc.obj $(OBJ_D)\cbc_cksm.obj $(OBJ_D)\supp.obj \
! 	$(OBJ_D)\rc4_enc.obj $(OBJ_D)\rc2_ecb.obj $(OBJ_D)\rc2_skey.obj \
! 	$(OBJ_D)\rc2_cbc.obj $(OBJ_D)\rc2cfb64.obj $(OBJ_D)\rc2ofb64.obj \
! 	$(OBJ_D)\i_cbc.obj $(OBJ_D)\i_cfb64.obj $(OBJ_D)\i_ofb64.obj \
! 	$(OBJ_D)\i_ecb.obj $(OBJ_D)\i_skey.obj $(OBJ_D)\bn_add.obj \
! 	$(OBJ_D)\bn_div.obj $(OBJ_D)\bn_exp.obj $(OBJ_D)\bn_lib.obj \
! 	$(OBJ_D)\bn_mod.obj $(OBJ_D)\bn_mul.obj $(OBJ_D)\bn_print.obj \
! 	$(OBJ_D)\bn_rand.obj $(OBJ_D)\bn_shift.obj $(OBJ_D)\bn_sub.obj \
! 	$(OBJ_D)\bn_word.obj $(OBJ_D)\bn_gcd.obj $(OBJ_D)\bn_prime.obj \
! 	$(OBJ_D)\bn_err.obj $(OBJ_D)\bn_sqr.obj $(BN_MULW_OBJ) \
! 	$(OBJ_D)\bn_recp.obj $(OBJ_D)\bn_mont.obj $(OBJ_D)\rsa_enc.obj \
! 	$(OBJ_D)\rsa_gen.obj $(OBJ_D)\rsa_lib.obj $(OBJ_D)\rsa_sign.obj \
! 	$(OBJ_D)\rsa_err.obj $(OBJ_D)\dsa_lib.obj $(OBJ_D)\dsa_vrf.obj \
! 	$(OBJ_D)\dsa_sign.obj $(OBJ_D)\dsa_err.obj $(OBJ_D)\dh_gen.obj \
! 	$(OBJ_D)\dh_key.obj $(OBJ_D)\dh_lib.obj $(OBJ_D)\dh_check.obj \
! 	$(OBJ_D)\dh_err.obj $(OBJ_D)\buffer.obj $(OBJ_D)\bio_lib.obj \
! 	$(OBJ_D)\bio_cb.obj $(OBJ_D)\buf_err.obj $(OBJ_D)\bss_mem.obj \
! 	$(OBJ_D)\bss_null.obj $(OBJ_D)\bss_fd.obj $(OBJ_D)\bss_file.obj \
! 	$(OBJ_D)\bss_sock.obj $(OBJ_D)\bf_buff.obj $(OBJ_D)\stack.obj \
! 	$(OBJ_D)\lhash.obj $(OBJ_D)\lh_stats.obj $(OBJ_D)\md5_rand.obj \
! 	$(OBJ_D)\randfile.obj $(OBJ_D)\err.obj $(OBJ_D)\err_all.obj \
! 	$(OBJ_D)\obj_dat.obj $(OBJ_D)\obj_lib.obj $(OBJ_D)\obj_err.obj \
! 	$(OBJ_D)\encode.obj $(OBJ_D)\digest.obj $(OBJ_D)\evp_enc.obj \
! 	$(OBJ_D)\evp_key.obj $(OBJ_D)\e_ecb_d.obj $(OBJ_D)\e_cbc_d.obj \
! 	$(OBJ_D)\e_cfb_d.obj $(OBJ_D)\e_ofb_d.obj $(OBJ_D)\e_ecb_i.obj \
! 	$(OBJ_D)\e_cbc_i.obj $(OBJ_D)\e_cfb_i.obj $(OBJ_D)\e_ofb_i.obj \
! 	$(OBJ_D)\e_ecb_3d.obj $(OBJ_D)\e_cbc_3d.obj $(OBJ_D)\e_rc4.obj \
! 	$(OBJ_D)\e_names.obj $(OBJ_D)\e_cfb_3d.obj $(OBJ_D)\e_ofb_3d.obj \
! 	$(OBJ_D)\e_xcbc_d.obj $(OBJ_D)\e_ecb_r2.obj $(OBJ_D)\e_cbc_r2.obj \
! 	$(OBJ_D)\e_cfb_r2.obj $(OBJ_D)\e_ofb_r2.obj $(OBJ_D)\m_md2.obj \
! 	$(OBJ_D)\m_md5.obj $(OBJ_D)\m_sha.obj $(OBJ_D)\m_sha1.obj \
! 	$(OBJ_D)\m_dss.obj $(OBJ_D)\m_dss1.obj $(OBJ_D)\m_names.obj \
! 	$(OBJ_D)\p_open.obj $(OBJ_D)\p_seal.obj $(OBJ_D)\p_sign.obj \
! 	$(OBJ_D)\p_verify.obj $(OBJ_D)\p_lib.obj $(OBJ_D)\bio_md.obj \
! 	$(OBJ_D)\evp_err.obj $(OBJ_D)\pem_sign.obj $(OBJ_D)\pem_seal.obj \
! 	$(OBJ_D)\pem_info.obj $(OBJ_D)\pem_lib.obj $(OBJ_D)\pem_err.obj \
! 	$(OBJ_D)\x509_def.obj $(OBJ_D)\x509_r2x.obj $(OBJ_D)\x509_cmp.obj \
! 	$(OBJ_D)\x509_obj.obj $(OBJ_D)\x509_req.obj $(OBJ_D)\x509_vrf.obj \
! 	$(OBJ_D)\x509_crt.obj $(OBJ_D)\x509_ath.obj $(OBJ_D)\x509_err.obj \
! 	$(OBJ_D)\a_object.obj $(OBJ_D)\a_bitstr.obj $(OBJ_D)\a_utctm.obj \
! 	$(OBJ_D)\a_int.obj $(OBJ_D)\a_octet.obj $(OBJ_D)\a_print.obj \
! 	$(OBJ_D)\a_type.obj $(OBJ_D)\a_set.obj $(OBJ_D)\a_dup.obj \
! 	$(OBJ_D)\a_d2i_fp.obj $(OBJ_D)\a_i2d_fp.obj $(OBJ_D)\a_sign.obj \
! 	$(OBJ_D)\a_verify.obj $(OBJ_D)\x_algor.obj $(OBJ_D)\x_val.obj \
! 	$(OBJ_D)\x_pubkey.obj $(OBJ_D)\x_sig.obj $(OBJ_D)\x_req.obj \
! 	$(OBJ_D)\x_attrib.obj $(OBJ_D)\x_name.obj $(OBJ_D)\x_cinf.obj \
! 	$(OBJ_D)\x_x509.obj $(OBJ_D)\x_crl.obj $(OBJ_D)\x_info.obj \
! 	$(OBJ_D)\x_spki.obj $(OBJ_D)\d2i_r_pr.obj $(OBJ_D)\i2d_r_pr.obj \
! 	$(OBJ_D)\d2i_r_pu.obj $(OBJ_D)\i2d_r_pu.obj $(OBJ_D)\d2i_s_pr.obj \
! 	$(OBJ_D)\d2i_s_pu.obj $(OBJ_D)\d2i_pu.obj $(OBJ_D)\d2i_pr.obj \
! 	$(OBJ_D)\i2d_pu.obj $(OBJ_D)\i2d_pr.obj $(OBJ_D)\t_req.obj \
! 	$(OBJ_D)\t_x509.obj $(OBJ_D)\t_pkey.obj $(OBJ_D)\p7_i_s.obj \
! 	$(OBJ_D)\p7_signi.obj $(OBJ_D)\p7_signd.obj $(OBJ_D)\p7_recip.obj \
! 	$(OBJ_D)\p7_enc_c.obj $(OBJ_D)\p7_evp.obj $(OBJ_D)\p7_dgst.obj \
! 	$(OBJ_D)\p7_s_e.obj $(OBJ_D)\p7_enc.obj $(OBJ_D)\p7_lib.obj \
! 	$(OBJ_D)\f_int.obj $(OBJ_D)\i2d_dh.obj $(OBJ_D)\d2i_dh.obj \
! 	$(OBJ_D)\n_pkey.obj $(OBJ_D)\a_hdr.obj $(OBJ_D)\x_pkey.obj \
! 	$(OBJ_D)\a_bool.obj $(OBJ_D)\x_exten.obj $(OBJ_D)\asn1_par.obj \
! 	$(OBJ_D)\asn1_lib.obj $(OBJ_D)\asn1_err.obj $(OBJ_D)\meth_lib.obj \
! 	$(OBJ_D)\x509meth.obj $(OBJ_D)\by_file.obj $(OBJ_D)\by_dir.obj \
! 	$(OBJ_D)\meth_err.obj $(OBJ_D)\conf.obj $(OBJ_D)\conf_err.obj \
! 	$(OBJ_D)\txt_db.obj
  
  RSAGLUEOBJ=$(OBJ_D)\rsaref.obj \
  	$(OBJ_D)\rsar_err.obj
***************
*** 726,731 ****
--- 728,736 ----
  $(OBJ_D)\rand_key.obj: $(SRC_D)\crypto\des\rand_key.c
  	$(CC) /Fo$(OBJ_D)\rand_key.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\rand_key.c
  
+ $(OBJ_D)\xcbc_enc.obj: $(SRC_D)\crypto\des\xcbc_enc.c
+ 	$(CC) /Fo$(OBJ_D)\xcbc_enc.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\xcbc_enc.c
+ 
  $(OBJ_D)\read_pwd.obj: $(SRC_D)\crypto\des\read_pwd.c
  	$(CC) /Fo$(OBJ_D)\read_pwd.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\des\read_pwd.c
  
***************
*** 981,986 ****
--- 986,994 ----
  $(OBJ_D)\e_ofb_3d.obj: $(SRC_D)\crypto\evp\e_ofb_3d.c
  	$(CC) /Fo$(OBJ_D)\e_ofb_3d.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_ofb_3d.c
  
+ $(OBJ_D)\e_xcbc_d.obj: $(SRC_D)\crypto\evp\e_xcbc_d.c
+ 	$(CC) /Fo$(OBJ_D)\e_xcbc_d.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_xcbc_d.c
+ 
  $(OBJ_D)\e_ecb_r2.obj: $(SRC_D)\crypto\evp\e_ecb_r2.c
  	$(CC) /Fo$(OBJ_D)\e_ecb_r2.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\evp\e_ecb_r2.c
  
***************
*** 1239,1244 ****
--- 1247,1258 ----
  $(OBJ_D)\x_pkey.obj: $(SRC_D)\crypto\asn1\x_pkey.c
  	$(CC) /Fo$(OBJ_D)\x_pkey.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\x_pkey.c
  
+ $(OBJ_D)\a_bool.obj: $(SRC_D)\crypto\asn1\a_bool.c
+ 	$(CC) /Fo$(OBJ_D)\a_bool.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\a_bool.c
+ 
+ $(OBJ_D)\x_exten.obj: $(SRC_D)\crypto\asn1\x_exten.c
+ 	$(CC) /Fo$(OBJ_D)\x_exten.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\x_exten.c
+ 
  $(OBJ_D)\asn1_par.obj: $(SRC_D)\crypto\asn1\asn1_par.c
  	$(CC) /Fo$(OBJ_D)\asn1_par.obj $(LIB_CFLAGS) -c $(SRC_D)\crypto\asn1\asn1_par.c
  
***************
*** 1437,1442 ****
--- 1451,1457 ----
    $(SHLIB_EX_OBJ) +
    $(BN_MULW_OBJ) +
    $(OBJ_D)\a_bitstr.obj +
+   $(OBJ_D)\a_bool.obj +
    $(OBJ_D)\a_d2i_fp.obj +
    $(OBJ_D)\a_dup.obj +
    $(OBJ_D)\a_hdr.obj +
***************
*** 1527,1532 ****
--- 1542,1548 ----
    $(OBJ_D)\e_ofb_i.obj +
    $(OBJ_D)\e_ofb_r2.obj +
    $(OBJ_D)\e_rc4.obj +
+   $(OBJ_D)\e_xcbc_d.obj +
    $(OBJ_D)\ecb3_enc.obj +
    $(OBJ_D)\ecb_enc.obj +
    $(OBJ_D)\ede_enc.obj +
***************
*** 1637,1642 ****
--- 1653,1659 ----
    $(OBJ_D)\x_attrib.obj +
    $(OBJ_D)\x_cinf.obj +
    $(OBJ_D)\x_crl.obj +
+   $(OBJ_D)\x_exten.obj +
    $(OBJ_D)\x_info.obj +
    $(OBJ_D)\x_name.obj +
    $(OBJ_D)\x_pkey.obj +
***************
*** 1646,1651 ****
--- 1663,1669 ----
    $(OBJ_D)\x_spki.obj +
    $(OBJ_D)\x_val.obj +
    $(OBJ_D)\x_x509.obj +
+   $(OBJ_D)\xcbc_enc.obj +
  
    $(O_CRYPTO)
  
*** /dev/null	Thu Jul 25 17:47:23 1996
--- ./ms/tpem.bat	Wed Jul 24 20:37:33 1996
***************
*** 0 ****
--- 1,6 ----
+ rem called by testpem
+ 
+ echo test %1 %2
+ %ssleay% %1 -in %2 -out %tmp1%
+ %cmp% %2 %tmp1%
+ 
*** /dev/null	Thu Jul 25 17:47:23 1996
--- ./ms/testpem.bat	Wed Jul 24 20:48:07 1996
***************
*** 0 ****
--- 1,30 ----
+ echo=off
+ set ssleay=%1%
+ set tmp1=pem.out
+ set cmp=perl cmp.pl
+ 
+ call tpem.bat crl ..\test\testcrl.pem
+ if errorlevel 1 goto err
+ 
+ call tpem.bat pkcs7 ..\test\testp7.pem
+ if errorlevel 1 goto err
+ 
+ call tpem.bat req ..\test\testreq.pem
+ if errorlevel 1 goto err
+ 
+ call tpem.bat rsa ..\test\testrsa.pem
+ if errorlevel 1 goto err
+ 
+ call tpem.bat x509 ..\test\testx509.pem
+ if errorlevel 1 goto err
+ 
+ call tpem.bat x509 ..\test\v3-cert1.pem
+ if errorlevel 1 goto err
+ 
+ call tpem.bat x509 ..\test\v3-cert1.pem
+ if errorlevel 1 goto err
+ 
+ echo OK
+ del %tmp1%
+ :err
+ 
*** /dev/null	Thu Jul 25 17:47:23 1996
--- ./Makefile.ssl.old	Thu Jul 25 16:06:06 1996
***************
*** 0 ****
--- 1,222 ----
+ #
+ # Makefile for all the SSL related library routines and utilities
+ VERSION	= 0.6.2
+ #
+ # make install will install:
+ #   libraries into $INSTALLTOP/lib
+ #   headers   into $INSTALLTOP/include
+ #   utilities into $INSTALLTOP/bin
+ #
+ # By default INSTALLTOP is set to /usr/local/ssl
+ # If you want things install elsewere, consider running
+ # perl util/ssldir.pl /new/path
+ #
+ # Interesting Mailing Lists:
+ #     ssl-bugs@mincom.oz.au
+ #     ssl-users@mincom.oz.au
+ #
+ # To join the Mailing Lists:
+ #     ssl-bugs-request@mincom.oz.au
+ #     ssl-users-request@mincom.oz.au
+ #
+ # If you must get hold of people directly (we much prefer the above
+ # lists to be used if the question is of general interest!):
+ #	Eric Young <eay@mincom.oz.au>
+ #	Tim Hudson <tjh@mincom.oz.au>
+ #	or both    <ssleay@mincom.oz.au>
+ #
+ # The primary distribution of SSLeay is from
+ # ftp://ftp.psy.uq.oz.au/pub/Crypto/SSL
+ #
+ # NOCONST - Define for C compilers that don't like the const key word.
+ # NOPROTO - Define in if your compiler does not support prototypes.
+ # RSAref  - Define if we are to link with RSAref.
+ # NOIDEA  - Define to build without the IDEA algorithm
+ # NORC4   - Define to build without the RC4 algorithm
+ # NORC2   - Define to build without the RC2 algorithm
+ # THREADS - Define when building with threads, you will also need any
+ #	    system defines as well, i.e. _REENTERANT for Solaris 2.[34]
+ # TERMIO  - Define the termio terminal subsystem, needed if sgtty is missing.
+ # TERMIOS - Define the termios terminal subsystem, Silicon Graphics.
+ # LOCK_DEBUG - turns on lots of lock debug output :-)
+ 
+ CC= cc
+ CFLAG= -O -DNOPROTO
+ PEX_LIBS= -L. -L.. -L../.. -L../../..
+ EX_LIBS= 
+ BN_MULW= bn_mulw.o
+ 
+ # If you change the INSTALLTOP, make sure to also change the values
+ # in crypto/location.h
+ INSTALLTOP=/usr/local/ssl
+ 
+ MAKEFILE= Makefile.ssl
+ MAKE=	  make -f $(MAKEFILE)
+ 
+ MAN1=1
+ MAN3=3
+ SHELL=/bin/sh
+ 
+ TOP=	.
+ DIRS=	crypto ssl rsaref apps test tools
+ ONEDIRS=out tmp
+ EDIRS=	times doc bugs util include certs ms shlib
+ MISC=	COPYRIGHT Configure INSTALL Makefile.ssl Makefile \
+ 	RAMBLINGS README README.050 README.051 README.052 TODO \
+ 	README.060 README.061 README.062 \
+ 	VERSION PROBLEMS MINFO makefile.one e_os.h \
+ 	MICROSOFT
+ WDIRS=	windows
+ LIB=	libcrypto.a
+ LIBS=	libcrypto.a libssl.a 
+ 
+ GENERAL=	Makefile
+ BASENAME=	SSLeay
+ NAME=		$(BASENAME)-$(VERSION)
+ TARFILE=	$(NAME).tar
+ WTARFILE=	$(NAME)-win.tar
+ EX_HEADER=
+ HEADER=		e_os.h
+ 
+ all:
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "making $$i..."; \
+ 	$(MAKE) CC='${CC}' CFLAG='${CFLAG}' INSTALLTOP='${INSTALLTOP}' PEX_LIBS='${PEX_LIBS}' EX_LIBS='${EX_LIBS}' BN_MULW='${BN_MULW}' all ); \
+ 	done;
+ 
+ sub_all:
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "making $$i..."; \
+ 	$(MAKE) CC='${CC}' CFLAG='${CFLAG}' SDIRS='$(SDIRS)' INSTALLTOP='${INSTALLTOP}' PEX_LIBS='${PEX_LIBS}' EX_LIBS='${EX_LIBS}' BN_MULW='${BN_MULW}' all ); \
+ 	done;
+ 
+ clean:
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "cleaning $$i..."; \
+ 	$(MAKE) clean ); \
+ 	/bin/rm -f $(LIB); \
+ 	done;
+ 	/bin/rm -f *.a *.o speed.* *.map *.so
+ 	/bin/rm -f $(TARFILE)
+ 	@for i in $(ONEDIRS) ;\
+ 	do \
+ 	/bin/rm -f $$i/*; \
+ 	done
+ 
+ makefile.one: files
+ 	perl util/mk1mf.pl >makefile.one; \
+ 	sh util/do_ms.sh
+ 
+ files:	MINFO
+ 	perl $(TOP)/util/files.pl Makefile.ssl > $(TOP)/MINFO
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "making 'files' in $$i..."; \
+ 	$(MAKE) files ); \
+ 	done;
+ 
+ links:
+ 	/bin/rm -f Makefile;
+ 	./util/point.sh Makefile.ssl Makefile;
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "making links in $$i..."; \
+ 	$(MAKE) links ); \
+ 	done;
+ 	# @(cd apps; sh ./mklinks)
+ 	sh tools/c_rehash certs
+ 
+ dclean:
+ 	/bin/rm -f *.bak
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "undoing makedepend in $$i..."; \
+ 	$(MAKE) dclean ); \
+ 	done;
+ 
+ rehash:
+ 	@(PATH="./apps:${PATH}"; sh tools/c_rehash certs)
+ 
+ test:	tests
+ 
+ tests:
+ 	(cd test; echo "testing $$i..."; \
+ 	$(MAKE) CC='${CC}' CFLAG='${CFLAG}' INSTALLTOP='${INSTALLTOP}' PEX_LIBS='${PEX_LIBS}' EX_LIBS='${EX_LIBS}' BN_MULW='${BN_MULW}' tests );
+ 	@apps/ssleay version -a
+ 
+ depend:
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "making dependancies $$i..."; \
+ 	$(MAKE) depend ); \
+ 	done;
+ 
+ lint:
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "making lint $$i..."; \
+ 	$(MAKE) lint ); \
+ 	done;
+ 
+ tags:
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "making tags $$i..."; \
+ 	$(MAKE) tags ); \
+ 	done;
+ 
+ errors:
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "making errors in $$i..."; \
+ 	$(MAKE) errors ); \
+ 	done;
+ 
+ tar:
+ 	@(cd ..;\
+ 	mv $(BASENAME) $(NAME); \
+ 	export STUFF; \
+ 	for i in $(MISC) $(DIRS) $(EDIRS) $(ONEDIRS) ;\
+ 	do \
+ 		STUFF="$$STUFF $(NAME)/$$i"; \
+ 	done; \
+ 	tar cf $(NAME)/$(TARFILE) $$STUFF; \
+ 	mv $(NAME) $(BASENAME) ) 
+ 	gzip -f $(TARFILE)
+ 
+ dist:	
+ 	perl Configure dist
+ 	@$(MAKE) dist_pem_h
+ 	@$(MAKE) clean
+ 	@$(MAKE) dclean
+ 	@(cd apps; sh ./rmlinks)
+ 	@$(MAKE) files
+ 	@$(MAKE) makefile.one
+ 	@$(MAKE) tar
+ 
+ dist_pem_h:
+ 	(cd crypto/pem; $(MAKE) CFLAG='${CFLAG}' pem.h; $(MAKE) clean)
+ 
+ install: all
+ 	@-mkdir -p $(INSTALLTOP)/bin 2>/dev/null
+ 	@-mkdir -p $(INSTALLTOP)/lib 2>/dev/null
+ 	@-mkdir -p $(INSTALLTOP)/include 2>/dev/null
+ 	@-mkdir -p $(INSTALLTOP)/certs 2>/dev/null
+ 	@-mkdir -p $(INSTALLTOP)/private 2>/dev/null
+ 	@for i in $(DIRS) ;\
+ 	do \
+ 	(cd $$i; echo "installing $$i..."; \
+ 	$(MAKE) CC='${CC}' CFLAG='${CFLAG}' INSTALLTOP='${INSTALLTOP}' EX_LIBS='${EX_LIBS}' install ); \
+ 	done
+ 	@for i in $(LIBS) ;\
+ 	do \
+ 	(	echo installing $$i; \
+ 		cp $$i $(INSTALLTOP)/lib; \
+ 		util/ranlib.sh $(INSTALLTOP)/lib/$$i; \
+ 		chmod 644 $(INSTALLTOP)/lib/$$i ) \
+ 	done
+ 
+ # DO NOT DELETE THIS LINE -- make depend depends on it.
