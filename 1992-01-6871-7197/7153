Xref: msuinfo sci.math:23636 sci.crypt:7153
Newsgroups: sci.math,sci.crypt
Path: msuinfo!caen!sol.ctr.columbia.edu!ira.uka.de!chx400!bernina!neptune!monagan
From: monagan@inf.ethz.ch (Michael)
Subject: Re: Primitive Trinomials
Message-ID: <1992Jan28.203856.21515@neptune.inf.ethz.ch>
Summary: large trinomials over GF(2)
Sender: news@neptune.inf.ethz.ch (Mr News)
Nntp-Posting-Host: rutishauser-gw.inf.ethz.ch
Organization: Dept. Informatik, Swiss Federal Institute of Technology (ETH), Zurich, CH
References: <1992Jan27.183435.23434@aero.org>
Date: Tue, 28 Jan 1992 20:38:56 GMT

In article <1992Jan27.183435.23434@aero.org>, jankins@aero.org (Mark Jankins) writes:
> In 1968 and 1969, Zierler and Brillhart published a list of primitive
> and irreducible trinomials over GF(2).  They did not have
> factorizations of 2^N-1 for large N, consequently they did not know if
> many of the irreducible trinomials are primitve.  Has this list been
> updated?  Are there lists of primitive trinomials (polynomials) of
> large degree (>150)?  
> 
> Mark Jankins
> (jankins@aero.org)
> 

I wrote a little Maple program to do this and I was able to compute
the first few for you in a few minutes.  Maple gets stuck I assume when it
gets stuck factoring 2^N-1 for large N but it is otherwise quick
at testing whether trinomials are irreducible and primitive.
Knowing the factorization of 2^N-1 would allow you to generate a list
primitive trinomials without much difficulty.

Mike


    |\^/|      MAPLE V
._|\|   |/|_.  Copyright (c) 1981-1990 by the University of Waterloo.
 \  MAPLE  /   All rights reserved.  MAPLE is a registered trademark of
 <____ ____>   Waterloo Maple Software.
      |        Type ? for help.
> NextTrinomialMod2 := proc(f,x) local d,m;
>     if nops(f) <> 3 then ERROR(`trinomial expected`) fi;
>     d := degree(f,x); m := degree(f-x^d-1,x);
>     if m < d-1 then RETURN( x^d+x^(m+1)+1 ) fi;
>     x^(d+1)+x+1
> end:
> p := 2:
> n := 150:
> for d from n do
>     f := x^d+x+1;
>     while degree(f) = d and not Primitive(f) mod 2 do
> 	f := NextTrinomialMod2(f,x);
>     od;
>     if degree(f)=d then print(d,f) else print(d,`no primitive trinomials`) fi;
> 
> od:

                                    150    53
                              150, x    + x   + 1

                                     151    3
                               151, x    + x  + 1

                          152, no primitive trinomials

                                     153
                               153, x    + x + 1

                          154, no primitive trinomials

                          155, no primitive trinomials

                          156, no primitive trinomials

                          157, no primitive trinomials

                          158, no primitive trinomials

                                    159    31
                              159, x    + x   + 1

                          160, no primitive trinomials

