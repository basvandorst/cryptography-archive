Path: msuinfo!caen!zaphod.mps.ohio-state.edu!cis.ohio-state.edu!ucbvax!virtualnews.nyu.edu!brnstnd
From: brnstnd@nyu.edu (Dan Bernstein)
Newsgroups: sci.crypt
Subject: Re: Non-Randomness in DES-Encrypted Files
Message-ID: <13420.Jan1713.31.3992@virtualnews.nyu.edu>
Date: 17 Jan 92 13:31:39 GMT
References: <3238@wet.UUCP>
Distribution: usa
Organization: IR
Lines: 45

In article <3238@wet.UUCP> naga@wet.UUCP (Peter Davidson) writes:
> It is believed by many that DES randomizes plaintext,
  [ ... ]
> However, applying frequency-analysis programs to DES-encrypted files often
> reveals startling regularities,
  [ ... ]
> The file MC1.GEN was then encrypted using a third implementation of DES,
> a program called MERLIN, using ECB mode and the same hexadecimal key.

ECB stands for Electronic Code Book. DES in ECB mode treats a text as
lots of independent 8-byte chunks. Needless to say, if your original
text has such incredibly skewed distribution as typical English text,
then many of the 8-byte chunks will be exactly the same---enough that
ECB's output is decidedly nonrandom. That's why normal people run DES in
CBC, Cipher Block Chaining, mode, which makes each chunk of output
depend on all the preceding chunks of input.

> This leads one to suspect that one
> of these programs has not implemented the DES algorithm exactly.

It's much more likely that the programs create a DES key differently.
There's no standard way to turn a typed key into the 56 bits that DES
needs.

> |Dolphin Software publishes MS-DOS programming tools and data encryption   |
> |software which is an alternative to DES.

That's wonderful. Why don't you explain the features of your product,
instead of putting down DES unnecessarily? Here, I'll give you an
example of what a feature list looks like: snuffle 5.0, my latest
private-key encryption/decryption suite, is available for free for
United States recipients upon request. It's two to three times faster
than the des program and supports a much larger key. The encryption
method is related to CFB DES, but uses Merkle's Snefru, aka the Xerox
Secure Hash Function, with 8 passes, which would take an incredibly long
time to break even with the best known applications of differential
cryptanalysis. snuffle is zero-delay---it produces each byte of output
before waiting for the next byte of input---so you can use it for
encrypting interactive conversations. The code should compile and run
out of the box on any UNIX machine. Oh, yes, and the method is fully
documented. (Are proprietary schemes usually kept secret because they
have weaknesses to hide, or are weaknesses inevitable in an encryption
method not exposed to public review? Chicken and egg.)

---Dan
