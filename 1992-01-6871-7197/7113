Path: msuinfo!caen!uakari.primate.wisc.edu!samsung!transfer!lectroid!ellisun.sw.stratus.com!cme
From: cme@ellisun.sw.stratus.com (Carl Ellison)
Newsgroups: sci.crypt
Subject: Re: Encrypting with MZT sequences?
Message-ID: <10587@lectroid.sw.stratus.com>
Date: 24 Jan 92 16:12:49 GMT
References: <1992Jan24.054440.22882rcain@netcom.COM>
Sender: usenet@lectroid.sw.stratus.com
Organization: Stratus Computer, Software Engineering
Lines: 28

In article <1992Jan24.054440.22882rcain@netcom.COM> rcain@netcom.COM
(Robert Cain) writes:
>Recently there has been a new class of random sequence generators invented
>with ridiculously long periods and apparantly excellent randomness.

"randomness" is used in a statistical sense here.  Cryptographic randomness
requires that if you know huge amounts of PRNG output, you can't predict
any one subsequent bit of output.  That doesn't apply in this case.  For it
to apply, you would have to have a generator for which complete knowledge
of the output sequence gave no clue to the internal state of the generator
at any time in the process.

>It is fast, involving fairly simple arithmetic and real big state
>variables which could be used as keys.

>I would appreciate any comment [...] regarding the use of these sequences
>to xor with plain text to encrypt ...

The insecurity of PRNG sequences XORed with plaintext to yield ciphertext
doesn't come from short periods.  It comes from the arithmetic simplicity
(linearity) of the algorithm: "fast, involving fairly simple arithmetic" to
use your words.

You must assume a known-plaintext (if not chosen-plaintext) attack.  This
means that the enemy will be able to reconstruct the contents of the PRNG
array as soon as he has received on the order of the number of bits in the
array.  Once the array is reconstructed, it can be run forward and backward
trivially -- so the entire message is broken.
