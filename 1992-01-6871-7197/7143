Path: msuinfo!uchinews!ncar!elroy.jpl.nasa.gov!usc!zaphod.mps.ohio-state.edu!cis.ohio-state.edu!sei.cmu.edu!fs7.ece.cmu.edu!crabapple.srv.cs.cmu.edu!PLAY.TRUST.CS.CMU.EDU!bsy
From: bsy+@CS.CMU.EDU (Bennet Yee)
Newsgroups: sci.crypt
Subject: Re: Determining RSA private key given blackbox
Keywords: RSA
Message-ID: <1992Jan28.022641.101511@cs.cmu.edu>
Date: 28 Jan 92 02:26:41 GMT
References: <1992Jan25.022935.20607@bert.eecs.uic.edu> <1992Jan27.221558.12118@watson.ibm.com>
Reply-To: bsy+@cs.cmu.edu
Organization: Cranberry Melon, School of Cucumber Science
Lines: 58
Nntp-Posting-Host: play.trust.cs.cmu.edu

In article <1992Jan27.221558.12118@watson.ibm.com>, ggr@cropduster.watson.ibm.com (Greg Rose) writes:
>In article <1992Jan25.022935.20607@bert.eecs.uic.edu> dillenbu@bert.eecs.uic.edu (John Dillenburg) writes:
>>I have an RSA question:
>>  Given a blackbox which computed the RSA private key encryption,
>>how hard would it be to determine the private key?  A discrete
>>logarithm would do the trick, but is there an easier way?
>
>This boils down to a chosen-plaintext attack. There was a posting a
>while back which elegantly proved that if you plug in the message that
>corresponds to the number "2", you can easily derive the private key.
>The security relies on the fact that you don't encrypt stuff for other
>people. Unfortunately, I've lost the reference; it should be
>relatively easy to recreate though.

I had posted an article a while back (Oct90) on a thread about public
key encryption and zero knowledge proofs where the _decryption_ of 2
figured prominently.  I've included the relevant part from it below.

I assume that by a blackbox for ``RSA _private_ key encryption'' John
meant a decryption box, where you can feed it some ciphertext c and it
would compute c^d mod n for you, where d is the private decryption
key.  Otherwise the terminology used doesn't make sense to me, since
RSA is a _public_ key encryption system, and the analysis would be
irrelevant.  Also, this is a chosen _ciphertext_ attack, not a chosen
plaintext attack.  Public key schemes must be immune to chosen
plaintext attacks, since the public encryption key e is public, after
all, and an attacker can grind away generating (p,p^e) pairs all day
long.

Note also that while with a single run of a decryption oracle I can
thereafter read all future encrypted messages, I *don't* know the
value of the decryption key.  Knowing the secret decryption key is not
necessary for actually decrypting the messages.

-bsy

----------

Let p, q be your secret primes, n = pq the modulus, d, be your secret
decryption key, e be your public encryption key, de = 1 mod (p-1)(q-1).
Rather than using e to encrypt an random message m, suppose I ask you to
decrypt 2.  You compute a=2^d mod n for me.  I know that a^e = 2 mod n.
Suppose now that I intercept ciphertext c, c = \prod_{i=0}^k c_i 2^i, where
the c_i's are the bits in the binary expansion of c.  Well, the plaintext
message m is just

	m = c^d				mod n
	  = \prod_{i=0}^k (c_i 2^i)^d	mod n
	  = \prod_{i=0}^k c_i^d 2^{i d}	mod n
	  = \prod_{i=0}^k c_i (2^d)^i	mod n
	  = \prod_{i=0}^k c_i a^i	mod n

which I can compute easily.  This shows that I can now invert ciphertext
encrypted with your public key, so I can now pretend to be you.

-- 
Bennet S. Yee		Phone: +1 412 268-7571		Email: bsy+@cs.cmu.edu
School of Computer Science, Carnegie Mellon, Pittsburgh, PA 15213-3890
