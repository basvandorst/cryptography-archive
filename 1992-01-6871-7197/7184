Path: msuinfo!netnews.upenn.edu!jvnc.net!yale.edu!spool.mu.edu!umn.edu!cs.umn.edu!lynx!nmsu.edu!opus!ted
From: ted@nmsu.edu (Ted Dunning)
Newsgroups: sci.crypt
Subject: Re: Reply to request for features of new encryption system.
Message-ID: <TED.92Jan24125248@pylos.nmsu.edu>
Date: 24 Jan 92 19:52:48 GMT
References: <3258@wet.UUCP>
Sender: usenet@nmsu.edu
Reply-To: ted@nmsu.edu
Followup-To: sci.crypt
Distribution: usa
Organization: Computing Research Lab
Lines: 117
In-Reply-To: naga@wet.UUCP's message of 24 Jan 92 14:13:07 GMT


i suppose that criticizing the dolphin software posts just isn't
sporting.  i am still going to do it.


In article <3258@wet.UUCP> naga@wet.UUCP (Peter Davidson) writes:

   > It's two to three times faster than the des program ...
   DE's speed is illustrated by encryption and decryption of a 100K file of
   sci.crypt postings:  "]" indicates console I/O:

de's lack of speed is what is demonstrated.  when dan said two or
three times faster than des, it should be noted that des
implementations on standard workstations now achieve speeds of up to
about 300KB/s.  3 times this is about 1MB/sec.  dan can comment on the
exact speed that snuffle has achieved on various platforms.


   ] DE "Some encryption key" E SCICRYPT.TXT SCICRYPT.ENC
	...
   ] Time for encryption of file: 9 seconds (11.11 Kb/sec)
	...
   ] Time for decryption of file: 8 seconds (12.50 Kb/sec)

this is about 35 times slowwwwer than des when des is run on a
somewhat slower processor.  i am unimpressed.

but, let's move on to whether it is secure or not:

   The DE key, as input by the user, can be up to 60 characters in
   length (any 1-key-typeable character is admissible).

up to 60 characters...  but how short can it be?  does DE help avoid
weak keys?  if not, then it will be easy to attack most of the time.

   Lower case is converted to uppercase and spaces are thrown away.

this decreases security.  and decreases my estimation of the entire
system.

   There are 68^60 possible keys.

oooh... ahhh...  how many are likely to be used?

   >The encryption method ...  uses several different kinds of PRNG
   (all tested), and multiple versions of some.  These are not simply
   combined to produce a single PRNG, but are used at various stages
   during the encryption, in computationally complex ways.

no... complex ways.

PRNG's are notorious for building poor cryptosystems.

   > snuffle is zero-delay---it produces each byte of output > before
   waiting for the next byte of input

   DE encrypts data in varying-sized blocks of up to 10K.  It is
   designed for file encryption but can be applied to encryption of
   blocks of data in RAM which should generally be at least 2K in
   size.

score another one for snuffle.  it can be used to encode data streams.

   > The code should compile and run out of the box on any UNIX
   machine.  > Oh, yes, and the method is fully documented. (Are
   proprietary schemes > usually kept secret because they have
   weaknesses to hide, or are > weaknesses inevitable in an encryption
   method not exposed to public > review? Chicken and egg.)

   At present DE runs only under MS-DOS (Unix version possible later).
   It is provided only in executable form.

this combined with the demonstrated lack of expertise in cryptography
almost certainly implies that the method is _very_ weak.  the fact
that the author doesn't this connection is another point against DE.

   The full details of the method, and the actual C source code, are
   currently not being made public, not because of doubt about the
   security of the method, but because, in the opinion of the
   publisher, such exposure can do nothing to enhance the security of
   the system.

the authors of DE clearly don't understand how quickly source code can
be reconstructed.  remember that just a few tens of hours after the
internet worm started up, a group at berkeley had sent source code
patches back to the author to fix a bug in his code.  if the stakes
are high enough, not distributing source code does not give you any
security.  distributing source code and having competent people
analyze it thoroughly can provide, however, provide significant
insight into the weaknesses of you code.

   I might, however, anticipate one possible criticism.  The method of
   encryption implemented in DE is a computationally complex procedure
   which cannot be represented in a diagram (as DES can) or in any
   formulae specifying transformations and transpositions.

frankly, a program is a formula.

   The system is believed by its author to be secure, not simply
   because of its design, but also because the computationally
   intensive and complex nature of the encryption procedure is, in his
   opinion, highly unlikely to yield to any attempt at rational
   analysis (or cryptanalysis).

this is just plain humorous.  i can implement any transformation in a
complex and compute intensive way.  that says nothing about how hard
it will be to crack.

   The author of the software claims that this is the case for DE, and
   any who would refute his claim (and not simply present arguments ad
   hominem) must demonstrate insecurity by showing that cryptanalyis
   of DE-encrypted data is feasible.

it has to be worthwhile.

your detractors have demonstrated that you don't understand basic
cryptography.  why should any of them spend their time tutoring you?
