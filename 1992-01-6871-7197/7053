Path: msuinfo!caen!uakari.primate.wisc.edu!ames!decwrl!hoptoad!wet!wet.UUCP
From: naga@wet.UUCP (Peter Davidson)
Newsgroups: sci.crypt
Subject: Follow-up to Postings on DES Non-Randomness, Part II
Message-ID: <3245@wet.UUCP>
Date: 19 Jan 92 09:12:56 GMT
Sender: naga@wet.UUCP
Distribution: usa
Organization: Wetware Diversions, San Francisco
Lines: 184

n email respondent writes:
>  You haven't been paying attention to the responses to your earlier post.
What responses?  I have seen only one response posted, from Peter Wayner.
Our newsfeed site may be slacking off again.  [Note added in proof:  I have
now seen the posting of Steve Bellovin, to which I have replied in Part I
above.]
 
I did however, receive three email responses.  One email respondent
suggests that the results posted are not new.  This may be true for some or
even most readers of sci.crypt, most of whom are either professional or
amateur cryptologists, though I haven't seen such a discussion of the
insecurity of encrypting text using DES in ECB mode before, so I'd
certainly be interested if someone would cite some articles in the
literature where this insecurity is discussed.  [Note added in proof: Steve
Bellovin gives some references.]
 
Another email respondent points out that:
>                           ...  ECB is clearly the weakest way to use DES,
> which is why the Federal Government has disallowed ECB for use in
> protecting any Federal documents.  In fact, FIPS PUB 81, which defines DES
> CBC OFB and CFB, seems to define ECB for the sole purpose of excluding from
> use!
 
I readily concede that DES should be used in non-ECB mode, although in fact
it often isn't.  Central point software's PCSECURE does not allow choice of
DES modes, and uses ECB mode, so users encrypting their sensitive documents
with PCSECURE are using an insecure encryption method though they probably
don't know it.
 
I performed some [admittedly belated] experiments to check whether DES in
CBC mode randomizes text data.  I took a 3.6MB Paradox database file and
encrypted it in three ways.  The results are as follows:
 
MOSTFREQ by Dolphin Software
File FORMMAST.DB contains 3604470 bytes and 256 different byte values.
  Rank     Byte      Frequency   ASCII value
    1     0 = 0x00     1769178      null
    2    32 = 0x20      186082      space
    3   101 = 0x65      126050      e
    4    97 = 0x61      108538      a
    5   110 = 0x6E      108148      n
    6   111 = 0x6F       97000      o
    7   105 = 0x69       93941      i
    8   114 = 0x72       89347      r
    9   116 = 0x74       86538      t
   10   115 = 0x73       76818      s
   11   108 = 0x6C       73281      l
   12   102 = 0x66       40335      f
   13   117 = 0x75       39203      u
   14    99 = 0x63       36282      c
   15   100 = 0x64       32804      d
   16   121 = 0x79       32739      y
 
We may note in passing that null bytes account for 49% of the file.
 
FORMMAST.ECB is FORMAST.DB encrypted using DES in electronic code book mode.
 
MOSTFREQ by Dolphin Software
File FORMMAST.ECB contains 3604470 bytes and 256 different byte values.
  Rank     Byte      Frequency   ASCII value
    1   108 = 0x6C      287971      l
    2   106 = 0x6A      152472      j
    3    43 = 0x2B      150664      +
    4   197 = 0xC5      150483
    5   100 = 0x64      150218      d
    6   248 = 0xF8      148977
    7   219 = 0xDB      148081
    8    64 = 0x40       13323      @
    9   227 = 0xE3       13223
   10   121 = 0x79       13124      y
   11   218 = 0xDA       12988
   12   229 = 0xE5       12932
   13    70 = 0x46       12768      F
   14    81 = 0x51       12707      Q
   15   177 = 0xB1       12707
   16   120 = 0x78       12669      x
 
Note that here there are only seven byte values (rather than eight) that
occur far more often than the others, but one of these occurs twice as often
as the others, so we could stretch things a little here to say that there
is a set of eight prominent values, one of which occurs twice in the set.
 
FORMMAST.CBC is FORMAST.DB encrypted using DES in cipher block chaining mode.
Encryption took about five minutes on a 33Mhz 386 PC.
 
MOSTFREQ by Dolphin Software
File FORMMAST.CBC contains 3604470 bytes and 256 different byte values.
  Rank     Byte      Frequency   ASCII value
    1   124 = 0x7C       14369      |
    2   182 = 0xB6       14359
    3   137 = 0x89       14343
    4   186 = 0xBA       14336
    5   167 = 0xA7       14329
    6   114 = 0x72       14324      r
    7    75 = 0x4B       14295      K
    8   100 = 0x64       14295      d
    9     6 = 0x06       14283
   10    39 = 0x27       14281      '
   11   250 = 0xFA       14279
   12   211 = 0xD3       14268
   13   196 = 0xC4       14261
   14   197 = 0xC5       14261
   15   244 = 0xF4       14255
   16    95 = 0x5F       14253      _
 
This looks quite good.  I have to concede that prima facie DES in CBC mode
appears to do a good job of randomizing text.
 
FORMMAST.ENC is FORMMAST.DB encrypted using Dolphin Software's Dolphin
Encrypt (using "to be or not to be" as the key).  The file is compressed
from 3,604,470 bytes to 1,611,579 bytes.  Again, encryption took about five
minutes on a 33Mhz 386 PC.
 
MOSTFREQ by Dolphin Software
File FORMMAST.ENC contains 1611579 bytes and 256 different byte values.
  Rank     Byte      Frequency   ASCII value
    1    16 = 0x10        6546
    2   144 = 0x90        6499
    3   169 = 0xA9        6491
    4   139 = 0x8B        6476
    5   247 = 0xF7        6474
    6   231 = 0xE7        6471
    7   245 = 0xF5        6453
    8     3 = 0x03        6452
    9   229 = 0xE5        6448
   10   170 = 0xAA        6442
   11   105 = 0x69        6435      i
   12    89 = 0x59        6431      Y
   13    32 = 0x20        6428      space
   14   215 = 0xD7        6427
   15   116 = 0x74        6426      t
   16   182 = 0xB6        6425
 
Again, no prominent byte values.
 
One of my email respondents, wishing to pursue these studies, requested a
copy of the MOSTFREQ program.  I shall post the source code following this
article.
 
Dolphin Software's Dolphin Encrypt encryption package includes, in addition
to the encryption/decryption software itself, the executable version of
MOSTFREQ and two programs for measuring randomness (a.k.a. entropy) in a
file: RANDMEAS.EXE and ENTROPY.EXE.  The latter implements Shannon's
definition of the entropy of a string of letters from some alphabet, and
the former implements a different approach to the concept of randomness.
Each program, when applied to a file, produces a value from 0 to 1
(actually a little over 1 is possible with RANDMEAS), with higher values
associated with greater randomness.
 
Random measure, version 1.1, Copyright 1992 Dolphin Software
Number of matching files = 4      Space size = 256
 
           File           Size     Randomness    Diff. bytes
    FORMMAST.DB        3604470       0.092517            256
   FORMMAST.ECB        3604470       0.279407            256
   FORMMAST.CBC        3604470       1.004016            256
   FORMMAST.ENC        1611579       0.994123            256
 
This shows that the result of encrypting FORMMAST.DB with DES-ECB is
quite non-random (the randomness value is comparable to that of English
text), whereas the other two encryption methods produce high degrees of
randomness.
 
Entropy measure, version 1.1, Copyright 1992 Dolphin Software
Number of matching files = 4      Space size = 256
 
           File           Size        Entropy   Rel. entropy    Diff. bytes
    FORMMAST.DB        3604470       2.567099       0.462943            256
   FORMMAST.ECB        3604470       4.956735       0.893882            256
   FORMMAST.CBC        3604470       5.545144       0.999994            256
   FORMMAST.ENC        1611579       5.545091       0.999984            256
      
What I call "relative entropy" is Shannon's entropy value divided by the
natural log of the size of the alphabet (256 in this case) so as to produce
a value between 0 and 1.  ENTROPY tends to produce quite high values even
for fairly non-random files such as FORMMAST.ECB, and in practice seems less
useful as a measure of randomness in a file than is the RANDMEAS program.
 
----------------------------------------------------------------------------
|Dolphin Software publishes MS-DOS programming tools and data encryption   |
|software which is an alternative to DES.  Information about their products|
|may be obtained by writing to 48 Shattuck Square #147, Berkeley, CA 94704.|
----------------------------------------------------------------------------
 
