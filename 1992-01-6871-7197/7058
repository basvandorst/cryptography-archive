Path: msuinfo!caen!zaphod.mps.ohio-state.edu!wupost!uunet!mcsun!uknet!cam-cl!cam-cl!rja14
From: rja14@cl.cam.ac.uk (Ross Anderson)
Newsgroups: sci.crypt
Subject: Re: Pretty Good (tm) Privacy
Message-ID: <1992Jan20.185934.23663@cl.cam.ac.uk>
Date: 20 Jan 92 18:59:34 GMT
References: <1992Jan19.061618.59212@cs.cmu.edu> <1992Jan19.233024.18884rcain@netcom.COM>
Sender: news@cl.cam.ac.uk (The news facility)
Reply-To: rja14@cl.cam.ac.uk (Ross Anderson)
Organization: U of Cambridge Computer Lab, UK
Lines: 56

It isn't the public key concept that RSA invented but a particular
way to do it which is for some purposes still the most obvious way. There
are a number of recent publications which indicate possible
replacements, especially a paper by Maurer and Yacobi in Eurocrypt 91,
but I don't know if any of these are the subject of US patent applications.

There are however a number of partial replacements.

If you don't mind exchanging three messages with the person you want
to communicate with (A to B, B to A, then A back to B) then there are
a number of ways to set up a secure session.

Imagine a dispatch box that you want to send to someone else via a
courier whom you know to be hostile (eg the old Soviet postal system).
You can create a secure communication channel as follows. Put a padlock 
on the box and send it to the addressee. He in turn puts on his 
padlock and returns it to you. You remove yours and send it back to him,
whereupon he removes his and can finally get at the contents.

The mathematical equivalent involves using a one-way function which is
also a homomorphism of some kind. Eg pick a point P on an elliptic curve
on which both parties agree, the A picks a secret number a and B picks b.
A sends aP to B, B sends bP to A, and both can form the value abP, which
no outsider can deduce. You then use abP as a conventional crypto key.

You can also get around the RSA patent if you are happy to get authentication
only and are not concerned with secrecy. In that case there are a number of
combinatorial schemes which will do the trick.

On the political side, the US Department of Commerce goes to some lengths
to hinder the export of US source crypto hardware and software. It is also 
the case that only the USA, as far as I am aware, allows you to patent an 
algorithm. Thus RSA Inc's patent on the use of discrete exponentiation, 
and IBM's patents on DES, are of no effect in Europe, at least as far as 
software implementations are concerned.

Much of the problem discussed in the last dozen or so articles would go away
if people used European designed crypto algorithms rather than US products
like RSA and DES. Governments without their own crypto capability tend to buy
boxes from suppliers in places like Switzerland, and a truly international 
software encryption standard would probably have to be European in source.

The UK National Physical Laboratory (NPL) produced one algorithm, the
Message Authentication Algorithm, which it has distributed worldwide 
(ISO 8731/2). This generates a four byte digital signature on a string, 
given an eight byte key. They will happily send you a document with c 
source code.

A similar standard public domain algorithm, optimised for encryption rather
than authentication, would be a step in the right direction. I would be 
especially interested to hear from anyone who might like to collaborate
on such algorithms for release as user supported software.

Ross Anderson
Cambridge University Computer laboratory
+44.223.334676
