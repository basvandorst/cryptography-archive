Path: msuinfo!caen!uwm.edu!linac!att!ucbvax!virtualnews.nyu.edu!brnstnd
From: brnstnd@nyu.edu (Dan Bernstein)
Newsgroups: sci.crypt
Subject: Re: Pretty Good (tm) Privacy
Message-ID: <7428.Jan2020.28.5792@virtualnews.nyu.edu>
Date: 20 Jan 92 20:28:57 GMT
References: <1992Jan19.061618.59212@cs.cmu.edu> <1992Jan19.233024.18884rcain@netcom.COM> <1992Jan20.005818.24626nagle@netcom.COM>
Organization: IR
Lines: 49

In article <1992Jan20.005818.24626nagle@netcom.COM> nagle@netcom.COM (John Nagle) writes:
> rcain@netcom.COM (Robert Cain) writes:
> >Why
> >is it so damn difficult to deveop (sic) other functions with the desired
> >properties?
>       The last several attempts to do so have resulted in cypher systems
> that were broken.

Well, no. The Goppa-McEliece public-key system hasn't been broken.
Several techniques based on discrete logs haven't been broken, despite
the exaggerations you might hear from Jim Bidzos. (A general rule of
thumb is that it's much more difficult to solve the discrete log problem
with 2n bits than it is to factor a typical n-bit number.)

> The theory of lower bounds is not well enough
> advanced that you can prove that a problem is hard.

The theory of lower bounds in the analysis of algorithms isn't just
``not well enough advanced.'' It's practically nonexistent.

>       So the best we can do today is to base a system on a problem
> that many good mathematicians have spent years working on without
> finding a good solution.  Factoring of numbers has been worked on
> for a long time by many people, so there's some feeling for how
> hard the problem is.  

I don't agree with this at all. Before about 1970, factoring was in what
Hendrik Lenstra calls ``the dark ages.'' Then the continued fraction
method came along, followed by many improved methods, such as the
quadratic sieve, the multiple-polynomial quadratic sieve, and the
elliptic curve method. They all ran in heuristic time exp(c log^{1/2}n
log^{1/2}log n}, where n is the number being factored, and c is a
constant which rapidly approached 1 as new methods were discovered. Many
people conjectured that exp(log^{1/2}n log^{1/2}log n} is the best
possible probabilistic run time for factoring a general integer n---but
recent developments of the ``number field sieve'' have put that bound to
rest for good.

Given this pace of development, would you be surprised if in ten years
you could factor today's RSA keys on your workstation?

Another point to keep in mind is that in the years after we escaped the
dark ages, the discrete log problem has received similar amounts of
attention to factoring, and many of the same techniques have been
applied to both problems. I don't think anyone who knows the field will
claim that the discrete log problem is so much newer than factoring that
it's probably going to be solved by a simple ``trick.''

---Dan
