Xref: msuinfo sci.crypt:7050 alt.security:4804
Newsgroups: sci.crypt,alt.security
Path: msuinfo!caen!sdd.hp.com!usc!rpi!news-server.csri.toronto.edu!torsqnt!lethe!compus!cccan!marekp
From: marekp@cccan.uucp (Marek Pawlowski)
Subject: Revised paper on Brute-Force cracking
Message-ID: <1992Jan17.221702.11400@cccan.uucp>
Followup-To: marekp@cccan.uucp
Summary: Making it faster
Sender: marekp@cccan.uucp (Marek Pawlowski)
Organization: CCCAN
Date: Fri, 17 Jan 92 22:17:02 GMT

I had no idea that the demand for this kind of information is so great!
I am posting the paper by popular demand.










		 REDUCING WORK LOAD IN BRUTE FORCE CRACKING
			  Friday, January 17th, 1992
			Copyright 1992 Marek Pawlowski

				marekp@cerf.net








	Distribute at will.  Copyright notice must be intact.  Contents
	must remain unmodified.









				     NOTE

	   Brute force cracking is defined as attempting to determine 
	the real plaintext of encrypted data, by encrypting possible
	plaintexts, and comparing the result to the original encrypted
	data.

	   This method of password cracking is becoming quickly obsoleted
	with faster systems, shadowed password files, and passwords
	more carefully chosen by the user.  However, this is not always
	the case with all people.

	   This document was written for those System Administrators who
	wish to improve system security by attempting to guess their user's
	passwords, and changing the guessed ones before an intruder might
	come about the password himself.  This process usually takes a
	very long time, and hopefully this will reduce the strain on the
	entire task.


		   Method one:  WORD FREQUENCY ANALYSIS


	   The first method in reducing the amount of work needed
	in attacking encrypted passwords may be considered somewhat
	involved, but is easy automated.

	   It bases itself on the assumption that a user will feel
	uneasy about using his/her password in any form of writing.
	Be it taking the form of a private message, or Usenet posting,
	chances are that the unencrypted password will not be
	included.

	   You may reduce the number of dictionary searches that
	must be performed, by excluding all words that have been
	publicly stated by the individual.

	   Dedicate a file to collect all writing that the user has
	publicly posted.  This file should then be broken down in
	to words, and have all duplicate ones removed (using a
	utility such as "uniq").  This file may then be compared
	to a dictionary file (/usr/dict/words, on most systems), and
	all duplicate occurrences in both the dictionary file, and
	the user generated one will be tested last for possible
	plaintext attack.

	   Creating this list is easily accomplished by doing
	something similar to:

	cat filename | tr ' ' '\012' | sort | uniq > outfile

	   Some System Administrators might feel that private mail
	is a good source of writing samples.  However, the author of
	this text discourages such actions for fear of creating more
	security holes, and intruding on the privacy that the users
	should be entitled to.

	   Tests on this method yielded an average of 5000 different
	words per user.  Comparing this number to the average of some
	234,936 words in the local dictionary, this only accounts for
	%2.1 of our /usr/dict/words file, however, 5000 guesses are
	definitely worth avoiding.



		    Method two:  NOUNS vs. VERBS


	   Running tests on guessed passwords on our local machine,
 	it was revealed that 97.3% of all successfully guessed
	passwords were nouns were nouns (364 out of 374 guessed
	passwords led to this estimate).

	   Assuming this is the case in the majority of passwords,
	one may drastically reduce the amount of guesses needed
	to be calculated by testing all nouns first.

	   Other words which may be put off for testing are
	adjectives, prepositions, and other such "non-noun/verb"
	words.


			      FOLLOW UP


	   If no successful cracks have been made using only
	nouns, and words which do not exist, one must fall back
	on all the other possibilities.  If no password has yet
	been guessed after the entire dictionary (and information
	help in /etc/passwd) has been exhausted, it is safe to
	assume that the password is secure.


		WHAT TO DO WHEN A PASSWORD HAS BEEN GUESSED


	   Though there are some people who believe otherwise,
	your best bet is to disable the account if you have guessed
	it's password.  Contact the individual, notify them of the
	problem, and give them a lesson on chosing passwords.

	   There are quite a few texts available, which suggest
	how one should select a personal password, but the main
	point is to chose a password that:

		- Is not in any dictionary (English, French,
		  German, etc).
		- Is long.  (8 characters long is ideal).
		- Contains at least one number, and one special
		  character (!, @, #, $, %, ^, ...etc) in it.

	   People should be educated on the drastic results of
	a guessed password.  Many woes and aches will result from
	an unwanted security breach.

	   Suggested reading material would be Clifford Stoll's
	"The Cuckoo's Egg".  An exciting and informative view
	on Cliff's encounter with a German intruder (Markus Hess).
	I think Cliff would suggest watching the intruder for a
	while instead of shutting the account down, but the choice
	is yours.


			     CLOSING COMMENTS


	   I would like to close this document of mine by stressing
	how important a well chosen password is, and how one should
	take great precautions to ensure his/her system's security.

	   The author may be contacted at the following Email
	addresses:

	marekp@cerf.net, marekp@cccan.uucp, marekp@pnet91.cts.com.

	   Feedback and suggestions are encouraged.  Any research
	that you have conducted in this field would be greatly
	appreciated if shared with myself, and the world.

-- 
Marek Pawlowski - marekp@cerf.net, marekp@cccan.uucp, marekp@pnet91.cts.com
Smoke a friend today!
