Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!spool.mu.edu!howland.reston.ans.net!zaphod.mps.ohio-state.edu!ncar!csn!boulder!tigger!bear
From: bear@tigger.cs.Colorado.EDU (Bear Giles)
Subject: Re: Building Strong Crypto into DOS 6
Message-ID: <1993Apr13.040201.4635@colorado.edu>
Sender: news@colorado.edu (The Daily Planet)
Nntp-Posting-Host: tigger.cs.colorado.edu
Organization: National Oceanic & Atmospheric Adminstration / Boulder Labs
References: <bontchev.734534627@fbihh> <1993Apr12.161742.4643@fsl.noaa.gov> <1993Apr13.013803.16829@cs.aukuni.ac.nz>
Date: Tue, 13 Apr 1993 04:02:01 GMT
Lines: 57

Eric Maffei
Microsoft Systems Journal
C/C++ Q&A
ericm@microsoft.com

I have several questions regarding data security under DOS 6.0 and/or
SMARTDRV.  I'm not sure if these should be addressed in the C/C++ column
or the MS-DOS column, but they raise serious concerns that should be
answered somewhere.

1) Many applications require that data written to the disk actually
   be written -- they cannot count on the user entering a command to
   flush the disk cache, or even for the system to remain up another
   few seconds.

   How can an application ensure that data written to disk is actually
   written to disk, other than 'system ("smartdrv /c");'  (This would
   work, but would destroy performance).

2) Applications maintaining confidential information, e.g., medical
   records in a doctor's office, should explicitly overwrite data when
   it is deleted.  This ensures it can never be pulled into another
   person's records through a programming or system error.
   
   (It should also be encrypted while stored, but that's another issue).

   However, with data compression (DBLSPACE.BIN under DOS 6.0) the
   overwrite data will probably not require the same space as the original
   data.  This means it is possible for old records to remain on the
   disk.

   Reading compressed data is not easy, but it's far from impossible.
   In fact, after reading the CLEAR code the rest of the file is
   directly readable.

   How can an application ensure that _compressed_ data is completely
   overwritten?  If nothing else, it would probably be acceptable if
   the new file were written to a temporary file, the old file completely
   overwritten, then the temporary file renamed.

Ideally, both of these issues can be addressed in a uniform manner by
extensions to the operating system and run-time library.  (E.g., MS-DOS
defines a standard interrupt call that will mark a file non-cached, or
a standard file over-write command similar to unlink(2) in Unix or 
int 21h/function 41h in DOS.  That is, an overwrite() command would
overwrite all disk space allocated to a file with a specified symbol,
regardless of compression, caching, etc).


Bear Giles
bear@cs.colorado.edu
[Graduate Student, Computer Science, Univerity of Colorado at Boulder]

CC:  sci.crypt
-- 
Bear Giles
bear@fsl.noaa.gov/cs.colorado.edu
