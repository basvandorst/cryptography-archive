Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!zaphod.mps.ohio-state.edu!howland.reston.ans.net!darwin.sura.net!sgiblab!sgigate!sgi!wdl1!phobos!koontzd
From: koontzd@phobos.lrmsc.loral.com (David Koontz )
Subject: Re: Clipper Chip Questions
Message-ID: <1993Apr28.225653.23102@wdl.loral.com>
Sender: news@wdl.loral.com
Organization: Loral Rolm Computer Systems  
References: <allynC67LqA.97t@netcom.com> <1rmqke$7or@geraldo.cc.utexas.edu>
Date: Wed, 28 Apr 1993 22:56:53 GMT
Lines: 134

>I have an equally ignorant addendum.  Are the physics of chip layout
>such that there is a vlsi analog to the computational complexity that
>ensures that software encryption techniques are "unbreakable?"  That
>is, could someone wishing to keep secret the hardware design simply
>use enough gates/real estate in a complex manner to prevent a reverse
>engineer from succeeding?

Using a byte wide interface and a throughput of 12M bits/sec (ECB, re:
Denning)  gives 1.5M bytes/sec.  This translates to 187.5K blocks/sec 
(1.5M Bytes/ 8 Bytes per block).

With an 80 bit key, and 32 rounds, the key scheduler would require 40
clocks (DES requires 28 clocks, with 16 rounds, 28 is half the key size.
The input key block of 56 bits is divided into two 28 bit chunks operated
as a 28 bit shift register, shifted right or left depending on the encryption
mode encode/decode. The model for the key register is using 74194s.).


	 8 clocks block input
	40 clocks key schedule and encryption round 
	 8 clocks block output
       ---
	56  clocks per block

That gives a clock rate of 10.5 MHz to get 2M Bytes/sec.

Using double buffered input and output registers yields:

	 1 clock input block (can't load register from two sources)
	40 clocks key schedule and encryption round
         0 clocks block output
       ---
	41 clocks

That is a clock rate of of 7.5  MHz.  Call it 16 MHz to support DUPLEX.

The amount of hardware is speculative and based on DES.
=======================================================

Data Registers
--------------

This is with 8 octal register with parallel and serial load, and serial
and parallel output, single direction.  For fewer clocks data registers
would use a separate octal serial in parallel out input register, an octal
register, and an octal parallel in, serial out, output register.

Separate send and receive data registers

Multiplexing between send and receive registers

estimate 2500 gate equivalents 

MODE Support
------------

Support 4 DES modes of operation

64 bit XOR, data muxes

estimate 520 gate equivalents

EXOR gates Pre S
----------------

72  XOR gates (DES has 48)

estimate 288 gate equivalents

S BOXES
-------

512 X 4 (X 8)

estimate 25K gates

EXOR GATES Post S
-----------------

32 XOR gates (DES has 32)

estimate 256 gate equivalents

Key Registers (K)
----------------

10 octal serial input parallel output shift right/left shift registers

separate send and receive session keys, multiplexing

estimate 2300 gate equivalents

Key Registers (U,F)
-------------------

estimate 3000 gate equivalents (programmable EPROM?)

K-U-F Multiplexer
-----------------

40 bits times 6 gates (send and receive)

estimate 650 gate equivalents

Encryption control
------------------

input byte counter, output byte counter, key schedule counter,
key scheduler, key parity, etc.

estimate 600 gate equivalents

Protocol Control
----------------

Law Enforcement block output, startup sequencing, send and receive control

estimate 3000 gate equivalents


Call it 40K gates.

The S Box ROMs (or equivalent) would stand out like a sore thumb, and
take say, 40 percent of the area.

The problem of reverse engineering is not insurmountable, as the task 
would be in two parts: ROMs, and all else. 

CAPSTONE sounds a LOT bigger (and more expensive).





