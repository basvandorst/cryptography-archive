Newsgroups: sci.crypt,alt.privacy.clipper,comp.org.eff.talk
Path: msuinfo!agate!howland.reston.ans.net!darwin.sura.net!bogus.sura.net!news-feed-1.peachnet.edu!umn.edu!csus.edu!netcom.com!cliftonr
From: cliftonr@netcom.com (Pope Clifton)
Subject: Clipper: Two additional possible problems
Message-ID: <cliftonrC69tvt.4AL@netcom.com>
Followup-To: sci.crypt,alt.privacy.clipper
Organization: Inst. for Epistemological Pathology
X-Newsreader: TIN [version 1.1 PL9]
Date: Fri, 30 Apr 1993 00:40:41 GMT
Lines: 85
Xref: msuinfo sci.crypt:16081 alt.privacy.clipper:268 comp.org.eff.talk:17457

I see two problems with the Clipper security system as proposed, that I
haven't yet seen commented on.  One presupposes the corruptibility or
collusion of one of the escrow agencies with the NSA or the authors of the
software which performs the key insertion.  The other seems a serious
problem, even supposing the total honesty and incorruptibility of the NSA
and both escrow agencies.  I'll address this one first.

As I understand it, currently there is no "end-to-end" secret or
public-key/private-key type scheme involved in the Clipper proposal.  If I
want to talk to someone, I don't need to have previously exchanged keys with
him, I just call him up, and the phones establish a session key for us
using a zero-knowledge algorithm or something of the kind.  (If I've
misunderstood this part, it probably invalidates the rest of this notion.)

This lends itself to spoofing. Let's say I want to do an illegal wiretap on
someone, and can't get an court order or FBI help. (Perhaps I'm a small-town
police chief, and my friend the mayor is facing stiff opposition in the
election, so I want to wiretap his opponent.) Let's also assume that I've
got a friend in the local phone office, or know how to "encourage" their
cooperation.  

I go buy a pair of Clipper phones to go on a pair of phone lines in a back
room somewhere, and have the digital switch programmed to redirect his calls
to one of my two lines instead of to his, whenever he receives a call.  The
two phones are wired back-to-back in the clear. On a ring being detected,
one phone immediately speed-dials his (reassigned) number, while the other
waits; if his phone answers, the pair of phones goes off hook.  While his
caller's phone is synching with my phone, my phone is synching with his
phone.  When the conversation starts, both sides are encrypting, but I can
record everything in the clear between my pair of phones.  There would be a
few technical details of timing, etc. to work out.  Still I think anyone
with access to the programming of the local phone switch could use this
general approach to totally defeat the stated purpose of the Clipper phones. 
Anyone see any problem with this scheme, other than to assume that all
public officials and phone company employees are totally incorruptible?

The second possibility is a little more paranoid and has to do with another
weakness in the key generation process.  An early report on the Clipper had
the keys being split into 2 40-bit halves for escrow, and it was immediately
pointed out that anyone with one half would only need to brute-force search
10^12 = 1 trillion keys to find the other half.  Later reports changed it to
2 80-bit strings which are XOR'd together, which sounded better.  Assume for
the moment that the key generation process is really OK.  (This whole thing
about two agents manually inputting separate "random" strings bothers me,
but it's actually not too far from what banks do now in managing generation
of master keys for the DES encryption used in debit card PIN pads and ATMs.)
The software generates its "random" unit key for each unit, and now needs to
split them into two parts, one for each party.

How do you know that each of the two key parts is getting the equivalent of
80 bits of entropy?  If you XOR the 80-bit key with an 80-bit random string,
and give the result to one party, and the random string to another, then
both have 80-bits of entropy, and neither knows anything without either
taking the other's key or exhaustively searching the whole space of 10^24
keys.  On the other hand, suppose you take a string made up of 40 random
bits, and 40 bits taken from some two-way hash applied to the key, XOR it
with the key and give the results to one party, and this string to the
other. In that case, the party who gets the latter string has only 40-bits
of entropy to deal with, and could do a quick search of 10^12 values to find
the complete key.  (The first party also has only 40-bits of entropy in
theory, but in this scenario would have a much harder computational problem
to untangle the key, the random data, and the hash of the key.) 

This particular case could probably be recognized by distribution analysis
of the keys and the escrow keys.  Still, it would appear that you could
design a method of splitting the 80-bit key into two 80-bit escrow keys,
such that one of the keys contained sufficient information to narrow the key
field to a practical range, and such that this fact was not readily
detectable by examining the resulting output.  In this case, one of the
escrow agencies, knowing the algorithm, would be able to eavesdrop with
impunity.

Comments?
  -- Clifton

--
cliftonr@netcom.com     Home: +1 808 521 9073  Work: +1 808 625 3234
Clifton Royston, Pope of the Church of the Subgenius in Paradise
"Well now I don't know about that.  I'm a skeptic." -- John_-_Winston


--
cliftonr@netcom.com     Home: +1 808 521 9073  Work: +1 808 625 3234
Clifton Royston, Pope of the Church of the Subgenius in Paradise
"Well now I don't know about that.  I'm a skeptic." -- John_-_Winston
