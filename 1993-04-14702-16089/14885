Path: msuinfo!uwm.edu!wupost!uunet!enterpoop.mit.edu!eru.mt.luth.se!kth.se!dront.nada.kth.se!cwe
From: cwe@dront.nada.kth.se (Christian Wettergren)
Newsgroups: sci.crypt
Subject: Re: Seeding PGP 2.2 to your BBS
Message-ID: <1993Apr7.141924.6828@kth.se>
Date: 7 Apr 93 14:19:24 GMT
References: <1993Apr2.114300.2738@vax1.utulsa.edu> <1993Apr3.003551.25193@wixer.cactus.org> 	<1993Apr6.111218.2664@vixvax.mgi.com> <WARLORD.93Apr7073637@toxicwaste.mit.edu>
Sender: usenet@kth.se (Usenet)
Organization: Royal Institute of Technology, Stockholm, Sweden
Lines: 99
Nntp-Posting-Host: dront.nada.kth.se

cepek@vixvax.mgi.com writes:
> TOPIC REFOCUS ATTEMPT...  [...]
> What methods can be used to ensure that the recipient of a 
> PGP distribution can be confident that what they have 
> is the same as was generated by Phil, Branko, and friends?

I think you have to have some kind of out-of-band verification of
the source. That is difficult for those who does not have any
internet access, of course.

If we assume internet access, then thing becomes much simpler, I
think. 

One way is of course to obtain multiple sources from different 
sites. Unfortunately, not many sites are willing to offer PGP
officially, as we all know. 

I have another idea instead. It should be considerably less
controversial for a site to offer a Correct-PGP Predicate. I this
way the site does not break any law (officially), and does not
even have to have the source itself.

Description:

1/ Hack up a simple C-program that takes a seed and outputs
   a bytestream. For example:

    VerfPGP:
       input seed and filename
       open file
       setpseudorandseed(seed)
       printf("VerfPGP Ver 1.0 Seed=%d, filename=%s\n", seed, filename);
       while (!eof(file)) {
         len=pseudorand();
         buf=read(len, file)
         b=crc(buf)
         printf(b)
       }
       close(file)

2/ Many sites sets up a daemon listening to the port 4711 (?)
   and accepts input from the above program. It then determines
   if the bytestream is correct.

   Correctness can be determined in many ways:
   * By running the above program on the site's own file
   * By having a Message Digest for the stream in question.
     (Therefore I suggest that the seed in limited to about
      64K different values)
   * ...

   The central point is that you don't have to be in possesion
   of the source to answer the question. In this way sites
   don't run the risk of being sued for offering the service.


3/ A user who gets PGP from his local underground BBS wants to 
   verify the source. He then downloads VerfPGP from alt.sources
   for example. He reads about sites offering the Predicate
   in this newsgroup. He tosses a coin and determine a random
   seed. He asks a number of Predicate Sites about the stream
   generated, and they answers Yes! (hopefully)

   Observe that *no* regulated traffic (in import/export terms)
   have been sent. The Predicate Sites have not exported the
   source (would need a huge number of rounds to be able to
   backward calculate the source :-) ). The user has not exported
   the source, since only a small distorted part of the total
   source is sent. There is not even any evidence that the user 
   is in possesion of the code.

   Why not use MD5? Well, then one would have to verify that
   source too. The code in VerfPGP is simple, understandable
   by many, and even possible to verify through textbooks if
   one wants too. (And of course it's a quick-and-dirty hack.)


I don't mean that this would PROVE that the source is correct,
it just makes it more probable. (Do anyone see any simple 
cryptological way of circumventing this?) I know that CRC is
invertible, but since the user pick's a random seed, the possible
unnoticable changes that could be done to PGP should be small.
(One can think of this as some kind of guerilla verification
service! ;-)  )

In some time we should be able to make it certain that there
only exists one "strand" of PGP in the internet.

Unfortunately, I have not have time to hack this up and release
the source. Perhaps we should have a discussion about it first?

Regards,
	Christian Wettergren, cwe@nada.kth.se

-- 
--------------------------------------------------------------------------
Christian Wettergren, cwe@nada.kth.se, 08 - 641 14 02
Hi! I am a mutating signature viruSTOMP!eacheSTOMP!e too!
STOMP! STOMP! STOMP! SigVirCatcher was here!
