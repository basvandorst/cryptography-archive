Newsgroups: sci.crypt,alt.security.pgp
Path: msuinfo!uwm.edu!zaphod.mps.ohio-state.edu!sol.ctr.columbia.edu!ira.uka.de!rz.uni-karlsruhe.de!stepsun.uni-kl.de!uklirb!posthorn!vier!neuhaus
From: neuhaus@vier.informatik.uni-kl.de (Stephan Neuhaus (HiWi Mattern))
Subject: Re: PGP 2.2: general comments
Message-ID: <neuhaus.734008119@vier>
Sender: news@posthorn.informatik.uni-kl.de (News system account)
Nntp-Posting-Host: vier.informatik.uni-kl.de
Organization: University of Kaiserslautern, Germany
References: <gradyC4xD9p.3oK@netcom.com>
Date: Mon, 5 Apr 1993 11:08:39 GMT
Lines: 142
Xref: msuinfo sci.crypt:14837 alt.security.pgp:2382

grady@netcom.com (1016/2EF221) writes:

>So regardless of the outcome of legal, support, standards and 
>interoperability issues, the PGP experiment has already been a 
>tremendous success in letting us common folk learn about 
>effective and convenient public key encryption.

From what I read in your posting, you are hardly ``common folk''.
(This is intended as a compliment.)

>1.  PGP RSA bit lengths are too short.

Not too short maybe, but the maximum length of the moduli should be
increased.  At the moment it is 1100 or so bits, I think.

>Taking all these factors into consideration, I would suggest that 
>the *minimum* size of the RSA modulus available for PGP is 1024 
>bits with a minimum ceiling of 2048 bits (or even more).

If the multiple-precision integer library is well designed, there
should not be a limit on the modulus length at all.  (For example, I
have long tried to lay my hands on code for the Schoenhage-Strassen
integer multiplication code, which is effective only for integers of
at least a few thousand bits.  No luck so far, but who knows?)

>And because factoring security is a moving target with increases 
>in computer speed and factoring methods,

Please note that as long as it is much harder to factor a RSA modulus
than it is to generate it, the increase in computer speed alone will
keep key lengths and modulus factoring in lock-step, i.e., people will
simply start using longer moduli and still be safe.

>rather than the static (and rather melodramatic) labels of
>"commercial grade," military grade",

True.

>and so on, the labels ought to be specific years that 
>intelligent estimates (such as Ron Rivest's) that that size 
>modulus will be factored by a determined opponent.

That is impossible, because that would imply that PGP knows how long
it takes to factor a modulus.  It doesn't because it can't.  PGP can
only take into account the current state of the art, and that will
change over time.  Additionally, predicting the future has driven many
a stock broker into bankruptcy, and I see no reason why the situation
should be different for factoring or breaking RSA.

>While this may seem too conservative, consider that many public 
>moduli kept by a certifying authority may be attacked in 
>parallel, similar to cracking a passwd file NOT using a salt.

How?  As far as I can see, factoring two moduli should be twice as
hard as factoring one.  I can't see how attacking moduli in parallel
would help in breaking them.  A modulus is *not* a password.  It is
public anyway, so if an attacker could benefit from attacking RSA
moduli in parallel, there would be something seriously wrong with RSA.

>2.  The hash function generates too short a digest. [...]

>If PGP increases the minimum recommended modulus size but does 
>not simultaneously increase the hash digest size, then attacks 
>such as "guessed plaintext," where guesses are made as to the 
>IDEA key being encrypted under RSA are made compared to a trial 
>RSA encryption, will become more and more attractive.

I don't see how.  Could you elaborate?  As far as I know, the session
key generation encryption has nothing to do with message digests,
except that a MD5 hash is used as a part of initializing the strong
pseudorandom generator.  (Other parts include keystroke timings and
the time of day.)

>In any event, the 128 bit IDEA key to be encrypted under RSA ought 
>to at the very least have a 64 or 128 bit random salt [...] appended
>before RSA encryption [...]

That is already done.

>IDEA, while attractive in speed, size and theory, has no such 
>group-free proof and has not long withstood the public scrutiny 
>that DES has endured.

While there is no proof, the fact that one of the design principles of
IDEA was to mix operations from nonisomorphic groups is a strong
indicator that IDEA is probably not a group.  Also, IDEA uses a
128-bit key from the start, so I do not see why DES with two keys (112
bits effective key) should be better than IDEA with one (128 bits
effective key).  The group property is important only if you want to
chain encryptions to increase the key space.

As for enduring public scrutiny, if nobody uses IDEA because it is
``too young'', we will never know whether it is secure, because nobody
will bother with cryptanalysis.

>4.  Add a "enter random seed" option in addition to keystroke 
>timing.  It is suspected that the timing biases in keystroke 
>timing is far more pronounced than rolls of an ordinary die,

Uh, that depends on the die.  I have made some tests with some dice,
and have found several to be far from random.  (This has been reported
on sci.crypt as well.) Tossing long-used coins is probably better.  Do
not use newly-minted coins because the weights on the front and back
sides are too different.  Even better, use a Galton board with only
two boxes at the bottom, like this:


			*
		       * *
		      * * *
		     * * * *
		    * * * * *
		   |    |    |
		   +----+----+

The larger the number of rows, the less sensitive the board should be
to the characteristics of the nails (or whatever you use) and balls.
Exact placement of the nails is still essential.

But I agree that a manual random number entry should be supported.

On the other hand, even if the timings were biased, this would
probably not be a problem, at least not for session key generation.
The output of the session key generation routine appears good even
without the timing information.  The timings are used to further
obscure the generated key (via exclusive or), so the generated key is
at least as random as it would be without the keystroke timings
(because the timings are independent of the other parts of session key
generation).

>5. Offer a "use strong primes" option in RSA key generation.

This is in the code, although it is commented out at the moment.

Ah, I can see the signal-to-noise ration rise... :-)

Have fun.

-- 
Stephan <neuhaus@informatik.uni-kl.de>
sig closed for inventory.  Please leave your pickaxe outside.
PGP 2.2 public key available on request.  Note the expiration date.
