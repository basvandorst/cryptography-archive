Path: msuinfo!uwm.edu!zaphod.mps.ohio-state.edu!howland.reston.ans.net!noc.near.net!uunet!pipex!marble.uknet.ac.uk!uknet!comlab.ox.ac.uk!pcl
From: pcl@ox.ac.uk (Paul C Leyland)
Newsgroups: sci.crypt
Subject: Re: Improving RSA
Message-ID: <PCL.93Mar30123638@rhodium.ox.ac.uk>
Date: 30 Mar 93 11:36:38 GMT
References: <1993Mar30.002813.26347@ucsu.Colorado.EDU> <C4oHKo.1zq@telebit.com>
Organization: Oxford University Computing Services, 13 Banbury Rd Oxford OX2
	6NN
Lines: 49
In-reply-to: phr@telebit.com's message of 30 Mar 93 01:31:36 GMT

In article <C4oHKo.1zq@telebit.com> phr@telebit.com (Paul Rubin) writes:

   cuffell@spot.Colorado.EDU (CUFFELL TIMOTHY MICH) writes:

   >Is there a function, that, given an arbritrary number n, will produce an
   >unique probably prime P(n)?  I realize that this is very similar to a
    ^^^^^^

Ambiguity.  Do you require that each n generate a *different* prime?


   >function that produces all primes, which is hard, so I will make some 
   >qualifications.  P(n) does not have to prime all primes, or even guarantee
   >anything more than probable primes.  P(n) can occasionally fail to produce
   >a unique probable prime.

	   bignum P (bignum n) {
		   while (!is_probable_prime (n))
			   n++;
		   return n;
	   }

   Of course this routine can be optimized a lot :-)

And it fails the uniqueness requirement I stated above.  For
instance, P(14) = P(15) = P(16) = P(17) = 17, for a half-way
decent implementation of is_probable_prime (n).

How about the following, desperately inefficient function:

	bignum P (bignum n) {
	   n = factorial (n) + 1
	   while (!is_probable_prime (n))
	      n++;
	   return n;
	   }


Note that for n > 1, there is at least one prime between n! + 1 and
(n+1)!


Paul
--
Paul Leyland <pcl@oxford.ac.uk>          | Hanging on in quiet desperation is
Oxford University Computing Service      |     the English way.
13 Banbury Road, Oxford, OX2 6NN, UK     | The time is come, the song is over.
Tel: +44-865-273200  Fax: +44-865-273275 | Thought I'd something more to say.
Finger pcl@black.ox.ac.uk for PGP key    |
