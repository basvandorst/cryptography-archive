Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!tis.com!mjr
From: mjr@tis.com (Marcus J Ranum)
Newsgroups: sci.crypt
Subject: Re: one-time pad security
Date: 30 Apr 1993 03:59:41 GMT
Organization: Trusted Information Systems, Inc.
Lines: 112
Message-ID: <1rq87d$rj@sol.TIS.COM>
References: <93119.152622JDG111@psuvm.psu.edu>
NNTP-Posting-Host: sol.tis.com

>1) Is the one-time pad as secure/more secure/less secure as DES or RSA?
>(Provided, of course, the pad is kept secret, etc) How does it stand up
>mathematically to attacks?

	The one-time pad is the only(?) theoretically and practically
100% secure cryptosystem, if it is used correctly.

	Using it correctly is the painful part.

	The proof that a one-time pad is perfectly secure is as
follows:
	Since the data is random, and each bit has absolutely no correlation
with the previous bit, it's impossible to guess a pattern. You can only
attempt to decrypt a bit at a time. ;) If you attempt to assume all the
solutions, you will wind up getting every possible combination of bits
for each ciperhtext.

	I.e.: "EPQ" if Xored against one pad, yields, "CAT", but with
another "DOG" and a third, "EEL", etc.

	Since it's random, there is no context that lets me know which
is right. (So if I'm the FBI, I'll decrypt it as "GUN" and throw you
in jail).

>2) Does the algorithm used in producing ciphertext make any security
>difference with a O-T-P?

	I believe that to do it right nowadays Xoring the bits is the
easiest way. I think the original inventor of the pad used a simple
character addition. Think of it as ROT-random. ;)

>I know a O-T-P is secure only if the pad is used one time.  But, how random
>does this pad have to be, or does it matter if it's at all random, security
>wise?

	Absolutely random or it's worthless! If you use a one-time pad
that was generated by a pseudo-random number generator, if I know what
the seed was that you put into the PRNG and I know the workings of the
PRNG I can decrypt your data easily. Suppose you wrote a program that
did:
	long	foo;

	time(&foo);
	srandom(foo);
	while(1) {
		foo = random();
		write(1,&foo,sizeof(foo));
	}

	and then spewed forth random numbers from that. Well, if I know
the day on which you created your file, I can crack it pretty easily by
just trying the 86400 different seeds that time() would give in a day,
and seeing what I get. Even a slow machine will nail that one in a hurry.
Suppose you decide to get more clever, and use DES cbc mode to generate
a stream of "random" data based on a key. If an attacker can determine
that DES is what you used to generate your pad, "all" he has to do is
guess your DES key and blammo.

	To properly do a one-time pad, you need *RANDOM* data. 100%,
stochastic cosmic line noise. Atomic decay, jittery transistors, or
whatever - but if your attacker can determine *ANY* kind of structure
in your "randomness" then your data will pop right out like a sore
thumb.

	The first time I ever played with one-time pads, I took a
quick hack at an Xorer and Xored a document with /dev/rz0a (my
winchester disk), which had a surprising amount of structure and
I could actually eyeball my original plaintext right out of the
"ciphertext".

>Lastly, is there anything else of great importance I should know when using
>and implementing a one-time-pad system?  I'm doing this more for myself than
>for anything, and will most likely use this on top of DES or RSA encrypted
>files, as a last layer of protection.  I am just wondering how much added
>protection it will give, and if it's secure enough to be used standalone.

	It's 100% secure if you use random data and keep the source pad
physically hidden.

	The biggest problem with one-time pads is the key management
problem. That DAT (or whatever) with your random data on it, is the
key to your document. Since it was random, if you lose it, you can never
ever recover it. The natural tendency is to want to bury the DAT where
nobody can find it, but if you EVER want to decrypt your data you need
it. That means that if someone grabs you and gives you a few hours of
brute-force rubber-hose cryptanalysis and convinces you to hand over
the DAT, you've lost. The very fact that the system is so secure that
the "key" (the DAT) cannot ever be regenerated, means you have to deal
with keeping it around!

	In wartime one-time pads are great. A spy can carry one into
another country on a floppy. His controller back in wherever has a
duplicate of the floppy. He creates a report, Xors it with the floppy
and BURNS the floppy. Now even HE can't decrypt it, ever. All the
rubber hose can accomplish is making him really regret getting caught,
if he's caught. Enter key management. Your spy now needs a STACK of
floppies, because he is going to burn one with each message he
sends. Otherwise it's not secure. I always figured that flash RAM
disks would make a good spy toy. ;)

	Another advantage of one-time pads is the speed. You just
Xor stuff. You can encrypt just about anything at very high speed,
if you have a pair of synchronized DAT drives with the same pad
at each end. Of course when the pad runs out, you have to get the
new one to your spy in utter secrecy and security or you've just
blown the whole game. Imagine the amusement that would ensue if
secret agent X-5's one-time pad was mailed to him via federal
express and intercepted and copied en route. The cryptanalysts
now have an easy 1+Gb worth of easy "code breaking" ahead of them,
breaking the perfect cryptosystem.

mjr.
