Newsgroups: alt.security.pgp,sci.crypt
Path: msuinfo!agate!usenet.ins.cwru.edu!gatech!news-feed-1.peachnet.edu!umn.edu!csus.edu!netcom.com!henderso
From: henderso@netcom.com (Maldoror)
Subject: Re: multiple recepient encryption security?
Message-ID: <hendersoC5IICG.JLA@netcom.com>
Organization: Netcom
References: <1qi7ss$qaa@usenet.INS.CWRU.Edu>
Date: Thu, 15 Apr 1993 06:36:15 GMT
Lines: 40
Xref: msuinfo alt.security.pgp:2503 sci.crypt:15029

In article <1qi7ss$qaa@usenet.INS.CWRU.Edu> cs291@cleveland.Freenet.Edu (Jonathan A. Rochkind) writes:
>
>I know it is possible in the latest versions of PGP to encrypt to multiple
>recipients. That is, several people will all be able to decrypt the message
>with their own private keys. Does this compromise the security of the
>encryptin at all? Does this make it easier to break teh encryption without
>a key? Either by some brute force method, or by some otehr method, I admit
>I am unknowledgable orf cryptoanalysis, but whatever methods are used to
>cryptanalyze a messsage, wen you do not have a key, are they made easier if
>the message in question was encrypted with multiple recipients? If so, then
>is there a significant loss of security if I have only two recipients? How
This is really a good question.

It looks like the answer is no, because the people who implemented 
multiple recipients were clever. The 'random' padding is different for 
each recipient. This is important because if you encrypt exactly the 
same stuff for each recipient and have a large number of recipients 
with a common small public exponent (pgp usually uses e=17) the 
cryptanalyst can often mount a successful attack using the chinese 
remainder theorem. (stuff refers to session key + padding). 

Nevertheless, just for safety, I recommend generating a key with 
a larger than default value of ebits. The performance hit really
is negligible.

e.g.
pgp -kg 1024 17
should generate a key with e >= 65537. 

Of course, there certainly might be (and probably are) attacks that
I'm not aware of. I'd certainly be interested to know, as the
same considerations apply more generally to PEM &c.

(I'm crossposting this reply to sci.crypt. Some folks there might
want to comment).

Mark
-- 
Mark Henderson
henderso@netcom.com, markh@wimsey.bc.ca
