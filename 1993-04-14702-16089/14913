Path: msuinfo!uwm.edu!cs.utexas.edu!not-for-mail
From: boucher@csl.sri.com (Peter K. Boucher)
Newsgroups: sci.crypt
Subject: PRNG and Substitution Table
Date: 8 Apr 1993 18:50:27 -0500
Organization: UTexas Mail-to-News Gateway
Lines: 55
Sender: daemon@cs.utexas.edu
Message-ID: <9304082351.AA00743@assault.csl.sri.com>
NNTP-Posting-Host: cs.utexas.edu

From: boucher@csl.sri.com (Peter K. Boucher)
Newsgroups: sci.crypt
Subject: PRNG and Substitution Table
Distribution: world

How would one go about cryptanalyzing a message encoded
by combining a plain-text byte with the output of a PRNG 
and using the result to select a cipher-text byte from a
substitution table?

For example:

==================== begin C code mode =================

scramble(long key)
{
    int e_sub_table[256]; /* for encryption */
    int d_sub_table[256]; /* for decryption */
    int input;

    srandom(key);
    init_sub_tab(e_sub_table, d_sub_table); /* uses random() to make
					       substitution tables for
					       integers from 0 - 255 */

    while((input = getchar()) != EOF) {
        if((random() & 1023) == 1023) { /* 1 in 1K chance */
            init_sub_tab(e_sub_table, d_sub_table);
        }
        if (ENCRYPT) {
            putchar( e_sub_table[ input ^ (random()&255) ] );
        } else {
            putchar( d_sub_table[ input ] ^ (random()&255) );
        }
    }
}

====================== end C code mode =================

What if you leave out the substitution tables re-initialization?

What if you re-initialize the substitution tables more often?

What if you add cipher-text feedback 
e.g. e_sub_table[ input ^ (random()&255) ^ prev_cipher_byte ] ?

What if you use multiple PRNGs and multiple substitution tables
e.g. estab1[rnd1()^estab2[rnd2()^estab3[rnd3()^estab4[input^cipher_text]]]] ?

-- 
Peter K. Boucher
--
RIPEM public key available upon request.


