Path: msuinfo!agate!howland.reston.ans.net!gatech!udel!news.intercon.com!psinntp!internet!sbi!zeuswtc!pivot!bet
From: bet@sbi.com (Bennett Todd @ Salomon Brothers Inc., NY )
Newsgroups: sci.crypt
Subject: Source of random bits on a Unix workstation
Message-ID: <897@pivot.sbi.com>
Date: 15 Apr 93 09:23:39 GMT
Sender: news@pivot.sbi.com
Lines: 33
Nntp-Posting-Host: sandstorm


I was just forced to face a problem I've been avoiding a while. When you
need some random bits on a workstation, you're at a disadvantage, since a
machine that might just have rebooted just doesn't have that much
unpredictable state to mess with.

This came up because I decided to configure up MIT-MAGIC-COOKIE-1 security
for X11R5. For this to work you need to stick some bits that an intruder
can't guess in a file (readable only by you) which X client applications
read. They pass the bits back to the server when they want to establish a
connection.

The only code I could find in the MIT release that created these cookies was
imbedded in xdm, and when I looked at it, it just used

	srand(time + (pid<<16))

followed by calls to rand() to generate the key. Well, anybody who can use
ps(1) to find out the pid and start time of your server or window manager
can write a quick little program to search backward from that pid and time,
trying to connect, until they hit. No good.

What I settled on was grabbing a bunch of traffic off the network.
Basically, I ran

	etherfind -u -x greater 0|compress

and skipped over 10K of output, then grabbed my bits. As best I can tell,
these are bits that can be expected to be reasonably uniformly distributed,
and quite unguessable by an intruder.

-Bennett
bet@sbi.com
