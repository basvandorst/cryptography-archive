Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!blanket.mitre.org!linus.mitre.org!linus!mbunix!eachus
From: eachus@spectre.mitre.org (Robert I. Eachus)
Newsgroups: sci.crypt
Subject: Re: S box questions
Date: 6 Apr 94 11:30:09
Organization: The Mitre Corp., Bedford, MA.
Lines: 28
Message-ID: <EACHUS.94Apr6113009@spectre.mitre.org>
References: <CnLBIq.G0z@rahul.net> <Cnp0uL.6sz@chinet.chinet.com>
	<WCS.94Apr6042927@anchor.ATT.COM>
NNTP-Posting-Host: spectre.mitre.org
In-reply-to: wcs@anchor.ho.att.com's message of Wed, 6 Apr 1994 09:29:27 GMT

In article <WCS.94Apr6042927@anchor.ATT.COM> wcs@anchor.ho.att.com (Bill Stewart +1-510-484-6204) writes:

  > If, by "good", you mean "cryptographically strong", then it may be ok.
  > However, if you only mean "one of the usual random number generators
  > found in computer simulation textbooks", then, no.  There are some
  > good papers out about how to break linear congruential generators.
  > Also, if you have known plaintext at the beginning of a message,
  > you can XOR it to get the PRNG output, predict the rest of the stream,
  > and crack it all, even with strong random number generators,
  > as long as they're of the form  X(i+1) = F(X(i)) for known F,
  > since you're finding out X(i) for some small value of i.

   If you want to use a cryptographically secure PRNG for this type of
coding, the correct thing to do is not to use all of any X(i) in
coding the message.  For example, with Blum, Blum, and Shub, if you
use only log2(N) bits from each X(i) then the sequence can't be
reconstructed beyond a crib (unless you know the factors of N).  So if
N is at least 512-bits (and I think everyone in this group is now
convinced not to use a smaller number), you can use 8-bits per
iteration.  Not fast, but not painful.

--

					Robert I. Eachus

with Standard_Disclaimer;
use  Standard_Disclaimer;
function Message (Text: in Clever_Ideas) return Better_Ideas is...
