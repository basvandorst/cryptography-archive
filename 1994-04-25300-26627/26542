Path: msuinfo!agate!howland.reston.ans.net!usc!elroy.jpl.nasa.gov!netline-fddi.jpl.nasa.gov!nntp-server.caltech.edu!robert
From: robert@cs.caltech.edu (Rob U.S.M.)
Newsgroups: sci.math,sci.crypt,alt.security,alt.security.pgp,alt.security.ripem,comp.security.misc,alt.privacy
Subject: Re: RSA-129
Date: 28 Apr 1994 22:17:04 GMT
Organization: California Institute of Technology
Lines: 64
Message-ID: <2ppcl0$jug@gap.cco.caltech.edu>
References: <strnlghtCoxF2o.DLA@netcom.com> <2pmk96$2k4@qualcomm.com> <1994Apr28.183126.19287@cs.ucla.edu>
NNTP-Posting-Host: flora.cs.caltech.edu
Xref: msuinfo sci.math:70711 sci.crypt:26542 alt.security:16126 alt.security.pgp:12033 alt.security.ripem:695 comp.security.misc:9526 alt.privacy:14711

geoff@ficus.cs.ucla.edu (Geoff Kuenning) writes:
 >In article <2pmk96$2k4@qualcomm.com> karn@servo.qualcomm.com writes:
 >
 >> exp( (ln n)**1/3 * (ln (ln(n)))**2/3)
 >> 
 >> Given the now-known effort for RSA129 (about 429 bits) you should be able
 >> to compute the answers to your questions. 
 >
 >I just wrote the following little ugly program to try this out:
 >
 >[...]

 >Running it with arguments "429 512 1024 2048 4096 8192 16384" gave the
 >following frightening results:
 >
 >    429: 1
 >[...]
 >    16384: 2.68272
 >
 >Given predictable increases in processor speed and power, this seems
 >to say that RSA is crackable now for 512-bit keys and soon for even
 >very long keys.  Somebody please tell me I made a mistake somewhere!

OK: you made a mistake somewhere.  First of all the formula is really:

   O(  exp( ln(n)^(1/3) * ln(ln(n))^(2/3) * ((64/9)^(1/3)+o(1)) )

Second of all, we are not talking about factoring 429, but 429-bit numbers.
Your "complxty" functions should be something like:

/*--complxty----------------------------------------------------------------*/

double complxty(double n) {
 double l, c;

  l = n/log(2);
  c = pow(64.0/9.0, 1.0/3.0);

  return exp(pow(l,1.0/3.0)*pow(log(l),2.0/3.0)*c);
} /* end complexity */

/*--------------------------------------------------------------------------*/

and that's just ignoring the o(1).  Then the results are:

429: 1
512: 93.499
1024: 1.52007e+11
2048: 1.97327e+23
4096: 1.53709e+39
8192: 9.75511e+59
16384: 1.46726e+87

So 512 will soon be in reach.  1024 won't, with current algorithms.

   Rob
--
  email: {robert@vlsi,rjh@csvax,rjharley@cco}.cs.caltech.edu
  www: http://cs.caltech.edu/~rjh/rjh.html                            Hi Kibo!
      __                                                                __
   __/\_\         "r4P3 M3.  r4P3 M3, MY PHR13ND.                      /_/\__
  /_/\/_/          r4P3 M3.  r4P3 M3, 4G41N." -- B1FF c0B41N           \_\/\_\
  \_\/_/\                                                              /\_\/_/
     \_\/          If you're offended, tough shit.                     \/_/
