Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!mnemosyne.cs.du.edu!nyx10!colin
From: colin@nyx10.cs.du.edu (Colin Plumb)
Subject: Re: Wireless LAN security advice request.
Message-ID: <1994Apr10.110411.21064@mnemosyne.cs.du.edu>
X-Disclaimer: Nyx is a public access Unix system run by the University
 	of Denver for the Denver community.  The University has neither
 	control over nor responsibility for the opinions of users.
Keywords: WLAN Wireless security 
Sender: usenet@mnemosyne.cs.du.edu (netnews admin account)
Organization: Nyx, Public Access Unix at U. of Denver Math/CS dept.
References: <CnywMF.1Au@amd.com>
Date: Sun, 10 Apr 94 11:04:11 GMT
Lines: 40

In article <CnywMF.1Au@amd.com>, David Bagby <bagbyd@angelo.amd.com> wrote:
>
>Hi, I'd like to ask this news group for some advice with a security
>design problem. 

Glad to help.

My current favourite unpatented algorithm is MDC/SHS.  64 bytes of
key if stored compressed; 320 bytes of stored maximally expanded.
Several hundred K (kbytes; 2-3 Mbits) a second in software.  To
make hardware easier, you can specify a lag in the encryption, so
block n affects block n+2, giving you block n+1 to do the encryption
in.

Now the problem with export is that it has the 40-bit key rule.  You
can artificially constrain iMDC/SHS, but it is inherently more secure
than that.

I'm not as sure about hardware implementations.  Generally, encryption is
not compact in hardware.  SHS requires a 32-bit adder and some other things,
so isn't going to be terribly compact.

You will need to have some sort of random initial vector.  If you can get
that from the header, you can use that, otherwise you'll need some
other data to help.  There are techniques that work if you have the
full block to work with, but presumably yo want something more on-line.
With an interleave of two, CFB encryption such as MDC/SHS has nice low
latency.  I'd consider CFB with an interleave of two for any block cipher
you adopt.

Actually, I shudder to say it, but the LFSR-based cipher from PKZIP is
known secure against casual attacks, is unpatented, is already all
over the place so you'll be unlikely to have trouble exporting it and
would be reasonably efficient in hardware.    I'd need to check it
out some more (I haven't looked at it in ages), but I think it would
work.

Just some ideas...
-- 
	-Colin
