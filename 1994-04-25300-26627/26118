Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!uunet!mnemosyne.cs.du.edu!nyx10!colin
From: colin@nyx10.cs.du.edu (Colin Plumb)
Subject: Re: Searching for primes and other things
Message-ID: <1994Apr17.234158.7778@mnemosyne.cs.du.edu>
X-Disclaimer: Nyx is a public access Unix system run by the University
 	of Denver for the Denver community.  The University has neither
 	control over nor responsibility for the opinions of users.
Sender: usenet@mnemosyne.cs.du.edu (netnews admin account)
Organization: Nyx, Public Access Unix at U. of Denver Math/CS dept.
References: <jhesseCo0LG3.JuD@netcom.com> <strnlghtCo17v8.BE3@netcom.com> <abellCo22E6.Gv1@netcom.com> <Co236B.G3H@news.Hawaii.Edu>
Distribution: inet
Date: Sun, 17 Apr 94 23:41:58 GMT
Lines: 86

In article <Co236B.G3H@news.Hawaii.Edu>,
Wes Peterson <wes@uhunix3.uhcc.Hawaii.Edu> wrote:
>     I found the recent discussion on finding prime numbers 
>interesting and useful. 

Great.  Now, if I might ask, why bother comp.org.cpsr with it?
(In other words, please check the Newsgroups: line when following up.)

>     Now I have a couple of other questions. The protocol says, a) 
>choose a large prime number p and then b) choose an element that is 
>primitive mod p. I can do a). How do I do b)?
>     I can do b) if I can factor p-1. x is primitive if x^((p-1)/p1) 
>is not 1 for any prime factor p1 of p-1. (In fact, if I can factor 
>p-1, and if I can find an x such that x^(p-1)=1 but x^((p-1)/p1) is 
>not 1 for any prime factor p1 of p-1, that proves that p is prime and
>x is primitive, because all integers less than p must appear as 
>powers of x and therefore have inverses, which is possible only if
>p is prime.)

An easy way it to choose p = 2*q+1, for some prime q.  Then you
only have to try 2 and q for the roots.  (Apparentmy, if q = 4*n+1,
then 2 is guaranteed to be a primitive element of p, but the
proof is not transparently obvious to me.)

>     The other protocol starts "choose a large primitive polynomial 
>p(x) mod 2". Equivalent to that, we could "a) choose a large 
>irreducible polynomial p(x) modulo 2, and b) choose a primitive 
>element modulo p(x)." I can do this one, too, if I can factor 2^m-1, 
>where m is the degree of p(x), and I did it one time up to degree 34. 
>The same basic strategy I described above works. But, it isn't easy 
>to factor 2^m-1. Does anyone know more about this problem?

I generate polynomials up to degree 32 by trial division.  If a polynomial
has no divisors of degree <=16, it must be primitive.  So do a GCD operation
with the product of all degree-a6 and lower polynomials.  This is
x^2^16-x.  Leaving out the x term (easy enough to check for already),
you get x^(2^16-1)-1, which is an 8Kbyte string.  The first step in the
GCD computation is a remainder, which is the same as a CRC computation.
Fast CRC computation techniques are known.

(You elaborate this, trying for factors of degree 8 or less first,
which is about as much work as computing the table for fast CRC
computation, and you omit polynomials divisible by x or x+1 in the
list of polynomials you try, but that's the final test.)

The best algorithm I know for proving a polynomial of high degree
irreducible I got got from Maurice Mignotte's Mathematics for Computer
Algebra (Springer-Verlag, ISBN 0-387-97675-2)

First you verify that the polynomial is square free, by taking the
GCD of it with its derivative.  IF the result is not 1, it's a factor
and you have proved reducibility.

The next step is based on the fact that every element of a field F_q
(the finite field of size q, a power of a prime) satisfies
x^q = q.  Thus, x^q-q = 0 for all x in F_q.

Since the polynomial P is square free, math modulo P is isomorphic
to math modulo the factors of P.  (Chinese remainder theorem.)

The null space of the mapping x -> x^q-x modulo an irreducible
polynomial P is the units.  Thus, the dimension of the null space
is 1.

IF P has k factors, there is a null space of dimension 1 for each
factor of P, so the null space has dimension k.

So P is irreducible if and only if the null space of the mapping
x -> x^q-x is of dimension 1.

Now this function L : x -> x^q-x is linear.  (The proof is that, in
F_q, (x+y)^q = x^q+y^q because all intermediate binomial coefficients
have a factor of q.)  Thus, it can be represented as a matrix and
the dimension of the null space found by finding the rank of the
matrix.

SO just evaluate L for eaxh of x^i, 0 <= i < d, where d is the
degree of the polynomial P being tested, put the results into
a matrix, and triangularize to get the rank.  IF the rank is
less than d-1, P is reducible.

This can be extended to a polynomial factorization algorithm, as is done
in section 6.4 of the book, but this much will suffice to prove
irreducibility in O(d^3) operations.
-- 
	-Colin
