Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!uunet!mnemosyne.cs.du.edu!nyx10!colin
From: colin@nyx10.cs.du.edu (Colin Plumb)
Subject: Re: PGP uses Fermat to test primes?!
Message-ID: <1994Apr17.114310.3797@mnemosyne.cs.du.edu>
X-Disclaimer: Nyx is a public access Unix system run by the University
 	of Denver for the Denver community.  The University has neither
 	control over nor responsibility for the opinions of users.
Sender: usenet@mnemosyne.cs.du.edu (netnews admin account)
Organization: Nyx, Public Access Unix at U. of Denver Math/CS dept.
References: <Co9Mp0.n5@cs.dal.ca>
Date: Sun, 17 Apr 94 11:43:10 GMT
Lines: 38

In article <Co9Mp0.n5@cs.dal.ca>, Paul Gauthier <gauthier@ug.cs.dal.ca> wrote:
>Looking over the PGP sources (pgp23src.zip) in the genprime.c module
>I notice that PGP uses Fermat's Little Theorem to test for
>primality.
>
>It seems that potential primes are run through a sieve against
>a number of small known primes to discard some composites quickly.
>If the prime passes these tests, the following relation is
>confirmed for 4 different x's before it is pronounced a true prime.
>
>	((x**(p-1)) mod p) congruent 1
>
>In my reading there is mention of Carmichael numbers, which are
>composites which pass the above test for _all_ x's. Yet they
>are not primes. An example given is: 561 = 3 * 11 * 17.
>
>So am I missing something, or could PGP accept choices for p and
>q which are in fact Carmichael numbers? Wouldn't the potential
>for a composite with small factors make the factoring of n=p*q
>much easier?

Yes, PGP could accept such numbers.  They are, however, less common
than undetected hardware errors which could cause PGP to malfunction
in any number of ways, so they're not worth worrying about.

>There is a conditional compilation flag called STRONGPRIMES
>which performs more magic during the prime generation phase,
>but it is turned off in the copy of the source I have.

That's for resitance to old-fashioned factoring algorithms.  But
the latest batch of factoring algorithms are faster under all
circumstances, and primes of that special form don't help for
the new algorithms, so there's no sense taking the extra time to
generate them.

(As Bob silverman has just finished explaining to me.)
-- 
	-Colin
