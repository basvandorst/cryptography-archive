Path: msuinfo!agate!ucbvax!dog.ee.lbl.gov!ihnp4.ucsd.edu!swrinde!cs.utexas.edu!not-for-mail
From: boucher@csl.sri.com (Peter K. Boucher)
Newsgroups: sci.crypt
Subject: Re: PRNG's--byte and word
Message-ID: <9404291803.AA07338@redwood.csl.sri.com>
Date: 29 Apr 94 18:03:42 GMT
Sender: daemon@cs.utexas.edu
Organization: UTexas Mail-to-News Gateway
Lines: 46
NNTP-Posting-Host: cs.utexas.edu

John Kelsey wrote:
|> Are there other values that would
|> lead to short periods?

To see what would happen, I changed the initialization thusly:

void
srand128(seed0,seed1,seed2,seed3)
unsigned long seed0,seed1,seed2,seed3;
{
    register int i;
    long t = time(0);

    /* Fill v with "random bits".  The method employed by slow_rnd_longs()  */
    /* crucial.                                                             */
/*     slow_rnd_longs(seed0, seed1, seed2, seed3, prng.v, v_SIZE); */

    for (i=R0_SIZE; i--;) {
        prng.rotor.R0[i] = --t;
    }

    /* Set initial, "random" indices into the rotors.                       */
    rotor0 = &(prng.rotor.R0[seed0 % R0_SIZE]);
    rotor1 = &(prng.rotor.R1[seed1 % R1_SIZE]);
    rotor2 = &(prng.rotor.R2[seed2 % R2_SIZE]);
    rotor3 = &(prng.rotor.R3[seed3 % R3_SIZE]);
    rotor4 = &(prng.rotor.R4[(*rotor0 + *rotor2) % R4_SIZE]);
    rotor5 = &(prng.rotor.R5[(*rotor1 + *rotor3) % R5_SIZE]);

    /* Update each value in v several times to obscure the dependency       */
    /* on the initialization performed by slow_rnd_longs().                 */
    for (i=2*v_SIZE; i--;) {
        (void)rand32();
    }
}

So, only one rotor is filled (the shortest one, too), and with highly 
un-random bits.  Well, it still seems work fine.  What other tricks
could I use to test the robustness?

-- 
Peter K. Boucher
--
DISCLAIMER:  I am solely responsible for the contents of this message,
	     which should not be misconstrued as being in any way related
	     to the opinions of my employer.
