Path: msuinfo!agate!howland.reston.ans.net!gatech!newsxfer.itd.umich.edu!nntp.cs.ubc.ca!cyber2.cyberstore.ca!vanbc.wimsey.com!nemesis.wimsey.com!Stu
From: Stu@nemesis.wimsey.com (Stuart Smith)
Newsgroups: sci.crypt
Subject: Re: Recognizing Plaintext...
Message-ID: <766014357Stu.stu@nemesis.wimsey.com>
Sender: stu@nemesis.wimsey.com
Date: Sun, 10 Apr 94 13:45:57 pst
References: <slansky_doug-070494084511@mac-an-48.cig.mot.com>
Organization: The Puzzle Palace
X-Newsreader: TRN for OS/2
Lines: 42

In article <slansky_doug-070494084511@mac-an-48.cig.mot.com> slansky_doug@macmail1.cig.mot.com (Doug Slansky) writes:
>For example, if I had a page of cyphertext that I knew was encrypted using
>56 bit single DES, and I wanted to mount a brute-force key attack (I don't
>have the plaintext, or my question becomes obvious...).  As I try each key,
>the program (or hardware, or whatever) must check to see if it has arrived
>at plaintext or not.  How do I make such a determination.  I was

Any of the large scale DES-cracking machines that have been proposed
*require* a plaintext ciphertext pair - that is 64 bits of ciphertext
along with the original plaintext.  If you can't get this then you can
still do brute force, but then, as you suggest, you need to check
character frequencies and such, making a DES breaking machine
considerably more complex.  All such a machine does is encrypt the
known plaintext (or decrypt the ciphertext, same thing) with a key
and compare the result to the ciphertext (or plaintext if you decrypted
the ciphertext).  If it doesn't match, it goes on to the next key.

>Along the same lines, I was reading of his estimates that a dictionary
>attack such as he outlines will break 25%-33% of log-on passwords.  How
>would I know?  Also, wouldn't it be fairly simple to only allow some small
>number of failed log-ons before automatic disconnect, sysadmin alert, etc.
>that would greatly hinder such an attack.

This is not how the attack is mounted.  Usually you would get a copy
of the encrypted password file for the system, then encrypt all the
words in a dictionary or words along the lines suggested in the book,
and compare words - if some poor soul used a word in your dictionary
as their password, then the encrypted password will be identical to
the encrypted dictionary.  

>BTW, I have read through the FAQ, and hope that I haven't offended anyone
>with the simplicity of my questions.

Nope :)

--
what have i become?     you could have it all
my sweetest friend      my empire of dirt
everyone i know         i will let you down
goes away in the end    i will make you hurt
E7 E3 90 7E 16 2E F3 45 28 24 2E C6 03 02 37 5C
Stuart Smith            <stu@nemesis.wimsey.com>
