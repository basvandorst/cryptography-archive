Path: msuinfo!agate!dog.ee.lbl.gov!ihnp4.ucsd.edu!news.cerf.net!mvb.saic.com!MathWorks.Com!europa.eng.gtefsd.com!emory!swrinde!cs.utexas.edu!not-for-mail
From: boucher@csl.sri.com (Peter K. Boucher)
Newsgroups: sci.crypt
Subject: Re: S box questions
Date: 13 Apr 1994 14:46:12 -0500
Organization: UTexas Mail-to-News Gateway
Lines: 98
Sender: daemon@cs.utexas.edu
Message-ID: <9404131946.AA15195@redwood.csl.sri.com>
NNTP-Posting-Host: cs.utexas.edu

C445585@mizzou1.missouri.edu (John Kelsey) wrote:
[deletia...]
|>    All that said, I'm inclined to think that key-generated s-boxes, when
|> used well, are probably able to give greater security than fixed s-boxes.
|> They're also cheap to implement in software.

I wrote an encryption module that uses 64 key-generated S boxes to
replace a byte at a time.  

The following macros are used to access the S boxes:


#define BYTE0(x) ( x        &255L)
#define BYTE1(x) ((x  >>  8)&255L)
#define BYTE2(x) ((x  >> 16)&255L)
#define BYTE3(x) ( x  >> 24      )

#define Ensubstitut(X,Y) \
        tmp1 = X;                    \
        tmp2 = Y;                    \
        X = stabs[tab0][BYTE0(tmp1)] | \
            stabs[tab1][BYTE1(tmp2)] | \
            stabs[tab2][BYTE2(tmp1)] | \
            stabs[tab3][BYTE3(tmp2)];  \
        Y = stabs[tab4][BYTE0(tmp2)] | \
            stabs[tab5][BYTE1(tmp1)] | \
            stabs[tab6][BYTE2(tmp2)] | \
            stabs[tab7][BYTE3(tmp1)];

#define Desubstitut(X,Y) \
        tmp1 = X;                    \
        tmp2 = Y;                    \
        X = stabs[tab0][BYTE0(tmp1)] | \
            stabs[tab5][BYTE1(tmp2)] | \
            stabs[tab2][BYTE2(tmp1)] | \
            stabs[tab7][BYTE3(tmp2)];  \
        Y = stabs[tab4][BYTE0(tmp2)] | \
            stabs[tab1][BYTE1(tmp1)] | \
            stabs[tab6][BYTE2(tmp2)] | \
            stabs[tab3][BYTE3(tmp1)];

There are 64 S boxes, with pre-shifted values.  The values 
in the S boxes are shifted left by 8*(index%4), so that the 
values in stabs[0] are not shifted, the values in stabs[1] 
are shifted left by 8, the values in stabs[2] are shifted 
left by 16, etc.  This pre-shifting is to save time, because
8 shift operations per round are avoided.

tab0 .. tab7 are reset after each 8K output as follows:

        tab0 = rand32()&60;
        tab1 = (rand32()&60) + 1;
        tab2 = (rand32()&60) + 2;
        tab3 = (rand32()&60) + 3;
        tab4 = rand32()&60;
        tab5 = (rand32()&60) + 1;
        tab6 = (rand32()&60) + 2;
        tab7 = (rand32()&60) + 3;

The S boxes are initialized as follows:

void init_sub_tab(stab, ENCRYPT, shft)
register unsigned long *stab;
int ENCRYPT;
register int shft; /* ((stabs index) % 4) * 8 */
{
    register unsigned long i, j;
    unsigned long tmp[256];

    for (i=0; i < 256; i++) {
        tmp[i] = i;
    }
    if (ENCRYPT) {
        while (i > 1) {
            j = rand32_mod(i--);
            stab[i] = tmp[j] << shft;
            tmp[j] = tmp[i];
        }
        stab[0] = tmp[0] << shft;
    } else /* DECRYPT */ {
        while (i > 1) {
            j = rand32_mod(i--);
            stab[tmp[j]] = i << shft;
            tmp[j] = tmp[i];
        }
        stab[tmp[0]] = 0;
    }
}

It seems to me that the strength of these S boxes is directly
proportional to the statistical randomness of rand32_mod();

-- 
Peter K. Boucher
--
DISCLAIMER:  I am solely responsible for the contents of this message,
	     which should not be misconstrued as being in any way related
	     to the opinions of my employer.
