Path: msuinfo!agate!howland.reston.ans.net!EU.net!Germany.EU.net!unibwh.unibw-hamburg.de!news.rrz.uni-hamburg.de!fbihh.informatik.uni-hamburg.de!bontchev
From: bontchev@fbihh.informatik.uni-hamburg.de (Vesselin Bontchev)
Newsgroups: comp.security.misc,alt.security,sci.crypt,alt.2600
Subject: Re: Jitec claim world's first virus-proof computer
Followup-To: comp.security.misc,alt.security,sci.crypt,alt.2600
Date: 11 Apr 1994 10:20:30 GMT
Organization: University of Hamburg -- Germany
Lines: 73
Message-ID: <2ob89e$c49@rzsun02.rrz.uni-hamburg.de>
References: <2o3q7s$319@bmerha64.bnr.ca> <FAIGIN.94Apr8092012@solarium.aero.org>
NNTP-Posting-Host: fbihh.informatik.uni-hamburg.de
X-Newsreader: TIN [version 1.2 PL2]
Xref: msuinfo comp.security.misc:9160 alt.security:15763 sci.crypt:25830 alt.2600:6529

Daniel P. Faigin (faigin@aero.org) writes:

> Most computers are virus proof; it's just PCs that are not.

Sorry, I have to disagree. Almost all usable generic-purpose
computers are infectable. The only ways to make viruses impossible is
to do one of the following:

1) Limit functionality. If the computer is not programmable, it cannot
be infected. You can't write a virus for a microwave oven.

2) Limit sharing. If any user on such a computer is *completely*
isolated from any other user, then a virus can be written only by the
user and it can infect only his/her programs. Note that making the
computer just single-user is not enough - e.g. PCs are not
virus-proof, because there is a way to share information between the
different PC users (via diskettes, networks, modems).

3) Limit transitivity. If there is no way for a user B to pass to user
C information that s/he has received from A, then a virus cannot
spread. I think that most POset and Biba based protections rely on
this principle.

> PCs, or I should
> say MS-DOS systems,

No, you shouldn't. An IBM PC-compatible machine is infectable even if
it doesn't run MS-DOS. We've had several reports from IBM PC machines
running Xenix being destroyed by Michelangelo on March 6. Boot sector
viruses work on BIOS level and could care less about the operating
system that is loaded afterwards. Indeed, most non-MS-DOS systems make
them unable to spread, once the OS is loaded, but they can't prevent
them from infecting the machine and/or causing damage at boot time.

> have the property that the operating system is in the same
> domain as applications; thus applications can muck with the operating system.

They don't need to. All they need is to be able to (a) write to *some*
executable objects that are (b) shared among users. I am not talking
about the system binaries. I am talking about me being able to compile
a program and another user being able to execute it.

> In most other systems (for example, most Unixii), the operating system runs in
> a different mode, and application programs cannot tamper with the operating
> systems.

Yet Unix viruses are perfectly possible, we have three of them here,
and some of the first viruses were created by Dr. Fred Cohen on a Unix
system. Again Cohen has demonstrated that the Bell-LaPadula security
model is unable to stop viruses.

Dr. Faigin, I am really surprised to see you making such elementary
mistakes.

> If you are concerned about viruses that infect application programs, there are
> also ways to do this; primarily by increasing the integrity controls on a
> system. This is often done in trusted systems.

This is correct, however. A computer that is based on the Biba
integrity model should be virus-proof, because viruses are an
integrity problem. However, I have yet to see an usable implementation
of this model. Note that I am not saying that one is not possible or
that one does not exist - just I have seen none yet. Hmm, when I think
about it, I don't see how even a Biba model will prevent a virus from
infecting the applications that run in the same integrity ring.

Regards,
Vesselin
--
Vesselin Vladimirov Bontchev          Virus Test Center, University of Hamburg
Tel.:+49-40-54715-224, Fax: +49-40-54715-226      Fachbereich Informatik - AGN
< PGP 2.3 public key available on request. > Vogt-Koelln-Strasse 30, rm. 107 C
e-mail: bontchev@fbihh.informatik.uni-hamburg.de        22527 Hamburg, Germany
