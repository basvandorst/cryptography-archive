Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!uhog.mit.edu!europa.eng.gtefsd.com!howland.reston.ans.net!math.ohio-state.edu!sdd.hp.com!nigel.msen.com!zib-berlin.de!news.th-darmstadt.de!terra.wiwi.uni-frankfurt.de!zeus.rbi.informatik.uni-frankfurt.de!news.dfn.de!scsing.switch.ch!elna.ethz.ch!caronni
From: caronni@nessie.cs.id.ethz.ch (Germano Caronni)
Newsgroups: sci.crypt
Subject: Re: Faster crypt of compressed data (revised)
Date: 21 Apr 1994 16:17:10 GMT
Organization: Swiss Federal Institute of Technology (ETH), Zurich, CH
Lines: 79
Message-ID: <2p68u6$iju@elna.ethz.ch>
References: <sv.766739639@id.dth.dk> <2p11ea$f23@hermes.unt.edu> <sv.766826215@id.dth.dk>
NNTP-Posting-Host: nessie.ethz.ch

In article <sv.766826215@id.dth.dk> sv@idfs3.uucp (Stig Valentini) writes:
>fc14@sol.acs.unt.edu (Steve Tate) writes:
>>Stig Valentini (sv@idfs3.uucp) wrote:
>>> ---------------------------------------------
>>> Faster cryptation of already compressed data
>>> (by Stig Valentini)  Revised version.
>>> ---------------------------------------------
>
>>You present this like it's a new idea, but people have known about and
>>talked about this for a very long time...  (and it seems to come up about
>>yearly on the net).  I think there were even some references to similar stuff 
>>posted here not too long ago.
>
>I'm deeply sorry because I took your time with a subject, which already
>has been exloited. You're right, I've no right to present the thoughts
>as original. Also did i forget to addd (c) and (tm) when speaking of ZIP
>and ARJ. I humbly apologize, to all wasting time reading my postings - I
>will terminate all further talks about compression and encryption. I
>have no excuse - only the fact remains, that there's a lot more
>intelligent people than me out there. I'll just stick to compression -
>encrytion wasn't my field anyway. If you can, please accept my humble
>apologizes...



I really hope your wording is of the sarcastic kind. I found your article
interesting and refreshing, even if I do not completely agree with some of
your statements.

>Still, the two processes basicly differ regarding size and time restrictions.
>Encrypted data is allowed to exceed the original data in size - and time-
>consuming algorithms is prefered in order to prevent encryption brute-force
>attacks. On the other hand, compressed is expected to result in a size
>reduction - and fast algorithms are favored (if the compression time exceeds
>the time saved when transfering the reduced amount of data over a channel -
>then it would be easier just to transmit the uncompressed data).

You state that encryption usually allwos for the data - volume to get larger.
This would cause redundancy, which is a NoNo in cryptography. For the same
reason error ocrrection coding is added to a data stream after it has been 
encrypted. (as you stated)

And I do not agree that time-consuming algorithms are prerferred. The class of
preferred algorithms are the _secure_ algorithms ;_) Not all slow encryption
is secure... And some fast algorithms (e.g. OTP) can be very secure.

Some time even slow compression is favored to fast compression. How about
archiving data? I guess there the time of transmission is negligible. It's
a cost function of storage-space versus computing time. But I am sure you
know more about that than I.

How about the problem of having an optimally compress-encrypted english text, 
and having an enemy who knows exactly that this has to be a text about let's
say legislation. Doesn't his precise knowledge of the characteristics of this
text allow him to generate the most likely Huffmann-trees ? And thus solving
the encryption? Even if there are a large amount of possible trees, he could
reiterate on the cyphertext to get more likely solutions...

>This will result in saved time (less actual data to encrypt) compared to most
>normal cases where all the data (either original or compressed) would have
>been encrypted - and still aproximately maintain the same level of security.
>And if the saved time was invested in a more complex encryption algorithm,
>then it would actually result in better security than before (while not using
>more time).

Remeber your statement about 'weakest link' As soon as de-compressing the 
data without tree is easier than decoding the tree, your argumentation 
fails.
But your approach of two-stage encryption (one for the data, one for the tree)
sounds interesting...

Just keep in mind that prior work has been done in this area. If you
can circumnavigate the problems that were shown there, well that would
be great! ;-)

I wish you good luck,

	Germano Caronni

