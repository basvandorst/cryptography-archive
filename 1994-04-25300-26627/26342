Path: msuinfo!agate!ihnp4.ucsd.edu!swrinde!cs.utexas.edu!not-for-mail
From: boucher@csl.sri.com (Peter K. Boucher)
Newsgroups: sci.crypt
Subject: Re: Yet Another Secure? RNG
Date: 25 Apr 1994 10:59:14 -0500
Organization: UTexas Mail-to-News Gateway
Lines: 68
Sender: daemon@cs.utexas.edu
Message-ID: <9404251559.AA00778@redwood.csl.sri.com>
NNTP-Posting-Host: cs.utexas.edu

jktaber@netcom.com (John K. Taber) wrote:
+No.  Unless I screwed up in the C, it should be outputing the sum of all
+17 sums.

|>       for(i = 0; i < 17; i++)
|>          {                           /* ensure all v[i] are changed  */
|>             a = prng.rotor.R2[(i + *ndx) % 2] +
|>                 prng.rotor.R3[(i + *ndx) % 3] +
|>                 prng.rotor.R5[(i + *ndx) % 5] +
|>                 prng.rotor.R7[(i + *ndx) % 7];
|>             v[(i + *ndx) % 17] = a + ROTATE(v[(i + *ndx) % 17]);
|>          }

should be:

for(i = a = 0; i < 17; i++)
    {                           /* ensure all v[i] are changed  */
        a += prng.rotor.R2[(i + *ndx) % 2] +
             prng.rotor.R3[(i + *ndx) % 3] +
             prng.rotor.R5[(i + *ndx) % 5] +
             prng.rotor.R7[(i + *ndx) % 7];
        v[(i + *ndx) % 17] = a + ROTATE(v[(i + *ndx) % 17]);
    } 

+This is pseudo-code.  The 1st thing is to get the prng "secure".  Then
+we can look at ways to improve efficiency.  

I was performing statistical tests, so I care about performance.

+But if the changes fed back into the 1st four rotors don't also change
+the last 2 rotors, we are not massively changing the entire "seed" of
+the rng.  I can't do the math, but something tells me that not changing
+the mangle rotors is a weakness.

I did update them.  See below.  I think it's also important that
if you make a graph showing which rotors are updated by which, you
should have a circuit that loops once through each of the rotors
(with no sub-loops).  Below, rotor0 is modified by rotor5, which is
modified by rotor4, ...

>        a = *rotor0, /* read out six values from v */
>        b = *rotor1,
>        c = *rotor2,
>        d = *rotor3,
>        e = *rotor4,
>        f = *rotor5;
>
>        *rotor0 += f; /* update six values in v */
>        *rotor1 += a;
>        *rotor2 += b;
>        *rotor3 += c;
>        *rotor4 += d;
>        *rotor5 += e;

+We don't seem to be eliciting much interest, so maybe this rng is
+hopelessly flawed or incomprehensible.

Well, it's certainly not incomprehensible.  If it's hopelessly
flawed, I haven't understood why yet.  Would someone please explain
it to me?


-- 
Peter K. Boucher
--
DISCLAIMER:  I am solely responsible for the contents of this message,
	     which should not be misconstrued as being in any way related
	     to the opinions of my employer.
