Newsgroups: sci.crypt
Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!news.byu.edu!gatech!newsxfer.itd.umich.edu!nntp.cs.ubc.ca!utcsri!utnut!torn!news.unb.ca!coranto.ucs.mun.ca!nstn.ns.ca!cs.dal.ca!ug.cs.dal.ca!gauthier
From: gauthier@ug.cs.dal.ca (Paul Gauthier)
Subject: PGP uses Fermat to test primes?!
Message-ID: <Co9Mp0.n5@cs.dal.ca>
Sender: usenet@cs.dal.ca (USENET News)
Nntp-Posting-Host: ug.cs.dal.ca
Organization: Math, Stats & CS, Dalhousie University, Halifax, NS, Canada
Date: Thu, 14 Apr 1994 20:10:11 GMT
Lines: 31

Looking over the PGP sources (pgp23src.zip) in the genprime.c module
I notice that PGP uses Fermat's Little Theorem to test for
primality.

It seems that potential primes are run through a sieve against
a number of small known primes to discard some composites quickly.
If the prime passes these tests, the following relation is
confirmed for 4 different x's before it is pronounced a true prime.

	((x**(p-1)) mod p) congruent 1

In my reading there is mention of Carmichael numbers, which are
composites which pass the above test for _all_ x's. Yet they
are not primes. An example given is: 561 = 3 * 11 * 17.

So am I missing something, or could PGP accept choices for p and
q which are in fact Carmichael numbers? Wouldn't the potential
for a composite with small factors make the factoring of n=p*q
much easier?

There is a conditional compilation flag called STRONGPRIMES
which performs more magic during the prime generation phase,
but it is turned off in the copy of the source I have.

PG

-- 
=============================================================================
                              Paul Gauthier
Electronic: gauthier@ug.cs.dal.ca   Voice: (902)423-0089   Fax: (902)420-1675
Excellent Stuff: Linux, Term, X, LaTeX, Perl, Splus, GS, gcc, GDB, bash, xfig
