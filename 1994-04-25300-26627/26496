Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!uunet!mnemosyne.cs.du.edu!nyx10!colin
From: colin@nyx10.cs.du.edu (Colin Plumb)
Subject: Re: compression & security
Message-ID: <1994Apr28.092255.14028@mnemosyne.cs.du.edu>
X-Disclaimer: Nyx is a public access Unix system run by the University
 	of Denver for the Denver community.  The University has neither
 	control over nor responsibility for the opinions of users.
Keywords: compression, Huffman, Arithmetic coding
Sender: usenet@mnemosyne.cs.du.edu (netnews admin account)
Organization: Nyx, Public Access Unix at U. of Denver Math/CS dept.
References: <RICK.1.00121813@telescan.com> <CoM564.BAp@dcs.ed.ac.uk>
Date: Thu, 28 Apr 94 09:22:55 GMT
Lines: 26

In article <CoM564.BAp@dcs.ed.ac.uk>, Paul Crowley <pdc@dcs.ed.ac.uk> wrote:
>Depends how much integrity checking your decompresser has.   Inbetween
>the header information and checksums, I think any bit vector at all is
>valid input to gzip, because it encodes the various codes it uses with
>Huffman compression, and any code in the Huffman tree is a valid one. 
>Just choose your plaintext and uncompress it!

Actually, not quite true.  First, the Huffman trees have some integrity
constriants; the probabilities must add up to 1.  There are also stored
blocks, which are preceeded by a 16-bit length, which is stored twice;
once normally, then the bitwise inverse.

Oh, also, there are three block types (stored, dynamic trees, and
static trees), but two bits of block type.  Block type '11' is invalid.

Then there's the fact that the static trees are incomplete; there are
a couple of unused symbols there.

Finally, there's the issue of the LZ77 compression, which is based on
(distance, length) pairs.  If distance exceeds the distance to the
beginning of the file, it must be invalid.

Note: this is all based on the zip utility, which I believe gzip clones.
If there are minor format differences, this may change.
-- 
	-Colin
