Path: msuinfo!agate!bob.eecs.berkeley.edu!spp
From: spp@bob.eecs.berkeley.edu (Steve Pope)
Newsgroups: sci.crypt
Subject: Re: 40-bit keys for exportable des
Date: 1 Apr 1994 02:22:24 GMT
Organization: U.C. Berkeley -- ERL
Lines: 40
Message-ID: <2ng0h0$eor@agate.berkeley.edu>
References: <2ncrgu$482@la-jiao.aktis.com> <mpjCnJwAE.39L@netcom.com>
NNTP-Posting-Host: bob.eecs.berkeley.edu

mpj@netcom.com (Michael Paul Johnson) writes:

>don@cam.ov.com (Donald T. Davis) writes:

>>we'd like to try to get u.s. export approval for
>>a des-based security product, without massively
>...
>>exhaustive search would be. a less naive approach
>>would be to feed a 40 bit key into md5, and keep
>>the first 56 bits, but this may be more computation
>>than we need here, since the 40-to-56-bit conversion
>>needn't be one-way, but only needs good statistical
>
>A more secure approach is to hash a 40 bit key appended to an
>80 bit constant (which is well hidden in the product), and keep
>only 56 bits of the result for the DES key.  

Hmmm... if the goal is to generate sets of 2*40 56 bit
numbers readily and with random statistics, I would try
something like this:

Let 1, a, a**2, ... be the non-zero elements of the field GF(2**56)

Define some simple function that is true for 2**40 of these
elements, such as (x is an extra-long-int here):

               ((x & 0xffffffffff) == CONST)

And define your set of keys to be the elements


               x * a**k

For some k that is not too small.

I suspect the statistics on this are pretty good; and by choosing 
CONST and k you should be able to generate nearly 2**96 different sets
of 2**40 keys.

Steve
