Path: msuinfo!news.mtu.edu!sol.ctr.columbia.edu!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!blanket.mitre.org!linus.mitre.org!linus!mbunix!eachus
From: eachus@spectre.mitre.org (Robert I. Eachus)
Newsgroups: sci.crypt
Subject: Re: Wireless LAN security advice request.
Date: 11 Apr 94 17:24:41
Organization: The Mitre Corp., Bedford, MA.
Lines: 71
Message-ID: <EACHUS.94Apr11172441@spectre.mitre.org>
References: <CnywMF.1Au@amd.com>
NNTP-Posting-Host: spectre.mitre.org
In-reply-to: bagbyd@angelo.amd.com's message of Sat, 9 Apr 1994 01:11:03 GMT


In article <CnywMF.1Au@amd.com> bagbyd@angelo.amd.com (David Bagby) writes:

 >  Hi, I'd like to ask this news group for some advice with a security
 >  design problem. 

   The first thing David should do is send a copy of his message,
perhaps with responses, to vice-president@whitehouse.gov.  This is the
best example yet that I have seen of impact on US competitiveness of
(I'll keep it polite) including crypto under ITAR regulations.

    Next having decided to punt the ITAR issue, either by expecting
(whoops, I promised) favorable political action or domestic use only,
you then have to consider how an encryption system should work in this
environment.  Probably the best bet is to have an authentication
mechanism where you recognize holders of a secret as authentic.  (This
does not necessarily involve the Diffie-Hellman patents.  All we
require is that the recognition mechanism not require transmission of
knowledge, not that one network user can recognize another without
knowing his key.)  Using Blum, Blum,and Shub seems perfect here.  I
transmit a number, the other computes the square root mod his known N.
If only one side knows the factorization of N, it might be subject to
the Public Key Partners patents, but if the validation is
symmetric--both sides prove they know N--it shouldn't be. (I'm not a
patent lawyer--don't rely on this.)  Note that the system looses
nothing by requiring that both sides know a secret key.  If the two
sides don't trust each other that much, they don't want to connect.
(The server can have one key in common with each portable user, and
vice-versa--or thousands of keys, the choice is up to the users.)

    Once you have authenticated a link, the "shared secret" can be
used to establish a per-session key.   For example, step back far
enough above to get k key bits, XOR the key bits from both challenges
together, and use them with IDEA, TDES, etc.  (There are problems with
using this to create a BBS key, but they could be managed.  However,
that is probably not necessary.)

    If you decide to settle for more modest (political) goals, write
this into the standard with the challenge indicating N (you probably
don't want to include N, just a 64-bit hash of it), and the algorithms
accepted.  The responding challenge need not repeat the key, but
should indicate the per session algorithm chosen.  Set up the first
eight or so slots as nothing, compress, DES, TDES, IDEA, etc., and
identify the rest as having a key specific meaning. Then you can apply
to the Commerce Department for a determination on the authentication
protocol separate from the implementations of the predefined crypto
choices.  Anybody with sense, here or abroad, will set their systems
up to never accept or offer clear communication, but that has been
made a "separable" issue.

     Since the initial challenges should come from the portable unit,
you can have a key registry where key hashes can be registered.
(Note, unlike Cripple, the registry does nothing other than to insure
that only one registrant uses a particular 64-bit key hash.  The hash
and for that matter the key N, can be treated as public, only the
factors are private.  And while there are advantages to widespread
registries, all the system really needs is that no two authorized
users have the same hash and different values of N.  And it would be
possible to deal with that.)  When a portable unit challenges, the
base unit can do a hashed lookup and only respond if it recognizes the
hashed key.  (Again, there is no advantage to collecting challenges,
even for use in replay attacks.  The best use of an attackers time,
ignoring practical cryptography, is to try to factor N.)

--

					Robert I. Eachus

with Standard_Disclaimer;
use  Standard_Disclaimer;
function Message (Text: in Clever_Ideas) return Better_Ideas is...
