Path: msuinfo!uwm.edu!csd4.csd.uwm.edu!kaehny
From: kaehny@csd4.csd.uwm.edu (Mark R Kaehny)
Newsgroups: sci.crypt
Subject: Re: Searching for primes
Date: 8 Apr 1994 02:55:58 GMT
Organization: Computing Services Division, University of Wisconsin - Milwaukee
Lines: 31
Message-ID: <2o2h3uINNi25@uwm.edu>
References: <1994Apr6.092808.25303@mnemosyne.cs.du.edu> <2numd7$qcd@linus.mitre.org> <1994Apr7.072519.8227@mnemosyne.cs.du.edu>
NNTP-Posting-Host: 129.89.7.4


>
>The only annoying this is that (as far as I can tell so far), you have to
>decide on h before starting.  If you're loking for one prime, that gets
>a bit wasteful.

This is simple - you know about how big a number you are looking for --
simply use one of the estimates of the number of primes < a number N --
PI(N). A simple one is (N/ln(N)). so probability of a random number N
of a given size being prime is 1/ln(N) (roughly). calculate h appropriately
from this.



>And it seems that despite much browsing through Knuth, I had never stopped
>and looked at Lehmer's method, which is DAMN nifty.  (Everyone reading,
>have a look at Knuth Vol 2 section 4.5.2, algorithm L.  Discussion starts
>on page 327 in the second edition.)
>

For random numbers I found using Lehmer's GCD using the product of the
first several primes > 2 was actually faster than trial division on
some architectures (RISC's generally). This is in the case where
sieving is useless since I am given the particular number. Some small
trial division followed by Strong Pseudo-prime test weeded things out the
fastest for up to & over 100 digit numbers ...


Mark Kaehny
kaehny@csd4.csd.uwm.edu

