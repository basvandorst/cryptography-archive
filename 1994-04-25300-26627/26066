Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!news.byu.edu!news.kei.com!MathWorks.Com!europa.eng.gtefsd.com!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson; CMSC (G))
Newsgroups: sci.crypt
Subject: Re: Randomness and one-time pads
Date: 15 Apr 1994 17:58:47 GMT
Organization: University of Maryland, Baltimore County
Lines: 52
Message-ID: <2omkkn$en5@news.umbc.edu>
References: <2num50$idu@portal.gmu.edu> <8APR94.06130491@uwpg02.uwinnipeg.ca> <2o4las$k7e@agate.berkeley.edu> <2ojl0j$5kd@zikzak.apana.org.au>
NNTP-Posting-Host: umbc7.umbc.edu
X-Newsreader: TIN [version 1.2 PL2]

Bill Birch (bill@zikzak.apana.org.au) wrote:

: BTW I have a question. Does anyone know an algorithm for
: expanding pure random data with pseudo-random data? 

: Suppose you have 10Mbytes of pure random data but you really need
: 20Mbytes. Is there areliable (un-crackable) way of padding out the
: pure random stuff ? This would be a great way to send one-time pad key data
: over the wire wouldn't it, by encrypting it with slightly less random 
: data?

No one knows.

Assuming a fixed algorithm known to an attacker, the entropy
of the random string clearly can not increase, so there is no
information theoretically secure way to do the expansion.
Perhaps there is a computationally secure method.

Suppose you have a deterministic Turing machine that executes
the expansion algorithm A in polynomial time.  Now we define
the language L as the set of strings,
           {y| there is some x : A(x)=y}.  
L can be accepted in polynomial time by a non-deterministic
Turing machine which guesses x and emulates A to determine if
A(x)=y.

Now define L' as the set of strings 
         {(y) | there are strings x,s : A(x)=ys}, 
where ys is the concatenation of y and s.  L' is the set of
strings which are prefixes of strings in L.  This language can
clearly also be accepted by a non-deterministic Turing machine 
in polynomial time.

Given such a machine, we can use it to predict the next bit in
the expanded string from some prefix of the string.  Suppose p
is the first part of the expanded string.  We can use a
machine which accepts L' to determine if p followed by 1, and
p followed by 0 are in L'.  If only one is in L', then we know
the next bit.

Since A doubles the length of the string, on the average at
least half the bits of the expanded string should be
predictable in this way.

Thus if P=NP there is a precise sense in which we can say
there is no tractable, un-crackable algorithm to do the
expansion.

Since we don't know if P=NP, the question you asked is hard.

--Bryan Olson

