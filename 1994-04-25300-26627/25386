Path: msuinfo!agate!howland.reston.ans.net!news.intercon.com!news1.digex.net!access3!lehimes
From: lehimes@access.digex.net (Larry Himes)
Newsgroups: sci.crypt
Subject: Re: 40-bit keys for exportable des
Date: 2 Apr 1994 10:37:56 -0500
Organization: Express Access Online Communications, Greenbelt, MD USA
Lines: 28
Message-ID: <lehimes.765300570@access3>
References: <2ncrgu$482@la-jiao.aktis.com> <2ndj41$4df@transfer.stratus.com> <CnK5Mo.4Io@yoda.homer.att.com>
NNTP-Posting-Host: access3.digex.net

smb@research.att.com (Steven Bellovin) writes:

>In article <2ndj41$4df@transfer.stratus.com>, cme@galt.sw.stratus.com (Carl Ellison) writes:
>> In article <2ncrgu$482@la-jiao.aktis.com> don@cam.ov.com (Donald T. Davis) writes:
>> >we'd like to try to get u.s. export approval for
>> >a des-based security product, without massively
>> >modifying our code, and without licensing a
>> >proprietary crypto algorithm. one strategy we're
>> >considering is to reduce the effective key length
>> >by generating 56-bit keys from 40-bit ones, so
>> >that exhaustive key-search will be tractable enough
>> >to satisfy the nsa and the commerce dept.
>> 
Here is a method which I believe may do what you need with a minimum
of overhead:

1. Using a good PRNG, generate an 8-byte pseudo-random vector.
2. Mask out 3 bits in each byte, leaving 5 significant bits (* 8 bytes
   = 40 bits). You might use a different mask value for each byte 
   position, but I don't think this matters much. The "unused" bits may
   be left set to zero.
3. Using the DES engine, self-encrypt the result of step 2. This result 
   is your "derived" data key. Escrow the mask values with NSA and 
   you've got it. 

Larry Himes.
   

