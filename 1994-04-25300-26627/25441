Path: msuinfo!agate!howland.reston.ans.net!pipex!uunet!hotmomma!brent!steve.allen
From: steve.allen@brent.uucp (Steve Allen) 
Newsgroups: sci.crypt
Subject: SecureDrive and precomput
Message-ID: <11755.552.uupcb@brent.uucp>
Date: 2 Apr 94 11:30:00 GMT
Distribution: world
Organization: The Brentwood BBS Harrison, NY  914-381-1600
Reply-To: steve.allen@brent.uucp (Steve Allen) 
Lines: 45

SecureDrive stores a checksum of the key in the boot sector of an
encrypted drive, which enhances data integrity and simplifies
password checking. However, there is a security implication
that I've been thinking about, and it has me a little concerned.
The problem is the ease of a dictionary attack. Any agent that
anticipates mounting an attack on a SecureDrive-encrypted disk can
start computing checksums now, and by essentially following Daniel
Klein's method of starting with most-probable words and letter
combinations, have a pretty good chance of catching someone who
doesn't choose a passphrase *very* carefully. This is a one-time
computation, well suited to distributed, spare-time processing, and
dependent mostly on storage space. Note that the storage
requirements aren't that great (relatively speaking), since all you
need is an index to your standard cracking dictionary and 4 bytes
checksum per entry.
I realized this when I started computing how many *random*
upper-and-lowercase letters it takes to have a password of IDEA's
entropy of 128: You need 23, and that's a pretty fair-sized random
word. If your passphrase isn't random (whose is?) you'll need more
characters.

My math may start to wander at this point, and I would
appreciate anyone who takes the time to set me on the right path--
If the rate of English is 1.2, with a redundancy of 3.5, for
lowercase only, you need a 107-character lowercase English
passphrase else you're wasting IDEA's 128-bit password space,
right? With standard caps and punctuation, how much does the rate
go up? Not much, I suppose.

I guess I'm making a statement and asking a question.
Statement: If you're using a cryptosystem that stores a
passphrase's checksum with its encrypted data, you have to take
greater care in your passphrase selection, in order to subvert a
precomputed dictionary attack.
Question: How much care? Is there a good way to quantify entropy
for different types of passwords, like 2 words separated by special
character, a la CompuServe? How about a random quote from
Bartlett's, with one space replaced by one of the characters on the
top row of the keyboard?
-Steve Allen <73277.620@compuserve.com>
---
. QMPro 1.51 . This information for entertainment purposes only

----
The Brentwood BBS!  12 Nodes  (914)-381-1600
