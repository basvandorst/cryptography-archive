Path: msuinfo!agate!howland.reston.ans.net!EU.net!Germany.EU.net!unibwh.unibw-hamburg.de!news.rrz.uni-hamburg.de!fbihh.informatik.uni-hamburg.de!bontchev
From: bontchev@fbihh.informatik.uni-hamburg.de (Vesselin Bontchev)
Newsgroups: comp.security.misc,alt.security,sci.crypt,alt.2600
Subject: Re: Jitec claim world's first virus-proof computer
Date: 13 Apr 1994 17:00:10 GMT
Organization: University of Hamburg -- Germany
Lines: 103
Message-ID: <2oh8eq$5pk@rzsun02.rrz.uni-hamburg.de>
References: <2o3q7s$319@bmerha64.bnr.ca> <FAIGIN.94Apr8092012@solarium.aero.org> <FAIGIN.94Apr11082118@soldan.aero.org>
NNTP-Posting-Host: fbihh.informatik.uni-hamburg.de
X-Newsreader: TIN [version 1.2 PL2]
Xref: msuinfo comp.security.misc:9244 alt.security:15833 sci.crypt:25943 alt.2600:6831

Daniel P. Faigin (faigin@aero.org) writes:

> > An IBM PC-compatible machine is infectable even if
> > it doesn't run MS-DOS. We've had several reports from IBM PC machines
> > running Xenix being destroyed by Michelangelo on March 6. Boot sector
> > viruses work on BIOS level and could care less about the operating
> > system that is loaded afterwards. Indeed, most non-MS-DOS systems make
> > them unable to spread, once the OS is loaded, but they can't prevent
> > them from infecting the machine and/or causing damage at boot time.

> But it is not the PC machine that does this; it is perfectly possible to
> develop high-trust and high-assurance systems on the 286, 386, 486 and above
> architecture. The original PC architecture might be more problematic. If the

By "IBM PC-compatible" I meant not just compatible archietcture; I
also means compatible BIOS. Sorry, if I was not clear enough about
that. The IBM PC-compatible BIOS is designed to load the first
physical sector of the diskette in the first physical drive at boot
time. It also supports INT 13h calls to access the disks (floppy and
hard) present on the system. This is all a virus needs to activate and
to infect the system, regardless of what OS is loaded later. Indeed,
the loaded OS can use a completely different memory management system
and even its own disk access routines, thuse effectively disabling the
virus from spreading further. But it still cannot prevent it from
infecting that particular machine and from causing damage at boot
time. People who believe that their machines are resistent to, say,
Michelangelo, just because they are running Unix or OS/2 or whatever
on their PCs should get ready for a *big* disappointment. :-)

True, on some of the contemporary BIOSes, the user is able to idicate
that the boot sequence should be attempted from the first physical
*hard* disk first, instead of from the first floppy. This is an
excellent feature and everybody who has it should enable it.

> privilege level mechanism and IOPL facility are used properly, user programs
> (by definition running at a higher PL) cannot make unauthorized modifications
> to various sectors, because the operating system or hardware will restrict
> their actions. 

When the OS featuring all of the above gets loaded, it is already too
late - a boot sector virus might have already infected and/or
destroyed the contents of the hard disk. The most such an OS can do
(if the destructive payload has not wiped it out of the disk) is to
disable the virus, thus preventing it from spreading further.

> Unfortunately, most PC based systems do not provide such restrictions; and
> thus systems based on those systems suffer from the problems.

The problem is in the BIOS, not in the OS. Both Unix and OS/2 have
memory protection, which means that the features you are talking about
above can be implemented on them. The only trouble is that a virus
could infect and destroy before those features are loaded.

> > Yet Unix viruses are perfectly possible, we have three of them here,
> > and some of the first viruses were created by Dr. Fred Cohen on a Unix
> > system. Again Cohen has demonstrated that the Bell-LaPadula security
> > model is unable to stop viruses.

> However, I would contend that such viruses would be limited to infecting the
> software of a single user, assuming a system is set up properly (e.g., proper
> controls on setuid programs, correct restrictions on "root" programs, perhaps
> the use of a SYSTEM MAC label to truly control the ability to write to ROOT
> programs, etc.

Such viruses are indeed limited in their spread, but not to a single
user. If the protections you are talking about are set (i.e., the
admin is unable to run user programs), then the virus cannot get
privileged access, but it still can infect at least those users who
share executable code writable by each other. That is, the virus can
spread in the whole POset in which there is transitive flow of
information.

> I have seen usable implementations of Biba, but you are correct; it shouldn't
> solve the problem of viruses in the same integrity ring. DAC might help a
> little there, but that still restricts the problem to a single user. What you
> need is a combination of three access control basis:

Yup, a combination of the Biba and Bell-LaPadula models.
Unfortunately, this leads to an isolated system - no user can write up
(the Biba restriction) and no user can write down (the Bell-LaPadula
restriction). Still, a virus can still exist in a ring, unless you
also use the DACs to disallow the users in this ring to share
information. But then it means that no user can read or write
anywhere, except in his own account - it is as if nobody else exists
(or is accessible). Not a very useful system, at least not for general
purposes.

> 	   files, etc.)	 Note that even then, you would still be subject to
> 	   compiler attacks such as Dennis Ritchie described.

You mean, Ken Thompson. Nah, that can be prevented easily, because the
attack requires at least a one-time write access to the compiler,
which can be disallowed with the appropriate access controls. Then the
attack is then feasible only if the system has been compromised at
installation time.

Regards,
Vesselin
--
Vesselin Vladimirov Bontchev          Virus Test Center, University of Hamburg
Tel.:+49-40-54715-224, Fax: +49-40-54715-226      Fachbereich Informatik - AGN
< PGP 2.3 public key available on request. > Vogt-Koelln-Strasse 30, rm. 107 C
e-mail: bontchev@fbihh.informatik.uni-hamburg.de        22527 Hamburg, Germany
