Path: msuinfo!agate!howland.reston.ans.net!wupost!waikato!auckland.ac.nz!news
From: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Newsgroups: sci.crypt
Subject: Re: Decompressing ciphertext
Date: 22 Apr 1994 13:20:06 GMT
Organization: University of Auckland
Lines: 29
Sender: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Message-ID: <2p8iu6$bp7@ccu2.auckland.ac.nz>
References: <RICK.1.00121813@telescan.com> <16F9FF70CS86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: cs13.cs.aukuni.ac.nz
Keywords: compression, Huffman, Arithmetic coding
X-Newsreader: NN version 6.5.0 #7 (NOV)

C445585@mizzou1.missouri.edu writes:

In article <RICK.1.00121813@telescan.com>
RICK@telescan.com (Rick F. Hoselton) writes:
 
>Compressing cipher-text may be silly.  But to be REALLY
>silly, one might want to decompress cipher-text!  Using a
>particular model to decompress "nearly random" input (such
>as cipher-text) can generate "made-to-order" frequency
>distributions.  Do you want your cipher-text to look
>(almost) like German plain-text?  Would you like your
>encrypted images to look (almost) like English?

This has already been done - in Bell, Witten, and Cleary's "Text 
Compression" the authors build up a model of the Brown Corpus (a very large
body of English text), and then use it to "decompress" random noise, as an
experiment in seeing how well the compressors can approximate the original
source statistics (the result: Not very well).
 
A few years ago I came across a program which builds a word-based model of a 
sample text and then uses a random number generator to create a vaguely 
realistic but still nonsensical version of the original.  I talked to the 
author about its use for steganography by replacing the RNG with encrypted 
data, but it was written in Prolog (quite a lot of Prolog) which I didn't 
want to mess with.  Certainly it wouldn't be too hard to adapt some 
"travesty generator" to hide encrypted data, but as with most subliminal 
channels the bandwidth is rather low.
 
Peter. 
