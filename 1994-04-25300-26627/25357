Newsgroups: sci.crypt
Path: msuinfo!agate!library.ucla.edu!csulb.edu!csus.edu!netcom.com!mpj
From: mpj@netcom.com (Michael Paul Johnson)
Subject: Re: Encryption Using Huffman Coding
Message-ID: <mpjCnL7I9.IIK@netcom.com>
Organization: NETCOM On-line Communication Services (408 241-9760 guest)
References: <CnKDnt.3vr@chinet.chinet.com>
Date: Fri, 1 Apr 1994 15:39:45 GMT
Lines: 52

schneier@chinet.chinet.com (Bruce Schneier) writes:

>If you take a data file and compress it using Huffman coding techniques,
>you get something that looks random.  Make the coding table the key, and
>the compressed text is now ciphertext.  Although there is no reason to
>believe that this is in any secure, I know of no one who has any idea how
>to cryptanalyze it.

I think I remember looking at that once.  The cryptanalysis technique 
goes something like this:

    1.  Guess the nature of the plain text (i. e. 7-bit ASCII encoded
        English text containing the formula for Coca-Cola, or whatever
        you think might be in the message).

    2.  Construct a sample of plain text with similar statistical
        properties to your guess in step 1.

    3.  Construct a trial decoding table on sample (2) and try it on the
        ciphertext.

    4.  Analyze the resulting _partially_ garbled plain text, and refine
        your guess of the nature of the plain text.  If you are very close
        in your guess, a (possibly short) section of real plain text will
        "show through" at the beginning of the resulting file.

    5.  Repeat steps 1-4 until you are convinced you have valid plain text.

One way to defeat the above type of attack (frustrating step 3) is to use 
an additional key that is used to determine which branch gets the "0" and
which branch gets the "1" when building the decoding table.  Normally, this
assignment is made using a simple rule, like the "upper" branch always 
gets a "1".  This additional key needs to be about as long as the 
decoding table itself, but could be shrunk by computing the second key 
from a shorter key and another algorithm in pseudorandom number generator 
mode.

In other words, the method you just described needs a little bit of 
fortification, now that I just told a whole bunch of people how to break 
it :-).  The above attack isn't fool proof, but it doesn't give me warm 
fuzzy feelings about using that method on data that should be kept private.

Peace to you.

                  ___________________________________________________________
 |\  /| |        |                                                           |
 | \/ |o|        | Michael Paul Johnson  Colorado Catacombs BBS 303-938-9654 |
 |    | | /  _   | mpj@csn.org  ftp:csn.org//mpj/README.MPJ for crypto stuff |
 |    |||/  /_\  | aka mpj@netcom.com mpjohnson@ieee.org mikej@exabyte.com   |
 |    |||\  (    | m.p.johnso@nyx.cs.du.edu CIS 71331,2332 PGP key by finger |
 |    ||| \ \_/  |___________________________________________________________|

