Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!uunet!mnemosyne.cs.du.edu!nyx10!colin
From: colin@nyx10.cs.du.edu (Colin Plumb)
Subject: Re: Q: Security of new encryption-devdriver
Message-ID: <1994Apr6.094921.11558@mnemosyne.cs.du.edu>
X-Disclaimer: Nyx is a public access Unix system run by the University
 	of Denver for the Denver community.  The University has neither
 	control over nor responsibility for the opinions of users.
Sender: usenet@mnemosyne.cs.du.edu (netnews admin account)
Organization: Nyx, Public Access Unix at U. of Denver Math/CS dept.
References: <2nq8d6$kkp@liberator.et.tudelft.nl> <phrCns8Iv.878@netcom.com> <2nru2m$pb0@liberator.et.tudelft.nl>
Date: Wed, 6 Apr 94 09:49:21 GMT
Lines: 67

In article <2nru2m$pb0@liberator.et.tudelft.nl>,
Arthur Helwig <A.W.S.Helwig@ET.TUDelft.NL> wrote:
>Paul Rubin (phr@netcom.com) wrote:
>> Nobody knows how secure IDEA is (or those who do, aren't talking).
>> The inventors have apparently recommended doubling the number of
>> rounds, though.  But IDEA is patented, not so good in a GPL program
>> anyway.  Why not use MDC or double or triple DES?

I haven't heard a double-the-rounds suggestion.  I remember some
other people saying they sort of liked the idea, but I haven't
heard that lately, after recent attack efforts.  Personally, I've
suggested 4-round IDEA for casual applications.  There is still no known
attack better than brute force, so it seems unlikely to fall below
the strength of DES.  8-round IDEA is pretty safe, IMHO.

Triple-DES is godawful slow, is why not to use that.  IDEA is faster
than single DES.

MDC is nice.  It needs more analysis, but there are no obvious holes,
it's unpatented, and it's damn fast.

>I understand that there is no fee involved for noncommercial use of IDEA.
>And I had the sources of IDEA at hand, so it seemed easiest to use IDEA.
>I don't want to run into legal trouble, so I think I'll keep away from DES -
>I'm not a US-citizen...
>I'm not familiar with MDC. Anything known on security? Is it free for
>(noncommercial) use? Are sources available?

Yes, IDEA is free for noncommercial use.  MDC is simple.  You take
your favourite message-digest algorithm, such as MD5 or SHA.  It
is based on a Transform function.  Consider that function to transform
16 or 20 bytes of pliantext to ciphertext with a 64-byte key.  The
algorithm is not invertible, so you're stuck with CFB mode.  You can
do the key expansion and add the Mysterious Constants ahead of time
in a key-scheduling pass.

>> >We take the plain MD5-hash of the user's password as a key for the
>> >IDEA-algorithm. Question: is this secure?
>> Hashing just once means the hash can be done very fast, which
>> assists in dictionary attacks.  I'd say salt the password with
>> a random number, and hash a few thousand times (perhaps xor'ing
>> in the output of a prng each hash) to slow down the password crunching.
>
>That sounds like a good idea... thanks for the suggestion!

Yes, make sure you salt the passphrase to prevent precomputed dictionaries
(at least 32 bits if salt), and that you use a fairly slow algorithm,
preferably with an iteration count stored in clear so you can change it
in future without breaking anything.
>
>> >IV'S AND STUFF
>> >We use a different IV for each volume created. This IV is generated by
>> >the standard random() function in C (after calling randomize() first, of
>> >course). Question: is there a point in generating IV's with a really
>> >strong random number generator? I think it isn't, because the IV is
>> >known to the attacker anyway (see next paragraph).
>> The random() function can be really bad, it might not even generate
>> all possible IV's with equal probability.  It's simple enough to
>> do something better, so why not?

Well, you should at least write your own random() function.  OTherwise,
you can't change compilers, libraries, or anything.  But see the SFS docs
for a good idea on IV selection.  I'm tooting my own horn, because I
thought it up and I'm rather proud of it, but it's explained in the docs
and I can't be bothered to write up an explanation here.
-- 
	-Colin
