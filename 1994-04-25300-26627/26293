Newsgroups: sci.crypt
Path: msuinfo!agate!dog.ee.lbl.gov!ihnp4.ucsd.edu!pacbell.com!amdahl!netcomsv!netcom.com!jktaber
From: jktaber@netcom.com (John K. Taber)
Subject: Re: Yet Another Secure? RNG
Message-ID: <jktaberCoqt4G.Izu@netcom.com>
Organization: None
X-Newsreader: TIN [version 1.2 PL1]
References: <9404190045.AA25917@redwood.csl.sri.com>
Date: Sun, 24 Apr 1994 02:48:16 GMT
Lines: 69

Peter K. Boucher (boucher@csl.sri.com) wrote:
: In article <jktaberCoDrK5.7Gs@netcom.com>, 
: jktaber@netcom.com (John K. Taber) writes:

: [deletia...]


: |> I think this is the best I can do to make this prng "secure".  Does
: |> anybody see any weaknesses?

: I'm not sure this is a ``weakness,'' but you're generating 17 ``random'' 
: bytes and throwing away the first 16.  You could output the sum of all 
: 17, or find another way to use them to enhance the randomness of the 
: output.

No.  Unless I screwed up in the C, it should be outputing the sum of all
17 sums.

: |> There were suggestions to lengthen the rotors.  I disagree.  Lengthening
: |> the rotors makes it that much harder to diffuse changes throughout the
: |> random number generator.  It's not the period that is the problem.  It's
: |> not the shortness of the rotors that is the problem.  The problem is
: |> making the rng complexely dependent on a small change to itself.

: You've got 17*7 = 119 divisions (modulo operators) per byte of output.  
: This will be R-E-A-L-L-Y S-L-O-W...  There's simply no reason to index 
: the rotors or v this way, unless you mean this as pseudo-code.

This is pseudo-code.  The 1st thing is to get the prng "secure".  Then
we can look at ways to improve efficiency.  

: Here's a version that addresses your concerns and is only a little slow 
: (it's almost as fast as my version of M).  I added 2 more rotors, but, 
: still, only 4 of them go into the output.  The other two are used to 
: mangle the output, and to update the state.

But if the changes fed back into the 1st four rotors don't also change
the last 2 rotors, we are not massively changing the entire "seed" of
the rng.  I can't do the math, but something tells me that not changing
the mangle rotors is a weakness.

To me, the point of this exercise is not to come up with a workable
secure rng or encryption method -- although that would be nice -- but
to try to understand *how* to do it.  Peter Bosch started this off
with the idea of an rng that was non-linear (a kind of table lookup)
and with a long period.  That was not enough.  Paul Rubin showed how
to recover the seed with simultaneous linear equations.

My idea was to change the rng with each byte it generates to defeat
simultaneous linear equations.  That was not enough.  John Kelsey
pointed out that the bits in the rng seed didn't change fast enough
to thwart analysis.  I don't know if he convinced you but he convinced
me.  

So, with non-linear, and long period, I'm getting the idea we need
massive diffusion of changes.  That is a pre-req for
encryption.  The thinking is simple -- to solve even one bit,
the analyst must also solve all bits.  The reason for this pre-req
must be to prevent piecemeal attacks.

We don't seem to be eliciting much interest, so maybe this rng is
hopelessly flawed or incomprehensible.

Sorry not to reply sooner.
-- 
John K. Taber                                 jktaber@netcom.com
========================================================================
Avoid taking a definite stand on great public issues either in the Senate
or before the people.  Bend your energies towards making friends of key
men in all classes of voters.  -- advice to Cicero from his brother and
campaign manager, Quintus.

