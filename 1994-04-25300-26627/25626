Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!uunet!mnemosyne.cs.du.edu!nyx10!colin
From: colin@nyx10.cs.du.edu (Colin Plumb)
Subject: Re: Searching for primes
Message-ID: <1994Apr7.072519.8227@mnemosyne.cs.du.edu>
X-Disclaimer: Nyx is a public access Unix system run by the University
 	of Denver for the Denver community.  The University has neither
 	control over nor responsibility for the opinions of users.
Sender: usenet@mnemosyne.cs.du.edu (netnews admin account)
Organization: Nyx, Public Access Unix at U. of Denver Math/CS dept.
References: <1994Apr3.224626.13805@mnemosyne.cs.du.edu> <2ns8l0$ikq@linus.mitre.org> <1994Apr6.092808.25303@mnemosyne.cs.du.edu> <2numd7$qcd@linus.mitre.org>
Date: Thu, 7 Apr 94 07:25:19 GMT
Lines: 129

In article <2numd7$qcd@linus.mitre.org>,
Robert D. Silverman <bs@gauss.mitre.org> wrote:
>In article <1994Apr6.092808.25303@mnemosyne.cs.du.edu> colin@nyx10.cs.du.edu (Colin Plumb) writes:
>:In article <2ns8l0$ikq@linus.mitre.org>,
>:Robert D. Silverman <bs@gauss.mitre.org> wrote:
>No problem. But 160 bits is still way to big for Pollard P-1 to work,
>so you need not worry. [i.e. if your prime p  has p-1 divisible by
>a 160 bit prime, P-1 will NEVER find it].

Oh, yes, I'm aware of that.

>This is correct.  2 weeds out half. 3 now weeds out
>1/3 *of the remainder*, but only an additional 1/6 of the original set.
>I took your "weed out 1/p" to mean that each prime p weeds out an
>additional 1/p from the original set of candidates and NOT 1/p from
>the candidates that still remain...  "Fuzzy English"......
>I took "each weeds out 1/p" to mean that after sieving out 2,3,5,...P,
>one had eliminated 1/2 + 1/3 + 1/5 +1/7 + ... 1/P  of the original
>candidates. And that is not true.

Well, obviously.  1/2+1/3+1/5 = 31/30.  There aren't many primes left after
that.

>Please say exactly what you are doing. If I take the candidate list
>{n, n+1, n+2, n+3, n+4  .....  n+h}   and divide n by 2,3,5,7....
>looking for a zero remainder, then divide n+1 by 2,3,5,7...  etc.
>I am doing trial division.

That is what PGP does and I was thinking of doing.
I'm too lazy to serive the math, but doing trial division by every
prime less than 20,000 (2261 of them) involves an average of 75.923
trials per number.  And 2.833% of the numbers pass all these trial
divisions.

>If I compute  h1 = n mod 2 ,  h2 = n mod 3, h3 = n mod 5, etc.
>then set up an array of locations x[0], x[1], x[2], ... x[h]  and
>starting at x[2-h1] I put a '1' in x[2-h1], x[2-h1+2], x[2-h1+4]... and
>a 1 in x[3-h2], x[3-h2+3], x[3-h2+6]...  etc.   I am SIEVING out those
>n+i  in my list that are divisible by 2,3,5,...
>
>This does not involve trial division.

H'm... you're right, for high primes (where trial division is inefficent
because any given test weeds out so few possibilities), this is much more
efficient.  The annoying thing is that you have to decide on how big to
make your sieve ahead of time; you can't just continue until you
succeed.  And the low numbers (2, 3, 5) use up a lot of time.

Now, you could combine things.  Make a table of the offsets modulo 210 that
are not divisible by 2, 3, 5 or 7.  Then sieve by 11 and up, then take the
remainder mod 210 and use the table of offsets to guide your scan of
the sieve looking for possibilities.  That way, you can avoid the most
time-consuning early sieve steps.  And the cost of making the sieve very
large would not be so great.

You can easily skip even storing the even numbers in the sieve.  You
can avoid multiples of 3 as well by breaking the table into two and
storing 6n+1 in one and 6n-1 in the other.  Avoiding multiples of 5 as
well requires breaking the table into 8, one for each of
30n+{1,7,11,13,17,19,23,29}.  That cuts the number of values stored from
10/30 to 8/30.  It probably isn't worthwhile for the complexity.

>The total cost for this is O(h loglog P) where P is the largest
>candidate divisor. You can reduce this using Brent's "wheel" version
>of the sieve to essentially O(h(1 + epsilon)).

Can you describe this variation?  Not that log log P is that big a penalty...

> 
>When done with a sieve, the cost to test ALL the numbers in the
>range [n, n+h] for divisibility by p  is h/p. That is why sieve
>based factoring algorithms are so effective.  

The only annoying this is that (as far as I can tell so far), you have to
decide on h before starting.  If you're loking for one prime, that gets
a bit wasteful.

On the other hand, the average number of times you mark any given number
as composite is 2.55 (I wonder if that sequence $\sum_i^\infty 1/p_i$
converges?  If so, does it converge to e or something lower?), so even the
first few doesn't make it too bd...

I'll have to code this up and compare speed.  Thank you for getting me
out of a conceptual rut!  Also, by picking a range, finding all the
primes in that range, and choosing one at random (well, really, you try
candidates at random), I think that would slightly improve the
randomness of the primes.  For example, the second of a pair of twin
primes would become much more likely.

>:Anyway, now that you've torn this parat, maybe you can take a crack
>:at my next piece on computing multiplicative inverses...

>When I see it...

>Basically to compute  1/a  mod p  takes O(log p) multiplications mod p
>when using a variation of Euclid's algorithm. If p is a multi-precise
>number (very big, say), there are FFT techniques to reduce the cost,
>or Lehmer's binary method.  See Knuth Vol. 2

Wow, I'm embarassed.  I knew about the binary algorithm (heck, I reinvented
it once when I forgot Euclid's), but I had put it out of my mind.
And it seems that despite much browsing through Knuth, I had never stopped
and looked at Lehmer's method, which is DAMN nifty.  (Everyone reading,
have a look at Knuth Vol 2 section 4.5.2, algorithm L.  Discussion starts
on page 327 in the second edition.)

I don't see the multiplication variation you mention or the FFT
techniques.  Assuming that the FFT is only useful for the same range
that appreciates Schoenhage-Strassen multiplication, I think I can
disregard that, but if the variation that uses multiplications isn't
the binary one, then I'd like to hear about it.  Do you mind explaining
it?

>-- 
>Bob Silverman
>These are my opinions and not MITRE's.
>Mitre Corporation, Bedford, MA 01730
>"You can lead a horse's ass to knowledge, but you can't make him think"

Well, I think you're making me think.  But thank you very much for getting
me unstuck from ruts I've been stuck in.

(If I also optimize modulo calculations by combining small primes into
a number less than the wordsize, I can significantly reduce that cost,
too.)

I hope folks will tell me if this discussion frifts from signal into noise.
-- 
	-Colin
