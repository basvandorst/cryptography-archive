Path: msuinfo!agate!howland.reston.ans.net!gatech!newsxfer.itd.umich.edu!gumby!yale!yale.edu!nigel.msen.com!zib-berlin.de!news.th-darmstadt.de!terra.wiwi.uni-frankfurt.de!zeus.rbi.informatik.uni-frankfurt.de!news.dfn.de!news.dfn.de!news.dkrz.de!news.rrz.uni-hamburg.de!fbihh.informatik.uni-hamburg.de!bontchev
From: bontchev@fbihh.informatik.uni-hamburg.de (Vesselin Bontchev)
Newsgroups: comp.security.misc,alt.security,sci.crypt,alt.2600
Subject: Re: Jitec claim world's first virus-proof computer
Followup-To: comp.security.misc,alt.security,sci.crypt,alt.2600
Date: 15 Apr 1994 11:10:30 GMT
Organization: University of Hamburg -- Germany
Lines: 48
Message-ID: <2olsn6$jb5@rzsun02.rrz.uni-hamburg.de>
References: <2o3q7s$319@bmerha64.bnr.ca> <FAIGIN.94Apr8092012@solarium.aero.org> <FAIGIN.94Apr14081828@soldan.aero.org>
NNTP-Posting-Host: fbihh.informatik.uni-hamburg.de
X-Newsreader: TIN [version 1.2 PL2]
Xref: msuinfo comp.security.misc:9297 alt.security:15875 sci.crypt:26054 alt.2600:7010

Daniel P. Faigin (faigin@aero.org) writes:

> > Such viruses are indeed limited in their spread, but not to a single
> > user. If the protections you are talking about are set (i.e., the
> > admin is unable to run user programs), then the virus cannot get
> > privileged access, but it still can infect at least those users who
> > share executable code writable by each other. 

> Having executable code that is writable by someone other than the owner of the
> executable file is something that doesn't make sense, anyway. User guideance
> regarding the setting of discretionary permissions, in the lack of strong
> itegrity controls, should direct that executables be writable only by their
> owners (e.g., in unix parlance rwx--x--x)

No, no, I wasn't clear again, sorry. "Writable by each other" is not
the correct expression. What I mean is: if a user can create (or write
to) a program which another user can execute, then a virus is able to
spread from the first user to the second. Usually it is also the other
way around - the second user can create a program which the first user
can execute - that's why I said "by each other", but I admit that it
is not precise.

BTW, this includes the situation you describe above. If all users are
able to create only rwx--x--x files, then Alice can write a virus, let
it infect a game she has written, and tell Bob: "look what a cool game
I wrote". The permissions even will not permit Bob to examine the file
and check it for viruses, but will let him execute it. From that
point, the virus becomes able to infect all executable programs that
belong to Bob, plus all those to which he has write access (hopefully
none besides those in the first set), plus all those to which he as
the right to chmod them to writable by him. Then the virus can spread
to third user, Clark, when he executes any of Bob's programs, and so
on, until the full POset of users between whom a transitive
information flow exists.

This is the main problem with DACs - the program that runs has the
rights of the user who has executed it (SUID stuff excluded). Only
MACs can do better here, and you need integrity-based MACs (i.e., the
Biba model), in order to stop viruses, and even then you can only
limit them to a single integrity ring or a POset.

Regards,
Vesselin
--
Vesselin Vladimirov Bontchev          Virus Test Center, University of Hamburg
Tel.:+49-40-54715-224, Fax: +49-40-54715-226      Fachbereich Informatik - AGN
< PGP 2.3 public key available on request. > Vogt-Koelln-Strasse 30, rm. 107 C
e-mail: bontchev@fbihh.informatik.uni-hamburg.de        22527 Hamburg, Germany
