Newsgroups: sci.crypt
From: jscholes@kalva.demon.co.uk (John Scholes)
Path: msuinfo!agate!howland.reston.ans.net!EU.net!uknet!demon!kalva.demon.co.uk!jscholes
Subject: Re: PGP uses Fermat to test primes?!
References: <Co9Mp0.n5@cs.dal.ca> <766411614snz@kalva.demon.co.uk>
Reply-To: jscholes@kalva.demon.co.uk
X-Newsreader: Demon Internet Simple News v1.27
Lines: 40
Date: Sun, 17 Apr 1994 16:01:21 +0000
Message-ID: <766598481snz@kalva.demon.co.uk>
Sender: usenet@demon.co.uk

Hmmm...

I have looked a bit more carefully at this now. It seems to me that

(A)  PGP first sieves out anything with a prime factor below 2004 and then
(B)  tests if x^(N-1) = 1 mod N for 4 x's

The source is not that easy to follow (because of numerous references
to other files etc), so it would be nice if someone more familiar
with it could confirm this. But let us assume it is true.

The basic maths says

(C) if N is not prime and not a Carmichael no. then at least half the
x's give x^(N-1) not 1 mod N, so at least 15/16 non-primes will fail one
or more of 4 randomly chosen x's (provided there are negligible
Carmichael nos. - which is not proven).

Now about one number in 230 is prime for numbers around 100 decimal
digits and the sieve (A) rules out about 14/15. (B) then rules out
at least a further 15/16 of the non-primes, so we are left with
the primes and at most 1/240 of the non-primes. 

In other words if all we know is (C), then PGP has about a 50-50 chance
of coming up with a prime (or worse if we do not assume that the 
proportion of Carmichael nos. is negligible).

Phil claims in the source comments that actually (C) is a weak result
and that far more than 50% fail for a given x. 

There seems to be some empirical support for this. For example, I 
just picked (at random) N=product of two primes 9421 x 9907 (both
bigger than his sieve to be fair) and found that x^(N-1) is not 1
for x up to 25000 (and possibly way beyond, but I got tired of
checking).

But it is not proven as far as I know, so it would seem sensible
to use a different prime generator.
-- 
John Scholes
