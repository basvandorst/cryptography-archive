Path: msuinfo!agate!dog.ee.lbl.gov!ihnp4.ucsd.edu!usc!howland.reston.ans.net!EU.net!ieunet!ieunet!vax1.dcu.ie!75001969
From: 75001969@vax1.dcu.ie
Newsgroups: sci.crypt
Subject: Re: Searching for primes
Message-ID: <1994Apr12.183320.728@vax1.dcu.ie>
Date: 12 Apr 94 18:33:19 GMT
References: <1994Apr6.092808.25303@mnemosyne.cs.du.edu> <2numd7$qcd@linus.mitre.org>  <2odko3$jsf@qualcomm.com>
Distribution: world
Lines: 34

In article <2odko3$jsf@qualcomm.com>, karn@unix.ka9q.ampr.org (Phil Karn) writes:
> I'm following this discussion with interest because I'm currently
> generating some prime moduli for use with Diffie-Hellman. (DH is now
> included in RSAREF, so I'm using it as the basis of an experimental IP
> security protocol).
> 
> My understanding of the criteria for a DH modulus p is that both p and
> (p-1)/2 should be prime, i.e, p should be a "strong" prime.
> 
> I know that strong primes are no longer thought to be required for RSA
> key generation, but I understand that they're still a good idea for
> DH, which depends on the discrete logarithm problem rather than
> factoring (see LaMacchia's and Odlyzko's 1991 paper on discrete
> logarithms, URL http://martigny.ai.mit.edu/~bal/field.ps).
> 
> Is this still the current consensus?
> 
> Phil
> 

The very practical Pollard rho method for finding discrete logs has
a complexity of O(sqrt(p_L)), where p_L is the largest factor of p-1. So
choosing (p-1)/2 prime seems like a good idea. 

To speed things up a bit, try making the prime (p-1)/2 = 1 mod 4. Now you can
conveniently use g=2 as a primitive root. Also use 160 bit exponents. The
complexity of finding discrete logs using most methods is a function of
the size of the modulus, not the exponent. The best way to attack a small
exponent is to use Pollards's Kangaroos, which has complexity 2^80 for a 
160-bit exponemt (I think. See J.M. Pollard's brilliant 1978 paper in
Math Comp. Vol 32, p918-924)

Michael Scott

