Path: msuinfo!agate!howland.reston.ans.net!wupost!waikato!auckland.ac.nz!pgut01.cs.aukuni.ac.nz
From: pgut01@cs.aukuni.ac.nz (Peter Gutmann)
Newsgroups: sci.crypt
Subject: Re: SecureDrive and precomput
Date: 4 Apr 1994 12:29:40 GMT
Organization: University of Auckland
Lines: 39
Message-ID: <2np17k$2mb@ccu2.auckland.ac.nz>
References: <11755.552.uupcb@brent.uucp>
NNTP-Posting-Host: cs13.cs.aukuni.ac.nz
X-Newsreader: NN version 6.5.0 #7 (NOV)

steve.allen@brent.uucp (Steve Allen)  writes:

>SecureDrive stores a checksum of the key in the boot sector of an encrypted
>drive, which enhances data integrity and simplifies password checking.
>However, there is a security implication that I've been thinking about, and it
>has me a little concerned. The problem is the ease of a dictionary attack. Any
>agent that anticipates mounting an attack on a SecureDrive-encrypted disk can
>start computing checksums now, and by essentially following Daniel Klein's
>method of starting with most-probable words and letter combinations, have a
>pretty good chance of catching someone who doesn't choose a passphrase *very*
>carefully. This is a one-time computation, well suited to distributed,
>spare-time processing, and dependent mostly on storage space. Note that the
>storage requirements aren't that great (relatively speaking), since all you
>need is an index to your standard cracking dictionary and 4 bytes checksum per
>entry.
 
Coming from an evil subversive commie-type country which isn't allowed to look
at US encryption technology :-), I don't have a copy of SecureDrive, but I
assume it uses the same principles as my own SFS, which means it uses an IV
(initialization vector) for the encrypted disk key.  For IDEA, I presume this
will be a 64-bit value (SFS uses a 160-bit value).  In both cases they match
the cipher block size, there's nothing magic about these particular values.
 
What this means is that for every single password you can have 2^64 or 2^160
different disk keys (the Unix password-checking routines use a 12-bit salt for
the same purpose, giving 4096 different values per password).  For SecureDrive
and SFS (but probably not Unix) it's therefore completely impractical to store
the precomputed values for even a single password.
 
In addition, SFS (and I think SecureDrive as well) iterate the key setup a
great many many times.  The SFS setup was tuned to take 1/2s on a 10K dhrystone
machine, and to be difficult to implement easily using current hardware.  This
makes any form of dictionary attack painfully slow.
 
There are a lot of ways to attack SecureDrive and SFS, but using a dictionary
attack is one of the more difficult ones, as both programs were specifically
designed to resist this.
 
Peter.
