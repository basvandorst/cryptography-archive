Newsgroups: sci.crypt
Path: msuinfo!harbinger.cc.monash.edu.au!yeshua.marcam.com!MathWorks.Com!europa.eng.gtefsd.com!howland.reston.ans.net!cs.utexas.edu!swrinde!ihnp4.ucsd.edu!pacbell.com!att-out!nntpa!big.att.com!mab
From: mab@research.att.com (Matt Blaze)
Subject: Re: Good Key Escrow (was: deceased co-worker's documents)
Message-ID: <mab.767048271@big.att.com>
Originator: mab@merckx
Sender: news@nntpa.cb.att.com (Netnews Administration)
Nntp-Posting-Host: merckx.l1135.att.com
Reply-To: mab@research.att.com
Organization: AT&T Bell Labs
References: <2ou569$7fr@usenet.INS.CWRU.Edu> <lou.767035616@cadence.com>
Date: Fri, 22 Apr 1994 20:57:51 GMT
Lines: 57

lou@Cadence.COM (Louis K. Scheffer) writes:
>al676@cleveland.Freenet.Edu (Doug Lowman) writes:

>>I need some pointers to information about bypassing the password
>>protection set on Word (2.0c) For Windows documents.  A co-worker
>>died suddenly last month and we have no way of recovering the
>>contents of her documents without some way to decrypt or bypass
>>the password protection on the documents.

>This is one of the few cases where key escrow would be a good idea (as
>opposed to the Clipper proposal).  It would be useful for companies to
>have an encryption package that (for example), encrypted a file and
>then sent (perhaps by email protected by public key) a set of escrow
>keys to two separate places.  Then if the employee quits, or dies, or
>falls into a coma, the data can be recovered.

>This would be especially useful when combined with email.  The traditional
>'solution', (use weak encryption such as "crypt") fails very badly in the
>email case.  The strong encryption solution will fail if no one can cover
>your job if you cannot.  With key escrow, you could use the strongest
>methods for the portion of the transfer most likely to be intercepted.

>   -Lou Scheffer

Agreed; keys used to protect stored data are "different" from those
used to protect communication traffic in transit.  The former have
longer lifetimes and more serious consequences when keys are lost.
"Clipper-style" key escrow really only addresses third-party (law
enforcement) access to encrypted communication links; it's hard to
imagine a scenario in which one of the regular parties to the traffic
would ever desire the escrowed key for their own use - if one party
loses the key, they can just rekey and start over.  In an encrypted
storage system, on the other hand, if the key is lost, so is any data
that were previously encrypted with it.  This is a significant barrier
to the deployment of file encryption in "serious" business applications.
The risk of rendering data unavailable to authorized users often
outweighs the risk of unauthorized disclosure.

I built a smartcard-based system that addresses this problem in an
encrypted Unix file system (my CFS system).  The basic idea is that
when you create a key you also make a copy of it on a smartcard.  The
smartcard can be given to a trusted "escrow agent" who can use it to
decrypt files in emergencies when needed.  The nice thing about using a
smartcard for the escrow copy is that the card itself acts as a secure
crypto-engine, decrypting files without actually revealing the key to
the escrow user.  The card also keeps a record of its use that can be
audited later, such as when the card is returned or during periodic
security audits.

A paper describing this system will appear in the Summer USENIX
technical conference this June in Boston.  A PostScript preprint is
available by email from the cfs-users archive; send an email message to
cfs-users-request@research.att.com with "get cfs-users cfskey.ps" in
the message body, e.g.:
  echo get cfs-users cfskey.ps | mail cfs-users-request@research.att.com

-matt
