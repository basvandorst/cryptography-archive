Newsgroups: sci.crypt
Path: msuinfo!agate!ames!elroy.jpl.nasa.gov!sdd.hp.com!vixen.cso.uiuc.edu!howland.reston.ans.net!EU.net!uknet!comlab.ox.ac.uk!pcl
From: pcl@foo.oucs.ox.ac.uk (Paul C Leyland)
Subject: Re: PUZZLE or exercise with phi-test
Message-ID: <PCL.94Apr18164357@foo.oucs.ox.ac.uk>
In-reply-to: straits@netcom.com's message of Thu, 14 Apr 1994 07:17:51 GMT
References: <straitsCo8Mxs.5qn@netcom.com>
Date: 18 Apr 1994 15:43:57 GMT
Lines: 92

In article <straitsCo8Mxs.5qn@netcom.com> straits@netcom.com (Stewart C. Strait) writes:

   The cryptosystem used below can be broken with unknown plaintext
   using the phi test together with techniques familiar from the
   Vigenere cipher.

Description deleted:

   The puzzle itself:

   Plaintext is public domain, English, and may
   begin or end in mid-word.

   straits.3.002; VIGROTOR; 1024 Ciphertext letters.
   ACGUR UMWKH HIARZ RWNTW SRNFG LLMVB LDNQG FCPYB ZICUR YUDKG MDDQJ XKSMN

Remainder of ciphertext deleted.

Solved it.  I used exhaustive search on the first 32 bytes of the
message, i.e. 6 key characters.  A psychological (rather than
cryptanalytical) optimization was to run from Z down to A as I guessed
that Strait would expect people to use exhaustive search in the naive
manner 8-) The key popped out quite quickly.

For each proposed decryption, I compared the trigram statistics
against those for a large body of English, with the optimization that
any decryption with a trigram that did not appear in my tables was
instantly rejected.  I had to build my own trigram tables: I used the
Oxford Text Archive to help me.  My tables are now built from 10Mb of
the writings of Trollope, possibly not the best of sources.  After an
initial run to see what sort of values were reasonable, I printed out
all those which exceeded a threshold and scanned the output.

The key begins VQXWWX and the plaintext FROM ANY STATE NO PREFERENCE
SHALL BEG

Digging out the rest of the text was then very easy: for each new
keyletter, write out the next block of text and all 26 decryptions;
pick the obvious one.

Nice challenge: took me a few hours, largely because I had to write
all my code from scratch.  At least I have a nice trigram analyser in
my toolbox now.

Here's the trigram statistics code:

int tri_stats (len, s)
char *s;
int len;
{
   int j, c1, c2, c3;
   int sum = 0;
   int v;

   c1 = s[0];
   c2 = s[1];
   j = 2;

   while (j < len)
   {
      c3 = s[j++];
      v = tris[c1][c2][c3];
      if (v == 0) return 0;
      sum += v;
      c1 = c2;
      c2 = c3;
   }
   return sum;
}

read_tris ()
{
   int c1, c2, c3;

   for (c1=0; c1 < 26; c1++)
   for (c2=0; c2 < 26; c2++)
   for (c3=0; c3 < 26; c3++)
   {
      scanf ("%d", &(tris[c1][c2][c3]));
   }
}

Please continue to post challenges of this level of difficulty.

Paul

--
Paul Leyland <pcl@black.ox.ac.uk>        | Hanging on in quiet desperation is
Oxford University Computing Services     |     the English way.
13 Banbury Road, Oxford, OX2 6NN, UK     | The time is gone, the song is over.
Tel: +44-865-273200  Fax: +44-865-273275 | Thought I'd something more to say.
Finger pcl@black.ox.ac.uk for PGP key    |
