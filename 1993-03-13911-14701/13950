Path: msuinfo!uwm.edu!zaphod.mps.ohio-state.edu!howland.reston.ans.net!europa.eng.gtefsd.com!emory!ogicse!das-news.harvard.edu!cantaloupe.srv.cs.cmu.edu!PLAY.TRUST.CS.CMU.EDU!bsy
From: bsy+@CS.CMU.EDU (Bennet Yee)
Newsgroups: sci.crypt
Subject: Re: XOR + CRC for authentication?? Any good?
Message-ID: <C39zCu.M8G.2@cs.cmu.edu>
Date: 2 Mar 93 18:58:01 GMT
Article-I.D.: cs.C39zCu.M8G.2
References: <731008188.11802@minster.york.ac.uk> <1993Mar1.221826.23587@leland.Stanford.EDU>
Sender: news@cs.cmu.edu (Usenet News System)
Reply-To: bsy+@cs.cmu.edu
Organization: Cranberry Melon, School of Cucumber Science
Lines: 62
Nntp-Posting-Host: play.trust.cs.cmu.edu

In article <1993Mar1.221826.23587@leland.Stanford.EDU>, kocherp@leland.Stanford.EDU (Paul Carl Kocher) writes:
+In article <731008188.11802@minster.york.ac.uk> george@minster.york.ac.uk writes:
+>I've been looking at CRC's used for burst error detection
+>recently and was wondering how good they would be for
+>constructing a message digest.
+
+Ordinary CRC polynomials are definitely "computationally feasable" 
+to break without brute-force, making this scheme insecure.
+
+For example, a simple program I wrote appends 32 bits to a file to
+make it have any specified CRC32.  The code takes a negligible amount
+of time to run, and could be modified to support other CRC sizes,
+different polynomials, or preprocessing of the message when
+picking the 32 bits to add.  Encrypting the CRC doesn't help, 
+since (for example) an attacker could still replace the actual 
+message with a forgery with the same CRC.
+
+In short, I would strongly recommend that CRCs be used only as 
+intended -- as a fast way to detect of *random* errors.  For data
+security, more sophistocated checksums (e.g. MD5, etc.) should to
+be used.

``Intended'' is a bit of a loaded term here.  While you are perfectly
correct about the use of ``ordinary'' CRC polynomials, there -is- a
use of polynomial residues that can be useful in some communcation
systems.

The Karp-Rabin fingerprint algorithm is essentially mod'ing out using
random irreducible polynomials, and have useful security properties.
There are an exponential number of irreducible polynomials (on max
degree), and this can be used to provide relatively cheap security --
mod'ing out by polynomials is much more efficiently implemented than
MD5 or MDC.

What do we do?  Just as we digest a message and use public key systems
to encrypt/sign the digest in MD5+RSA, for example, we chose a random
irreducible polynomial, obtain the residue of the message, and encrypt
and sign -both- the irreducible and residue polynomials for the
intended recipient.  This encrypted and signed cryptographic checksum
is sent along with the message (which may be in the clear).  The
sender and receiver must trust each other not to deny the sending of a
real message nor to forge the reception of a fake one -- this system
suffices against tampering by outsiders, but not the peers in the
communication: a successful attack requires correctly guessing the
modulus used.  Easy for the sender/receiver, exponentially difficult
for anyone else.

The basic properties that such a system provides is different than
MD5, of course: we must assume that undeniable signing is not
important to our needs, and that potential forgeability by the
intended recipient is not a concern either.  If either -is- a problem,
then you shouldn't use it.  If it isn't, then this wins
performance-wise -and- it also wins in the sense that there are fewer
cryptographic assumptions: we don't -know- whether one-way hash
functions exist, and we -certainly- don't know whether MD5 is one
such.

-bsy

-- 
Bennet S. Yee		Phone: +1 412 268-7571		Email: bsy+@cs.cmu.edu
School of CS, Carnegie Mellon, 5000 Forbes Ave, Pittsburgh, PA 15213-3891
