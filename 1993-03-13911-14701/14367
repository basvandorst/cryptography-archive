Newsgroups: alt.security.pgp,alt.security.ripem,sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!usc!howland.reston.ans.net!newsserver.jvnc.net!yale.edu!ira.uka.de!rz.uni-karlsruhe.de!stepsun.uni-kl.de!uklirb!posthorn!vier!neuhaus
From: neuhaus@vier.informatik.uni-kl.de (Stephan Neuhaus (HiWi Mattern))
Subject: Re: pgp 'stacker' equivalent
Message-ID: <neuhaus.732806329@vier>
Sender: news@posthorn.informatik.uni-kl.de (News system account)
Nntp-Posting-Host: vier.informatik.uni-kl.de
Reply-To: neuhaus@informatik.uni-kl.de
Organization: University of Kaiserslautern, Germany
References: <1594@eouk5.eoe.co.uk> <C463K0.2zG@world.std.com>
Date: Mon, 22 Mar 1993 13:18:49 GMT
Lines: 47
Xref: msuinfo alt.security.pgp:2027 alt.security.ripem:180 sci.crypt:14367

ariel@world.std.com (Robert L Ullmann) writes:

>Note that a pass-phrase derived key is not the same as a true-random
>key for a symmetric cipher (e.g. DES or IDEA).

I don't see why.  Assuming that you have a good 128-bit hashing
algorithm (with all the rumors of MD5 being cracked floating around),
the hash values from pass phrases should in all respects behave like
128-bit random numbers.

>In particular, with
>a known plaintext attack, the fact that the key is known to be derived
>from a (human-generated) pass-phrase can significantly reduce the
>space that needs to be searched.

I beg to disagree.  Pass*word* attacks might be feasible, but
pass-phrase attacks probably aren't.  The search space is just too
large.  (Does ``known plaintext'' mean that, since you know the hash
function, you can hash as often as you want?)

>In practice, this usually reduces to near-triviality, given the
>average human's idea of what an "unguessable" password/phrase is.

Would this mean that, if I gave you an MD5 hash of a *common* English
phrase no more than 80 characters long, you would be able to
reverse-engineer the phrase just from the hash?  (or, alternatively,
can find a string of bits that hash to the same value?)  I can provide
a challenge hash for you to crack.

>In the hands of an expert user, it will work well of course. But then,
>an expert user won't have the slightest difficulty using a true-random
>DES or IDEA key directly.

I don't subscribe to that either.  True random bit generation is often
too expensive, so the idea of using a hash function to generate a
``random'' key is not so unusual.  And if the hash function is good,
it is also a reasonable way to proceed, because then it doesn't matter
that the input data is in natural language, since the statistical
properties of the output (the hash) will be independent of the
statistical properties of the input (the pass phrase).

Have fun.

-- 
Stephan <neuhaus@informatik.uni-kl.de>
sig closed for inventory.  Please leave your pickaxe outside.
PGP 2.2 public key available on request.  Note the expiration date.
