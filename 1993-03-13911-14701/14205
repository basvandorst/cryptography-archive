Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!zaphod.mps.ohio-state.edu!swrinde!emory!athena!groucho.dev.uga.edu!is
From: is@groucho.dev.uga.edu (Bob Stearns)
Subject: Re: Encryption of compressed text
Message-ID: <C401qz.5KE@athena.cs.uga.edu>
Sender: usenet@athena.cs.uga.edu
Nntp-Posting-Host: groucho.dev.uga.edu
Organization: University of Georgia, Athens
References: <1993Mar15.160831.24885@news.unige.ch> <C3z3uw.31z@consent.uucp>
Date: Tue, 16 Mar 1993 20:47:22 GMT
Lines: 58

In article <C3z3uw.31z@consent.uucp> matt%Consent.Uucp@uts.EDU.AU writes:
>SPAHNI Stephane,238C,6586, (spahni@cui.unige.ch) wrote:
>: Assuming that compressing a text means also diffusing the information, is
>: it true that the encryption of a compressed text is harder to break than
>: the same encryption of a non compressed text ? (for exemple, when using
>: DES as the encryption algorithm).
>: Any pointer on existing work / papers would be appreciated.
>: Stephane Spahni
>: U of Geneva
>
>The problem I can see here is that if you are using a common 
>compression agent, your compressed file would have signatures at 
>fixed offsets, which could make it easier for someone trying a 
>plaintext attack (of course they would still have to know that
>you have used encrypted data in the first place id guess).
>
>Then again, if you simply compress the data with some specified
>algorithm, without any leading header junk, it should be OK. This
>has just given me an idea, maybe even this would make things
>easier for an attacker, for the particular algorithm (if its well
>known), may have  specific characteristics, ie bit sequences that
>never occur or compressed data layed out in a particular way
>due to the word frequency of the original data.
>
>Matthew.
>-- 
>matt%Consent.UUCP@uts.EDU.AU --- 'la lutte continue'
>'What our leaders are trying to tell us is that the world doesnt owe
> us a living, but instead owes them a profit.' - Mick Houlbrook.

A technique which I described earlier on this feed would seem to cure all
of the problems associated with encrypting compressed text. My solution
was to select (randomly, and possibly with TRAVESTY) a piece of prior
traffic T, compress it T', concatenate T to the new message M, compress
TM giving T'M', remove T' and encrypt M' as the output message. This 
contains little but references to a dictionary which is not being sent
and which contains different strings for every message. If you keep
erasing the older traffic on which the prefixes are based, even capture
of a forward base would only give you current messages, not a whole 
history.

The advantages to the above procedures are:
   1. Only small keys are needed; the PRNG seeds for selecting T and
      for the TRAVESTY process.
   2. Nothing directly related to the PRNs is present in the transmitted
      messages
   3. Very little of the transmitted data is directly related to M, so
      that even chosen plaintext attacks reveal very little.

The major objection that I can see is that if the two sites get out of
synchronization it will be very difficult to restore it; similarly
getting an initial (bootstrap) set of messages for T will be an amusing
exercise.
-- 
Bob Stearns
University of Georgia
is@groucho.dev.uga.edu
(706)542-5110
