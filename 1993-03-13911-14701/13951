Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!wupost!gumby!yale!cs.yale.edu!news-mail-gateway!daemon
From: Markowitz@DOCKMASTER.NCSC.MIL
Subject: RE: Diffie-"Hellman"
Message-ID: <930302221121.636853@DOCKMASTER.NCSC.MIL>
Sender: Markowitz.Catwalk2@DOCKMASTER.NCSC.MIL
Organization: Yale CS Mail/News Gateway
Date: Tue, 2 Mar 1993 22:11:00 GMT
Lines: 64

Darren Reed (avalon@coombs.anu.edu.au) writes:

>>Subject:  Diffie-Helman (?)  >> >>(I hope the spelling is right,
anyway)

No...  it's "Martin Hellman."

>>According to what I know of D-H encryption, it seems to be a fairly
>>heavy mathematical procedure:  you encrypt something, hand it to your

Not at all.  D-H is a key exchange protocol, not a cryptosystem.  If
Alice and Bob want to negotiate a secret key (usually in real time),
they agree upon a large prime p and a generator g of the group of units
modulo p.  (I.E., g has the property that g^(p-1) - 1 is divisible by p
but no smaller power of g has this property.  Actually a weaker
condition would suffice, but this is the classical scenario.)  Both p
and g are made public.

Now Alice and Bob pick secret random numbers a and b respectively.
Alice sends g^a mod p to Bob, Bob sends g^b mod p to Alice.  Alice
raises Bob's number to her secret power a and reduces mod p, Bob raises
Alice's number to the b-th power and reduces mod p.  Both get

                    (g^b)^a = (g^a)^b = g^(ab) mod p

and they use that as the key for some conventional symmetric
cryptosystem (i.e., DES).  The discrete log problem ensures that no
eavesdropper can compute the key if p is chosen sufficiently large.

Again, this is purely a key-exchange protocol using only
(high-precision) modular exponentiation.  If you want encryption, you
might use the following slight variation used by T.  ElGamal to get a
full-blown cryptosystem--just beware of patent issues :-)

Alice and Bob pick secret keys a and b as above and publish their public
keys g^a and g^b, resp.  Now if Alice wants to send an plaintext message
M (say 1 < M < p) to Bob in a secure manner, she

    1. chooses a random number k
    2. computes

            c = g^k           mod p
            d = (g^b)^k * M   mod p          (g^b is Bob's public key)

    3. sends the pair [c,d] to Bob.

Bob can use his private key b to decrypt as follows:

            M = d * c^-b  mod p

I've neglected to mention that all the exponents need to be chosen
randomly in the range 2..p-2 in all of this, but you get the general
idea.

>>how to choose a good function (which you can find an inverse of) >>for
the encryption ?

How 'bout DES?  Works for me.  :-)

----------
  Michael J. Markowitz, VP R&D      markowitz@dockmaster.ncsc.mil
  Information Security Corp.        708 405-0500, fax: 708 405-0506
  1141 Lake Cook Rd., Suite D       MCI:  363-1959
  Deerfield, IL  60302              CIS: 76206,2617
