Path: msuinfo!scss3.cl.msu.edu!mrr
From: mrr@scss3.cl.msu.edu (Mark Riordan)
Newsgroups: alt.security.pgp,alt.security.ripem,sci.crypt
Subject: Re: pgp 'stacker' equivalent
Followup-To: alt.security.pgp,alt.security.ripem,sci.crypt
Date: 13 Mar 1993 19:01:53 GMT
Organization: Michigan State University
Lines: 32
Message-ID: <1ntb31$epc@msuinfo.cl.msu.edu>
References: <1993Mar12.021524.19620@ucsu.Colorado.EDU>
NNTP-Posting-Host: scss3.cl.msu.edu
X-Newsreader: TIN [version 1.1 PL8]
Xref: msuinfo alt.security.pgp:1728 alt.security.ripem:147 sci.crypt:14137

Marc Anderson (andersom@spot.Colorado.EDU) wrote:
: I was wondering if anyone was considering writing
: a 'stacker' like utility for encrypting your entire drive?
: 	The operation might be in the form of individual sensitive files
: and decrypting at run time. This would make the disk "seizure-proof". Maybe
: pgp would not be the "ideal" method, but it might be done...? Any gurus wanna
: give it a quick try? Not too sure how that would work.

I tried to write a BIOS-level TSR to encrypt an entire volume,
but found to my embarrassment that my knowledge of how disk 
partitions worked was evidently inadequate.  The books I could
find on heavy-duty PC programming weren't quite enough to enable
me to figure out the problems of multiple partitions.  And if
you encrypted the *entire* disk, you wouldn't be able to load DOS.
I suppose you could boot from a floppy, but I considered that
to be unacceptable.

I then started on a DOS-level TSR based on Barry Nance's DIETDISK.
Though it would have been much easier to complete, I found the
idea (at least the way I was implementing it) rather uninspiring
and abandoned it.  Still, this approach would meet the needs you
describe.  If you're up to it, you can get dietdisk.zip from
ripem.msu.edu and modify it to provide encryption instead of, or
in addition to, compression.

Given all the clever PC programmers out there, I'm surprised that 
this hasn't already been done before, many times.

At any rate, this would be an application for which *public key*
encryption would not be the applicable technology.

Mark R.
