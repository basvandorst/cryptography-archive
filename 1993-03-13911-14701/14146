Newsgroups: alt.security.pgp,alt.security.ripem,sci.crypt
Path: msuinfo!uwm.edu!zaphod.mps.ohio-state.edu!sol.ctr.columbia.edu!news.cs.columbia.edu!ji
From: ji@cs.columbia.edu (John Ioannidis)
Subject: Re: pgp 'stacker' equivalent
Message-ID: <C3usw4.ECz@cs.columbia.edu>
Sender: news@cs.columbia.edu (The Daily News)
Organization: Columbia University Department of Computer Science
References: <1993Mar11.051300.14725@netcom.com> <C3r46w.Do8@dscomsa.desy.de> <1993Mar12.021524.19620@ucsu.Colorado.EDU> <WCS.93Mar12224639@rainier.ATT.COM>
Date: Sun, 14 Mar 1993 00:48:04 GMT
Lines: 47
Xref: msuinfo alt.security.pgp:1736 alt.security.ripem:149 sci.crypt:14146

In article <WCS.93Mar12224639@rainier.ATT.COM> wcs@anchor.ho.att.com (Bill Stewart +1-908-949-0705) writes:
>
>A typical PC product design from 3 years ago would include an 
>maybe-optional board with a DES chip or microprocessor,
>and give you a choice of DES or a fast proprietary algorithm,
>presumably just obscure, not very secure.  Probably it would encrypt
>each disk block using the same key, maybe with CBC within the disk block,
>or maybe getting fancy and using the disk block number as a salt.
>

Matt Blaze (of Bell Labs) gave a short presentation of his Crypto File
System (CFS) work at a WIP (work-in-progress) session at Usenix last
january. The idea is that you have something that looks like an NFS
server running on your local machine, which maps an tree of necrypted
files (even the file names are encrypted) into its equivalent
unencrypted tree. The encrypted files can reside anywhere, on a local
disk, or an NFS-mounted file system (to take advantage of site-wide
backups, e.g.). If  one can make the CFS server unpageable (so that
decrypted blocks don't make it to backing store), it's as secure as
the operating system it's running under. Of course, applications have
to be careful not to write out cleartext in temporary files (unless,
of course, /tmp is also under CFS control). 

>RISC machines and 486s have enough horsepower to do the job without
>performance suffering too badly, though DES chips probably are a win,
>and are available for Suns and PCs.

I can do about one megabit per sec on a SparcStation2, slightly more
on a 486DX2/50. That's about a factor of two faster than Phil Karn's
public domain DES code (which is what I used as a basis, and optimized
the hell out of the initial and final permutation procedures). It's
still not fast enough to run at ethernet speeds, but it's more than
adequate when using slower-speed wireless links, or long distance
links. The code can probably be optimized by at least another factor of
1.5, of not 2, and also faster machines are coming out. With 486/33Mhz
notebooks available now, pretty soon you won't even notice that your
traffic to and from the disk, or to and from the network, is
encrypted.

I wonder how long it will be before high-end notbooks will end up on
the munitions list, since they can obviously be used aas encryption
devices :-)

--
In-Real-Life: John "Heldenprogrammer" Ioannidis
E-Mail-To: ji@cs.columbia.edu
P-Mail-To: 450 Computer Science \n Columbia University \n New York, NY 10027
