Path: msuinfo!uwm.edu!wupost!uunet!decwrl!usenet.coe.montana.edu!ogicse!das-news.harvard.edu!cantaloupe.srv.cs.cmu.edu!tgl
From: tgl+@cs.cmu.edu (Tom Lane)
Newsgroups: sci.crypt
Subject: Re: Permanent signatures for pictures
Message-ID: <C3s92y.95G.2@cs.cmu.edu>
Date: 12 Mar 93 15:44:56 GMT
Article-I.D.: cs.C3s92y.95G.2
References: <C3nHAv.GCF.1@cs.cmu.edu> <C3rDK4.JMK@sneaky.lonestar.org>
Sender: news@cs.cmu.edu (Usenet News System)
Organization: School of Computer Science, Carnegie Mellon
Lines: 45
Nntp-Posting-Host: g.gp.cs.cmu.edu

gordon@sneaky.lonestar.org (Gordon Burditt) writes:
> [ a long, very good analysis of the "Dow Jones pirate problem" ]

Nice work, but it has very little relevance to the picture-tagging problem,
because of your assumption:

> Assumption:  the thieves do not do their own synonym generation.
> Whatever variation was sent out in the pirate feed, it was a version 
> that got sent out to some Dow Jones customer.

This is equivalent to assuming lossless storage: every bit in the stolen
data (image) is equal to some bit actually sent to a subscriber.  In the
picture case, the thieves need only pass their images through a lossy
compressor (either before or after comparison, maybe both).  Now most of the
bits that might have contained a signature have been randomized.  There may
still be some recoverable information there, but how much data volume will
it take to identify the thief?

That leads to the other problem with this analysis, which is that it assumes
(a) you have an indefinitely large volume of original data, with more being
generated all the time; and (b) you can get access to an indefinitely large
amount of the corresponding stolen data.

I'm not sure this holds for the picture scenario --- in particular, I
thought the goal was to be able to identify the source of a small number of
stolen pictures found on a BBS or FTP site.  Admittedly, even a few pictures
might be a lot of megabytes, but in the presence of lossy compression, how
many reliable ID bits will you be able to recover?  And you shouldn't assume
you can generate more data and expect to see it stolen with the identical
process.


It's probably time to split this discussion into two threads.  We have two
independent problem levels to work on:
  1. How to embed ID bits in an image that will still be (probabilistically)
     recoverable after lossy compression or other image reprocessing;
  2. Given that ID bits can be recovered but not with certainty, how to use
     the info to identify the thief (in particular, countering the
     comparison-of-multiple-copies attack).

At this point, it seems that #1 is entirely unsolved.  We know how to do #2,
but not with a realistic amount of computation nor with a fixed, small
sample of the stolen data.

			regards, tom lane
