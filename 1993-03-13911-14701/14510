Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!wupost!darwin.sura.net!sgiblab!octela!shaun
From: shaun@octel.com (Deus Xor Machina)
Subject: Re: Identifying / Securing Files
Message-ID: <1993Mar23.195744.8835@octel.com>
Summary: NOP NOP NOP
Organization: Octel Communications Inc., Milpitas Ca.
References: <1993Mar22.145303.4204@cadkey.com> <1993Mar22.203845.1592@bernina.ethz.ch>
Date: Tue, 23 Mar 1993 19:57:44 GMT
Lines: 29

In article <1993Mar22.203845.1592@bernina.ethz.ch> gec@nice.usergroup.ethz.ch (Germano Caronni) writes:
>In article <1993Mar22.145303.4204@cadkey.com> eric@cadkey.cadkey.com (Eric Holtman) writes:
>>When we go to load modules, we read in the module, and recompute the value,
>>and the result, and if they don't match, refuse to load it.
>>
>>1) is this secure (i assume it is, given good functions for computing
>>   value/result, since this seems to be how most license managers work).
>
>When loading the module, compute the MD-5 hash over the module,
>decrypt the stored result with the public key, which has to be
>stored in the program somewhere, and compare the two.
>
>Comments on this scenario are welcome,

Unless the module itself is encrypted, one only has to trace the loader
code to the point where it makes the decision to either load or not load,
and modify it to load whether the test is passed or not.  I have seen
several "protection" schemes such as this that required no more than one
assembly language instruction be modified to break the protection.  This
scheme, for all its sophistication, gives you no more protection than a
serial number with a length longer than the the number of modules you
expect to distribute and a simple comparison.

@Man
-- 
shaun@octel.com  ||  Greyhound: when you absolutely, positively don't care
                     whether you get there or not.

If it's good enough for puppies, it's good enough for Carruthers.
