Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!zaphod.mps.ohio-state.edu!sample.eng.ohio-state.edu!purdue!haven.umd.edu!uunet!newsgate.watson.ibm.com!yktnews.watson.ibm.com!wo0z!lwloen
From: lwloen@rchland.vnet.ibm.com (Larry Loen)
Subject: Re: Running key ciphers [was; Challenging Message]
Sender: news@rchland.ibm.com
Message-ID: <1993Mar18.213050.14000@rchland.ibm.com>
Date: Thu, 18 Mar 1993 21:30:50 GMT
Reply-To: lwloen@rchland.vnet.ibm.com
Disclaimer: This posting represents the poster's views, not necessarily those of IBM
References: <1993Mar14.043418.2037@altair.selu.edu> <1993Mar17.085030.1@zodiac.rutgers.edu> <16570@rand.org> <16575@rand.org>
Nntp-Posting-Host: wo0z.rchland.ibm.com
Organization: IBM Rochester
Lines: 72

In article <16575@rand.org>, jim@rand.org (Jim Gillogly) writes:
|> In e-mail, a reader suggested that my observation here:
|> 
|>    >Nope.  You don't get random keytext with any deterministic process like
|>    >this.  The only way to get Vernam encryption is to use absolutely
|>    >physically random keys.
|> 
|> is misleading, because by choosing enough books and starting points to XOR
|> into a running key, one gets a random distribution, for all practical
|> purposes.  I don't disagree, but I assert that it's not random for all
|> <theoretical> purposes.  Remember that Vernam encryption means that there
|> is absolutely no theoretical way that a recovered plaintext can be
|> distinguished from any other plaintext of the same length: that any two
|> English (say) sentences of the same length are equally likely in the Vernam
|> encryption space.
|> 
|> Here's a meta-order-of-magnitude argument...  I'm just trying to get the
|> order of magnitude of the order of magnitude close.  The UCLA Library has
|> about 10^7 texts in it, I think... let's say there are around 10^8 texts
|> we can choose from.  Suppose we randomly select 10 of these texts for our
|> keyword.  The number of ways we can do this is C(10^8, 10).  If my
|> arithmetic is close, this is around 10^74.  Then in each of these books we
|> can start anywhere -- say they've each got 10^7 different starting points,
|> so we've got perhaps 10^82 different potential keys.
|> 
|> Now consider how many different possible messages we might encrypt.  If we
|> assume a 100-character alphabet, there are 100^100 different messages of
|> 100 bytes in length, or 10^200 -- many more possible messages than the
|> total number of possible keys.  Put another way, the space of potential
|> encryptions of a given text of this length is sparse.  This means that if the
|> cryptanalyst <does> hit on the right set of keys, he's likely to recognize
|> it.  For Vernam encryption, he can't possibly recognize it, because the
|> space of potential encryptions is 100% dense.
|> 
|> Note that this a big enough keyspace to (probably) cover the space of
|> 10^20 10-letter messages... the 10^82 keys will certainly decrypt a
|> message of that length into lots of English words -- probably most of
|> them.  And as you increase the number of texts in your keyword collection,
|> the length of message you can expect to protect goes up.  However, for any
|> library, set of keytexts, and set of starting points, there is a length of
|> message that will not be perfectly protected... even if my arithmetic is
|> wrong above.  This is not the case for Vernam encryption, which is
|> theoretically absolutely uncrackable.
|> 
|> Again, this is a theoretical discussion: practically speaking, there are
|> lots of ciphers that will adequately protect your diary, and combining
|> enough books and starting places is one of them.
|> -- 
|> 	Jim Gillogly
|> 	26 Rethe S.R. 1993, 18:57


Good reasoning, generally, but isn't there one slightly worsening factor?

If you simply take the chacters of the book that are in (say) ASCII and do
nothing more, then it seems to me likely that the keystream has many
individual bits (for instance, the upper one or two bits of each byte) that
are not particularly random.  Likewise, if space characters happen to line up
fairly often, then there is some tendency in all bits toward 0, etc.

Therefore, there probably has to be some function "f" defined to massage the
currently selected 10 characters so as to make the overall bit stream as
random as the available text permits.

I'm not sure whether I am making a practical or theoretical argument, but it
further illustrates the difficulties with trying to use something than a
true, naturally random event for a Vernam or Vernam-like cipher, which is the
thrust of the above argument.

-- 
   Larry W. Loen        |  My Opinions are decidedly my own, so please
                        |  do not attribute them to my employer
