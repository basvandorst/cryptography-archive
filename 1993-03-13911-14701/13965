Path: msuinfo!uwm.edu!ogicse!flop.ENGR.ORST.EDU!gaia.ucs.orst.edu!umn.edu!noc.msc.net!vixvax.mgi.com!cepek
From: cepek@vixvax.mgi.com
Newsgroups: sci.crypt
Subject: Re: New encryption problem?
Message-ID: <1993Mar2.170638.2550@vixvax.mgi.com>
Date: 2 Mar 93 22:06:38 GMT
Article-I.D.: vixvax.1993Mar2.170638.2550
References: <1993Mar1.210532.15134@oracle.us.oracle.com> <C398wr.KD4@rahul.net>
Organization: Management Graphics, Inc.
Lines: 48

In article <C398wr.KD4@rahul.net>, dhesi@rahul.net (Rahul Dhesi) writes:
 
> Assign each document and each customer a large prime number.  Generate
> an encryption key by multiplying a document prime with a customer
> prime, modulo 2^N where N bits are needed in the key.  Use some
> standard encryption algorithm (e.g., IDEA or DES).

With a simple "custom document key generation algorithm" like this
I would be concerned that customers could share information and
manipulate keys to their advantage.

Several related questions not addressed by the original post:
	- How controlled are the keys?  Do customers have access
	  to their ("binary") customer keys?  Document keys?
	- Do customers have access to the decoding algorithm
	  (allowing them to feed it arbitrary keys in the first
	  place)?

If the document and customer keys are all "public", then what's to keep
customer A with legitimate access to document 1 from sharing K1 with
customer B who knows K2 (legitimately)?  (K1 * Kb) mod 2^N gives 
customer B access to document 1.  Or maybe I'm missing something.


>>Finally, I need a master customer key, MK for each customer, such that
>>decrypt2(Cxy,MKx) gives me Py.
> 
> Combine all keys for a given document/customer set into a single file,
> encrypt the file with some secret key, give the secret key to your
> trustee, and include the file on the distribution medium.

This is a nice, neat solution.  I like it.


A different approach to the problem would be to attempt to maintain one
access control file on the customer's system.  This encrypted file would
be maintained by your application software, getting updated to grant
further documentation reading privileges, and being read (perhaps only
partially?) to confirm that access to a given document has been granted.
A lot depends on your application, host, security, type of users, etc.
but this could eliminate a separate problem area of the original plan:
generating 1,000,000 "unrelated" keys for the documents.

_______________________________________________________________________
Mike Cepek, Senior Software Design Engineer     Internet: CEPEK@MGI.COM
Management Graphics, Inc., 1401 E. 79th St., Minneapolis, MN 55425  USA   
Front desk: +1 612/854-1220   My desk/Voice mail: 851-6112   Fax: -6159
\______PGP Public key available using FINGER or by email request______/
