Path: msuinfo!uwm.edu!zaphod.mps.ohio-state.edu!wupost!uunet!pipex!marble.uknet.ac.uk!uknet!pavo.csi.cam.ac.uk!mrr
From: mrr@cl.cam.ac.uk (Michael Roe)
Newsgroups: sci.crypt
Subject: Factoring News
Message-ID: <1993Mar26.153527.13966@infodev.cam.ac.uk>
Date: 26 Mar 93 15:35:27 GMT
Sender: news@infodev.cam.ac.uk (USENET news)
Organization: U of Cambridge Computer Lab, UK
Lines: 33
Nntp-Posting-Host: smew.cl.cam.ac.uk

We have sucessfully factored the number
109079860077368899279683317287217520315723963309810852001196490797724669375
01770589317473229423215363229040210908053350907904000000000000000000000000000000
= 1240687266557472145447366114797834986398792612843
  *(2**70)*(3**46)*(5**30)*(7**25)*(11**20)

This in itself was not particularly difficult (it could even have be done
with pencil and paper). What makes this particular number cryptographically
interesting is that is one less than the public modulus used in the worked
example in NIST's Digital Signature Standard.

NIST make it clear that the example is an example only, and you don't have to 
use that particular modulus to comply with the standard. However, implementors
reading that ``The integers p, q, and g can be public and can be common to a
group of users'' may well be tempted to not implement their own p-generating
algorithm and just use the value of p from the worked example.

This is probably a bad thing to do. The value of p used in the worked example
has a special form, which is very, very unlikely to have arisen by chance.
This value of p was almost certainly not generated using the algorithm NIST
say should be used, but was instead constructed so as to have additional
special properties.

Apart from the value q (which plays a special role in the Digital Signature
Algorithm), p-1 has no factors bigger than 11. We note that algorithms exist
for solving the discrete log problem (on whose difficulty the security of
the DSA depends) in the special case when p-1 has no large factors. This does
not necessarily imply that the DSA has been broken (even with this value of p).
However, prudent users of the DSA might like to generate their own value for p.

Michael Roe
Cambridge University Computer Laboratory
Computer Security Group
