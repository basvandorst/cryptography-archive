Path: msuinfo!uwm.edu!zaphod.mps.ohio-state.edu!swrinde!elroy.jpl.nasa.gov!ames!olivea!uunet!mcsun!uknet!bnr.co.uk!demon!gtoal.com!gtoal
From: gtoal@gtoal.com (Graham Toal)
Newsgroups: sci.crypt
Subject: Re: pgp\randseed.bin questions
Message-ID: <9303220604.AA16809@pizzabox.demon.co.uk>
Date: 22 Mar 93 06:04:18 GMT
Sender: usenet@demon.co.uk
Lines: 51


	The randseed.bin file contains 24 bytes.  If you encrypt a message
	with PGP, a hash of the first 2K (or 4K) of the message is computed,
	which is used (together with the current time-of-day and timings of
	your recent keystrokes) as a key to encrypt the randseed.bin file,
	which yields a 16-byte key and an 8-byte random initialization vector.
	This key is then used to encrypt your message.

Oh - slightly apropos; this reminded me of a question:

I'd like to hack a simple one-time-pad mailer program, but I'd like a
convenient source of random bits.  Now, I know it's not strictly kosher
to use real-time events in an operating system as a source of data, but
I reckon if you write some idle daemon to supply bits at a slow rate of
maybe 100Kb per day, there's a pretty good chance of getting acceptably
good data.

Now, does anyone have such a program for unix?  Something that just
uses clocks and keyboards and timer events and anything it can think of
to add a few bits to a file any time it feels like it? - a file that
I could steal a few K off any time I needed to send anything that I
wanted to OTP?

By the way, is there a better OTP algorithm than the obvious one?

1) I grab a selection of random bytes from my OTP generator, same
   size as the file I want to encode.
2) I exor my file with the random stream, and mail the file to Alice.
3) Alice receives the file, and does the same as me - generates the
   same number of OTP bytes, and saves them to a file.
4) Alice exors the file with her OTP, and mails it back to me.
5) I exor the file again with my saved OTP, leaving only the data exor'd
   with Alice's OTP, and mail it back to her again (then I delete my
   saved OTP file)
6) Alice exors with her saved OTP file, getting the text, then deletes
   her saved OTP file.

This seems pretty simple and obvious to me (you experts probably have
a name for it even) and the only weakness I can see (apart from physical
OTP security while the exchanges are going on) is that its very vulnerable
to a spoofing attack with someone in the middle.  (But then, isn't
everything?)

So, is this practical, and if it is, does anyone have a good OTP generator
for Unix?

Thanks

G
PS It should be trivial to implement the shuffling backwards and forwards
with some variant of the vacation program...
