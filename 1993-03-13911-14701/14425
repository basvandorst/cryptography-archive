Path: msuinfo!uwm.edu!cs.utexas.edu!sdd.hp.com!usc!howland.reston.ans.net!agate!stanford.edu!rutgers!igor.rutgers.edu!zodiac.rutgers.edu!leichter
From: leichter@zodiac.rutgers.edu
Newsgroups: sci.crypt
Subject: Re: pgp\randseed.bin questions
Message-ID: <1993Mar23.183347.1@zodiac.rutgers.edu>
Date: 23 Mar 93 23:33:47 GMT
References: <9303220604.AA16809@pizzabox.demon.co.uk>
Sender: news@igor.rutgers.edu
Organization: Rutgers University Department of Computer Science
Lines: 72
Nntp-Posting-Host: pisces.rutgers.edu

In article <9303220604.AA16809@pizzabox.demon.co.uk>, gtoal@gtoal.com (Graham
Toal) writes:
| I'd like to hack a simple one-time-pad mailer program, but I'd like a
| convenient source of random bits.  Now, I know it's not strictly kosher
| to use real-time events in an operating system as a source of data, but
| I reckon if you write some idle daemon to supply bits at a slow rate of
| maybe 100Kb per day, there's a pretty good chance of getting acceptably
| good data.
| 
| Now, does anyone have such a program for unix?  Something that just
| uses clocks and keyboards and timer events and anything it can think of
| to add a few bits to a file any time it feels like it? - a file that
| I could steal a few K off any time I needed to send anything that I
| wanted to OTP?
| 
| By the way, is there a better OTP algorithm than the obvious one?
| 
| 1) I grab a selection of random bytes from my OTP generator, same
|    size as the file I want to encode.
| 2) I exor my file with the random stream, and mail the file to Alice.
| 3) Alice receives the file, and does the same as me - generates the
|    same number of OTP bytes, and saves them to a file.
| 4) Alice exors the file with her OTP, and mails it back to me.
| 5) I exor the file again with my saved OTP, leaving only the data exor'd
|    with Alice's OTP, and mail it back to her again (then I delete my
|    saved OTP file)
| 6) Alice exors with her saved OTP file, getting the text, then deletes
|    her saved OTP file.
| 
| This seems pretty simple and obvious to me (you experts probably have
| a name for it even) and the only weakness I can see (apart from physical
| OTP security while the exchanges are going on) is that its very vulnerable
| to a spoofing attack with someone in the middle.  (But then, isn't
| everything?)
| 
| So, is this practical, and if it is, does anyone have a good OTP generator
| for Unix?

Oh, it's PRACTICAL - but is it SECURE?

Let's try some notation in place of all the English.  Let M be the message,
RT your random string, RA Alice's.  The protocol you propose is:

T=>A	M XOR RT
A=>T	M XOR RT XOR RA
T=>A	M XOR RT XOR RA XOR RT
	= M XOR RA XOR RT XOR RT
	= M XOR RA

Now Alice computes M XOR RA XOR RA = M.

But consider that Eve, the eavesdropper, has received all three messages:

	M XOR RT
	M XOR RT XOR RA
	M XOR RA

Eve computes:

	(M XOR RT) XOR (M XOR RT XOR RA)
	= M XOR M XOR RT XOR RT XOR RA
	= RA

Then she simply computes:

	M XOR RA XOR RA
	= M

(More simply:  The XOR of all three ciphertexts is the cleartext.)

Next algorithm?
							-- Jerry
