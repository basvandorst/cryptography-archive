Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!sun-barr!ames!purdue!yuma!ld231782
From: ld231782@LANCE.ColoState.Edu (L. Detweiler)
Subject: NP Complete SAT + one-time pad = great cypher?
Sender: news@yuma.ACNS.ColoState.EDU (News Account)
Message-ID: <Mar29.071822.49233@yuma.ACNS.ColoState.EDU>
Date: Mon, 29 Mar 1993 07:18:22 GMT
Nntp-Posting-Host: summit.lance.colostate.edu
Organization: Colorado State University, Fort Collins, CO  80523
Lines: 91



Yes, what this newsgroup needs is another proposal for a new cryptographic
algorithm.

I fantasize about coming up with a public key system that is provably
NP complete to break (do such beasts exist?) Anyway, in the meantime the
commercial favorite RSA is not in that area. 

So I'm playing around with the satisfiability problem in coming up with
a code. Unfortunately I haven't been able to make it yield a public key
system, but I think it has some seeds for a very secure one-time pad type
situation. Hopefully there might be a use for it somewhere. Without 
further ado:

The SAT problem is this: given a set of clauses in the form "A OR B OR NOT C",
connected by logical AND (i.e. also "conjunctive form" or "product of sums")
find a solution in the logical variables.

Here's how this might be used in a cryptographic system. one-time pad
of [x] bits is sent through secure channels (e.g. RSA).  For fun, lets say
it is

key: 0100

I'm making it very short for example. Now, the idea is that the sender
encrypts the plaintext "on the fly" by generating somewhat-random OR
clauses for which the key either satisfies or does not, depending on the
status of the sent bit. For example, say the bits to be transmitted are

plaintext: 110

That means the sender successively generates two (say) clause 
instances that are satisfied by the key, and one not. They can be 
generated roughly at random. The first might be

clause1: not #1 or #3 or not #4

This is satisfied by the key. Next, we generate two successive instances that
aren't:

clause2: #1 or #4
clause3: not #2 or #3

These both aren't satisfied by the key, so we get, finally, '110' at the
receiving end. Now, thanks for bearing with me, I will try to describe some
things about all this.

1. Note that the cyphertext can be generated very rapidly, on-the-fly, stream
   fashion, bit-by-bit. Extremely useful for a chip. 

2. Totally binary/logical, hence very simple to design in a chip.

3. Same thing goes for decryption. Trivial. Rapid. On-the-fly, etc.

4. Note that the cypertext can be generated with a peculiar mix of random and
   regular properties. The `noise' in this data I think would make it extremely
   difficult to break, or even `recognize'.

5. The vast disadvantage is that it expands the size of the cyphertext many
   times more than the plaintext. My fervent hope is that the other attractive
   features more than make up for this.

6. Finally, I think that it wouldn't be too difficult to show that breaking it
   based on statistical properties requires solving the SAT problem for subsets
   of clauses (the encrypted data). Hence, NP complete. (OK, not too rigorous
   there, I'll let the professional mathematicians take over here!)

Note that the output clauses should probably have at least 3 terms, because 
this is the smallest instance of SAT shown to be NP complete. 

So, does anybody like it? In the interest of bringing cryptography to the
vast unwashed masses, I hereby place this in the PUBLIC DOMAIN. Anybody 
is free to use it or even publish a paper on it, as long as some minimal
credit is given, and exhorbitant royalties are awarded me for commercial
implementations :)  I FORBID anyone from patenting it.

My sincere apologies for wasting your time if this has no cryptographic 
value.


p.s. I suppose I have to admit it isn't hard to come up with a cryptographic
system based on an NP Complete problem, of which there are myriads... but
this has a certain binary and logical simplicity about it that might make 
it the ideal choice for hardware implementations.



--

ld231782@longs.LANCE.ColoState.EDU
