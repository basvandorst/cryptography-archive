Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!zaphod.mps.ohio-state.edu!cs.utexas.edu!uunet!mcsun!chsun!bernina!nice!gec
From: gec@nice.usergroup.ethz.ch (Germano Caronni)
Subject: Re: Cracking RSA?
Message-ID: <1993Mar22.195256.309@bernina.ethz.ch>
Sender: news@bernina.ethz.ch (USENET News System)
Organization: Swiss Federal Institute of Technology (ETH), Zurich, CH
References: <strnlghtC48L39.D5@netcom.com>
Date: Mon, 22 Mar 1993 19:52:56 GMT
Lines: 99

In article <strnlghtC48L39.D5@netcom.com> strnlght@netcom.com (David Sternlight) writes:
>
>I'd be very interested in calculations and comments about the following:
>
>As I understand it, RSA key pairs are unique. That is, for every public key
>there is a private key that will decrypt it.
>
>Suppose some organization with the money and facilities sets themselves the
>task of generating all possible RSA key pairs of, say, length 512. The put a
>machine to work doing nothing but generating such key pairs. They then store
>them on a huge disk or big reels of tape.

uh. call them 'god' :-)

>
>Cracking messages then becomes trivial. They simply look up the
>corresponding secret key to any given public key on their list, and read
>everything.
>
>How many such key pairs are there? How long would it take to generate them
>all, given today's best, fastest machine working full time? Recall that this
>need only be done once, and one could have started doing it when the RSA
>algorithm was first announced. Since the algorithm for generating key pairs
>is fixed, assume a special-purpose machine with the key generation algorithm
>on silicon, if that makes it faster.

# of key-pairs, assuming that you only use prime numbers of 512 BIT length,
this is 154 decimal digits.
It can be calculated that every 260'th number (on the average) having 154
digits is prime. (There will be more, 1/260 is for 100 digits, but I do
not have the formula at hand to calculate it for 154 digits)
2 out of <1/260*1E154> is a big number. Let's assume you just need to find
a prime, so 1 out of 1E150. 
Assume you can test 1E15 numbers in one second.
(This are 1000000000000000 numbers per second, should be enough. Current
numbers will be about 0.001 to 100 per second)

This would take you 1E135 seconds -> 1E127 YEARS!!!
Or let's say more than 10000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000 years.

So we can assume it can NOT be done.

It will be in fact easier to calculate the secret key, given from
a public key. (Although this would take some years too, but I even
can not estimate how long)

>
>How much storage space would it take to store all such key pairs?

more than 1E150 bits (assuming one bit per number :-) )
to represent this number of bits with one electron each,
not counting isolating medias etc, this will average to
(10E-28g/electron) 1E118 tons of electrons. too big for my cellar .-)
(to store them, you would need some neutrons & protons too, and I am not
sure if our universe really contains that much of matter :-)

>
>With a smart data look up algorithm, of the sort used for big data bases,
>how long would it take to look up a particular secret key corresponding to a
>given public key?

order of log(1E154) so this *could* be done . If you take the public keys
as index, it will take you nearly no time at all.

>
>Depending on the answers, just how secure is RSA really against this kind of
>attack, which is independent of message length, known plaintext, brute force
>work on particular messages, etc. etc.?
>
very secure.
and if you use more than 512 bits, it will be very difficult to calculate
the private key from the public key.
Unless an theoretical breakthrough is achieved how such numbers can be
factorized faster. (this is not in sight as fas as I know, and is one of the
'fundamental problems' of mathematics and of 'computational complexity')

For better references you should ask an expert :-)

I hope this helps you in visualizing the problem...

(For an counterexample look at DES. You have 2^56 keys, each transmuting
a given plaintext to a (hopefully) different cryptotext. Assume the
plaintext is all-zeroes. So you need 2^56 * 8 bytes of storage to
remember all encryptions. (This is 5E17 bytes, or 500'000'000 GigaBytes)
Very difficult to store, as this would case you to have about 250 million
DAT-tapes, or 1000 million optical discs.
The keyspace of 2^56 could be examined (assuming 1E15 tests, as above,
per second) in 100 seconds. (Now you see how unrealistic this assumption of
1E15 tests per second is). Actual values will be 1E8 (100 million) tests
per sec, resulting in 31 years for the whole space.)

Friendly greetings,

	   Germano Caronni



p.s. don't take this for gospel. It's just my hazy image of things.
