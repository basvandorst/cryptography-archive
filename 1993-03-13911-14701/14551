Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!zaphod.mps.ohio-state.edu!darwin.sura.net!haven.umd.edu!uunet!pipex!marble.uknet.ac.uk!mcsun!chsun!bernina!nice!gec
From: gec@nice.usergroup.ethz.ch (Germano Caronni)
Subject: Re: Identifying / Securing Files
Message-ID: <1993Mar27.020348.3044@bernina.ethz.ch>
Sender: news@bernina.ethz.ch (USENET News System)
Organization: Swiss Federal Institute of Technology (ETH), Zurich, CH
References: <1993Mar22.145303.4204@cadkey.com> <1993Mar22.203845.1592@bernina.ethz.ch> <1993Mar23.195744.8835@octel.com>
Date: Sat, 27 Mar 1993 02:03:48 GMT
Lines: 19

In article <1993Mar23.195744.8835@octel.com> shaun@octel.com (Deus Xor Machina) writes:
>In article <1993Mar22.203845.1592@bernina.ethz.ch> gec@nice.usergroup.ethz.ch (Germano Caronni) writes:
>>In article <1993Mar22.145303.4204@cadkey.com> eric@cadkey.cadkey.com (Eric Holtman) writes:
>>
>>Comments on this scenario are welcome,
>
>Unless the module itself is encrypted, one only has to trace the loader
>code to the point where it makes the decision to either load or not load,
>and modify it to load whether the test is passed or not.  I have seen
>several "protection" schemes such as this that required no more than one
>assembly language instruction be modified to break the protection.  This
>scheme, for all its sophistication, gives you no more protection than a
>serial number with a length longer than the the number of modules you
>expect to distribute and a simple comparison.

Agreement. sigh. There is _no_ unbreakable software protection :_)

At least not until the program is constantly able to communicate with
the vendor of it *grin*
