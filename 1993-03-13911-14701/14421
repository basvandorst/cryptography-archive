Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!noc.near.net!transfer.stratus.com!ellisun.sw.stratus.com!cme
From: cme@ellisun.sw.stratus.com (Carl Ellison)
Newsgroups: sci.crypt
Subject: Re: Running key ciphers [was; Challenging Message]
Date: 23 Mar 1993 20:40:24 GMT
Organization: Stratus Computer, Software Engineering
Lines: 45
Message-ID: <1onsjo$1qg@transfer.stratus.com>
References: <1993Mar17.085030.1@zodiac.rutgers.edu> <16570@rand.org> <16575@rand.org>
NNTP-Posting-Host: ellisun.sw.stratus.com

In article <16575@rand.org> jim@rand.org (Jim Gillogly) writes:
>The UCLA Library has
>about 10^7 texts in it, I think... let's say there are around 10^8 texts
>we can choose from.  Suppose we randomly select 10 of these texts for our
>keyword.  The number of ways we can do this is C(10^8, 10).  If my
>arithmetic is close, this is around 10^74.  Then in each of these books we
>can start anywhere -- say they've each got 10^7 different starting points,
>so we've got perhaps 10^82 different potential keys.

[etc.]

We can view the UCLA library as a machine to help us implement a PRNG.  The
PRNG has the function of taking some number of truly random bits (the key)
and padding that key -- by producing more than that number of bits of
pseudo-randomness.  We then intend to use that PRNG output as if it were
true random bits.

(Of course, this implies that both the sender and the recipient have access
to the UCLA library -- in which case they might as well meet in some spot
in the stacks and whisper :-)

How good is that PRNG?

Let us assume that each individual character stream is identified by a
single number.  That number has some number of bits.  It is long enough
to identify a single book, a page, a line and a character (or just a character
from the start of the library -- but let's break it down for analysis).
With 10^7 books, each with 2*10^2 pages, each with 6*10^1 lines, each with
5*10^1 characters -- we get 6*10^12 characters.  This takes 42+ bits.

If we assume that each character really has only 1 bit of entropy -- and we
want to be safe -- we can use some byte-wide function of 16 different
characters -- therefore using an initial key of 16*42.5 bits or 680 bits.

It is safe to assume that the first 680 bits of ciphertext is totally protected
by the resulting PRNG stream.  How many more bits are protected?

Is there a way to go from the output of the PRNG back to the source texts
without a straight NP brute force attack?

-- 
 - <<Disclaimer: All opinions expressed are my own, of course.>>
 - Carl Ellison                                        cme@sw.stratus.com
 - Stratus Computer Inc.       M3-2-BKW                TEL: (508)460-2783
 - 55 Fairbanks Boulevard ; Marlborough MA 01752-1298  FAX: (508)624-7488
