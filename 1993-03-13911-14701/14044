Newsgroups: sci.crypt,sci.math
Path: msuinfo!uwm.edu!spool.mu.edu!uunet!newsgate.watson.ibm.com!yktnews.watson.ibm.com!wo0z!lwloen
From: lwloen@rchland.vnet.ibm.com (Larry Loen)
Subject: Re: "Card-shuffling" algorithms
Sender: news@rchland.ibm.com
Message-ID: <1993Mar09.150820.34587@rchland.ibm.com>
Date: Tue, 09 Mar 1993 15:08:20 GMT
Reply-To: lwloen@rchland.vnet.ibm.com
Disclaimer: This posting represents the poster's views, not necessarily those of IBM
References: <9306312.14290@mulga.cs.mu.OZ.AU> <1578@eouk5.eoe.co.uk>
Nntp-Posting-Host: wo0z.rchland.ibm.com
Organization: IBM Rochester
Lines: 44
Xref: msuinfo sci.crypt:14044 sci.math:40693

In article <1578@eouk5.eoe.co.uk>, ahaley@eoe.co.uk (Andrew Haley) writes:
|> Greg Rose (ggr@nareen.acci.COM.AU) wrote:
|> : >	for (n=0; n<3; n++)
|> : >	{
|> : >	    r = lrand48() % 3; 
|>                   ^^^^^^^^^^^^
|> 
|> This is a bad way of generating a random number in the range 0 <= r < 4, 
|> because linear congruential generators such as lrand48() generate
|> numbers with very nonrandom lower bits.  (This only occurs if you use
|> a modulus which is a power of 2 in your random number generator.)  The
|> best way to fix this is to use
|> 
|> r = (lrand48() >> x) % 3
|> 
|> where x is some power of two.
|> 
|> To some extent lrand48() protects you from this by not returning the
|> lower 16 bits of its internal state, but with a linear congruential
|> generator you might as well use the most significant bits you can get.
|> 
|> Andrew.

If this is true, lrand48() is not designed correctly.  I'm getting into this
thread rather late, but I assume that lrand48() is a function that returns
an integer.  That is faster, but nastier to get right than the traditional (gasp)
FORTRAN-ish:
    
    int r;
    double float_rand();    // returns pseudo-random fraction between 0 and 1

    r = float_rand() * 3;   // the expression is truncated to int of course

which would not share Andrew's cited defect.  By the way, is lrand48() a function 
with a static variable?  One would think it ought to be an object with a settable
seed.

Whichever it is, it ought to be designed with such an obvious, well-known usage
in mind and include any necessary correction, such as the one Andrew gives, for
this usage, at least.

-- 
   Larry W. Loen        |  My Opinions are decidedly my own, so please
                        |  do not attribute them to my employer
