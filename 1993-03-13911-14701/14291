Path: msuinfo!uwm.edu!spool.mu.edu!howland.reston.ans.net!usc!rand.org!jim
From: jim@rand.org (Jim Gillogly)
Newsgroups: sci.crypt
Subject: Re: Newbie Q: how do you differentiate a good decode?
Message-ID: <16580@rand.org>
Date: 19 Mar 93 17:20:41 GMT
References: <7716@tuegate.tue.nl>
Sender: news@rand.org
Organization: Banzai Institute
Lines: 71
Nntp-Posting-Host: mycroft.rand.org

In article <7716@tuegate.tue.nl> wouter@blade.stack.urc.tue.nl (Wouter Slegers) writes:
>This is probably a stupid question, but I've been tracking this list long
>and I've never seen the answer. Ok here goes: How do you know you have
>cracked the code right? I mean, suppose I give a crypto-analist an encrypted
>tekst.. How does the crypto-analist know he has decoded the code right and
>did not introduce the tekst himself?

No, that's actually a good question.  There have been a lot of "decryptions"
of the Voynich Manuscript, for example, beginning with William Romaine
Newbold's effort published in 1928; the most recent I know of is by Leo
Levitov, published in 1987.  Of the N decryptions, at least N-1 (and in
my opinion, all N) are the result of the cryptanalyst "introducing the
text himself".

A legitimate "break" consists of coming up with a precise algorithm that
describes the decryption process with no exceptions and that can be
applied mechanically, resulting in plaintext that is either "obviously"
right or can be validated in some way.  The "obviously" depends on
statistical arguments.  If the encryption algorithm corresponds to a known
system with a recognizable keyword, you're home free.  One rule of thumb
that ought to work is that there should be less information content in the
algorithm + key than in the plaintext.  Here I'm defining the information
content of the algorithm to be either minimal code for an unknown cipher
system, or maybe 12 or 14 bits to pick which known cipher type it is.  I'm
making up this measure as I go along, so be gentle...  With Vernam
encryption the information content of the key is greater than or equal to
the information content of the plaintext, so this measure works here --
you can't tell if you've got a legitimate decryption of Vernam.

The difficulty with Newbold's try was that several steps involved extreme
cleverness on the part of the decryptor: in particular the one where he
anagrammed blocks of letters into Latin, drawing in letters from the next
block as necessary to complete the sense of the setence he was creating.
In a real "crack", after you know the algorithm and key the cipher breaks
itself.

This gets stickier with things like the "running key" cipher, with an
unrecognized keytext and plaintext.  In a long cipher there will
undoubtedly be ambiguities, e.g. where the words "NOT" and "NOW" make
equal sense in the keytext, and result in the words "PERT" and "PERL"
in the plaintext, again making good sense in context.  The cryptanalyst
should recognize both possibilities and leave them undecided.  However,
the bulk of the decryption can be justified by statistical arguments about
how many natural-language texts you can expect to get at random.

Unfortunately, a lot of us don't understand statistics half as well as we
ought to, and that's where many Baconians go astray -- a fun side-show in
cryptography has to do with proving the authorship of Shakespeare's plays
by someone other than the guy who lived in Stratford-upon-Avon.  Typically
they'll find an algorithm which will (say) look at the initial letters of
a paragraph, caesar it with some truncated alphabet, and out pops "BACON"
or "OXFORD" or something.  Then come the arguments about what the
probability is that this could have happened by chance.

>                                     If you take a block of random data ie
>you XOR it with a block data and get anything you want. 

True enough.  If you can't recognize the plaintext, you can't tell if
you've got a legitimate decrypt.  I can't think of a place where it would
matter off the top of my head -- if there is some way to use the data then
that should allow you to test it for legitimacy.  For example, your
decrypt may look random, but you know it's supposed to be compressed Z80
code... you run it through uncompress, transfer it to your Heathkit H89,
and try it out.  If it's supposed to be spaceship telemetry data, see if
it gives reasonable orbital elements for whatever's getting measured.  If
it's supposed to be physically random numbers that somebody's using for
their one-time pad, intercept their next one-time pad message and try
decrypting it. :)
-- 
	Jim Gillogly
	Trewesday, 27 Rethe S.R. 1993, 17:20
