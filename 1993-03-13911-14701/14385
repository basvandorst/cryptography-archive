Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!zaphod.mps.ohio-state.edu!howland.reston.ans.net!agate!ames!haven.umd.edu!uunet!mcsun!chsun!bernina!nice!gec
From: gec@nice.usergroup.ethz.ch (Germano Caronni)
Subject: Re: Identifying / Securing Files
Message-ID: <1993Mar22.203845.1592@bernina.ethz.ch>
Sender: news@bernina.ethz.ch (USENET News System)
Organization: Swiss Federal Institute of Technology (ETH), Zurich, CH
References: <1993Mar22.145303.4204@cadkey.com>
Date: Mon, 22 Mar 1993 20:38:45 GMT
Lines: 53

In article <1993Mar22.145303.4204@cadkey.com> eric@cadkey.cadkey.com (Eric Holtman) writes:
>Vendor would develop his module as normal.  Then he would run a certain
>program on it, which would compute some value (I'm thinking CRC, MD5, 
>or something of that nature).
>
>He then calls us, tells me what that value is, and I run some "magic
>function" on that value, and give him the result.  He imbeds the value/result
>pair in his module.
>
>When we go to load modules, we read in the module, and recompute the value,
>and the result, and if they don't match, refuse to load it.
>
>
>Questions:
>
>1) is this secure (i assume it is, given good functions for computing
>   value/result, since this seems to be how most license managers work).
yes
>
>2) what functions should I use for value / result
md5/rsa
>
>3) how many bits should value / result be.
md5=128 bit, rsa keys about 512-bit+

Interesting practical usage.
Ok. You get told the 128-Bit MD5-Value.
You can now insert this value into your program, to check for the 
legality of the module.

As soon as you do a magic function on that value, your program needs to
do the same magic function on the module, so there has to be a secret in
the program, or you use public key encryption.

Take that Value you were told, assure yourself against trapdoor-
numbers and encrypt it with your secret key.
Tell this result to the vendor. The vendor will embedd
it in a dedicated place in the module (some hundred bits).

When loading the module, compute the MD-5 hash over the module,
decrypt the stored result with the public key, which has to be
stored in the program somewhere, and compare the two.

'trapdoor-numbers': Just put the number the vendor gives you once
more through MD5 to avoid some problems, which could show the
vendor your secret key. (Hey you experts -> is this needed ?)

Comments on this scenario are welcome, if you want to use this,
remember that RSA holds a bunch of patents which may or may not
cover this specific application of public-key cryptography :-))

friendly greetings,
	  Germano Caronni
