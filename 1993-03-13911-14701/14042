Path: msuinfo!uwm.edu!wupost!howland.reston.ans.net!agate!doc.ic.ac.uk!uknet!acorn!eoe!ahaley
From: ahaley@eoe.co.uk (Andrew Haley)
Newsgroups: sci.crypt,sci.math
Subject: Re: "Card-shuffling" algorithms
Message-ID: <1578@eouk5.eoe.co.uk>
Date: 8 Mar 93 14:02:39 GMT
References: <9306312.14290@mulga.cs.mu.OZ.AU>
Organization: EO Europe Limited, Cambridge, UK
Lines: 21
X-Newsreader: TIN [version 1.1 PL6]
Xref: msuinfo sci.crypt:14042 sci.math:40681

Greg Rose (ggr@nareen.acci.COM.AU) wrote:
: >	for (n=0; n<3; n++)
: >	{
: >	    r = lrand48() % 3; 
                  ^^^^^^^^^^^^

This is a bad way of generating a random number in the range 0 <= r < 4, 
because linear congruential generators such as lrand48() generate
numbers with very nonrandom lower bits.  (This only occurs if you use
a modulus which is a power of 2 in your random number generator.)  The
best way to fix this is to use

r = (lrand48() >> x) % 3

where x is some power of two.

To some extent lrand48() protects you from this by not returning the
lower 16 bits of its internal state, but with a linear congruential
generator you might as well use the most significant bits you can get.

Andrew.
