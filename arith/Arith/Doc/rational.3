.\" Copyright (C) 1990 Kevin R. Coombes and David R. Grant
.\" Distributed under the terms of the GNU General Public License as
.\" published by the Free Software Foundation, without any warranty.
.TH Rational 3 "12 March 1990"
.SH NAME
rational, Qadd, Qsub, Qmult, Qdiv, Qinv, Qminus, Qeq, Reduce, Ratconst, Ratcopy, Inratl, Ratshowme, FRatshowme \- arithmetic with rational numbers or rational functions
.SH SYNOPSIS
.nf
.B #include "fraction.h"
.B #include "rational.h"
.B #include "Qtools.h"
.LP
.B ratl Qadd(a, b)
.B ratl a, b;
.LP
.B ratl Qsub(a, b)
.B ratl a, b;
.LP
.B ratl Qmult(a, b)
.B ratl a, b;
.LP
.B ratl Qdiv(a, b)
.B ratl a, b;
.LP
.B ratl Qinv(a)
.B ratl a;
.LP
.B ratl Qminus(a)
.B ratl a;
.LP
.B char Qeq(a, b)
.B ratl a, b;
.LP
.B ratl Reduce(a)
.B ratl a;
.LP
.B ratl Ratconst(a)
.B long a;
.LP
.B ratl Ratcopy(a, b)
.B ratl a, b;
.LP
.B char Inratl(msg, a, type)
.B char *msg;
.B ratl a;
.B short type;
.LP
.B void Ratshowme(msg, a)
.B char *msg;
.B ratl a;
.LP
.B void FRatshowme(fp, msg, a)
.B FILE *fp;
.B char *msg;
.B ratl a;
.fi
.SH DESCRIPTION
.LP
These routines provide a uniform interface for doing arbitrary precision
arithmetic either with rational numbers or with rational functions
over finite fields. They are used in concert with the 
.B Arithmetic 
package for integers or polynomials. The routines
.B Qadd(\|),
.B Qsub(\|),
.B Qmult(\|),
and
.B Qdiv(\|)
return a defined structure called
.I ratl
representing the sum, difference, product, and quotient, respectively,
of their arguments. 
.BR Qminus(\|)
returns the negative of its argument, and
.B Qinv(\|)
returns the reciprocal. All rational numbers and rational functions are
returned in lowest terms; the function which removes common factors from
the numerator and denominator is called
.B Reduce(\|).
The routine
.B Qeq(\|)
returns a non-zero value if its arguments are equal, and zero otherwise.
.LP
A number of utilities have been provided. 
.BR Ratconst(\|) 
returns a rational structure which represents the long integer constant
which is its argument. The value of this argument must have absolute value
less than 2^16 = 65536. In general, the return of 
.B Ratconst(\|)
should be copied into a safe location, since subsequent calls will re-use
the same storage locations.
.B Ratcopy(\|)
copies the contents of its first argument into its second. It is up to 
the programmer to ensure that sufficient room is available.
.LP
.BR Inratl(\|) 
prints its message
.I (msg)
on standard output and then reads a rational number or function and stores
it in the locations indicated by its second argument. Conventions for 
entering data are the same as those for the integer-polynomial routine
.B Collect(\|).
The final argument of 
.B Inratl(\|)
is a toggle with one of the values
.B INTEG_IN,
which only reads numerators and assigns the default value of 1 to the
denominator, or
.B FRAC_IN,
which reads both numerator and denominator.
.LP
.BR Ratshowme(\|)
prints its message on standard output, followed by the numerator and
denominator of its second argument. 
.BR FRatshowme(\|)
is to 
.B Ratshowme(\|)
as
.B fprintf(\|)
is to 
.B printf(\|).
.SH LIBRARIES
These routines are implemented in one of two ways. Those which are 
fundamentally different for integers and polynomials are written as separate
functions, and compiled as separate libraries. Those which could 
conveniently be written as one function are compiled in yet a third library;
the interface is handled via macro definitions in the header files. The 
convention adopted is that "fractions" refers to rational numbers and
"rationals" to rational functions. Then the standard way to write a
routine which will work with either integers or polynomials is to put
.nf
.LP
.B #ifdef FRACTIONS
.B #include "fraction.h"
.B #elif defined RATIONALS
.B #include "rational.h"
.B #else
some line to make the compiler complain
.B #endif
.fi
.LP
at the top of the relevant files, and then to have two separate compiliations
.LP
cc -DFRACTIONS ... -lZ -lU
.LP
cc -DRATIONALS ... -lP -lU
.SH DIAGNOSTICS
Illegal operations detected by these routines result in a call to a
routine called
.B bailout(\|)
which prints a message and then exits.
.SH FILES
.nf
.B fraction.h
.B rational.h
.B utility.h
.B Ztools.h
.B libP.a
.B libZ.a
.B libU.a
.fi
.SH "SEE ALSO"
arithmetic(3), warehouse(3)

