
                              A Construction for
                     Super Pseudorandom Permutations
                                      from
                      A Single Pseudorandom Function



                              Babak Sadeghiyan
                                Josef Pieprzyk



                      Department of Computer Science,
                              University College,
                       University of New South Wales,
                     Australian Defence Force Academy,
                           Canberra, A.C.T. 2600,
                                   Australia.


                                   Abstract

          In this paper, we show how to construct a super
       pseudorandom permutation generator from a single
       pseudorandom function generator, based on DES-like
       permutations. First, we show _(g; 1; f; g; 1; f ), which consists
       of six rounds of DES-like permutations with two different
       pseudorandom functions and a fixed permutation, is super
       psuedorandom. Then, we show that with replacing a two-fold
       composition of one of the pseudorandom functions instead of
       the other one it is possible to construct a super
       pseudorandom permutation from a single pseudorandom
       function, where we need six rounds of DES-like permutations
       and six references to the pseudorandom function.


1   Introduction


Pseudorandom bit generators have many cryptographic applications.
Classical pseudorandom bit generators are deterministic algorithms
which generate binary strings that look like a truly random one. A



                                        1


pseudorandom bit generator passes a given test if the results of the test
are similar for both the pseudorandom and a truly random one. If the
statistics of pseudorandom generated strings are different from the
statistics of truly random ones, the bit generator fails some statistical
test. However, even if a generator passes all known statistical tests, it is
sometimes possible to predict the next bit knowing some previous ones.
The notion of unpredictability of the next bit was first introduced by
Yao [6 ]. He showed that a generated string is indistinguishable from a
random one, if and only if, knowing the first s bits of the string,
predicting the s + 1 bit is difficult, in other words the next bit is
unpredictable. Goldreich, Goldwasser and Micali introduced the notion
of pseudorandom function generators [1 ] and showed how to construct a
pseudorandom function generator from a pseudorandom bit generator
adopting Yao's unpredictability property of the next bit.
Luby and Rackoff showed how to construct a pseudorandom invertible
permutation generator with three pseudorandom function generators and
application of three rounds of DES-like permutations [2 ] (this structure
is notated as _(h; g; f )). A practical implication of their work is that a
private key block cipher which can be proven to be secure against chosen
plaintext attack can be constructed. Their result is quite astonishing
since it is not based on any unproven hypothesis.
Later Pieprzyk [4 ] showed that it is possible to construct a
pseudorandom permutation generator based on a single pseudorandom
function and four rounds of DES-like permutations, i.e., _(f 2; f; f; f ) is
pseudorandom and it is secure against a chosen plaintext attack. Luby
and Rackoff also introduced the notion of super pseudorandomness,
where the block cryptosystem is secure against a chosen
plaintext/ciphertext attack. They suggested that _(h; g; f; e) is super
pseudorandom, which is a structure with four pseudorandom functions in
four DES-like permutations. Recently, in [5 ] the necessary and sufficient
conditions for the construction of super pseudorandom permutation
generators based on DES-like permutations have been investigated and it
has been suggested that _(g; g; f; f ) is super pseudorandom, which is a
structure with two pseudorandom functions and four DES-like
permutations.
It is a question of how to construct super pseudorandom permutations
from a single pseudorandom function.
In this paper, we answer the above question and present a construction
based on a single pseudorandom function which is super pseudorandom.
We take advantage of the structure of the optimal perfect randomiser
_(g; 1; f; g; 1; f ) presented in [3 ], where not only the output is
independent from the input but also the two branches of the output are
independent of each other. First, we show that the perfect randomiser is
super pseudorandom. Then, we present a construction based on a single



                                        2


pseudorandom function, with replacing a two-fold composition of one of
the pseudorandom functions instead of the other one, i.e.,
_(f 2; 1; f; f 2; 1; f ), which is indistinguishable from the randomiser.
Finally, we show that the presented construction is super pseudorandom.
Hence, it is possible to construct a super pseudorandom permutation
from a single pseudorandom function, where we need six rounds of
DES-like permutations and six references to the pseudorandom function.


2   Notations


The notation we use, is similar to [4 ]. The set of all integers is denoted
by N. Let   = {0; 1} be the alphabet we consider. For n 2 N ,  n is the
set of all 2n binary strings of length n. The concatenation of two binary
strings x; y is denoted by x k y. The bit by bit exclusive-OR of x and y
is denoted by x   y. By x 2r S we mean that x is chosen from a set S
uniformly at random. By f a function we mean a trasformation from  n
to  n . The set of all functions on  n is denotednby Hn , i.e.,
Hn = {f | f :  n !  n } and it consists of 2n2   elements. The
composition of two functions f and g is defined as f O g(x) = f (g(x)).
The i-fold composition of f is denoted by f i. A function f is a
permutation if it is a 1 to 1 and onto function. The set of all
permutations on  n is defined by Pn and it consists of 2n ! elements.


3   Preliminaries


This section provides the preliminary definitions and notions which are
used throughout the paper.

Definition  1    We  associate  with  a  function  f 2 Hn  the
DES-like  permutation  D2n;f 2 P2n  as,


                       D2n;f(L k R) = (R   f (L) k L)


where  R  and  L  are  n-bit  strings,  i.e.,  R; L 2  n .


Definition  2    Having  a  sequence  of  functions  f1; f2; : :;:fi 2 Hn ,
we  define  the  composition  of  their  DES-like  permutations  as
_ 2 P2n ,  where


              _(fi; : :;:f2; f1) = D2n;fi O D2n;fi-1 O : :O:D2n;f1


Definition  3    Let  l(n)  be  a  polynomial  in  n,  a  function
generator  F = {Fn : n 2 N }  is  a  collection  of  functions  with
the  following  properties:

                                        3


    o  Indexing:   Each  Fn  specifies  for  each  k  of  length  l(n)  a
       function  fn;k 2 Hn .

    o  Poly-time  evaluation:   Given  a  key  k 2  l(n),  and  a
       string  x 2  n ,  fn;k(x)  can  be  computed  in  polynomial  time
       in  n.


Definition  4    An  oracle  circuit  Cn  is  an  acyclic  circuit
which  contains  Boolean  gates  of  type  AND,  OR  and  NOT,  and
constant  gates  of  type  zero  and  one,  and  a  particular  kind
of  gates  named  oracle  gates.   Each  oracle  gate  has  an  n-bit
input  and  an  n-bit  output  and  it  is  evaluated  using  some
function  from  Hn .   The  oracle  circuit  Cn  has  a  single  bit
output.


Definition  5    The  size  of  an  oracle  circuit  Cn  is  the  total
number  of  connections  between  gates,  Boolean  gates,  constant
gates  and  oracle  gates.


Definition  6    A  distinguishing  circuit  family  for  a  function
generator  F  is  an  infinite  family  of  circuits  {Cn1 ; Cn2 ; : :}:,
where  n1 < n2 < : :,: such  that  for  some  pair  of  constants  c1
and  c2  and  for  each  n  there  exist  a  circuit  Cn  such  that:

    o  The  size  of  Cn  is  less  than  or  equal  to  nc1.

    o  Let  Prob {Cn [Hn ] = 1}  be  the  probability  that  the  output
       bit  of  Cn  is  one  when  a  function  is  randomly  selected
       from  Hn  and  used  to  evaluate  oracle  gates.   Let
       Prob {Cn [Fn ] = 1}  be  the  probability  that  the  output  bit
       of  Cn  is  one  when  a  key  k  of  length  l(n)  is  randomly
       chosen  and  fn;k  is  used  to  evaluate  the  oracle  gates.

The  distinguishing  probability  for  Cn  is  greater  than  or
equal  to  _1__nc2,  that  is,



              | Prob {Cn [Hn ] = 1} - Prob {Cn [Fn ] = 1} |  _1__nc2


Definition  7    A  function  generator  F  is  pseudorandom  if  there
is  no  distinguishing  circuit  family  for  F .


How to construct pseudorandom permutation from pseudorandom
functions was first presented by Luby and Rackoff applying a DES-like
structure. The following lemma is due to Luby and Rackoff and has been
stated in [2 ] as the main lemma.
                                        4


Lemma  1   Let  f1; f2; f3 2r Hn   be  indepedent  random  functions  and
C2n  be  an  oracle  circuit  with  m < 2n  oracle  gates,  then

                                                                     2
        | Prob {C2n [P2n ] = 1} - Prob {C2n [_(f3; f2; f1)] = 1} |  m___2n


In other words, a block cryptosystem with three rounds of DES-like
permutation and three different random functions is secure against
chosen plaintext attack, when a cryptanalyst can ask for only a
polynomial number of plaintexts. Later, Pieprzyk et al. considered the
composition of Luby - Rackoff modules in [3 ]. They showed that the
composition of two Luby - Rackoff modules where the intermediate
layers are replaced with random permutations, would produce a
pseudorandom permutation where not only the output is independent of
the input but the two branches of output are also independent of each
other. In [3 ], it was also suggested that the independency of output
branches would still be held even if the intermediate layers are replaced
with some fixed permutation. The following theorem is from [3 ], but is
stated in a different word.


Theorem  1   Let  f1; f2; h1; h2 2r Hn  be  four  different  random
functions.   There  is  no  distinguishing  circuit  for
 2 = _(h2; 1; f2) O _(h1; 1; f1),  and  it  is  also  a  perfect
randomiser,  i.e.,  for  all  oracle  gates  used  by  the
distinguishing  circuit,  the  outputs  are  independent  from  the
inputs  and  are  independent  from  each  other.


When the block cryptosystem is secure against chosen plaintext /
ciphertext attack, it is called super pseudorandom. This notion only
applies for invertible permutations and is stated formally in three
following definitions.


Definition  8    A  permutation  generator  F  is  a  function
generator__such_ that  each  function_ fn;k_ is  1  to  1  and  onto._
Let  F = {Fn  : n 2 N },  where  Fn = {f n;k: k 2  l(n)},  where  fn;k_is
the  inverse  function  of  fn;k.   F  is  called  invertible  if  F
is  also  a  permutation  generator.


Definition  9    A  super  distinguishing  family  of  circuits  for  an
invertible  permutation  generator  F  is  an  infinite  family  of
circuits  {SCn1 ; SCn2 ; : :}:,  where  n1 < n2 < : :,: where  each
circuit  is  an  oracle  circuit  containing  two  types  of  oracle
gates,  normal  and  inverse,  such  that  for  some  pair  of
constants  c1  and  c2  and  for  each  n  there  exist  a  circuit  SCn
such  that:



                                        5


    o  The  size  of  SCn  is  less  than  or  equal  to  nc1.

    o  Let  Prob {SCn [Pn ] = 1}  be  the  probability  that  the  output
       bit  of  SCn  is  one  when  a  permutation  p  is  randomly
       selected  from  Pn  and  p  and  __pare  used  to  evaluate  normal
       and  inverse  oracle  gates.   Let  Prob {SCn [Fn ] = 1}  be  the
       probability  that  the  output  bit  of  SCn  is  one  when  a  __
       key  k  of  length  l(n)  is  randomly  chosen  and  fn;k  and  fn;k
       is  used  to  evaluate  the  normal  and  inverse  oracle  gates
       respectively.

The  distinguishing  probability  for  SCn  is  greater  than  or
equal  to  _1__nc2,  that  is,



            | Prob {SCn [Pn ] = 1} - Prob {SCn [Fn ] = 1} |  _1__nc2


Definition  10     A  permutation  generator  F  is  super
pseudorandom  if  there  is  no  super  distinguishing  circuit
family  for  F .


If F is a super pseudorandom permutation generator, it is secure against
a chosen plaintext/ciphertext attack where a cryptanalyst can
interactively choose plain blocks and see their encryptions and choose
encryptions and see their corresponding plaintext blocks.


4   Construction  of  Super  Pseudorandom  Permutations


Luby and Rackoff [2 ] suggested that, it is possible to make a super
pseudorandom permutation with four independent random functions,
i.e., if f1; f2; f3; f4 2 Hn are independent random functions then
_(f4; f3; f2; f1) is a super pseudorandom permutation. It is a matter of
question whether it is possible to build a super pseudorandom
permutation with a single random functions.
First a definition for independent permutations is given, which would be
used in the proof of Theorem 2.

Definition  11     A  D-distinguishing  family  of  circuits  for  two
invertible  pseudorandom  permutation  generators  ( 1,   2)  is
an  infinite  family  of  circuits  {DCn1 ; DCn2 ; : :}:,  where
n1 < n2 < : :,: where  each  circuit  is  an  oracle  circuit
containing  two  types  of  oracle  gates,  such  that  for  some
pair  of  constants  c1  and  c2  and  for  each  n  there  exist  a
circuit  DCn  such  that:

    o  The  size  of  DCn  is  less  than  or  equal  to  nc1.



                                        6


    o  Let  Prob {DCn [Pn ; Pn ] = 1}  be  the  probability  that  the
       output  bit  of  DCn  is  1,  when  two  permutations  p1  and  p2
       are  chosen  independently  and  randomly  from  Pn  and  are
       used  to  evaluate  the  two  types  of  oracle  gates  of  DCn
       respectively.   Let  Prob {DCn [ 1;  2] = 1}  be  the
       probability  that  the  output  bit  of  DCn  is  one  when  a
       key  k  of  length  l(n)  is  randomly  chosen  and  p1;k and  p2;k
       are  used  to  evaluate  the  two  types  of  oracle  gates
       respectively.

The  distinguishing  probability  for  DCn  is  greater  than  or
equal  to  _1__nc2,  that  is,



        | Prob {DCn [Pn ; Pn ] = 1} - Prob {DCn [ 1;  2] = 1} |  _1__nc2


Definition  12     Two  pseudorandom  permutation  generators   1  and
 2,  are  two  independent  permutation  generators,  if  there  is
no  D-distinguishing  oracle  circuit  family  for  ( 1;  2).


Note that, the D-distinguishing oracle circuits are generalizations of the
distinguishing circuits and the super distinguishing circuits, if two simple
circuits be excluded. If there is no D-distinguishing circuit for a
permutation generator ( 1 and  1), then there is no distinguishing
circuit family for  1, provided that the D-distiguishing circuit is not an
identity test, (e.g., giving an input to two types of oracles and comparing
the outputs). Moreover, if there is no D-distinguishing_circuit for a
permutation generator  1 and its inverse   1, then there is no super
distinguishing circuit family for  1 provided that the D-distiguishing
circuit is not an inversion test, (e.g., giving an input to one type of oracle
and feeding the other type of oracle with this result and comparing the
output with the original input).


4.1    Super  Pseudorandomness  of  _(h; 1; f; h; 1; f )

To construct a super pseudorandom permutation generator based on a
single pseudorandom function, we first show that
G1 = _(h; 1; f ) O _(h; 1; f ) is a super pseudorandom permutation
generator, then, we show that if h is substituted with f 2,
G1 = _(f 2; 1; f; f 2; 1; f ) would remain super pseudorandom. To show
that G1 is a super pseudorandom permutation generator, we first show
that G2 = _(h; 1; f; h; 1) and G3 = _(f; 1; h; f; 1) are not only
pseudorandom but also two independent permutations. Then we show
that G1 is super pseudorandom.

                                        7


Lemma  2   Let  h; f 2r Hn  be  independent  random  functions  and
G2 = _(h; 1; f; h; 1)  then

                                                           2      m2
         | Prob {C2n [G2] = 1} - Prob {C2n [P2n ] = 1} |  m___2n+ ____22n


where  C2n  is  any  polynomial  size  distinguishing  circuit  with
m < 2n  oracle  gates.



Proof  :
When the distinguisher examines an oracle, the input is a 2n bit string
(L k R) and the output would also be a 2n bit string (S k T ) where



 S   =   L   R   f (L   h(L   R))   h(R   h(L   R)   f (L   h(L   R)))

T    =   R   h(L   R)   f (L   h(L   R))


For two different experiments, (Li k Ri) should be different from
(Lj k Rj), so either Li 6= Lj or Ri 6= Rj or both are different. If there is
no leakage of information from the input to the output, the distinguisher
cannot make any sensible decision on the generator used to evaluate the
oracle gates. The leakage of information happens when there are at least
one pair of oracle gates such that their outputs are related to their
inputs. Let X be a random variable notating the ouput of h, the random
function in the second round of the DES-like structure of G2, and let Y
be a random variable notating the output of f , the random function in
the third round of DES-like structure of G2 (see Figure 1).
The leakage of information happens in two cases:

   1.  X is bad: it happens when there are a pair of oracle gates Oi, Oj
       with the input random variables Ri 6= Rj and Li = Lj = L such
       that the random function h collides. Hence, for this case we
       assume that xi = xj = x where xi = h(L   Ri) and
       xj = h(L   Rj). It is obvious that if X is bad then always
       Ti   Tj = Ri   Rj. The probability that h collides in a pair of

       oracle gates among m oracles would be equal to m(m-1)__21__2n.

   2.  Y  is bad: it happens when there are a pair of oracle gates Oi, Oj
       with the input random variables Ri = Rj = R and Li 6= Lj such
       that the random function f collides. Hence, for this case we
       assume that yi = yj = y where yi = f (Li   h(Li   R)) and
       yj = f (Lj   h(Lj   R)). It is obvious that if Y  is bad and also X is
       bad then always Ti   Tj = Li   Lj. The probability that f collides
       and also h collides in a pair of oracle gates among m oracles would
       be equal to m(m-1)__2_1__22n.



                                        8




                Figure 1: Random variables X and Y  in G2



The probability that a distinguishing could be constructed for G2 would
be equal to m(m-1)__2n+1+ m(m-1)__22n+1. On the other hand, when a permutation p
is chosen randomly, the probability that p can satisfy the distinguishing
circuit relation is _m_2n+ _m__22n. So, an upper bound on the probability of
distinguishing would be

                                                                   2      m2
   | Prob {C2n [P2n ] = 1} - Prob {C2n [_(h; 1; f; h; 1)] = 1} |  m___2n+ ____2*
 *2n


                                                                              2



Lemma  3   Let  h; f 2r Hn  be  independent  random  functions  and
G3 = _(f; 1; h; f; 1),  then

                                                           2      m2
         | Prob {C2n [G3] = 1} - Prob {C2n [P2n ] = 1} |  m___2n+ ____22n


where  C2n  is  a  distinguishing  circuit  with  m < 2n  oracle
gates.



Proof  :  Since structure of G3 is similar to the structure of G2 except
that the locations for g and f are replaced, a proof similar to the proof
                                        9


of Lemma 2 can be suggested for the probability of distinguishing of G3
from a random permutation, and is omitted here.                       2

Note that when m is a polynomial in n, the probability of distinguishing
G2 or G3 from a random permutation becomes less than 1 over any
polynomial in n.


Lemma  4   Let  h; f 2r Hn  be  independent  random  functions,  and
G2 = _(h; 1; f; h; 1)  and  G3 = _(f; 1; h; f; 1),  then

                                                                    2
      | Prob {DC2n [G2; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |  m___22n


where  DC2n  is  a  D-distinguishing  circuit  with  two  types  of
oracle  gates  and  m < 2n  the  number  of  oracle  gates.



Proof  :  As the distinguisher has two types of oracle gates, one
probability is calculated when two permutations are chosen
independently and randomly from P2n and are used to evaluate the
oracle gates. The other probability is calculated when the distinguisher
chooses f; h independently and randomly from Hn and uses them in the
G2 and G3 structures, which are applied for the evaluation of the oracle
gates. When the distinguisher examines an oracle, the input is a 2n bit
string (L k R) and the output would also be a 2n bit string (S k T ).
When G2 is examined the output would be


 S   =   L   R   f (L   h(L   R))   h(R   h(L   R)   f (L   h(L   R)))

T    =   R   h(L   R)   f (L   h(L   R))


and when G3 is examined the output would be


 S   =   L   R   h(L   f (L   R))   f (R   f (L   R)   h(L   f (L   R)))

T    =   R   f (L   R)   h(L   f (L   R))


As both G2 and G3 are pseudorandom, there is no leakage of information
from their input to their output. The D-distinguisher could only make a
decision if there were at least one pair of oracle gates such that their
outputs were related to each other.
Let X2 be a random variable notating the ouput of h, the random
function in the second round of the DES-like structure of G2, and X3 be
a random variable notating the ouput of f , the random function in the
second round of the DES-like structure of G3. Let Y2 be a random
variable notating the output of f , the random function in the third
round of DES-like structure of G2, and Y3 be a random variable notating
                                       10

        Figure 2: X3, Y3 random variables in G3 and X2, Y2 in G2



the output of h, the random function in the third round of DES-like
structure of G3 (see Figure 2).
The distinguisher can make a sensible decision if any of the two following
cases happens:

   1.  When there are a pair of oracle gates Oi, Oj such that the random
       functions f and h collide: Hence, for this case we assume that
       xi;2= xj;3= x where xi;2= h(Li   Ri) and xj;3= f (Lj   Rj) and
       yi;2= yj;3= y where yi;2= f (Li   h(Li   Ri)) and
       yj;3= h(Lj   f (Lj   Rj)).

       In this case, when the input random variables Ri 6= Rj and
       Li = Lj = L then always Ti   Tj = Ri   Rj, and when the input
       random variables Ri = Rj = R and Li 6= Lj then always
       Si   Sj = Li   Lj. The probability that f and h collide in a pair of

       oracle gates among m oracles would be equal to m(m-1)__2_1__22n.

   2.  When there are a pair of oracle gates Oi, Oj such that the random
       function f collides and the random function h collides: For this
       case we assume that xi;2= yj;3 where xi;2= h(Li   Ri) and
       yj;3= h(Lj   f (Lj   Rj)), and yi;2= xj;3 where
       yi;2= f (Li   h(Li   Ri)) and xj;3= f (Lj   Rj)
                                       11


       In this case, when the input random variables Ri 6= Rj and
       Li = Lj = L then always Ti   Tj = Ri   Rj. The probability that
       f collides and also h collides in a pair of oracle gates among m
       oracles would be equal to m(m-1)__2_1__22n.

The probability that a D-distinguishing circuit could be constructed for
(G2; G3) would be equal to m(m-1)__22n+1+ m(m-1)__22n+1. On the other hand, when
two permutations p1 and p2 are chosen independently and randomly the
probability that they can satisfy the distinguishing circuit relation would
be 2m__22n. So, an upper bound on the probability of distinguishing would be

                                                                    2
      | Prob {DC2n [P2n ; P2n ] = 1} - Prob {DC2n [G2; G3] = 1} |  m___22n


                                                                              2



Theorem  2   Let  f1; f2 2r Fn  be  independently  chosen  pseudorandom
functions,  and  G2 = _(f2; 1; f1; f2; 1)  and  G3 = _(f1; 1; f2; f1; 1).
When


      | Prob {DC2n [G2; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |< _1__nc2


for  any  polynomial  size  D-distinguishing  circuit  and  for  any
constant  c2,  then  G1 = _(f2; 1; f1; f2; 1; f1)  is  a  super
pseudorandom  permutation  generator.



Proof_ :  First, it is necessary to show that G3 = _(f1; 1; f2; f1; 1) and
G 1 = _(f1; 1; f2; f1; 1; f2) are independent of each other. In order to
prove this claim, by contradiction assume that they are not independent,
and there is a D-distinguishing circuit such that for a constant c2

                        __                                           1
      | Prob {DC2n [G3; G 1] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |> ____nc2


Without changing the inequality relation, we have,

                        __
      | Prob {DC2n [G3; G 1] = 1} - Prob {DC2n [G3; G3] = 1}        +

    Prob  {DC2n [G3; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |      >   _1__nc2


then,

                       __
     | Prob {DC2n [G3; G 1] = 1} - Prob {DC2n [G3; G3] = 1} |       +

    | Prob {DC2n [G3; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |     >    _1__nc2
                                       12
