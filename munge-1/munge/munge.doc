Very brief & rough documentation. Really notes for when I decide
to write documentation.

Please comply with U.S. government regulations regarding export of
cryptographic data. DO NOT EXPORT THIS SOFTWARE TO ANY LOCATION OUTSIDE
THE U.S. and CANADA. DO NOT GIVE THIS SOFTWARE TO PEOPLE WITHOUT
PERMANENT RESIDENCE OR CITIZENSHIP IN ONE OF THE U.S. AND CANADA.

Mark Henderson (markh@wimsey.bc.ca)

--------------------------------------------------------------------------
munge is an encryption program. The interface is modelled on the interface 
of compress. It creates .M files instead of .Z files. They aren't compressed,
but merely encrypted. If you also want compression grab something
like gzip from prep.ai.mit.edu (or freeze or compress...&c.)
This is really just a quick hack, to make encryption and decryption
reasonably convenient and (I hope) reasonably secure.

e.g.
munge -d   OR   unmunge    decrypts
munge -dc is equivalent to mcat
-f option has usual meaning.

to encrypt everything in a directory, a simple
munge *
will do. You'll only have to type your key once.

munge needs to be able to get at the file length. This means you can
have problems piping to munge/mcat/unmunge.

THIS IS AN ALPHA RELEASE. In particular there is more work to be done
here. Beware also, that decryption is sensitive to file length, so
transferring files with a protocol that doesn't preserve length
(e.g. xmodem) is not recommended.

In any case, the author provides no guarantee that data encrypted with
this will be secure. In fact this program may destroy your data.
This software is provided "as is" without warranty of fitness for use or
suitability for any purpose, express or implied.  Use at your own risk

In particular, of course, it is not necessarily the case that the
composition of DES and IDEA is stronger than either of these ciphers
alone.

Portions of this code are (c) Copyright 1990-1992 by Philip Zimmermann.
I apologize in advance if I've missed any other copyrights.
Any contribution I've made is hereby placed in the public domain.

Portions of this code are covered by patents in various countries.
As such, only non-commerical use is recommended.


Other options:

-I      use IDEA only
-D      use DES only
-q      use mode Q
-p      use mode P
-2      ask for two keys. If you give exactly the same key for both,
        you'll get output identical to single key mode with the
        given key. Similarly, of course, for decryption.
-3      use algorithm 3. Again if you give two identical keys you
        get output identical to the single key mode.
-t      test mode. Uses predefined keys. Used for test script
-T      test mode. Debug info is printed. 
-v      be verbose
-k      after encrypting foo to foo.M, try decrypting foo.M and compare 
        MD5 hash to that recorded. Validate.
-w      don't wipe input files
-W      triple wipe input files
-u      suppress printing of kc=hexbyte after each password prompt.
        If someone is looking over your shoulder you should do this.


Algorithms:

Single key:
    composition of triple DES with double length key and IDEA in CFB mode.

Double key:
    composition of triple DES with triple length key and triple IDEA with
    double length key. Again we use CFB.

Algorithm 3:
    intertwine phases of double key (-2) so that if the same key
    is given twice, get get same result as in single key mode.

MODE K
    - default. Key is used in above without modification. Keycheck bytes
      are prepended to plaintext before encrypting and are checked
      and removed on decryption.

MODE P and MODE Q
    - key is altered based on pseudo-random data before encrypting. With
      mode P the ptb bytes (64 bits) are written directly to the file.
      With mode Q, they are encrypted before they are written to the file.
    
The IDEA implementation is from PGP.

.M files are given a header to identify themselves as encrypted with MUNGE

If expected header isn't encountered, algorithm 0,mode K is used.

otherwise we grab the header to identify the algorithm.
So you don't need to use -D or -I. However if you used two
keys to encrypt you are obliged to remember that you did
and use -2.

Need more documentation. At this point all I can tell you is 
read the source code. You should do so anyway to satisfy yourself
that this implementation is correct and is secure enough for your
needs.

The ripem signed file SIGN contains a signed copy of the MD5 hashes
for the files in this beta distribution.

magic.tec is a TECO macro to translate between /etc/magic file formats.

You can verify my ripem public key via finger markh@wimsey.bc.ca or 
the RIPEM keyserver at MSU.
