1
2
3
4
0a1,70
> #include <stdio.h>
> #include <sys/stat.h>
> #include "usuals.h"
> #include <strings.h>
> #include <sys/stat.h>
> main(int argc, char *argv[]) 
> {
> 	FILE *in, *out;
> 	char in_file[1024], out_file[1024];
> 	char key[1028];
> 	char hash[16];
> 	int decrypt=0;
> 	int length;
> 	int ret;
> 	struct stat qq;
> 	int i;
> 	char *c;
> 	srand(time(&length));
> 
> 	if (argc < 2)
> 		exit(1);
> 
> 	if (!getideakey(key, hash, 1)) {
> 		fprintf(stderr, "getidea key failed\n");
> 		exit(1);
> 	}
> 	
> 	for (i=1; i<argc; i++) {
> 		decrypt = 0;
> 		strcpy(out_file, argv[i]);
> 		if (c=strstr(out_file, ".M")) {
> 			decrypt = 1;
> 			strcpy(in_file, argv[i]);
> 			*c=0;
> 		}
> 		else {
> 			decrypt = 0;
> 			strcpy(in_file, argv[i]);
> 			strcat(out_file, ".M");
> 		}
> 			
> 		if (!(in = fopen(in_file, "r"))) {
> 			fprintf(stderr, "cannot open %s\n", in_file);
> 			continue;
> 		}
> 		if (!(out = fopen(out_file, "w"))) {
> 			fprintf(stderr, "cannot open %s\n", out_file);
> 			fclose(in);
> 			continue;
> 		}
> 		if (fstat(fileno(in), &qq) < 0) {
> 			fprintf(stderr, "cannot stat %s\n", in_file);
> 			fclose(in); fclose(out);
> 			unlink(out_file);
> 		}
> 		if (decrypt) 
> 			fprintf(stderr, "decrypting ");
> 		else
> 			fprintf(stderr, "encrypting ");
> 		fprintf(stderr, "%s -> %s\n", in_file, out_file);
> 		ret = idea_file((byte *)hash, decrypt, in, out, qq.st_size);
> 		if (ret == (-2))
> 			fprintf(stderr, "BAD KEY ERROR %s -> %s\n", in_file, out_file);
> 		if (ret == (-3))
> 			fprintf(stderr, "file too short %s -> %s\n", in_file, out_file);
> 		fclose(in); fclose(out);
> 	}
> }
> 
> 	
5
6
7
8
9
