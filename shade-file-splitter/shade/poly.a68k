        section text,code

        ds.l    0

        xdef _mul8
        xdef _mul16
        xdef _inv16
        xdef _div16x
        xdef _div16
        xdef _gcd
        xdef _pinv
;*************************************
;***  USAGE des REGISTRES
;*************************************
; a0: _mul4_tab
; d0: input/output
; d1: input
; d2,d3: temp
;
_mul8:
        move.b  7(sp),d0
        move.b  11(sp),d1
        movem.l d2-d3,-(sp)
        lea.l   _mul4_tab,a0
        bsr     mul8
        movem.l (sp)+,d2-d3
        rts
mul8:
        ; prepare d2,d3 as copies of d0,d1
        moveq.l #0,d2
        move.l  d2,d3
        move.b  d0,d3
        move.b  d1,d2

        ; d2 = high(d0):hight(d1)
        ; d3 = low(d0):low(d1)
        and.b   #$F0,d0
        lsr.b   #4,d2
        or.b    d0,d2
        and.b   #$0F,d1
        lsl.b   #4,d3
        or.b    d1,d3

        ; d0 = mul4(d3)
        ; d1 = mul4(d2^d3)
        ; d2 = mul4(d2)
        move.b  0(a0,d3),d0
        eor.b   d2,d3
        move.b  0(a0,d3),d1
        move.b  0(a0,d2),d2

        ; d1 = d0 ^ d1 ^ d2
        eor.b   d0,d1
        eor.b   d2,d1

        ; d0 = (d2<<8) ^ (d1<<4) ^ d0
        lsl.w   #4,d2
        eor.b   d1,d2
        lsl.w   #4,d2
        eor.b   d0,d2

        move.l  d2,d0
        rts


;**************************************************
;****  USAGE des REGISTRES
;**************************************************
; a0: mul4_tab
; a5: base pointer
; d2,d3: temp for mul8
; d4,d5: temp
;
_mul16:
        link    a5,#0
        movem.l d2-d5,-(sp)
        lea.l   _mul4_tab,a0

        ; multiply low bytes
        move.b  11(a5),d0
        move.b  15(a5),d1
        bsr     mul8
        move.l  d0,d4

        ; multiply high bytes & form mid bytes
        move.b  10(a5),d0
        move.b  14(a5),d1
        eor.b   d0,11(a5)
        eor.b   d1,15(a5)
        bsr     mul8
        move.l  d0,d5

        ; multiply mid bytes
        move.b  11(a5),d0
        move.b  15(a5),d1
        bsr     mul8

        ; d0 = d5 ^ d4 ^ d0
        eor.w   d4,d0
        eor.w   d5,d0

        ; d0 = (d5<<16) ^ (d0<<8) ^ d4
        lsl.l   #8,d5
        eor.l   d5,d0
        lsl.l   #8,d0
        eor.l   d4,d0

        movem.l (sp)+,d2-d5
        unlk    a5
        rts

;******************************************************************
;*****  USAGE des REGISTRES
;**************************************************************
; a0: table pointer
; d0,d1,d2,d3: temp for mul8
;
_inv16:
        move.w  6(sp),d0
        movem.l d2-d3,-(sp)
        bsr     inv16
        movem.l (sp)+,d2-d3
        rts
inv16:
        move.l  d0,-(sp)

        ; d0 = inv8_tab[d0>>8]
        lsr.w   #8,d0
        lea.l   _inv8_tab,a0
        move.b  0(a0,d0),d0

        ; d0 = mul8(d0,d0)
        move.b  d0,d1
        lea.l   _mul4_tab,a0
        bsr     mul8

        ; d2 = d0 ^ x
        ; d0 = mul16(d0,x)
        move.l  (sp),d2
        eor.w   d0,d2
        move.l  d0,-(sp)
        bsr     _mul16
        addq.l  #8,sp

        ; return (d0>>16) ^ d2
        sub.w   d0,d0
        swap    d0
        eor.w   d2,d0
        rts

;******************************************************************
;*****  USAGE des REGISTRES
;**************************************************************
;
_div16x:
        movem.l d2-d3,-(sp)

        moveq.l #0,d0
        move.w  18(sp),d0
        bsr     inv16

        move.w  12(sp),d2
        move.l  d0,-(sp)
        move.l  d2,-(sp)
        bsr     _mul16
        addq.l  #8,sp

        sub.w   d0,d0
        swap    d0
        eor.w   d2,d0

        movem.l (sp)+,d2-d3
        rts

;******************************************************************
;*****  USAGE des REGISTRES
;**************************************************************
;
_div16:
        move.l  d2,-(sp)
        lea.l   _shft_tab,a0
        move.l  8(sp),d0
        move.w  14(sp),d1

        move.w  d1,d2
        lsr.w   #8,d2
        bne     .001

        lsl.l   #8,d0
        move.b  d1,d2
        lsl.w   #8,d1

.001    move.b  0(a0,d2.w),d2
        lsl.l   d2,d0
        lsl.w   d2,d1

        move.l  d0,8(sp)
        move.w  d1,14(sp)
        move.l  (sp)+,d2
        bra     _div16x


;******************************************************************
;*****  USAGE des REGISTRES
;**************************************************************
; a2,a3: a, b
; d0,d1: x, y
;
_gcd:
        link    a5,#0
        movem.l d2-d3/a2-a3,-(sp)
        move.w  10(a5),d0
        move.w  14(a5),d1
        move.l  16(a5),a2
        move.l  20(a5),a3
        bsr     gcd
        movem.l (sp)+,d2-d3/a2-a3
        unlk    a5
        rts
gcd:
        moveq.l #0,d2
        move.w  d0,d2
        move.w  d1,d3
        bne     .002

        move.w  #1,(a2)
        clr.w   (a3)
        rts

.002    move.l  d3,-(sp)
        move.l  d2,-(sp)
        bsr     _div16
        addq.l  #8,sp
        move.l  d0,-(sp)

        move.l  d0,-(sp)
        move.l  d3,-(sp)
        bsr     _mul16
        addq.l  #8,sp

        eor.l   d2,d0
        move.l  d0,d1
        move.l  d3,d0
        exg     a2,a3
        bsr     gcd
        exg     a2,a3
        move.l  d0,d2

        move.w  (a2),d0
        move.l  d0,-(sp)
        bsr     _mul16
        addq.l  #8,sp
        eor.w   d0,(a3)

        move.l  d2,d0
        rts

;******************************************************************
;*****  USAGE des REGISTRES
;**************************************************************
;
_pinv:
        link    a5,#-4
        movem.l d2-d3/a2-a3,-(sp)

        move.w  10(a5),d0
        beq     .003
        cmp.w   #1,d0
        beq     .005
        move.l  d0,-(sp)
        move.l  #$10000,d0
        move.w  14(a5),d0
        move.l  d0,-(sp)
        bsr     _div16
        addq.l  #8,sp
        move.l  d0,-(sp)

        move.l  d0,-(sp)
        move.l  8(a5),-(sp)
        bsr     _mul16
        addq.l  #8,sp
        move.w  14(a5),-2(a5)
        eor.w   d0,-2(a5)
        move.w  10(a5),d0
        move.w  -2(a5),d1
        lea.l   -4(a5),a2
        lea.l   -2(a5),a3
        bsr     gcd
        cmp.w   #1,d0
        bne     .006

        move.w  -2(a5),d0
        move.l  d0,-(sp)
        bsr     _mul16
        addq.l  #8,sp
        move.w  -4(a5),d1
        eor.w   d1,d0
.004
        movem.l (sp)+,d2-d3/a2-a3
        unlk    a5
        rts
.006    addq.l  #4,sp
.003    moveq.l #0,d0
        bra     .004
.005    moveq.l #1,d0
        bra     .004

        xref _mul4_tab
        xref _inv8_tab
        xref _shft_tab

        end
