Article 1965 of sci.crypt:
Path: eff!iWarp.intel.com|uunet!zaphod.mps.ohio-state.edu!sol.ctr.columbia.edu!emory!athena.cs.uga.edu!pollux!dan
From: dan@pollux.cs.uga.edu (Dan Gordon)
Newsgroups: sci.crypt
Subject: NIST DSS Proposal
Message-ID: <1992Jan21.144054.19768@athena.cs.uga.edu>
Date: 21 Jan 92 14:40:54 GMT
References: <1992Jan20.005818.24626nagle@netcom.COM> <1992Jan21.000214.17043@cs.sandia.gov> <11881.Jan2106.44.5792@virtualnews.nyu.edu>
Sender: news@athena.cs.uga.edu
Organization: University of Georgia, Athens
Lines: 237

The following is a letter to NIST about the proposed Digital 
Signature Standard.  It also is relevant to some recent postings about
the difficulty of discrete logarithms.

____________________________________________________________________


Director, Computer Systems Laboratory
ATTN: Proposed FIPS for DSS
Technology Building, Room B-154
National Institute of Standards and Technology
Gaithersburg, MD 20899

Dear Sir,

This letter contains a few comments on your proposed Digital Signature
Standard.  I would like to address some questions about the security
of the DSA raised in other letters you've received, and also make a
few suggestions about the way that DSA would be used, if it is adopted
as a standard.

A number of the comments you've received have focused on the security
of the DSA.  The largest prime for which the discrete logarithm
problem has been solved, by Odlyzko and LaMacchia using the Gaussian
integer method, has 224 bits, and it is clear that general primes of
512 bits cannot be solved with the algorithms and computers currently
available.  The exact size of the largest prime that can be done now
is unknown, and certainly there is no guarantee that 512-bit primes
will be safe for long, but many of the letters I've seen have
attempted to quantify this using the asymptotic complexity of the
algorithm: 

	exp{(1+o(1)) sqrt{ log p log log p}}.

Using such asymptotic bounds to obtain estimates for specific cases is
risky, since the  o(1)  term hides a great deal.  More research should
be done to clarify matters, but at the moment solving for discrete
logarithms modulo large primes is harder, although not fundamentally
harder, than factoring composite numbers of comparable size.  Thus the
DSA is somewhat more secure than RSA with a 512-bit key, but far less
secure than RSA with a 1024-bit key.

In order to increase public confidence in the security of the DSA, a
number of steps could be taken.  One is to remove the constraint on
the size of the key, so that when 512-bit primes are no longer safe,
larger one can be used.  I agree with earlier writers that in the long
term, DSA will need longer keys to be trusted.

The other step is to deal with worries about trapdoors.  This issue
has been raised in at least two letters (and recently in an article in
the Wall Street Journal), but I believe that the dangers have been
exaggerated.  For essentially every cryptographic system there are
keys that must be avoided, and DSS is no exception.  The real question
is whether such keys can be detected, and for the case of DSS
this is relatively easy to do.

If a prime of a special form is used, then an asymptotically faster
algorithm exists to find discrete logarithms modulo  p.  For the
algorithm to work, we must have 
	y^k f(x/y) = 0 mod p, 
where  k  is a small integer (say 5 or 6),  f  is a polynomial of
degree  k  with small coefficients, and  x  and  y  are integers of
size roughly  p^{1/k}.

I developed the faster algorithm in 1990, using ideas from the
Gaussian integer method and a new technique developed for factoring,
called the number field sieve.  Its complexity is about

	exp{(1.00475+o(1)) log^{2/5} p  log log^{3/5} p},

although again the  o(1)  term hides a lot, particularly the
dependence on the polynomial  f  being used.  Several people have
independently suggested using this method as a trapdoor, as early as
last summer.

Using these ideas, it is definitely possible to construct a prime for
which the DSA can be broken, in a large but feasible amount of time.
The ideal candidate would be a prime  p=x^5-2y^5, where all the other
factors of  p-1  are smaller than  q.  However, this does not mean that
the DSA is unusable.  Such a prime could be detected quickly, and so
the trapdoor could not remain a secret (see the Appendix for an
algorithm).  To be undetectable, the polynomial would need to have
larger coefficients, say between -100 and 100.  For such a
polynomial and prime, the method would be impractical with current
computing technology, and it is doubtful that it would be any faster
than the Gaussian integers method.

Moreover, it is simple to construct the prime in such a way that
everyone can be confident it is not such a trapdoor.  Almost all
primes are safe, and so any public pseudo-random method which avoids
special primes could be used.  

A random number generator and algorithm for using it to generate keys
for DSA are given in Appendices 2 and 3 of the DSS Proposal.  I
recommend that the algorithms in these appendices, modified slightly
as described in the Appendix below, be made part of the standard, so
that a key can be generated unambiguously from a seed.  It is unlikely
that any seed with this method would produce a good trapdoor.  The
seed could be made public along with the keys, to convince users of
their security.


Sincerely,

Daniel M. Gordon
Associate Professor of Computer Science
University of Georgia



			Appendix


A.1  Detecting a Trapdoor


For the moment, solving discrete logarithms modulo general 512-bit
primes is beyond reach.  However, if  p  is a prime for which the
special number field sieve can be applied, then it might be possible
(although still with a large computational effort) to solve for
discrete logarithms modulo  p.  If the DSA is to be used, everyone
involved must be convinced that the prime has not been chosen to give
anyone an advantage.

We want to ensure that there is a no polynomial  f  of degree  k  with
small coefficients and  x,y  near  p^{1/k}  such that 
y^k f(x/y) = 0 mod p.  The only known way to check for this is to try 
each possible  f.  One may factor  f mod p  efficiently by eliminating
square factors (dividing by the greatest common divisor of  f  and 
f' mod p), and then taking the gcd of (x^p-x) and f mod p.  Then 
x  and  y, if they exist, can be found using lattice reduction.

This follows from a little algebraic number theory.  Let
K= Q(a), where  a  is a root of  f  over the complex numbers.  
Suppose  c_p  is a root of  f mod p.  Then the ideal
(p,a-c_p)  is a factor of  p  in the ring of integers of K.  
The norm of  (ya-x)  is  y^k f(x/y) = 0 mod p, and since 
x/y = c_p mod p,  (ya-x)  is divisible by (p,a-c_p).  The ideal
(p,a-c_p)  is equivalent to the lattice  L  generated by  (p,0)
and  (c_p,-1).  The shortest vector in  L  has length at most 
sqrt p, and for most choices of  p  and  f, the short vector will be 
close to  sqrt p.  If such an  x  and  y  do exist,  (x,-y)  is in 
this lattice, and its length is about  p^{1/k}.  This is much shorter
than other vectors in the lattice, and so can be found by lattice 
reduction, using an algorithm of Gauss.

The main problem with this is that every polynomial  f  needs to be
considered separately, so a limited range of polynomials can be
searched.  A "quick and dirty" implementation of this algorithm on a
Sparcstation 1 can test one fifth-degree polynomial for a 512-bit
prime in about two minutes.  Further work will no doubt speed this
significantly.  On a parallel machine many polynomials could be
searched at once, and a fairly large range of polynomials could be
tested.

Note that in the special case  y=1, where  p=f(x), the polynomial
can be found much faster.  In this case  (p/a_k)^{1/k}  is close to
x, where  a_k  is the leading coefficient of  f.  By trying all
a_k's and  x's in a small range, all polynomials can be tested at
once.  For instance, a Mathematica program can find in a few seconds
that the prime  p_1  in the Haber-Lenstra letter satisfies 

	p_1 = f(4912732649782387498273984779363)

for f(x)=3x^5-3x^4-3x+4.

With this test, a trapdoor with a good polynomial could be found.
This forces an adversary to choose a moderate polynomial, say an  f
of degree six with coefficients chosen randomly between -100 and
100.  Operations in the resulting field would be much more
difficult, and I doubt that the special number field sieve with such a
polynomial would have any advantage over the Gaussian integer method for
primes of this size.




A.2  Protocols for choosing a prime


The ideal way to avoid worries about a trapdoor would be to come up with
a way of generating primes for which one can guarantee that no
such polynomial exists.  I do not know of any way to show that a prime
is "safe" in this way, but it might be possible.  

On the other hand, a random prime is almost certain to be safe.  Call
a prime unsafe if an  f  exists with  y^k f(x/y) = 0 mod p,
where  k  is between 4 and 10,  x  and  y  are less than
p^{1/(k-1)}, and the absolute values of the coefficients of  f  are
less than 10000 (this goes well beyond the range of polynomials which
would actually be helpful).  Then the fraction of 512-bit primes which
are unsafe is less than 2^{-100} of the total.


Suppose two people wish to agree on a safe key for the DSA.  They can
choose a random seed for the random number generator, using a protocol
due to Blum (in Proceedings of the 24th IEEE Computer
Conference, 1982).  From this they can use the method of Appendix 2
of the DSS Proposal to create a key which is as likely to be safe as
any random key.

On the other hand, a central authority might want to announce a key
for general use, so that everyone is convinced there is no trapdoor.
To do this, the authority must have a pseudo-random number generator
and algorithm for constructing keys so that:


1) Any user can verify that a key was generated using the approved
method.

2) Keys produced by this method should be no more likely than
random keys to contain trapdoors.

3) The choice of seed used for the random number generator should
not allow the authority to create a particular key.


With a few modifications, the random number generator mentioned in
Appendix 3 of the DSS Proposal can be made to satisfy the above
criteria.  That method uses DES with a 64-bit seed, DES key and 64-bit
date/time stamp.  To satisfy the above conditions, the DES key used
should be fixed as part of the algorithm, the seed should be made
public with the DSA key, and the timestamp format should be specified.

It could be argued that the 64-bit seed gives too much freedom,
putting the third condition at risk.  This can be remedied by
restricting the choice of seeds, or eliminating the seed entirely and
just using the timestamp.  Alternatively, DES could be replaced by a
one-way function, so that given a desired key, there is no way to
find a seed that generates it.

The resulting key is as likely to be safe as any random key.  For
further confirmation, users could test each key against good
polynomials to make sure that it doesn't have any trapdoors.  A fast
implementation of the algorithm to check for trapdoors should be
freely available, so that anyone who wants to has the capability to
check a key.


