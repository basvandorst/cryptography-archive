Newsgroups: sci.crypt
Path: msuinfo!caen!usenet.cis.ufl.edu!eng.ufl.edu!spool.mu.edu!howland.reston.ans.net!math.ohio-state.edu!sdd.hp.com!portal!hfinney
From: hfinney@shell.portal.com (Hal Finney)
Subject: Re: QS - A New Cryptosystem
Message-ID: <CGLHG8.HHD@unix.portal.com>
Sender: news@unix.portal.com
Nntp-Posting-Host: jobe.shell.portal.com
Organization: Portal Communications Company
References: <931116144136@oxted.demon.co.uk>
Date: Tue, 16 Nov 1993 17:19:17 GMT
Lines: 33

A couple of comments.

In normal use of RSA, a random session key is generated and exchanged
via RSA.  This session key is then used as the key in a conventional
cryptosystem such as DES or IDEA which encrypts the actual message.

This QS system still generates a random session key and exchanges it
using RSA.  (This means that licenses will still be necessary from PKP
to use QS in the US, along with the additional license from the QS people.)
However, instead of becoming the key for a conventional cryptosystem,
it essentially seeds what is claimed to be a cryptographically strong
Unpredictable (pseudo) Random Number Generator (URNG).  This random
number sequence is then XOR'd with the message to encrypt it.

There are URNG's which are based on RSA algorithms.  For example, the
sequence X(i+1) = X(i)^3 modulo an RSA modulus provides such an URNG;
however, one can only use log modulus bits per iteration to keep it
unpredictable.  The QS RNG is defined by:

	X(i+1) = (K xor X(i) xor P(i))^3

where K is the random session key, X(i) is the random block which will
be xor'd with the plaintext, and P(i) is the ith block of plaintext.
The ith message block M(i) would then be:

	M(i) = X(i) xor P(i)

The idea of using a URNG for the "conventional" encryption in an RSA-based
cryptosystem seems reasonable (if obvious).  The claim here is that a full
(say) 512 or 1024 bits is achieved per iteration of the RNG rather than the
9 or 10 that would be available using existing methods.  If this holds up
it should be a useful technique.

