Path: msuinfo!uwm.edu!cs.utexas.edu!sdd.hp.com!hplabs!unix.sri.com!csl.sri.com!boucher
From: boucher@csl.sri.com (Peter K. Boucher)
Newsgroups: comp.ai.genetic,sci.crypt
Subject: Re: Strong random number generators?
Date: 10 Nov 1993 23:09:56 GMT
Organization: Computer Science Lab, SRI International
Lines: 26
Distribution: world
Message-ID: <2brsc4INN683@roche.csl.sri.com>
References: <1993Nov5.183248.29604@cs.tcd.ie> <2bfl7tINN3ne@redwood.csl.sri.com> <1993Nov7.152830.8556@cs.tcd.ie> <2bpicaINN301@roche.csl.sri.com> <1993Nov10.122225.5685@infodev.cam.ac.uk>
NNTP-Posting-Host: redwood.csl.sri.com
Xref: msuinfo comp.ai.genetic:1705 sci.crypt:21010


Nick Maclaren wrote:
|> 32-bit PRNG's are definitely not suitable for any simulation that uses
|> more than 10^6 numbers in all, and should be avoided.  The simplest one
|> that I recommend is Applied Statistics (JRSS Series C) algorithm AS183
|> by Wichmann and Hill.  This passes Peter Boucher's test with flying
|> colours on 10^9 numbers, though I have theoretical reasons to believe that
|> it would fail for 10^12.  This generator is suitable for simulations of
|> up to about 10^9 numbers.

I just wrote a program that generates perfect output for my test.
Every time a character is output, the following character is one
more than the following character was last time.  For example, if
'A' is followed by 'X', then the next time an 'A' is output, it will
be followed by 'Y' (and the previous time, 'A' was followed by 'W').

This goes to show you that failing my test will show a problematic 
non-uniformity, but passing it does not say that your output is 
cryptographically useful.

What tests detect the problem with my new ``random'' number generator?

-- 
Peter K. Boucher
--
DISCLAIMER:  The above does not necessarily represent the opinions of my employer.
