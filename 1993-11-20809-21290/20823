Path: msuinfo!agate!library.ucla.edu!europa.eng.gtefsd.com!uunet!pipex!demon!an-teallach.com!gtoal
Newsgroups: sci.crypt
From: gtoal@an-teallach.com (Graham Toal)
Subject: Re: News from the cipher front 
Summary: 
References: <9310292050.AA02266@Camex.COM> <752006226snz@aph.demon.co.uk>
Followup-To: 
Distribution: world
Organization: An Teallach Limited
Keywords: 
Date: Mon, 1 Nov 1993 13:31:14 +0000
Message-ID: <9311011331.AA21092@an-teallach.com>
Sender: usenet@demon.co.uk
Lines: 25

In article <752006226snz@aph.demon.co.uk> aph@aph.demon.co.uk writes:
:Quite right.  I was just pointing out that your million bucks will
:just get you a single message, rather than a useful key.  This makes
:such an approach much less useful, but I suppose that if the message
:were known to be really important it might still be worth doing.  The
:best thing to do in this case is to use triple DES for high grade
:material and conceal the encryption method used in the RSA header.

Look, a DES-cracking engine just throws encrypted data to every DES key
there is.  It's *not* a plain-text attack.  It's a plain-text attack only
if the encoded data looks like random numbers, and you know how the
pre-encypherment created those random-looking numbers.

Otherwise, it's a general attack that's only as good as your code for
detecting that you've correctly decoded *something*, for instance by
looking at the frequency of the output alphabet or recognising some
signature bytes at the start of the file.

This is actually the problem we have with the Computer Shopper challenge -
the encryption is trivially broken, but how do you know which of the 2^24
texts you've created is the plaintext?  We need some tools here for that
kind of analysis in a reasonable time.

G

