Path: msuinfo!uwm.edu!news.moneng.mei.com!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!cs.utexas.edu!cs.utexas.edu!geraldo.cc.utexas.edu!mccoy
From: mccoy@ccwf.cc.utexas.edu (Jim McCoy)
Newsgroups: sci.crypt
Subject: Re: Unreadable programs / 0-knowledge proofs
Date: 8 Nov 1993 18:02:15 -0600
Organization: The University of Texas - Austin
Lines: 27
Sender: mccoy@tramp.cc.utexas.edu
Distribution: world
Message-ID: <2bmmm8$303@tramp.cc.utexas.edu>
References: <01H51I7B23YG96WT1B@delphi.com> <2blmfg$ihq@rzsun02.rrz.uni-hamburg.de>
Reply-To: mccoy@ccwf.cc.utexas.edu
NNTP-Posting-Host: tramp.cc.utexas.edu


In article <2blmfg$ihq@rzsun02.rrz.uni-hamburg.de>, bontchev@fbihh.informatik.uni-hamburg.de (Vesselin Bontchev) writes:
> Mike Ingle (MIKEINGLE@delphi.com) writes:
> > It was claimed on the cypherpunks that you can use zero-knowledge proof
> > theory to create a program which cannot be decompiled, reverse-engineered,
> > or modified. 
> 
> If the CPU can execute it, then a human will be able to decompile,
> reverse-engineer, understand, modify, or therwise hack it. The only
> way to prevent that is to have the program communicate at runtime with
> a computer to which the hacker doesn't have physical access, but this
> is not practical.

This is getting more and more practical every day: distributed systems.
The price of bandwidth is poised to take a nosedive in cost to the user, so
it becomes more and more practical for people to use CPU cycles from
cpu.server-x and a bit of memory here and there from bigram.com depending
on the daily price index for storage, etc.  The only thing you need to keep
local is a CPU to do the encryption/decryption operations you do not trust
to someone else's CPU...


jim
-- 
Jim McCoy                	|  UT Unix Sysadmin Tiger Team
mccoy@ccwf.cc.utexas.edu 	|  #include <disclaimer.h>
        pgp key available on pubkey servers, or upon request
