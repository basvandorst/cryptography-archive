Newsgroups: comp.security.unix,comp.sys.sun.admin,alt.security,comp.security.misc,sci.crypt
Path: msuinfo!uwm.edu!news.moneng.mei.com!howland.reston.ans.net!spool.mu.edu!umn.edu!csus.edu!netcom.com!bbosen
From: bbosen@netcom.com (Bob Bosen)
Subject: Re: crypto calculators (Was: Re: Security Incident)
Message-ID: <bbosenCFtnoq.ADo@netcom.com>
Organization: NETCOM On-line Communication Services (408 241-9760 guest)
References: <2ammr2$49t@nym.ossi.com> <bbosenCFM4Cu.2q9@netcom.com> <CFnApz.Mup@fasttech.com>
Date: Mon, 1 Nov 1993 16:41:14 GMT
Lines: 47
Xref: msuinfo comp.security.unix:662 comp.sys.sun.admin:23740 alt.security:12687 comp.security.misc:5931 sci.crypt:20827

zeke@fasttech.com (Bohdan Tashchuk) writes:

>In <bbosenCFM4Cu.2q9@netcom.com> bbosen@netcom.com (Bob Bosen) writes:

>>Tony, that's a neat solution for half of the problem. The time-dependent
>>calculators still drift. And you're right that having accurately synchronized
>>clocks is a good idea for other reasons. Nevertheless, user accountability
>>is still lost because of replayability during the window of validity. The
>>SIZE of the window can be diminished, but not the vulnerability during
>>it or the resultant loss of accountability.

>Why can't the host software track the average rate of drift for each user's
>crypto calculator? This should allow a much tighter window of validity.

>For example, my wristwatch has been averaging about 0.37 seconds fast per day
>over the last six months. It's been predictable to within a second or two on
>any given day. That's a pretty narrow window.

>As another example, some ordinary HP calculators have a time function. They
>also have a way for the user to tell them the drift of their timebase since
>the previous adjustment. The calculators then adjust for the drift.

They do. All of the time-dependent host authentication software that I know
of goes to great lenghts to track the average drift of each user's device.
This can keep the window of replay vulnerability on the order of 2 times the
device's display rate. Greater accuracy that this is very difficult, because
by the time the host receives a time-dependent passcode from a user it may
be fairly old already; maybe as much as 65 or 70 seconds for a one-minute
device. (The users don't generally wait for the device to display a "fresh"
passcode. On the contrary, they will usually rush to try to key in a
passcode that is about to expire rather than be forced to wait for the device
to generate a fresh passcode in its own due time.)

Unfortunately, the replay vulnerability expands still further if it has been
a long time since a user has used his device on a SPECIFIC machine. For
example, if I FREQUENTLY log on to machine "A" but log on to machine "B"
only once or twice a year, then you have FREQUENT opportunities to capture
my passcode if you monitor my path to "A". But Machine "B" must accept
passcodes that are several minutes out of sync because it doesn't get
the opportunity to re-synronize very often. Therefore, unless I use a
DIFFERENT device or a DIFFERENT crypto algorithm for the two different
machines, I cannot be held accountable for my actions on either machine
"A" or "B".

I hope this helps.

-Bob Bosen-
