Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!news.ans.net!cmcl2!mcclb0!huff
From: huff@mcclb0.med.nyu.edu (Edward J. Huff)
Newsgroups: comp.ai.genetic,sci.crypt
Subject: Re: Strong random number generators?
Date: 8 Nov 93 01:08:17 EST
Organization: NYU Medical Center, New York, NY 10016, USA
Lines: 22
Distribution: world
Message-ID: <1993Nov8.010817.1@mcclb0>
References: <1993Nov5.183248.29604@cs.tcd.ie>
NNTP-Posting-Host: mcclb0.med.nyu.edu
Xref: msuinfo comp.ai.genetic:1667 sci.crypt:20931

In article <1993Nov5.183248.29604@cs.tcd.ie>, rwallace@cs.tcd.ie (Russell Wallace) writes:
> Could someone explain just what test a 'cryptographically strong' random
> number generator (e.g. Blum-Blum-Shub) passes, that an LCG fails?  To be
> sure, in principle the LCG is not random, but then neither is any
> algorithm for generating random numbers; and LCG passes every test I've
> ever heard about.
> 
Ok, I'll take a guess.  Assume for the sake of argument that the
multiplier is not secret (after all, you can't change it easily
if the key is compromised).  Then one problem with using xor against
the LCG (especially if no decimation is done) is that a known plaintext
attack may reveal the key with less work than trying all possible keys.

This clearly has nothing to do with randomness, it has to do with resistance
to known plaintext.

Just off the top of my head, but even if this isn't quite exactly right,
the weakness is something like this.  If the _entire_ random number were
used in the XOR, then the complete internal state of the LCG (which
is after all only 32 or 64 bits) could be determined from just a few bytes of
known plaintext.  Then the cypher is broken.

