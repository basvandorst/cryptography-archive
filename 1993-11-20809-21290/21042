Newsgroups: comp.ai.genetic,sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!newsflash.concordia.ca!sifon!athena.ulaval.ca!vm1.ulaval.ca!RAHNJ
From: RAHNJ@vm1.ulaval.ca (Joel Rahn)
Subject: Re: Strong random number generators?
Message-ID: <16C83F0BF.RAHNJ@vm1.ulaval.ca>
Sender: news@athena.ulaval.ca
Nntp-Posting-Host: vm1.ulaval.ca
Organization: Universite Laval
X-Newsreader: NNR/VM S_1.3.2
References: <1993Nov5.183248.29604@cs.tcd.ie> <2bfl7tINN3ne@redwood.csl.sri.com>
Date: Thu, 11 Nov 1993 22:07:08 GMT
Lines: 43
Xref: msuinfo comp.ai.genetic:1720 sci.crypt:21042

In article <2bfl7tINN3ne@redwood.csl.sri.com>
boucher@csl.sri.com (Peter K. Boucher) writes:
 
>In article <1993Nov5.183248.29604@cs.tcd.ie> rwallace@cs.tcd.ie (Russell Wallace) writes:
>>Could someone explain just what test a 'cryptographically strong' random
>>number generator (e.g. Blum-Blum-Shub) passes, that an LCG fails?  To be
>>sure, in principle the LCG is not random, but then neither is any
>>algorithm for generating random numbers; and LCG passes every test I've
>>ever heard about.
>
>It fails this.
>
>
>/*
> * anal.c --
> *
snip
> * This program counts the occurances of each character in a file
> * and notifies the user when a character appears a certain amount
> * more (or less) than the average.  It returns with an error if
> * the disparity is too great.  It is intended to be used to test
> * the output of crypto-systems or pseudo-random number generators,
> * to see if the output is evenly distributed across the character-
> * space.
> *
> * Because the chance of getting byte B after byte A should be 1:256
> * (for all A's and B's), the program also checks that the successors
> * to each byte are evenly distributed.  This means that for each byte
> * value (0 - 255) that occurs in the text, a count is kept of the
> * byte value that followed in the text, and the frequency distribution
> * off these succeeding bytes is also checked.
> *
> * For example, whenever an 'A' appears in the text, the next character
> * is noted.  If the characters that followed 'A's in the text are not
> * evenly distributed, the test failes.
> *
> */
OK, I didn't compile the code and I only scanned it rapidly so maybe this
is right out-to-lunch, but doesn't the above text describe a test of
simple uniformity and a 'runs up' (or 'runs down') test with run-length
equal to two? An LCG that is even worth considering passes these two
tests easily, no?
 
