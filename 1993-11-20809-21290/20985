Path: msuinfo!agate!howland.reston.ans.net!math.ohio-state.edu!sdd.hp.com!hplabs!unix.sri.com!csl.sri.com!boucher
From: boucher@csl.sri.com (Peter K. Boucher)
Newsgroups: comp.ai.genetic,sci.crypt
Subject: Re: Strong random number generators?
Date: 10 Nov 1993 02:07:06 GMT
Organization: Computer Science Lab, SRI International
Lines: 47
Distribution: world
Message-ID: <2bpicaINN301@roche.csl.sri.com>
References: <1993Nov5.183248.29604@cs.tcd.ie> <2bfl7tINN3ne@redwood.csl.sri.com> <1993Nov7.152830.8556@cs.tcd.ie>
NNTP-Posting-Host: redwood.csl.sri.com
Xref: msuinfo comp.ai.genetic:1696 sci.crypt:20985

In article <1993Nov7.152830.8556@cs.tcd.ie>, 
rwallace@cs.tcd.ie (Russell Wallace) writes:
|> boucher@csl.sri.com (Peter K. Boucher) writes:
|> 
|> >In article <1993Nov5.183248.29604@cs.tcd.ie> rwallace@cs.tcd.ie (Russell Wallace) writes:
|> >>Could someone explain just what test a 'cryptographically strong' random
|> >>number generator (e.g. Blum-Blum-Shub) passes, that an LCG fails?  To be
|> >>sure, in principle the LCG is not random, but then neither is any
|> >>algorithm for generating random numbers; and LCG passes every test I've
|> >>ever heard about.
|> 
|> >It fails this.
|> 
|> [test program deleted... checks for relative frequencies of different
|> characters, and the probability of one character following another]
|> 
|> The following random number generator passes your test:
|> 
|> rand (void)
|> {
|> 	randno = randno * 1103515245 + 12345;
|> 	return (randno >> 16) & 0x7FFF;
|> }
|> 

Well, I got the follwing result:

  % mk_crnd 25344 | anal
  avg = 99.00,    lo = 53 * * (min 56),        hi = 129 * (max 154)     
  Some char occurs too infrequently

But, admittedly, I had to run the program several hundred times before
it failed (mk_crnd seeds the randno with time(NULL)*getpid()).  The 
additive congruential generators tend to fail right away.  They also 
fail more (worse) as the numbers get larger.  Surprisingly, yours 
(modified from Unix rand() to shift 16 instead of 1) actually got better 
for the mid-size tests through big tests (100K through 640M).

Still, my test can't bless a PRNG, it can only damn one.  Yours is no
good for crypto because if your opponent is able to figure out a few
bytes if the PRNG output, he can calculate future (and past) output.
Maybe it's fine for other uses.

-- 
Peter K. Boucher
--
DISCLAIMER:  The above does not necessarily represent the opinions of my employer.
