Path: msuinfo!agate!spool.mu.edu!howland.reston.ans.net!europa.eng.gtefsd.com!news.umbc.edu!nobody
From: mikeb@gl.umbc.edu (Mike J. Bell)
Newsgroups: sci.crypt
Subject: Can someone identify the scheme in C prog.?
Date: 11 Nov 1993 16:00:43 -0500
Organization: University of Maryland, Baltimore County
Lines: 95
Message-ID: <2bu95rINN3us@umbc8.umbc.edu>
NNTP-Posting-Host: umbc8.umbc.edu


I came up with an idea for encrypting data (I don't mean I'm the first
to think of this scheme; I'm saying I thought of doing this on my own
without any cryptographic sources).

Here's the program that I wrote that performs my encryption.  It works
on Unix, and it's a filter (stdin->stdout).

Can someone please read through this and tell me who invented it,
where I can learn more about this approach, and how secure of a system
it is?

I'd appreciate it!

Mike Bell

#include <stdio.h> 
#include <stdlib.h> 
#define NUM_CHARS 256         /* ascii standard */
#define NUM_TABLES 4096       /* number of lookup tables */
#define TRUE 1 
#define FALSE 0

typedef struct {              /* temporary place to sort values */
  float f; 
  int c; 
} sort_element_type; 

typedef char table_element_type[NUM_CHARS]; 

typedef int BOOL; 

float rndm(float seed) {      /* simple random gen. -- ignore alg */
  float result; 
  
  result = ((seed*seed*10007.0)+4993.0)/11.0; 
  return(result-((int) result));
}

int lessthan(const void *l, const void *r) {    /* for stdlib::qsort */
  sort_element_type *left=(sort_element_type *) l;
  sort_element_type *right=(sort_element_type *) r; 
  
  return((left->f) < (right->f));
} 

main(int argc, char **argv) {     /* main takes 1 arg, a float key */
  int c, i, j; 
  BOOL decoding=FALSE; 
  float seed; 
  sort_element_type sort_array[NUM_CHARS];
  table_element_type table[NUM_TABLES];       /* here are the lookup tables */
  
  if(argc!=2) { 
    fprintf(stderr, "Usage: mix seed < infile > outfile\n"); 
    exit(1);
  }
  seed=atof(argv[argc-1]);
  if(seed<0) {                /* if the float is neg, we're decoding */
    seed=-seed;
    decoding=TRUE; 
  }
  seed=rndm(seed);                /* prime the random number */
  for(i=0; i<NUM_TABLES; i++) {
    for(j=0; j<NUM_CHARS; j++) {  /* make stream of 256 random numbers */
      sort_array[j].f=(seed=rndm(seed)); 
      sort_array[j].c=j;
    }

    /* now sort them, keeping their indeces with them */

    qsort(sort_array, NUM_CHARS, sizeof(sort_element_type), lessthan);
    if(!decoding) 
      for(j=0; j<NUM_CHARS; j++)     
	table[i][j]=sort_array[j].c;   /* for encoding -> */
    else
      for(j=0; j<NUM_CHARS; j++) 
	table[i][sort_array[j].c]=j;   /* for decoding <- */
  }

  /* the following chooses a random lookup table, then translates
     the input to the output by putting the corresponding character
     in the table
  */

  while((c=fgetc(stdin))!=EOF) 
    fputc(table[(int) (NUM_TABLES*(seed=rndm(seed)))][c], stdout);
}

/* end   CLIP HERE   end */
-- 
-----------------------------------------------------------------------
 Pavements may teem with intense energy...but the city is calm in this
 violent sea  -  Rush, Moving Pictures "The Camera Eye" mikeb@umbc.edu
-----------------------------------------------------------------------
