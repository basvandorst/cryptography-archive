Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!olivea!decwrl!decwrl!csus.edu!netcom.com!nagle
From: nagle@netcom.com (John Nagle)
Subject: Re: dongles - really a waste of resources
Message-ID: <nagleCFso3x.2EG@netcom.com>
Organization: NETCOM On-line Communication Services (408 241-9760 guest)
References: <00974D7A.3C91AF3C@Violet.CCIT.Arizona.EDU>
Distribution: usa,local
Date: Mon, 1 Nov 1993 03:52:45 GMT
Lines: 47

hemmings@Violet.CCIT.Arizona.EDU (bill hemmings) writes:
>> From: nagle@netcom.com (John Nagle)
>>  bontchev@fbihh.informatik.uni-hamburg.de (Vesselin Bontchev) writes:
>>> You are correct that every such protection can be defeated, if one
>>> tries hard enough.

>>    Depends on how much work the "dongle" does.  If you actually put
>> part of the algorithm inside the "dongle", replacing it without rewriting
>> the program can be difficult.  For example, if you encrypt the program's
>> data files, and do all the encryption/decryption in the "dongle" itself,
>> doing without the "dongle" will not be possible unless you can crack

>This statement is patently ridiculous! You load a TSR BEFORE running the
>program, that occasionally checks to see that the REPLACEMENT interrupts
>it installed are still in place. As an example: you make a replacement
>"dongle" that merely causes an "ACK" interrupt, when the port is written
>to (you don't really care if the port is accessed through BIOS or written
>directly - you only want to know the program went there). The ACK
>interrupt is vectored to your TSR, where you perform whatever function(s)
>the dongle did. You can build this replacement for < $10, and use it
>on ANY "dongled" program. Only the TSR has to change.

       The problem is "performing whatever functions the dongle did".
If the function is, say, a DES encryption, with the key inside the
dongle, this will be a bit difficult.

       Actually encrypting the program's data files (assuming it has
a proprietary internal format) is a big aggressive as a protection
method, but it would work.

>By the way, just how much POWER do you imagine is available through the
>printer port? Maybe 10mw? On that, you're forced to use CMOS, and that
>means SLOW! You really want to wait all day for a file to decrypt?

       Admittedly there is a limit on how much compute you can power
off printer and RS-232 ports.  Keyboard ports are an alternative, and
some protection devices use those.  Still, running a CMOS microprocessor
in a dongle is quite possible, and dongles with CPUs are available.

>Dongles are stupid and wasteful for the majority of honest users. They
>are trivially easy to defeat. If you think you have an unbreakable one
>tell me how much you are willing to gamble on it!

       Try to duplicate a Nitendo cartridge.  It's been done, but it took
a major effort to tear down the chip and figure out the encrypted handshake.

       					John Nagle
