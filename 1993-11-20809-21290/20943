Path: msuinfo!agate!linus!linus.mitre.org!linus!mbunix!eachus
From: eachus@spectre.mitre.org (Robert I. Eachus)
Newsgroups: sci.crypt
Subject: Re: Strong random number generators?
Date: 8 Nov 93 10:07:10
Organization: The Mitre Corp., Bedford, MA.
Lines: 29
Message-ID: <EACHUS.93Nov8100710@spectre.mitre.org>
References: <1993Nov5.183248.29604@cs.tcd.ie> <1993Nov6.172242.1@admin.mcc.mass.edu>
	<1993Nov7.120316.13374@infodev.cam.ac.uk>
NNTP-Posting-Host: spectre.mitre.org
In-reply-to: nmm@cl.cam.ac.uk's message of Sun, 7 Nov 1993 12:03:16 GMT

In article <1993Nov7.120316.13374@infodev.cam.ac.uk> nmm@cl.cam.ac.uk (Nick Maclaren) writes:

  > Hang on a minute.  You are describing an incompetently programmed LCG.
  > Equally well, I can write an efficient, cryptographically strong generator
  > that is no use whatsoever on any simulation that has ever been performed!
  > All I have to do is fiddle the scalings and say "well, it is asymptotically
  > good - pity about the results for numbers of less than 10**(10**10)".

    Plonk!  All LCGs fail particular classes of randomness tests.  In
particular, the spectral test for LCGs can be thought of as a measure
of just how bad the generator is.

    On the other hand you obviously don't understand the concept of
cryptographically secure.  The idea is that there is a function, say
G, whose value grows faster than polynomially as the size of the state
of the generator grows.  Any test that would show that the output of
the generator was non-random requires (on average) more than G
operations.  (The on average is due to P=?NP type issues.  For example
you could guess the algorithm and starting values for the RNG and show
that the sequences match.  Of course, for a properly implemented BBS
generator, even this requires non-polynomial amounts of work.)

--

					Robert I. Eachus

with Standard_Disclaimer;
use  Standard_Disclaimer;
function Message (Text: in Clever_Ideas) return Better_Ideas is...
