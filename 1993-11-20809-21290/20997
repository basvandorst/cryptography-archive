Newsgroups: comp.ai.genetic,sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!pavo.csi.cam.ac.uk!nmm
From: nmm@cl.cam.ac.uk (Nick Maclaren)
Subject: Re: Strong random number generators?
Message-ID: <1993Nov10.122225.5685@infodev.cam.ac.uk>
Sender: news@infodev.cam.ac.uk (USENET news)
Nntp-Posting-Host: ouse.cl.cam.ac.uk
Organization: U of Cambridge Computer Lab, UK
References: <1993Nov5.183248.29604@cs.tcd.ie> <2bfl7tINN3ne@redwood.csl.sri.com> <1993Nov7.152830.8556@cs.tcd.ie> <2bpicaINN301@roche.csl.sri.com>
Date: Wed, 10 Nov 1993 12:22:25 GMT
Lines: 51
Xref: msuinfo comp.ai.genetic:1701 sci.crypt:20997

In article <2bpicaINN301@roche.csl.sri.com>, boucher@csl.sri.com (Peter K. Boucher) writes:
|> In article <1993Nov7.152830.8556@cs.tcd.ie>, 
|> rwallace@cs.tcd.ie (Russell Wallace) writes:
|> |> 
|> |> The following random number generator passes your test:
|> |> 
|> |> rand (void)
|> |> {
|> |> 	randno = randno * 1103515245 + 12345;
|> |> 	return (randno >> 16) & 0x7FFF;
|> |> }
|> |> 
|> 
|> Well, I got the follwing result:
|> 
|>   % mk_crnd 25344 | anal
|>   avg = 99.00,    lo = 53 * * (min 56),        hi = 129 * (max 154)     
|>   Some char occurs too infrequently
|> 
|> But, admittedly, I had to run the program several hundred times before
|> it failed (mk_crnd seeds the randno with time(NULL)*getpid()).  The 
|> additive congruential generators tend to fail right away.  They also 
|> fail more (worse) as the numbers get larger.  Surprisingly, yours 
|> (modified from Unix rand() to shift 16 instead of 1) actually got better 
|> for the mid-size tests through big tests (100K through 640M).
|> 
|> Still, my test can't bless a PRNG, it can only damn one.  Yours is no
|> good for crypto because if your opponent is able to figure out a few
|> bytes if the PRNG output, he can calculate future (and past) output.
|> Maybe it's fine for other uses.


32-bit PRNG's are definitely not suitable for any simulation that uses
more than 10^6 numbers in all, and should be avoided.  The simplest one
that I recommend is Applied Statistics (JRSS Series C) algorithm AS183
by Wichmann and Hill.  This passes Peter Boucher's test with flying
colours on 10^9 numbers, though I have theoretical reasons to believe that
it would fail for 10^12.  This generator is suitable for simulations of
up to about 10^9 numbers.

The requirements for statistical and cryptographic PRNGs are subtly
different, which causes an immense amount of confusion in this newsgroup.


Nick Maclaren
University of Cambridge Computer Laboratory,
New Museums Site, Pembroke Street,
Cambridge CB2 3QG, England.
Email:  nmm@cl.cam.ac.uk
Tel.:   +44 223 334761
Fax:    +44 223 334679
