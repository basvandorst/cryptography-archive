Newsgroups: comp.ai.genetic,sci.crypt
Path: msuinfo!uwm.edu!vixen.cso.uiuc.edu!howland.reston.ans.net!pipex!pavo.csi.cam.ac.uk!nmm
From: nmm@cl.cam.ac.uk (Nick Maclaren)
Subject: Re: Strong random number generators?
Message-ID: <1993Nov11.113244.28604@infodev.cam.ac.uk>
Sender: news@infodev.cam.ac.uk (USENET news)
Nntp-Posting-Host: ouse.cl.cam.ac.uk
Organization: U of Cambridge Computer Lab, UK
References: <1993Nov5.183248.29604@cs.tcd.ie> <2bfl7tINN3ne@redwood.csl.sri.com> <1993Nov7.152830.8556@cs.tcd.ie> <2bpicaINN301@roche.csl.sri.com> <1993Nov10.122225.5685@infodev.cam.ac.uk> <2brsc4INN683@roche.csl.sri.com>
Date: Thu, 11 Nov 1993 11:32:44 GMT
Lines: 50
Xref: msuinfo comp.ai.genetic:1713 sci.crypt:21021

In article <2brsc4INN683@roche.csl.sri.com>, boucher@csl.sri.com (Peter K. Boucher) writes:
|> 
|> Nick Maclaren wrote:
|> |> 32-bit PRNG's are definitely not suitable for any simulation that uses
|> |> more than 10^6 numbers in all, and should be avoided.  The simplest one
|> |> that I recommend is Applied Statistics (JRSS Series C) algorithm AS183
|> |> by Wichmann and Hill.  This passes Peter Boucher's test with flying
|> |> colours on 10^9 numbers, though I have theoretical reasons to believe that
|> |> it would fail for 10^12.  This generator is suitable for simulations of
|> |> up to about 10^9 numbers.
|> 
|> I just wrote a program that generates perfect output for my test.
|> Every time a character is output, the following character is one
|> more than the following character was last time.  For example, if
|> 'A' is followed by 'X', then the next time an 'A' is output, it will
|> be followed by 'Y' (and the previous time, 'A' was followed by 'W').
|> 
|> This goes to show you that failing my test will show a problematic 
|> non-uniformity, but passing it does not say that your output is 
|> cryptographically useful.

Or even useful for simulations.  I would not rely on a simple character
pair test for testing any generator.  As far as I know, the Wichmann-Hill
generator has passed all standard tests with fairly large sample sizes.  I
have tried quite a few with 10^8 or more.  However, it is almost trivially
predictable and therefore of little use for cryptography.

I tried it just to check that your test would not reject a competently
programmed LCG with a reasonable modulus (nearly 2^45 in this case).

|> What tests detect the problem with my new ``random'' number generator?

Many of the standard statistical tests will do so.  If they don't throw the
generator out for being not uniform enough, they will throw it out as being
too uniform.  This assumes that the tests have been programmed correctly
(i.e. as a competent statistician would).

Note that the 'too uniform' problem is the basis for my statement that no
generator should ever be used for more numbers than period^(2/3) for
simulation or sqrt(period) for cryptography.  In fact these limits are too
high, but you will almost certainly have trouble if you exceed them!


Nick Maclaren
University of Cambridge Computer Laboratory,
New Museums Site, Pembroke Street,
Cambridge CB2 3QG, England.
Email:  nmm@cl.cam.ac.uk
Tel.:   +44 223 334761
Fax:    +44 223 334679
