Getting Started
---------------

Before you start, you should read the docs (or at least the first few sections
which outline how to use the software).  I know that all software says this,
but with SFS it's especially important.  You should also check the section on
incompatibilities in the docs before you start.  Among other things this will
show you how to run the built-in self-tests to check disk access and make sure
SFS won't run into any problems with disk I/O.  I recommend *very strongly*
that you run mksfs with the -c option before you create an encrypted SFS
partition on your hard drive.

In addition, before you rush into using SFS, if you plan to use it on a hard
drive I would recommend backing up anything which you regard as valuable.
People all over the world have been using it for some months on everything from
360K floppies to 2.1 GB SCSI drives without problems, but I really can't 100%
guarantee that it'll work perfectly on your system - there are just too many
strange pieces of hardware and software out there for that.  Also, if you use a
package which formats floppies to unusually high densities, a test on a blank
disk is recommended, although SFS has been tested with a number of unusual
higher-density disk formats and seems to function OK.

There is no Windows setup program included yet, so you have to set things up
manually:

  - Copy SFS.DLL into \Windows\System.
  - Copy CTL3DV2.DLL into \Windows\System unless there's a newer copy already
    there.
  - Copy SFSCPL.CPL into \Windows\System.
  - Copy SFS.EXE into \Windows.
  - If you want to have timed and hotkey unmounts available under Windows, add
    RUN=SFS.EXE to your WIN.INI (if there's already a RUN= line present, add
    SFS.EXE to the list of programs on the line).
  - Make sure MOUNTSFS.EXE and MOUNTSFS.PIF are in a directory in your path
    (or copy them into the Windows directory).

There will be a new SFS item in the control panel which you can use to control
the operation of SFS volumes.

OK, now you can go ahead and install it.  I'll wait here.


Possible Problems
-----------------

Finished?  OK.... here are some (rather obscure) possible problems which have
been reported to date:

There seems to be some bizarre interaction with version 6.30 of the Logitech
Mouse driver and SFS.  In particular, mounting and unmounting SFS volumes can
disable the mouse driver and even cause it to not recognise the mouse any more.
With nothing but the mouse driver loaded, simply running mksfs or mountsfs is
enough to lose the mouse under DOS.  These problems have occurred when using a
serial mouse and QEMM 7.03 with stealth enabled, but don't seem to occur with a
bus mouse and no QEMM.  There are no interrupt conflicts, and neither the mouse
driver nor SFS are overwriting each others data or code areas.  The mouse can
be reenabled simply by running Windows.  In addition, running mountsfs in a
secondary shell spawned from Windows (not just a secondary shell under DOS, but
specifically one where Windows is acting as an intermediary) seems to isolate
the mouse from mountsfs, and the mouse isn't deactivated.  If anyone has any
ideas on this, I'd like to hear from them.

There has been a report of some sort of odd problem with an older version of
QEMM when EMS suport is turned on.  The driver reports an internal consistency
check failure indicating that something has corrupted it, and the problem goes
away without EMS support enabled.  Possibly a newer version of QEMM will fix
this, or it may be that the problem doesn't involve QEMM but is due to some
other software behaving unusually while under the influence of QEMM with EMS.

If the FAT on an encrypted disk is edited to create artificial bad sectors, and
the volume subsequently fixed with Norton Disk Doctor, and NDD finds a problem
on the disk, the SFS volume will be unmounted after NDD has finished fixing the
problem.  The only way to do this is with a write to the control channel on the
SFS driver using a special packet format, so how NDD manages to perform this
unmount is a puzzle.

SFS has been tested with (among other things) Smartdrv 4.0, Windoze 3.1, QEMM
7.0 (with Stealth), SHARE, Stacker 3.1, Stacker 4.0, and assorted disk
utilities such as Norton DiskEdit, Norton Disk Doctor, Microsoft and Norton
Antivirus (with innoculation), Norton Speed Disk, MS Defrag, VOPT, and various
others, and has so far not caused any problems.  If anyone tests it with any
other system software, please let me know.

Finally, if anyone ever writes about SFS anywhere (apart from on the internet),
I'd appreciate hearing about it, since it's annoying sometimes getting
third-hand references to articles I'll never be able to find which were
published months beforehand.


Changes for Version 1.1
-----------------------

SFS 1.1 standardises the keyboard handling during password input to make
password entry independant of keyboard layout.  This means that users of non-US
keyboards may find that their passwords from SFS 1.0 are no longer accepted by
SFS 1.1.  The solution to this is to use the SFS 1.0 software to change the
password to some simple format, then use the SFS 1.1 software to change it back
to the actual password.  This can be done as follows:

    1. Use chsfs 1.0 to change the password from the real password to
       something like ". . . . . " (5 dots and spaces).
    2. Use chsfs 1.1 to change the password from ". . . . . " back to
       the real password.

This process will only take a minute or so, and will probably only be necessary
on a very small number of systems.  The reason for the change is that keyboard
drivers like KEYB.COM rearrange the key layout, but this doesn't take effect
until the driver is loaded, so that a password entered from a certain keyboard
may change depending on whether it was entered before the keyboard driver was
loaded (during an driver MOUNT operation) or afterwards (with mountsfs). SFS
1.1 standardizes the key entry to make it independant of the keyboard type or
layout.

SFS 1.1 can create encrypted volumes on SCSI disks which are normally
inaccessible from DOS.  If you plan to use a SCSI drive with SFS, please take
the usual precautions: Run "mksfs -c" first, and back up your data before
encrypting.  You will need to have some form of ASPI or CAM SCSI manager loaded
before SFS can access the drive.  If anyone uses an ASPI manager other than
ASPI2DOS.SYS, ASPI4DOS.SYS, ASPICAM.SYS, ASPIEDOS.SYS, or BTDOSM.SYS, please
let me know so I can add the information to the docs.


Changes for Version 1.2
-----------------------

SFS 1.2 contains a number of enhancements such as smart card handling, Windows
support, and proper internationalization of character sets for volume names,
which have resulted in the addition of extra fields to the information
contained in the SFS volume header (the format of SFS volume headers is
explained in more detail in SFS9.DOC).  Although SFS 1.20 is fully
backwards-compatible with previous versions, it is a good idea to update the
volume header to the latest version for enhanced control over the performance
of the SFS software.  The mountsfs program has the ability to automatically
update the volume header for you when it is run.

If mountsfs detects a pre-1.20 volume header, it will ask:

  Volume `Encrypted Data' contains a slightly older volume header type which
  was used by previous versions of SFS.  Would you like mountsfs to update the
  volume header for you [y/n]

You should answer 'Y' to allow mountsfs to update the volume header for you.
Once the header has been updated, this message won't be displayed again.
Although the update could be done invisibly as the volume header is scanned,
the idea behind asking permission is let you know what mountsfs is doing and
that nothing strange is going on.

SFS 1.2 also has a key safeguarding mechanism based on a threshold scheme which
allows emergency access to SFS volumes if the original key is forgotten or
lost.  Although the scheme allows a key to be broken up into multiple shares,
the ability to create more than 1 share is only available in the registered
version as a multiple-share key escrow capability is mainly of interest to
commercial users. 

Things I'd like feedback on:

 - Can someone with a recent BIOS and EIDE drive check that the EIDE tests in
   `mksfs -c' work OK?  I don't have the hardware here to check this myself
   (actually I've tried it on a few recent machines, it's amazing what the
   mksfs test will tell you about manufacturers claims for BIOS EIDE support -
   a 1995 DEC machine with a Phoenix BIOS wouldn't even acknowledge it had an
   EIDE-aware BIOS present, although the BIOS setup allowed you to set all
   sorts of options for it).

 - Does anyone want to help move WinSFS to other languages?  There are about 50
   (mostly short) strings which need to be translated, if you'd like to do a
   version in another language let me know so I can send you the text.
