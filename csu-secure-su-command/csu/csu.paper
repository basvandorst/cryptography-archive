
                             Cryptographic SU
  (a secure method of network su access without network password exposure)


CSU offers a method for authentication of su authority on an individual
basis without exposure of a fixed password. CSU is presented strictly as
a secure means of granting the su privelege over a possibly hostile or
compromised network. CSU is based upon ideas presented in 
"Secure Superuser access via the Internet" by Darrel Suggs.
Within that report which was funded under DOD Contract N00421-91-C-0028
a challenge response delta password scheme was presented and pseudo-code
provided for same. As the source code was specifically NOT available to
other users(i.e. they arent releasing any copies), the decision was made to
implement the algorithm with the MD5 Cryptographic authentication Algorithm
(A public domain algorithm).

A. csu - cryptographic SU , the host program responsible for 
issuing a random challenge to the user requesting SU access.
The random challenge is based upon the time of day, cryptographically
mixed with the MD5 Algorithm and the username. The low order 8 bytes
of the MD5 output string is output as a hex-ascii challenge to the
user. At that point the user on his LOCAL host executes the repond 
program(soft-token), the challenge is typed into respond along
with the users 8 digit hex-ascii pin. respond calculates a response
to the challenge and the user enters this into the requesting CSU. If
all has gone well up to this point then the user is identified and an
su shell started on his behalf. If the user has made a mistake or does
not remember his PIN then he or she will not be granted access. The passwords
generated exhibit a 1 time property in that they cannot be recorded
and the session played back to spoof a legitimate user.

B. respond - the cryptographic software token, it accepts the users
pin along with the challenge and generates 1 unique password.



There has also been an adduser command added to ad new userid and pins
deletion is still done manually.

Scott and I are throwing this to the net in the hope that others will
find it useful it is being posted to sci.crypt initially prior
to a later release in alt.sources... its being put in sci.crypt so
that it may be examined by at least some knowledgeable about
md5.
   
    scott gustafson and myself may be reached at


    scott@cadence.com
   

    snake@cadence.com(Kelly)

    kelly@netcom.com
::::::::::::::
inbox/2114
::::::::::::::
Return-Path: <scott>
Received: from cadence.Cadence.COM by cds9041 (5.65+/1.5) 	id AA01403; Fri, 12 Feb 93 15:50:26 -0800
Message-Id: <9302122359.AA14593@cadence.Cadence.COM>
Received: from macman.Cadence.COM by cadence.Cadence.COM (5.61/3.14) 	id AA14593; Fri, 12 Feb 93 15:59:59 -0800
Sender: scott
Date: Fri, 12 Feb 1993 16:02:52 -0800
To: wcs@anchor.ho.att.com
From: scott
Subject: Re: Dynamic Password schemes - a software approach "csu"
Cc: snake

This is a note to let you know that I am working on the changes you
suggested.  The next version will be posted this weekend in
alt.sources.

Thanks for your comments.

>Date: Mon, 8 Feb 93 15:41:34 EST
>From: wcs@anchor.ho.att.com (Bill Stewart)
>In-Reply-To: kelly@netcom.com's message of Fri, 5 Feb 1993 21:55:25 GMT
>Subject: Dynamic Password schemes - a software approach "csu"
>
>1) let the user name be longer than 7 characters.  char userid[8];

Fixed.

>2) be a little more tolerant about the argv[0] being "csu".

This will be fixed when I change the code to support csu
as a login program.

>3) Remember to set sensitive variables before calling
>		system("/bin/sh")

Same as #2.  Will be fixed.

>4) Consider the effects of open file descriptors that you might want
>	to close or reset before calling system().

Which ones?  I could find any that were left open before going to
a shell.

>5) I notice that you don't pass system("/bin/sh") any of the
> command line arguments.

When I use the program as a login shell, this is no longer a
problem.  What do you think?

>6) One of the exec() functions may be more useful than system() --

Well, I'm trying to keep this program as portable as possible.
Should I change the makefile to be user definable at compile time?

>7) While *I* prefer ksh or at least /bin/sh as a shell, some people
>	prefer csh, which is the default shell for su on Suns,

This will be fixed like #2.
---
Scott Gustafson    (408)894-3432 me    (900) 976-HAHA beeper
Cadence Design Systems, 555 River Oaks Pkwy., San Jose, CA  95134
Internet: scott@cadence.com

PGP public key available upon request.
::::::::::::::
inbox/2115
::::::::::::::
Return-Path: <scott>
Received: from cadence.Cadence.COM by cds9041 (5.65+/1.5) 	id AA01415; Fri, 12 Feb 93 15:51:03 -0800
Message-Id: <9302130000.AA14681@cadence.Cadence.COM>
Received: from macman.Cadence.COM by cadence.Cadence.COM (5.61/3.14) 	id AA14681; Fri, 12 Feb 93 16:00:09 -0800
Sender: scott
Date: Fri, 12 Feb 1993 16:03:14 -0800
To: bob@soest.hawaii.edu
From: scott
Subject: Re: Re Dyanamic Password schemes - a software approach "csu"
Cc: snake

This is a note to let you know that I am working on the changes you
suggested.  The next version will be posted this weekend in
alt.sources.

Thanks for your comments.

>From: Bob Cunningham <bob@soest.hawaii.edu>
>Subject: Re Dyanamic Password schemes - a software approach "csu"
>Date: Mon, 8 Feb 1993 09:14:07 -1000
>
>Clever approach, clean implementation.  Is  Darrel Suggs' report
>generally available anywhere?  I'd think it would make very interesting
>reading.

Well, it came out of the USENIX Assoc. UNIX Security Symposium.  Darrel
can be reached at dsuggs@hubcap.clemson.edu.

>The scheme usefully avoids sending root password in the clear via a net,
>but at the cost of having to separately control the integrity of four
>separate components (csu, new-account, respond, and /etc/csu.local).
>If any of those are compromised (in any of various ways), the whole
>setup could be subverted.

This is true.  I would expect that the server machine is secure and that
the remote machine may be hostile.  The main problem is that there is
no easy way to get input into a hostile machine.  Any ideas?

>I assume that "respond" is supposed to be on a person's local machine,
>whilest "csu", "new-account", and /etc/csu.local are all local to
>the remote machine where "su" is needed.  The documentation is
>a little unclear about exactly where the different pieces should
>really go.

I have fixed the makefile to do the instalation.  You can do a make
server, make client, or make install.  Read the makefile for new
options that are configurable.

>Subverting "csu" would, of course, give someone the same (root)
>privileges as executing the program.  Even a dummy front-end might
>be able to log some potentially-damaging info.

True, but again, I assume that the server is secure.

>Gaining control over /etc/csu.local would, of course, allow someone to
>change the entries or add their own.  [One potential way: if bin owns
>/etc (it does as SunOS is distributed) and you happen to export /etc rw
>to any system where someone outside of your trusted few can become bin
>(with or without being able to become root on the other system), then
>/etc/csu.local can be easily subverted.  Of course, exactly the
>same thing applies to /etc/passwd, which has bitten us here.]

Same as above.

>Gaining control of, or installing a dummy front-end onto, "new-account"
>would expose the PINs of new entries at least.

Same as above.

>Replacing or front-ending "response" could, at a minimum, trap PINs.

This is true.  I am trying to keep the response code portable so that
is can be compiled on a palmtop or smartcard.  This will eliminate
the problem.

>The three programs all check that they're being executed under their
>proper names, which is good, but they don't check for their full path
>names.  Thus, they can't be executed using their full path name, which
>makes it possible to subvert them by placing program(s) of the same
>name(s) earlier in the user's path.

This will be fixed when I change csu to become a login shell.

>Neither "new-account" nor either of the other two programs tries to
>hide anything that's typed in.  Suggestion:  you might want to try
>using getpass(3v).

Fixed.

>The username is checked against the environmental variable USER
>rather using the users real uid and double-checking against passwd
>info which probably would be more secure.  (Indeed, the current
>scheme allows someone who isn't even a valid user of the machine
>to use the programs if they can change their USER environmental
>variable to a valid username in /etc/csu.local...though that
>might even be see as a feature rather than a bug...).

Don't know what to do about this.  In one case this bug was fixed.
Response assumed that your current login name was the same as
your remote login, which is not always true, so I allow you to
change your login for respond.  If you can execute csu, I know
you are already a member of the group in the group file, so
does it matter if your login is also the same as USER?

>Though apparently secure against replays, a 3rd-party capable of
>intercepting the 2-way transactions might still be able to pull off a
>few clever tricks since the programs have no notion of where the
>response from the user (typing the code generated by "response",
>presumably via rlogin) actually comes from.  Various techniques of
>subverting xterm come to mind as possibilities for doing something like
>that...

True, still I assume that the server is secure.

>The routines should probably be linked statically, to guard against
>subversion of /usr/lib/libc.o (on Sun workstations, at least).

I'm working on this one.  My ld didn't like the options I gave it.

>The Makefile is unportable (even those of us who have Sun's acc don't
>always put it in /usr/lang!-).  Much of the rest of the code looks
>fairly easy to make portable, tho.

I fixed up the makefile.  You really need to read it before compiling.

>The underlying everything, notably when SECURE is not turned on, is the
>relianace upon the last 8 bits of MD5 checksums being relatively random
>and well-distributed.  While that's may quite likely be true, I doubt
>anyone has verified it.  If not true, then some sort of brute force
>cracking attempt may be much easier than you think.

I don't know about this, but I would find it very hard to crack based on
the time.
---
Scott Gustafson    (408)894-3432 me    (900) 976-HAHA beeper
Cadence Design Systems, 555 River Oaks Pkwy., San Jose, CA  95134
Internet: scott@cadence.com

PGP public key available upon request.
