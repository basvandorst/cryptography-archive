/*
 *	gen64.i - compiled DES permutations and substitution tables
 *		Automatically generated by desgen v4.0 from des64.i
 *		  of form input blocks are chars, but loaded as Long,
 may cause alignment problems - may need byte swapping
 *		  on Thu Nov 19 12:35:27 1992
 *		  for use in the DES library routines
 *		Copyright (C) 1989 by Lawrence Brown and CITRAD
 *
 */

#include	"bits.h"

#define ip(out0,out1,in)	{\
	register Long	in0 = ((Long *)in)[0], in1 = ((Long *)in)[1];\
	out0 = \
		(in1 & BIT6) << 25 | \
		(in1 & BIT14) << 16 | \
		(in1 & BIT22) << 7 | \
		(in1 & BIT30) >> 2 | \
		(in0 & BIT6) << 21 | \
		(in0 & BIT14) << 12 | \
		(in0 & BIT22) << 3 | \
		(in0 & BIT30) >> 6 | \
		(in1 & BIT4) << 19 | \
		(in1 & BIT12) << 10 | \
		(in1 & BIT20) << 1 | \
		(in1 & BIT28) >> 8 | \
		(in0 & BIT4) << 15 | \
		(in0 & BIT12) << 6 | \
		(in0 & BIT20) >> 3 | \
		(in0 & BIT28) >> 12 | \
		(in1 & BIT2) << 13 | \
		(in1 & BIT10) << 4 | \
		(in1 & BIT18) >> 5 | \
		(in1 & BIT26) >> 14 | \
		(in0 & BIT2) << 9 | \
		(in0 & BIT10) << 0 | \
		(in0 & BIT18) >> 9 | \
		(in0 & BIT26) >> 18 | \
		(in1 & BIT0) << 7 | \
		(in1 & BIT8) >> 2 | \
		(in1 & BIT16) >> 11 | \
		(in1 & BIT24) >> 20 | \
		(in0 & BIT0) << 3 | \
		(in0 & BIT8) >> 6 | \
		(in0 & BIT16) >> 15 | \
		(in0 & BIT24) >> 24 ; \
	out1 = \
		(in1 & BIT7) << 24 | \
		(in1 & BIT15) << 15 | \
		(in1 & BIT23) << 6 | \
		(in1 & BIT31) >> 3 | \
		(in0 & BIT7) << 20 | \
		(in0 & BIT15) << 11 | \
		(in0 & BIT23) << 2 | \
		(in0 & BIT31) >> 7 | \
		(in1 & BIT5) << 18 | \
		(in1 & BIT13) << 9 | \
		(in1 & BIT21) << 0 | \
		(in1 & BIT29) >> 9 | \
		(in0 & BIT5) << 14 | \
		(in0 & BIT13) << 5 | \
		(in0 & BIT21) >> 4 | \
		(in0 & BIT29) >> 13 | \
		(in1 & BIT3) << 12 | \
		(in1 & BIT11) << 3 | \
		(in1 & BIT19) >> 6 | \
		(in1 & BIT27) >> 15 | \
		(in0 & BIT3) << 8 | \
		(in0 & BIT11) >> 1 | \
		(in0 & BIT19) >> 10 | \
		(in0 & BIT27) >> 19 | \
		(in1 & BIT1) << 6 | \
		(in1 & BIT9) >> 3 | \
		(in1 & BIT17) >> 12 | \
		(in1 & BIT25) >> 21 | \
		(in0 & BIT1) << 2 | \
		(in0 & BIT9) >> 7 | \
		(in0 & BIT17) >> 16 | \
		(in0 & BIT25) >> 25 ; \
}


#define fp(out,in0,in1)	{\
	((Long *)out)[0] = \
		(in1 & BIT24) << 7 | \
		(in0 & BIT24) << 6 | \
		(in1 & BIT16) << 13 | \
		(in0 & BIT16) << 12 | \
		(in1 & BIT8) << 19 | \
		(in0 & BIT8) << 18 | \
		(in1 & BIT0) << 25 | \
		(in0 & BIT0) << 24 | \
		(in1 & BIT25) >> 2 | \
		(in0 & BIT25) >> 3 | \
		(in1 & BIT17) << 4 | \
		(in0 & BIT17) << 3 | \
		(in1 & BIT9) << 10 | \
		(in0 & BIT9) << 9 | \
		(in1 & BIT1) << 16 | \
		(in0 & BIT1) << 15 | \
		(in1 & BIT26) >> 11 | \
		(in0 & BIT26) >> 12 | \
		(in1 & BIT18) >> 5 | \
		(in0 & BIT18) >> 6 | \
		(in1 & BIT10) << 1 | \
		(in0 & BIT10) << 0 | \
		(in1 & BIT2) << 7 | \
		(in0 & BIT2) << 6 | \
		(in1 & BIT27) >> 20 | \
		(in0 & BIT27) >> 21 | \
		(in1 & BIT19) >> 14 | \
		(in0 & BIT19) >> 15 | \
		(in1 & BIT11) >> 8 | \
		(in0 & BIT11) >> 9 | \
		(in1 & BIT3) >> 2 | \
		(in0 & BIT3) >> 3 ; \
	((Long *)out)[1] = \
		(in1 & BIT28) << 3 | \
		(in0 & BIT28) << 2 | \
		(in1 & BIT20) << 9 | \
		(in0 & BIT20) << 8 | \
		(in1 & BIT12) << 15 | \
		(in0 & BIT12) << 14 | \
		(in1 & BIT4) << 21 | \
		(in0 & BIT4) << 20 | \
		(in1 & BIT29) >> 6 | \
		(in0 & BIT29) >> 7 | \
		(in1 & BIT21) << 0 | \
		(in0 & BIT21) >> 1 | \
		(in1 & BIT13) << 6 | \
		(in0 & BIT13) << 5 | \
		(in1 & BIT5) << 12 | \
		(in0 & BIT5) << 11 | \
		(in1 & BIT30) >> 15 | \
		(in0 & BIT30) >> 16 | \
		(in1 & BIT22) >> 9 | \
		(in0 & BIT22) >> 10 | \
		(in1 & BIT14) >> 3 | \
		(in0 & BIT14) >> 4 | \
		(in1 & BIT6) << 3 | \
		(in0 & BIT6) << 2 | \
		(in1 & BIT31) >> 24 | \
		(in0 & BIT31) >> 25 | \
		(in1 & BIT23) >> 18 | \
		(in0 & BIT23) >> 19 | \
		(in1 & BIT15) >> 12 | \
		(in0 & BIT15) >> 13 | \
		(in1 & BIT7) >> 6 | \
		(in0 & BIT7) >> 7 ; \
}


#define pc1(out0,out1,in)	{\
	register Long	in0 = ((Long *)in)[0], in1 = ((Long *)in)[1];\
	out0 = \
		(in1 & BIT7) << 24 | \
		(in1 & BIT15) << 15 | \
		(in1 & BIT23) << 6 | \
		(in1 & BIT31) >> 3 | \
		(in0 & BIT7) << 20 | \
		(in0 & BIT15) << 11 | \
		(in0 & BIT23) << 2 | \
		(in0 & BIT31) >> 7 | \
		(in1 & BIT6) << 17 | \
		(in1 & BIT14) << 8 | \
		(in1 & BIT22) >> 1 | \
		(in1 & BIT30) >> 10 | \
		(in0 & BIT6) << 13 | \
		(in0 & BIT14) << 4 | \
		(in0 & BIT22) >> 5 | \
		(in0 & BIT30) >> 14 | \
		(in1 & BIT5) << 10 | \
		(in1 & BIT13) << 1 | \
		(in1 & BIT21) >> 8 | \
		(in1 & BIT29) >> 17 | \
		(in0 & BIT5) << 6 | \
		(in0 & BIT13) >> 3 | \
		(in0 & BIT21) >> 12 | \
		(in0 & BIT29) >> 21 | \
		(in1 & BIT4) << 3 | \
		(in1 & BIT12) >> 6 | \
		(in1 & BIT20) >> 15 | \
		(in1 & BIT28) >> 24 ; \
	out1 = \
		(in1 & BIT1) << 30 | \
		(in1 & BIT9) << 21 | \
		(in1 & BIT17) << 12 | \
		(in1 & BIT25) << 3 | \
		(in0 & BIT1) << 26 | \
		(in0 & BIT9) << 17 | \
		(in0 & BIT17) << 8 | \
		(in0 & BIT25) >> 1 | \
		(in1 & BIT2) << 21 | \
		(in1 & BIT10) << 12 | \
		(in1 & BIT18) << 3 | \
		(in1 & BIT26) >> 6 | \
		(in0 & BIT2) << 17 | \
		(in0 & BIT10) << 8 | \
		(in0 & BIT18) >> 1 | \
		(in0 & BIT26) >> 10 | \
		(in1 & BIT3) << 12 | \
		(in1 & BIT11) << 3 | \
		(in1 & BIT19) >> 6 | \
		(in1 & BIT27) >> 15 | \
		(in0 & BIT3) << 8 | \
		(in0 & BIT11) >> 1 | \
		(in0 & BIT19) >> 10 | \
		(in0 & BIT27) >> 19 | \
		(in0 & BIT4) << 3 | \
		(in0 & BIT12) >> 6 | \
		(in0 & BIT20) >> 15 | \
		(in0 & BIT28) >> 24 ; \
}


#define pc2(out,in0,in1)	{\
	((Long *)out)[0] = \
		(in0 & BIT18) << 5 | \
		(in0 & BIT15) << 7 | \
		(in0 & BIT21) << 0 | \
		(in0 & BIT8) << 12 | \
		(in0 & BIT31) >> 12 | \
		(in0 & BIT27) >> 9 | \
		(in0 & BIT29) >> 12 | \
		(in0 & BIT4) << 12 | \
		(in0 & BIT17) >> 2 | \
		(in0 & BIT26) >> 12 | \
		(in0 & BIT11) << 2 | \
		(in0 & BIT22) >> 10 | \
		(in0 & BIT9) << 2 | \
		(in0 & BIT13) >> 3 | \
		(in0 & BIT20) >> 11 | \
		(in0 & BIT28) >> 20 | \
		(in0 & BIT6) << 1 | \
		(in0 & BIT24) >> 18 | \
		(in0 & BIT16) >> 11 | \
		(in0 & BIT25) >> 21 | \
		(in0 & BIT5) >> 2 | \
		(in0 & BIT12) >> 10 | \
		(in0 & BIT19) >> 18 | \
		(in0 & BIT30) >> 30 ; \
	((Long *)out)[1] = \
		(in1 & BIT19) << 4 | \
		(in1 & BIT8) << 14 | \
		(in1 & BIT29) >> 8 | \
		(in1 & BIT23) >> 3 | \
		(in1 & BIT13) << 6 | \
		(in1 & BIT5) << 13 | \
		(in1 & BIT30) >> 13 | \
		(in1 & BIT20) >> 4 | \
		(in1 & BIT9) << 6 | \
		(in1 & BIT15) >> 1 | \
		(in1 & BIT27) >> 14 | \
		(in1 & BIT12) << 0 | \
		(in1 & BIT16) >> 5 | \
		(in1 & BIT11) >> 1 | \
		(in1 & BIT21) >> 12 | \
		(in1 & BIT4) << 4 | \
		(in1 & BIT26) >> 19 | \
		(in1 & BIT7) >> 1 | \
		(in1 & BIT14) >> 9 | \
		(in1 & BIT18) >> 14 | \
		(in1 & BIT10) >> 7 | \
		(in1 & BIT24) >> 22 | \
		(in1 & BIT31) >> 30 | \
		(in1 & BIT28) >> 28 ; \
}


Long SP[8][64] = {
				 /* S[1] 		 */
 0x00808200, 0x00000000, 0x00008000, 0x00808202,
 0x00808002, 0x00008202, 0x00000002, 0x00008000,
 0x00000200, 0x00808200, 0x00808202, 0x00000200,
 0x00800202, 0x00808002, 0x00800000, 0x00000002,
 0x00000202, 0x00800200, 0x00800200, 0x00008200,
 0x00008200, 0x00808000, 0x00808000, 0x00800202,
 0x00008002, 0x00800002, 0x00800002, 0x00008002,
 0x00000000, 0x00000202, 0x00008202, 0x00800000,
 0x00008000, 0x00808202, 0x00000002, 0x00808000,
 0x00808200, 0x00800000, 0x00800000, 0x00000200,
 0x00808002, 0x00008000, 0x00008200, 0x00800002,
 0x00000200, 0x00000002, 0x00800202, 0x00008202,
 0x00808202, 0x00008002, 0x00808000, 0x00800202,
 0x00800002, 0x00000202, 0x00008202, 0x00808200,
 0x00000202, 0x00800200, 0x00800200, 0x00000000,
 0x00008002, 0x00008200, 0x00000000, 0x00808002,
				 /* S[2] 		 */
 0x40084010, 0x40004000, 0x00004000, 0x00084010,
 0x00080000, 0x00000010, 0x40080010, 0x40004010,
 0x40000010, 0x40084010, 0x40084000, 0x40000000,
 0x40004000, 0x00080000, 0x00000010, 0x40080010,
 0x00084000, 0x00080010, 0x40004010, 0x00000000,
 0x40000000, 0x00004000, 0x00084010, 0x40080000,
 0x00080010, 0x40000010, 0x00000000, 0x00084000,
 0x00004010, 0x40084000, 0x40080000, 0x00004010,
 0x00000000, 0x00084010, 0x40080010, 0x00080000,
 0x40004010, 0x40080000, 0x40084000, 0x00004000,
 0x40080000, 0x40004000, 0x00000010, 0x40084010,
 0x00084010, 0x00000010, 0x00004000, 0x40000000,
 0x00004010, 0x40084000, 0x00080000, 0x40000010,
 0x00080010, 0x40004010, 0x40000010, 0x00080010,
 0x00084000, 0x00000000, 0x40004000, 0x00004010,
 0x40000000, 0x40080010, 0x40084010, 0x00084000,
				 /* S[3] 		 */
 0x00000104, 0x04010100, 0x00000000, 0x04010004,
 0x04000100, 0x00000000, 0x00010104, 0x04000100,
 0x00010004, 0x04000004, 0x04000004, 0x00010000,
 0x04010104, 0x00010004, 0x04010000, 0x00000104,
 0x04000000, 0x00000004, 0x04010100, 0x00000100,
 0x00010100, 0x04010000, 0x04010004, 0x00010104,
 0x04000104, 0x00010100, 0x00010000, 0x04000104,
 0x00000004, 0x04010104, 0x00000100, 0x04000000,
 0x04010100, 0x04000000, 0x00010004, 0x00000104,
 0x00010000, 0x04010100, 0x04000100, 0x00000000,
 0x00000100, 0x00010004, 0x04010104, 0x04000100,
 0x04000004, 0x00000100, 0x00000000, 0x04010004,
 0x04000104, 0x00010000, 0x04000000, 0x04010104,
 0x00000004, 0x00010104, 0x00010100, 0x04000004,
 0x04010000, 0x04000104, 0x00000104, 0x04010000,
 0x00010104, 0x00000004, 0x04010004, 0x00010100,
				 /* S[4] 		 */
 0x80401000, 0x80001040, 0x80001040, 0x00000040,
 0x00401040, 0x80400040, 0x80400000, 0x80001000,
 0x00000000, 0x00401000, 0x00401000, 0x80401040,
 0x80000040, 0x00000000, 0x00400040, 0x80400000,
 0x80000000, 0x00001000, 0x00400000, 0x80401000,
 0x00000040, 0x00400000, 0x80001000, 0x00001040,
 0x80400040, 0x80000000, 0x00001040, 0x00400040,
 0x00001000, 0x00401040, 0x80401040, 0x80000040,
 0x00400040, 0x80400000, 0x00401000, 0x80401040,
 0x80000040, 0x00000000, 0x00000000, 0x00401000,
 0x00001040, 0x00400040, 0x80400040, 0x80000000,
 0x80401000, 0x80001040, 0x80001040, 0x00000040,
 0x80401040, 0x80000040, 0x80000000, 0x00001000,
 0x80400000, 0x80001000, 0x00401040, 0x80400040,
 0x80001000, 0x00001040, 0x00400000, 0x80401000,
 0x00000040, 0x00400000, 0x00001000, 0x00401040,
				 /* S[5] 		 */
 0x00000080, 0x01040080, 0x01040000, 0x21000080,
 0x00040000, 0x00000080, 0x20000000, 0x01040000,
 0x20040080, 0x00040000, 0x01000080, 0x20040080,
 0x21000080, 0x21040000, 0x00040080, 0x20000000,
 0x01000000, 0x20040000, 0x20040000, 0x00000000,
 0x20000080, 0x21040080, 0x21040080, 0x01000080,
 0x21040000, 0x20000080, 0x00000000, 0x21000000,
 0x01040080, 0x01000000, 0x21000000, 0x00040080,
 0x00040000, 0x21000080, 0x00000080, 0x01000000,
 0x20000000, 0x01040000, 0x21000080, 0x20040080,
 0x01000080, 0x20000000, 0x21040000, 0x01040080,
 0x20040080, 0x00000080, 0x01000000, 0x21040000,
 0x21040080, 0x00040080, 0x21000000, 0x21040080,
 0x01040000, 0x00000000, 0x20040000, 0x21000000,
 0x00040080, 0x01000080, 0x20000080, 0x00040000,
 0x00000000, 0x20040000, 0x01040080, 0x20000080,
				 /* S[6] 		 */
 0x10000008, 0x10200000, 0x00002000, 0x10202008,
 0x10200000, 0x00000008, 0x10202008, 0x00200000,
 0x10002000, 0x00202008, 0x00200000, 0x10000008,
 0x00200008, 0x10002000, 0x10000000, 0x00002008,
 0x00000000, 0x00200008, 0x10002008, 0x00002000,
 0x00202000, 0x10002008, 0x00000008, 0x10200008,
 0x10200008, 0x00000000, 0x00202008, 0x10202000,
 0x00002008, 0x00202000, 0x10202000, 0x10000000,
 0x10002000, 0x00000008, 0x10200008, 0x00202000,
 0x10202008, 0x00200000, 0x00002008, 0x10000008,
 0x00200000, 0x10002000, 0x10000000, 0x00002008,
 0x10000008, 0x10202008, 0x00202000, 0x10200000,
 0x00202008, 0x10202000, 0x00000000, 0x10200008,
 0x00000008, 0x00002000, 0x10200000, 0x00202008,
 0x00002000, 0x00200008, 0x10002008, 0x00000000,
 0x10202000, 0x10000000, 0x00200008, 0x10002008,
				 /* S[7] 		 */
 0x00100000, 0x02100001, 0x02000401, 0x00000000,
 0x00000400, 0x02000401, 0x00100401, 0x02100400,
 0x02100401, 0x00100000, 0x00000000, 0x02000001,
 0x00000001, 0x02000000, 0x02100001, 0x00000401,
 0x02000400, 0x00100401, 0x00100001, 0x02000400,
 0x02000001, 0x02100000, 0x02100400, 0x00100001,
 0x02100000, 0x00000400, 0x00000401, 0x02100401,
 0x00100400, 0x00000001, 0x02000000, 0x00100400,
 0x02000000, 0x00100400, 0x00100000, 0x02000401,
 0x02000401, 0x02100001, 0x02100001, 0x00000001,
 0x00100001, 0x02000000, 0x02000400, 0x00100000,
 0x02100400, 0x00000401, 0x00100401, 0x02100400,
 0x00000401, 0x02000001, 0x02100401, 0x02100000,
 0x00100400, 0x00000000, 0x00000001, 0x02100401,
 0x00000000, 0x00100401, 0x02100000, 0x00000400,
 0x02000001, 0x02000400, 0x00000400, 0x00100001,
				 /* S[8] 		 */
 0x08000820, 0x00000800, 0x00020000, 0x08020820,
 0x08000000, 0x08000820, 0x00000020, 0x08000000,
 0x00020020, 0x08020000, 0x08020820, 0x00020800,
 0x08020800, 0x00020820, 0x00000800, 0x00000020,
 0x08020000, 0x08000020, 0x08000800, 0x00000820,
 0x00020800, 0x00020020, 0x08020020, 0x08020800,
 0x00000820, 0x00000000, 0x00000000, 0x08020020,
 0x08000020, 0x08000800, 0x00020820, 0x00020000,
 0x00020820, 0x00020000, 0x08020800, 0x00000800,
 0x00000020, 0x08020020, 0x00000800, 0x00020820,
 0x08000800, 0x00000020, 0x08000020, 0x08020000,
 0x08020020, 0x08000000, 0x00020000, 0x08000820,
 0x00000000, 0x08020820, 0x00020020, 0x08000020,
 0x08020000, 0x08000800, 0x08000820, 0x00000000,
 0x08020820, 0x00020800, 0x00020800, 0x00000820,
 0x00000820, 0x00020020, 0x08000000, 0x08020800,
};


char keyrot[ROUNDS] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };

