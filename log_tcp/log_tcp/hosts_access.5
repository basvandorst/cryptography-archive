.TH HOSTS_ACCESS 5
.SH NAME
hosts_access \- format of host access control files
.SH DESCRIPTION
This manual page describes a simple access control language that is
based on host (or domain) names, netgroups, internet addresses (or
network numbers) and on network daemon process names. Examples are
given at the end.
.PP
In the following text, \fIdaemon\fR is the the process name (argv[0]
value) of a network daemon process, and \fIclient\fR is the name and/or
address of a remote host.
.SH ACCESS CONTROL FILES
The access control software consults two files:
.IP o
Access will be granted when a (daemon,client) pair matches an entry in
the \fI/etc/hosts.allow\fR file.
.IP o
Otherwise, access will be denied when a (daemon,client) pair matches an
entry in the \fI/etc/hosts.deny\fR file.
.IP o
Otherwise, access will be granted.
.PP
A non-existing access control file is treated as if it were an empty
file. Thus, access control can be turned off by providing no access
control files.
.SH ACCESS CONTROL RULES
Each access control file consists of zero or more lines of text.  These
lines are processed in order of apperance. The search terminates when a
match is found.
.IP o
Lines that begin with a `#\' character are ignored.
.IP o
All other lines should satisfy the following format, things between []
being optional:
.sp
.ti +3
daemon_list : client_list [ : shell_command ]
.PP
\fIdaemon_list\fR is a list of one or more daemon process names
(argv[0] values) or wildcards (see below).  
.PP
\fIclient_list\fR is a list
of one or more host names, host addresses, patterns or wildcards (see
below) that will be matched against the remote host name or address.
.PP
List elements should be separated by blanks and/or commas.  
.PP
With the exception of netgroup lookups, all access control checks are
case insensitive.
.br
.ne 4
.SH PATTERNS
The access control language implements the following patterns:
.IP o
A string that begins with a `.\' character.  A client name or address
is matched if its last components match the specified pattern.  For
example, the pattern `.tue.nl\' matches the host name
`wzv.win.tue.nl\'.
.IP o
A string that ends with a `.\' character.  A client name or address is
matched if its first fields match the given string.  For example, the
pattern `131.155.\' matches the address of (almost) every host on the
Eind\%hoven University network (131.155.x.x).
.IP o
A string that begins with a `@\' character is treated as a netgroup
name.  Netgroups are usually supported on systems with NIS (formerly
YP) data bases. A client host name is matched if it is a (host) member
of the specified netgroup.
.IP o
An expression of the form `n.n.n.n/m.m.m.m\' is interpreted as a
`net/mask\' pair. A client address is matched if `net\' is equal to the
bitwise AND of the address and the `mask\'. For example, the net/mask
pattern `131.155.72.0/255.255.254.0\' matches every address in the
range `131.155.72.0\' through `131.155.73.255\'.
.SH WILDCARDS
The access control language supports explicit wildcards:
.IP ALL
If this token appears in a daemon_list, it matches all network daemon
process names.  If the ALL token appears in a client_list, it matches
all client names and addresses.
.IP LOCAL
Matches any string that does not contain a dot character.
Typical use is in client_lists.
.IP UNKNOWN
Matches any host whose name and/or address lookup failed.  Should be
used with care, because host names may also be unavailable due to
temporary name server problems.
.IP FAIL
Like the ALL wildcard, but causes the software to pretend that the scan
of the current access control table fails. This is useful to avoid
unwanted matches with later entries in the same access control table.
.br
.ne 6
.SH SHELL COMMANDS
If the first-matched access control rule contains a shell command, that
command is subjected to the following subsitutions:
.IP %a
expands to the remote host address.
.IP %c
expands to client information: user@host, user@address, a host name, or
just an address, depending on how much information is available.
.IP %h
expands to the remote host name (or address, if the host name is
unavailable).
.IP %d
expands to the daemon process name (argv[0] value).
.IP %p
expands to the daemon process id.
.IP %u
expands to the remote user name.
.IP %%
expands to a single `%\' character.
.PP
The result is executed by a \fI/bin/sh\fR child process with standard
input, output and error connected to \fI/dev/null\fR.  Specify an `&\'
at the end of the command if you do not want to wait until it has
completed.
.PP
Shell commands should not rely on the PATH setting of the inetd.
Instead, they should use absolute path names, or they should begin with
an explicit PATH=whatever statement.
.SH EXAMPLES
The following example restricts services to hosts within the local
domain (no `.\' character in the host name), 
all hosts below the \fI.some.domain\fR, and all hosts in the
\fIsome_netgroup\fR netgroup:
.PP
.ne 2
/etc/hosts.allow: 
.in +3
ALL: LOCAL, .some.domain, @some_netgroup
.PP
.ne 2
/etc/hosts.deny: 
.in +3
ALL: ALL
.PP
.ne 4
The following fragment matches any host below .some.domain, with the
exception of hosts below .sub.some.domain:
.PP
.ne 2
.in +3
FAIL: .sub.some.domain 
.br
ALL: .some.domain
.PP
.ne 8
In order to deny some hosts all services, except ftp:
.PP
/etc/hosts.allow: 
.in +3
in.ftpd: ALL
.PP
/etc/hosts.deny: 
.in +3
ALL: some.host.name, .some.domain
.PP
The example can be improved a little by including address and/or
network/netmask information, so that there is no way to "sneak in" when
host names are temporarily unavailable.
.PP
The last example performs a reverse finger whenever someone invokes
the tftp service from outside the local domain. The result is mailed
to root:
.PP
.ne 2
/etc/hosts.allow:
.in +3
.nf
in.tftpd: LOCAL, .my.domain
.PP
.ne 2
/etc/hosts.deny:
.in +3
.nf
in.tftpd: ALL: /usr/ucb/finger -l @%h | /usr/ucb/mail -s %d-%h root &
.fi
.PP
On network firewall systems this trick can be carried even further.
The typical network firewall only provides a limited set of services to
the outer world. All other services can be "bugged" just like the above
tftp example. The result is an excellent early-warning system.
.SH DIAGNOSTICS
An error is reported when a syntax error is found in a host access
control rule; when the length of access control rule exceeds the STDIO
buffer size; when an access control rule is not terminated by a newline
character; when the result of %<character> expansion would overflow an
internal buffer; when a system call fails that shouldn\'t.  All
problems are reported via the syslog daemon.
.SH FILES
.na
.nf
/etc/hosts.allow, (daemon,client) pairs that are granted access.
/etc/hosts.deny, (daemon,client) pairs that are denied access.
.ad
.fi
.SH BUGS
If a name server lookup times out, the host name will not be available
to the access control software, even though the host is registered.
.PP
Domain name server lookups are case insensitive; NIS (formerly YP)
netgroup lookups are case sensitive.
.PP
Some UDP (and RPC) daemons linger around for a while after they have
serviced a request, in case another request comes in. In the inetd
configuration file, these daemons are registered with the `wait\'
option.  Access control will apply only to the request that started
such a daemon. This restriction does not apply to connection-oriented
(TCP) services.
.SH AUTHOR
.na
.nf
Wietse Venema (wietse@wzv.win.tue.nl)
Department of Mathematics and Computing Science
Eindhoven University of Technology
Den Dolech 2, P.O. Box 513, 5600 MB Eindhoven, The Netherlands
\" @(#) hosts_access.5 1.9 92/06/11 22:21:37
