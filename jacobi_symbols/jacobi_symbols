From cet1@cus.cam.ac.uk Sun Jul 17 15:26:24 PDT 1994
Article: 29190 of sci.crypt
Path: vanbc.wimsey.com!unixg.ubc.ca!nntp.cs.ubc.ca!newsxfer.itd.umich.edu!gatech!howland.reston.ans.net!pipex!lyra.csx.cam.ac.uk!camcus!cet1
From: cet1@cus.cam.ac.uk (Chris Thompson)
Newsgroups: sci.math,sci.crypt
Subject: Re: Help: computing Jacobi symbols
Date: 17 Jul 1994 20:58:01 GMT
Organization: University of Cambridge, England
Lines: 59
Distribution: world
Message-ID: <30c60p$i11@lyra.csx.cam.ac.uk>
References: <1994Jul17.044652.9003@midway.uchicago.edu> <1994Jul17.055439.28926@galois.mit.edu>
NNTP-Posting-Host: apus.cus.cam.ac.uk
Xref: vanbc.wimsey.com sci.math:73596 sci.crypt:29190

In article <1994Jul17.044652.9003@midway.uchicago.edu>,
Andrew Chen <achen@uhuru.uchicago.edu> writes:
|>
|> As part of a project on cryptography, I'm trying to find a way to
|> compute the Jacobi symbol of a large composite number, without knowing
|> its factors.  I would greatly appreciate any pointers to information
|> (or even better, source code) on this topic. 

In article <1994Jul17.055439.28926@galois.mit.edu>, tycchow@math.mit.edu 
(Timothy Y. Chow) replies:
|> 
|> There is an extension of quadratic reciprocity to the Jacobi symbol,
|> which holds provided both top and bottom are odd.  (So you'll have to
|> factor out powers of two, but that's no big deal.)  Reducing the Jacobi
|> symbol by this method should be considerably faster than factoring.

The fact that this gives a fast method of calculating the Jacobi symbol ought
to come pretty early in any course on computational number theory: probably
right after Euclid's GCD algorithm which it greatly resembles. It must surely
be in Knuth ACP Vol 2 (not to hand); it is certainly in Cohen [1], section 1.4.

For single-precision or mildly multi-precision arguments, the "binary" version
(Cohen's algorithm 1.4.12) tends to be fastest. For simplicity, assume that
a and b are positive, and that b is odd. Then the following calculates the
Jacobi symbol $ a \overwithdelims() b $:

 1. Check preconditions; set j := 1.
 2. While a is even, do: a := a>>1; j := +j,-j,-j,+j according as 
    (b mod 8) = 1,3,5,7.
 3. If a < b then: exchange a and b; j := -j iff (a mod 4) = 3 and
    (b mod 4) = 3.
 4. a := a - b; unless a = 0 go to step 2.
 5. If b = 1 the Jacobi symbol is j; otherwise it is 0 (a and b were 
    not coprime).

There is plenty of scope for optimising the basic loop, and Cohen has
several useful remarks on the subject. I would like to mention something
*not* in Cohen, as I have seen implementations that miss this (in retrospect,
obvious) idea.

Rather than flipping the sign of j in steps 2 and 3, we keep two (register)
variables j2 and j3, set to zero in step 1: the number of sign flips is
represented by the 4+2 bits of j2 and the 2 bit of j3. In step 2 we set
j2 := j2 XOR b and in step 3 we set j3 := j3 XOR (a AND b). [In the multi-
precision case, assuming only that the radix is a multiple of 8, we use
the l.s. words of a and b instead.] Then at the end we can deduce the value
of j as

   1 - ( ((j2>>1) XOR j2 XOR j3) AND 2 )

but this bit-twiddling no longer has to be done inside the loop.

[1] Henri Cohen
    A Course in Computational Algebraic Number Theory
    Springer-Verlag (1993) ISBN 0-387-55640-0

Chris Thompson
Internet: cet1@phx.cam.ac.uk
JANET:    cet1@uk.ac.cam.phx


