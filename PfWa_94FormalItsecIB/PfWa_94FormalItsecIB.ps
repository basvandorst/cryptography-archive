%!PS-Adobe-3.0
%%Title: (Formal IT\311)
%%Creator: (Microsoft Word: LaserWriter 8 8.2)
%%CreationDate: (23:37 Uhr Mittwoch, 12. April 1995)
%%For: (Birgit Pfitzmann)
%%Pages: 26
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Times-Roman Times-Bold Symbol Times-Italic
%%DocumentNeededFonts: Helvetica Helvetica-Oblique Helvetica-Bold Times-Roman Times-Bold Symbol Times-Italic
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%%DocumentMedia: Default 595 842 0 () ()
%ADO_ImageableArea: 28 30 566 811
%%EndComments
userdict begin/dscInfo 5 dict dup begin
/Title(Formal IT\311)def
/Creator(Microsoft Word: LaserWriter 8 8.2)def
/CreationDate(23:37 Uhr Mittwoch, 12. April 1995)def
/For(Birgit Pfitzmann)def
/Pages 1 def
end def end
/md 219 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
level2 startnoload
%%BeginFile: adobe_psp_patterns_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/patfreq Z
/patangle Z
/bk Z
/fg Z
/docolorscreen Z
/graystring Z
/pattransf{}def
/initQDpatterns
{
/patfreq 9.375 store
/patangle
1 0 $m defaultmatrix dtransform
exch atan
por not
{90 add}if
normland{180 add}if
store
:a
}def
/docolorscreen
/setcolorscreen where
{
pop/currentcolorscreen where
{
pop/setcmykcolor where
{
pop true
}{
false
}ifelse
}{
false
}ifelse
}{
false
}ifelse
def
/setgraypattern
{
/graystring xs
patfreq
patangle
{
1 add
4 mul
cvi
graystring
exch get
exch
1 add 4 mul
cvi
7 sub
bitshift
1 and
}setscreen
64 div setgray
}bd
/:b
{
/pattransf load settransfer
pop pop pop
setgraypattern
}bd
docolorscreen startnoload
/screensave 5 array def
/:a{currentgray currentscreen currenttransfer screensave astore pop}bd
/:e{screensave aload pop settransfer setscreen setgray}bd
/:d
{
pop pop pop
/pattransf load settransfer
setgraypattern 8{pop}repeat
}bd
/:c
/:d ld
docolorscreen endnoload docolorscreen not startnoload
/screensave 20 array def
/:a{currentcmykcolor currentcolorscreen currentcolortransfer screensave astore pop}bd
/:e{screensave aload pop setcolortransfer setcolorscreen setcmykcolor}bd
/rstring Z
/grstring Z
/blstring Z
/convroll{64 div 4 -1 roll}bd
/setcolorpattern
{
/graystring xs
/blstring xs
/grstring xs
/rstring xs
patfreq
patangle
{
1 add 4 mul cvi rstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi grstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi blstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi graystring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
setcolorscreen
convroll convroll convroll convroll
setcmykcolor
}bd
/:d
{
pop pop pop
/pattransf load settransfer
pop pop setcolorpattern
}bd
/:c
/:d ld
docolorscreen not endnoload
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_patterns_level2
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/pmtx Z
/BGnd Z
/FGnd Z
/PaintData Z
/PatternMtx Z
/PatHeight Z
/PatWidth Z
/$d Z
/savecolor 4 array def
/savecolorspace Z
/:a{
mark 0 0 0 currentcolor savecolor astore pop cleartomark
/savecolorspace currentcolorspace store
}bd
/:e{
savecolorspace setcolorspace
mark savecolor aload pop setcolor cleartomark
}bd
/initQDpatterns
{
gS
initmatrix
mT dup 4 get exch 5 get :T
1 0 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
0 1 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
neg
scale
0
por not{90 add}if
normland{180 add}if
rotate
matrix currentmatrix
gR
/pmtx xs
:a
}bd
/:t
{
14 dict begin
/BGnd xdf
/FGnd xdf
/PaintData xdf
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PatternMtx[24 0 0 24 0 0]def
/PaintProc
BGnd null ne
{
{
begin
BGnd aload pop :F
0 0 1 1 rF
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}{
{
begin
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}ifelse
def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/:u
{
14 dict begin
/$d 8 dict def
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PaintData xdf
/PatHeight xdf
/PatWidth xdf
/PatternMtx[PatWidth 0 0 PatHeight 0 0]def
$d begin
/ImageType 1 def
/MultipleDataSource false def
/Height PatHeight def
/Width PatWidth def
/Decode[0 1 0 1 0 1]def
/ImageMatrix PatternMtx def
/DataSource PaintData def
/BitsPerComponent 8 def
end
/PaintProc
{
begin
$d image
end
}def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/bk[1 1 1]def
/fg[0 0 0]def
/:b{
:t
setpattern
pop pop
}bd
/:d{
:t
setpattern
10{pop}repeat
}bd
/:c{
:u
setpattern
10{pop}repeat
}bd
%%EndFile
level2 not endnoload
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if end
%%EndProlog
%%BeginSetup
md begin
countdictstack[{
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack[{
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack[{
%%BeginFeature: *PageRegion A4Small
level2 { 
		2 dict dup /PageSize [595 842] put dup /ImagingBBox [28 30 566 811] put setpagedevice
	}{
		a4small
	} ifelse
%%EndFeature
}featurecleanup
(Birgit Pfitzmann)setjob
/mT[1 0 0 -1 28 811]def
initQDpatterns
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Helvetica
%%IncludeFont: Helvetica-Oblique
%%IncludeFont: Helvetica-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Bold
%%IncludeFont: Symbol
%%IncludeFont: Times-Italic
/f0_1/Helvetica
:mre
/f0_36 f0_1 36 scf
/f0_24 f0_1 24 scf
/f0_18 f0_1 18 scf
/f0_14 f0_1 14 scf
/f0_12 f0_1 12 scf
/f0_10 f0_1 10 scf
/f0_9 f0_1 9 scf
/f2_1/Helvetica-Oblique
:mre
/f2_10 f2_1 10 scf
/f3_1/Helvetica-Bold
:mre
/f3_10 f3_1 10 scf
/f4_1/Times-Roman
:mre
/f4_14 f4_1 14 scf
/f4_12 f4_1 12 scf
/f4_10 f4_1 10 scf
/f4_9 f4_1 9 scf
/f6_1/Times-Bold
:mre
/f6_24 f6_1 24 scf
/f6_18 f6_1 18 scf
/f6_14 f6_1 14 scf
/f6_12 f6_1 12 scf
/f7_1/Symbol
:bsr
240/apple pd
:esr
/f7_12 f7_1 12 scf
/f7_10 f7_1 10 scf
/f8_1 f7_1
def
/f8_14 f8_1 14 scf
/f8_12 f8_1 12 scf
/f9_1 f4_1
:v def
/f11_1/Times-Italic
:mre
/f11_12 f11_1 12 scf
/f11_10 f11_1 10 scf
/f12_1 f7_1
:mi
/f12_12 f12_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 1 of 26)setjob
%%EndPageSetup
gS 0 0 538 781 rC
205 78 :M
f0_36 sf
(HILDESHEIMER)S
205 114 :M
.005(INFORMATIK-)A
205 150 :M
(BERICHTE)S
435 150 :M
f4_12 sf
.438 .044(ISSN 0941-3014)J
75 274 :M
f0_18 sf
-.067(Birgit Pfitzmann)A
75 294 :M
-.071(Michael Waidner)A
75 354 :M
-.135(A General Framework for Formal Notions)A
75 374 :M
-.156(of "Secure" Systems)A
75 474 :M
(11/94)S
185 474 :M
-.166(\(April  1994\))A
270 538 168 53 rC
273 558 :M
f0_24 sf
(UNIVERSIT\200T)S
273 583 :M
(HILDESHEIM)S
gR
gS 0 0 538 781 rC
211 567 :M
211 567 211 562.658 211 554 :C
211 545.325 211 541 211 541 :C
211 541 212.83 541 216.5 541 :C
220.163 541 222 541 222 541 :C
222 541 222 543.158 222 547.5 :C
222 551.825 222 554 222 554 :C
222 554 222.83 553.492 224.5 552.5 :C
226.163 551.492 227 551 227 551 :C
227 551 227 549.325 227 546 :C
227 542.658 227 541 227 541 :C
227 541 228.996 541 233 541 :C
236.996 541 239 541 239 541 :C
239 541 239 542.492 239 545.5 :C
239 548.492 239 550 239 550 :C
239 550 234.33 552.825 225 558.5 :C
215.663 564.158 211 567 211 567 :C
211 567 211 567 211 567 :C
:K
gS
eofill
gR
stroke
257 555 :M
257 555 257 559.491 257 568.5 :C
257 577.491 257 582 257 582 :C
257 582 254.996 582 251 582 :C
246.996 582 245 582 245 582 :C
245 582 245 579.658 245 575 :C
245 570.325 245 568 245 568 :C
245 568 243.996 568.491 242 569.5 :C
239.996 570.491 239 571 239 571 :C
239 571 239 572.825 239 576.5 :C
239 580.158 239 582 239 582 :C
239 582 237.163 582 233.5 582 :C
229.83 582 228 582 228 582 :C
228 582 228 580.325 228 577 :C
228 573.658 228 572 228 572 :C
228 572 232.83 569.158 242.5 563.5 :C
252.163 557.825 257 555 257 555 :C
257 555 257 555 257 555 :C
:K
gS
eofill
gR
stroke
211 582 :M
211 582 212.83 582 216.5 582 :C
220.163 582 222 582 222 582 :C
222 582 222 580.158 222 576.5 :C
222 572.825 222 571 222 571 :C
222 571 227.83 567.658 239.5 561 :C
251.163 554.325 257 551 257 551 :C
257 551 257 549.325 257 546 :C
257 542.658 257 541 257 541 :C
257 541 254.996 541 251 541 :C
246.996 541 245 541 245 541 :C
245 541 245 542.658 245 546 :C
245 549.325 245 551 245 551 :C
245 551 239.33 554.325 228 561 :C
216.663 567.658 211 571 211 571 :C
211 571 211 572.825 211 576.5 :C
211 580.158 211 582 211 582 :C
211 582 211 582 211 582 :C
:K
gS
eofill
gR
stroke
64 630 :M
f0_9 sf
.271 .027(Dieser Bericht ist)J
64 641 :M
(herausgegeben vom)S
209 637 :M
f0_18 sf
-.091(Institut f\237r Informatik)A
209 715 :M
f0_14 sf
-.101(Postfach  10 13 63)A
209 732 :M
.025 .003(31113  Hildesheim)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 2 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 3 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
169 118 :M
f6_24 sf
-.721(A General Framework for)A
115 142 :M
-.38(Formal Notions of \322Secure\323 Systems)A
147 205 :M
f4_14 sf
.519 .052(Birgit Pfitzmann)J
140 235 :M
f4_12 sf
-.125(Universit\212t Hildesheim)A
143 250 :M
-.104(Institut f\237r Informatik)A
142 265 :M
-.147(Marienburger Platz 22)A
120 280 :M
-.062(D-31141 Hildesheim, Germany)A
107 301 :M
-.088(pfitzb@informatik.uni-hildesheim.de)A
346 205 :M
f4_14 sf
-.04(Michael Waidner)A
344 235 :M
f4_12 sf
-.081(Universit\212t Karlsruhe)A
341 250 :M
-.119(Fakult\212t f\237r Informatik)A
376 265 :M
-.188(Zirkel 2)A
323 280 :M
-.024(D-76128 Karlsruhe, Germany)A
346 301 :M
(waidner@ira.uka.de)S
70 386 :M
f6_18 sf
-.851(Abstract)A
70 412 :M
f4_12 sf
.495 .05(Research about secure systems takes place in several largely unrelated communities without)J
70 427 :M
.461 .046(much mutual understanding, and without a common notion of \322security\323. Example areas are)J
70 442 :M
.011 .001(access control and information flow control, cryptology, secure software, statistical databases,)J
70 457 :M
.349 .035(and fault tolerance and safety. We strive to unify these approaches, or at least to give them a)J
70 472 :M
.069 .007(common understanding of their relations, by presenting a general framework for the design of)J
70 487 :M
1.1 .11(secure systems and showing how the main research activities of several example areas fit)J
70 502 :M
-.094(together in it.)A
87 517 :M
1.292 .129(Our main issue is not terminology, but the notions of security as such, and how such)J
70 532 :M
.051 .005(security can be achieved. We keep formalism to a minimum and use simple terminology from)J
70 547 :M
-.005(general computer science, avoiding all the jargons of the communities involved. Nevertheless,)A
70 562 :M
-.089(in contrast to previous approaches, our goal was to identify notions that can be defined formally)A
70 577 :M
-.031(\(at least for those design stages that are accessible to formalization at all\), and to relate them to)A
70 592 :M
-.039(usual formal notions about system design, e.g., \322specification\323 and \322correctness\323.)A
87 607 :M
-.017(Particular notions we discuss are trust models, the requirement that a system does \322nothing)A
70 622 :M
-.097(else\323 than what is specified, and the interplay of individual goals and a global specification. Our)A
70 637 :M
-.093(approach is not restricted to systems with a trusted central authority or computing base.)A
70 698 :M
f6_18 sf
-.569(Keywords)A
70 724 :M
f4_12 sf
-.077(Theoretical Foundations of Security, Specification, Security Semantics, Cryptology)A
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 4 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
300 46 :M
f4_10 sf
.417 .042<D0203220D0>J
70 117 :M
f6_18 sf
-.711(Contents)A
70 149 :M
f4_14 sf
(1)S
98 149 :M
.164(Introduction)A
172 149 :M
.506(......................................................................................)A
169 149 :M
( )S
516 149 :M
(3)S
70 173 :M
(2)S
98 173 :M
-.049(Overview of the Framework By Design Stages)A
360 173 :M
.513(.......................................)A
358 173 :M
( )S
516 173 :M
(4)S
98 188 :M
f4_12 sf
.5(2.1)A
126 188 :M
-.156(Before a Specification)A
232 188 :M
1.014(.......................................................................)A
230 188 :M
( )S
517 188 :M
(5)S
143 200 :M
-.124(Variant for \322Products\323)A
252 200 :M
1.015(..................................................................)A
249 200 :M
( )S
517 200 :M
(5)S
98 212 :M
.5(2.2)A
126 212 :M
-.192(Specification)A
188 212 :M
1.012(..................................................................................)A
187 212 :M
( )S
517 212 :M
(5)S
143 224 :M
-.053(Two-Phase Structure)A
244 224 :M
1.015(....................................................................)A
243 224 :M
( )S
517 224 :M
(5)S
143 236 :M
-.148(\322Nothing-Else\323 Aspect)A
252 236 :M
1.015(..................................................................)A
251 236 :M
( )S
517 236 :M
(6)S
143 248 :M
6.913 .691(Preformalized Goals.....................................................................)J
240 248 :M
( )S
517 248 :M
(6)S
98 260 :M
.5(2.3)A
126 260 :M
7.898 .79(Trust Model...................................................................................)J
184 260 :M
( )S
517 260 :M
(6)S
143 272 :M
-.076(Trust Subjects)A
212 272 :M
1.013(............................................................................)A
211 272 :M
( )S
517 272 :M
(7)S
143 284 :M
-.165(Trust Objects)A
208 284 :M
1.013(.............................................................................)A
206 284 :M
( )S
517 284 :M
(7)S
143 296 :M
-.136(Trust Degrees)A
212 296 :M
1.013(............................................................................)A
209 296 :M
( )S
517 296 :M
(7)S
98 308 :M
.5(2.4)A
126 308 :M
-.132(Component Division and Component Specification)A
368 308 :M
1.028(.....................................)A
366 308 :M
( )S
517 308 :M
(8)S
98 320 :M
.5(2.5)A
126 320 :M
-.135(Implementation of Components)A
276 320 :M
1.017(............................................................)A
275 320 :M
( )S
517 320 :M
(8)S
70 341 :M
f4_14 sf
(3)S
98 341 :M
1.683 .168(Known Research Areas in this Framework.............................................)J
336 341 :M
( )S
516 341 :M
(9)S
98 356 :M
f4_12 sf
.5(3.1)A
126 356 :M
2.918 .292(Access Control and Information Flow Control...........................................)J
344 356 :M
( )S
517 356 :M
(9)S
98 368 :M
.5(3.2)A
126 368 :M
.894(Cryptology..................................................................................)A
180 368 :M
( )S
511 368 :M
(10)S
98 380 :M
.5(3.3)A
126 380 :M
5.075 .508(Fault Tolerance and Safety................................................................)J
252 380 :M
( )S
511 380 :M
(10)S
98 392 :M
.5(3.4)A
126 392 :M
-.229(Other Areas)A
184 392 :M
1.012(.................................................................................)A
182 392 :M
( )S
511 392 :M
(11)S
70 413 :M
f4_14 sf
(4)S
98 413 :M
.261 .026(Overview of Formalizations)J
260 413 :M
.508(..............................................................)A
257 413 :M
( )S
509 413 :M
(11)S
98 428 :M
f4_12 sf
.5(4.1)A
126 428 :M
.889(Interfaces....................................................................................)A
172 428 :M
( )S
511 428 :M
(12)S
98 440 :M
.5(4.2)A
126 440 :M
5.201 .52(Behaviour at an Interface..................................................................)J
244 440 :M
( )S
511 440 :M
(13)S
98 452 :M
.5(4.3)A
126 452 :M
-.113(Service and Ignorance)A
232 452 :M
1.015(.....................................................................)A
231 452 :M
( )S
511 452 :M
(14)S
143 464 :M
-.129(More About Service Properties)A
292 464 :M
1.019(......................................................)A
289 464 :M
( )S
511 464 :M
(15)S
143 476 :M
-.155(More About Ignorance)A
252 476 :M
1.016(................................................................)A
250 476 :M
( )S
511 476 :M
(15)S
143 488 :M
-.117(Integrity and Availability, and Other Types of Properties)A
412 488 :M
1.043(........................)A
409 488 :M
( )S
511 488 :M
(15)S
143 500 :M
-.12(Completeness)A
212 500 :M
1.014(..........................................................................)A
209 500 :M
( )S
511 500 :M
(16)S
98 512 :M
.5(4.4)A
126 512 :M
-.139(Property- and State-Oriented Specification Techniques)A
384 512 :M
1.033(...............................)A
382 512 :M
( )S
511 512 :M
(16)S
143 524 :M
-.164(State-Oriented Specification and Interfaces)A
344 524 :M
1.025(.........................................)A
343 524 :M
( )S
511 524 :M
(17)S
98 536 :M
.5(4.5)A
126 536 :M
4.96 .496(Semantics with Trust Models.............................................................)J
264 536 :M
( )S
511 536 :M
(18)S
143 548 :M
5.687 .569(Individual Service Goals..............................................................)J
260 548 :M
( )S
511 548 :M
(18)S
143 560 :M
-.164(State-Oriented Global Service Specification)A
348 560 :M
1.026(........................................)A
347 560 :M
( )S
511 560 :M
(19)S
143 572 :M
5.454 .545(Individual Ignorance Goals...........................................................)J
272 572 :M
( )S
511 572 :M
(20)S
143 584 :M
-.145(Ignorance as Additional Semantics of a Complete Service Specification)A
480 584 :M
1.167(.......)A
477 584 :M
( )S
511 584 :M
(20)S
70 605 :M
f4_14 sf
(5)S
98 605 :M
.47(Outlook...........................................................................................)A
144 605 :M
( )S
509 605 :M
(21)S
70 648 :M
f6_18 sf
-.664(Figures)A
70 671 :M
f4_12 sf
-.046(Figure 1)A
138 671 :M
-.077(Stages in the design of a secure system)A
324 671 :M
1.021(................................................)A
322 671 :M
( )S
517 671 :M
(4)S
70 683 :M
-.046(Figure 2)A
138 683 :M
-.103(Illustration of the notions of interface and access points)A
400 683 :M
1.038(...........................)A
398 683 :M
( )S
511 683 :M
(12)S
70 695 :M
-.046(Figure 3)A
138 695 :M
-.119(Intended interface and intended components of a simple distributed system)A
492 695 :M
1.333(....)A
489 695 :M
( )S
511 695 :M
(12)S
70 707 :M
-.046(Figure 4)A
138 707 :M
-.186(Example of an altered interface)A
284 707 :M
1.018(........................................................)A
283 707 :M
( )S
511 707 :M
(13)S
70 719 :M
-.046(Figure 5)A
138 719 :M
-.156(Example of a constructive specification)A
324 719 :M
1.022(..............................................)A
322 719 :M
( )S
511 719 :M
(17)S
70 731 :M
-.046(Figure 6)A
138 731 :M
-.122(Treating adversary inputs in the security semantics of a state-oriented)A
138 743 :M
-.158(global service specification)A
268 743 :M
1.017(............................................................)A
265 743 :M
( )S
511 743 :M
(20)S
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 5 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
300 46 :M
f4_10 sf
.417 .042<D0203320D0>J
70 87 :M
f6_18 sf
(1)S
104 87 :M
-.817(Introduction)A
70 113 :M
f4_12 sf
.265 .026(There are different informal definitions of security. However, most people might agree that a)J
70 128 :M
-.017(secure IT-system \()A
12 f9_1 :p
3.334 :m
(i)S
-.017(nformation )A
3.334 :m
(t)S
-.016(echnology\) should be correct, but not only that. This is enough)A
70 143 :M
.83 .083(of a starting point.)J
f4_9 sf
0 -4 rm
.212(1)A
0 4 rm
f4_12 sf
.869 .087( We show a design framework where one can see what aspects beyond)J
70 158 :M
.449 .045(usual correctness can be considered, how they are related, and which research areas actually)J
70 173 :M
-.131(treat them.)A
70 194 :M
-.153(Our intentions are threefold:)A
70 215 :M
<A5>S
87 215 :M
-.108(To promote understanding between different communities dealing with security.)A
70 236 :M
<A5>S
87 236 :M
.339 .034(To give some notions a more rigorous meaning and to discuss their limitations, e.g., trust)J
87 251 :M
-.086(models and the notion that a system does nothing else than what is specified.)A
70 272 :M
<A5>S
87 272 :M
1.593 .159(To emphasize notions that are missing in current security evaluation criteria such as)J
87 287 :M
.246 .025([ITSEC2_91] \(at least in their \322example functionality classes\323 and \322generic headings\323 for)J
87 302 :M
.276 .028(security enforcing functions\). For instance, these criteria only treat systems with a trusted)J
87 317 :M
.298 .03(central authority or computing base, and largely concentrate on access control models for)J
87 332 :M
-.098(their specifications.)A
70 353 :M
.909 .091(We think that no previous attempt to identify notions of security that are both general and)J
70 368 :M
-.044(formalizable has been made. Formal, but specific ones are mentioned later. Recent general, but)A
70 383 :M
-.051(informal research is listed here: Security in a very broad sense was investigated by the ESPRIT)A
70 398 :M
1.223 .122(Project PDCS \(Predictably Dependable Computing Systems\) [RaLa_92], but as far as we)J
70 413 :M
.837 .084(know, PDCS has not created formal definitions outside reliability and safety. Very general)J
70 428 :M
.971 .097(papers about security \(but no so much reliability and safety\) are [Dier2_91, Bisk_93]. We)J
70 443 :M
1.653 .165(present some more concepts than those and claim that our concepts are much nearer to)J
70 458 :M
.943 .094(formalization. Most other papers about the notion of \322security\323 are limited to the classical)J
70 473 :M
.339 .034(aspects of access and information flow control, as outlined, e.g., in [Land_81, GoMe_82], or)J
70 488 :M
-.097(at least to centralized systems [Jaco_88]. In particular, this is true for current security evaluation)A
70 503 :M
.543 .054(criteria, such as [ITSEC2_91]. Similarly, results of the German REMO project, which has a)J
70 518 :M
-.062(rather broad informal scope, are restricted to either the verification of sequential programs or to)A
70 533 :M
.147 .015(access control as soon as they are made more precise, e.g., [Mund_93]. None of these models)J
70 548 :M
.186 .019(covers all ongoing research, in particular not that in cryptology, e.g., secure payment systems)J
70 563 :M
.157 .016([Cha8_85, PWP_90], generalized digital signature schemes [Pfit4_93], and secure distributed)J
70 578 :M
-.068(function evaluation [Yao_82, Beav5_91].)A
87 593 :M
-.017(We admit that we started this research because cryptology is our own primary background,)A
70 608 :M
-.044(but also since we noticed that results from other approaches are usually disregarded in our own)A
70 623 :M
1.136 .114(field. For instance, notions of security in cryptology are so specific that with new system)J
70 638 :M
1.658 .166(classes, the new security definition is almost as likely to contain flaws as the proposed)J
70 653 :M
.285 .028(realization \(see, e.g., [PfWa2_92]\).)J
f4_9 sf
0 -4 rm
(2)S
0 4 rm
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 687.24 -.24 .24 213.24 687 .24 70 687 @a
70 700 :M
(1)S
87 704 :M
f4_10 sf
1.784 .178(Safety specialists might object that their systems need not be \322correct\323, only fulfil some important)J
87 717 :M
-.018(properties correctly. We will see that as correctness with respect to a special specification.)A
70 726 :M
f4_9 sf
(2)S
87 730 :M
f4_10 sf
1.172 .117(The popular logics for the design of cryptologic protocols, following [BuAN_90], are no help for this)J
87 743 :M
.226 .023(purpose, since they only start when all cryptology has already been replaced by idealizations \(which can be)J
87 756 :M
.209 .021(seen as another form of specifications, except that they \321 based on [DoYa_83] \321 make more assumptions)J
87 769 :M
.307 .031(about cryptologic primitives than those fulfil by their real definitions\). Other problems are mentioned, e.g.,)J
87 782 :M
.494 .049(in [Syve1_93, Pfit4_93].)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 6 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
300 46 :M
f4_10 sf
.417 .042<D0203420D0>J
70 82 :M
f4_12 sf
.655 .066(In Section 2, we give a brief overview of our framework. In Section 3, we show how those)J
70 97 :M
.419 .042(areas of security where most research is going on fit into this framework, and thus how they)J
70 112 :M
.238 .024(can work together. In Section 4, we sketch formalizations our general notions of security and)J
70 127 :M
.619 .062(refer to existing definitions in specific research areas that have carried out parts of this task)J
70 142 :M
-.044(already.)A
70 182 :M
f6_18 sf
(2)S
104 182 :M
-.314(Overview of the Framework By Design Stages)A
70 208 :M
f4_12 sf
.282 .028(This section surveys the design process of a secure system. Some problems and solutions are)J
70 223 :M
.746 .075(simplified; more details are given in Section 4. We strive for completeness with the design)J
70 238 :M
-.056(stages; in many concrete cases, some stages may be missing. An overview is given in Figure 1.)A
172 264 247 395 rC
224 302 :M
f0_10 sf
.156 .016(Find concerned parties and)J
224 314 :M
.5 .05(procedures for agreement;)J
224 326 :M
-.034(collect individual goals and trust)A
224 338 :M
-.085(informally)A
gR
gS 28 31 538 781 rC
204 295.5 :M
204 285.162 208.163 281.996 216.5 286 :C
224.83 289.996 232.163 287.829 238.5 279.5 :C
244.83 271.162 253.329 271.162 264 279.5 :C
274.663 287.829 283.162 288.829 289.5 282.5 :C
295.829 276.162 302.162 276.162 308.5 282.5 :C
314.829 288.829 324.328 289.996 337 286 :C
349.662 281.996 360.161 284.162 368.5 292.5 :C
376.828 300.829 384.161 305 390.5 305 :C
396.827 305 397.827 309.162 393.5 317.5 :C
389.161 325.829 382.828 330 374.5 330 :C
366.161 330 359.828 333.161 355.5 339.5 :C
351.161 345.828 345.828 345.828 339.5 339.5 :C
333.161 333.161 326.828 333.161 320.5 339.5 :C
314.162 345.828 306.829 346.995 298.5 343 :C
290.162 338.995 281.829 340.161 273.5 346.5 :C
265.162 352.828 257.83 352.828 251.5 346.5 :C
245.163 340.161 238.83 338.995 232.5 343 :C
226.163 346.995 221.997 344.828 220 336.5 :C
217.997 328.161 211.664 324.995 201 327 :C
190.33 328.995 188.164 326.828 194.5 320.5 :C
200.83 314.162 204 305.829 204 295.5 :C
:K
stroke
:a
32<99CC663399CC6633><999999CCCCCC666666333333999999CCCCCC666666333333>fg bk
:b
172 264 247 395 rC
15 -114 -66 325 387 @k
-2 -2 325 375 2 2 323 346 @b
:e
332 368 :M
0 G
f2_10 sf
-.069(formalise)A
190 402 :M
-.069(formalise)A
:a
32<99CC663399CC6633><999999CCCCCC666666333333999999CCCCCC666666333333>fg bk
:b
15 -114 -66 244 447 @k
-2 -2 244 435 2 2 242 347 @b
:e
193 468 :M
0 G
f0_10 sf
.112 .011(Trust model)J
175.5 451.5 89 26 rS
10 -65 -17 266 451 @k
-1 -1 272 447 1 1 299 421 @b
306 405 :M
.11(Specification)A
306 423 :M
-.178(   \245  individual goals)A
306 440 :M
-.114(   \245  global specification)A
299.5 388.5 116 58 rS
299 409 -1 1 416 408 1 299 408 @a
299 411 -1 1 416 410 1 299 410 @a
299 429 -1 1 417 428 1 299 428 @a
263 571 :M
.476 .048(Division into components;)J
263 583 :M
.86 .086(component specification)J
255.5 556.5 130 33 rS
271 637 :M
.208 .021(Implementation of)J
271 649 :M
.282(components)A
264.5 620.5 102 36 rS
10 -114 -66 301 616 @k
-1 -1 301 609 1 1 300 592 @b
10 -114 -66 301 554 @k
-1 -1 301 547 1 1 300 526 @b
227 488 -1 1 300 525 1 227 487 @a
257 534 :M
f2_10 sf
.309(design)A
253 489 -1 1 326 526 1 253 488 @a
-1 -1 327 546 1 1 326 527 @b
334 533 :M
.023(verify)A
7 6 326.5 528 @j
6 5 326.5 528 @f
300.5 526.5 3.5 @i
300.5 526.5 3 @e
-1 -1 321 553 1 1 326 546 @b
326 547 -1 1 333 552 1 326 546 @a
220 488 -1 1 228 487 1 220 487 @a
-1 -1 228 488 1 1 227 480 @b
245 488 -1 1 253 487 1 245 487 @a
-1 -1 253 488 1 1 252 480 @b
10 66 114 327 592 @k
-1 -1 327 617 1 1 326 600 @b
245 608 :M
.111(implement)A
334 608 :M
.023(verify)A
10 80 128 347 447 @k
-1 -1 327 528 1 1 344 455 @b
-1 -1 301 528 1 1 318 456 @b
gR
gS 28 31 538 781 rC
316 450 -1 1 319 456 1 316 449 @a
-1 -1 319 457 1 1 325 451 @b
70 682 :M
f3_10 sf
3.595 .359(Figure 1)J
138 682 :M
f0_10 sf
(Stages in the design of a secure system.)S
138 697 :M
.974 .097(The terminology is explained in Sections 2.1 to 2.4. Rectangles and normal arrows)J
138 712 :M
1.048 .105(denote objects and actions of computer science \(ideally formal\); clouds and dotted)J
138 727 :M
-.132(arrows are necessarily informal.)A
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 7 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
300 46 :M
f4_10 sf
.417 .042<D0203520D0>J
70 84 :M
f6_14 sf
.25(2.1)A
104 84 :M
-.315(Before a Specification)A
70 107 :M
f4_12 sf
.727 .073(At the beginning of the design of a secure IT-system, the parties concerned must somehow)J
70 122 :M
-.243(agree)A
70 143 :M
<A5>S
87 143 :M
-.077(who the parties concerned are,)A
70 164 :M
<A5>S
87 164 :M
-.064(what each of them desires,)A
70 185 :M
<A5>S
87 185 :M
-.084(and how they will try to agree on a common goal.)A
70 206 :M
.027 .003(These questions are largely outside computer science. However, IT-security only makes sense)J
70 221 :M
-.029(if this agreement really covers the interests of everybody concerned. Unfortunately, this step is)A
70 236 :M
.241 .024(missing in current IT-security criteria \321 just the designer and the future owner of the system)J
70 251 :M
.565 .056(are considered \321 however, e.g., a power plant control or a payment system clearly concern)J
70 266 :M
.22 .022(other people, too. Its importance was stressed in [Bisk_93], where \322values\323 and \322goals\323 were)J
70 281 :M
2.078 .208(distinguished: Values are independent of the system \(such as the health of the people)J
70 296 :M
.368 .037(concerned\) and goals are what the specific system should achieve. This distinction is helpful)J
70 311 :M
.03 .003(intuitively, but we do not consider it further in the following sections since we do not see how)J
70 326 :M
-.05(to formalize it \(which was not intended in [Bisk_93] anyway, of course\).)A
87 341 :M
1.735 .174(Below, we show that considering concerned parties separately is important not only)J
70 356 :M
-.038(socially, but also in the security specifications. We use the term )A
f6_12 sf
-.047(concerned party)A
f4_12 sf
-.045( for everyone)A
70 371 :M
.574 .057(who has any wishes about the system, whereas )J
f6_12 sf
.173(user)A
f4_12 sf
.62 .062( means someone who interacts with the)J
70 386 :M
-.1(system at its interface; )A
f6_12 sf
-.131(system)A
f4_12 sf
-.114( means an IT-system and comprises neither of these people.)A
70 415 :M
f6_12 sf
-.633(Variant for \322Products\323)A
70 436 :M
f4_12 sf
.297 .03(So far, it was assumed that a system was designed for a particular application. If one designs)J
70 451 :M
1.34 .134(components or subsystems for systems that are still unknown \(this is called )J
f6_12 sf
.409(products)A
f4_12 sf
.742 .074( in)J
70 466 :M
.958 .096([ITSEC2_91]\), the concerned parties are also unknown. Hence one has to identify )J
f6_12 sf
.279(virtual)A
70 481 :M
.751 .075(concerned parties)J
f4_12 sf
.428 .043( \(formally, they are just variables\); parties such as owners of components)J
70 496 :M
-.044(mentioned later are treated similarly.)A
f4_9 sf
0 -4 rm
(3)S
0 4 rm
f4_12 sf
-.045( When a product is used in a system, the virtual parties in)A
70 511 :M
-.09(its specification have to be substituted by real ones, and the real ones have to be asked to agree.)A
70 543 :M
f6_14 sf
.25(2.2)A
104 543 :M
-.331(Specification)A
70 566 :M
f4_12 sf
-.095(Computer science starts, at the latest, when specifications are written. By specification we mean)A
70 581 :M
-.039(a description of the system behaviour at its external interface, as independent as possible of the)A
70 596 :M
.098 .01(internal structure that will be designed. We will not dwell on usual aspects, e.g., that there are)J
70 611 :M
1.628 .163(specifications with different degrees of formality and that they are developed in cycles.)J
70 626 :M
-.074(However, there are general security-specific aspects.)A
70 655 :M
f6_12 sf
-.498(Two-Phase Structure)A
70 676 :M
f4_12 sf
-.068(Most importantly, the specification technique has to reflect that there may be several concerned)A
70 691 :M
.185 .018(parties, each with their own interests. Thus, in the general case, there is a two-phase structure)J
70 706 :M
-.181(in the specification:)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 752.24 -.24 .24 213.24 752 .24 70 752 @a
70 765 :M
f4_9 sf
(3)S
87 769 :M
f4_10 sf
.408 .041(Sometimes the term \322role\323 is used for such virtual parties, but it is also used for other purposes, e.g., for a)J
87 782 :M
.169 .017(class of parties with presumably similar goals.)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 8 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
300 46 :M
f4_10 sf
.417 .042<D0203620D0>J
70 82 :M
f4_12 sf
1(1.)A
87 82 :M
-.194(There are )A
f6_12 sf
-.202(individual goals)A
f4_12 sf
-.186( of individual parties.)A
70 103 :M
1(2.)A
87 103 :M
-.17(These individual goals are unified and refined into a )A
f6_12 sf
-.178(global specification)A
f4_12 sf
(.)S
70 124 :M
-.099(The individual goals need not be in a bijective relation with the parties concerned \321 a party can)A
70 139 :M
-.14(have many goals that it cannot immediately specify coherently.)A
87 154 :M
.079 .008(Furthermore, )J
f11_12 sf
(sets)S
f4_12 sf
.05 .005( of concerned parties often have more individual goals than each of them)J
70 169 :M
-.023(alone. For instance, with a communication system, only sets of at least two users have the goal)A
70 184 :M
-.129(of being able to communicate.)A
87 199 :M
-.123(The global specification should definitely be free of contradictions; if the goals turn out to be)A
70 214 :M
2.005 .201(contradictory, they have to be modified by discussion between the concerned parties.)J
f4_9 sf
0 -4 rm
(4)S
0 4 rm
70 229 :M
f4_12 sf
.699 .07(Furthermore, a global specification is often assumed to be \322complete\323 [Dier2_91, Bisk_93])J
70 244 :M
.306 .031(\(where this notion is left to the intuitive understanding of the reader \321 necessarily, since the)J
70 259 :M
.803 .08(notion of specification is so informal that there are several options; see Section 4.3 for our)J
70 274 :M
-.093(formalization\). One reason to require completeness is that this makes an informal review from a)A
70 289 :M
.897 .09(different perspective possible, at least if the global specification is in its own specification)J
70 304 :M
.213 .021(language, and not just defined as a \322completion\323 of the goals collected. Another reason is the)J
70 319 :M
-.046(nothing-else aspect discussed below.)A
70 340 :M
.531 .053(Note that we assume that the individual goals are formalized \(at least in theory\), whereas in)J
70 355 :M
.472 .047([Dier2_91, Bisk_93], the formal process starts with a complete global specification. Besides)J
70 370 :M
.099 .01(the fact that a complete specification is a complicated object to produce in one step, we found)J
70 385 :M
.47 .047(that the relation between individual goals and global specifications is an important aspect of)J
70 400 :M
.079 .008(several research areas within security, and we will show that individual goals are important in)J
70 415 :M
-.08(combination with trust models.)A
70 444 :M
f6_12 sf
-.415(\322Nothing-Else\323 Aspect)A
70 465 :M
f4_12 sf
1.933 .193(It is sometimes required that a secure system does nothing else than what is specified)J
70 480 :M
.217 .022([Dier2_91, Bisk_93]; this notion, just like completeness, was left vague because of the vague)J
70 495 :M
1.326 .133(notion of specification. \(Our Sections 4.3 and 4.5 mention problems with it and possible)J
70 510 :M
-.052(formalizations.\) This nothing-else aspect is then seen as the main difference to correctness, i.e.,)A
70 525 :M
-.031(the mere notion of fulfilling a specification. In fact, it is important in some applications, e.g., if)A
70 540 :M
.311 .031(one requires the absence of Trojan horses or covert channels, but we do not endorse that it is)J
70 555 :M
-.023(always needed.)A
70 584 :M
f6_12 sf
-.479(Preformalized Goals)A
70 605 :M
f4_12 sf
1.197 .12(Goals \(or templates for goals\) that occur regularly in certain types of applications can be)J
70 620 :M
.68 .068(formalized once and for all, so that the effort and the likelihood of design errors is reduced)J
70 635 :M
-.098(when they are included in specifications.)A
70 667 :M
f6_14 sf
.25(2.3)A
104 667 :M
-.504(Trust Model)A
70 690 :M
f4_12 sf
-.106(Another characteristic step in the design of a secure system is to determine a )A
f11_12 sf
-.112(trust model)A
f4_12 sf
-.109(. This is)A
70 705 :M
1.271 .127(needed in addition to the usual specification because not every concerned party trusts all)J
70 720 :M
-.024(components, all steps of the design process, and all other users.)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 739.24 -.24 .24 213.24 739 .24 70 739 @a
70 752 :M
f4_9 sf
(4)S
87 756 :M
f4_10 sf
.17 .017(This can be made less likely by assigning priorities to individual goals [Br\237g1_93]. Of course, the priorities)J
87 769 :M
.065 .007(must also be agreed upon. A usual case may be preformalized goals for classes of participants, which can be)J
87 782 :M
-.048(overruled by more specific goals.)A
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 9 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
300 46 :M
f4_10 sf
.417 .042<D0203720D0>J
87 82 :M
f4_12 sf
.178 .018(Conversely, one often speaks of a model of )J
f11_12 sf
.053(adversaries)A
f4_12 sf
.069 .007( or )J
f11_12 sf
.051(attackers)A
f4_12 sf
.069 .007( or )J
f11_12 sf
.049(threats)A
f4_12 sf
.188 .019(. By saying)J
70 97 :M
-.056(\322trust\323, we want to stress three aspects:)A
70 118 :M
<A5>S
87 118 :M
.419 .042(It is a relation, i.e., it depends not only on the component or person that is trusted or not,)J
87 133 :M
-.046(but also on the concerned party who trusts or not.)A
70 154 :M
<A5>S
87 154 :M
.1 .01(The default value in the design of a secure system should be that something or someone is)J
87 169 :M
f11_12 sf
.041(not)A
f4_12 sf
.137 .014( trusted. One might not want to call someone an adversary or a threat just because they)J
87 184 :M
.023 .002(might possibly under certain circumstances attack, or just because a concerned party is not)J
87 199 :M
f11_12 sf
-.098(forced)A
f4_12 sf
-.085( to trust that they will not.)A
70 220 :M
<A5>S
87 220 :M
-.096(Both unintentional errors and purposeful attacks are meant.)A
70 249 :M
f6_12 sf
-.537(Trust Subjects)A
70 270 :M
f4_12 sf
.227 .023(In the real world, the subjects who express trust are the concerned parties. However, the trust)J
70 285 :M
1.044 .104(sometimes depends on the individual goal. An important example is graceful degradation,)J
70 300 :M
.716 .072(where one has a series of weaker and weaker goals and needs less and less trust to achieve)J
70 315 :M
-.074(them. Hence, formally, the subjects in the trust model are just the )A
f11_12 sf
-.077(individual goals)A
f4_12 sf
(.)S
f4_9 sf
0 -4 rm
(5)S
0 4 rm
87 330 :M
f4_12 sf
-.041(Note that goals of sets of concerned parties are formally treated just like those of individual)A
70 345 :M
-.008(parties, and so is their trust. However, in research areas with general rules to derive the trusted)A
70 360 :M
-.039(objects from the parties concerned, one needs rules for sets, too.)A
70 381 :M
.275 .028(For a global specification that is not just a collection of individual goals, building in the trust)J
70 396 :M
-.012(model is more complicated: The subjects can only be the concerned parties, but even those are)A
70 411 :M
-.023(not mentioned in a normal specification. Hence one has to introduce them for this purpose, see)A
70 426 :M
-.109(the subsection \322State-Oriented Global Service Specification\323 in Section 4.5.)A
70 455 :M
f6_12 sf
-.664(Trust Objects)A
70 476 :M
f4_12 sf
.152 .015(Usually, a concerned party can express under which circumstances it would trust components)J
70 491 :M
-.253(\(to be designed later\) by the following )A
f6_12 sf
-.254(trust criteria)A
f4_12 sf
(:)S
70 512 :M
<A5>S
87 512 :M
.236 .024(Who would design / implement / verify / test / ship the component? \(And with how much)J
87 527 :M
-.108(care and which tools?\))A
70 548 :M
<A5>S
87 548 :M
-.105(Where and under whose control would the component placed?)A
70 569 :M
<A5>S
87 569 :M
-.126(What physical and organisational protection would there be for it?)A
70 590 :M
-.012(Note that these trust criteria should be made for \322basic\323 components, i.e., those that concerned)A
70 605 :M
1.324 .132(parties trust or do not trust as a whole \321 combining such components into more trusted)J
70 620 :M
-.018(subsystems is another design stage.)A
70 649 :M
f6_12 sf
-.525(Trust Degrees)A
70 670 :M
f4_12 sf
.644 .064(In many cases, the trust model simply contains binary decisions whether certain objects are)J
70 685 :M
.283 .028(trusted for an individual goal or not. However, there may be more degrees of trust, described)J
70 700 :M
-.112(by a combination of statements of the following types:)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 752.24 -.24 .24 213.24 752 .24 70 752 @a
70 765 :M
f4_9 sf
(5)S
87 769 :M
f4_10 sf
.965 .096(Note that the trust model makes the individual design goals relevant formally, even if one has a global)J
87 782 :M
-.002(specification, too: The goals will have to be proved under these different trust assumptions.)A
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 10 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
300 46 :M
f4_10 sf
.417 .042<D0203820D0>J
70 82 :M
f4_12 sf
<A5>S
87 82 :M
-.018(Worst possible behaviour of untrusted objects, e.g.:)A
87 97 :M
<A5>S
104 97 :M
-.09(One trusts that the computational resources of adversaries are limited, or that adversaries)A
104 112 :M
-.045(cannot break a so-called cryptologic assumption, e.g., factor 660-bit integers.)A
87 127 :M
<A5>S
104 127 :M
1.152 .115(One trusts that data may be observed in a component, but the component does not)J
104 142 :M
-.123(deviate from its component specification.)A
70 163 :M
<A5>S
87 163 :M
-.066(Characterization of sets of simultaneously trusted objects, e.g.:)A
87 178 :M
<A5>S
104 178 :M
-.061(One trusts at least )A
f11_12 sf
-.073(k)A
f4_12 sf
-.06( out of certain )A
f11_12 sf
-.083(n)A
f4_12 sf
-.069( people \(such as designers of components\).)A
70 199 :M
<A5>S
87 199 :M
-.044(Quantification of trust, e.g.:)A
87 214 :M
<A5>S
104 214 :M
-.117(For the reliability of hardware components: parameters such as the mean time to failure.)A
87 229 :M
<A5>S
104 229 :M
.171 .017(For the trustworthiness of a physical protection measure: the price an adversary would)J
104 244 :M
-.082(probably have to pay to break it.)A
70 265 :M
-.102(Additionally, trust may be a function of time.)A
70 297 :M
f6_14 sf
.25(2.4)A
104 297 :M
-.434(Component Division and Component Specification)A
70 320 :M
f4_12 sf
.385 .038(Given the specification and the trust model \(and assuming one knows the semantics of those)J
70 335 :M
-.017(two together\), one starts building a system. Among the many steps of such an implementation,)A
70 350 :M
.423 .042(\(at least\) one is particular to security, the )J
f6_12 sf
.776 .078(division into components)J
f4_12 sf
.36 .036( in the sense of the trust)J
70 365 :M
.295 .029(objects of Section 2.3: One determines the number of components, the trust criteria that each)J
70 380 :M
.977 .098(component fulfils, and how they are connected.)J
f4_9 sf
0 -4 rm
.205(6)A
0 4 rm
f4_12 sf
.733 .073( If the trust model offers the possibility to)J
70 395 :M
-.057(design and place a component so that it is trusted for all individual goals, one is lucky: One can)A
70 410 :M
-.096(implement the whole system in this component without further trust considerations and thus use)A
70 425 :M
.099 .01(all known design and verification techniques. \(One may, of course, still prefer a decentralized)J
70 440 :M
.011 .001(solution for efficiency reasons.\) Well-known strategies for other cases are to store certain data)J
70 455 :M
-.074(under the control of the respective party who has the primary interest in them, or to store copies)A
70 470 :M
.425 .042(in different components, or to distribute the data with a threshold scheme [Sham_79] so that)J
70 485 :M
-.08(they cannot be read by observing any single component.)A
87 500 :M
.661 .066(Next, a specification of the )J
f6_12 sf
1.006 .101(interface behaviour of the components)J
f4_12 sf
.718 .072( is needed. Strictly)J
70 515 :M
-.089(speaking, this has to be done in parallel with the previous step. In the area of formal verification)A
70 530 :M
.356 .036(of distributed systems, one often calls this the )J
f6_12 sf
.708 .071(protocol specification)J
f4_12 sf
.31 .031( in contrast to a service)J
70 545 :M
-.1(specification.)A
87 560 :M
.274 .027(One can now try to )J
f6_12 sf
.099(verify)A
f4_12 sf
.392 .039( that the system with these components fulfils the specification)J
70 575 :M
.587 .059(with respect to the trust model. Briefly, each individual goal has to be proved with only the)J
70 590 :M
2.201 .22(given assumptions about the components. In particular, if subjects either trust objects)J
70 605 :M
.416 .042(completely or not at all, only the specifications of the former components can be used in the)J
70 620 :M
-.005(proof, whereas the other components can behave arbitrarily. Note that it is harder to see how a)A
70 635 :M
-.056(global specification is used with a trust model, see Section 4.5.)A
70 667 :M
f6_14 sf
.25(2.5)A
104 667 :M
-.471(Implementation of Components)A
70 690 :M
f4_12 sf
.967 .097(Finally, the components have to be implemented. This will usually involve a division into)J
70 705 :M
.241 .024(subcomponents and several design steps. However, as soon as one has a whole component in)J
70 720 :M
2.368 .237(one trust domain \(including the current designer and the tools\) and the whole set of)J
70 735 :M
-.092(requirements on its interface behaviour, there is nothing security-specific to be considered.)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 765.24 -.24 .24 213.24 765 .24 70 765 @a
70 778 :M
f4_9 sf
(6)S
87 782 :M
f4_10 sf
.033 .003(Note that objects like networks, which have their own trust criteria, must be considered as components.)J
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 11 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
300 46 :M
f4_10 sf
.417 .042<D0203920D0>J
70 87 :M
f6_18 sf
(3)S
104 87 :M
-.524(Known Research Areas in this Framework)A
70 113 :M
f4_12 sf
.357 .036(We show how the best-known research areas within security fit into our framework. By this,)J
70 128 :M
-.04(we intend to show)A
70 149 :M
<A5>S
87 149 :M
-.085(that all aspects of our framework are important in some known research areas,)A
70 170 :M
<A5>S
87 170 :M
-.08(that our framework comprises a large class of \(hopefully all\) aspects of security, and)A
70 191 :M
<A5>S
87 191 :M
1.047 .105(how our notions relate to the terminology from different security communities, so that)J
87 206 :M
1.669 .167(readers feel more familiar with them before we sketch how they may be formalized)J
87 221 :M
-.071(generally.)A
70 242 :M
.081 .008(Note that most publications on formal security specification do not treat just one specification)J
70 257 :M
-.066(\(e.g., in a normal specification language\), but propose a special language to express a particular)A
70 272 :M
-.083(type of specifications for a particular type of systems.)A
70 304 :M
f6_14 sf
.25(3.1)A
104 304 :M
-.396(Access Control and Information Flow Control)A
70 327 :M
f4_12 sf
2.681 .268(Access control has a strong aspect of relations between individual goals and global)J
70 342 :M
-.164(specifications:)A
70 363 :M
<A5>S
87 363 :M
.904 .09(Individual goals: In the notation of [Denn_82], one considers \322protection policies\323 that)J
87 378 :M
.708 .071(characterize certain states of a \(virtual\) access control matrix as permitted and others as)J
87 393 :M
.22 .022(forbidden; some states may be \322don\325t care\323. If several concerned parties were considered,)J
87 408 :M
1.718 .172(each of them would have their own wishes about states that should be forbidden or)J
87 423 :M
-.109(permitted.)A
70 444 :M
<A5>S
87 444 :M
1.047 .105(Global specification: What is called the actual specification consists of transition rules)J
87 459 :M
-.13(describing all the permitted state changes of the \(virtual\) access control matrix. It is complete)A
87 474 :M
-.021(by construction.)A
70 495 :M
.541 .054(One tries to prove that the global specification fulfils the individual goals, i.e., all permitted)J
70 510 :M
.463 .046(states can be reached, but no forbidden one, and to automate such proofs for certain classes;)J
70 525 :M
-.061(many of the problems are undecidable, i.e., the classes are still too large [Denn_82].)A
70 546 :M
1.112 .111(Information flow specifications usually consist of individual goals, e.g., that no data flow)J
70 561 :M
1.281 .128(should occur between certain variables or channels \(for sequential programs and reactive)J
70 576 :M
.226 .023(systems, respectively\) [Land_81]. There are detailed definitions of the semantics, i.e., what it)J
70 591 :M
.687 .069(means for a system \(described in various protocol specification formalisms\) to fulfil such a)J
70 606 :M
1.504 .15(requirement, e.g., [GoMe_82, Brow_91, Gray_92]. \(Access control specifications do not)J
70 621 :M
.479 .048(really have such a semantics, this is why they have some problems with \322indirect access\323 in)J
70 636 :M
-.095(spite of a verification.\))A
70 657 :M
.948 .095(Both with access control and information flow control, discussion of appropriate goals for)J
70 672 :M
.465 .047(certain situation belongs to the stage before a specification. Examples are the Bell-LaPadula)J
70 687 :M
.108 .011(model for secrecy in the military area and goals for systems handling personal data, including)J
70 702 :M
.64 .064(confidentiality in a \322need-to-know\323 form, transparency, and the right of individuals to have)J
70 717 :M
.508 .051(incorrect data corrected [Land_81, BiBr_88]. Such goals lead to the design of languages for)J
70 732 :M
-.039(expressing the global specifications, \(virtual\) access control matrices or flow relations, in ways)A
70 747 :M
-.118(suited to these particular applications.)A
87 762 :M
-.084(The usual trust model considers everything from the point of view of a system administrator)A
70 777 :M
.56 .056(as the only concerned party, and the whole system is considered trustworthy. \(One does not)J
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 12 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020313020D0>J
70 82 :M
f4_12 sf
.509 .051(trust the users, but that is already implicit in the specification.\) There are a few publications)J
70 97 :M
.523 .052(about implementations in scenarios with smaller trust, e.g., about computing with encrypted)J
70 112 :M
.009 .001(data or access control by key hierarchies, e.g., [WaP1_86, ChTa_90].)J
70 144 :M
f6_14 sf
.25(3.2)A
104 144 :M
-.295(Cryptology)A
70 167 :M
f4_12 sf
-.024(A new branch of cryptology often starts with an informal sketch of a new type of systems with)A
70 182 :M
.914 .091(several concerned parties, e.g., untraceable communication or group cryptology [Chau_81,)J
70 197 :M
(Desm_88].)S
87 212 :M
.515 .051(Usually, one only has individual goals; in particular, the specifications are not complete.)J
70 227 :M
-.079(For instance, an encryption scheme should keep messages secret and a signature scheme should)A
70 242 :M
-.073(guarantee authenticity, but it is not fixed what else they do. \(For instance, the definition permits)A
70 257 :M
-.031(that an encryption scheme may or may not guarantee authenticity, and a signature scheme may)A
70 272 :M
-.012(or may not guarantee secrecy.\) Really formal specifications do not exist, in particular for large)A
70 287 :M
-.016(schemes, such as payment schemes \321 the goals are just definitions in terms of the structure of)A
70 302 :M
.201 .02(the implementation. An attempt at a structure-independent specification of signature schemes)J
70 317 :M
-.013(was made in [Pfit4_93].)A
87 332 :M
.479 .048(An exception with global specifications and a nothing-else aspect is multi-party function)J
70 347 :M
-.06(evaluation; see Section 4.5.)A
70 368 :M
.174 .017(The trust model of cryptology is very suspicious: One always assumes that some components)J
70 383 :M
.544 .054(are not trusted. The usual model is even that each set of concerned party only trusts its )J
f11_12 sf
.339(own)A
70 398 :M
f4_12 sf
.024(components.)A
f4_9 sf
0 -4 rm
(7)S
0 4 rm
f4_12 sf
.084 .008( For instance, with encryption, the two communicating users only trust their end)J
70 413 :M
.699 .07(devices, not the network; and in secure payment systems [Cha8_85, Chau_89], the security)J
70 428 :M
.439 .044(that someone does not lose money only relies on the correctness of his own computer \(often)J
70 443 :M
.007 .001(hand-held\), not, e.g., on the goodwill of bank employees and programmers.)J
87 458 :M
.024 .002(Sometimes one makes the stronger assumption that a certain percentage of the participants)J
70 473 :M
.009 .001(are trustworthy and their components correct, e.g., [Sham_79, RaBe_89].)J
70 505 :M
f6_14 sf
.25(3.3)A
104 505 :M
-.485(Fault Tolerance and Safety)A
70 528 :M
f4_12 sf
.987 .099(Fault tolerance mainly deals with trust models and the corresponding component division.)J
70 543 :M
1.073 .107(However, one usually trusts that nobody is malicious \321 there are just physical faults and)J
70 558 :M
.635 .063(unintended design errors.)J
f4_9 sf
0 -4 rm
.106(8)A
0 4 rm
f4_12 sf
.444 .044( More formally, this means that errors are regarded as statistically)J
70 573 :M
-.036(independent \(at least to a certain extent\), and that one can make reasonable quantitative studies)A
70 588 :M
-.076(about appropriate trust models.)A
87 603 :M
-.041(The concepts of fault tolerance are designed to work with any kind of specification \(at least)A
70 618 :M
-.015(the usual non-security specifications\). A specialty is that, for one and the same system, several)A
70 633 :M
-.089(sets of specifications for different trust models are often provided \(graceful degradation\).)A
87 648 :M
.087 .009(Safety, in particular, deals with the design and verification of such fall-back specifications)J
70 663 :M
-.065(consisting of very few individual goals, mainly of things that should absolutely not happen.)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 687.24 -.24 .24 213.24 687 .24 70 687 @a
70 700 :M
f4_9 sf
(7)S
87 704 :M
f4_10 sf
1.02 .102(Thus the trust of a set is usually the union of the individual trust, not the intersection. This is why the)J
87 717 :M
.442 .044(goals of sets cannot just be goals of each member of the set alone: All the components of the parties from)J
87 730 :M
-.003(the set must work correctly for the goal to be achieved.)A
70 739 :M
f4_9 sf
(8)S
87 743 :M
f4_10 sf
.247 .025(An exception are articles like [PeSL_80], where one trusts a certain percentage of the participants and their)J
87 756 :M
.519 .052(components, but the rest may be malicious, just as in some parts of cryptology. For historic reasons, such)J
87 769 :M
.798 .08(schemes only count as cryptology if some privacy or confidentiality is required, whereas there are other)J
87 782 :M
-.011(branches of cryptology without privacy or confidentiality requirements, e.g., signature schemes.)A
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 13 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020313120D0>J
70 84 :M
f6_14 sf
.25(3.4)A
104 84 :M
-.524(Other Areas)A
70 107 :M
f4_12 sf
.302 .03(Statistical databases are characterized by two types of individual goals: confidentiality goals,)J
70 122 :M
.714 .071(e.g., that no data should be reidentified, and goals that certain aggregated computations are)J
70 137 :M
1.549 .155(possible. They are obviously conflicting goals of different concerned parties. The major)J
70 152 :M
-.051(research is about how one can determine if these goals are consistent, and one usually finds out)A
70 167 :M
-.096(that they are not.)A
87 182 :M
.325 .032(Secure software usually just treats what is classically called correctness; sometimes, fault)J
70 197 :M
-.105(tolerance or safety aspects are included.)A
87 212 :M
-.005(Risk analysis has aspects of the stage before a specification, e.g., strategies for discovering)A
70 227 :M
1.521 .152(important goals, and aspects of quantitative analysis of trust models, e.g., the quality of)J
70 242 :M
-.122(physical and organizational measures protecting the digital components.)A
87 257 :M
.139 .014(The analysis of covert channels can be seen as a quantitative information flow analysis on)J
70 272 :M
-.089(systems given by protocol specifications at a low level.)A
87 287 :M
-.071(The design of secure operating systems has a trust model where one trusts designers as little)A
70 302 :M
-.073(as possible \(both with respect to attacks and to unintentional faults\); therefore, one concentrates)A
70 317 :M
-.065(on small security kernels.)A
70 357 :M
f6_18 sf
(4)S
104 357 :M
-.397(Overview of Formalizations)A
70 383 :M
f4_12 sf
.407 .041(Formal notions of security centre on specifications and their semantics, i.e., the definition of)J
70 398 :M
-.03(what it means for a system to )A
f11_12 sf
-.024(fulfil)A
f4_12 sf
-.029( a specification securely, in particular, when a trust model is)A
70 413 :M
.453 .045(given. The following are our main theses for a general formal treatment \(none of them quite)J
70 428 :M
-.046(new in itself, but different from informal publications about general security notions, at least in)A
70 443 :M
-.07(this combination\). We hope to substantiate these theses by the following subsections.)A
70 464 :M
<A5>S
87 464 :M
-.026(One has to regard specifications as descriptions of )A
f6_12 sf
-.028(interface)A
f4_12 sf
-.028( behaviour. Given a non-trivial)A
87 479 :M
.24 .024(trust model, one has to distinguish an )J
f6_12 sf
.36 .036(intended )J
f4_12 sf
.184 .018(and an )J
f6_12 sf
.311 .031(altered )J
f4_12 sf
.322 .032(interface; then even rather)J
87 494 :M
-.088(elaborate semantics like in [GoMe_82, Jaco_88] must be extended.)A
70 515 :M
<A5>S
87 515 :M
.41 .041(It is useful to distinguish two big classes of properties, )J
f6_12 sf
.124(service)A
f11_12 sf
.067 .007( )J
f4_12 sf
.503 .05(properties and )J
f6_12 sf
.156(ignorance)A
87 530 :M
f4_12 sf
.283(properties.)A
f4_9 sf
0 -4 rm
.275(9)A
0 4 rm
f4_12 sf
1.126 .113( \(Why we are so sure is explained in the subsection \322Individual Ignorance)J
87 545 :M
.136 .014(Goals\323 of Section 4.5.\))J
70 566 :M
<A5>S
87 566 :M
.884 .088(It is helpful to regard non-security research on specifications, in particular, of )J
f6_12 sf
.278(reactive)A
87 581 :M
f4_12 sf
.079 .008(systems \(i.e., systems that may react with their environment more than once, in contrast to)J
87 596 :M
.626 .063(sequential programs, e.g., [MaPn1_91]\). Many aspects of security are then new types of)J
87 611 :M
-.101(semantics for conventional specifications rather than new types of specifications.)A
70 632 :M
<A5>S
87 632 :M
-.092(In particular, it is useful to distinguish )A
f6_12 sf
-.115(property-oriented)A
f4_12 sf
-.1( and )A
f6_12 sf
-.108(state-oriented)A
f4_12 sf
-.103( \(or descriptive)A
87 647 :M
1.108 .111(versus constructive\) specifications: In most cases, individual goals are formulated in a)J
87 662 :M
-.101(property-oriented way and global specifications in a state-oriented way.)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 765.24 -.24 .24 213.24 765 .24 70 765 @a
70 778 :M
f4_9 sf
(9)S
87 782 :M
f4_10 sf
-.015(\322Knowledge properties\323 sounds better, but the requirement is that someone does )A
f11_10 sf
(not)S
f4_10 sf
-.017( know something.)A
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 14 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020313220D0>J
70 84 :M
f6_14 sf
.25(4.1)A
104 84 :M
-.427(Interfaces)A
70 107 :M
f4_12 sf
.413 .041(By )J
f6_12 sf
.159(interface)A
f4_12 sf
.579 .058(, we mean the complete set of connections between the system and the outside)J
70 122 :M
-.062(world. We use the word as in the OSI architectural model and often distinguish different access)A
70 137 :M
-.028(points to the system, too [Lini_83].)A
f4_9 sf
0 -4 rm
-.027(10)A
0 4 rm
f4_12 sf
-.027( This is illustrated in Figure 2.)A
126 163 283 114 rC
162 232 :M
f0_10 sf
-.035(Interface with)A
134 244 :M
.228 .023(three access points)J
.25 G
222 236 -2 2 407 234 2 222 234 @a
1 G
32 10 266 235 @j
0 G
31 9 266 235 @f
1 G
32 10 315 235 @j
0 G
31 9 315 235 @f
1 G
32 10 364 235 @j
0 G
31 9 364 235 @f
299 271 :M
.133(System)A
10 -114 -66 260 235 @k
-1 -1 260 228 1 1 259 217 @b
10 66 114 271 217 @k
-1 -1 271 236 1 1 270 225 @b
10 66 114 322 217 @k
-1 -1 322 236 1 1 321 225 @b
10 66 114 372 217 @k
-1 -1 372 236 1 1 371 225 @b
10 -114 -66 360 235 @k
-1 -1 360 228 1 1 359 217 @b
10 -114 -66 312 235 @k
-1 -1 312 228 1 1 311 217 @b
254 198 :M
.307 .031(Object of the specification:)J
253 210 :M
.725 .072(Sequences of events here)J
301 175 :M
-.026(Users)A
243 229 :M
f12_12 sf
(a)S
295 229 :M
(b)S
344 229 :M
(g)S
gR
gS 28 31 538 781 rC
70 300 :M
f3_10 sf
3.595 .359(Figure 2)J
138 300 :M
f0_10 sf
.056 .006(Illustration of)J
f3_10 sf
( )S
f0_10 sf
.045 .005(the notions of interface and access points)J
70 335 :M
f4_12 sf
.062 .006(Formally, such an interface is just a set, called the set of )J
f6_12 sf
.118 .012(access points)J
f4_12 sf
.048 .005(. \(Thus it is {)J
f12_12 sf
(a)S
f4_12 sf
(, )S
f12_12 sf
(b)S
f4_12 sf
(, )S
f12_12 sf
(g)S
f4_12 sf
.058 .006(} in)J
70 350 :M
.359 .036(Figure 2.\))J
70 371 :M
1.328 .133(With non-trivial trust models \(more precisely, whenever one cannot find globally trusted)J
70 386 :M
-.023(components to be connected to all parts of the interface from within the system\), one will need)A
70 401 :M
-.135(two variants of the interface:)A
70 422 :M
<A5>S
87 422 :M
-.084(the intended interface, and,)A
70 443 :M
<A5>S
87 443 :M
-.026(given the trust for a certain goal and a system, the altered interface between the trusted part)A
87 458 :M
1.107 .111(of the system and its environment, which includes the untrusted parts. In other words,)J
87 473 :M
-.034(adversaries usually extend the interface, e.g., by tapping lines.)A
70 494 :M
.671 .067(The two interfaces are illustrated in the following two figures: Figure 3 shows the intended)J
70 509 :M
.822 .082(interface with a system beneath; the system is given by the component specification of the)J
70 524 :M
-.069(intended components.)A
164 550 263 91 rC
-1 -1 284 593 1 1 283 572 @b
.5 G
2 lw
265 571 142 67 rS
.25 G
240 572 -2 2 425 570 2 240 570 @a
1 G
32 10 284 571 @j
0 G
1 lw
31 9 284 571 @f
1 G
32 10 333 571 @j
0 G
31 9 333 571 @f
10 -114 -66 278 571 @k
-1 -1 278 564 1 1 277 553 @b
10 66 114 289 553 @k
-1 -1 289 572 1 1 288 561 @b
10 66 114 340 553 @k
-1 -1 340 572 1 1 339 561 @b
10 -114 -66 330 571 @k
-1 -1 330 564 1 1 329 553 @b
172 593 :M
f0_10 sf
.324 .032(System as intended)J
196 605 :M
1.048 .105(by component)J
205 617 :M
.083(specification)A
-1 -1 382 591 1 1 381 574 @b
-1 -1 333 592 1 1 332 576 @b
:a
32<3366CC993366CC99><333333666666CCCCCC999999333333666666CCCCCC999999>fg bk
:b
90 180 108 39 333.5 604 @n
32<99CC663399CC6633><999999CCCCCC666666333333999999CCCCCC666666333333>fg bk
:b
0 90 108 39 331.5 604 @n
32<3366CC993366CC99><333333666666CCCCCC999999333333666666CCCCCC999999>fg bk
:b
90 180 42 19 307.5 605 @n
32<99CC663399CC6633><999999CCCCCC666666333333999999CCCCCC666666333333>fg bk
:b
0 90 42 19 306.5 605 @n
32<3366CC993366CC99><333333666666CCCCCC999999333333666666CCCCCC999999>fg bk
:b
90 180 43 17 357 605 @n
32<99CC663399CC6633><999999CCCCCC666666333333999999CCCCCC666666333333>fg bk
:b
0 90 43 17 356 605 @n
:e
1 G
372 588 19 17 rF
0 G
372.5 588.5 18 16 rS
1 G
32 10 382 571 @j
0 G
31 9 382 571 @f
10 66 114 390 553 @k
-1 -1 390 572 1 1 389 561 @b
10 -114 -66 378 571 @k
-1 -1 378 564 1 1 377 553 @b
305 633 :M
.243(Connections)A
1 G
273 588 19 17 rF
0 G
273.5 588.5 18 16 rS
1 G
322 588 19 17 rF
0 G
322.5 588.5 18 16 rS
278 601 :M
f2_10 sf
(A)S
327 601 :M
(B)S
377 601 :M
(C)S
260 566 :M
f12_12 sf
(a)S
312 566 :M
(b)S
361 566 :M
(g)S
gR
gS 28 31 538 781 rC
70 664 :M
f3_10 sf
3.595 .359(Figure 3)J
138 664 :M
f0_10 sf
.228 .023(Intended interface and intended components of a simple distributed system)J
70 699 :M
f4_12 sf
-.026(Figure 4 shows the same system and its altered interface from the point of view of a certain set)A
70 714 :M
-.057(of concerned parties \(e.g., because one of their individual goals is currently considered\).)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 726.24 -.24 .24 213.24 726 .24 70 726 @a
70 739 :M
f4_9 sf
1(10)A
87 743 :M
f4_10 sf
.382 .038(In the simplest case, each access point is the user interface of a different computer in a distributed system;)J
87 756 :M
.428 .043(this is the standard case in cryptology. But different access points can also be implemented in software on)J
87 769 :M
.611 .061(one computer, e.g., the different views a time-sharing system shows its users according to the initial user)J
87 782 :M
-.058(identification.)A
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 15 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020313320D0>J
.875 G
154 70 283 170 rC
290 109 39 83 rF
0 G
290.5 109.5 38 82 rS
-1 -1 309 165 1 1 308 149 @b
-1 -1 260 167 1 1 259 150 @b
.5 G
10 156 204 291 116 @k
274 117 -1 1 283 116 1 274 116 @a
.25 G
156 148 -2 2 285 146 2 156 146 @a
1 G
32 9 211 147.5 @j
0 G
31 8 211 147.5 @f
1 G
32 9 260 147.5 @j
0 G
31 8 260 147.5 @f
.875 G
33 9 309.5 147.5 @j
0 G
32 8 309.5 147.5 @f
10 -114 -66 205 147 @k
-1 -1 205 140 1 1 204 129 @b
10 66 114 216 129 @k
-1 -1 216 148 1 1 215 137 @b
10 66 114 267 129 @k
-1 -1 267 148 1 1 266 137 @b
10 66 114 317 129 @k
-1 -1 317 148 1 1 316 137 @b
10 -114 -66 305 147 @k
-1 -1 305 140 1 1 304 129 @b
10 -114 -66 257 147 @k
-1 -1 257 140 1 1 256 129 @b
197.5 109.5 76 20 rS
198 82 :M
f0_10 sf
.507 .051(Concerned parties)J
198 94 :M
.553 .055(currently under)J
198 106 :M
.129(consideration)A
-1 -1 211 168 1 1 210 151 @b
:a
32<3366CC993366CC99><333333666666CCCCCC999999333333666666CCCCCC999999>fg bk
:b
90 180 108 38 260.5 178.5 @n
32<99CC663399CC6633><999999CCCCCC666666333333999999CCCCCC666666333333>fg bk
:b
0 90 108 38 258.5 178.5 @n
32<3366CC993366CC99><333333666666CCCCCC999999333333666666CCCCCC999999>fg bk
:b
90 180 42 18 234.5 179.5 @n
32<99CC663399CC6633><999999CCCCCC666666333333999999CCCCCC666666333333>fg bk
:b
0 90 42 18 233.5 179.5 @n
32<3366CC993366CC99><333333666666CCCCCC999999333333666666CCCCCC999999>fg bk
:b
90 180 43 17 284 179 @n
32<99CC663399CC6633><999999CCCCCC666666333333999999CCCCCC666666333333>fg bk
:b
0 90 43 17 283 179 @n
:e
.875 G
299 163 19 17 rF
0 G
299.5 163.5 18 16 rS
.5 G
-1 -1 234 213 1 1 233 188 @b
233 213 -1 1 321 212 1 233 212 @a
-1 -1 321 213 1 1 320 192 @b
.875 G
310.5 120.5 7.5 @i
0 G
310.5 120.5 7 @e
.5 G
10 -24 24 275 125 @k
282 126 -1 1 291 125 1 282 125 @a
195 211 :M
0 G
.252 .025(Line tap)J
.25 G
-2 -2 285 230 2 2 283 147 @b
285 234 :M
0 G
.465 .047(Altered interface)J
332 107 :M
.142(\322Adversary\323:)A
332 123 :M
.911 .091(untrusted user)J
349 149 :M
.161(and)A
332 175 :M
1.458 .146(untrusted component)J
1 G
211.5 119.5 7.5 @i
0 G
211.5 119.5 7 @e
208 122 :M
f2_10 sf
(a)S
307 123 :M
(c)S
1 G
200 163 19 17 rF
0 G
200.5 163.5 18 16 rS
1 G
249 163 19 17 rF
0 G
249.5 163.5 18 16 rS
206 176 :M
(A)S
255 176 :M
(B)S
305 175 :M
(C)S
231 194 :M
f0_18 sf
<A5>S
187 141 :M
f12_12 sf
(a)S
239 141 :M
(b)S
291 140 :M
(g)S
1 G
262.5 119.5 7.5 @i
0 G
262.5 119.5 7 @e
258 122 :M
f2_10 sf
(b)S
gR
gS 28 31 538 781 rC
70 263 :M
f3_10 sf
3.595 .359(Figure 4)J
138 263 :M
f0_10 sf
-.037(Example of an altered interface.)A
138 278 :M
.5 .05(The system from Figure 3 is shown from the point of view of the concerned parties )J
f2_10 sf
(a)S
138 293 :M
f0_10 sf
.741 .074(and )J
f2_10 sf
.296(b)A
f0_10 sf
.614 .061(, who do not trust )J
f2_10 sf
.267(c)A
f0_10 sf
.824 .082( and the component )J
f2_10 sf
.385(C)A
f0_10 sf
.788 .079( and fear that the line between their)J
138 308 :M
.082 .008(components )J
f2_10 sf
(A)S
f0_10 sf
.027 .003( and )J
f2_10 sf
(B)S
f0_10 sf
.049 .005( may be tapped.)J
138 323 :M
1.113 .111(Note that the altered interface is different for every other set of concerned parties,)J
138 338 :M
.006 .001(assuming they all trust their \322own\323 local components only.)J
70 373 :M
f4_12 sf
.717 .072(So far, we considered the altered interface for a given system. During the specification, we)J
70 388 :M
-.049(cannot refer to the complete altered interface yet. However, one can define the )A
f6_12 sf
-.053(interface to the)A
70 403 :M
.061 .006(concerned parties)J
f4_12 sf
.026 .003( as an arbitrary subset of the access points. In Figure 4, it is {)J
f12_12 sf
(a)S
f4_12 sf
(, )S
f12_12 sf
(b)S
f4_12 sf
.027 .003(}, i.e., the)J
70 418 :M
.719 .072(horizontal part of the altered interface. \(This set will be used to indicate that the concerned)J
70 433 :M
-.094(parties themselves interact with the system at these access points, and one has different goals on)A
70 448 :M
-.059(what happens here than on what happens with the adversaries.\))A
70 480 :M
f6_14 sf
.25(4.2)A
104 480 :M
-.482(Behaviour at an Interface)A
70 503 :M
f4_12 sf
-.074(Arguably the most central notion in any treatment of specification and verification is the formal)A
70 518 :M
-.093(model of the behaviour of a system at an interface. \(A specification will then be a )A
f11_12 sf
-.097(description)A
f4_12 sf
-.129( of)A
70 533 :M
-.079(one or more permitted behaviours, where description means by a string of finite length.\))A
87 548 :M
.168 .017(In any notion of behaviour of reactive systems one can somehow identify the basic notion)J
70 563 :M
.086 .009(of a )J
f6_12 sf
.063(run)A
f4_12 sf
.142 .014( of a system.)J
f4_9 sf
0 -4 rm
.045(11)A
0 4 rm
f4_12 sf
.152 .015( In digital systems with discrete time, a run is seen at the interface as a)J
70 578 :M
f6_12 sf
-.024(sequence of interface events)A
f4_12 sf
-.022(, i.e., inputs and outputs at individual access points. Note that the)A
70 593 :M
-.152(restriction to)A
70 614 :M
<A5>S
87 614 :M
-.105(digital systems with)A
70 635 :M
<A5>S
87 635 :M
-.185(discrete time and)A
70 656 :M
<A5>S
87 656 :M
-.058(discrete access points,)A
70 677 :M
-.049(although very common, is security-critical, at least as far as the access points of adversaries are)A
70 692 :M
-.015(concerned: In reality, one may have overlooked possibilities of access, and the adversaries can)A
70 707 :M
.341 .034(observe real-time changes of physical quantities such as voltage. Hence whenever the digital)J
70 722 :M
-.075(values that should only change at discrete times are imperfectly realized, adversaries have more)A
70 737 :M
-.077(possibilities to draw conclusions than in the model.)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 765.24 -.24 .24 213.24 765 .24 70 765 @a
70 778 :M
f4_9 sf
1(11)A
87 782 :M
f4_10 sf
-.112(Related terms are )A
f11_10 sf
-.118(execution)A
f4_10 sf
-.108( and )A
f11_10 sf
-.114(trace)A
f4_10 sf
(.)S
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 16 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020313420D0>J
87 82 :M
f4_12 sf
.342 .034(Moreover, to be specific, we restrict ourselves to synchronous systems, i.e., systems with)J
70 97 :M
.563 .056(a notion of rounds where inputs and outputs occur. Then the sequence of interface events is)J
70 112 :M
-.069(indexed by the rounds, and there may be several events or no event at all in each round.)A
f4_9 sf
0 -4 rm
-.129(12)A
0 4 rm
70 133 :M
f4_12 sf
-.19(The )A
f6_12 sf
-.177(interface)A
f4_12 sf
-.106( )A
f6_12 sf
-.193(behaviour )A
f4_12 sf
-.166(of a system is now a model of the totality of the possible runs.)A
70 154 :M
<A5>S
87 154 :M
-.058(The simplest formal representation of \322totality\323 is the )A
f6_12 sf
-.058(set)A
f4_12 sf
-.058( of the possible runs. This is called)A
87 169 :M
2.644 .264(a linear-time model, and it is sufficient for many important purposes. \(See, e.g.,)J
87 184 :M
.032([MaPn1_91].\))A
70 205 :M
<A5>S
87 205 :M
.02 .002(More elaborate models retain some idea of the internal state of the system in the totality of)J
87 220 :M
.612 .061(runs. In particular, for probabilistic systems, one can consider the sequence of transition)J
87 235 :M
-.103(probabilities from the sequence of inputs and outputs up to a certain round to the next output)A
87 250 :M
.752 .075(\(e.g., as in [Gray_92]\).)J
f4_9 sf
0 -4 rm
.333(13)A
0 4 rm
70 282 :M
f6_14 sf
.25(4.3)A
104 282 :M
-.437(Service and Ignorance)A
70 305 :M
f4_12 sf
-.069(Specifications will be descriptions of \(sets of\) permitted interface behaviours. If we have a trust)A
70 320 :M
1.07 .107(model where the interface can be altered, it is unreasonable to expect that we can exactly)J
70 335 :M
-.06(prescribe any behaviour that could be achieved in the case with global trust. E.g., in Figure 4, it)A
70 350 :M
-.046(makes no sense to prescribe the outputs at the access point )A
f12_12 sf
(g)S
f4_12 sf
-.048( precisely, since we cannot prevent)A
70 365 :M
-.099(component )A
f11_12 sf
-.141(C)A
f4_12 sf
-.085( from outputting arbitrary values.)A
87 380 :M
1.742 .174(Hence, for security, in contrast to normal specifications, we have two rather clearly)J
70 395 :M
-.107(distinguished types of properties that )A
f11_12 sf
-.133(can)A
f4_12 sf
-.116( reasonably be required:)A
70 416 :M
<A5>S
87 416 :M
.221 .022(What we call )J
f6_12 sf
.466 .047(service properties)J
f4_12 sf
.23 .023( is restrictions on the outputs that the system gives to the)J
87 431 :M
.137 .014(concerned parties, i.e., at the interface to the concerned parties. These properties comprise)J
87 446 :M
-.135(what is usually called integrity and availability.)A
70 467 :M
<A5>S
87 467 :M
-.106(What we call )A
f6_12 sf
-.108(ignorance properties )A
f4_12 sf
-.096(is restrictions on the outputs that the system gives to the)A
87 482 :M
.592 .059(adversaries, but only in the sense that the knowledge or information that can be inferred)J
87 497 :M
.536 .054(from these outputs is restricted. In particular, we consider the adversaries\325 knowledge or)J
87 512 :M
-.112(information about the events at the interface to the concerned parties.)A
f4_9 sf
0 -4 rm
-.216(14)A
0 4 rm
70 533 :M
f4_12 sf
-.086(Note that combined properties exist, and in fact, ignorance is usually considered in combination)A
70 548 :M
-.049(with some service property.)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 635.24 -.24 .24 213.24 635 .24 70 635 @a
70 648 :M
f4_9 sf
1(12)A
87 652 :M
f4_10 sf
.194 .019(The best-known alternative is that there are no rounds, and the )J
f11_10 sf
(i)S
f4_10 sf
.173 .017(-th element of the sequence is the )J
f11_10 sf
(i)S
f4_10 sf
.262 .026(-th event)J
87 665 :M
1.035 .103(that occurs overall. Then one usually does not consider simultaneous events, but assumes that they are)J
87 678 :M
.951 .095(ordered somehow \(interleaving\). However, for security purposes, such a specification must certainly be)J
87 691 :M
.845 .084(refined to one that includes the real time of the events, because adversaries may draw conclusions from)J
87 704 :M
.167(times.)A
70 713 :M
f4_9 sf
1(13)A
87 717 :M
f4_10 sf
.476 .048(For non-deterministic systems, which we are not considering in the following, there are models with trees)J
87 730 :M
.712 .071(\(branching-time models; e.g., [Emer_90]\), where runs are on the same branch of the tree as long as they)J
87 743 :M
.009 .001(correspond to the same internal state. One can also assign probabilities to branches of such trees.)J
70 752 :M
f4_9 sf
1(14)A
87 756 :M
f4_10 sf
.25 .025(We used the strange term \322ignorance\323 because we hope that it cannot be misunderstood. Related terms that)J
87 769 :M
2.333 .233(are sometimes used with the same meaning are confidentiality \(but some authors restrict this to)J
87 782 :M
(confidentiality of message contents, and not, e.g., anonymity\), privacy, secrecy, and uncertainty.)S
endp
%%Page: 17 17
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 17 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020313520D0>J
70 84 :M
f6_12 sf
-.485(More About Service Properties)A
70 105 :M
f4_12 sf
.672 .067(Service properties are the usual type of properties, as known from most specification styles)J
70 120 :M
.076 .008(outside security. In a linear-time model, a service property is just a set of permitted sequences)J
70 135 :M
-.085(of interface events.)A
87 150 :M
.023 .002(In our case with intended and altered interfaces, a pure linear-time service property is a set)J
70 165 :M
-.097(of permitted sequences of events at the interface to certain concerned parties. A pure linear-time)A
70 180 :M
f6_12 sf
.411 .041(service specification)J
f4_12 sf
.169 .017( is therefore a string )J
f11_12 sf
.066(spec)A
f4_12 sf
.203 .02( that describes such a set. More precisely, )J
f11_12 sf
.088(spec)A
70 195 :M
f4_12 sf
-.065(must be an element of a \(specification\) language )A
f11_12 sf
-.09(L)A
f4_12 sf
-.066(, and there must be a mapping )A
f11_12 sf
-.09(Sem)A
f4_12 sf
-.066( from )A
f11_12 sf
-.09(L)A
f4_12 sf
-.083( to)A
70 210 :M
-.064(such sets of sequences, called the natural semantics of the language)A
f4_9 sf
0 -4 rm
-.061(15)A
0 4 rm
f4_12 sf
(.)S
87 225 :M
-.028(Moreover, not any such set will do, because a specification should only specify the system,)A
70 240 :M
-.07(not its users. Hence it cannot exclude inputs, it can only specify)A
70 261 :M
<A5>S
87 261 :M
.057 .006(that the system does not react on them \321 this is the formal equivalent of forbidding a user)J
87 276 :M
-.109(to perform certain operations \321 or)A
70 297 :M
<A5>S
87 297 :M
.822 .082(that the system can, from then on, behave arbitrarily \321 this is the formal equivalent of)J
87 312 :M
.947 .095(requiring honest users to observe certain rules if they want the system to protect them.)J
87 327 :M
.241 .024(\(However, there is the notion of )J
f6_12 sf
.078(robustness)A
f4_12 sf
.246 .025( that says that the specification should be like)J
87 342 :M
-.061(this as little as possible.\))A
70 371 :M
f6_12 sf
-.577(More About Ignorance)A
70 392 :M
f4_12 sf
.416 .042(What we call ignorance properties is distinguished from service properties by the concept of)J
70 407 :M
f6_12 sf
-.149(alternative \322worlds\323)A
f4_12 sf
-.131(, i.e., the totality of runs that could have occurred from the point of view of)A
70 422 :M
-.131(certain participants.)A
87 437 :M
1.51 .151(Outside security, there is a \322logic of knowledge\323 \(a special kind of modal logic, see)J
70 452 :M
.851 .085([Halp_87]\) with basically this semantics: Someone does not know something if there is an)J
70 467 :M
-.073(alternative \322world\323 that she cannot distinguish from the real one, and where this fact is not true.)A
70 482 :M
.603 .06(In our case, the \322worlds\323 are actual runs of the system, and an adversary cannot distinguish)J
70 497 :M
-.099(two behaviours if they are equal at those parts of the interface that the adversary can observe.)A
87 512 :M
-.006(However, this is deterministic knowledge, i.e., absolutely certainty about something. It has)A
70 527 :M
2.466 .247(been used in security, too. More often, however, one requires the absence of partial)J
70 542 :M
.591 .059(knowledge. This is information theory, where the possible worlds are assigned probabilities)J
70 557 :M
.761 .076(\(e.g., see [Sha1_49, Gray_92] for encryption schemes and information flow in this model.\))J
70 572 :M
1.726 .173(There are currently almost no general specification techniques for information-theoretic)J
70 587 :M
.697 .07(properties, just direct definitions in terms of the system structure \321 this makes cryptologic)J
70 602 :M
.078 .008(definitions so error-prone.)J
f4_9 sf
0 -4 rm
(16)S
0 4 rm
70 631 :M
f6_12 sf
-.475(Integrity and Availability, and Other Types of Properties)A
70 652 :M
f4_12 sf
-.068(If we try to formalize the difference between integrity and availability at the specification level,)A
70 667 :M
-.136(they become just what is called )A
f6_12 sf
-.141(safety)A
f4_12 sf
-.132( and )A
f6_12 sf
-.139(liveness)A
f4_12 sf
-.144( in the specification community [AlSc_85].)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 700.24 -.24 .24 213.24 700 .24 70 700 @a
70 713 :M
f4_9 sf
1(15)A
87 717 :M
f4_10 sf
-.021(\322Natural\323 in contrast to the security semantics sketched below.)A
70 726 :M
f4_9 sf
1(16)A
87 730 :M
f4_10 sf
2.415 .242(Cryptology often assumes computationally restricted adversaries; this yields modifications to the)J
87 743 :M
.451 .045(information-theoretic notion of ignorance. For brevity, we cannot treat this in detail. The main idea is that)J
87 756 :M
.12 .012(the adversary component \(i.e., the gray component in Figure 4\) has to make outputs that explicitly represent)J
87 769 :M
.555 .055(what the adversary has learnt. For instance, it has to distinguish by this output which of a certain class of)J
87 782 :M
-.168(events occurred.)A
endp
%%Page: 18 18
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 18 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020313620D0>J
70 82 :M
f4_12 sf
-.072(With this distinction of integrity, availability, and ignorance )A
cF
f7_12 sf
-.072<BB>A
sf
-.072( confidentiality, we are quite near)A
70 97 :M
-.043(to classical views of basic classes of security properties. Recently, it has been argued that more)A
70 112 :M
.22 .022(classes are needed, such as )J
f6_12 sf
.066(authenticity)A
f4_12 sf
.065 .007(, )J
f6_12 sf
.072(non-repudiation)A
f4_12 sf
.132 .013(, and )J
f6_12 sf
.079(anonymity)A
f4_12 sf
.233 .023(. We support that)J
70 127 :M
.519 .052(these are important properties, and not well covered in classical treatments like the example)J
70 142 :M
-.066(functionality classes in [ITSEC2_91]. Formally, however, we think they are special service and)A
70 157 :M
.374 .037(ignorance properties, just as the classical restrictions \(e.g., to confidentiality of file contents\))J
70 172 :M
-.073(are only special cases.)A
70 201 :M
f6_12 sf
-.422(Completeness)A
70 222 :M
f4_12 sf
.973 .097(Given a certain interface, we will call a specification complete iff it describes exactly one)J
70 237 :M
.076 .008(interface behaviour. \(See Section 4.5, \322Ignorance as Additional Semantics of a State-Oriented)J
70 252 :M
1.088 .109(Global Service Specification\323 for how we intend to apply this notion in the scenario with)J
70 267 :M
.67 .067(intended and altered interfaces.\) With a linear-time model, this means that the specification)J
70 282 :M
.977 .098(precisely determines the outputs \(as a function of all the previous inputs\). With behaviour)J
70 297 :M
-.104(described by transition probabilities, this means that all the transition probabilities to outputs are)A
70 312 :M
.069(fixed.)A
87 327 :M
-.006(This notion of completeness is one reason why we emphasize that specifications only refer)A
70 342 :M
.046 .005(to interface behaviour \321 if a similar notion were applied to internal states, it would mean that)J
70 357 :M
-.068(the specification completely fixes the internal states of the implementation. Moreover, we think)A
70 372 :M
-.051(that this notion of completeness is the only one where one can reasonably define a nothing-else)A
70 387 :M
-.046(aspect for, see below. However, as long as there is just one interface, completeness even in this)A
70 402 :M
.899 .09(sense implies a nothing-else property automatically: If there is no freedom in the interface)J
70 417 :M
-.067(behaviour, the system cannot do anything else there anyway.)A
70 449 :M
f6_14 sf
.25(4.4)A
104 449 :M
-.421(Property- and State-Oriented Specification Techniques)A
70 472 :M
f4_12 sf
-.118(Most treatments of specification techniques distinguish the following most important classes:)A
70 493 :M
<A5>S
87 493 :M
.477 .048(Property-oriented or descriptive specifications define properties directly, e.g., all sorts of)J
87 508 :M
.04 .004(logics \(such as normal predicate logic, temporal logic [Emer_90, MaPn1_91], and logic of)J
87 523 :M
(knowledge [Halp_87]\).)S
70 544 :M
<A5>S
87 544 :M
.184 .018(State-oriented or constructive specifications primarily describe a system, usually by states)J
87 559 :M
-.099(and transition rules. The behaviour of this system is regarded as a )A
f6_12 sf
-.113(reference)A
f4_12 sf
-.105( for the intended)A
87 574 :M
-.069(behaviour of the real system.)A
104 589 :M
.312 .031(Outside security, this is only done with respect to service, i.e., the interface behaviour)J
87 604 :M
-.002(of the real system is compared with that of the reference system. This is particularly useful)A
87 619 :M
.074 .007(if the reference system can be simpler than the real system, e.g., by using a more powerful)J
87 634 :M
2.061 .206(language. In particular, the service specifications of a distributed system may be a)J
87 649 :M
-.09(centralized and therefore simple reference system, as in Figure 5.)A
endp
%%Page: 19 19
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 19 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020313720D0>J
.5 G
2 lw
171 70 250 87 rC
230 92 167 62 rS
0 G
-1 -1 317 117 1 1 316 96 @b
.25 G
215 93 -2 2 419 91 2 215 91 @a
1 G
33 11 266.5 92.5 @j
0 G
1 lw
32 10 266.5 92.5 @f
1 G
33 11 317.5 92.5 @j
0 G
32 10 317.5 92.5 @f
1 G
33 11 368.5 92.5 @j
0 G
32 10 368.5 92.5 @f
10 -114 -66 260 92 @k
-1 -1 260 85 1 1 259 73 @b
10 66 114 272 73 @k
-1 -1 272 93 1 1 271 81 @b
10 66 114 325 73 @k
-1 -1 325 93 1 1 324 81 @b
10 66 114 377 73 @k
-1 -1 377 93 1 1 376 81 @b
10 -114 -66 364 92 @k
-1 -1 364 85 1 1 363 73 @b
10 -114 -66 315 92 @k
-1 -1 315 85 1 1 314 73 @b
243 128 :M
f0_10 sf
.223 .022(1 \(trusted\))J
243 140 :M
.317(component)A
266 98 -1 1 305 120 1 266 97 @a
-1 -1 329 122 1 1 366 98 @b
1 G
295 116 44 29 rF
0 G
295.5 116.5 43 28 rS
179 123 :M
.235(Reference)A
195 135 :M
.067(system)A
242 86 :M
f12_12 sf
(a)S
297 86 :M
(b)S
347 86 :M
(g)S
gR
gS 28 31 538 781 rC
70 180 :M
f3_10 sf
3.595 .359(Figure 5)J
138 180 :M
f0_10 sf
2.126 .213(Example of a constructive specification: A centralized reference system for the)J
138 195 :M
-.025(interface in Figure 2 \(and thus suitable for specifying the system in Figure 3\).)A
104 230 :M
f4_12 sf
-.044(Examples of constructive specification languages are extended finite state automata and)A
87 245 :M
.38 .038(derived languages like Estelle [ISO 9074_89], process algebras [Miln_80], and Petri nets)J
87 260 :M
-.046([Pete_77], or, within security, access control matrices with transition rules.)A
70 281 :M
.223 .022(Property-oriented specifications are quite natural for individual goals \(since one can combine)J
70 296 :M
.685 .069(several of them easily\), state-oriented ones for global specifications. Moreover, most of the)J
70 311 :M
1.34 .134(latter are naturally complete. However, intermediate cases exist, such as a completion of)J
70 326 :M
-.106(individual goals by prescribing initial semantics [DoYa_83, EhMa_85].)A
70 355 :M
f6_12 sf
-.514(State-Oriented Specification and Interfaces)A
70 376 :M
f4_12 sf
-.073(Note that we intend even state-oriented specifications to )A
f11_12 sf
-.072(refer)A
f4_12 sf
-.075( only to the interface behaviour of)A
70 391 :M
.557 .056(the system, i.e., we do not require the internal states of an implementation to be identical to)J
70 406 :M
-.02(those in the specification. One reason was mentioned in Section 4.3, \322Completeness\323. Another)A
70 421 :M
1.86 .186(reason is that only this semantics allows cryptologic implementations: In a cryptologic)J
70 436 :M
-.002(implementation of any type of system \(more generally: whenever a complicated trust model is)A
70 451 :M
-.124(given\), the internal states are naturally much more complicated than those of the specification.)A
87 466 :M
1.191 .119(For instance, a secure information system may be specified by a so-called mini-world)J
70 481 :M
-.062(consisting of relations with possible update and query operations and rights on such operations.)A
70 496 :M
.172 .017(In a distributed implementation where not all nodes are trusted by everybody, so that data are)J
70 511 :M
-.06(encrypted and secret sharing is applied, the relations as specified will not be found anywhere in)A
70 526 :M
-.069(the system. Nevertheless, one can define that such an implementation is correct if any sequence)A
70 541 :M
-.048(of updates and queries yields the same outputs as it would in the specified mini-world.)A
f4_9 sf
0 -4 rm
-.045(17)A
0 4 rm
f4_10 sf
0 -4 rm
(,)S
0 4 rm
f4_9 sf
0 -4 rm
-.09(18)A
0 4 rm
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 674.24 -.24 .24 213.24 674 .24 70 674 @a
70 687 :M
1(17)A
87 691 :M
f4_10 sf
.759 .076(One might argue that a mapping from the real data to the abstract mini-world relations will exist, which)J
87 704 :M
-.037(should be considered instead of the interface behaviour. However, to define generally what a correct mapping)A
87 717 :M
-.006(is, one will end up comparing interface behaviours again.)A
70 726 :M
f4_9 sf
1(18)A
87 730 :M
f4_10 sf
.355 .035(This should even apply to simpler implementations where the components of the specification exist, but in)J
87 743 :M
.229 .023(refined form. This is why one has problems with \322indirect access\323 in systems proven secure with respect to)J
87 756 :M
1.112 .111(an access matrix specification \(in contrast to an information flow specification\): Such a proof is state-)J
87 769 :M
.436 .044(oriented \321 correctness of the reference monitor \321, but one had an intuitive interface interpretation of the)J
87 782 :M
.049 .005(specification, which can still be violated.)J
endp
%%Page: 20 20
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 20 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020313820D0>J
70 99 :M
f6_14 sf
.25(4.5)A
104 99 :M
-.483(Semantics with Trust Models)A
70 122 :M
f4_12 sf
.173 .017(The main new aspect when specifications are given a semantics in security is the trust model,)J
70 137 :M
-.118(and in particular, the two different interfaces:)A
70 158 :M
<A5>S
87 158 :M
.105 .01(The specification should be in terms of the intended interface \(as in Figure 2\), because the)J
87 173 :M
.6 .06(altered interface is only known when the design process has advanced to the component)J
87 188 :M
.484 .048(division. Similarly, the specification of components in the sense of Section 2.4 describes)J
87 203 :M
-.054(intended components \(as in Figure 3\).)A
70 224 :M
<A5>S
87 224 :M
1.51 .151(The semantics, however, must deal with the altered interface and consider that some)J
87 239 :M
-.067(components are not correct \(as in Figure 4\).)A
70 260 :M
.022 .002(The basic problem is that if an incorrect component serves a part of the intended interface, the)J
70 275 :M
-.068(component may be completely dismantled, or at least it cannot be prevented from making other)A
70 290 :M
.434 .043(interface outputs than the correct component. This may sound absurd and insecure to people)J
70 305 :M
.347 .035(from some fields, but it is the standard case in cryptology. Recall that the system is regarded)J
70 320 :M
.159 .016(from the point of view of different concerned parties, and it only has to be ensured that if )J
f11_12 sf
.088(you)A
70 335 :M
f4_12 sf
.602 .06(don\325t trust a component, it does not influence those parts of the interface that occur in )J
f11_12 sf
.266(your)A
70 350 :M
f4_12 sf
.099 .01(goals. For instance, if many people use the same home banking system as you, you don\325t care)J
70 365 :M
-.097(if a hacker manipulates his terminal so that it can no longer make payments, as long as you can.)A
87 380 :M
.145 .014(To say more precisely what it means for )J
f11_12 sf
.051(any)A
f4_12 sf
.12 .012( system to fulfil )J
f11_12 sf
.051(any)A
f4_12 sf
.166 .017( specification with such a)J
70 395 :M
.843 .084(trust model, it is useful to distinguish the four important specification types \(property- and)J
70 410 :M
.808 .081(state-oriented service and ignorance specifications\). Note that all four occur in the security)J
70 425 :M
-.069(literature, at least informally or for specific systems, and we believe that they are useful, but we)A
70 440 :M
.736 .074(can identify a rigorous meaning for some of them quite satisfactorily, whereas others leave)J
70 455 :M
-.016(more open questions.)A
70 484 :M
f6_12 sf
-.391(Individual Service Goals)A
70 505 :M
f4_12 sf
.111 .011(The semantics of individual linear-time service properties with a non-trivial trust model is the)J
70 520 :M
-.127(clearest. One just has to make an introductory requirement that)A
70 541 :M
<A5>S
87 541 :M
-.104(the service property is only about the interface to the concerned parties for this goal, and)A
70 562 :M
<A5>S
87 562 :M
-.072(after the component division, all parts of the interface to the concerned parties are served by)A
87 577 :M
-.065(components trusted by these parties.)A
70 598 :M
-.103(This requirement is quite natural: The usual case where components that are not globally trusted)A
70 613 :M
.28 .028(serve any part of the interface is that different concerned parties have different access points,)J
70 628 :M
.007 .001(because the system is distributed, and the parties do not trust all remote computers \(see Figure)J
70 643 :M
-.043(4\). Then a service \(!\) goal of a set of parties naturally only says what service the system should)A
70 658 :M
.057 .006(offer at the access points of these parties \321 in correct relation to each other, of course. \(In the)J
70 673 :M
-.019(example of Figure 4, this requirement is fulfilled if the goal of the users )A
f11_12 sf
(a)S
f4_12 sf
-.019( and )A
f11_12 sf
(b)S
f4_12 sf
-.021( only deal with)A
70 688 :M
-.014(what happens at the access points )A
f12_12 sf
(a)S
f4_12 sf
-.014( and )A
f12_12 sf
(b)S
f4_12 sf
-.014(. An example goal is that )A
f11_12 sf
(b)S
f4_12 sf
-.014( obtains data entered by )A
f11_12 sf
(a)S
70 703 :M
f4_12 sf
-.051(in unmodified form.\))A
87 718 :M
-.02(Given that this introductory requirement is fulfilled, the semantics of the individual service)A
70 733 :M
-.15(goal is that)A
endp
%%Page: 21 21
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 21 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020313920D0>J
70 82 :M
f4_12 sf
<A5>S
87 82 :M
-.085(for )A
f11_12 sf
-.085(all)A
f4_12 sf
-.088( strategies)A
f4_9 sf
0 -4 rm
-.09(19)A
0 4 rm
f4_12 sf
-.098( of the adversaries and)A
70 103 :M
<A5>S
87 103 :M
.851 .085(for )J
f11_12 sf
.296(all)A
f4_12 sf
1.328 .133( user strategies \(which may interact with the adversaries outside the system, as)J
87 118 :M
-.055(indicated by the gray arrows in Figure 4\),)A
70 139 :M
.495 .05(the resulting behaviours of the system at the interface to the concerned parties are permitted)J
70 154 :M
-.093(according to the goal.)A
87 169 :M
-.042(In Figure 4, this means that we universally quantify over the behaviours of the big gray and)A
70 184 :M
2.692 .269(white rectangles, and only the components )J
f11_12 sf
.97(A)A
f4_12 sf
1.234 .123( and )J
f11_12 sf
.97(B)A
f4_12 sf
2.54 .254( act according to the component)J
70 199 :M
1.652 .165(specification. Note that as long as there is no restriction on the interaction between the)J
70 214 :M
-.102(concerned parties and the adversaries outside the system, this is equivalent to a model where the)A
70 229 :M
1.491 .149(trusted components interact with one big adversary strategy, i.e., the gray and the white)J
70 244 :M
-.13(rectangle are joined.)A
70 265 :M
.049 .005(This approach has been carried out in detail for specifications of different new types of digital)J
70 280 :M
-.019(signature scheme in [Pfit4_93]. It should cover all other authentication problems, too, and also)A
70 295 :M
.303 .03(almost all pure integrity and availability properties ever mentioned in the literature. Probable)J
70 310 :M
.906 .091(exceptions are bit commitment schemes [BrCC_88], which seem to need a branching-time)J
70 325 :M
1.147 .115(specification if one considers them at this level, and the integrity aspects of schemes like)J
70 340 :M
-.019(election schemes, which require independence of simultaneous inputs of different participants.)A
70 355 :M
-.064(Those, however, are usually treated with global, state-oriented specifications anyway.)A
70 384 :M
f6_12 sf
-.45(State-Oriented Global Service Specification)A
70 405 :M
f4_12 sf
-.095(For simplicity, we only discuss )A
f11_12 sf
-.095(state-oriented)A
f4_12 sf
-.095( global service specifications.)A
87 420 :M
.4 .04(Such a specification must be in terms of the intended interface \(since the other interfaces)J
70 435 :M
-.029(vary with the individual goals\), and will mention all parts of the interface \(cf. Figure 5\). Hence)A
70 450 :M
.189 .019(a security semantics of such a specification under a non-trivial trust model is not as simple as)J
70 465 :M
.788 .079(that of an individual goal. One has to compare the restrictions of the specified and the real)J
70 480 :M
.917 .092(behaviours to the interface to the concerned parties. \(Hence these \322interfaces to concerned)J
70 495 :M
-.036(parties\323 yield the formal trust subjects for global specifications, see Section 2.3.\) The notion of)A
70 510 :M
.529 .053(\322restriction\323 is not trivial: Clearly, only outputs to concerned parties are compared, but they)J
70 525 :M
.959 .096(may legally depend on inputs from untrusted parties \(e.g., the result of a voting protocol\),)J
70 540 :M
-.047(whose interface part has disappeared in the real system. Hence one defines that real outputs are)A
70 555 :M
.188 .019(correct if there exists a virtual adversary input strategy that would lead to these outputs in the)J
70 570 :M
-.059(reference system.)A
87 585 :M
.153 .015(For example, if the system of Figure 4 is compared with the specification of Figure 5, one)J
70 600 :M
-.029(compares with the virtual adversary illustrated in Figure 6 and requires that for all strategies of)A
70 615 :M
.249 .025(the adversary in Figure 4, there exists a strategy for )J
f11_12 sf
.087(c*)A
f4_12 sf
.261 .026( that has essentially the same effect on)J
70 630 :M
-.092(the concerned parties.)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
70 739.24 -.24 .24 213.24 739 .24 70 739 @a
70 752 :M
f4_9 sf
1(19)A
87 756 :M
f4_10 sf
.541 .054(We use \322strategy\323 similar to game theory. Formally, a strategy of an adversary is just like a protocol of a)J
87 769 :M
-.009(correct component, but we wanted to avoid confusion with the protocol that the incorrect components )A
f11_10 sf
-.012(should)A
87 782 :M
f4_10 sf
-.058(have carried out according to the protocol specification.)A
endp
%%Page: 22 22
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 22 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020323020D0>J
176 70 240 137 rC
258 82 :M
f0_10 sf
.507 .051(Concerned parties)J
258 94 :M
.553 .055(currently under)J
258 106 :M
.129(consideration)A
.5 G
2 lw
234 147 159 57 rS
0 G
-1 -1 317 170 1 1 316 150 @b
.25 G
220 148 -2 2 414 146 2 220 146 @a
1 G
32 10 269 147 @j
0 G
1 lw
31 9 269 147 @f
1 G
32 10 318 147 @j
0 G
31 9 318 147 @f
1 G
32 10 366 147 @j
0 G
31 9 366 147 @f
10 -114 -66 263 147 @k
-1 -1 263 140 1 1 262 129 @b
10 66 114 274 129 @k
-1 -1 274 148 1 1 273 137 @b
10 66 114 325 129 @k
-1 -1 325 148 1 1 324 137 @b
10 66 114 374 129 @k
-1 -1 374 148 1 1 373 137 @b
10 -114 -66 362 147 @k
-1 -1 362 140 1 1 361 129 @b
10 -114 -66 315 147 @k
-1 -1 315 140 1 1 314 129 @b
243 181 :M
.223 .022(1 \(trusted\))J
243 193 :M
.317(component)A
269 152 -1 1 306 172 1 269 151 @a
-1 -1 329 174 1 1 364 152 @b
1 G
296 169 42 27 rF
0 G
296.5 169.5 41 26 rS
184 179 :M
.235(Reference)A
200 191 :M
.067(system)A
.5 G
10 156 204 358 116 @k
334 117 -1 1 350 116 1 334 116 @a
0 G
257.5 109.5 76 20 rS
.5 G
10 -24 24 335 125 @k
342 126 -1 1 357 125 1 342 125 @a
1 G
271.5 119.5 7.5 @i
0 G
271.5 119.5 7 @e
268 122 :M
f2_10 sf
(a)S
.875 G
368.5 120.5 8.5 @i
0 G
368.5 120.5 8 @e
363 124 :M
.111(c*)A
359 95 :M
f0_10 sf
-.055(Virtual)A
359 107 :M
-.111(adversary)A
246 142 :M
f12_12 sf
(a)S
298 142 :M
(b)S
347 142 :M
(g)S
1 G
319.5 119.5 7.5 @i
0 G
319.5 119.5 7 @e
315 122 :M
f2_10 sf
(b)S
gR
gS 28 31 538 781 rC
70 230 :M
f3_10 sf
3.595 .359(Figure 6)J
138 230 :M
f0_10 sf
.601 .06(Treating adversary inputs in the security semantics of a state-oriented global service)J
138 245 :M
.093(specification.)A
138 260 :M
.166 .017(The system in Figure 4 is defined to be a secure implementation of the specification in)J
138 275 :M
-.005(Figure 5 iff for each strategy of the adversary in Figure 4, a strategy for a virtual user )A
f2_10 sf
(c*)S
138 290 :M
f0_10 sf
-.009(exists that has essentially the same effect at the access points )A
f12_12 sf
(a)S
f0_12 sf
( )S
f0_10 sf
(and )S
f12_12 sf
(b)S
f0_10 sf
-.01(. \(All concerned)A
138 305 :M
-.048(parties have to be treated like this in turn.\))A
70 340 :M
f4_12 sf
.409 .041(For specific examples, see [Beav5_91, MiRo1_91]; they are explained in more detail below,)J
70 355 :M
-.105(since they include ignorance.)A
70 384 :M
f6_12 sf
-.467(Individual Ignorance Goals)A
70 405 :M
f4_12 sf
1.41 .141(An individual ignorance goal of certain concerned parties expresses that )J
f11_12 sf
.354(other)A
f4_12 sf
1.156 .116( users and)J
70 420 :M
.714 .071(adversaries in untrusted components do not gain certain knowledge, usually about previous)J
70 435 :M
-.034(interface inputs of the concerned parties. This is what makes ignorance goals so fundamentally)A
70 450 :M
-.104(different from service goals: They have to do with the )A
f11_12 sf
-.11(untrusted)A
f4_12 sf
-.1( part of the interface. Recall that)A
70 465 :M
.911 .091(it makes no sense to require any service properties for that part \(at least if a component is)J
70 480 :M
.486 .049(completely untrusted\), but you can require and fulfil ignorance goals, i.e., you can prescribe)J
70 495 :M
.621 .062(that in spite of arbitrary behaviour of the untrusted part, the observations leave the required)J
70 510 :M
.297 .03(alternatives as to what happened in the trusted part. In the example of Figure 4, an ignorance)J
70 525 :M
.246 .025(goal of the concerned parties would treat what can be learned about the horizontal part of the)J
70 540 :M
-.132(altered interface, and the semantics evaluates this according to the vertical part.)A
87 555 :M
1.642 .164(No general specification language and definition for this case exist, but many direct)J
70 570 :M
1.911 .191(definitions for various special cases, e.g., secrecy definitions of encryption schemes in)J
70 585 :M
.157 .016(cryptology [Sha1_49, MiRS_88, RaSi_92] and definitions of the absence of information flow)J
70 600 :M
.984 .098([Brow_91, Gray_92]. Note that the complete absence of information flow between certain)J
70 615 :M
.102 .01(access points, which is sometimes defined as security as such, is not suitable for all ignorance)J
70 630 :M
.361 .036(requirements. For instance, with an electronic payment system such as [Cha8_85, Chau_89],)J
70 645 :M
.298 .03(everybody can exchange payments \(and thus information, e.g., in the amount and time of the)J
70 660 :M
1.607 .161(payment\) with everybody else. Nevertheless, one wants to guarantee that nobody learns)J
70 675 :M
.274 .027(anything about the payments of others \(unless they divulge this information deliberately, and)J
70 690 :M
.48 .048(this possibility makes general definitions hard [Schu_94] \321 note that this concerns possible)J
70 705 :M
-.054(channels both through and outside of the system\).)A
70 734 :M
f6_12 sf
-.41(Ignorance as Additional Semantics of a Complete Service Specification)A
70 755 :M
f4_12 sf
-.047(The other way of specifying ignorance is to use a complete service specification \(for simplicity)A
70 770 :M
-.009(again assumed to be state-oriented, and deterministic or probabilistic\), and to add ignorance to)A
endp
%%Page: 23 23
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 23 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020323120D0>J
70 82 :M
f4_12 sf
-.023(the semantics only: Such a semantics requires that the real system does \322nothing else\323 than the)A
70 97 :M
1.575 .158(reference system; in particular, it does not give an adversary more information than the)J
70 112 :M
-.042(reference system would.)A
87 127 :M
.025 .003(Without using terms like \322specification\323 and \322semantics\323, this approach was suggested for)J
70 142 :M
.594 .059(general definitions in cryptology in [Yao_82]. The problem treated there was that each of )J
f11_12 sf
(n)S
70 157 :M
f4_12 sf
1.373 .137(participants has a secret value )J
f11_12 sf
.41(x)A
f11_10 sf
0 3 rm
.214(i)A
0 -3 rm
f4_12 sf
1.176 .118(, and they want to compute )J
f11_12 sf
.41(y)A
f4_12 sf
.516 .052( := )J
f11_12 sf
.257(f)A
f4_12 sf
.307<28>A
f11_12 sf
.41(x)A
f4_10 sf
0 3 rm
.385(1)A
0 -3 rm
f4_12 sf
.739 .074(, \311, )J
f11_12 sf
.41(x)A
f11_10 sf
0 3 rm
.385(n)A
0 -3 rm
f4_12 sf
1.081 .108(\) for a given)J
70 172 :M
.073 .007(function )J
f11_12 sf
(f)S
f4_12 sf
.062 .006(. However, nobody should gain more information about the inputs of the others than)J
70 187 :M
.436 .044(what can be deduced from the result )J
f11_12 sf
.139(y)A
f4_12 sf
.5 .05( alone. Many articles about suitable definitions of this)J
70 202 :M
-.009(concept followed, e.g., [Beav5_91, MiRo1_91]. In our terms, this is a global specification of a)A
70 217 :M
.457 .046(non-reactive system by a \(trusted\) reference system that gets the inputs )J
f11_12 sf
.13(x)A
f11_10 sf
0 3 rm
.068(i)A
0 -3 rm
f4_12 sf
.475 .047( and computes and)J
70 232 :M
.611 .061(outputs )J
f11_12 sf
.153(y)A
f4_12 sf
(.)S
87 247 :M
1.112 .111(Essentially, the semantics that a real distributed protocol, where no individual party is)J
70 262 :M
-.125(trusted, does \322)A
f6_12 sf
-.138(nothing else)A
f4_12 sf
-.13( than this reference system\323 is:)A
70 283 :M
<A5>S
87 283 :M
-.058(For all sets of concerned parties,)A
70 304 :M
<A5>S
87 304 :M
.063 .006(for all cheating strategies that the untrusted components and other users can use in the real)J
87 319 :M
(protocol,)S
70 340 :M
-.112(there is another strategy they could use with the reference system that yields both)A
70 361 :M
<A5>S
87 361 :M
-.128(the same behaviour at the interface to the concerned parties, and)A
70 382 :M
<A5>S
87 382 :M
-.068(the same knowledge for the adversaries.)A
70 403 :M
.119 .012(In the example of Figures 4 to 6, we would need an additional output at both adversaries \(i.e.,)J
70 418 :M
-.101(the gray rectangle and the gray circle\), which models the knowledge gained \(similar to Footnote)A
70 433 :M
.11 .011(16\). Thus, it is not only modeled that the adversary learns nothing else about the behaviour of)J
70 448 :M
1.805 .18(the concerned parties, but \322nothing else\323 as such. This is represented by requiring that)J
70 463 :M
-.029(everything that the real adversary can output, the virtual adversary on the reference system can)A
70 478 :M
-.037(output just as well. \(Such properties are known as )A
f6_12 sf
-.049(minimum-knowledge)A
f4_12 sf
-.037(, with the special case)A
70 493 :M
-.021(of zero-knowledge [GoMR_89].\))A
87 508 :M
.403 .04( Since some details of this approach are still disputed in the given non-reactive case, it is)J
70 523 :M
-.113(certainly not trivial to extend it to the reactive case, but we think it is worth while.)A
70 563 :M
f6_18 sf
(5)S
104 563 :M
-.667(Outlook)A
70 589 :M
f4_12 sf
-.075(Of course, in such a brief informal sketch of the framework, a lot of details were omitted. Some)A
70 604 :M
-.175(are listed here:)A
70 625 :M
<A5>S
87 625 :M
-.109(We did not regard probabilistic or branching time individual service goals very much.)A
70 646 :M
-.198<20A5>A
87 646 :M
-.069(For most applications to cryptology, one has to allow)A
87 664 :M
<A5>S
104 664 :M
-.081(small error probabilities, or)A
87 682 :M
<A5>S
104 682 :M
.154 .015(computational restrictions \(on the adversary strategies and user behaviours over which)J
104 697 :M
-.097(one has the universal quantification\),)A
87 718 :M
1.412 .141(or both in the semantics. \(The reader is encouraged to look at [MiRS_88, Beav5_91,)J
87 733 :M
2.321 .232(Pfit4_93].\) Formally, this means that there is not just one notion of \322fulfilling\323 a)J
87 748 :M
-.106(specification, but the specification can be fulfilled with different )A
f6_12 sf
-.118(degrees of security)A
f4_12 sf
-.112(. \(If one)A
87 763 :M
.154 .015(starts with a standard view of what a specification is, the trust model can also be seen as a)J
87 778 :M
1.767 .177(part of the degree of security, and so can some restrictions on the behaviour of the)J
endp
%%Page: 24 24
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 24 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020323220D0>J
87 82 :M
f4_12 sf
.409 .041(concerned parties.\) Both for error probabilities and computational restrictions, one has to)J
87 97 :M
-.177(consider a sequence of systems, depending on a \322)A
f6_12 sf
-.194(security parameter)A
f4_12 sf
-.173(\323 \(or more than one\), all)A
87 112 :M
2.108 .211(with the same interface. Some details for individual service goals can be found in)J
87 127 :M
([Pfit4_93], some more in [Pfit9_93].)S
70 148 :M
<A5>S
87 148 :M
1.652 .165(The access of users to access points has to be restricted, e.g., by organizational and)J
87 163 :M
1.511 .151(physical measures, or by passwords or biometrics. This is fairly standard [DaPr_89],)J
87 178 :M
-.045(unless in combination with anonymity, such as in [Cha8_85].)A
70 199 :M
.296 .03(Other questions are open, e.g., a general way of handling what a user divulges \322deliberately\323)J
70 214 :M
.19 .019(\(see Section 4.5\).)J
87 229 :M
.865 .087(Moreover, we have not treated refinement \(in particular, of interface actions\) nor proof)J
70 244 :M
-.031(techniques.)A
70 265 :M
<A5>S
87 265 :M
1.051 .105(Refinement will certainly have to distinguish the part of the interface belonging to the)J
87 280 :M
-.108(concerned parties whose goal \(or restriction of a global specification\) is currently considered)A
87 295 :M
-.067(\321 they can be assumed to use the system as prescribed \321 and the rest.)A
70 316 :M
<A5>S
87 316 :M
.403 .04(Proof techniques can be distinguished into those where the system to be proved secure is)J
87 331 :M
-.071(described in a standard protocol specification language, and those that treat combinations of)A
87 346 :M
1.218 .122(subsystems that are only known to be secure with some degree of security into larger)J
87 361 :M
.144(systems.)A
70 382 :M
.109 .011(However, all this can only come )J
f11_12 sf
.029(after)A
f4_12 sf
.117 .012( a precise semantics of what security under trust models)J
70 397 :M
-.073(and with different degrees of security means.)A
70 488 :M
f6_18 sf
-.426(Acknowledgments)A
70 514 :M
f4_12 sf
1.002 .1(A paper of such generality has naturally profited from discussions with a large number of)J
70 529 :M
1.32 .132(people. In particular, many of our ideas have developed during joint work with )J
f11_12 sf
.482(Andreas)A
70 544 :M
.066(Pfitzmann)A
f4_12 sf
.17 .017(. We also thank )J
f11_12 sf
.441 .044(Birgit Baum-Waidner)J
f4_12 sf
.061 .006(, )J
f11_12 sf
.29 .029(Eike Best)J
f4_12 sf
.061 .006(, )J
f11_12 sf
.39 .039(Joachim Biskup)J
f4_12 sf
.061 .006(, )J
f11_12 sf
.376 .038(Gerrit Bleumer)J
f4_12 sf
(,)S
70 559 :M
f11_12 sf
-.034(Jimmy Br\237ggemann)A
f4_12 sf
(, )S
f11_12 sf
-.028(Ulla Goltz)A
f4_12 sf
(, )S
f11_12 sf
-.03(Winfried G\232rke)A
f4_12 sf
(, )S
f11_12 sf
-.032(Michaela Huhn)A
f4_12 sf
(,)S
f11_12 sf
-.027( Peter Niebert)A
f4_12 sf
-.024(, and )A
f11_12 sf
-.034(Matthias)A
70 574 :M
-.07(Schunter)A
f4_12 sf
-.062( for discussions on various aspects of security or specification in general.)A
endp
%%Page: 25 25
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 25 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020323320D0>J
70 107 :M
f6_18 sf
-.436(References)A
70 133 :M
f4_10 sf
(AlSc_85)S
121 133 :M
.761 .076(Bowen Alpern, Fred B. Schneider: Defining Liveness; Information Processing Letters 21 \(1985\))J
121 144 :M
.025(181-185.)A
70 158 :M
-.221(Beav5_91)A
121 158 :M
1.228 .123(Donald Beaver: Secure Multiparty Protocols and Zero Knowledge Proof Systems Tolerating a)J
121 169 :M
.321 .032(Faulty Minority; Journal of Cryptology 4/2 \(1991\) 75-122.)J
70 183 :M
-.241(BiBr_88)A
121 183 :M
.174 .017(Joachim Biskup, Hans Hermann Br\237ggemann: The Personal Model of Data; Computers & Security)J
121 194 :M
.194 .019(7/6 \(1988\) 575-597.)J
70 208 :M
-.056(Bisk_93)A
121 208 :M
1.557 .156(Joachim Biskup: Sicherheit von IT-Systemen als "sogar wenn \320 sonst nichts \320 Eigenschaft";)J
121 219 :M
-.023(Proceedings GI-Fachtagung VIS '93; DuD Fachbeitr\212ge 16, Vieweg, Wiesbaden 1993, 239-254.)A
70 233 :M
-.203(Brow_91)A
121 233 :M
.269 .027(Randy Browne: The Turing Test And Non-Information Flow; 1991 IEEE Symposium on Research)J
121 244 :M
.198 .02(in Security and Privacy, IEEE Computer Society Press, Washington 1991, 373-385.)J
70 258 :M
-.142(Br\237g1_93)A
121 258 :M
.765 .077(Hans H. Br\237ggemann: Priorit\212ten f\237r eine verteilte, objekt-orientierte Zugriffskontrolle; Gerhard)J
121 269 :M
-.023(Proceedings GI-Fachtagung VIS '93; DuD Fachbeitr\212ge 16, Vieweg, Wiesbaden 1993, 51-66.)A
70 283 :M
-.185(BuAN_90)A
121 283 :M
.464 .046(Michael Burrows, Martin Abadi, Roger Needham: A Logic of Authentication; ACM Transactions)J
121 294 :M
.339 .034(on Computer Systems 8/1 \(1990\) 18-36.)J
70 308 :M
-.018(Chau_81)A
121 308 :M
2.633 .263(David Chaum: Untraceable Electronic Mail, Return Addresses, and Digital Pseudonyms;)J
121 319 :M
.3 .03(Communications of the ACM 24/2 \(1981\) 84-88.)J
70 333 :M
-.018(Cha8_85)A
121 333 :M
.177 .018(David Chaum: Security without Identification: Transaction Systems to make Big Brother Obsolete;)J
121 344 :M
.286 .029(Communications of the ACM 28/10 \(1985\) 1030-1044.)J
70 358 :M
-.018(Chau_89)A
121 358 :M
.971 .097(David Chaum: Privacy Protected Payments \320 Unconditional Payer and/or Payee Untraceability;)J
121 369 :M
1.012 .101(SMART CARD 2000: The Future of IC Cards, Proceedings of the IFIP WG 11.6 International)J
121 380 :M
.004 0(Conference; Laxenburg \(Austria\), 19.-20. 10. 1987, North-Holland, Amsterdam 1989, 69-93.)J
70 394 :M
-.036(ChTa_90)A
121 394 :M
.326 .033(Gerald C. Chick, Stafford E. Tavares: Flexible access control with master keys; Crypto '89, LNCS)J
121 405 :M
-.015(435, Springer-Verlag, Heidelberg 1990, 316-322.)A
70 419 :M
-.091(DaPr_89)A
121 419 :M
1.428 .143(Donald W. Davies, Wyn L. Price: Security for Computer Networks, An Introduction to Data)J
121 430 :M
.073 .007(Security in Teleprocessing and Electronic Funds Transfer; \(2nd ed.\) John Wiley & Sons, New York)J
121 441 :M
.125(1989.)A
70 455 :M
-.11(Denn_82)A
121 455 :M
-.019(Dorothy Denning: Cryptography and Data Security; Addison-Wesley Publishing Company, Reading)A
121 466 :M
(1982; Reprinted with corrections, January 1983.)S
70 480 :M
-.054(Desm_88)A
121 480 :M
.742 .074(Yvo Desmedt: Society and group oriented cryptography: a new concept; Crypto '87, LNCS 293,)J
121 491 :M
-.008(Springer-Verlag, Berlin 1988, 120-127.)A
70 505 :M
-.109(Dier2_91)A
121 505 :M
1.773 .177(R\237diger Dierstein: The Concept of Secure Information Processing Systems and Their Basic)J
121 516 :M
.209 .021(Functions; IFIP/Sec '90, Helsinki; North-Holland, Amsterdam 1991, 133-149.)J
70 530 :M
-.146(DoYa_83)A
121 530 :M
.878 .088(Danny Dolev, Andrew C. Yao: On the Security of Public Key Protocols; IEEE Transactions on)J
121 541 :M
.014 .001(Information Theory 29/2 \(1983\) 198-208.)J
70 555 :M
-.073(EhMa_85)A
121 555 :M
2.355 .236(H. Ehrig, B. Mahr: Fundamentals of Algebraic Specifications 1; EATCS Monographs on)J
121 566 :M
-.001(Theoretical Computer Science Vol. 6, Springer-Verlag, Berlin 1985.)A
70 580 :M
-.091(GoMe_82)A
121 580 :M
1.138 .114(J. A. Goguen, J. Meseguer: Security Policies and Security Models; 1982 IEEE Symposium on)J
121 591 :M
.172 .017(Security and Privacy, IEEE Computer Society Press, Washington 1982, 11-20.)J
70 605 :M
.037(GoMR_89)A
121 605 :M
.124 .012(Shafi Goldwasser, Silvio Micali, Charles Rackoff: The Knowledge Complexity of Interactive Proof)J
121 616 :M
.53 .053(Systems; SIAM J. Comput. 18/1 \(1989\) 186-207.)J
70 630 :M
-.164(Gray_92)A
121 630 :M
.428 .043(James W. Gray III: Toward a Mathematical Foundation for Information Flow Security; Journal of)J
121 641 :M
.247 .025(Computer Security 1/3,4 \(1992\) 255-294.)J
70 655 :M
-.073(Halp_87)A
121 655 :M
.197 .02(Joseph Y. Halpern: Using Reasoning about Knowledge to Analyze Distributed Systems; Ann. Rev.)J
121 666 :M
.772 .077(Comput. Sci. 1987, 37-68.)J
70 680 :M
1.647 .165(ITSEC2_91 European Communities - Commission: ITSEC: Information Technology Security Evaluation)J
121 691 :M
2.152 .215(Criteria; \(Provisional Harmonised Criteria, Version 1.2, 28 June 1991\) Office for Official)J
121 702 :M
.111 .011(Publications of the European Communities, Luxembourg 1991 \(ISBN 92-826-3004-8\).)J
70 716 :M
-.128(Jaco_88)A
121 716 :M
1.038 .104(Jeremy Jacobs: Security Specifications; 1988 IEEE Symposium on Security and Privacy, IEEE)J
121 727 :M
.34 .034(Computer Society Press, Washington 1988, 14-23.)J
70 741 :M
-.258(Land_81)A
121 741 :M
.522 .052(Carl E. Landwehr: Formal Models for Computer Security; ACM Computing Surveys 13/3 \(1981\))J
121 752 :M
.025(247-278.)A
70 766 :M
.056(Lini_83)A
121 766 :M
.986 .099(Peter F. Linington: Fundamentals of the Layer Service Definitions and Protocol Specifications;)J
121 777 :M
-.007(Proceedings of the IEEE 71/12 \(1983\) 1341-1345.)A
endp
%%Page: 26 26
%%BeginPageSetup
initializepage
(Birgit Pfitzmann; page: 26 of 26)setjob
%%EndPageSetup
-28 -31 :T
gS 28 31 538 781 rC
298 46 :M
f4_10 sf
.4 .04<D020323420D0>J
70 79 :M
.016(MaPn1_91)A
121 79 :M
2.822 .282(Zohar Manna, Amir Pnueli: The Temporal Logic of Reactive and Concurrent Systems:)J
121 90 :M
-.02(Specification; Springer-Verlag, New York 1991.)A
70 104 :M
.092(Miln_80)A
121 104 :M
.301 .03(Robin Milner: A Calculus of Communicating Systems; LNCS 92, Springer-Verlag, Berlin 1980.)J
70 118 :M
.095(MiRo1_91)A
121 118 :M
1.19 .119(Silvio Micali, Phillip Rogaway: Secure Computation \(Chapters 1-3\); Laboratory for Computer)J
121 129 :M
.175 .017(Science, MIT, Cambridge, MA 02139, USA; distributed at Crypto '91.)J
70 143 :M
.184(MiRS_88)A
121 143 :M
3.456 .346(Silvio Micali, Charles Rackoff, Bob Sloan: The Notion of Security for Probabilistic)J
121 154 :M
.492 .049(Cryptosystems; SIAM J. Comput. 17/2 \(1988\) 412-426.)J
70 168 :M
-.148(Mund_93)A
121 168 :M
-.009(Sibylle Mund: Sicherheitsanforderungen \320 Sicherheitsma\247nahmen; Proceedings GI-Fachtagung VIS)A
121 179 :M
('93; DuD Fachbeitr\212ge 16, Vieweg, Wiesbaden 1993, 225-237.)S
70 193 :M
.056(PeSL_80)A
121 193 :M
.657 .066(Marshall Pease, Robert Shostak, Leslie Lamport: Reaching Agreement in the Presence of Faults;)J
121 204 :M
.202 .02(Journal of the ACM 27/2 \(1980\) 228-234.)J
70 218 :M
-.036(Pete_77)A
121 218 :M
.322 .032(James L. Peterson: Petri Nets; ACM Computing Surveys 9/3 \(1977\) 223-252.)J
70 232 :M
.079(Pfit4_93)A
121 232 :M
2.097 .21(Birgit Pfitzmann: Sorting Out Signature Schemes; 1st ACM Conference on Computer and)J
121 243 :M
.369 .037(Communications Security, 3.-5.11.1993, Fairfax, acm press 1993, 74-85.)J
70 257 :M
.079(Pfit9_93)A
121 257 :M
.167 .017(Birgit Pfitzmann: Fail-Stop Signature Schemes; eingereicht als Dissertation, Institut f\237r Informatik,)J
121 268 :M
.284 .028(Universit\212t Hildesheim, 4.9.1993.)J
70 282 :M
-.109(PfWa2_92)A
121 282 :M
.848 .085(Birgit Pfitzmann, Michael Waidner: How to Break and Repair a "Provably Secure" Untraceable)J
121 293 :M
.354 .035(Payment System; Crypto '91, LNCS 576, Springer Verlag, Berlin 1992, 338-350.)J
70 307 :M
.089(PWP_90)A
121 307 :M
1.382 .138(Birgit Pfitzmann, Michael Waidner, Andreas Pfitzmann: Rechtssicherheit trotz Anonymit\212t in)J
121 318 :M
-.024(offenen digitalen Systemen; Datenschutz und Datensicherung DuD 14/5-6 \(1990\) 243-253, 305-315.)A
70 332 :M
-.203(RaBe_89)A
121 332 :M
1.544 .154(Tal Rabin, Michael Ben-Or: Verifiable Secret Sharing and Multiparty Protocols with Honest)J
121 343 :M
.884 .088(Majority; 21st Symposium on Theory of Computing \(STOC\) 1989, ACM, New York 1989, 73-)J
121 354 :M
.25(85.)A
70 368 :M
-.109(RaLa_92)A
121 368 :M
1.086 .109(Brian Randell, Jean-Claude Laprie: Predictably Dependable Computing Systems: Final Report;)J
121 379 :M
1.651 .165(PDCS Technical Report Series No. 62, July 1992; Bulletin of the European Association for)J
121 390 :M
.075 .008(Theoretical Computer Science \(EATCS\) 48, Oktober 1992, 55-87.)J
70 404 :M
.092(RaSi_92)A
121 404 :M
1.257 .126(Charles Rackoff, Daniel R. Simon: Non-Interactive Zero-Knowledge Proof of Knowledge and)J
121 415 :M
.271 .027(Chosen Ciphertext Attack; Crypto '91, LNCS 576, Springer Verlag, Berlin 1992, 433-444.)J
70 429 :M
(Schu_94)S
121 429 :M
1.124 .112(Matthias Schunter: Spezifikation von Geheimhaltungseigenschaften f\237r reaktive kryptologische)J
121 440 :M
.128 .013(Systeme; Diplomarbeit, Universit\212t Hildesheim, February 1994.)J
70 454 :M
.037(Sham_79)A
121 454 :M
.178 .018(Adi Shamir: How to Share a Secret; Communications of the ACM 22/11 \(1979\) 612-613.)J
70 468 :M
(Sha1_49)S
121 468 :M
.747 .075(C. E. Shannon: Communication Theory of Secrecy Systems; The Bell System Technical Journal)J
121 479 :M
.189 .019(28/4 \(1949\) 656-715.)J
70 493 :M
(Syve1_93)S
121 493 :M
.545 .054(Paul F. Syverson: Adding Time to a Logic of Authentication; 1st ACM Conference on Computer)J
121 504 :M
.272 .027(and Communications Security, 3.-5.11.1993, Fairfax, acm press 1993, 97-101.)J
70 518 :M
-.073(WaP1_86)A
121 518 :M
1.571 .157(Neal R. Wagner, Paul S. Putter, Marianne R. Cain: Encrypted Database Design: Specialized)J
121 529 :M
.131 .013(Approaches; IEEE Symposium on Security and Privacy, 1986, 148-153.)J
70 543 :M
-.132(Yao_82)A
121 543 :M
2.266 .227(Andrew C. Yao: Protocols for Secure Computations; 23rd Symposium on Foundations of)J
121 554 :M
.294 .029(Computer Science \(FOCS\) 1982, IEEE Computer Society, 1982, 160-164.)J
endp
%%Trailer
end
%%EOF
