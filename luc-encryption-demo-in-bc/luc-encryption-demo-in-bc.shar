From msuinfo!uwm.edu!cs.utexas.edu!swrinde!elroy.jpl.nasa.gov!news.aero.org!usasoc.soc.mil!usasoc.soc.mil!rbrand Wed May 19 22:19:24 1993
Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!swrinde!elroy.jpl.nasa.gov!news.aero.org!usasoc.soc.mil!usasoc.soc.mil!rbrand
From: rbrand@usasoc.soc.mil (Raymond S. Brand)
Subject: LUC Public Key Encryption Made Easy
Message-ID: <1993May19.144317.17228@usasoc.soc.mil>
Keywords: source crypt LUC bc
Sender: news@usasoc.soc.mil
Organization: is a nice thing...
Date: Wed, 19 May 1993 14:43:17 GMT
Lines: 539

#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	luc_func.gbc
#	math_func.gbc
#	luc_demo.gbc
# This archive created: Wed May 19 10:37:18 1993
export PATH; PATH=/bin:$PATH
if test -f 'luc_func.gbc'
then
	echo shar: will not over-write existing file "'luc_func.gbc'"
else
sed 's/^X//' << \HI_MOM > 'luc_func.gbc'
X/*
X * LUC Public Key Encryption Made Easy
X *
X * Copyright 1993 Raymond S. Brand, All Rights Reserved
X *
X *
X * NOTE: This file conforms to the syntax of GNU bc (tested with GNU bc
X *	version 1.02). If you don't have GNU bc, think of the functions
X *	defined below as pseudo code.
X *
X *
X * Setup:
X *
X *	Each user selects 2 large prime numbers, Prime1 and Prime2, and
X *	multiplies them together to create the Modulus. Each user then
X *	selects another number as the PublicKey and makes the PublicKey
X *	and the Modulus known to all that wish to communicate with the
X *	user.
X *
X *	The chosen PublicKey must meet the following conditions:
X *
X *		0 < PublicKey < Modulus
X *		GCD(PublicKey, Prime1-1) = 1
X *		GCD(PublicKey, Prime1+1) = 1
X *		GCD(PublicKey, Prime2-1) = 1
X *		GCD(PublicKey, Prime2+1) = 1
X *
X *	and a good PublicKey will also meet the following conditions:
X *
X *		LogBase2(Modulus) < PublicKey < Modulus-1
X *		GCD(PublicKey, Prime1) = 1
X *		GCD(PublicKey, Prime2) = 1
X *
X *		LogBase2(Modulus) < Private1 < Modulus-1
X *		LogBase2(Modulus) < Private2 < Modulus-1
X *		LogBase2(Modulus) < Private3 < Modulus-1
X *		LogBase2(Modulus) < Private4 < Modulus-1
X *
X *	where
X *
X *		Private1 = Inv_Mod_N(PublicKey, LCM(Prime1-1, Prime2-1))
X *		Private2 = Inv_Mod_N(PublicKey, LCM(Prime1+1, Prime2-1))
X *		Private3 = Inv_Mod_N(PublicKey, LCM(Prime1-1, Prime2+1))
X *		Private4 = Inv_Mod_N(PublicKey, LCM(Prime1+1, Prime2+1))
X *
X *
X * Encrypting a message:
X *
X *	To send a LUC encrypted message, PlainText, to user A, user B
X *	calculates the cipher text, CipherText, as follows and sends it
X *	user A.
X *
X *		PlainText < Modulus_A
X *		CipherText = LUC(PlainText, PublicKey_A, Modulus_A)
X *
X *
X * Decrypting a message:
X *
X *	To decrypt a LUC encrypted message, CipherText, user A does the
X *	following:
X *
X *		CipherText < Modulus_A
X *		MessageText = LUC(PrivateKey_A, CipherText, Modulus_A)
X *
X *	where
X *
X *		PrivateKey_A = PrivateFromMessage(CipherText, PublicKey_A,
X *				Prime1_A, Prime2_A)
X *
X *	or
X *
X *		PrivateKey_A = PrivateFromPrimes(PublicKey_A,
X *				Prime1_A, Prime2_A)
X *
X *	The first method of calculating the private key has the advantage
X *	of calculating a short key, and the disadvantage of having to
X *	do the calculation for every message decrypted.
X *
X *	The second method has the advantage of not having to do the
X *	calculation for every message to be decrypted, and the disadvantage
X *	of calculating a long key.
X *
X *
X * Sending a signed a message:
X *
X *	To send a signed a message, MessageText, to user A, user B
X *	calculates the signed message, SignedText, as follows and sends
X *	it to user A:
X *
X *		MessageText < Modulus_B
X *		SignedText = LUC(PrivateKey_B, MessageText, Modulus_B)
X *
X *	where
X *
X *		PrivateKey_B = PrivateFromMessage(CipherText, PublicKey_B,
X *				Prime1_B, Prime2_B)
X *
X *	or
X *
X *		PrivateKey_B = PrivateFromPrimes(PublicKey_B,
X *				Prime1_B, Prime2_B)
X *
X *
X * Decrypting a signed message:
X *
X *	Decoding a signed message, SignedText, from user B is done as
X *	follows:
X *
X *		SignedText < Modulus_B
X *		MessageText = LUC(Public_B, SignedText, Modulus_B)
X */
X
X
X
X/*
X * LUC encryption/decryption function
X */
X	define luc(message, key, modulus) {
X		return (v_p1_n(key, message, modulus));
X	}
X
X
X/*
X * Calculates LUC private key from message, public key, primes.
X */
X	define private_from_message(message, public, p, q) {
X		return (inv_mod_n(public, s(message, p, q)));
X	}
X
X
X/*
X * Calculates LUC private key from public key, primes. Can be used with any
X *	message but will be VERY big (slow).
X */
X	define private_from_primes(public, p, q) {
X		return (inv_mod_n(public, r(p, q)));
X	}
X
X
X/*
X * Lucas function. Calculates V sub e (p, q) mod n
X */
X	define v_pq_n(subscript, p, q, mod) {
X		auto vm1, v, vm1_n, v_n, testbit, qek, qekm1, qek_n, qekm1_n;
X
X		if (0 == subscript) {
X			return (2);
X		}
X
X		p = p%mod;
X		vm1 = 2;
X		v = p;
X		qek = q;
X		qekm1 = 1;
X
X		testbit = 1;
X		while (testbit <= subscript) {
X			testbit *= 2;
X		}
X		testbit /= 2;
X		subscript -= testbit;
X		testbit /= 2;
X
X		while (testbit >= 1) {
X			if (testbit > subscript) {
X				vm1_n = (v*vm1)%mod;
X				vm1_n += (mod-((p*qekm1)%mod))%mod;
X				vm1_n %= mod;
X				v_n = (v*v)%mod;
X				v_n += (mod-((2*qek)%mod))%mod;
X				v_n %= mod;
X				qek_n = qek*qek;
X				qekm1_n = qek*qekm1;
X			} else {
X				vm1_n = (v*v)%mod;
X				vm1_n += (mod-((2*qek)%mod))%mod;
X				vm1_n %= mod;
X				v_n = (p*((v*v)%mod))%mod;
X				v_n += (mod-((q*v*vm1)%mod))%mod;
X				v_n += (mod-((p*qek)%mod))%mod;
X				v_n %= mod;
X				qek_n = q*qek*qek;
X				qekm1_n = qek*qek;
X
X				subscript -= testbit;
X			}
X
X			vm1 = vm1_n;
X			v = v_n;
X			qek = qek_n;
X			qekm1 = qekm1_n;
X
X			testbit /= 2;
X		}
X
X		return (v);
X	}
X
X
X/*
X * Lucas function. Calculates V sub e (p, 1) mod n
X */
X	define v_p1_n(subscript, p, mod) {
X		auto vm1, v, vm1_next, v_next, testbit;
X
X		if (0 == subscript) {
X			return (2);
X		}
X
X		p = p%mod;
X		vm1 = 2;
X		v = p;
X
X		testbit = 1;
X		while (testbit <= subscript) {
X			testbit *= 2;
X		}
X		testbit /= 2;
X		subscript -= testbit;
X		testbit /= 2;
X
X		while (testbit >= 1) {
X			if (testbit > subscript) {
X				vm1_next = (v*vm1)%mod;
X				vm1_next += (mod-p)%mod;
X				vm1_next %= mod;
X				v_next = (v*v)%mod;
X				v_next += (mod-2)%mod;
X				v_next %= mod;
X			} else {
X				vm1_next = (v*v)%mod;
X				vm1_next += (mod-2)%mod;
X				vm1_next %= mod;
X				v_next = (p*((v*v)%mod))%mod;
X				v_next += (mod-((v*vm1)%mod))%mod;
X				v_next += (mod-p)%mod;
X				v_next %= mod;
X
X				subscript -= testbit;
X			}
X
X			vm1 = vm1_next;
X			v = v_next;
X
X			testbit /= 2;
X		}
X
X		return (v);
X	}
X
X
X/*
X * Used in calculating private key from public key, message, and primes.
X */
X	define s(m, p, q) {
X		auto d;
X
X		d = (m*m)-4;
X
X		return (lcm(p-jacobi(d, p), q-jacobi(d, q)));
X		}
X
X
X/*
X * Used in calculating private key from public key and primes.
X */
X	define r(p, q) {
X		return (lcm(p-1, lcm(p+1, lcm(q-1, q+1))));
X		}
HI_MOM
chmod +x 'luc_func.gbc'
fi # end of overwriting check
if test -f 'math_func.gbc'
then
	echo shar: will not over-write existing file "'math_func.gbc'"
else
sed 's/^X//' << \HI_MOM > 'math_func.gbc'
X/*
X * Some generally useful functions
X *
X * Copyright 1993 Raymond S. Brand, All Rights Reserved
X */
X
X
X/*
X * GCD(a, b)
X */
X	define gcd(a, b) {
X		auto temp;
X
X		while (0 != b) {
X			temp = a%b;
X			a = b;
X			b = temp;
X		}
X
X		return (a);
X	}
X
X
X/*
X * LCM(a, b)
X */
X	define lcm(a, b) {
X		return (a*(b/gcd(a, b)));
X	}
X
X
X/*
X * Inverse of a modulo n.  Finds x such that (a*x)%mod = 1 using the
X *	extended Euclidean algorithm.
X */
X	define inv_mod_n(a, mod) {
X		auto g, g_prev, g_next, v, v_prev, v_next, quot;
X
X		g_prev = mod;
X		g = a;
X		v_prev = 0;
X		v = 1;
X
X		while (0 != g) {
X			g_next = g_prev%g;
X			quot = (g_prev-g_next)/g;
X			v_next = (v_prev+(mod-((quot*v)%mod)))%mod;
X			g_prev = g;
X			g = g_next;
X			v_prev = v;
X			v = v_next;
X			}
X
X		return (v_prev);
X		}
X
X
X/*
X * (x^y)%n
X */
X	define pow_mod_n(x, power, modulus) {
X		auto bit, result;
X
X		x %= modulus;
X		result = 1;
X
X		while (power) {
X			bit = power%2;
X			power = (power-bit)/2;
X
X			if (1 == bit) {
X				result = (result*x)%modulus;
X			}
X
X			x = (x*x)%modulus;
X		}
X
X		return (result);
X	}
X
X
X/*
X * Calculates J(a,b), the Jacobi symbol, of a and b. b should be odd.
X */
X	define jacobi(a, b) {
X		auto sign, temp, test, bit;
X
X		sign = 1;
X
X		while (a > 1) {
X			bit = a%2;
X
X			if (0 == bit) {
X				/*
X				 * test will be != 0 only if 3 = b%8 or
X				 *	5 = b%8
X				 *
X				 * there are much better ways of doing the
X				 *	following
X				 */
X				test = (((b*b)-1)/8)%2;
X
X				a /= 2;
X
X				if (0 != test) {
X					sign = -sign;
X				}
X			} else {
X				/*
X				 * test will be != 0 only if 3 = a%4 = b%4
X				 *
X				 * there are much better ways of doing the
X				 *	following
X				 */
X				test = (((a-1)*(b-1))/4)%2;
X
X				temp = a;
X				a = b%temp;
X				b = temp;
X
X				if (0 != test) {
X					sign = -sign;
X				}
X			}
X		}
X
X		if (0 == a) {
X			sign = 0;
X		}
X
X		return (sign);
X	}
X
X
X/*
X * Calculates the ceiling of log base 2 of x. To calculate the number of
X *	bits in the representation of a number x, use logbase2(x+1).
X */
X	define logbase2(x) {
X		auto log;
X
X		log = 0;
X		x -= 1;
X
X		while (x > 0) {
X			log += 1;
X			x /=2;
X		}
X
X		return (log);
X	}
HI_MOM
chmod +x 'math_func.gbc'
fi # end of overwriting check
if test -f 'luc_demo.gbc'
then
	echo shar: will not over-write existing file "'luc_demo.gbc'"
else
sed 's/^X//' << \HI_MOM > 'luc_demo.gbc'
X/*
X * LUC Public Key Encryption Demo
X *
X * Copyright 1993 Raymond S. Brand, All Rights Reserved
X */
X
Xprint "
X	LUC Public Key Encryption System Demonstration
X
X"
X
X/*
X * these parameters are from Dr. Dobbs Journal, Jan '93
X */
Xprime1 = 1949
Xprime2 = 2089
Xmodulus = prime1*prime2
Xpublic = 1103
Xplain = 11111
Xcipher = luc(plain, public, modulus)
Xprivate1 = private_from_message(cipher, public, prime1, prime2)
Xprivate2 = private_from_primes(public, prime1, prime2)
Xsigned = luc(plain, private1, modulus)
X
X
Xprint "Prime1     = ", prime1, "
X"
Xprint "Prime2     = ", prime2, "
X"
Xprint "Modulus    = ", modulus, "
X"
Xprint "PublicKey  = ", public, "
X"
Xprint "PlainText  = ", plain, "
X"
Xprint "CipherText = ", cipher, "
X"
Xprint "SignedText = ", signed, "
X"
X
X
Xprint "
X
XMessage Encryption
X
X"
Xprint "	LUC(PlainText, PublicKey, Modulus)       = ", luc(plain, public, modulus), "
X
X"
Xprint "	PrivateKey calculated with CipherText    = ", private_from_message(cipher, public, prime1, prime2), "
X"
Xprint "	LUC(CipherText, PrivateKey, Modulus)     = ", luc(cipher, private1, modulus), "
X
X"
Xprint "	PrivateKey calculated without CipherText = ", private_from_primes(public, prime1, prime2), "
X"
Xprint "	LUC(CipherText, PrivateKey, Modulus)     = ", luc(cipher, private2, modulus), "
X"
Xprint "
X
XMessage Signing
X
X"
Xprint "	PrivateKey calculated with PlainText     = ", private_from_message(plain, public, prime1, prime2), "
X"
Xprint "	LUC(PlainText, PrivateKey, Modulus)      = ", luc(plain, private1, modulus), "
X
X"
Xprint "	PrivateKey calculated without PlainText  = ", private_from_primes(public, prime1, prime2), "
X"
Xprint "	LUC(PlainText, PrivateKey, Modulus)      = ", luc(plain, private2, modulus), "
X
X"
X
Xprint "	LUC(SignedText, PublicKey, Modulus)      = ", luc(signed, public, modulus), "
X
X"
X
X
Xhalt
HI_MOM
chmod +x 'luc_demo.gbc'
fi # end of overwriting check
#	End of shell archive
exit 0




