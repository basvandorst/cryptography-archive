Newsgroups: sci.crypt
Path: msuinfo!caen!sdd.hp.com!network.ucsd.edu!qualcom.qualcomm.com!servo.qualcomm.com!karn
From: karn@servo.qualcomm.com (Phil Karn)
Subject: Key exchange resistant to subsequent seizure
Message-ID: <1992Oct19.060547.1305@qualcomm.com>
Sender: news@qualcomm.com
Nntp-Posting-Host: servo.qualcomm.com
Organization: Qualcomm, Inc
Date: Mon, 19 Oct 1992 06:05:47 GMT
Lines: 62

I am looking for a crypto protocol that will let Alice and Bob establish
temporary session keys in such a way that an eavesdropper (call him
"FBI") could not determine them after the fact even if "FBI" records the
entire session and then later (after the temporary keys have been
destroyed) seizes all of the longer-lived secret keys Alice and Bob used
to create it.

The protocol must assume that the eavesdropper can even actively modify
messages. It must detect this and warn the two parties *before* they use
their temporary secret keys to encrypt any user data. And, as usual, the
entire protocol is assumed to be public.

Clearly the straightforward technique of generating random DES session
keys and encrypting them with the receipient's RSA public key won't
work. If the FBI later seizes the other party's RSA secret key, it could
go back and decrypt the key exchange, followed by their entire session.

I have two possible solutions, both based on some ideas I heard from
Jim Bidzos 1.5 years ago (but didn't fully understand at the time).

Protocol #1:

1. The parties use hardware random number generators along with the
Diffie-Hellman algorithm to establish a shared secret, Kd.

2. The parties verify that they have the same value of Kd by hashing it
with MD-5 and then encrypting with their RSA secret keys, Ks. Both the
hash value, MD5(Kd) and its RSA encryption, RSA(Ks,MD5(Kd)) are
exchanged. These exchanges, along with any needed public key
certificates, are all encrypted with a single-key cipher keyed by Kd.

3. The parties verify each other's signatures. Then each compares the hash
code MD5(Kd) computed by the other party with the value computed locally.
If they match, Kd continues to be used as the temporary session key for
single-key encryption. If the comparisons fail, an "intruder alert" is
sounded and the protocol stops.

Protocol #2:

1. The parties sign, using MD5 and RSA, the exchanges in the
Diffie-Hellman algorithm. Before generating Kd, each party verifies the
signature on the other's message, after exchanging public key
certificates if necessary.

Both protocols clearly protect against simple passive eavesdroppers
because they both use Diffie-Hellman key exchange, which is known to
work here. Both also protect against active eavesdropping because the
digital signatures protect against message modification. And both should
protect even against later seizure of the RSA secret keys (assuming the
Kd's have already been destroyed) because RSA is only used for signing
-- not encryption. (Obviously the stolen keys could then be used to
impersonate the owner in subsequent sessions, but previous sessions
should still be safe.)

Protocol #2 has the advantage of requiring fewer messages. But because
it encrypts even the users' public key certificates, protocol #1 has the
advantage of denying a passive eavesdropper of even that clue about the
communicators' identities.

Can anyone spot any vulnerabilities in these schemes?

Phil
