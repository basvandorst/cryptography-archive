Newsgroups: sci.crypt
Path: msuinfo!caen!zaphod.mps.ohio-state.edu!cs.utexas.edu!torn!cunews!nrcnet0!bnrgate!bcars267!bcars267!keith
From: keith@bcars267.uucp (Keith W. Campbell)
Subject: Re: Key exchange resistant to subsequent seizure
Message-ID: <1992Oct20.001045.26579@bnr.ca>
Sender: news@bnr.ca (usenet)
Nntp-Posting-Host: bcars267
Organization: Bell-Northern Research, Ontario, Canada
References: <1992Oct19.060547.1305@qualcomm.com>
Date: Tue, 20 Oct 1992 00:10:45 GMT
Lines: 71

In article <1992Oct19.060547.1305@qualcomm.com> karn@servo.qualcomm.com (Phil Karn) writes:
>I am looking for a crypto protocol that will let Alice and Bob establish
>temporary session keys in such a way that an eavesdropper (call him
>"FBI") could not determine them after the fact even if "FBI" records the
>entire session and then later (after the temporary keys have been
>destroyed) seizes all of the longer-lived secret keys Alice and Bob used
>to create it.
>
>The protocol must assume that the eavesdropper can even actively modify
>messages. It must detect this and warn the two parties *before* they use
>their temporary secret keys to encrypt any user data. And, as usual, the
>entire protocol is assumed to be public.
>
>Protocol #1:
>
>1. The parties use hardware random number generators along with the
>Diffie-Hellman algorithm to establish a shared secret, Kd.
>
>2. The parties verify that they have the same value of Kd by hashing it
>with MD-5 and then encrypting with their RSA secret keys, Ks. Both the
>hash value, MD5(Kd) and its RSA encryption, RSA(Ks,MD5(Kd)) are
>exchanged. These exchanges, along with any needed public key
>certificates, are all encrypted with a single-key cipher keyed by Kd.
>
>3. The parties verify each other's signatures. Then each compares the hash
>code MD5(Kd) computed by the other party with the value computed locally.
>If they match, Kd continues to be used as the temporary session key for
>single-key encryption. If the comparisons fail, an "intruder alert" is
>sounded and the protocol stops.

An active eavesdropper, Eve, may replace the exponentials travelling in
each direction with the value 0 or 1. (The protocol could be modified to
fail if either party receives such troublesome values, but as described,
it does not). After the exchange, Alice and Bob have agreed Kd=0 (or 1)
which is also known to Eve.  The protocol completes successfully with
Alice and Bob exchanging signature over Kd chosen by Eve.  Eve may now
monitor the entire communication.

Another modification to the protocol to prevent this would be for Alice
to sign the pair (a^x,a^y) and Bob to sign (a^y,a^x).  Respectively, x
and y are the random values chosen by Alice and Bob for use in the
Diffie-Hellman algorithm.  Eve cannot completely control the data
signed by Alice and Bob, so any modification will be detected.

>Protocol #2:
>
>1. The parties sign, using MD5 and RSA, the exchanges in the
>Diffie-Hellman algorithm. Before generating Kd, each party verifies the
>signature on the other's message, after exchanging public key
>certificates if necessary.

Eve may replay (say) Alice's part of the exchange fooling Bob into believing
that he is talking to Alice.  Unless she has aquired the random number x
Alice used previously, Eve will get little from this process other than
confusing Bob.

This protocol has failed in that it incorrectly tells Bob he is talking
to Alice.

>Protocol #2 has the advantage of requiring fewer messages. But because
>it encrypts even the users' public key certificates, protocol #1 has the
>advantage of denying a passive eavesdropper of even that clue about the
>communicators' identities.
>
>Phil

Protocol #1 as modified above does require more messages, but the total
volume of data exchanged should not be larger.  The communicators'
identities may already be revealed by the source and destination of the
messages exchanged; this aspect of privacy, I suspect, will be difficult
to achieve.
