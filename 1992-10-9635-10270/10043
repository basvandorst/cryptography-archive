Path: msuinfo!netnews.upenn.edu!jvnc.net!darwin.sura.net!wupost!waikato.ac.nz!aukuni.ac.nz!cs18.cs.aukuni.ac.nz!pgut1
From: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Newsgroups: sci.crypt
Subject: Re: MDC cipher code (long)
Message-ID: <1992Oct27.003559.2441@cs.aukuni.ac.nz>
Date: 27 Oct 92 00:35:59 GMT
References: <1992Oct22.063349.28189@cs.aukuni.ac.nz> <5830005@hplsla.hp.com>
Organization: Computer Science Dept. University of Auckland
Lines: 135

In message <1992Oct22.063349.28189@cs.aukuni.ac.nz>, strange tentacled beings
    forced Eric Backus (ericb@hplsla.hp.com) to write:

>Peter Gutmann writes:
>> The code below uses the MD5 message digest algorithm, with the Mysterious
>> Constants replaced with key-dependant values
>...
>> The cipher, called MDC (Message Digest Cipher), simply uses constants derived
>> from a user-supplied key instead.  The key setup is basically the same as
>> that used in my NSEA cipher code, with the Mysterious Constants being
>> generated by running MD5 over a buffer containing the user key, with the MD5
>> initial value being set to the IV.  These are then substituted for the
>> standard MD5 constants to create the MDC function.
>
>I have some concern about this.  Although Ron Rivest thinks that MD5 is 
>not weakened by changing the constants, we don't know if that is true or 
>if there might be degenerate values to avoid.  Not much thought has been 
>given to this (yet).
 
I don't think there is that much thought you can give to it.  The original 
MD5 values were chosen to be random, and yet to give an easy way of 
duplicating them (ie the derivation of the values is obvious, to allay any 
fears of trapdoors).  As such there is no specific "right" or "wrong" set 
of values.  Therefore replacing the current set of arbitrary values with 
another set of equally arbitrary values shouldn't cause any problems.

About a year ago when the security of MD5 was being debated, Phil Karn said in
message <1992Mar11.231020.1188@qualcomm.com>:

>The intent [of the constants] was probably to produce a statistically "random"
>pattern of bits in a clearly described way. True random numbers probably would
>have been better, but then you'd be asked to "prove" to everyone that they're
>really and truly "random", without any trap doors.
>
>MD-5 uses different additive constants for each step, 64 in all.  They are
>generated by the formula 4294967296*abs(sin(i)) where i is the step number.
>The sine function produces transcendental values for non-zero integer radian
>arguments, and 4294967296 is 2^32, so this formula also appears to produce
>seemingly "random" 32-bit numbers, at least in the low order bits.

Now MDC generates it's numbers by hashing the key with MD5.  These "random"
numbers, while not true random numbers, are actually probably somewhat better
than the sine-based ones.

>Also, this cipher relies on the mysterious constants being unrecoverable, 
>given both input and output.  MD5 was NOT designed with this in mind.  
>Again, not much thought has been given to this (yet).

Agreed.  I've given it a bit of thought, but I don't really count for much 
:-).  However note that the auxiliary key used in MDC is also based on the
user-supplied key.  Breaking MDC would require not only recovering the
mysterious constants, but also on recovering the auxiliary key.  Maybe the
mysterious constants can be dispensed with altogether, although it seems to me
they can't do anything other than to increase the overall security of the
scheme.  Breaking MD5-with-auxiliary-key is the same as breaking MD5 itself.
Breaking MD5-with-auxiliary-key-and-mysterious-constants may be more difficult
than breaking MD5 itself, it certainly shouldn't be less difficult than MD5
alone.

[Introductory comment: The following is not meant to be an attack on Phil
 Karn's MD5 cipher - I'm merely comparing the complexity of the two to answer a
 point raised by Eric]

>I was under the impression that a secure cipher could be obtained from a
>message digest algorithm, by using several passes of a message digest
>algorithm and using the user's key as part of the input to the digest
>algorithm.  I don't think the message digest algorithm needs to be altered in
>any way for this.  I think Phil Karn proposed something like this awhile back.

After some debate, Phil Karn concluded in message
<1992Mar23.063409.8363@qualcomm.com>:

  So I am now proposing that "my" cipher consist of three calls to the MD-5
  primitive function "transform", and that the keys for each step be different.
  Since the subkey for each round is 64 bytes long, it should suffice to accept
  one 64-byte key and to use MD-5 in its usual mode to generate the rest of the
  subkeys by repetitive iteration.

In a subsequent posting of code to implement this cipher by Mark Windsor in
message <29d1d044@windsor.a92104.sai.com>, the central transformation is:

    bcopy (ihash, hash, sizeof(hash));
    bcopy (in1, buf, 16);
    bcopy (key1, buf+4, 48);
    Transform (hash, buf);
    for (i=0; i<4; ++i)
	temp[i] = buf[i] = in2[i] ^ hash[i];
    bcopy (ihash, hash, sizeof(hash));
    bcopy (key2, buf+4, 48);
    Transform (hash, buf);
    for (i=0; i<4; ++i)
	out2[i] = buf[i] = in1[i] ^ hash[i];
    bcopy (ihash, hash, sizeof(hash));
    bcopy (key1, buf+4, 48);
    Transform (hash, buf);
    for (i=0; i<4; ++i)
	out1[i] = temp[i] ^ hash[i];

In comparison, MDC uses (with comments stripped):

    mdcTransform( iv );
    memcpy( temp, buffer, ivCount );
    for( i = 0; i < ivCount; i++ )
	buffer[ i ] ^= iv[ i ];
    memcpy( iv, temp, ivCount );

MDC therefore seems to have two advantages, the first being that it is faster
(using a single call to the hash-function transformation instead of three), the
second being that it is a stream cipher rather than a block cipher and
therefore doesn't require the extra calisthenics needed by a block cipher to
handle odd-length messages.

>Is the point of your MDC that you can do this with a SINGLE pass of the 
>message digest algorithm?  If so, I really would rather have the slower 
>but probably more secure algorithm.
 
That is the main point, yes.  However, what makes you think the other way 
of doing it is any more secure?  When used in CFB mode, *any* encryption 
algorithm is being used simply as a cryptographic hash function.  As I said 
in my original posting, I can't see any reason not to use MD5 (which is a 
hash function) in place of block ciphers like DES or IDEA.  MD5 has been 
attacked by competent cryptographers, and has withstood these attacks 
(again see my previous posting).  Since the only thing which differentiates 
MDC from MD5 are the constants, which as I've explained above are 
completely arbitrary and may even be "more random" than the ones in MD5 itself,
why would MDC be less secure than MD5?  It may even be more secure....

Peter.
--
    pgut1@cs.aukuni.ac.nz || peterg@kcbbs.gen.nz || peter@nacjack.gen.nz
			   (In order of preference)
Warning!
  Something large, scaly, and with fangs a foot long lives between <yoursite>
and <mysite>.  Every now and then it kills and eats messages.  If you don't
receive a reply within a week, try resending...
