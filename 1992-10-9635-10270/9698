Path: msuinfo!caen!uwm.edu!spool.mu.edu!umn.edu!noc.msc.net!vixvax.mgi.com!cepek
From: cepek@vixvax.mgi.com
Newsgroups: sci.crypt
Subject: Pseudo-one-time pads
Message-ID: <1992Oct2.172914.2263@vixvax.mgi.com>
Date: 2 Oct 92 17:29:14 CDT
Organization: Management Graphics, Inc.
Lines: 33

I have been thinking about pseudo-one-time pads (POTP) lately.

Assume you have a POTP generator (some new algorithm).  Let's say it
has a period of 2^64 (= 1.8e19) -- after that many output bytes the
pattern repeats.  The POTP seed maps to a starting point in the sequence
in a "complex" manner. 

Question 1:  Is 2^64 "enough"?  I realize this answer depends on many
things (cracking computer horsepower and memory, desired level of
security, number of years of intended use, computational complexity of
the POTP, etc.). Reasonably qualified answers like "it would take a
Cray-XMP about n years to evaluate 25 parallel multiply-add PRNGs 2^64
times" would be constructive here. 

Next, assume that we do not have access to any "real" random source.  By
this I am forcing the POTP seed value to be based only on user key(s)
and/or the message itself. 

Question 2:  With these two assumptions, how can such a POTP algorithm
be seeded "strongly"?  [An obvious example of weak usage: hashing a user
key into the (same) seed for each message.]  Are there good ways to
construct a seed given (only) a user key and the message text?

(Note: I know that keypress timings can be used to generate a very long,
random "message key", but I am excluding this option with my second
assumption above.) 

Further discussion and comments are hereby solicited.
_______________________________________________________________________
Mike Cepek, Senior Software Design Engineer     Internet: CEPEK@MGI.COM
Management Graphics, Inc., 1401 E. 79th St., Minneapolis, MN 55425  USA   
Front desk: +1 612/854-1220   My desk/Voice mail: 851-6112   Fax: -6159
\______PGP Public key available using FINGER or by email request______/
