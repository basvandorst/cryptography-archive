Newsgroups: sci.crypt
Path: msuinfo!caen!sdd.hp.com!wupost!darwin.sura.net!convex!news.oc.com!utacfd.uta.edu!rwsys!sneaky!gordon
From: gordon@sneaky.lonestar.org (Gordon Burditt)
Subject: Re: More on cracking DES algorithm
Message-ID: <BvJ8xK.69y@sneaky.lonestar.org>
Organization: Gordon Burditt
References: <BvExML.Juq@usenet.ucs.indiana.edu>
Date: Sat, 3 Oct 1992 06:34:27 GMT
Lines: 30

>Let's say someone retreives the DES source code, which is easy enough.  Why
>WOULDN'T they be able to take every single mathematical operation, reverse each
>one, and then have a "decrypt()"?  I know it's not that simple, but how has DES
>made it so even a good mathematician can't just reverse all the operations?

Suppose		A = B XOR C
now reverse it, given A = 1, find B and C.  Not so easy, huh?  It
gets worse with AND and OR.

Suppose the function you wish to reverse takes a 56-bit DES key, encrypts
the constant plaintext 0x0000000000000000, and generates 64 bits of
ciphertext.  It *IS* possible to reverse this.  You end up with
56 boolean equations, one for each bit of the key, and maybe you want
one for indicating whether it's a possible output or not.  

Unfortunately, each of the 56 equations involves 64 input variables
(the ciphertext bits), and there are about 2**55 terms in each equation 
(corresponding to each possible ciphertext output where the key bit in 
question is a 1 and the other key bits vary).  I say "about" because
"collisions" where two different keys map the same plaintext to
the same ciphertext would cause redundant terms in the equation,
which could be removed.  Due to the way DES "mixes up the bits", 
these equations won't reduce much.  

This analysis is almost as messy as just pre-computing a "dictionary"
of what all 2**56 keys generate, and looking up the result you want
to crack to find the corresponding key.

					Gordon L. Burditt
					sneaky.lonestar.org!gordon
