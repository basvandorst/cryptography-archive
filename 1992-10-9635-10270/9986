Xref: msuinfo sci.crypt:9986 alt.security:8223
Newsgroups: sci.crypt,alt.security
Path: msuinfo!caen!sol.ctr.columbia.edu!usc!elroy.jpl.nasa.gov!ames!news.hawaii.edu!wiliki.eng.hawaii.edu!newsham
From: newsham@wiliki.eng.hawaii.edu (Timothy Newsham)
Subject: Re: Letter Frequency
Message-ID: <1992Oct24.052920.590@news.Hawaii.Edu>
Sender: root@news.Hawaii.Edu (News Service)
Nntp-Posting-Host: wiliki.eng.hawaii.edu
Organization: University of Engineering, College of Engineering
References: <1big1qINNrnq@matt.ksu.ksu.edu> <TED.92Oct20225825@lole.nmsu.edu> <1992Oct21.112802.3379@wkuvx1.bitnet>
Date: Sat, 24 Oct 1992 05:29:20 GMT
Lines: 103

In article <1992Oct21.112802.3379@wkuvx1.bitnet> mccoyje@wkuvx1.bitnet writes:
>If you are referring to the simple frequency of letters in the
>American English, her are the first few off-hand. I don't remember all
>of them.
>e t a o n r i s h d l u c 
>(handy during Wheel of Fortune)
>
>Jason McCoy

like many people have stated the best way to get this kind of information
is to take a look at the type of document you are trying to break.
A good way to do this is with a computer and a program (how convenient,
you are on a computer now!)
but you say to yourself "now where would I get such a program"

well,  if you call now, for a limited time,  on saturdays and all
through may, you can get this program for the low low price of
free...  seemed to work for me, but may have bugs I didnt see..
usage "programname file1 file2 file3 file4", output is a
tad verbose.

-----

int gfreq[27];

main(argc,argv)
int argc;
char **argv;
{
  int i;
  
  for(i=0;i<26;i++)
    gfreq[i]=0;
   
   while(*++argv) 
    docount(*argv);
  
   pfreq(gfreq,"global");
   return;
}

docount(s)
char *s;
{
  int fd,i;
  int freq[27];
  char c;

  for(i=0;i<26;i++)
    freq[i]=0;

  if((fd=open(s,0))<0) 
    return;   
  while(read(fd,&c,1) ==1) {
    if(!isalpha(c)) continue;
    if(isupper(c)) c=tolower(c);
if((c-'a') >26 || (c-'a') <0 ) {
  printf("ERROR : %c.\n",c);
}
    freq[c - 'a'] ++;
  }
  close(fd);
  pfreq(freq,s);
 
  for(i=0;i<26;i++) {
    gfreq[i] += freq[i];
  }
  return;
}

struct stuff {
  int num;
  char val;
};

mycomp(a,b)
struct stuff *a,*b;
{
  return(b->num-a->num);
}

pfreq(a,s)
char *s;
int a[];
{
  struct stuff  b[27];
  int j,i;

  for(i=0;i<26;i++) {
    b[i].num=a[i];
    b[i].val='a'+i;
  }

  printf("%s:\n",s);
  qsort(b,26,sizeof(struct stuff),mycomp);
  for(j=0;j<26;j++) {
    printf("%c :  %d\n",b[j].val,b[j].num);
  } 
  printf("-----\n");
}

    

