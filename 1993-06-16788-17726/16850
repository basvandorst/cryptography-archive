Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!transfer.stratus.com!jjmhome!pig!die
From: die@pig.UUCP (Dave Emery)
Newsgroups: sci.crypt
Subject: Re: pgp
Summary: Be careful about zeroizing
Keywords: smartcard, private key server, trusted kernal.
Message-ID: <763@pig.UUCP>
Date: 4 Jun 93 15:53:07 GMT
References: <3m1a5B5w165w@sizone.jaywon.pci.on.ca> <neuhaus.738920674@vier> <1993Jun3.065929.1120@qualcomm.com>
Organization: Opinion Mongers Incorperated...
Lines: 59

In article <1993Jun3.065929.1120@qualcomm.com> karn@servo.qualcomm.com writes:

>But every time I *sign* an outgoing message or *decrypt* an incoming
>message on such a machine, I take a far greater risk. If I were to
>type my pass phrase into a machine that were in fact compromised, I'd
>effectively disclose not only one particular message (which may not be
>all that sensitive) but every other message that ever was or will be
>encrypted with that key pair, regardless of where it was encrypted.

	This is a very important point about public key crypto security
systems that cannot be emphasized enough.  In order to use it (at
least to read your encrypted messages) you must make available to the
decrypting software a permanent unchanging private key that can be used
to read all the messages ever encoded with your public key.  And this
applies to reading even the most routine and trivial email sent
encrypted. 

	This is obviously a major point of attack for those seeking to
compromise security.  It effectively rules out use of public key privacy
technology for really secret corrospondence in many of todays
traditional computing environments, where unsecured and unencrypted
LANs, tapable terminal server wiring, untrustworthy "trojan horse"
software and firmware (and even hardware), multiuser OS's with known
(and unknown) unrepaired security holes, unencrypted dial up lines, and
even poorly sheilded PC's and terminals that radiate information abound. 
One need only succeed in obtaining the private key once, from someplace,
somehow, sometime to be able to access everything, all the time.

>The palmtop would effectively emulate a RSA "smartcard".

	Smartcard or other trusted personal private key server technology
is the only way that public key cryptography can be made to work securely
in the real world.   Phil's suggestion is excellent, but it would be
even nicer if such private key servers (presumably implemented as smartcards
with RSA implemented in silicon on them), were a standard product with
standard access protocols that plugged into a widely available socket
on conventional computer hardware.
 
	On another more minor point, Phil suggests using palmtops as key
servers and comments that turning them off would secure them; on this I
beg to differ.  As anybody who has ever worked with modern memory
devices (especially CMOS) in a lab debug setting that involved turning
the power off and on to make changes or even just reconnect logic analyzer
probes will attest, many modern chips will "remember" most of the bits
of data stored in them for many hours and even days.  I have actually
loaded Unix into the memory of a conventional workstation with no
battery backup or Novram of any kind, shut the power off for an hour,
and turned it back on and made the kernal come up and run again without
rebooting.  It would not be wise to leave the palmtop unsecured until
every bit of temporary memory in it had been toggled a few times with random
data. 

	I might add that the DOD destroys memory boards used on classified
computers rather than sending them back for free repair because they
understand this problem.


	David I. Emery, Senior Technical Consultant (and notorious fraud) 
	UUCP:  ...uunet!jjmhome!pig!die  Internet: die@world.std.com
