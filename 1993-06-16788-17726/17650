Newsgroups: alt.privacy.clipper,sci.crypt,sci.skeptic
Path: msuinfo!agate!howland.reston.ans.net!gatech!purdue!mentor.cc.purdue.edu!pop.stat.purdue.edu!hrubin
From: hrubin@pop.stat.purdue.edu (Herman Rubin)
Subject: Re: Let's split sci.crypt and Re: Random numbers?
Message-ID: <C9E4yL.H75@mentor.cc.purdue.edu>
Sender: news@mentor.cc.purdue.edu (USENET News)
Organization: Purdue University Statistics Department
References: <C91826.D5D.3@cs.cmu.edu> <818R6B3w165w@tanda.isis.org> <C9B8FB.DE0@acsu.buffalo.edu>
Date: Tue, 29 Jun 1993 16:11:08 GMT
Lines: 52
Xref: msuinfo alt.privacy.clipper:994 sci.crypt:17650 sci.skeptic:47350

In article <C9B8FB.DE0@acsu.buffalo.edu> boyd@acsu.buffalo.edu (Daniel F Boyd) writes:
>In article <818R6B3w165w@tanda.isis.org> marc@tanda.isis.org 
>>         Suppose we use a "sieve" algorithm to generate a number series
>>         as follows:

>>         1.  Set up the half dozen or so most powerful tests of
>>             randomness and combine them to produce an "Index of
>>             Randomness" Ir, such that a high Ir would generally be
>>             accepted as very convincing evidence of a noise source.

>Without specifying what your tests for randomness are and how you're
>combining them, this is meaningless.  You could end up with the same
>sequence every time, or you could end up with a sequence that isn't
>the same but is easily predictable, depending how you weight the
>various tests.  Suppose you use the average test alone: the program
>will select 128 128 128 128 128 128 128 128 for the random
>byte-values.

Which tests to use should depend on your knowledge.  If one is testing
that the output of a counter is adequately random, looking at the
relative frequencies of overlapping bytes will be an excellent way
of testing.  But if a pseudo-random number generator is used, this
can be totally useless.  For example, suppose that one is using
the word Tausworthe generaor

		x[n] = x[n-460] ^ x[n-607]

and seed it with 607 truly random words, it would pass any such test.

>>         2.  Starting with a many-number key as an initial series,
>>             extend the series by selecting successive numbers so that
>>             the series Ir is maximised.

>Even leaving that unspecified: You have to calculate Ir 256 times for
>each number in the sequence past the initial key.  This is way too
>expensive.

Even worse, I can now construct a test which this fails!  That is, the
test that it was produced this way.  This is the problem with all
pseudo-random procedures.

>>         Clearly, this could be used for cryptography, because anyone
>>         with the many-number key could regenerate the entire series.

But this is exactly why it is useless for cryptography, at least with
enough computing power.  A public key cryptosystem has to be such that
one cannot easily crack it. 
-- 
Herman Rubin, Dept. of Statistics, Purdue Univ., West Lafayette IN47907-1399
Phone: (317)494-6054
hrubin@snap.stat.purdue.edu (Internet, bitnet)  
{purdue,pur-ee}!snap.stat!hrubin(UUCP)
