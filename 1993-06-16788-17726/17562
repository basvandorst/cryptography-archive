Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!uunet!digex.com!access!pcw
From: pcw@access.digex.net (Peter Wayner)
Newsgroups: alt.privacy.clipper,sci.crypt
Subject: Re: $30M for 1 day DES solution (was NSA computing power)
Date: 25 Jun 1993 13:25:29 -0400
Organization: Express Access Online Communications, Greenbelt, MD USA
Lines: 159
Distribution: usa
Message-ID: <pcw.741027259@access>
References: <1993Jun24.215222.16514@wdl.loral.com>
NNTP-Posting-Host: access.digex.net
Xref: msuinfo alt.privacy.clipper:974 sci.crypt:17562

koontzd@nebula.lrcs.loral.com (David Koontz ) writes:


>Errors:

>2.2 Computing the S-boxes
>-------------------------

>On page 4 S boxes are "...described as eight functions that take 6 out of the 
>32 bits <of the R block> and return four."  

>Actually what happens is that the R block is expanded to 48 bits through the 
>use of the Expansion (E) permutation and XORed with 48 key bits selected from
>the 56 bit key.  The resulting 48 bits are taken 6 bits at a time and applied
>as input to the eight S box functions which return 4 bits each.

If you play with the bits a bit, you'll notice that the expansion function
just duplicates 16 of the bits to turn 32 into 48. The purpose is to 
get some cross block mixing of bits. But it is still possible to say
that an sbox takes 6 of the 32 bits as input and point to them 
by number in the R block. 

Bruce Schneier writes in his book, "For each four-bit input block,
the first and fourth bits represent two bits of the output block, while 
the second and third bits represent one bit of the output block....
Although the output block is larger than the input block, there
is only only input block that can generate a specific output
block."

>2.3 Handling the Key
>--------------------

Yes, there is an error when I mention that only 32 key bits
are used each round. The correct answer is 48. But this
doesn't change the cost of doing the encryption. Why?
Because the key bits are "compiled" into the instructions
for computing each sbox of each round. 

Without going into details, you can reduce each sbox calculation
in each round to the process of taking 6 bits from the current
R block, xoring them with 6 bits from the 56 key bits and then
computing some boolean function that will return the four bits
that emerge from the sbox. We could simply do the xor explicitly,
or we could just flip all of the functions in the boolean function.
If bit 5 was going to be xor'ed with key bit 7, then the value
of the bit will be flipped if the key bit is 1. Well, if it 
is, we can either including an explicit XOR command in the 
computation phase or we can screw around with the boolean function
that computes the sbox here. If key bit 7 is one, then we just
replace every occurance of Rblock bit 5 with NOT(Rblock bit 5).
This doesn't add any extra operations, however, because the
boolean functions are processed by table lookups. 8 bits are
fed to the CAM and it uses three bits to look up the answer in
these 8 bits. 

>2.4 The Total Cost
>------------------

>The above errors are bound to affect the clock calculations and resulting
>performance figures.  Possibly the key size would require the number
>of processors to increase.  The number given for a 1024 processor chip
>is 31.2 M bits per second for DES encryption.  This would almost
>certainly be derated to fix the problems pointed out above.

I don't believe that the one error will change any of the estimates
I made in the paper. I should emphasize, though, that the numbers
in the paper are just estimates. They are based on a careful paper
analysis-- not a working implementation. (I blame the fab line.)

Incidentally, the rate is 31Mb/second for _one_ chip. It can
max out at 200Mb/sec for multiple chips if there is enough
data to fill up many chips in parallel. This is a reasonable
assumption in this case because the chips are first and
foremost cool memory chips. System designers are likely to 
add multiple ones to each machine. 

>Having only looked at the paper briefly I figured that a dedicated hardware
>implementation of DES could be much faster and/or cheaper.

>How fast can a HW implementation of DES go?
>-------------------------------------------

>Using superscalar techniques DES can be implemented in a 120K gate ASIC
>with a throughput of 75M Blocks (600 Mbytes) per second.  It would be very
>likely that you would want to add hooks and whistles for using in brute
>force attacks possibly trading off bus bandwidth (and package pins) for
>comparators and incrementing key registers.

>600 Mbytes x 8 bits yields 4800 Mbits per second:

>    75 MHz clock
>    Scheduled keys 
>	(a 56 bit bus with  two 48 bit tap offs and a 2:1 mux for every round)
>    16 rounds worth of XORs and Sboxes (80 XOR gates X 16)
>    16 sets of L and R pipeline registers
>    done in submicron

>To operate the FAST DES chip as a brute force key trial device might require
>a key pipeline (56 bit register x 16).  Also meet in the middle modifications
>would be desirable breaking the 16 rounds into two 8 round segments with
>a comparator between them.

>Even conservatively its around 160 times faster than the coherent processor
>implementation (after fixing above problems).  I would estimate the cost
>of such a chip to be in the $200 range in low volumes, compared to 
>$100 for a 1024 processor coherent chip.

$30 and cheaper in volume. 

>A proper breaker-DES chip could accept a broadcast cipher/plaintext pair,
>and perhaps through the use of strapping pins, subdivide the key space
>for search by specifying the starting point for a key counter.   Likewise
>this subdivision could be carried into the DES chip architecture to reduce
>key space variable size.

>The main requirement for outside control, until a match is found is to
>insure the chip is operating.  Periodically the chips could be interrupted
>which could cause a Built In Self Test (BIST).

>When one finds a solution it could generate an interrupt to the 
>host/dispatcher.  Protocols would be required to switch to a backup chips
>and back annotate the key space the failed chip was operating on since
>the last diagnostic.

>Keep in mind that the key space is smaller than the symbol domain and 
>collisions will occur.  

>The cost should be on the order of 60 to 80 times cheaper than the quoted
>(and unverified)  $30M.  (After all the FAST DES chip doesn't exist yet)

I'm sure that someone will be able to build much faster implementations 
using specially designed chips. The proliferation of ASICs makes it 
much easier than before. But, programmability still has a way to go.
Projects like SPLASH may change people's minds about this. 

>I think there might be better single bit processor utilization organizations
>than presented in the the paper.  Initial and Inverse Initial Permutations
>could ignored by permutting the cipher/plaintext pairs exactly once. 
>Emulatiing a byte slice implementation such as the Fairchild 9414-[1-4]
>chip set might fit better as far as performance.  Performance optimization
>may swing the balance back to the coherent processors, and ya the soft
>nature of something programmable is nice, although anything you target
>it against is bound to have increased complexity, and hence run slower.
>In three years all the fast DES chips would be something of oddities,
>while the computer system would be simply outdated.

I would like to point out that the Content-Addressable Memory that
formed the backbone of my paper can also be used very easily for
graphics problems, computational geometry problems, data-base problems
and compression problems. I think it is conceivable that we will
see memory like it in workstations before the end of the century.




If anyone else has any questions or comments about the paper,
I would love to hear them. You can reach me via e-mail at
pcw@access.digex.com.

