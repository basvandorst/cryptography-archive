Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!emory!swrinde!elroy.jpl.nasa.gov!usc!rand.org!jim
From: jim@rand.org (Jim Gillogly)
Newsgroups: sci.crypt
Subject: Re: Cryptoanalysis of Compressed Text
Message-ID: <16946@rand.org>
Date: 30 Jun 93 19:09:24 GMT
References: <20sk9bINNkcv@twain.ucs.umass.edu>
Sender: news@rand.org
Organization: Banzai Institute
Lines: 54
Nntp-Posting-Host: mycroft.rand.org

In article <20sk9bINNkcv@twain.ucs.umass.edu> quilty@twain.ucs.umass.edu (Lulu of the lotus-eaters) writes:
>Can someone give me a short sketch of the cryptoanalytic techniques
>which could be used to break even simple encryptions of compressed
>files.  The reason it occurs to me to ask is simply because it is

Perhaps this will be important when compression methods get better, but as
things stand now there are significant frequency variations in compressed
files.

I recently posted a program to comp.security.misc that breaks a short key
(16 bytes) XOR system for encrypting JPEGs.  YMMV, but a frequency count
on a few sample JPEGs here found a number of useful consistencies,
including the fact that in each JPEG there were many more NUL bytes than
any other byte value.  I checked several composed largely of flesh tones,
and something astronomical; each of them had an exploitable excess of
NULs.  The program to crack the JPEG encryption is about the same length
as the program to encrypt it.

Compress is the same, but more so: null bytes appear to be <much> more
prevalent than the next highest frequency byte, and 0xFF seems to be
least frequent in general.  Take this cum grano salis -- small sample.

GIF pictures (also compressed) have similar consistencies, but seem to be
more significantly biased at the nibble level than at the byte level.

ARJ seems not to be so consistent: each compressed file seems to have a
preponderance of bytes either with a lot of ones or a lot of zeros, but
could be either... add a factor of two to analyzing one of these.  Two
ARJs encrypted with the same key would be automatic -- like using a
one-time-pad twice.

If there were no underlying exploitable roughness in the distributions
of bits and larger structures, there are lots of cases where you can
make progress.  One is as noted with ARJ: if the same password is used
to (simply) encrypt two files, you can probably break both.  Another
possibility is that you have more information about the file you're
trying to break.  For example, you know it's C code, and the programmer
in question always starts with a preamble like

	/* Copyright 1993 by the Regents of Miskatonic University.

Since this would be compressed the same way each time, you can use the
known (compressed) plaintext to attack the beginning of the ciphertext.
If your crib is farther in the file, your chances of this approach get
worse, but probably not zero.

For non-adaptive compression systems things are much simpler -- pick any
chunk of known or guessed plaintext and compress it: it will compress the
same way each time independent of its position in the message.  Drag this
crib one bit at a time through the ciphertext and look for the key to
repeat itself when you hit the right place.
-- 
	Jim Gillogly
	Sterday, 7 Afterlithe S.R. 1993, 19:09
