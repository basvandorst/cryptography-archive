Path: msuinfo!agate!howland.reston.ans.net!xlink.net!math.fu-berlin.de!unidus.rz.uni-duesseldorf.de!lannert.rz.uni-duesseldorf.de!TSOS
From: TSOS@uni-duesseldorf.de (Detlef Lannert)
Newsgroups: sci.crypt,alt.security.pgp
Subject: Suggestion to incorporate DH in PGP for more security
Date: Fri, 25 Jun 1993 08:22:57 GMT
Organization: Universitaetsrechenzentrum, Heinrich-Heine-Universitaet, Duesseldorf
Lines: 192
Message-ID: <TSOS.458.740996577@uni-duesseldorf.de>
NNTP-Posting-Host: lannert.rz.uni-duesseldorf.de
Keywords: PGP, Diffie-Hellman, public-key cryptography, key exchange
Xref: msuinfo sci.crypt:17543 alt.security.pgp:3375

-----BEGIN PGP SIGNED MESSAGE-----

The following suggestion has not yet -- at least as long as I've been
following these groups -- been beaten to death; my apologies, though, 
if it has been discussed before. I'd like to hear comments from the 
experts as well as from active PGP users; but no flames, please: This 
article is purely technical, not political, and it does not imply that 
PGP is generally insecure. 


 Problems Addressed
 ------------------

PGP is thought by many (or at least by its users) to be sufficiently 
secure, i.e., unbreakable under current technological and practical(!) 
conditions. One important risk, however, is the exposure of secret keys, 
either directly or through bad or leaked passphrases (see PGPDOC1 for a 
discussion of some possible reasons). Compromising a secret key means, 
among others, that 
 - all previous traffic directed to that user (and encrypted with the
   corresponding public key) can be decrypted if it has been recorded.
 - a spoof who has a copy of the secret key can decrypt all future
   messages which are sent to the rightful owner of the key.
 - the spoof can impersonate the key owner at will by signing messages
   with this secret key.

Frequently changing secret (and public) keys is impractical because of
the (intended) wide distribution of keys. Interfering with key
revocation or replacement would even be easier for a spoof the more
frequently it occurs (and the less attention these actions attract among
other users).

This suggestion is intended to improve the security of encrypted PGP
messages; it tries to minimise the effects of secret key disclosure and
to protect previously sent (and possibly recorded) as well as future
messages. It is only applicable, however, to bilateral communications
between two partners who exchange encrypted mail on a (more or less)
regular basis; it's of no help at all in any other cases.


 Basic Ideas
 -----------

Traditionally it's Alice who sends a message to Bob. If she uses PGP and
sends encrypted mail, a random number is generated, RSA-encrypted with
Bob's public key and sent along with the message, which itself is IDEA-
encrypted with this random number as a key.

Let's now assume that another (different!) random number x_A is drawn and,
according to the Diffie-Hellman (DH) algorithm, transformed by discrete
exponentiation (with a fixed, publicly known base g and modulus p) into a
number t_A=g^{x_A} mod p  which we'll refer to as a (DH) token. This,
together with an expiration date, is RSA-encrypted with Alice's secret and
Bob's public key and also sent along with Alice's message.

Bob recovers Alice's token t_A and stores it together with Alice's name
and the expiration date. When answering Alice's message he also generates
an additional random number x_B, computes the DH key k={t_A}^{x_B} mod p
and his token t_B=g^{x_B} mod p. He sends t_B (plus a new expiration date,
all RSA-encrypted with his secret and Alice's public key) along with his
reply, together with an MD5 hash of t_A (for identification, in case there
are more than one unexpired tokens around).

Now comes the crucial point: Bob does not actually use the key value that
goes (RSA-encrypted) with the message for doing the IDEA encryption but
first xors it with the DH key k. Since Alice can retrieve the same k by
computing {t_B}^{x_A} mod p, she can get the "real" IDEA key and thus the
plain text with no problem.

Alice saves t_B for later use when replying to Bob again, following the
same procedure. She will "forget" any x_A when the corresponding token t_A
has expired. As soon as both x_A and x_B that were used for one transmission
have been forgot, it is (near ;-) ) impossible to decrypt the message. An
eavesdropper must get hold of either x_A or x_B -- otherwise he/she cannot
decrypt even if all secret keys are disclosed.

Even then, having x_A and Alice's secret key, for instance, Eavesdropping
Eve must immediately -- before t_A expires -- enter into the traffic and
start impersonating Alice. Otherwise she has to obtain a new x_A again
later (or interrupt the communication until all tokens have expired and
then start impersonating on a pure, DH-less PGP basis).


 User Interface
 --------------

At the user interface level it should be possible to specify:
 - whether an initial DH token should be generated for messages to partners
   for whom there is no valid received token
 - the expiration period for new tokens to be sent
 - whether an error should be reported if a message is received which does
   not use a DH key modification although one would be expected (i.e., a
   token has been sent to the originator of the message and has not expired
   yet)

These options should be available on the command line as well as through
the config.txt file.

When decrypting a message, PGP should report if DH tokens were used (and
how old they were), like "message refers to token issued on <date>".


 Security Considerations
 -----------------------

(1) Can PGP be weakened by the suggested extension?
I do not expect the additional DH key exchange and xoring of DH and RSA-
coded random keys to weaken the whole system in any way; in the worst case
(i.e., the DH key generation scheme is broken) it just does not add to the
overall security. But there is no indication that this might happen.

Even if all random values are generated by the same (imperfect, of course)
algorithm the DH tokens should not be of much help to crack the actual
IDEA keys.

(2) Why should the DH tokens be encrypted with the RSA keys?
Encryption with the receiver's public key will make sure that the expiration
date is invisible to a third party so that they cannot safely determine
which tokens are valid.

At least the primary token should be encrypted with the originator's secret
key (i.e., signed) to make sure that nobody else can "tokenise" a connection
(in a sort of "denial of service" attack).

It might be reasonable to transmit the tokens within the IDEA-coded part of
a message; I'm not sure if this would really help or rather make things
more complicated (wrt implementation).


 Open Questions
 --------------

(1) Is there any risk in using the same DH token for more than one message
    (viz. the one it goes with plus one or more replies to this)?
    If yes, would it then be necessary to send a separate token that the
    receiver may use for his/her reply? (Disadvantages: bandwidth, random
    number consumption)

(2) What length of DH tokens (or size of the modulus p) would be needed to
    offer a security comparable to the PGP key sizes (particularly 1024
    bit)?

(3) Are there any non-obvious good or bad choices for the DH constants (base
    g, modulus p) and for the random numbers x_A, x_B?


 Disclaimers and ObLegality
 --------------------------

(If you are just interested in the technical aspects of this article, simply
ignore this paragraph. I've written this because some people prefer to flame
posters on non-technical side issues.)

(1) I do know that there is no absolute security and that the suggested
    improvement does not help much against a determined and well-funded
    adversary. I think, however, that it might provide additional security
    in real life situations and within the general scope and capabilities
    of PGP.

(2) I do know that DH key exchange is covered by a software patent in at
    least one particular and prominent country. But so is RSA, as we all
    know. I think, however, that the use of the DH algorithm in PGP does
    not affect PGP's legality, neither to the better nor to the worse.
    *Please* keep the discussions of legal aspects out of *this* thread.
    Thank you.


 Acknowledgments
 ---------------

My thanks go to all who have posted substantial articles about cryptography
on sci.crypt and alt.security[.pgp] (I've learnt a lot -- although not
enough, obviously ;-) ), and to you for having read so far.    B-)

 --
This article is in the public domain.

-----BEGIN PGP SIGNATURE-----
Version: 2.3

iQCVAgUBLCrOAzT52nfBH0L9AQHT4wP/YNtlLvcLa/H4KwF7H4A42kDNEWj+zr22
oquYl8dz015k7tRdVqCPk7ymE4wODOMT4Kk3JbRgAWQWEEdxsK3HN/pLULNwgdjt
uEAs2A8DV8SjVf/P5ACuERrjp7Tm8u8bZN0IqNGWOJ5rGNcZr13qhxFT5QuYS5cz
QN8gqiBHaU0=
=ILgU
-----END PGP SIGNATURE-----
--
Detlef Lannert      DC3EK      E-Mail: tsos@rz.uni-duesseldorf.de
PGP 2.x key available (finger lannert@clio.rz.uni-duesseldorf.de)
Die Mathematiker sind eine Art Franzosen:  Redet man zu ihnen, so
uebersetzen sie es in ihre Sprache, und dann ist es alsobald ganz
etwas anderes.                         Johann Wolfgang von Goethe
