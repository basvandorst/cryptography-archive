Newsgroups: sci.crypt
Path: msuinfo!caen!sdd.hp.com!cs.utexas.edu!wupost!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: One-time pads
Message-ID: <16BF41426.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
Date: Mon, 21 Jun 93 01:25:58 CDT
Lines: 59

   One-time pads give you the ultimate in key-distribution problems.  I've
been thinking about ways around this, and some of them fall under the banner
of randomized encryption techniques.  (There was an article about these, in
Crypto 92 procedings, I think.)  Some basic ideas:
 
   Let R be a truly random source, and r_i be one block of bits from the
random source.  Let M be your message, and m_i be one block of bits from the
message.  Let E(x,y) represent the encryption of x with key y.
Let || represent concatenation, and ^ represent XORing.  Some ideas for
strengthening an encryption algorithm:
 
   For each message block m_i, send two ciphertext blocks.
 
    c0_i = E(r_i,K0)  c1_i = E(r_i ^ m_i,K1)
 
 
   This is *not* a one-time pad, but there are some connections:  R is
assumed to be the kind of random bit source that could be used to build a
one-time pad securely.  For each ciphertext block, we're encrypting
what appears to be random blocks of bits.
 
   Let's assume that E() is a block cipher, with these traits:
 
1.  It has a fixed-size input block and output block, both N bits long.
2.  Every possible N-bit input block is allowed, and every one encrypts
    into a unique output block for a given key.
 
   In this case, an attacker, given only encryptions of truly random input
blocks, can never gain any information about the key.  (If she were also
given the random input blocks, she would gain information about the key, of
course.)  This is true because without knowing anything about the input
blocks, there is no way for her to choose one key as more likely to have
been used than another.  For a given output block, *any* key is possible,
since *any* input block is possible.
 
   Now, with the scheme described above, we don't have quite the same case.
Our attacker knows E(r_i,K0) and E(r_i ^ m_i,K1), which may give her some
information about K0 and K1 somehow.  Still, it seems much stronger than
a straight use of the block encryption algorithm.  To strengthen this
further, you could use
 
   c0_-1 = E(r_0,K0)
   c0_i  = E(r_i ^ r_i-1,K0)  c1_i = E(m_i ^ r_i,K1)  0<=i<N.
 
   Both of these are equivalent to what you'd get if you encrypted your
pad, and sent it over an insecure line, then used it to generate a one-time
pad encrypted message, which you then re-encrypted with your block cipher
and sent along the same insecure line.  (In the second system, you'd send
a "smeared" version of your pad, r_0^R1, r_1^R2, etc.)
 
   Comments?  Additional ideas?
 
   Can anyone see a way of using a completely public source of random
bits (Say, the RAND corp's published random digits) to strengthen your
encryption?  I seem to remember seeing an article about this, which I
haven't read, in one of the Crypto xx or Eurocrypt xx collections.  If
I find it, I'll give everyone a reference....
 
   --John Kelsey, c445585@mizzou1.missouri.edu
