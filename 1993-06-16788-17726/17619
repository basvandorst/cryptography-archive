Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!uunet!pipex!uknet!pavo.csi.cam.ac.uk!mrr
From: mrr@cl.cam.ac.uk (Michael Roe)
Subject: Re: $30M for 1 day DES solution (was NSA computing power)
Message-ID: <1993Jun28.150204.13443@infodev.cam.ac.uk>
Sender: news@infodev.cam.ac.uk (USENET news)
Nntp-Posting-Host: smew.cl.cam.ac.uk
Organization: U of Cambridge Computer Lab, UK
References: <1993Jun24.215222.16514@wdl.loral.com> <WCS.93Jun27004950@rainier.ATT.COM> <TOM.93Jun28080609@amber.ssd.csd.harris.com>
Distribution: usa
Date: Mon, 28 Jun 1993 15:02:04 GMT
Lines: 50

Tom Horselg writes:

> I suppose there are some forms of data you might be expecting, and you might
> be able to recognize instantaneously, but I am not so sure that is generally
> true, so how do these gazillion key per second chips help recognize the
> right plaintext once they crack the cipher?

Good question! In general, it is possible to obtain some known plaintext for most
cryptographic systems, but what the plaintext is and where it is are highly
dependent on the application.

It is clearly undesirable to spend $30M (or however much it is) on a different
DES-cracker for each application you want to crack. (Say one for PEM, one for
ATMs, one for secure X.400 etc. etc.) So, you need a programmable pattern matcher
that is both very flexible (so you can program it for lots of different
applications) and very simple (so it can fit on a chip you're going to
manufacture in huge quantities).

One possibility is to have two 64-bit matching registers, say M1 and M2.
To start the machine, you give it a cipher-text and M1 and M2 values, which
are simultaneously loaded into all the DES-cracking chips. Each chip runs through
keys until it finds a k such that (D_k(C) AND M1) XOR M2 = 0. This is a quick
test to do. Unfortunately, it will usually give a large number of ``false
positives'', keys which decrypt one block of the message to something sensible,
but give garbage when applied to the rest of the message.

So you make your DES-cracker a pyramid of filters. The chips at the bottom of
the pyramid try every possible key on the first piece of known plaintext.
The chips at the next level try every key passed by the first level on the
second piece of known plaintext, and so on until you've got only one possible
key.

As an example, suppose Alice and Bob are cmmunicating using PEM in
symmetric key management mode (anyone with any sense would use the public key
option, but this is an example, OK?). The attacker, Carol, collects the
encrypted session keys from about 8 messages between Alice and Bob (by just
monitoring the net).

Let K be the IK shared between Alice and Bob, and k_i the session keys used for
the messages. Carol knows E_K(k_i) for i=0..7.  Carol also knows that the
parity bits in each byte of each k_i are zero, because that's the way Alice's
PEM user agent works. Carol sets M1 = 0x8080808080808080 and M2 = 0x0 and loads
one E_K(k_i) into each stratum of her DES cracking machine....



Michael Roe
Cambridge University Computer Laboratory
Computer Security Group

