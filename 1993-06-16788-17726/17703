Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!uunet!pipex!uknet!edcastle!dcs.ed.ac.uk!pdc
From: pdc@dcs.ed.ac.uk (Paul Crowley)
Newsgroups: sci.crypt
Subject: Product cyphers, cypher block chaining and pipelining
Message-ID: <C9G47A.3LI@dcs.ed.ac.uk>
Date: 30 Jun 93 17:49:57 GMT
Sender: cnews@dcs.ed.ac.uk (UseNet News Admin)
Reply-To: pdc@dcs.ed.ac.uk (Paul Crowley)
Organization: Edinburgh University
Lines: 52

The best book on cryptology I could find in the University library was
Denning's "Cryptography and Data Security", and it barely seems to
scratch the surface, with very little discussion of cryptanalysis and
more material on data security in general than cryptology specifically.
If there is a single book that gives a survey both of modern symmetric
block cyphers and cryptanalytic techniqes for them rather than all this
Playfair cypher distraction I'd be most grateful for a pointer to it.

In any case, the Denning book gave me a lot to think about, and there
are several questions I'd like to ask.  Like, why is DES so complex? 
Several parts of DES complicate the cypher but it isn't obvious to me
that they add to the security.  For example, why have an initial
permutation?  Why widen the input to the confusion function from 32
bits to 48 using bit-selection table E before XORing with the key?  Why
permute with P afterwards?  Why is the key scheduling so complex?  Are
all of these things known to add to the security?

What I really want to know relates to cypher block chaining.  This
seems to me little short of essential since otherwise your cyphertext
gives away facts like whether two blocks are identical.  However, it
seems to throw away any possibility of pipelining your DES machine in
hardware, a pity since it would otherwise be ripe for pipelining.  My
question is, why isn't cypher block chaining carried out after every
round of encryption?  Not only would this ease pipelining;it would add
vast amounts of state to any product cypher (16*64=1024 bits in the
case of DES) which should complicate analysis more than somewhat,
without significantly increasing encryption time.  Does the
intermediate state information passed on from block to block somehow
fall out at the other end, making cryptanalysis easier?

Are there any wide-state cyphers, ie cyphers which, in encrypting a
stream of blocks, carry a great deal of state from one block to the
next?

Also, why do block cyphers work on such small blocks?  It's no extra
computational cost to work on kilobyte-sized blocks, and I would have
expected it to make analysis considerably more difficult.  Does it give
too much scope to a chosen-plaintext attack?

I suspect it would be possible to combine these two ideas to build a
cypher chip that encrypted or decrypted a kilobyte every twenty
nanoseconds or so.  I don't know of any hardware cypher that goes as
fast.  Of course, a good cypher will be designed to admit fast software
implementations too, unlike DES which seems to be designed to prevent
them.

I've been playing with a simple cypher I'm calling CROW-A that uses some
of these ideas; if anyone's interested I can send them, or post, source.
Of course, it isn't anything that anyone should trust.
  __                                  _____
\/ o\ Paul Crowley   pdc@dcs.ed.ac.uk \\ //
/\__/ Trust me. I know what I'm doing. \X/  Fold a fish for Jesus!
