Path: msuinfo!uwm.edu!ux1.cso.uiuc.edu!howland.reston.ans.net!darwin.sura.net!news-feed-1.peachnet.edu!concert!duke!srt
From: srt@duke.cs.duke.edu (Stephen R. Tate)
Newsgroups: sci.crypt
Subject: Re: Security of RSA
Message-ID: <739725143@pike.cs.duke.edu>
Date: 10 Jun 93 15:12:24 GMT
References: <82999@cup.portal.com> <strnlghtC8C736.A6@netcom.com> <EACHUS.93Jun9114201@spectre.mitre.org>
Organization: Duke University Computer Science Dept.; Durham, N.C.
Lines: 60



While I'm usually one talking about the complexity theory implications
in cryptography, and how this can be useful (and some others have consistently
argued against this position), it is important to really understand what
you are saying when you talk about complexity results.  Let me point out
some of the larger misconceptions of the following posting.

In article <EACHUS.93Jun9114201@spectre.mitre.org> eachus@spectre.mitre.org (Rob
ert I. Eachus) writes:
>
>    There is a large set of problems where finding an answer is hard,
>but proving that an answer is correct is easy.  This class of problems
>is known as NP (non-polynomial).

Here's the first clue that the poster really doesn't know anything
about complexity theory.  NP does not stand for "non-polynomial", and
the very thought that someone has this misconception makes me shiver.
NP stands for "nondeterministic polynomial time".  If it were "non-polynomial"
you would know that P != NP.

>Problems in this
>set are called NP-complete.  Note that, if any NP-complete problem is
>in P, P = NP, and all cryptosystems can be easily cracked by anyone
>who has the algorithm.

"P=NP" would certainly not be the end of cryptography.  The time hierarchy
says that for all c there are problems solvable in time n^c, but not any 
faster (loosely speaking).  So in other words, even if P=NP, there might
be functions computable in linear time whose inverse takes n^100 time.
That would be as secure as anything based on P vs. NP that you could
come up with.

>    About 20 years ago there were many problems thought to be in NP
>but not NP-complete.  The only problem that has "stood the test of
>time" on this list and not shown either to be in P or NP-complete is
>factoring.

Actually, there are quite a few problems that have "stood the test of
time", and that are not known to be NP-complete or in P.  Graph isomorphism
comes to mind immediately, as well as any language in the low
hierarchy.

>    Therefore most experts in the field of complexity suspect that, if
>factoring falls, P=NP, and all mathematical cryptosystems fall.

I don't know of anyone who "suspects this".

I don't want to flame someone who posts honest mistakes, but the tone
of your posting made you sound like you were giving expert advice.  You
clearly aren't an expert (it's questionable whether you've even had a
good undergraduate course in complexity), and should not post misleading
information such as this.


-- 
Steve Tate srt@cs.duke.edu | The reason why mathematics enjoys special esteem,
Dept. of Computer Science  | above all other sciences, is that its laws are
Duke University     | absolutely certain and indisputable, while those of all
Durham, NC  27706   | other sciences are to some extent debatable. (Einstein)
