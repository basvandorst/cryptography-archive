Newsgroups: sci.crypt
Path: msuinfo!agate!linus!linus.mitre.org!linus!mbunix!eachus
From: eachus@spectre.mitre.org (Robert I. Eachus)
Subject: Security of RSA
In-Reply-To: strnlght@netcom.com's message of Wed, 9 Jun 1993 04:28:16 GMT
Message-ID: <EACHUS.93Jun9114201@spectre.mitre.org>
Sender: news@linus.mitre.org (News Service)
Nntp-Posting-Host: spectre.mitre.org
Organization: The Mitre Corp., Bedford, MA.
References: <82999@cup.portal.com> <strnlghtC8C736.A6@netcom.com>
Date: Wed, 9 Jun 1993 16:42:01 GMT
Lines: 74


    A one page summary of highly theoretical results in the field of
complexity theory:

    There is a large set of problems where finding an answer is hard,
but proving that an answer is correct is easy.  This class of problems
is known as NP (non-polynomial).  A known plaintext attack on a known
cryptosystem to recover the key is almost always in this category, as
are most other crypto attacks.  The exceptions are non-cypher systems
such as one-time pads, quantum cryptography, and things like book
ciphers.  All other cryptosystems discussed here are in NP.  It is the
nature of cryptosystems.

    There is another set of problems, known as P, which includes all
problems which can be solved in time bounded by a polynomial function
of the length of the problem statement.  Any crypto system whose
solution is in P is not secure, since the time to decrypt a message is
a small multiple of the time to decode it with the key.  (The
multiplier could be 1,000,000 and the time to decrypt with a computer
still less than a second...)

    There is a large set of NP problems such that an algorithm for
solving one of these problems can be used to solve any of these
problems subject to at most a polynomial multiplier.  Problems in this
set are called NP-complete.  Note that, if any NP-complete problem is
in P, P = NP, and all cryptosystems can be easily cracked by anyone
who has the algorithm.

    If P is not equal to NP, then there must be problems in NP and not
in P that are not NP-complete.  (Proof not given here, get a good
textbook on the subject.)  Of course, if P=NP, then there are no
problems in NP that are not in P.

    About 20 years ago there were many problems thought to be in NP
but not NP-complete.  The only problem that has "stood the test of
time" on this list and not shown either to be in P or NP-complete is
factoring.

    Therefore most experts in the field of complexity suspect that, if
factoring falls, P=NP, and all mathematical cryptosystems fall.

    There have been cryptosystems based on NP-complete problems.  Most
of these have failed due to key selection problems.  (In some, it is
computationally infeasible to select a "good" key.)

    RSA is based on factoring, which is not known to be NP-complete,
but as indicated above, factoring is probably as secure as anything in
NP.  Note that when RSA was originally proposed, proof of primality
was not known to be in P, but there were good probablistic algorithms
known.  Advances in this area have made selecting good RSA keys
easier.

    In summary, RSA is probably the most secure mathematical
cryptosystem currently known.  I might be convinced that NSA had
proved P=NP, and could read all mathmatical systems.  But I cannot be
convinced that there is any mathmatical system more secure than RSA.
This certainly includes DES and Cripple. (Again, note the exceptions
above.  The security of one-time pads and quantum cryptography do
not depend on complexity theory...)

    One last note. Some people are trying to develop true quantum
computers.  If it can be done, then it is possible to build a machine
where P = NP = 1.  But I suspect that in that case we change from
talking about P-space and P-time, to P-space*time, and that the size
of a quantum machine which can solve NP-complete problem in P-time may
grow exponentially with the problem size.

--

					Robert I. Eachus

with Standard_Disclaimer;
use  Standard_Disclaimer;
function Message (Text: in Clever_Ideas) return Better_Ideas is...
