Path: msuinfo!agate!howland.reston.ans.net!math.ohio-state.edu!cs.utexas.edu!swrinde!elroy.jpl.nasa.gov!decwrl!waikato.ac.nz!comp.vuw.ac.nz!canterbury.ac.nz!news!piglet!cosc304
Newsgroups: sci.crypt
Subject: secure two way communication
Message-ID: <C8qr86.5tz@news.otago.ac.nz>
From: cosc304@piglet (Grant Anderson)
Date: Thu, 17 Jun 1993 01:09:42 GMT
Sender: usenet@news.otago.ac.nz (News stuff)
Organization: Graphics Lab, University of Otago
Nntp-Posting-Host: piglet.otago.ac.nz
X-Newsreader: TIN [version 1.1 PL8]
Lines: 124

Hi,

I outline below a possible method for achieving very high levels of
security
between two parties, A and B, over insecure channels.

The system to be used is one cuurently being worked on by myself and
others,
and is a hybrid combination of the RSA public key, and one-time pad
cryptosystems.

The secret communication between A and B would function as follows:

1. A would retrieve B's RSA public key from a globally readable file 
(for example existing on a network file server).

2. A's computer would then randomly generate the required seeding
information
for the one-time pad (otp) part of the cryptosystem. The message or file
that A is sending would then be encrypted using a otp seeded with these
random keys using a forwards/backwards ciphering method as outlined by
Ron Rivest in Cryptologia, Vol. 4, No.1 Jan 1980. The message/file would
contain a header, which would be the seeds for the otp encrypted with
B's public key.

3. The file/message could then be sent over insecure channels as the
start
of it would be encrypted with RSA, and the message/file body would be 
encrypted using a otp.

4. At the other end, B would use his/her RSA private key to decrypt the
message/file header and retrieve the otp seeds to be able to decrypt the
rest of the message.

Notes:
- Messages/files could be signed using either an MD5 type message-digest
system, DSS, or even RSA encryption using A's private key (*if* the
system
was implemented in hardware!).
- All users private RSA keys are stored only locally on their own
machines
and are encrypted using the otp and a secret master key which hashes to
the required seeding information for the psuedo-random number function 
used for the otp running key.
- The random number generator used would probably be something along the

lines of the BBS method. Although a facility would be present in the
system to allow use of your own running key information (generated from
a 
purely random source).
- The system could be generalised to a hardware based one, where once
a user connects with, say a network server, they establish a secure link
(using the above general method), and then all following communication 
between the two systems is otp encrypted.
- The RSA key sizes would be user selectable from about 1024-8192 bits
in size.
- The otp uses three consecutive running keys for each cipher in the
form:
  "One sequence is generated left-to-right (forwards) in the normal
manner
   while the other is generated right-to-left (backwards); so that the
first
   message symbol is encrypted using the first generated element of the
   forwards sequence and the last generated element of the backwards
   sequence. Each element of the ciphertext is the sum (modulo alphabet
size)
   of a message element and the corresponding elements of the two psuedo
  random number sequences".
  The third sequence determines a jump value (or next state) value for
  the following element in sequence in both forwards and backwards 
  sequences, in such a way that neither sequence ever starts from the
  respective seed and runs through the key from this point sequentially.
 Instead, they jump random places through the sequence.

Questions: (Are the following assumptions generally correct?)

1. That as long as the random number generator used...
  a) Has an extremely long period
  b) Never reuses the same key segment on more than one message
  c) Is cryptographically secure (which BBS supposedly is...)
   Then the otp part of the system is secure?

2. That because the system is 'doubly-encrypted', and incorporates
   a next state function (or value), even if the random number generator
  algorithm is known, which it is, and some of the characters of
plaintext
   are known, a cryptanalyst can still not determine the unknown
characters?
   This is based on the reasoning that if I give you the cyphertext:

   HIS8K3M2NAREQ0-SP

   and tell you that some of the plaintext is:

   T....I...Y..E.R..

   You still couldn't determine that this (rather trivial) message was
   supposed to be "THIS IS MY SECRET", since the characters you do know
   (which I gave you) bear no relation to any others.

The system should provide high levels of security because the weakest
point in the system (apart from users using 'stupid' keys, or telling
others
their secret keys...) is the RSA component. And RSA doesn't really
appear
to be that weak!

The system will probably be implemented in hardware so that it doesn't
slow
down the generally response times of the computer, which would make the
system to annoying for most people to use.

Any comments on the validity of this idea would be welcomed.

Regards,
Grant Anderson,
Computer Science Dept.
Graphics Lab.
University Of Otago.





