Newsgroups: alt.privacy.clipper,sci.crypt
Path: msuinfo!agate!spool.mu.edu!olivea!sgigate!sgi!wdl1!nebula!koontzd
From: koontzd@nebula.lrcs.loral.com (David Koontz )
Subject: $30M for 1 day DES solution (was NSA computing power)
Message-ID: <1993Jun24.215222.16514@wdl.loral.com>
Originator: koontzd@nebula
Sender: news@wdl.loral.com
Organization: Loral Rolm Computer Systems
Distribution: usa
Date: Thu, 24 Jun 1993 21:52:22 GMT
Lines: 161
Xref: msuinfo alt.privacy.clipper:962 sci.crypt:17532

>From: wcs@anchor.ho.att.com (Bill Stewart +1-908-949-0705)
>In article <C8wLqC.Doz@eis.calstate.edu> belliot@eis.calstate.edu (Brett Elliott
>) writes:
>   I would like to know just how much computing power the NSA has.  Sorry
>   if this info. has already been posted.  With enough MIPS, rsa could
>   be chopped and diced.

>Well, it's probably between 10**12 and 10**15 IPS, where I'm being
>deliberately vague about what an "instruction" is; some are floating
>point instructions on big-memory machines, others are 1-bit
>instructions in small-local-memory SIMD arrays, and lots of stuff in between.
>10**15 is about 2**50, and is likely to be a very high estimate.
>
>There are a couple of designs using current technology that would let
>you build a DES-breaker to find DES keys in about a day for about $30M,
>which comes to about $10K/key assuming some plausible amortization.

Mark Riordan (mmr@sccs3.cl.msu.edu) has a postscript image of a paper found by
anonymous ftp - ripem.msu.edu:/pub/crypt/docs/des-break.ps.Z.  This
appears to be where the $30M figure comes from.

The title is 

    Using Content-Addressable Search Engines to Encrypt and Break DES
    -----------------------------------------------------------------

			Peter C. Wayner
		    Computer Science Department
		       Cornell University
			Ithaca NY 14853


Its a particular implementation using single bit processors clumped on a
chip.  The postscript file had no dates (something common in technical
papers).  The newest date anywhere in the document was found in a 
header in the postscript file (1991).

Errors:

2.2 Computing the S-boxes
-------------------------

On page 4 S boxes are "...described as eight functions that take 6 out of the 
32 bits <of the R block> and return four."  

Actually what happens is that the R block is expanded to 48 bits through the 
use of the Expansion (E) permutation and XORed with 48 key bits selected from
the 56 bit key.  The resulting 48 bits are taken 6 bits at a time and applied
as input to the eight S box functions which return 4 bits each.

"These eight s-boxes can be further simplified into 32 functions that map
six bits to one bit..."  (to clarify the following)

2.3 Handling the Key
--------------------

Page 5:

"When the result of one of the 32 functions is computed it must be XOR-ed
with the key and then passed to the adjacent word to be XOR-ed with the
appropriate bit."

For encryption a round of DES is computed as:

	Rn = Ln-1 XOR (P(SBOXES(E(Rn-1) XOR Kn)));
	Ln = Rn-1;

Where the Expansion permutation is operated on Rn-1:  E(Rn-1).  The 
expansion permutation outputs 48 bits.

The result is XOR-ed with the selected Key for round n:  E(Rn-1) XOR Kn.
(48 bits of scheduled Key)

The result is used as input to the S-boxes: SBOXES(E(Rn-1) XOR Kn).
8 S-boxes with 6 bits of input, 4 bits of output from each S-box.

The result is put permuted by P: P(SBOXES(E(Rn-1) XOR Kn))
32 bits in 32 bits out.

The above four steps are collectively known as f(R,K).  The result
is XOR-ed with Ln-1.


On page 6 where the statement is made:

"There are 56 key bits, but only 32 of them are used during each
of the 16 different rounds."   

In fact, 48 of the 56 key bits are used in each round.  

2.4 The Total Cost
------------------

The above errors are bound to affect the clock calculations and resulting
performance figures.  Possibly the key size would require the number
of processors to increase.  The number given for a 1024 processor chip
is 31.2 M bits per second for DES encryption.  This would almost
certainly be derated to fix the problems pointed out above.

Having only looked at the paper briefly I figured that a dedicated hardware
implementation of DES could be much faster and/or cheaper.

How fast can a HW implementation of DES go?
-------------------------------------------

Using superscalar techniques DES can be implemented in a 120K gate ASIC
with a throughput of 75M Blocks (600 Mbytes) per second.  It would be very
likely that you would want to add hooks and whistles for using in brute
force attacks possibly trading off bus bandwidth (and package pins) for
comparators and incrementing key registers.

600 Mbytes x 8 bits yields 4800 Mbits per second:

    75 MHz clock
    Scheduled keys 
	(a 56 bit bus with  two 48 bit tap offs and a 2:1 mux for every round)
    16 rounds worth of XORs and Sboxes (80 XOR gates X 16)
    16 sets of L and R pipeline registers
    done in submicron

To operate the FAST DES chip as a brute force key trial device might require
a key pipeline (56 bit register x 16).  Also meet in the middle modifications
would be desirable breaking the 16 rounds into two 8 round segments with
a comparator between them.

Even conservatively its around 160 times faster than the coherent processor
implementation (after fixing above problems).  I would estimate the cost
of such a chip to be in the $200 range in low volumes, compared to 
$100 for a 1024 processor coherent chip.

A proper breaker-DES chip could accept a broadcast cipher/plaintext pair,
and perhaps through the use of strapping pins, subdivide the key space
for search by specifying the starting point for a key counter.   Likewise
this subdivision could be carried into the DES chip architecture to reduce
key space variable size.

The main requirement for outside control, until a match is found is to
insure the chip is operating.  Periodically the chips could be interrupted
which could cause a Built In Self Test (BIST).

When one finds a solution it could generate an interrupt to the 
host/dispatcher.  Protocols would be required to switch to a backup chips
and back annotate the key space the failed chip was operating on since
the last diagnostic.

Keep in mind that the key space is smaller than the symbol domain and 
collisions will occur.  

The cost should be on the order of 60 to 80 times cheaper than the quoted
(and unverified)  $30M.  (After all the FAST DES chip doesn't exist yet)

I think there might be better single bit processor utilization organizations
than presented in the the paper.  Initial and Inverse Initial Permutations
could ignored by permutting the cipher/plaintext pairs exactly once. 
Emulatiing a byte slice implementation such as the Fairchild 9414-[1-4]
chip set might fit better as far as performance.  Performance optimization
may swing the balance back to the coherent processors, and ya the soft
nature of something programmable is nice, although anything you target
it against is bound to have increased complexity, and hence run slower.
In three years all the fast DES chips would be something of oddities,
while the computer system would be simply outdated.
