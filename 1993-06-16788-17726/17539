Newsgroups: alt.privacy.clipper,sci.crypt,sci.skeptic
Path: msuinfo!uwm.edu!wupost!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: Re: Randomness (was Re: What is a good one time pad?)
Message-ID: <16BF7130B5.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
References: <C8z23B.4yK@mentor.cc.purdue.edu> <206omg$bv1@uniwa.uwa.edu.au> <SGAURE.93Jun22140213@sylow.uio.no> <208dmf$2c7@usenet.INS.CWRU.Edu>
Date: Thu, 24 Jun 93 21:40:01 CDT
Lines: 44
Xref: msuinfo alt.privacy.clipper:966 sci.crypt:17539 sci.skeptic:47143

In article <208dmf$2c7@usenet.INS.CWRU.Edu>
wb8foz@skybridge.SCL.CWRU.Edu (David Lesher) writes:
 
>If you have a long, NON-perfectly random number, and you are using it
>as a OTP, is that really vulnerable to attack? My point is, to me, it
>looks like there is a BIG middle ground between:
>
>perfectly               inbetween                     perfectly
>predictable                                             random
>ABCDABCDABCD ;}            ?                           ashjKaSG
>
>Given that you only use a given digit once, what are the risks
>of a given inbetween key?
 
   Well, almost all stream ciphers can be seen as an application of
something like this--using a not-quite-random stream of bits to XOR
against a (presumably known, or even chosen by an attacker) stream of
plaintext bits.  Often, the ciphertext is also fed back into the
function that generates the stream of not-quite-random bits, so that
multiple messages encrypted with the same key can't be trivially broken
with a single known-plaintext.  (Since you know the plaintext bits, you
know the bits XORed against them....)
 
   The problem is, any predictability in the not-quite-random bits XORed
against the plaintext bits leaves some possibility that an attacker will
get some information about either the message, or the key.  If you've
generated the bits from some deterministic algorithm, I may find a way of
deducing the key (seed, starting internal state) of your algorithm from
some small number of bits.  Even if you've simply used a low-quality
random source (maybe one for which, given the last output byte, I have a
high probability of guessing the next one) as a one-time pad, the
regularities may be of some practical uses to me.  For example, suppose I
know that you're sending a memo to your friend using this low-quality pad,
which says "DON'T SELL FOR UNDER ______.__ DOLLARS."  If your low-quality
pad gives me a good guess at the (unknown to me) amount, given that I know
the whole message except for that amount, then I may use it to your loss
and my gain.  Anyway, a one-time pad is inconvenient to use for general
purpose things.  A strong encryption algorithm seems likely to be more
flexible and generally useful, and I *strongly* suspect that almost any
algorithmically derived stream of not-quite-random bits you use as a one-
time pad will be less secure than, say, IDEA in CBC mode.
 
 
   --John Kelsey, c445585@mizzou1.missouri.edu (for about 4 more days.)
