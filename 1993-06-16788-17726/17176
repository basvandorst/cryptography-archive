Newsgroups: sci.crypt,alt.privacy.clipper
Path: msuinfo!uwm.edu!math.ohio-state.edu!usc!elroy.jpl.nasa.gov!ames!sgi!wdl1!nebula!koontzd
From: koontzd@nebula.lrcs.loral.com (David Koontz )
Subject: Clipper: What happens when LEF is corrupted?
Message-ID: <1993Jun15.013617.8808@wdl.loral.com>
Originator: koontzd@nebula
Sender: news@wdl.loral.com
Organization: Loral Rolm Computer Systems
Date: Tue, 15 Jun 1993 01:36:17 GMT
Lines: 152
Xref: msuinfo sci.crypt:17176 alt.privacy.clipper:808


>From: butzerd@maumee.eng.ohio-state.edu (Dane C. Butzer)

>Didn't Someone (Someone being a member of "Them", the source of most
>information of the form "I heard that" :) mention earlier that when the LEF
>field is corrupted, Clipper just turns the key into 0's without informing
>the users?  If this is true, wouldn't the following be a trivial way to
>eavesdrop on any Clipper communication?

>1) tap the communications channel (phone line, radio frequency, whatever)
>
>2) when the Clipper chips exchange the LEF fields, corrupt the channel.
>For example, throw white noise into the channel.  Alternately, pin the
>channel to either 0 or 1 for the duration of the LEF.  [To any
>phone/digital communications experts: would forcing the line to some
>voltage would work here?  How about oscillation the voltage between two
>values at the right speed so that the modems or whatever would stay
>synchronized and "happy"?]  Or even better, just corrupt a few bits.  I
>know there would probably be technical hurdles to overcome, but nothing
>that any competent technical person couldn't figure out with a little time
>and $$$, right?
>
>3) now both Clipper chips are using keys of 0000..., while their user's
>think they have a secure channel!

There are two ready references, the 'MYK-78 Encryption/Decryption Device'
specification from Mykotronx Inc. 357 Van Ness Way, Suite 200, Torrance
CA 90501, (310) 533-8100, FAX (310) 533-0527 and a piece of email posted
by Arthur Abraham <a2@well.sf.ca.us> to cyhperpunks on  27 Apr 1993.
(it can be found as a2.myk-78.description in the cypherpunks archive).

Urban Legend or Stranger than Fiction?
--------------------------------------

The chip spec from Mykotronx shows no mention of this hidden feature.
I am retrieving the original reference with the claim.  If I remember
correctly this from a supposed conversation with an engineer at 
Mkyotronx.  It would be very easy to believe this is an attempt at
disinformation.  There is nothing evident requiring end-around-crypto-sync
between the two ends of a full duplex conversation. Under those constraints
you would think whosoever had a mangled LEF would get garbled output or
no output (Correctness of the LEF being required to enable data
throughput).  It would be more convienient from a systems standpoint
to know that crypto sync wasn't achieved.

The MYK-78 is a half duplex device (single key generator) utilizing a
common bus (no red/black separation).

FUN with Clipper
----------------

There are two issues in using the MYK-78.

1)  Key management

These steps are absolutely serial:
During chip initialization is executes a BIST.
It then requests a random seed.
It waits for a configuration. (ECB,CBC,OFB,CFB8/16/32/64)
It waits for an initial Key.

When loading the initial key, an accompanying 3 byte (24 bit)
crypto check word is input.  The MYK-78 initial keyload protocol
is relaxed, and allows the check word to be read out.  This
allows keys to be generated locally.  The key must be reloaded
along with the check word.  A stored key and check word should
be used to determine health of the device. 
	
The chip can be operated in ECB mode at this point, apparently
without restriction.
	
To use the feedback/chain modes requires an initial vector.
There are two sets of commands that affect the state of the
data registers for the encryption algorithm:  save/restore
status and generate/load IV.  It is unclear whether an IV
load is absolutely required to use a feedback mode.  The
save/restore status commands specify 8 bytes (the only operation
specifying byte counts in the chip specification).   These are
normally used for swapping between send and receive cipher
streams when the chip is used for full duplex communications.
The fact that these two commands are present allows the
chip to be operated without sending the actual session key/LEEF.
	
2)  Initial Vector

The Initial Vector is comprised of {LEEF1,LEEF2,IV}.  Where LEEF is 
the Law Enforcement Enabling Field.  LEEF1 and LEEF2 contain
the unit key encrypted session key, a 32 bit serial number
and a check word.  (10 bytes, 4 bytes and 2 bytes).  Order
undisclosed.  It is unclear if the entire IV is super/encrypted
with the family key, altough it is likely (OFB IVs help in
revealed plaintext attacks).  The check word and serial number
are supposedly recoverable with only the family key.  This aids
in traffic flow analysis and specifies whose escrowed key to
target.
	
The actual IV is 64 bits.  The Initial Vector is generated
by the chip through the Generate IV command.  The chip uses
the random seed as a algorithm preload and apparently through the use
of statistical tests produces the psuedorandom 64 bit IV part
of the intial vector.   It is probable the check word tests
for the integrity of the entire Initial Vector block, disallowing
the use of the random IV generation without also accepting
the LEEF features.  It is very probable that the 64 bit IV 
does not fall on block boundaries (is followed by the checkword)
preventing you from using a family key encrypted IV as the
IV for decryption after discarding the remainder of the Initial
Vector block.

Defeating the LEEF 'features'

Using a common (net) key between the two ends of a full duplex
link has some interesting advantages.  It is problematical that
use of an Initial Vector is required to enable data throughput
in feedback modes.  Under this constraint anytime the crypto
vector (CV or key and check word) is changed the Initial Vector
({LEEF1,LEEF2,IV}) is required.  The estore status command
could be used to load a 64 bit IV.  The problem then becomes
one of getting IVs, transferring them securely and communicating
without transmitting the LEEF.
	
The chips probably absolutely require a LEEF after a key change,
requiring the generate/load IV commands.  The neat thing is that
the local terminal could use its own. Each chip goes through
complete intitialization generating an Initial Vector and loading
the resulting Initial Vector into the local chip.

The save status command is used to save the 64 bit (8 byte) IV.
The 64 bit IV can be encrypted by reloading an IV previously
aggreed between A and B, and inputting the session IV as data.
The encrypted IV is transmitted to the distant end.  The DE uses
the agreed upon IV (restore status command) to recover the 
session IV by decryption.  The session IV is reloaded for both A 
and B.
	
A and B have now achieved crypto sync.

Gee, I wonder if CAPSTONE is full duplex?   I would alleviate the
need for save/restore status commands. (insert unhappy face)

--
This is probably why there is a security requirement for vendors
incorporating the little buggers in their products.  This is probably to
prevent black market trading.  I can't think of a valid reason for
retaining the serial number after programming except to verify that
they have one.  The chips will either work or they won't.

I would love to have a couple of these devices to play with to verify all
this.  't'were it true they would be great little devices,  assuming the
skipjack encryption algorithm is indeed secure.  It would be much more
fun having the family key.

