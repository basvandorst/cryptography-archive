                    Sifr.Doc                            v3.3

  Sifr   Cipher & Authentication  software  (c) Cybanim 12 Aug 1994


  Usage:

    Sign & Cipher          Sifr -sc  Infile Receiver Sender
    Cipher:                Sifr -c   Infile Receiver Sender
    Sign                   Sifr -s   Infile Sender

    Decipher & Verify      Sifr     Infile


  Cipher Example:      Sifr -sc Gossip.Txt Alice Bob
                       -----------------------------

    With this command Bob Signs and Ciphers the file Gossip.TXT

    Bob sends the output Gossip.SIF to Alice

    Bob has his private Key file named BOB in his Path
              (see Key generation below)
    Bob has Alice's Public key file named ALICE in his Path

    Cipher function makes the output file Gossip.SIF
    which Bob sends to Alice over public eMail.


  Decipher Example:    Sifr Gossip
                       -----------

    With this command Alice Deciphers & Verifies the file Gossip.Sif
    she has received from Bob

    Alice has Bob's public Key called BOB in her path
    Alice has her Private key called ALICE in her path

    Sifr in decipher mode makes the file Gossip.SID which is identical
    to the original Gossip.Txt
    If Sign (-s) has been used, Sifr announces if the file
    signature is verified.


------------------------------------------------------------------------
Signing.
    Only Public Key Cryptography, such as LUC, used by Sifr, can offer
    A Digital Signature facility. With A Digital Signature the message
    contents are known to be unchanged, the senders identity is assured,
    and the sender cannot deny sending the message.
    (Verification, Authentication and Non-Repudiation)

    When signing, the Senders Private Key is used so the file containing
    the Sender's private key must exist in the current working
    directory, or in the Path. Path is an environment variable which is
    made by the command
    SET PATH=  followed by directory names. See DOS manual.
    SET PATH can be in the Autoexec.BAT or entered at the command line.


Verifying.
    When Verifying the Senders Public Key file is used so it must exist
    in the current working directory or PATH.

Encryption (also called Ciphering or Enciphering)
    When encrypting the Receivers Public Key is used so it must exist
    in the current working directory or PATH. The receivers Public key
    is used to LUCencrypt a DES key which is then used to DESencrypt the
    message. The advantage of Public Key Encryption, such as LUC, is
    that no secure channel or prior secret arrangement is needed to send
    encrypted messages. A user can freely publish their Public Key and
    then receive encrypted messages from anyone.

Decryption (also called Deciphering)
    When decrypting the Receivers Private Key is used so it must exist
    in the current working directory or PATH. The receivers Private key
    is used to LUCdecrypt the encrypted DES which is part of the
    received message. The DES key which is then used to DESdecrypt the
    received message.



------------------------------------------------------------------------
  File Suffix conventions:

   Cipher:     Input file may have any suffix
               Output file has the suffix          .SIF

   Decipher:   If no suffix is found,
               the Input file has .SIF added.
               Output file has the suffix          .SID

   Key files:  Private Key files have the suffix   .LUV
               Public  Key files have the suffix   .LUC
               Public key files expanded for eMail .LUX


   All Input files are looked for in the current directory,
   then in directories in the users PATH

   example:
     to Decipher   Message.SIF
     just enter:   Sifr Message

     to Decipher   Message.xyz
     enter         Sifr Message.xyz

     Note that Message.xyz must have been output from Sifr. ie it was
     called Message.SIF but it has since been renamed to Message.xyz
     Users may want to store files with their choice of suffix.




  Sender in Environment:

    Sender parameter may be omitted in Cipher function
    if SENDER=sendername is set as an Environment variable

    eg:             SET SENDER=Bob
                    Sifr -sc Gossip.txt Alice

    This will Cipher Gossip.Txt and Sign it using Bob.LUV


  Receiver of Signed message file

    If the message is signed only, then the receiver can be anyone.
    The receiver can be omitted:          Sifr -s Gossip Sender
    or a dummy receiver can be used:      Sifr -s Gossip Everyone Sender

------------------------------------------------------------------------

  PIN for private key:

    When reading a private key the program will ask for a PIN number.
    This must be the same PIN that was used when the key was generated.
    (CR = no PIN)
    PIN can be up 1 to 8 characters (Good Security)
        or 8 to 24 characters (triple DES, High Security).
    If PIN=nn..nnn is set as an Environment variable, where nn..nnn is
    the same as the PIN entered when the key was generated, the PIN is
    loaded directly from the environment. (Fair Security)
    If no PIN is used to cipher the .LUV private key, security depends
    on guarding the .LUV private key file. Anyone who can access an
    unPINNed private key file can mimic a signature.

    The current environment variables can be inspected by typing SET at
    the command line prompt.
    The PIN environment variable can be cleared by typing SET PIN= at
    the command line prompt.
    If no PIN was used in LUCKey key generation a null PIN can be set as
    an environment variable by typing
    SET PIN=0000 at the command line prompt.
    If Sifr Detects a PIN of 0000 it will not prompt the user to enter a
    PIN and it will not decipher the Private key as it is assumed to be
    stored un-encrypted.
    Obviously 0000 can not be used as valid PIN when using LUCKey.
    See the batch file demo.bat for an example.
    Because anyone can inspect the environment variables from the
    keyboard, the environment PIN should be cleared if the keyboard is
    unattended.

------------------------------------------------------------------------

  Secret DES Cipher Seed:

    Before Ciphering a file, the program will prompt for user input.

    The user must type a variety of different keys until the count of
    keys entered equals 8 ( for single DES) or 24 ( for triple DES)
    Any keys can be typed.

    Typing a Carriage Return (cr) will terminate the seed entry.

    If 0-7 seed characters are entered the system clock random function
    will complete the seed up to 8 characters.

    If 9-23 seed characters are entered the system clock random function
    will complete the seed up to 24 characters.

    A microsecond timer will get values for the DES key from the delay
    between keystrokes. (High security).
    If up to 8 bytes are entered,    single DES is used (High security).
    If 9-24 bytes are entered, triple DES is used (Ultra High security).
    note: Sifr triple-DES (tDES) acts as: encipher-decipher-encipher
    (e-d-e) with three keys fromed from 24 bytes. Other triple-DES may
    only use two keys from 16 bytes.

    If the parameter -t is included in the command line,
    no user key-strokes are requested, and the DES key is generated
    from the system clock (Fair security).

    eg Sifr -sct Gossip.Txt Bob Alice

------------------------------------------------------------------------

  Sending a Public Key by eMail:

    to EXpand a public key file before sending over eMail

              Sifr -x Sender
              --------------

    - reads Sender.LUC and writes Sender.LUX


    To CoNtract a public key file after it has been received over eMail

              Sifr -n Sender
              --------------

    - reads Sender.LUX and writes Sender.LUC

    See the comments on 3-to-4 expansion below, to explain why the
    public key should be expanded before eMail transmission.

------------------------------------------------------------------------

  Key Generation:

    Keys are generated by a separate program LUCKEY.EXE


    To generate a 512 bit key for BOB

            LUCKEY g BOB /k512

    this will produce a matching pair:
           Private key file BOB.LUV
           Public key  file BOB.LUC

    A PIN number will be requested to Cipher the private key.
          up to 8 bytes = single DES cipher
             9-24 bytes = triple DES cipher
                0 bytes = no cipher

    The public key file must be available to every recipient.

    Key lengths recommended   512 bits  (Ultra High Security)
                              1024 bits (Extreme Ultra High Security)

    LUC can use existing RSA keys. RSA public keys can be used unchanged
    once they are in a form that Sifr can read.  RSA private keys
    require a  one-time expansion.

------------------------------------------------------------------------
Echidna unlocking:

    Sifr version 3.3 operates with keys up to 512 bits only.
    If an attempt to use a key greater than 512 bits, Sifr will display
    a registration number. To operate with large keys (513 to 1024 bits)
    this registration number must be sent to Cybanim,
    by eMail to 100033.132@compuserve.com, or by phone,
    or by letter. (see address at end of this Doc).

    Cybanim will reply with an Unlocking token which the user must enter
    into the registration screen of Sifr.

    This allows Sifr to use keys of 513 to 1024 bits, but only on the
    particular PC that the registration was run on.

    Users will be allowed to register Sifr on two PCs.

    Sifr.EXE will be re-written with the token. Sifr will now operate
    with keys up to 1024 bits.  Multiple backup copies can be made,
    but Sifr will only operate with large keys on the
    machine used at registration. Sifr will still operate on other PCs
    with keys up to 512 bits.


------------------------------------------------------------------------
Principles of Operation - description of the Sifr internal process:
 
   Cipher & Sign function:
       make a DES key                                   DESw
       LUC Cipher DESw using the receivers Public
           key rLUCc   ->                              cDESw
       Expand cDESw using a 3-to-4 function.          ecDESw
       Write ecDESw in the output file.
       64 byte line + leading space.

       Read the input file
       form an MD5  message digest of the Input file.     MD5
       DES cipher the input file with DESw.
       Expand the ciphered file with 3-to-4.
       Write the expanded file, 64 byte lines.
       LUC sign the MD5 hash using the Sender's Private
       key sLUCv ->                                       MD5s
       Expand MD5s with 3-to-3                           eMD5s
       Write eMD5s to output

   Decipher & Verify:

       Read ecDESw from the input file
       contract ecDESw using 4-to-3 function ->          cDESw
       LUC Decipher cDESw using Receiver's private
       LUC key rLUCv     ->                               DESw
       Read the input file.
       contract the input file with 4-to-3.
       Make an MD5 digest of the infile MD5.
       DES decipher the input file using DESw.
       Write the deciphered file to Output
       Read eMD5s.
       Contract eMD5s with 4-to-3                        MD5s
       LUV Verify MD5s using senders public key sLUCc -> MD5v
       compare MD5v with MD5. If equal, the signature
       is Verified.


-----------------------------------------------------------------------
Key File Formats.
    All Large integers are stored with an initial length byte followed
    by 1 to 255 bytes of hex data, low order byte first. eg A 512 bit
    number is stored as hex 0x40 (length) followed by 64 bytes of data.

   The Private Key is stored as p,q,d1,d2,d3,d4,pi,qi,ns,cc
   See LUC documentation for definition of p,q,d1,d2,d3,d4
   p,q are large primes
   d1,d2,d3,d4 are four decipher keys
   pi and qi are inverses of p and q, precalculated for speed
   ns is a short portion of n=p*q  which is used to check the PIN
   decryption of p & q.
   cc is an optional comments field.
   Private Key files have the extension .LUV

   The Public Key is stored as e,n
   where e is the encryption key and n is the product of p and q


------------------------------------------------------------------------
  LUC Public Key Cryptography

       LUC is a new Public Key Cryptosystem, similar in function to RSA.
       LUC is acknowledged to be more secure than RSA,
       See Dr Dobbs Journal Jan 1993, March 1993 (letters) & April 1994

       For description of LUC,
       see LUC.TXT, available with Kuttak34.zip which contains
       Kuttaka.EXE, a free large integer calculator
------------------------------------------------------------------------
  Public Key Authentication:

       A message signed by the Sender's private key can
       only be verified with the Sender's public key.
       Once verified, the message is know to be unchanged
       and cannot be repudiated by the sender.
       Signing an MD5 digest is faster than signing
       the entire message, and the message cannot be altered
       without invalidating the digest.

------------------------------------------------------------------------

                    Format of Sifr .SIF file



1  -----BEGIN Sifr MESSAGE-----
2  Proc-Type: 3.1,ENCRYPTED,SIGNED,EXPANDED      {LUC version,Proc-Type}
3  Key-Info: LUC                              {rLUCc encrypted DESw key}
4   eeeeveeee1eeeeveeee2eeeeveeee3eeeeveeee4eeeeveeee5eeeeveeee6eeee
    veeee7eeeeveeee7eeeeveee
5  Originator-ID: Alice                                  {Sender's Name}
6  Recipient-ID: Bob                                   {Receiver's Name}
                                                       {message follows}
7  mmmmvmmmm1mmmmvmmmm2mmmmvmmmm3mmmmvmmmm4mmmmvmmmm5mmmmvmmmm6mmmm
   vmmmm7mmmmvmmmm8mmmmvmmmm9mmmmvmmmm0mmmmvmmmm1mmmmvmmmm2mmmmvmmm
   m3mmmmvmmmm4mmmmvmmmm5mmmmvmmmm6mmmmvmmmm7mmmmvmmmm8mmmmvmmmm9mm
   mmvmmmm0mmmmvmmmm1mmmmvmmmm2mmmmvmmm....

8  MIC-Info: MD5,LUC                  {MD5 hash, DESw & sLUCv encrypted}
9   ddddvdddd1ddddvdddd2ddddvdddd3ddddvdddd4ddddvdddd5ddddvdddd6dddd
    vdddd7ddddvdddd7ddddvddd
10  -----END Sifr MESSAGE-----

  If Signed but not Ciphered, Lines 3, 4.. are omitted
  If Ciphered but not Signed Lines 8, 9.. are omitted

  Line 4 and subsequent lines up to line 5 contain the DES key

  Line 7 and subsequent lines up to the blank line before line 8 contain
  the  DESenciphered message

  Line 9 and subsequent lines up to line 10 contain the DESenciphered
  Digital Signature generated using the Senders private key

  This format broadly follows the format in
  "Internet Privacy Enhanced Mail" by  Stephen Kent
  in Commun of t ACM Aug1993 v36 n8 p48


------------------------------------------------------------------------

  3-to-4 expansion, 4-to-3 contraction

    A Ciphered file may contain bytes of any value between 0..255.
    Some of these bytes may interfere with eMail or printers or screen
    displays. The Ciphered output is therefore converted to EDIFACT
    printable characters from the set (a..z A..Z 0..9 % &). Every three
    bytes from the ciphertext become four bytes in the SIF file.
    This increases the length of the message by a ratio of 4:3 but
    ensures that there will be no problems in the eMail transmission.

      For eMail systems which allow binary file transmission, the 3-to-4
    expansion is unnecessary. With the -b option, Sifr produces
    non-expanded (binary) output. This is a smaller file, and will
    transmit faster.

      eg            Sifr -scb Gossip.Txt Bob Alice

    Note: With -b option the output Gossip.SIF must be sent as binary.


    Note: do not attempt to modify the SIF file with an editor,
    since many editors will change the LF newline characters to CRLF,
    [ LF = lineFeed = 0x0A    CR = Carriage return = 0x0D ]
    and the SIF file will then be rejected by Sifr. Modification of the
    SIF file is precisely what Sifr is designed to detect! If the SIF
    file arrives through eMail with some header lines added, Sifr will
    skip over them  until it finds -----BEGIN Sifr MESSAGE----- so
    they can be left there.
------------------------------------------------------------------------

   MD5 is a message digest (hashing) algorithm developed by Ron Rivest.

------------------------------------------------------------------------

  Current limitations:

    Sifr version 3.0
        No "ZIP" compression in the program, requires external
            compression (eg PKZIP)

        Sifr SIF output is similar to, but not identical to PEM
        format. Sifr puts the MIC-signature after the body of the
        ciphertext, since writing it before the ciphertext requires
        reading & writing the entire text twice.
        The same double-handling applies to compression such as ZIP.
        Compression can be done before Sifr  is run and the output
        can be named (eg) ZIPPED.SIF. The receiver can then validate
        ZIPPED and unZip it later, when the original filename will
        be revealed.


------------------------------------------------------------------------

  Summary of Options:
         s     Sign
         c     Cipher
         b     Binary         (Default is  3to4 expanded, not binary )
         t     Time Seed      (Default is  User input seed)
         r     RSA            (Default is  LUC)
         w     pause          (Default is no pause on completion)
         x     Expand a Public key
         n     Contract a public key

  Options may be combined            eg -scbt    -sc -b -t
  Options may start with slash       eg /scbt
  Options may be uppercase           eg /SCTB

  If neither s or c is present, options b and t will be ignored.
  if either x or n is present, options s,c,b,t will be ignored.

  If  Option r is used, RSA is used instead of LUC for the Digital
  Signature and Public Key Cryptography functions.
  (The same .LUV and .LUV key files are used).

  The w option is useful when running Sifr in a DOS window in Windows.
  The "properties" can be set to "close on exit" and the pause enables
  the results of Sifr to be examined.
  The Icon file Cadu.ICO can be used for Windows operation

  Errorlevel on Exit :
      If a Signature is verified the errorlevel on exit is set to 0
      If a Signature is NOT verified, the error level is set to 2
------------------------------------------------------------------------

  Files in Sifr33.Zip :

   Sifr.exe              Cipher-Sign
   Luckey.exe            Key generator
   Sifr.doc              Documentation for Sifr (this file)
   Demo.Bat              simple demonstration



  All files remain copyright of Cybanim Pty Ltd
  No copies of any of this software may be sold or modified for sale.

  Please contact Cybanim for Licence arrangements for the LUC library
  containing LUC DES RSA MD5 etc.

                 C.T.Skinner
                 Cybanim Pty Ltd
                 4/29B Nelson St NSW Australia
                 ph (02) 363-5884
                 international +612-363-5884
                 CompuServe   100033,132
                 Internet     100033.132@compuserve.com

    World's Fastest Cryptographic Software for Intel machines

    World's fastest LUC     World's fastest RSA     World's fastest DES

------------------------------------------------------------------------
