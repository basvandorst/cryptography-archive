
PGP In a Nutshell, by Jeremiah S.Junken (jjunken@nations.ucs.indiana.edu)

Correspondance Information at the Extreme bottom of this document!





Getting Started with Phil Zimmerman's Pretty Good Privacy (PGP) Software


This document is in no way meant to supplant the documentation provided by
Mr. Zimmerman, but rather as a plain-english quick-reference for those who'd
rather get down to business than screw around with intricacies. My belief is
that you should learn the essential basics and dive in straight away. The finer
points will grow on you, and you learn them as you go. Remember that security
as is only as good as the people who know the codes, so under no circumstances
tell ANYONE your password or write it down where it might be found. Be aware
of shoulder-surfers, or people who can't keep their eyes off the keyboard when
you're entering passcodes they're not intended to know.

You probably got this because you want to avoid the BS associated with huge,
detailed manuals. After all, you didn't get PGP for an education, you got it
to DO something. So, regardless, I strongly suggest you read this straight
through.

There's a cheat sheet in here I strongly recommend you print up and keep handy.
It would be a VERY good idea to print up the whole thing so you can reference
it while actually using the software!

The following is a Table Of Contents. Don't be afraid. Just follow the order
I recommend immedietly below it and nothng will blow up :)


Table of Contents:
------------------

Environment
 Considerations for using PGP in different situations, what you need to know
 to make PGP secure, etc.

Environment: Residual Data
Environment: Environmental Variables
Environment: Password Echo
Environment: Shared Systems
Environment: Your Password

Getting Started
 The things you need to know to use PGP

Getting Started: Generating Keys
Getting Started: Decrypting Messages
Getting Started: Encrypting, Adding Keys
Getting Started: QUICK REFERENCE
Getting Started: "Stupid" Questions

Advanced PGP
 Master PGP and make it REALLY work for you!

Advanced PGP: Authentication
Advanced PGP: Certification
Advanced PGP: Key Editing
Advanced PGP: Copying Secret Keys

Paranoia
 Unlikely surveilence possibilities

Paranoia: Electromagnetic Inference Interception
Paranoia: Hard Disk Reading
Paranoia: Remote Video Monitoring
Paranoia: linetap
Paranoia: modifications

Correspondance Information
 How to reach me
PGP Distribution Information


Recommended Reading Order:

Getting Started, Environment, Advanced PGP.
Unless you sell cocaine or plot to overthrow governments, PARANOIA is not
really important :) :)


Notes:

  The author, Jeremiah Junken, is currently 18 years of age, lives in the
ass-backwards town of Bloomington, Indiana, in the midwestern United States,
is a stringent conservative and a supporter of CPSR and the EFF.

  An avid Amiga user, Mr. Junken enthusiasticly supports the efforts of
Mr. Peter Simons, who ported PGP 2.3a to the Amiga, composes music and
developes exceptionally lame software :) :)
--------------------------------------------------------------------------------

Environment

When you sit down in front of your terminal and use PGP, you are doing so to
ensure your security and privacy. You can't cover all bases, obviously, you're
only human, but you can minimize the chance for security leaks and thusly, the
compromise of your privacy.

Enviroment, in this text, is a reference to your computer, and the physical
area in which your computer exists.



Environment: PLAINTEXTS

When you use PGP, you first write a document containing the message you want
to encrypt. This document you are writing is not encrypted, and while it's not
encrypted, it's vunerable to being read. So, you encrypt it and send it to your
destinations. Pretty simple. Of course, this document can still be read! How?
DID YOU DELETE THE ORIGINAL? You must. Or, use PGP's Conventional Cryptology
option and encrypt the original with a password so you read it when you need it.



Environment: RESIDUAL DATA

If you use MS-DOS 5.0 or better, you should be familiar with the UNDELETE
command. If you were to write a plaintext, encrypt it, delete the original
plaintext and mail it, the PLAINTEXT CAN STILL BE UNDELETED. Even if you don't
have an undelete command, you should be aware that there are some out there,
and if someone REALLY WANTED TO, they could recover the plaintext.

There are several ways to avoid this. For MS-DOS, there exists a NUKE command.
This command writes over the file with 1's, 0's, 1's, THEN deletes it. In that
way, it's not possible to recover it. This is Department of Defense Standard.

Another way is to run a Disk-Defragmenter after the file is deleted. This will
also overwrite the residual data.



Enviroment: ENVIRONMENTAL VARIABLES

In PGP, there is an option to set your passphrase as an Enviromental Variable.
In MS-DOS, this could be in your Autoexec.bat. In AmigaDOS, your
startup-sequence or one if it's children. In UNIX C-shell, your .login. This
is a TERRIBLE mistake to set it in a batch file, because anyone could read that
file and your passphrase would be plainly visible, unencrypted, and therefore
used. However, if you set it in a batch file, it's already in memory, and PGP
could be used by whoever was sitting in front of the computer without any
problems.

Solution: Do not set a PGPPASS Environmental variable. Ever. For ANY reason.



Enviroment: PASSWORD ECHO

There is an option to echo the password when you type it in. By default, PGP
does not show what you type so that someone looking over your shoulder could
not see it. They could still watch your fingers on the keyboard.

Solution: DO NOT set Passworrd echo on. It's not rude to ask someone not to
watch when you enter a password.



Environment: SHARED SYSTEMS

Shared Systems are bad news for security, Period. I've been on the hacking
side, and the side of the Hacked, and quite simply, a shared system = Privacy
Risk. Remember that the operator (ROOT on a Unix System) or a clever hacker
could easily see a dump of system memory and hence, your passphrase while
PGP is decrypting.

The TEMP directory (/tmp in UNIX) is another problem. PGP could store it's
swap files there. You'd be best off to edit the PGP Config.txt (PGP.config on
Amiga) and define the TEMP directory to be your home directory. Also Make sure
you have the privedges set so that others cannot read your home directory
(In Unix: chmod . og-rwx ; chmod . u+rwx)

If you use a Mailsystem such as ELM that creates a tempfile in the /tmp before
mailing, it's better to write your message with Emacs before you start in
mail, (emacs newmessage.txt) then encrypt it (pgp -ea newmessage.txt) then
mail it with pipe redirect

mail user < newmessage.txt.asc

and that way, any temp files created would be encrypted, and hence, useless to
the peeping eye!

If you'd like to see some more security concerns, see the PARANOIA section at
the tail-end of this file!

Environment: YOUR PASSWORD

When you select your password, you should not use anything easy to guess, like
the name of a spouse, a nickname, a favourite sports team, or something even
worse like your last name backwards. The technique I use for generating
passwords which are easy to remember but next to impossible to guess is to think
back to your elementry school years, think of the best time you had during that
period in your life, or something you had then that you really loved, and use
that as a passphrase.

For example's purposes, we'll use my favourite toy of that time, which was
ROBOTIX.

the passphrase 'robotix' might be in a dictionary or something that someone
might try. So, you might add a few random characters: 'ro_b&ot|><', and maybe
the year of your birth. '19ro_b&ot|><75'. That would be damned near impossible
to guess, whereis 'robotix' is unlikely to be guessed, it's still possible.

of course, it's a passPHRASE not a passWORD, so it could be:
"When in the course of human events..." you could change that to:
"\\/h3|\| |n th3 k0urS3 uhv H\///.A|\| 3\/3|\|T5..," or something.

Another HUGE mistake a lot of people make is mumbling their passwords,
especially in efforts to remember them. THAT is a critical mistake. So, if you
think what you're typing, make sure your mouth isn't doing the thinking!


--------------------------------------------------------------------------------
This section is a jumpstart from ignorance into competent usage of PGP.
Read carefully and follow instructions step-by-step!



Getting Started: GENERATING YOUR KEYSET

OKay. In order for someone to send you mail, they'll need your Public Key.
You have to create that yourself. When you create it, it creates your
Secret Key (which is password protected) and a Public Key. The Public Key
is used by others to encrypt data to you. Once encrypted with your Public
Key, YOUR _SECRET_ Key, and ONLY YOUR SECRET key can decode the information.

So Let's do it!

type: pgp -kg

It will prompt you for several things. One is your ID line, or what people will
see that identifies the key as yours from the humn perspective.

Yourname <your email address>

THat's the general convention, but some people like to use a witty comment
instead of an Email Address. It's entirely up to you.

Another option will be Key Size. Pick the largest option (1024-bitkey). It
might take a while (As long as 5 minutes) to generate the key on most
modern machiness, but this is your security we're talking about, not waiting
on a laundry dryer. (On older machines, it could be as long as an hour, but
it will never take that long to decrypt a message.. usuually no more than
5 minutes. I use a very old computer, and it doesn't take more than 40
seconds to encrypt or decrypt for a 1024bit key.. but then again, I use an
AMIGA!)

It will ask for a passphrase. A "passphrase" is password, but it's longer. It
can be a whole sentance, or just a few letters. Remember to make it someting
you can remember easily, but not something easily guessed. When I've helped
friends generate passwords, I usually tell them to try and remember a really
fun time they had with a friend, and pick a word that describes the situation,
then the friend's name, and use either.

 For a good password, you might want to look at the section in the very
beginning on passwords!

 The most secure passwords are raandom strings of both letters and numbers
like: az193095=-evce2 or something. Whatever you choose make sure YOU can
ALWAYS remember it, and that no one is likely to guess it.

It will ask for random keystrokes, and indicate a number showing the number
remaining for you to enter at the bottom of the screen. Why? Nothing is more
unique than the timing between sets of keystrokes from one person to another.
A computer could not possibly generate a set of numbers as random and haphazard
as sthese timing valauess. Since it's been esstablished that PGP is effective
and it knows what it's doing, humor it. Type reasonably slowly. PGP will
indicate that you've entered enough with a Beep and a message saying "enough,
thank you."

A series of periods and plusses will show up at the bottom of the screen. These
are of no concern to you, they're just progress indicators.

They look like this:

....+++ .....++++ ........+++++

When it's finished, you need to "extract" your public key from the public key
ring in ASCII format so that you can mail it to the people who will use it
(or pass it on diskette, or however you transmit it.)

This is accomplised by typing: pgp -kxa YourId keyfile pubring.pgp

Assuming your ID is John Doe, and you want to put the key in a file called
"mykey", you'd type: pgp -kxa John mykey pubring.pgp

A file called mykey.asc will be created, and viola! Your friends will add that
keyfile to their own public ring and be able to mail you messages securely!
-------


Getting Started: DECRYPTING MESSAGES

Once your friends have your key and mail you a message with PGP encryption,
you will need to save that message to a file. Assuming you've done that,
and the PGP encrypted message is in a file called 'newmsg1.txt', we'll  go
through the motions.

pgp -d newmsg1.txt

PGP will ask for your key's secret passphrase. If entered correctly, PGP
will decrypt it. It may ask you a few questions, answer them appropriately
(ie: DO you want to overwrite file with file, etc.) Just answer them according
to you wishes.

Now, using an editor or text viewer, you can read the message. If there is
extraneous garble at the top, it means the person that sent the message
signed it with the PGP key. nothing is wrong, just ignore the garble. (This
rarely occurs.)

Now, after reading the message, you should delete it. There's no ssecurity in
the message once it's decrypted.. anyone could read it just as you did. You
can keep the encrypted version if you tell pgp not to overwrite it in  the
decryption process, and decrypt  it when you need to refer to it.



Getting Started: ENCRYPTING MESSAGES, USING OTHER PEOPLE'S KEYS TO DO SO.

The first step is to obtain the public key of the person you intend to mail..
PGP is  a two-way street and requires both people to have the software and
haave exchanged keys in order to communicate properly.

Once you have isolated their public key in a file, type:

pgp -ka filename

where filename is the file containing their key.

(Remember: Once you add their key, you'll not need to do it again!)

PGP will ask you if you want to certify the key. If you are CERTAIN this key
came from who it says it's from and you believe that, then YES, you want to
certify it. (If you don't certify it, PGP will always ask you if you're SURE
you want to use it each time you do!)

It will prompt you again, for verification, then ask for your secret
passphrase. This is so no one but  you can certify which keys you can
trust for you. (There is a way to transfer trust, read the full documentation
for more information on that..)

Once it's entered, the key is added to your public keyring and you'll never
need to add it again.

Now, assuming you've just added Jane Doe's Public key to your keyfile and would
like to mail her a message, you'd type:

pgp -ea filename userid

Where filename is the message file, and userid is that of Ms. Doe, so something
like:

pgp -ea doemsg.txt Jane

If  there's more than one Jane in your public key file, but only one Doe, you'd
type:

pgp -ea doemsg.txt Doe



and pgp would produce a file called 'doemsg.asc' (or 'doemsg.txt.asc' on UNIX
systems.)

Viola! Done. You'd simply mail doemsg.asc to Jane Doe, and she'd decrypt it
with her secret key.



Getting Started: PGP QUICK REFERENCE

Below are all the basic commands for PGP. Once you're familiar with basic use,
read through the manual and use what's below as a reference, like a cheatsheet.


Remember to add the 'a' option to anything producing an outfile, or it will
output a BINARY that you cannot directly mail.

ie: rather than pgp -e, use pgp -ea

The A means PRODUCE ASCII OUTPUT, which you can mail straight away.

In UNIX systems, you would type: mail username < file

were FILE contains the output from pgp (usually file.asc)

To encrypt a plaintext file with recipent's public key, type:
   pgp -e textfile her_userid [other userids] (produces textfile.pgp)

To sign a plaintext file with your secret key:
   pgp -s textfile [-u your_userid]           (produces textfile.pgp)

To sign a plaintext file with your secret key, and then encrypt it
   with recipent's public key, producing a .pgp file:
   pgp -es textfile her_userid [other userids] [-u your_userid]

To encrypt with conventional encryption only:
   pgp -c textfile

To decrypt or check a signature for a ciphertext (.pgp) file:
   pgp ciphertextfile [plaintextfile]

To produce output in ASCII for email, add the -a option to other options.

To generate your own unique public/secret key pair:  pgp -kg

REMEMBER: When making any sort of outfile that you intend to mail (ie: creating
encrypted mail messages) remember to add the -a extension.. (pgp -kx should
be pgp -kxa, and pgp -e should ALWAYS be pgp -ea), otherwise, the output is
unmailable BINARY DATA which will appear to be a bunch of random characters
that cannot be extracted properly on most systems!!

Key management functions:

To generate your own unique public/secret key pair:
   pgp -kg

To add a key file's contents to your public or secret key ring:
   pgp -ka keyfile [keyring]

To remove a key or a user ID from your public or secret key ring:
   pgp -kr userid [keyring]

To edit your user ID or pass phrase:
   pgp -ke your_userid [keyring]

To extract (copy) a key from your public or secret key ring:
   pgp -kx userid keyfile [keyring]

To view the contents of your public key ring:
   pgp -kv[v] [userid] [keyring]

To check signatures on your public key ring:
   pgp -kc [userid] [keyring]

To sign someone else's public key on your public key ring:
   pgp -ks her_userid [-u your_userid] [keyring]

To remove selected signatures from a userid on a keyring:
   pgp -krs userid [keyring]

pubring.pgp = Contains your & other's public files
secring.pgp = contains your secret keys

if you want to extract your public key to mail to someone:

pgp -kxa myid mykey pubring.pgp

Where myid = the first unique pattern of letters in your ID signature
(ie: If you signature is Joe Blow <blowj@big.u.edu>, then myid = joe)
the result will be a file called mykey.asc, which you can mail to people
(mail user@host < mykey.asc)



Getting Started: "STUPID" QUESTIONS

I say "stupid" in quotes because the only stupid question is the one you didn't
ask! If you knew everything, you wouldn't be reading this, and it's here to be
helpful, not confusing!

Statement: Pgp -ea file userid

Explaination: THe file is the message to encrypt. The userid is the person
you intend to send it to, in this example. -e means encrypt. a means ASCII
output, or mailable text.

When you specify a USERID, you don't have to type the whole ID.. in fact, most
systems won't let you. PGP only needs a non-ambiguous clue.

Peter's ID is Peter Simons <simons@peti.GUN.de>

For example, if I write a message to Peter Simons, I can say "Peter", "Pete",
"Simons", "Simon", "Simo", "peti.gun" or anything in his ID that isn't in
another ID. If there a Simon Jackson in my public keyring, I should say
Peter, because there are two occurances of "Simon". If there's a Peter Jennings
in my public ring also, I should say "peti.gun", since that's unique to
Peter Simon's ID.

Statement: Why isn't all output just ascii in the first place?

Because sometimes you would want BINARY output for one reason or another.
Binary output produces a smaller file, so if you were putting the file
onto a disk rather than mailing it, it would be a good idea to just use the
binary mode. It's also used for things like STEALTH and stenography, which we
won't go into here.

Statement: Why can't I encrypt with a secret key?

Because if you did, then ANYONE with your public key could decode it, assuming
it was possible at all.

Statement: IF someone has my public key, can they figure out my password or
           hack my mail?

Absolutely not! That's the whole point to PGP in the first place!



-------------------------------------------------------------------------------
Advanced PGP

This part of this text assumes you're now familiar with PGP, and comfortable
with using it routinely. Whether you are or are not, you should read it, but
if it seems to complicated, don't worry about it just yet!



Advanced PGP: Authentication

So now you're comfortable with using PGP. You can encrypt, decrypt, make and
add keys and all that good stuff. So now I throw you a curve-ball. How do you
KNOW that YOU are encrypting a message to ME instead of someone else?

Roleplaying time! You have this key, which came in a message from me to you,
and when you add it to your keyset, my name came up in the ID with my Email
address. Okay. So you're ready to send me a message. WAIT RIGHT THERE!

As you should know, it's quite possible to forge Email, or get someone's
account password! So, then, it's possible that you have a charlitan key!
Someone could have easily generated a key with the same ID tag I have, broke
into my account and mailed it to you, then all my incoming mail from you
they would divert, read, re-encrypt with my real key and send it to me.. and
neither of us would know!

PGP solves that, too. Easily. Go back to key generation, breifly, and recall
the keystrokes PGP asked for. There is no way anyone could do it like you did,
and it's doubtful you could, either! When you generated that key, a part of
it was the "signature", which is totally unique to your key. Even if you
lost your key and generated another one that looked the same, it's signature
would be totally different.

So, before you encrypt things to someone, you should compare the signature
on the key you have with the one they have over the phone or in person. THEN
you would know you have the proper key and not a charlitan!

The signature is also referred to as a fingerprint, and can been seen by
invoking the command:

pgp -kvc userid keyringfile (ie: pgp -kvc peter pubring.pgp)

There is also a way to "sign" a file. With this done, you can send an
encrypted file, such as a letter containing technical data, sign it, and
if ANYTHING is changed, PGP will know it and warn you.

This is done with pgp -sb filename. (pgp: -sb technote.txt)

This can come in handy for making sure no one changes instruction manuals to
PGP itself, and more.

Advanced PGP: Certification

When you add a key to your keyset, PGP asks you if you want to certify the
key.. do you KNOW that the key belongs to who you say it does? Do you trust
that person to give you keys that are authenticated? This is cerfication.

If Joe Blow hands you a floppy disc you watched him copy his key onto, you can
be reasonably sure it's Joe Blow's key. So yes, you'll certify that. Of course.
BUT.. If Joe Blow hands you a disk with other people's keys on it, do you
trust that he checked those keys out reasonably well to make sure they're
authentic? In other words, you can trust Joe Blow with his own key, but do you
trust him to give you keys? If yes, how much? Always? Sometimes? Maybe? Never?

These are levels of trust. If you trust Joe Blow, and Joe Blow trusts John Doe,
then it's possible that also John Doe is giving you keys, indirectly.

It's always best to get the key from the person themselves, check it out with
them and do it that way, but it's not always possible, either for reasons of
time quantity of work, and this is where Certification comes in. It's
generally a wise idea to think things through as if it were a chess game, or
setting up dominos.

Examples:

Joe Blow you trust. John Doe you don't. Therefore, you SOMETIMES trust Joe
Blow.

Joe Blow you don't trust. Therefore, you NEVER trust anything he certfies.

Joe Bloe you trust, John Doe you trust, Therefore, you USUALLY trust Joe Blow.


The only person PGP should understand you to trust fully is YOURSELF, and when
you generate a key, that's the default setting.



Advanced PGP: Key Editing

Okay. You're Peter Simons. You key reads:

Peter Simons <simons@peti.GUN.de>

But, you moved. Now you're Peter Simons, root@k-rad.elite.org.

You CAN edit your key's ID line without it messing up encryption. It's quite
simple. You can use this function to also change your password should you feel
the desire to do so (YOU SHOULD CHANGE YOUR PASSWORD EVERY MONTH MINIMALLY!)

pgp -ke simon

PGP would prompt you on editing options, first being the ID line and then
being the password.

You should note that once you change it and lock in the change, PGP will
remember the old ID and refer to it as an ALIAS. This way, it's more clear
that it is the same key to other users.

People can always use the new or old key to encrypt to you, whether you
change the ID and/or the password, however, they'll see the old ID unless you
give them the copy of the new public key (pgp -kxa yourname mykey pubring) as
if it were new.



Advanced PGP: Copying Secret keys, or, Using PGP in two places.

Let's say you're like me. You go to a University, and you use PGP offline most
of the time, but.. once in a while, you use PGP online. In order to use the
same key, you'll need to copy your SECRET keyring, secring.pgp, and put a copy
of it where you intend to use it. If it's avoidable, you shouldn't do it, but
sometimes it's not. keyrings are intercompatible.. that is.. they work on
different compters regardless of whether it's a NeXT, an Amiga, a Mac or an
IBM.. or anything else.

In some cases, you might need to DISTRIBUTE a secret key, such as in a
political organization or something. It's generally best to have a "data
treasurer" for that sort of thing, but if you HAVE to do it, then it's done
the same way a public key is, except for the keyring specified.

pgp -keyid secretkeyfile secring.pgp

Remember that if you distribute it over mail, you would be a total fool to
distribute it in the same message as it's password, and an even bigger idiot
if you didn't encrypt the mail to the user you intended to send it to!


--------------------------------------------------------------------------------


PARANOIA: General Security Problems

Warning: The things presented in this segment of the document are surviellence
techniques employed by various government, private and espionage organizations
around the world. These are not likely to be employed to read your mail to your
best friend, unless you happen to be conspiring to launch a nuclear missle.

Please don't lose any sleep over this.



PARANOIA: Electromagnetic Interference Interception

Every electrical device, from digital wristwatches and toasters to televisions
and mainframe computers generate electromagnetic interference. There are devices
that measure this energy, and in some circumstances can interpret it into being
able to tell what a given device is doing.

A computer's monitor is controlled by a signal send from the video card to
the monitor (electromagnetic interference.) A remote device, carefully tuned in
on this signal, could reproduce the image on your monitor remotely for the
purpose of taping or monitoring.

The same is true with a computer keyboard. Whenever you press a key, a certain
signal is sent to the computer, different from other signals sent by other keys.
A device like the one described above could essentially carbon copy all of your
keypresses into a recorder and everything you type could be reproduced.

If you want a working example of this concept, look at a typewriter ribbon
(especially those found in IBM Selectric series typewriters.) If you look
carefully and fill in the spaces mentally, you can see everything the unwary
typist has typed. On the selectric, spaces aren't shown on the ribbon, since
the space prints nothing and would be a waste of ribbon to advance the ribbon
when you hit it. (Same with Tab, REturn, etc.)



PARANOIA: Hard disk reading

If you format your hard drive so that there is no data on it at all, it is
still possible to pick up trace magnetic signals where readable data and
the previous formatting existed. With special equiptment, the contents of your
hard drive could be totally reconstructed, despite the formatting.

The solution is straight forward: Department of Defense standard Data Deletion,
which was described in the beginning. It overwrites the file 3 times with 1's
and 0's before deleting, so the residual data is not usable in any scheme.

PARANOIA: Remote Video Monitoring

Obviously it's possible for someone to videotape your computer screen and/or
your fingers on the keyboard. This is a standard tactic. This is avoided
somewhat by positioning the computer where neither the keyboard or the monitor
is visible through a window, and that there is no reflection visible either,
as could be seen in the user's glasses, a mirror, a glossy poster, chrome on
furniture, etc.



PARANOIA: Linetap

If you were to use PGP on a remote system, your modemline could be compromised
by buffering the signal transparently into another computer and thusly
reproducing the entire terminal session. For that reason, it's better to use
PGP offline and upload encrypted texts.



PARANOIA: Modifications

There is no way to tell if PGP has been modified unless you get the distribution
package from it's creators, or get the source code, carefully examine it, and
compile it yourself. Even then, it's possible to have a compiler that recognizes
security applications and creates a "backdoor".

The more common scenerio is straight-forward: Someone modifies the source on
a shared system and gets a dump of everything you've done with PGP on that
system. The chance of this is somewhat eliminated by compiling your own copy
on the system, or better, simply use your own copy offline!

--------------------------------------------------------------------------------

Correspondance:

This was written entirely by Jeremiah S.Junken, save the key-reference chart
which was taken from PGP 2.2 UNIX.

In the event of Address change or the like, I refer correspondance to
Peter Simons, the Author of PGPAmiga and the maintainer of the PGPAmiga
mailing list.

Please address correspondance related to this to me. Although Peter is a
great guy who knows PGP intimately and loves helping people out with it, he's
also extremely busy :), so keep that in mind before you mail him specificly!

always read alt.security.pgp if you need more information, and/or subscribe
to the PGPAmiga mailing list! (contact Peter Simons)



PGP Distribution Information:

PGP is found in compiled form for Amiga, MS-DOS, Macintrash and, (I THINK..)
Atari ST. The C language source code is also available.

FTP to SODA.BERKELEY.EDU (don't be a hoser)...

/pub/cypherpunks/pgp

there you will find several versions, and compiled versions for
Amiga, Macintrash, MS-DOS, etc., as well as other cool things.

net-dist.mit.edu (Source, MS-DOS executables)
src.doc.ic.ac.uk (Source, Amiga, MS-DOS, Macintrash)
ftp.luth.se      (Amiga  /pub/aminet/util/crypt)
wuarchive.wustl.edu (Everything)


