Cardinality of Ternary and Higher Degree Relationships in the
Entity-Relationship Data Model

D.N. Hart

Technical Report CS10/92

Department of Computer Science,
University College, UNSW,
Australian Defence Force Academy
Canberra ACT 2600 Australia

Introduction

In most if not all textbook presentations of the entity-relationship
data model, discussion of the cardinality constraints of relationships
generally concentrates on those of binary and perhaps unary
degree1,3,4,5.  But while ternary and possibly higher degree
relationship types may also be dealt with, there is usually little
discussion of cardinality constraints as they might apply to such
cases.  To make matters worse, even in cases where n-ary relationship
cardinality is discussed, different authors have made contradictory
statements regarding it.  For example Date says "... extending the
concepts, and the terminology, to relationships of degree greater than
two is essentially straightforward..."1 whereas Hawryszkiewycz opines
that "...n-ary relationships have a number of undesirable features.  One
is that it is no longer meaningful to label the E-R diagram with 1:N,
N:M, or N:1 (cardinalities)..."4 and "... hence cardinality is not shown
on n-ary relationship sets"5.  In contradiction to this latter view, it
is contended here that relationship cardinalities for ternary and higher
degree relationships are well defined and meaningful albeit conceptually
somewhat more difficult to deal with and harder to discover than for
binary or unary relationships.  At the same time, the extension that
needs to be made from the simple binary case to cater for the more
general n-ary case is perhaps not quite as straightforward as Date says
it is.  In this paper the problem is considered in detail and a simple
extension to the E-R notation for binary relationship cardinality is
proposed.  Also, it is shown that n-ary cardinality constraints can be
inconsistent and can include redundancy.  A criterion for checking the
consistency of a specified set of n-ary relationship cardinality
constraints is presented and proved, as is a rule for deriving redundant
constraints.  Previous work on the cardinality of n-ary relationships
has been done by Lenzerini and Santucci6, however the approach and
terminology adopted in this paper differs significantly from theirs.

In a standard ER binary relationship, such as the abstract one
illustrated in Figure 1, it is well known that the possible cardinality
constraints are one-to-one (1:1), one-to-many (1:N), many-to-one (N:1),
and many-to-many (M:N)1,2,3,4 5.


-Figure 1- Respectively these mean:

One-to-one (1:1)	One instance of entity type A is related to at most one
instance of entity type B, and vice versa.

One-to-many (1:N)	One instance of entity type A may be related to zero,
one or many instances of entity type B, and one instance of entity type
B may be related to at most one instance of entity type A.

Many-to-one (N:1)	The converse of 1:N.

Many-to-many (M:N)	One instance of entity type A may be related to zero,
one or many instances of entity type B, and vice versa.

A Special Case - Ternary Relationship Examples

Consider the abstract ternary relationship T of Figure 2. The obvious
way to specify the cardinality of a relationship such as T is to specify
the cardinalities that apply separately between each pair of the
participating attribute types, irrespective of the others involved in
the relationship.  Each of these could be called (and will be in this
paper) a "pairwise cardinality constraint".  Nominally, for a ternary
relationship like T, there are 6 relevant pairwise cardinality
constraints:

a.	The number of instances of B that may be associated with one instance
of A; b.	The number of instances of A that may be associated with one
instance of B; c.	The number of instances of C that may be associated
with one instance of B; d.	The number of instances of B that may be
associated with one instance of C; e.	The number of instances of C that
may be associated with one instance of A; and f.	The number of instances
of A that may be associated with one instance of C.

These may be compressed into 3 "bidirectional" cardinality conditions
analogous to the simple binary cardinalities discussed briefly above.
They are A:B, B:C and A:C.  The possible cardinalities that may apply to
a ternary relationship such as T are numerous.  An obvious one (and the
simplest) is discussed in the example below:

Example 1:

a.	one instance of entity type A is associated with at most one instance
of entity type B, and vice versa (i.e. the pairwise cardinality
constraint A:B is 1:1);

b.	one instance of entity type B is associated with at most one instance
of entity type C, and vice versa (i.e. the pairwise cardinality
constraint B:C is 1:1); and, redundantly in this case

c.	one instance of entity type A is associated with at most one instance
of entity type C, and vice versa (i.e. the pairwise cardinality
constraint A:C is also 1:1).


-Figure 2-

That is, an allowed database extension of the relationship T might be
(represented in tabular form):

	A	B	C 	a1	b1	c1 	a2	b2	c2 	a3	b3	c3

where an, bn, and cn are instances of the entity types A, B and C that
participate in the relationship T, respectively.  A more interesting
case is represented by Example 2:

Example 2:

a.	one instance of entity type A is associated with  zero, one or many
instances of entity type B, and each instance of entity type B is
associated with at most one instance of entity type A.  That is, the
pairwise cardinality constraint between these two entity types
(irrespective of entity type C) is 1:N;

b.	one instance of entity type B is associated with at most one instance
of entity type C, and vice versa.  That is, the pairwise cardinality
constraint between these two entity types (irrespective of entity type
A) is 1:1; and

c.	one instance of entity type A is associated with zero, one or many
instances of entity type C, and each instance of entity type C is
associated with at most one instance of entity type A.  That is, the
pairwise cardinality constraint between these two entity types
(irrespective of entity type B) is 1:N.

Note that, unlike Example 1, the third condition in this case is not
redundant.  Under this set of pairwise cardinality constraints for the
relationship T, a permitted database extension of T could be:

	A	B	C 	a1	b1	c1 	a1	b2	c2 	a2	b3	c3 	a2	b4	c4

but one such as:

	A	B	C 	a1	b1	c1 	a1	b2	c1 	a2	b3	c2 	a2	b4	c3

would violate the constraint since in this latter case the instance c1
of entity type C is related to more than one instance of entity type B,
namely b1 and b2.

A complication is that, unlike the binary case, it is possible to have
inconsistent cardinality constraints for ternary and higher degree
relationships.  Example 3, which uses an abbreviated but obvious
notation for the pairwise constraint specifications, shows this.

Example 3:

a.	A:B = 1:1;

b.	B:C = 1:1; and

c.	A:C = N:N.

Note that the notation for a many-to-many cardinality has been changed
slightly here, from the conventional M:N to N:N.  The reason for this is
to retain simplicity of notation in the discussion to follow.  To see
that the set of pairwise cardinalities of Example 3 is inconsistent,
observe that the cardinality of A relative to C through B is such as to
require that any instance of A can only ever be related to at most one
instance of C (and this is true in reverse as well).  That is, if A:B
and B:C correctly reflect the data semantics, then A:C is necessarily
1:1.  It is just not possible for A:C to be N:N.  This being so, the
stated pairwise cardinality "constraint" for A:C must reflect either an
error or a misunderstanding of the semantics of the data being
modelled.  Another example of the same problem is represented by the set
of pairwise cardinalities A:B = 1:N, B:C = 1:N, and A:C = N:1.

So, from the examples, it would seem that:

a.	to characterize the cardinality of a ternary relationship, up to 6
conditions need to be specified - namely three (bidirectional) pairwise
cardinality constraints for each pair of participating entity types.  In
the examples above these are A:B, B:C, and A:C.  Generalizing to the
n-ary case, this would involve C(n,2) = n!/(2!(n-2)!) pairwise
cardinality conditions.

b.	some combinations of pairwise cardinalities are internally
inconsistent (c.f. Example 3 above).

c.	circumstances may exist in which some of the pairwise cardinality
constraints are redundant (c.f. Example 1 above).

Arising from these points and examples, there are three questions to be
answered:

Questions:

1.	What is an appropriate notation to represent on an ER diagram the
C(n,2) pairwise cardinality constraints applicable to an n-ary
relationship?

2.	How can it be determined whether a given set of pairwise cardinality
conditions for an n-ary relationship is consistent?

3.	Are there inference rule(s) that allow deduction of redundant
cardinalities from already known and specified cardinalities, and if so
what are these rules?

The answers to these questions are the subject of the remainder of this
paper.

An Extension of Entity-Relationship Notation

A straightforward extension of the common 1:1, 1:N, M:N notation for
binary relationship cardinality can be used to cater for the n-ary
relationship case.  The alternative "crows foot" cardinality notation
does not, however, lend itself to easy generalization.

Consider a ternary relationship T characterized by the pairwise
cardinalities A:B = 1:N, B:C = N:N, and A:C = 1:N.  This can be
represented as shown in Figure 3.


-Figure 3-

In this diagram, for example, the cardinality symbol "1B" on the line
connecting entity type A to relationship T means that "each instance of
entity type B is related to at most one instance of entity type A".  In
a similar way, the symbol "NA" on the line connecting entity type B to
relationship T means that "each instance of entity type A may be related
to zero, one or many instances of entity type B".  Between them these
two symbols specify the pairwise cardinality constraint that A:B = 1:N.
The remainder of the symbols have analogous interpretations.  The
notation is readily extensible to relationships of higher degree.  Each
"leg" emanating from the relationship symbol and connecting to a
participating entity type will have n-1 cardinality specifiers on it,
one for each of the other entity types participating in the n-ary
relationship.

Consistency of a Set of n-ary Relationship Pairwise Cardinalities

To determine whether a given set of n-ary relationship pairwise
cardinality constraints are consistent or not requires the use of three
new but simple concepts - cardinality graphs, path cardinalities and
path cardinality inclusion.

Cardinality Graph - Definition

A "cardinality graph" of an n-ary relationship consists of a set of
labelled nodes (one for each participating entity type in that
relationship) and a set of edges connecting each node with every other
node in the graph.  Each edge is labelled with the pairwise cardinality
applying between the nodes that it connects.

For example, the cardinality graph of the ternary relationship of Figure
3 is shown in Figure 4:


-Figure 4-

The cardinality graph of a quaternary relationship between entity types
A, B, C and D with pairwise cardinalities of A:B = 1:1, A:C = 1:1, A:D =
1:N, B:C = 1:1, B:D = 1:N, and C:D = 1:N would appear as shown in Figure
5.


-Figure 5-

Path Cardinality - Definition

Consider an arbitrary path PQ...W in an arbitrary cardinality graph with
pairwise cardinalities denoted by p:q, q:r, ... etc, between successive
nodes.  The "path cardinality" g:x of this path between nodes P and W is
determined as follows.  Let g:x = p:q.  Then, for each edge XY in the
path PQ...W:  a.	If x:y = 1:1, then g:x remains unchanged after
traversal of the edge XY.  b.	If x:y = 1:N, then g:x = g:N after
traversal of the edge XY.  c.	If x:y = N:1, then g:x = N:x after
traversal of the edge XY.  d.	If x:y = N:N, then g:x = N:N after
traversal of the edge XY.

Note that the same path cardinality is obtained if the same path is
traversed in the reverse direction and that the path cardinality of the
direct path between two nodes is just the pairwise cardinality for the
edge that connects them.  As examples, the path cardinality of the path
from node A to node C via node D in Figure 5 is N:N, that from B to D
via A is 1:N as is that from B to D via A and C, and lastly, the path
cardinality of the path from A to B via C is 1:1.

The importance of the path cardinality is that it indicates the
"maximum" possible cardinality that can exist between the nodes at the
ends of the path, given the pairwise cardinalities that exist along the
edges which make up that path (this idea of "maximum" cardinality is
formalized below in the definition of path cardinality inclusion).  To
see this, consider the path ACB of Figure 5 which has path cardinality
1:1.  Given this fact, it is logically impossible for any instance of A
to be related to more than one instance of B (and vice versa)
irrespective of the cardinalities that may exist along any other path
between them.  And in particular it clearly would not be sensible for
the direct path AB to be labelled with a pairwise cardinality of, say,
1:N.  This point is taken up in the following definition of what
constitues an "inconsistent" cardinality graph .

Inconsistent Cardinality Graph - Definition

A cardinality graph is "inconsistent" if, for any pair of nodes X and Y
of the graph, the pairwise cardinality constraint between those nodes
(or, equivalently, the path cardinality of the direct path between them)
would allow a database extension that would violate the path cardinality
of one or more indirect path(s) between X and Y.

Loosely, this says that if an indirect path between two nodes places a
(relatively) tight cardinality constraint on the entity types connected
by it, then it makes no sense to have a more general pairwise
cardinality constraint specified between them because there can never be
any database extension in which this "constraint" is fully satisfied.

Path Cardinality Inclusion - Definition

A path cardinality constraint g:x between two nodes P and W is said to
"include" the path cardinality d:e of a different path between P and W
if every database state that is allowed under d:e is also allowed under
g:x, but not vice versa.

It is not hard to see that a path cardinality of N:N includes every
other possible path cardinality whereas 1:1 includes none.  Also, 1:N
includes 1:1 but not N:1.

Now, using the concepts of cardinality graphs, path cardinality and path
cardinality inclusion, it is possible to state the criterion which
defines whether or not a given set of pairwise cardinalities for an
n-ary relationship is consistent (i.e. whether the corresponding
cardinality graph is consistent).

Criterion for Cardinality Graph Consistency

For each (unordered) pair of nodes X,Y in the cardinality graph, the
path cardinality of every indirect path between X and Y must include or
be identical to the path cardinality of the direct path between X and
Y.

Proof

For any arbitrary database extension of two entity types X and Y that
participate in some n-ary relationship T, the path cardinality for a
particular path between X and Y defines a set of allowed extensions of
the n-ary relationship that connects X and Y.  Firstly we show that if
the condition of the criterion is true then the cardinality graph is
consistent:

a.	If the path cardinality of the direct path between X and Y is
included by the path cardinality of every other path between X and Y
then, by definition, the set of database extensions allowed by the
direct path is a subset of the database extensions allowed by all of the
other indirect paths.  That is, there is no database extension that
obeys the direct path cardinality that does not also obey all of the
indirect path cardinalities between X and Y.  If the cardinality of the
direct path is the same as that of an indirect path then these allowed
sets of database extensions are identical.  If this is true for every
pair of nodes X and Y in the cardinality graph then any database
extension of the n-ary relationship that satisifes the direct pairwise
constraints between all nodes also satisifes all of the indirect path
cardinalities of the graph, and the graph is consistent.

Now it remains to show that if the condition is violated then the
cardinality graph is inconsistent:

b.	If the path cardinality of the direct path between X and Y is not
included by, or equal to, the path cardinality of every other path
between X and Y then, by definition, the direct path would permit
database extensions denied by at least one indirect path cardinality.
Therefore the cardinality graph is inconsistent.  	 Figure 6 shows
examples of inconsistent cardinality graphs for two ternary (6a, 6b) and
two quaternary (6c, 6d) relationships.

-Figure 6-

The graphs of Figure 6 are inconsistent because:

6a.	the pairwise cardinality between A and C is not included by the path
cardinality of ABC;

6b.	the same reason as 6a, and in addition the pairwise cardinality of
CB is not included by the path cardinality of CAB;

6c.	BD is not included by BCAD, and CD is not included by CAD;

6d.	CD is not included by CBD, and BC is not included by BCD.

Inferring Pairwise Cardinalities

As was illustrated in Example 1, it is possible under some circumstances
to infer the pairwise cardinality constraint between two entity types
from other specified pairwise cardinalities.  In terms of cardinality
graphs, the inference rule is as follows.

Cardinality Inference Rule

If, for two nodes X and Y in the cardinality graph, there exists at
least one indirect path with a path cardinality containing "1" then the
pairwise cardinality between X and Y must contain a "1" in the
corresponding position.  That is:

a.	If the indirect path cardinality = 1:N, then the pairwise cardinality
must be 1:x (where x = 1 or N);

b.	If the indirect path cardinality = N:1, then the pairwise cardinality
must be x:1 (where x = 1 or N); or

c.	If the indirect path cardinality = 1:1, then the pairwise cardinality
must be 1:1.

Proof

Assume, without loss of generality, that the path cardinality of at
least one indirect path between nodes X and Y is x:1 (x = 1 or N).  This
means that any instance of the entity type X can be mapped to at most
one instance of the entity type Y.  Now if the pairwise cardinality
between X and Y is h:N (h = 1 or N) then this implies that it is
possible for one instance of X to mapped to more than one instance of
Y.  This is a contradiction and therefore the pairwise cardinality of
X,Y cannot be h:N; it must be h:1.

Conclusion

This paper has described a new approach to the cardinality of ternary
and higher degree (n-ary) relationships in the entity-relationship data
model.  The meaning of cardinality constraints in such relationships has
been clarified and a suitable extension of current ER notation
proposed.

Unlike the simpler unary and binary relationship types, it is possible
to have inconsistent cardinalities with higher degree relationships.
This being the case, a criterion for determining whether or not a given
set of n-ary relationship constraints is consistent has been presented.
Also, under certain circumstances, redundancy can exist in n-ary
relationship cardinality constraints.  The conditions when this is true
have been identified and a rule for inferring what the redundant
cardinalities must be, if such conditions apply, presented.

References

1.	Date, C.J. An Introduction to Database Systems, Volume 1, 5th
edition, Addison Wesley (1990)

2.	Chen, P. The Entity-Relationship Model - Toward a Unified View of
Data,  ACM TODS 1, No. 1 (March 1976)

3.	Elmasri, R. & S.B. Navathe Fundamentals of Database Systems,
Benjamin/Cummings (1989)

4.	Hawryszkiewycz, I.T. Database Analysis and Design, 2nd edition,
Macmillan (1991)

5.	Hawryszkiewycz, I.T. Relational Database Design - An Introduction,
Prentice-Hall (1990)

6.	Lenzerini, M. & G. Santucci, Cardinality constraints in the
Entity-Relationship Model, in "Entity-Relationship Approach to Software
Engineering" (Davis, C.G. et al, eds) p529-550, North-Holland (1983)
