Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!uknet!pavo.csi.cam.ac.uk!cam-orl.co.uk!aph
From: aph@cam-orl.co.uk (Andrew Haley)
Subject: Re: who knows message autenticity codes?
Message-ID: <1994Jan28.132432.28138@infodev.cam.ac.uk>
Sender: news@infodev.cam.ac.uk (USENET news)
Nntp-Posting-Host: quince.cam-orl.co.uk
Organization: Olivetti Research Ltd, Cambridge, England.
X-Newsreader: TIN [version 1.2 PL2]
References: <59FLBMXI@gwdu03.gwdg.de>
Date: Fri, 28 Jan 1994 13:24:32 GMT
Lines: 41

Stefan Lucks (slucks@gwdu03.gwdg.de) wrote:
: Hello,

: can you help me with the following problem:

: I want to protect program codes P1, P2, ... (or other data) from 
: changes (e.g. by a virus). Together with the Program Code Pi I 
: store its message autenticity code MAC(Pi). Only me (or a 
: protected part of the OS) must be able to compute the function MAC. 
: (Therefore MAC should make use of a secret key k).

: Attackers can know arbitrary many pairs (Pi, MAC(Pi)).

: No attacker should be able to forge a pair (P', MAC(P')).

: One possibility to do this is to use a hash function in combination
: with a digital signature scheme. Digital signatures are a very 
: powerful cryptographic tool, since they can be veryfied without the 
: knowledge of the secret key. 

: If I don't bother about this property, there should be a easier and
: more efficient solution than digital signing. For example any 
: modification of MD5, using a secret key.

: What I am looking for is no ad hoc solution, but a trustworthy one,
: where the security can be proved under a basic assumption. 
: (For example: "If MD5 is collision free, then MAC is secure.")

: Does anyone know a scheme like this? Any suggestions?

There are a number of ways that you could do this; you could XOR your
plaintext with a secret key, or concatenate your plaintext with the
secret key and compute the message digest of the resulting plaintext.
The problem with this is that both the signer and the verifier need to
know the secret key; in your cas this may be no obstacle.  In general,
it's better if the verifier only knows a public key; this offers much
better security, since even if an attacker can read the verifying
program he gains no advantage.

Andrew.

