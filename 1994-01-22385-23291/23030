Newsgroups: alt.security.pgp,sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!uunet!haven.umd.edu!cs.umd.edu!uchinews!att-out!cbnewsh!cbnewsh.cb.att.com!wcs
From: wcs@anchor.ho.att.com (Bill Stewart +1-908-949-0705)
Subject: Re: QUESTION: remote signature via modem
Organization: NCR, an AT&T Company, Pleasanton CA
Date: Fri, 21 Jan 1994 08:49:02 GMT
Message-ID: <WCS.94Jan21034902@anchor.ATT.COM>
In-Reply-To: mic@cs.ucsd.edu's message of 20 Jan 94 01:29:09 GMT
References: <59791@sdcc12.ucsd.edu>
Sender: news@cbnewsh.cb.att.com (NetNews Administrator)
Nntp-Posting-Host: anchor.ho.att.com
Lines: 61
Xref: msuinfo alt.security.pgp:8238 sci.crypt:23030

In article <59791@sdcc12.ucsd.edu> mic@cs.ucsd.edu (Michelangelo Grigni) writes:
   Has anyone automated the following situation:
No, but it's highly worth doing, though perhaps after the next release
of PGP comes out which should be significantly more tool-like.

   When I connect from my home PC via modem to a unix account, and on the
   unix account I have a file (typically a message buffer in emacs), I
   would like to clear-sign the file using a private key on the PC.
   In principle I can do it: download file, sign it, upload signature.
   However, is it necessary to download the entire file, or does the
   signature only depend on some one-way fingerprint of the file?

It really signs an MD5 hash of the file, so it would be possible to
partition the work if you shredded out the message-handling stuff sufficiently.

It's not quite as secure as downloading the message to your PC,
since some Bad Guy could hypothetically modify the hash as you move it from
your Unix box to your PC, causing you to sign the wrong hash,
but it's secure against passive eavesdropping.

Doing the equivalent job for decryption is harder, and you'd have to
think carefully what threat model you're trying to protect against.
Two obvious approaches, which don't work, would be something like

	Unix Side			PC side
	---------			-------
	Have E=Public(You)		Have D=Private(You)
	Have IDEA(MSG,K)
	Have E(K)
	Generate R=RandomKey
Approach 1)  Simple and direct
	Send E(K),E(R)		--->	K=D(E(K)), R=D(E(R))
				<---	Send IDEA(K,R)  (Encrypt K with key R)
	K=IDEADecrypt(IDEA(K,R),R)

Approach 2)  Reuse PGP for message
	Generate S
	Send E(S), IDEA(E(K),R,S) --->	S=D(E(S)), (E(K),R)=IDEADecr(......)
					K=D(E(K))
				<---	Send IDEA(K,R)  (Encrypt K with key R)
	K=IDEADecrypt(IDEA(K,R),R)

The reason neither of them work is that you can't really tell if the
message your PC received was really from your Unix process or from an
Active Eavesdropper, who is talking you into decrypting the key for him.

I'm inclined to guess that you can't solve this problem without the 
Unix side retaining some secret file that must be protected,
either a shared secret key or a private key corresponding to its own
public key, but if you can trust that you can almost trust the machine to
decrypt your PGP messages in the first place.  (The difference is that
if the eavesdropper breaks the security of your Unix machine,
he only can break the messages that you decrypt for it,
but doesn't get your key itself - if you detect the break-in,
you can stop decrypting more messages for that machine without having
to give up your key.
--
# Bill Stewart       NCR Corp, 6870 Koll Center Pkwy, Pleasanton CA 94566
# Email: bill.stewart@pleasantonca.ncr.com billstewart@attmail.com
# Phone: 1-510-484-6204 Beeper: 1-510-224-7043
# ViaCrypt PGP Key IDs 384/C2AFCD 1024/9D6465
