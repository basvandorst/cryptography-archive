Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!uunet!olivea!hal.com!decwrl!netcomsv!netcom.com!jktaber
From: jktaber@netcom.com (John K. Taber)
Subject: Re: The DES Initial Permutation
Message-ID: <jktaberCJAJ28.5p4@netcom.com>
Organization: None, I'm disorganized
X-Newsreader: TIN [version 1.2 PL1]
References: <940105181113.026225@DOCKMASTER.NCSC.MIL> <jktaberCJ6tx7.9Cw@netcom.com><CJ7tnv.AB2@cbfsb.cb.att.com> <44@cyberg.win.net>
Date: Sat, 8 Jan 1994 03:01:20 GMT
Lines: 57

Francis Barrett (fb@cyberg.win.net) wrote:
:  
: In article <CJ7tnv.AB2@cbfsb.cb.att.com>, 
: richard.b.dell (rdell@cbnewsf.cb.att.com) writes:

:  > I guess my question is .. for anyone who has done the coding,
:  > what percentage of the time is spent in the initial permutation
:  > compared to the rest of the routine?

: If you do some minimal precomputation on the key schedule, the guts of
: DES can be done in just over 30 32-bit CPU instructions per each of
: the 16 rounds.  There is a cute algorithm by a guy named Dan Hoey
: which does the initial and final permuations in a very small number of
: inline shifts and bitwise logicals.  So the IP adds very little to the
: total CPU time even in a tightly coded implementation.

: Richard Outerbridge used to have some nice C code up on Compuserve
: which illustrated all the known tricks for doing DES fast.  I don't
: know if it is still posted.

:  > Unless it was over 25 percent, I wouldn't consider a hardware bit
:  > shuffler worthwhile.

: It isn't. :)


: ---------------------------------------------------------------
: Francis Barrett, F.R.C. |  Thou canst not travel on the path  |
: The Cybernetics Guild   |  before thou hast become the Path   |
: fb@cyberg.win.net       |  itself.                            |
: ---------------------------------------------------------------

Hmm.  Could somebody send me the Hoey tricks for the IP?  I think
Outerbridge may have sent it to me several years ago, but I don't
know where it is.  I must not have studied it hard enough.

The best I could do in 16-bit Masm, was an average of 4 shifts or
rotates per bit.  So I really want to see a better algorithm.

Anyhow, the IP and inverse IP are still a drag on performance.  To
be "standard" you gotta have them, two 64-bit permutations per block.
I grant you that better implementations than mine have been done.
Still, some unavoidable percentage of total encrypt time per block
must be wasted in two permutations.  I understand that in hardware,
the permutations could be hardwired so that each is consumated in
a machine cycle.  

I have also heard the story that the IP was chosen for chip convenience.  
But I don't see any obvious geometry to it.  Contrast this lack of
geometry with the Permuted Choice permutation, part of the key scheduling.
This permutation has a simple geometry and one can almost visualize
the circuits for it.

But please, some kind soul, do send me the Hoey algorithm.
-- 
John K. Taber                        jktaber@netcom.com
=======================================================
