Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!sunic!trane.uninett.no!nac.no!nntp.nta.no!unik.no!thor
From: thor@unik.no (Thor Kristoffersen)
Subject: Re: Is this an ok mode for triple DES?
Message-ID: <1994Jan7.132709.26230@nntp.nta.no>
Sender: news@nntp.nta.no
Nntp-Posting-Host: lars.unik.no
Organization: Universitetsstudiene paa Kjeller (UNIK), University of Oslo, Norway
References:  <phrCJ033A.420@netcom.com>
Date: Fri, 7 Jan 94 13:27:09 GMT
Lines: 37

In article <phrCJ033A.420@netcom.com>, phr@netcom.com (Paul Rubin) writes:
|> I'm wondering if it's ok to do the following instead: given a fairly
|> large buffer of text to encrypt (say, 4k bytes), and three independent
|> keys K1, K2, K3:
|> 
|> 	1. Generate an initialiation vector IV_1.
|> 	2. Using this IV, encrypt the entire buffer with 
|> 	   single DES in CBC mode using key K1.
|> 	3. Use the ciphertext output of the last 64-bit block as
|> 	   the IV to encrypt the whole buffer again using K2.
|> 	4. Do step 3 again using K3.
|> 
|> This has the advantage that the *entire* plaintext buffer affects
|> the *entire* output, rather than the 1st output block coming only
|> from the IV+first input block, etc.  It all sounds good to me
|> but I'm wondering if I'm overlooking something.

Well, you would of course need to store the IVs obtained in
steps 3 and 4 since they would otherwise be lost in the
encryption, and decryption would be impossible.

I've thought of a similar scheme that uses only one IV:

1. Generate IV_1.
2. Encrypt the buffer in CBC mode from left to right using
   K1 and IV_1.
3. Encrypt the buffer in CBC mode from right to left using
   K2 and IV_1.
4. Encrypt the buffer in CBC mode from left to right using
   K3 and IV_1.

Using the CBC mode in both directions ensures that bit
changes in the input are propagated through the entire
buffer.

-- 
Thor Kristoffersen   -   Oslo, Norway   -   thork@ifi.uio.no
