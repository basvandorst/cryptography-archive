Path: msuinfo!harbinger.cc.monash.edu.au!bunyip.cc.uq.oz.au!iris.mincom.oz.au!devvax.mincom.oz.au!hew!eay
From: eay@mincom.oz.au (Eric Young)
Newsgroups: sci.crypt
Subject: Re: The DES Initial Permutation
Message-ID: <1994Jan7.110304.7359@devvax.mincom.oz.au>
Date: 7 Jan 94 01:03:04 GMT
References: <940105181113.026225@DOCKMASTER.NCSC.MIL> <jktaberCJ6tx7.9Cw@netcom.com> <CJ7tnv.AB2@cbfsb.cb.att.com>
Organization: Mincom Pty. Ltd.
Lines: 21
Nntp-Posting-Host: morgoth.mincom.oz.au

In article <CJ7tnv.AB2@cbfsb.cb.att.com>, rdell@cbnewsf.cb.att.com (richard.b.dell) writes:
|> In article <jktaberCJ6tx7.9Cw@netcom.com> jktaber@netcom.com (John K. Taber) writes:
|> >My current idea on the IP is that it is meant to guarantee that software 
|> >implementations are at a significant disadvantage to hardware.  
..... stuff deleted
|> I guess my question is .. for anyone who has done the coding, what 
|> percentage of the time is spent in the initial permutation compared 
|> to the rest of the routine?  Unless it was over 25 percent, I wouldn't
|> consider a hardware bit shuffler worthwhile.
Most fast DES implementations take 10 shifts, 5 ands and 15 xors to do the
IP and the same to do the FP.
On a quick test run on a 486/50 (gcc) these 60 instructions cause a %12
slowdown on the des library I use which has 4k S table lookup.  For the
versions of DES with bigger lookup tables, the performace hit would be
a much larger percentage.

eric (giving numbers to speculation)

-- 
Eric Young | now at   eay@mincom.oz.au
           | formerly eay@psych.psy.uq.oz.au
