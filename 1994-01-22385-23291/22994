Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!athena.mit.edu!burt
From: burt@chirality.rsa.com (Burt Kaliski)
Newsgroups: sci.crypt
Subject: Re: RUMOUR: RSA has been broken! Comments please!
Date: 19 Jan 94 16:53:58
Organization: RSA Data Security, Inc.
Lines: 92
Distribution: world
Message-ID: <BURT.94Jan19165358@chirality.rsa.com>
References: <TLB.94Jan13132133@chardonnay.harvard.edu>
	<2h4a60$nd@linus.mitre.org> <WCS.94Jan13210220@anchor.ATT.COM>
	<2h6e88$2vui@ep130.wg2.waii.com>
NNTP-Posting-Host: rsa.com
In-reply-to: mwj@se17.wg2.waii.com's message of 14 Jan 1994 15:37:44 GMT

In article <2h6e88$2vui@ep130.wg2.waii.com> mwj@se17.wg2.waii.com (Michael W. Johnson) writes:

   Pardon me. I missed the early posts on this thread. Who is supposed
   to have broken RSA, and how was it done? Would someone please
   repost this?

Actually, I was just about to fill in the details. The
supposed break is due to Bill Payne, who sent me a copy of
his paper "Public Key Cryptography is Easy to Break" and gave
me permission by phone to post a description.

The quick summary is that his result, while clever, actually
confirms that RSA is still hard to break. Payne says he has
better methods, though, which he hasn't published.


RSA BACKGROUND

An RSA key pair consists of a public key (n,e) and a private
key (n,d), where n, the RSA modulus, is the product of
distinct primes p and q, and where e and d (respectively the
public and private exponents) satisfy the equation

                    ed = 1 mod (p-1)(q-1)

To break RSA (i.e., solve for the private key, given the
public key), one need only find the product (p-1)(q-1),
which is usually denoted phi(n). Given phi(n) one can easily
find p and q, so a method that finds phi(n) also factors n.


PAYNE'S RESULT

According to Fermat's little theorem, for all a, one has

                     a^phi(n) = 1 mod n

Consequently, for a = 2, one has that 2^phi(n)-1 is
divisible by n. One can therefore find phi(n) (or a divisor
of it) by constructing a multiple of n whose binary
representation is all 1's.

Payne's algorithm finds such a multiple by simple binary
operations. The algorithm sets bits of an accumulator to 1
by adding shifts of the modulus n, working from least
significant to most significant bit of the accumulator.
Eventually the accumulator is all 1's, and the number of 1's
yields a divisor of phi(n).

Here is the algorithm:

    x := 0
    i := 0
    while x contains a 0 bit (other than leading bits) do
        if bit i of x is 0
            then x := x + (n << i)
        i := i + 1
    return length of x in bits

By considering only the window of bits starting at bit i,
one can view Payne's algorithm as applying repeatedly the
following permutation on the set {0, ..., n-1}:

                  /  (w + n - 1) / 2   if w is odd
          f(w) = |
                  \  (w - 1) / 2       if w is even

The window w at iteration i corresponds to the accumulator
value x = 2^i w + 2^i - 1. Since the function f is a
permutation, repeated application of f will eventually
return to any given starting value. To find a multiple of n
whose binary representation is all 1's, it suffices to start
with w = 0. When repeated application of f arrives at w = 0
again, the value x = 2^i - 1 will be a multiple of n whose
binary representation is all 1's.

There's only one problem: Finding x can take up to phi(n)
steps! Since phi(n) is almost as large as n, if n is just
tens of digits long (not to mention the hundreds of digits
in RSA), the amount of work is enormous. Indeed, this is an
``exponential-time'' algorithm for finding phi(n), the
slowest kind. While Payne's algorithm is curious, public key
is no easier to break.

-------------------------------------------------------
Burt Kaliski, Chief Scientist 
RSA Laboratories                   (415) 595-7703
100 Marine Parkway, Suite 500      (415) 595-4126 (fax)
Redwood City, CA  94065 USA        burt@rsa.com
-------------------------------------------------------


