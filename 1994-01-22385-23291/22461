Path: msuinfo!agate!bob.eecs.berkeley.edu!spp
From: spp@bob.eecs.berkeley.edu (Steve Pope)
Newsgroups: comp.org.eff.talk,alt.privacy.clipper,sci.crypt
Subject: Re: Please explain the problem with clipper
Date: 2 Jan 1994 23:07:40 GMT
Organization: U.C. Berkeley -- ERL
Lines: 108
Distribution: inet
Message-ID: <2g7k3s$6vn@agate.berkeley.edu>
References: <RLK.94Jan2092235@merlin.think.com> <2g6n5c$4gc@agate.berkeley.edu> <CJ0nnK.2vr@calcite.rhyolite.com>
NNTP-Posting-Host: bob.eecs.berkeley.edu
Xref: msuinfo comp.org.eff.talk:24384 alt.privacy.clipper:1756 sci.crypt:22461

vjs@calcite.rhyolite.com (Vernon Schryver) writes:

>>> Have you ever done a software release?  
>>
>>Yes.
>
>Oh?  Please be specific.  

It was a yes/no question.

> Restrict your answer to binary releases at least
> as large as a complete 4.3BSD port.

Such huffing and puffing.

I'm a hardware type; that is, I was before I became a middle manager. :)
I haven't myself managed a software project that large, but I've been 
on programs whose software element was of that scope.

I haven't seen everything; I've only been in the industry 17 years;
but part of my job is dealing with whining programmers (hope none
of them are reading...) so in this case I believe I've seen
it before.

>The guy with the commercial address evidently knows what he's talking
>about, while the lease impolite thing to be said about the guy with the
>academic address is that he is mistaken and lacks experience.

I see no reason to respond to such a STUPID comment in a delicate 
fashion, but I'll try.

No, scratch that, I won't even try.

In the first place, my commercial address is spp@kbr.com, which
is at Eastman Kodak Federal Systems.  Inferring experience
level, etc. from the site of a person's acocunt is usually
indicative of a weakish grasp of the scientific method.

> No one who has every been alive while within earshot of a major 
> commercial software release would ever say "a few #ifdefs will fix 
> things right up."

> In the real world, you never have "a few #ifdefs".  You have a zillion of
> them, all to fix problems in the previous 157 release cycles and 26
> platforms.

Especially if your project is poorly organized.

To be fair, managing large software developments is an
exceedingly difficult task, and few people can claim to do it with 
a competency that is above reproach.

But here's a hint: you could pick up at least
half a clue if you learn about clearly separating in your mind
the requirements-definition and requirements-driven
parts of the problem, the relationship between these two,
and managing resultant costs accordingly.  

Students of program management point out that requirements
traceability was introduced as a formal management concept precisely
because the government started to perform large software
projects, and noticed that in software engineering specifically
traceability was generally abyssmal -- relative to other
engineering disciplines -- because of the peculiar habits
of software engineers.

For example, in the case at hand:

The requirement to not export DES has
been there since day one in this business.  And DES is
a relatively minor part of the UNIX source.  

Since it's a *small* requirement, that's *always* been there,
and it is by your statements causing disproportionate costs, then 
SOMEBODY along the way screwed up.  Not maybe.  Definitely.

I would guess that the reason for the screw-up is that
the DES-non-export requirement is a *unique* requirement.
Programmers solve equally simple problems all the time,
but this one has a different flavor than most, and
so it can't be solved by rote.  Hence, it gets kludged,
and somebody downstream pays for it.

Your attitude is that this apparent mis-estimate of this cost
element is not a mis-estimate at all, but something that can be
brushed off as "there's no such thing as only a few #ifdefs,
anybody who knows about large software projects knows that..." ...
well, fella, that just doesn't cut it.  Or, maybe it cuts it
in your corner of the world, but it wouldn't in anything I've
ever worked on.

You mention the tension level surrounding major software
releases... ever stop to wonder WHY that is?  I'll bet not.
Could it be that nobody really trusts the project organization,
reporting relationships, etc. in the first place?  Could
it be that this lack of trust is well-founded because these
aspects are poorly conceived and implemented in the first
place.

You claim that "I don't know how difficult it is".  Well.
I claim instead that you have been so embalmed in poorly disciplined 
projects for so long that you don't have the frame of reference
to analyze the situation.

"it's never just a couple of #ifdef's."  That's a red flag
right there that something is seriously amiss.  Attitudinally.

Steve
