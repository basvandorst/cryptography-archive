Path: msuinfo!uwm.edu!vixen.cso.uiuc.edu!sdd.hp.com!caen!malgudi.oar.net!witch!cyberg!fb
Newsgroups: sci.crypt
Message-ID: <45@cyberg.win.net>
Reply-To: fb@cyberg.win.net (Francis Barrett)
From: fb@cyberg.win.net (Francis Barrett)
Date: Fri, 07 Jan 1994 21:22:07 GMT
Subject: Re: RUMOUR: RSA has been broken! Comments please! 
Lines: 61

Derek Atkins <warlord@MIT.EDU> writes...

 >>This is certainly interesting.  I have never been a great fan of
 >>public key systems over conventional encipherment.  Public key
 >>systems depend upon making known an algorithm for computing a
 >>permutation and hoping that an attacker is not able to evaluate
 >>the inverse of that permutation at selected points.  Even in the
 >>general case, this is not obviously an intractible math problem.
 >>We can all remember the knapsack algorithm crashing in flames a
 >>few  years back.

 >No offense, but this reasoning is bogus.

Oh?

 >When you are designing a secure system, you *HAVE* to assume that
 >any potential attacker knows exactly how your system works!

Certainly.  But the consequences of such knowlege are far more ominous
in the case of a public key system where the attacker has both the
algorithm and the public key than they are in the case of conventional
cryptography where the key is kept secret.

To break a conventional cipher given the algorithm but no key or
plaintext, one must recognize the image under the cipher permutation
of the non-random signature of a sizable chunk of plaintext and
determine a specific key which maximizes this signal.  Indeed, given
completely random plaintext, there is no way to tell one key is any
better than another, even given a complete key trial.  Knowing how to
evaluate the inverse of the cipher permutation given the key tells you
nothing you don't already know, since both the encipherment and
decipherment algorithms as a function of the key are public knowlege.

To break a public key system given the public key and algorithm, but
no plaintext, one is provided with considerably more information.  One
now has access to the specific cipher permutation with which the
plaintext was transformed.  If you can figure out how to evaluate the
inverse of this permutation at selected points, you can quickly
recover the plaintext, and even do this for completely random
plaintext which in the case of conventional cryptography is an
intractable problem.

Now of course you are provided with a decipherment algorithm using
another key which is related to the encipherment key by a trapdoor
function.  Enumerating the ordered domain of this function is
deliberately made to have a high bit complexity, which renders it
computationally intractable to invert.  This makes computing the
secret key from the public key a lengthy process.

However, permutations and their inverses have identical bit
complexity, and one is under no obligation to actually use the secret
key as the mechanism for inverting the cipher permutation.  If one can
invert the cipher permutation in a way which leaks no information as
to the value of the secret key, one then has a computationally
efficient "backdoor" into the public key system.

Such a weakness does not exist in conventional cryptography where the
specific cipher permutation used for encipherment depends upon a key
not known to the attacker.  It exists in all public key systems by
construction.


---------------------------------------------------------------
Francis Barrett, F.R.C. |  Thou canst not travel on the path  |
The Cybernetics Guild   |  before thou hast become the Path   |
fb@cyberg.win.net       |  itself.                            |
---------------------------------------------------------------

