Newsgroups: sci.crypt
Path: msuinfo!agate!ames!sgi!wdl1!io!koontzd
From: koontzd@io.lrmsc.loral.com (David Koontz )
Subject: Re: The DES Initial Permutation
Message-ID: <1994Jan5.221733.13966@wdl.loral.com>
Sender: news@wdl.loral.com
Organization: Loral Rolm Computer Systems  
References: <940105181113.026225@DOCKMASTER.NCSC.MIL>
Date: Wed, 5 Jan 1994 22:17:33 GMT
Lines: 93

>From: Grant@DOCKMASTER.NCSC.MIL (Lynn R Grant)

>In recent posts here, I have heard both the opinion that the IP
>is meaningless as far as improving the security of DES, since it
>is known, and that the GOST 28147-89 encryption scheme is weaker
>since it doesn't have an IP function.

>Has the purpose of the DES IP permutation been nailed down?
>(I looked in the FAQ and didn't see it.)  So far, I have not
>found a reason for the IP in Meyer and Matyas or in Denning.

The Initial Permutation is a description of how a byte wide
interface is connected to a 64 bit block (the input block) 
comprised of two 32  bit blocks (L and R) and is a standardization.

Consider a byte wide interface with the bits numbered 1-8.
The even numbered bits go to the L block, and the odd number of bits
go to the R block.

Port			Input	(LR)		Left
 Bit			Block (64 bits)		Block (32 bits)

  2---------------58 50 42 34 26 18 10  2	 1  2  3  4  5  6  7  8
  4---------------60 52 44 36 28 20 12  4	 9 10 11 12 13 14 15 16
  6---------------62 54 46 38 30 22 14  6	17 18 19 20 21 22 23 24
  8---------------64 56 48 40 32 24 16  8	25 26 27 28 29 30 31 32

						Right
						Block (32 bits)

  1---------------57 49 41 33 25 17  9  1	 1  2  3  4  5  6  7  8
  3---------------59 51 43 35 27 19 11  3	 9 10 11 12 13 14 15 16
  5---------------61 53 45 37 29 21 13  5	17 18 19 20 21 22 23 24
  7---------------63 55 47 39 31 23 15  7	25 26 27 28 29 30 31 32

Input Byte	   8  7  6  5  4  3  2  1


Consider the Left or Right block being comprised of 4 eight bit registers
serially loaded from the byte wide interface, and during actual encryption
either being parallel loaded ( R -> L and f(R,K) XOR L -> R ) or the 
previous value being held while the key schedule double shifts.  During
output (Final Permutation) the shift registers are shifted serially, the 
Left block going to odd bits and the Right block going to even bits 
(swapping L and R for decryption).  All this back in the days when putting 
all 8 S boxes on the same piece of silicon was pushing the state of the art
(see Fairchild 9414 DES chip set).

Right			  Output (R16L16)		     Port
Block (32 bits)		  Block (64 bits)		      Bit

 1  2  3  4  5  6  7  8	   1  2  3  4  5  6  7  8--------------2
 9 10 11 12 13 14 15 16    9 10 11 12 13 14 15 16--------------4
17 18 19 20 21 22 23 24   17 18 19 20 21 22 23 24--------------6
25 26 27 28 29 30 31 32   25 26 27 28 29 30 31 32--------------8

Left
Block (32 bits)

 1  2  3  4  5  6  7  8   33 34 35 36 37 38 39 40--------------1
 9 10 11 12 13 14 15 16   41 42 43 44 45 46 47 48--------------3
17 18 19 20 21 22 23 24   49 50 51 52 53 54 55 56--------------5
25 26 27 28 29 30 31 32   57 58 59 60 61 62 63 64--------------7

Output Byte		   8  7  6  5  4  3  2  1

From Fips 46:

Final Permutation IP-1:
			  Output Byte
40  8 48 16 56 24 64 32		1
39  7 47 15 55 23 63 31		2
38  6 46 14 54 22 62 30		3
37  5 45 13 53 21 61 29		4
36  4 44 12 52 20 60 28		5
35  3 43 11 51 19 59 27		6
34  2 42 10 50 18 58 26		7
33  1 41  9 49 17 57 25		8

 1  2  3  4  5  6  7  8	Port Bit

The Initial permutation selects odd bits for one block and even bits
for the other.  The Final permutation swaps the two blocks.  Each is
done with only 8 connections (byte wide interface).  Note that in
a hardware implementation permutations don't cost anything and are
simply connective descriptions.

One might ask why odd bits in one block and even bits in the other.

GOST would be the weaker for not having the relationship between
input (however wide) and assembled blocks defined.  How can one
implementation be compatible with another without accepted convention
beyond the specification?
