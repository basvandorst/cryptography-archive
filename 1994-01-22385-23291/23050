Newsgroups: sci.crypt
Path: msuinfo!netnews.upenn.edu!dsinc!vu-vlsi.ee.vill.edu!kasturi
From: kasturi@vu-vlsi.ee.vill.edu (Srinivasa M. Kasturi - EE8460 Spring 1991)
Subject: Re: Old Codes
Message-ID: <CK0504.F8C@vu-vlsi.ee.vill.edu>
Followup-To: kasturi@vu-vlsi.vill.edu
Organization: Villanova University
Date: Fri, 21 Jan 1994 22:55:15 GMT
Lines: 99


References: <CJH75y.16ML@hawnews.watson.ibm.com> <proff.758389755@suburbia> <CJn13n.MLC@vu-vlsi.ee.vill.edu>

In <jktaberCJsyDq.GH@netcom.com> John (Taber) writes:

:> Srinivasa M. Kasturi - EE8460 Spring 1991 (kasturi@vu-vlsi.ee.vill.edu) wrote:
:> If say IW is your input word, OW your output word then if

:>OW =  ( { [ IW XOR Key1 ] +AddLeftToRt Key2} +AddRtToLeft Key3)

:> and if need be iterate more than once ......
[some stuff deleted]
:> with the second reverse addition step this [avalanche] is what is achieved.
:> It is evident from the generation and the propogation of the carry bit.
:> (am still working on better way of expression of details).

:> For real security tho (not very conveneint to do with paper and
:> pencil - or on the back of an envelope) one can use an LFSRG
:> (linear feedback shift register) at the output - so that no
:> patterns can be isolated and attributed any individual stages.

:Srini, if I'm reading your encryption scheme right, it looks like a
:digraphic substitution to me.  Your key is devious but isn't it true
::that whenever IW is enciphered, it always enciphers to the same cipher
:digraph (whatever that may happen to be)?

AND

Carl (Ellison) (cme@sw.stratus.com) writes:

:In article <CJn13n.MLC@vu-vlsi.ee.vill.edu> you write:

:>OW =  ( { [ IW XOR Key1 ] +AddLeftToRt Key2} +AddRtToLeft Key3)

:How do you define the AddLeftToRt and AddRtToLeft operations?
:If they're straight addition, the cipher is linear and not secure -- and
:additional repititions won't help.

---
AddLeftToRt = Addition with carry propogation from left to right with
right most carry drop

AddRtToLeft = Addition with carry propogation from right to left with
left most carry drop

I am a little confused as to what would make this approach linear.

As I see, the (XOR, +AddLeftToRt, +AddRtToLeft) operation result can be
expressed as below:

If say the IW = a b c (three bits), then after the above operations 
(more precisely after second iteration), each bit output can be represented 
as below:

	say 	^ = XOR
		. = AND
		K_a_i = coefficient of a for the ith output bit
     
OW  	=  	a . K_a_i  ^   b . K_b_i  ^   c . K_c_i  ^   ab . K_ab_i  ^   
bit i 		ac . K_ac_i  ^  bc . K_bc_i  ^   abc . K_abc_i  ^  K_0_i

Since this expression is as exhaustive as it can be, the output
does not appear to be a smaller diagraph (input to output 
mapping).  This is the case since the coefficients are entirely
dependent on the key parameters.  As yet I have not figured out 
any consistent relation so that if one coefficient is known 
others can be deduced :)


This is just an example for 3 bit words - gets cumbersome on
any size white paper ;)

For example if say [p q r] is added left to right and [i j k] is 
then added right to left, these are the (incomplete) bitwise outputs
after one iteration

OW_1 = a ^ b(q^j) ^ cqr ^ abp ^ bc(r^q) ^ acpqr ^ abcpq ^ (p^i).....

OW_2 = ap ^ b(1^qr) ^ c(r^k) ^ abpr ^ acpq ^ bcq ^ abcp ^ j ......

OW_3 = apq ^ bq ^ c ^ abp ^ (k^r)

And an LFSRG at the output run for atleast the word size prevents
analysis by trying to associate patterns (of hevier concentration
of 1s or 0s to one side) with a particular operator.

Would much appreciate any suggestions from you guys.
Am sure I may be missing significant areas !)


-- Disclaimer: Ideas expressed are my own and not those of either --
	    my employer or my affiliations unless otherwise stated
kasturi@vu-vlsi.vill.edu  	TRW, 2701 Prosperity Avenue
703-876-4444 			Fairfax, VA - 22031
-- 
-- Disclaimer: Ideas expressed are my own and not those of either --
	    my employer or my affiliations unless otherwise stated
kasturi@vu-vlsi.vill.edu  	TRW, 2701 Prosperity Avenue
703-876-4444 			Fairfax, VA - 22031
