Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!news.moneng.mei.com!howland.reston.ans.net!newsserver.jvnc.net!yale.edu!cs.yale.edu!news-mail-gateway!daemon
From: Grant@DOCKMASTER.NCSC.MIL (Lynn R Grant)
Subject: The DES Initial Permutation
Message-ID: <940105181113.026225@DOCKMASTER.NCSC.MIL>
Sender: Grant.CA1@DOCKMASTER.NCSC.MIL
Organization: Yale CS Mail/News Gateway
Date: Wed, 5 Jan 1994 18:11:00 GMT
Lines: 48

Has the purpose of the DES IP permutation been nailed down?
(I looked in the FAQ and didn't see it.)  So far, I have not
found a reason for the IP in Meyer and Matyas or in Denning.

In recent posts here, I have heard both the opinion that the IP
is meaningless as far as improving the security of DES, since it
is known, and that the GOST 28147-89 encryption scheme is weaker
since it doesn't have an IP function.

One possibile reason for the IP that occurred to me is to reduce
the regularity of coded character data.  For example, upper case
EBCDIC letters all have the top two bits on;  in ASCII the top two
bits are 10.  I can imagine that having a one show up every eight
bits in the input might not be a good thing.  (This is gut feel;
I'm not comfortable enough with the life of a bit as it goes
through the S-boxes to say for sure.)

The IP collects the corresponding bits from each byte into a single
byte.  That is to say, the first byte has all the 2 bits, the second all
the 4 bits, etc., in this order: 2, 4, 6, 8, 1, 3, 5, 7.  So, with
an EBCDIC input, instead of each byte looking like 11xxxxxx, you
would get eight bytes like this FF xx xx xx FF xx xx xx.  I can imagine
that this would be better.

So why doesn't the GOST spec use an IP?  I can imagine that they would
have the same problem: it appears that Cyrillic ASCII has the top three
bits on in upper case letters.  (In Cyrillic EBCDIC, I beleive the U.C.
letters have the top bits as 01, but my notes are fuzzy on this.)
I suppose either the carries generated by the mod 2**32 addition even
this out, or the choice of keys does, or they didn't think of it.

Now, if my assumption is correct, the IP wouldn't help when you are
encrypting binary streams, but it wouldn't hurt anything, either.
And the inverse IP just puts things back right so decryption will
work.

Does this make any sense?  Has it all been discussed and determined
before somewhere?  (If so, point me to it and I will slink off into
the sunset with my tail between my legs.)

Lynn

---------------------------------------------------------------------------
Lynn Grant                  | You don't have to be the best trombone
Grant@DOCKMASTER.NCSC.MIL   | player in the world; you just have to
                            | be the best trombone player in the bar.
                            |   --Fred Grant
---------------------------------------------------------------------------
