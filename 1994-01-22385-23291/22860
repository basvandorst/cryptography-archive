Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Subject: Penknife Systems Design (LONG)
Message-ID: <1994Jan14.075846.15576@cactus.org>
Keywords: cipher midlevel design
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
Distribution: usa
Date: Fri, 14 Jan 1994 07:58:46 GMT
Lines: 248



 Penknife System Design

      Terry Ritter
      ritter@cactus.org



 COMPRESSIBLE CIPHERTEXT

 In the Penknife cipher design and analysis article I stated that the
 Penknife ciphertext is compressible, and I had an email response
 that pointed out that compression would destroy error-resilience.
 The intent of my comment was simply to point out that the oft-
 stated idea that "ciphertext cannot be compressed" is not absolute.
 Mailable PEM ciphertext should compress similarly.  However, since
 Penknife is an email-oriented cipher with no binary output mode,
 compression could make the cipher more acceptable for local storage,
 as might occur in enciphered message archives.


 CIPHER VALUE WHICH IS NON-ENGINE AND NON-INTERFACE

 The comment did bring out, however, the fact that the analysis
 document was concerned with the cipher itself, the part I normally
 call the "cipher engine."  This is what most of us normally think
 of as a cipher.  But, by itself, the cipher engine is perhaps the
 smaller portion of the value of a cipher program.  This posting
 is concerned with the Penknife design where more cipher value is
 located: above the cipher engine, yet below the user interface.


 CONSEQUENCES FROM INDEPENDENT CIPHERTEXT LINES

 Interesting consequences become available when building upon a
 cipher engine which ciphers lines independently.  One of these
 occurs when Penknife adds a new key to an alias file.


 ADDING NEW ALIAS KEYS

 An alias file, when plaintext, is just a file of text lines.  Each
 line starts out with an "effective" date, then an alias "tag," and
 then the key; the whole line is text.  To add a new key to an alias
 file, we just place the new line at the start of the file.  The
 interesting part is that we can do this simply by prepending the
 *enciphered* new line to the existing *enciphered* file, *without*
 having to decipher the alias file.  That is, under reasonable
 conditions, the concatenation operation is invariant through
 ciphering.


 ERROR-RESILIENCE IMPLIES MULTIPLE BLOCKS PER FILE

 Invariance of (special case) concatenation through ciphering is
 basically a consequence of error-resilience.  Clearly, once
 we have found a ciphertext block and are deciphering, a couple of
 badly-damaged lines is going to look a lot like the end of the
 block.  Of course, data damage will lose data, but we want to be
 able to recover when we encounter the rest of that original block.
 The implication of this is that the deciphering logic needs to
 support multiple ciphertext blocks in a single file.


 PENKNIFE CIPHERTEXT BLOCKS

 A Penknife ciphertext block is just a sequence of Penknife lines,
 there is no --BEGIN CIPHERTEXT-- or --END CIPHERTEXT-- bracketing.
 But, internally, the last four bytes of a block are the overall CRC.
 Thus, the decipher process not only must differentiate plaintext
 from ciphertext (to find the start of ciphertext in an email message
 with headers), but also identify the end of a block, both to avoid
 .sigs and also to check the CRC and delete the CRC bytes from the
 output.


 PLAINTEXT "PASS THROUGH"

 Given that the ability to differentiate ciphertext from plaintext
 is required, it is reasonable to support the ability to "pass
 through" plaintext, normally headers and .sigs.  This allows one
 to keep the email headers and .sigs together with the deciphered
 text.


 APPEND MODES

 Since error-resilience effectively requires the ability to decipher
 a file containing multiple ciphertext blocks, we can consider
 creating such files when enciphering.  Penknife has several "append"
 modes, which can encipher multiple files (using wildcard or explicit
 specification) into a single ciphertext file holding multiple
 ciphertext blocks.  This could be appropriate for archive usage.
 The same idea could be used to intermix areas of plaintext and
 ciphertext for some reason, perhaps to comment on the original
 messages, or annotate their general content in a censored way.


 INTERNET SIZE LIMITS

 A related advantage is a flexible way to handle Internet message
 size limits.  Penknife can be commanded to break a large file into
 multiple ciphertext files, each a single block of just under 48K.
 These files can be sent by email, and then combined at the far end,
 and deciphered as a single multi-block file.  Normally, these files
 need not be "cleaned up" at all, but can include headers and .sigs,
 and yet the resulting file will be correct to the byte (and we will
 know this, because the CRC on every block is checked and announced).
 But Penknife also includes an explicit multi-file append mode, so
 that the files need not be concatenated first.


 USER KEY ALIASES

 Perhaps the main area of extra value in the Penknife cipher are the
 alias files mentioned above.  A Penknife alias file is an enciphered
 file containing keys which can be selected with an open alias.
 Without an alias file, the user must remember *multiple* keys (and
 keys should not be written down!).  Penknife supports User Keys of
 arbitrary text and length, but remembering these keys is a problem.
 Moreover, because of the risk of entry error, the user must enter
 each User Key twice.  But *with* an alias file, the user only need
 remember the single key for the alias file; the aliases themselves
 can be public.  And the alias key need only be entered once, because
 if the alias key is entered wrong, the alias is not found, the
 program errors out, and nothing bad happens.


 DATED ALIASES

 Even more value is gained when "effective" dates are added to each
 alias line.  Now the alias file can contain multiple keys for each
 alias, each becoming effective at a particular date.  Indeed, many
 keys can be produced in advance for each particular alias, and they
 will automatically become effective when their effective date is
 reached, without user action.

 Naturally, messages ciphered on or about a key-change date may need
 access to the previous or next cipher date, and this is available
 with commands.  But the ability to update the main ciphering keys
 periodically is a very serious security advantage.  (These are not
 "message keys": recall that the cipher itself has a 4-byte random
 "line key" in each and every ciphertext line; alias keys are the
 main User Key of the cipher.)


 FILE DATED ALIASES

 Provided that received messages keep their original file dates, a
 mode is provided to select the appropriate alias key based on the
 file date.  (In wildcard operation, the cipher could re-initialize
 under a new key for each and every file.)  This is an automatic
 facility for handling stored ciphertext files in the presence of
 periodic key changes.  Each file--with exactly the same alias--
 could be ciphered under a completely different key, and yet be
 properly deciphered, completely automatically.


 ALIAS KEY GENERATION

 Since keys can have been exposed without outside indication, User
 Key updates are probably a fact of life in every serious cipher
 system.  Penknife includes an option to create a random key for
 use under a given alias and date.  The random key is generated
 first from the line-key RNG (which is initialized from the DOS
 high-speed timer before and after key-entry), and then enciphered.
 Thus, the resulting random key looks like ordinary 64-symbol
 ciphertext.  Then the alias line is itself enciphered.


 SECRET-KEY TRANSPORT

 Part of key-generation process is to combine the same new User Key
 and date, with a different alias, under a transport key.  Typically,
 this would be a transient key used only to protect a key during
 delivery.  Typically, transport would occur on floppy, and delivery
 could occur at meetings, through traveling family, friends, or
 employees, regular mail, or express delivery services.  However,
 since the ciphertext is just 64-symbol text, it could actually
 be delivered on the phone, by modem or FAX.  The transport key
 would then be delivered by a separate channel, if only over the
 phone.

 Secret-key delivery is always awkward, though automatic User Key
 generation and transport files help a lot.  But secret-key ciphers
 are also not susceptible to weird "man-in-the-middle" or "spoofing"
 attacks, in which information can be exposed without the cipher
 itself being broken.


 DOES NOT INFRINGE PUBLIC-KEY PATENTS

 Some businesses take this seriously.


 FILE OVERWRITE

 A different kind of value is provided in a mode which attempts to
 minimize the amount of plaintext material left on the disk.  This
 mode overwrites the plaintext file with the (larger) ciphertext.
 Overwriting occurs by opening the plaintext file for update instead
 of creating a new file (which implicitly "erases" any existing
 file of the same name, thus releasing the plaintext storage).  For
 the versions of DOS which have been examined, file update does
 indeed retain the originally-allocated store, and the ciphertext
 overwrite does indeed hide the original plaintext.

 It is certainly true that this process cannot hide data which may
 be exposed due to thermal track-shift effects, and it could be
 ineffective under some versions of DOS or similar OS's, or under
 some types of disk cache.  Nevertheless, this approach does appear
 to work in most cases, and so is a significantly better option
 than simply accepting the ordinary "erase" or "delete" which
 clearly are almost always ineffective.  Indeed, Penknife "one-
 filename" mode can be the basis for a secure "erase" (first
 encipher, then delete as usual).  Users who care are advised to
 check operation in their systems using a sector-level disk utility.

 In any case, the one-filename mode minimizes the creation of extra
 files, at the expense of increased risk of using the wrong key.
 However, when a wrong key is used in decipher, the CRC will be bad,
 the intermediate file will hold the original ciphertext and will
 be retained, so that the ciphertext can be recovered.  (This
 cannot be automatic, because damaged files will also have a bad
 CRC, and we may have to work with what we get.)


 PENKNIFE BATCH

 Penknife also supports enciphered files containing Penknife
 command lines.  Because the batch command set is virtually the
 same as the command-line capabilities, batch commands can be
 checked interactively.


 OTHERS

 Obvious and expected capabilities, like wildcard file selection, and
 directory-tree scanning are included, as are file and byte counts,
 time in hundredths, and bytes-per-second statistics, but we are now
 getting into user-interface issues.


 ---
 Terry Ritter   ritter@cactus.org


