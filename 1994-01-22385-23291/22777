Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!usc!elroy.jpl.nasa.gov!decwrl!netcomsv!netcom.com!phr
From: phr@netcom.com (Paul Rubin)
Subject: Re: The DES Initial Permutation
Message-ID: <phrCJHG4H.LAp@netcom.com>
Organization: Netcom - Online Communication Services (408 241-9760 guest)
References: <1994Jan7.110304.7359@devvax.mincom.oz.au> <phrCJGMro.5Bz@netcom.com> <1994Jan11.192225.27893@wdl.loral.com>
Date: Tue, 11 Jan 1994 20:41:04 GMT
Lines: 45

In article <1994Jan11.192225.27893@wdl.loral.com> koontzd@io.lrmsc.loral.com (David Koontz ) writes:
>>From: phr@netcom.com (Paul Rubin)
>>
>>In article <1994Jan7.110304.7359@devvax.mincom.oz.au> eay@mincom.oz.au (Eric
>>You
>>ng) writes:
>>>zMost fast DES implementations take 10 shifts, 5 ands and 15 xors to do the
>>>IP and the same to do the FP.
>>>On a quick test run on a 486/50 (gcc) these 60 instructions cause a %12
>>>slowdown on the des library I use which has 4k S table lookup.  For the
>>>versions of DES with bigger lookup tables, the performace hit would be
>>>a much larger percentage.
>>
>>I would have thought the obvious way to do the IP/FP was
>>        union {long int w32[2], byte[8]; };
>>        for (i = 0; i < 8; i++) {
>>                pblock.w32[0] |= table1[block.byte[i]];
>>                pblock.w32[1] |= table2[block.byte[i]];
>>        }
>>with the loop unrolled, of course.  I think it comes out a few
>>instructions shorter if the right address modes are used.
>
>
>Seems to be missing the index into the two tables (table1,table2) showing
>which byte the input is:
>
>table1[i][block.byte[i]], etc., each byte of input goes to unique locations
>in two w32s (R and L blocks).
>
>The tables are 256 (byte size) X 8 (number of bytes contributing to each
>block) X 4 (bytes in a w32):
>
>unsigned long ip_table1[8][256], ip_table2[8][256];
>unsigned long fp_table1[8][256], fp_table2[8][256];
>
>or
>
>unsigned long ip_table[8][256][2];
>unsigned long fp_table[8][256][2];
>
>for keeping keeping them close together.

Yes, thanks for the correction.  This is 32 kbytes of tables,
which is somewhat smaller than the S/P tables in a fast implementation,
so it's not too bad.
