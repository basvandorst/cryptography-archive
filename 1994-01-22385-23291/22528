Newsgroups: sci.crypt
Path: msuinfo!agate!ames!saimiri.primate.wisc.edu!news.doit.wisc.edu!decwrl!netcomsv!netcom.com!phr
From: phr@netcom.com (Paul Rubin)
Subject: Re: Short RSA public exponents?
Message-ID: <phrCJ3ruv.AB@netcom.com>
Organization: Netcom - Online Communication Services (408 241-9760 guest)
References: <BURT.94Jan3163723@chirality.rsa.com>
Distribution: sci
Date: Tue, 4 Jan 1994 11:28:07 GMT
Lines: 27

In article <BURT.94Jan3163723@chirality.rsa.com> burt@chirality.rsa.com (Burt Kaliski) writes:
>For reference, RSA cryptography involves two keys: a public key (n,e)
>and a private key (n,d), where n is the modulus, e is the public
>exponent, and d is the private exponent. Choosing a short value for
>the public exponent e improves performance, but some have expressed
>concern that it reduces security.
>
>-----
>[[excerpt from message to Bruce Schneier]]
>
>1. Using low values for e, the public key is only insecure if linearly
>dependent messages are encrypted with e(e+1) different public keys.
>If there are fewer than that many messages, or if the messages are
>unrelated, there is no problem.

I haven't read Hastad's paper and don't know what his attack is, but
the following one seems obvious: say e=3, as is common practice.  Now
let x be the message and say it is encrypted with 3 public keys.
The encrypted messages are y1=x^3 mod N1, y2=x^3 mod N2, and y3=x^3 mod N3.
Now it seems to me that since x must be less than any of the N's,
knowing the y's and N's lets you recover x^3 (not mod anything)
because of the Chinese remainder theorem.  Then you just take the
cube root to get back x.  This also works for other values of e.
I don't know if this is the same attack as Hastad's, but
you only need e encrypted messages, not e(e+1).

I agree that adding random padding fixes this problem.
