Path: msuinfo!harbinger.cc.monash.edu.au!bunyip.cc.uq.oz.au!iris.mincom.oz.au!devvax.mincom.oz.au!hew!eay
From: eay@mincom.oz.au (Eric Young)
Newsgroups: sci.crypt
Subject: Re: The DES Initial Permutation
Message-ID: <1994Jan10.094819.7361@devvax.mincom.oz.au>
Date: 9 Jan 94 23:48:19 GMT
References: <940105181113.026225@DOCKMASTER.NCSC.MIL> 
 <jktaberCJ6tx7.9Cw@netcom.com><CJ7tnv.AB2@cbfsb.cb.att.com> <44@cyberg.win.net> <jktaberCJAJ28.5p4@netcom.com>
Organization: Mincom Pty. Ltd.
Lines: 29
Nntp-Posting-Host: morgoth.mincom.oz.au

In article <jktaberCJAJ28.5p4@netcom.com>, jktaber@netcom.com (John K. Taber) writes:
|> Francis Barrett (fb@cyberg.win.net) wrote:
|> Hmm.  Could somebody send me the Hoey tricks for the IP?  I think
|> Outerbridge may have sent it to me several years ago, but I don't
|> know where it is.  I must not have studied it hard enough.
Using the Macro
#define PERM_OP(a,b,t,n,m) ((t)=((((a)>>(n))^(b))&(m)),\
        (b)^=(t),\
        (a)^=((t)<<(n)))
the IP becomes (for unsigned long r,l,tmp;)
        PERM_OP(r,l,tmp, 4,0x0f0f0f0f);
        PERM_OP(l,r,tmp,16,0x0000ffff);
        PERM_OP(r,l,tmp, 2,0x33333333);
        PERM_OP(l,r,tmp, 8,0x00ff00ff);
        PERM_OP(r,l,tmp, 1,0x55555555);
with r and l reversed in the output.  (The version of DES this is from
uses little endian byte order internally so this may need to be modified
for other DES implementations :-)

For more of an explanation (and some perl scripts that show the
operations work), have a look in des_locl.h in the libdes package that
was posted to comp.sources.misc volume40.
This xor trick can also be used to do some of the operations in the
key schedule generation.

eric
-- 
Eric Young | now at   eay@mincom.oz.au
           | formerly eay@psych.psy.uq.oz.au
