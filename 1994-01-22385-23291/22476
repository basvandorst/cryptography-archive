Path: msuinfo!agate!spool.mu.edu!think.com!news!rlk
From: rlk@merlin.think.com (Robert Krawitz)
Newsgroups: comp.org.eff.talk,alt.privacy.clipper,sci.crypt
Subject: Re: Please explain the problem with clipper
Date: 2 Jan 94 22:35:42
Organization: Thinking Machines Corporation, Cambridge Mass., USA
Lines: 99
Distribution: inet
Message-ID: <RLK.94Jan2223542@merlin.think.com>
References: <CJ0nnK.2vr@calcite.rhyolite.com> <strnlghtCJ0sw8.Lr0@netcom.com>
	<CJ1024.482@calcite.rhyolite.com> <2g80hp$8e7@agate.berkeley.edu>
NNTP-Posting-Host: merlin.think.com
In-reply-to: spp@bob.eecs.berkeley.edu's message of 3 Jan 1994 02:39:53 GMT
Xref: msuinfo comp.org.eff.talk:24401 alt.privacy.clipper:1771 sci.crypt:22476

In article <2g80hp$8e7@agate.berkeley.edu> spp@bob.eecs.berkeley.edu (Steve Pope) writes:

   >Anyone who claims that building multiple releases of non-trivial software
   >is easy or cheap or even generally practical is obviously ignorant of the
   >facts of life in the business as it is practiced in the last decades of
   >the 20th century.  

   Nobody said trivial or cheap, but one would hope that software
   vendors have a configuration requirement of *this* magnitude
   firmly in hand.

This is a particularly difficult requirement, for a reason I didn't
think of last time around.  The problem is that in this case it is
essential to refrain from distributing a component of the system, or to
distribute an entirely different component.

Normally when one produces a CD-ROM or a tape, one includes every option
on the tape and the customer selects the system components that are
needed.  In the case of, say, Sun, all of the internationalization
features are distributed and the customer selects the correct choice at
installation time.

However, in the case of crypto stuff, Sun may not distribute this on the
same CD, but instead must distribute a different CD.  That increases the
workload.

Another problem is that the crypto stuff is often distributed rather
widely within an operating system.  Anything that uses secure RPC or
secure IP in general (which includes the kernel), or that handles
authentication, uses crypto.  Some of this can be distributed -- the
stuff that handles /etc/passwd can be exported, since it's a one way
system that cannot be subverted to do decryption -- but the network
encryption stuff can't.  As I pointed out, this has rather far-flung
ramifications; even something like rarpd, which merely does address
translations, uses it.

Shared libraries do not entirely eliminate this problem, as it turns out.

   I mean, if XYZ Software Inc. can't manage to keep a handle on
   the non-export requirement, how in the HELL could you trust
   them to write a filesystem?  Or respond to the international
   market in the first place?

Filesystems are extremely difficult and delicate things.  Earlier
versions of the Unix filesystem were not even remotely robust -- in 4.2
BSD, rebooting the system, even with a "clean" shutdown, was a
crapshoot.  Likewise, internationalization has been a very tricky issue,
and despite a lot of work by a lot of people, there are still a lot of
things that aren't handled right.  This requirement is a different beast
from the other requirements -- with internationalization, one possible
option is to distribute everything and let the customer pick which
option is appropriate (e. g. the same CD-ROM is shipped to France and
England, and the correct option is picked on-site).  This means a single
release.  But the crypto stuff cannot be handled in this way -- it MUST
NOT BE DISTRIBUTED OUTSIDE OF THE US.  This requires two separate CD's,
with two separate versions of everything that uses crypto.  This is not
the same thing as one release with different configuration options!

I understand what you're trying to say, but you're wrong.  The
distinction between one release that is configured at installation time
and multiple releases is subtle, so I don't particularly blame you for
not seeing it, but it's a very real distinction.  All software vendors,
and I include organizations such as the Free Software Foundation and
individuals such as Larry Wall, go out of their way to avoid having to
do multiple releases.  I've seen some truly ingenious installation
scripts written to avoid having to do multiple releases for different
platforms, because the cost of releasing software is so astronomically
high.

   You're skating on thin ice in this discussion -- playing up
   your supposed expertise and experience, whilst not making much
   sense.

On the contrary, he's making perfect sense to someone (me) who has dealt
with these issues.  This makes perfect sense to anybody who has done
releases of software products in which the user has any say whatsoever
in the operation of the system, which generally doesn't apply to
embedded systems.  You're trying to argue an issue that you lack
experience in, and it shows.

   > Like many "real life"
   > things, the differences are so huge it is probably necessary to 
   > experience them to comprehend.

   If the person doing the experiencing does not have
   a penchant for logical, scientific thought, not much
   is gained.

Every software engineer worthy of the title has learned through long,
sad experience that the release process is the most painful part of
dealing with software.  Design and implementation are a piece of cake
compared to the release process.  Don't look down on those who have
practical experience with this, please.
--
Robert Krawitz <rlk@think.com>	OS/IO Software Engineer	(617)234-2116
Thinking Machines Corp.		245 First St.	 Cambridge, MA  02142

Member of the League for Programming Freedom -- mail lpf@uunet.uu.net
Tall Clubs International  --  tci-request@think.com or 1-800-521-2512
