Newsgroups: sci.crypt
Path: msuinfo!uchinews!newncar!elroy.jpl.nasa.gov!swrinde!cs.utexas.edu!howland.reston.ans.net!pipex!pavo.csi.cam.ac.uk!cam-orl.co.uk!aph
From: aph@cam-orl.co.uk (Andrew Haley)
Subject: Re: Randomness of a bit string
Message-ID: <1994Jan25.180004.3344@infodev.cam.ac.uk>
Sender: news@infodev.cam.ac.uk (USENET news)
Nntp-Posting-Host: quince.cam-orl.co.uk
Organization: Olivetti Research Ltd, Cambridge, England.
X-Newsreader: TIN [version 1.2 PL2]
References: <2hsb29$8ol@umcc.umcc.umich.edu> <1994Jan24.124537.2622@bradford.ac.uk> <2i0r8p$cte@transfer.stratus.com> <2i24fg$mop@jaws.cs.hmc.edu>
Date: Tue, 25 Jan 1994 18:00:04 GMT
Lines: 33

Eli Brandt (ebrandt@jarthur.cs.hmc.edu) wrote:
: In article <2i0r8p$cte@transfer.stratus.com>, Carl Ellison <cme@ellisun.sw.stratus.com> wrote:
: >One possible definition:
: >
: >a cryptographically secure PRNG is one such that no possible program,
: >knowing the structure of the PRNG and all of its output bits so far, can
: >guess the next output bit with anything better than probability 1/2.

: Amendment: make that "guess in a reasonable amount of time".  This
: disallows brute-force searches.  Formally, require that the problem
: of deciding the next bit not be in BPP, for example.

The problem with this discussion is that the phrase "a cryptographic-
ally secure PRNG" is not well defined.  To formalize things a bit: The
concept of a _perfect_ random number generator was introduced by
Blum, Micali, and Yao.  A generator is _perfect_ iff it passes all
polynomial time statistical tests, i.e. the distribution of output
sequences cannot be distinguished from the uniform distribution of
output sequences of the same length.

So far, no generator has been proved to be perfect.  However, it is
possible to construct a perfect generator if you assume the security
of RSA.  In [1], Schnorr and Micali show how this may be done.  The
nice thing about this method is that it doesn't consume vast
computational resources; their generator is almost as efficient as a
linear congruential generator of the same modulus size.

Andrew.


[1] Schnorr and Micali, "Efficient, Perfect Random Number Generators,"
proceedings of Crypto '88 ('89 ?)

