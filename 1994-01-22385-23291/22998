Path: msuinfo!agate!news.Brown.EDU!noc.near.net!news.delphi.com!davesparks
From: davesparks@delphi.com (Dave Sparks)
Newsgroups: sci.crypt
Subject: MD5 usage
Date: 20 Jan 1994 02:10:47 GMT
Organization: Delphi Internet Services Corporation
Lines: 24
Message-ID: <9401192104591.davesparks.DLITE@delphi.com>
NNTP-Posting-Host: delphi.com

When using a hash function, such as MD5, to "randomize" 
semi-random alphanumeric data, is there a rule of thumb as to how 
large of an input buffer of data is necessary to produce 
reasonably random output?  Intuitively, it would seem that more 
is better, but that at some level you reach a point of 
diminishing returns and overkill.  Perhaps it's related to some 
relationship between the information content of the input vs. the 
output?

Let me cite a specific application I'll call the "Blue Plate 
Special".  Let's say that I desire to generate a one-time-pad for 
cryptographic purposes.  To create this pad, I observe passing 
vehicles on a busy street, recording license numbers and makes, 
perhaps using some arbitrary filter, such as only recording every 
tenth vehicle, recording only blue cars, expired tags, 
out-of-state plates, etc. (or some combination thereof).  All 
this data would then be concatenated into a buffer and used as 
input to the MD5 algorithm (or other hashing function), with each 
16 bytes of output forming a portion of the final one-time-pad.  
(The output could also be used to seed an RNG, etc.)

Is there any inherent weakness in this method?  How many bytes of 
license/make info per 128 bits of output would be reasonable?

