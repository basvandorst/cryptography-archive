Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!math.ohio-state.edu!howland.reston.ans.net!cs.utexas.edu!utnut!utzoo!telly!problem!vigard!mdf
From: mdf@vigard.mef.org (Matthew Francey)
Subject: Re: New? crypto system
References: <940102200709466@cynosure.clark.net> <2g844q$5il@rand.org> <2ge11v$q7k@news.delphi.com> <2gepe8$9p6@rand.org>
Organization: The International Bank of Intermod
Date: Thu, 6 Jan 1994 15:23:40 GMT
Message-ID: <1994Jan6.152340.28291@vigard.mef.org>
Lines: 64

jim@rand.org (Jim Gillogly) writes:

>I should mention that the Qbasic program I described as a Vigenere isn't:
>my eyes tend to glaze over when I'm reading BASIC of any sort, and I stopped
>reading it before I noticed that he XORs the next byte of key with the
>current byte of plaintext after XORing the current byte of key with
>the current byte of plaintext, so it's the equivalent of a Vigenere
>autokey cipher instead of a straight Viggy.

actually, it is XORing the *next* byte of left-rotated key with the
current plaintext byte.  here is very simple C equivalent for those who
find BASIC a corruption of the morals of society:

#include <stdio.h>

int	key[100], nkey;

int
main(int argc, char **argv)
{
	int	x, y, k;
	char	*s;

	for(s = argv[1]; *s != '\0'; ++s) {
		key[nkey++] = 0xff & (int) *s;
		*s = '\0';
	}

	if(argc == 2) {
		/*
		 * encrypt
		 */
		while((x = getchar()) != EOF) {
			y = x ^ key[k++];
			putchar(y);
			if(k == nkey)
				k = 0;
			key[k] = (((key[k] << 1)&0xfe)|((key[k] >> 7)&0x01))^x;
		}
	} else {
		/*
		 * decrypt
		 */
		while((y = getchar()) != EOF) {
			x = y ^ key[k++];
			putchar(x);
			if(k == nkey)
				k = 0;
			key[k] = (((key[k] << 1)&0xfe)|((key[k] >> 7)&0x01))^x;
		}
	}
	return 0;
}

>Thus the attack of choice is crib-dragging rather than IC followed by
>alphabet sliding as I was claiming earlier.  At least I -think- that's
>what it does...  I'm not very fluent in BASIC (Gott sei dank!).

yes.  if i find time, i will code something up that does just this on the
"test.txt" posted recently.  unless someone else has solved the thing
already [highly likely].
-- 
Matthew Francey                     mdf@vigard.mef.org   (or mdf%mstype@sq.com)
AX25: VE3RQX@VE3RZR.#SCON.ON.CAN    GPS(NAD27): N43o34.210' W079o34.563' +0093m
