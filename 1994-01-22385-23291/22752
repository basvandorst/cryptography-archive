Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!swrinde!sgiblab!sgigate.sgi.com!olivea!news.bu.edu!att-in!att!allegra!ulysses!ulysses!smb
From: smb@research.att.com (Steven Bellovin)
Subject: Re: unix passwd
Message-ID: <1994Jan11.010423.5607@ulysses.att.com>
Date: Tue, 11 Jan 1994 01:04:23 GMT
References:  <CJEK38.7DA@suncad.camosun.bc.ca>
Organization: AT&T Bell Laboratories
Lines: 41

In article <CJEK38.7DA@suncad.camosun.bc.ca>, uc022@freenet.Victoria.BC.CA (Darren Hill) writes:
> Could someone explain to me exactly how Unix takes a password,
> and ends up with what you see in the /etc/passwd ?

See

@article{Morris79,
   author = {Robert H. Morris and Ken Thompson},
   journal = {Communications of the ACM},
   month = {November},
   number = {11},
   pages = {594},
   title = {UNIX Password Security},
   volume = {22},
   year = {1979}
}

>  
> If I've got it right, unix takes the user password, runs it
> through an algorithm, adds a salt, and ends up at a 13 character
> output.  Is this correct?
>  
> Now what I'm wondering is:
>  
> (1) Is this a one way hash of the user password?  And is the
> output always the same length? (Whether the user has a 1 
> character or 8 character password)

Yes and yes.
>  
> (2) Where does the 'salt' come into play?  Is it just a fixed
> length of random text tacked onto the end, or is it blended
> in?

It permutes the hash function.
>  
> (3) Is there some problem with 'shadow' password systems? 
> From what I've read, I can't understand why someone wouldn't
> use that on their Unix...

Inertia, mostly.
