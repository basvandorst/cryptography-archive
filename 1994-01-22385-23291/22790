Path: msuinfo!agate!headwall.Stanford.EDU!kocherp
From: kocherp@leland.Stanford.EDU (Paul Carl Kocher)
Newsgroups: sci.crypt
Subject: Re: The DES Initial Permutation
Date: 12 Jan 1994 09:50:21 GMT
Organization: Stanford University, CA 94305, USA
Lines: 25
Message-ID: <2h0h4t$32f@nntp2.Stanford.EDU>
References: <940105181113.026225@DOCKMASTER.NCSC.MIL> <jktaberCJ6tx7.9Cw@netcom.com> <CJ7tnv.AB2@cbfsb.cb.att.com> <1994Jan7.110304.7359@devvax.mincom.oz.au>
NNTP-Posting-Host: cardinal.stanford.edu

Eric Young <eay@mincom.oz.au> wrote:
>> I guess my question is .. for anyone who has done the coding, what 
>> percentage of the time is spent in the initial permutation compared 
>> to the rest of the routine?  Unless it was over 25 percent, I wouldn't
>> consider a hardware bit shuffler worthwhile.
>
>Most fast DES implementations take 10 shifts, 5 ands and 15 xors to do the
>IP and the same to do the FP.
>On a quick test run on a 486/50 (gcc) these 60 instructions cause a %12
>slowdown on the des library I use which has 4k S table lookup.  For the
>versions of DES with bigger lookup tables, the performace hit would be
>a much larger percentage.

If the permutations are optimized along with the rest of the DES code,
the performance hit stays about 10-20%.  For example, in my 32-bit
DES code in large-table mode (uses about 90K of RAM), the initial 
and final permutations each take 27 instructions for a total of 54 
instructions per crypt.  208 instructions are required to do the S 
boxes, etc., plus there are 8 additional instructions to load the 
blocks and do the CBC XOR, so in this case the permutations also 
take about 12% of the execution time.

Cheers,
Paul Kocher
kocherp@leland.stanford.edu
