Newsgroups: sci.crypt
Path: msuinfo!uchinews!vixen.cso.uiuc.edu!howland.reston.ans.net!cs.utexas.edu!swrinde!sgiblab!sgigate.sgi.com!olivea!hal.com!decwrl!netcomsv!netcom.com!phr
From: phr@netcom.com (Paul Rubin)
Subject: Re: Nuclear random number generator
Message-ID: <phrCK7DKs.8BK@netcom.com>
Organization: Netcom - Online Communication Services (408 241-9760 guest)
References: <sy13=gm@dixie.com>
Date: Tue, 25 Jan 1994 20:43:40 GMT
Lines: 33

In article <sy13=gm@dixie.com> jgd@dixie.com (John De Armond) writes:
>Let's suppose I have a radioactive source, a nice low dead-time
>proportional counter and a PC (I do.)  Suppose I wanted to 
>connect this up to sit in a corner generating random numbers,
>perhaps to make available via FTP or other means.  How would
>I do this?  I'm an accomplished electronics and instrumentation
>designer but am a complete novice at crypto and number theory.
>I'd LOVE to get my hands on some already written code. 
>I can do something like toggling a bit on the parallel port with
>each nuclear event.  What I do after that is a mystery.  Anyone
>interested in collaborating on this?

This would be kind of a fun experiment, although of course random
numbers ftp'd over a big network would be useless for cryptographic
purposes (the idea of cryptography is that the random numbers have
to be kept secret from eavesdroppers).  

The basic idea of using the radioactive source to make random numbers
is that there is a certain probability of the source emitting a
particle in a given time interval, but whether the decay will actually
occur is unpredictable.  So to make a random bit, you could count the
number of events over some reasonably long period (long enough that
the expected number of events is say a few thousand, since the number
of events per minute will not be distributed quite uniformly; see
Knuth vol. 2. exercise 3.1-1(d)).  Then generate a 1 if the count is
odd or a 0 if it is even.  To get a random bit stream, just repeat
this process.

In practice I'd worry somewhat about sources of nonrandomness
introduced by the experimental apparatus somehow.  One thing you
could do is run the random bit stream from the previous step through
a cryptographic hash function like SHA.  This should get rid of
any correlations in it and hopefully not introduce any of its own.
