From vince@ghost.dsi.unimi.it Thu Dec 29 23:01:56 1994
Received: from ghost.dsi.unimi.it by idea.sec.dsi.unimi.it with SMTP
	(1.38.193.4/16.2) id AA21698; Thu, 29 Dec 1994 23:01:56 +0100
Return-Path: <vince@ghost.dsi.unimi.it>
Received: by ghost.dsi.unimi.it id AA23737
  (5.65+/IDA-1.3.5 for vince@idea.sec.dsi.unimi.it); Thu, 29 Dec 94 23:01:40 +0100
Date: Thu, 29 Dec 94 23:01:40 +0100
From: David Vincenzetti <vince@ghost.dsi.unimi.it>
Message-Id: <9412292201.AA23737@ghost.dsi.unimi.it>
To: vince@ghost.dsi.unimi.it
Subject: /
X-Filter: mailagent [version 3.0 PL22] for vince@ghost.dsi.unimi.it
Status: RO


>Newsgroups: sci.crypt.research
>Path: ghost.dsi.unimi.it!univ-lyon1.fr!jussieu.fr!math.ohio-state.edu!usc!elroy.jpl.nasa.gov!decwrl!netcomsv!netcom.com!mpj
>From: Michael Paul Johnson <mpj@netcom.com>
>Subject: The Sapphire Stream Cipher
>Message-ID: <mpjD1HnD5.3ur@netcom.com>
>Keywords: sapphire stream cipher cryptography cryptology encryption hash
>Sender: mpj@netcom.com (sci.crypt.research co-moderator)
>Reply-To: mpj@netcom.com
>Organization: The Web of Trust
>Date: Tue, 27 Dec 1994 21:22:16 GMT
>Approved: mpj@netcom.com
>Lines: 673




In response to some posts by Bryan G. Olson <olson@umbc.edu>, I have done
some more analysis of the Sapphire Stream Cipher with respect to adaptive
chosen plain text attacks.  After making a computer slave away over the
Christmas break (while I was off celebrating), I found some interesting
things.

Bryan's observation was that there were certain small changes in plain text
(easiest to do with two or three byte differences, followed by a single byte
the same) that result in all five of the index variables and most of the
permutation vector state the same.  This can result in identical output for
identical subsequent input for some number of bytes after the change.  Bryan
expressed concern that this might be helpful in recovering some key
information.

My modeling of the above described situation shows that the above described
departure from the ideal certainly happens frequently enough to be of
concern, but not for the reasons Bryan gave.  I still have no idea how this
correlation could be used to either (1) help solve for key information or
equivalent permutation vector state, or (2) help solve for the contents of an
encrypted message that used the same key as the one being attacked with the
adaptive chosen plain text attack.  I did notice, however, that this does
have serious implications for the use of the Sapphire Stream Cipher as a
cryptographic hash function, either keyed or keyless.  As a result, the
procedure for computing a cryptographic hash with the Sapphire Stream Cipher
should be ammended to include some post-processing, as described below.

When comparing an encrypted sequence from a given plain text and an encrypted
sequence from a plain text string that is identical except for the first two
bytes (and using the same key and origin point), I found that more bytes
matched than would be expected for an ideal stream cipher with feedback.  The
good news is that the identical bytes were not very consistent as to where
in the sequence they occurred (although they were within about 231 bytes of
the change more than 99% of the time).  The following table shows the results
of one run (designed to maximize the chance of leaving the state variables
identical to the reference state):

 Identical     Count  Expected
     Bytes    out of        if
    of 512     65535     Ideal
 ---------    ------  --------
        0:      8640      8835
        1:     17703        35
        2:     17821         0
        3:     11983         0
        4:      5869         0
        5:      2444         0
        6:       776         0
        7:       238         0
        8:        40         0
        9:        17         0
       10:         4         0
     >=11:         0         0

This shows that it takes several bytes of output for a minimal change such as
this to be felt in the output stream.  This really shouldn't be suprising,
considering that each byte encrypted only moves 5 of the 256 bytes in the
permutation vector around.  The danger, here, is not in someone discovering
the key, unless I'm missing something important, but in someone forging a
hash with a minimal change at the very end of a document.  There is an
obvious patch to cover this hole:  simply encrypt a constant run of 256 bytes
after encrypting the plain text before emitting the hash.  I suggest
encrypting the sequence 255 down to 0 for this purpose might be a good
choice.  This effectively mixes up the permutation vector in a way that
depends on all of the bytes in the permutation vector, without significantly
impacting the speed of the hash computation.

Even though I don't know of any way to really make use of the adaptive chosen
plain text attack strategy that Bryan hinted might be a problem, I recommend
designing any cryptosystem that might use the Sapphire Stream Cipher to
minimize the reuse of any one key.  For example, instead of using a key
directly, it is a good idea to use a key to encrypt a session key that is
only used for one message or file, then encrypt the message or file with that
key.  Another idea is to append some "salt" to the secret key, and use the
"salt" appended to the secret key for the session key.  The "salt" could be
transmitted in the clear.  These two strategies work for pure stream ciphers
(without feedback) like RC4, and should work even better with the Sapphire
Stream Cipher.

I thought about redesigning the Sapphire Stream Cipher for a faster internal
avalanche (and I probably will try that and give the result a different
name), but the trade-off in speed is not likely to be very favorable.  The
speed and ease of use of the Sapphire Stream Cipher make it seem worth
investigating further to see if it can withstand adaptive chosen plain text
attacks or not.

I invite you to analyze this cipher further, both as an encryption algorithm
and as a hash generator.

*****************************************************************************


THE SAPPHIRE STREAM CIPHER

The Sapphire Stream Cipher is designed to have the following properties:

 * Be useful for generation of cryptographic check values as well as
   protecting message privacy.

 * Accept a variable length key.

 * Strong enough to justify _at least_ a 64 bit key for balanced security.

 * Small enough to be built into other applications with several keys active
   at once.

 * Key setup fast enough to support frequent key change operations but slow
   enough to discourage brute force attack on the key.

 * Fast enough to not significantly impact file read & write operations on
   most current platforms.

 * Portable among common computers and efficient in C, C++, and Pascal.

 * Byte oriented.

 * Include both ciphertext and plain text feedback (for both optimal data
   hiding and value in creation of cryptographic check values).

 * Acceptable performance as a pure pseudorandom number generator without
   providing a data stream for encryption or decryption.

 * Allow _limited_ key reuse without serious security degradation.


HISTORY AND RELATED CIPHERS

The Sapphire Stream Cipher is very similar to a cipher I started work on in
November 1993.  It is also similar in some respects to the alledged RC-4 that
was posted to sci.crypt recently.  Both operate on the principle of a
mutating permutation vector.  Alledged RC-4 doesn't include any feedback of
ciphertext or plain text, however.  This makes it more vulnerable to a known
plain text attack, and useless for creation of cryptographic check values.
On the other hand, alledged RC-4 is faster.

The Sapphire Stream Cipher is used in the shareware product Quicrypt, which
is available at ftp://ftp.csn.net/mpj/qcrypt10.zip and on the Colorado
Catacombs BBS (303-772-1062).  There are two versions of Quicrypt:  the
exportable version (with a session key limited to 32 bits but with strong
user keys allowed) and the commercial North American version (with a session
key of 128 bits).  A variant of the Sapphire Stream Cipher is also used in
the shareware program Atbash, which has no weakened exportable version.

I don't recall ever reading anything about using a stream cipher like this
for the generation of cryptographic check values, but it seems like it should
be a fast technique compared to some existing hash functions.


OVERVIEW

The Sapphire Stream Cipher is based on a state machine.  The state consists
of 5 index values and a permutation vector.  The permutation vector is simply
an array containing a permutation of the numbers from 0 through 255.  Five of
the bytes in the permutation vector are moved to new locations (which may be
the same as the old location) for every byte output.  The output byte is a
nonlinear function of all 5 of the index values and 7 of the bytes in the
permutation vector, thus frustrating attempts to solve for the state
variables based on past output.  On initialization, the index variables are
set (somewhat arbitrarily) to 1, 3, 5, 7, and 11.  The permutation vector
(called the cards array in the source code below) is shuffled based on the
user key.  This shuffling is done in a way that is designed to minimize the
bias in the destinations of the bytes in the array.  The biggest advantage in
this method is not in the elimination of the bias, per se, but in slowing
down the process slightly to make brute force attack more expensive.
Eliminating the bias (relative to that exhibited by RC-4) is nice, but this
advantage is probably of minimal cryptographic value.


KEY SETUP

Key setup (illustrated by the function initialize(), below) consists of three
parts:

    1.  Initialize the index variables.
    2.  Set the permutation vector to a known state (a simple counting
        sequence).
    3.  Starting at the end of the vector, swap each element of the
        permutation vector with an element indexed somewhere from 0
        to the current index (chosen by the function keyrand()).

The keyrand() function returns a value between 0 and some maximum number
based on the user's key, the current state of the permutation vector, and an
index running sum called rsum.  Note that the length of the key is used in
keyrand(), too, so that a key like "abcd" will not result in the same
permutation as a key like "abcdabcd".


ENCRYPTION

Each encryption involves updating the index values, moving (up to) 5 bytes
around in the permutation vector, selecting an output byte, and adding the
output byte bitwise modulo-2 (exclusive-or) to the plain text byte to produce
the cipher text byte.  The index values are incremented by different rules.
The index called rotor just increases by one (modulo 256) each time.  Ratchet
increases by the value in the permutation vector pointed to by rotor.
Avalanche increases by the value in the permutation vector pointed to by
another byte in the permutation vector pointed to by the last cipher text
byte.  The last plain text and the last cipher text bytes are also kept as
index variables.  See the function called encrypt(), below for details.


PSUEDORANDOM BYTE GENERATION

If you want to generate random numbers without encrypting any particular
ciphertext, simply encrypt 0.  There is still plenty of complexity left in
the system to ensure unpredictability (if the key is not known) of the output
stream when this simplification is made.


DECRYPTION

Decryption is the same as encryption, except for the obvious swapping of the
assignments to last_plain and last_cipher and the return value.  See the
function decrypt(), below.


C++ SOURCE CODE FRAGMENT

The original implimentation of this cipher was in Object Oriented Pascal, but
C++ is available for more platforms.

/* sapphire.h -- Interface for the Saphire stream cipher.

   Dedicated to the Public Domain the author and inventor
   (Michael Paul Johnson).  This code comes with no warranty.
   Use it at your own risk.
   Ported from the Pascal implementation of the Sapphire Stream
   Cipher 9 December 1994.
   Added hash-specific functions 27 December 1994.

   unsigned char is assumed to be 8 bits.  If it is not, the
   results of assignments need to be reduced to 8 bits with
   & 0xFF or % 0x100, whichever is faster.
*/

class sapphire
    {
    // These variables comprise the state of the state machine.

    unsigned char cards[256];       // A permutation of 0-255.
    unsigned char rotor,            // Index that rotates smoothly
        ratchet,                    // Index that moves erratically
        avalanche,                  // Index heavily data dependent
        last_plain,                 // Last plain text byte
        last_cipher;                // Last cipher text byte

    // This function is used by initialize(), which is called by the
    // constructor.

    unsigned char keyrand(int limit, unsigned char *user_key,
                          unsigned char keysize,
                          unsigned char *rsum,
                          unsigned *keypos);

    public:

    sapphire(unsigned char *key = NULL, // Calls initialize if a real
        unsigned char keysize=0);       // key is provided.  If none
                                // is provided, call initialize
                                // before encrypt or decrypt.
    ~sapphire();                // Destroy cipher state information.
    void initialize(unsigned char *key, // User key is used to set
        unsigned char keysize);         // up state information.
    void hash_init(void);               // Set up default hash.
    unsigned char encrypt(unsigned char b = 0);   // Encrypt byte
                                        // or get a random byte.
    unsigned char decrypt(unsigned char b);       // Decrypt byte.
    void hash_final(unsigned char *hash,  // Copy hash value to hash
            unsigned char hashlength=20); // Hash length (16-32)
    void burn(void);            // Destroy cipher state information.
    };

/* sapphire.cpp -- the Saphire stream cipher class.
   Dedicated to the Public Domain the author and inventor:
   (Michael Paul Johnson).  This code comes with no warranty.
   Use it at your own risk.
   Ported from the Pascal implementation of the Sapphire Stream
   Cipher 9 December 1994.
   Added hash pre- and post-processing 27 December 1994.
*/

#ifdef UNIX
#include <memory.h>
#include <unistd.h>
#else
#include <mem.h>
#endif
#include "sapphire.h"

unsigned char sapphire::keyrand(int limit,
                                unsigned char *user_key,
                                unsigned char keysize,
                                unsigned char *rsum,
                                unsigned *keypos)
    {
    unsigned u,             // Value from 0 to limit to return.
        retry_limiter,      // No infinite loops allowed.
        mask;               // Select just enough bits.

    retry_limiter = 0;
    mask = 1;               // Fill mask with enough bits to cover
    while (mask < limit)    // the desired range.
        mask = (mask << 1) + 1;
    do
        {
        *rsum = cards[*rsum] + user_key[(*keypos)++];
        if (*keypos >= keysize)
            {
            *keypos = 0;            // Recycle the user key.
            *rsum += keysize;   // key "aaaa" != key "aaaaaaaa"
            }
        u = mask & *rsum;
        if (++retry_limiter > 11)
            u %= limit;     // Prevent very rare long loops.
        }
    while (u > limit);
    return u;
    }

void sapphire::initialize(unsigned char *key, unsigned char keysize)
    {
    // Key size may be up to 256 bytes.
    // Pass phrases may be used directly, with longer length
    // compensating for the low entropy expected in such keys.
    // Alternatively, shorter keys hashed from a pass phrase or
    // generated randomly may be used. For random keys, lengths
    // of from 4 to 16 bytes are recommended, depending on how
    // secure you want this to be.

    int i;
    unsigned char toswap, swaptemp, rsum;
    unsigned keypos;

    // If we have been given no key, assume the default hash setup.

    if (keysize < 1)
        {
        hash_init();
        return;
        }

    // Initialize the indices and data dependencies.
    // Indices are set to different values instead of all 0
    // to reduce what is known about the state of the cards
    // when the first byte is emitted.

    rotor = 1;
    ratchet = 3;
    avalanche = 5;
    last_plain = 7;
    last_cipher = 11;

    // Start with cards all in order, one of each.

    for (i=0;i<256;i++)
        cards[i] = i;

    // Swap the card at each position with some other card.

    toswap = 0;
    keypos = 0;         // Start with first byte of user key.
    rsum = 0;
    for (i=255;i>=0;i--)
        {
        toswap = keyrand(i, key, keysize, &rsum, &keypos);
        swaptemp = cards[i];
        cards[i] = cards[toswap];
        cards[toswap] = swaptemp;
        }
    toswap = swaptemp = rsum = 0;
    keypos = 0;
    }

void sapphire::hash_init(void)
    {
    // This function is used to initialize non-keyed hash
    // computation.

    int i, j;

    // Initialize the indices and data dependencies.

    rotor = 1;
    ratchet = 3;
    avalanche = 5;
    last_plain = 7;
    last_cipher = 11;

    // Start with cards all in inverse order.

    for (i=0, j=255;i<256;i++,j--)
        cards[i] = (unsigned char) j;
    }

sapphire::sapphire(unsigned char *key, unsigned char keysize)
    {
    if (key && keysize)
        initialize(key, keysize);
    }

void sapphire::burn(void)
    {
    // Destroy the key and state information in RAM.
    memset(cards, 0, 256);
    rotor = ratchet = avalanche = last_plain = last_cipher = 0;
    }

sapphire::~sapphire()
    {
    burn();
    }

unsigned char sapphire::encrypt(unsigned char b)
    {
    // Picture a single enigma rotor with 256 positions, rewired
    // on the fly by card-shuffling.

    // This cipher is a variant of one invented and written
    // by Michael Paul Johnson in November, 1993.

    unsigned char swaptemp;

    // Shuffle the deck a little more.

    ratchet += cards[rotor++];
    swaptemp = cards[last_cipher];
    cards[last_cipher] = cards[ratchet];
    cards[ratchet] = cards[last_plain];
    cards[last_plain] = cards[rotor];
    cards[rotor] = swaptemp;
    avalanche += cards[swaptemp];

    // Output one byte from the state in such a way as to make it
    // very hard to figure out which one you are looking at.

    last_cipher = b^cards[cards[(cards[ratchet] + cards[rotor] +
                                 cards[last_plain] +
                                 cards[last_cipher] +
                                 cards[avalanche])&0xFF]];
    last_plain = b;
    return last_cipher;
    }

unsigned char sapphire::decrypt(unsigned char b)
    {
    unsigned char swaptemp;

    // Shuffle the deck a little more.

    ratchet += cards[rotor++];
    swaptemp = cards[last_cipher];
    cards[last_cipher] = cards[ratchet];
    cards[ratchet] = cards[last_plain];
    cards[last_plain] = cards[rotor];
    cards[rotor] = swaptemp;
    avalanche += cards[swaptemp];

    // Output one byte from the state in such a way as to make it
    // very hard to figure out which one you are looking at.

    last_plain = b^cards[cards[(cards[ratchet] + cards[rotor] +
                                cards[last_plain] +
                                cards[last_cipher] +
                                cards[avalanche])&0xFF]];
    last_cipher = b;
    return last_plain;
    }

void sapphire::hash_final(unsigned char *hash,      // Destination
                          unsigned char hashlength) // Size of hash.
    {
    int i;

    for (i=255;i>=0;i--)
        encrypt((unsigned char) i);
    for (i=0;i<hashlength;i++)
        hash[i] = encrypt(0);
    }


GENERATION OF CRYPTOGRAPHIC CHECK VALUES (HASH VALUES)

For a fast way to generate a cryptographic check value (also called a hash or
message integrity check value) of a message of arbitrary length:

1.  Initialize either with a key (for a keyed hash value) or call hash_init
    with no key (for a public hash value).

2.  Encrypt all of the bytes of the message or file to be hashed.  The
    results of the encryption need not be kept for the hash generation
    process.  (Optionally decrypt encrypted text, here).

3.  Call hash_final, which will further "stir" the permutation vector by
    encrypting the values from 255 down to 0, then report the results of
    encrypting 20 zeroes.


SECURITY ANALYSIS

There are several security issues to be considered.  Some are easier to
analyze than others.  The following includes more "hand waving" than
mathematical proofs, and looks more like it was written by an engineer than a
mathematician.  The reader is invited to improve upon or refute the
following, as appropriate.


KEY LENGTH

There are really two kinds of user keys to consider: (1) random binary keys,
and (2) pass phrases.  Analysis of random binary keys is fairly straight
forward.  Pass phrases tend to have much less entropy per byte, but the
analysis made for random binary keys applies to the entropy in the pass
phrase.  The length limit of the key (255 bytes) is adequate to allow a pass
phrase with enough entropy to be considered strong.

To be real generous to a cryptanalyst, assume dedicated Sapphire Stream
Cipher cracking hardware.  The constant portion of the key scheduling can be
done in one cycle.  That leaves at least 256 cycles to do the swapping
(probably more, because of the intricacies of keyrand(), but we'll ignore
that, too, for now).  Assume a machine clock of about 256 MegaHertz (fairly
generous).  That comes to about one key tried per microsecond.  On average,
you only have to try half of the keys.  Also assume that trying the key to
see if it works can be pipelined, so that it doesn't add time to the
estimate.  Based on these assumptions (reasonable for major governments), and
rounding to two significant digits, the following key length versus cracking
time estimates result:

    Key length, bits    Time to crack
    ----------------    -------------
                  32    35 minutes (exportable in qcrypt)
                  33    1.2 hours (not exportable in qcrypt)
                  40    6.4 days
                  56    1,100 years (kind of like DES's key)
                  64    290,000 years (good enough for most things)
                  80    19 billion years (kind of like Skipjack's key)
                 128    5.4E24 years (good enough for the clinically paranoid)

Naturally, the above estimates can vary by several orders of magnitude based
on what you assume for attacker's hardware, budget, and motivation.

In the range listed above, the probability of spare keys (two keys resulting
in the same initial permutation vector) is small enough to ignore.  The proof
is left to the reader.


INTERNAL STATE SPACE

For a stream cipher, internal state space should be at least as big as the
number of possible keys to be considered strong.  The state associated with
the permutation vector alone (256!) constitutes overkill.


PREDICTABILITY OF THE STATE

If you have a history of stream output from initialization (or equivalently,
previous known plaintext and ciphertext), then rotor, last_plain, and
last_cipher are known to an attacker.  The other two index values, flipper
and avalanche, cannot be solved for without knowing the contents of parts of
the permutation vector that change with each byte encrypted.  Solving for the
contents of the permutation vector by keeping track of the possible positions
of the index variables and possible contents of the permutation vector at
each byte position is not possible, since more variables than known values
are generated at each iteration.  Indeed, fewer index variables and swaps
could be used to achieve security, here, if it were not for the hash
requirements.


CRYPTOGRAPHIC CHECK VALUE

The relatively large portion of the state altered with each byte encrypted
(relative to alledged RC-4) contributes to a rapid avalanche of generated
check values -- probably more than is needed.  A single bit change in a
message causes a radical change in the check value generated (about half of
the bits change).  This is one good feature of a cryptographic check value.

Another good property of a cryptographic check value is that it is too hard
to compute a message that results in a certain check value.  In this case, we
assume the attacker knows the key and the contents of a message that has the
desired check value, and wants to compute a bogus message having the same
check value.  There are two obvious ways to do this attack.  One is to solve
for a sequence that will restore the state of the permutation vector and
indices back to what it was before the alteration.  The other one is the
so-called "birthday" attack that is to cryptographic hash functions what
brute force is to key search.

To generate a sequence that restores the state of the cipher to what it was
before the alteration probably requires at least 256 bytes, since the index
"rotor" marches steadily on its cycle, one by one.  The values to do this
cannot easily be computed, due to the nonlinearity of the feedback, so there
would probably have to be lots of trial and error involve.  In practical
applications, this would leave a gaping block of binary garbage in the middle
of a document, and would be quite obvious, so this is not a practical attack,
even if you could figure out how to do it (and I haven't).  If anyone has a
method to solve for such a block of data, though, I would be most interested
in finding out what it is.  Please email me at m.p.johnson@ieee.org if you
find one.

The "birthday" attack just uses the birthday paradox to find a message that
has the same check value.  With a 20 byte check value, you would have to find
at least 80 bits to change in the text such that they wouldn't be noticed (a
plausible situation), then try the combinations until one matches.  2 to the
80th power is a big number, so this isn't practical either.  If this number
isn't big enough, you are free to generate a longer check value with this
algorithm.  Someone who likes 16 byte keys might prefer 32 byte check values
for similar stringth.


ADAPTIVE CHOSEN PLAIN TEXT ATTACKS

Let us give the attacker a keyed black box that accepts any input and
provides the corresponding output.  Let us also provide a signal to the black
box that causes it to reoriginate (revert to its initial keyed state) at the
attacker's will.  Let us also be really generous and provide a free copy of
the black box, identical in all respects except that the key is not provided
and it is not locked, so the array can be manipulated directly.

Since each byte encrypted only modifies at most 5 of the 256 bytes in the
permutation vector, and it is possible to find different sequences of two
bytes that leave the five index variables the same, it is possible for the
attacker to find sets of chosen plain texts that differ in two bytes, but
which have cipher texts that are the same for several of the subsequent
bytes.  Modeling indicates that as many as ten of the following bytes
(although not necessarily the next ten bytes) might match.  This information
would be useful in determining the structure of the Sapphire Stream Cipher
based on a captured, keyed black box.  This means that it would not be a good
substitute for the Skipjack algorithm in the EES, but we assume that the
attacker already knows the algorithm, anyway.  This departure from the
statistics expected from an ideal stream cipher with feedback doesn't seem to
be useful for determining any key bytes or permutation vector bytes, but it
is the reason why post-conditioning is required when computing a
cryptographic hash with the Sapphire Stream Cipher.


OTHER HOLES

Are there any?  Take you best shot and let me know if you see any.  I offer
no challenge text with this algorithm, but you are free to use it without
royalties to me if it is any good.


CURRENT STATUS

This is a new (to the public) cipher, and an even newer approach to
cryptographic hash generation.  Take your best shot at it, and please let me
know if you find any weaknesses (proven or suspected) in it.  Use it with
caution, but it still looks like it fills a need for reasonably strong
cryptography with limited resources.


LEGAL STUFF

The intention of this document is to share some research results on an
informal basis.  You may freely use the algorithm and code listed above as
far as I'm concerned, as long as you don't sue me for anything, but there may
be other restrictions that I am not aware of to your using it.  The C++ code
fragment above is just intended to illustrate the algorithm being discussed,
and is not a complete application.  I understand this document to be
Constitutionally protected publication, and not a munition, but don't blame
me if it explodes or has toxic side effects.

                  ___________________________________________________________
                 |                                                           |
 |\  /| |        | Michael Paul Johnson  Colorado Catacombs BBS 303-772-1062 |
 | \/ |o|        | PO Box 1151, Longmont CO 80502-1151 USA   Jesus is alive! |
 |    | | /  _   | mpj@csn.org aka mpj@netcom.com m.p.johnson@ieee.org       |
 |    |||/  /_\  | ftp://ftp.csn.net/mpj/README.MPJ          CIS: 71331,2332 |
 |    |||\  (    | ftp://ftp.netcom.com/pub/mp/mpj/README  -. --- ----- .... |
 |    ||| \ \_/  | PGPprint=F2 5E A1 C1 A6 CF EF 71  12 1F 91 92 6A ED AE A9 |
                 |___________________________________________________________|



