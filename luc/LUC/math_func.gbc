/*
 * Some generally useful functions
 *
 * Copyright 1993 Raymond S. Brand, All Rights Reserved
 */


/*
 * GCD(a, b)
 */
	define gcd(a, b) {
		auto temp;

		while (0 != b) {
			temp = a%b;
			a = b;
			b = temp;
		}

		return (a);
	}


/*
 * LCM(a, b)
 */
	define lcm(a, b) {
		return (a*(b/gcd(a, b)));
	}


/*
 * Inverse of a modulo n.  Finds x such that (a*x)%mod = 1 using the
 *	extended Euclidean algorithm.
 */
	define inv_mod_n(a, mod) {
		auto g, g_prev, g_next, v, v_prev, v_next, quot;

		g_prev = mod;
		g = a;
		v_prev = 0;
		v = 1;

		while (0 != g) {
			g_next = g_prev%g;
			quot = (g_prev-g_next)/g;
			v_next = (v_prev+(mod-((quot*v)%mod)))%mod;
			g_prev = g;
			g = g_next;
			v_prev = v;
			v = v_next;
			}

		return (v_prev);
		}


/*
 * (x^y)%n
 */
	define pow_mod_n(x, power, modulus) {
		auto bit, result;

		x %= modulus;
		result = 1;

		while (power) {
			bit = power%2;
			power = (power-bit)/2;

			if (1 == bit) {
				result = (result*x)%modulus;
			}

			x = (x*x)%modulus;
		}

		return (result);
	}


/*
 * Calculates J(a,b), the Jacobi symbol, of a and b. b should be odd.
 */
	define jacobi(a, b) {
		auto sign, temp, test, bit;

		sign = 1;

		while (a > 1) {
			bit = a%2;

			if (0 == bit) {
				/*
				 * test will be != 0 only if 3 = b%8 or
				 *	5 = b%8
				 *
				 * there are much better ways of doing the
				 *	following
				 */
				test = (((b*b)-1)/8)%2;

				a /= 2;

				if (0 != test) {
					sign = -sign;
				}
			} else {
				/*
				 * test will be != 0 only if 3 = a%4 = b%4
				 *
				 * there are much better ways of doing the
				 *	following
				 */
				test = (((a-1)*(b-1))/4)%2;

				temp = a;
				a = b%temp;
				b = temp;

				if (0 != test) {
					sign = -sign;
				}
			}
		}

		if (0 == a) {
			sign = 0;
		}

		return (sign);
	}


/*
 * Calculates the ceiling of log base 2 of x. To calculate the number of
 *	bits in the representation of a number x, use logbase2(x+1).
 */
	define logbase2(x) {
		auto log;

		log = 0;
		x -= 1;

		while (x > 0) {
			log += 1;
			x /=2;
		}

		return (log);
	}
