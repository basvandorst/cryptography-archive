Path: msuinfo!uchinews!ncar!elroy.jpl.nasa.gov!ames!network.ucsd.edu!qualcom.qualcomm.com!qualcom.qualcomm.com!karn
From: karn@qualcom.qualcomm.com (Phil Karn)
Newsgroups: sci.crypt
Subject: Re: secure telnetd password encryption & authentication techniques
Message-ID: <1992Feb21.191617.9522@qualcomm.com>
Date: 21 Feb 92 19:16:17 GMT
References: <h9fb760@fido.asd.sgi.com> <1992Feb20.005723.19080@qualcomm.com> <ha2rv80@fido.asd.sgi.com>
Sender: news@qualcomm.com
Reply-To: karn@chicago.qualcomm.com
Organization: Qualcomm, Inc
Lines: 82
Nntp-Posting-Host: qualcom.qualcomm.com

In article <ha2rv80@fido.asd.sgi.com>, nelson@bolyard.wpd.sgi.com writes:
|> Well, you probably have to change the application in _some_ way to deal
|> with the new authentication mechanism.  For example, the
|> FTP-with-authentication client and daemon probably don't want to ask the
|> user for a user name or a password, and the daemon wants to have some way
|> of learning the authenticated identify from the authentication system, so
|> making _no_ changes to these servers is probably unlikely.

Not necessarily. You might decide to leave the existing applications
just as they are after adding IP-level authentication and encryption,
particularly since encryption would hide the plaintext passwords that
would otherwise be used.

|> I think we were describing the same idea, but in different terminology.  I
|> was using the term "transport protocols" to describe any "new protocols to
|> ride atop IP" due to force of habit and influence of the ISORM.  I
|> certainly don't propose to replace TCP with a different mechanism for
|> reliable sequenced delivery of a byte stream, for example.

Okay, we agree here.

|> CBC would require that datagrams be made 0-7 bytes bigger (rounded up to a
|> multiple of 8 bytes in length).  OFB and CFB do not require any additional
|> bytes.

Whichever. Given that you're already adding a fair bit of overhead to
each packet (the security protocol header and an 8 or 16-byte MD-5
authenticator, plus a second IP header if you're doing IP-in-IP
encapsulation), I think padding the data out to a multiple of 8 bytes
isn't all that terrible. Cipher execution speed will be a much more
important factor.

I have great hopes for Linemode Telnet to remove what remaining
performance problems may result from a relatively large per-packet
overhead. Especially since my scheme would also break VJ header
compression.

|> One more reason to do authentication and/or data confidentiality above
|> TCP/UDP is that it could be done outside the kernel.  Obviously, there is
|> some advantage to doing it inside the kernel, but if you have a system for
|> which you do not have the kernel source (e.g. some orphan system, or some
|> proprietary OS [Windows w/ winsockapi]), and/or for which OS updates are
|> not forthcoming [so, you can't change your TCP/IP implementation] but
|> you'd still like to be able to make use of the new authenticated
|> protocols, then it's nice if you have the option of implementing it in a
|> library.  Kerberos, for example, is entirely implemented outside the
|> kernel, except possibly when it's integrated with NFS.

Yes and no. You're right, it's much harder to do this sort of thing in
the BSD kernel, but I think it's a mistake to let the design of one
particular platform drive the Internet architecture (as I think it has
in the past all too often). Also, if you use IP-in-IP encapsulation in
conjunction with a security protocol, then at first you need to
implement the security protocol only in the border routers that do the
encapsulating. If the idea catches on, it could eventually be adopted
into BSD Unix and its progeny.

Besides, the real fun will be in the key distribution and/or exchange
mechanisms, and these should be implemented as tasks outside the
kernel. All that need go into the kernel are the basic mechanisms for
encrypting, decrypting and authenticating packets. It's really no
different from the way BSD Unix is set up now, with the mechanisms for
routing IP datagrams in the kernel, but the algorithms that control it
residing in user tasks.

|> Yes, I have always viewed authentication as a vehicle to reduce
|> restrictions on what a user can do rather than to increase them.  There
|> are so many more things we could and would do safely over the net if all
|> our services had good authentication available.

Absolutely! I am tired of having to deal with router firewalls,
braindamaged kludges like SecureID, and/or being forced to tandem
through "gateway" machines whenever I want to log in over the net from
the road.  I want to restore the Internet to the seamless and useful
state it was in before security paranoia took over and started
building Berlin Walls around everything.  The way to do this is to add
simple, general purpose, easy to use and effective security mechanisms
that fit well into the basic Internet architecture. Since the Internet
is fundamentally a connectionless packet network, a security protocol
that works on individual datagrams seems like the best match to me.

Phil
