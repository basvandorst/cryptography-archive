Path: msuinfo!uchinews!ncar!elroy.jpl.nasa.gov!ames!network.ucsd.edu!qualcom.qualcomm.com!chicago.qualcomm.com!karn
From: karn@chicago.qualcomm.com (Phil Karn)
Newsgroups: sci.crypt
Subject: Re: DES key vs. known file contents
Message-ID: <1992Feb27.193048.2790@qualcomm.com>
Date: 27 Feb 92 19:30:48 GMT
References: <DON.92Feb25161619@blkhole.resun.com> <1992Feb27.153616.24546@cl.cam.ac.uk>
Sender: news@qualcomm.com
Organization: Qualcomm, Inc
Lines: 49
Nntp-Posting-Host: chicago.qualcomm.com

In article <1992Feb27.153616.24546@cl.cam.ac.uk> rja14@cl.cam.ac.uk (Ross Anderson) writes:
>There is of course a time-cost tradeoff in that you could build a smaller
>machine and wait longer. A solution time of a year could be achieved by
>a machine costing in the 100,000 dollar region. Garron and Outerbridge
>estimate that this will fall to about 10,000 dollars by 2000.

All this assumes, of course, that brute force is still needed. Who
knows where the boys in the Puzzle Palace might have gone with some of
Shamir's recent ideas on differential cryptanalysis?  Maybe they
already knew them before Shamir (re)discovered them?  Of course, if
it's still differential cryptanalysis, then a chosen-plaintext attack
is still required, and this may not be practical in most real cases.

Nevertheless, I think it's definitely time to replace DES with
something faster, more easily implemented in software, and more
secure. The floor is open for nominations, to which I will submit my
2-round MD-5 based cipher. I coded it up the other night on my PC at
home. It attained 320 kilobytes/sec on my 33 MHz 486, which is 32
times the speed of my own DES code on the same machine. Now it is true
that I was using an assembler implementation of the inner MD-5
trasform() function that exploits the 32-bit registers of the 386/486,
while the DES code is in portable C. I could probably also make my DES
code run a little faster by writing parts of it in assembler, but I
doubt I could get a 32x speedup. And I'd still be stuck with a 56-bit
key, while my MD-5 based cipher uses two 48 BYTE keys.

Of course, this cipher has the caveat that it must not be used in ECB
mode, and it must be "seeded" by the time of day (or some other number
that is unlikely to ever repeat) for each new file that is encrypted
with the same key. My plan for a user program is to prefix the file
with the time of day before encrypting it in CBC mode, and delete the
timestamp after decrypting. For the truly paranoid, I could add an
option to specify 4 rounds of MD-5 per encryption rather than 2, which
would halve the speed but make it unconditionally secure against all
but brute force attack, assuming of course that MD-5 itself is as
advertised.  The cipher is so fast that disk I/O is now the limiting
factor on my machine, so going to 4 rounds might not be so bad after
all.

By the way, I've put my assembler version of the MD-5 transform()
function into the public domain. It's available by anonymous FTP from
ucsd.edu, /hamradio/packet/ka9q/crypto/md5/md5trans.c. (It is actually
written for the inline assembler feature of Borland C++.) It will
compile under any memory model, and of course it requires a 386 or 486
CPU since only these chips have 32-bit registers.  I've made it as
fast as I know how, but any suggestions for any further improvements
are still welcome.

Phil
