Path: msuinfo!uchinews!ncar!elroy.jpl.nasa.gov!ames!olivea!sgigate!odin!shinobu!fido!bolyard.wpd.sgi.com!nelson
From: nelson@bolyard.wpd.sgi.com
Newsgroups: sci.crypt
Subject: Re: secure telnetd password encryption & authentication techniques
Message-ID: <ha2rv80@fido.asd.sgi.com>
Date: 20 Feb 92 06:53:49 GMT
References: <h9fb760@fido.asd.sgi.com> <1992Feb20.005723.19080@qualcomm.com>
Sender: news@fido.asd.sgi.com (Usenet News Admin)
Reply-To: nelson@sgi.com
Organization: Silicon Graphics, Inc., Mountain View, CA
Lines: 104
Originator: nelson@bolyard.wpd.sgi.com

karn@chicago.qualcomm.com writes:
>My approach of putting the authentication and/or encryption *below*
>TCP (which is of course below the application) is even more
>transparent to the applications -- they don't really have to know
>anything about it. 

I'd say that putting it anywhere below the application-to-network API
(e.g. sockets) suffices to maximize transparency to the application.

>But when you add authentication or encryption to
>the applications, you can't but help make it harder to interoperate
>with exisiting implementations, because you *are* after all changing
>the application's protocol. And you have to do the job anew for each
>new application.

Well, you probably have to change the application in _some_ way to deal
with the new authentication mechanism.  For example, the
FTP-with-authentication client and daemon probably don't want to ask the
user for a user name or a password, and the daemon wants to have some way
of learning the authenticated identify from the authentication system, so
making _no_ changes to these servers is probably unlikely.

>[good arguments against doing it as an IP option deleted...]
>
>|> So, I'm convinced that authentication and confidentiality need to be done
>|> at a higher layer (in the ARM) than IP.  
>
>Okay, you've convinced me not to do it as an IP option. 

Good.

>So instead
>I'll insert two new protocols to ride atop IP but under TCP and UDP,
>one for authentication and one for encryption. Or better yet, I'll
>create one common protocol to do both encryption and/or
>authentication. 

>|> You could invent new transport protocols (using a different number than 6
>|> for TCP or 17 for UDP) that are encrypted-TCP and encrypted UDP, but it
>|> would be easier to use TCP-header options, or to add a new layer of
>|> protocol on top of TCP, but below sockets.  This is exactly what the TSIG
>|> Trusted Sessions Working Group (TSWG) is doing at the moment.

>The authentication/encryption "protocol" could include the original IP
>protocol field so you could just run standard TCP and UDP (or whatever
>else you want) on top of it, without change. Why invent new transport
>protocols if you don't have to?

I think we were describing the same idea, but in different terminology.  I
was using the term "transport protocols" to describe any "new protocols to
ride atop IP" due to force of habit and influence of the ISORM.  I
certainly don't propose to replace TCP with a different mechanism for
reliable sequenced delivery of a byte stream, for example.

>And you can still use cipher block chaining 
>within each encrypted datagram, and because of the changing sequence
>numbers in the TCP headers you will not have the problems with
>repetitive ciphertext blocks that you might have if you were just
>ciphering raw text.

CBC would require that datagrams be made 0-7 bytes bigger (rounded up to a
multiple of 8 bytes in length).  OFB and CFB do not require any additional
bytes.

One more reason to do authentication and/or data confidentiality above
TCP/UDP is that it could be done outside the kernel.  Obviously, there is
some advantage to doing it inside the kernel, but if you have a system for
which you do not have the kernel source (e.g. some orphan system, or some
proprietary OS [Windows w/ winsockapi]), and/or for which OS updates are
not forthcoming [so, you can't change your TCP/IP implementation] but
you'd still like to be able to make use of the new authenticated
protocols, then it's nice if you have the option of implementing it in a
library.  Kerberos, for example, is entirely implemented outside the
kernel, except possibly when it's integrated with NFS.

>One of my goals for an authentication/encryption "protocol" is to
>allow a handy but safe means to penetrate the brain-damaged "router
>firewalls" that now surround so many company networks. 
[description of how authentication eliminates need for barriers deleted]  

Yes, I have always viewed authentication as a vehicle to reduce
restrictions on what a user can do rather than to increase them.  There
are so many more things we could and would do safely over the net if all
our services had good authentication available.

> And third, you can
>do it WITHOUT having to modify all of your internal hosts to support
>secure versions of each of their applications.

Again, I'm not so sure about this.  Consider how rlogin or ftp would have
to be changed to use different identification and authentication interfaces
than they use today.

Regardless of whether it is done above or below TCP/UDP, I believe our
mutual goals of breaking down barriers are technically achievable.  The
trick, at least for me, is to convince the powers that be to invest the 
development resources into doing this.

>Phil

--
Nelson Bolyard      nelson@sgi.COM      {decwrl,sun}!sgi!whizzer!nelson
Disclaimer: Views expressed herein do not represent the views of my employer.
--
