Xref: msuinfo alt.security:5351 sci.crypt:7360
Path: msuinfo!netnews.upenn.edu!jvnc.net!darwin.sura.net!wupost!zaphod.mps.ohio-state.edu!qt.cs.utexas.edu!news.Brown.EDU!noc.near.net!mars.caps.maine.edu!gollum!gandalf.UMCS.Maine.EDU!who
From: who@gandalf.UMCS.Maine.EDU
Newsgroups: alt.security,sci.crypt
Subject: Re: disk scavenging
Message-ID: <15094@gollum.UMCS.Maine.EDU>
Date: 14 Feb 92 18:57:17 GMT
References: <kpkdpcINNbdf@neuro.usc.edu> <kpknj2INNc21@neuro.usc.edu> <1992Feb13.133233.16964@fwi.uva.nl> <kpl2dlINNcmd@neuro.usc.edu>
Sender: news@gollum.UMCS.Maine.EDU
Organization: University of Maine Department of Computer Science
Lines: 16
Nntp-Posting-Host: dori

In article <kpl2dlINNcmd@neuro.usc.edu>, merlin@neuro.usc.edu (merlin) writes:
|> >All unix versions know to me guarantee that unwritten contents of a
|> >file is read as 0's. 
|> Good!  Must have missed this in the documentation.  Unix behaves nicely.
|> 
|> >With MS-DOS it is indeed possible to do such things, but do you want
|> >that kind of security on a otherwise unprotected environment?
|> YES!  When I delete a file from a shared PC in a common office environment
|> either explicitly or for example during file editing it would be nice if
|> it was impossible to retrieve the contents of that file rather than either
|> being able to just "undelete" it or recover the data by allocating the
|> same blocks to another file.

	Well, it wouldn't be too hard to write a program that first
overwrites a file with 0's and then deletes it. It is the only way to
be sure.
