Path: msuinfo!uchinews!ncar!asuvax!cs.utexas.edu!swrinde!zaphod.mps.ohio-state.edu!samsung!transfer!lectroid!ellisun.sw.stratus.com!cme
From: cme@ellisun.sw.stratus.com (Carl Ellison)
Newsgroups: sci.crypt
Subject: Re: the trusted public-key distribution problem
Message-ID: <11099@lectroid.sw.stratus.com>
Date: 14 Feb 92 22:37:08 GMT
References: <35654@mentor.cc.purdue.edu> <29902.Feb1321.42.5492@virtualnews.nyu.edu> <35864@mentor.cc.purdue.edu>
Sender: usenet@lectroid.sw.stratus.com
Organization: Stratus Computer, Software Engineering
Lines: 28

In article <35864@mentor.cc.purdue.edu> hrubin@pop.stat.purdue.edu (Herman Rubin) writes:
>In article <29902.Feb1321.42.5492@virtualnews.nyu.edu> brnstnd@nyu.edu (Dan Bernstein) writes:
>>In article <35654@mentor.cc.purdue.edu> hrubin@pop.stat.purdue.edu (Herman Rubin) writes:
>>> If Joe Bftsplk posts a public key as Dan Bernstein, [...]

>>[There would be no] confusion if [...] everyone made sure to
>>transmit complete (name,address,key) tuples, rather than just the
>>ambiguous names.

>Now suppose Joe Bftsplk enters a public key procedure claiming to be
>Dan Bernstein.  How am I to be able to tell that this is a fraudulent
>public key?


..because if the real (Dan,<address>,<key>) had posted it, he would
have signed the change in key using his old key.  Joe doesn't know the
private part of the key and is therefore unable to sign that message.


Try it this way -- forget the name "Dan Bernstein".  Use ONLY the
public key as the person's name.  When a person wants to change his
own name (= key), he sends out a message to all his correspondents
saying so.  When any other person wants to create a key, he creates a
key -- and therefore a new person (as far as net correspondents are
concerned).


Does this make it any easier to understand?
