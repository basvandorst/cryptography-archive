Path: msuinfo!uchinews!ncar!asuvax!cs.utexas.edu!qt.cs.utexas.edu!zaphod.mps.ohio-state.edu!think.com!ames!haven.umd.edu!decuac!hussar.dco.dec.com!mjr
From: mjr@decuac.dec.com (Marcus J. OpenRanum)
Newsgroups: sci.crypt
Subject: dumb idea for authentication?
Message-ID: <1992Feb19.053630.9682@decuac.dec.com>
Date: 19 Feb 92 05:36:30 GMT
Sender: news@decuac.dec.com (USENET News System)
Organization: Digital Equipment Corporation, Washington ULTRIX Resource Center
Lines: 40
Originator: mjr@hussar.dco.dec.com
Nntp-Posting-Host: hussar.dco.dec.com


	I had this idea out of the blue the other day as a possibly
useful technique for doing authentication in a networked environment.
I've no doubt it's been thought of before - so maybe someone can tell
me if there are holes in it. It'd be particularly suited to some of
the applications I'm interested in, where if you are penetrated, you
want to know, and know reasonably soon. I'm aware there are a few
implementation issues that might make it annoying at times, but those
are less important here.

	Please bear with my ignorance of the lingua-crypta - if I use
a term wrong, I apologise in advance.

	Suppose I want to authenticate you for my server. I pick a
chunk of text - say 512 bytes? 256? from my favorite book or whatever.
I then over some other channel agree upon an initial password for
you to use, and encrypt the chunk with DES and transmit it to you.
I then store a copy of the chunk, and a copy of your initial password
(probably re-encrypted with some server-specific key ala kerberos)
in some database.

	Now, you want to log in. You take the chunk of encrypted
goo and re-encrypt it with your password, then send me the result.
I look up your password and block, perform the same step, and compare
the result. If it compares, I send you an acknowledgement that you're
ok and I trust you, and then store the NEW encrypted block in my
database. You receive the ack, and store the new block, and we're
done.

	If someone somehow manages to spoof the server, by providing
a copy of your next-encrypted block, the next time the user tries
to authenticate itself, the server and the user are now out of sync,
and I can definitely prove that I have been penetrated, and when.

	If my system disk on the server crashes, and my key/block
database is slammed, all my users are SOL, and have to get new keys.

	Comments?

mjr.
