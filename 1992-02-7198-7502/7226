Xref: msuinfo sci.crypt:7226 comp.compression:2264
Path: msuinfo!uchinews!ncar!asuvax!cs.utexas.edu!uunet!charon.amdahl.com!netcomsv!pdh
From: pdh@netcom.COM (Phil Howard KA9WGN / I am the NRA)
Newsgroups: sci.crypt,comp.compression
Subject: compressing data saves encryption time, adds security
Message-ID: <1992Feb03.065709.4149pdh@netcom.COM>
Date: 3 Feb 92 06:57:09 GMT
Organization: Netcom - Online Communication Services  (408 241-9760 guest)
Lines: 29

barjun@elaine55.Stanford.EDU (ASHWIN BULCHANDANI) in sci.crypt writes:

> I am currently trying to write a program (in C) that uses the RSA encryption
> technique to encrypt and decrypt large ascii files.  This is a fairly tedious
> process given that the numbers are in the hundred to two hundred digit range.
> However, most of my code runs fairly quickly except for the modulus part i.e.
> when trying to find a mod b where a and b are 100+ digit numbers.  Does 
> anyone know where I can find an algorithm to do this quickly?

One way to reduce the CPU time used in very extensive encryption is to
COMPRESS the file before encrypting it.  Your encryptor and decryptor will
have fewer bits to have to do calculations for, and you get some benefit
in security against cracking as well due to the less obvious pattern of
the "clear" data and the reduced sample size.

A range of compression algorithms exist from the fast to the tight.
Less extensive encryption would prefer the fast, and the more extensive
would prefer the tight.  The compressor heads in comp.compression might
be able to give recommendations.

This originated in sci.crypt and I crossposted to comp.compression
primarily for application information purposes.  PLEASE make sure you
edit the newsgroups list to reflect the nature of any followup you
may post.
-- 
/***********************************************************************\
| Phil Howard  ---  KA9WGN  ---  pdh@netcom.com   |   "The problem with |
| depending on government is that you cannot depend on it" - Tony Brown |
\***********************************************************************/
