Xref: msuinfo sci.crypt:7447 alt.security:5592 alt.hackers:1141
Path: msuinfo!caen!sdd.hp.com!usc!news
From: merlin@neuro.usc.edu (merlin)
Newsgroups: sci.crypt,alt.security,alt.hackers
Subject: Encrypted CDROM Software Distribution (was Pawn Shops etc ...)
Date: 24 Feb 1992 06:24:15 -0800
Organization: University of Southern California, Los Angeles, CA
Lines: 100
Sender: merlin@neuro.usc.edu (merlin)
Approved: news@usc.edu
Message-ID: <kqi00fINNlb8@neuro.usc.edu>
NNTP-Posting-Host: neuro.usc.edu

>To mean anything, this phone call has to happen every time the program is
>run.  The alternative is to leave the decrypted key (or decrypted program)
>where the user can read (and copy) it.

WRONG!!!  The fact that you can physically copy a decrypted program does
not mean that you will be able to run it in another environment.  There
are many ways for a program to sense it's operating enviornment -- and
to run only in the presence of a key which meets some challenge built up
from a hash of some environment variables.  As an example, the program
could hash all ROM code found in it's present environment and generate a
challenge for which only one custom key code would allow it to operate.
The custom key code would not be effective on any other machine.  Things
like various rev's of system rom's, disk driver rom's, video rom's should
give enough variety to keep people from just wholesale copying your codes.
Indeed, even if a corporation could purchase a batch of computers with
identical hardware rom's, the program could dump a random variable in the
cmos setup for each machine to enhance hardware variability.  Moreover,
individual user's home machines would be unlikely to have the same rom's
as their work environment machines -- thereby removing a major incentive
for piracy of protected software -- the copying of programs for home use.

Encryption provides first line security.  Embedding an individual or corp
user identifier into decrypted code -- and warning the individual or corp
you are going after them for treble damages for any willfully made copies 
which happen to appear would make a good second line defense.  Finally, 
requiring an appropriate answer to a challenge sequence constructed from
relatively stable (but also relatively unique) hardware characteristics
would provide a good final level of protection against software pirates.
Such a system would require revalidation of the software by the original
distributor of the software whenever hardware is changed -- but this may
be a relatively infrequent occurrance as hardware reliability is improved.
The identity of the originator of the request for revalidation could be
confirmed by the caller-id feature of the new telephone systems -- or by
a return call from the vendor to a prearrange number on the registration
card -- and an appropriate 976/900 number could be used to collect some
additional fee to cover the cost of providing revalidation keys.  Indeed,
a third party service company could be set up to handle revalidations for
several software vendors.

If licensing issues can be resolved, the distributed software could build
up a private/public key pair with the public key to be provided by a user
to the software vendor for secure transmission of the revalidation key to
the program without interception by the end user.  But, this should not be
necessary because even if the end user knows the key for a particular cpu
he will not be able to use that information to make the program run on any
other systems.  Of course, this whole process could probably be done in the
open without any need for cryptographic protection of the actual program by
relying on the challenge (based on hash of hardware rom's + a cmos random
variable) and answer key (unique for each machine environment) provided by
the software vendor.  Such an arrangement would probably also be effective
for software protection in a network distributed environment -- by allowing
codes to only run on specific machines for which the program is licensed
whether or not one or more shared copies of the software are stored on one
or more central fileservers.  This would also avoid crypto export problems.

Finally, for major site licensees, a version of the challenge/response key
generation program could be provided to the distributor/end-user management
under appropriate contractual restrictions specifying appropriate physical,
personnel, legal and technical safeguards to avoid unauthorized disclosure.

Perhaps we are entering a new age of effective software protection based on
mathematical abstractions rather than hardware dongles, defective media, or
the individual integrity of members of an extremely heterogenous user group.

Of course, there are those who would argfue all software should be available
completely for free.  However, as a software author, I would starve if there
is not some more effective means to keep my codes from being stolen and/or
misused (in the case of my new network analyzer/supervisory monitoring code
-- soon to be released -- alpha inquiries welcome) on unauthorized machines.
No one has the right to install and use copies of my codes on any machines
without first acquiring a license for those machines -- plain and simple --
and a fee will be charged to keep the software author happy and productive.

Merlin
The Magician
King Arthur's Court

------------------------------------------------------------------------------

Copyright (c) 1992 Alexander James Annala.  All rights reserved.

The concepts discussed herein may be subject to patent claims by the
originating author and/or other individuals.  Please make appropriate
inquiries before employing these concepts in any commercial products.

Additional enhancements to these techniques are subject of a current
patent filing and will be discussed publically later -- and/or with a
nondisclosure agreement in place at an earlier date if desired.

Annala Research Inc.
Post Office Box 77621
Los Angeles, CA  90089-2520

Internet:   annala@neuro.usc.edu

Telephone:  (213)735-0894
FAX:        (213)746-2863

------------------------------------------------------------------------------

