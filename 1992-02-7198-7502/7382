Path: msuinfo!netnews.upenn.edu!jvnc.net!darwin.sura.net!wupost!usc!zaphod.mps.ohio-state.edu!hobbes.physics.uiowa.edu!ns-mx!pyrite.cs.uiowa.edu
From: jones@pyrite.cs.uiowa.edu (Douglas W. Jones,201H MLH,3193350740,3193382879)
Newsgroups: sci.crypt
Subject: Re: compress Encryption program???
Message-ID: <10898@ns-mx.uiowa.edu>
Date: 17 Feb 92 14:49:34 GMT
References: <1992Feb17.085744.22125@cs.ruu.nl>
Sender: news@ns-mx.uiowa.edu
Lines: 49

From article <1992Feb17.085744.22125@cs.ruu.nl>,
by nevries@cs.ruu.nl (Nico de Vries):
> 
> Some attempts of me to crack this:
> 
> 1 Suppose I know the nature of the data, English text. This means
>   I don't know the starting tree but I can guess the tree after a
>   while. Splay trees adapt very fast. Some puzzling should do it.

They adapt fast, but they don't adapt optimally and the particular
structure of the tree at any point in the data stream is highly
dependant on the recent context.  The number of trees that would be
likely in a "fully adapted" splay tree is still astronomical.
> 
> 2 Suppose I have an idea of the end tree and use reverse decompression.
>   This is not trivial but I can use my common sence and a huge dictionary
>   to fill the missing gaps.

I'm not sure how to do it either, but I think that knowing the final tree
would indeed allow you to do reverse decompression.  This suggests that
a known plaintext attack with a text crafted to force the tree into a
particular configuration might be useful.  I haven't had time to design
a character sequence to force a splay tree into a known state, but I think
that one can be constructed on an N character alphabet in a length not
shorter than Nlog2N.
> 
> 3 Suppose I handle as if a standard SPLAY tree was used and channel errors
>   had occured. Unlike arithmetic codes trees are supposed to have some
>   channel recovery properties.

To my knowledge, splay trees have none of the error recovery properties
of static Huffman codes.  It's worth pointing out that the basic
approach to combining encryption and compression that I used can also be
applied to arithmetic codes.
> 
> Another disadvantage I see is little loss in compression ratio and the
> specific nature of the algo. It wouldn't, I think, apply to already
> compressed data since the tree can be predicted very fast then.

Most compression algorithms are poor at compressing already compressed
data.  Already compressed data doesn't seem to lead to an easily predicted
tree; the data stream for already compressed data should look random, and
this randomizes the tree, keeping it roughly balances, but the security of
the encryption lies in that word -- roughly.

					Doug Jones
					jones@cs.uiowa.edu

Hi! I am a .signature virus. Copy me into your .signature to join in!
