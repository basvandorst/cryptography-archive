Path: msuinfo!uchinews!ncar!elroy.jpl.nasa.gov!ames!sgi!fido!bolyard.wpd.sgi.com!nelson
From: nelson@bolyard.wpd.sgi.com (Nelson Bolyard)
Newsgroups: sci.crypt
Subject: Re: Pawn shops etc, and a NEW question.
Message-ID: <h9geqc8@fido.asd.sgi.com>
Date: 19 Feb 92 20:25:23 GMT
References: <299ffefa.knapper@knapper.cactus.org>
Sender: news@fido.asd.sgi.com (Usenet News Admin)
Organization: Silicon Graphics, Inc., Mountain View, CA
Lines: 95

"Woody Baker" <woody@knapper.cactus.org> writes:
>
>I have a question for a real guru type.  How could I accomplish
>the following:
>
>
>	1. 	Mass distribute a program or data file in encrypted form
>		such that some one who wanted to activate it, could
>		call me, supply say a credit card number, and be enabled
>		to use the file.  The distribution media for this file or 
>		program would have the same encrypted data on all copies.
>		
>		The real question, is how to handle this without causing
>		multiple people to be able to access the data.  For 
>		example, each user that buys access to it, would be given
>		an authorization code that would unlock the data, but if
>		he took that code to another copy of the distribution 
>		media, it would not unlock the item?
>		
>	2.	Would some variation of a Public key system do this, and
>		if so, just how?

Here's a scheme that I've considered.  

Each package of programs/files on the CD ROM is encrypted using some
scheme, symmetric or asymmetric.  Each package requires a different key to
decrypt that package, which we'll call the package key.

The program that decrypts the package is not encrypted and is provided on
the CD ROM itself or some other suitable media shipped with the CD ROM.

When the customer wants to buy the package, he runs the program which then
randomly generates a public-key and private key pair.  RSA, Diffie-Hellman,
or any other public key scheme should work adequately.  It displays the
public key.  The customer calls you and reads you his credit card number
and the public key which the now-running program has just displayed.  

After verifying the credit card order, the Customer Service Representative
(CSR) runs a program on his computer and enters the public key which he has
received from the customer.  The program then encrypts the package key with
the public key and displays the result, which the CSR reads back to the
customer.

The customer types in the value he gets back, and the decryption program
decrypts the package key using the private key that it made up, and only it
knows.  It then uses the decrypted package key to decrypt the package.

Each time the program is run, it (probably) produces a different
public/private key pair.  Hence the required encrypted package key is
(probably) different each time it is run.  And so, if the customer writes
down the value he is given by the CSR, it will do him no good at some later
run of the decryption program unless he gets lucky and gets the same public
key.

This process can be simplified (from the customer's point of view) and made
less error prone by taking the humans out of the loop, and having the
customer's computer running the decryption program talk directly via modem
to the CSR's computer, which can process the credit card order and generate
the encrypted package key.  This is not unlike what happens when you buy
something with your credit card today.  The clerk runs your card through a
little box and enters the purchase amount, and after making a quick phone
call, the box displays an "authorization code".  Hence I suggest it would
not seem foreign to most people, and should be acceptable to most
customers.

The process could also easily include the customer's identity and credit
card number, as has been suggested by another poster in this newsgroup, in
the information recorded in the package by the decryption program.

Now, since this idea uses public key encryption, and since all (or nearly
all) public key methods known to me are patented (or patent pending) within
the United States, an implementation of this idea could be subject to one
or more patents, and any implementors should bear that in mind and obtain
the rights to use such patents as necessary.

While this scheme may prevent the customer from being able to use the same
encrypted package key twice, it does not stop him from making copies of the
decrypted software once he has gotten it decrypted.  Making the paid-for
and decrypted package uncopiable is a different problem.

Also, a dedicated cracker could determine the decryption algorithm through
disassembly.  After running the program and obtaining a valid encrypted
package key, with judicious use of breakpoints one could ascertain the
unencrypted package key.  Thereafter one could write a program to decrypt
the CD ROM at will using the package key.  Given that doing so requires
obtaining a valid encrypted package key, which presumably costs money, it
is unclear why anyone would do this instead of merely copying the decrypted
results.

Comments ?

--
Nelson Bolyard      nelson@sgi.COM      {decwrl,sun}!sgi!whizzer!nelson
Disclaimer: Views expressed herein do not represent the views of my employer.
--
