Path: msuinfo!uchinews!linac!att!ucbvax!virtualnews.nyu.edu!brnstnd
From: brnstnd@nyu.edu (Dan Bernstein)
Newsgroups: sci.crypt
Subject: Re: the trusted public-key distribution problem
Message-ID: <5781.Feb1602.43.3092@virtualnews.nyu.edu>
Date: 16 Feb 92 02:43:30 GMT
References: <35654@mentor.cc.purdue.edu> <29902.Feb1321.42.5492@virtualnews.nyu.edu> <35864@mentor.cc.purdue.edu>
Organization: IR
Lines: 100

In article <35864@mentor.cc.purdue.edu> hrubin@pop.stat.purdue.edu (Herman Rubin) writes:
> But if I am trying to 
> cmmunicate something confidential to the particular Dan Bernstein
> who I believe posted the message to which I am responding, and there
> is some reason for someone to impersonate this person,

I think we need a bit of terminology here. A network consists of some
number of _nodes_ (people, for instance) connected by some number of
one-way or two-way _links_. Each node knows which other nodes it's
linked to at any given time; it can transmit messages along any of its
links, hopefully to be received by the node at the other end. If A is
linked to B and B is linked to C then A has a _virtual link_ or
_indirect link_ to C by grace of B. Of course, the capacity,
reliability, security, etc. of a virtual link depend on the A-B and B-C
links, the nature of B's forwarding, the protocol used, etc.

(When I say that almost all communication is by rendezvous, I mean that
links don't magically spring up between two nodes. A node usually has
direct links to its physical neighbors and virtual links---which are
really paths of direct links---to everyone else. That's it.)

What does public-key cryptography do? Well, there are a huge number of
possible _keys_ out there. Anyone can reach out and grab a random key,
then publish the key. Then others can encrypt messages with the key---
i.e., produce pairs (foo(key,m),key) such that the one who grabbed the
key knows how to compute m from (foo(key,m),key). The one who grabbed
the key also knows how to sign messages with the key---i.e., produce
triples (m,bar(key,m),key). For this system to be effective, bar and the
inverse of foo must be hard to compute without additional information
which was generated during the grabbing process. Let's assume that we
have exactly such a cryptosystem.

Here are the two most crucial definitions. If a node sends a message
encrypted in a given key, it has sent a message _to_ the key---not just
to whatever abstract entity might own the key. If a node sends a message
signed in a given key, it has sent a message _from_ the key. Messages
are flying through the network from one key to another, and by
assumption these messages can be neither read nor corrupted except by
whoever grabbed the key (and anyone in cahoots with whoever grabbed the
key, of course).

Consider a node, stealth, inside the network. stealth grabs some number
of keys. It spreads the keys around---to its neighbors, and via any
virtual links which it uses, perhaps tacked onto all messages it sends.
Meanwhile, it records any interesting keys it sees. Keep in mind that
stealth's knowledge of the network is entirely defined by the messages
it receives from its neighbors. Conversely, what the rest of the network
knows about stealth is entirely defined by the messages sent out by
stealth's neighbors. (Similar statements can be made of any partition of
the network.) So the rest of the network is, from stealth's point of
view, an equivalence class of possible networks, in which its neighbors
and the keys are the only constants. It therefore makes no sense for
stealth to communicate with anything but its neighbors and the keys it
sees, and it can do both of those securely. Conversely, it makes no
sense for the rest of the network to communicate with stealth itself;
the rest of the network can only communicate with the keys which
stealth's neighbors claim to have come from stealth, and that can also
be done securely.

I claim that this is as secure as a network can ever become. Herman and
others keep talking about the ``problem'' that a key supposedly from
stealth may not actually be one of stealth's keys. But if all of
stealth's neighbors cooperate to preserve this illusion---no mean feat
in the first place, given how many links a typical node has in the real
world---then stealth is up the creek anyway, and no possible mechanism
within the network can give stealth any idea that something is wrong.
The only solution is to add a new link, giving stealth a new neighbor.

In article <35864@mentor.cc.purdue.edu> hrubin@pop.stat.purdue.edu (Herman Rubin) writes:
> Now suppose Joe Bftsplk
> enters a public key procedure claiming to be Dan Bernstein.  How
> am I to be able to tell that this is a fraudulent public key, put
> in for the purpose of receiving confidential information not intended
> to Joe Bftsplk?

Who cares? One key tells you that another key said that another key said
something. You're getting that message by arrangement of the
intermediate keys, and it's a fact of life that you have absolutely no
idea whether that last key is connected with any particular real
person---unless the real person gave you his business card with that
key. Why is this a problem?

Under what conceivable set of circumstances would you have confidential
information to send to Dan Bernstein without having seen Dan Bernstein's
key? I claim that if you've heard of Dan Bernstein, then there's at
least indirect link from him to you, and your knowledge of him is based
solely on the information you've received via those indirect links. Now
we can construct an alternate universe in which *this* Dan Bernstein has
been replaced by Joe Bftsplk, who's simply using all the same keys and
sending all the same messages along the same links. Given the
information you have, these two universes are equivalent. So how come
it's a problem that Dan Bernstein receives your confidential information
in on universe and Joe Bftsplk receives it in the other?

Maybe you don't like my key-centric view of secure communication: it's
really the keys which are communicating, and all people can do is
exchange business cards which assert ``Key X has gracefully agreed to
let me decrypt messages sent to it.'' But that's life. Get used to it.

---Dan
