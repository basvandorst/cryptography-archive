Path: msuinfo!uchinews!ncar!elroy.jpl.nasa.gov!usc!wupost!uunet!mcsun!uknet!cam-cl!cam-cl!rja14
From: rja14@cl.cam.ac.uk (Ross Anderson)
Newsgroups: sci.crypt
Subject: Re: Encrypted CDROM Software Distribution (was Pawn Shops etc ...)
Keywords: birthmarks
Message-ID: <1992Feb27.152314.24073@cl.cam.ac.uk>
Date: 27 Feb 92 15:23:14 GMT
References: <1992Feb25.012231.8716@iecc.cambridge.ma.us> <edotto.699034656@uipsuxb> <90912002@bfmny0.BFM.COM> <1992Feb25.192356.3547@qualcomm.com>
Sender: news@cl.cam.ac.uk (The news facility)
Reply-To: rja14@cl.cam.ac.uk
Organization: U of Cambridge Computer Lab, UK
Lines: 32

I was at a seminar in London in about 1985 run by the BCS Technology of
Software Protection SIG. One of the speakers was from IBM, a lawyer rather
than an engineer, and he discussed at some length how IBM set about proving
that someone had copied their ROM or even bits of it.

There were a number of tricks but the most universal and reliable which
they'd come up with after years of effort and no doubt megabucks spent
on consultants were what he called `software birthmarks'.

These are the effects of programming style on code and the most common
(and legally useful) example was the order in which registers are pushed
and popped.

A colleague here (Mark Lomas) used this idea to develop a software signer.
Given a slab of executable code, it searches for places where code 
sequences can be replaced by synonyms and uses permutations of these to 
hide an encrypted copyright message.

It strikes me that this technology can make a useful contribution to the
CDROM software problem. Device drivers for a given make of CDROM will
typically be hard to reverse engineer and so make a prime candidate for
a hidden signature. Public key techniques can then be added to make them
tamperproof. The final touch will the ability to transfer birthmarks to
all executables which the driver decodes from the CDROM and to ensure
that they all get revalidated from a single authorisation code. Once a 
year should be enough revalidation to ensure that serious users don't
cheat, and that's as much as the software houses need: a bit of piracy
can sell a good product, and, if you can allow piracy but control it
by limiting the pirated software to an average six moths' usefulness,
you could get the best of both worlds.

Ross Anderson
