Xref: msuinfo alt.security:5375 sci.crypt:7374
Path: msuinfo!uchinews!linac!uwm.edu!wupost!uunet!psinntp!kepler1!andrew
From: andrew@rentec.com (Andrew Mullhaupt)
Newsgroups: alt.security,sci.crypt
Subject: Re: disk scavenging
Message-ID: <689@kepler1.rentec.com>
Date: 16 Feb 92 05:44:23 GMT
References: <1992Feb13.133233.16964@fwi.uva.nl> <kpl2dlINNcmd@neuro.usc.edu> <15094@gollum.UMCS.Maine.EDU>
Reply-To: andrew@kepler1.UUCP (Andrew Mullhaupt)
Followup-To: alt.security
Organization: Renaissance Technologies Corp., Setauket, NY.
Lines: 56

In article <15094@gollum.UMCS.Maine.EDU> who@gandalf.UMCS.Maine.EDU writes:
>	Well, it wouldn't be too hard to write a program that first
>overwrites a file with 0's and then deletes it. It is the only way to
>be sure.

In fact programs which overwrite data usually need to overwrite the data
multiple times, in order to sufficiently obliterate any electrical/optical
residual image. It's easy enough to do, and it helps frustrate a determined
opponent who can gain physical access to your hardware. The number of
different patterns you need to use depends on the media. You also have to
worry about what a cache does to these writes.

In the case of tapes (either helical scan or not) you need to worry about
'print-through', where the magnetic image on the tape transfers from one
layer to an adjacent one during storage periods. This means you have to 
overwrite parts of the tape which are in use by other files, and this
may not be easily done (if at all).

Many filesystems are automatically backed up to tapes which are refreshed
(usually on a yearly basis) and so there may be a number of places where your 
file has to be hunted down and killed.

Now I am describing a higher level of security than most systems need to
provide; but especially in the case of removable media, it is not hard
to imagine your opponent using a device which reads your media as an analog
signal and then subtracts out the apparent data and then passes the 
residuals through pattern recognition (he has a decent model for the
characteristics of your write heads by modeling the existing signal) and
then seeing what kind of data he can read. If the alignment between the
heads which wrote the sensitive data and those which tried to erase it
is not perfect, the residual signal could be embarrasingly big. In
the case of nonremovable media this attack is more complicated, but still
a possibility.*

It's hard to imagine this kind of attack being practical until you think
about the following situation: The opponent has a choice between easy
intercept of your ciphertext and then breaking your cipher, or looking
for the plaintext or key in the residual image of the temporary files
used in encryption. Even if he can only get a very faint image of the
plaintext, his attack on your cipher may be much enhanced. Seems to me
that the better you make the cipher, the more you have to worry about
these side issues, since the opponent will attack the _system_ as a whole
at what he thinks is its weakest point.


Later,
Andrew Mullhaupt


*Now different operating systems put data on a drive in different ways. In
the case of DOS, it's pretty easy to find 'erased' data, but in UNIX, it
may be much harder. I would suspect that you'd need to reconstruct a lot
of erased data before you found the interesting bits. Even so, sorting
out a Gig of erased disk image is less work than brute force against des,
so...

