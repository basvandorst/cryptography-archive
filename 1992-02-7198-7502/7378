Path: msuinfo!uchinews!ncar!asuvax!cs.utexas.edu!rutgers!ub!galileo.cc.rochester.edu!rochester!cantaloupe.srv.cs.cmu.edu!crabapple.srv.cs.cmu.edu!PLAY.TRUST.CS.CMU.EDU!bsy
From: bsy+@CS.CMU.EDU (Bennet Yee)
Newsgroups: sci.crypt
Subject: Re: the trusted public-key distribution problem
Message-ID: <1992Feb17.035412.194001@cs.cmu.edu>
Date: 17 Feb 92 03:54:12 GMT
References: <35246@mentor.cc.purdue.edu> <28019.Feb1208.07.0992@virtualnews.nyu.edu> <35654@mentor.cc.purdue.edu> <11065@lectroid.sw.stratus.com>
Reply-To: bsy+@cs.cmu.edu
Organization: Cranberry Melon, School of Cucumber Science
Lines: 58
Nntp-Posting-Host: play.trust.cs.cmu.edu

In article <11065@lectroid.sw.stratus.com>, cme@ellisun.sw.stratus.com (Carl Ellison) writes:
>In article <35654@mentor.cc.purdue.edu> hrubin@pop.stat.purdue.edu (Herman Rubin) writes:
>>In article <28019.Feb1208.07.0992@virtualnews.nyu.edu> brnstnd@nyu.edu (Dan Bernstein) writes:
>>>So I guess the real question is ``What goes wrong if a man can lead two
>>>separate lives?''
>>
>>That is not the real question.  The real question is about impersonation.
>>If Joe Bftsplk posts a public key as Dan Bernstein, there is a danger that
>>information intended for Dan Bernstein will be understood by Joe Bftsplk.
>
>
>This is a problem only if you think of Dan Bernstein as being addressed
>only by the character string "Dan Bernstein".  If, however, you record
>his name as ("Dan Bernstein",<public key>) and accept any changes to
>that pairing only from someone who has the private half of that public
>key, then you'll always be talking to the same Dan Bernstein.
>
>None of this says anything about what that person's driver's license says.

Indeed, ``Dan Bernstein'' is just a fiction -- it's a tag that we put
on the <public key> to permit us to find the public key easily, no
more. 1/2 :) If somebody tries to put the same tag on <public key 2>,
it should be easy to not get the two public keys confused.

There _is_ a problem with the idea that one should accept changes to
your pairing as suggested above, and that is the issue of revocation.
If Dan assumed physical security of his office to keep his private key
secret and but finds that Guido had broken down his door to get the
key, how can you now tell Dan from Guido?  They both can post
different updates (``Dan Bernstein''', <new public key>) to the net
all they want.  They both know the private key, and are totally
indistinguishable (at least via network flammage :-).

What Dan would probably say is that you should find somebody _else_
whom you trusts to verify the new Dan-Bernstein-public-key.  This is
essentially another principal, say Alice, that you trust to speak for
Dan.  By asking a set of people (say Alice, Bob, Carol, David, and
Eve), you can eliminate the total trust that you were required to have
in Alice and only assume that a majority of A-E aren't corrupted.  Of
course, care must be taken that any probability estimates take into
account possible non-independence (e.g., Alice, Bob, Carol, and David
have all been recently offended by Dan, so are playing a practical
joke on him).  Dan can employ a quorum consensus style update
algorithm to notify A-E when he notices Guido's misdeeds; of course,
this update should be through some trusted channel and not via
messages signed by the now-exposed private key, such as face-to-face
meetings etc.

You may wish to look at _Authentication in Distributed Systems: Theory
and Practice_, Lampson, Abadi, Burrows, and Wobber in SOSP13.  They
analyze some of the ideas (principals, channels acting as principals,
etc) being brought up here.

-bsy

-- 
Bennet S. Yee		Phone: +1 412 268-7571		Email: bsy+@cs.cmu.edu
School of Computer Science, Carnegie Mellon, Pittsburgh, PA 15213-3890
