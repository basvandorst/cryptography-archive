Path: msuinfo!uchinews!linac!uwm.edu!wupost!cs.utexas.edu!uunet!mcsun!sun4nl!alchemy!nevries
From: nevries@cs.ruu.nl (Nico de Vries)
Newsgroups: sci.crypt
Subject: Re: compress Encryption program???
Message-ID: <1992Feb17.085744.22125@cs.ruu.nl>
Date: 17 Feb 92 08:57:44 GMT
References: <1992Feb14.184204.6025@osf.org> <10845@ns-mx.uiowa.edu>
Organization: Utrecht University, Dept. of Computer Science
Lines: 58

In <10845@ns-mx.uiowa.edu> jones@pyrite.cs.uiowa.edu (Douglas W. Jones,201H MLH,3193350740,3193382879) writes:

>From article <1992Feb14.184204.6025@osf.org>, by omar@osf.org (Mark Marino):
>> 
>> Thanks for the info.  Unfortunately, I need something that runs on U*IX 
>> boxes.  Anyone know of any compression-encryption combo programs for U*IX?
>
>I have a program that uses splay-tree based compression (a sub-optimal
>prefix code scheme that is faster than adaptive Huffman codes and
>requires far less memory).  The overall performance of the compressor
>is about half the speed of UNIX compress with comparable compression
>quality when you ask it to use a 64 state source model.
>
>The initial trees used by the compressor and expander default to balanced
>trees, but you can perturb the trees with a password.  The tree is
>perturbed by applying the adaptive compression algorithm to update the
>tree for the successive characters of the password without transmitting any
>data.  This must, of course, be done identically at the compressor and
>expander, since the trees used at each end must remain identical as they
>are adjusted to reflect each character transmitted.
>
>To date, I know of no analysis of the security of this encryption scheme,
>but I suspect that for passwords of 8 or more characters, it provides at
>least useful encryption.
>
>I have source code, and the basic ideas were published in ``Application of
>Splay Trees to Data Compression,'' Communications of the Association for
>Computing Machinery, 31, 8 (Aug. 1988) 996-1007.
>
>					Doug Jones
>					jones@cs.uiowa.edu

Some attempts of me to crack this:

1 Suppose I know the nature of the data, English text. This means
  I don't know the starting tree but I can guess the tree after a
  while. Splay trees adapt very fast. Some puzzling should do it.

2 Suppose I have an idea of the end tree and use reverse decompression.
  This is not trivial but I can use my common sence and a huge dictionary
  to fill the missing gaps.

3 Suppose I handle as if a standard SPLAY tree was used and channel errors
  had occured. Unlike arithmetic codes trees are supposed to have some
  channel recovery properties.

Another disadvantage I see is little loss in compression ratio and the
specific nature of the algo. It wouldn't, I think, apply to already
compressed data since the tree can be predicted very fast then.

Nico de Vries  MAIL: nevries@praxis.cs.ruu.nl
---
#include <dislaimer&MY opinion.h++>
"I know my English spelling is bad, but if I used my    "   - O      
"own language you probably couldn't read it at all.     "    |        
"(And above that I am a bad typist too!)"                   \_/    

Hi! I am a .signature virus. Copy me into your .signature to join in!
