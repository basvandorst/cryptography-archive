Path: msuinfo!caen!uakari.primate.wisc.edu!samsung!uunet!decwrl!pa.dec.com!nntpd.lkg.dec.com!koning.enet.dec.com
From: koning@koning.enet.dec.com (Paul Koning)
Newsgroups: sci.crypt
Subject: Re: One-time keys & secure algorithms -- Was: Pretty Good (tm) Privacy
Message-ID: <33095@nntpd.lkg.dec.com>
Date: 31 Jan 92 19:20:17 GMT
References: <10541@lectroid.sw.stratus.com> <10585@lectroid.sw.stratus.com> <10297@cactus.org> <5cygd5a@lynx.unm.edu>
Sender: news@nntpd.lkg.dec.com
Reply-To: koning@koning.enet.dec.com
Organization: Digital Equipment Co., distributed systems architecture
Lines: 37


In article <5cygd5a@lynx.unm.edu>, ee5391aa@triton.unm.edu (Duke McMullan n5gax) writes:
|>...
|>For better or worse, the algorithms don't fall into a dichotomy of secure/inse-
|>cure.  Any algorithm can be penetrated, given unlimited time, unlimited compu-
|>ting resources and unlimited plaintext/ciphertext pairs.  Any, that is, except
|>one-time keys.
|>
|>(Question:  is the security of a one-time key enhanced by using it in a highly
|>secure cryptographic transformation, as opposed to simple XOR?  I've heard ar-
|>guments in both directions, but have never seen a convincing analysis.)
|>...
|>-- 
|>	    The very, very best hiking is found . . . underground!
|>  Duke McMullan n5gax nss13429r phon505-255-4642 ee5391aa@triton.cirt.unm.edu
|>
Strange that there should be arguments both ways, since the answer is
obvious (and indeed you gave it in the preceding paragraph).

As you said, "any algorithm can be penetrated ... except one-time keys."
In other words, as is well known, with one-time key encryption the
plaintext is completely secure.

Since the plaintext is already completely secure, it should be totally obvious
that nothing can be gained (nor lost, of course) by additional fiddling with
the plaintext.

This applies of course to one-time key done correctly.  If done incorrectly,
what you have is not one-time key at all but something different, usually
very weak.  Such a different (breakable) system may well benefit from 
other funny transformations on the plaintext, since that would make its
weaknesses less obvious and therefore less vulnerable.  If you are concerned
about preserving a little bit of security when people use one-time key
incorrectly (for example by doing two-time key instead) then you might
want to obscure the plaintext.

	paul
