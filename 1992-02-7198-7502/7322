Xref: msuinfo alt.security:5305 sci.crypt:7322
Path: msuinfo!uchinews!linac!uwm.edu!cs.utexas.edu!usc!news
From: merlin@neuro.usc.edu (merlin)
Newsgroups: alt.security,sci.crypt
Subject: secure telnetd password encryption & authentication techniques
Date: 13 Feb 1992 01:15:24 -0800
Organization: University of Southern California, Los Angeles, CA
Lines: 26
Message-ID: <kpkdpcINNbdf@neuro.usc.edu>
NNTP-Posting-Host: neuro.usc.edu

I would have thought this potential problem was fixed long long ago -- back
when dinosaurs romaed the earth -- but it hasn't been fixed -- and I expect
it would better for all of us if it were to get fixed right away.

The problem is that user identification and password pairs are transmitted
in cleartext during ethernet tcp/ip based interactive sessions.  There are
numerous readily available software tools which make the interception with
full logging of one or both sides of such interactive sessions a relatively
trivial introductory level programming exercise.  In addition, there are a
few ethernet cards available for common '386 ISA bus machines running msdos
which permit programmed alteration of the card's ethernet identification --
raising the spectre of introducing bogus messages supposedly originated in
the course of any current interactive session but actually sent by third 
parties not part of the original interactive session.  This problem is made
more serious by the need to place ethernet access points (cables and taps)
in relatively unsecure locations as networks grow larger every day.

I suspect one appropriate solution would be to develop and distribute some
software for sysv unix, bsd unix, msdos pc's, and mac's which implements
at a minimum encryption of all transmitted passwords -- and might also use
a cryptographic technique to authenticate every message transmitted as a
part of a supposedly secure point to point interactive session.  Does any
such central site daemon/remote client software exist today?  If not, what
needs to be done to get education, commercial, and government clients to
make this "security bug" a high priority problem for resolution by vendors?

