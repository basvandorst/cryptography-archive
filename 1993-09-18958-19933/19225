Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!ncrgw2.ncr.com!ncrhub2!ncr-sd!npg-sd!claborne
From: claborne@npg-sd.SanDiegoCA.NCR.COM (Chris Claborne)
Newsgroups: sci.crypt,comp.sys.novell
Subject: Re: Novell 4.0 and lack of protected-memory - security risk?
Message-ID: <6588@npg-sd.SanDiegoCA.NCR.COM>
Date: 10 Sep 93 16:43:41 GMT
References: <CD04H5.M8n@vu-vlsi.ee.vill.edu> <brettfCD0LCr.zE@netcom.com>
Organization: NCR Corp., Network Products - San Diego
Lines: 81
Xref: msuinfo sci.crypt:19225 comp.sys.novell:26840



>kasturi@vu-vlsi.ee.vill.edu (Srinivasa M. Kasturi - EE8460 Spring 1991) writes:
[stuff deleted]


>Now, having said that, while I don't consider memory protection
>essential for client/ server, pre-emptive muiltitasking is highly
>desirable, because:

>When all requests require about the same amount of CPU time (as would
>be the case in a novell server acting only as a file server - each
>request requires a very small CPU time slice), pre-emptive mltitasking
>will not change the "total response time", but willt will increase the
>average and minimum response time.  For example, if we have three
>requests, each requiring 10 ms CPU time (and each involving no blocking
>- i.e. the data can be read from cahce and thus requires no disk
>access), in co-op multitasking, each will be serviced sequentially. 
>The first will be done in 10 ms, the second in 20 ms, and the third in
>30 ms.  The total time (time required for all three to complete) is 30
>ms, the average time is 20 ms, and the minimum time is 10 ms.  Now,
>lets say we are using a pre-emptive multitasking system that doles out
>time 1 microsecond at a time.  Then , request 1 runs for 1 us, resiest
>2 runs for 1 us, then 3, then 1, then 2, etc.  The result is that
>request 1 finishes in 28 ms, 2 in 29 ms, and 3 in 30 ms.  "Total time"
>is 30 ms, average is 29 ms, fastest is 28 ms.  (Both examples overlook
>the scheduling overhead, which is smal in either case, but smaller for
>co-op multitasking).  Thus, nothing is really gained by using
>pre-emption (and some would say something is lost).

>But, in the case of client/server, a novell server may be acting as a
>database server.  In that case, a single request might take seconds of
>CPU time.  While using pre-emption will not reduce the "total response
>time" (as defined above) for a series of requests, it will reduce the
>average and the minimum, if the amount of CPU time for each request
>varies widely.  Thus, pre-emption will make sure that short requests
>finish faster than long requests, which, in an interactive system, is
>highly desirable.  Databse server NLMs, of course, can also help things
>along in a co-op system, by voluntarily releasing control before a
>request is finished, if the request is expected to take a long time to
>process, but IMHO, it is more efficient to just use pre-emption code in
>the operating system.

   Ok I'll buy why you would want pre-emptive in general purpose systems 
but if I want to dedicate a machine to a problem  (like file and print
services) and get the best performance possible I'd go with co-op.
Try and beat Netware on the same platform.  The problem with Netware 
is that they wanted to be something that wasn't really in the design
for Netware.  Now they want to be more of a general purpose system...
Ok... Build an OS that vendors can use that will allow them to tune 
their app to be a hog or not be a hog of system resources.  Oracle
and Sybase have done just that.  I have heard that Oracle on single 
processor UNIX box can't beat a  netware server for performance.  The
only problem is that you can't do any other background processing on 
it (no cron, shell scripts, etc) you gotta have a bunch of clients running
Sql*Net.  Now comes UNIXware.   Hmmm.  

   I guess in summary, I don't agree that pre-emtive is always the best way
to go.  Why cram all that extra overhead when it isn't needed.  Co-op 
has it's nitch (Netware proved that) and some times co-op can
be a disaster (Windows proved that).  Co-op is the better choice for a GP 
machine (like UNIX, NT, etc).  

   I use a UNIX box to run our Oracle RDBMS on.  I use it to
do just about everything.  Ok, it gets a little slow and bingo... I am
replacing it with a inexpensive multi-processor.  Now it's not really 
a fair comparison with a dedicated single processor DB server till I 
upgrade that to.

   As far as security gos.  I haven't seen anyone build an OS lately (last 
10 years... and keep in mind I'm a novice) that combines co-op + security.
Security is definately an issue when you consider the value of data out
there in memory and system stability when trying to run apps built by
more than one company.  

                                    ...  __o
                                   ..  _`\<,_
chris.claborne@sandiegoca.ncr.com  ...(*)/ (*).                 CI$: 76340.2422
PGP Pub Key fingerprint =  A8 FA 55 92 23 20 72 69  52 AB 64 CC C7 D9 4F CA
<#include standard disclaimer regarding my opinion an not my company's >
<#include philosophical comment >
