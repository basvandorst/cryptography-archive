Path: msuinfo!agate!howland.reston.ans.net!sol.ctr.columbia.edu!news.kei.com!ddsw1!indep1!clifto
From: clifto@indep1.UUCP (Cliff Sharp)
Newsgroups: sci.crypt
Subject: Re: NEW State Dept FLASH
Message-ID: <2507@indep1.UUCP>
Date: 29 Sep 93 17:04:14 GMT
References: <hudCDz8ss.7pp@netcom.com> <2499@indep1.uucp> <1993Sep28.150159.7353@news.unt.edu>
Organization: as little as possible
Lines: 92

In article <1993Sep28.150159.7353@news.unt.edu> srt@ponder.csci.unt.edu (Stephen Tate) writes:
>This discussion has been reduced to picking technical nits, when the
>two of you agree on the issues behind the whole conversation (whether
>speech that happens to be source code, or machine instructions, or
>whatever you want to call it, is protected speech).  However, the
>distinctions being made are so totally pointless that I have to point
>out a few things.
>
>In article <2499@indep1.uucp>, Cliff Sharp <clifto@indep1.UUCP> wrote:
>>   His message was NEVER machine instructions, or they could be executed on
>>some machine without compilation or interpreter-ation (?).  As you yourself
>>just said, they're being interpreted by OTHER machine instructions, which
>>implies they themselves are NOT machine instructions.
>
>I don't understand why the machine language of a CPU is any more
>"machine instructions" than source code or an ASCII string.  Who *cares*

   All too true.  Semantics are clearly getting in the way here.  There
really no longer exists any entity which can clearly be labeled "machine
code" (or for that matter "machine instructions") and remain a unique,
easily distinguished entity different from other similar sets of
computer operations.
   The original argument has been in email for a while now, and I think
a lot of the points of contention have been resolved (and we've pretty
much agreed to disagree on those that haven't).

   The purpose for the original discussion (that which prompted this
digression) was (I think...?) to compare notes on the idea of distributing
source code as a teaching material, a clarification of any ambiguities in
the description of an algorithm, and while distributing source code also
maintaining that it does not constitute an executable product _in and of
itself_ and so does not fall into the ITAR pit (did I say _that_?  :-)
and be seen as being illegal.  I fired the first salvo, worried that we
did need a strong, definitive, and if possible legally acceptable line of
demarcation which defined what was legal under ITAR and what wasn't, and
worried that that line was wavering.  In other words, I was trying to
begin a discourse, and did it badly.

   If this keeps up and we can't find a clear line of demarcation, the
Government is going to do it for us.  This might go so far as to have
them design a symbolic language interpreter that can take cryptological
algorithms and interpret and execute them, thus making the discussion of
algorithms themselves illegal because of the possible wide dissemination
of such stuff; if the algorithm itself can be defined as executable (and
thus regulated under ITAR), by dint of its "interpretability" by this
Gov't concoction, the results may be unthinkable.

>what exact piece of hardware inside this box on my desk is actually
>"executing" the exact ones and zeros?   By your definition, the only
>true machine instructions (the things that get directly executed
>by hardware) on my machine are the microcoded instructions within the
>CPU, so not even the machine language for the CPU are true "machine
>instructions".  Therefore *nothing* that I can insert in my machine are machine
>instructions, and yet, somehow, they instruct the machine in what to
>do.   Similarly, the contention that a LISP machine doesn't execute LISP is just
>as pointless --- *of course* a LISP machine executes LISP.  What
>goes on inside the box to get the LISP executed is irrelevant.  The
>machine that I'm instructing is the LISP machine, *NOT* the CPU inside
>the box....

   Semantics getting in the way again.  I certainly hope _someone_ can shed
some light here.
   Just for illustration and NOT to start another brouhaha, let me say about
the LISP machine that my personal "definition" of "machine code" (that which
is executed) includes only those bytes/words/whatever which are accessed
by the CPU ("CPU" as defined by the manufacturer of the hardware) during
instruction fetch cycles.  If you accept that definition, then you can see
that the Rockwell LISP machine is "executing" (fetching) not LISP instructions,
but ROM code contained in the LSI chip; thus my statement.  Your statement
is equally valid under any other definition of "machine code" or "executable
code".  Someone else can come up with still another perspective, I'm sure.
   My definition stems from my first exposure to computers, to a Data General
which required using front-panel switches to enter a short boot sequence
which started the chain of events which got the computer operational.  Just
a comment... but my definition above stems from that, and from an old saying
(attribution unknown) which says that "computers are dumber than a rock, but
smarter than the smartest programmer."  It can be said that if computers are
indeed dumber than a rock, then they can hardly be expected to understand
LISP... but counter-arguments can and probably do exist, so I'm not going
to press it, just display it to illustrate my line of thinking.

   I think we need to find some consensus (expert, if possible) on a common
terminology and exact definitions of the terms, and quickly, before Gov't
steps in and does it for us in their usual vague, self-serving way.  And
since I've obviously been a role model for the way NOT to do it, I'm going
to withdraw from the discussion, except for final answers to existing
postings and perhaps questions during any ensuing discussion.
-- 
+------------------------------------------------------------------------------+
|   Cliff Sharp  |      clifto@indep1.chi.il.us   OR  clifto@indep1.uucp       |
|     WA9PDM     |                 Use whichever one works                     |
+------------------------------------------------------------------------------+
