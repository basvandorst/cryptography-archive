Newsgroups: comp.arch,sci.crypt
Path: msuinfo!agate!boulder!kinglear!drew
From: drew@kinglear.cs.colorado.edu (Drew Eckhardt)
Subject: Re: Putting Copy Protection in the CPU
Message-ID: <1993Sep4.133959.26795@colorado.edu>
Sender: news@colorado.edu (The Daily Planet)
Nntp-Posting-Host: kinglear.cs.colorado.edu
Organization: University of Colorado at Boulder
References: <1993Aug31.114242.933@cs.su.oz.au>
Date: Sat, 4 Sep 1993 13:39:59 GMT
Lines: 112
Xref: msuinfo comp.arch:43594 sci.crypt:19062

In article <1993Aug31.114242.933@cs.su.oz.au> mrj@cs.su.oz.au (Mark James) writes:
>One way to robustly implement protection against illegal copying
>of software would be to put it into the CPU.

One even more robust way of totally eliminating illegal copying 
is to make it legal.  This can be done if you make software free,
and charge for value added services.

I'd be an idiot if I "bought" a piece of software for hundreds of dollars 
when I can get the same thing for free else where.  So, when I "buy" a piece 
of software, I'm paying for documentation, support, the physical act of 
copying, future development, upgrade opportunites, and other value added 
services on top of the software itself.  

Free Software, distributed under the GPL, makes this legal, with a number 
of nice fringe benefits.

- Try before you buy is legal.  If it doesn't work on your hardware, you aren't
  out hundreds of dolars.

- Every one who licenses the software has the same rights as the licensor to
  redistribute it.  This means that no company will have a monopoly on the 
  value added services, and customers can choose the best supplier of these
  services.

- Every one has access to the source code, and can fix bugs.  Software
  companies only have access to a limited subset of the possible 
  configurations.  So, there's a good chance that the software wasn't
  tested on your configuration, and may not work.  If other users with 
  the same configuration run the same software, chances are some one 
  else will encounter and fix the bug.

- Since anyone can make a bug-fix release, your vendor is motivated 
  to release bug fixes rather than waiting for the next distribution
  since they don't want you switching to some other vendor.  The current
  situation is that some vendors make a bug fix, and call it an upgrade
  with a $50 price tag.  Ie, Windows 3.1.  One of my friends, an artist,
  claimed to have a whizzy paint package and a net 24 bit graphics board.
  I went over to his place, tried it under Windows 3.0, and it crashed 
  half a dozen times within fifteen minutes.  The same program ran fine
  under Windows 3.1.  I consider that a bugfix, not an upgrade.

- Every one has access to the source code, and can add features.  If 
  there's a feature you need, you can commision a third party to add 
  it if the vendor refuses.
  
  Consequently, GNU's software is usually more featureful, robust, 
  and bug free compared to commercial offerings.

- Every one must release their changes to the source code if 
  they distribute binaries, so everyone is running compatable
  software and everyone gets new features.

Non-GPL'd free software has enjoyed incredible success, with 
inumerable products derived from BSD (Internally, HPUX, SunOS, and 
Ultrix are derived from BSD, other systems have BSD code, especially
networking), the X11 distribution, Andrew, etc.

Unfortunately, non GPL'd software has it's draw backs because people don't
have to make their changes available to others, people end up running 
different versions of the software, and bug fixes don't necessarily get out.
How compatable are HPUX, SunOS, and Ultrix?  I've been running MIT X11R5
for over a year, how long has your unix vendor supplied it, and does your 
unix vendor track the MIT public bugfixes (right now, to patchlevel 25).

Other companies, such as Cygnus, have proved that selling value added 
services for GPL'd software, such as support, ports to new platforms, 
etc. is commercially viable in spite of the software being "free."

Everybody wins.

>Software would be purchased over the phone, or at a store,
>to run on a particular (individual) CPU chip (identified by an
>id number).  It would be possible to purchase a second copy for
>a notebook-type CPU for a small additional charge.  Of course this
>would prevent the second-hand sale of software separate from its CPU,
>but software prices should come down with a reduction in piracy.

I've been burned too many times to buy a piece of software before
I *know* it works on my system.  If I can't test it, I don't buy
it.

Like it or not, pirate bulletin boards are an excellent advertising
medium for software vendors, and there have been allegations that some
companies actually upload their products to bulletin boards.  "Gurus"
respected by other users try the software, give a favorable review, 
and their coworkers, friends, and companies that wouldn't have had 
access to the product make purchases based on their recommendations.

So, an elimination of piracy could reduce the market for new 
software packages.

As far as keying the software to a CPUid, ethernet, etc : 

I've pulled all night hacking sessions to get something in
before a CD ROM is frozen.  With non-protected software,
if my machine dies I move to another one.  With protected 
software, unless the company would answer the phone at 3am
and give me a new key, I'd be up a creek without a paddle.

>The only feasible way to implement the copy protection would seem
>to be encryption of the binary, either with:

Don't do copy protection.   If you do, and there are similar,
non-copy protected products, people will buy the unprotected
products and hopefully you'll be out of business.

-- 
Boycott USL/Novell for their absurd anti-BSDI lawsuit. | Drew Eckhardt, 
Condemn Colorado for Amendment Two.		       | Profesional Linux 
Use Linux, the fast, flexible, and free 386 unix       | Consultant
Will administer Unix for food                          | drew@cs.Colorado.EDU
