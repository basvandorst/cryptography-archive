Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!wupost!waikato!aukuni.ac.nz!cs18.cs.aukuni.ac.nz!pgut1
From: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Subject: Re: Home Brew Crypto
References: <1993Sep9.180028.15768@ast.saic.com>
Organization: Computer Science Dept. University of Auckland
Date: Sat, 11 Sep 1993 17:53:33 GMT
Message-ID: <1993Sep11.175333.22212@cs.aukuni.ac.nz>
Lines: 39

In <1993Sep9.180028.15768@ast.saic.com> agnew@actd.saic.com () writes:

>Like many people on this group, I have had to develop my own encryption
>schemes, mainly because DES was too slow in software. I use my
>algorithms for generating random vectors although they might be usefull
>for security -- but then they might not :-( . The algorithm maps a 64
>bit unsigned integer to a 64 bit unsigned integer using 512 bits of
>key. Actually, it is an eight pass algorithm, simpler than DES, with 8
>64 bit sub-keys. optimized for the 80486 and use the bswap instruction
>to do a bit scramble in which each of the 8 output bytes receives a bit
>from each of the eight input bytes. Because of the byte translation
>that follows each permutation, it is unimportant what bit scramble is
>used as long as it is invertible and that each output byte is a
>function of each input byte. 
>[...]
>Each scramble is followed by eight table lookups using the xlate
>instruction.  There are 8 tables of 256 bytes which are used over again
>in each of the eight passes except that they are rotated right one byte
>so that the same table is never used twice for the same byte. These
>tables correspond to the infamous s-tables except that they were
>generated manually and haphazardly from Rand's table of a million
>random digits.  I further processed them "randomly" to decrease the
>input/output correlation coefficient and increase the number of bit
>differences. The only restriction on the table is that T(i) /= i.

This sounds vaguely like my NSEA algorithm.  If it's what I think it is, 
then there are several possible weakness in it - I had an enforced period of 
abstinence from computers about a year ago and spent the time picking holes 
in the algorithm.  I'll see if I can dig up my notes.  There are ways to 
avoid the various weaknesses, but in the end I never bothered since I found 
it easier to use an algorithm based on established, secure block 
transformations like MD5 and SHS.

Peter.
--
 pgut1@cs.aukuni.ac.nz||p_gutmann@cs.aukuni.ac.nz||gutmann_p@kosmos.wcc.govt.nz
peterg@kcbbs.gen.nz||peter@nacjack.gen.nz||peter@phlarnschlorpht.nacjack.gen.nz
             (In order of preference - one of 'em's bound to work)
                 -- A bird in the hand does it on your wrist --
