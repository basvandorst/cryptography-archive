Newsgroups: sci.crypt
Path: msuinfo!uchinews!news
From: dave@blackjoke.bsd.uchicago.edu (Dave Griffith)
Subject: Re: Putting Copy Protection in the CPU
Message-ID: <1993Sep7.203706.6994@midway.uchicago.edu>
Sender: news@uchinews.uchicago.edu (News System)
Organization: University of Chicago -- Academic & Public Computing
References: <1993Sep7.192738.20402@CSD-NewsHost.Stanford.EDU>
Date: Tue, 7 Sep 1993 20:37:06 GMT
Lines: 52


Well, I've been gone for a week, so someone else might have posted this, but  
the most elegant "copy-protection" scheme going is something called  
"super-distribution" by its creators (names and references utterly escape me at  
the moment).  It works as follows:

The software is distributed freely (or possibly copying costs for those off the  
net).  Anyone can copy it, anyone can put it out for ftp.  Even multi-hundred  
thousand dollar packages.  However, built into the source code is a call that  
periodically debits a chunk of electronic cash from some specified place for  
the user.  Public key cryptography is used to implement the (untraceable,  
unforgable, etc.) electronic cash, which can be vended much like charges for  
postal meters, or even over the net.  The software is tagged with a public key  
of the creator.  The public key is used to encode the electronic cash debited  
from the user, creditting it to the software creator. Thus running the software  
costs, proportional to the amount that you actually use it, and the money goes  
to the creator of the software.  This all works most simply if the OS enforces  
it (i.e every program has a charge section and public key, and the OS knows to  
check them and charge periodically), but it is not necessary.

Benefits:

1)Costs become incremental rather than lump sum.  Easier to budget for, easier  
to justify to the money men, easier to eat if the software beomes unacceptable  
for any reason.

2)User is no longer tied to one platform by software costs.  If you change   
hardware, just dial up a new version of the software, free, and move your   
electronic cash account over to the new platform.

3)Sampling of new software for testing and evaluation becomes trivial.  No more     
negotiating "90-day evaluation periods" for large prospective software  
purchases.

4)Single users with multiple machines no longer penalized.

5)For all of the above reasons, it will increase sales of software (assuming  
approximately comparable pricing), and hardware.

Downsides:

1) None, really, once you get used to the idea of buying your software like you  
buy electricity rather than like you buy refrigerators.

The same sort of scheme obviously can be made to work for selling non-program  
data, with a few modifications.

--
Dave Griffith, Information Resources, University of Chicago,
Biological Sciences Division               dave@delphi.bsd.uchicago.edu
"The faults in bad software can be so subtle as to be practically theological"
--Bruce Sterling
