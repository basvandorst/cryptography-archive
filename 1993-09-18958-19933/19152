Path: msuinfo!uwm.edu!math.ohio-state.edu!usc!elroy.jpl.nasa.gov!news.claremont.edu!ucivax!ofa123!republik!Gene_Ruebsamen
From: Gene_Ruebsamen@republik.fidonet.org (Gene Ruebsamen)
Newsgroups: sci.crypt
Subject: Re: Homebrew secure telep
Message-ID: <Gene_Ruebsamen.04km@republik.fidonet.org>
Date: 7 Sep 93 18:16:46 PST
Organization: Eiffel Media of Orange County
Lines: 217

K> In article <331@organic_sw.win.net>, merriman@organic_sw.win.net (David K.
K> Merriman) writes:
|>
|> In article <Sep02.022923.61395@yuma.ACNS.ColoState.EDU>, douglas craig
K> holland (holland@CS.ColoState.EDU) writes:
|> >With regard to compression, a Sound Blaster does 4:1 compression of
K> digitized
|> >voice in hardware, so it should be possible to pack an encrypted voice
K> onto
|> >a 14,400 bps modem.
|> >
|> >Doug
|> >
|> >
|>
|> But stop to consider: digitized voice likely contains a lot of repetitive
|> data; _encrypted_ stuff would (ideally) have uniform distribution, and
|> thus have little repetition in it - making compression something like a
|> couple of percent (being wildly optimistic).
|>
|> Dave

K> This is true. Even if the data sent to the modem were not encrypted,
K> V.42bis/MNP compression within the modem would be useless because it's
K> designed for data, not voice. All of the compression will have to be
K> done on the original plaintext audio samples with algorithms designed
K> specifically for audio. And achieving an acceptable compression ratio
K> pretty much requires lossy compression, i.e., adaptive delta
K> modulation or preferably a vocoder.

K> To minimize delay, it will probably also be necessary to talk to the
K> modem synchronously, bypassing all its error control and compression
K> features.  If you don't, then you have the no-win choice of disabling
K> LAPM and wasting channel bandwidth on start-stop bits, or leaving LAPM
K> on, which eliminates start-stop bits but can add substantial
K> store-and-forward delay, even without retransmission delays due to
K> channel errors. Unfortunately, synchronous interfaces are not
K> widespread on PCs.

K> Phil

To accomplish Two-Way voice transfers (i.e. Voice-->compression-->
encryption-->data transfer-->decryption-->uncompression-->Voice)
would require the following:

Well first of all, all digitizing should take place within 8 bits...
because 16-bit sound files are much to big and cumbersome.  Therefore,
if your soundblaster is 16-bit, it would probably be unusable due to
limitations of modem speed.

Secondly you would need a modem that is capable of high-speed synchronous
transfers.  This would rule out HST modems, as they are 14.4k in one
direction, but the back channel is only 300bps, making full duplex
voice communications all but impossible.

Third, and the most important, would be a fast operating system AND
hardware that was capable of very complex pre emtive multi-tasking to
allow for Compression/Encryption/Data Transfers on the Fly...  Therefore
it would be almost IMPOSSIBLE to accomplish under Windows and very hard
to do under Mac System 7.x
Possible alternatives:  UNIX, VAX/VMS, AmigaOS 3.x, OS/2 2.0.

I am assuming high end UNIX systems will have no problem in doing
homebrew voice encryption.  The problem arrises when one attempts such
on a PC (Personal Computer).  The only successful attempt that I have
seen has been on the Amiga Computer.  The following is a description
from the docs:

*****
@database TWC.guide
@master "TWC.guide"
@author "Lutz Vieweg"
@(c) "Copyright © 1993 Lutz Vieweg"
@$VER: TWC.guide 1.1 (18-08-93)

@node Whatis "What is TWC???"

If you've got a modem, you'll sometimes want to exchange data with
others using it. You can do this with many tools, but they all have
their drawbacks. TWC hasn't. :)

Most other communication software is designed for calling "Bulletin-
Board-Systems", this is not what TWC has been made for. TWC is
meant to be the ultimate utility when you want to call another
TWC-user, just to exchange some data and chat with him...

A short list of features TWC provides (don't mind if you don't
understand some of theese, you can benefit from them without knowing)

- Extreme reliability and system-friendlyness
- Full bidirektional transfer of files, chat-text (and soon even more),
  can save you up to 50% time and phone-bill
- High transfer rates, performs well on bad lines, where other protocols
  sucks with permanent resends
- Low CPU-time usage even at high transfer-rates, example: Bidirectional
  transfer at 2200+2200=4400cps on an A3000 takes approx. 11% CPU time
- Comfortable, font-sensitive GUI
- Multi-threaded program structure, asynchronus GUI, disk I/O etc...

@endnode

@node Require "Requirements - what you need to enjoy TWC"

To run TWC you'll need the following things:

- An Amiga running KS 2.04 or newer

- A modem featuring at least one real 'Full Duplex' transmission standard.
  If you don't know whether your modem fits, just try it - most modern
  modems are suitable.

  Some bidirectional modulation schemes are:

  V.22, V.22bis, Bell 212A, Bell 103, V.21, V.32,
  V.32bis, V.32terbo, V.fast

  The following modulation methods are definitely _not_ advisable to
  be used with TWC:

  V.23, USR HST, Telebit PEP, Telebit PEP+

- Your modem has to be connected to your computer with a so-called
  "7-Wire" cable. That means, RTS/CTS handshake has to be possible.
  The "carrier detect" (CD) wire has also to be connected.
  Modern high-speed modems are connected with such cables in general.
------(A few functions)----- CUT
Menu  : Functions / Send Sound File
Gadget: -
ARexx : SENDSOUNDFILE <filename>

Sends the contents of an 8SVX (IFF) sound-file to your partners TWC,
there it will be played back if sound is enabled. This function is -
apart from its testing purposes - just a little joke. The sound is
treated the same way as if it where actually coming from a sampler.
The same online compression/decompression is applied as it is to
"voice chat".

IMPORTANT:
- If the sample rate of your sound divided by the compression factor
  is higher than the CPS-rate your modems achieve, the sound will
  be played back with nasty "gaps". See @{"Setup / Sound" link SetupSound} for
details.

----------------------------------------------------------------------
Menu  : Setup / Audio / { No Compression, ADPCM-2, ADPCM-4 }
Gadget: -
ARexx : SETUP "sound_compression_method" "<0|2|4>"

Selects the sound compression method to be used. Without compression,
the sample-rate you can transmit over the communication channel is
limited to the CPS-rate you get when transferring files, e.g. about
1600 samples/sec on a V.32bis link. As you may imagine, such a low
sample rate is no good for understandable speech. TWC can compress
and decompress sound-data "on the fly", thus making higher sample
rates possible. The default sound-compression is ADPCM-2, this
one compresses 4 bytes of sound samples into 1 byte, allowing for
sample-rates up to 6400 Hz on a V.32bis link. Sound compression
is "lossy", but will surely sound better than uncompressed sound
on the lower rate. If you've got a very fast connection (e.g. an
ISDN device, or a NULL-modem cable), you may disable sound-
compression, this saves you some CPU-time.
----------------------------------------------------------------------
Menu  : Setup / Audio / Sample Rate
Gadget: -
ARexx : SETUP "audio_sample_rate" "<samples_per_second>"

Defines the number of sound samples to take per second. The higher
this rate, the better the sound quality will be, but the sample rate
is limited by the speed of the connection (see above). The default
value here is 6000, allowing permanent transmission of understandable
speech over a V.32bis connection. If you choose a too high sample rate
your partner will hear nasty "gaps" in the replay of the sound.
The sample rate does not affect IFF-8SVX-files that are transferred.
----------------------------------------------------------------------
Menu  : Setup / Audio / Sample Rate
Gadget: -
ARexx : SETUP "audio_sample_rate" "<samples_per_second>"

Defines the number of sound samples to take per second. The higher
this rate, the better the sound quality will be, but the sample rate
is limited by the speed of the connection (see above). The default
value here is 6000, allowing permanent transmission of understandable
speech over a V.32bis connection. If you choose a too high sample rate
your partner will hear nasty "gaps" in the replay of the sound.
The sample rate does not affect IFF-8SVX-files that are transferred.
----------------------------------------------------------------------

----------------------------------------------------------------------
Menu  : Setup / Misc / Encryption key
Gadget: -
ARexx : SETUP "encryption_key" "<text>"

Defines the encryption key.  If you supply no encryption key,
encryption is disabled.  Phone lines are not safe.  It's sort of easy
for other people to spy on your communication, and you may not want
them to do so.  Whether you need to keep your data secret or you're
just a little paranoid doesn't matter, this option allows you to make
TWC scramble all the data it transfers.  Your partner has to set
exactly the same encryption key to enable TWC to unscramble your data.
Of course it's nonsense to tell your partner the encryption key on the
phone that might be spyed...  :)
Data scrambling needs some extra CPU time.

IMPORTANT: Don't change the encryption key while a transfer is in
           progress. If you experiment with encryption, remember
           to disable it next time if necessary.
----------------------------------------------------------------------
******

The above are just part of the docs from the archive twc.lha
I suggest anyone with an Amiga computer to test it out.

- Gene Ruebsamen

 * Q-Blue v0.7 *

-- Via DlgQWK v0.71a
