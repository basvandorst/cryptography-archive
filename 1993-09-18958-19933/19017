Newsgroups: comp.arch,sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!pipex!sunic!trane.uninett.no!humpty.edb.tih.no!lumina.edb.tih.no!ketil
From: ketil@edb.tih.no (Ketil Albertsen,TIH)
Subject: Re: Putting Copy Protection in the CPU
Message-ID: <1993Sep2.124105.602W@lumina.edb.tih.no>
Sender: ketil@edb.tih.no (Ketil Albertsen,TIH)
Organization: T I H / T I S I P 
References: <1993Aug31.114242.933@cs.su.oz.au> <peterd.746891095@pjd.dev.cdx.mot.com> <1993Sep1.164720.4959@wuecl.wustl.edu>
Posting-Front-End: Winix Conference v 92.05.15  1.20 (running under MS-Windows)
Date: Thu, 2 Sep 1993 12:40:59 GMT
Lines: 68
Xref: msuinfo comp.arch:43538 sci.crypt:19017

In article <1993Sep1.164720.4959@wuecl.wustl.edu>, jln2@cec2.wustl.edu (Sammy D.) 
writes:

> I note that dongle
>manufacturers are still in business.  They must be getting their
>customers from somewhere.

I'm wondering if another scheme would be feasible: A smartcard-based dongle,
just like the phonecards. You buy the software at copying cost, and are free
to make copies for your friends and neighbours. Only that when you run it,
you'll have to insert your card, and a certain "amount" is deducted from the
value left. Eg. Microsoft could charge MS$ 0.50 for each run of their C++
compiler, MS$ 0.20 for each run of the linker. (It could even be constructed
so that an unsuccessful compilation, generating no object file, would be
charged lower.)  The "exchange rate" between MS$ and US$ (in other words, what
you would have to pay for a card with, say, MS$100) need not be 1 - eg. MS 
could offer cards at a lower price to students, could offer quantum discounts etc.

Obviously, the software must be useless without some information obtained from 
the card - a decrypt key, some essential missing instructions or similar - during 
the transaction, when the card is charged for the run. If the card reader is 
connected through a standard interface, such as a parallell or serial port, there
is of course the possibility of someone monitoring the data flowing to/from the
card, to clone it, so you would probably have to one way or another change input
and output from one run to the other (based eg. on time of day?). So you would
need the processing capability of a smartcard to verify the validity of input
from the program, and to generate the data returned. Essentially, the security
of this system would be as good as for the existing phone cards (and banking cards,
in those countries where they are used: Hardware hackers may possibly get around
the security measures, but the great masses won't).

This scheme would make software very cheap for the causual user (MS$ 0.50 to try
out the new Microsoft compiler is probably a magnitude less than the cost of the 
floppies to carry it). Of course there is the cost of the smartcard reader, but
I would hope that the software companies could agree about the API so that they
all use the same reader - just different cards. Software distribution would be 
drastically simplified; the "go ahead and make copies" would help spreading the
software to new users. You wouldn't have any unfriendly copy protection schemes.
Vendors may give discounts to selected groups, eg. high-volume customers, and
otherwise be "nice", eg. not charging for unsuccessful runs.

Essentially, I think this would be a quite "fair" system, charging by usage.

(A long time ago, I read a notice about some site owning a huge VAX machine used 
for some FEM system, by three users. For their project report, they wanted to buy
the All-in-1 system, which was priced by the size of the machine(!). Their huge
VAX was estimated to handle 128 AI1 users, so the price was 128 times the single-
user PC price - the software didn't "know" that only 3 users were using it. So
the guys instead bought a 3-user MicroVAX with a 3-user AI1, saving a lot of 
money... A "pay according to usage" policy, that would be possible using a 
smartcard-based scheme, would have saved one machine in this case.)

Has this approach been tried out anywhere? 

Whether or not, do you think it is a better idea than a brute force dongle? 

Can the software vendors make it sufficiently difficult (I am not saying 
"impossible") to construct a scheme for making the software unusable without the 
*real* card in place? (Remember that contrary to the dongle, the logic of a smartcard 
may be upgraded over time: If a security hole is found in version 1, a new
method may be implemented in card version 2 - new software versions may reqire
card version 2, but cards of version 1 will be emptied gradually, so that users
get themselves new cards anyway).


Ketil


