Newsgroups: sci.crypt,comp.sys.novell
Path: msuinfo!uwm.edu!cs.utexas.edu!swrinde!elroy.jpl.nasa.gov!decwrl!netcomsv!netcom.com!brettf
From: brettf@netcom.com (Brett Frankenberger)
Subject: Re: Novell 4.0 and lack of protected-memory - security risk?
Message-ID: <brettfCD0LCr.zE@netcom.com>
Organization: NETCOM On-line Communication Services (408 241-9760 guest)
References: <CD04H5.M8n@vu-vlsi.ee.vill.edu>
Date: Wed, 8 Sep 1993 02:53:15 GMT
Lines: 100
Xref: msuinfo sci.crypt:19129 comp.sys.novell:26575

kasturi@vu-vlsi.ee.vill.edu (Srinivasa M. Kasturi - EE8460 Spring 1991) writes:

>Quick question on Novell 4.0 lack of protected memory option.
>How serious, if any, is the security threat .  Quote from datapro may 1993 
>
>"it allows several processes to run on the same server without intruding 
>on each other's memroy space.  Lack of protected-memory ...  was not 
>considered critical shortcoming in server operating systems until 
>the advent of clinet/server architecture...Many analysts consider running 
>two or more NetWare NLMs on the same server RISKY [emphasis added]
>situation..."
>
>Now - really how serious is this risk.

Well, first we need to clarify the difference between SECURITY RISK and
RISK.  The main risk of not having memory protection is that one
process can corrupt another.  For example, NLM X might overwrite the
base server code, thus crashing the entire server.  If memory
protection were in use, if NLM X tried to access memory it was not
supposed to, a protection fault would be generated, and NLM X could be
terminated, and the server would remain stable.

There really is no security risk.  NLMs are supposed to be able to
access anything (i.e. they have the same access rights as SUPERVISOR). 
If Novell implemented memory protection, presumably NLMs would still be
given these unrestricted rights.  If you feel NLMs should not have
supervisor rights, then that is a valid point, but it is a separate
issue from memory protection.  Essentially, NLMs are assumed to be
trusted, since, if you didn't trust them, you *as supervisor) would not
have loaded them.  (although, if we want to allow untrusted NLMs to be
loaded, but restrict their access rights, then it is essential to
*also* have memory protection, otherwise, the NLM could overwrite the
part of the server code that implements access restrictions on NLMs).

I'm a bit confused as to why the client/server architecture makes lack
of protected memory a problem.  Maybe because it means people are
running more NLMs? -- But, there are a lot of stable NLMs out there -
one can run Client/Server on a Novell server without causing the server
to become unstable.  Some people tend to equate pre-emptive
multitasking with cooperative multi-tasking.  (in the former, the
operating system will switch beetween processes when the process that
is running becomes idle, or when it decides the current process has had
the CPU long enough.  In cooperative multi-tasking, the operating
system doesn't switch processes until the current process voluntarily
gives up the CPU).  While these two have tended to go hand in hand (no
protection / coop multitasking:  Windows, Novell.  protection  /
pre-emptive: OS/2, NT, Unix.  There aren't many OS's available that
offer protection / cooperative or no protection / preemptive. 
(Although at least some versions of Minix offer no memory protection
but do have pre-emptive multitasking).

Now, having said that, while I don't consider memory protection
essential for client/ server, pre-emptive muiltitasking is highly
desirable, because:

When all requests require about the same amount of CPU time (as would
be the case in a novell server acting only as a file server - each
request requires a very small CPU time slice), pre-emptive mltitasking
will not change the "total response time", but willt will increase the
average and minimum response time.  For example, if we have three
requests, each requiring 10 ms CPU time (and each involving no blocking
- i.e. the data can be read from cahce and thus requires no disk
access), in co-op multitasking, each will be serviced sequentially. 
The first will be done in 10 ms, the second in 20 ms, and the third in
30 ms.  The total time (time required for all three to complete) is 30
ms, the average time is 20 ms, and the minimum time is 10 ms.  Now,
lets say we are using a pre-emptive multitasking system that doles out
time 1 microsecond at a time.  Then , request 1 runs for 1 us, resiest
2 runs for 1 us, then 3, then 1, then 2, etc.  The result is that
request 1 finishes in 28 ms, 2 in 29 ms, and 3 in 30 ms.  "Total time"
is 30 ms, average is 29 ms, fastest is 28 ms.  (Both examples overlook
the scheduling overhead, which is smal in either case, but smaller for
co-op multitasking).  Thus, nothing is really gained by using
pre-emption (and some would say something is lost).

But, in the case of client/server, a novell server may be acting as a
database server.  In that case, a single request might take seconds of
CPU time.  While using pre-emption will not reduce the "total response
time" (as defined above) for a series of requests, it will reduce the
average and the minimum, if the amount of CPU time for each request
varies widely.  Thus, pre-emption will make sure that short requests
finish faster than long requests, which, in an interactive system, is
highly desirable.  Databse server NLMs, of course, can also help things
along in a co-op system, by voluntarily releasing control before a
request is finished, if the request is expected to take a long time to
process, but IMHO, it is more efficient to just use pre-emption code in
the operating system.

This is probably more than you were looking for, but I hope it helps,
and I wanted to clarify the different betwen pre-emption / co-operative
multitasking and protected / non-protected memory.  I have seen a lot
of people make the assumption that co-op / no protection and
pre-emptive / protected memory go togethor, and they don't.  They are
two separate issues.

-- 

          - Brett  (brettf@netcom.com)
 
------------------------------------------------------------------------------
                               ... Coming soon to a      | Brett Frankenberger
.sig near you ... a Humorous Quote ...                   | brettf@netcom.com
 
