Newsgroups: sci.crypt,comp.security.misc,alt.security
Path: msuinfo!uwm.edu!math.ohio-state.edu!howland.reston.ans.net!pipex!uunet!elroy.jpl.nasa.gov!ucla-cs!geoff
From: geoff@ficus.cs.ucla.edu (Geoff Kuenning)
Subject: Secure identification of software versions
Message-ID: <1993Sep28.210824.15279@cs.ucla.edu>
Sender: usenet@cs.ucla.edu (Mr Usenet)
Nntp-Posting-Host: exeter.cs.ucla.edu
Organization: UCLA, Computer Science Department
Date: Tue, 28 Sep 93 21:08:24 GMT
Lines: 35
Xref: msuinfo sci.crypt:19830 comp.security.misc:5353 alt.security:12291

I've been trying to come up with an algorithm that would reliably
identify a particular program as having been compiled from a certain
version of the source code.  This is mostly a mental exercise, arising
from the following problem:

There are a number of multi-player games available on the net, for
example okbridge and FIBS.  A problem has arisen with cheating and
trust; for example, in okbridge I've seen cases where a person logged
in four times under four different names, and then deliberately played
each hand so that one of the four would get an impossibly high score
(generally by having the losing side resign instantly).  There are
various programmatic things that can be done to alleviate some of
these problems, but if you're distributing the game as source code,
there's nothing to prevent a cheater from modifying the source to work
around the prevention code.

"OK," I thought, "let's do a cryptographic hash of the source code,
pass the identifier to the remote side, and let them do a comparison
against the hashes of all known versions."  But a bad guy could easily
interpose a "good" copy of the source into whatever process was used
to generate the cryptographic hash.  (For example, since the hash
would have to be well-known, he could just use a debugger to patch the
correct value into the compiled binary).  I came up with some slightly
more complicated schemes, but as fast as I invented them, I invented
simple attacks that would defeat them.

So, as an intellectual problem (I doubt that, even if I ever write an
Internet game, I'd have time to implement any such security feature),
is there any way to securely identify a remote client as having been
compiled from a particular source?  Note that I am explicitly
excluding binary distributions from the problem statement (I presume,
though I haven't thought it through, that binary distributions are a
much simpler problem but still non-trivial).
-- 
	Geoff Kuenning	geoff@maui.cs.ucla.edu	geoff@ITcorp.com
