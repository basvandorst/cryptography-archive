Newsgroups: talk.politics.crypto,sci.crypt,comp.org.eff.talk
Path: msuinfo!agate!howland.reston.ans.net!spool.mu.edu!caen!usenet.cis.ufl.edu!eng.ufl.edu!ukma!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: Re: What is the best?
Message-ID: <16C521011E.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
References: <CDt00F.Gz3@cantua.canterbury.ac.nz> <gradyCDt6Bu.E3t@netcom.com>
Date: Thu, 23 Sep 93 18:17:01 CDT
Lines: 30
Xref: msuinfo talk.politics.crypto:347 sci.crypt:19634 comp.org.eff.talk:20512

 
   [This is a note I sent to Grady Ward, but I thought it made sense to post
    it here as well.]
 
Date: Thu, 23 Sep 93 18:08:40 CDT
From: "John Kelsey" <C445585@MIZZOU1>
To:   grady@netcom.com
Subject: passwords
 
   I liked your text on password selection.  However, I think it would
also make sense to add another note for application developers.  I think
it's a really good idea to use a randomly-generated salt to generate a
key from a password, and that this salt should be as large as possible.
Basically, this is to keep an attacker from spending lots of computer power
*once* to generate a dictionary of likely keys.  If users use good
techniques to choose passwords, this won't matter much, but if they don't,
this may save them from having their encrypted files or transmissions
routinely read.  The simplest scheme I can see for this is simply to
prepend a 128-bit salt (generated as strongly as possible) to each encrypted
file.  Generate the key from the password by pre-filling a buffer with the
128-bit salt, then XORing in the keyed-in password, or by appending the
key to the keyed-in password.  Then, run SHA or MD5 or whatever to get the
key.
   A secondary point:  Adding a random salt ensures that people who use
the same password/passphrase for lots of files/transmissions don't get the
same key every time.  Since most successful attacks against modern
encryption schemes use *lots* of ciphertext from the same key, this might
add some practical security, at relatively low cost.
 
   --John Kelsey, c445585@mizzou1.missouri.edu
