Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Subject: Re: Privacy-Enhanced Mail: Crypto Problems
Message-ID: <1993Sep28.014043.17574@cactus.org>
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
References: <1993Sep24.063530.21163@cactus.org> <CDxDCA.81J@acsu.buffalo.edu> <CE0pJn.A7C@acsu.buffalo.edu>
Date: Tue, 28 Sep 1993 01:40:43 GMT
Lines: 186


 In <CE0pJn.A7C@acsu.buffalo.edu> boyd@acsu.buffalo.edu (Daniel F Boyd)
 writes:


>>  (Normally, we hash a key phrase into a substantial cryptographic
>>  RNG and use the sequence to drive a shuffle for each table; a
>>  different hash drives the DES key.)
>
>Ok, so what you're really doing is increasing the key length by adding
>the keyphrase.  An increased key length increases the cost -- which
>you're conveniently ignoring when you say this system has no increased
>cost.

 Some sort of key must be delivered to both ends somehow.  Even if,
 previously, that key needed to be 12 random characters long, and
 now the additional strength needs a total of 24, I still can't
 bring myself to consider 12 additional characters a significant
 increase in cost.


>Also, what particular 'substantial cryptographic RNG' are you talking
>about?  You are using special pleading; this RNG you're going to pull
>out of your hat is where the all the supposed security of your idea
>comes from.  I don't know how expensive this cryptographic RNG is
>going to be.

 I think it only reasonable to assume some familiarity with the
 literature, for example:

    Ritter, T.  1991.  The Efficient Generation of Cryptographic
    Confusion Sequences.  Cryptologia.  15(2): 81-139.  213 refs.

 If we assume that the RNG is used during init only, this expense,
 too, seems rather insignificant.


>You seem to think a known-plaintext attack consists of DECRYPTING with
>all possible keys until you find one that correctly decrypts the
>CIPHERTEXT.

 Well, that's certainly all I discussed in my 90-line proposal
 intended to demonstrate some reasonable basis for having ciphers
 do their own network ASCII mapping.


>That's one way, sure -- but another way is to ENCRYPT
>with all possible keys until I fine one that correctly encrypts the
>PLAINTEXT.

 You're right; I had not considered that.  In fact, I had not gone
 much farther than considering the case of a single block with
 known plaintext.

 If we assume a lot of known-plaintext, and use the substitution
 tables in some known sequence, then we are vulnerable to such an
 attack.  So let's not do that.  In particular, we could dynamically
 select the table for each chunk using (are you ready?) a
 cryptographic RNG!  This is the first thing about the proposal
 which would add some throughput overhead.  However, since the
 magnitude would be on the order of 10% of DES, it may well be a
 useful tradeoff.  (I do regret not being able to continue to
 advertise "absolutely no added overhead.")

 Again, the tradeoff ought to be ours to make, and not prohibited
 in the PEM RFC's.


>The shuffle table doesn't change over the entire message, so for each

 Well, that is one weakness which is easy enough to close.  :-)

 Is there some reason why you are trying to argue that a cipher
 cannot gain any strength in any way by doing its own mapping to
 transportable ASCII, instead of using the cryptographically-useless
 PEM mapping?

 If you are just arguing that there are problems in this initial
 proposal, I'm sure we can do much better.  But what about PEM?


>Let's look at things carefully, OK?  If the attacker doesn't know the
>correct DES key, then he can't decrypt, period.

 Nonsense.  One of the most-significant recent issues in
 cryptography is the detailed proposal for the construction of an
 affordable key-search machine.  It is this as much as anything
 which has convinced many that DES is now "dead."

 *Let's* look at things carefully:  The issue is not whether this
 preliminary design is ready for implementation.  Instead, the
 issue I was addressing is whether the PEM RFC's should arbitrarily
 prohibit any such design.  Since you argue with my presentation,
 apparently you say "yes."  But can you *prove* that no design
 which uses its own output mapping can possibly exist which has
 any advantage over a cryptographically-useless known translation?
 I suspect that any such "proof" must be patently false.


>>  Thus, it is now necessary for The Opponent to brute-force
>>  search the tables *as well* as DES, thus adding another 64 bits to
>>  a brute-force search.
>
>There are 64 factorial possible substitution tables.  This is not 64
>bits, it is almost 296 bits per table.  There are 11 tables, so this
>means 3256 extra key bits.  You are surreptitiously adding these 3256
>bits onto the key length, but as I've shown, they don't help.

 There are, indeed, 64! overall substitutions.  Thus, the potential
 keyspace for a 64-bit block cipher is 296 bits, of which DES
 realizes only 56.  Is DES itself surreptitiously hiding these
 extra requirements from us?  No, it only *uses* part of that space.

 The fact that DES uses only 56 key bits means that keyspace remains
 which can be used to inhibit a brute-force key-search while yet
 retaining the 64-bit-block data format of DES.

 I proposed 11 tables of 64 symbols each, for a potential additional
 key of 11 * 64! which is indeed 3256 bits.  (NOTE:  This is *not*
 a realistic strength figure for a 64-bit block cipher.)

 If the complaint is that I must somehow transport each and every
 one of those bits, that complaint is false.  I only need transport
 those bits which I deem needed.  And I could do that by having a
 User Key 24+ random characters long, instead of 12.  I use those
 bits to create a sizable hash value, fill the RNG state from that
 value, and produce a sequence which shuffles the tables.  Some
 sequence will set up those tables whether we have a one-bit User
 Key or a 1000-bit User Key.  The hash does not care.


>The regular mapping to ASCII is done by addition and shifting; this
>can be done all in registers.  Your mapping requires a table lookup on
>each character.  I agree that your mapping is not very expensive.
>What you're missing is that your mapping doesn't make the system more
>secure.

 Adding and shifting?

 Certainly we use shifting and ANDing to separate the chunks for
 mapping to network ASCII, but I doubt that you want to map 0..63
 to {A..Z,a..z,0..9,+,/} by "adding and shifting."  It is appropriate
 to use a table.

 What *you* are missing is that this is an early proposal intended
 to show that the PEM RFC's are harmfully restrictive.


>>  However, preventing normal brute-force attacks at
>>  virtually no cost seems like a worthwhile engineering tradeoff,
>>  one which certainly should not be prevented by the PEM
>>  specifications themselves.
>
>It's not 'virtually no cost'.  It adds an entire new algorithm (the
>cryptographic RNG you glossed over),

 I have personally described these issues in the formal literature.
 Various detailed designs have been published over at least the
 last twenty years.  Many of these are listed in the bibliography
 in my RNG paper.


>thousands of bits to the key
>length, and is still no stronger than DES.

 A potential key-length is not the same as the key-length one might
 actually use.

 As for being no stronger, strength itself is a non-measurable
 quantity, because it is the minimum of effort required over all
 possible attacks.  No cipher using DES can be stronger than DES if
 there is some other way to break 64-bit blocks which cipher natural
 language (e.g. English) text.  (If, instead, well-distributed
 random-like data are being enciphered, then a 64-bit block may be
 fairly strong.  If some data compression technique could produce
 such data, that could be another way the strengthen DES.)

 But we *can* hope to prevent specific attacks, such as key-search
 attacks, and do so in an effective, inexpensive manner.  Provided,
 of course, PEM lets us do so.

 Thanking you for your support, I remain:

 ---
 Terry Ritter   ritter@cactus.org

