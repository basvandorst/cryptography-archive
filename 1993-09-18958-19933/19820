Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Subject: Re: Privacy-Enhanced Mail: Crypto Problems
Message-ID: <1993Sep28.184747.28814@cactus.org>
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
References: <1993Sep27.232817.12193@cactus.org> <CE27tv.IA5@informatik.uni-hamburg.de>
Date: Tue, 28 Sep 1993 18:47:47 GMT
Lines: 112


 In <CE27tv.IA5@informatik.uni-hamburg.de>
 bontchev@news.informatik.uni-hamburg.de (Vesselin Bontchev) writes:


>>  OK, but *why* is a product cipher strong?  I think the answer is
>>  that the individual techniques have *different kinds* of strength.
>
>I don't know why - and haven't seen such kind of analysis in any of
>the books/papers I have read on the subject. I guess, the guys who
>have designed the S-boxes should have an idea of what makes the cypher
>strong, but AFAIK, this knowledge is classified.

 Classified or not, the general reason is what I said.  Would you
 prefer to believe in some hidden mystery?  What is unknown is what
 specific details the original designers had in mind.  In the past
 few years there have been some very good papers on how one would
 build strong Feistel ciphers.  But, in my opinion, no such cipher
 can be appropriate for new construction.


>>  First we assume that (by some mysterious process which is currently
>>  beside the point), a substantial User Key phrase (or some other key
>>  data) has appeared at both ends.
>
>The precess is rather essential - suppose that you have just received
>an encrypted message from somebody you have never communicated with.
>There is no prior communication, so s/he couldn't have sent you the
>phrase by some "misterious process".

 Vesselin, I don't know if you are just playing with words here,
 but, otherwise, I cannot believe that you have been reading my
 messages.  Anyway, I'll just assume you are serious.

 Certainly a key must be transported.  Certainly this process is
 "rather essential."  But this is not the issue I was discussing.
 I was discussing how a system could be built which supported a
 multiplicity of ciphers, yet did not pass the cipher indication in
 the plaintext Email header.  As far as I could (and can) tell, you
 were arguing the opposite, for the reason that you could not see
 how this could be possible.

 The method I have suggested several times is that any first
 communication use DES.  Then, if there are to be other
 communications, the "negotiation" could be "piggybacked" on
 normal messages, still using DES.  This negotiation would be
 hidden inside the cipher envelope, automatic, and hidden from
 the user.  When agreement is reached (if computers can be said
 to "agree"), the cipher is changed.  The user need not notice.
 The key could be just the same old key, assuming that a
 substantial key (supporting the extra strength) had been
 transferred originally.


>
>The only solution is to have it present -in- the message.

 No, Vesselin, this is *not* the only solution.  Read it again:

>> When the agreed-upon cipher is used, the definition of that cipher
>> includes key processing which initializes a cryptographic RNG,
>> which then shuffles the desired substitution tables.  This produces
>> unique tables which are wholly dependent on the User Key; thus, the
>> tables have effectively been "sent" in the key itself.

 That is, the tables are built from the User Key, and nothing but
 that key (and the cipher selection) need be sent.  The tables are
 part of a particular cipher; building the tables is the business
 of that cipher, using the key.  Certainly it should not be the
 business of the PEM specs to prohibit such ciphers.


>Another
>person sent me private e-mail about how this can be done. Here it is
>how.
>
>The randomly selected b-to-a encoding table is encrypted with the
>public key of the recepient. The encrypted result is encoded using
>some standard b-to-a table. Even if somebody intercepts the message,
>they have no way to find out what is the real encoding table used for
>the rest of the message.

 There is no need to be sending tables.


>>  Next, the two ends negotiate under the cover of a minimal standard
>>  (such as DES-CBC), to agree upon a different and stronger cipher.
>
>This is exactly the inconvenience - they have to negotiate first.

 Oh, yes.  Selecting from an essentially unbounded list of ciphers
 *is* less convenient (to the program) than just having one.  There
 is no reason the user has to see any of this, however.  (Is there
 really any such thing as "inconveniencing" a program which we
 design to obtain a specified benefit, such as improved security?)
 There would be some negotiation overhead, but then there need be
 no description of the cipher--now mandated for each and every
 message--in the header, giving us a possible win in overall
 efficiency.


>A
>useful public-key cryptosystem must be usable even if you get an
>e-mail message, encrypted from the first time, with no prior
>negotiations.

 I have handled this from my first posting.  As far as I can tell,
 you haven't been listening.

 ---
 Terry Ritter   ritter@cactus.org

