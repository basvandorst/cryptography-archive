Newsgroups: sci.crypt,talk.politics.crypto,alt.privacy.clipper,alt.security,alt.security.ripem,alt.security.pgp
Path: msuinfo!agate!howland.reston.ans.net!pipex!sunic!trane.uninett.no!humpty.edb.tih.no!lumina.edb.tih.no!ketil
From: ketil@edb.tih.no (Ketil Albertsen,TIH)
Subject: Re: How do you exchange session keys?
Message-ID: <1993Sep28.114123.7259W@lumina.edb.tih.no>
Sender: ketil@edb.tih.no (Ketil Albertsen,TIH)
Organization: T I H / T I S I P 
References: <1993Sep27.183413.2106@wuecl.wustl.edu> <749169974snz@nowster.demon.co.uk> <2884pr$q9m@nic.umass.edu> <CE1MEx.F0D@mentor.cc.purdue.edu>
Posting-Front-End: Winix Conference v 92.05.15  1.20 (running under MS-Windows)
Date: Tue, 28 Sep 1993 11:41:10 GMT
Lines: 60
Xref: msuinfo sci.crypt:19804 talk.politics.crypto:441 alt.privacy.clipper:1573 alt.security:12285 alt.security.ripem:341 alt.security.pgp:5248

In article <CE1MEx.F0D@mentor.cc.purdue.edu>, adkinsg@sonata.cc.purdue.edu (Garry Adkins) 
writes:

> [...]
>One guy mentioned using encryption over a modem.
>
>How would you do that?  How do you get the encryption "key" to the other
>guy (computer?) without transmitting it in the clear?  (thus making
>the whole thing worthless)

(I know that to a lot of you sci.crypt gurus, this goes under the headings
Trivialities, Elementary, RTFFAQ, Newbie questions... Note that sci.crypt is
only one of the grops receiving this response before you start yelling - lots
of the readers do not read sci.crypt and its FAQ. And the subject certainly
fits into sci.crypt, too, even if it is elementary!)

Lots of systems either use the Kerberos protocol as is, or they do something
very similar:

You log in, but specify your name only - no password. The remote server
must know your password: It uses the password as an encryption key for its
response. An eavesdropper won't be able to make sense of the response due
to the encryption - but you will, you know your own password. So you can
decrypt the response and find the necessary pieces of info within it.

One of the info elements that is delivered during a standard Kerberos login
is a new encryption key generated by the server. This key is new for every
login, so even if the eavesdropper knows your password, he cannot just hook
up his bug and start listening to your traffic: If he missed the response
to your login request, he won't know what is today's password. Typically,
you log in only once per working day, no matter how many servers/services
you access - when you want to access a new service, you obtain a "ticket"
for it from a central authority (a "ticket granting service") that can be
shown at the gate, rather than logging in again and again.

With the Kerberos protocol there are other protection mechanisms, such as
time stamps for detecting replay attempts, mutual authentification of 
communicating parties etc. There is a newsgroup for Kerberos, comp.protocols.
kerberos. You'll find a whole lot of papers on Kerberos on aeneas.mit.edu;
some of them are quite readable.

One problem occurs when you have to change your password: If it has leaked
out, an eavesdropper may be monitoring all your traffic - how can you then
securely tell the login server about the new password? For this, Kerberos
defines another encryption protocol based on public keys. One key is used
for encryption, the other for decryption - but they are functional mirrors
of each other, so something encrypted with the "decryption" key can be
decrypted with the "encryption" key. The login server has published one
of these keys, and you encrypt your new-password-request-message with this
key. Noone can decrypt this message (not even yourself), except the one
who has the other key, namely the login server.

Obviously this public-key principle could be used for all communication; maybe
it will sometime in the future. But it requires much more computational power
than eg. DES encryption, so we cannot currently accept the CPU load - and 
delay - in everyday communication. Changing passwords is a comparatively
rare action, and can tolerate the delays we have with today's hardware.



