Path: msuinfo!scss3.cl.msu.edu!mrr
From: mrr@scss3.cl.msu.edu (Mark Riordan)
Newsgroups: sci.crypt,alt.secruity.ripem
Subject: RIPEM Mac new version available
Date: 19 Sep 1993 17:35:54 GMT
Organization: Michigan State University
Lines: 75
Message-ID: <27i59q$jt1@msuinfo.cl.msu.edu>
NNTP-Posting-Host: scss3.cl.msu.edu
Summary: Version 0.8.5b1 now on ripem.msu.edu
Keywords: RIPEM, public key, RSA, PEM
X-Newsreader: TIN [version 1.1 PL8]

Ray Lau has released a new version of RIPEM Mac, a free public
key encryption program.  It is available via non-anonymous FTP
from ripem.msu.edu as /pub/crypt/ripem/binaries/ripem-mac-0.8.5b1.sea.hqx

For information on getting an account on ripem.msu.edu, get the file
pub/crypt/GETTING_ACCESS

Here are Ray's release notes:


Change Notes for Macintosh RIPEM 0.8.5b1:

Added support for Postal Code (for residential CAs) to create
self-signed.

When creating a self-signed, we also append readable MD2 and MD5
digests of the portion to be signed (the same portion that gets
concatenated with an algorithm ID and then RSA private encrypted).
This should facilitate compliance with CAs which may require notarized
or signature guaranteed paperwork which includes a digest of the
certificate which can then be submitted electronically.

When taking info for a certificate, now checks for illegal characters
like ~. Also, if a character is valid (T61) but not printable, we now
correctly encode it as a T61 string instead of a PrintableString.
(e.g. '*') Theoretically, we can always use T61 strings but bec. older
versions did not support T61 and bec. T61 is a less widespread thing,
we use Printable whenever possible.

Added a button to Create Self-Signed Certificate screen which will fill
in values suitable for use with RSA's Persona CA.  Misfilled in
certificates such as including a Locality or using a country of U.S.,
etc. have been a constant source of feedback.  While supporting this CA
explicitly may raise an issue in and of itself, this is the only widely
and freely available CA which users may experiment with.

When creating a self-signed certificate, we now append a human readable
form of all the relevant information to the end to ease debugging of
certificate requests.

Added a new certification status -- "NOT YET VALID" means that the
current date/time is BEFORE the validity period of a certificate in the
path. Before, this was reported as being EXPIRED along with true
expirations (i.e. after validity period ends).

Added a menu command for installing certain top level certificates to
avoid the need for manual bootstrapping into various PEM hierarchies.

Added support for tracing multiple candidate certification paths and
picking the best one.  This is needed when certificates start expiring
and have both expired and unexpired certs to deal with.

Added support for importing AOCE Signer files directly from the app.

Improved display of certificate paths.

Now automatically writes public component to PublicDirectory when you
create a new key pair.  Many people reported that they could not verify
their own messages bec. they did not copy the public component into the
PublicDirectory.  So we do it for them automatically now.

Added support for T61STRINGs in DER decoding to handle new AOCE
certificates.

Now displays security level (RSA modulus size) and S/N info
w/certificates.

Fixed aesthetic bug in displaying certification info.  It said
Certificate path is is ... or is has...  (extra "is").

Fixed aesthetic bug in encrypting/signing(recode) large files whereby
every 32k block is missing a EOL.  The problem does not result in any
data loss unless your email system happens to not like 132 character
lines.

