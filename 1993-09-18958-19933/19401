Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!wupost!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: Pseudorandom sequences for encryption
Message-ID: <16C4C14755.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
References: <AEsJPbiaJ5@phm.mepi.msk.su> <277qtp$d66@max.physics.sunysb.edu> <1993Sep16.192246.9075@wuecl.wustl.edu>
Date: Fri, 17 Sep 93 23:16:35 CDT
Lines: 49

In article <1993Sep16.192246.9075@wuecl.wustl.edu>
jln2@cec2.wustl.edu (Sammy D.) writes:
 
>DES
>is very slow in software.  What should we use?  It seems to me that
>compressed voice may make it more difficult to get "probable
>plaintext".  Does this make pseudo-random XOR better in a practical
>sense?
 
   Hmmm.  Unless you specify your pseudorandom algorithm, we don't know
whether it is more or less compute-intensive than DES in CBC-mode, for
example.  Indeed, one fairly good cryptographic random sequence generator
is DES run in output-feedback mode--the output of the previous encryption
becomes input for the next.  Now, clearly, using a linear feedback shift
register to generate a pseudorandom sequence will be faster than using
DES in OFB-mode.  So will simply running the data through 4 rounds of DES,
or using the MA-structure from IDEA as a 32-bit block cipher on it.
 
   The only big advantage I can see to using a pseudorandom sequence
generator is that you can precompute the whole sequence ahead of time.
This might be useful if, for example, you need fast encrypted transmission
but can deal with slower decryption, and precomputing time.  It also
might be useful if there were big dead spaces in the transmission, when
nothing was being sent, or if the receiver had a lot more processing power
than the sender.
 
   In this case, you might want to look into using some combination of
DES in output-feedback and "counter" modes, with different keys.  Maybe:
 
   R_i = Enc(i,K0) xor Enc(R_i-1,K1)
 
You might also want to use a one-way hash function, such as MD5.  This
might work like:
 
   R_i = MD5(R_i-1,buffer)
 
   or
 
   R_i = MD5(R_i-1,buffer)
   buffer = Transform(buffer,K0)
 
   The big thing to look out for with all of these is the possibility of
weird special cases where you get short cycles.  For example, DES in OFB-
mode has some keys that will lead to a cycle-length of 2.  In any event,
since the output is only 64 bits wide, and since DES acts sort-of like a
random mapping, you can expect to hit cycles of about 2**32.  The keys
should be changed long before you've used 2**32 output blocks.
 
   --John Kelsey, c445585@mizzou1.missouri.edu
