Path: msuinfo!scss3.cl.msu.edu!mrr
From: mrr@scss3.cl.msu.edu (Mark Riordan)
Newsgroups: sci.crypt
Subject: Re: Pseudorandom sequences for encryption
Date: 19 Sep 1993 17:28:41 GMT
Organization: Michigan State University
Lines: 30
Message-ID: <27i4s9$u07@msuinfo.cl.msu.edu>
References: <16C4C14755.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: scss3.cl.msu.edu
X-Newsreader: TIN [version 1.1 PL8]

John Kelsey (C445585@mizzou1.missouri.edu) wrote:
: You might also want to use a one-way hash function, such as MD5.  This
: might work like:
:  
:    R_i = MD5(R_i-1,buffer)
:  
:    or
:  
:    R_i = MD5(R_i-1,buffer)
:    buffer = Transform(buffer,K0)
 
Another approach is:

	secretbuf = key
	loop
		R_i = MD5(secretbuf)
		secretbuf++
	endloop 

This is what is done, essentially, in the random number generator in RSAREF.

Instead of XOR, another variation is to use a single rotor:

	cipher_i = Rotor[(plain_i + R_i) % ROTORSIZE]

which makes it more difficult to recover the R_i and hence more
difficult to analyze the PRNG.  Especially desirable if the PRNG 
is suspect.  If implemented correctly, it's not much slower than XOR.

Mark R.
