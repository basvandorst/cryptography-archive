Path: msuinfo!agate!spool.mu.edu!news.clark.edu!netnews.nwnet.net!news.u.washington.edu!hardy.u.washington.edu!tzs
From: tzs@hardy.u.washington.edu (Tim Smith)
Newsgroups: comp.arch,sci.crypt
Subject: Re: Putting Copy Protection in the CPU
Date: 4 Sep 1993 16:30:06 GMT
Organization: University of Washington School of Law, Class of '95
Lines: 36
Message-ID: <26afqe$g8r@news.u.washington.edu>
References: <1993Aug31.083222.119@cc.usu.edu> <tcmayCCMxDJ.1oK@netcom.com> <1993Sep2.141439.10711@infodev.cam.ac.uk>
NNTP-Posting-Host: hardy.u.washington.edu
Xref: msuinfo comp.arch:43597 sci.crypt:19064

For the game system market, where the user *expects* to plug some hardware
into the machine whenever the user wants to change programs, you could do
a nice (from the point of view of the game system manufacturer!) system
as follows:

	1. The game company picks a public key system that commutes.
	Each game is encrypted with the private key.

	2. The system decrypts each cartridge with the public key,
	placing the decrypted cartridge in local memory, which is
	where it will execute from.

	3. Each game contains a header that includes a large composite
	integer.

	4. Each game cartridge contains a tamper-proof chip that knows
	the prime factors of the large integer in the game header, and
	that implements a zero-knowledge protocol for allowing one to
	verify that it knows the factors.

	5. The system, after decrypting a game, queries the cartridge
	using the zero-knowledge scheme to verify that the cartridge
	knows the factors of the integer from the header.

Items 1 and 2 give the game company control over who can make games, because
to make a game, you need to get it encrypted with the private key.  Items
3, 4, and 5 prevent there being more games being played than there have
been cartridges sold, assuming that the game company can make a tamper
proof chip that can defeat the pirates.

Note that the customization takes place on a per game basis, rather than
a per CPU basis.  Unlike schemes with CPU serial numbers used as keys,
if you replace a broken game system, your games still work (and they
work if you take them to a friend's place to play, too).

--Tim Smith
