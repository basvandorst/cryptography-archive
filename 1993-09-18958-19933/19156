Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!walter!qualcom.qualcomm.com!happy!rdippold
From: rdippold@qualcomm.com (Ron "Asbestos" Dippold)
Subject: Re: Putting Copy Protection in the CPU
Message-ID: <rdippold.747521214@happy>
Originator: rdippold@happy.qualcomm.com
Sender: news@qualcomm.com
Nntp-Posting-Host: happy.qualcomm.com
Organization: Qualcomm, Inc., San Diego, CA
References: <1993Sep7.192738.20402@CSD-NewsHost.Stanford.EDU> <1993Sep7.203706.6994@midway.uchicago.edu> <rdippold.747437252@happy> <1993Sep8.144808.29271W@lumina.edb.tih.no>
Date: Wed, 8 Sep 1993 20:46:54 GMT
Lines: 47

ketil@edb.tih.no (Ketil Albertsen,TIH) writes:
>You could have the money manager return a small piece of code required for
>the system to run, eg. some decrypt key or missing instructions. To prevent
>someone from building an answering machine, returning the same key every
>time, the system could request different pieces of info depending on eg.
>the time of the day.

This is like cracking software that uses a dongle, then.  As long as
you can observe the behavior of a legitimate package, you can see what
it's doing and then duplicate that without the transmission.  You
could make it very difficult by making many vital subroutines remote,
thus making it more likely that you miss one of the calls.  This is
like placing a form of lookup copy protection a way into the game, so
the cracker will think he's eliminated the copy protection, but he
hasn't taken it all out - this cleverly turns the game into a demo -
if you've gotten that far, maybe you'll buy it just to finish it.

I don't see how any information returned based on the time of day
could be vital to the operation of the program.  You could decrypt
based on that, but you only need to do it once.


>I know of one company who tested out a system for a Teletext package where
>the installation job tested the installation by making a call to the
>company's headquarters, informing about the CPU ID, net address etc.
>Unless the headquarter answering machine returned an "OK" message, the
>installation job removed a couple essential modules. There was no manual
>installation procedure for these modules, so you couldn't get passed
>the reporting to the hqs (except possibly through a LOT of hacking).

Couldn't you just hack in an a faked OK message?  If the message
consisted of a decryption key for something that's encrypted well,
then you'd have to be able to see it at least once, so that means that
you have to install at least one legitimate copy.  And once you had
installed that you could just copy it, barring a CPU ID check (easily
removed).  For something like this, is the piracy problem really all
that rampant?  I guess it's a matter of where piracy, the pain in the
rear of protecting it, and the pain in the rear to the legitimate
user intersect.


>such strict monitoring would create an unfriendly impression, so they
>never put it into commercial life.

-- 
Last night I was in the mood to see something silly and idiotic on TV. So I
put the cat there.
