Path: msuinfo!agate!spool.mu.edu!news.clark.edu!netnews.nwnet.net!bach.seattleu.edu!quick!ole!rwing!eskimo!wayner
From: wayner@eskimo.com (Wayne Radinsky)
Newsgroups: sci.crypt
Subject: Re: novice question
Message-ID: <CDJnv5.1rM@eskimo.com>
Date: 18 Sep 93 10:07:36 GMT
References: <AEsJPbiaJ5@phm.mepi.msk.su> <CDFwIo.6sE@eskimo.com>
Organization: Eskimo North (206) For-Ever
Lines: 81

<1993Sep17.180735.10897@news.unt.edu>
Organization: Eskimo North (206) For-Ever
 
srt@ponder.csci.unt.edu (Stephen Tate) writes:
>In article <CDFwIo.6sE@eskimo.com>, Wayne Radinsky <wayner@eskimo.com> wrote:

That would be me...

>>>> If the noise sequence is truly random, the encryption is unbreakable,
>>>> as proved by Shannon.
>>> 
>>> Shannon's model shows XOR-based code is unbreakable IF and ONLY IF
>>> cryptoanalysist uses "chiphertext only" attack (enemy knows encrypted
>>> data, but not decrypted source).
>>> 
>>> If plaintext is known, it's too simple to obtain psevdo-random sequence,
>>> which could be used to decrypt other your messages, encrypted with the
>>> same key. If so, it doesn't matter which pseudo-random generator you use.
>
>The original poster was talking about a "truly random" sequence, and
>you are responding about a pseudo-random sequence.  You're definitely
>talking about two different things here.   A truly random sequence used
>as a one-time pad is unbreakable --- given any model of "breaking"
>that you want to use (known plaintext, chosen plaintext, ciphertext only,
>etc. doesn't make a difference).

You're correct -- there is a big difference between a pseudo-random
sequence and a truly random sequence.

You're right that the one-time-pad is truly and completely unbreakable.
However, the truly random sequence is a strange case in cryptography
because the key is as long as (or longer than) the message!

>>The advantage is the program is extremely small and simple, and the
>>output is totally random (it can't be compressed), and greater security
>>can be achieved by making the password longer (there is no limit).
>
>Absolutely wrong about the output being uncompressable.  Let's say
>your program generates a megabyte of pseudo-random output.  The
>source code of your program, together with the seed of the pseudo-random
>generator is clearly a compressed version of the megabyte output, and
>only takes up probably about 1k.  In other words, it's very, very
>compressible (1000:1)!  Being uncompressible, in the Kolmogorov
>complexity sense, is certainly a reasonable definition of "truly
>random", but *ANY* generated sequence will have low Kolmogorov
>complexity, hence will be compressible, and is therefore not
>"truly random".

Some things need to be cleared up here.  The "seed" of the
pseudo-random generator is the password (or passphrase).  So, yes, if
you know the password, it's very compressable.  Well, it's as
compressable as the message you're encrypting (maybe 2:1, not 1000:1).

So what?  The whole point is you =don't= know the seed -- that's the
password, and the entire password is part of the seed (no ignored or
insignificant digits).

I was claiming "uncompressability" on the grounds that LZ78 compression
(i.e. unix compress) can't compress the output.  I guess I really meant
"really hard (but not impossible) to compress".

>>The disadvantage is, if the bad guy gets a copy of the plaintext and
>>the ciphertext for the same message, the password is trivial to figure
>>out -- no guesswork at all, no dependence on the password length.  And
>>poof! everything encrypted with that password is compromised.
>
>Part of the point of being a one-time-pad is that you don't re-use the
>key.  In other words, if one message is compromised, it tells the
>adversary absolutely nothing about any other messages.

Just so that no one gets the idea that we should all switch to
one-time-pads, let me point out the problem with it: the key itself
(the string of truly random numbers) has to be exchanged securely
somehow.  If I wanted to send you messages this way, for example,
we would have to meet and I would give you a CD filled with 550 MB of
random numbers (of which I would also have a copy).  Then we could
exchange 550 MB of messages in public before arranging another secret
meeting.  Or, we can use a key-exchange system such, but then that
becomes the weak link.

Wayne
