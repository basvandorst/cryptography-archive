Newsgroups: comp.arch,sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!wotan.compaq.com!twisto.eng.hou.compaq.com!croatia.eng.hou.compaq.com!simonich
From: simonich@croatia.eng.hou.compaq.com (Chris Simonich)
Subject: Re: Putting Copy Protection in the CPU
Message-ID: <1993Sep1.190440.5111@twisto.eng.hou.compaq.com>
Sender: news@twisto.eng.hou.compaq.com (Netnews Account)
Organization: Compaq Computer Corp.
References: <1993Aug31.114242.933@cs.su.oz.au>
Date: Wed, 1 Sep 1993 19:04:40 GMT
Lines: 83
Xref: msuinfo comp.arch:43521 sci.crypt:18999

In article <1993Aug31.114242.933@cs.su.oz.au> mrj@cs.su.oz.au (Mark James) writes:
>One way to robustly implement protection against illegal copying
>of software would be to put it into the CPU.

This will never happen.....

>Software would be purchased over the phone, or at a store,
>to run on a particular (individual) CPU chip (identified by an
>id number).  It would be possible to purchase a second copy for
>a notebook-type CPU for a small additional charge.  Of course this
>would prevent the second-hand sale of software separate from its CPU,
>but software prices should come down with a reduction in piracy.
>
>The only feasible way to implement the copy protection would seem
>to be encryption of the binary, either with:
>  * a secret algorithm: Probably needed, but means extra security at
>    premises of software delivery companies and CPU manufacturers.
>  * a public algorithm with secret/secret-public keys
>   (derived from public CPU id #)
>
>The CPU would have to have a unit to decrypt an incoming instruction
>stream.  Instructions would be stored in the on-chip instruction cache
>in decrypted form to significantly cut down on the amount of decryption.
>No plain-text version of the code is ever stored externally.

Of course there is a price associated with this decryption hardware...

>There would also be an instruction to turn encryption off and on so that
>the CPU would run plain-text software (e.g. public domain software).
>
>One way of handling people wanting to upgrade their CPU, without
>making them repurchase their software, would be to allow them to
>dial a phone number which gives them a code which allows the CPU
>id # of their old CPU to be changed to a new number.  A confirmation
>code is returned by the CPU, which can then be used to get a code
>that transforms the CPU id # of the new CPU to that of the old CPU.
>This allows the old software to run on the new machine while
>ensuring there is not another CPU with that number in existence.

And there is a price for the overhead of maintaining people on the other end
of the phone, not to mention the database of customers....

>Transferring only part of the protected software to the new
>machine is more tricky.  You would have to change the old CPU id #
>as before, identify from partial images what software is held,
>and request new copies of the software in the desired combination.
>This is also a way around the second-hand software problem mentioned
>above.

Seems a little cumbersome to me.

>A broken CPU would have to be returned to a validating authority
>before its code could be given to another CPU.
>
>The questions I have are:
>
>* Would such on-chip decryption be feasible/cost-effective with
>  algorithms/keys complex enough to make cracking sufficiently hard?
>  Encryption dependencies within the encrypted code would have to be
>  limited to the length of a cache line (e.g. 128bits). Extra
>  global parameters could also be used, plus maybe some execution
>  history/serial/contextual dependencies.
>
>* If secret algorithms/keys were put on the chip as gates or microcode,
>  how easy would it be for it to be reverse-engineered by inspecting
>  a die?  Can a extra non-conducting layer be added to the wafer to
>  mask this part of the chip?
>
>If feasible, such a chip would be very popular with software
>companies.  They would all want to write software for it.
>It would not be that popular with some potential purchasers,
>although legal copies of software should be cheaper on such a CPU
>than on CPUs without the protection function.
>
>Thanks for your help,
>
>Mark James                                   |  EMAIL : mrj@cs.su.oz.au  |
>Basser Department of Computer Science, F09   |  PHONE : +61-2-692-4276   |
>The University of Sydney NSW 2006 AUSTRALIA  |  FAX   : +61-2-692-3838   |


--
Christopher E. Simonich     simonich@bangate.compaq.com
