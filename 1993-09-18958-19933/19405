Path: msuinfo!agate!bsac.EECS.Berkeley.EDU!jjudy
From: jjudy@bsac.EECS.Berkeley.EDU (Jack W. Judy)
Newsgroups: sci.crypt
Subject: pgp acts differently on suns and decs?
Date: 18 Sep 1993 11:34:42 GMT
Organization: UC Berkeley
Lines: 48
Distribution: na
Message-ID: <27eroj$nev@agate.berkeley.edu>
NNTP-Posting-Host: bsac.eecs.berkeley.edu



Hello all,

I am not sure if this newsgroup is appropriate but here it goes...

I have recently checked out pgp and it seems to work fine except
for an annoying "extra" session key (just type 22 characters with random
timing .. blahh blahh...) problem.  

On a dec I have to type in random characters to get 22 extra key characters
when I do the following command:

cat message.txt | pgp -fes "John Doe <jd@jd.com>" | mail jd@jd.com

When I compile pgp and run it on a sun pgp does not ask for this 
"extra" session key which I find a lot more convienent as long as I
am not losing security.  I have my public keys and things setup 
properly I think ... strange.

Which is supposed to be the default?  Why?  Is it machine dependent? Why?

Am I doing something wrong?  

Thanks!

-Jack

PS - I read the "manual" and I found this passage which I think refers
	to my problem but it offers no detailed description or remedy
	for my problem.

# Because the public key encryption algorithm is much slower than
# conventional single-key encryption, encryption is better accomplished
# by using a high-quality fast conventional single-key encryption
# algorithm to encipher the message.  This original unenciphered
# message is called "plaintext".  In a process invisible to the user, a
# temporary random key, created just for this one "session", is used to
# conventionally encipher the plaintext file.  Then the recipient's
# public key is used to encipher this temporary random conventional
# key.  This public-key-enciphered conventional "session" key is sent
# along with the enciphered text (called "ciphertext") to the
# recipient.  The recipient uses her own secret key to recover this
# temporary session key, and then uses that key to run the fast
# conventional single-key algorithm to decipher the large ciphertext
# message.
 

