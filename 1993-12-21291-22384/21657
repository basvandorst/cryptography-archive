Path: msuinfo!uwm.edu!math.ohio-state.edu!magnus.acs.ohio-state.edu!tbrown
From: tbrown@magnus.acs.ohio-state.edu (Ted C Brown)
Newsgroups: alt.privacy,sci.crypt,alt.conspiracy
Subject: Re: NSA CAN BREAK PGP ENCRYPTION
Date: 3 Dec 1993 00:26:26 GMT
Organization: The Ohio State University
Lines: 72
Message-ID: <2dm13i$lrr@charm.magnus.acs.ohio-state.edu>
References: <064303Z02121993@anon.penet.fi> <znr754833388k@brax.se>
NNTP-Posting-Host: top.magnus.acs.ohio-state.edu
Xref: msuinfo alt.privacy:10001 sci.crypt:21657 alt.conspiracy:38395

In article <znr754833388k@brax.se> daniel@brax.se (Daniel Lundh) writes:
>
>In article <064303Z02121993@anon.penet.fi> an54588@anon.penet.fi writes:
>
>>         After reading this, you may think of using an earlier version of 
>> PGP. However, any version found on an FTP site or bulletin board has been 
>> doctored. Only use copies acquired before 1992, and do NOT use a recent 
>> compiler to compile them. Virtually ALL popular compilers have been 
>> modified to insert the trapdoor (consisting of a few trivial changes) into 
>> any version of PGP prior to 2.1. Members of the boards of Novell, Microsoft, 
>> Borland, AT&T and other companies were persuaded into giving the order for the 
>> modification (each ot these companies' boards contains at least one Trilateral
>> Commission member or Bilderberg Committee attendant).
>
>Baloney, so someone broke in to my house and deleted the old PGP and copied
>a new one into my BBS? Sure. Not one byte changed either. Cool trapdoor.
>
>And having the trapdoor in the compiler is SO SMART since it will then only
>recognize the original source and not something you have changed in it
>yourself. (And why the hell not get an old compiler?)
>
>I think I saw Elvis last week too.
>
>(This is a stupid as it gets)


Actually, this is a repetition of what Kernigan (sp) is supposed to
have done with UNIX and the original C compilers.  He put a backdoor into
the login program so he could log into any UNIX system.  Surprised that
alt.conspiracy buffs don't know about this truly stunnig achievement.

Before you scoff, here's an entry from the Jargon file:

   Ken Thompson's 1983 Turing Award lecture to the ACM revealed the
   existence of a back door in early UNIX versions that may have
   qualified as the most fiendishly clever security hack of all time.
   The C compiler contained code that would recognize when the
   `login' command was being recompiled and insert some code
   recognizing a password chosen by Thompson, giving him entry to the
   system whether or not an account had been created for him.

   Normally such a back door could be removed by removing it from the
   source code for the compiler and recompiling the compiler.  But to
   recompile the compiler, you have to *use* the compiler --- so
   Thompson also arranged that the compiler would *recognize when
   it was compiling a version of itself*, and insert into the
   recompiled compiler the code to insert into the recompiled `login'
   the code to allow Thompson entry --- and, of course, the code to
   recognize itself and do the whole thing again the next time around!
   And having done this once, he was then able to recompile the
   compiler from the original sources, leaving his back door in place
   and active but with no trace in the sources.

   The talk that revealed this truly moby hack was published as
   "Reflections on Trusting Trust", `Communications of the
   ACM 27', 8 (August 1984), pp. 761--763.

In this case, there is no way that old compilers have been altered, so you
can always use an old one (or an old copy of PGP).  Just why is that
anonymous guy running around telling Mac people to use PGP now?  Hmmm...

And a backdoor could have been added to the *new* source code.
I mean, a backdoor that somehow limits the range of the keys so the NSA
code boys can crack it in days.  Do you know the algorithms enough (and have
poored over the source) to say this ain't so?  I'd bet it could be something
*real* sublte as well.  See you'd have to know the "flaw" to be able to
crack it faster -- and that suits the NSA just fine.

Don't you see the NSA/etc getting so paranoid that they basically *force* the
authors to do that?  And then, forbid them to tell anyone, or get thrown
in jail (or simply ruined).

