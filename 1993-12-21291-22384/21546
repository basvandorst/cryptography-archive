Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!wupost!wuecl.wustl.edu!news
From: eah1@gauguin.wustl.edu (Edward Anthony Hutchins)
Newsgroups: sci.crypt
Subject: cryptophone algorithms
Date: 30 Nov 1993 01:40:44 GMT
Organization: Washington University, St. Louis, MO
Lines: 24
Message-ID: <2de8as$3n1@wuecl.wustl.edu>
NNTP-Posting-Host: gauguin.wustl.edu

Let's say that I've hacked together a fairly decent voice compression algo that  
can reduce 11kHz 8-bit sampled speech into the 4800 bit/second range. Let's  
also pretend that the above algo runs in real time on your average  
Sound-Blaster equipped PC (386/25MHz). Now let's say I've managed to get full  
duplex digital telephony working through cheap 9600baud modems (totally  
hypothetical here ;-)... here's my question (finally): if we have a system  
whereby fixed length blocks of data are being exchanged over communications  
lines that may randomly add/drop whole bytes of information, mangle things up  
and generally aren't too reliable, how can we add encryption to said blocks of  
data that is:
	a) fairly secure
	b) fairly resistant to noise
What I've been thinking about is to generate RSA session keys, exchange the  
public parts, and generate/exchange RNG seed values used to generate  
pseudo-random streams to XOR with the outgoing compressed blocks. Once the  
streams get messed up, either of the users can hit a button on the interface  
that will restart the RNGs at some specified point... I don't really know much  
about encryption and it occurred to me that someone here might have the scheme  
I'm looking for already worked out. Idealy, the streams would be able to  
resynchronize without the user's intervention, and without compromizing  
security overmuch. Any ideas?
_____________________________________________________________________________
:-)  ('')  (-:  (,,)  :-)  ('')  (-:  (,,)  :-) | see lidflip instructions on
Edward Hutchins, eah1@cec1.wustl.edu            | other side of card
