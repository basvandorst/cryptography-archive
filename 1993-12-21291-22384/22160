Newsgroups: sci.crypt
Path: msuinfo!agate!ames!sgi!geezer.denver.sgi.com!rhyolite.wpd.sgi.com!calcite!vjs
From: vjs@calcite.rhyolite.com (Vernon Schryver)
Subject: Re: New problem in cryptography
References: <1993Dec20.152408.27231@infodev.cam.ac.uk> <phrCICFID.xp@netcom.com> <pcw.756411255@access2>
Organization: Rhyolite Software
Date: Mon, 20 Dec 1993 20:59:48 GMT
Message-ID: <CICqBp.66t@calcite.rhyolite.com>
Lines: 27

In article <pcw.756411255@access2> pcw@access2.digex.net (Peter Wayner) writes:
> ...
>That being said, I think it would be possible to do some blackbox
>checking on the locked up code. If the algorithm was patentable,
>it needed to have some distinguishing features from the prior art
>that made it both novel and unobvious. I would suppose that you
>could often come up with some example that could only be solved/
>computed by the patented algorithm and then test the module on this.
> ...

As long as you restrict the word "prove" to something understood by
anything as smart as your average brick or lawyer, that's not likely to
be a good approach.

How do prove there is no algorithm except your patented one to compute a
given answer from a given input?  For example, imagine that you patent a
way to solve the Traveling Salesman problem quickly, and someone starts
selling a package that schedules things as fast as your implementation.
That your opponents don't want to tell you their supposed trade secret
for doing it better than you sounds like weak evidence that they're using
your scheme.

Of course, if the patent covers getting a particular answer for a given
input, like RSA, things might be different.


Vernon Schryver    vjs@rhyolite.com
