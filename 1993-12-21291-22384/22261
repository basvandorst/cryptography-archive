Newsgroups: comp.ai,comp.ai.nat-lang,comp.compression,sci.crypt
Path: msuinfo!uwm.edu!spool.mu.edu!olivea!decwrl!decwrl!netcomsv!netcom.com!jktaber
From: jktaber@netcom.com (John K. Taber)
Subject: Re: American language standardized dicti
Message-ID: <jktaberCIM34I.4BJ@netcom.com>
Organization: None, I'm disorganized
X-Newsreader: TIN [version 1.2 PL1]
References: <gradyCI8qov.2uz@netcom.com> <jktaberCI8z9B.2AE@netcom.com> <1993Dec22.184440.13812@rchland.ibm.com> <straitsCIJ6uL.20H@netcom.com>
Date: Sat, 25 Dec 1993 22:14:41 GMT
Lines: 56
Xref: msuinfo comp.ai:20160 comp.ai.nat-lang:1023 comp.compression:9994 sci.crypt:22261

Stewart C. Strait (straits@netcom.com) wrote:
: Larry Loen (lwloen@rchland.vnet.ibm.com) wrote:
[description of cross reduction of word lists]

: If you are really serious about breaking weirdly constructed crypts
: (such as puzzles A-20 through A-25 in a typical issue of the Cryptogram)
: you may want to try something like a five or six word case, after finding
: a set of ciphertext words with many shared letters.  This usually works,
: but the two big problems are getting too many solutions to even glance at,
: or getting no good solutions.  Too many solutions may mean not enough
: letters shared between the words, either because you (the solver) made
: a bad choice of the word set, or because the constructor was shrewd enough
: to leave you no good choices.  No solutions must mean a program bug or
: a plaintext word not in your dictionary.  IMO, the two word case is
: not at all enough for deliberately difficult plaintext.  Incidentally,
: knowing the frequency of the words would help _enormously_ in the
: case of too many solutions.
: -- 
: Stewart C. Strait
: straits@netcom.com

Agreed.  The way I do it is with *all* words, except those excluded.  The 
cross reduction lists don't have to be in storage, you can page lists out to 
temporary files, which is what I do.

What are we talking about?  Consider the words STRIDENT and INSTRUCTOR.  
No matter how these are encrypted in simple subs, there are only two 
words 8 and 10 letters long with shared letters in the correct position.

The problem is speed, which I think my CRYPT achieves.  I arrange words 
in my dictionary by *patterns* which includes length.  The patterns in 
the dictionary are in binary search order.

Each cipher word is assigned its pattern list of words.  Then each word 
is systematically cross reduced against all others, so long as two lists 
have one or more letters in common.  To avoid an M*N search through two 
lists, I sort both lists on shared letters, using a radix sort, which is 
ideal for this purpose.  Basically, two lists of about 6000 words each 
will sort in about 2 seconds on a 286.  Cross reduction continues, round 
and round the words, until no further reduction in list length occurs, or 
the lists reduce to 1 word each, or some list goes to 0, meaning the 
crypt contains a word not in the dictionary.

In the latter case, you have to try to figure out which crypt word(s) 
is/are not in the dictionary so that you can eliminate them from cross 
reduction.

So far, toi toi toi, there has not been one A-25 that has resisted my CRYPT.

I haven't automated solution, but it could very well be automatic.

Solving by pattern dictionaries works very well.  I just want to extend 
the method to other kinds of ciphers.
-- 
John K. Taber                        jktaber@netcom.com
=======================================================
