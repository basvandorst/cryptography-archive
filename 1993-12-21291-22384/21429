Newsgroups: sci.crypt,talk.politics.crypto
Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Subject: Re: Can NSA crack PGP?
Message-ID: <1993Nov24.203722.6805@cactus.org>
Followup-To: sci.crypt
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
References: <199311222336.SAA22403@eff.org>
Date: Wed, 24 Nov 1993 20:37:22 GMT
Lines: 99
Xref: msuinfo sci.crypt:21429 talk.politics.crypto:1357


 In <199311222336.SAA22403@eff.org> mech@eff.org (Stanton McCandlish)
 writes:

>In a FidoNet debate, it's been charged that PGP is unsafe, and that NSA
>can crack it.  The persons holding this viewpoint espouse the idea that
>the NSA can crack anything, pretty much, and that anything they could not
>crack would not be available to the general public, but would have been
>supressed.

 First of all, it seems clear to me that the idea that "<x> can
 crack anything" is patently false.  Provided that the job is done
 properly and with no slip-ups, virtually anyone can multi-cipher
 a message, piling layer-upon-layer of "simple" ciphering until a
 message is hidden from any analysis.  The fact that this is not
 particularly convenient (especially with respect to keys) is
 beside the point; the same process can be automated into a
 "single" cipher.

 Of course, abstract "strength" is--by itself--rarely the issue.
 To do its job, a cipher typically need be only somewhat stronger
 than the simplest other way to gain the hidden information (e.g.,
 bribery, theft, emission-monitoring, etc.).  Thus, a demand for
 "uncrackable" strength must imply that serious attention has been
 given to a whole range of details far beyond any cipher, and
 ultimately resting on a base of substantial physical security.
 In real applications (with real people and in a real environment),
 I see the main issue in software cipher design being the tradeoff
 between limited (but significant) strength, strength-preserving
 modes of operation, and throughput.

 Second, it is very difficult to "suppress" something which is
 published.  When RSA was published, that cat was out of the bag.
 When PGP was published, you no longer had to be--or employ--a
 programmer to user RSA.  Consequently, the argument that PGP
 cannot possibly be strong has no support.


 HOWEVER, it is probably wrong to equate the strength of PGP-the-
 cipher with the minimum of the technical strengths of the RSA and
 IDEA mechanisms--even if they are properly implemented.  My problem
 with the security of PGP lies in the way it can be--and probably
 generally is--misused, especially by non-security-trained operators.

 An unfortunate and under-published aspect of public-key technology
 is the need to validate public keys.  Key-validation protocols are
 an essential part of public-key security.  In some public-key
 systems we see proposals for Certification Authorities (CA's) or
 tree-structured protocols for key validation.  In PGP we do not.

 The so-called "trust" protocol which PGP depends upon has had
 surprisingly little public comment.  But it does not take much
 analysis to show that a single error in a chain of trust can
 produce an improper validation.  Consider A giving his public key
 to B; B decides to change it, and gets C to accept the new (wrong)
 key; now C gives the key to D; and D gives it to E, F, G, H, etc.,
 each of which claims to Z that they are more or less trusting of D.
 Clearly, no matter how many people (E, F, G, H, etc.) claim to
 know that key, it is still the wrong key.  C was wrong, but the
 issue is that Z got the wrong key and is potentially insecure
 because of it.

 The "potential insecurity" exposure in using an incorrect key is
 the possibility of a "spoofer."  By "spoofer" I mean some entity
 Y which can pretend to be some other identity.  By producing a
 public key and getting B to accept it as A, messages from B to A
 may be intercepted by Y, deciphered and then enciphered in A's
 public key for delivery to A.  Thus, Y could monitor B's messages
 to A, completely independent of the strength of RSA or IDEA, and
 without "breaking" the cipher in a technical sense.  The only
 difficulty here is the ability to intercept B's messages, and this
 is only difficult to the extent that B's email node is secure.
 That is, public-key security without an absolute validation
 protocol depends more upon the security of B's email node, and
 the hope that a spoofer is not operating, rather than any
 technical "strength" of the cipher mechanisms.

 Now, one can argue that the likelihood of a spoofer is very low.
 I agree, while noting that we are talking about a computerized
 message-switching system, and there is therefore lots of opportunity
 for automated re-routing in support of spoofing.  But this is really
 beside the point:  Normally, when we have a cipher system, the
 strength of that system depends upon the cipher and the ability
 to keep our keys secret, and a discussion of technical strength has
 some meaning.  Here, if the operator has not validated a public key,
 the strength of the system depends upon whether some communication
 nodes are subverted or fanciful wishes for a lack of attention by
 The Opponent; the resulting security is not defined by the
 technical strength of the cipher mechanisms.

 As far as I know, when PGP is operated by normal individuals who
 have no concept of the absolute requirement for key validation, it
 is quite likely to be operated in a way which is only conditionally
 secure.  I expect more than this from a cipher.

 ---
 Terry Ritter   ritter@cactus.org


