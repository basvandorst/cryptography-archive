Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!uunet!digex.net!access2!pcw
From: pcw@access2.digex.net (Peter Wayner)
Newsgroups: sci.crypt
Subject: Re: New problem in cryptography
Date: 20 Dec 1993 13:24:01 -0500
Organization: Express Access Online Communications, Greenbelt, MD USA
Lines: 60
Message-ID: <pcw.756411255@access2>
References: <1993Dec20.152408.27231@infodev.cam.ac.uk> <phrCICFID.xp@netcom.com>
NNTP-Posting-Host: access2.digex.net

phr@netcom.com (Paul Rubin) writes:

>In article <1993Dec20.152408.27231@infodev.cam.ac.uk> rja14@cl.cam.ac.uk (Ross Anderson) writes:
>>Here is a rather delicious new problem, and one raised by a lawyer rather
>>than by a techie. 
>>
>>How do you check software resident in a tamper-proof cryptographic module 
>>to ensure that it doesn't infringe one of your patents or copyrights?
>>
>>The problem was raised by Derrick Grover in `Random thoughts on problems
>>with new technology', in the Computer Law and Security Report, Jul/Aug 93,
>>pp 155 - 156. His suggested solution is that every tamper resistant device
>>should have a supersecret key which can be used (on production of a court 
>>order) to dump the memory.
>>
>>Maybe one of our readers can come up with a more cunning solution.

>I don't see much of a difference beteen tamper proof modules and
>encrypted files.  So this problem seems isomorphic to that addressed
>by the Clipper chip proposal, which has beaten to death here already
>and even has its own newsgroup.  Substituting "copyright infringers"
>for "drug dealers" in the "bogeyman" field of the question doesn't
>seem to make much difference either.

I think that this problem is a big problem in any patent case involving
software. It is pretty tricky to sort through all of that binary code
to figure out that someone is really copying your supercool, way strange
patented algorithm. It's mighty expensive too to pay an expert witness
to really come to grips with this.

Interestingly enough, I've read somewhere about a court case which was
lost by the patent holder because they could not definitively prove
that infringement occured. Apparently, the patent involved some sort
of reagent that did something magic like make it much easier to polish
the substrate. After the processing was complete, there was no traces
of the reagent left.  As a result, the patent holder couldn't find a
chemical test that would prove the infringement.

The Patent Lawyer who wrote this up seemed to take great pains to point
how stupid the patent holders were. Apparently, they should have thought
twice about patenting something that couldn't be tested. 

It seems as if they couldn't just get a warrant and raid the plant.


That being said, I think it would be possible to do some blackbox
checking on the locked up code. If the algorithm was patentable,
it needed to have some distinguishing features from the prior art
that made it both novel and unobvious. I would suppose that you
could often come up with some example that could only be solved/
computed by the patented algorithm and then test the module on this.
I suspect that this would be easier in some cases and harder in
others.


	 

-Peter


