Path: msuinfo!agate!howland.reston.ans.net!math.ohio-state.edu!news.cyberstore.ca!nntp.cs.ubc.ca!unixg.ubc.ca!unruh
From: unruh@physics.ubc.ca (William Unruh)
Newsgroups: comp.security.misc,sci.crypt,comp.security.unix
Subject: Re: Proposal for new login authentication method
Date: 13 Dec 1993 23:17:28 GMT
Organization: The University of British Columbia
Lines: 26
Distribution: world
Message-ID: <2eit68$t4k@nntp.ucs.ubc.ca>
References: <phrCHwnFq.6LC@netcom.com> <2efep4$93c@sol.tis.com> <phrCHyotG.7F7@netcom.com>
NNTP-Posting-Host: physics.ubc.ca
Xref: msuinfo comp.security.misc:6887 sci.crypt:21977 comp.security.unix:1771

phr@netcom.com (Paul Rubin) writes:
>I didn't know about S/key but both it and my suggestion are re-inventions
>of the one-time pad, which has been around for millenia, which helps
>even further in showing it's a good idea  :)

Skey is not a one time pad, it is a challenge/response based on a pass phrase. It
challenges you with a number and and a "salt" , you give it the response 
linked with that number. Next time it will give you the next lower number as
a challenge. It is a really neat way of using a single pass phrase to generate 
a challenge response, where knowledge of one response gives 'no' info about any
subsequent response ( but does give alll the info needed to generate all
previous responses- which don't matter any more.
-It stones the passphrase hashed n times you give it the n-1 hash of the passphrases. 
It hashes once and compares wiht the stored nth phrase, and if good, stores the n-1th for
use next time ( when you send it the n-2th one etc). When you run out, you reinitialise by sending it
the new Nth hashed phrase. (after having verified that you knew the old one of course.) It is a really
neat idea, with the only hassle being that the password automatically expires after
N uses, and with the need either to have a computer where you log in containing the
smarts to calculate the nth hash, or you having a list of the some number of the responses.
- The hash generator runs on Mac, Dos, OS2, Unixes so only if you have only a dumb terminal 
are you out of luck. ( you could carry around a little disk containing all possible
version of the program when you go travelling- usually you can find at least some old PC to
run the program on).



