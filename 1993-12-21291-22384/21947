Newsgroups: comp.security.misc,sci.crypt
Path: msuinfo!uwm.edu!math.ohio-state.edu!darwin.sura.net!udel!rochester!honeydew.srv.cs.cmu.edu!rudis
From: rudis+@cs.cmu.edu (Rujith S DeSilva)
Subject: Re: Proposal for new login authentication method
Message-ID: <CHy3yv.MCs.3@cs.cmu.edu>
Sender: news@cs.cmu.edu (Usenet News System)
Nntp-Posting-Host: gs71.sp.cs.cmu.edu
Organization: School of Computer Science, Carnegie Mellon
References: <phrCHwnFq.6LC@netcom.com> <phrCHwp09.8JA@netcom.com> <2efc9gINN3gb@hancock.cc.williams.edu> <1993Dec12.180912.12713@lokkur.dexter.mi.us>
Date: Sun, 12 Dec 1993 23:30:31 GMT
Lines: 43
Xref: msuinfo comp.security.misc:6847 sci.crypt:21947

In article <1993Dec12.180912.12713@lokkur.dexter.mi.us>,
Steve Simmons <scs@lokkur.dexter.mi.us> wrote:
>95cms@williams.edu (Matt Schroth) writes:
>>What if I am on your local subnet and can cause some collision at "just
>>the right time?"  Conceivably, I could "hear" your password but the host
>>you're logging in to would not, so that I'd have a password for later
>>use, if you decided next to try another password.
>
>[ description of just what the hardware would have to do ]

>I won't say it's impossible.  I doubt there's any hardware which will
>exist in the near future which can do it, tho.

It's customary in analysing an authentication protocol to assume that an
adversary has complete control of the network.

How about replacing the password-packet with another containing a random
password?  The host would reject it, the user may try re-typing the same
password a few more times, and then decide it's just a misprint, and go on
to try another, leaving the adversary in possession of a valid password.

How about the adversary intercepting the log-off packet, and spoofing the
logoff?  Then the adversary is left in control of a running session, with
the user none the wiser.

One way to avoid the latter problem: when requested to logoff, the host
prints back the next (or another) password on the user's card, and also
marks that password as already used, just before terminating the session.
The user checks that the password presented by the host is indeed printed
on the card, and crosses it off.  If it's not on the card, or had been
already crossed off, then he knows that there's something wrong.

How about the adversary waiting until the session is established, and then
interspersing his own commands with the user's commands, and intercepting
the results?

I do realize that this is a tough problem, given the assumption that the
user's terminal is dumb.  I'm just pointing out weaknesses of the protocol,
and not claiming that there are better solutions within the constraints of
the problem.

Rujith de Silva.
Carnegie Mellon.
