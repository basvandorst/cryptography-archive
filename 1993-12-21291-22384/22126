Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!noc.near.net!news.delphi.com!davesparks
From: davesparks@delphi.com (Dave Sparks)
Newsgroups: sci.crypt
Subject: Re: Crypto review of Secure Drive wanted
Date: 20 Dec 1993 04:20:32 GMT
Organization: General Videotex Corporation
Lines: 73
Message-ID: <9312192314592.davesparks.DLITE@delphi.com>
References: <phrCIB3C2.3Gy@netcom.com>
NNTP-Posting-Host: bos3a.delphi.com

 >> Well, I've personally never had any data that I was willing to die
 >> for, but I don't presume to answer questions about other people's
 >> priorities for them.  I don't think a program designer should try to
 >> answer these questions for them either.  It should be up to the user,
 >> whether to enable these settings or not, depending on the user's own
 >> priorities.

That is true of course, unless you consider the matter of motives.  Were I
planning to design a cryptosystem, I would take into account its potential
use before spending the time designing in bells and whistles.  Is the time
and effort required to design in a feature that very few would actually need
or use really cost-effective to me as a profit-minded enterpreneur?  Of
course, if you hypothesize a programmer with lots of time on his hands and
no real profit motive, then a bit of idealism might conceivably come into
play.
 
 >> It's easy to think of data that an ordinary crypto user would rather
 >> lose permanently than have fall to the wrong people.  Cryptography
 >> keys used for reading confidential incoming email are an obvious
 >> example.
 >> If the keys are lost, the user need only generate some new ones and
 >> tell his correspondents to start using the new ones.  So losing
 >> this data is a slight inconvenience, but having it compromised is
 >> a disaster.  Another example would be data on an insecure machine
 >> where there is a copy elsewhere (on a more secure machine or on
 >> backup media).
 
The former scenario is quite realistic, but there are better ways to
accomplish it than encrypting an entire partition.  When an entire system is
that sensitive, then additional attention would need to be paid to PHYSICAL
security, "TEMPEST", etc.

 >> It is true that I was imagining some pretty far-out scenarios in some
 >> of the descriptions I posted (e.g. having passphrases beaten out of
 >> you; someone else here called this "rubber hose cryptanalysis", a
 >> phrase that I really liked).  I don't think an ordinary crypto nerd
 >> like myself needs to be too concerned about being in such situations,
 >> but program designers should still avoid deciding these things on
 >> users' behalf.

That's true, but, in a way, the design of such systems really raises the
stakes.  The other thing to consider is whether the hypothetical "enemy"
knows in advance that the system is thus protected.  One of the key
custodians could be kidnapped with the threat, "use the correct key the
first time.  If it self-destructs because you used the wrong one, you're
dead."  But then, we're talking "humint", not crypto!

The problem is, would I, as an individual, really use such a system without
providing myself a "back door"?  The temptation would always be there to
build in a "fire escape".  Even if I didn't do it, if the enemy believed
that I had, then I'd be in a world of hurt if I couldn't (or wouldn't)
unlock the system for him. It reminds me of the advice to carry $20 or so in
case you're mugged, on the theory that a mugger, angry at getting nothing
for his efforts, might just kill you out of spite.

 >> Anyway, generating a random key per filesystem is motivated mostly by
 >> the other reasons I gave in that post.  The possibility of a "dead man
 >> switch" is just one further feature of the scheme.

Yes, and the rationale appears to be sound.  Even if these scenarios seem
far-fetched, there are certainly spinoff benefits to be gained for less
critical applications as well.  Also, from the human factors point of view,
you want to tailor the security precautions to the value of the data and the
preceived threat.  Being over cautious can be counter productive.  It often
leads to procedures that are so cumbersome that users are motivated to find
ways to circumvent them.

 /--------------+------------------------------------\
 |              |  Internet: davesparks@delphi.com   |
 | Dave Sparks  |  Fidonet:  Dave Sparks @ 1:207/212 |
 |              |  Famnet:   Dave Sparks @ 77:500/1  |
 \--------------+------------------------------------/

