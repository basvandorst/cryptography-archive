Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!usc!elroy.jpl.nasa.gov!decwrl!netcomsv!netcom.com!phr
From: phr@netcom.com (Paul Rubin)
Subject: Re: Crypto review of Secure Drive wanted
Message-ID: <phrCIA9rs.44C@netcom.com>
Organization: Netcom - Online Communication Services (408 241-9760 guest)
References: <01H6NEY6KGCI937BF4@delphi.com> <phrCIA5tE.2BL@netcom.com>
Date: Sun, 19 Dec 1993 13:07:04 GMT
Lines: 48

Sorry to be following up my own message, but I forgot a few things.

In article <phrCIA5tE.2BL@netcom.com> phr@netcom.com (Paul Rubin) writes:

>I recommend generating a RANDOM encryption key (call it KF) for each
>file system.  You would encrypt this random key using the passphrase,
>and store the encrypted random key on the disk.  This makes the keys
>separate for each filesystem.  It also allows the program to delete
>delete the encrypted key ...

I meant to add, another reason to do this is that if the pass phrase
is compromised, you can change to a new pass phrase by updating
just 8 bytes on the disk instead of having to rewrite everything.

>Because of the possibility of KF and KR getting erased, either on
>purpose or by battery failure or the like, you might want to store
>backup copies of these random keys.  

Oh yes, naturally if the program displays KF so you can write it down,
it should display the *encrypted* KF, not the unencrypted one!  I did
not make this "clear" (pun not intended).  KR should of course also be
encrypted (with the passphrase) before storing it in CMOS, just like KF.
Changing passphrases would update the encrypted KR in the obvious way.

Finally, here is yet another slight refinement that I just thought of.
KR should be padded with a couple of user-supplied junk bytes before
encryption, so if you use the same KR in several computers, the
attacker won't know that you've done this, since you'd use different
junk bytes for each one.  None of this is needed for KF since you
*never* use the same KF twice.

>>The program uses the first 32 bits of a double MD5 to verify keys.
>>The passphrase is MD5ed, then the 16-byte result is MD5ed again, and
>>the first 4 bytes of the double hash are written to the disk to
>>check whether the correct passphrase was used. 

>This is bad because it tells the attacker that your N different
>floppies are all encrypted with the same passphrase, or that certain
>ones have a different passphrase, or whatever.  It also depends on the
>encryption key coming solely from the passphrase, which is bad (see
>above).  And finally, there's no point in *ever* needlessly giving
>away information about the passphrase.

Yet another reason it's bad is that if the attacker finds some
encrypted floppies somewhere and knows your hashed password (from
having gotten other of your floppies), he then knows that the floppies
he found are yours.  This is just one more instance of giving away
information needlessly.
