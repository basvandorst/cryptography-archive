Newsgroups: comp.security.misc,sci.crypt
Path: msuinfo!uwm.edu!vixen.cso.uiuc.edu!howland.reston.ans.net!noc.near.net!news.tufts.edu!jrozes
From: jrozes@allegro.cs.tufts.edu (J Rozes)
Subject: Re: Proposal for new login authentication method
In-Reply-To: phr@netcom.com's message of Sun, 12 Dec 1993 04:35:50 GMT
Message-ID: <JROZES.93Dec12021934@allegro.cs.tufts.edu>
Sender: news@news.tufts.edu (USENET News System)
Organization: Tufts University Computer Science Dept.
References: <phrCHwnFq.6LC@netcom.com>
Date: Sun, 12 Dec 1993 07:19:34 GMT
Lines: 34
Xref: msuinfo comp.security.misc:6836 sci.crypt:21931

In article <phrCHwnFq.6LC@netcom.com> phr@netcom.com (Paul Rubin) writes:

   [long interesting description deleted]

   4) Obviously, don't let the piece of paper get stolen! 

   Comments?  If no one thinks up any holes or improvements, I'll
   probably implement this for Linux and post the code.

This sounds almost exactly like S/Key, which I am using under Linux pl14
currently (it built with very little modification). The only difference
is that the seed order for the passwords is sequential, instead of undefined
as you suggest. As you point out in (4), losing the piece of paper could
ruin your whole day (or week, if it got stolen). That bothers me, along
with the fact that the generation and control of the one-time passwords
hinges on a single pass phrase. S/Key has some blemishes (a -p switch
to specify the pass phrase on the command line, character echoing left
on during challenge responses, etc.)

I liked Alec Muffet's suggestion (I think it was his), although it requires
software to run on both machines, which is not what you are looking for.
It essentially involves the server sending a random string to the client
and letting the client encrypt the string with a private key (signing the
string) and sending it back to the server (no unencrypted passwords on
the network), where it is decrypted with the public key and tested
against the original string to authenticate the client. This seems like
a simple, yet strong improvement over the current password system used
and it doesn't force the user to rely on a piece of paper for security.

If anyone out there is interested in developing such a system, I would
like to hear from you. I'd also like to hear any other ideas for replacing
the current unix password scheme.

jonathan
