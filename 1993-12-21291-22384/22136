Newsgroups: sci.crypt,talk.politics.crypto
Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!swrinde!elroy.jpl.nasa.gov!decwrl!netcomsv!netcom.com!phr
From: phr@netcom.com (Paul Rubin)
Subject: Dead man switch [was: Crypto review of Secure Drive wanted]
Message-ID: <phrCICBAH.DGx@netcom.com>
Organization: Netcom - Online Communication Services (408 241-9760 guest)
References: <phrCIB3C2.3Gy@netcom.com> <9312192314592.davesparks.DLITE@delphi.com>
Date: Mon, 20 Dec 1993 15:35:05 GMT
Lines: 122
Xref: msuinfo sci.crypt:22136 talk.politics.crypto:1746

In article <9312192314592.davesparks.DLITE@delphi.com> davesparks@delphi.com (Dave Sparks) writes:
> >> Well, I've personally never had any data that I was willing to die
> >> for, but I don't presume to answer questions about other people's
> >> priorities for them.  I don't think a program designer should try to
> >> answer these questions for them either.  It should be up to the user,
> >> whether to enable these settings or not, depending on the user's own
> >> priorities.
>
>That is true of course, unless you consider the matter of motives.  Were I
>planning to design a cryptosystem, I would take into account its potential
>use before spending the time designing in bells and whistles.  Is the time
>and effort required to design in a feature that very few would actually need
>or use really cost-effective to me as a profit-minded enterpreneur?  Of
>course, if you hypothesize a programmer with lots of time on his hands and
>no real profit motive, then a bit of idealism might conceivably come into
>play.

What are you getting at?  We are talking about a program (SecureDrive)
that is distributed for free with source code, not a commercial
program.  The discussion up to now has been about how to improve the
technical quality of the program.  It is true that commercial programs
are usually designed to maximize profits rather than technical quality
(hence PGP, Emacs, GCC, etc. are all better than their commercial
counterparts) but we're talking about how to make a program as good as
possible, not how to make it as profitable as possible.  WordPerfect
makes lots more money than Viacrypt, and we know how secure WordPerfect 
encryption is.

> >> It's easy to think of data that an ordinary crypto user would
> >> rather lose permanently than have fall to the wrong people.
> >> Cryptography keys keys used for reading confidential incoming
> >> email are an obvious example.
>The former scenario is quite realistic, but there are better ways to
>accomplish it than encrypting an entire partition. 

This is just one example.  It's easy to come up with others.  E.g.
I might want to encrypt the entire partition on a portable computer,
which is more vulnerable to theft than a stationary computer.  If
all the data on it is permanently lost, I can restore it from 
securely-stored backups at home.  Is this a realistic concern?  Yes.
The Wall St. Journal reports that there is an actual industry in
stealing notebook computers *for the data they contain* rather than
for the hardware.  I.e., for $20k you can hire someone to follow an
enemy CEO to the airport and switch his notebook with an identical
model so the CEO doesn't even notice the theft until hours later
(by which time you've closed your deal using data from his spreadsheet).

>When an entire system is that sensitive, then additional attention
>would need to be paid to PHYSICAL security, "TEMPEST", etc.

Obviously so.  There is only a certain class of things a program can do.

[To Mike Ingle: 

How about making the "login" program continually flash the keyboard
LED's while the user is typing in the passphrase?  The idea is that
the LED's consume a lot more power than the keyboard signals, so
flashing them may swamp out RF emitted through the keyboard cable by
the character codes.  This is no substitute for good shielding but
it's easy to do and may be better than nothing.  Also, I hope the
documentation already talks about these issues!]

>The other thing to consider is whether the hypothetical "enemy"
>knows in advance that the system is thus protected.  One of the key
>custodians could be kidnapped with the threat, "use the correct key the
>first time.  If it self-destructs because you used the wrong one, you're
>dead."  But then, we're talking "humint", not crypto!

This is why I suggested using secret sharing for the backup keys, so
the kidnappers would have to get (say) 4 out of the 5 custodians, who
might be in 5 different countries, etc.  But implementing such a
scheme would be separate from SecureDrive.

>The problem is, would I, as an individual, really use such a system without
>providing myself a "back door"? 

That should be up to YOU. 

>The temptation would always be there to build in a "fire escape".
>Even if I didn't do it, if the enemy believed that I had, then I'd be
>in a world of hurt if I couldn't (or wouldn't) unlock the system for
>him.  It reminds me of the advice to carry $20 or so in case you're
>mugged, on the theory that a mugger, angry at getting nothing for his
>efforts, might just kill you out of spite.

You continue to raise concerns that should be obvious to anyone
considering using such a feature (although the program documentation
should talk about these issues).  Yes, someone considering setting up
a dead man switch should consider these problems and make an
intelligent decision.  *Maybe his situation is different from yours*.
*Maybe he will decide that he is a tougher character than you are, and
be willing to take his chances with the mugger*.  He might not decide
for his data what you would decide for your data.  That should be his
prerogative.

> >> Anyway, generating a random key per filesystem is motivated mostly by
> >> the other reasons I gave in that post.  The possibility of a "dead man
> >> switch" is just one further feature of the scheme.
>
>Yes, and the rationale appears to be sound.  Even if these scenarios seem
>far-fetched, there are certainly spinoff benefits to be gained for less
>critical applications as well.  Also, from the human factors point of view,
>you want to tailor the security precautions to the value of the data and the
>preceived threat.  Being over cautious can be counter productive.  It often
>leads to procedures that are so cumbersome that users are motivated to find
>ways to circumvent them.

In the abstract this is true.  In this specific case it should be a
simple matter to make it convenient to select which features you want to
turn on and which ones you want to leave off.

========================================================================= 

I have the feeling that this whole discussion is motivated by some
concern on your part that you haven't spelled out, e.g. you have some
kind of political reason for opposing a dead-man-switch in
SecureDrive.  Is this the case?  I had originally brought up the
possibility of implementing such a switch as part of a purely
technical discussion and was surprised to see the thread go the way it
has.  If you think the switch is a bad idea for moral or political
reasons rather than technical ones, I don't mind continuing the thread
a little bit more, but we should take it to talk.politics.crypto.
