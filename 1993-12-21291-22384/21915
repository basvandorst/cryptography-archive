Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!uknet!EU.net!chsun!bernina!caronni
From: caronni@nessie.cs.id.ethz.ch (Germano Caronni)
Subject: Naive Question on Trusting
Message-ID: <CHuDwx.6Ju@bernina.ethz.ch>
Sender: news@bernina.ethz.ch (USENET News System)
Nntp-Posting-Host: nessie
Organization: Swiss Federal Institute of Technology (ETH), Zurich, CH
Date: Fri, 10 Dec 1993 23:14:55 GMT
Lines: 36

Hello sci.crypt,
here comes another of those silly questions. Any positive ;-) answer
will be greatly appreciated.
Current practical models of computer- and network-security place the
borderline for trusted components on 'machines'. Generally the network
is assumed untrusted (in a certain degree) while the end-machines between
which the communication takes place are generally trusted. 
(On multiuser-machines the other users of the machine (OPERATOR, 
root & co) naturally are trusted too.
Does anybody know a successful solution if one assumes that the machine,
or it's priviledged users are not to be trusted ? How much intelligence
has to be provided in the final components of a communication link to
circumvent the problem of trusted machines ? Like providing my VT100 or
Xterminal with an encryption-device ;-)
Could the problem of untrusted machines somehow be limited in the time-
axis ? Assuming I can prove that the machine is *NOW* under strict control,
but without knowledge about earlier states of the machine, can one *somehow*
get a secure communication going? (The first response is 'no', I know)
Any ideas, comments on inaccurancies or omissions in this problem, and
just any kind of feedback would be greatly appreciated.

Friendly greetings,

            Germano Caronni


p.s. (this is not exactly wellplaced in sci.crypt) but could some kind soul 
perhaps tell me if there is a list of network-security tools starting with 
Kerberos & NIS-mechanisms? 
What packages/applications/concepts/papers... (*grin*) are actually part of 
the 'state of the art' for this topic ?
-- 
Instruments register only through things they're designed to register.
Space still contains infinite unknowns.
                caronni@tik.ethz.ch                           PGP-Key-ID:A31AF5
Germano Caronni caronni@nessie.cs.id.ethz.ch   87F482724096B041494B247FE10C1F50
