Path: msuinfo!agate!library.ucla.edu!europa.eng.gtefsd.com!uunet!ddsw1!not-for-mail
From: supercat@MCS.COM (John Payson)
Newsgroups: sci.crypt
Subject: Re: comments on viacrypt
Date: 29 Dec 1993 16:52:53 -0600
Organization: /usr/lib/news/organi[sz]ation
Lines: 55
Message-ID: <2ft1o5$33h@Mercury.mcs.com>
References: <931226.34386.BOBES_PIERRE@delphi.com> <756950576snz@ubik.demon.co.uk>
NNTP-Posting-Host: mercury.mcs.com

In article <756950576snz@ubik.demon.co.uk>,
Anthony Naggs <amn@ubik.demon.co.uk> wrote:
>In article <931226.34386.BOBES_PIERRE@delphi.com>
>           BOBES_PIERRE@delphi.com  writes:
>>
>> I just read a thread on alt.security.pgp which gave a description of viacrypt.
>> It said the rsa routines of pgp were replaced as well as the digital signature
>> routines. What were they replaced with? How secure are these replacements?
>> What are these replacements?
>
>The 'replacements' are official, tested & licensed implementations of
>RSA produced by RSADSI.  These replace the RSA code contributed to PGP.
>The use of this 'genuine' code is probably a requirement of ViaCrypt's
>license arrangement with RSADSI, so that the can safely and accurately
>say that the product uses RSA encryption.  (This may also apply to the
>MD5 digest code used to generate signatures).
>
>This would be similar to a PC supplier being allowed to describe their
>products as having an Intel CPU only if the CPU was a genuine Intel part,
>and not a 'compatible' part from AMD, Cyrix, Texas, ...

There's still the possibility of hokum, though.  It's possible (and not
too hard) from my understanding to search quickly for a key which will
produce a few desired bits of cryptotext for a given plaintext (e.g. if
I wanted the encrypted file to begin with 11010010 I would just have to
try, on average, 256 keys).  A straight brute-force search for 8, 10,
or even 12 bits of "hideable" data could probably be done fast enough
as to be unnoticeable (especially compared with the speed of the RSA
encryption).

Actually, one can even do better than that: Assume a 1024-bit private
key.  Choose the IDEA key such that 40 bits (probably scattered in
the first block of cryptotext) when taken as four groups of ten bits
will represent the positions of four "ones" in the key.  Assuming the
key has an even mixture of ones and zeros, about one in sixteen keys
will have this property; exhaustively searching until one is found
should not take long.  Given a suitable number of cryptotexts,
however, it would be possible to produce a list of one bits in the
key (even if the list wasn't quite complete, it would not be hard to
search for keys with one additional bit, two additional bits, etc.)
Someone who exchanged messages daily would have their public key
compromised well within a year.

For an implementation of DES or IDEA, having the source code isn't
terribly important [unless you want to ensure that the encryptor
isn't hiding the key somewhere outside of the cryptotext] since those
algorithms will always produce a known output for any given cleartext/
key pair.  Accepting any implementation of a PGP-style algorithm,
however, without inspectible code to ensure its veracity is foolhardy.


-- 
-------------------------------------------------------------------------------
 supercat@mcs.com    |  "Je crois que je ne vais jamais voir...  |   J\_/L
 John Payson         |   Un animal si beau qu'un chat."          |  ( o o )
