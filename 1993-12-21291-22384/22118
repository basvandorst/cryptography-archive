Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!usc!elroy.jpl.nasa.gov!decwrl!netcomsv!netcom.com!phr
From: phr@netcom.com (Paul Rubin)
Subject: Re: Crypto review of Secure Drive wanted
Message-ID: <phrCIB3C2.3Gy@netcom.com>
Organization: Netcom - Online Communication Services (408 241-9760 guest)
References: <phrCIA5tE.2BL@netcom.com> <9312191146592.davesparks.DLITE@delphi.com>
Date: Sun, 19 Dec 1993 23:45:38 GMT
Lines: 56

In article <9312191146592.davesparks.DLITE@delphi.com> davesparks@delphi.com (Dave Sparks) writes:
> >> It also allows the program to delete delete the encrypted key if it
> >> detects an intruder (e.g. person boots the machine and doesn't supply
> >> the passphrase within a time limit) or if you hit a "panic button".
> >> Deleting the encrypted key could be done very quickly and would make the
> >> entire disk unrecoverable even if the attacker beats the passphrase out
> >> of you.
>
>That would presuppose a need to keep this info out of the hands of an enemy
>so badly that you were willing to permanently lose it yourself under such a
>scheme. (Including the possibility of this "dead man switch" kicking in due
>to simple human error.)  You'd also have to make sure that you didn't keep an
>unencrypted backup copy anywhere.
>
>As for protection against "beating it out of you", that scheme only works if
>your enemy KNOWS that any pass phrase info obtained from you would be
>useless, even if valid. IOW, if he obtains the passphrase from you, tries
>it, and is unable to obtain anything useful from the disk, how does he know
>you gave him the right one?  Does he definitely know that you didn't build
>in some sort of a backdoor to later retrieve the data later yourself?  Is
>the info you seek to protect worth (potentially) dying for?  How much of
>this info that you had access to could be recreated from your own memory, if
>you were forced to do so?

Well, I've personally never had any data that I was willing to die
for, but I don't presume to answer questions about other people's
priorities for them.  I don't think a program designer should try to
answer these questions for them either.  It should be up to the user,
whether to enable these settings or not, depending on the user's own
priorities.

It's easy to think of data that an ordinary crypto user would rather
lose permanently than have fall to the wrong people.  Cryptography
keys used for reading confidential incoming email are an obvious example.
If the keys are lost, the user need only generate some new ones and
tell his correspondents to start using the new ones.  So losing
this data is a slight inconvenience, but having it compromised is
a disaster.  Another example would be data on an insecure machine
where there is a copy elsewhere (on a more secure machine or on
backup media).

It is true that I was imagining some pretty far-out scenarios in some
of the descriptions I posted (e.g. having passphrases beaten out of
you; someone else here called this "rubber hose cryptanalysis", a
phrase that I really liked).  I don't think an ordinary crypto nerd
like myself needs to be too concerned about being in such situations,
but program designers should still avoid deciding these things on
users' behalf.  Reading books like "The Codebreakers" and "The Ultra
Secret" really gives one a feeling of just how important data security
can be to some people.  (I've reading some books like this myself
lately, which might be one reason my imagination has been running away
when I post to this thread).

Anyway, generating a random key per filesystem is motivated mostly by
the other reasons I gave in that post.  The possibility of a "dead man
switch" is just one further feature of the scheme.
