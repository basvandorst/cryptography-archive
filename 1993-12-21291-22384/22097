Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!doc.ic.ac.uk!decwrl!pa.dec.com!delphi.com!MIKEINGLE
From: MIKEINGLE@delphi.com (Mike Ingle)
Subject: Crypto review of Secure Drive wanted
Message-ID: <01H6NEY6KGCI937BF4@delphi.com>
Date: Sun, 19 Dec 1993 03:59:15 -0400 (EDT)
X-Received: by usenet.pa.dec.com; id AA13466; Sun, 19 Dec 93 01:00:49 -0800
X-Received: by inet-gw-1.pa.dec.com; id AA16559; Sun, 19 Dec 93 00:59:22 -0800
X-Received: from delphi.com by delphi.com (PMDF V4.2-11 #4520) id
 <01H6NEY6KGCG937BF4@delphi.com>; Sun, 19 Dec 1993 03:59:15 EDT
X-To: sci.crypt.usenet
X-Vms-To: INTERNET"sci.crypt.usenet@decwrl.dec.com"
X-Mime-Version: 1.0
X-Content-Type: TEXT/PLAIN; CHARSET=US-ASCII
X-Content-Transfer-Encoding: 7BIT
Lines: 34

Someone asked whether Secure Drive has been reviewed for cryptographic
strength. It hasn't, and if anyone would like to give it a shot, please
send me mail. I can only send the program to U.S./Canadian sites due to
dumb crypto export laws.

The program will encrypt one hard drive partition and floppies at the
sector level. It uses IDEA-CFB, which was originally implemented in
assembly language by Colin Plumb. There is a 2K tsr which contains the
crypto engine, along with two support programs: cryptdsk and login.
The program accepts a passphrase, which can be up to 255 characters,
and takes its MD5. This is put through the normal IDEA key expansion
(code pulled from idea.c in pgp), and each word of the expanded key
is xor'ed with 0DAE hex. I was told that this last step would eliminate
weak keys. The expanded key is then loaded into the TSR's key buffer.
There are two key buffers, one for the hard drive and one for the
floppies. The TSR encrypts a 512-byte sector as follows: it loads the
head, cylinder, sector, and the disk serial number (32 bits) into an
8-byte block. This block is then encrypted, creating a unique IV for
each block of each disk. This IV is then used to encrypt the rest of
the sector in CFB mode.  

Everything on the disk is encrypted except for the boot sector. Leaving
the boot sector in clear was necessary, because DOS will not recognize
a hard drive partition during bootup if its boot sector is scrambled.

The program uses the first 32 bits of a double MD5 to verify keys.
The passphrase is MD5ed, then the 16-byte result is MD5ed again, and
the first 4 bytes of the double hash are written to the disk to
check whether the correct passphrase was used. This could facilitate
a precomputation of common passphrases and their double MD5's, but
there is a lot of known plaintext in the system areas of the hard
drive, so such an attack would probably be possible in any case.
A strong passphrase should eliminate the problem.
 
