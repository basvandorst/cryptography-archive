Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!news.mit.edu!warlord
From: warlord@MIT.EDU (Derek Atkins)
Newsgroups: comp.security.misc,sci.crypt
Subject: Re: Proposal for new login authentication method
Date: 21 Dec 1993 02:13:50 GMT
Organization: Massachusetts Institute of Technology
Lines: 36
Message-ID: <WARLORD.93Dec20211349@deathtongue.mit.edu>
References: <1993Dec17.174225.27177@venice.sedd.trw.com> <2esv3a$cui@news.gatech.edu>
	<WCS.93Dec19225451@anchor.ATT.COM>
NNTP-Posting-Host: deathtongue.mit.edu
In-reply-to: wcs@anchor.ho.att.com's message of Mon, 20 Dec 1993 03:54:51 GMT
Xref: msuinfo comp.security.misc:7067 sci.crypt:22157

In article <WCS.93Dec19225451@anchor.ATT.COM> wcs@anchor.ho.att.com (Bill Stewart +1-908-949-0705) writes:

      I don't think so.  I believe the concept behind S/Key is that there
      are NO secrets known to the host (or transmitted over the network).

   There's another problem - even if you *had* a shared secret, it
   wouldn't stay secret for long, because the next time you log on,
   you're transmitting that password across the net, so the eavesdropper
   can use it to decrypt the previous conversation.  On the other hand,
   it may be good enough to use for authenticating a Diffie-Hellman exchange,
   if you play with the details carefully enough; maybe something like
   using two rounds of the password each time - password[N] logs you in,
   you XOR your DH half-password with password[N+1], set up your session,
   then send password[N+1] to the host to authenticate.  This still lets
   the eavesdropper tamper with half the exchange, but it may be useful.

This is not necessarily true.  I created a protocol based upon
Kerberos to securely authenticate a dialup connection.  What happens
in this protocol, quickly, is that you dial into the host, and tell it
who you are.  It goes off the the KDC and requests a TGT and a service
key, and has them encrypted in your password.  It then ships these two
tickets off to you, and you decrypt them with your kerberos password
(shared secret).  Now you have a TGT and a service key, and you use
the service key to encrypt the TGT to the host.

The details of this system are described in "Charon: Kerberos
Extensions for Authentication Over Secondary Networks", which is
available via anonymous ftp from:
	toxicwaste.mit.edu:/pub/charon/thesis.ps.Z

-derek
--
         Derek Atkins, SB '93 MIT EE, G MIT Media Laboratory
     Secretary, MIT Student Information Processing Board (SIPB)
         PGP key available from pgp-public-keys@pgp.mit.edu
            warlord@MIT.EDU       PP-ASEL        N1NWH
