Newsgroups: sci.crypt
Path: msuinfo!agate!spool.mu.edu!sgiblab!swrinde!elroy.jpl.nasa.gov!decwrl!netcomsv!netcom.com!phr
From: phr@netcom.com (Paul Rubin)
Subject: Re: Finding large primes efficiently
Message-ID: <phrCID3K9.Kys@netcom.com>
Organization: Netcom - Online Communication Services (408 241-9760 guest)
References: <1993Dec13.044706.17030@mnemosyne.cs.du.edu> <MJOHNSON.93Dec13074058@netcom3.netcom.com> <1993Dec14.074434.28215@mnemosyne.cs.du.edu>
Date: Tue, 21 Dec 1993 01:45:43 GMT
Lines: 40

In article <1993Dec14.074434.28215@mnemosyne.cs.du.edu> colin@nyx10.cs.du.edu (Colin Plumb) writes:
>In article <MJOHNSON.93Dec13074058@netcom3.netcom.com>,
>Mark Johnson <mjohnson@netcom3.netcom.com> wrote:
>>It might be worthwhile to look at
>>
>>   Ronald L. Rivest, "Finding Four Million Large Random
>>   Primes," CRYPTO 90 proceedings, p. 625.
>
>Darn, I don't have access to that.

It's a shame, it's a good article, try a nearby library.

>>   2. Test for pseudoprime  (does 2^(n-1) == n  mod n?)
>
>I was just thinking that with base 2, the Fermat test can be optimized
>significantly, since modular multiplication by twois simpler than modular
>addition.

Nope.  You still have to do this exponentiation by repeated squaring,
just like any other modular exponentiation.  You stop multiplying
by powers of 2 as soon as you square enough times to exceed the
modulus, which is after just the first few iterations.

>> By the way, he proposes another, more controversial
>> method for doing primality testing REALLY FAST.
>> The reason for the work, incidentally, was to try out
>> this other, faster-but-controversial, method.  In
>> this experiment, the new test worked flawlessly.
>
>Now, this soulds interesting.  Does anyone have details before I manage
>to track down the proceedings and see them first-hand?

He found that just doing the Fermat test once with base 2 gave
the right answer every time.  Unless I missed something (I only
scanned through the article), this was the "faster test".

I'm wondering, what made you decide that generating primes fast is
important?  The way PGP does it seems fast enough for key generation
purposes, given that key generation is not done very often the way RSA
is typically used.
