Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!nctuccca.edu.tw!news!debbie!cc.nctu.edu.tw!u8134503
From: u8134503@cc.nctu.edu.tw (sha)
Subject: A question on NIST DSA prime test algorithm
Message-ID: <1993Dec7.054457.25214@debbie.cc.nctu.edu.tw>
Sender: usenet@debbie.cc.nctu.edu.tw
Nntp-Posting-Host: ccsun9
Organization: National Chiao Tung University
X-Newsreader: TIN [version 1.2 PL1]
Date: Tue, 7 Dec 1993 05:44:57 GMT
Lines: 25



Dear netters,
	While trying to implement NIST's DSA proposal (Aug. 1991), I found
a strange phenomenon in the Appendix 2 "Generation of Parameters for DSA".
In the psuedo code it provides for testing whether an integer is prime, which
is listed as follows:

   1. Set i = 1 and n = 50.
   2. Set w = the integer to be tested, w = 1 + 2^a m,
      where m is odd and 2^a is the largest power of 2 dividing w-1.
   3. Generate a random integer b in the range 1<b<w.
   4. Set j = 0 and z = b^m mod w.
   5. If j = 0 and z = 1, or if z = w-1, go to step 9.
   6. If j> 0 and z = 1, go to step 8.
   7. j = j + 1. If j < a, set z = z^2 mod w and go to step 6.
   8. w is not prime.  Stop.
   9. If i< n, set i = i + 1 and go to step 3.  Otherwise, w
      is probably prime.

It turns out if the 6th statement is executed, then the algorithm must loop
between statements 6 and 8 until it stops at statement 8. It never jumps to
the other statements.  I wonder why they would devise such an algorithm that
does lots of work only to prove w is not prime.  What if I just terminate the
algorithm if the 6th statement is executed?  Thanks in advance.
