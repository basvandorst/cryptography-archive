Newsgroups: sci.crypt
Path: msuinfo!netnews.upenn.edu!newsserver.jvnc.net!gmd.de!xlink.net!howland.reston.ans.net!pipex!doc.ic.ac.uk!decwrl!pa.dec.com!delphi.com!MIKEINGLE
From: MIKEINGLE@delphi.com (Mike Ingle)
Subject: Unreadable programs / 0-knowledge proofs
Message-ID: <01H51I7B23YG96WT1B@delphi.com>
Date: Sun, 07 Nov 1993 17:06:04 -0400 (EDT)
X-Received: by usenet.pa.dec.com; id AA24533; Sun, 7 Nov 93 14:06:25 -0800
X-Received: by inet-gw-1.pa.dec.com; id AA01121; Sun, 7 Nov 93 14:06:23 -0800
X-Received: from delphi.com by delphi.com (PMDF V4.2-11 #4520) id
 <01H51I7B23YE96WT1B@delphi.com>; Sun, 7 Nov 1993 17:06:04 EDT
X-To: sci.crypt.usenet
X-Vms-To: INTERNET"sci.crypt.usenet@decwrl.dec.com"
X-Mime-Version: 1.0
X-Content-Type: TEXT/PLAIN; CHARSET=US-ASCII
X-Content-Transfer-Encoding: 7BIT
Lines: 14

It was claimed on the cypherpunks that you can use zero-knowledge proof
theory to create a program which cannot be decompiled, reverse-engineered,
or modified. This would allow you to make "black-box" software similar to
observers and clipper chips (not to say that I like clipper chips!)

As I understood his explanation, the program runs on a virtual machine
interpreter which is encrypted or blinded so that, even if you follow
each instruction on the host machine, you learn nothing about the
algorithm running on the virtual machine.

Is this claim true? How do you create such an unreadable program?
Is there any literature on the subject?

--- MikeIngle@delphi.com
