Path: msuinfo!agate!usenet.ins.cwru.edu!magnus.acs.ohio-state.edu!masic
From: masic@magnus.acs.ohio-state.edu (Miroslav D Asic)
Newsgroups: sci.crypt
Subject: Re: CRC's
Date: 6 Dec 1993 05:07:34 GMT
Organization: The Ohio State University, Department of Mathematics
Lines: 77
Message-ID: <2duemm$2ch@charm.magnus.acs.ohio-state.edu>
References: <1869@beacon.rain.com> <1993Dec5.022006.21315@solaris.rz.tu-clausthal.de>
NNTP-Posting-Host: bottom.magnus.acs.ohio-state.edu
Summary: Forging a CRC is easy
Keywords: CRC, polynomial, matrix, integrity

In article <1993Dec5.022006.21315@solaris.rz.tu-clausthal.de>
  czeranski@rz.tu-clausthal.de (Joerg Czeranski) writes:
>Ted Rolle (Ted.Rolle@f36.n105.z1.fidonet.org) wrote:
>:  -=> Quoting Vesselin Bontchev to All <=-
>: 
>:  VB> What can be done is to find a sequence of bytes with the same length
>:  VB> that has the same CRC.
>: 
>: Here is a letter appearing the January 1993 issue of Dr. Dobb's Journal,
>: p. 12:
>: 
>: ****** Start of letter *******
>: 
>: Controlling CRC Values
>: 
>: Dear DDJ,
>: 
>: [describes how to change 32 consecutive bits to make a file have
>:  a chosen 32-bit-CRC sum]
>: 
>:     Gavin Puche
>:     East Brisbane, Queensland
>:     Australia
>: 
>: ****** End of letter *****
>: 
>: Can anyone comment on this?
>
>I have written such a program last year, but a few months ago
>my harddisk at home has crashed.  So I can't include it in this posting.
>It takes as input: a file, the CRC polynomial, the intended CRC sum and
>the position of the first of the 32 bits to be changed.
>The coefficient of x^0 in the polynomial must be 1.  Otherwise the
   .... <omitted> ....

     Actually, you don't even need to know the generating polynomial. It is
enough to have a supply of (file, checksum) pairs. See *my* letter to Dr.
Dobbs Journal (October 1992 issue)

>The solving of the system if linear equations modulo 2 was done
>with the algorithm of Gauss.

     Again, the programming can be avoided if you have access to a
computer algebra system (Maple, Mathematica, Axiom, Derive) -- most
of them have finite field algebraic computations built in.

>The program was rather short (1-2 screens full, as I recall it).
>Anyone who has some basic knowledge in linear algebra can
>write it on an afternoon.
>
     Yes, the programming is easy because addition in a 0-1 field is
simply exclusive OR, and multiplication is AND. I was tempted to
program the Gaussian elimination in Assembly, but decided instead to
use Maple V. To test my approach, I determined the polynomials used in
the VALIDATE.COM program (included in the McAfee antivirus package). It
turned out that one polynomial was of degree 16 and the other of degree
thirteen. If anyone is interested, I can dig those from my files and
post/e-mail, togeteher with distinct .COM files that have the same
McAfee signatures. Any volunteers to determine Central Point/Micrososft/
Norton polynomials (assuming that they do not change from customer to
customer)?

>I had thought of using 32 _arbitrary_, not necessarily consecutive,
>bits.  I cannot prove this at once, but if I was not mistaken, this is
>possible, if the polynomial p has only the factors x^0 and p
>(such polynomials should in any case be used [and in fact are], as
>they have good bit-error checking properties).
>
     I'm not sure that I understand this part of your posting, but using
arbitrary 32 bits (for CRC-32) is *not* going to work in all cases --
the matrix will occasionally be singular.

>joerg
                                                          Miroslav
-- 
 ***** Miroslav D. Asic, Dept. of Math., The Ohio State Univ. *****
 *****  masic@magnus.acs.ohio-state.edu  or  asic.1@ohstmail  *****
