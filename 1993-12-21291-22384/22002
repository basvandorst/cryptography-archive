Path: msuinfo!uwm.edu!vixen.cso.uiuc.edu!howland.reston.ans.net!EU.net!julienas!chorus!octave.chorus.fr!jloup
From: jloup@chorus.fr (Jean-loup Gailly)
Newsgroups: sci.crypt
Subject: Re: encryption in PKZIP?
Message-ID: <6585@chorus.chorus.fr>
Date: 14 Dec 93 16:39:44 GMT
References: <CHyo01.D0z@cscns.com> <2ehdkvINNqsi@matt.ksu.ksu.edu>
Sender: news@chorus.chorus.fr
Lines: 59

kkruse@matt.ksu.ksu.edu (Korey J. Kruse) writes:

> I believe that PKwares has updated its encryption/decryption method
> recently so that such attacks are more difficult.    I think this
> simply involved allowing more "false positives" so that something
> like 1/256 passwords will actually produce some kind of output
> which I assume must be tested to see if it contains any plaintext or
> the files you need whatever.

The main improvement is not the reduction of the known plaintext
from 2 bytes to 1. The pkzip 1.10 encryption was weak because the
"random" header was not random at all. It was based on the square
of the time of day at encryption time. Paul Kocher and I independently
found this by looking closely at the "random" header. The main improvement
in pkzip 2.04 is that the random header is now much more random.
Thus brute force attacks are now much more expensive (although
still feasible, as for any encryption algorithm, for poorly
chosen passwords).

> In an effort to dispute the claim that such attacks were possible for
> its  product PKwares had a contest with a ($1000 ?) prize.   They
> distributed a short encrypted file that they claim was encrypted with
> a key of 8 or less ascii characters.

The exact wording used by PKware is "NO MORE than 7 characters long"
but they did not (understandably) restrict them to ascii. At least one
byte of the password is likely to be non-printable.  The contest data
is available on garbo.uwasa.fi:/pc/arcutil/pkcontst.zip.  The
plaintext (sent to me by PKware after the expiration of the contest)
is just garbage (random data) except for one short readable sentence
at the end. PKware refused to give me the password, which I needed to
check that they had used the (weak) pkzip 1.10 algorithm and not the
improved one.

>       The last I heard was that all key combinations have been tried
> on the file up to 7 characters with no success.  The person who tried
> this decided that trying all the 8 character combinations would be too
> difficult of an operation for him.

More precisely, I tried, with the help of a small team, all passwords
consisting of printable characters (decimal 32 to 126) of length 7 or
less.  We did not have enough cpu power to try non-printable
characters.  (With the 1000 Mips years already spent on factoring
RSA-129, the full search would have been a trivial task).  My password
cracker tries about 500,000 passwords per second on a 50Mhz 486. It ran
for several months on about 30 PCs or workstations.  There is no need to
ask for the sources: the cracker works only for the encryption
used in pkzip 1.10; it cannot work for pkzip 2.04.


I would really like to see someone experienced in cryptography
(I am not) make a serious attempt at cracking the pkzip encryption
by methods other than brute force. The algorithm is described in
appnote.txt, available inside ftp.cso.uiuc.edu:/pc/exec-pc/pkz193a.exe.
(This is a zip file: use "unzip pkz193a.exe APPNOTE.TXT" to extract.
unzip is available in ftp.uu.net:/pub/archiving/zip/unz50p1.tar.Z.)

Jean-loup Gailly
jloup@chorus.fr
