Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!news.umbc.edu!eff!news.kei.com!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!news.mit.edu!jis
From: jis@big-screw.MIT.EDU (Jeffrey I. Schiller)
Newsgroups: sci.crypt
Subject: Re: Challenge/response auth methods.
Date: 19 Dec 1993 07:35:36 GMT
Organization: Massachusetts Institute of Technology
Lines: 39
Message-ID: <JIS.93Dec19023537@big-screw.MIT.EDU>
References: <1993Dec13.204000.4737@cc.ic.ac.uk> <phrCI0tps.4BC@netcom.com>
	<1993Dec14.174018.28734@cc.ic.ac.uk>
NNTP-Posting-Host: big-screw.mit.edu
In-reply-to: pjc@cc.ic.ac.uk's message of Tue, 14 Dec 93 17:40:18 GMT

You might also want to take a look at SPX, a program built by DEC a few
years ago. An experimental implementation is available on CRL.DEC.COM in
/pub/DEC/SPX (U.S. and Candians only please).

It basically does what you propose, though in a binary format (as opposed
to PEM which ASCII'ifies everything) with a few additional twists.

Kerberos will also work for you (you need a central respository for either
SPX or Kerberos). Privacy isn't really an issue with Kerberos because most
applications only use it for authentication, not long term confidentiality
(where "long term confidentiality" is defined as information in a store
and forward network where bulk data may be encrypted, i.e., e-mail). Where
Public Key Cryptography really helps you is that you don't need to guard
the central server as seriously as you need to guard a Kerberos server.

It is also important to remember that some of the same features that make
public key attractive, i.e., admin cannot decrypt private keys, also makes
administration more difficult.

I have experience with commercial systems that use Public Key (for example
Lotus Notes) and in many cases the system administrator generates a user's
private/public key pair and gives it to them. Why? Because this is much
easier to do then to explain to the poor end user that they have to generate
the key and submit it to the system administrator for certification.

On one system where I was the end-user, the system adminstration merely
e-mailed (not PEM, just plain old ordinary e-mail) my identity and private
key. When I asked why he did this he explained that it was convenient for
him. Now I *could* generate a replacement keypair and e-mail the public
key back for certification, however this process would invariably lock me
out of the system for a few days, something that would be inconvenient for
me!

I have digressed enough... but will continue the discussion if there is
interest. In summary: The theory of public key cryptography is really cool,
but getting real would system administrators (and vendors) to turn it into
good practice is a trickier business!

			-Jeff
