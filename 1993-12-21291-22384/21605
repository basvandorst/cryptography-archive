Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!spool.mu.edu!howland.reston.ans.net!pipex!pavo.csi.cam.ac.uk!cam-orl.co.uk!aph
From: aph@cam-orl.co.uk (Andrew Haley)
Subject: QS - A New Cryptosystem
Message-ID: <1993Dec1.195456.8970@infodev.cam.ac.uk>
Sender: news@infodev.cam.ac.uk (USENET news)
Nntp-Posting-Host: quince.cam-orl.co.uk
Organization: Olivetti Research Ltd, Cambridge, England.
X-Newsreader: TIN [version 1.2 PL2]
Date: Wed, 1 Dec 1993 19:54:56 GMT
Lines: 65

In  <2ceft4INN7va@umbc7.umbc.edu>, olson@umbc.edu (Bryan G. Olson) asks:

> The idea of using low-exponent RSA in some form of block
> chaining mode seems reasonable.  Can anyone design one for
> which they can offer better proofs of security ?

In [1], RSA is used in a random number generator.  This is based on
the following hypothesis:

  Let e >= 3 be an odd integer.  For RSA moduli N (n bits long) and all
  M proportional to N^(2/e) the following distributions on [1,N] are
  indistinguishable by polynomial time statistical tests:

  1:  The uniform distribution on [1,N]
  2:  The distribution of x^e mod N for random x in [1,M]

The authors give some strong evidence for this hypothesis.

This allows a stream generator to be constructed by feeding the most
significant fraction 2/e of the output bits into the next iteration,
and the least significant fraction (e-2)/e of the output bits are
output by the generator.  In the case of e = 3, this means that each
iteration generates n/3 useful output bits, and 2n/3 bits are fed
back.

In <931121111140@oxted.demon.co.uk>, georgefoot@oxted.demon.co.uk
(George Foot) describes the QS cryptosystem, which uses RSA in a
similar way, but rather than feeding back the output of the RSA
operation, this output is XORed with a block of ciphertext.  The
result block is then output as the ciphertext.  This block is then
XORed with a session key and fed back into RSA.

[ Aside: there is a variant of QS in which the session key is changed
from block to block (K, K^2, K^3, ...) mod M. ]

Let us consider the situation where the plaintext has low entropy; a
block of zeroes is the most extreme case.  In that case, the
ciphertext is the output of the RSA operation.  (Low entropy
plaintexts are common in practice.)  In that case, QS is identical to
the generator in [1], except that the input to RSA is XORed with the
session key, and all of the bits output by the RSA operation are used
each time, rather than just 1/3 of them.  (This implies that the bits
which are used as the keystream are also fed back into RSA after being
XORed with the session key.  This doesn't seem like a good idea under
any circumstances.)

I would be very surprised if an XOR with a session key can triple the
number of useful pseudorandom bits per RSA operation!  The authors of
the QS paper do not show why the keystream used should have a uniform
distribution, unlike the authors in [1].  Without this, a nonuniform
distribution would be of considerable use to a cryptanalyst.

[Aside 1: The authors of [1] state that whether or not the same
technique can be used with a prime modulus is an open question.]

[Aside 2: The paper [1] carries the notice "MIT-Patent Pending"!  As
it is so similar to the QS cryptosystem I expect some squabbles if QS
is ever commercially used.]

Andrew.

[1]  "Efficient, Perfect Random Number Generators," S. Micali & C.P.
Schnorr,  Proceedings of CRYPTO 88, Springer-Verlag.


