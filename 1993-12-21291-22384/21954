Newsgroups: comp.security.misc,sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!uunet!noc.near.net!news.tufts.edu!jrozes
From: jrozes@allegro.cs.tufts.edu (J Rozes)
Subject: Re: Proposal for new login authentication method
In-Reply-To: phr@netcom.com's message of Sun, 12 Dec 1993 22:01:02 GMT
Message-ID: <JROZES.93Dec12220257@allegro.cs.tufts.edu>
Sender: news@news.tufts.edu (USENET News System)
Organization: Tufts University Computer Science Dept.
References: <phrCHwnFq.6LC@netcom.com> <JROZES.93Dec12021934@allegro.cs.tufts.edu>
	<phrCHxztq.6wE@netcom.com>
Date: Mon, 13 Dec 1993 03:02:57 GMT
Lines: 49
Xref: msuinfo comp.security.misc:6852 sci.crypt:21954

In article <phrCHxztq.6wE@netcom.com> phr@netcom.com (Paul Rubin) writes:

   Does S/Key come with Linux?  I haven't seen it.

It doesn't, but the distribution (crimelab.com) builds with only a few
trivial modifications. 

   I'm not worried too much about losing the piece of paper, it's no
   worse than getting a password stolen in the usual way.  Perhaps the
   program should support a "backup" hash file.  You would have a second
   piece of paper with more passwords, in case you lose the first one.
   The program would recognize if you use one of the backup passwords,
   and invalidate the primary hash file.  Or you could always call your
   sysadmin and get your account turned off until you could be faxed a
   new password list.  In any case, I'd rather lose a piece of paper than
   the calculator-like gadget that SecureID depends on.

Someone suggested this type of deal a few posts back, only using a 
sequential series of lists where the usage of a password on list n
automagically invalidates all passwords on lists n-1 through 0. The 
only problem with this type of functionality is that you're royally
screwed if someone gets a hold of your highest-numbered password sheet.
Also, calling a sysadmin-type is not always a viable option. And then
you have to worry about securely transmitting the fax... 8^)

   [my rave about public key authentication]

   Yes, using a digital signature to authenticate your login is the ideal
   solution (though you want to sign a hash of the random string, not the
   string itself).  But current digital signature systems require a *lot*
   of computation (much more than ordinary cryptography) and using them
   invites hassles over patents.  This is why Kerberos and related
   systems use ordinary cryptography.  But as mentioned I don't want
   to depend on software at both ends.  My motivation for the OTP
   suggestion is to be able to use telnet from cracker-infested networks
   while travelling.

Is RSA still off-limits? Can any crypto-types out there tell us about
other public key algorithms?

It would be good to see someone develop a package that can provide both
OTP and PKA validation systems. PKA could be used wherever possible
(when it's possible and not too expensive) while OTP could be used when
the client doesn't have the ability to make digital signatures. It seems
like both are good ideas and it would stink to see two competing methods
emerge completely incompatible with each other. The unix password scheme
will never be tossed that way...

jonathan
