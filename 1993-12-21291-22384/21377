Path: msuinfo!agate!library.ucla.edu!europa.eng.gtefsd.com!howland.reston.ans.net!cs.utexas.edu!geraldo.cc.utexas.edu!mccoy
From: mccoy@ccwf.cc.utexas.edu (Jim McCoy)
Newsgroups: sci.crypt
Subject: Re: DH Key exchange and MD5 bit distribution?
Date: 22 Nov 1993 18:30:08 -0600
Organization: The University of Texas - Austin
Lines: 63
Sender: mccoy@tramp.cc.utexas.edu
Distribution: world
Message-ID: <2crlig$req@tramp.cc.utexas.edu>
References: <pwd-191193161943@thunder.apple.com>
Reply-To: mccoy@ccwf.cc.utexas.edu
NNTP-Posting-Host: tramp.cc.utexas.edu


In article <pwd-191193161943@thunder.apple.com>, pwd@apple.com (Patrick W. P. Dirks) writes:
> 
> I'm considering a system to set up session keys between two parties
> communicating over an open network using the Diffie-Hellman key exchange
> method [...]
>
> Two questions:
> 
> (a) Are there any new weaknesses known about this scheme [i.e. are there
> any known approaches that don't require the computation of log base g of
> g**a]?

Check out "An Improved Algorithm for Computing Logarithms over GF(p) and
Its Cryptographic Significance" in IEEE Transactions on Information Theory
(Vol 24, #1, January 1978, pages 106-111.)  This will tell you things to
avoid in chosing certain values of your modulus N.  This can make a big
difference in implementing the initial search for N because you must
remember to check primality of N in parallel with the check of (N-1)/2.

Doug Barnes and I are working on an addition to the upcoming AUTH_ENCRYPT
revision in the telnet RFC that will provide for a Diffie-Hellman key
exchange as a fallback method if the other AUTH methods (Kerberos, SPX,
etc) are unavailable.  So far this paper is the only one we have found to
be very significant regarding chosing values for the exchange (although if
people out there know of others, let me know...)

> (b) Does anyone know how large a and b need to be to ensure reasonably
> security given today's processors [i.e. for how many bits does the discrete
> logarithm problem become sufficiently difficult], and

In the work being done for the AUTH_ENCRYPT work we are basically tossing
around 300 bit values for a and b.  We figured on shooting for the
"sometime after the heat death of the universe" stage given existing method
for breaking this system.

> (d) given this multi-hundred bit K, what's a good way to distill this into
> a smaller session key, like a 56-bit DES key?

For the work we are doing the symmetric encryption is negotiated
semi-independantly so we are throwing over several hundred random bits and
having the chosen symmetric cipher just take the least significant X bits
of this chunk as it's key.

> I was thinking of using MD5
> on K first and then picking some part of the digest.

Why do this?  You are not introducing any more entropy into the random key
that is selected and you are limiting the possible key size to the output of
your hash...

> Is any part of the digest likely to be more or
> less well suited as a random session key, given that the digest is probably
> going to be created from only a few hundred bits of data to begin with?

If your input size is less than your (random, I assume) key size then you
gain no more randomness to the keyspace than you would without the hash
With l bits of input, possible output values number only 2^l if l <
hash-ouput-length.  You seem to be adding unnecessary complexity and
limiting the range of your key values to a fixed maximum at the same
time... 

jim
