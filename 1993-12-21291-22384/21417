Path: msuinfo!uwm.edu!cs.utexas.edu!swrinde!sgiblab!sgigate.sgi.com!fido.asd.sgi.com!bolyard.wpd.sgi.com!nelson
From: nelson@bolyard.wpd.sgi.com (Nelson Bolyard)
Newsgroups: sci.crypt
Subject: Re: Norton Diskreet (Security overview)
Date: 24 Nov 1993 09:04:17 GMT
Organization: Silicon Graphics, Inc., Mountain View, CA
Lines: 103
Distribution: na
Message-ID: <2cv82h$ltd@fido.asd.sgi.com>
References: <1993Nov18.234332.26656@leland.stanford.edu>
NNTP-Posting-Host: bolyard.wpd.sgi.com

In article <1993Nov18.234332.26656@leland.stanford.edu>, Paul Carl Kocher 
<kocherp@leland.Stanford.EDU> wrote:

>The DES function orders the output bits in a nonstandard way (they do
>the permutation differently from everyone else), but otherwise the
>algorithm is correct.  

If it "orders the output bits" differently (e.g. a non-standard "Inverse
Initial Permutation" to use the terminology of FIPS 46), then it must 
also order the input bits differently (the "Initial Permutation" must
also be different)  since the Initial Permutation and the Inverse
Initial Permutation must be each other's inverse for DES to be able to 
ECB decrypt its own ciphertext.

It should also be mentioned that these initial/final permutations are
not cryptographically significant, and their being nonstandard does not, 
in itself, weaken the cryptographic strength of the DES cipher.  In fact, 
it is common for software implementations to omit the initial/final
permutations altogether to enhance speed.

>The key initialization function is a very, very, very bad problem,
>though.  The function is actually worse than people have been
>suggesting, since it's case insensitive and the parity bit is
>the least significant bit.  The algorithm is:
>
>      unsigned char DESKey[8] = { 0,0,0,0,0,0,0,0 };
>      for (n = 0; n < password_length; n++)
>          DESKey[n % 8] ^= toupper(password[n]);
>                 /* toupper converts lowercase ascii to uppercase */
>                 /* (n % 8) equals (n mod 8) */
>
>To see just how bad this is, consider a password containing just
>letters that is known to be 16 bytes long.  

While useful for illustration, this constraint is not a property of the 
software described in your "overview".

>This *should* give
>an effective keyspace significantly above that of the DES
>key (26^16 = 4.3 x 10^22, while the 56-bit DES key has 2^56 =
>7.2 x 10^16 possibilities).  

Of course, if it really is using DES, then it cannot have a keyspace 
larger than 2^56.

> However for this password, the
>keyspace is actually only 32 bits (4 billion passwords):
>
>  - The total keyspace in DESKey is 64 bits.
>  - The most significant bit (value 128) is zero in each password
>       byte, and consequently is zero in each byte the DES key,
>       reducing the keyspace to 56 bits.
>  - The bit with value 64 is set to 1 for all capital letters, lowering
>       the keyspace to 48 bits.

Yes, and if there are exactly 16 letters, as you required above, 
then the "bit with value 64" in each of the first 8 bytes of password 
will xor with the same bit in each of the second 8 bytes of password, 
causing this bit to have the value zero in each of the 8 bytes of DESKey.

If the key has more, or fewer, letters than 16, some of these bits will 
be 1, others zero, as a function of the length of the password.  If any
of the password characters are not letters, they will have a zero value
for the "bit with value 64".

>  - The bit with value 32 is set to 0 in all capital letters, lowering
>       the keyspace to 40 bits.  (If the password length isn't known,
>       there are 16 different possible combinations for the bit in 
>       this position if the password only contains letters.)

I think you meant to apply this last parenthetic remark to the "bit with
value 64", since xor'ing any number of zero bits changes nothing.

>  - The lowest bit is the parity bit, and is not used, lowering the
>       total to 32 bits.
>
>A PC is more than adequate to crack such passwords.  

However, note that Norton Diskreet is not limited to such passwords.
That is, Norton Diskreet will accept passwords of lengths other than 16,
and will (as I recall) accept passwords containing characters other than 
letters, e.g. numerals.  

So the total key-space of Norton Diskreet should be nearly 36 bits when only
letters are used, and is possibly as high as 48 bits when non-letters are 
also used.  The loss of the least-significant bit is really the major loss.

>-- Paul Kocher
>kocherp@leland.stanford.edu
>
>PLEASE READ BEFORE RESPONDING TO THIS POST:

>                                        My code/executables for 
>breaking DISKREET passwords are NOT available, and I don't have
>time to find forgotten passwords for people.  

The one detail of fact that would be useful to others would be the 
initial permutation (table) used by ND.

-- 
Nelson Bolyard       nelson@sgi.COM       Phone: 415-390-1919
Disclaimer: I do not speak for Silicon Graphics.
--
