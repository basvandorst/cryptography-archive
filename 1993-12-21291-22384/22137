Path: msuinfo!agate!howland.reston.ans.net!pipex!uunet!zib-berlin.de!math.fu-berlin.de!unidus.rz.uni-duesseldorf.de!lannert.rz.uni-duesseldorf.de!TSOS
From: TSOS@uni-duesseldorf.de (Detlef Lannert)
Newsgroups: sci.crypt
Subject: Re: Crypto review of Secure Drive wanted
Date: Mon, 20 Dec 1993 15:42:12 GMT
Organization: Universitaetsrechenzentrum, Heinrich-Heine-Universitaet, Duesseldorf
Lines: 51
Message-ID: <TSOS.652.2D15C7D4@uni-duesseldorf.de>
References: <01H6NEY6KGCI937BF4@delphi.com>
NNTP-Posting-Host: lannert.rz.uni-duesseldorf.de

In article <01H6NEY6KGCI937BF4@delphi.com> MIKEINGLE@delphi.com (Mike Ingle) writes:

 [... part of good description (thanks!) deleted for brevity ...]
>          The TSR encrypts a 512-byte sector as follows: it loads the
>head, cylinder, sector, and the disk serial number (32 bits) into an
>8-byte block. This block is then encrypted, creating a unique IV for
                                  ^^^^^^^^^
>each block of each disk. This IV is then used to encrypt the rest of
>the sector in CFB mode.  

Is it really necessary to encrypt the individual block address to set up 
the IV for the block encryption? 

This method to create an IV makes it infeasible for an attacker to obtain 
the IV's; on the other hand encryption of known or unknown data under an 
unknown key with a known IV shouldn't be crackable anyway (if IDEA is any 
good). 

The only advantage I see in constructing IV's this way is that two disks 
encrypted under identical keys won't reveal the fact that identical 
information is stored in identical records. But this shouldn't be a 
problem because 
- you use a (usually variable) disk serial number to build the IV;
- the eight-byte block containing the sector address could be XORed with 
  a hash of the keyphrase to create an IV (which is -- hopefully -- never 
  directly exposed to an attacker anyway); 
- the encryption key could be a random number instead of being derived 
  from the passphrase as another poster suggested (*). 

Since the IV must be set up for each and every record access, saving an 
encryption per record could IMHO speed up the whole system a little bit. 

Did I overlook some important aspect? If yes, please do tell me; I'm 
already going to blush in advance ... 

Detlef 

(*) I like this idea (tm) very much. Precautions should be taken, however, 
    that not the whole disk is lost when a read error occurs in the area 
    where the encrypted random key is stored. Therefore it might be useful 
    to store it repeatedly at various places on the disk. The "panic key" 
    would then affect the partial key in the CMOS RAM ("KR") rather than 
    the keyfield on disk ("KF"); when generating "KR", "key escrow" 
    floppies would be created at the same time so that the data can 
    survive a CMOS battery failure. [Gosh, I shouldn't have used that 
    expression! ;-) ] 
--
Detlef Lannert      DC3EK      E-Mail: tsos@rz.uni-duesseldorf.de
PGP 2.x key available (finger lannert@clio.rz.uni-duesseldorf.de)
          "Oft ist das Denken schwer, indes
           das Schreiben geht auch ohne es."        Wilhelm Busch
