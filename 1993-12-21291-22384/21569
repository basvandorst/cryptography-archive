Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!wupost!mont!pencil!rich
From: rich@pencil.cs.missouri.edu (Rich Winkel)
Subject: Re: Carmichael Numbers
Message-ID: <rich.754689922@pencil>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: pencil.cs.missouri.edu
Organization: University of Missouri
References: <rich.754639244@pencil> <1993Nov30.085648.4683@zh014.ubs.ubs.ch>
Date: 30 Nov 93 20:05:22 GMT
Lines: 37

In <1993Nov30.085648.4683@zh014.ubs.ubs.ch> zhmhd@zh014.ubs.ubs.ch (Mihailescu Preda) writes:
>In article 754639244@pencil, rich@pencil.cs.missouri.edu (Rich Winkel) writes:
>> PGP's key generation algorithm tests a candidate prime with Fermat's little
>I think they use Rabin-Miller which is slightly stronger than little Fermat
>and eliminates most Carmichael numbers too! Actually most sensible key
>generators use some form of Rabin-Miller and the pseudoprimes
>(i.e. composites passing tests) which are not recognized by these
>tests are called "strong" or "Rabin-Miller strong" pseudoprimes.

Here's excerpts from PGP 2.3's genprime.c.  It appears they're using Fermat.
Maybe they have reasons for choosing it over Rabin-Miller.

/* This routine tests p for primality by applying Fermat's theorem:
   For any x, if ((x**(p-1)) mod p) != 1, then p is not prime.
   By trying a few values for x, we can determine if p is "probably" prime.

   Because this test is so slow, it is recommended that p be sieved first
   to weed out numbers that are obviously not prime.
 
   Contrary to what you may have read in the literature, empirical evidence
   shows this test weeds out a LOT more than 50% of the composite candidates
   for each trial x.  Each test catches nearly all the composites.
*/
[...]
        for (i=0; i<4; i++)             /* Just do a few tests. */
        {       poll_for_break(); /* polls keyboard, allows ctrl-C to abort program */                                             
                mp_init(x,primetable[i]);       /* Use any old random trial x */                /* if ((x**(p-1)) mod p) != 1, then p is not prime */
                if (mp_modexp(is_one,x,pminus1,p) < 0)  /* modexp error? */
                        return(FALSE);  /* error means return not prime status */                                                  
                if (testne(is_one,1))   /* then p is not prime */
                        return(FALSE);  /* return not prime status */
#ifdef SHOWPROGRESS
                putchar('+');   /* let user see how we are progressing */
                fflush(stdout);
#endif /* SHOWPROGRESS */
        }

