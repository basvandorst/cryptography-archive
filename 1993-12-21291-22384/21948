Newsgroups: comp.security.misc,sci.crypt
Path: msuinfo!agate!apple.com!amd!netcomsv!netcom.com!phr
From: phr@netcom.com (Paul Rubin)
Subject: Re: Proposal for new login authentication method
Message-ID: <phrCHxztq.6wE@netcom.com>
Organization: Netcom - Online Communication Services (408 241-9760 guest)
References: <phrCHwnFq.6LC@netcom.com> <JROZES.93Dec12021934@allegro.cs.tufts.edu>
Date: Sun, 12 Dec 1993 22:01:02 GMT
Lines: 41
Xref: msuinfo comp.security.misc:6848 sci.crypt:21948

In article <JROZES.93Dec12021934@allegro.cs.tufts.edu> jrozes@allegro.cs.tufts.edu (J Rozes) writes:
	[some stuff about OTP password proposal]
>This sounds almost exactly like S/Key, which I am using under Linux pl14
>currently (it built with very little modification). The only difference
>is that the seed order for the passwords is sequential, instead of undefined
>as you suggest. As you point out in (4), losing the piece of paper could
>ruin your whole day (or week, if it got stolen). That bothers me, along
>with the fact that the generation and control of the one-time passwords
>hinges on a single pass phrase. S/Key has some blemishes (a -p switch
>to specify the pass phrase on the command line, character echoing left
>on during challenge responses, etc.)

Does S/Key come with Linux?  I haven't seen it.

I'm not worried too much about losing the piece of paper, it's no
worse than getting a password stolen in the usual way.  Perhaps the
program should support a "backup" hash file.  You would have a second
piece of paper with more passwords, in case you lose the first one.
The program would recognize if you use one of the backup passwords,
and invalidate the primary hash file.  Or you could always call your
sysadmin and get your account turned off until you could be faxed a
new password list.  In any case, I'd rather lose a piece of paper than
the calculator-like gadget that SecureID depends on.

>I liked Alec Muffet's suggestion (I think it was his), although it requires
>software to run on both machines, which is not what you are looking for.
>It essentially involves the server sending a random string to the client
>and letting the client encrypt the string with a private key (signing the
>string) and sending it back to the server (no unencrypted passwords on
>the network), where it is decrypted with the public key and tested
>against the original string to authenticate the client. 

Yes, using a digital signature to authenticate your login is the ideal
solution (though you want to sign a hash of the random string, not the
string itself).  But current digital signature systems require a *lot*
of computation (much more than ordinary cryptography) and using them
invites hassles over patents.  This is why Kerberos and related
systems use ordinary cryptography.  But as mentioned I don't want
to depend on software at both ends.  My motivation for the OTP
suggestion is to be able to use telnet from cracker-infested networks
while travelling.
