Newsgroups: sci.crypt
Path: msuinfo!agate!doc.ic.ac.uk!warwick!pavo.csi.cam.ac.uk!rja14
From: rja14@cl.cam.ac.uk (Ross Anderson)
Subject: Re: Help with understanding hash functions
Message-ID: <1993Nov30.115632.9701@infodev.cam.ac.uk>
Sender: news@infodev.cam.ac.uk (USENET news)
Nntp-Posting-Host: ely.cl.cam.ac.uk
Organization: U of Cambridge Computer Lab, UK
References: <931126.65463.BOBES_PIERRE@delphi.com> <1993Nov27.082140.10241@ens.fr> <4CMJBVUJ@gwdu03.gwdg.de> <1993Nov30.092028.20160@ens.fr>
Date: Tue, 30 Nov 1993 11:56:32 GMT
Lines: 249

In article <1993Nov27.082140.10241@ens.fr>, Serge Vaudenay (vaudenay@dmi.ens.fr)
wrote of hash functions:

|> Now, there are several properties for security. For instance :
|>
|> - Universal hash functions : roughly, for any word w, it is too difficult to
|>   find an other word w' such that h(w) = h(w');
|> - One Way hash functions : for any hash value c, it is too difficult to find a
|>    word w such that h(w) = c;
|> - Collision Free hash functions : it is too difficult to find two different
|>   words w and w' such that h(w) = h(w').
|>  
|> The links between those properties are not well known. For surjective hash
|> functions, we may have CF ==> U ==> OW. Otherwise, we still have CF ==> U. So,
|> CF and OW are the most powerfull property for cryptographic hash functions.

Stefan Lucks (slucks@gwdu03.gwdg.de) replied:

|> Here an easy example of a collision-free Hash-Function that is clearly not
|> one-way:
|> 
|>  Let h: A^* -> A any collision-free Hash-Function (may be one-way or not).
|>  Then the Function
|>  
|>     h': A^* -> {0,1}*A 	with h'(x) = (0,x)    if x in A
|>			and  h'(x) = (1,h(x)) else
|> 
|>  is collision-free too (proof left as example).
|> 
|>  But for any randomly chosen hash-output O in {0,1}*A we have a 
|>  50% probability that it is trivial, to find a "fitting" hash-input
|>  I with h'(I)=O.

Serge replied In article <1993Nov30.092028.20160@ens.fr> as follows:

|> When I write "we may have CF ==> U ==> OW", it might depend on the formal
|> definitions. I do not think there is such a theorem, but the intuition tells
|> us CF is stronger than OW : it is easier to get OW functions than to get CF
|> functions. If we get a CF function which is not OW, we may have done this
|> function to get precisely this property.
|> 
|> Can we make another contrexample if we define OW  as follow?
|> 
|> A function is OW if for all probalistic algorithm A and for all x, the proba-
|> bility that M(x) return a preimage of x is exponentially small. Then, for the
|> example above, the probability that A get a preimage of (1,y) may be too small.

There's a lot more to it than that. Collision freedom was invented because this 
sort of definition is rather intractable; it has an implicit temporal ordering in 
it (you mustn't cheat by choosing an x which is the image of a string you already
know). 

This doesn't depend on whether you use the simple definition `given c, you can't 
find w such that h(w) = c' or do something fancy with Turing machines or circuit 
complexity; it's the temporal ordering which causes problems for any formal 
approach. Some doxastic logics use an operator which denotes `A has seen X' but 
none of the axiom schemes which I have so far studied have actually been sound.

Collision freedom eliminates the temporal ordering problem: you just assume that
you will never find w and w' such that h(w) = h(w').

However, we rarely get anything for free in cryptology, and collision freedom is 
really rather weak. I will be presenting a paper at the IMA Conference on 
Cryptography and Coding next month which explains why: basically, given any 
collision free hash function, you can construct derived functions which are still 
collision free but which have many properties which are highly undesirable from 
the cryptographer's point of view.

For example, you might be able to find triples x, y and z such that h(x)h(y) = 
h(z), or pairs w and w' such that h(w) xor h(w') has very low Hamming weight.

The former property is lethal to systems using RSA, and the latter can break
some combinatorial schemes. Hash functions which resist them can be called 
`multiplication free' and `correlation free' respectively.

In fact, it is not too hard to construct signature schemes which require very
complex `freedom' properties of their associated hash functions. And, of course, 
all this applies to universal hash functions as well as collision free ones.

This is why one way functions are much stronger than universal ones. A function 
which is one way has every conceivable freedom built in; for example, given any 
x and y you can form h(x)h(y), so you cannot get a z such that h(z) = h(x)h(y); 
so h is multiplication free.

The real payoff from the collision freedom saga may be in sensitising crypto
algorithm designers to how the various types of freedom properties interact,
especialy in product ciphers such as IDEA.

Full details will be in the final paper, but here is the extended abstract in 
case anyone's interested.

Ross

\documentstyle[a4,11pt]{article}
\parskip 12pt plus 1pt minus 1pt
\pagestyle{empty}
\begin{document}

\begin{center}
{\Large \bf The Classification of Hash Functions}

(Extended Abstract)

\vspace{4ex}
Ross Anderson, C.Math, FIMA\\

\vspace{2ex}
University of Cambridge Computer Laboratory,\\
Pembroke Street, Cambridge CB2 3QG, UK\\
Email: {\tt rja14@cl.cam.ac.uk}
\end{center}

\begin{abstract}

A number of concepts have been proposed to help classify hash functions, and
to try to capture what it is about a hash function which makes it `good'. One
of these is collision-freedom. However, given any collision-free hash function,
we can derive others which are also collision-free, but cryptographically
useless. This explains why researchers have not managed to find many
interesting consequences of collision freedom, or of the similar concept of
`universal one-way hash functions'. It also confirms Okamoto's conjecture that
correlation freedom is a strictly stronger property.

\end{abstract}

A number of different definitions have been proposed of one-way hash functions
[DH] [B] [BL] [LABW]. One problem with which the authors of such proposals have
had to wrestle is the implicit temporal ordering; you can get the pair ($x$, 
$h(x)$) if you start from $x$ but not if you start from $h(x)$. This property 
can be tricky to formalise, and so some excitement was caused by the 
alternative idea of `collision freedom'.

A function $h$ is called {\em collision free} if it is not feasible to find two
input strings $S$ and $T$ which both hash to the same value, ie $h(S)$ =
$h(T)$. This concept was introduced in [D1], which showed that hardness
assumptions about number-theoretic problems such as discrete log and factoring
(or more generally the existence of claw-free permutations) imply that one can
construct hash functions which are indeed collision-free. This result has been
very influential, and collision freedom has seemed, to many researchers, to be
a natural way to capture the behaviour which we expect from a `good' hash
function.

However, despite the passage of several years, few results have been shown to
follow from collision freedom. It is known that the property is preserved
under chaining [D2], that a number of equivalent definitions exist [SY] [R],
and that the one-time signatures mentioned above can be constructed using them.
However, researchers wanting to prove security results for practical systems
have often had to resort to stronger definitions such as Okamoto's
`correlation-free one-way hash functions'; indeed, Okamoto conjectured [O] 
that correlation freedom is strictly stronger than collision freedom. We prove 
this conjecture as follows. 

Let $h$ be a collision-free hash function. Given any string $S$, we will write
$S_1$ for the first 32 bits of $S$, and $S_2$ for the remainder. We will also
write $\circ$ for string concatenation. Thus $S$ = $S_1$ $\circ$ $S_2$. Now 
define the function $\overline{h}$ as

\begin{equation}
        \overline{h}(S) = S_1 \circ h(S_2)
\end{equation}

In other words, $\overline{h}$ leaves the first chunk of the input string
unchanged, and hashes the rest of it using $h$. It is clear that $\overline{h}$
is collision-free if $h$ is.

However, $h$ is quite unsuitable as a general-purpose hash function for use
in cryptographic applications. It is not only `inefficient'; it also has the
property that an attacker can easily construct two messages whose hashes
differ in only one bit. Thus $\overline{h}$ is not correlation immune.

This counterexample has practical implications as well. Certain variants of
the Fiat-Shamir signature scheme can be attacked when a function such as 
$\overline{h}$ is used to generate message digests, and this will be described
in detail in the full paper.

There are two further consequences. The first is that we can define a large
number of further properties which a hash function may need in certain 
applications. The two most obvious are addition freedom (you can't find $A$, 
$B$, and $C$ such that $h(A)$ + $h(B)$ = $h(C)$) and multiplication freedom 
(ditto $h(A)h(B)$ = $h(C)$); these are needed by hash functions which are to be
used with signature schemes which have an additive or multiplicative 
homomorphism property.

The second is that these properties can also be applied to local analysis of
whether a cryptographic algorithm is diffusing information thoroughly enough.
For example, IDEA is explicitly based on mixing different operations (and
other algorithms use this concept implicitly). Meier's Eurocrypt 93 attack on
two-round IDEA [M] is an example of imperfect multiplication freedom in the
algorithm.


\footnotesize
\begin{thebibliography}{LABW}

\bibitem[B]{B}
G Brassard,
``Relativised Cryptography'', in {\em IEEE Transactions on Information
Theory}, {\bf IT-29} no 6 (November 1984) pp 877 - 894

\bibitem[BL]{BL}
RB Boppana and JC Lagarias,
``One-way functions and circuit complexity'', in {\em Information and
Computation}, {\bf 74} (1987) pp 226 - 240

\bibitem[D1]{D1}
IB Damg\aa rd,
``Collision free hash functions and public key signature schemes'', in
{\em Advances in Cryptology - EUROCRYPT 87}, Springer LNCS {\bf 304}, pp 203 -
216

\bibitem[D2]{D2}
IB Damg\aa rd,
``A Design principle for Hash Functions'', in {\em Advances in Cryptology -
CRYPTO 89}, Springer LNCS {\bf 435}, pp 416 - 427

\bibitem[DH]{DH}
W Diffie and ME Hellman,
``New Directions in Cryptography'', in {\em IEEE Transactions on Information
Theory}, {\bf IT-22} no 6 (November 1976) p 650

\bibitem [LABW]{LABW}
B Lampson, M Abadi, M Burrows, E Wobber,
``Authentication in Distributed Systems: Theory and Practice,'' in {\em ACM
Transactions on Computer Systems}, {\bf 10} no 4 (Nov 1992) pp 265 - 310

\bibitem[M]{M}
W Meier,
``On the Security of the IDEA Block Cipher'', in {\em Preproceedings of
Eurocrypt 93, pp W102 - W111}

\bibitem[O]{O}
T Okamoto,
``Provably Secure and Practical Identification Schemes and Corresponding
Signature Schemes'', in {\em Abstracts of Crypto 92}, pp 1-15 to 1-25

\bibitem[R]{R}
A Russell,
``Necessary and Sufficient Conditions for Collision-free Hashing'', in
{\em Abstracts of Crypto 92}, pp 10-22 to 10-27

\bibitem[SY]{SY}
A de Santis and M Yung,
`On the design of provably-secure cryptographic hash functions', in
{\em Advances in Cryptology - EUROCRYPT 90}, Springer LNCS {\bf 473}, pp 412 -
431

\end{thebibliography}

\end{document}
