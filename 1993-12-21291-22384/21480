Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!pipex!pavo.csi.cam.ac.uk!rrw1000
From: rrw1000@cl.cam.ac.uk (R.R. Watts)
Subject: Re: Help with understanding hash functions
Message-ID: <1993Nov26.234806.6144@infodev.cam.ac.uk>
Sender: news@infodev.cam.ac.uk (USENET news)
Nntp-Posting-Host: milton.cl.cam.ac.uk
Organization: U of Cambridge Computer Lab, UK
References: <931126.65463.BOBES_PIERRE@delphi.com>
Date: Fri, 26 Nov 1993 23:48:06 GMT
Lines: 43

Well, I'm no cryptographer :-(, but I've heard the term 'hash function'
used in two distinct ways - the linking theme being a handy function to 
convert a piece of data into some kind of desired cookie :

(i) As in 'hash table' - used to reduce the domain of the data to be stored,
by (basically) throwing away some of the information so we can use f(data)
as an index into a hash table whose size is << 1 slot/unique value of data -
as such, hash functions are many-to-one over at least part of their
domain (i.e. there are some x,y st. f(x) = f(y) under any sensible 
interpretation of '=') - they wouldn't be useful otherwise - so they are
at least partially non-invertable - though you may well be able to 
partition the function into a set of invertable subfunctions and a set
of noninvertable subfunctions, or the input data into a set of values for
which you can take an inverse and set that you can't (eg. for f(x) = 'take 
the 2 LSBs', if your data is {0-255}, you can partition it into 
A={0-3}, B={4-255} - f() is invertable over the subdomain A, but 
noninvertable over the subdomain B) - I've never seen anyone use this fact,
probably because a good hash function should never exhibit this behaviour
(causes bunching in the regions where its range is most densely populated),
but it's there nevertheless... 

(ii) As in 'hash function' - a convenient encrypting function which can't
be reversed - actually this should be called a 'trapdoor function' - they're
used in password systems and the like, and though they have to be one-to-one
(at least with overwhelming probability), you don't actually need to be 
able to have an inverse - in fact, the harder it is to find the inverse, the
better your security is. I don't know of any 'genuine' trapdoor functions -
maybe someone could enlighten me ? the best I've seen is that we simply
have an encryption function whose inverse is exponentially hard to 
calculate from the data available (eg. RSA). Most brands of UNIX I've used
use DES (or so the crypt manpage says !) for this.


Hope this helps - please feel free to correct me where I'm wrong!


Richard.
-- 
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
                        [Ruler ^^^. 
                             -- blame xrn ]
