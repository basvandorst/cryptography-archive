Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!psinntp!barilvm!vms.huji.ac.il!radai
From: radai@vms.huji.ac.il
Newsgroups: sci.crypt
Subject: Re: Help with understanding hash functions
Message-ID: <1993Dec6.124738.2357@vms.huji.ac.il>
Date: 6 Dec 93 12:47:37 GMT
References: <931126.65463.BOBES_PIERRE@delphi.com> <1993Nov27.082140.10241@ens.fr> <4CMJBVUJ@gwdu03.gwdg.de> <1993Nov30.092028.2016
Distribution: world
Organization: The Hebrew University of Jerusalem
Lines: 95

  I have two comments concerning the hash-function thread on this newsgroup
which began with Serge Vaudenay's statements last week:

> Now, there are several properties for security. For instance :
> - Universal hash functions : roughly, for any word w, it is too difficult to
> find an other word w' such that h(w) = h(w');
> - One Way hash functions : for any hash value c, it is too difficult to find a
> word w such that h(w) = c;
> - Collision Free hash functions : it is too difficult to find two different
> words w and w' such that h(w) = h(w').
>
> The links between those properties are not well known. For surjective hash
> functions, we may have CF ==> U ==> OW. Otherwise, we still have CF ==> U. So,
> CF and OW are the most powerfull property for cryptographic hash functions.

  1. Ross Anderson replies:
>For example, you might be able to find triples x, y and z such that h(x)h(y) =
>h(z), or pairs w and w' such that h(w) xor h(w') has very low Hamming weight.
>
>The former property is lethal to systems using RSA, and the latter can break
>some combinatorial schemes. Hash functions which resist them can be called
>`multiplication free' and `correlation free' respectively.
>
>In fact, it is not too hard to construct signature schemes which require very
>complex `freedom' properties of their associated hash functions. And, of course,
>all this applies to universal hash functions as well as collision free ones.
>
>This is why one way functions are much stronger than universal ones. A function
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>which is one way has every conceivable freedom built in; for example, given any
>x and y you can form h(x)h(y), so you cannot get a z such that h(z) = h(x)h(y);
>so h is multiplication free.

Sorry, but I can't agree that the fact that all OW functions are multiplica-
tion-free, or anything else mentioned above, implies that "one-way functions
are much stronger than universal ones."  The most that has been shown here is
that a universal hash function is not necessarily one-way.  However, it can
equally well be shown that a one-way hash function is not necessarily
universal:
  Given a function E on blocks of length l to blocks of length l (think of E
as a block encryption algorithm), define a corresponding hash function H on
inputs of length nl by H(x) = E(x_1) xor ... xor E(x_n) (where  x = x_1 ||
x_2 || ... || x_n, where '||' indicates concatenation).  Now define x' = x_2
|| x_1 || ... || x_n (or any other transposition of blocks of x).  Since xor
is commutative (and associative), H(x') = H(x) even though x' ~= x, so H is
clearly not universal.  Otoh, there is no reason to suppose that such an H
can never be one-way.  Thus there exist functions which are one-way but not
universal (and hence, a fortiori, not collision-free).
  Now it might be objected that the above proof depends on the assumption
that there is at least one such function H which is one-way, and this has not
been proven.  But even the weakened form of Ross's conclusion, that a univer-
sal function is not necessarily one-way, requires an existential assumption,
namely that there is a universal function which is not multiplication-free,
and from what I can see, this does not seem to have been been proven either.
In both cases, the assumptions seem very plausible, although I know of no
absolute proof.
  So it seems to me that neither one-way-ness nor universality of a hash
function is stronger than the other, unless perhaps if we restrict the
discussion to a particular application, and then, as seen above, it depends
on which application is being assumed.


  2. Concerning terminology:  Imho, Serge has created some confusion in
calling the second definition quoted at the top a "one-way" hash function.
What is actually being defined is (computational) *non-invertibility*.
One-way-ness is this *plus* the requirement that h be easy to compute.  I
presume that Serge and others have simply been taking it for granted that h
is easy to compute, in which case it doesn't make any difference.  However,
for sake of clarity, I have tried to summarize the various definitions in the
following table:
         Definition                     By itself      Plus h easy to compute
         ----------                     ---------      ----------------------
(y in Rng) (CIF x) h(x) = y           Non-invertible          One-way
(CIF x1,x2, x1~=x2) h(x1) = h(x2)     Collision-free       Strong one-way
(x in Dom) (CIF x'~=x) h(x') = h(x)         ??          Universal(?) one-way

I have used the following abbreviations in the first column:
"(...)" stands for "For an arbitrarily given ...",
"Dom" and "Rng" stand for "domain of h" and "range of h", resp.,
"(CIF x)" stands for "It is Computationally Infeasible to Find an x such that",
and "~" means "not".

  The reason I put a question mark after "Universal" is that to the best of
my knowledge, this term was first used by Carter and Wegener (sp?), where it
referred to *families* of hash functions, and in such a context, the term
"universal" makes some sense to me.  However, I don't understand the motiva-
tion for this term when we're talking of individual hash functions.  Can
someone justify use of this term in the current context?
  Also, I would very much like to hear suggestions for an appropriate term to
use in place of the '??' above.

                                          Y. Radai
                                          Hebrew Univ. of Jerusalem, Israel
                                          RADAI@VMS.HUJI.AC.IL

