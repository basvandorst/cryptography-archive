.\"                                                                   
.\" Filename:      pub_encrypt_buffer.3
.\" Description:   
.\" Author:        Tage Stabell-Kulo <tage@acm.org>
.\" Modified at:   Mon Dec  8 01:09:21 1997
.\" Modified by:   Tage Stabell-Kuloe <tage@acm.org>
.\" 	
.\" 	Copyright (c) Univerity of Tromsø, Norway
.\" 	See the file COPYING for details
.\"                                                                   

.Dd May 18, 1997
.Dt PUB_ENCRYPT_BUFFER 3
.Os PGPlib
.Sh NAME
.Nm pub_encrypt_buffer
.Nd encrypt a buffer with a public key
.Sh SYNOPSIS
.Fd #include <pgplib.h>
.Ft int
.Fn pub_encrypt_buffer "PGPpubkey_t *key" "u_char *inbuf" "int inbuflen" "int compress" "u_char digest[16]" "int *outbuflen" "u_char **outbuf"
.Ft int
.Fn pub_encrypt_session_key "PGPpubkey_t *key" "u_char *skey" "int *outbuflen" "u_char **outbuf"
.Sh DESCRIPTION
Informally, the buffer pointed to by
.Fa inbuf
with the length
.Fa inbuflen
is encrypted with the public key
.Fn key .
The location of the result is stored in
.Fa outbuf .
The size of this memory is stored in
.Fa outbuflen .
.Pp
More precisely, the data in 
.Fa inbuf
is encrypted with IDEA under the key provided by the caller in
.Fa digest .
If
.Fa compress
is non-zero the data is compressed before encryption.  This is usually
a good idea.
Then, the
.Fa digest
is encrypted with the publib key pointed to by
.Fa key , 
by means of RSA.
The resulting two packets, the DEK encrypted with RSA and the
conventionally encrypted data are merged and written into a buffer.
The resulting buffer will thus hold two packets.
.Pp
The function 
.Fn pub_encrypt_session_key
is a higer level interface.
It will encrypt, with the public key
.Fa key
the session key stored in
.Fa skey
and return the DEK, pointed to by
.Fa outbuf .
The length of
.Fa outbuf
is pointed to by
.Fa outbuflen .
.Sh RETURN VALUES
If encryption of both packets were sucessful, 0 is returned.
If an error occured, -1 is returned.
.Pp
.Sh SEE ALSO
.Xr compress_buffer PGPlib
.Xr PGPlib 3
.Pp
.Sh BUGS
The secrecy of the resulting packet hinges on the randomness of
.Fa digest .
The outmost care must be taken to provide a good session key.
This is not at all trivial.
.Pp
.Sh STANDARDS
All three packets (the RSA encrypted DEK, the IDEA encrypted data, and
the optional compressed data) conform to RFC1991.  The RSA encrypted
packet contains data according to RFC1423.
.Pp
.Sh HISTORY
Written by Tage Stabell-Kulø.  First appeared in PGPlib 0.1.
