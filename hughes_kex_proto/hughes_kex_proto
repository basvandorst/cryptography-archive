Received: from toad.com by relay4.UU.NET with SMTP 
	id QQyswf12420; Mon, 5 Jun 1995 18:21:37 -0400
Received: by toad.com id AA16574; Mon, 5 Jun 95 15:14:36 PDT
Received: from nova.unix.portal.com by toad.com id AA16568; Mon, 5 Jun 95 15:14:30 PDT
Received: from jobe.shell.portal.com (jobe.shell.portal.com [156.151.3.4]) by nova.unix.portal.com (8.6.11/8.6.5) with ESMTP id PAA14258 for <cypherpunks@toad.com>; Mon, 5 Jun 1995 15:13:44 -0700
Received: (hfinney@localhost) by jobe.shell.portal.com (8.6.11/8.6.5) id PAA14040 for cypherpunks@toad.com; Mon, 5 Jun 1995 15:13:42 -0700
Date: Mon, 5 Jun 1995 15:13:42 -0700
From: Hal <hfinney@shell.portal.com>
Message-Id: <199506052213.PAA14040@jobe.shell.portal.com>
To: cypherpunks@toad.com
Subject: Hughes key exchange patented?
Sender: owner-cypherpunks@toad.com
Precedence: bulk
Status: O

Last year in the evening session of the crypto conference, Eric Hughes
described a key exchange protocol similar to Diffie-Hellman but somewhat
different.  I don't have the DH patent but I wonder if someone who does
might render an opinion on whether Eric's algorithm would infringe.  (Recall
that to infringe a patent it is necessary to satisfy all the elements of
at least one claim.)

Like DH, Eric's algorithm works with a prime modulus p and a generator
g.  Also, the two communicants, Alice and Bob, each choose a random
secret number, x and y.  Alice creates K=g^x ("^" is exponentiation) but
she doesn't send it.  This is different from DH.  Bob creates Y=g^y and
sends that to Alice.  She raises it to the x power to get Y^x or g^(xy)
and sends it back to Bob.  Bob now calculate K = g^x = (g^(xy))^yinv
where yinv is 1/y mod (p-1).  In effect he takes the yth root of Y^x.
Now Alice and Bob both know K and can use it to encrypt using
conventional shared-key methods (DES, IDEA, etc.).

The question is whether this violates the Diffie-Hellman patent or any
other patents related to public key, etc.  As written it is not a
public key system but perhaps we could interpret Y as Bob's public key
and say that Alice encrypts K using that key by calculating Y^x and
sending it to Bob.  But notice that Alice cannot encrypt an arbitrary
message by this means; she can only send K=g^x where she knows x.  In
effect she can send only random messages.  So I think this would escape
the public key patents for this reason.

Anybody have the DH patent?

Hal

