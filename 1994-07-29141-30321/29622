Path: msuinfo!agate!howland.reston.ans.net!EU.net!Germany.EU.net!netmbx.de!zib-berlin.de!news.dfn.de!news.dkrz.de!news.rrz.uni-hamburg.de!news
From: 3moeller@rzdspc5.informatik.uni-hamburg.de (Bodo Moeller)
Newsgroups: sci.crypt
Subject: Re: Breaking trivial ciphers
Date: 12 Jul 94 18:13:53 GMT
Organization: University of Hamburg -- Germany
Lines: 33
Message-ID: <300imb$4iu@rzsun02.rrz.uni-hamburg.de>
References: <2vu3e9INN42@fstgds15.tu-graz.ac.at>
NNTP-Posting-Host: rzdspc60.informatik.uni-hamburg.de

plipp@iaik (Peter Lipp) writes:
      ^^^^ (No domain? Please check your news system.)

>I am currently playing around breaking trivial ciphers that are often offered
>as part of libraries for programmers. Currently I am at work on a system and I
>need some hints otherwise I might reinvent the wheel....

>I have a lib that provides me with a crypt(cleartext,keystring) and 
>according to my investigations does the following: it computes a "randomized" 
>series of bytes only depending on the key and the length of the key (i.e.
>the key "AA" and the key "AAAA" result in different ciphertexts. This 
>"randomized" series is then XORed with the plaintext. 

>Do I now need to find out how this pseudorandom stuff is generated or does
>anybody know of other trivial methods to crack this (like the coincidence-
>factors for more trivial encryption which is very successful...)

The Output Feedback Mode for block ciphers such as DES does basically
the same: The {plain,cipher}text is XORed with a sequence of bits that
just depends on the key and an initialisation vector, yielding the
{cipher,plain}text.  So this library "crypt" routine could be a DES
OFB implementation (in theory; most probably, it is not).

However, if the same key (and initialisation vector) is used for two
plaintexts P1, P2, it is possible to XOR the two ciphertexts C1 and
C2, and thus to obtain (if R is the pseudorandom sequence)

C1 XOR C2 = (P1 XOR R) XOR (P2 XOR R)
          = (P1 XOR P2) XOR (R XOR R)
          = P1 XOR P2.

So breaking the cipher is trivial with a chosen plaintext attack when
a key/initialisation vector pair is used twice.
