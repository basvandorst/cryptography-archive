Path: msuinfo!agate!howland.reston.ans.net!news.cac.psu.edu!usenet
From: D6B@ECL.PSU.EDU (Dan E Babcock)
Newsgroups: sci.crypt
Subject: Solution to public-key exchange?
Date: 5 Jul 1994 06:24:15 GMT
Organization: Penn State Engineering Computer Lab
Lines: 54
Distribution: world
Message-ID: <2vauaf$m9e@hearst.cac.psu.edu>
NNTP-Posting-Host: ecld.psu.edu
X-News-Reader: VMS NEWS 1.24

First let me say that I am a crypto newbie, and I apologize in advance if this
is stupid, irrelevent, or (worst of all) obvious. All comments are welcome.

Let's suppose you want to use PGP (this applies equally to all public-key
schemes) to securely send email messages. You're concerned about active
spoofing of keys & messages (possibly by a computer program written by a
3-letter agency), but have no way to verify the authenticity of keys (not
by voice, not by a 3rd party signature, etc).

Here's the idea. The encrypted email is broken into two parts such that one
or both parts is useless by itself. The two parts are sent seperately,
delayed by a fixed time interval. In detail:

1. Two people exchange public keys via email.

2. The initiator sends a plaintext (or encrypted) message,
   "Please send me file X".

3. The target reads his email (whenever he gets around to it) and fires off
   part 1 of file X (encrypted with the initiator's public key).

4. After a fixed time intervl, the target sends part 2 of file X.

Here's the key (no pun intended): If the time interval between the sending
of the request ("send me the file") and receiving part 1 of the file is
less than the fixed time interval (between parts 1 and 2), then the
initiator can conclude that he received part 1 _before_ the target sent
part 2. This is easy to check if the email system records the time of
message reception. (It is futile to include a timestamp within the
messages, since the spoofer can alter them).

What this message splitting has accomplished (I think ;-)) is to foil most
spoofing attempts (especially automated ones). If the time condition given
above is satisfied, and we can successfully decrypt file X with our secret
key, and file X is "correct", then we can conclude that one of the
following is true:

- The target has the correct public key. There is no spoofer.

- The spoofer has access to file X and went through the trouble of sending
  it in order to keep up the spoof.

The second possibility may be extremely unlikely if file X is obscure.
After a few successful transmissions it becomes reasonable to assume that
the public key(s) are correct.

Is this a practical solution to the "key confidence" problem with PGP/email
to remote strangers? One problem (besides the annoying delay) is that a
spoofer can read one or more sensitive messages before the parties detect
the interloper. (This is typically better than _never_ detecting the abuse,
however).

Dan

