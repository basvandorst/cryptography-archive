Path: msuinfo!agate!ihnp4.ucsd.edu!swrinde!pipex!sunic!trane.uninett.no!eunet.no!nuug!EU.net!uunet!charon.citicorp.com!charon.citicorp.com!not-for-mail
From: philip@charon.citicorp.com (Philip Gladstone)
Newsgroups: sci.crypt
Subject: Re: PC Mag. Utility WinCrypt
Date: 8 Jul 1994 10:33:54 -0400
Organization: Citicorp
Lines: 66
Message-ID: <2vjo4i$1st@charon.citicorp.com>
References: <Zq-TJRk.eca2828@delphi.com>
Reply-To: Philip.Gladstone@mail.citicorp.com
NNTP-Posting-Host: charon.citicorp.com
X-Newsreader: TIN [version 1.2 PL2]

Ed Anderson (eca2828@delphi.com) wrote:
: 	WinCrypt is a windows utility that encrypts files.  It uses
: a 1 to 128 character password.  It takes this password and converts it
: to a 512 character block which it then exclusive ORs to the file.
: This makes sense to me even with my limited encryption knowledge but
: at the end it says something that puzzles me.
:  
: 	The author states that he got some kind of permission from
: some Washington group that it would be acceptable to be exported.
: My question is why this cypher and who approves such exports?
:  
: 	Is there some flaw in this encryption scheme?

Yes. The author stated that it would be very difficult to recover
the original key from the ciphertext. This may be true, but it
is not necessary to crack the cipher.

Observe that the same 512 byte block is xored with each 512 byte
block in the file. This means that the XOR of byte 1 and byte 513
of the ciphertext equals the XOR of byte 1 and byte 513 of the
plaintext.

For the sake of argument, assume that the plaintext was ASCII text.
All the bytes are in the range 00-7f. Thus the XOR of any pair
will be in the range 00-7f. So, we can test all the XORs of C[i] and
C[i+512] to see if they lie in this range. If they do, then this is
a pretty good indication that the file is indeed ascii. [Side note, 
the filename of the encrypted file is the same as the filename of
the unencrypted file. This means that the extension can be used 
to try and guess some plaintext. In the case of most application
files (.exe, .doc, .xls etc) there is some known header text, and
in some cases large runs of nulls.] [Side side note: the strategy
of overwriting the plaintext file in place with the ciphertext
is a revolting programming practice.]

[Back to the ascii file] Observe that the majority of information in
an ascii file is in one of two blocks:

Low: 0d, 0a, 20
High: 41-5a, 61-7a

Observe that a Low byte XOR with Low gives an answer in the range 00-2f.
               Low               High                             40-7f
	       High		 High			          00-3f

The interesting case is the Low with High. Given our supposition that
the Low bytes have very few likely values (and two of them occurr in
pairs), we can make an educated guess as to the value of the the
equivalnet high byte. This gives us a value for one position of the
512 XOR key.

With enough ciphertext, we can probably find a Low XOR High for each
position in the 512 byte XOR key.

Good luck cracking......

Philip

p.s. I'm not surprised that they got export clearance for this!!



-- 
Philip Gladstone - Consultant
Citicorp Global Information Network
I don't speak for Citicorp. I presume that somebody else does!
