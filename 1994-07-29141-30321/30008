Path: msuinfo!agate!howland.reston.ans.net!cs.utexas.edu!convex!news.duke.edu!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: Encryption algorithms interacting
Date: Sat, 23 Jul 94 15:12:11 CDT
Organization: University of Missouri, Columbia
Lines: 58
Message-ID: <16FFCD5CDS86.C445585@mizzou1.missouri.edu>
References: <30grch$580@amhux3.amherst.edu> <30h1m8$bt0@senator-bedfellow.MIT.EDU> <30iqba$apb@zeus.london.micrognosis.com> <30iu2k$gqi@senator-bedfellow.MIT.EDU> <774812076Stu.stu@nemesis.wimsey.com>
NNTP-Posting-Host: mizzou1.missouri.edu

In article <774812076Stu.stu@nemesis.wimsey.com>
Stu@nemesis.wimsey.com (Stuart Smith) writes:
 
>But how do you know that the algorithms your are using one after
>another are not interacting to create a hole?  Unlikely as hell,
>but if your sequence of algorithms isn't subjected to public
>scrutiny, if such a hole exists the only people to find it will
>be your opponents.
 
   I don't think that this is possible, so long as the keys used by
the encryption algorithms are independent of each other.  If I'm
remembering correctly, Bruce Schneier commented to me at one point
that Maurer had proven some variation of this in a paper.  (I don't
recall the title of the paper, alas, and I could be a bit confused.)
 
   Let's assume two nontrivial block ciphers, ie, the key actually has
some effect on the encryption, and they seldom or never map X to X.
 
   Assume we choose two independent keys, K0 and K1.  Now, it looks to
me like it *can't* generally be easier for E0(E1(X,K1),K0) to be cracked
than for E1(X,K1) to be cracked, because an attacker now has less
information about E1()'s output after the second encryption than before
the first.  Can anyone show me an example of a system where this doesn't
hold?
 
   The case seems clearer for stream ciphers.  XOR together two pseudo
random streams keyed independently.  How would it be possible for two
different PRNGs, or even the same PRNG, to generate approximately the
same keystream in general?  If that's generally the case, then it must
also be the case that an attacker could, in general, randomly select
a few keys and find one that generated approximately the same keystream
as either one of the ciphers used, and thus break the cipher.  Further,
it seems like the ability to do this would imply that you could do
the attack on cipher1 with a randomly-keyed cipher1, as well.
 
>Obscurity is usually what we try to avoid.  If the NSA can crack
>any given DES data stream, then "a little obscurity" is most
>certainly *not* going to stand it in its way.  "serious hacking"
>simply does not compare in difficulty to anything requiring 2^56
>operations.
 
   That's true, but of course, it depends on how serious the hacking
is, and how much time NSA or another attacker is willing to spend
on breaking the variant cipher.  Presumably, even an organization
with lots of skilled cryptanalysts isn't going to be able to carefully
analyze each bitstream that comes to their attention, for the privelege
of (usually) listening in to the latest gossip about so-and-so, or
saccarine love-letters between two net.love.junkies.
 
   Pre-XORing a message with a weak PRNG isn't going to add too much
resistance once an intelligent attacker with a keysearch machine
realizes what's being done, of course.  (I posted on a way to defeat
this kind of simple variant on DES with a keysearch machine earlier.)
 
>        E7 E3 90 7E 16 2E F3 45   *   28 24 2E C6 03 02 37 5C
>   Stuart Smith                           <stu@nemesis.wimsey.com>
 
   --John Kelsey, c445585@mizzou1.missouri.edu
