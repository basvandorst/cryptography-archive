Path: msuinfo!agate!bob.eecs.berkeley.edu!spp
From: spp@bob.eecs.berkeley.edu (Steve Pope)
Newsgroups: sci.crypt
Subject: Re: Quadruple DES encryption, single DES speed
Date: 19 Jul 1994 18:49:35 GMT
Organization: U.C. Berkeley -- ERL
Lines: 56
Distribution: world
Message-ID: <30h77v$i9j@agate.berkeley.edu>
References: <30h28d$bt0@senator-bedfellow.MIT.EDU>
NNTP-Posting-Host: bob.eecs.berkeley.edu

solman@athena.mit.edu (Jason W Solinsky) writes:

> I'm debating the merits of the following hybrid DES/hashed based
> system on cipherpunks right now. It looks like it provides four
> times the protection of DES without decreasing the speed much.

> Step A: Choose four DES keys, K1, K2, K3 and K4

Okay so far.

> Step B: Run the code through your favorite non-secure diffusion
> based cipher.  Slightly hacked linear feedback shift registers
> work just fine as do many other algorithms.

I don't understand exactly what Step B is.  Are you suggesting 
pre-encrypting the plaintext with a weak cipher?  If so, why?

> Step C: Hash the concatenation of K1, K2, K3 and K4. Use a
> secure one-way hash.

Okay.

> Step D: Multiplex the plaintext into four messages using each
> pair of two bits in the hash. Keep repeating the hash when you
> run out of bits.

I think I understand what you mean here.   Perhaps the word you wanted
was "demultiplex" or "partition" rather than "multiplex".

> Step E: Do DES encryption on each of the four messages. Concatenate or
> Interleave and send. DO NOT USE ECB.

Okay:  Ignoring step B, how does this differ in strength from
single DES with a short cryptoperiod (e.g. short interval between
key changes)?

Generating the rekey's from the hashed concatenation of the keys
is interesting, and has the advantage that the key and rekey
informtaion is made to be compact.  It also has the advantage
that the stream of bit-pairs used to rekey is cryptographically
strong.

But why cycle randomly among just four keys?  Usually one uses
an indefinite random stream of keys.   Also, for a long
message you run out of rekey stream and repeat it, which
is suboptimal.

Overall, I like the idea, in that (1) I consider DES with frequent
key updates to be a good choice for just about any application
and (2) the rekey algorithm is compactly specified; even if
the rekeying is not completely optimal, other approaches
might have their own weaknesses or drawbacks.

Steve


