Path: msuinfo!agate!darkstar.UCSC.EDU!news.hal.COM!olivea!spool.mu.edu!howland.reston.ans.net!europa.eng.gtefsd.com!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson; CMSC (G))
Newsgroups: sci.crypt
Subject: Re: Hiding Ciphertext in Ciphertext
Date: 13 Jul 1994 22:18:18 GMT
Organization: University of Maryland, Baltimore County
Lines: 68
Message-ID: <301p7a$lgh@news.umbc.edu>
References: <2voj2u$an0@girtab.usc.edu>
NNTP-Posting-Host: umbc7.umbc.edu
X-Newsreader: TIN [version 1.2 PL2]


Martin Piazzola (piazzola@girtab.usc.edu) wrote:
[...]
: there seems to be one major flaw: The "free" space.  If I'm
: a certain view, and I have no knowledge of any other views except my
: children, what happens when I need to write a new file?

The user can read from, and write to, any descendent of the
open view.  In normal operation, the user would always open
the disk with the master pass-phrase.  I suppose a good
interface to child views would be to have each child's root
directory appear as a subdirectory within the parent's root
directory.

: I allocate
: some "free" space, and write over it.  Unfortunately, since I do not
: know about any of the other views, the "free" space I write over could
: be another duress view's data, or system information, or even <gasp>
: the master data that I have worked so hard to protect.  

Right.  It is _only_ safe to write while the master view is
open.  I think it's the case with most kinds of duress codes
that one only uses them under duress.  I would certainly
include the option to open a view in read-only mode, so users
can test out the duress views safely.

: Being only able to write files when the master view is open would
: solve one problem, but would give a quick test to see if this is the
: real master view or a duress view: Simply try to write a file. 

Right again; the system itself must not be able to tell that a
view is not the master (unless an ancestor is open).  It's up
to the user not to use the duress code for normal operation.

: Another problem, slightly unrelated, is the file date on the files in
: the duress views.  Unless there was a master "date" daemon that
: constantly updated certain file dates, the dates on the unused
: "duress" files are going to be rather suspicious. 

True.  It wouldn't be hard to write your own batch file that
updates the timestamp on certain files.  You could hide this
batch file in the parent view of the duress view it updates.
Perhaps the system should have an "autoexec" feature which
automatically runs a user's program when a view is opened (and
another when closed?).

So far I've been working on keeping the system from revealing
whether a view is the true plaintext to be protected or a
faked data set.  I have not really considered the problem of
how the user chooses and maintains a set of plausible
plaintexts (beyond the somewhat comic suggestions of bad
poetry, secret recipes etc.).  I don't think this second
problem can be solved in a general systematic way.  But then I
guess the plausibility of texts can't be determined in a
systematic way either.

: Don't mean to "flame" your system, there are a lot of good ideas
: there.. But I don't see how it would work the way you describe it. 


I'm glad to get the comments and it's not a system yet.  So
far I'm only trying to show that it can be done, with enough
explanation so that all the remaining problems are smops
(simple matters of programming).

--Bryan


