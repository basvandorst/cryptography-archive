Path: msuinfo!agate!howland.reston.ans.net!vixen.cso.uiuc.edu!newsrelay.iastate.edu!news.iastate.edu!eng3.iastate.edu!sehari
From: sehari@iastate.edu (Babak Sehari)
Newsgroups: sci.crypt
Subject: bit switching, rearranging, and Random bit stuffing
Date: 1 Jul 94 16:56:29 GMT
Organization: Iowa State University of Science and Technology, Ames, Iowa.
Lines: 42
Message-ID: <sehari.773081789@eng3.iastate.edu>
NNTP-Posting-Host: eng3.iastate.edu
Originator: sehari@eng3.iastate.edu

----
One of the ideas  that I have about cryption is to use a bit shifting by a
80 char key that is say we have key that the first byte of it is ascii car
32 (space) say the first bye to be encrypted is ascii char 50 now
we read two char of the text to be encrypted say they are
01101101 and 01110111 now lets say our first key char is say 00001000
now we shift the bits between these two text chars that their corespounding
bit on the key byte has a one in it so since in this case only the fourth
bit of the key has a 1 in it we just swicth the 4th bit of the text char
that is:
01101101     01110111
    ^            ^
So we have:

01100101     01111111

now we read the second  byte of key and  a couple text bytes and do the same
thing. we continue this way to the last char of the key and then start 
over from begining of key and repeat this again, to the end of text.

After this stage is done we close the file and reopen it and rotate the 1st 
256 bites by the first key char.  That is:
if the first byte of key is say ascii 32, we send bit number 0 to 32, bit
number 1 to 33 ... bit number 256 to 31.  Then we read the second byte of the
key and rotate the second 256 the bytes acording to this second byte, and
so on. After we finish with the key, we start it again from the begining.

Now it is time for bit stuffing.  Here we stuff a random number on the postion
dictated by the key.  That is if our first char of the key is ascii char 32
and a random number is 10011011,  we stuff a 1 after bit 32, anbd is the
second char of the key is ascii char 44 we stuff a 0, 44 bits after this.
Continue this way to the end of file.  If we reach to the end of the file
and have say 6 more bits to stuff, we just append it to the end of file.
This way we have even chars.

What do you think about this method, if the key is up to 80 chars long?

                 With highest regards,
                      Babak   Sehari.


-- 
