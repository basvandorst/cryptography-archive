Newsgroups: sci.crypt
Path: msuinfo!agate!ames!elroy.jpl.nasa.gov!decwrl!netcomsv!netcom.com!ppearson
From: ppearson@netcom.com (PKJS Pearson family)
Subject: Re: Q: zero knowledge proofs?
Message-ID: <ppearsonCtLyn1.76B@netcom.com>
Keywords: zero knowledge
Sender: ppearson@llnl.gov
Organization: NETCOM On-line Communication Services (408 261-4700 guest)
References: <JYL.94Jul23155902@burgess.eng.sun.com>
Date: Wed, 27 Jul 1994 16:47:24 GMT
Lines: 84

In article <JYL.94Jul23155902@burgess.eng.sun.com>,
Jacob Levy <jyl@toss.eng.sun.com> wrote:
>
>This might be slightly off the subject, but I need to find out what zero
>knowledge proofs are and how they can be applied to authentication without
>a cascade of trust. What I'm after is not just establishing a secure
>channel with a second party but at the same time establishing the identity
>of the second party without having to trust anyone else. Is this possible     
>at all?                                                                       
                                                                               
The clearest illustration I know of a zero-knowledge proof of identity is
based on the graph isomorphism problem...

A graph is a collection of "vertices", various of which are connected
pairwise by "edges". Two graphs are "isomorphic" if one can be formed
by rearranging the vertices of the other without breaking or forming
any edges. More precisely, graphs A and B are isomorphic if (1) they
have the same number of vertices; (2) they have the same number of
edges; (3) there exists some one-to-one function f(Va) that maps the
vertices of A onto the vertices of B in such a way that for all pairs
of graph-A vertices Va1 and Va2, there is an edge connecting Va1 and
Va2 if and only if there is an edge (in graph B) connecting f(Va1) and
f(Va2). Given two large (hundreds of vertices) isomorphic graphs,
there is no known fast way to find a function fab() satisfying this
third condition. (AFAIK, this problem still hasn't been shown to be
NP-complete.) However, given A and B and fab(), it is easy to determine
whether fab() represents an isomorphism between A and B.

To be able to prove your identity with a zero-knowledge proof, generate
a big graph A. (This graph would probably be represented in a computer
by a matrix of 0s and 1s, with each vertex corresponding to a row and
a column, and each edge represented by a 1 at the appropriate intersection.)
Generate a random permutation, and apply it to the vertices of A to get
an isomorphic graph B. Knowing the random permutation, you know fab().

Next, publish the graphs A and B, and publicize the fact that Jacob
Levy is the person who knows the isomorphism between these particular
two graphs.

When someone challenges you to prove that you're Jacob Levy, you can
do it by proving that you know the isomorphism between graphs A and B,
without revealing the isomorphism itself, as follows. Apply a new
random permutation to B to produce a graph C, isomorphic to B. Tell
the challenger that you know both the A-C isomorphism (say, fac(),
which you can compute as fac() = fbc(fab())) and the B-C isomorphism,
fbc(), and that you will tell him whichever of the two he requests,
but not both. The challenger flips a coin to decide which isomorphism
to demand, and you show it to him. He can verify quickly that it is a
valid isomorphism.

Now, if you do know both fac() and fbc(), you also know the secret
isomorphism fab(), because you can find the inverse of fbc(), which
we'll call fcb(), and compute fab() = fcb(fac()). Therefore, if you
did NOT know the secret fab(), you could not know both fac() and fbc(),
and you would have at least a 50% chance of being unable to show the
challenger the requested isomorphism.

What good is a protocol that gives an impostor a 50% chance of passing?
Plenty! You merely repeat the protocol (using a fresh, randomly generated
graph C each time) until the desired level of confidence is achieved.

To see why the challenger gains no secret knowledge during this protocol,
note that you only reveal the isomorphism between one of your two
graphs and another graph that was (in effect) randomly generated from
it. Whatever useful information an adversary could get from this
information, he could get by himself, without your help, by generating
his own random permutations of your published graphs. If this were useful,
then the graph isomorphism problem wouldn't be hard.

The "cascade of trust" issue still comes up, though, because even when
the challenger is thoroughly convinced that you know the secret isomorphism
between graphs A and B, his confidence that you are therefore Jacob Levy
is no greater than his trust in the source of the published information
stating that Jacob Levy is the guy who knows that isomorphism. (This is
called the "binding" between your name and the particular problem.) You'll
never get away from this sort of trust issue, which, upon close examination,
branches into impertinent questions like whether the challenger really
cares what your name is, or just wants to know whether you're the author
of a particular document, or are authorized for certain privileges, et
cetera.

Hope this helps.

- Peter
