Newsgroups: sci.crypt
Path: msuinfo!netnews.upenn.edu!news.amherst.edu!news.mtholyoke.edu!news.byu.edu!gatech!swrinde!elroy.jpl.nasa.gov!ames!enews.sgi.com!wdl1!io!koontzd
From: koontzd@io.lrmsc.loral.com (David Koontz )
Subject: Re: DES Debug Help
Message-ID: <1994Jul7.205254.25557@wdl.loral.com>
Sender: news@wdl.loral.com
Organization: Loral Rolm Computer Systems
References: <CsL4CJ.1F1@news.ess.harris.com>
Date: Thu, 7 Jul 1994 20:52:54 GMT
Lines: 39

In article <CsL4CJ.1F1@news.ess.harris.com> tburton@su19a.ess.harris.com (Hans Burton) writes:

>I decided to teach myself the DES Algorithm by writing a
>program.  I've got a program that encrypts and decrypts
>but is apparently not DES.  My guess is that I am not
>handling the subkey generation properly, but it may also
>have something to do with the S matrices.  I have
>NBS Publication 500-20 which describes the verification
>process but I need intermediate values for sub-key
>generation.  Is this information available via ftp or
>other net resource?  

Having done this three or four times myself I can describe what I did.

Get the source for crypt(3) (libcrypt) from ftp.uu.net.  Write translation 
routines for your code that format your data to match its formats and insert
print loops to get the appropriate data from encrypt(3).

Note that the E permutation has to be set up to be DES compliant.  This
requires a value of 0x2a or 0x2e for each salt byte (a null salt, which I 
can't recall without checking code, I believe it is '.') and a call to 
crypt(3).  Then you can use the setkey(3) call and encrypt(3) call.  The 
crypt(3) call is the only way to get the E permutation initialized.  I
have written a code wrapper to push the vectors from Special Pub 500-20 
through the libcrypt routines, they are DES compliant and are extremely
portable.

What you are looking for is something that performs no E permutation
swap between the first 12 and third set of 12 bits.  This can also
be done by modifying the code to load the E array with the original
values.

Flying off known good working code and your own appears to be the best way
of trouble shooting.  You look back through all 16 rounds of DES to find one 
with incorrect values and determine why.  Sometimes assumptions about 
Endianness are the culprit.


ftp.uu.net:bsd-sources/usr.bin/des/ (although it might have moved).
