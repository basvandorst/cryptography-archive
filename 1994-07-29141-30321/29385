Path: msuinfo!agate!howland.reston.ans.net!math.ohio-state.edu!jussieu.fr!univ-lyon1.fr!news.imag.fr!ciril.fr!muller!julienas!EU.net!uunet!ax!elsewhere!ron
From: ron@elsewhere.UUCP (Ronaldo E Bartl)
Newsgroups: sci.crypt
Subject: Re: Hiding Ciphertext in Ciphertext
Message-ID: <DAcGuAxBBh107h@elsewhere.UUCP>
Date: Tue, 5 Jul 94 17:18:11 -0300
References: <CrqAxu.660@chinet.chinet.com>
Organization: Airtight Software
Lines: 48

In <CrqAxu.660@chinet.chinet.com> schneier@chinet.chinet.com (Bruce Schneier) writes:
>Alice and Bob have been sending encrypted messages to each other
>for the past year.  Eve has been collecting them all, but she
>cannot decrypt any of them.  Finally, the secret police tired of
>all this unreadable ciphertext and arrest the pair.  "Give us
>your encryption keys," they demand.  Alice and Bob refuse, but
>then they notice the thumbscrews.  What can they do?

>Wouldn't it be nice to be able to encypt a file such that there
>are two possible decryptions, each with a different key.  She
>could encypt a real message to Bob in one of the keys, and some
>innocuous message in the other key.  If Alice was cought, she
>could surrender the key to the innocuous message and keep the
>real key secret.

... (lots deleted)...

>Finally, Alice and Bob can use the subliminal channels in their
>digital signature protocols.  This is undetectable, works great,
>but has the drawback of only allowing 20 or so characters of
>subliminal text to be sent per signed innocuous message.

>Does anyone have comments on this?

You could create a kind of subliminal channel for ordinary encryption.
Alice and Bob choose a subset from all keys possible with their
encryption algorithm, then assign a meaning to each KEY. Lets see if
I can make myself clear with an example:

- Alice wishes to send the message "RUN AWAY" to Bob.
- She looks at her key table and chooses 4 keys (k1, k2, k3 and k4) that
  correspond to the messages "RU", "N ", "AW" and "AY".
- Now she composes some bogus message that she breaks in 4 blocks (b1, etc)
- Alice prepends each block with some known (to Bob) text, encripts each
  block with its key (i.e. b1 with k1, b2 with k2...), puts the crypted
  blocks together and sends them to Bob.
- Bob doesn't know the keys to the messages, but he knows they are from a
  limited subset (say, 2^32 keys) and has some known plaintext. All he has
  to do is to mount an exhaustive search and find out the 4 keys (which are
  the real message). Of course, he has better have a fast PC!

In this example I assumed 2^32 keys corresponding to (37 * 37 = ) 1369 
possible messages, which allows Alice to send quite a few messages without
repeating keys.

-- 
Ronaldo E. Bartl   
ron%elsewhere@ibase.br
