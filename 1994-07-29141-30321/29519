Path: msuinfo!uwm.edu!math.ohio-state.edu!sdd.hp.com!think.com!hsdndev!news.sesqui.net!rice!jbuhler
From: jbuhler@is.rice.edu (Jeremy Daniel Buhler)
Newsgroups: sci.crypt
Subject: Postscript steganography
Date: 9 Jul 1994 21:40:31 GMT
Organization: Rice University, Houston, Texas
Lines: 45
Message-ID: <2vn5gf$eas@larry.rice.edu>
NNTP-Posting-Host: brazos.is.rice.edu

In Wired 2.08, page 34, there's an interesting article about AT&T's efforts
to encode serial number information in Postscript data so as to be able
to trace copyrighted materials around the Net.  The encoding is done through
variations on the order of 0.03 inches in line width, spacing, letter width,
etc.  Information encoded this way can be recovered from the hardcopy even
after several reproductions.  The paper describing the technique is at 

ftp://www.research.att.com/dist/brassil/infocom94.ps

If AT&T can hide serial numbers in Poscript text, why can't a clever
steganographer hide arbitrary data in it?  It seems this method should
also apply to TeX.

My initial understanding of the method (prior to reading the paper) is
that the presence of ciphertext would be trivial to deduce from the
Postscript file, since the text would ordinarily line up.  However, it
is considerably more time consuming to check a large quantity of hard
copy for variations than to do so with electronic text.  Still, this
is only security through obscurity - a determined adversary can detect
the presence of ciphertext in an arbitrary document using only a
micrometer.

Luckily, there is a similar but perhaps less-detectable method that we
can use which keeps everything machine-readable and is simple to
implement (now I'm making this up as I go along, so don't blame AT&T
:-) ).  Suppose we have some Postscript or similar vector graphics
which make use of lines, splines, and/or Bezier curves.  We can encode
a message in the control points of the curves and the endpoints of the
lines by altering some of their numerical descriptors by 1, so that an
even coordinate is a 0 and an odd is a 1.  I doubt that this method
would produce a very noticable difference in the output image, and
who's to say whether the variations (which should appear random to
most observers, assuming the plaintext was compressed) are a message
or the random variations of the artist's hand?

Of course, this medium would only be good for very short ciphertexts
(e.g. "meet at corner 6th and main * bring your gun"), but it is
almost trivial to implement.  The inverse operation on non-ciphertext
PS files might be good source of random numbers, assuming no
significant bias in the creating software toward odd or even
coordinates.

-- 
\\ Jeremy Buhler * Rice University * jbuhler@owlnet.rice.edu //
//     Yow!  Did you remember to MOUNT a scratch MONKEY?     \\
