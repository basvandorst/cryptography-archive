Path: msuinfo!agate!darkstar.UCSC.EDU!news.hal.COM!olivea!spool.mu.edu!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!athena.mit.edu!solman
From: solman@athena.mit.edu (Jason W Solinsky)
Newsgroups: sci.crypt
Subject: Re: Variants of DES
Date: 19 Jul 1994 17:14:48 GMT
Organization: Massachusetts Institute of Technology
Lines: 73
Distribution: world
Message-ID: <30h1m8$bt0@senator-bedfellow.MIT.EDU>
References: <30grch$580@amhux3.amherst.edu>
NNTP-Posting-Host: e51-007-3.mit.edu

In article <30grch$580@amhux3.amherst.edu>, tjbryce@unix.amherst.edu (Tom Bryce) writes:
|> Does it strengthen the encryption to use DES twice on a given plaintext
|> that is, encrypt the ciphertext with a different DES key? And how difficult
|> is it to recover the plaintext or key of a file encrypted plain and simple
|> in ECB mode with a 56 bit DES key, 16 rounds? And if it were fewer rounds,
|> like 8 or 12? I suppose a monetary figure would be a good way to describe
|> the difficulty. If someone had 50 megabytes of ciphertext, maybe a little 
|> bit of known plaintext, encrypted ECB on a 56 bit des key, 16 rounds,
|> could they break it with $100,000? $250,000? Any ideas? 

Lets take these one by one: 

Double encrypting DES makes it more secure. First off, DES isn't a group.
Without this knowledge, it is possible that no matter how many times you
ecrypt, it will become no more secure. This is suspected, but not known,
for many other algorithms including IDEA. It is possible that tomorrow,
somebody will demonstrate that IDEA is a group and that multiple encryptions
aren't useful. I am unsure what the effect of doing a TRAN in between
encryptions (as in the hacked PGP that everybody is flaming about) is
on the hardness of multiple encryptions. I am sure it depends on the
details of the symetric algorithm.

That said, double DES is suceptible to meet in the middle attacks. A meet
in the middle attack requires twice the resources of a brute force attack on
single encryption. For a known plaintext-ciphertext pair, you encrypt the
plaintext with all possible keys and decrypt the ciphertext with all possible
keys. When you get a match between a decrypted ciphertext and an encrypted
plaintext, you have the key. The difficulty with this attack is that it
requires LOTS of memory. For DES, with 2^56 bits and an effective keyspace
of 2^55, thats roughly 32 Exabytes (right?). I don't know anybody with that
kind of memory on their PC, but the NSA could probably set up a massive tape
based facility for a relatively small fraction of the national debt :)
For any algorithm with bigger keys (like IDEA) this attack is useless.

Using ECB mode is a bad idea because if you send the same 64 bit block twice,
somebody watching your communications will know that. Its possible for them
to acquire important information or even launch a cryptanalytic attack based
on the observation of identical ciphertext blocks and some knowledge of
what you might be communicating about. NSA could probably break this now if
they've built a dedicated DES cracking machine. Don't expect anybody in the
private sector to have this capability... yet. But as I understand it, it now
takes 2^47 encryptions to break standard DES.

For under 16 rounds you can use differential cryptananalysis to break it
more rapidly than brute force (2^55). What makes me like DES is that even
though differential cryptanalysis was discovered by academia in 1990 (i
think?), the folks who made DES knew about it before I was born and proofed
it against it. So if there are any other neat kinds of cryptanalytic attacks
out there, its possible that the folks who made DES already knew about them
and proofed the algorithm against it. Anyway, for brute force attacks you
need 16 rounds to make differential cryptanalysis useless. I think you need
fewer now that it can be proken with 2^47 encryptions, but I'd rather
get somebody else's opinion on it.

As far as how expensive it is, the main cost is building the machine to
cryptanalyze the code. After that its easy. Of course if you are breaking
things the same way as RSA 129 fell, spare cycles are the cost, not dollars.

|> ULTRASECURE offers a double-des option, encrypting macintosh data twice on
|> two different keys. It's better than curve encrypt in that it works 
|> transparently, always keeping the contents of a given folder, etc., 
|> invisibly encrypted, with user entering key once and it works in background
|> thereafter. I think the FAQ said encrypting twice on two different keys 
|> does not increase protection, but I wasn't sure I was reading it right.

It depends on the algorithm. For a secure algorithm with 128 bit key sizes
that is not a group, double encryption works.

Jason W. Solinsky

(I'm not claiming to be an expert, but posting these things where everybody
can see them seems to be the best way for me to make sure I get things correct.
I am pretty sure that everything above is right, but not positive.)
