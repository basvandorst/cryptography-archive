Path: msuinfo!agate!ihnp4.ucsd.edu!swrinde!pipex!doc.ic.ac.uk!aixssc.uk.ibm.com!watnews.watson.ibm.com!locutus.rchland.ibm.com!wo0z.rchland.ibm.com!lwloen
From: lwloen@wo0z.rchland.ibm.com (Larry Loen)
Newsgroups: sci.crypt
Subject: Re: Encryption algorithms interacting
Date: 24 Jul 1994 02:50:23 GMT
Organization: IBM Rochester MN
Lines: 79
Distribution: world
Message-ID: <30sktf$18jv@locutus.rchland.ibm.com>
References: <30grch$580@amhux3.amherst.edu> <30h1m8$bt0@senator-bedfellow.MIT.EDU> <30iqba$apb@zeus.london.micrognosis.com> <30iu2k$gqi@senator-bedfellow.MIT.EDU> <774812076Stu.stu@nemesis.wimsey.com> <16FFCD5CDS86.C445585@mizzou1.missouri.edu>
Reply-To: lwloen@rchland.vnet.ibm.com
NNTP-Posting-Host: wo0z.rchland.ibm.com

In article <16FFCD5CDS86.C445585@mizzou1.missouri.edu>, C445585@mizzou1.missouri.edu writes:
[snip]
|>  
|>    Let's assume two nontrivial block ciphers, ie, the key actually has
|> some effect on the encryption, and they seldom or never map X to X.
|>  
|>    Assume we choose two independent keys, K0 and K1.  Now, it looks to
|> me like it *can't* generally be easier for E0(E1(X,K1),K0) to be cracked
|> than for E1(X,K1) to be cracked, because an attacker now has less
|> information about E1()'s output after the second encryption than before
|> the first.  Can anyone show me an example of a system where this doesn't
|> hold?
|>  

There is an old and not very good system called Nihilist Substitution
that could do this.

Encryption:  1. Set A=1, B=2, . . .Z=26.

2. Select a numeric key of some length containing numbers from 1 to 26.

3. Repeat the key iteratively under the pt and sum them.  This is the CT.

   l a r r y  = key

  h  e  l l   o  t  h  e  r  e   = pt
 08 05 12 12 15 20 08 05 18 05   
  l  a  r  r  y  l  a  r  r  y
 12 01 18 18 25 12 01 18 18 25

 20 06 30 30 40 32 09 23 36 30   = ct, first key


Now, if you examine things, you'll see that the period of the key is
more predictable than even the similar Vigenere cipher.  If the pt and the
key both have five, the trailing ct digit is always 0.  This reveals, for
that relative position of key, that the trailing key digit is five.

Likewise, one can come up with similar restrictions for the "tens" column.
If a proposed period violates these kind of restrictions, one can (for
perfectly encrypted text) immediately reject all keys of that length and
try another block layout.  (A key column purporting to contain 02 as ct
and 88 simply cannot be as the max addend is 26).  I have worked these and
once one guesses the correct period, stripping off the encryption can
leave only a handful of keys to try (having the letter "a" and "z" ever
encrypted by the same key number basically gives the show away, for 
instance).

Clearly, reencrypting can easily exacerbate these restrictions, especially
if one does so by simply adding in the new, second key without reducing the
second answer modulus something or other (as the original system failed to do).

For example, if the value "03" ever appears in a doubly-encrypted 
message, it means the original plaintext was "a" and the key letter
for both encryptions was "a".  Any integer under, say, 10 has similar
favorable properties (though more possibilities).

One would note that a simple test of any decent system would not be to work
this way, but you asked for an example and here is an easy one that comes
to mind.

A little better system is one known as "Bifid".  It is known that if one
reencrypts in the same key, that (after some small, integral number of
reencrypts that seems to vary unpredictably) one gets the original
plaintext back.  This probably doesn't hurt for exactly two encryptions
with different keys, but it does suggest that mindlessly superencrypting,
even with a fairly decent system, needs some amount of investigation.

It may be possible for instance (I don't know this) that some bifid key
squares happen to be equivalent to, say, two encryptions in the other key.
I'd want to know, though, before I recommended superencrypting bifids as
a "stronger" system.

 
-- 
   Larry W. Loen        |  My Opinions are decidedly my own, so please
                        |  do not attribute them to my employer

   email to:  lwloen@rchland.vnet.ibm.com
