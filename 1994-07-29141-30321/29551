Path: msuinfo!agate!howland.reston.ans.net!news.cac.psu.edu!psuvm!wvnvm!c445585
Nntp-Posting-Host: 128.206.2.2
Date: Sun, 10 Jul 1994 23:45:00 -0400
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: Re: hiding ciphertext in ciphertext
Message-ID: <16FEF13D0DS86.C445585@mizzou1.missouri.edu>
Organization: University of Missouri, Columbia
References: <16FED13571S86.C445585@mizzou1.missouri.edu>
Lines: 43

In article <16FED13571S86.C445585@mizzou1.missouri.edu>
C445585@mizzou1.missouri.edu writes:

>1.  Let E be a 64-bit error mask, with 6 bits randomly turned on.  Encode
>    both messages with an error-correcting code capable of correcting this
>    many errors per block.  There are more than 2**32 possible E blocks,
>    so this is capable of creating collisions of the kind we need.

   Unless I'm munging the math here, the equation for number of variations
of E is C(64,6), which is a bit less than 2**32.  A random error vector
E with 7 bits on seems to be a bit larger than 2**32, so that might be
enough.  Of course, the probability for finding a "collision" value for
two messages has to be pretty large, since you must successfully find
one for every block in your message.

   The logic here is that I'm trying to find the number of different
64-bit vectors with 7 bits on.  I'm using the combination formula
(64 possible bits, chosen 7 at a time,) which looks to give me a value
a little bigger than 2**32.  (That is, "64!/((64-7)! * 7!).")

>2.  Allow one full character insertion per block.  This means one extra
>    character per 8 in the message.  This allows (assuming 256 acceptable
>    chars to insert) more than the required 2**32 variations.  This has
>    been suggested before as a general way to defeat keysearch and known
>    plaintext attacks.

   This is a more complicated formula, and it's going to be approximate
at best.  If we try to choose 3 positions to insert characters, then
we've got C(8,3), which is about 56 possibilities, times a total of
2**24 possible characters inserted, not quite enough.  If we augment
this by randomly changing case on the five remaining letters, and
randomly setting their high-bits on, we get another 10 bits to play
with, so I think we can get more than 2**32 variant messages this way,
too.  Unfortunately, this isn't *nearly* as wonderful as my original
result looked.  This also leaves a low probability of some insertions
making the message unclear.  (ie, "meet me at 52:00 apm") allows two
unlucky insertions to leave us with four possible times.

>   (This seems too easy!  Am I messing up the math in this stuff?  It
>sure looks like it all works.)

   **sigh**

   --John Kelsey, c445585@mizzou1.missouri.edu
