Path: msuinfo!agate!ihnp4.ucsd.edu!usc!nic-nac.CSU.net!charnel.ecst.csuchico.edu!yeshua.marcam.com!news.kei.com!travelers.mail.cornell.edu!newsstand.cit.cornell.edu!news.graphics.cornell.edu!ghost.dsi.unimi.it!univ-lyon1.fr!swidir.switch.ch!scsing.switch.ch!news.dfn.de!news.dfn.de!Germany.EU.net!EU.net!uunet!nwnexus!chinook!ken
From: ken@chinook.halcyon.com (Ken Pizzini)
Newsgroups: sci.crypt,alt.privacy.clipper
Subject: Re: Clipper LEAF Attack - Details?
Followup-To: alt.privacy.clipper
Date: 8 Jul 1994 02:28:32 GMT
Organization: Northwest Nexus Inc.
Lines: 78
Message-ID: <2vidkg$f5o@nwfocus.wa.com>
References: <slansky_doug-060794172212@mac-an-48.cig.mot.com>
NNTP-Posting-Host: chinook.halcyon.com
Xref: msuinfo sci.crypt:29478 alt.privacy.clipper:4634

In article <slansky_doug-060794172212@mac-an-48.cig.mot.com>,
Doug Slansky <slansky_doug@macmail1.cig.mot.com> wrote:
>The LEAF is composed of the following information:
>
>1.  The unit ID of the chip (UID) - this allows the gov't to find your keys
>in the escrow databases
>?2.  Information regarding the chip Unique Key (KU) - maybe a hash
>function?
>3.  The session key (KS) which is 80 bits - maybe another hash?
>4.  A 16 bit checksum.
>5.  Probably more information...

1. the UID (32 bits)
2. KS encrypted by the Unit Key (80 bits)
3. a checksum (16 bits)

The whole 128 bit LEAF is then encrypted by the Family Key.


>OK, so given that the Feds can intercept the LEAF determine several things
>from it, namely:
>
>1.  Your chip ID (UID) to look up your two 40-bit Escrowed keys

The escrowed keys are 80 bits each; they are XORed together to
get the 80 bit Unit Key.

>2.  The session key (KS)

Yes, by way of the escrowed keys.


>How does the session key fit into this?  I am envisioning a public key-like
>system.  Say, each Clipper Chip uses the session key to encrypt the data,
>and the session key has been chosen such that only the two chips with the
>proper unique keys (KU) can decode the data.  Is this on target?  

The session keys are agreed upon in an unspecified manner between
the two units; public key methods are a reasonable choice for this.
The chips are each told the session key; they then compute the LEAF
for that session key (and the initialization vector), and each checks
the other's checksum before assenting to decrypt data from the other.

>Assume that chip#1 could come up with a falsified LEAF that had the
>appropriate checksum.  Chip #2 (being legal or not) sees the correct LEAF
>checksum, assumes everything is hunky-dory, and continues the conversation.
> Since it is presumable that the Feds wouldn't want each chip to be able to
>interpret the entire LEAF, they only check the checksum bits to match their
>own. But wait, if the LEAF has information about the KU, the checksums
>wouldn't match. Hmm - maybe my #2 above is incorrect.

The decrypting chip checks that the checksum matches the loaded IV and KS.
The KS in the LEAF is encrypted under the Unit Key of the sender, so
(supposedly) it can only be read-out by use of the escrowed keys.


>This obviously implies a large number of pre-computed LEAFs with all
>possible checksums - for a 16 bit word, not an insurmountable task.  Since
>this all takes place in hardware, the LEAF will have to be identified and
>stripped off, then replaced with the falsified LEAF with the matching
>checksum.  Of course, the search for the matching checksum only has to be
>done once at the beginning - will this introduce detectable delay in the
>system?

It depends on the application -- in a Clipper phone this can all be a
bit of a pain; you would need to do a lot of trace cutting and patching
just to be able to force your own data to the Clipper chip.  But with
chips that let you load your own keys you can do your key-exchange and
random-LEAF hunting independent of setting up the EES chips, and thus
have no detectable (by the EES chips) delay.  Tthe delay could also be
made negligibly small by having a large bank of chips computing LEAFs
in parallel.  (Actually, not so much "computing" LEAFs as validating
random LEAFs.)


Followups set to alt.privacy.clipper.

		--Ken Pizzini
