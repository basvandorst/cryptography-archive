Path: msuinfo!agate!library.ucla.edu!europa.eng.gtefsd.com!MathWorks.Com!news2.near.net!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!athena.mit.edu!solman
From: solman@athena.mit.edu (Jason W Solinsky)
Newsgroups: sci.crypt
Subject: Re: Non-RSA Public Key Algorithms Wanted
Date: 19 Jul 1994 14:18:43 GMT
Organization: Massachusetts Institute of Technology
Lines: 53
Distribution: world
Message-ID: <30gnc3$5ta@senator-bedfellow.MIT.EDU>
References: <199407190027.TAA10095@pentagon.io.com>
NNTP-Posting-Host: e51-007-3.mit.edu

In article <199407190027.TAA10095@pentagon.io.com>, ritter@io.com (Terry Ritter) writes:
|>  In <30egvj$fse@senator-bedfellow.MIT.EDU> solman@athena.mit.edu
|>  (Jason W Solinsky) writes:
|> 
|> >In article <grinch-180794121015@grinch.tor.hookup.net>, grinch@hookup.net
|> (Reginald Braithwaite-Lee) writes:
|> >|> In article <305i63$gsg@senator-bedfellow.MIT.EDU>, solman@athena.mit.edu
|> >|> (Jason W Solinsky) wrote:
|> >|>
|> >|> > If for some reason you HAD to use a public key system for encryption
|> >|> > I would suggest probabilistic encryption using a Blum Blum Shub
|>       Pseudorandom
|> >|> > generator as mentioned in applied cryptography. Its faster. Its
|>       possible
|> >[...]
|> >|> I wasn't able to figure out how to construct a public key system from
|> >|> Bruce's descriptions of either the BBS generator or probabalistic
|> >|> encryption. Is there a paper available (pref. online) or can you/someone
|> >[...]
|> 
|> 
|> >Choose two large primes, p and q that are congruent to 3 modulo 4
|> >(i.e. p mod 4 = 3; q mod 4 = 3). Choose a random seed x.
|> 
|>  Does anybody actually read these papers?
|> 
|>  No, this is not the Blum, Blum and Shub "unpredictable" RNG [1].
|>  It might be profitable for those who trumpet the use of BB&S to
|>  actually study the original reference.  In my experience, a casual
|>  reader often skips the entire latter part of the paper, under the
|>  belief that it is unrelated to application.  It is not.

Thank you for the reference. I had not read the original paper. I had taken
the algorithm out of Schneier and then posted it in cypherpunks for comments.
My current implementation just checks to make sure that x(0) is a quadratic
residue and leaves it at that. (I'm embarassed to mention how I arrived at
that test so I won't.) I'll give the BBS a more thorough read tonight.

My question now is, is the BBS without the contraints on x(0) that you
mentioned insecure? What is the probability of landing on a cycle short
enough for there to be a significant probability of it being successfully
cryptanalyzed? In other words, isn't generating p and q so that you can
easilly generate an x along a long cycle sort of like testing for a
semi-weak key in IDEA only substantially more expensive computationally?

It looks to me like randomly generated seeds hardly decrease security for
any reasonable size key (I am using 1024, but I would extend the claim to
512 bits). Is this claim incorrect or are my existing algorithms flawed
to the point of insecurity?

Cheers,

Jason W. Solinsky
