Path: msuinfo!agate!howland.reston.ans.net!usc!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!athena.mit.edu!solman
From: solman@athena.mit.edu (Jason W Solinsky)
Newsgroups: sci.crypt
Subject: Re: known key, unknown algorthim
Date: 29 Jul 1994 22:45:04 GMT
Organization: Massachusetts Institute of Technology
Lines: 21
Distribution: world
Message-ID: <31c0pg$6af@senator-bedfellow.MIT.EDU>
References: <775536493.0snx@trnscend.uucp>
NNTP-Posting-Host: e51-007-3.mit.edu

In article <775536493.0snx@trnscend.uucp>, yylhectr@trnscend.uucp (Yee Yang Li Hector) writes:
|> Is there a deterministic way of recovering a cryptographic algorithm,
|> under chosen ciphertext/plaintext conditions, given that you
|> know the key, but do not know the algorithm used?

I think this is more of a practical question than a theoretical question.

Looking at it from a theoretical point of view, you can consider a secure
encryption algorithm that supports an arbitrarilly large key size. Suppose
you distributed an implementation of this algorithm with a 65536 bit key
where all but the last X bits were fixed. The key then becomes the last
X bits. It is then clearly the case for 2^16 >> X that knowing the key
won't help you. You need to know the algorithm.

In practical cases, you would just try every algorithm you can think of.
To defeat security by obscurity, you HAVE to crack the obscurity. There
is no limit to the set of possible encryption algorithms.

Cheers,

JWS
