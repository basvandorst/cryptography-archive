Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson; CMSC (G))
Newsgroups: sci.crypt
Subject: Re: Hiding Ciphertext in Ciphertext
Date: 10 Jul 1994 02:36:27 GMT
Organization: University of Maryland, Baltimore County
Lines: 48
Message-ID: <2vnmrb$ksn@news.umbc.edu>
References: <CrqAxu.660@chinet.chinet.com> <2vc9j8$i22@news.umbc.edu> <2vdv4t$pv6@girtab.usc.edu>
NNTP-Posting-Host: umbc7.umbc.edu
X-Newsreader: TIN [version 1.2 PL2]

Martin Piazzola (piazzola@girtab.usc.edu) wrote:

: I think the problem with these schemes of having multiple file systems 
: on a single disk and being able to decrypt them with either real or duress
: keys overlooks the possibility that you may not be present to do the 
: key entry or decryption under duress.  

Not a problem with the system I'm describing.  The system doesn't
distinguish master keys from duress keys.  It doesn't matter who
enters one.

: It seems to place extraneous control on the software or operating system 
: which reads the drive.  It seems to me that the answer (to a secret police
: force, experienced in cracking crypto, as well as skulls) would be to 
: plug the drive into a separate controller, and analyze all of the data on it, 
: to discover "hidden" file systems, etc.  If all of the "free space" on the 
: disk was "cryptographically random" bytes, it would probably arouse a bit 
: of suspicion.  I mean, when I look at the empty spce on my drive, it is 
: a lot of pieces of old files, headers, stuff thats been deleted, etc. 
: Defineitely not "white noise".  

I do assume I have a cipher strong enough that it's output is
indistinguishable from random noise.  Given that one assumption, a
duress file system is indistinguishable from a master file system.

This is _not_ like the hacks which have been proposed to hide data in
unused space.  Even I, the designer of the system, would be unable to
distinguish a duress key from a master key.  Analyzing the file system
on another machine and other software doesn't help.

: If you knew that they were going to use your file system program to decrypt 
: your files, your duress key could be a secret command to simply write 
: garbage over your secret files, while displaying "decrypting, please wait..."
: Or it could just crash the heads.   Hmm, a "self-crashing" hard drive, which 
: not only crashed the heads, but dragged them all over the media, destroying
: it, might be a good idea...  It would have to have enough on-board power 
: backup to complete the job before the plug was pulled......

These hacks are only effective against naive examiners, and are
subject to many of the objections you made above.  If the system does
something different with a duress key than it does with a master key,
then an adversary with a duress key can simply simulate the program
and detect it.

I'm about to post a follow-up describing the mechanism.

--Bryan

