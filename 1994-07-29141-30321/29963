Path: msuinfo!agate!ames!hookup!yeshua.marcam.com!zip.eecs.umich.edu!newsxfer.itd.umich.edu!gatech!howland.reston.ans.net!cs.utexas.edu!not-for-mail
From: ritter@io.com (Terry Ritter)
Newsgroups: sci.crypt
Subject: Re: Non-RSA Public Key Algorithms Wanted
Date: 22 Jul 1994 14:39:27 -0500
Organization: UTexas Mail-to-News Gateway
Lines: 216
Sender: nobody@cs.utexas.edu
Message-ID: <199407221939.OAA02392@pentagon.io.com>
NNTP-Posting-Host: news.cs.utexas.edu

 In <30m6tc$kv8@gap.cco.caltech.edu> hal@alumni.caltech.edu (Hal Finney)
 writes:

>[...]
>The x^2 mod N generator transforms x into x^2 mod N
>and outputs the bit b which is the "parity" of x (they mean least sig-
>nificant bit, not whether the number of 1 bits is even or odd - see the
>proof of lemma 2).  There is no discussion here of restricting the set of
>x's to be of long period.  All that is necessary is that they be quadratic
>residues.
>
>They go on to prove, in section 7, that as defined above, without any
>additional restrictions, the x^2 mod N generator is unpredictable "modulo
>the QRA".

 There need be no discussion of X0 being on a long cycle when
 one is solely discussing an attack on the predictability of the
 sequence.

 Vazirani and Vazirani [2] show that log(N) bits can be used.


>QRA is the assumption that determining whether an element is a
>quadratic residue is intractable.  It's important to note that they are not
>proving that x^2 mod N is random, just that predicting it is as hard as the
>QR problem.  So we should not overstate the degree of "absolute proof" here.

 Certainly.  What is supposedly proven is the difficulty of finding
 N given the least-significant-bits of X0,X1,...

 Note that eventually we end up with N in a slightly more constrained
 form that could possibly support more advantageous attacks than the
 general QRA.


>Note that they did not have to put any extra restrictions on cycle length
>of x to make their proof work.  Short cycles would have violated their proof
>because they would allow predictions to occur polynomially often.  So they
>actually have proven here that the chance of a short cycle is non-polynomial
>rare.

 Nonsense.  This proof simply addresses one particular characteristic
 of the RNG.  It addresses "unpredictability" in the specific sense
 of the ability to "guess" the next value.  It does not address the
 ability to externally store all such values as they occur and then
 read them out as "prediction."  This would require a guaranteed long
 cycle length.  Which they provide in another section.


 Consider the system P = 23, Q = 47 (N = 1081) which is specifically
 given as an example "of the prescribed form" [1:378].  That is:

     Xn+1 = (Xn*Xn) mod 1081

 We can run this system in our head or on a hand-calculator:

     X0 = 46 and X0 = 47 are degenerate cycles.
     X0 = 48 is on a 10-state cycle.
     X0 = 24 is on an 11-state cycle.

     There is another 10-state cycle, three more 11-state cycles,
     and two of the desirable 110-state cycles.

     The minimum non-degenerate cycle length is 10.
     The maximum cycle length is 110.
     The average cycle length is 24.

 There is a big practical difference between a 10-state cycle and
 a 110-state cycle.


>Later, in section 8, they go on to discuss how long cycles will actually be
>in practice.  And it is true that they do give some rules to allow you to
>choose a provably maximal-cycle-length starting element.  However, this is
>not then applying retroactively to the earlier proofs.  Those are already
>finished.  You still get the provable results of section 7 without choosing
>these special elements.

 Fine . . . as long as you use the RNG in a system which does not
 support the storage and use of values which may be on a short cycle.

 Normally, most people assume that one major use for an unpredictable
 cryptographic RNG will be as the confusion sequence or running-key
 generator for the ordinary stream cipher.


>This is made clear near the beginning of section 8: "...let pi(x0) be the
>period of the sequence [starting with x0]....  Since the x^2 mod N
>generator is an unpredictable pseudo-random number generator (modulo QRA),
>it follows that on the average, pi(x0) will be long."  See?  "It follows."

 Yes, and then the very next sentence says:

      "In this section we investigate the precise lengths of these
      periods _without_ relying on unproven assumptions (such as
      quadratic residuacity)."

 Presumably they do that for a reason.  Is the reason just
 intellectual curiosity?  Or did they investigate N = 23*47 and
 say: "Wo!  Where did those short cycles come from?  Jeez, we'd
 better do more than wave hands here!"


 After initially describing the generator briefly on p. 368, they
 say:

      "Such sequences are periodic with period usually equal to
      Lambda(Lambda(N)) (see section 8 for the definition of Lambda
      and clarification of 'usually')."

 A term like "usually" is cause for some concern in cryptographic
 designs; I prefer terms like "always," "guaranteed," "proven,"
 that sort of thing.  Since they postpone that issue to section 8,
 naturally it is not found in section 7.


 Also I guess "long" is in the eye of the beholder.

 Consider the system P = 151, Q = 211 (N = 31861):  You will
 recognize both P and Q as "Blum integers" congruent to 3 mod 4.

      The minimum non-degenerate cycle length is 2.
      The maximum cycle length is 60.
      The average cycle length is 24.

 Note that this system is actually worse than N = 1081, despite
 being almost 30 times larger.  The difference is the improper
 use of simple "Blum integers" instead of "special" primes
 specified in [1].


>The unpredictability of the RNG _implies_ long cycles.

 See above.


>If cycles were
>short it would not be unpredictable.

 Nonsense.  Some people might see short cycles as "unpredictable"
 while going round and round the same cycle.

 Certainly, N = 23*47 is claimed to be "a special number of the
 prescribed form" [1:378].  But can we seriously claim that *any*
 cycle of this generator is "unpredictable" in the general sense?
 Yet it is constructed in the form which is *proven* to be
 "unpredictable"!  What a quandary!  How can we resolve this?

 It really is very simple:

      1)  Do some short cycles exist?  (Yes.)

      2)  Might a short cycle be chosen at random?  (Yes.)

      3)  Would the usual stream cipher continue to be secure
          while using a short cycle?  (No.)

      THEREFORE

      4)  If we want a guaranteed secure stream cipher we must
          guarantee a long cycle.

 IT'S AS SIMPLE AS THAT!

 Now, if we get math to tell us that the shortest possible (non-
 degenerate) cycle is "long enough," then we don't have to test
 for a particular length.  Any such math, however, seems likely
 to be based on the "special" primes construction, to control
 the length of the short cycles.  This approach will also have
 the effect of increasing the computation in every RNG step.

 Another approach is to accept the possibility of selecting a
 short cycle.  But without math to tell us how likely that is,
 this seems like a very bad approach.  We are paying extra
 computation to use X**2 mod N; why would we use it poorly?
 If we can accept no guarantees, we can have much faster generators.


>If you can find a short cycle you can
>solve the QR problem (because you can factor N) and this is exactly the
>contradiction which is the heart of their proof.
>
>So, I maintain that the BBS generator does not require special choice of
>the starting element and in fact you retain the proved randomness with a
>random starting element.

 You maintain wrong.

 The whole point of a BB&S generator is to have provable strength,
 because the generator itself is slow.  To get this strength, N
 must be constructed properly, and X0 selected properly, so that we
 can guarantee that a known-plaintext attack will be ineffective.

 The improperly-constructed BB&S may be OK if you otherwise provably
 prevent a known-plaintext attack which can expose and use repeated
 values on a short cycle when that occurs (as eventually it will).
 But an improperly-constructed BB&S is not OK if, as in the usual
 case, you want to use X**2 mod N as the running-key generator in an
 ordinary stream cipher.


 References:

 [1]   Blum, L., M. Blum and M. Shub.  1986.  A Simple Unpredictable
       Pseudo-Random Number Generator.  SIAM Journal on Computing.
       15: 364-383.

 [2]   Vazirani, U. and V. Vazirani.  1985.  Efficient and Secure
       Pseudo-Random Number Generation.  (extended abstract)
       Advances in Cryptology:  CRYPTO '84.  193-202.  Springer-
       Verlag.

 ---
 Terry Ritter   ritter@io.com


