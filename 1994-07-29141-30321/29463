Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!news.umbc.edu!eff!news.duke.edu!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: Strength of DES against real-world attacks
Date: Thu, 07 Jul 94 20:26:15 CDT
Organization: University of Missouri, Columbia
Lines: 78
Message-ID: <16FEC11F67S86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: mizzou1.missouri.edu

In article <2vfq1p$81@search01.news.aol.com>
whmurray@aol.com (WHMurray) writes:
 
>The security of a crypto mechanism has at least as much as to do with the
>value and life of the data encrypted under a single key as it has to do
>with the strength of the primitive mechanism used.
 
   I agree in principle, but in practice, how do you know ahead of time
that there will never be a time when this data is *really* important to
keep secure?  I feel like, if someone is sending a message using an
encrypted mail system, they may not understand that the original designer
of the system assumed nothing worth millions to decrypt would be sent.
 
> However, even if that were not so, the security would still be
>a function of the value of the data.  Mr. McLaughlin is right.  In the
>presence of modern automated key management, the effective length of the
>key approaches the lenght of the data and the DES stands forever.
 
   I overstated my case a bit.  I'll acknowledge that, if you're using
DES intelligently as a component, you can design a very strong system.
Triple-DES, or DES with a new key exchanged every half-dozen blocks,
or DES in 64-bit OFB-mode with several of the OFB-bits fed into a nonlinear
combiner, will probably all build strong systems.
 
   To make my point more clear, I'll try a different, not-so-rhetorical
question:  Why not use FEAL-8?  It's nontrivial to break, especially if
an attacker doesn't have much or any known-plaintext, and if the key is
changed every few blocks based on some stronger key-management scheme.
Or why not use DES with 8 rounds?  It, too, is nontrivial to break, and
can be managed the same way.  Why not use Clipper?  The known-attacks
against it also probably cost lots of money and imply lots of risk
(bribing escrow clerks or crooked judges).
 
   This may be a bit of a built-in bias for me, because I find crypto
so interesting, but I don't think it makes sense to use a cipher that
has known attacks against it, when ciphers without such attacks exist.
 
   Consider a scheme that exchanges a new DES key after every 10 DES
blocks with some really secure scheme, maybe 1024-bit RSA.  An attacker
winds up with a block of 10,000 blocks she wants to attack.  With a key-
search machine that searches one key every 3.5 hours on average, she can
recover the whole message after 350 hours, or about 15 days.  (Even if
she only gets 80% of the keys, she's effectively got the message.)  That's
probably more time than she wants to spend on a single message.  How-
ever, why not use IDEA or 32-round Khufu, or triple-DES?  Then, there's
not even that remote chance that the attacker can break the message using
known schemes.  However, just to stay on the safe side, we can do key
exchange every 20 IDEA blocks, too.
 
   I'd rather use a scheme like IDEA or Khufu with 32 rounds, which had
no known attacks available against it.  An intelligent system design
can protect the cipher from many forms of attack, especially against
chosen plaintext or ciphertext attacks.  But I'd rather have that system
design working along with a stronger cipher, for which no known attacks
existed.  And, ideally, I'd like to have the systems that use the ciphers
designed so that drop-in replacements can be done, if and when more power-
ful attacks are found against IDEA or Khufu.
 
>I do not care how low your estimate of the current cost of attack against
>the DES. (Well, I do need them, so keep doing them.)  However, as long as
>I know what it is, I can use the DES in a way that is secure for my
>application.
 
   I agree that, with careful, intelligent design, you can.  The question
is, what additional constraints are you putting on your design, and what
additional processing demands are you including to cover the weaknesses of
your cipher?  And what do you gain from this tradeoff?  This isn't just
a rhetorical question--I don't design security systems for a living, so
I'm interested in why people who do choose to continue to use DES.  Is it
just because there are cheap hardware implementations already available?
Or because DES has lasted so long, you're figuring there won't be any new
attacks against it that completely demolish it?  I'm afraid I really don't
understand.
 
>William Hugh Murray
>New Canaan, CT.
 
   --John Kelsey, c445585@mizzou1.missouri.edu
