Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!news2.near.net!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!athena.mit.edu!solman
From: solman@athena.mit.edu (Jason W Solinsky)
Newsgroups: sci.crypt
Subject: Re: Quadruple DES encryption, single DES speed
Date: 19 Jul 1994 23:30:40 GMT
Organization: Massachusetts Institute of Technology
Lines: 54
Distribution: world
Message-ID: <30hnn0$2d4@senator-bedfellow.MIT.EDU>
References: <30h28d$bt0@senator-bedfellow.MIT.EDU> <30h77v$i9j@agate.berkeley.edu>
NNTP-Posting-Host: e51-007-3.mit.edu

In article <30h77v$i9j@agate.berkeley.edu>, spp@bob.eecs.berkeley.edu (Steve Pope) writes:
|> solman@athena.mit.edu (Jason W Solinsky) writes:
|> 
|> > I'm debating the merits of the following hybrid DES/hashed based
|> > system on cipherpunks right now. It looks like it provides four
|> > times the protection of DES without decreasing the speed much.
|> 
|> > Step A: Choose four DES keys, K1, K2, K3 and K4
|> 
|> Okay so far.
|> 
|> > Step B: Run the code through your favorite non-secure diffusion
|> > based cipher.  Slightly hacked linear feedback shift registers
|> > work just fine as do many other algorithms.
|> 
|> I don't understand exactly what Step B is.  Are you suggesting 
|> pre-encrypting the plaintext with a weak cipher?  If so, why?

Yes. I just want to get some diffusion. It makes me feel better. Its been
demonstrated (since I posted) that I am effectively doing a two stage cipher.
The first is a very quick symetric algorithm that demultiplexes based on
a secure hash and is VERY fast. In the second I just DES all of the parts.
The first part has NO diffusion. This does not make me feel well. It could
easily be argued that there is not need for diffusion in the first part as
long as it is taken care of adequately in the second (which it is), but I
am not yet comfortable with this claim.

|> > Step C: Hash the concatenation of K1, K2, K3 and K4. Use a
|> > secure one-way hash.
|> 
|> Okay.
|> 
|> > Step D: Multiplex the plaintext into four messages using each
|> > pair of two bits in the hash. Keep repeating the hash when you
|> > run out of bits.
|> 
|> I think I understand what you mean here.   Perhaps the word you wanted
|> was "demultiplex" or "partition" rather than "multiplex".

I did in fact mean demultiplex. You multiplex at the other end.

|> > Step E: Do DES encryption on each of the four messages. Concatenate or
|> > Interleave and send. DO NOT USE ECB.
|> 
|> Okay:  Ignoring step B, how does this differ in strength from
|> single DES with a short cryptoperiod (e.g. short interval between
|> key changes)?

You can not establish a correspondence between what goes into each of the
four DES and the plain text without cracking the hash. You also can't do a
meet in the middle because the key size to the first function is too damn
large.

JWS
