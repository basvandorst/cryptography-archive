Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!news.kei.com!bloom-beacon.mit.edu!senator-bedfellow.mit.edu!athena.mit.edu!solman
From: solman@athena.mit.edu (Jason W Solinsky)
Newsgroups: sci.crypt
Subject: Re: Quadruple DES encryption, single DES speed
Date: 20 Jul 1994 10:15:21 GMT
Organization: Massachusetts Institute of Technology
Lines: 34
Distribution: world
Message-ID: <30itfp$gqi@senator-bedfellow.MIT.EDU>
References: <30h28d$bt0@senator-bedfellow.MIT.EDU> <30h77v$i9j@agate.berkeley.edu> <30hnn0$2d4@senator-bedfellow.MIT.EDU> <16FF813305S86.C445585@mizzou1.missouri.edu>
NNTP-Posting-Host: e51-007-3.mit.edu

In article <16FF813305S86.C445585@mizzou1.missouri.edu>, C445585@mizzou1.missouri.edu writes:
|> In article <30hnn0$2d4@senator-bedfellow.MIT.EDU>
|> solman@athena.mit.edu (Jason W Solinsky) writes:
|>  
|> >You can not establish a correspondence between what goes into each of the
|> >four DES and the plain text without cracking the hash. You also can't do a
|> >meet in the middle because the key size to the first function is too damn
|> >large.
|>  
|>    If you omitted the prng XOR at the beginning, I think I could
|> break this system, assuming I could keysearch DES.
|>  
|>    Given this implementation, if I can choose a few (say, 2000 or so)
|> bits in the plaintext stream to be all 0's or all 1's, I can probably
|> crack this with a few keysearch attempts.  If I know that most of the
|> input at a certain point is 0's or 1's, I can do the same.  I can also
|> do a modified keysearch attack if I know that the plaintext stream
|> has strongly-skewed bits (say, 90% 0's), as will probably happen with
|> some kinds of data.

Agreed. That's why I considered it so important to get some diffusion in
there. More over, my diffusion algorithm is flawed because it is easy
seperable from the demultiplexing part of the algorithm via chosen plaintext
attack. This then enables a variant of what you are discussing.

It has finally been pointed out that my algorithm IS suceptible to meet in
the middle attacks by saving the DES decryptions instead of the hash
encryptions (*DOH*). Given this, there is really no reason to use it
instead of a proven hash based symetric algorithm (Luby-Rackoff, MDC)
followed by DES.

Cheers,

JWS
