Path: msuinfo!agate!howland.reston.ans.net!gatech!news-feed-1.peachnet.edu!news.duke.edu!godot.cc.duq.edu!toads.pgh.pa.us!newsfeed.pitt.edu!uunet!news.delphi.com!usenet
From: Ted Kaliszewski <ted89@delphi.com>
Newsgroups: sci.crypt
Subject: PT Factoring: 29-digits Demo.
Date: Fri, 15 Jul 94 22:50:05 -0500
Organization: Delphi (info@delphi.com email, 800-695-4005 voice)
Lines: 34
Message-ID: <pmxyqs9.ted89@delphi.com>
NNTP-Posting-Host: bos1b.delphi.com

      PT Factoring: 29-digits Demo.

      If you have given up on the pseudo-totient factoring idea, here
is a neat demo to lift your spirit. Consider the following product of
two primes,

      N = 568 971 935 269 420 243 703 269 723 21 = p1*p2
To factor N execute these steps:

      Step 1: Construct a pseudo-totient.
      R = 341 550 071 728 321 = p3*p4 (R is a strong psp)
      M = N*R
      phi'(M) = (N-1)*(R-1) (this is your pseudo-totient)

      Step 2: Construct a "dummy" RSA.
Assume an encrypting exponent e and compute the corresponding decrypting
exponent d,
      e = 65537
      d = 171 761 059 815 939 824 443 062 449 873 743 273 794 334 73
Test the resulting system with a plaintext X,
      X = 123 456 780 9
and verify that it works.

      Step 3: Factor N.
      e*d -1 = 2^11* delta
      a = 589 540 838 263 92 (randomly found)
      a^(4*delta) = 1 (mod M)
      a^(2*delta) = Q (mod M)
      gcd(Q+/-1,N) = p1
      p2 = N/p1
There you have it, simplicity redefined! While I can show you how
the PT factoring works, I am not sure I can explain why it works.
Any suggestions?

