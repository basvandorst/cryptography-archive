Path: msuinfo!uwm.edu!cs.utexas.edu!swrinde!pipex!sunic!EU.net!Austria.EU.net!newsfeed.ACO.net!swidir.switch.ch!scsing.switch.ch!yogi!bioftp.unibas.ch!doelz
Newsgroups: sci.crypt,comp.security.misc
Subject: [Q] Line-based encryption needed
Message-ID: <1994Jul2.185106.4068@comp.bioz.unibas.ch>
From: doelz@comp.bioz.unibas.ch (Reinhard Doelz)
Date: Sat, 2 Jul 1994 18:51:06 GMT
Organization: EMBnet Switzerland [Basel]
X-Newsreader: TIN [version 1.2 PL2]
Lines: 65
Xref: msuinfo sci.crypt:29231 comp.security.misc:10595

Colleagues, 

We have been running our (home-made) encryption within a protocol application
for several years now. Basically, it is a client/server application which 
does an 'accounting' on IP origin and two strings (we call them "user" and 
"account"). The server, however, allows 'anonymous' access within a given 
try-out phase with a special user/account combination to any IP origin. 
In order to ensure the confidentiality of the data sent, and avoid abuse
to access non-public services, we use the line-by-line encryption as 
described below.

The application is in the field of Biology, so we have rather little 
experience with theoretical informatics. The software must run on nearly 
all operating systems in use, i.e. VMS, Mac, Windows and the major UNIX 
flavours. 

The current schema uses a (9 digit) key k(1) on the client side and gets upon 
the first contact a (6-9 digit) second key 'k2' from the server. This second key
is used to change the first key on each subsequent query/answer pair 
of messages being exchanged, i.e. k(2) = k(1) plus k2, k(3) = k(2) 
plus k2, etc. Data are compressed with a modified LZ algorithm before 
encryption.

The source code is available, and for anonymous access the first key 
is hard-coded in the source. Each subsequent line sent, however, uses 
a modified key (see above), resulting in the fact that after m communication 
ping-pong the key at the client is k(m)  and has k2 as well.  

The special feature of the software is that the paradigm switches after 
the first sets of data (might be 10 question/answer pairs, or 10000, depending
on the application type) have been exchanged, i.e. the client then closes 
the communication and openes a server. As this server openes a socket, 
it expects a message from any other client which sends the data encrypted 
with k(m) and changes with k2 at each step, i.e. the remote client does 
inherit the information from the former remote server. 

We are currently in a redesign phase and would like to reconsider encryption.
What we need were a simple way to 
	- send lines in encrypted form 
	- use 'public' (i.e., visible) key on client side
	- allow speed, compression, encryption on a per-line basis  
	- allow the server run at the customer side (formerly the client) 
		to decrypt incoming data without a new key. 
	- already established software, running on various platforms, 
		linkable as a library, in terms of line=encrypt(line); 
		or line = decrypt(line); 

After studying the FAQs and having looked into PGP for some detail we feel 
that our application is not suited to adopt a conventional public key type 
of encryption. If you can point us to any further source of information 
your advice and comment is appreciated.  Thanks for your time.

Any input welcome!

Regards
Reinhard Doelz




-- 
  +---------------------------+-------------------------------------------+
  |    Dr. Reinhard Doelz     | Tel. x41 61 2672247    Fax x41 61 2672078 |
  |      Biocomputing         | electronic Mail       doelz@urz.unibas.ch |
  |Biozentrum der Universitaet+-------------------------------------------+
