Path: msuinfo!netnews.upenn.edu!newsserver.jvnc.net!yale.edu!spool.mu.edu!howland.reston.ans.net!cs.utexas.edu!not-for-mail
From: ritter@io.com (Terry Ritter)
Newsgroups: sci.crypt
Subject: Re: Non-RSA Public Key Algorithms Wanted
Date: 26 Jul 1994 11:21:28 -0500
Organization: UTexas Mail-to-News Gateway
Lines: 96
Sender: nobody@cs.utexas.edu
Message-ID: <199407261621.LAA15944@pentagon.io.com>
NNTP-Posting-Host: news.cs.utexas.edu

 In <312mer$ffp@bambi.zdv.uni-mainz.de>
 pom@katrin.imsd.uni-mainz.DE (Prof. Dr. Klaus Pommerening) joins
 the lagging discussion on Blum, Blum & Shub, and what this classic
 paper contributed to humanity:


>The result on cycle lengths in BB&S's paper is of a limited theoretical
>interest but practically useless.

 My first thought is that the situation is just the opposite:
 Without the result on cycle lengths, there is no way to know how
 large N must be to become "unpredictable" in practice.  It is the
 cycle length results which support a guarantee of the claimed
 properties of the RNG, and without those properties, we would not
 use it.


>It doesn't say anything about possible
>regularities in the cycles other than exact repetitions.

 I can only display the statement on p. 375:

      "It follows from a fundamental theorem of Yao that, under the
      QRA, the sequences produced by the x**2 mod N generator pass
      every probabilistic polynomial-time statistical test."

 While admittedly unsatisfying, I am not sure what else we could
 expect.  Without actually following a particular cycle is it
 likely that we could predict that the values in that cycle are
 going to be Individually Independently Distributed?

 This is the same sort of thing we get into with any kind of
 deterministic RNG.  Depending on how one sees "randomness," one
 can explore small linear congruential (LCG) systems and identify
 the parameters which produce the "most random" sequence.  But this
 involves traversing a whole cycle, something which specifically
 must be made impossible (by using a "large enough" N) in BB&S RNG's.
 And, of course, the LCG math guarantees a single major cycle, which
 BB&S math does not.


>Would you use the
>sequence 101101110111101111101111110... for encryption?

 Sure . . . if this is just part of a long cycle, which otherwise
 contains virtually every other subsequence of this length.  We
 can only assume this, of course.

 If we are not happy with this, BB&S is probably not going to be
 acceptable.  But it seems likely to me that any RNG which would have
 a concise description of subsequence probability is also going to
 be easily predictable.  (One example is the linear feedback shift
 register (LFSR), which produces each subsequence once, but is
 easily predicted when it stands alone.)


>On the other hand, even with `true' random numbers (whatever these are)
>you have a small chance to get a bad sequence (e.g. 000000000...).

 000000000... is not necessarily a "bad" sequence per se, as long as
 it is selected arbitrarily from among all possible sequences.

 We intend the confusion sequence to be i.i.d.  This means that
 000000000... is just another legitimate sequence out of all possible
 sequences.  If we start removing "weak" sequences, we must remove
 them all, for the weakness is not in a particular sequence, but in
 the idea that the past sequence can be used to predict the future
 sequence in the absence of initial knowledge about the internal
 state.

 But we can't use a degenerate cycle or any "short" cycle and also
 retain security.  Either we accept this risk, or explicitly check
 X0 to avoid it.


>The
>main result of BB&S says (modulo QRA) that when you choose the parameters
>big enough, the chance of getting a bad sequence from the BB&S generator
>is not `significantly' worse than with a true random sequence.

 That's an interesting interpretation.  But short cycles are also
 dangerous for other reasons: they can be "memorized" using known-
 plaintext (and a weak combiner!), and they can reveal the
 factors of N; if N is known, this should break the system.
 (In ordinary use as a stream-cipher confusion generator, N might
 not be known, and might instead be considered part of the key.)

 Defining when the parameters are "big enough" is exactly what the
 cycle-length math does.  And that math does not work unless we use
 the special-primes construction.


 ---
 Terry Ritter   ritter@io.com


