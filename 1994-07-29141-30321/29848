Path: msuinfo!agate!howland.reston.ans.net!europa.eng.gtefsd.com!MathWorks.Com!zombie.ncsc.mil!golf!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu
Newsgroups: sci.crypt
Subject: Re: Quadruple DES encryption, single DES speed
Date: Tue, 19 Jul 94 21:49:54 CDT
Organization: University of Missouri, Columbia
Lines: 34
Message-ID: <16FF813305S86.C445585@mizzou1.missouri.edu>
References: <30h28d$bt0@senator-bedfellow.MIT.EDU> <30h77v$i9j@agate.berkeley.edu> <30hnn0$2d4@senator-bedfellow.MIT.EDU>
NNTP-Posting-Host: mizzou1.missouri.edu

In article <30hnn0$2d4@senator-bedfellow.MIT.EDU>
solman@athena.mit.edu (Jason W Solinsky) writes:
 
>You can not establish a correspondence between what goes into each of the
>four DES and the plain text without cracking the hash. You also can't do a
>meet in the middle because the key size to the first function is too damn
>large.
 
   If you omitted the prng XOR at the beginning, I think I could
break this system, assuming I could keysearch DES.
 
   Given this implementation, if I can choose a few (say, 2000 or so)
bits in the plaintext stream to be all 0's or all 1's, I can probably
crack this with a few keysearch attempts.  If I know that most of the
input at a certain point is 0's or 1's, I can do the same.  I can also
do a modified keysearch attack if I know that the plaintext stream
has strongly-skewed bits (say, 90% 0's), as will probably happen with
some kinds of data.
 
   All I have to do is get one block to be something I'm expecting,
and I've got a candidate key.  Try decrypting the message stream
with that key, and look for patterns from the input, with bits
braided in a repeating 128-bit or 160-bit pattern.  If I find them,
(assume I know a long block of plaintext), the system is broken.
Even if I don't know a long block of plaintext, I've got a good
chance to figure things out from bit-distribution.
 
   Am I missing something?  Why are you using a repeating key for
your bit-permute?  Wouldn't it make more sense to use a long-cycle
"key" from a crypto-strength prng, instead?
 
>JWS
 
   --John Kelsey, c445585@mizzou1.missouri.edu
