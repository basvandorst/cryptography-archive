Path: msuinfo!netnews.upenn.edu!dsinc!spool.mu.edu!howland.reston.ans.net!europa.eng.gtefsd.com!news.umbc.edu!olson
From: olson@umbc.edu (Bryan G. Olson; CMSC (G))
Newsgroups: sci.crypt
Subject: Re: Hiding Ciphertext in Ciphertext
Date: 5 Jul 1994 18:42:48 GMT
Organization: University of Maryland, Baltimore County
Lines: 111
Message-ID: <2vc9j8$i22@news.umbc.edu>
References: <CrqAxu.660@chinet.chinet.com>
NNTP-Posting-Host: umbc7.umbc.edu
X-Newsreader: TIN [version 1.2 PL2]

Bruce Schneier (schneier@chinet.chinet.com) wrote:

: Wouldn't it be nice to be able to encypt a file such that there
: are two possible decryptions, each with a different key.  She
: could encypt a real message to Bob in one of the keys, and some
: innocuous message in the other key.  If Alice was cought, she
: could surrender the key to the innocuous message and keep the
: real key secret.

: The easiest way to do this is with one-time pads.  [...]

: Another method
[...]
: is so implausable that the secret
: police will probably not believe her (especially considering it
: is suggested in this book).

As it happens I've been working on this.  Most of the proposed
solutions provide only security by obscurity, or make the
inclusion of a duress code so inefficient that the lack of any
other plaintext is implausible.

The basic problem is that if there are two "short" keys which
cause the same ciphertext to decrypt to two different,
independent messages, then we should be able to represent
either one of the messages in less space.  Thus it seems that
the inefficiency of including a duress plaintext would tend to
make such a text implausible.

Let's look at two cases: communication security and file
(storage) security.

In the case of communication security, I think that including
plausible duress texts requires some form of channel stuffing,
where junk messages are routinely sent.  If the channel is
dedicated to Bob/Alice, and otherwise idle, then stuffing can
be reasonably efficient.

However, I think that there is less need for duress codes in
communication security than in storage security.
Communication can (and should) employ ephemeral session keys,
which neither party needs to keep after the message has been
transferred.  Alice and Bob can not provide the needed keys,
even under torture, because they do not know them.

On the other hand, the keys for stored data must be available,
or the data is useless.  I will describe an encrypted file
system which supports true plausible duress texts with little
effect on the time or space efficiency of the system.  This is
not security by obscurity.  No one can distinguish duress data
from real data without breaking the cipher.

Here's a user's view of the system.  In normal operation, the
system works just like one of the existing encrypted
virtual-disk file systems.  To open the file system, the user
has to enter a pass phrase from which a key is generated.
Let's call the file system with the actual files the user
wishes to protect the "master disk".

The system also lets the user set up "duress disks", with
different pass phrases.  A duress disk is always logically a
directory within another virtual disk, either the master or
another duress disk.  The virtual disks therefor form a tree,
with the master as the rout.  Opening a disk gives one access
to it and all its descendents in the tree.

Importantly, no disk reveals its parent in this tree.  Giving
the pass phrase for a duress disk opens only the duress disk
and any others within it.  The duress disk appears to be a
master disk.

The user can therefore set up several levels of duress codes.
Suppose I'm keeping my plan to overthrow Freedonia secret, and
I keep all my data on the virtual disk.  The Freedonian secret
police put a gun to my head and order me to tell them the pass
phrase.  I give it to them, but when they use it to open the
disk, they find the disk contains only my grandmother's secret
recipe for fudge, and no duress disks are present.

They put the gun back to my head.  

"OK, OK," I tell them.  "The pass phrase is really ..."  They
open the disk using other pass phrase, and now they find that
the what they saw before was not really the master disk, but a
duress disk within the disk they now see.  Here they also find
bad poetry.  All this new data they can see, the poetry and
all the directory and system bookkeeping information, is in
pages which appeared to be free in the recipe disk.

They pull out the gun again.

Again I tell them a pass phrase, and this time they find the
bad poetry disk was not the master disk, but within another
which also contains a diary of my torrid affair with an ugly
woman, or letters to my proctologist about some embarrassing
condition.

At each step the disk they look at appears to be the master
disk.  Should I ever reveal my master pass phrase, they would
still not be able to rule out that it too is just a duress
disk inside other.

I'll follow this up in a couple of days with the details of
how this could be done.  The key is that all free space is
filled with random bits, and each duress disk has a map of
free space on which all blocks not used by it or its
descendents are marked empty.


--Bryan

