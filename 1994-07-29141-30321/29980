Path: msuinfo!agate!howland.reston.ans.net!math.ohio-state.edu!sdd.hp.com!portal.com!hfinney
From: hfinney@shell.portal.com (Hal)
Newsgroups: sci.crypt
Subject: Re: Non-RSA Public Key Algorithms Wanted
Date: 23 Jul 1994 05:23:32 GMT
Organization: Portal an InterNetNews Site
Lines: 165
Message-ID: <30q9gk$r0e@news1.svc.portal.com>
References: <199407221939.OAA02392@pentagon.io.com>
NNTP-Posting-Host: jobe.shell.portal.com

(Note: in the discussion below N will be a Blum integer, the product of
two equal-length primes P and Q both equal to 3 mod 4.  n will mean
the number of bits in N.)

Terry Ritter writes:

>  There need be no discussion of X0 being on a long cycle when
>  one is solely discussing an attack on the predictability of the
>  sequence.

I disagree.  A short cycle leads to an immediate prediction of the sequence.
In proving that the sequence cannot be predicted they have therefore
proven that there are exponentially few short cycles, that no polynomially-
bounded predictor can find one with non-negligible probability.

>  This proof simply addresses one particular characteristic
>  of the RNG.  It addresses "unpredictability" in the specific sense
>  of the ability to "guess" the next value.  It does not address the
>  ability to externally store all such values as they occur and then
>  read them out as "prediction."  This would require a guaranteed long
>  cycle length.  Which they provide in another section.

I don't see where you are coming up with these constraints on what the
predictor is allowed to do.  He's not supposed to look at cycles in making
his predictions?  He can't write down values as they occur?  Why not?
What else isn't he allowed to do?  Where do you find this?

Perhaps you are thinking that we must forbid this attack since any
sequence is (eventually) cyclic and therefore the predictor would eventually
win once it cycles.  But this would be forgetting that the predictor is
polynomially bounded.  The really long cycle lengths (that I say you will
get with virtually all Blum primes and you are only confident of with
"strong" ones) are not polynomial in n.  Therefore the predictor does not
have the ability to generate a whole cycle.  He can only generate cycles
which are of length which is polynomial in n.  This would let him make
correct predictions, and since they have proven that such predictions are
impossible it follows that such short cycles are exponentially rare.

>  Consider the system P = 23, Q = 47 (N = 1081) which is specifically
>  given as an example "of the prescribed form" [1:378].  That is:

This system is simply too small to give any meaningful results.  We are
talking about asymptotic behavior here.  You need "sufficiently large" n
for these results to apply.  Show me a 512 or 1024 bit number with a
short cycle.  You'll be the most famous guy in the world if you can.  You
can break RSA and read all those PGP messages.  (PGP uses Blum moduli.)

>  Yes, and then the very next sentence says:
> 
>       "In this section we investigate the precise lengths of these
>       periods _without_ relying on unproven assumptions (such as
>       quadratic residuacity)."
> 
>  Presumably they do that for a reason.  Is the reason just
>  intellectual curiosity?  Or did they investigate N = 23*47 and
>  say: "Wo!  Where did those short cycles come from?  Jeez, we'd
>  better do more than wave hands here!"

I don't know their motivations.  It's an interesting mathematical problem
in its own right, and a natural one to investigate.  We can't conclude
much just from the fact that they looked into what kinds of conditions
on the moduli would assure maximal cycle lengths.

>  After initially describing the generator briefly on p. 368, they
>  say:
> 
>       "Such sequences are periodic with period usually equal to
>       Lambda(Lambda(N)) (see section 8 for the definition of Lambda
>       and clarification of 'usually')."
> 
>  A term like "usually" is cause for some concern in cryptographic
>  designs; I prefer terms like "always," "guaranteed," "proven,"
>  that sort of thing.  Since they postpone that issue to section 8,
>  naturally it is not found in section 7.

I agree that the "usually" is fuzzy, but that does not affect the correct-
ness of the proofs in section 7.  "Usually" applies only to the question
of whether the series is maximal, interesting but not crucial.  The imporant
question is whether the series is cryptographically long.

>  Also I guess "long" is in the eye of the beholder.

No, "long" is a series which is non-polynomial in n:  from p.375:
"Definition: 1. A predictor P(.,.) is a probabilistic poly-time procedure
that on inputs N, b1...bk, with bi in {0,1} and k<= poly(|N|), outputs..."
The number of elements you have to work with is, as I said above, polynomial
in n.  Their proof implies that the probability of finding a series this
short is negligible for sufficiently large n.

>  Consider the system P = 151, Q = 211 (N = 31861):  You will
>  recognize both P and Q as "Blum integers" congruent to 3 mod 4.

Once again, this is still way too small, n=15.  This doesn't prove anything.

>  Certainly, N = 23*47 is claimed to be "a special number of the
>  prescribed form" [1:378].  But can we seriously claim that *any*
>  cycle of this generator is "unpredictable" in the general sense?
>  Yet it is constructed in the form which is *proven* to be
>  "unpredictable"!  What a quandary!  How can we resolve this?

Simple.  The n is too small.  The results proven in the paper have to
do with the asymptotic behavior of algorithms.  You always see the magic
phrase "for sufficiently large n" in such results, as we have here in
Theorem 4.

>  It really is very simple:
> 
>       1)  Do some short cycles exist?  (Yes.)
> 
>       2)  Might a short cycle be chosen at random?  (Yes.)
> 
>       3)  Would the usual stream cipher continue to be secure
>           while using a short cycle?  (No.)
> 
>       THEREFORE
> 
>       4)  If we want a guaranteed secure stream cipher we must
>           guarantee a long cycle.
> 
>  IT'S AS SIMPLE AS THAT!

Well, I guess we agree that it's simple...  I would ask a different
question, though:

	5)  Is there a polynomial-in-n probability of randomly choosing
	    a short cycle?  (No, not for sufficiently large n.)

>  Now, if we get math to tell us that the shortest possible (non-
>  degenerate) cycle is "long enough," then we don't have to test
>  for a particular length.  Any such math, however, seems likely
>  to be based on the "special" primes construction, to control
>  the length of the short cycles.  This approach will also have
>  the effect of increasing the computation in every RNG step.

We don't need such a proof.  We just need a proof that the chances of
stumbling onto a short cycle are exponentially small, and we have one,
in Theorem 4.

>  The whole point of a BB&S generator is to have provable strength,
>  because the generator itself is slow.  To get this strength, N
>  must be constructed properly, and X0 selected properly, so that we
>  can guarantee that a known-plaintext attack will be ineffective.

The known-plaintext attack is not what you should worry about.  If short
cycles exist your attacker can generate his own X0, chosen to your maximal
disadvantage, find a cycle, get two square roots of X0, and factor N!
Then you're really up the creek.  This attack is far more powerful than
known-plaintext (it doesn't require any plaintext or cyphertext).


A careful reading of the proof of Theorem 4 makes it clear that any
prediction can be based on whatever information the predictor wants to
bring to bear, as long as it is polynomially bounded.  This includes cycle
information and whatever else he wants.  This Theorem shows that poly-
nomially short cycles have negligible probability for sufficient n,
modulo the QRA.

>  References:
> 
>  [1]   Blum, L., M. Blum and M. Shub.  1986.  A Simple Unpredictable
>        Pseudo-Random Number Generator.  SIAM Journal on Computing.
>        15: 364-383.
> 

Hal Finney
