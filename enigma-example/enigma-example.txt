
                    3-ROTOR ENIGMA ENCIPHERMENT EXAMPLE
                          Written by Fauzan Mirza
                        <F.U.Mirza@sheffield.ac.uk>

    How the Enigma works:

                  1  2  3  R
    key --------->|->|->|->|
                  |  |  |  |
    output <------|<-|<-|<-|

        P: Patchpanel
        1: Rotor 1
        2: Rotor 2
        3: Rotor 3
        R: Reflecting rotor

    Current passes through the rotors : 1 2 3 R 3 2 1
    The order that the three rotors operate can be changed.
    The patchpanel operates on the character before and after it
    has been processed by the rotors.

    The reflecting rotor is like the other rotors except that the
    mapping is symmetrical.

                            MACHINE PREPARATION

    Rotor wirings:
    Input:  ABCDEFGHIJKLMNOPQRSTUVWXYZ
    1:      EKMFLGDQVZNTOWYHXUSPAIBRCJ
    2:      AJDKSIRUXBLHWTMCQGZNPYFVOE
    3:      BDFHJLCPRTXVZNYEIWGAKMUSQO
    4:      ESOVPZJAYQUIRHXLNFTGKDCMWB
    5:      VZBRGITYUPSDNHLXAWMJQOFECK
    R:      YRUHQSLDPXNGOKMIEBFZCWVJAT

    Select three out of the five rotors and arrange them in an order.
    Select the rotor ring settings and starting positions.
    Connect pairs of letters on the plugboard.
    These are the key to the enciphered message.

Example:
  Rotor order:              3 1 2
  Alphabet ring setting:    W X T
  Rotor starting positions: A W E
  Plugboard:    (AM) (TE)

                                ENCIPHERMENT

    Get input character to encipher.

Example:
  Input character is 'T'. It will be manipulated during the encryption
  process, and we shall always refer to the current form of the letter
  as the input character (even though it's unlikely to resemble the
  original letter).

    Each rotor has a physical notch on it which determines when the
    next rotor is stepped up. The following table shows which letter is
    visible in the rotor window when the notch is in the engaged
    position:

    Rotor notches:
    1: Q
    2: E
    3: V
    4: J
    5: Z

    Remember that the notch is physical and will step up regardless
    of which rotor order is being used.

    Step up the first rotor.
    If the first rotor has reached its notch then step up the second
    rotor.

Example:
  When the first rotor, rotor 3, reaches 'V' then the second rotor,
  rotor 1, steps up to 'X'.

    If the second rotor just reached its notch after being stepped up
    then at the next round, step both the second and third rotors up
    once.

Example:
  Rotor positions: B W E

PATCHPANEL

    The patchpanel modifies the input character depending on the
    plugboard connections. It operates on the character before and
    after processing by the rotors.

    Simply lookup the plugboard pairs to see if the input character
    is in any of the pairs. If it is then substitute the input character
    for the other character in the pair.

Example:
  Plugboard connections are (AM) (TE)
  Input character is a 'T'.
  Change it to an 'E'.

    Do the following for each of the rotors in rotor order.

    Rotate the character by the current rotor position.
    Shift the input alphabet until the 'A' of the "Forward" alphabet is
    aligned with the current rotor position letter in the "Backward"
    alphabet, then translate the input character.

        Forward:     ABCDEFGHIJKLMNOPQRSTUVWXYZ
        Backward:   ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ

Example:
  First rotor (rotor 3) is 'B' (Align 'A' with 'B', shown above).
  The input character is 'E' which translates to 'F' (forward).
  This is basically a rotate operation on the input character.
  (it is being rotated depending on the current rotor position).

    Align the following output table so that the 'A' in the "Backward"
    alphabet is below the rotor ring setting in the "Forward" alphabet.

        Forward:    ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ
        Backward:                         ABCDEFGHIJKLMNOPQRSTUVWXYZ

    Lookup the letter, which corresponds to the input character in
    the above table, in the rotor wirings and find its corresponding
    forward letter in the above table. The result is the new input
    character.

    (Badly phrased, I know, but *you* try explaining it...)

Example:
  Ring setting for first rotor (rotor 3) is 'W'.
  Aligning the letter 'A' in the "Backward" alphabet with rotor ring
  setting 'W' in the "Forward" alphabet, the letter corresponding to
  the input character 'F' is 'J' (forward).
  The rotor wiring for input 'J' gives output 'T'.
  The letter corresponding to 'T' in the above table is 'P' (backward).
  Input character becomes 'P'.

    Rotate the character back by the current rotor position.
    We are reversing the rotation made before the rotor wiring lookup,
    which is why it is rotated backwards. The table to rotate it forward
    is used to translate the input character, by looking up the
    input character the table backwards.

Example:
  First rotor (rotor 3) is 'B' ('A' aligned with 'B').
  The input character is 'P' which translates to 'O' (backward).

    Repeat this process for the next rotor.
    When processed with the three rotors, translate the input
    character through the reflecting rotor. This is a simple lookup.

Example:
  By this stage, the input character would be an 'M'.
  The reflecting rotor translates this into a 'O'.

    Now the input character is processed by the rotors in reverse order.
    This is exactly the same as when processed by the rotors as before,
    except that the lookup in the rotor wirings is reversed.
    The rotor order is also reversed.

Example:
  The input character 'O' is passed back to the third rotor (rotor 2)
  and goes on to the second rotor (rotor 1) and first rotor (rotor 3)
  before being modified by the patchpanel. The output from the
  patchpanel is the final result.

  The input to the last rotor (rotor 3) should be 'G'.
  This is rotated to the letter 'H'.
  Align the 'A' in the "Backward" alphabet with the rotor ring
  setting in the "Forward" alphabet. (Rotor ring setting is 'W').
  In the "Forward" alphabet, the character corresponding to the
  input character 'H' is 'L'.
  The character corresponding to the letter 'L' in the rotor wirings
  (reverse lookup) is 'F'.
  In the "Backward" alphabet, the character corresponding to the
  input character 'F' is 'B'.
  The 'B' is rotated back to 'A'.
  Output is 'A'.

    The patchpanel operates on the output from the reversed rotors.
    Once again, this is simply exchanging of letter pairs if the letter
    is one of a pair on the plugboard.

Example:
  Input character is 'A'.
  Plug (AM) changes this into an 'M'.

    The output from the patchpanel is the final, enciphered, letter.
    Carry on enciphering message, one letter at a time.

Example:
  Enciphering "THISISATEST" using the settings described at the start.

  Input P    3      1      2     R      2      1      3    P  Output
    T   E [FJTPO][KNWTX][BIXQM] (MO) [SZSLH][DGFCG][HLFBA] A     M
    H   H [JNNJH][DGDAE][IPCVR] (RB) [FMOHD][ZCYVZ][BFCYW] W     W
    I   I [LPEAX][TWBYC][GNTMI] (IP) [TAATP][LOMJN][QUWSP] P     P
    S   S [WABXT][PSSPT][XESLH] (HD) [HOYRN][JMCZD][HLFBX] X     X
    I   I [NRWSN][JMOLP][TAATP] (PI) [MTNGC][YBWTX][CGSOJ] J     J
    S   S [YCFBV][RUAXB][FMWPL] (LG) [KRGZV][RUROS][YCGCW] W     W
    A   M [TXSOH][DGDAE][IPCVR] (RB) [FMOHD][ZCYVZ][GKUQJ] J     J
    T   E [MQIEW][SVIFJ][NUPIE] (EQ) [UBJCY][UXQNR][ZDBXP] P     P
    E   T [CGCYP][LOYVZ][DKLEA] (AY) [CJBUQ][MPTQU][DHDZQ] Q     Q
    S   S [CGCYO][KNWTX][BIXQM] (MO) [SZSLH][DGFCG][QUWSI] I     I
    T   E [PTAWL][HKNKO][SZEXT] (TZ) [DKDWS][ORXUY][JNNJY] Y     Y

