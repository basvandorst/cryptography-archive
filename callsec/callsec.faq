Xref: netcom.com talk.politics.crypto:8667 sci.crypt:31848 alt.wired:14797 comp.sys.ibm.pc.soundcard:57361
Path: netcom.com!ix.netcom.com!howland.reston.ans.net!spool.mu.edu!bloom-beacon.mit.edu!gatech!swrinde!pipex!uunet!noc.near.net!jericho.mc.com!pokey.mc.com!not-for-mail
From: njj@pokey.mc.com (Neil Johnson)
Newsgroups: talk.politics.crypto,sci.crypt,alt.wired,comp.sys.ibm.pc.soundcard
Subject: Call Security, Public Key Voice Cryptography FAQ
Date: 14 Nov 1994 10:44:11 -0500
Organization: Mercury Computer Systems, Inc.
Lines: 406
Message-ID: <3a80kb$d1@pokey.mc.com>
NNTP-Posting-Host: pokey.mc.com
Keywords: voice, encryption, soundcard, modem

Hello, for some strange reason I'm not getting confirmation that my post
made it to the news group. I you see this on the news please send me a quick
email that you saw it.

--------------cut here--------------------------------------------------

Archive-name: cs_faqv1.txt
Version: 1.1 minor rev. of first draft
Last-modified: 94/11/11

Call Security, Public Key Voice Cryptography FAQ
------------------------------------------------

Call Security is a shareware program which provides public key
cryptography for voice telephone conversations. In other words private
phone conversations. Like as in voice scrambling. All you need is a
modem, a sound card, PC, and someone to talk to (with the same).

This my first version of the Call Security FAQ. Its very brief but
should get you going if you plan to use it. If you have suggestions,
comments, or criticism, please let the current editors know by sending
e-mail to njj@mc.com. Things like, bugs, sound card how to, modem
init. strings etc... are especially welcome.

Many thanks to David Colston, Charlie Merritt the authors of Call
Security. These guys have been sharing info with me regarding this
program in the many months prior to its release.

This is the very first & rough draft version of this faq. Some things
are sure to be missing, just plain wrong, etc... Your get the
point. Trust only what can you verify yourself. This faq is actually
bound to create more questions than it answers. Hopefully it gets you
to use Call Security.

Call Security FAQ Author Neil J. Johnson, email njj@mc.com

Table of Contents
-----------------

1. Overview, what is Call Security?

2. How well does it sound?

3. What kind of hardware do I need?

4. Where do I Get Call Security?

5. Quick, can you tell me how to run it step by step?
5.1 Ok how do I stop talking now?

6. How Does It Work?

7. What public key algorithm does it use?

8. Is it really secure?, You, decide!

9. Is it safe to give them my public key when i upgrade from shareware 
   (512 bit key) to the registered version (1024 bit key)?, Yes, 
   its only the public key!


10. How do I set up my sound card?
10.1 How do I set up my Gravis Ultrasound?

11. My modem is full duplex why isn't Call Security?

12. Are there any bugs in the program?

13. Where do I get DSZ or GSZ for doing Zmodem transfers with Call Security?

Answers to Questions
--------------------
1. Overview

Well Call Security (CS) turns your ordinary PC into a very secure
voice telephone.  CS also works as a general purpose data
comm. program with zmodem support, ansi/vt100 terminal, & regular
unencrypted digital voice. Call Security is also a general purpose
public key cryptography program for encrypting/decrypting any computer
file (like email).

2. How well does it sound?

The sound quality varies depending apon how many (compressed) samples
per second your hardware can do. Here is a little chart.

Sample rates:
        7600  Acceptable (386sx with 9,600bps modem)
       10000  sounds like good CB Radio (486 with 14.4bps modem)
       16000  Real sweet (486 with 28.8bps modem)

3. What kind of hardware do I need?  

The minimum recommended system is a 386sx with a 9600bps modem & a
sound blaster compatible sound card. A 486 system with a 14.4bps modem
is recommended. A 28.8bps modem is still even better! You should also have
a copy of pkunzip to uncompress the program if you get a zipped copy off
the Call Security BBS.

4. Where do I Get Call Security?
Right now the only place to get it is at the following BBS phone number.
Note I didn't see any support for kermit transfers. I recomend using zmodem
protocol.

  Call Security BBS
  1 (501) 839 - 8579
  
  - Give your full name.
  - The password is "security" 
  - Use the "d" command to download
  - select transfer type like "z" for zmodem (sorry no kermit support)
  - enter file name "callsec1.zip"  
  - put your comm program in zmodem mode (automatic for most comm programs)

5. Quick, can you tell me how to run it step by step?

- DOS stuff   
   >mkdir callsec1
   >pkunzip callsec1
   >pkunzip software 
- I recommend printing the documents, readme.1st, security.doc,
  svterm.doc.

- If your in windows exit now.

- determine which comm port your modem is on & determing the address &
  IRQ. The DOS command msd.exe (Microsoft Diagnostic) can help with this
  task. Write this down for later.

- determine the address of your sound card. Write down for later use.

- If you don't have a sound blaster then put you sound card in sound
  blaster emulation mode.

- type "security" at the dos prompt.

- Your now in the security program.  Select option A. Make My Own
  Secret & Public Keys (cursor to & hit return)

- Now unfortunatly CS makes public key exchange a hassle. You need to
  extract your public key from your key list it (& uu encode it
  optionally), and give it to the person you wish to talk to with
  CS. The first 2 steps can be done with the menu picks. The last part
  can be done with CS zmodem, if you happen to have the DSZ shareware
  program.

  Since this is a quick start guide lets skip this for now and use password
  encryption instead. If you don't want to skip the public key stuff read the
  documentation.

- Use menu pick J. Go To Secure Voice Terminal
  You will be prompted for info on you modem set up & sound card setup.
  Just enter the info as it comes up. For sample rate select 10,000 samples
  per sec. for a 14.4 modem, 16,0000 for a 28.8, & 7,600 for a 9,600. Note:
  if you have a 386 16/SX machine don't go over 8,000 samples per second. 

- When your done setting the modem  & sound card you will be a a memu for
  where to go next. Hit the return key. You will be popped into the comm.
  program/terminal emulator.

- Now it time for one person using CS select auto answer mode & the other CS 
  to dial.

- the auto answer person/side presses function key F8

- the caller does the following:
  press function key F6. Enter name & number of person you plan to dial. 
  Note: field are seperated with spaces, tab keys won't work. Now dial, 
  directions are on the screen to do this (I think you just hit the return 
  key).

- The machines will now connect. Anyting you type will go on their screen.
  Anything they type will go on your screen. Note, this text is not 
  encrypted.

- When your ready to talk hit alt-s on you key board. Then select
  password mode (or public key if you've done public key exchange). 
  Each side now enters the same secret password (like hello).

- On your screen it will either indicate that your listening or talking.
  to toggle listening/talking hit the space bar. To end the session hit
  the esc key. Note: it helps if you use it like a CB & say over while 
  you hit the space key (when your done talking).

5.1 Ok how do I stop talking now?
Well If your talking you must hit the space key to become the listener. 
To end a voice session & go back to the terminal chat mode, you must hit
the <esc> key while you are in talk mode.

6. How Does It Work?

In laymans terms, each person who uses CS has two keys, a matched
pair. One is public & the other is private. The way program works is
public key are used to encrypt voice (or computer
files/email). Private keys are used to decrypt the voice. Hence know
one can listen in on a conversation (or computer file/email) that was
ment for you (encrypted with your public key).  However you still have
to trust the person you are talking to!

7. What public key algorithm does it use?

No CS doesn't use the RSA [Rivest, Shamir, and Adleman] public key
cryposystem as featured in PGP. A bonus feature of not using RSA is
th avoidance of RSA patent restrictions.

CS uses QPK Quick Public Keys by David Colston. This
public key system has been reviewed by Whit Diffee, Gus Simmons
(Sandia Labs), and posted on sci.crypt.

On the plus side QPK is fast. On the down side the CS implementation
of QPK does not support digital signatures. FYI, Digital signatures are
signed with private keys & verified with public keys.

Like virtually all public key systems CS uses QPK to encrypt a random
(private) session key, The session key is then used to encrypt the voice
conversation.  This is because public key systems are too slow for
realtime voice.

The private (session) key encryption algorithm uses a very long many
bit linear feedback shift register LFSR pattern which is xored with
the voice data. To greatly increase the security, only short (many
times less than the LSFR total length) sequences of this LFSR are used
between transmission of a new (really) random seed for the LFSR. Hence
a random seed constantly restarts the LFSR at truely random points in
the sequence.

Well I'm sure I didn't do justice to the crypto stuff, but its a start.
If you want to know more general info read the cryptography-faq. It
can be found in news groups sci.crypt, talk.politics.crypto,
sci.answers, news.answers, talk.answers.  Another good faq is pgp-faq
found in news groups alt.security.pgp, alt.answers. Once you have read
these faqs you will have to consult the authors of CS for more
specific info on the various crypto features of CS and QPK.

8. Is it really secure?, You, decide!  

Well the public keys system used by Call Security, QPK ( Quick Public
Keys) by Dave Colston has survived peer review. This is good.

Charlie Merritt did the single private key stuff. I described this
algorithm briefly (from a phone conversation) in question 7. Maybe
this needs further public review?

Also we don't have the source code so its hard to check for trap doors.
I don't know what their motivation for a trap door is however. They want 
to make money off this thing.

Plus all the normal stuff needs to be considered, like did some one
put a bug (transmitter) in you sound card microphone, did they breakin
and steal the private key off your harddrive/ floppy drive, etc...

Well you decide if you think call security is secure. I think it is
but what do I know? Only time will tell how secure CS really is.

9. Is it safe to give them my public key when i upgrade from shareware 
   (512 bit key) to the registered version (1024 bit key)?, Yes, 
   its only the public key!

Yes, the authors only want half of your public key. This public key is
then used to create a file which enables receiveing encrypted voice
with your larger key. Note: Non-registered versions work just fine
with registered users with large keys.

10. How do I set up my sound card?

Well if you have an origional mono 8 bit sound blaster you do nothing.
If you don't have a classic sound blaster then you should put you sound card
in sound blaster (8 bit mono) emulation. Please send me email njj@mc.com on
how you set up your sound card to work with CS. I will add the info to this
faq.

10.1 How do I set up my Gravis Ultrasound?

Ultrasound cards have two sound blaster emulators. Only the SBOS emulator
works with Call Security. Don't use MEGAEM.

Before you run Call Security "SECURITY.EXE" Just exit windows & type
SBOS at the DOS prompt. You should here the words SBOS installed on
your sound card speakers, plus you will see confirmation of SBOS
loading on your computer screen. 

If SBOS doesn't work consult your ultrasound documentation. Or read
the gravis faq found on the news group
comp.sys.ibm.pc.soundcard. Other sights for gravis sound card info
include:

                     FTP Sites                     Archive Directories
                     ---------                     -------------------
Main N.American.Site: archive.orst.edu             pub/packages/gravis
                      wuarchive.wustl.edu     systems/ibmpc/ultrasound
Main Asian Site:      nctuccca.edu.tw                    PC/ultrasound
Main European Site:   src.doc.ic.ac.uk            /packages/ultrasound
Main Australian Site: ftp.mpx.com.au               /ultrasound/general
                                                    /ultrasound/submit
South African Site: ftp.sun.ac.za              pub/packages/ultrasound
Submissions:        archive.epas.utoronto.ca  pub/pc/ultrasound/submit
Newly Validated Files: archive.epas.utoronto.ca      pub/pc/ultrasound

Mirrors:               garbo.uwasa.fi                mirror/ultrasound
                       ftp.st.nepean.uws.edu.au      pc/ultrasound
                       ftp.luth.se                pub/msdos/ultrasound

                       Gopher Sites                  Menu directory
                       ------------                  --------------
Main Site:             src.doc.ic.ac.uk            packages/ultrasound

                       WWW Pages
                       ---------
Main Site:             http://www.cs.utah.edu/~debry/gus.html

Main European Site:    http://src.doc.ic.ac.uk/packages/ultrasound/
Main Australian Site:  http://ftp.mpx.com.au/archive/ultrasound/general/
                       http://ftp.mpx.com.au/archive/ultrasound/submit/
                       http://ftp.mpx.com.au/gravis.html
                       
Mirrors:               
http://www.st.nepean.uws.edu.au/pub/pc/ultrasound/

11. My modem is full duplex why isn't Call Security?

The simple answer is sound blasters (and virtually every other sound
card known to the program authors) are not full duplex. You can't
sample digital sound at the same time you are playing digital sound!

But if the authors, Dave & Charlie start making money off Call Security
maybe they will be motivated to do a version with 2 sound cards, one
for record the other for playback.

12. Are there any bugs in the program?  

Well one very minor bug is the wrong help file (security.doc) pops up
when you request help in the terminal session of the program. What you
really want to see is the svterm.doc file when trying to figure out
how to send/recieve voice messages. As I stated before print the
documentation files svterm.doc, securty.doc, & readme.1st before
running the program. Remember the Call Security is not windows
compatible, so you can't have help in one window and call security in
the other window!

Another feature I find anoying is that public key exchange is not
built in to the voice session. Okay maybe public key exchange is not
something you want to do for every call (to prevent forgery) but at
least make it a non-default menu pick! The best work around is to pull
a copy of DSZ or GSZ off one of the shareware sights. This will allow
Secure Voice to perform file exchange. Then use DSZ to exchange public
keys prior to running a voice session.  

13. Where do I get DSZ or GSZ for doing Zmodem transfers with Call Security?

I haven't tried personally tried DSZ or GSZ yet. But here is one FTP
sight (the SIMTEL primary mirror sight) I downloaded DSZ from while
writing this faq:

FTP Location: oak.oakland.edu: /pub/msdos/zmodem
dsz-read.me   A     516  890115  Explains what DSZ program is
dsz0920.zip   B   91253  940930  X/Y/Zmodem protocol file transfer pgm - 940920
txzm241.zip   B   42734  941005  Texas Zmodem: Fast/free Zmodem protocol driver
gsz0920.zip   B  112428  940930  X/Y/ZMODEM driver with graphic file xfer displ

For more info on shareware sights read the news group
comp.archives.msdos.announce. Other SIMTEL mirror sights include:

     St. Louis, MO:  wuarchive.wustl.edu (128.252.135.4)
                         /systems/ibmpc/msdos
     Corvallis, OR:  archive.orst.edu (128.193.2.13)
                         /pub/mirrors/simtel/msdos
         Australia:  archie.au (139.130.4.6)
                         /micros/pc/oak
           England:  src.doc.ic.ac.uk (146.169.2.10)
                         /pub/packages/simtel
           Finland:  ftp.funet.fi (128.214.248.6)
                         /pub/msdos/SimTel
            France:  ftp.ibp.fr (132.227.60.2)
                         /pub/pc/SimTel/msdos
           Germany:  ftp.uni-paderborn.de (131.234.2.32)
                         /SimTel/msdos
         Hong Kong:  ftp.cs.cuhk.hk (137.189.4.57)
                         /pub/simtel/msdos
            Israel:  ftp.technion.ac.il (132.68.1.10)
                         /pub/unsupported/dos/simtel
            Poland:  ftp.cyf-kr.edu.pl (149.156.1.8)
                         /pub/mirror/msdos
      South Africa:  ftp.sun.ac.za (146.232.212.21)
                         /pub/simtel/msdos
            Sweden:  ftp.sunet.se (130.238.127.3)
                         /pub/pc/mirror/SimTel/msdos
       Switzerland:  ftp.switch.ch (130.59.1.40)
                         /mirror/msdos
            Taiwan:  NCTUCCCA.edu.tw (140.111.1.10)
                         /PC/simtel
          Thailand:  ftp.nectec.or.th (192.150.251.33)
                         /pub/mirrors/SimTel/msdos

-----------------------------------------------------------------
Well thats all for now. Hope this helps. Much more is planned for
future version of this doc.

Call Security FAQ Author
Neil J. Johnson
email njj@mc.com







Xref: netcom.com talk.politics.crypto:8666 sci.crypt:31847
Path: netcom.com!ix.netcom.com!howland.reston.ans.net!pipex!uunet!news.delphi.com!usenet
From: DAVIDCOLSTON@delphi.com
Newsgroups: talk.politics.crypto,sci.crypt
Subject: Re: Secure Voice is Here NOW!
Date: 14 Nov 1994 15:55:35 GMT
Organization: Delphi Internet Services Corporation
Lines: 178
Message-ID: <3a819n$a2l@news1.delphi.com>
NNTP-Posting-Host: bos1c.delphi.com


Quoting berliner from a message in talk.politics.crypto
   > I hope you will consider posting a description of some
   > of the technical details of your voice encryption system
   > to sci.crypt. Many people would probably take an interest
   > in hearing about a working system for voice encryption
   > there, as there has already been much discussion there
   > on how best to go about implementing such a thing.
   > Guy Berliner


Let's start with the public key stuff.
As a preamble to this, I'd like to note why and how it was
developed. After the first release of PGP, Phil told me he was
worried about using RSA. I offered to come up with another scheme
and originally designed a version of Rabin.

Nothing was ever done with that proposal. A year latter, 2.0 PGP
was due to be released and I came up with the current public key
system. Again, Phil ignored it. Posts on sci.crypt were totally
ignored by anyone with the ability to judge the math. Phil was
then approached by the customs folks and I recieved a call from
him in December of last year. By that time I was tired of waiting
around for Phil and had coded QPK (Quick Public Key) in PDS 7.1.
That languished till Charlie and I decided to do Voice.


   FOR THE MATHEMATICALLY ORIENTED - HOW A QUICK PUBLIC KEY WORKS.

Math notation:
+                 plus
-                 minus
+-                plus or minus
*                 multiplication
/                 division
^                 exponent
<>                unequal
=                 equals
==                congruent
<                 less than
>                 greater than
INT               truncated integer round
SQR               square root
(                 open expression
)                 close expression
x^-1  modulo p    the multiplicative inverse of x in the field of p
x... y            the range of values
N                 a number equal to P times Q, where P and Q are prime

Variables in capital letters are permanent and those in small letters
are temporary.

                              BACKGROUND

Because the "secret key" function of many public keys  methods are so
slow, most cryptographers use these functions only to "boot strap"
into a conventional key system, which is faster to send the actual
message. Most of the conventional key systems use comparatively small
numbers in relation to the size of the public N as a "random seed
number". The holder of the secret key may actually have a larger
amount of computer time to decipher the starting point of the
conventional algorithm than to decipher the actual message. It would
seem to be a good idea, if a public key function could take advantage
of the actual message size required to speed up the public key
process. The range of message sizes is described below, but generally
speaking we a discussing messages less than SQR(Q) in actual size.

Imagine a series of related equations modulo a prime, P. These
equations have the formula ((e * e + e)/2 * L + C) modulo P. The
value, C, is a constant determined by the rule (L - 1) * (1 / (2 * L))
modulo P == C. For L = 1, C = 0. Therefore, if L is known, the
expression ((e * e + e)/2) modulo P may be determined, even if e is
unknown.

Each value of L has an area or series of areas, in which the value of
e becomes discoverable, WITHOUT resorting to a modular square root.
ie. Let r == ((e * e + e)/2 * L + C) modulo P. If e is in the correct
range relative to L, then (r * L * 8 + (L - 2) * (L - 2)) will have an
integer square root and the value, e, may be determined with ease. The
range of values of e, for any value of L, which have this property and
the location of those values vary greatly. The following illustrates a
public key approach for L = 12, but other values of L may also be
used. Perhaps I should also note that the particular L, which a secret
key holder uses need not be public knowledge, but is not all that
sensitive.

       ESTABLISHING A QUICK PUBLIC KEY (Q.P.K.) BASED ON L = 12

A person wishing to receive public messages, which he/she alone can
decrypt calculates N = P * Q. Where P and Q are a randomly selected
prime numbers, Q being the larger.

A == (11 * 24^-1 ) modulo Q
B == (2 * A) modulo Q
D = Q - B
If D > (Q - 1)/2 then set D = Q - D - 1.
F = (Q - 1)/2 - D

Let Y1 ... Y2 be a range of numbers with in the limits:
(D - k) and (D + k), where k = INT(SQR(2 * Q / 12)).  Y1 may be
randomly selected from any point in this range, but Y2 may not be
larger than (D + k), and Y2 - Y1 is the maximum message size.

A message range for N, public information, is then created by using
Chinese remainder theorem to find the modular intersection Q == Y1
and P == x, x being a random number in the range x > 0, x < P.
This intersection is called S. A check is made to verify the
following:

A' = (11 * 24^-1) modulo N
B' == (2 * A') modulo N
D' = N - B'
If D' > (N - 1)/2 then Set D' = N - D' - 1
NOTE: P, Q, D, F, Y1, Y2, k, A, AND B are secret values.

                          Q.P.K. ENCRYPTION

A public key for short messages consists of S and N.

To send a Message the sender calculates:
e = (S + Message)
((e * e + e)/2) modulo N == Cipher

                          Q.P.K. DECRYPTION

t ==  Cipher modulo Q
f == (t * 12 + A) modulo Q
g = SQR(f * 8 * 12 + 100)

NOTE: If g is NOT an integer value, the message is rejected as
      invalid. If g modulo (2 * L) <> (L - 2) then Q is repetitively
      added to g until g modulo (2 * L) == (L - 2).

z = (g - 10)/24
e == ((B - 1) + z) modulo Q
If e > (Q - 1)/2 then set e = (Q - 1) - e.
Message = e - Y1

For other values of L:
A == ((L - 1) * 2^-1* L^-1)) modulo Q
k = INT(SQR(2 * Q / L))
NOTE: If L = 1 then D = 0 and the message range is 1... k.
      If L = 2 then the message range is D... (Q - 1)/2 and these
      values modulo Q are already perfect squares < Q.
f == (t * L + A) modulo Q
g = SQR(f * 8 * L + (L - 2) ^ 2)
z = (g - (L - 2)/(L * 2))



If you are confused by all of this, then I will try to make it simple.
Your PC know the secret key (Both P and Q). By limiting message sizes
and using a small cheat adder, which is a public constant, you can do
a secret key decrypt of the message very quickly. On my 386-16 the actual
decrypt time is measured in tenths of a second. This is very desireable
in the telephone connect situation. You don't want to wait any great length
of time before starting a conversation. You might be calling long
distance<G>. Since the person you are talking to is encrypted live and real
time, so to speak, why wait to talk!



I am very sure than the notes above are a bit fuzzy,and may even have a mistake
or two, so I will be happy to answer questions.

One more note:
Remember, Call Security 1.0 is just that, a 1.0 version. If there is interest
and a next revision, then there are MANY improvements that can be included
in the program.


David Colston
'Uncle Dave'

Eliminate government waste no matter how much it costs.

Rainbow V 1.08 for Delphi - Registered


