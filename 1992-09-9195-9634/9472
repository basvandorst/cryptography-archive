Path: msuinfo!caen!spool.mu.edu!agate!ucbvax!cup.portal.com!a-boyles
From: a-boyles@cup.portal.com
Newsgroups: sci.crypt
Subject: Re: PGP *2.0* available
Message-ID: <9209212339.1.15926@cup.portal.com>
Date: 22 Sep 92 06:39:17 GMT
Sender: daemon@ucbvax.BERKELEY.EDU
Lines: 50

Re: the question of how to post your public key reliably to an
insecure network.

Suppose I have posted a public key, but that a spoofer between my node
and the rest of the net is catching and replacing it in each message that
I send which displays it.  Further, on each message which comes back to
me which has the public key in it (a key which will be the wrong one, the
one created by the spoofer), the spoofer changes it back to my key.  So I
have no way of knowing that others are not seeing the same key that I am.

This seems to be the attack which Terry Ritter discusses, one which leads
him to think that it is actually bad for people to be putting public keys
in their .sigs on Usenet posts.

I think there are some ways around this attack.  What if I submit a
message with a random number string embedded in it: 074859b7s87b6a87a6...
I wait until I see this message and get confirmation from others that it
has been received.

Then, I send another message specifying a functional relationship between
that random string and my key.  Maybe it is the MD5 hash of my key, or
something more complicated.

The spoofer has a problem if he has already let that first message go
through.  Now he doesn't dare let this second message go, as it will
immediately reveal that my publically visible key is invalid.  If the
second message includes other discussion that is likely to elicit a
response, the fact that it has not appeared will become obvious to me.

The spoofer would also have had the option of not letting the first
message go through unchanged; perhaps he could have substituted his own
random string for mine, assuming that mine would be a function of my
public key, and instead putting in some function of his key.  But I can
foil that by having certain bits of the random string be unrelated to my
key, but being, say, an MD5 hash of some message I have sent or will
send.  There is no way for the spoofer to anticipate all possible kinds
of information I might embed in that random string.

Worse, I can conceal the random string in the letter frequencies of an
innocuous-appearing message, and later reveal the secret to allow the
interpretation of a hidden message which includes my public key.

The general idea of this strategy is to use redundancy to send my key in
multiple ways, but concealed so that a spoofer can't detect that a
redundant key has been sent.  I think this can reduce the already-slim
possibility that Usenet is being tampered with on a large scale, so that
some of the public keys we see are not the ones the message originators
sent.

Adam Boyles - <a-boyles@cup.portal.com>
