Newsgroups: sci.crypt
Path: msuinfo!caen!uunet!mcsun!sun4nl!dutrun!donau!zen.et.tudelft.nl!wolff
From: wolff@zen.et.tudelft.nl (Rogier Wolff)
Subject: Re: PKZIP CONTEST.....
Message-ID: <1992Sep21.082249.24040@donau.et.tudelft.nl>
Sender: news@donau.et.tudelft.nl (UseNet News System)
Nntp-Posting-Host: zen.et.tudelft.nl
Organization: Delft University of Technology, Dept. of Electrical Engineering
References: <1992Sep14.211553.125699@ns1.cc.lehigh.edu> <463@chorus.chorus.fr> <3063@accucx.cc.ruu.nl> <1992Sep20.100630.27119@cactus.org> <3065@accucx.cc.ruu.nl>
Date: Mon, 21 Sep 1992 08:22:49 GMT
Lines: 49

nevries@accucx.cc.ruu.nl (Nico E de Vries) writes:

>In <1992Sep20.100630.27119@cactus.org> ritter@cactus.org (Terry Ritter) writes:


>> In <3063@accucx.cc.ruu.nl> nevries@accucx.cc.ruu.nl (Nico E de Vries)
>> writes:

>>>   - a special check is build in to allow verification of
>>>     the password. This means a password can be checked without
>>>     decrypting the file. For a wrong password the chance is
>>>     about 1:65536 that it can not be detected.

>> Yes, pkzip may have other weaknesses, but the main claim which
>> was made here was that pkzip was breakable based on the password
>> "special check."  Well, the "special check" is available in the
>> contest file, and yet the contest remains unsolved.  That counts.


A simple way to be able to check wether a password is correct would be to
have the check refer to say the 32000'th byte of the unencrypted file. This
means that a password crack program would have to decrypt 32000 bytes 
before it would be possible to use the check. This is likely to cost some time.
The rightful decryption program would be required to hold these 32000 bytes
in a buffer before attempting to write things to a file. (off course it
shouldn't be possible to simply start at byte 31998, for instance by using a
cypher feedback mode)

However in this case it would be much easier to attack it in a standard way:
when you've decrypted say 10 bytes, check the "entropy" (messyness) of the
decryption. If it is messy, you need to check the next password, if it makes
some sense, you should check some more bytes.

This attack doesn't work if you compress your file to such an extend that
it isn't possible to detect the difference between correctly decrypted
file and mess. However many compression schemes don't compress so
efficiently that no detection is possible. For example Lev-Zimpel (sp?)
(the only one that I know the inner workings of...) will start out with
a sequencce of 9 bit words, which are guaranteed to be < 258+i, where i
is the sequence number of the byte. This gives at least a bit per byte
away.

All in all it comes to making a truely efficient compression scheme, and
putting some thought into the "password validity" checking.

					Roger.
-- 
****   a 486 in V86 mode is like a VW buggy with a 6 litre V12 motor.  ****
EMail:  wolff@duteca.et.tudelft.nl   ** Tel  +31-15-783644 or +31-15-142371
