Newsgroups: sci.crypt
Path: msuinfo!caen!spool.mu.edu!darwin.sura.net!convex!news.oc.com!utacfd.uta.edu!trsvax!rwsys!sneaky!gordon
From: gordon@sneaky.lonestar.org (Gordon Burditt)
Subject: PGP 2.0 and USENET
Message-ID: <BupsAF.Hjr@sneaky.lonestar.org>
Summary: How to verify keys over USENET?
Organization: Gordon Burditt
Date: Thu, 17 Sep 1992 08:44:34 GMT
Lines: 119

PGP 2.0 has some very nice facilities for public key management, but
it depends on having a connected set of people that know each other
to sign each other's keys.  How does someone get started if they
only know other people on the net through the net?

I propose the following protocol for a minimal check on PGP 2.0 keys 
posted to USENET or found in not-necessarily-trusted ftp sites.  It's
NOT very thorough and assumes that spying and mail interception is
not rampant.  It's only intended to check the association of
a key and an email address (either owning it or having control of
it by being able to intercept mail to it and send mail apparently from
it).  Names?  what is a name, anyway?  Are you sure your parents
didn't lie to you about your own name?  

Ok, guys, punch holes in it.  

1.  You find a PGP public key in someone's signature on a USENET
article.  Since any key might be useful, since it could appear as
a signature on some other key, it's not unreasonable to collect every
key you find (but don't trust them yet).  You'll also collect key 
compromise certificates quickly.

You extract the key, and check the name and email address
on the key against the article signature and article headers on the 
article.  This key has no PGP signature.  (I have yet to see one
posted that does, so far, although I suppose that will get 
organized eventually).

2.  You send an email message to the address specified in the key,
encrypted in the public key, enclosing a copy of the public key,
and asking whether this is their real key or not.  Also enclose
your public key, and ask the person to reply with one of two
passwords indicating he has read the mail, and the key is
either correct or incorrect.  

3.  Someone receives the email.  This is either the owner of the
email address or someone who intercepts mail destined for it.  In
either case, they have effective control over that email address.
If they don't have the secret key, they can't read the mail,
so they can't intelligently reply to it.
If they do have the secret key, they can check the copy of their
public key I sent.  (Software note here:  I see no simple way for
the person to do a public-key comparison in the situation where
I send him a copy of his public key with 2 signatures and he
has since acquired some more.  He can extract his key from his
public keyring into a separate keyring, delete all the signatures,
extract the copy I sent into a different separate keyring, delete
all the signatures, and compare the two.  This is rather inconvenient.
I suppose he could just delete the extra signatures from his key,
unless there's a chance that the signatures could end up in 
different orders.  Comparing the 24-bit displayed Key ID isn't
enough, is it?)

4.  The holder of the key sends a reply, encrypted in my public key,
and signed by his, indicating that this is the correct key, or it
isn't, along with the password.  The point of the password is to prevent
an impostor from sending out spontaneous key verifications, based on,
say, seeing who mail came from in logs.  The holder of the key doesn't 
have incentive to lie, and has considerable incentive to quash bogus public 
keys in his name from circulating.  At this point he probably starts 
step (2) to verify MY key, and might as well use the same message to do it.

If you get back a message asking:  "what was that undecryptable mess
you sent me?", assume that someone's been faking keys.

5.  I receive the message, confirming the public key.  Signature
verification (and getting an answer at all) ensures that the person 
who answered has the secret key, and can receive email at the
given address.  Note that this does NOT prevent someone from
creating a key "Dan Quayle <x458172@umars.edu>" (where the email
address is correct, but the name is fake) and passing this test,
but unless they can intercept mail, not easy for a minor nuisance with
no budget, they can't fake "Dan Quayle <dquayl@whitehouse.dc.usa.gov>".
Govenments would probably rather just seize your computer and you
and threaten you into talking.

6.  I sign the public key with my own key on my own keyring, indicating
that I believe the person's email address (but not necessarily name)
matches the key.

Now, does anyone think I have justification for taking the next step,
based on the above check:

7.  I send back a copy of the signed public key to the owner, attesting
to the check.

Note that if you DON'T think (7) is justified, but (6) is, exposure
of your PUBLIC keyring (not just your own key) has risks.  It will 
release signed copies of keys that you don't think deserve signing
for the world at large.  It also releases a list of all possible
correspondents, something you might not want known.

If you followed the suggestion in the software distribution to
sign at least one of the keys in the "keys.asc" file, which
included keys for Philip Zimmermann and Branko Lankester signed
by each other, and 3 other keys of contributors signed by one
of the first two, you also ought to consider whether you want to
let those (signed by you) keys out.  I don't consider one ftp site a 
particularly reliable source.

Am I taking this too seriously, or not being paranoid enough?
I notice that I haven't seen any posted PGP 2 public keys with 
signatures yet.  Is it just too soon?  People having trouble
getting PGP 2?  I got it through DEC's ftp-by-mail service, although
if you're not in the USA I don't recommend having it pass through
the USA on its way to you.

					Gordon L. Burditt
					sneaky.lonestar.org!gordon

-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: 2.0

mQCNAiq3d7sAAAEEAMt1BATZFylyyFebt7i61Znl3UG6czff9X+IwIAiSnF9DNgZ
Vpag1Ez13Ey2xqP/CWT33YYg8AhUYL6FPPj56kHh0c2ZynVnCVx3US9OiFJ9uHxw
7JRiDWkBuXLx2UKDxkvuN9KWqk5Yw5MqWbhGRtWqB8vI4Os9UHayoOeLg4idAAUR
tC5Hb3Jkb24gTC4gQnVyZGl0dCA8Z29yZG9uQHNuZWFreS5sb25lc3Rhci5vcmc+
=oEJL
-----END PGP PUBLIC KEY BLOCK-----
