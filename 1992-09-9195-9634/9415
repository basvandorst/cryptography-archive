Newsgroups: sci.crypt
Path: msuinfo!caen!sdd.hp.com!cs.utexas.edu!milano!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Subject: Re: PKZIP CONTEST.....
Message-ID: <1992Sep18.171637.4993@cactus.org>
Summary: Pkzip encryption: better than you'd think.
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
References: <1992Sep14.211553.125699@ns1.cc.lehigh.edu> <463@chorus.chorus.fr>
Date: Fri, 18 Sep 1992 17:16:37 GMT
Lines: 114


 In <463@chorus.chorus.fr> jloup@chorus.fr (Jean-loup Gailly) writes:

>> Whatever happened to that PKZIP contest where one had to 'break' in a zipped
>> file from PKWARE? Did someone win or was it impossible? Thanks!

>A small group of friends and I had a serious attempt. I wrote a
>program using brute force (try all possible passwords). My program
>checks about 446,000 passwords per second on a 50Mhz 486, or 562,000
>passwords per second on a Sun 4/670. We ran the program for a few
>months on a few dozen machines, and checked almost all passwords of
>length up to 7 characters consisting of printable characters only.
>That's about 95^7 or 7*10^13 or 2^46 passwords. We finally gave up,
>because it is very likely that Phil Katz has used at least one non
>printable character, thus making the search not feasible with the
>computer resources of our small group (but well within the
>possibilities of the NSA).

 Interesting conclusion:  You couldn't find it, but NSA could.
 How do you know this?  Do you have some security analysis I have
 not seen?  I have looked at pkzip encryption, and it seems pretty
 strong to me (absent some sort of failure in implementation).
 (How strong?  I don't know; repeated postings in this group have
 yet to reveal a decent attack.)  In fact, ubiquitous, cheap and
 fast pkzip seems far more secure than some of the cipher proposals
 seen recently.  I can imagine that certain agencies would love to
 discredit pkzip, spreading Fear, Uncertainty and Doubt in the hope
 that pkzip encryption would be less used.

 Maybe the contest file had a 7-character password, but the
 version of pkzip I have lets one use long passwords, and it
 demands the same (long) password for decryption.  Now, it is
 hardly a surprise that short passwords are vulnerable, to NSA as
 well as everybody else.  *Any* cipher is vulnerable if it is used
 with a short password.  The question is whether pkzip encryption
 with a *long* password is vulnerable (to anyone at all).


>I wrote the program for fun, not to win the contest, because the
>contest itself is not interesting. If you really want to expose an
>encryption algorithm to serious attacks, you have to provide many
>files encrypted with the same password. If you want the algorithm to
>resist known plaintext attacks, you should offer to encrypt any file
>and challenge the attackers to find the password (or a way to decrypt
>other files encrypted with the same password).  Phil Katz has refused
>to do this. He has used a non compressible file for the contest,
>because he knew that files compressed with pkzip 1.10 have a lot of
>known plaintext at the front (the Huffman trees). So the contest file
>is almost random and really not representative, since most files used
>in practice are compressible.

 Well, first of all, I believe that the contest was a direct response
 to various claims in this group that pkzip was, in general, insecure,
 and that anyone with a fast password-check program could break it.
 The contest seems to have disposed of those claims.

 That said, if you have a proposal for a reasonable contest which
 would actually confront the security of pkzip encryption, I would
 like to see you publish this, and develop it online until most
 of us agree that it constitutes a reasonable test.  Then, I think
 we should get somebody (it need not be Phil Katz) to fill out the
 "contest" requirements using the currently-available pkzip.  (No
 money would be involved, but in many cases that is not necessary.)
 Then, anyone who wished to claim that pkzip was insecure could just
 get the contest package and solve it.  Frankly, this is something that
 Katz should want to do, but only *after* we can all agree on what
 constitutes a fair contest, one which would give significant results.


>Despite its extreme simplicity, I think that the pkzip encryption algorithm
>is quite good when used with care (no known plaintext in the encryption
>header or the Huffman trees). I wish that serious attacks be attempted

 We have yet to see anybody *use* known plaintext on pkzip.  I don't
 see it as  much of an advantage.  What we have is an autokey (lately
 known as ciphertext feedback) stream cipher, with a 12-byte randomizer
 box.  Because pkzip uses a (weak) Exclusive-OR combiner, known-plaintext
 gets you the byte-by-byte output from the randomizer box.  In addition,
 we have the byte-by-byte input (this is just the ciphertext), but the
 box is highly nonlinear, and all 12 bytes of the internal state
 transition at pseudo-random for each byte enciphered.

 When we have a normal pseudo-random RNG, and access to the output
 sequence, we eventually get enough information to solve the internal
 state.  But normal RNG's do not take data *in.*  (And most of the
 RNG's solved in the literature are:  a) linear, and b) only 4 bytes.)

 The pkzip keystream is *not* produced by a normal RNG, but instead
 uses the ciphertext data when stepping the internal state.  While
 we can accumulate information about a normal RNG and eventually solve
 it, as much information flows *into* the pkzip randomizer as we get
 from it.  The more we know about it, the more there is to know.

 The pkzip randomizer box is composed of three linear pseudo-random
 stages with nonlinear coupling:  Each stage will take an input byte
 and combine it with its current state as part of its step.  Typically,
 either the high or low result byte from each stage will be passed
 on to the next stage or the output.

 With known-plaintext we know the output from the randomizer, and,
 thus, 8 bits of 32 of the last stage; 24 bits remain unknown.  But
 when that stage steps, it takes 8 unknown bits from the previous
 stage, so it again contains 32 unknown bits of information.  We
 cannot simply collect information on a single linear section, but
 instead must address the entire nonlinear box.

 Suppose we had just a single stage:  Could we break that?  How?

 Please, be my guest:  Tell me about a reasonable attack on a
 pkzip-type randomizer.

 ---
 Terry Ritter   ritter@cactus.org

