Path: msuinfo!caen!uunet!mcsun!corton!chorus!octave.chorus.fr!jloup
From: jloup@chorus.fr (Jean-Loup Gailly)
Newsgroups: sci.crypt
Subject: Re: PKZIP CONTEST.....
Message-ID: <509@chorus.chorus.fr>
Date: 22 Sep 92 20:16:58 GMT
References: <1992Sep14.211553.125699@ns1.cc.lehigh.edu> <463@chorus.chorus.fr> <1992Sep18.171637.4993@cactus.org>
Sender: jloup@chorus.chorus.fr
Reply-To: jloup@chorus.fr (Jean-loup Gailly)
Organization: Chorus systemes, Saint Quentin en Yvelines, France
Lines: 107

Thanks to Terry Ritter <ritter@cactus.org> for an excellent analysis
of the pkzip encryption algorithm. Here are some replies to his
questions on my previous post.

jloup> We finally gave up, because it is very likely that Phil Katz has
jloup> used at least one non printable character, thus making the search
jloup> not feasible with the computer resources of our small group (but
jloup> well within the possibilities of the NSA).

terry> Interesting conclusion:  You couldn't find it, but NSA could.
terry> How do you know this?

I have done already about 95^7 password checks, the full search
would require at most 256^7 checks: that's about 1000 time more.
I believe that the NSA has more than 1000 times the cpu power
than I had to do my search. This does not mean that the NSA could
break a longer password. I just spoke of the pkzip contest.

However Phil Katz told me that the NSA had given him permission
to export the algorithm (starting at pkzip 2.0, not yet released).
This suggests to me that the NSA can break passwords of arbitrary
length (but of course I have no proof).

>  Do you have some security analysis I have not seen?

I have made myself an analysis of the safety of the encryption
algorithm for long passwords, and also concluded as you have
that the algorithm is very good *when properly implemented*.

> Now, it is hardly a surprise that short passwords are vulnerable,
> to NSA as well as everybody else.  *Any* cipher is vulnerable if
> it is used with a short password.

Yes of course. However pkzip 1.10 is *much* more vulnerable than, say,
DES, to short passwords. I can't test 500,000 passwords per second
on a 486 with DES. I can with pkzip 1.10. For the kind of passwords that
people use in practice (often lower case letters only), pkzip is
very vulnerable for passwords of length up to 10 characters.
pkzip 2.0 will be more resistant to short passwords, because the
cost per password check will be much higher.

> The question is whether pkzip encryption with a *long* password
> is vulnerable (to anyone at all).

That's a question I have raised several times on sci.crypt and you are
apparently the only other reader of this group (beyond the NSA and myself)
who has seriously studied the pkzip encryption.

> Well, first of all, I believe that the contest was a direct response
> to various claims in this group that pkzip was, in general, insecure,
> and that anyone with a fast password-check program could break it.
> The contest seems to have disposed of those claims.

No, it does not. Nobody uses the kind of password that Phil Katz
has chosen for his contest. People are fooled into a false sense
of security if they believe that xqfwvpk is a safe password for
pkzip 1.10. I can find such as password very quickly.

> That said, if you have a proposal for a reasonable contest which
> would actually confront the security of pkzip encryption, I would
> like to see you publish this, and develop it online until most
> of us agree that it constitutes a reasonable test.

That's a good idea. I think it is sufficient to be able to provide any
plaintext and get back the encrypted form.  The goal would be to find
either the password or the initial state of the keys after the password is
fed into the algorithm. (The latter would still allow decryption of
any text text encrypted with the same password.) Terry, if you would
like to provide this service, please go ahead. (A mail server could
do the job, but I don't think it would help to get thousands of
encrypted files. Just one should do if the algorithm can be broken
at all.) The only problem is to get a really good random number
generator (the one I'm using in the portable zip 1.9 is not good
enough).

> Then, I think we should get somebody (it need not be Phil Katz) to fill
> out the "contest" requirements using the currently-available pkzip.

I think it would be more interesting to use a better implementation
of the pkzip encryption algorithm, and not the poor one used in
pkzip 1.10, which has too much redundancy in the 'random' header.
(This was shown by Paul Kocher in this newsgroup.) Even if one
could break the pkzip 1.10 scheme on passwords of arbitrary length,
I am much more interested in breaking the algorithm itself, not one
poor implementation. Use at least zip 1.9 instead of pkzip 1.10.

> We have yet to see anybody *use* known plaintext on pkzip.  I don't
> see it as  much of an advantage.

It depends where the plaintext is. If Phil Katz had given me just
the plaintext first byte of the random header used in his contest,
I would have found the password already, because this would in effect
reduce the password length from 7 to 6 bytes. But it's still not
useful against passwords of arbitrary length, I agree.

> Please, be my guest:  Tell me about a reasonable attack on a
> pkzip-type randomizer.

I think that if plaintext is known for 12 consecutive bytes, you can
reduce significantly the search space for the keys (2^96 for
the dumb brute force search). I don't have yet any estimation for
the effectiveness of such a reduction, sorry.

Thanks again for your reply.

Jean-loup Gailly
jloup@chorus.fr
