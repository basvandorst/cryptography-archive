Newsgroups: sci.crypt
Path: msuinfo!caen!uunet!cs.utexas.edu!milano!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Subject: Re: PGP *2.0* available
Message-ID: <1992Sep18.171321.4756@cactus.org>
Summary: Public key is trickier than it looks.
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
References: <1992Sep7.142336.5733@ghost.dsi.unimi.it> <573311541DN5.61R@tanda.isis.org>
Distribution: na
Date: Fri, 18 Sep 1992 17:13:21 GMT
Lines: 125


 In <573311541DN5.61R@tanda.isis.org> marc@tanda.isis.org (Marc Thibault)
 writes:

>    To get the value of this, it seems to me that we all should take
>    the earliest opportunity to begin broadcasting public keys and
>    maybe convincing some ftp archives to start collecting them. I'm a
>    newbie on Usenet so I have no idea how best to do this.

 This is incredibly dangerous.

 No one can keep the same key forever; the only question is, "How
 soon will the key be changed?"   (Things happen:  People leave,
 strangers appear, fires occur, divorces happen, partnerships fail,
 enemies are made, equipment is repaired, hackers get in, serious
 investigations do "bag jobs" while the target is asleep, on vacation,
 at a movie, etc., etc.)

 Nor should anyone *want* to keep the same key:  "Occasional" key
 changes are *necessary* to terminate any access which somehow has
 been "acquired" without the user's knowledge.  Even more importantly,
 key changes are necessary to limit the amount of data which could be
 revealed by a *future* insecurity.  The meaning of "occasional" is
 the individual balance between the difficulty of key management and
 the amount of information a user is willing to lose from a *single
 insecure event.*

 Without a protocol for assuring that any particular key is current,
 accumulating public keys can only result in a file which is
 increasingly composed of old keys, some of which will have been
 disclosed.  Any users who get disclosed keys will be completely at
 risk.  Nor can an old key be used to validate a new key (unless one
 is willing to allow a single past (or future!) insecurity to disclose
 all future data).


>    Re spoofing: If I'm worried that someone's got a wedge in my mail,
>    I could send messages to a number of people who have published
>    their keys.  The message would be encrypted with their public key
>    and contain copies of my public key inside and out. The message

 You may have some "published" keys, but you cannot know that they
 are valid for that user.  Maybe they never were.


>    would include instructions like "Please reply with a single word
>    'tomato' if both are the same and 'asparagus' if they are not,"
>    using a different pair of words for each message.

 You can send a message, but you cannot know who gets that message,
 and who replies 'tomato' or 'asparagus' until *after* a validated
 set of keys has been set up.  Alas, in general, a "published" key
 is not sufficient leverage to allow you to perform that validation.

 In other words, you cannot just "publish" your public key on a
 store-and-forward computer network and expect that the same key
 will always arrive unchanged.  Anyone who uses a changed key
 is at risk, and you are at risk if you use any key which "they"
 send back to you.  There need be no indication of insecurity.
 You cannot tell the difference between an insecure conversation
 and a secure one unless you have previously validated the keys.


>    Whoever is spoofing would have no way of knowing what to do,
>    unless they were also spoofing everybody else.

 No.  All they had to do was to get you to accept their public key
 as the valid key for your correspondent, and then intercept your
 messages.  *After* validated keys have been established (and before
 they are changed again), *then* one can sign.

 But if you just use a public key that somehow "appeared," you
 have no hope of knowing who can read your response.  Consequently,
 you cannot use the key to validate your key to a particular
 correspondent.  And the network has no protocol which forces the
 same message to travel by alternate paths, through different nodes
 so that you can compare them for transit differences.  (Such a
 protocol could create a huge increase in traffic, and would not,
 in the end, solve the problem.)

 After validated keys have been established, then, if only one party
 changes their key, the new key can be validated by signing with
 the key from the other end.  But if the other end had been
 compromised, then sending your key under the compromised key is
 scarcely better than publishing it in the open.  The effect is to
 put the recipient at risk, since the key they receive may not be
 the one you sent.  Of course, you are at risk too, if they
 reveal your information in a message to you.  And if *both* ends
 change keys (not at all unlikely, for occasional conversations),
 then new validation is required.

 The best practice requires "frequent" key changes, with explicit
 separate-channel validation every time.


>The best they could
>    do is stop the replies entirely, which would tell me what I needed
>    to know. At this point I would send my public key under cover to a
>    bunch of people with a request to broadcast it, along with a
>    disclaimer on the spoofer's key.

 If all of your messages flow through:

    a) the spoofing node (say, some sort of virus process on your
       home node), or

    b) any one of multiple nodes equivalently spoofed (say, those
       "convinced" to assist a government inquiry),

 you can send messages to anyone you like and it won't make any
 difference.

 A serious investigation intended to prove your node is clean is
 going to mean a lot of work, frequently, and all this work won't
 handle case (b).  Since few corporations or individuals will oppose
 serious government intent, case (b) is not at all unreasonable to
 consider.  (Indeed, the Government might not even be involved; an
 agent who purports to represent the Government may not.)  Presumably,
 some serious situation would be the motivation to cause someone to
 implement (b).  But once (b) is in place, it can be used for
 anything.  So, being "small change" is no protection.

 ---
 Terry Ritter   ritter@cactus.org

