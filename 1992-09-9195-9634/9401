Path: msuinfo!caen!sdd.hp.com!wupost!waikato.ac.nz!aukuni.ac.nz!cs18.cs.aukuni.ac.nz!pgut1
Newsgroups: sci.crypt
Subject: Re: IDEA cipher (was: PGP 2.0 Announcement)
Message-ID: <1992Sep18.071959.2749@cs.aukuni.ac.nz>
From: pgut1@cs.aukuni.ac.nz (Peter Gutmann)
Date: Fri, 18 Sep 1992 07:19:59 GMT
Sender: pgut1@cs.aukuni.ac.nz (PeterClaus          Gutmann        )
References: <1992Sep15.062452.24780@cs.aukuni.ac.nz> <1412@eouk23.eoe.co.uk>
Organization: Computer Science Dept. University of Auckland
Lines: 61

In <1412@eouk23.eoe.co.uk> ahaley@eoe.co.uk (Andrew Haley) writes:

>What does "way too slow" mean?  It depends on the implementation.  I
>have just encrypted a 600 kbyte file with the fastest DES program that
>I know of (the one I wrote ;-).  The encryption took 16 seconds.  I
>then encrypted the same file using pgp -c.  It took 54 seconds.  IDEA
>is not a fast encryption algorithm.

I'll agree with that, however I presume you only used single DES.  Triple
DES would be about as slow as IDEA.  Also you're comparing a highly
optimised DES implementation with the generic C implementation of IDEA in
PGP.  I wouldn't be suprised if Microsoft C wasn't recognising the 16-bit
multiply and was calling an external routine to do a 32-bit one (I tested
various DOS compilers on this a few years ago for arithmetic coding, I
couldn't convince any of them to generate 16x16->32 multiplies, probably
because the C typecasting rules say you should use longints.  Maybe this has
changed in the meantime).  Anyway, I don't think IDEA is slower than triple
DES.

(Oops, I've assumed you tested it against the generic MSDOS executable in that
paragraph, that may not be the case).

>It just seems that DES was rejected because no-one has fast DES code.

The reason IDEA was used was because of the speed, and because of DES has
been shown to be more susceptible to differential cryptanalysis than
IDEA.  However I don't know if the differential-cryptanalysis-resistance
is a good measure of how secure a cipher is.  It was probably as good a
measure as any.

>:   The [ PGP ] keyrings have provision for OEM cipher ID's for keyrings
>:   is to allow the use of non-patented algorithms to protect secret keys.  In
>:   my PGP-compatible archiver I use an OEM ID for the encryption algorithm
>:   used to protect the keys - no way I'm going to get caught up in a patent
>:   wrangle.  If anyone wants to protect PGP keyrings with their own non-
>:   patented ciphers, ID's of 64 and up are available (although it would be a
>:   good idea to check if anyone else is using them before you blindly define
>:   your own ID).
>
>Let's allocate one for CBC mode DES.  There's lots of code available
>which already uses DES in this mode, and at least there would be one
>less patent to deal with.  This is important for us in Europe, because
>the RSA patent does not apply here, but the IDEA patent possibly does.

OK, why not?  The ID's from 0-63 are reserved for internal use by PGP.
ID's 64 and up are available for non-PGP use.  I've already used 64 and
65 for MDC (the MD5-based cipher I posted here a few weeks ago).  I suppose
we should st up some sort of registry to keep track of these things to make
sure there are no collisions with ID's, and to safeguard against there being
1001 incompatible algorithms being used to safeguard keyrings.

BTW since RSA keys are just blocks of (effectively) white noise, there's
probably no need to use a super-secure cipher for them (that's why I used
MDC, even if it's not 100% safe, it's fast, in the public domain, and most
of it (ie the MD5 code) isn't export-restricted).

Peter.
--
    pgut1@cs.aukuni.ac.nz || peterg@kcbbs.gen.nz || peter@nacjack.gen.nz
			   (In order of preference)

