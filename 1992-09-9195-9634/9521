Path: msuinfo!caen!spool.mu.edu!agate!ames!sun-barr!news2me.ebay.sun.com!cronkite.Central.Sun.COM!texsun!exucom.exu.ericsson.se!ericom!sunic!mcsun!corton!chorus!octave.chorus.fr!jloup
From: jloup@chorus.fr (Jean-loup Gailly)
Newsgroups: sci.crypt
Subject: Re: PKZIP CONTEST.....
Message-ID: <529@chorus.chorus.fr>
Date: 24 Sep 92 17:00:44 GMT
References: <1992Sep14.211553.125699@ns1.cc.lehigh.edu> <463@chorus.chorus.fr> <3063@accucx.cc.ruu.nl> <1992Sep20.100630.27119@cactus.org> <3065@accucx.cc.ruu.nl> <1992Sep21.082249.24040@donau.et.tudelft.nl>
Sender: jloup@chorus.chorus.fr
Reply-To: jloup@chorus.fr (Jean-loup Gailly)
Lines: 41

Rogier Wolff <wolff@zen.et.tudelft.nl> writes:

> A simple way to be able to check wether a password is correct would be to
> have the check refer to say the 32000'th byte of the unencrypted file.

(if there is such a byte). It is simpler to iterate the encryption
function N times on the random header. If the encryption algorithm is
indeed strong, it is not possible to bypass the N iterations before
you can perform the encryption check. This also multiplies by N the
cost per password check for brute force attacks, if the random header
is indeed random. pkzip uses N=1, but it is trivial to modify the
algorithm for larger values of N.

Anyway, the password check itself is not necessary. You can extract to
to a temporary file, check the full CRC32, and only then delete the
original file (if any) and rename the temporary file. If your zip file
has been damaged, you don't overwrite valid data even when you have
a correct password.


Vesselin Bontchev <bontchev@fbihh.informatik.uni-hamburg.de> offers
a new and unbiased pkzip contest:

> I could encrypt a few archives (using plain PKZIP 1.10) and make them
> available.

I have already provided arguments against usage of pkzip 1.10.
If professionals are going to spend time analysing the algorithm,
they should spend it on a correct implementation, not on the poor
one available in 1.10. Let me take an extreme example: assume one
implementation of DES is accepting only lower case letters for
passwords. Would you consider breaking such an implementation
an interesting challenge? The real challenge for pkzip is to
assume a random header which is really random.

As a result of this discussion, I have improved the randomness of the
header generated by zip 1.9. (Vesselin: I can provide it as a small patch
to zcrypt19.zip if you accept to use it for your contest.)

Jean-loup Gailly
jloup@chorus.fr
