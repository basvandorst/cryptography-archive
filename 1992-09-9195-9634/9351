Xref: msuinfo comp.compression:4624 sci.crypt:9351
Path: msuinfo!caen!uunet!mcsun!corton!chorus!octave.chorus.fr!jloup
From: jloup@chorus.fr (Jean-loup Gailly)
Newsgroups: comp.compression,sci.crypt
Subject: Re: PKZIP CONTEST.....
Message-ID: <463@chorus.chorus.fr>
Date: 16 Sep 92 09:29:07 GMT
References: <1992Sep14.211553.125699@ns1.cc.lehigh.edu>
Sender: jloup@chorus.chorus.fr
Reply-To: jloup@chorus.fr (Jean-Loup Gailly)
Followup-To: sci.crypt
Lines: 63

(followups to sci.crypt)

Robert Yung <ry01@ns1.cc.lehigh.edu> asks:

> Whatever happened to that PKZIP contest where one had to 'break' in a zipped
> file from PKWARE? Did someone win or was it impossible? Thanks!

A small group of friends and I had a serious attempt. I wrote a
program using brute force (try all possible passwords). My program
checks about 446,000 passwords per second on a 50Mhz 486, or 562,000
passwords per second on a Sun 4/670. We ran the program for a few
months on a few dozen machines, and checked almost all passwords of
length up to 7 characters consisting of printable characters only.
That's about 95^7 or 7*10^13 or 2^46 passwords. We finally gave up,
because it is very likely that Phil Katz has used at least one non
printable character, thus making the search not feasible with the
computer resources of our small group (but well within the
possibilities of the NSA).

I wrote the program for fun, not to win the contest, because the
contest itself is not interesting. If you really want to expose an
encryption algorithm to serious attacks, you have to provide many
files encrypted with the same password. If you want the algorithm to
resist known plaintext attacks, you should offer to encrypt any file
and challenge the attackers to find the password (or a way to decrypt
other files encrypted with the same password).  Phil Katz has refused
to do this. He has used a non compressible file for the contest,
because he knew that files compressed with pkzip 1.10 have a lot of
known plaintext at the front (the Huffman trees). So the contest file
is almost random and really not representative, since most files used
in practice are compressible.

Phil Katz has however understood the serious weaknesses present
in the pkzip 1.10 encryption. pkzip 2.0 will be much harder to
attack, for two main reasons: the 'random' encryption header will be
more random (it was not much random in pkzip 1.10), and the
new compression format does not use fixed Huffman trees which
provided a lot of known plaintext. The encryption check, previously
stored in two bytes, will be reduced to one byte, thus also reducing
the amount of known plaintext. My crack program only works on zip files
produced by pkzip 1.10.

Despite its extreme simplicity, I think that the pkzip encryption algorithm
is quite good when used with care (no known plaintext in the encryption
header or the Huffman trees). I wish that serious attacks be attempted
by professional cryptographers (which I am not). You can find a description
of the algorithm in appnote.txt provided in pkzip 1.10, and source code
in the encryption package of zip 1.9:

    wuarchive.wustl.edu:/mirrors/msdos/zip/pkz110eu.exe
    wuarchive.wustl.edu:/mirrors/garbo.uwasa.fi/arcutil/zcrypt19.zip

(pkz110eu.exe is a zip file, which can be extracted on any machine
with the portable unzip, also available on wuarchive.wustl.edu in
/mirrors/misc/unix/unzip50.tar-z.) Non US people must not get the
encryption code from the US, use instead:

    garbo.uwasa.fi:/pc/arcutil/zcrypt19.zip

The pkzip contest is in garbo.uwasa.fi:/pc/arcutil/pkcontst.zip

Jean-loup Gailly
jloup@chorus.fr
