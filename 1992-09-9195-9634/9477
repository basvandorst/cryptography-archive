Path: msuinfo!caen!uunet!mcsun!uknet!cam-cl!cam-cl!rja14
From: rja14@cl.cam.ac.uk (Ross Anderson)
Newsgroups: sci.crypt
Subject: Steganography (was: PGP *2.0* available)
Message-ID: <1992Sep22.102331.26848@cl.cam.ac.uk>
Date: 22 Sep 92 10:23:31 GMT
References: <9209212339.1.15926@cup.portal.com>
Sender: news@cl.cam.ac.uk (The news facility)
Reply-To: rja14@cl.cam.ac.uk (Ross Anderson)
Organization: U of Cambridge Computer Lab, UK
Lines: 76

In <9209212339.1.15926@cup.portal.com>, Adam Boyles <a-boyles@cup.portal.com>
writes:

> Suppose I have posted a public key, but that a spoofer between my node
> and the rest of the net is catching and replacing it in each message that
> I send which displays it. 
>
>     (stuff deleted)
>
> I think there are some ways around this attack.  What if I submit a
> message with a random number string embedded in it: 074859b7s87b6a87a6...
> I wait until I see this message and get confirmation from others that it
> has been received.
>
> Then, I send another message specifying a functional relationship between
> that random string and my key.  Maybe it is the MD5 hash of my key, or
> something more complicated.
>

The spooks will replace your key hash value 07485... with theirs 46123... 
on all outgoing messages from your node, and will also replace 46123...
with 07485... on all incoming messages.

>
>     (stuff deleted)
>
> Worse, I can conceal the random string in the letter frequencies of an
> innocuous-appearing message, and later reveal the secret to allow the
> interpretation of a hidden message which includes my public key.

This is a lot more promising. Kahn's book relates that during the war
there were large numbers of spooks engaged in looking for hidden messages
in telex traffic, postcards etc. They used to change messages to see if
this would elicit a response. Eg a postcard saying `father has deceased'
would be changed to `father has died' at which a dumb spy would give
himself away by replying `has father died or deceased?'

It has been reported in the UK press that, at Maggie's orders, the spooks
rewrote the print routines used by PCs in the Cabinet Office so that each
user's identity was encoded in the word spacing of documents he printed
out. This is so that if a document was leaked, the investigators could
find out where it came from.

The problem with steganography is that once the method is known to the
spooks they'll watch out for it. Once they spot a text with a hidden 
message they'll rewrite it for you or start other active spoofing 
measures such as message replacement. Having to invent a new means of
hiding messages with each of your correpsondents defeats the object of
public key cryptography; you might as well agree secret keys with them.

So can there in fact exist a published method of steganography which can
be widely implemented in free software, but such that the spooks won't be
able to tell whether a given message contains a hidden message or not?

My idea: key the string encoding. 

Let K be a secret key of 127 bits. For each succesive 40 bytes of text,
concatenate the key with it, giving 447 bits, which is input to the 
secure hash algorithm. Take the least significant bit of the result to
be the next bit of the higgen message.

This can be programmed into a text editor: you input your secret key
and the hidden message, and start to type. About every 80 characters, 
the terminal beeps to tell you that the latest hidden text bit is wrong. 
You delete the last few words and rephrase. This should not be too hard 
to put in gnuemacs!

You can then reveal the hidden message at any time by publishing the key.

You might try to hide text automatically by varying word spacing or line
lengths, but this could be detected automatically. The point about using
a keyed steganographic technique together with human choice of text changes
is that without knowing your key the spooks can't tell what message you 
have encoded (if any) or mess about with it in any constructive way.

Ross
