%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPCOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 20 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Helvetica-Bold FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
3 0 /Helvetica FMFONTDEFINE
4 0 /Times-BoldItalic FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
6 0 /Courier FMFONTDEFINE
7 0 /Times-Italic FMFONTDEFINE
8 0 /Helvetica-BoldOblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(1\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
200.52 36 483.9 47.99 R
7 X
V
0 X
(FN/Erik Nyquist & Mats Henricson) 200.52 39.99 T
72 50.99 576 50.99 2 L
7 X
V
2 Z
0 X
N
0 7 Q
(Author) 72 724.23 T
72.86 708.25 272.38 720.24 R
7 X
V
0 12 Q
0 X
(FN/Mats Henricson and Erik Nyquist) 72.86 712.24 T
0 7 Q
(Approved by) 72 700.22 T
72.86 684.24 272.38 696.23 R
7 X
V
0 X
(Title) 72 676.24 T
0 14 Q
(Rek. 1) 73.75 662.89 T
(Programming in C++, Rules and Recommendations) 110.28 662.89 T
72 657 576 657 2 L
N
0 7 Q
(Belongs to) 468 706.23 T
468.86 690.25 535.65 702.24 R
7 X
V
72 72 576 648 R
V
1 36 Q
0 X
(Programming in C++) 146.97 624 T
(Rules) 274.99 548 T
(and) 292 510 T
(Recommendations) 162.99 472 T
2 12 Q
(Copyright \050C\051 1990-1992 by) 252.54 390 T
0 F
(Ellemtel Telecommunication Systems Laboratories) 200.91 374 T
(Box 1505) 300.51 358 T
(125 25 \200lvsj\232) 290.02 342 T
(Sweden) 305.01 326 T
(Tel: int + 46 8 727 30 00) 264.15 310 T
0.35 (Permission is granted to any individual or institution to use, copy, modify, and distribute this document,) 72 286 P
(provided that this complete copyright and permission notice is maintained intact in all copies.) 72 272 T
0.18 (Ellemtel Telecommunication Systems Laboratories makes no representations about the suitability of this) 72 248 P
0.17 (document or the examples described herein for any purpose. It is provided \322as is\323 without any expressed) 72 234 P
(or implied warranty.) 72 220 T
0 10 Q
(Original translation from Swedish by Joseph Supanich) 214.9 101.33 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(2\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(3\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
244.15 640.06 142.87 640.06 2 L
0 X
V
0.88 H
N
1 F
(Table of Contents) 142.87 641.33 T
1 10 Q
(1) 72 623.33 T
(Introduction) 142.87 623.33 T
(..........................................................................................) 202.83 623.33 T
(5) 454.68 623.33 T
(2) 72 605.33 T
(Terminology) 142.87 605.33 T
(.........................................................................................) 205.61 605.33 T
(7) 454.68 605.33 T
(3) 72 587.33 T
(General Recommendations) 142.87 587.33 T
(.................................................................) 272.29 587.33 T
(9) 454.68 587.33 T
(4) 72 569.33 T
(Source Code in Files) 142.87 569.33 T
(...........................................................................) 244.51 569.33 T
(10) 454.68 569.33 T
3 F
(4.1) 72 551.33 T
(Structure of Code) 142.87 551.33 T
(...................................................................................) 222.28 551.33 T
(10) 454.68 551.33 T
(4.2) 72 536.33 T
(Naming Files) 142.87 536.33 T
(..........................................................................................) 202.83 536.33 T
(11) 454.68 536.33 T
(4.3) 72 521.33 T
(Comments) 142.87 521.33 T
(..............................................................................................) 191.71 521.33 T
(12) 454.68 521.33 T
(4.4) 72 506.33 T
(Include Files) 142.87 506.33 T
(...........................................................................................) 200.05 506.33 T
(14) 454.68 506.33 T
1 F
(5) 72 488.33 T
(Assigning Names) 142.87 488.33 T
(.................................................................................) 227.84 488.33 T
(17) 454.68 488.33 T
(6) 72 470.33 T
(Style) 142.87 470.33 T
(......................................................................................................) 169.49 470.33 T
(21) 454.68 470.33 T
3 F
(6.1) 72 452.33 T
(Classes) 142.87 452.33 T
(..................................................................................................) 180.6 452.33 T
(21) 454.68 452.33 T
(6.2) 72 437.33 T
(Functions) 142.87 437.33 T
(...............................................................................................) 188.94 437.33 T
(23) 454.68 437.33 T
(6.3) 72 422.33 T
(Compound Statements) 142.87 422.33 T
(..........................................................................) 247.28 422.33 T
(24) 454.68 422.33 T
(6.4) 72 407.33 T
(Flow Control Statements) 142.87 407.33 T
(........................................................................) 252.84 407.33 T
(24) 454.68 407.33 T
(6.5) 72 392.33 T
(Pointers and References) 142.87 392.33 T
(.......................................................................) 255.62 392.33 T
(25) 454.68 392.33 T
(6.6) 72 377.33 T
(Miscellaneous) 142.87 377.33 T
(........................................................................................) 208.38 377.33 T
(26) 454.68 377.33 T
1 F
(7) 72 359.33 T
(Classes) 142.87 359.33 T
(.................................................................................................) 183.38 359.33 T
(27) 454.68 359.33 T
3 F
(7.1) 72 341.33 T
(Considerations Regarding Access Rights) 142.87 341.33 T
(..............................................) 325.08 341.33 T
(27) 454.68 341.33 T
(7.2) 72 326.33 T
(Inline Functions) 142.87 326.33 T
(......................................................................................) 213.94 326.33 T
(29) 454.68 326.33 T
(7.3) 72 311.33 T
(Friends) 142.87 311.33 T
(...................................................................................................) 177.82 311.33 T
(29) 454.68 311.33 T
(7.4) 72 296.33 T
(const Member Functions) 142.87 296.33 T
(........................................................................) 252.84 296.33 T
(30) 454.68 296.33 T
(7.5) 72 281.33 T
(Constructors and Destructors) 142.87 281.33 T
(................................................................) 275.07 281.33 T
(32) 454.68 281.33 T
(7.6) 72 266.33 T
(Assignment Operators) 142.87 266.33 T
(...........................................................................) 244.51 266.33 T
(39) 454.68 266.33 T
(7.7) 72 251.33 T
(Operator Overloading) 142.87 251.33 T
(............................................................................) 241.73 251.33 T
(41) 454.68 251.33 T
(7.8) 72 236.33 T
(Member Function Return Types) 142.87 236.33 T
(.............................................................) 283.4 236.33 T
(41) 454.68 236.33 T
(7.9) 72 221.33 T
(Inheritance) 142.87 221.33 T
(.............................................................................................) 194.49 221.33 T
(42) 454.68 221.33 T
1 F
(8) 72 203.33 T
(Class Templates) 142.87 203.33 T
(...................................................................................) 222.28 203.33 T
(43) 454.68 203.33 T
(9) 72 185.33 T
(Functions) 142.87 185.33 T
(..............................................................................................) 191.71 185.33 T
(44) 454.68 185.33 T
3 F
(9.1) 72 167.33 T
(Function Arguments) 142.87 167.33 T
(...............................................................................) 233.39 167.33 T
(44) 454.68 167.33 T
(9.2) 72 152.33 T
(Function Overloading) 142.87 152.33 T
(.............................................................................) 238.95 152.33 T
(46) 454.68 152.33 T
(9.3) 72 137.33 T
(Formal Arguments) 142.87 137.33 T
(.................................................................................) 227.84 137.33 T
(46) 454.68 137.33 T
(9.4) 72 122.33 T
(Return Types and Values) 142.87 122.33 T
(......................................................................) 258.4 122.33 T
(47) 454.68 122.33 T
(9.5) 72 107.33 T
(Inline Functions) 142.87 107.33 T
(......................................................................................) 213.94 107.33 T
(48) 454.68 107.33 T
(9.6) 72 92.33 T
(Temporary Objects) 142.87 92.33 T
(................................................................................) 230.61 92.33 T
(49) 454.68 92.33 T
(9.7) 72 77.33 T
(General) 142.87 77.33 T
(..................................................................................................) 180.6 77.33 T
(50) 454.68 77.33 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(4\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 10 Q
0 X
(10) 36 641.33 T
(Constants) 106.87 641.33 T
(.............................................................................................) 158.37 641.33 T
(51) 418.68 641.33 T
(11) 36 623.33 T
(Variables) 106.87 623.33 T
(...............................................................................................) 152.82 623.33 T
(52) 418.68 623.33 T
(12) 36 605.33 T
(Pointers and References) 106.87 605.33 T
(.....................................................................) 225.06 605.33 T
(54) 418.68 605.33 T
(13) 36 587.33 T
(Type Conversions) 106.87 587.33 T
(................................................................................) 194.49 587.33 T
(57) 418.68 587.33 T
(14) 36 569.33 T
(Flow Control Structures) 106.87 569.33 T
(......................................................................) 222.28 569.33 T
(65) 418.68 569.33 T
(15) 36 551.33 T
(Expressions) 106.87 551.33 T
(..........................................................................................) 166.71 551.33 T
(69) 418.68 551.33 T
(16) 36 533.33 T
(Memory Allocation) 106.87 533.33 T
(...............................................................................) 197.27 533.33 T
(70) 418.68 533.33 T
(17) 36 515.33 T
(Fault Handling) 106.87 515.33 T
(......................................................................................) 177.82 515.33 T
(72) 418.68 515.33 T
(18) 36 497.33 T
(Portable Code) 106.87 497.33 T
(.......................................................................................) 175.04 497.33 T
(74) 418.68 497.33 T
3 F
(18.1) 36 479.33 T
(Data Abstraction) 106.87 479.33 T
(....................................................................................) 183.38 479.33 T
(74) 418.68 479.33 T
(18.2) 36 464.33 T
(Sizes of Types) 106.87 464.33 T
(.......................................................................................) 175.04 464.33 T
(75) 418.68 464.33 T
(18.3) 36 449.33 T
(Type Conversions) 106.87 449.33 T
(..................................................................................) 188.94 449.33 T
(75) 418.68 449.33 T
(18.4) 36 434.33 T
(Data Representation) 106.87 434.33 T
(..............................................................................) 200.05 434.33 T
(75) 418.68 434.33 T
(18.5) 36 419.33 T
(Underflow/Overflow) 106.87 419.33 T
(................................................................................) 194.49 419.33 T
(76) 418.68 419.33 T
(18.6) 36 404.33 T
(Order of Execution) 106.87 404.33 T
(.................................................................................) 191.71 404.33 T
(76) 418.68 404.33 T
(18.7) 36 389.33 T
(Temporary Objects) 106.87 389.33 T
(................................................................................) 194.49 389.33 T
(79) 418.68 389.33 T
(18.8) 36 374.33 T
(Pointer Arithmetic) 106.87 374.33 T
(...................................................................................) 186.16 374.33 T
(79) 418.68 374.33 T
1 F
(19) 36 356.33 T
(References) 106.87 356.33 T
(............................................................................................) 161.15 356.33 T
(81) 418.68 356.33 T
(20) 36 338.33 T
(Summary of Rules) 106.87 338.33 T
(...............................................................................) 197.27 338.33 T
(83) 418.68 338.33 T
(21) 36 320.33 T
(Summary of Recommendations) 106.87 320.33 T
(.........................................................) 258.4 320.33 T
(85) 418.68 320.33 T
(22) 36 302.33 T
(Summary of Portability Recommendations) 106.87 302.33 T
(......................................) 311.19 302.33 T
(87) 418.68 302.33 T
(Appendix) 36 284.33 T
(Form for Rule Change Request) 106.87 284.33 T
(.........................................................) 258.4 284.33 T
(88) 418.68 284.33 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(5\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(1) 72 640 T
212.82 638.73 142.87 638.73 2 L
V
0.88 H
N
(Introduction) 142.87 640 T
0 F
4.28 (The purpose of this document is to define) 72 610 P
4 F
4.28 (one) 308.74 610 P
0 F
4.28 ( style of programming in C++. The rules and) 326.73 610 P
0.34 (recommendations presented here are not final, but should serve as a basis for continued work with C++.) 72 596 P
2.5 (This collection of rules should be seen as a dynamic document; suggestions for improvements are) 72 582 P
-0.03 (encouraged. A form for requesting new rules or changes to rules has been included as an appendix to this) 72 568 P
(document. Suggestions can also be made via e-mail to one of the following addresses:) 72 554 T
5 F
(erik.nyquist@eua.ericsson.se) 72 538 T
(mats.henricson@eua.ericsson.se) 72 524 T
0 F
(Programs that are developed according to these rules and recommendations should be:) 72 500 T
(-) 72 480 T
(correct) 132.66 480 T
(-) 72 464 T
(easy to maintain.) 132.66 464 T
(In order to reach these goals, the programs should:) 72 440 T
(-) 72 420 T
(have a consistent style,) 132.66 420 T
(-) 72 404 T
(be easy to read and understand,) 132.66 404 T
(-) 72 388 T
(be portable to other architectures,) 132.66 388 T
(-) 72 372 T
(be free of common types of errors,) 132.66 372 T
(-) 72 356 T
(be maintainable by different programmers.) 132.66 356 T
1.4 (Questions of design, such as how to design a class or a class hierarchy, are beyond the scope of this) 72 332 P
(document. Recommended books on these subjects are indicated in the chapter entitled \322References\323.) 72 318 T
-0.23 (In order to obtain insight into how to effectively deal with the most difficult aspects of C++, the examples) 72 294 P
-0.23 (of code which are provided should be carefully studied. C++ is a difficult language in which there may be) 72 280 P
0.43 (a very fine line between a feature and a bug. This places a large responsibility upon the programmer. In) 72 266 P
(the same way as for C, C++ allows a programmer to write compact and, in some sense, unreadable code.) 72 252 T
0.4 (Code written in) 72 228 P
5 F
0.97 (bold) 150.83 228 P
0 F
0.4 ( type is meant to serve as a warning. The examples often include class definitions) 179.62 228 P
0.26 (having the format ") 72 214 P
5 F
0.63 (class <name> {};) 165.95 214 P
0 F
0.26 (". These are included so that the examples may be compiled;) 282.35 214 P
1.78 (it is not recommended that class definitions be written in this way. In order to make the code more) 72 200 P
-0.07 (compact, the examples provided do not always follow the rules. In such cases, the rule which is broken is) 72 186 P
(indicated.) 72 172 T
0.39 (Many different C++ implementations are in use today. Most are based on the C++ Language System by) 72 148 P
1.09 (AT&T. The component of this product which translates C++ code to C is called Cfront. The different) 72 134 P
0.02 (versions of Cfront \0502.0, 2.1 & 3.0 are currently in use\051 are referred to in order to point out the differences) 72 120 P
(between different implementations.) 72 106 T
2 F
(Rule 0) 72 82 T
(Every time a) 142.87 82 T
231.8 80.81 211.15 80.81 2 L
V
1.14 H
N
(rule) 211.15 82 T
( is broken, this must be clearly documented.) 231.8 82 T
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(6\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(7\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(2) 72 640 T
214.84 638.73 142.87 638.73 2 L
V
0.88 H
N
(Terminology) 142.87 640 T
4 F
(1) 72 610 T
0 F
(An) 114.69 610 T
4 F
(identifier) 132.35 610 T
0 F
( is a name which is used to refer to a variable, constant, function or type in C++.) 177.66 610 T
-0.12 (When necessary, an identifier may have an internal structure which consists of a prefix, a name,) 114.69 596 P
(and a suffix \050in that order\051.) 114.69 582 T
4 F
(2) 72 560 T
0 F
(A) 114.69 560 T
4 F
(class) 126.35 560 T
0 F
( is a user-defined data type which consists of data elements and functions which operate) 150.34 560 T
-0.04 (on that data. In C++, this may be declared as a) 114.69 546 P
5 F
-0.09 (class) 340 546 P
0 F
-0.04 (; it may also be declared as a) 375.98 546 P
5 F
-0.09 (struct) 516.91 546 P
0 F
-0.04 ( or) 560.09 546 P
-0.72 (a) 114.69 532 P
5 F
-1.73 (union) 122.3 532 P
0 F
-0.72 (. Data defined in a class is called) 158.28 532 P
4 F
-0.72 (member data) 312.73 532 P
0 F
-0.72 ( and functions defined in a class are called) 376.31 532 P
4 F
(member functions.) 114.69 518 T
(3) 72 496 T
0 F
(A) 114.69 496 T
5 F
(class) 126.35 496 T
0 F
(/) 162.33 496 T
5 F
(struct) 165.66 496 T
0 F
(/) 208.84 496 T
5 F
(union) 212.18 496 T
0 F
( is said to be an) 248.16 496 T
4 F
(abstract data type) 325.44 496 T
0 F
( if it does not have any public or) 412.06 496 T
(protected member data.) 114.69 482 T
4 F
(4) 72 460 T
0 F
(A) 114.69 460 T
4 F
(structure) 126.35 460 T
0 F
(is a user-defined type for which only public data is specified.) 174 460 T
4 F
(5) 72 438 T
(Public members) 114.69 438 T
0 F
(of a class are member data and member functions which are everywhere) 197.32 438 T
(accessible by specifying an instance of the class and the name.) 114.69 424 T
4 F
(6) 72 402 T
(Protected members) 114.69 402 T
0 F
(of a class are member data and member functions which are accessible by) 211.96 402 T
(specifying the name within member functions of derived classes.) 114.69 388 T
4 F
(7) 72 366 T
0 F
(A) 114.69 366 T
4 F
(class template) 126.35 366 T
0 F
( defines a family of classes. A new class may be created from a class template) 195.31 366 T
-0.29 (by providing values for a number of arguments. These values may be names of types or constant) 114.69 352 P
(expressions.) 114.69 338 T
4 F
(8) 72 316 T
0 F
(A) 114.69 316 T
4 F
(function template) 126.35 316 T
0 F
( defines a family of functions. A new function may be created from a) 213.32 316 T
-0.5 (function template by providing values for a number of arguments. These values may be names of) 114.69 302 P
(types or constant expressions.) 114.69 288 T
4 F
(9) 72 266 T
0 F
(An) 114.69 266 T
4 F
(enumeration type) 132.35 266 T
0 F
( is an explicitly declared set of symbolic integral constants. In C++ it is) 218.64 266 T
(declared as an) 114.69 252 T
5 F
(enum) 185.62 252 T
0 F
(.) 214.41 252 T
4 F
(10) 72 230 T
0 F
(A) 114.69 230 T
4 F
(typedef) 126.35 230 T
0 F
(is another name for a data type, specified in C++ using a) 164.65 230 T
5 F
(typedef) 438.98 230 T
0 F
( declaration.) 489.36 230 T
4 F
(11) 72 208 T
0 F
(A) 114.69 208 T
4 F
(reference) 126.35 208 T
0 F
( is another name for a given variable. In C++, the \324address of\325 \050) 172.97 208 T
6 F
(&) 476.59 208 T
0 F
(\051 operator is used) 483.79 208 T
(immediately after the data type to indicate that the declared variable, constant, or function) 114.69 194 T
(argument is a reference.) 114.69 180 T
4 F
(12) 72 158 T
0 F
(A) 114.69 158 T
4 F
(macro) 126.35 158 T
0 F
( is a name for a text string which is defined in a) 157.66 158 T
5 F
(#define) 388.5 158 T
0 F
( statement. When this name) 438.88 158 T
(appears in source code, the compiler replaces it with the defined text string.) 114.69 144 T
4 F
(13) 72 122 T
0 F
(A) 114.69 122 T
4 F
(constructor) 126.35 122 T
0 F
( is a function which initializes an object.) 182.99 122 T
4 F
(14) 72 100 T
0 F
-0.56 (A) 114.69 100 P
4 F
-0.56 (copy constructor) 125.79 100 P
0 F
-0.56 ( is a constructor in which the first argument is a reference to an object that has) 207.51 100 P
(the same type as the object to be initialized.) 114.69 86 T
52 606 54 618 R
V
52 556 54 568 R
V
52 492 54 504 R
V
52 434 54 468 R
V
52 398 54 410 R
V
52 362 54 374 R
V
52 312 54 324 R
V
52 262 54 274 R
V
52 204 54 238 R
V
52 154 54 166 R
V
52 96 54 130 R
V
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(8\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
4 F
0 X
(15) 36 640 T
0 F
(A) 78.69 640 T
4 F
(default constructor) 90.35 640 T
0 F
(is a constructor which needs no arguments.) 187.64 640 T
4 F
(16) 36 618 T
0 F
(An) 78.69 618 T
4 F
( overloaded function name) 93.35 618 T
0 F
( is a name which is used for two or more functions or member) 225.61 618 T
(functions having different types) 78.69 600.53 T
0 10 Q
(1) 231.59 605.33 T
0 12 Q
(.) 236.58 600.53 T
4 F
(17) 36 578.53 T
0 F
(An) 78.69 578.53 T
4 F
( overridden) 93.35 578.53 T
0 F
( member function is a member function in a base class which is re-defined in a) 149.65 578.53 T
(derived class. Such a member function is declared) 78.69 564.53 T
5 F
(virtual) 322.17 564.53 T
0 F
(.) 372.54 564.53 T
4 F
(18) 36 542.53 T
0 F
(A) 78.69 542.53 T
4 F
(pre-defined data type) 90.35 542.53 T
0 F
(is a type which is defined in the language itself, such as) 197.27 542.53 T
5 F
(int) 466.75 542.53 T
0 F
(.) 488.34 542.53 T
4 F
(19) 36 520.53 T
0 F
(A) 78.69 520.53 T
4 F
(user-defined data type) 90.35 520.53 T
0 F
(is a type which is defined by a programmer in a) 202.61 520.53 T
5 F
(class) 434.11 520.53 T
0 F
(,) 470.09 520.53 T
5 F
(struct) 476.08 520.53 T
0 F
(,) 519.26 520.53 T
5 F
(union) 78.69 506.53 T
0 F
(,) 114.67 506.53 T
5 F
(enum) 120.67 506.53 T
0 F
(, or) 149.45 506.53 T
5 F
(typedef) 168.44 506.53 T
0 F
( definition or as an instantiation of a class template.) 218.81 506.53 T
4 F
(20) 36 484.53 T
0 F
(A) 78.69 484.53 T
4 F
(pure virtual function) 90.35 484.53 T
0 F
(is a member function for which no definition is provided. Pure virtual) 196.65 484.53 T
(functions are specified in) 78.69 470.53 T
4 F
(abstract base classes) 202.6 470.53 T
0 F
( and must be defined \050overridden\051 in derived) 303.87 470.53 T
(classes.) 78.69 456.53 T
4 F
(21) 36 434.53 T
0 F
(An) 78.69 434.53 T
4 F
(accessor) 96.35 434.53 T
0 F
( is a function which returns the value of a data member.) 138.31 434.53 T
4 F
(22) 36 412.53 T
0 F
(A) 78.69 412.53 T
4 F
(forwarding function) 90.35 412.53 T
0 F
( is a function which does nothing more than call another function.) 190.65 412.53 T
4 F
(23) 36 390.53 T
0 F
(A) 78.69 390.53 T
4 F
(constant member function) 90.35 390.53 T
0 F
( is a function which may not modify data members.) 220.3 390.53 T
4 F
(24) 36 368.53 T
0 F
(An) 78.69 368.53 T
4 F
(exception) 96.35 368.53 T
0 F
( is a run-time program anomaly that is detected in a function or member function.) 143.65 368.53 T
(Exception handling provides for the uniform management of exceptions. When an exception is) 78.69 354.53 T
(detected, it is) 78.69 340.53 T
4 F
(thrown) 145.32 340.53 T
0 F
( \050using a) 180.65 340.53 T
5 F
(throw) 224.95 340.53 T
0 F
( expression\051 to the exception handler.) 260.93 340.53 T
4 F
(25) 36 318.53 T
0 F
-0.69 (A) 78.69 318.53 P
4 F
-0.69 (catch clause) 89.67 318.53 P
0 F
-0.69 (is code that is executed when an exception of a given type is raised. The definition) 152.26 318.53 P
(of an exception handler begins with the keyword) 78.69 304.53 T
5 F
(catch) 315.85 304.53 T
0 F
(.) 351.83 304.53 T
4 F
(26) 36 282.53 T
0 F
-0.06 (An) 78.69 282.53 P
4 F
-0.06 (abstract base class) 96.28 282.53 P
0 F
-0.06 ( is a class from which no objects may be created; it is only used as a base) 187.43 282.53 P
(class for the derivation of other classes. A class is abstract if it includes at least one member) 78.69 268.53 T
(function that is declared as) 78.69 254.53 T
4 F
(pure virtual) 210.26 254.53 T
0 F
(.) 268.57 254.53 T
4 F
(27) 36 232.53 T
0 F
-0.42 (An) 78.69 232.53 P
4 F
-0.42 (iterator) 95.93 232.53 P
0 F
-0.42 ( is an object which, when invoked, returns the) 132.58 232.53 P
7 F
-0.42 (next) 352.32 232.53 P
0 F
-0.42 ( object from a collection of objects.) 372.3 232.53 P
4 F
(28) 36 207.07 T
0 F
(The) 78.69 207.07 T
4 F
(scope) 100.34 207.07 T
0 F
( of a name refers to the context) 127.65 207.07 T
0 10 Q
(2) 276.52 211.87 T
0 12 Q
( in which it is visible.) 281.52 207.07 T
4 F
(29) 36 185.07 T
0 F
(A) 78.69 185.07 T
4 F
(compilation unit) 90.35 185.07 T
0 F
( is the source code \050after preprocessing\051 that is submitted to a compiler for) 172 185.07 T
(compilation \050including syntax checking\051.) 78.69 171.07 T
36 96 540 111 C
45 109 189 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
(1. The type of a function is given by its return type and the type of its arguments.) 54 89.33 T
(2. Context, here, means the functions or blocks in which a given variable name can be used.) 54 77.33 T
16 614 18 648 R
V
16 574.53 18 586.53 R
V
16 516.53 18 550.53 R
V
16 480.53 18 492.53 R
V
16 364.53 18 442.53 R
V
16 314.53 18 326.53 R
V
16 278.53 18 290.53 R
V
16 181.07 18 240.53 R
V
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(9\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(3) 72 640 T
298.16 638.73 142.87 638.73 2 L
V
0.88 H
N
(General Recommendations) 142.87 640 T
0 F
(Rec. 1) 72 610 T
-0.35 (Optimize code only if you) 142.87 610 P
4 F
-0.35 (know) 270.05 610 P
0 F
-0.35 (that you have a performance problem. Think twice before) 299.36 610 P
(you begin.) 142.87 596 T
(Rec. 2) 72 576 T
(If you use a C++ compiler that is based on Cfront, always compile with the +w flag set to) 142.87 576 T
(eliminate as many warnings as possible.) 142.87 562 T
0.89 (Various tests are said to have demonstrated that programmers generally spend a lot of time optimizing) 72 538 P
-0.22 (code that is never executed. If your program is too slow, use) 72 524 P
5 F
-0.54 (gprof++) 361.75 524 P
0 F
-0.22 ( or an equivalent tool to determine) 412.13 524 P
(the exact nature of the problem before beginning to optimize.) 72 510 T
0.6 (Code that is accepted by a compiler is not always correct \050in accordance with the definition of the C++) 72 486 P
-0.25 (language\051. Two reasons for this are that changes are made in the language and that compilers may contain) 72 472 P
0.02 (bugs. In the short term, very little can be done about the latter. In order to reduce the amount of code that) 72 458 P
-0.7 (must be rewritten for each new compiler release, it is common to let the compiler provide warnings  instead) 72 444 P
0.85 (of reporting errors for such code until the next major release. Cfront provides the +w flag to direct the) 72 430 P
(compiler to give warnings for these types of language changes.) 72 416 T
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(10\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 F
0 X
(4) 36 640 T
225.51 638.73 106.87 638.73 2 L
V
0.88 H
N
(Source Code in Files) 106.87 640 T
(4.1) 36 596 T
(Structure of Code) 106.87 596 T
0 F
(Rule 1) 36 566 T
(Include files in C++ always have the file name extension \322.hh\323.) 106.87 566 T
(Rule 2) 36 546 T
(Implementation files in C++ always have the file name extension \322.cc\323.) 106.87 546 T
(Rule 3) 36 526 T
(Inline definition files always have the file name extension \322.icc\323.) 106.87 526 T
(Rec. 3) 36 506 T
(An include file should not contain more than one class definition.) 106.87 506 T
(Rec. 4) 36 486 T
(Divide up the definitions of member functions or functions into as many files as possible.) 106.87 486 T
(Rec. 5) 36 466 T
-0.74 (Place machine-dependent code in a special file so that it may be easily located when porting) 106.87 466 P
(code from one machine to another.) 106.87 452 T
-0.06 (The purpose of these conventions is to provide a uniform interpretation of file names. One reason for this) 36 428 P
(is that it is easier to make tools which base their behaviour on the file name extension.) 36 414 T
0.53 (There are two kinds of include files in C++: those which contain code that is accepted by both ANSI-C) 36 390 P
-0.36 (and C++ compilers and those which contain code that is only accepted by C++ compilers. It is appropriate) 36 376 P
-0.35 (to distinguish between the two in order to avoid unpleasant compilation errors \050from using the wrong kind) 36 362 P
(of include file\051.) 36 348 T
-0.46 (If a \322.cc\323 file contains a large number of function definitions, the object file produced by the compiler may) 36 324 P
0.47 (be unnecessarily large. In order to obtain the smallest possible executable files, it is necessary to have a) 36 310 P
0.02 (separate file for each function definition. This is because the standard UNIX linker) 36 296 P
5 F
0.05 (ld) 436.6 296 P
0 F
0.02 ( links all functions) 450.99 296 P
-0.63 (in an object file even if only one of them is actually used. It is especially important to remember that virtual) 36 282 P
0.16 (functions are always linked) 36 264.53 P
0 10 Q
0.13 (1) 168.05 269.33 P
0 12 Q
0.16 (. On the other hand, there are problems in managing a large number of files,) 173.04 264.53 P
-0.57 (since sufficiently powerful tools are not currently available. Also, the time necessary to compile a program) 36 250.53 P
(consisting of a large number of files is longer.) 36 236.53 T
1.42 (Some debuggers cannot debug inline functions. By placing inline functions in a separate file and  by) 36 212.53 P
-0.04 (including that file in the implementation file, thus treating the inline functions as ordinary functions,  it is) 36 198.53 P
1.13 (possible to debug the functions while testing the program. For this to work some special preprocessor) 36 184.53 P
0.24 (techniques must be used) 36 167.07 P
0 10 Q
0.2 (2) 153.64 171.87 P
0 12 Q
0.24 (. The inline definition file must not be included by the include file for the class) 158.64 167.07 P
(and the keyword \324inline\325 must be removed.) 36 153.07 T
0.66 (When tools for managing C++ code are not available, it is much easier for those who use and maintain) 36 129.07 P
0.98 (classes if there is only one class definition in each file and if implementations of member functions in) 36 115.07 P
36 96 540 111 C
45 109 189 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
(1. Compilers based on Cfront refer to these via so-called virtual tables.) 54 89.33 T
(2. See Example 1!) 54 77.33 T
FMENDPAGE
%%EndPage: "10" 11
%%Page: "11" 11
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(11\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
0 X
(different classes are not present in the same file.) 72 640 T
2 F
(Exception to Rule 1:) 72 620 T
0 F
(Include files which contain code that is accepted by both C and C++ compilers) 185.39 620 T
(should have the file name extension \322.h\323.) 185.39 606 T
2 F
(Exception to Rule 2:) 72 586 T
0 F
-0.87 (When using a compiler that does not accept the extension \322.cc\323, the extension  \322.C\323) 185.39 586 P
(is used instead.) 185.39 572 T
2 F
(Exception to Rule 3:) 72 552 T
0 F
(No exceptions.) 185.39 552 T
2 10 Q
(Example 1) 72 515.33 T
(Inline  definitions in a separate file for conditional compilation) 151.29 515.33 T
6 F
(// AnyClass.hh) 86.17 491.33 T
(#ifndef OUTLINE) 86.17 479.33 T
(#include "AnyClass.icc") 86.17 467.33 T
(#endif) 86.17 455.33 T
(//AnyClass.cc) 86.17 431.33 T
(#ifdef OUTLINE) 86.17 419.33 T
(#define inline) 86.17 407.33 T
(#include "AnyClass.icc") 86.17 395.33 T
(#undef inline) 86.17 383.33 T
(#endif) 86.17 371.33 T
1 12 Q
(4.2) 72 328 T
(Naming Files) 142.87 328 T
0 F
(Rec. 6) 72 298 T
(Always give a file a name that is unique in as large a context as possible.) 142.87 298 T
(Rec. 7) 72 278 T
(An include file for a class should have a file name of the form <class name> + extension.) 142.87 278 T
(Use uppercase and lowercase letters in the same way as in the source code.) 142.87 264 T
-0.24 (There is always a risk for name collisions when the file name is part of identifier names that are generated) 72 240 P
(by the compiler. This is a problem in using any Cfront-based compiler.) 72 226 T
7 10 Q
0.09 (AT&T\325s Cfront-based compiler creates two functions for every file in order to call constructors and destructors) 127.96 203.33 P
(of static objects in the proper order. These functions are named:) 127.96 191.33 T
(char __sti__file_cc___Fv\050\051;  //filename is file.cc) 127.96 179.33 T
(char __std__file_cc___Fv\050\051;  //filename is file.cc) 127.96 167.33 T
0.38 (It is easily understood that if a program has two files with the same name but in different subdirectories, there) 127.96 155.33 P
(will be name collisions between the functions generated above.) 127.96 143.33 T
0 12 Q
2.46 (Since class names must generally be unique within a large context, it is appropriate to utilize this) 72 120 P
-0.5 (characteristic when naming its include file. This convention makes it easy to locate a class definition using) 72 106 P
(a file-based tool.) 72 92 T
66.09 152.04 122.78 209.86 C
73.18 159.69 115.7 202.21 R
3 X
0 K
V
0.5 H
0 Z
0 X
N
4 X
90 450 18.17 18.67 94.44 180.95 G
1 H
0 X
90 450 18.17 18.67 94.44 180.95 A
1 36 Q
(!) 88.44 167.83 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "11" 12
%%Page: "12" 12
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(12\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 F
0 X
(4.3) 36 640 T
(Comments) 106.87 640 T
0 F
(Rule 4) 36 610 T
(Every file that contains source code must be documented with an introductory comment) 106.87 610 T
(that provides information on the file name and its contents.) 106.87 596 T
(Rule 5) 36 576 T
(All files must include copyright information.) 106.87 576 T
(Rule 6) 36 556 T
(All comments are to be written in English.) 106.87 556 T
(Rec. 8) 36 536 T
(Write some descriptive comments before every function.) 106.87 536 T
(Rec. 9) 36 516 T
(Use) 106.87 516 T
5 F
(//) 128.51 516 T
0 F
( for) 142.91 516 T
4 F
(comments.) 162.89 516 T
0 F
0.24 (It is necessary to document source code. This should be compact and easy to find. By properly choosing) 36 492 P
1.06 (names for variables, functions and classes and by properly structuring the code,  there is less need for) 36 478 P
(comments within the code.) 36 464 T
-0.25 (Note that comments in include files are meant for the users of classes, while comments in implementation) 36 440 P
(files are meant for those who maintain the classes.) 36 426 T
0.11 (All our code must be copyright marked. If the code has been developed over a period of years, each year) 36 402 P
(must be stated.) 36 388 T
1.45 (The standardization of comments makes it possible to automatically generate) 36 364 P
5 F
3.48 (man) 423.59 364 P
0 F
1.45 (-pages from source) 445.18 364 P
2.82 (code. This may be used to keep source code and documentation together until adequate tools for) 36 350 P
(information management are available.) 36 336 T
-0.04 (Comments are often said to be either) 36 312 P
4 F
-0.04 (strategic) 215.26 312 P
0 F
-0.04 ( or) 257.23 312 P
4 F
-0.04 (tactical) 273.14 312 P
0 F
-0.04 (. A strategic comment describes what a function) 309.12 312 P
0.28 (or section of code is intended to do, and is placed before this code. A tactical comment describes what a) 36 298 P
0.37 (single line of code is intended to do, and is placed, if possible, at the end of this line. Unfortunately, too) 36 284 P
0.45 (many tactical comments can make code unreadable. For this reason, it is recommended to primarily use) 36 270 P
(strategic comments, unless trying to explain very complicated code.) 36 256 T
-0.53 (If the characters) 36 232 P
5 F
-1.26 (//) 114.67 232 P
0 F
-0.53 ( are consistently used for writing comments, then the combination) 129.06 232 P
5 F
-1.26 (/* */) 443.91 232 P
0 F
-0.53 ( may be used) 478.63 232 P
1.01 (to make comments out of entire sections of code during the development and debugging phases. C++,) 36 218 P
(however, does not allow comments to be nested using) 36 204 T
5 F
(/* */) 297.83 204 T
0 F
(.) 333.81 204 T
2 F
(Exception to Rule 4:) 36 184 T
0 F
(No exceptions.) 149.39 184 T
2 F
(Exception to Rule 5:) 36 164 T
0 F
(No exceptions.) 149.39 164 T
2 F
(Exception to Rule 6:) 36 144 T
0 F
(No exceptions.) 149.39 144 T
FMENDPAGE
%%EndPage: "12" 13
%%Page: "13" 13
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(13\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 2) 72 641.33 T
(Documentation of a file) 151.29 641.33 T
6 F
(//) 86.17 617.33 T
(//  File:        test.cc) 86.17 605.33 T
(//  Description: This is a test program) 86.17 593.33 T
(//  Rev:         A) 86.17 581.33 T
(//  Created:     Thur. Oct 31, 1991, 12:30:14) 86.17 569.33 T
(//  Author:      Erik Nyquist) 86.17 557.33 T
(//  mail:        erik.nyquist@eua.ericsson.se) 86.17 545.33 T
(//) 86.17 533.33 T
(//  Copyright Ellemtel Utvecklings AB 1991) 86.17 521.33 T
(//  BOX 1505) 86.17 509.33 T
(//  125 25 ALVSJO) 86.17 497.33 T
(//  SWEDEN) 86.17 485.33 T
(//  tel int + 46 8 727 3000) 86.17 473.33 T
(//) 86.17 461.33 T
(//  The copyright to the computer program\050s\051 herein) 86.17 449.33 T
(//  is the property of Ellemtel Utvecklings AB, Sweden.) 86.17 437.33 T
(//  The program\050s\051 may be used and/or copied) 86.17 425.33 T
(only with) 356.02 425.33 T
(//  the written permission of) 86.17 413.33 T
(Ellemtel Utvecklings AB) 266.07 413.33 T
(//  or in accordance) 86.17 401.33 T
( with the terms and conditions) 206.11 401.33 T
(//  stipulated) 86.17 389.33 T
( in the agreement/contract under which) 170.13 389.33 T
(//  the) 86.17 377.33 T
( program\050s\051 have been supplied.) 128.15 377.33 T
(//) 86.17 365.33 T
2 F
(Example 3) 72 329.33 T
(Strategic and Tactical Comments) 151.29 329.33 T
6 F
(// THE NEXT TWO LINES ARE STRATEGIC COMMENTS) 86.17 305.33 T
(// This function does some complicated things. It works like this:) 86.17 293.33 T
(//  blah-blah-blah ...) 86.17 281.33 T
(int) 86.17 269.33 T
(insanelyGreatAndComplicatedFunction\050 int i \051) 86.17 257.33 T
({) 86.17 245.33 T
(int index = i++ + ++i * i-- - --i;  // THIS IS A TACTICAL COMMENT) 106.02 233.33 T
(return index;) 106.02 209.33 T
(}) 86.17 197.33 T
1 12 Q
(4.4) 72 154 T
(Include Files) 142.87 154 T
0 F
(Rule 7) 72 124 T
(Every) 142.87 124 T
4 F
(include file) 174.51 124 T
0 F
(must contain a mechanism that prevents multiple inclusions of the file.) 233.14 124 T
(Rule 8) 72 104 T
(When the following kinds of definitions are used \050in implementation files or in other) 142.87 104 T
(include files\051, they must be included as separate include files:) 142.87 90 T
FMENDPAGE
%%EndPage: "13" 14
%%Page: "14" 14
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(14\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
0 X
(\245) 64.35 640 T
(classes that are used as) 106.87 640 T
4 F
(base classe) 219.77 640 T
0 F
(s,) 274.07 640 T
(\245) 64.35 620 T
(classes that are used as) 106.87 620 T
4 F
(member variables) 219.77 620 T
0 F
(,) 307.38 620 T
(\245) 64.35 600 T
(classes that appear as) 106.87 600 T
4 F
(return types) 212.11 600 T
0 F
(or as) 274.08 600 T
4 F
(argument types) 300.06 600 T
0 F
( in function/member function) 375.69 600 T
(prototypes.) 106.87 586 T
(\245) 64.35 566 T
4 F
-0.5 (function prototypes) 106.87 566 P
0 F
-0.5 ( for functions/member functions used in) 201.99 566 P
4 F
-0.5 (inline member functions) 394.21 566 P
0 F
-0.5 (  that) 514.51 566 P
(are defined in the file.) 106.87 552 T
(Rule 9) 36 532 T
-0.06 (Definitions of classes that are only accessed via pointers \050) 106.87 532 P
5 F
-0.14 (*) 383.8 532 P
0 F
-0.06 (\051 or references \050) 391 532 P
5 F
-0.14 (&) 467.07 532 P
0 F
-0.06 (\051 shall) 474.27 532 P
4 F
-0.06 (not) 506.8 532 P
0 F
-0.06 ( be) 522.8 532 P
(included as include files.) 106.87 518 T
(Rule 10) 36 498 T
2 F
(Never) 106.87 498 T
0 F
(specify relative UNIX names in) 140.5 498 T
5 F
(#include) 296.04 498 T
0 F
( directives.) 353.61 498 T
(Rule 11) 36 478 T
(Every) 106.87 478 T
4 F
(implementation file) 138.51 478 T
0 F
( is to include the relevant files that contain:) 234.8 478 T
(\245) 64.35 458 T
(declarations of types and functions used in the functions that are implemented in the file.) 106.87 458 T
(\245) 64.35 438 T
-0.63 (declarations of) 106.87 438 P
4 F
-0.63 (variables) 179.54 438 P
0 F
-0.63 (and) 226.54 438 P
4 F
-0.63 (member functions) 246.22 438 P
0 F
-0.63 ( used in the functions that are implemented) 335.21 438 P
(in the file.) 106.87 424 T
(Rec. 10) 36 404 T
(Use the directive) 106.87 404 T
5 F
(#include "filename.hh") 191.13 404 T
0 F
( for user-prepared include files.) 349.45 404 T
(Rec. 11) 36 384 T
(Use the directive) 106.87 384 T
5 F
(#include <filename.hh>) 191.13 384 T
0 F
( for include files from libraries.) 349.45 384 T
(Rec. 12) 36 364 T
(Every implementation file should declare a local constant string that describes the file so) 106.87 364 T
(the UNIX command) 106.87 350 T
5 F
(what) 207.79 350 T
0 F
( can be used to obtain information on the file revision.) 236.57 350 T
(Rec. 13) 36 330 T
(Never include other files in an \322.icc\323 file.) 106.87 330 T
1.43 (The easiest way to avoid multiple includes of files is by using an) 36 306 P
5 F
3.44 (#ifndef/#define) 368.12 306 P
0 F
1.43 ( block in the) 476.06 306 P
(beginning of the file and an) 36 292 T
5 F
(#endif) 171.24 292 T
0 F
( at the end of the file.) 214.41 292 T
1.35 (The number of files included should be minimized. If a file is included in an include file, then every) 36 268 P
0.89 (implementation file that includes the second include file must be re-compiled whenever the first file is) 36 254 P
-0.37 (modified. A simple modification in one include file can make it necessary to re-compile a large number of) 36 240 P
(files.) 36 226 T
-0.12 (When only referring to pointers or references to types defined in a file, it is often not necessary to include) 36 202 P
0.32 (that file. It may suffice to use a forward declaration to inform the compiler that the class exists. Another) 36 188 P
(alternative is to precede each declaration of a pointer to the class with the keyword) 36 174 T
5 F
(class) 436.02 174 T
0 F
(.) 472 174 T
1.31 (True portable code is independent of the underlying operating system. For this reason, relative UNIX) 36 150 P
0 (search paths should be avoided when including files. The processing of such search paths depends on the) 36 136 P
0.36 (compiler and UNIX should not be taken for granted. Instead, search paths should be provided in \324make\325) 36 122 P
(files as options for the compiler.) 36 108 T
0.78 (If a file only contains information that is only needed in an implementation file, that file should not be) 36 84 P
FMENDPAGE
%%EndPage: "14" 15
%%Page: "15" 15
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(15\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
0 X
4.5 (included in another include file. Otherwise, when the information is no longer needed in the) 72 640 P
1.38 (implementation file, it may be necessary to re-compile each file that uses the interface defined in the) 72 626 P
(include file.) 72 612 T
0.16 (Every C++ course teaches the difference between the include directives for user-prepared and for library) 72 588 P
0.42 (include files. If the file name is bracketed between \322<\323 and \322>\323, the preprocessor will not search for the) 72 574 P
-0.64 (file in the default directory. This reduces the risk of unintended name collisions between user-prepared and) 72 560 P
(library include files.) 72 546 T
0.84 (By declaring a local constant string, the compiler becomes self-identifying. This may be used to easily) 72 522 P
0.33 (determine the version of the program that is used. The string must begin with the characters) 72 508 P
5 F
0.78 (@\050#\051) 519.91 508 P
0 F
0.33 ( to be) 548.7 508 P
(read by the UNIX) 72 494 T
5 F
(what) 161.26 494 T
0 F
( command.) 190.04 494 T
2 F
(Exception to Rule 7:) 72 474 T
0 F
(No exceptions.) 185.39 474 T
2 F
(Exception to Rule 8:) 72 454 T
0 F
(No exceptions.) 185.39 454 T
2 F
(Exception to Rule 9:) 72 434 T
0 F
(No exceptions.) 185.39 434 T
2 F
(Exception to Rule 10:) 72 414 T
0 F
(No exceptions.) 185.39 414 T
2 F
(Exception to Rule 11:) 72 394 T
0 F
(No exceptions.) 185.39 394 T
2 10 Q
(Example 4) 72 357.33 T
(Technique for preventing multiple inclusion of an include file) 151.29 357.33 T
6 F
(#ifndef FOO_HH) 86.17 333.33 T
(#define FOO_HH) 86.17 321.33 T
(// The rest of the file) 86.17 297.33 T
(#endif) 86.17 273.33 T
2 F
(Example 5) 72 237.33 T
(Never use explicit UNIX path names) 151.29 237.33 T
5 F
(// NOT RECOMMENDED) 86.17 213.33 T
(#include <../include/fnutt.h>) 86.17 201.33 T
(// NOT GUARANTEED TO WORK) 86.17 177.33 T
(#include <sys/socket.h>) 86.17 165.33 T
2 F
(Example 6) 72 129.33 T
(Local constant string for identifying implementation files.) 151.29 129.33 T
6 F
(static const char* sccsid =) 86.17 105.33 T
(\322@\050#\051 Exception.cc, rev. A, Copyright Ellemtel Utvecklings AB 1991\323;) 86.17 93.33 T
FMENDPAGE
%%EndPage: "15" 16
%%Page: "16" 16
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(16\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 7) 36 641.33 T
(Include file for the class PackableString) 115.29 641.33 T
6 F
(// file: PackableString.hh) 50.17 617.33 T
(#ifndef PACKABLESTRING_HH) 50.17 605.33 T
(#define PACKABLESTRING_HH) 50.17 593.33 T
(#include "String.hh") 50.17 569.33 T
(#include "Packable.hh") 50.17 557.33 T
(// It is not necessary to extern-declare class Buffer when) 50.17 533.33 T
(// each pointer declaration specifies the keyword class as shown below.) 50.17 521.33 T
(// An explicit extern-declaration makes the code easier to) 50.17 509.33 T
(// understand.) 50.17 497.33 T
(extern class Buffer;) 50.17 473.33 T
(class PackableString : public String, public Packable) 50.17 449.33 T
5 12 Q
({) 50.17 436 T
6 10 Q
(public:) 70.02 423.33 T
(PackableString\050 const String& s \051;) 89.86 411.33 T
(class Buffer* put\050 class Buffer* outbuffer \051;) 89.86 399.33 T
5 12 Q
(// ...) 89.86 386 T
(}) 50.17 372 T
6 10 Q
(;) 57.37 372 T
(#endif) 50.17 347.33 T
2 F
(Example 8) 36 311.33 T
(Implementation file for the class PackableString) 115.29 311.33 T
6 F
(// PackableString.cc) 50.17 287.33 T
(#include "PackableString.hh") 50.17 263.33 T
(// To be able to use Buffer-instances, Buffer.hh MUST be included.) 50.17 239.33 T
(#include "Buffer.hh") 50.17 215.33 T
(Buffer*) 50.17 191.33 T
(PackableString::put\050 Buffer* outbuffer \051) 50.17 179.33 T
5 12 Q
({) 50.17 166 T
(// ...) 70.02 152 T
(}) 50.17 138 T
FMENDPAGE
%%EndPage: "16" 17
%%Page: "17" 17
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(17\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(5) 72 640 T
243.5 638.73 142.87 638.73 2 L
V
0.88 H
N
(Assigning Names) 142.87 640 T
0 F
(Rule 12) 72 610 T
(The identifier of every globally visible class, enumeration type, type definition, function,) 142.87 610 T
(constant, and variable in a class library is to begin with a prefix that is) 142.87 596 T
4 F
(unique for the) 481.97 596 T
(library.) 142.87 582 T
0 F
(Rule 13) 72 562 T
(The names of variables, constants, and functions are to begin with a) 142.87 562 T
4 F
(lowercase) 471.29 562 T
0 F
( letter.) 519.93 562 T
(Rule 14) 72 542 T
(The names of abstract data types, structures,) 142.87 542 T
5 F
(typedefs) 358.36 542 T
0 F
(, and enumerated types are to) 415.93 542 T
(begin with an) 142.87 528 T
4 F
(uppercase) 211.16 528 T
0 F
( letter.) 261.12 528 T
(Rule 15) 72 508 T
(In names which consist of more than one word,) 142.87 508 T
4 F
(the words are written together) 373.37 508 T
0 F
(and each) 524.3 508 T
(word that follows the first is begun with an uppercase letter.) 142.87 494 T
(Rule 16) 72 474 T
(Do not use identifiers which begin with one or two underscores \050\324_\325 or \324__\325\051.) 142.87 474 T
(Rule 17) 72 454 T
(A name that begins with an uppercase letter is to appear directly after its prefix.) 142.87 454 T
(Rule 18) 72 434 T
(A name that begins with a lowercase letter is to be separated from its prefix using an) 142.87 434 T
(underscore \050\324_\325\051.) 142.87 420 T
(Rule 19) 72 400 T
(A name is to be separated from its suffix using an underscore \050\324_\325\051.) 142.87 400 T
(Rec. 14) 72 380 T
(Do not use typenames that differ only by the use of uppercase and lowercase letters.) 142.87 380 T
(Rec. 15) 72 360 T
(Names should not include abbreviations that are not generally accepted.) 142.87 360 T
(Rec. 16) 72 340 T
(A variable with a large scope should have a long name.) 142.87 340 T
(Rec. 17) 72 320 T
(Choose variable names that suggest the usage.) 142.87 320 T
(Rec. 18) 72 300 T
(Write code in a way that makes it easy to change the prefix for global identifiers.) 142.87 300 T
(Rec. 19) 72 280 T
(Encapsulate global variables and constants, enumerated types, and typedefs in a class.) 142.87 280 T
0.16 (In this chapter, it is important to distinguish between identifiers and names) 72 252.53 P
0 10 Q
0.13 (1) 432.18 257.33 P
0 12 Q
0.16 (. The  name is that part of an) 437.18 252.53 P
0.57 (identifier that shows its meaning. An identifier consists of a prefix, a name, and a suffix \050in that order\051.) 72 238.53 P
-0.56 (The prefix and the suffix are optional. A suffix is only used by tools that generate C++ code, to avoid name) 72 224.53 P
(collisions with user-written C++ code and is not given further consideration here.) 72 210.53 T
0.83 (It is recommended identifiers not be extremely long, to reduce the risk for name collisions when using) 72 186.53 P
(tools that truncate long identifiers.) 72 172.53 T
7 10 Q
(The Unix command) 127.96 148.53 T
5 12 Q
(ar) 208.73 148.53 T
7 10 Q
( truncates file names that are longer than 15 characters.) 223.12 148.53 T
1.11 (Cfront normally modifies generated C-identifiers that are longer than 31 characters by truncating them and) 127.96 125.87 P
(adding a hash value that is generated from the truncated part of the string.) 127.96 113.87 T
72 84 576 99 C
81 97 225 97 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
(1. See terminology 1!) 90 77.33 T
66.09 108.24 122.78 166.06 C
73.18 115.89 115.7 158.41 R
3 X
0 K
V
0.5 H
0 Z
0 X
N
4 X
90 450 18.17 18.67 94.44 137.15 G
1 H
0 X
90 450 18.17 18.67 94.44 137.15 A
1 36 Q
(!) 88.44 124.03 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "17" 18
%%Page: "18" 18
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(18\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
0 X
-0.31 (The use of two underscores \050\324__\325\051 in identifiers is reserved for the compiler\325s internal use according to the) 36 640 P
(ANSI-C standard.) 36 626 T
0 (Underscores \050\324_\325\051 are often used in names of library functions \050such as \322 _main\323 and \322_exit\323\051. In order to) 36 602 P
(avoid collisions, do not begin an identifier with an underscore.) 36 588 T
0.57 (One rule of thumb is that a name which cannot be pronounced is a bad name. A long name is normally) 36 564 P
3.86 (better than a short, cryptic name, but the truncation problem must be taken into consideration.) 36 550 P
-0.31 (Abbreviations can always be misunderstood. Global variables, functions and constants ought to have long) 36 536 P
(enough names to avoid name conflicts, but not too long.) 36 522 T
(Classes should be named so that \322object.function\323 is easy to read and appears to be logical.) 36 498 T
0.54 (There are many class libraries available for purchase and there may be tens of thousands of classes in a) 36 474 P
-0.03 (large project!! Because of this, it is important to be careful that name collisions do not occur. One way of) 36 460 P
-0.24 (preventing collisions is to have strict rules for assigning names to globally visible objects \050such as our use) 36 446 P
(of a prefix\051. In this way, classes from several different class libraries may be used at the same time.) 36 432 T
(Names for the following types of objects are to be prefixed:) 36 408 T
(-) 36 394 T
(Type names \050classes,) 96.66 394 T
5 F
(typedef) 201.24 394 T
0 F
(s,) 251.62 394 T
5 F
(enum) 262.28 394 T
0 F
(s,) 291.06 394 T
5 F
(struct) 301.73 394 T
0 F
(s,) 344.9 394 T
5 F
(union) 355.56 394 T
0 F
(s, etc.\051) 391.54 394 T
(-) 36 380 T
(Global variables and constants) 96.66 380 T
(-) 36 366 T
(Function names \050not member functions names\051) 96.66 366 T
(-) 36 352 T
(Preprocessor macros \050) 96.66 352 T
5 F
(#define) 203.24 352 T
0 F
(\051) 253.61 352 T
1.32 (The use of prefixes can sometimes be avoided by using a class to limit the scope of the name. Static) 36 328 P
0.36 (variables in a class should be used instead of global variables and constants, enumerated data types, and) 36 314 P
2.67 (typedefs. Although nested classes may be used in C++, these give rise to too many questions \050in) 36 300 P
(connection with the language definition\051 to be able to recommend their use.) 36 286 T
2 F
(Exception to Rule 12:) 36 266 T
0 F
(No exceptions.) 149.39 266 T
2 F
(Exception to Rule 13:) 36 246 T
0 F
(No exceptions. \050At times, an identifier begins with an abbreviation written in) 149.39 246 T
(uppercase letters, to emphasize the way in which the name is used. Such an) 149.39 232 T
(abbreviation is considered to be a prefix\051.) 149.39 218 T
2 F
(Exception to Rule 14:) 36 198 T
0 F
(If the last letter in a word is in uppercase, an underscore is to be used as a word) 149.39 198 T
(separator.) 149.39 184 T
2 F
(Exception to Rule 15:) 36 164 T
0 F
(No exceptions.) 149.39 164 T
2 F
(Exception to Rule 16:) 36 144 T
0 F
(No exceptions.) 149.39 144 T
2 F
(Exception to Rule 17:) 36 124 T
0 F
(No exceptions.) 149.39 124 T
2 F
(Exception to Rule 18:) 36 104 T
0 F
(No exceptions.) 149.39 104 T
2 F
(Exception to Rule 19:) 36 84 T
0 F
(No exceptions.) 149.39 84 T
FMENDPAGE
%%EndPage: "18" 19
%%Page: "19" 19
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(19\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 9) 72 641.33 T
(Exception using compound names) 151.29 641.33 T
6 F
(const char* functionTitle = "EUA_Special";) 86.17 617.33 T
(int currentIO_Stream = 1; // Last Character in currentIO is in uppercase!) 86.17 605.33 T
2 F
(Example 10) 72 569.33 T
(Choice of names) 151.29 569.33 T
6 F
(int groupID;                    // instead of grpID) 86.17 545.33 T
(int nameLength;                 // instead of namLn) 86.17 533.33 T
(PrinterStatus resetPrinter;     // instead of rstprt) 86.17 521.33 T
2 F
(Example 11) 72 485.33 T
(Ambiguous names) 151.29 485.33 T
5 F
(void termProcess\050\051;             // Terminate process or) 86.17 461.33 T
(                                // terminal process?) 86.17 449.33 T
2 F
(Example 12) 72 413.33 T
(Names having numeric characters can cause errors which are difficult to locate.) 151.29 413.33 T
5 F
(int I0 = 13;                    // Names with digits can be) 86.17 389.33 T
(int IO = I0;                    // difficult to read.) 86.17 377.33 T
2 F
(Example 13) 72 341.33 T
(Definition of a class in the class library Emc2) 151.29 341.33 T
6 F
(class Emc2Class) 86.17 317.33 T
({) 86.17 305.33 T
(public:) 106.02 293.33 T
(Emc2Class\050\051;    // Default constructor) 125.86 281.33 T
(// ...) 125.86 269.33 T
(private:) 106.02 257.33 T
(int id;) 125.86 245.33 T
(// ...) 125.86 233.33 T
(};) 86.17 221.33 T
FMENDPAGE
%%EndPage: "19" 20
%%Page: "20" 20
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(20\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 14) 36 641.33 T
(One way to avoid global functions and classes) 115.29 641.33 T
6 F
(// Instead of declaring:) 50.17 617.33 T
(void Emc2_myFunc1\050\051;) 50.17 605.33 T
(void Emc2_myFunc2\050\051;) 50.17 593.33 T
(class Emc2MyClass { /* ... */ };) 50.17 581.33 T
(// Encapsulate the functions using an abstract class:) 50.17 557.33 T
(class Emc2) 50.17 545.33 T
({) 50.17 533.33 T
(public:) 70.02 521.33 T
(static void myFunc1\050\051;) 89.86 509.33 T
(static void myFunc2\050\051;) 89.86 497.33 T
(class MyClass { /* ... */ };) 89.86 485.33 T
(private:) 70.02 473.33 T
(virtual dummy\050\051 = 0;) 89.86 461.33 T
(   // Trick to make the class abstract) 209.79 461.33 T
(};) 50.17 449.33 T
(// Now, functions and classes may be accessed by using the scope-operator:) 50.17 425.33 T
(Emc2::myFunc1\050\051;) 50.17 413.33 T
(Emc2::myFunc2\050\051;) 50.17 401.33 T
(Emc2::MyClass myObject;) 50.17 389.33 T
FMENDPAGE
%%EndPage: "20" 21
%%Page: "21" 21
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(21\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(6) 72 640 T
171.53 638.73 142.87 638.73 2 L
V
0.88 H
N
(Style) 142.87 640 T
(6.1) 72 596 T
(Classes) 142.87 596 T
0 F
(Rule 20) 72 566 T
(The public, protected, and private sections of a class are to be declared in that order \050the) 142.87 566 T
-0.13 (public section is declared before the protected section which is declared before the private) 142.87 552 P
(section\051.) 142.87 538 T
(Rule 21) 72 518 T
(No member functions are to be defined within the class definition.) 142.87 518 T
0.44 (By placing the) 72 494 P
7 F
0.44 (public) 146.27 494 P
0 F
0.44 (section first, everything that is of interest to a user is gathered in the beginning of) 179.69 494 P
-0.69 (the class definition. The) 72 480 P
7 F
-0.69 (protected) 187.51 480 P
0 F
-0.69 ( section may be of interest to designers when considering inheriting from) 232.8 480 P
(the class. The) 72 466 T
7 F
( private) 137.62 466 T
0 F
( section contains details that should have the least general interest.) 174.59 466 T
-0.62 (A member function that is defined within a class definition automatically becomes inline. Class definitions) 72 442 P
-0.25 (are less compact and more difficult to read when they include definitions of member functions. It is easier) 72 428 P
1.6 (for an inline member function to become an ordinary member function if the definition of the inline) 72 414 P
0.4 (function is placed outside of the class definition. This rule will be in effect at least as long as traditional) 72 400 P
(text editors are used.) 72 386 T
0.57 (A similar problem is that members are private if no access specifier is explicitly given. This problem is) 72 362 P
(avoided by following Rule 20.) 72 348 T
2 F
(Exception to Rule 20:) 72 328 T
0 F
(No exceptions.) 185.39 328 T
2 F
(Exception to Rule 21:) 72 308 T
0 F
(No exceptions.) 185.39 308 T
2 10 Q
(Example 15) 72 271.33 T
(A class definition in accordance with the style rules) 151.29 271.33 T
6 F
(class String : private Object) 86.17 247.33 T
({) 86.17 235.33 T
(public:) 106.02 223.33 T
(String\050\051;                    // Default constructor) 125.86 211.33 T
(String\050 const String& s \051;   // Copy constructor) 125.86 199.33 T
(unsigned length\050\051 const;) 125.86 187.33 T
(// ...) 125.86 175.33 T
(protected:) 106.02 163.33 T
(int checkIndex\050 unsigned index \051 const;) 125.86 151.33 T
(// ...) 125.86 139.33 T
(private:) 106.02 127.33 T
(unsigned noOfChars;) 125.86 115.33 T
(// ...) 125.86 103.33 T
(};) 86.17 91.33 T
FMENDPAGE
%%EndPage: "21" 22
%%Page: "22" 22
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(22\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 16) 36 641.33 T
(No definitions of member functions within the class definition \050See Example 1\051) 115.29 641.33 T
6 F
(// Instead of writing like this:) 50.17 617.33 T
(class String) 50.17 605.33 T
({) 50.17 593.33 T
(public:) 70.02 581.33 T
5 F
(int length\050\051 const // No !!) 89.86 569.33 T
({) 109.7 557.33 T
(return len;) 129.54 545.33 T
(}) 109.7 533.33 T
6 F
(// ...) 89.86 521.33 T
(private:) 70.02 509.33 T
(int len;) 89.86 497.33 T
(};) 50.17 485.33 T
(// Do it this way:) 50.17 461.33 T
(class String) 50.17 449.33 T
({) 50.17 437.33 T
(public:) 70.02 425.33 T
(int length\050\051 const;) 89.86 413.33 T
(// ...) 89.86 401.33 T
(private:) 70.02 389.33 T
(int len;) 89.86 377.33 T
(};) 50.17 365.33 T
(inline) 50.17 341.33 T
(int) 50.17 329.33 T
(String::length\050\051 const) 50.17 317.33 T
({) 50.17 305.33 T
(return len;) 70.02 293.33 T
(}) 50.17 281.33 T
1 12 Q
(6.2) 36 238 T
(Functions) 106.87 238 T
0 F
(Rec. 20) 36 208 T
(Always provide the) 106.87 208 T
4 F
(return type) 203.8 208 T
0 F
(of a function explicitly.) 261.1 208 T
(Rec. 21) 36 188 T
-0.08 (When declaring functions, the leading parenthesis and the first argument \050if any\051 are to be) 106.87 188 P
(written on the) 106.87 174 T
4 F
(same line) 176.49 174 T
0 F
( as the function name. If space permits, other arguments and the) 223.47 174 T
-0.06 (closing parenthesis may also be written on the same line as the function name. Otherwise,) 106.87 160 P
(each additional argument is to be written on a separate line \050with the closing parenthesis) 106.87 146 T
(directly after the last argument\051.) 106.87 132 T
(Rec. 22) 36 112 T
-0.31 (In a function definition, the) 106.87 112 P
4 F
-0.31 (return type) 239.9 112 P
0 F
-0.31 (of the function should be written on a separate line) 296.59 112 P
(directly above the function name.) 106.87 98 T
(Rec. 23) 36 78 T
(Always write the left parenthesis directly after a function name.) 106.87 78 T
FMENDPAGE
%%EndPage: "22" 23
%%Page: "23" 23
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(23\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
0 X
-0.56 (If no return type is explicitly provided for a function, it is, by default, an) 72 640 P
6 F
-1.35 (int) 413.33 640 P
0 F
-0.56 (. It is recommended to always) 434.92 640 P
0.06 (provide the return type explicitly, to increase the readability of the code. By defining the return type on a) 72 626 P
(separate line directly above the function definition, the function name is more easily seen.) 72 612 T
-0.21 (The other recommendations are meant to give a uniform appearance to the code that is written. Until such) 72 588 P
(time as formatting tools are available, programmers should follow these guidelines.) 72 574 T
5 10 Q
(Example 17) 72 537.33 T
(The left parenthesis always directly after the function name) 151.29 537.33 T
(void foo \050\051;    // No!!) 86.17 513.33 T
6 F
(void foo\050\051;     // Better) 86.17 501.33 T
FMENDPAGE
%%EndPage: "23" 24
%%Page: "24" 24
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(24\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 18) 36 641.33 T
(Right and wrong ways of declaring formal arguments for a function \050in function definition\051) 115.29 641.33 T
6 F
(// Right:) 50.17 617.33 T
(int) 50.17 605.33 T
(myComplicatedFunction\050 unsigned unsignedValue,) 50.17 593.33 T
(int intValue,) 189.07 581.33 T
(char* charPointerValue,) 189.07 569.33 T
(int* intPointerValue,) 189.07 557.33 T
(myClass* myClassPointerValue,) 189.07 545.33 T
(unsigned* unsignedPointerValue \051;) 189.07 533.33 T
(// Wrong:) 50.17 509.33 T
5 F
(int) 50.17 497.33 T
(myComplicatedFunction\050 unsigned unsignedValue, int intValue,) 50.17 485.33 T
(char* charPointerValue, int* intPointerValue, myClass* myClassPointerValue,) 50.17 473.33 T
(unsigned* unsignedPointerValue \051;) 50.17 461.33 T
1 12 Q
(6.3) 36 418 T
(Compound Statements) 106.87 418 T
0 F
(Rec. 24) 36 388 T
-0.35 (Braces \050\322{}\323\051 which enclose a block are to be placed in the same column, on separate lines) 106.87 388 P
(directly before and after the block.) 106.87 374 T
-0.01 (The placement of braces seems to have been the subject of the greatest debate concerning the appearance) 36 350 P
0.49 (of both C and C++ code. We recommend the style which, in our opinion, gives the most readable code.) 36 336 P
(Other styles may well provide more compact code.) 36 322 T
1 F
(6.4) 36 278 T
(Flow Control Statements) 106.87 278 T
0 F
(Rec. 25) 36 248 T
(The flow control primitives) 106.87 248 T
5 F
(if) 242.12 248 T
0 F
(,) 256.51 248 T
5 F
(else) 262.51 248 T
0 F
(,) 291.29 248 T
5 F
(while) 297.29 248 T
0 F
(,) 333.27 248 T
5 F
(for) 339.26 248 T
0 F
( and) 360.85 248 T
5 F
(do) 384.17 248 T
0 F
( should be followed by a) 398.56 248 T
4 F
(block) 106.87 234 T
0 F
(, even if it is an empty block.) 133.51 234 T
0.49 (At times, everything that is to be done in a loop may be easily written on one line in the loop statement) 36 210 P
-0.15 (itself. It may then be tempting to conclude the statement with a semicolon at the end of the line. This may) 36 196 P
-0.09 (lead to misunderstanding since, when reading the code, it is easy to miss such a semicolon. It seems to be) 36 182 P
0.13 (better, in such cases, to place an empty block after the statement to make completely clear what the code) 36 168 P
(is doing.) 36 154 T
FMENDPAGE
%%EndPage: "24" 25
%%Page: "25" 25
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(25\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 19) 72 641.33 T
(Flow control structure without statements) 151.29 641.33 T
5 F
(// No block at all - No!) 86.17 617.33 T
(while \050 /* Something */ \051;) 86.17 605.33 T
6 F
(// Empty block - better!) 86.17 581.33 T
(while \050 /* Something */ \051) 86.17 569.33 T
({) 86.17 557.33 T
(// Empty !) 106.02 545.33 T
(}) 86.17 533.33 T
1 12 Q
(6.5) 72 490 T
(Pointers and References) 142.87 490 T
0 F
(Rec. 26) 72 460 T
-0.09 (The dereference operator \324) 142.87 460 P
5 F
-0.22 (*) 270.11 460 P
0 F
-0.09 (\325 and the address-of operator \324) 277.31 460 P
5 F
-0.22 (&) 421.71 460 P
0 F
-0.09 (\325 should be directly connected) 428.91 460 P
(with the) 142.87 446 T
4 F
(type names) 184.84 446 T
0 F
( in declarations and definitions.) 239.81 446 T
-0.42 (The characters \324*\325 and \324&\325 should be written together with the types of variables instead of with the names) 72 422 P
0.08 (of variables in order to emphasize that they are part of the type definition. Instead of saying that) 72 408 P
5 F
0.2 (*i) 536.13 408 P
0 F
0.08 ( is an) 550.52 408 P
5 F
(int) 72 394 T
0 F
(, say that) 93.59 394 T
5 F
(i) 139.56 394 T
0 F
( is an) 146.76 394 T
5 F
(int*) 175.07 394 T
0 F
(.) 203.86 394 T
1.23 (Traditionally, C recommendations indicate that \324*\325 should be written together with the variable name,) 72 370 P
1.87 (since this reduces the probability of making a mistake when declaring several variables in the same) 72 356 P
2.2 (declaration statement \050the operator \324*\325 only applies to the variable on which it operates\051. Since the) 72 342 P
1.25 (declaration of several variables in the same statement is not recommended, however, such a advice is) 72 328 P
(unneeded.) 72 314 T
2 10 Q
(Example 20) 72 277.33 T
(* and & together with the type) 151.29 277.33 T
6 F
(char*) 86.17 253.33 T
(Object::asString\050\051) 86.17 241.33 T
({) 86.17 229.33 T
(// Something) 106.02 217.33 T
(};) 86.17 205.33 T
(char* userName = 0;) 86.17 181.33 T
(int sfBook = 42;) 86.17 169.33 T
(int&  anIntRef = sfBook;) 86.17 157.33 T
2 F
(Example 21) 72 121.33 T
(Declaration of several variables in the same statement) 151.29 121.33 T
6 F
(// NOT RECOMMENDED) 86.17 97.33 T
5 F
(char* i,j; // i is declared pointer to char, while j is declared char) 86.17 85.33 T
FMENDPAGE
%%EndPage: "25" 26
%%Page: "26" 26
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(26\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 F
0 X
(6.6) 36 640 T
(Miscellaneous) 106.87 640 T
0 F
(Rec. 27) 36 610 T
(Do not use) 106.87 610 T
4 F
( spaces) 158.83 610 T
0 F
( around \324) 193.81 610 T
5 F
(.) 237.1 610 T
0 F
(\325 or) 244.3 610 T
5 F
( \324->) 261.28 610 T
0 F
(\325, nor between unary operators and operands.) 290.07 610 T
(Rec. 28) 36 590 T
(Use the c++ mode in GNU Emacs to format code.) 106.87 590 T
-0.23 (In our opinion, code is more readable if spaces are not used around the . or -> operators. The same applies) 36 566 P
0.96 (to unary operators \050those that operate on one operand\051, since a space may give the impression that the) 36 552 P
(unary operand is actually a binary operator.) 36 538 T
-0.04 (Ordinary spaces should be used instead of tabs. Since different editors treat tab characters differently, the) 36 514 P
0.67 (work in perfecting a layout may have been wasted if another editor is later used. Tab characters can be) 36 500 P
1.05 (removed using the UNIX command) 36 486 P
5 F
2.53 (expand) 216.15 486 P
0 F
1.05 (. One alternative is to format code using the editor GNU) 259.32 486 P
(Emacs.) 36 472 T
-0.33 (We recommend that everyone use GNU Emacs to format code. Code will then have a uniform appearance) 36 448 P
(regardless of who has written it.) 36 434 T
FMENDPAGE
%%EndPage: "26" 27
%%Page: "27" 27
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(27\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(7) 72 640 T
188.2 638.73 142.87 638.73 2 L
V
0.88 H
N
(Classes) 142.87 640 T
(7.1) 72 596 T
(Considerations Regarding Access Rights) 142.87 596 T
0 F
(Rule 22) 72 566 T
(Never specify) 142.87 566 T
4 F
(public) 212.8 566 T
0 F
( or) 243.46 566 T
4 F
( protected member data) 256.44 566 T
0 F
( in a class.) 372.04 566 T
(The use of public variables is discouraged for the following reasons:) 72 542 T
(1) 72 522 T
(A public variable represents a violation of one of the basic principles of object-oriented) 142.87 522 T
(programming, namely, encapsulation of data. For example, if there is a class of the type) 142.87 508 T
-0.61 (BankAccount, in which account_balance is a public variable, the value of this variable may) 142.87 494 P
-0.23 (be changed by any user of the class. However, if the variable has been declared private, its) 142.87 480 P
(value may be changed only by the member functions of the class) 142.87 462.53 T
0 10 Q
(1) 453.64 467.33 T
0 12 Q
(.) 458.64 462.53 T
(2) 72 442.53 T
-0.56 (An arbitrary function in a program can change public data which may lead to errors that are) 142.87 442.53 P
(difficult to locate.) 142.87 428.53 T
(3) 72 408.53 T
(If public data is avoided, its internal representation may be changed without users of the) 142.87 408.53 T
-0.23 (class having to modify their code. A principle of class design is to maintain the stability of) 142.87 394.53 P
-0.23 (the public interface of the class. The implementation of a class should not be a concern for) 142.87 380.53 P
(its users.) 142.87 366.53 T
0.73 (The use of protected variables in a class are not recommended, since its variables become visible to its) 72 342.53 P
-0.29 (derived classes. The names of types or variables in a base class may then not be changed since the derived) 72 328.53 P
0.56 (classes may depend on them. If a derived class, for some reason, must access data in its base class, one) 72 314.53 P
0.77 (solution may be to make a special) 72 300.53 P
5 F
1.85 (protected) 242.94 300.53 P
0 F
0.77 ( interface in the base class, containing functions which) 307.71 300.53 P
1 (return private data. This solution would not imply any degradation of performance if the functions are) 72 286.53 P
(defined inline.) 72 272.53 T
2 (The use of) 72 248.53 P
4 F
2 (struct) 131.62 248.53 P
0 F
2 (s is also discouraged since these only contain public data. In interfaces with other) 159.62 248.53 P
(languages \050such as C\051, it may, however, be necessary to use structs.) 72 234.53 T
2 F
(Exception to Rule 22:) 72 214.53 T
0 F
(In interfaces with other languages \050such as C\051, it may be necessary to use) 185.39 214.53 T
5 F
(structs) 185.39 200.53 T
0 F
( having public data.) 235.76 200.53 T
72 96 576 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
-0.21 (1. Not completely true. If a class has a member function which returns a reference to a data member, variables may be) 90 89.33 P
(modified. This is avoided by following Rule 29.) 90 77.33 T
FMENDPAGE
%%EndPage: "27" 28
%%Page: "28" 28
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(28\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 22) 36 641.33 T
(The correct way to encapsulate data so that future changes are possible.) 115.29 641.33 T
6 F
(// Original class:) 50.17 617.33 T
(class Symbol {};) 50.17 593.33 T
(class OldSymbol : public Symbol {};) 50.17 581.33 T
(class Priority) 50.17 557.33 T
({) 50.17 545.33 T
(public:) 70.02 533.33 T
(// returns pd) 89.86 521.33 T
(int priority\050\051;) 89.86 509.33 T
(// returns symbol) 89.86 485.33 T
(class Symbol* getSymbol\050\051 const;) 89.86 473.33 T
(// ...) 89.86 461.33 T
(private:) 70.02 449.33 T
(int pd;) 89.86 437.33 T
(OldSymbol symbol;) 89.86 425.33 T
(};) 50.17 413.33 T
(// Modified class:) 50.17 377.33 T
(// The programmer has chosen to change the private data from an int) 50.17 365.33 T
(// to an enum. A user of the class \324Priority\325 does not have to change) 50.17 353.33 T
(// any code, since the enum return-value from the member function) 50.17 341.33 T
(// priority\050\051 is automatically converted to an int.) 50.17 329.33 T
(class Symbol {};) 50.17 305.33 T
(class NewSymbol : public Symbol {};) 50.17 293.33 T
(enum Priority { low, high, urgent };) 50.17 281.33 T
(class Priority) 50.17 257.33 T
({) 50.17 245.33 T
(public:) 70.02 233.33 T
(// Interface intact through implicit cast, returns priority_data) 89.86 221.33 T
(Priority priority\050\051;) 89.86 209.33 T
(// Interface intact, object of new subclass to symbol returned) 89.86 185.33 T
(class Symbol* getSymbol\050\051 const;) 89.86 173.33 T
(// ...) 89.86 161.33 T
(private:) 70.02 137.33 T
(Priority priority_data; // New representation/name of internal data) 89.86 125.33 T
(NewSymbol symbol;) 89.86 113.33 T
(};) 50.17 101.33 T
313.23 498.53 512.39 621.18 C
313.23 498.53 512.39 621.18 R
7 X
0 K
V
327.4 488.45 497.48 614.18 R
V
0 12 Q
0 X
0.55 (This shows why member functions) 327.4 606.18 P
5.97 (should be used to access data) 327.4 592.18 P
0.14 (\050instead of using direct references\051.) 327.4 578.18 P
6.21 (This usage provides long term) 327.4 564.18 P
0.58 (advantages, since internal data in a) 327.4 550.18 P
6.55 (class may be changed without) 327.4 536.18 P
1.04 (having to modify interfaces and to) 327.4 522.18 P
(re-write the code which uses them.) 327.4 508.18 T
0 0 612 792 C
313.23 498.53 512.39 621.18 R
1 H
0 Z
0 X
0 K
N
FMENDPAGE
%%EndPage: "28" 29
%%Page: "29" 29
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(29\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(7.2) 72 640 T
(Inline Functions) 142.87 640 T
0 F
(Rec. 29) 72 610 T
(Access functions are to be inline.) 142.87 610 T
(Rec. 30) 72 590 T
(Forwarding functions are to be inline.) 142.87 590 T
(Rec. 31) 72 570 T
(Constructors and destructors must not be inline.) 142.87 570 T
(The normal reason for declaring a function) 72 546 T
5 F
(inline) 280.83 546 T
0 F
( is to improve its performance.) 324.01 546 T
0.32 (Small functions, such as access functions, which return the value of a member of the class and so-called) 72 522 P
(forwarding functions which invoke another function should normally be) 72 508 T
5 F
(inline) 421.43 508 T
0 F
(.) 464.6 508 T
(Correct usage of) 72 484 T
5 F
(inline) 154.26 484 T
0 F
( functions may also lead to reduced size of code.) 197.44 484 T
0.37 (Warning: functions, which invoke other) 72 460 P
5 F
0.89 (inline) 268.38 460 P
0 F
0.37 ( functions, often become too complex for the complier) 311.56 460 P
(to be able to make them) 72 446 T
5 F
(inline) 189.92 446 T
0 F
( despite their apparent smallness.) 233.1 446 T
0.38 (This problem is especially common with constructors and destructors. A constructor always invokes the) 72 422 P
0.43 (constructors of its base classes and member data before executing its own code. Always avoid) 72 408 P
5 F
1.04 (inline) 532.82 408 P
0 F
(constructors and destructors!) 72 394 T
1 F
(7.3) 72 350 T
(Friends) 142.87 350 T
0 F
(Rec. 32) 72 320 T
4 F
-0.2 (Friends) 142.87 320 P
0 F
-0.2 ( of a class should be used to provide additional functions that are best kept outside) 181.52 320 P
(of the class.) 142.87 306 T
(Operations on an object are sometimes provided by a collection of classes and functions.) 72 282 T
0.35 (A friend is a nonmember of a class, that has access to the nonpublic members of the class. Friends offer) 72 258 P
-0.37 (an orderly way of getting around data encapsulation for a class. A friend class can be advantageously used) 72 244 P
(to provide functions which require data that is not normally needed by the class.) 72 230 T
-0.32 (Suppose there is a list class which needs a pointer to an internal  list element in order to iterate through the) 72 206 P
1.74 (class. This pointer is not needed for other operations on the list. There may then be reason, such as) 72 192 P
-0.19 (obtaining smaller list objects, for an list object not to store a pointer to the current list element and instead) 72 178 P
(to create an iterator, containing such a pointer, when it is needed.) 72 164 T
-0.57 (One problem with this solution is that the iterator class normally does not have access to the data structures) 72 140 P
(which are used to represent the list \050since we also recommend private member data\051.) 72 126 T
(By declaring the iterator class as a friend, this problem is avoided without violating data encapsulation.) 72 102 T
0.47 (Friends are good if used properly. However, the use of many friends can indicate that the modularity of) 72 78 P
FMENDPAGE
%%EndPage: "29" 30
%%Page: "30" 30
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(30\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
0 X
(the system is poor.) 36 640 T
1 F
(7.4) 36 596 T
8 F
(const) 106.87 596 T
1 F
( Member Functions) 138.85 596 T
0 F
(Rule 23) 36 566 T
-0.51 (A member function that does not affect the state of an object \050its instance variables\051 is to be) 106.87 566 P
(declared) 106.87 552 T
5 F
(const) 150.49 552 T
0 F
(.) 186.47 552 T
(Rule 24) 36 532 T
(If the behaviour of an object is dependent on data outside the object, this data is not to be) 106.87 532 T
(modified by const member functions.) 106.87 518 T
-0.52 (Member functions declared as) 36 494 P
5 F
-1.25 (const) 181.8 494 P
0 F
-0.52 ( may not modify member data and are the only functions which may) 217.78 494 P
0.23 (be invoked on a) 36 480 P
5 F
0.55 (const) 116.19 480 P
0 F
0.23 ( object. \050Such an object is clearly unusable without) 152.17 480 P
5 F
0.55 (const) 402.06 480 P
0 F
0.23 ( methods\051. A) 438.04 480 P
5 F
0.55 (const) 504.02 480 P
0 F
-0.08 (declaration is an excellent insurance that objects will not be modified \050mutated\051 when they should not be.) 36 466 P
0.08 (A great advantage that is provided by C++ is the ability to overload functions with respect to their const-) 36 452 P
(ness. \050Two member functions may have the same name where one is const and the other is not\051.) 36 438 T
0.1 (Non-const member functions are sometimes invoked as so-called \325lvalues) 36 410.53 P
0 10 Q
0.08 (1) 390.53 415.33 P
0 12 Q
0.1 (\325 \050as a location value at which) 395.53 410.53 P
(a value may be stored\051. A const member function may never be invoked as an \325lvalue\325.) 36 396.53 T
0.02 (The behaviour of an object can be affected by data outside the object. Such data must not be modified by) 36 372.53 P
(a const member function.) 36 358.53 T
0.54 (At times, it is desirable to modify data in a const object \050such a having a cache of data for performance) 36 334.53 P
-0.28 (reasons\051. In order to avoid explicit type conversions from a const type to a non-const type, the only way is) 36 320.53 P
-0.09 (to store the information outside the object. \050See example 55\051. This type of data should be seen as external) 36 306.53 P
(data which does not affect the behaviour of the class.) 36 292.53 T
2 F
(Exception to Rule 23:) 36 272.53 T
0 F
(No exceptions.) 149.39 272.53 T
2 F
(Exception to Rule 24:) 36 252.53 T
0 F
(No exceptions.) 149.39 252.53 T
36 96 540 111 C
45 109 189 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
1.69 (1. See, for example, page 25 in ref. [1]: The Annotated C++ Reference Manual \320 Bjarne Stroustrup/Margareth) 54 89.33 P
(Ellis[ARM].) 54 77.33 T
FMENDPAGE
%%EndPage: "30" 31
%%Page: "31" 31
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(31\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 23) 72 641.33 T
(const-declared access functions to internal data in a class) 151.29 641.33 T
6 F
(class SpecialAccount : public Account) 86.17 617.33 T
({) 86.17 605.33 T
(public:) 106.02 593.33 T
(int insertMoney\050\051;) 125.86 581.33 T
5 F
(// int getAmountOfMoney\050\051;  No! Forbids ANY constant object to) 125.86 569.33 T
(//                          access the amount of money.) 125.86 557.33 T
6 F
(int getAmountOfMoney\050\051 const;   // Better!) 125.86 545.33 T
(// ...) 125.86 533.33 T
(private:) 106.02 521.33 T
(int moneyAmount;) 125.86 509.33 T
(};) 86.17 497.33 T
FMENDPAGE
%%EndPage: "31" 32
%%Page: "32" 32
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(32\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 24) 36 641.33 T
(Overloading an operator/function with respect to const-ness) 115.29 641.33 T
6 F
(#include <iostream.h>) 50.17 617.33 T
(#include <string.h>) 50.17 605.33 T
(static unsigned const cSize = 1024;) 50.17 593.33 T
(class InternalData {};) 50.17 581.33 T
(class Buffer) 50.17 557.33 T
({) 50.17 545.33 T
(public:) 70.02 533.33 T
(Buffer\050 char* cp \051;) 89.86 521.33 T
(// Inline functions in this class are written compactly so the example) 89.86 497.33 T
(// may fit on one page. THIS is NOT to be done in practice \050See Rule 21\051.) 89.86 485.33 T
(// A. non-const member functions: result is an lvalue) 89.86 461.33 T
5 F
(char& operator[]\050 unsigned index \051 { return buffer[index]; }) 89.86 449.33 T
(InternalData& get\050\051 { return data; }) 89.86 437.33 T
6 F
(// B. const member functions: result is not an lvalue) 89.86 413.33 T
5 F
(char operator[]\050 unsigned index \051 const { return buffer[index]; }) 89.86 401.33 T
(const InternalData& get\050\051 const { return data; }) 89.86 389.33 T
6 F
(private:) 70.02 365.33 T
(char buffer[cSize];) 89.86 353.33 T
(InternalData data;) 89.86 341.33 T
(};) 50.17 329.33 T
(inline Buffer::Buffer\050 char* cp \051) 50.17 305.33 T
({) 50.17 293.33 T
(   strncpy\050 buffer , cp , sizeof\050 buffer \051 \051;) 50.17 281.33 T
(}) 50.17 269.33 T
(main\050\051) 50.17 245.33 T
({) 50.17 233.33 T
(   const Buffer cfoo = "peter";) 50.17 221.33 T
(// This is a constant buffer) 248.6 221.33 T
(   Buffer foo = "mary";) 50.17 209.33 T
(// This buffer can change) 248.6 209.33 T
(   foo[2]=\325c\325;) 50.17 185.33 T
(// calls char& Buffer::operator[]\050unsigned\051) 248.6 185.33 T
5 F
(cfoo[2] = \325c\325) 70.02 173.33 T
(// ERROR: cfoo[2] is not an lvalue.) 248.6 173.33 T
6 F
(// cfoo[2] means that Buffer::operator[]\050unsigned\051 const is called.) 70.02 149.33 T
(   cout << cfoo[2] << ":" << foo[2] << endl; // OK! Only rvalues are needed) 50.17 125.33 T
(foo.get\050\051 = cfoo.get\050\051;) 70.02 101.33 T
5 F
(cfoo.get\050\051 = foo.get\050\051;) 70.02 89.33 T
(// ERROR: cfoo.get\050\051 is not an lvalue) 248.6 89.33 T
6 F
(}) 50.17 77.33 T
FMENDPAGE
%%EndPage: "32" 33
%%Page: "33" 33
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(33\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(7.5) 72 640 T
(Constructors and Destructors) 142.87 640 T
0 F
(Rule 25) 72 610 T
-0.21 (A class which uses \322new\323 to allocate instances managed by the class,) 142.87 610 P
0 10 Q
-0.17 (1) 472.99 614.8 P
0 12 Q
-0.21 (  must define a) 477.99 610 P
4 F
-0.21 (copy) 550.57 610 P
(constructor) 142.87 596 T
0 F
(.) 199.51 596 T
(Rule 26) 72 576 T
-0.05 (All classes which are used as base classes and which have virtual functions, must define a) 142.87 576 P
(virtual destructor.) 142.87 562 T
(Rec. 33) 72 542 T
(Avoid the use of global objects in constructors and destructors.) 142.87 542 T
-0.08 (A copy constructor is recommended to avoid surprises when an object is initialized using an object of the) 72 518 P
0.61 (same type. If an object manages the allocation and deallocation of an object on the heap \050the managing) 72 504 P
-0.17 (object has a pointer to the object to be created by the class\325 constructor\051, only the value of the pointer will) 72 490 P
0.28 (be copied. This can lead to two invocations of the destructor for the same object \050on the heap\051, probably) 72 476 P
(resulting in a run-time error.) 72 458.53 T
0 10 Q
(2) 208.23 463.33 T
0 12 Q
(The corresponding problem exists for the assignment operator \050\324) 72 434.53 T
5 F
(=) 381.11 434.53 T
0 F
(\325\051. See 7.6: Assignment Operators.) 388.3 434.53 T
0.3 (If a class, having virtual functions but without virtual destructors, is used as a base class, there may be a) 72 410.53 P
-0.01 (surprise if pointers to the class are used. If such a pointer is assigned to an instance of a derived class and) 72 396.53 P
0.84 (if) 72 382.53 P
5 F
2.02 (delete) 83.17 382.53 P
0 F
0.84 ( is then used on this pointer, only the base class\325 destructor will be invoked. If the program) 126.34 382.53 P
(depends on the derived class\325 destructor being invoked, the program will fail.) 72 365.07 T
0 10 Q
(3) 443.4 369.87 T
0 12 Q
-0.08 (In connection with the initialization of statically allocated objects, it is not certain that other static objects) 72 341.07 P
-0.42 (will be initialized \050for example, global objects\051.) 72 323.6 P
0 10 Q
-0.35 (4) 298.02 328.4 P
0 12 Q
-0.42 ( This is because the order of initialization of static objects) 303.01 323.6 P
-0.12 (which is defined in various compilation units, is not defined in the language definition. There are ways of) 72 309.6 P
(avoiding this problem) 72 292.13 T
0 10 Q
(5) 177.28 296.93 T
0 12 Q
(, all of which require some extra work.) 182.27 292.13 T
7 10 Q
1.08 (You must know what you are doing if you invoke virtual functions from a constructor in the class. If virtual) 127.96 269.47 P
0.44 (functions in a derived class are overridden, the original definition in the base class will still be invoked by the) 127.96 257.47 P
0.47 (base class\325 constructor. Override, then, does not always work when invoking virtual functions in constructors.) 127.96 245.47 P
(See Example 30.) 127.96 233.47 T
2 12 Q
(Exception to Rule 25:) 72 214.13 T
0 F
-0.34 (Sometimes, it is desired to let objects in a class share a data area. In such a case, it) 185.39 214.13 P
-0.23 (is not necessary to define a copy constructor. Instead, it is necessary to make sure) 185.39 200.13 P
(that this data area is not deallocated as long as there are pointers to it.) 185.39 186.13 T
2 F
(Exception to Rule 26:) 72 166.13 T
0 F
(No exceptions.) 185.39 166.13 T
72 132 576 147 C
81 145 225 145 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
(1. i.e. instances bound to member variables of pointer or reference type that are deallocated by the object.) 90 125.33 T
(2. See Example 25 and Example 26.) 90 113.33 T
(3. See Example 27.) 90 101.33 T
(4. i.e. the static object which was declared external. See Example 28.) 90 89.33 T
(5. See Example 29.) 90 77.33 T
66.09 228.17 122.78 286 C
73.18 235.82 115.7 278.34 R
3 X
0 K
V
0.5 H
0 Z
0 X
N
4 X
90 450 18.17 18.67 94.44 257.08 G
1 H
0 X
90 450 18.17 18.67 94.44 257.08 A
1 36 Q
(!) 88.44 243.96 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "33" 34
%%Page: "34" 34
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(34\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 25) 36 641.33 T
(Definition of a \322dangerous\323 class not having a copy constructor) 115.29 641.33 T
5 F
(#include <string.h>) 50.17 617.33 T
(class String) 50.17 593.33 T
({) 50.17 581.33 T
(public:) 70.02 569.33 T
(String\050 const char* cp) 89.86 557.33 T
6 F
(= "") 227.78 557.33 T
5 F
(\051;    // Constructor) 251.77 557.33 T
(~String\050\051;                       // Destructor) 89.86 545.33 T
6 F
(// ...) 89.86 533.33 T
5 F
(private:) 70.02 521.33 T
(char* sp;) 89.86 509.33 T
6 F
(// ...) 89.86 497.33 T
5 F
(};) 50.17 485.33 T
6 F
(String::String\050const char* cp\051 : sp\050 new char[strlen\050cp\051] \051     // Constructor) 50.17 461.33 T
({) 50.17 449.33 T
(strcpy\050sp,cp\051;) 70.02 437.33 T
(}) 50.17 425.33 T
(String::~String\050\051    // Destructor) 50.17 401.33 T
({) 50.17 389.33 T
(delete sp;) 70.02 377.33 T
(}) 50.17 365.33 T
(// "Dangerous" String class) 50.17 341.33 T
(void) 50.17 329.33 T
(main\050\051) 50.17 317.33 T
({) 50.17 305.33 T
(String w1;) 70.02 293.33 T
5 F
(String w2 = w1;) 70.02 281.33 T
6 F
(// WARNING: IN A BITWISE COPY OF w1::sp,) 70.02 269.33 T
(// THE DESTRUCTOR FOR W1::SP WILL BE CALLED TWICE:) 70.02 257.33 T
(// FIRST, WHEN w1 IS DESTROYED; AGAIN, WHEN w2 IS DESTROYED.) 70.02 245.33 T
(}) 50.17 233.33 T
FMENDPAGE
%%EndPage: "34" 35
%%Page: "35" 35
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(35\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 26) 72 641.33 T
(\322Safe\323 class having copy constructor and default constructor) 151.29 641.33 T
6 F
(#include <string.h>) 86.17 617.33 T
(class String) 86.17 593.33 T
({) 86.17 581.33 T
(public:) 106.02 569.33 T
(String\050 const char* cp = ""\051;   // Constructor) 125.86 557.33 T
(String\050 const String& sp \051;     // Copy constructor) 125.86 545.33 T
(~String\050\051;                      // Destructor) 125.86 533.33 T
(// ...) 125.86 521.33 T
(private:) 106.02 509.33 T
(char* sp;) 125.86 497.33 T
(// ...) 125.86 485.33 T
(};) 86.17 473.33 T
(String::String\050 const char* cp \051 : sp\050 new char[strlen\050cp\051] \051    // Constructor) 86.17 449.33 T
({) 86.17 437.33 T
(strcpy\050sp,cp\051;) 106.02 425.33 T
(}) 86.17 413.33 T
(String::String\050 const String& stringA \051 : sp\050 new char[strlen\050stringA.sp\051] \051) 86.17 389.33 T
({) 86.17 377.33 T
(strcpy\050sp,stringA.sp\051;) 106.02 365.33 T
(}) 86.17 353.33 T
(String::~String\050\051     // Destructor) 86.17 329.33 T
({) 86.17 317.33 T
(delete sp;) 106.02 305.33 T
(}) 86.17 293.33 T
(// \322Safe\323 String class) 86.17 269.33 T
(void) 86.17 257.33 T
(main\050\051) 86.17 245.33 T
({) 86.17 233.33 T
(String w1;) 106.02 221.33 T
(String w2 = w1;   // SAFE COPY: String::String\050 const String& \051 CALLED.) 106.02 209.33 T
(}) 86.17 197.33 T
FMENDPAGE
%%EndPage: "35" 36
%%Page: "36" 36
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(36\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 27) 36 641.33 T
(Definitions of classes not having virtual destructors) 115.29 641.33 T
6 F
(class Fruit) 50.17 617.33 T
({) 50.17 605.33 T
(public:) 70.02 593.33 T
5 F
(~Fruit\050\051;     // Forgot to make destructor virtual!!) 89.86 581.33 T
6 F
(// ...) 89.86 569.33 T
(};) 50.17 557.33 T
(class Apple : public Fruit) 50.17 533.33 T
({) 50.17 521.33 T
(public:) 70.02 509.33 T
(~Apple\050\051;     // Destructor) 89.86 497.33 T
(// ...) 89.86 485.33 T
(};) 50.17 473.33 T
(// "Dangerous" usage of pointer to base class) 50.17 449.33 T
(class FruitBasket) 50.17 425.33 T
({) 50.17 413.33 T
(public:) 70.02 401.33 T
(FruitBasket\050\051;) 89.86 389.33 T
(// Create FruitBasket) 208.91 389.33 T
(~FruitBasket\050\051;) 89.86 377.33 T
(// Delete all fruits) 208.91 377.33 T
(// ...) 89.86 365.33 T
(void add\050Fruit*\051;) 89.86 353.33 T
(// Add instance allocated on the free store) 208.91 353.33 T
(// ...) 89.86 341.33 T
(private:) 70.02 329.33 T
(Fruit* storage[42]; // Max 42 fruits stored) 89.86 317.33 T
(int numberOfStoredFruits;) 89.86 305.33 T
(};) 50.17 293.33 T
(void) 50.17 269.33 T
(FruitBasket::add\050Fruit* fp\051) 50.17 257.33 T
({) 50.17 245.33 T
(// Store pointer to fruit) 70.02 233.33 T
(storage[numberOfStoredFruits++] = fp;) 70.02 221.33 T
(}) 50.17 209.33 T
(FruitBasket::FruitBasket\050\051 : numberOfStoredFruits\0500\051) 50.17 185.33 T
({) 50.17 173.33 T
(}) 50.17 161.33 T
(FruitBasket::~FruitBasket\050\051) 50.17 137.33 T
({) 50.17 125.33 T
(while \050numberOfStoredFruits > 0\051) 70.02 113.33 T
({) 70.02 101.33 T
5 F
(   delete storage[--numberOfStoredFruits]; // Only Fruit::~Fruit is called !!) 70.02 89.33 T
6 F
(}) 70.02 77.33 T
FMENDPAGE
%%EndPage: "36" 37
%%Page: "37" 37
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(37\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
6 10 Q
0 X
(}) 86.17 641.33 T
2 F
(Example 28) 72 605.33 T
(Dangerous use of static objects in constructors) 151.29 605.33 T
6 F
(// Hen.hh) 86.17 581.33 T
(class Egg;) 86.17 569.33 T
(class Hen) 86.17 545.33 T
({) 86.17 533.33 T
(public:) 106.02 521.33 T
(Hen\050\051;    // Default constructor) 125.86 509.33 T
(~Hen\050\051;   // Destructor) 125.86 497.33 T
(// ...) 125.86 485.33 T
(void makeNewHen\050Egg*\051;) 125.86 473.33 T
(// ...) 125.86 461.33 T
(};) 86.17 449.33 T
(// Egg.hh) 86.17 425.33 T
(class Egg { };) 86.17 401.33 T
(extern Egg theFirstEgg; // defined in Egg.cc) 86.17 377.33 T
(// FirstHen.hh) 86.17 353.33 T
(class FirstHen : public Hen) 86.17 329.33 T
({) 86.17 317.33 T
(public:) 106.02 305.33 T
(FirstHen\050\051;    // Default constructor) 125.86 293.33 T
(// ...) 125.86 281.33 T
(};) 86.17 269.33 T
(extern FirstHen theFirstHen; // defined in FirstHen.cc) 86.17 245.33 T
(// FirstHen.cc) 86.17 221.33 T
(FirstHen theFirstHen; // FirstHen::FirstHen\050\051 called) 86.17 197.33 T
5 F
(FirstHen::FirstHen\050\051) 86.17 173.33 T
({) 86.17 161.33 T
(// The constructor is risky because theFirstEgg is a global object) 106.02 149.33 T
(// and may not yet exist when theFirstHen is initialized.) 106.02 137.33 T
(// Which comes first, the chicken or the egg ?) 106.02 125.33 T
(makeNewHen\050&theFirstEgg\051;) 106.02 101.33 T
(}) 86.17 89.33 T
FMENDPAGE
%%EndPage: "37" 38
%%Page: "38" 38
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(38\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 29) 36 641.33 T
(One way of ensuring that global objects have been initialized) 115.29 641.33 T
6 F
(// WARNING!!! THIS CODE IS NOT FOR BEGINNERS !!!) 50.17 617.33 T
(// PortSetup.hh) 50.17 593.33 T
(class PortSetup) 50.17 569.33 T
({) 50.17 557.33 T
(public:) 70.02 545.33 T
(PortSetup\050\051;) 89.86 533.33 T
(// Constructor: initializes flag) 208.91 533.33 T
(void foo\050\051;) 89.86 521.33 T
(// Only works correctly if flag is 42) 208.91 521.33 T
(private:) 70.02 509.33 T
(int flag;) 89.86 497.33 T
(// Always initialized to 42) 208.91 497.33 T
(};) 50.17 485.33 T
(extern PortSetup portSetup;  // Must be initialized before use) 50.17 461.33 T
(// Create one instance of portSetupInit in each translation unit) 50.17 437.33 T
(// The constructor for portSetupInit will be called once for each) 50.17 425.33 T
(// translation unit. It initializes portSetup by using the placement) 50.17 413.33 T
(// syntax for the \322new\323 operator.) 50.17 401.33 T
5 F
(static) 50.17 377.33 T
(class PortSetupInit) 50.17 365.33 T
({) 50.17 353.33 T
(public:) 70.02 341.33 T
(PortSetupInit\050\051;           // Default constructor) 89.86 329.33 T
(private:) 70.02 317.33 T
(static int isPortSetup;) 89.86 305.33 T
(} portSetupInit;) 50.17 293.33 T
6 F
(// PortSetup.cc) 50.17 269.33 T
(#include "PortSetup.hh") 50.17 245.33 T
(#include <new.h>) 50.17 233.33 T
(// ...) 50.17 209.33 T
5 F
(PortSetupInit::PortSetupInit\050\051   // Default constructor) 50.17 185.33 T
({) 50.17 173.33 T
(if \050!isPortSetup\051) 70.02 161.33 T
({) 70.02 149.33 T
(new \050&portSetup\051 PortSetup;) 89.86 137.33 T
(isPortSetup = 1;) 89.86 125.33 T
(}) 70.02 113.33 T
(}) 50.17 101.33 T
FMENDPAGE
%%EndPage: "38" 39
%%Page: "39" 39
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(39\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 30) 72 641.33 T
(Override of virtual functions does not work in the base class\325 constructors) 151.29 641.33 T
6 F
(class Base) 86.17 617.33 T
({) 86.17 605.33 T
(public:) 106.02 593.33 T
(Base\050\051;       // Default constructor) 125.86 581.33 T
(virtual void foo\050\051 { cout << "Base::foo" << endl; }) 125.86 569.33 T
(// ...) 125.86 557.33 T
(};) 86.17 545.33 T
5 F
(Base::Base\050\051) 86.17 521.33 T
({) 86.17 509.33 T
(foo\050\051;     // Base::foo\050\051 is ALWAYS called.) 106.02 497.33 T
(}) 86.17 485.33 T
6 F
(// Derived class overrides foo\050\051) 86.17 461.33 T
(class Derived : public Base) 86.17 449.33 T
({) 86.17 437.33 T
(public:) 106.02 425.33 T
(virtual void foo\050\051 { cout << "Derived::foo" << endl; } //foo is overridden) 125.86 413.33 T
(// ...) 125.86 401.33 T
(};) 86.17 389.33 T
(main\050\051) 86.17 365.33 T
({) 86.17 353.33 T
(Derived d;) 106.02 341.33 T
(// Base::foo\050\051 called when the Base-part of) 185.39 341.33 T
(// Derived is constructed.) 185.39 329.33 T
(}) 86.17 317.33 T
1 12 Q
(7.6) 72 250 T
(Assignment Operators) 142.87 250 T
0 F
(Rule 27) 72 220 T
(A class which uses \322new\323 to allocate instances managed by the class,) 142.87 220 T
0 10 Q
(1) 475.27 224.8 T
0 12 Q
(  must define an) 480.27 220 T
4 F
(assignment operator) 142.87 206 T
0 F
(.) 243.83 206 T
(Rule 28) 72 186 T
(An assignment operator which performs a destructive action must be protected from) 142.87 186 T
(performing this action on the object upon which it is operating.) 142.87 172 T
(Rec. 34) 72 152 T
(An assignment operator ought to return a) 142.87 152 T
4 F
(const) 343.06 152 T
0 F
( reference to the assigning object.) 369.05 152 T
-0.64 (An assignment is not inherited like other operators. If an assignment operator is not explicitly defined, then) 72 128 P
0.43 (one is automatically defined instead. Such an assignment operator does not perform bit-wise copying of) 72 114 P
72 84 576 99 C
81 97 225 97 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
(1. i.e. instances bound to member variables of pointer or reference type that are deallocated by the object.) 90 77.33 T
FMENDPAGE
%%EndPage: "39" 40
%%Page: "40" 40
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(40\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
0 X
1.89 (member data; instead, the assignment operator \050if defined\051 for each specific type of member data is) 36 640 P
(invoked. Bit-wise copying is only performed for member data having primitive types.) 36 626 T
-0.25 (One consequence of this is that bit-wise copying is performed for member data having pointer types. If an) 36 602 P
1.78 (object manages the allocation of the instance of an object pointed to by a pointer member, this will) 36 588 P
-0.16 (probably lead to problems: either by invoking the destructor for the managed object more than once or by) 36 574 P
(attempting to use the deallocated object. See also Rule 25.) 36 560 T
0.59 (If an assignment operator is overloaded, the programmer must make certain that the base class\325 and the) 36 536 P
(members\325 assignment operators are run.) 36 522 T
0.37 (A common error is assigning an object to itself \050) 36 498 P
5 F
0.89 (a = a) 271.52 498 P
0 F
0.37 (\051. Normally, destructors for instances which are) 309.29 498 P
-0.72 (allocated on the heap are invoked before assignment takes place. If an object is assigned to itself, the values) 36 484 P
1.2 (of the instance variables will be lost before they are assigned. This may well lead to strange run-time) 36 470 P
(errors. If) 36 456 T
5 F
(a = a) 80.95 456 T
0 F
( is detected, the assigned object should not be changed.) 116.93 456 T
0.75 (If an assignment operator returns \322void\323, then it is not possible to write) 36 432 P
5 F
1.79 (a = b = c) 390.14 432 P
0 F
0.75 (. It may then be) 462.07 432 P
2.51 (tempting to program the assignment operator so that it returns a reference to the assigning object.) 36 418 P
-0.41 (Unfortunately, this kind of design can be difficult to understand. The statement) 36 404 P
5 F
-1 (\050a = b\051 = c) 413.42 404 P
0 F
-0.41 (can mean) 494.79 404 P
-0.27 (that) 36 390 P
5 F
-0.65 (a) 56.72 390 P
0 F
-0.27 (or) 70.46 390 P
5 F
-0.65 (b) 83.18 390 P
0 F
-0.27 ( is assigned the value of) 90.37 390 P
5 F
-0.65 (c) 206.67 390 P
0 F
-0.27 ( before or after) 213.87 390 P
5 F
-0.65 (a) 287.37 390 P
0 F
-0.27 ( is assigned the value of) 294.57 390 P
5 F
-0.65 (b) 410.86 390 P
0 F
-0.27 (. This type of code can be) 418.05 390 P
1.36 (avoided by having the assignment operator return a) 36 376 P
5 F
3.26 (const) 296 376 P
0 F
1.36 ( reference to the assigned object or to the) 331.98 376 P
-0.13 (assigning object. Since the returned object cannot be placed on the left side of an assignment, it makes no) 36 362 P
(difference which of them is returned \050that is, the code in the above example is no longer correct\051.) 36 348 T
2 F
(Exception to Rule 27:) 36 328 T
0 F
(Sometimes, it is desirable to allow objects in a class to share a data area. In such) 149.39 328 T
-0.2 (cases, it is not necessary to define an assignment operator. Instead, it is necessary) 149.39 314 P
-0.75 (to make sure that the shared data area is no deallocated as long as there are pointers) 149.39 300 P
(to it.) 149.39 286 T
2 F
(Exception to Rule 28:) 36 266 T
0 F
(No exceptions.) 149.39 266 T
2 10 Q
(Example 31) 36 229.33 T
(Incorrect and correct return values from an assignment operator) 115.29 229.33 T
5 F
(void) 50.17 205.33 T
(MySpecialClass::operator=\050 const MySpecialClass& msp \051;      / Well ...?) 50.17 193.33 T
(MySpecialClass&) 50.17 169.33 T
(MySpecialClass::operator=\050 const MySpecialClass& msp \051;      // No!) 50.17 157.33 T
6 F
(const MySpecialClass&) 50.17 133.33 T
(MySpecialClass::operator=\050 const MySpecialClass& msp \051;      // Recommended) 50.17 121.33 T
FMENDPAGE
%%EndPage: "40" 41
%%Page: "41" 41
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(41\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 32) 72 641.33 T
(Definition of a class with an overloaded assignment operator) 151.29 641.33 T
6 F
(class DangerousBlob) 86.17 617.33 T
({) 86.17 605.33 T
(public:) 106.02 593.33 T
(const DangerousBlob& operator=\050 const DangerousBlob& dbr \051;) 125.86 581.33 T
(// ...) 125.86 569.33 T
(private:) 106.02 557.33 T
(char* cp;) 125.86 545.33 T
(};) 86.17 533.33 T
(// Definition of assignment operator) 86.17 509.33 T
(const DangerousBlob&) 86.17 485.33 T
(DangerousBlob::operator=\050 const DangerousBlob& dbr \051) 86.17 473.33 T
({) 86.17 461.33 T
(if \050 this != &dbr \051    // Guard against assigning to the \322this\323 pointer) 106.02 449.33 T
({) 106.02 437.33 T
(delete cp;         // Disastrous if this == &dbr) 125.86 425.33 T
(}) 106.02 413.33 T
(// ...) 106.02 401.33 T
(}) 86.17 389.33 T
1 12 Q
(7.7) 72 346 T
(Operator Overloading) 142.87 346 T
0 F
(Rec. 35) 72 316 T
(Use operator overloading sparingly and in a uniform manner.) 142.87 316 T
(Rec. 36) 72 296 T
(When two operators are opposites \050such as) 142.87 296 T
5 F
(==) 351.04 296 T
0 F
( and) 365.43 296 T
5 F
(!=) 388.74 296 T
0 F
(\051, it is appropriate to define both.) 403.14 296 T
0.81 (Operator overloading has both advantages and disadvantages. One advantage is that code which uses a) 72 272 P
-0.57 (class with overloaded operators can be written more compactly \050more readably\051. Another advantage is that) 72 258 P
0.02 (the semantics can be both simple and natural. One disadvantage in overloading operators is that it is easy) 72 244 P
2.88 (to misunderstand the meaning of an overloaded operator \050if the programmer has not used natural) 72 230 P
-0.59 (semantics\051. The extreme case, where the plus-operator is re-defined to mean minus and the minus-operator) 72 216 P
(is re-defined to mean plus, probably will not occur very often, but more subtle cases are conceivable.) 72 202 T
-0.18 (Designing a class library is like designing a language! If you use operator overloading, use it in a uniform) 72 178 P
(manner; do not use it if it can easily give rise to misunderstanding.) 72 164 T
-0.37 (If the operator) 72 140 P
5 F
-0.88 (!=) 142.5 140 P
0 F
-0.37 ( has been designed for a class, then a user may well be surprised if the operator) 156.89 140 P
5 F
-0.88 (==) 533.02 140 P
0 F
-0.37 ( is not) 547.41 140 P
(defined as well.) 72 126 T
FMENDPAGE
%%EndPage: "41" 42
%%Page: "42" 42
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(42\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 F
0 X
(7.8) 36 640 T
(Member Function Return Types) 106.87 640 T
0 F
(Rule 29) 36 610 T
(A public member function must never return a non-const reference or pointer to member) 106.87 610 T
(data.) 106.87 596 T
(Rule 30) 36 576 T
(A public member function must never return a non-const reference or pointer to data) 106.87 576 T
(outside an object, unless the object shares the data with other objects.) 106.87 562 T
-0.43 (By allowing a user direct access to the private member data of an object, this data may be changed in ways) 36 538 P
-0.29 (not intended by the class designer. This may lead to reduced confidence in the designer\325s code: a situation) 36 524 P
(to be avoided.) 36 510 T
-0.37 (A worse risk is having pointers which point to deallocated memory.  Rule 29 and Rule 30 attempt to avoid) 36 486 P
(this situation.) 36 472 T
-0.53 (Note that we do) 36 448 P
4 F
-0.53 (not) 113.14 448 P
0 F
-0.53 ( forbid the use of protected member functions which return a) 129.14 448 P
4 F
-0.53 (const) 418.04 448 P
0 F
-0.53 ( reference or pointer) 444.03 448 P
(to member data. If protected access functions are provided, the problems described in 7.1 are avoided.) 36 434 T
2 F
(Exception to Rule 29:) 36 414 T
0 F
(No exceptions.) 149.39 414 T
2 F
(Exception to Rule 30:) 36 394 T
0 F
(No exceptions.) 149.39 394 T
2 10 Q
(Example 33) 36 357.33 T
(Never return a non-const reference to member data from a public function.) 115.29 357.33 T
6 F
(class Account) 50.17 332 T
({) 50.17 319.33 T
(public:) 70.02 307.33 T
(Account\050 int myMoney \051 : moneyAmount\050 myMoney \051 {};) 89.86 295.33 T
(const int& getSafeMoney\050\051 const { return moneyAmount; }) 89.86 283.33 T
5 F
(int& getRiskyMoney\050\051 const { return moneyAmount; }       // No!) 89.86 271.33 T
6 F
(// ...) 89.86 259.33 T
(private:) 70.02 247.33 T
(int moneyAmount;) 89.86 235.33 T
(};) 50.17 223.33 T
(Account myAcc\05010\051;   // I\325m a poor lonesome programmer a long way from home) 50.17 199.33 T
(myAcc.getSafeMoney\050\051 += 1000000;  // Compilation error: assignment to constant) 50.17 175.33 T
5 F
(myAcc.getRiskyMoney\050\051 += 1000000; // myAcc::moneyAmount = 1000010 !!) 50.17 151.33 T
1 12 Q
(7.9) 36 108 T
(Inheritance) 106.87 108 T
0 F
(Rec. 37) 36 78 T
(Avoid inheritance for) 106.87 78 T
4 F
(parts-of) 213.12 78 T
0 F
( relations.) 251.76 78 T
FMENDPAGE
%%EndPage: "42" 43
%%Page: "43" 43
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(43\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
0 X
(Rec. 38) 72 640 T
(Give derived classes access to class type member data by declaring protected access) 142.87 640 T
(functions.) 142.87 626 T
-0.56 (A common mistake is to use) 72 602 P
4 F
-0.56 (multiple inheritance) 207.87 602 P
0 F
-0.56 (for) 310.05 602 P
4 F
-0.56 (parts-of) 326.46 602 P
0 F
-0.56 (relations \050when an object consists of several) 367.54 602 P
1.87 (other objects, these are inherited instead of using instance variables. This can result in strange class) 72 588 P
0.18 (hierarchies and less flexible code. In C++ there may be an arbitrary number of instances of a given type;) 72 574 P
(if inheritance is used, direct inheritance from a class may only be used once) 72 556.53 T
0 10 Q
(1) 435.05 561.33 T
0 12 Q
(.) 440.05 556.53 T
-0.64 (A derived class often requires access to base class member data in order to create useful member functions.) 72 532.53 P
0.39 (The advantage in using protected member functions is that the names of base class member data are not) 72 518.53 P
-0.65 (visible in the derived classes and thus may be changed. Such access functions should only return the values) 72 504.53 P
-0.54 (of member data \050read-only access\051. This is best done by simply invoking) 72 490.53 P
5 F
-1.3 (const) 417.61 490.53 P
0 F
-0.54 ( functions for the member) 453.59 490.53 P
(data.) 72 476.53 T
0.05 (The guiding assumption is that those who use inheritance know enough about the base class to be able to) 72 452.53 P
-0.12 (use the private member data correctly, while not referring to this data by name. This reduces the coupling) 72 438.53 P
(between base classes and derived classes.) 72 424.53 T
72 84 576 99 C
81 97 225 97 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
(1. As opposed to the language Eiffel, in which multiple, repeated inheritance is permitted.) 90 77.33 T
FMENDPAGE
%%EndPage: "43" 44
%%Page: "44" 44
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(44\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 F
0 X
(8) 36 640 T
201.52 638.73 106.87 638.73 2 L
V
0.88 H
N
(Class Templates) 106.87 640 T
0 F
(Rec. 39) 36 610 T
-0.54 (Do not attempt to create an instance of a class template using a type that does not define the) 106.87 610 P
(member functions which the class template, according to its documentation,  requires.) 106.87 596 T
(Rec. 40) 36 576 T
(Take care to avoid multiple definition of overloaded functions in conjunction with the) 106.87 576 T
(instantiation of a class template.) 106.87 562 T
1.47 (It is not possible in C++ to specify requirements for type arguments for class templates and function) 36 538 P
-0.35 (templates. This may imply that the type chosen by the user, does not comply with the interface as required) 36 524 P
1.69 (by the template. For example, a class template may require that a type argument have a comparison) 36 510 P
(operator defined.) 36 496 T
0.49 (Another problem with type templates can arise for overloaded functions. If a function is overload, there) 36 472 P
0.32 (may be a conflict if the element type appears explicitly in one of these. After instantiation, there may be) 36 458 P
0.07 (two functions which, for example, have the type) 36 444 P
5 F
0.16 (int) 271.04 444 P
0 F
0.07 ( as an argument. The compiler may complain about) 292.63 444 P
0.55 (this, but there is a risk that the designer of the class does not notice it. In cases where there is a risk for) 36 430 P
(multiple definition of member functions, this must be carefully documented.) 36 416 T
2 10 Q
(Example 34) 36 379.33 T
(Problem when using parameterized types \050Cfront 3.0 or other template compiler\051) 115.29 379.33 T
6 F
(template <class ET>) 50.17 355.33 T
(class Conflict) 50.17 343.33 T
({) 50.17 331.33 T
(public:) 70.02 319.33 T
(void foo\050 int a \051;) 89.86 307.33 T
(void foo\050 ET a \051;    // What if ET is an int or another integral type?) 89.86 295.33 T
(                     // The compiler will discover this, but ...) 89.86 283.33 T
(};) 50.17 271.33 T
FMENDPAGE
%%EndPage: "44" 45
%%Page: "45" 45
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(45\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(9) 72 640 T
200.17 638.73 142.87 638.73 2 L
V
0.88 H
N
(Functions) 142.87 640 T
0 F
(Unless otherwise stated, the following rules also apply to member functions.) 72 610 T
1 F
(9.1) 72 566 T
(Function Arguments) 142.87 566 T
0 F
(Rule 31) 72 536 T
(Do not use unspecified function arguments \050ellipsis notation\051.) 142.87 536 T
(Rec. 41) 72 516 T
(Avoid functions with many arguments.) 142.87 516 T
(Rec. 42) 72 496 T
(If a function stores a pointer to an object which is accessed via an argument, let the) 142.87 496 T
(argument have the type pointer. Use reference arguments in other cases.) 142.87 482 T
(Rec. 43) 72 462 T
(Use constant references \050) 142.87 462 T
5 F
(const &) 263.75 462 T
0 F
(\051 instead of call-by-value, unless using a pre-defined) 314.12 462 T
(data type or a pointer.) 142.87 448 T
0.36 (The best known function which uses unspecified arguments is) 72 424 P
5 F
0.86 (printf\050\051) 376.03 424 P
0 F
0.36 (. The use of such functions is) 433.6 424 P
0.03 (not advised since the strong type checking provided by C++ is thereby avoided. Some of the possibilities) 72 410 P
-0.45 (provided by unspecified function arguments can be attained by overloading functions and by using default) 72 396 P
(arguments.) 72 382 T
1.02 (Functions having long lists of arguments look complicated, are difficult to read, and can indicate poor) 72 358 P
(design. In addition, they are difficult to use and to maintain.) 72 344 T
-0.57 (By using references instead of pointers as function arguments, code can be made more readable, especially) 72 320 P
0.02 (within the function. A disadvantage is that it is not easy to see which functions change the values of their) 72 306 P
2.44 (arguments. Member functions which store pointers which have been provided as arguments should) 72 292 P
-0.02 (document this clearly by declaring the argument as a pointer instead of as a reference. This simplifies the) 72 278 P
(code, since it is normal to store a pointer member as a reference to an object.) 72 264 T
-0.1 (One difference between references and pointers is that there is no null-reference in the language, whereas) 72 240 P
-0.02 (there is a null-pointer. This means that an object must have been allocated before passing it to a function.) 72 226 P
(The advantage with this is that it is not necessary to test the existence of the object within the function.) 72 212 T
0.37 (C++ invokes functions according to call-by-value. This means that the function arguments are copied to) 72 188 P
-0.14 (the stack via invocations of copy constructors, which, for large objects, reduces performance. In addition,) 72 174 P
-0.23 (destructors will be invoked when exiting the function.) 72 160 P
5 F
-0.56 (const &) 332.31 160 P
0 F
-0.23 ( arguments mean that only a reference to) 382.12 160 P
1.07 (the object in question is placed on the stack \050call-by-reference\051 and that the object\325s state \050its instance) 72 146 P
-0.11 (variables\051 cannot be modified. \050At least some) 72 132 P
5 F
-0.26 (const) 292.42 132 P
0 F
-0.11 ( member functions are necessary for such objects to) 328.39 132 P
(be at all useful\051.) 72 118 T
2 F
(Exception to Rule 31:) 72 98 T
0 F
(No exceptions.) 185.39 98 T
FMENDPAGE
%%EndPage: "45" 46
%%Page: "46" 46
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(46\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 35) 36 641.33 T
(References instead of pointers) 115.29 641.33 T
6 F
(// Unnecessarily complicated use of pointers) 50.17 617.33 T
(void addOneComplicated\050 int* integerPointer \051) 50.17 605.33 T
({) 50.17 593.33 T
(*integerPointer += 1;) 70.02 581.33 T
(}) 50.17 569.33 T
(addOneComplicated\050 &j \051;) 50.17 545.33 T
(// Write this way instead:) 50.17 521.33 T
(void addOneEasy\050 int& integerReference \051) 50.17 509.33 T
({) 50.17 497.33 T
(integerReference += 1;) 70.02 485.33 T
(}) 50.17 473.33 T
(addOneEasy\050 i \051;) 50.17 449.33 T
FMENDPAGE
%%EndPage: "46" 47
%%Page: "47" 47
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(47\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 36) 72 641.33 T
(Different mechanisms for passing arguments) 151.29 641.33 T
6 F
(// a. A copy of the argument is created on the stack.) 86.17 617.33 T
(//    The copy constructor is called on entry,) 86.17 605.33 T
(//    and the destructor is called at exit from the function.) 86.17 593.33 T
(//    This may lead to very inefficient code.) 86.17 581.33 T
(void foo1\050 String s \051;) 86.17 557.33 T
(String a;) 86.17 545.33 T
(foo1\050 a \051;     // call-by-value) 86.17 533.33 T
(// b. The actual argument is used by the function) 86.17 509.33 T
(//    and it can be modified by the function.) 86.17 497.33 T
(void foo2\050 String& s \051;) 86.17 473.33 T
(String b;) 86.17 461.33 T
(foo2\050 b \051;    // call-by-reference) 86.17 449.33 T
(// c. The actual argument is used by the function) 86.17 425.33 T
(//    but it cannot be modified by the function.) 86.17 413.33 T
(void foo3\050 const String& s \051;) 86.17 389.33 T
(String c;) 86.17 377.33 T
(foo3\050 c \051;    // call-by-constant-reference) 86.17 365.33 T
(// d. A pointer to the actual argument is used by the function.) 86.17 341.33 T
(//    May lead to messy syntax when the function uses the argument.) 86.17 329.33 T
(void foo4\050 const String* s \051;) 86.17 305.33 T
(String d;) 86.17 293.33 T
(foo4\050 &d \051;    // call-by-constant-pointer) 86.17 281.33 T
1 12 Q
(9.2) 72 238 T
(Function Overloading) 142.87 238 T
0 F
(Rec. 44) 72 208 T
-0.63 (When overloading functions, all variations should have the same semantics \050be used for the) 142.87 208 P
(same purpose\051.) 142.87 194 T
0.04 (Overloading of functions can be a powerful tool for creating a family of related functions that only differ) 72 170 P
0.19 (as to the type of data provided as arguments. If not used properly \050such as using functions with the same) 72 156 P
(name for different purposes\051, they can, however, cause considerable confusion.) 72 142 T
FMENDPAGE
%%EndPage: "47" 48
%%Page: "48" 48
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(48\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 37) 36 641.33 T
(Example of the proper usage of function overloading) 115.29 641.33 T
6 F
(class String) 50.17 617.33 T
({) 50.17 605.33 T
(public:                                // Used like this:) 70.02 593.33 T
(// ...                              // String x = "abc123";) 89.86 581.33 T
(int contains\050 const char c \051;       // int i = x.contains\050 \325b\325 \051;) 89.86 569.33 T
(int contains\050 const char* cs \051;     // int j = x.contains\050 "bc1" \051;) 89.86 557.33 T
(int contains\050 const String& s \051;    // int k = x.contains\050 x \051;) 89.86 545.33 T
(// ...) 89.86 533.33 T
(};) 50.17 521.33 T
1 12 Q
(9.3) 36 478 T
(Formal Arguments) 106.87 478 T
0 F
(Rule 32) 36 448 T
-0.7 (The names of) 106.87 448 P
4 F
-0.7 (formal) 173.05 448 P
-0.7 (arguments) 208.67 448 P
0 F
-0.7 ( to functions are to be specified and are to be the) 261.32 448 P
4 F
-0.7 (same) 488.76 448 P
0 F
-0.7 ( both) 514.08 448 P
(in the function declaration and in the function definition.) 106.87 434 T
2.13 (The names of formal arguments may be specified in both the function declaration and the function) 36 410 P
1.76 (definition in C++, even if these are ignored by the compiler in the declaration. Providing names for) 36 396 P
-0.37 (function arguments is a part of the function documentation. The name of an argument may clarify how the) 36 382 P
-0.68 (argument is used, reducing the need to include comments in, for example, a class definition. It is also easier) 36 368 P
(to refer to an argument in the documentation of a class if it has a name.) 36 354 T
2 F
(Exception to Rule 32:) 36 334 T
0 F
(No exceptions!) 149.39 334 T
2 10 Q
(Example 38) 36 297.33 T
(Declaration of formal arguments) 115.29 297.33 T
5 F
(int setPoint\050 int, int \051;        // No !) 50.17 273.33 T
6 F
(int setPoint\050 int x, int y \051;    // Good) 50.17 261.33 T
(int) 50.17 237.33 T
(setPoint\050 int x, int y \051) 50.17 225.33 T
({) 50.17 213.33 T
(// ...) 70.02 201.33 T
(}) 50.17 189.33 T
1 12 Q
(9.4) 36 146 T
(Return Types and Values) 106.87 146 T
0 F
(Rule 33) 36 116 T
(Always specify the return type of a function explicitly.) 106.87 116 T
(Rule 34) 36 96 T
(A public function must never return a reference or a pointer to a local variable.) 106.87 96 T
FMENDPAGE
%%EndPage: "48" 49
%%Page: "49" 49
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(49\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
0 X
0.19 (Functions, for which no return type is explicitly declared, implicitly receive) 72 640 P
5 F
0.46 (int) 440.2 640 P
0 F
0.19 ( as the return type. This) 461.79 640 P
-0.01 (can be confusing for a beginner, since the compiler gives a warning for a missing return type. Because of) 72 626 P
(this, functions which return no value should specify) 72 612 T
5 F
(void) 323.5 612 T
0 F
( as the return type.) 352.29 612 T
-0.13 (If a function returns a reference or a pointer to a local variable, the memory to which it refers will already) 72 588 P
-0.61 (have been deallocated, when this reference or pointer is used. The compiler may or may not give a warning) 72 574 P
(for this.) 72 560 T
2 F
(Exception to Rule 33:) 72 540 T
0 F
(No exceptions!) 185.39 540 T
2 F
(Exception to Rule 34:) 72 520 T
0 F
(No exceptions!) 185.39 520 T
5 10 Q
(Example 39) 72 483.33 T
-1.09 (Functions which return no value should be specified as having the return) 151.29 483.33 P
(type void.) 151.27 471.33 T
(void) 86.17 447.33 T
(strangeFunction\050 const char* before, const char* after \051) 86.17 435.33 T
({) 86.17 423.33 T
(// ...) 106.02 411.33 T
(}) 86.17 399.33 T
1 12 Q
(9.5) 72 356 T
(Inline Functions) 142.87 356 T
0 F
(Rule 35) 72 326 T
-0.6 (Do not use the preprocessor directive) 142.87 326 P
5 F
-1.43 (#define) 321.14 326 P
0 F
-0.6 ( to obtain more efficient code; instead,  use) 371.52 326 P
(inline functions.) 142.87 312 T
(Rec. 45) 72 292 T
(Use) 142.87 292 T
5 F
(inline) 164.51 292 T
0 F
( functions when they are really needed.) 207.69 292 T
(See also 7.2.) 72 268 T
5 F
4.6 (Inline) 72 244 P
0 F
1.92 ( functions have the advantage of often being faster to execute than ordinary functions. The) 115.18 244 P
1.13 (disadvantage in their use is that the implementation becomes more exposed, since the definition of an) 72 230 P
5 F
3.83 (inline) 72 216 P
0 F
1.6 ( function must be placed in an include file for the class, while the definition of an ordinary) 115.18 216 P
(function may be placed in its own separate file.) 72 202 T
-0.11 (A result of this is that a change in the implementation of an) 72 178 P
5 F
-0.26 (inline) 358.07 178 P
0 F
-0.11 ( function can require comprehensive) 401.25 178 P
2.8 (re-compiling when the include file is changed. This is true for traditional file-based programming) 72 164 P
(environments which use such mechanisms as) 72 150 T
5 F
(make) 291.85 150 T
0 F
( for compilation.) 320.64 150 T
-0.25 (The compiler is not compelled to actually make a function inline. The decision criteria for this differ from) 72 126 P
-0.53 (one compiler to another. It is often possible to set a compiler flag so that the compiler gives a warning each) 72 112 P
1.67 (time it does not make a function inline \050contrary to the declaration\051. \322Outlined inlines\323 can result in) 72 98 P
(programs that are both unnecessarily large and slow.) 72 84 T
FMENDPAGE
%%EndPage: "49" 50
%%Page: "50" 50
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(50\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
0 X
0.2 (It may be appropriate to separate inline definitions from class definitions and to place these in a separate) 36 640 P
(file.) 36 626 T
2 F
(Exception to Rule 35:) 36 606 T
0 F
(No exceptions) 149.39 606 T
2 10 Q
(Example 40) 36 569.33 T
(Inline functions are better than macros) 115.29 569.33 T
6 F
(// Example of problems with #define \322functions\323) 50.17 545.33 T
5 F
(#define SQUARE\050x\051 \050\050x\051*\050x\051\051) 50.17 533.33 T
(int a = 2;) 50.17 521.33 T
(int b = SQUARE\050a++\051;  // b = \0502 * 3\051 = 6) 50.17 509.33 T
6 F
(// Inline functions are safer and easier to use than macros if you) 50.17 485.33 T
(// need an ordinary function that would have been unacceptable for) 50.17 473.33 T
(// efficiency reasons.) 50.17 461.33 T
(// They are also easier to convert to ordinary functions later on.) 50.17 449.33 T
(inline int square\050 int x \051) 50.17 437.33 T
({) 50.17 425.33 T
(return \050 x * x \051;) 70.02 413.33 T
(};) 50.17 401.33 T
(int c = 2;) 50.17 377.33 T
(int d = square\050 c++ \051;   // d = \050 2 * 2 \051 = 4) 50.17 365.33 T
1 12 Q
(9.6) 36 322 T
(Temporary Objects) 106.87 322 T
0 F
(Rec. 46) 36 292 T
-0.32 (Minimize the number of temporary objects that are created as return values from functions) 106.87 292 P
(or as arguments to functions.) 106.87 278 T
0.27 (Temporary objects are often created when objects are returned from functions or when objects are given) 36 254 P
0 (as arguments to functions. In either case, a constructor for the object is first invoked; later, a destructor is) 36 240 P
0.77 (invoked. Large temporary objects make for inefficient code. In some cases, errors are introduced when) 36 226 P
1.33 (temporary objects are created. It is important to keep this in mind when writing code. It is especially) 36 212 P
-0.04 (inappropriate to have pointers to temporary objects, since the lifetime of a temporary object is undefined.) 36 198 P
(\050See 18.7\051.) 36 184 T
FMENDPAGE
%%EndPage: "50" 51
%%Page: "51" 51
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(51\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 41) 72 641.33 T
(Temporary objects and one way of eliminating them) 151.29 641.33 T
6 F
(class BigObject  { double big[123456]; };) 86.17 617.33 T
(// Example of a very inefficient function with respect to temporary objects:) 86.17 593.33 T
(BigObject) 86.17 581.33 T
(slowTransform\050 BigObject myBO \051) 86.17 569.33 T
({) 86.17 557.33 T
(// When entering slowTransform\050\051, myBO is a copy of the function argument) 106.02 545.33 T
(// provided by the user. -> A copy constructor for BigObject is executed.) 106.02 533.33 T
(// ... Transform myBO in some way) 106.02 521.33 T
(return myBO;   // Transformed myBO returned to the user) 106.02 509.33 T
(}) 86.17 497.33 T
(// When exiting slowTransform\050\051, a copy of myBO is returned to the) 86.17 485.33 T
(// user -> copy-constructor for BigObject is executed, again.) 86.17 473.33 T
(// Much more efficient solution:) 86.17 449.33 T
(BigObject&) 86.17 437.33 T
(fastTransform\050 BigObject& myBO \051) 86.17 425.33 T
({) 86.17 413.33 T
(// When entering fastTransform\050\051, myBO is the same object as the function) 106.02 401.33 T
(// argument provided by the user. -> No copy-constructor is executed.) 106.02 389.33 T
(// Transform myBO in some way) 106.02 365.33 T
(return myBO;   // Transformed myBO is returned to the user.) 106.02 353.33 T
(}) 86.17 341.33 T
(// When exiting fastTransform\050\051, the very same myBO is returned) 86.17 329.33 T
(// to the user. -> No copy constructor executed.) 86.17 317.33 T
(void main\050\051) 86.17 293.33 T
({) 86.17 281.33 T
(BigObject BO;) 106.02 269.33 T
(BO = slowTransform\050 BO \051;) 106.02 257.33 T
(BO = fastTransform\050 BO \051;   // Same syntax as slowTransform\050\051 !!) 106.02 245.33 T
(}) 86.17 233.33 T
1 12 Q
(9.7) 72 190 T
(General) 142.87 190 T
0 F
(Rec. 47) 72 160 T
(Avoid long and complex functions.) 142.87 160 T
(Long functions have disadvantages:) 72 136 T
(1) 72 116 T
(If a function is too long, it can be difficult to comprehend. Generally, it can be said that a function) 100.35 116 T
-0.35 (should not be longer than two pages, since that is about how much that can be comprehended at one) 100.35 102 P
(time.) 100.35 88 T
FMENDPAGE
%%EndPage: "51" 52
%%Page: "52" 52
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(52\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
0 X
(2) 36 640 T
-0.42 (If an error situation is discovered at the end of an extremely long function, it may be difficult for the) 64.35 640 P
(function to clean up after itself and to \322undo\323 as much as possible before reporting the error to the) 64.35 626 T
(calling function. By always using short functions, such an error can be more exactly localized.) 64.35 612 T
1.06 (Complex functions are difficult to test. If a function consists of 15 nested if statements, then there are) 36 588 P
(2**15 \050or 32768\051 different branches to test in a single function.) 36 574 T
FMENDPAGE
%%EndPage: "52" 53
%%Page: "53" 53
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(53\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(10) 72 640 T
201.5 638.73 142.87 638.73 2 L
V
0.88 H
N
(Constants) 142.87 640 T
0 F
(Rule 36) 72 610 T
(Constants are to be defined using) 142.87 610 T
5 F
(const) 305.42 610 T
0 F
( or) 341.4 610 T
5 F
(enum) 357.39 610 T
0 F
(; never using #) 386.18 610 T
5 F
(define) 457.13 610 T
0 F
(.) 500.31 610 T
(Rule 37) 72 590 T
(Avoid the use of numeric values in code; use symbolic values instead.) 142.87 590 T
0.65 (The preprocessor performs a textual substitution for macros in the source code which is then compiled.) 72 566 P
-0.53 (This has a number of negative consequences. For example, if a constant has been defined using #) 72 552 P
5 F
-1.27 (define) 529.83 552 P
0 F
-0.53 (,) 573 552 P
2.02 (the name of the constant is not recognized in many debuggers. If the constant is represented by an) 72 538 P
1.47 (expression, this expression may be evaluated differently for different instantiations, depending on the) 72 524 P
(scope of the name. In addition, macros are, at times, incorrectly written.) 72 510 T
-0.12 (Numerical values in code \050\322Magic Numbers\323\051 should be viewed with suspicion. They can be the cause of) 72 486 P
0.78 (difficult problems if and when it becomes necessary to change a value. A large amount of code can be) 72 472 P
-0.3 (dependent on such a value never changing, the value can be used at a number of places in the code \050it may) 72 458 P
-0.14 (be difficult to locate all of them\051, and values as such are rather anonymous \050it may be that every \3242\325 in the) 72 444 P
(code should not be changed to a \3243\325\051.) 72 430 T
-0.31 (From the point of view of portability, absolute values may be the cause of more subtle problems. The type) 72 406 P
0.08 (of a numeric value is dependent on the implementation. Normally, the type of a numeric value is defined) 72 392 P
(as the smallest type which can contain the value.) 72 378 T
2 F
(Exception to Rule 36:) 72 358 T
0 F
(No exceptions.) 185.39 358 T
2 F
(Exception to Rule 37:) 72 338 T
0 F
-0.34 (Certain numerical values have a well established and clear meaning in a program.) 185.39 338 P
-0.67 (For example, \325) 185.39 324 P
6 F
-1.62 (1) 254.32 324 P
0 F
-0.67 (\325 and \325) 261.52 324 P
6 F
-1.62 (0) 291.47 324 P
0 F
-0.67 (\325 are often used to represent \324true\325 and \324false\325 respectively.) 298.67 324 P
(These may be used directly in code without being considered to be \322Magic\323.) 185.39 310 T
2 10 Q
(Example 42) 72 273.33 T
(Different ways of declaring constants.) 151.29 273.33 T
6 F
(// Constants using macros) 86.17 249.33 T
5 F
(#define BUFSIZE 7            // No type checking) 86.17 237.33 T
6 F
(// Constants using const) 86.17 213.33 T
(const int bufSize = 7;       // Type checking takes place) 86.17 201.33 T
(// Constants using enums) 86.17 177.33 T
(enum SIZE { BufSize = 7 };   // Type checking takes place) 86.17 165.33 T
2 F
(Example 43) 72 128 T
(Declaration of) 151.29 128 T
5 12 Q
(const) 214.57 128 T
2 10 Q
( defined in another file) 250.55 128 T
6 F
(extern const char constantCharacter;) 86.17 103.33 T
(extern const String fileName;) 86.17 91.33 T
FMENDPAGE
%%EndPage: "53" 54
%%Page: "54" 54
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(54\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 F
0 X
(11) 36 640 T
160.2 638.73 106.87 638.73 2 L
V
0.88 H
N
(Variables) 106.87 640 T
0 F
(Rule 38) 36 610 T
(Variables are to be declared with the smallest possible) 106.87 610 T
4 F
(scope) 370.34 610 T
0 F
(.) 397.65 610 T
(Rule 39) 36 590 T
(Each variable is to be declared in a) 106.87 590 T
4 F
(separate declaration statement.) 277.39 590 T
0 F
(Rule 40) 36 570 T
(Every variable that is declared is to be) 106.87 570 T
4 F
(given a value) 293.39 570 T
0 F
( before it is used.) 358.68 570 T
(Rule 41) 36 550 T
(If possible, always use initialization instead of assignment.) 106.87 550 T
-0.42 (A variable ought to be declared with the smallest possible scope to improve the readability of the code and) 36 526 P
0.81 (so that variables are not unnecessarily allocated. When a variable that is declared at the beginning of a) 36 512 P
0.17 (function is used somewhere in the code, it is not easy to directly see the type of the variable. In addition,) 36 498 P
0.91 (there is a risk that such a variable is inadvertently hidden if a local variable, having the same name, is) 36 484 P
(declared in an internal block.) 36 470 T
0.67 (Many local variables are only used in special cases which seldom occur. If a variable is declared at the) 36 446 P
-0.41 (outer level, memory will be allocated even if it is not used. In addition, when variables are initialized upon) 36 432 P
(declaration, more efficient code is obtained than if values are assigned when the variable is used.) 36 418 T
0.28 (A variable must always be initialized before use. Normally, the compiler gives a warning if a variable is) 36 394 P
0.28 (undefined. It is then sufficient to take care of such cases. Instances of a class are usually initialized even) 36 380 P
0.25 (if no arguments are provided in the declaration \050the empty constructor is invoked\051. To declare a variable) 36 366 P
(that has been initialized in another file, the keyword) 36 352 T
5 F
(extern) 288.48 352 T
0 F
( is always used.) 331.66 352 T
-0.08 (By always initializing variables, instead of assigning values to them before they are first used, the code is) 36 328 P
-0.02 (made more efficient since no temporary objects are created for the initialization. For objects having large) 36 314 P
(amounts of data, this can result in significantly faster code.) 36 300 T
2 F
(Exception to Rule 38:) 36 280 T
0 F
(No exceptions.) 149.39 280 T
2 F
(Exception to Rule 39:) 36 260 T
0 F
(No exceptions.) 149.39 260 T
2 F
(Exception to Rule 40:) 36 240 T
0 F
(No exceptions.) 149.39 240 T
2 F
(Exception to Rule 41:) 36 220 T
0 F
(In certain special cases, a variable is assigned the value of a complicated) 149.39 220 T
(expression; it may then be unnecessary to give the variable an initial value. See) 149.39 206 T
(Example 44.) 149.39 192 T
FMENDPAGE
%%EndPage: "54" 55
%%Page: "55" 55
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(55\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 44) 72 641.33 T
(Initialization instead of Assignment) 151.29 641.33 T
5 F
(//) 86.17 617.33 T
(Do not do this!) 106.02 617.33 T
(//) 86.17 605.33 T
(int i;) 106.02 605.33 T
(//) 86.17 593.33 T
(... 1022 lines of code) 106.02 593.33 T
(//) 86.17 581.33 T
(i = 10;) 106.02 581.33 T
6 F
(int j = 10;) 86.17 557.33 T
(// Better) 264.76 557.33 T
(class Special) 86.17 533.33 T
(//) 264.76 533.33 T
(Array of this class is used to initialize) 284.6 533.33 T
({) 86.17 521.33 T
(// MyClass::complicated) 264.76 521.33 T
(public:) 125.86 509.33 T
(Special\050\051;             // Default constructor) 125.86 497.33 T
(int isValid\050\051 const;) 145.7 485.33 T
(int value\050\051 const;) 125.86 473.33 T
(};) 86.17 461.33 T
(const int Magic = 1066;) 86.17 437.33 T
(Special specialInit[Magic];) 86.17 425.33 T
(class MyClass) 86.17 401.33 T
({) 86.17 389.33 T
(public:) 106.02 377.33 T
(MyClass\050 const char* init \051;   // Constructor) 125.86 365.33 T
(// ...) 125.86 353.33 T
(private:) 106.02 341.33 T
(String privateString;) 125.86 329.33 T
(int complicated;) 125.86 317.33 T
(};) 86.17 305.33 T
5 F
(// Do not do this! Inefficient code.) 86.17 281.33 T
(// Empty constructor + assignment operator called for privateString) 86.17 269.33 T
(//) 86.17 257.33 T
(// MyClass::MyClass\050 const char* init \051) 86.17 245.33 T
(// {) 86.17 233.33 T
(//) 86.17 221.33 T
(privateString = init;) 125.86 221.33 T
(//) 86.17 209.33 T
(...) 125.86 209.33 T
(// }) 86.17 197.33 T
6 F
(MyClass::MyClass\050 const char* init \051 : privateString\050 init \051    // Better) 86.17 173.33 T
({) 86.17 161.33 T
(// Special case - complicated expression) 106.02 149.33 T
(for\050 int i = 0; i < Magic; i++ \051) 106.02 125.33 T
(// No! You should enclose \322for\323) 344.13 125.33 T
(if \050 specialInit[i].isValid\050\051 \051) 125.86 113.33 T
(// loops in braces! See Rec. 25!) 344.13 113.33 T
({) 125.86 101.33 T
(complicated = specialInit[i].value\050\051;) 145.7 89.33 T
(break;) 145.7 77.33 T
FMENDPAGE
%%EndPage: "55" 56
%%Page: "56" 56
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(56\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
6 10 Q
0 X
(}) 89.86 641.33 T
(}) 50.17 629.33 T
FMENDPAGE
%%EndPage: "56" 57
%%Page: "57" 57
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(57\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(12) 72 640 T
283.5 638.73 142.87 638.73 2 L
V
0.88 H
N
(Pointers and References) 142.87 640 T
0 F
(Rule 42) 72 610 T
(Do not compare a pointer to NULL or assign NULL to a pointer; use 0) 142.87 610 T
0 10 Q
(1) 482.63 614.8 T
0 12 Q
( instead.) 487.62 610 T
(Rec. 48) 72 590 T
(Pointers to pointers should whenever possible be avoided.) 142.87 590 T
(Rec. 49) 72 570 T
(Use a) 142.87 570 T
5 F
(typedef) 172.84 570 T
0 F
( to simplify program syntax when declaring function pointers.) 223.21 570 T
1.55 (According to the ANSI-C standard, NULL is defined either as) 72 546 P
5 F
3.73 (\050void*\0510) 388.98 546 P
0 F
1.55 ( or as) 446.55 546 P
5 F
3.73 (0) 480.19 546 P
0 F
1.55 (. If this definition) 487.38 546 P
1.07 (remains in ANSI-C++, problems may arise. If NULL is defined to have the type) 72 532 P
5 F
2.56 (void*) 474.86 532 P
0 F
1.07 (, it cannot be) 510.84 532 P
2.92 (assigned an arbitrary pointer without an explicit type conversion. For this reason, we recommend) 72 518 P
(comparisons with 0 at least until the ANSI-C++ committee has made a decision.) 72 504 T
0.02 (Pointers to pointers normally ought not be used. Instead, a class should be declared, which has a member) 72 480 P
-0.31 (variable of the pointer type. This improves the readability of the code and encourages data abstraction. By) 72 466 P
1.69 (improving the readability of code, the probability of failure is reduced. One exception to this rule is) 72 452 P
-0.16 (represented by functions which provide interfaces to other languages \050such as C\051. These are likely to only) 72 438 P
0.49 (allow pre-defined data types to be used as arguments in the interface, in which case pointers to pointers) 72 424 P
1.05 (are needed. Another example is the second argument to the) 72 410 P
5 F
2.53 (main) 369.33 410 P
0 F
1.05 ( function, which must have the type) 398.11 410 P
6 10 Q
(char*[]) 72 392.53 T
0 F
(2) 113.98 397.33 T
0 12 Q
(.) 118.97 392.53 T
1.59 (A function which changes the value of a pointer that is provided as an argument, should declare the) 72 367.87 P
(argument as having the type reference to pointer \050e.g.) 72 353.87 T
6 F
(char*&) 331.45 353.87 T
0 F
(\051. See Rec. 42!) 374.63 353.87 T
5 F
5.11 (typedef) 72 329.87 P
0 F
2.13 ( is a good way of making code more easily maintainable and portable. See chapter 18.1,) 122.37 329.87 P
0.05 (Port.Rec.1. Another reason to use) 72 315.87 P
5 F
0.13 (typedef) 236.82 315.87 P
0 F
0.05 ( is that the readability of the code is improved. If pointers to) 287.2 315.87 P
1.19 (functions are used, the resulting code can be almost unreadable. By making a type declaration for the) 72 301.87 P
(function type, this is avoided.) 72 287.87 T
(Function pointers can be used as ordinary functions; they do not need to be dereferenced) 72 260.4 T
0 10 Q
(3) 497.01 265.2 T
0 12 Q
(.) 502.01 260.4 T
2 F
(Exception to Rule 42:) 72 240.4 T
0 F
(No exceptions.) 185.39 240.4 T
2 10 Q
(Example 45) 72 203.73 T
(Different comparisons of pointers) 151.29 203.73 T
6 F
(char* sp = new char[100];) 86.17 179.73 T
5 F
(if \050 !sp \051        cout << "New failed!" << endl;   // No!) 86.17 167.73 T
6 F
(if \050 sp == 0 \051    cout << "New failed!" << endl;   // Best) 86.17 155.73 T
5 F
(if \050 sp == NULL \051 cout << "New failed!" << endl;   // ERROR sometimes !!!) 86.17 143.73 T
72 120 576 135 C
81 133 225 133 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
0.92 (1. An intensive debate about this has been raging in the \322news\323 group) 90 113.33 P
6 F
2.2 (comp.lang.c++) 383.38 113.33 P
0 F
0.92 (. Future changes in this) 461.33 113.33 P
(recommendation may occur.) 100.35 101.33 T
(2. This is equivalent to) 90 89.33 T
6 F
(char**) 183.84 89.33 T
0 F
(.) 219.82 89.33 T
(3. See Example 46.) 90 77.33 T
FMENDPAGE
%%EndPage: "57" 58
%%Page: "58" 58
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(58\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 46) 36 638.67 T
(Pointers to pointers are often unnecessary) 115.29 638.67 T
2 8 Q
(1) 294.33 642.67 T
6 10 Q
(#include <iostream.h>) 50.17 614.67 T
(void print_mij\050int** m, int dim1, int dim2\051) 50.17 590.67 T
({) 50.17 578.67 T
(for \050int i = 0; i < dim1; i++\051) 70.02 566.67 T
({) 70.02 554.67 T
(for \050int j = 0; j < dim2; j++ \051) 89.86 542.67 T
(cout << " " << \050\050int*\051m\051[i*dim2+j];) 109.7 530.67 T
(cout << endl;) 89.86 518.67 T
(}) 70.02 506.67 T
(}) 50.17 494.67 T
(// Could be written as:) 50.17 470.67 T
(class Int_Matrix) 50.17 446.67 T
({) 50.17 434.67 T
(public:) 70.02 422.67 T
(Int_Matrix\050int dim1, int dim2\051;) 89.86 410.67 T
(int value\050int,int\051 const;) 89.86 398.67 T
(int dim1\050\051 const;) 89.86 386.67 T
(int dim2\050\051 const;) 89.86 374.67 T
(// ..) 70.02 362.67 T
(};) 50.17 350.67 T
(void print_Mij\050Int_Matrix m\051) 50.17 326.67 T
({) 50.17 314.67 T
(for \050int i = 0; i < m.dim1\050\051; i++\051) 70.02 302.67 T
({) 70.02 290.67 T
(for \050int j = 0; j < m.dim2\050\051; j++ \051) 89.86 278.67 T
(cout << " " << m.value\050i,j\051;) 109.7 266.67 T
(cout << endl;) 89.86 254.67 T
(}) 70.02 242.67 T
(}) 50.17 230.67 T
36 84 540 99 C
45 97 189 97 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
(1. This example is, in part, taken from [3]: The C++ Programming Language, Second Edition \320 Bjarne Stroustrup.) 54 77.33 T
FMENDPAGE
%%EndPage: "58" 59
%%Page: "59" 59
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(59\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
5 10 Q
0 X
(Example 47) 72 641.33 T
(Complicated declarations) 151.29 641.33 T
6 F
(// func1 is a function: int -> \050function : const char* -> int\051) 86.17 617.33 T
(// i.e. a function having one argument of type int and returning) 86.17 605.33 T
(// a pointer to a function having one argument of type const char*) 86.17 593.33 T
(// and returning an int.) 86.17 581.33 T
(int \050*func1\050int\051\051\050const char*\051;) 86.17 557.33 T
(// func1 of the same type as func2) 86.17 533.33 T
(typedef int FTYPE\050const char*\051;) 86.17 509.33 T
(FTYPE* func2\050int\051;) 86.17 497.33 T
(int \050*\050*func1p\051\050int\051\051\050const char*\051 = func2;) 86.17 473.33 T
(// Realistic example from signal.h) 86.17 449.33 T
(void \050*signal\050int,void \050*\051\050int\051\051\051\050int\051;) 86.17 425.33 T
5 F
(Example 48) 72 389.33 T
(Syntax simplification of function pointers using a typedef) 151.29 389.33 T
6 F
(#include <math.h>) 86.17 365.33 T
(// Ordinary messy way of declaring pointers to functions:) 86.17 341.33 T
(// double \050 *mathFunc \051 \050 double \051 = sqrt;) 86.17 329.33 T
(// With a typedef, life is filled with happiness \050chinese proverb\051:) 86.17 305.33 T
(typedef double MathFuncType\050 double \051;) 86.17 293.33 T
(MathFuncType* mathFunc = sqrt;) 86.17 281.33 T
(void) 86.17 257.33 T
(main\050\051) 86.17 245.33 T
({) 86.17 233.33 T
(// You can invoke the funktion in an easy or complicated way) 106.02 221.33 T
(double returnValue1 = mathFunc\050 23.0 \051;     // Easy way) 106.02 209.33 T
5 F
(double returnValue2 = \050 *mathFunc \051\050 23.0 \051; // No! Correct, but complicated) 106.02 197.33 T
6 F
(}) 86.17 185.33 T
FMENDPAGE
%%EndPage: "59" 60
%%Page: "60" 60
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(60\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 F
0 X
(13) 36 640 T
210.84 638.73 106.87 638.73 2 L
V
0.88 H
N
(Type Conversions) 106.87 640 T
0 F
(Rule 43) 36 610 T
(Never use) 106.87 610 T
4 F
(explicit) 158.15 610 T
(type conversions \050casts\051) 197.13 610 T
0 F
(.) 313.72 610 T
(Rule 44) 36 590 T
(Do not write code which depends on functions that use) 106.87 590 T
4 F
(implicit type conversions) 373.35 590 T
0 F
(.) 495.29 590 T
(Rule 45) 36 570 T
(Never convert pointers to objects of a derived class to pointers to objects of a virtual base) 106.87 570 T
(class.) 106.87 556 T
(Rule 46) 36 536 T
(Never convert a) 106.87 536 T
5 F
(const) 186.45 536 T
0 F
( to a non-) 222.43 536 T
5 F
(const) 268.07 536 T
0 F
(.) 304.05 536 T
-0.72 (A type conversion may either be explicit or implicit, depending on whether it is ordered by the programmer) 36 512 P
0.06 (or by the compiler. Explicit type conversions \050casts\051 are used when a programmer want to get around the) 36 498 P
2.62 (compiler\325s typing system; for success in this endeavour, the programmer must use them correctly.) 36 484 P
-0.15 (Problems which the compiler avoids may arise, such as if the processor demands that data of a given type) 36 470 P
-0.41 (be located at certain addresses or if data is truncated because a data type does not have the same size as the) 36 456 P
-0.67 (original type on a given platform. Explicit type conversions between objects of different types lead, at best,) 36 442 P
(to code that is difficult to read.) 36 428 T
1.33 (Explicit type conversions \050casts\051 can be motivated if a base class pointer to a derived class pointer is) 36 404 P
-0.55 (needed. This happens when, for example, a heterogeneous container class is used to implement a container) 36 390 P
-0.09 (class to store pointers to derived class objects. This new class can be made \322type-safe\323 if the programmer) 36 376 P
0.42 (excludes other objects than derived class pointers from being stored. In order for this implementation to) 36 362 P
1.04 (work, it is necessary that the base class pointers are converted to derived class pointers when they are) 36 348 P
(removed from the heterogeneous container class.) 36 334 T
-0.7 (The above reason for using explicit casts will hopefully disappear when templates are introduced into C++.) 36 310 P
-0.03 (It is sometimes said that explicit casts are to object-oriented programming, what the) 36 286 P
5 F
-0.08 (goto) 440.66 286 P
0 F
-0.03 ( statement was) 469.44 286 P
(to structured programming.) 36 272 T
0.59 (There are two kinds of implicit type conversions: either there is a conversion function from one type to) 36 248 P
-0.54 (another, written by the programmer, or the compiler does it according to the language standard. Both cases) 36 234 P
(can lead to problems.) 36 220 T
-0.23 (C++ is lenient concerning the variables that may be used as arguments to functions. If there is no function) 36 196 P
-0.16 (which exactly matches the types of the arguments, the compiler attempts to convert types to find a match.) 36 182 P
0.37 (The disadvantage in this is that if more than one matching function is found, a compilation error will be) 36 168 P
-0.27 (the result. Even worse is that existing code which the compiler has allowed in other contexts, may contain) 36 154 P
0.39 (errors when a new implicit type conversion is added to the code. Suddenly, there may be more than one) 36 140 P
(matching function) 36 122.53 T
0 10 Q
(1) 123.61 127.33 T
0 12 Q
(.) 128.61 122.53 T
36 84 540 99 C
45 97 189 97 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
(1. See Example 53!) 54 77.33 T
FMENDPAGE
%%EndPage: "60" 61
%%Page: "61" 61
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(61\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
0 X
0.03 (Another unpredictable effect of implicit type conversions is that temporary objects are created during the) 72 640 P
2.02 (conversion) 72 622.53 P
0 10 Q
1.68 (1) 124.63 627.33 P
0 12 Q
2.02 (. This object is then the argument to the function; not the original object. The language) 129.62 622.53 P
-0.38 (definition forbids the assignment of temporary objects to non-constant references, but most compilers still) 72 608.53 P
1.94 (permit this. In most cases, this can mean that the program does not work properly. Be careful with) 72 594.53 P
0.16 (constructors that use only one argument, since this introduces a new type conversion which the compiler) 72 580.53 P
(can unexpectedly use when it seems reasonable in a given situation.) 72 566.53 T
0.31 (Virtual base classes give rise to other type conversion problems. It is possible to convert a pointer, to an) 72 542.53 P
0.45 (instance of a class which has a virtual base class, to a pointer to an object of that virtual base class. The) 72 528.53 P
0.57 (opposite conversion is not allowed, i.e. the type conversion is not reversible. For this reason, we do not) 72 514.53 P
(recommend the conversion of a derived class pointer to a virtual base class pointer.) 72 500.53 T
0.29 (In order to return a non-const temporary object, it sometimes happens that an explicit type conversion is) 72 476.53 P
0.81 (used to convert const member data to non-const. This is bad practice that should be avoided, primarily) 72 462.53 P
(because it should be possible for a compiler to allocate constants in ROM \050Read Only Memory\051) 72 445.07 T
0 10 Q
(2) 532.02 449.87 T
0 12 Q
(.) 537.02 445.07 T
2 F
(Exception to Rule 43:) 72 425.07 T
0 F
(An explicit type conversion \050cast\051 is preferable to a doubtful implicit type) 185.39 425.07 T
(conversion.) 185.39 411.07 T
(Explicit type conversions may be used to convert a pointer to a base class to a) 185.39 397.07 T
(pointer of a derived class within a type-safe container class that is implemented) 185.39 383.07 T
(using a heterogeneous container class.) 185.39 369.07 T
(Explicit type conversion must be used to convert an anonymous bit-stream to an) 185.39 355.07 T
(object. This situation occurs when unpacking a message in a message buffer.) 185.39 341.07 T
(Generally, explicit type conversions are needed for reading an external) 185.39 327.07 T
(representation of an object.) 185.39 313.07 T
2 F
(Exception to Rule 44:) 72 293.07 T
0 F
(At times it is desirable to have constructors that use only one argument. By) 185.39 293.07 T
(performing an explicit type conversion, the correctness of the code does not) 185.39 279.07 T
(depend on the addition. See the Exception to Rule 22!) 185.39 265.07 T
2 F
(Exception to Rule 45:) 72 245.07 T
0 F
-0.23 (If a virtual base class is to contain a pure virtual function which converts a virtual) 185.39 245.07 P
-0.26 (base class pointer to a derived class pointer, this can be made to work by defining) 185.39 231.07 P
-0.79 (the function in the derived class. Note that this implies that all derived classes must) 185.39 217.07 P
(be known in the virtual base class. See Example 52!) 185.39 203.07 T
2 F
(Exception to Rule 46:) 72 183.07 T
0 F
(No exceptions. Use pointers to data allocated outside the class, when necessary.) 185.39 183.07 T
(See Example 54 and Example 55.) 185.39 169.07 T
72 96 576 111 C
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 10 Q
0 X
0 K
(1. See Example 51!) 90 89.33 T
(2. See Example 54 and Example 55.) 90 77.33 T
FMENDPAGE
%%EndPage: "61" 62
%%Page: "62" 62
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(62\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 49) 36 641.33 T
(Constructors with a single argument that may imply dangerous type conversions) 115.29 641.33 T
6 F
(class String) 50.17 617.33 T
({) 50.17 605.33 T
(public:) 70.02 593.33 T
(String\050 int length \051;     // Allocation constructor) 89.86 581.33 T
(// ...) 89.86 569.33 T
(};) 50.17 557.33 T
(// Function that receives an object of type String as an argument) 50.17 533.33 T
(void foo\050 const String& aString \051;) 50.17 521.33 T
(// Here we call this function with an int as argument) 50.17 497.33 T
(int x = 100;) 50.17 485.33 T
5 F
(foo\050 x \051;       // Implicit conversion: foo\050 String\050 x \051 \051;) 50.17 473.33 T
2 F
(Example 50) 36 437.33 T
(A use of implicit type conversion) 115.29 437.33 T
6 F
(// String.hh) 50.17 413.33 T
(class String) 50.17 389.33 T
({) 50.17 377.33 T
(public:) 70.02 365.33 T
(String\050 char* cp \051;             // Constructor) 89.86 353.33 T
(operator const char* \050\051 const;  // Conversion operator to const char*) 89.86 341.33 T
(// ...) 89.86 329.33 T
(};) 50.17 317.33 T
(void foo\050 const String& aString \051;) 50.17 293.33 T
(void bar\050 const char* someChars \051;) 50.17 281.33 T
(// main.cc) 50.17 257.33 T
(main\050\051) 50.17 233.33 T
({) 50.17 221.33 T
(foo\050 "hello" \051;        // Implicit type conversion char* -> String) 70.02 209.33 T
(String peter = "pan";) 70.02 197.33 T
(bar\050 peter \051;          // Implicit type conversion String -> const char*) 70.02 185.33 T
(}) 50.17 173.33 T
FMENDPAGE
%%EndPage: "62" 63
%%Page: "63" 63
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(63\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 51) 72 641.33 T
(When implicit type conversion gives unpleasant results) 151.29 641.33 T
6 F
(// This function looks bulletproof, but it isn\325t.) 86.17 617.33 T
(// Newer versions of compilers should flag this as an error.) 86.17 605.33 T
(void) 86.17 593.33 T
(mySwap\050 int& x, int& y \051) 86.17 581.33 T
({) 86.17 569.33 T
(int temp = x;) 106.02 557.33 T
(x = y;) 106.02 545.33 T
(y = temp;) 106.02 533.33 T
(}) 86.17 521.33 T
(int i = 10;) 86.17 497.33 T
5 F
(unsigned int ui = 20;) 86.17 485.33 T
(mySwap\050 i, ui \051;) 86.17 473.33 T
6 F
(     // What really happens here is:) 188.12 473.33 T
(                      // int T = int\050 ui \051;    // Implicit conversion) 86.17 461.33 T
(                      // mySwap\050 i, T \051;       // ui is of course not changed!) 86.17 449.33 T
(                      // Fortunately, the compiler warns for this !) 86.17 437.33 T
FMENDPAGE
%%EndPage: "63" 64
%%Page: "64" 64
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(64\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 52) 36 641.33 T
(Conversion of derived class pointer to a virtual base class pointer is irreversible) 115.29 641.33 T
6 F
(class VirtualBase) 50.17 617.33 T
({) 50.17 605.33 T
(public:) 70.02 593.33 T
(virtual class Derived* asDerived\050\051 = 0;) 89.86 581.33 T
(};) 50.17 569.33 T
(class Derived : virtual public VirtualBase) 50.17 545.33 T
({) 50.17 533.33 T
(public:) 70.02 521.33 T
(virtual Derived* asDerived\050\051;) 89.86 509.33 T
(};) 50.17 497.33 T
(Derived*) 50.17 473.33 T
(Derived::asDerived\050\051) 50.17 461.33 T
({) 50.17 449.33 T
(return this;) 70.02 437.33 T
(}) 50.17 425.33 T
(void) 50.17 401.33 T
(main\050\051) 50.17 389.33 T
({) 50.17 377.33 T
(Derived d;) 70.02 365.33 T
(Derived* dp = 0;) 70.02 353.33 T
(VirtualBase* vp = \050VirtualBase*\051&d;) 70.02 341.33 T
5 F
(dp = \050Derived*\051vp; // ERROR! Cast from virtual base class pointer) 70.02 317.33 T
6 F
(dp = vp->asDerived\050\051; // OK! Cast in function asDerived) 70.02 305.33 T
(}) 50.17 293.33 T
FMENDPAGE
%%EndPage: "64" 65
%%Page: "65" 65
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(65\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 53) 72 641.33 T
(Addition which leads to a compile-time error) 151.29 641.33 T
6 F
(// String.hh) 86.17 617.33 T
(class String) 86.17 593.33 T
({) 86.17 581.33 T
(public:) 106.02 569.33 T
(String\050 char* cp \051;              // Constructor) 125.86 557.33 T
(operator const char* \050\051 const;   // Conversion operator to const char*) 125.86 545.33 T
(// ...) 125.86 533.33 T
(};) 86.17 521.33 T
(void foo\050 const String& aString \051;) 86.17 497.33 T
(void bar\050 const char* someChars \051;) 86.17 485.33 T
(// Word.hh) 86.17 461.33 T
(class Word) 86.17 437.33 T
({) 86.17 425.33 T
(public:) 106.02 413.33 T
5 F
(Word\050 char* cp \051;   // Constructor) 125.86 401.33 T
6 F
(// ...) 125.86 389.33 T
(};) 86.17 377.33 T
(// Function foo overloaded) 86.17 353.33 T
(void foo\050 const Word& aWord \051;) 86.17 329.33 T
(// ERROR: foo\050 "hello" \051 MATCHES BOTH:) 86.17 305.33 T
(// void foo\050 const String& \051;) 86.17 293.33 T
(// AND void foo\050 const Word& \051;) 86.17 281.33 T
(//main.cc) 86.17 257.33 T
(main\050\051) 86.17 233.33 T
({) 86.17 221.33 T
(foo\050 "hello" \051;        // Error ambiguous type conversion !) 106.02 209.33 T
(String peter = "pan";) 106.02 197.33 T
(bar\050 peter \051;          // Implicit type conversion String -> const char*) 106.02 185.33 T
(}) 86.17 173.33 T
FMENDPAGE
%%EndPage: "65" 66
%%Page: "66" 66
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(66\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 54) 36 641.33 T
(For more efficient execution, remove const-ness when storing intermediate results) 115.29 641.33 T
5 F
(// This is code is NOT recommended) 50.17 617.33 T
6 F
(#include <math.h>) 50.17 593.33 T
(class Vector) 50.17 569.33 T
({) 50.17 557.33 T
(public:) 70.02 545.33 T
(Vector\050int, const int []\051;  // Constructor) 89.86 533.33 T
(double length\050\051 const;      // length = sqrt\050array[1]*array[1] + ... \051) 89.86 521.33 T
(void set\050int x, int value\051;) 89.86 509.33 T
(// ...) 89.86 497.33 T
(private:) 70.02 485.33 T
(int size;) 89.86 473.33 T
(int* array;) 89.86 461.33 T
5 F
(double lengthCache;) 89.86 449.33 T
(// to cache calculated length) 227.78 449.33 T
(int hasChanged;) 89.86 437.33 T
(   // is it necessary to re-calculate length ?) 208.91 437.33 T
6 F
(};) 50.17 425.33 T
(double) 50.17 401.33 T
(Vector::length\050\051 const) 50.17 389.33 T
({) 50.17 377.33 T
(if \050hasChanged\051 // Do we need to re-calculate length) 70.02 365.33 T
({) 70.02 353.33 T
5 F
(\050\050Vector*\051this\051->hasChanged=0; // No! Cast away const) 89.86 341.33 T
6 F
(double quadLength = 0;) 89.86 329.33 T
(for \050 int i = 0; i < size; i++ \051) 89.86 317.33 T
({) 89.86 305.33 T
(quadLength += pow\050array[i],2\051;) 109.7 293.33 T
(}) 89.86 281.33 T
5 F
(\050\050Vector*\051this\051->lengthCache = sqrt\050quadLength\051; // No! Cast away const) 89.86 269.33 T
6 F
(}) 70.02 257.33 T
(return lengthCache;) 70.02 245.33 T
(}) 50.17 233.33 T
(void) 50.17 209.33 T
(Vector::set\050 int nr, int value \051) 50.17 197.33 T
({) 50.17 185.33 T
(if \050 nr >= size \051 error\050 "Out Of Bounds"\051;) 70.02 173.33 T
(array[nr]=value;) 70.02 161.33 T
(hasChanged = 1;) 70.02 149.33 T
(}) 50.17 137.33 T
FMENDPAGE
%%EndPage: "66" 67
%%Page: "67" 67
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(67\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 55) 72 641.33 T
(Alternative to removing const-ness for more efficient execution) 151.29 641.33 T
5 F
(// This is code is safer than Example 54 but could be inefficient) 86.17 605.33 T
6 F
(#include <math.h>) 86.17 581.33 T
(class Vector) 86.17 557.33 T
({) 86.17 545.33 T
(public:) 106.02 533.33 T
(Vector\050int, const int []\051;  // Constructor) 125.86 521.33 T
(double length\050\051 const;      // length = sqrt\050array[1]*array[1] + ... \051) 125.86 509.33 T
(void set\050int x, int value\051;) 125.86 497.33 T
(// ...) 125.86 485.33 T
(private:) 106.02 473.33 T
(int size;) 125.86 461.33 T
(int* array;) 125.86 449.33 T
5 F
(double* lengthCache;   // to cache length in) 125.86 437.33 T
(int* hasChanged;       // is it necessary to re-calculate length ?) 125.86 425.33 T
6 F
(};) 86.17 413.33 T
(Vector::Vector\050int sizeA, const int arrayA[]\051) 86.17 389.33 T
(: size\050sizeA\051, array\050 new int[sizeA] \051,) 86.17 377.33 T
5 F
(  hasChanged\050new int\0501\051\051, lengthCache\050new double\051) 86.17 365.33 T
6 F
({) 86.17 353.33 T
(for \050 int i = 0; i < size; i++ \051) 106.02 341.33 T
({) 106.02 329.33 T
(array[i] = arrayA[i];) 125.86 317.33 T
(}) 106.02 305.33 T
(}) 86.17 293.33 T
(Vector::~Vector\050\051    // Destructor) 86.17 269.33 T
({) 86.17 257.33 T
(delete array;) 106.02 245.33 T
5 F
(delete hasChanged;) 106.02 233.33 T
(delete lengthCache;) 106.02 221.33 T
6 F
(}) 86.17 209.33 T
(// Continue on next page !) 86.17 185.33 T
(double) 86.17 173.33 T
(Vector::length\050\051 const) 86.17 161.33 T
({) 86.17 149.33 T
(if \050hasChanged\051     // Do we need to re-calculate length ?) 106.02 137.33 T
({) 106.02 125.33 T
5 F
(*hasChanged=0;) 125.86 113.33 T
6 F
(double quadLength = 0;) 125.86 101.33 T
(for \050 int i = 0; i < size; i++ \051) 125.86 89.33 T
({) 125.86 77.33 T
FMENDPAGE
%%EndPage: "67" 68
%%Page: "68" 68
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(68\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
6 10 Q
0 X
(quadLength += pow\050array[i],2\051;) 109.7 641.33 T
(}) 89.86 629.33 T
5 F
(*lengthCache = sqrt\050quadLength\051;) 89.86 617.33 T
6 F
(}) 70.02 605.33 T
(return lengthCache;) 70.02 593.33 T
(}) 50.17 581.33 T
(void) 50.17 557.33 T
(Vector::set\050 int nr, int value \051) 50.17 545.33 T
({) 50.17 533.33 T
(if \050 nr >= size \051 error\050 "Out Of Bounds"\051;) 70.02 521.33 T
(array[nr]=value;) 70.02 509.33 T
5 F
(*hasChanged = 1;) 70.02 497.33 T
6 F
(}) 50.17 485.33 T
FMENDPAGE
%%EndPage: "68" 69
%%Page: "69" 69
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(69\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(14) 72 640 T
279.47 638.73 142.87 638.73 2 L
V
0.88 H
N
(Flow Control Structures) 142.87 640 T
0 F
(Rule 47) 72 610 T
(The code following a) 142.87 610 T
5 F
(case) 248.12 610 T
0 F
( label must) 276.9 610 T
4 F
(always) 332.54 610 T
0 F
( be terminated by a) 365.86 610 T
5 F
(break) 460.79 610 T
0 F
( statement.) 496.77 610 T
(Rule 48) 72 590 T
-0.13 (A) 142.87 590 P
5 F
-0.3 (switch) 154.4 590 P
0 F
-0.13 ( statement must) 197.57 590 P
4 F
-0.13 (always) 275.49 590 P
0 F
-0.13 ( contain a) 308.81 590 P
5 F
-0.3 (default) 358.06 590 P
0 F
-0.13 ( branch which handles unexpected) 408.43 590 P
(cases.) 142.87 576 T
(Rule 49) 72 556 T
(Never use) 142.87 556 T
5 F
(goto) 194.15 556 T
0 F
(.) 222.93 556 T
(Rec. 50) 72 536 T
-0.05 (The choice of loop construct \050) 142.87 536 P
5 F
-0.13 (for) 286.81 536 P
0 F
-0.05 (,) 308.4 536 P
5 F
-0.13 (while) 314.34 536 P
0 F
-0.05 ( or) 350.32 536 P
5 F
-0.13 (do-while) 366.2 536 P
0 F
-0.05 (\051 should depend on the specific) 423.77 536 P
(use of the loop.) 142.87 522 T
(Rec. 51) 72 502 T
(Always use) 142.87 502 T
5 F
(unsigned) 201.49 502 T
0 F
( for variables which cannot reasonably have negative values.) 259.06 502 T
(Rec. 52) 72 482 T
(Always use inclusive lower limits and exclusive upper limits.) 142.87 482 T
(Rec. 53) 72 462 T
(Avoid the use of) 142.87 462 T
5 F
(continue) 225.48 462 T
0 F
(.) 283.05 462 T
(Rec. 54) 72 442 T
(Use) 142.87 442 T
5 F
(break) 164.51 442 T
0 F
( to exit a loop if this avoids the use of flags.) 200.49 442 T
(Rec. 55) 72 422 T
-0.05 (Do not write logical expressions of the type) 142.87 422 P
5 F
-0.13 (if\050test\051) 354.97 422 P
0 F
-0.05 ( or) 412.54 422 P
5 F
-0.13 (if\050!test\051) 428.42 422 P
0 F
-0.05 ( when) 493.18 422 P
5 F
-0.13 (test) 525.05 422 P
0 F
-0.05 ( is a) 553.84 422 P
(pointer.) 142.87 408 T
0 (Each loop construct has a specific usage. A) 72 384 P
5 F
0.01 (for) 282.87 384 P
0 F
0 ( loop is used only when the loop variable is increased by) 304.46 384 P
1.02 (a constant amount for each iteration and when the termination of the loop is determined by a constant) 72 370 P
-0.13 (expression. In other cases,) 72 356 P
5 F
-0.31 (while) 200.72 356 P
0 F
-0.13 ( or) 236.7 356 P
5 F
-0.31 (do-while) 252.43 356 P
0 F
-0.13 ( should be used. When the terminating condition can be) 310 356 P
0.11 (evaluated at the beginning of the loop,) 72 342 P
5 F
0.26 (while) 259.96 342 P
0 F
0.11 ( should be used;) 295.94 342 P
5 F
0.26 (do-while) 376.98 342 P
0 F
0.11 ( is used when the terminating) 434.55 342 P
(condition is best evaluated at the end of the loop.) 72 328 T
5 F
0.83 (Goto) 72 304 P
0 F
0.35 ( breaks the control flow and can lead to code that is difficult to comprehend. In addition, there are) 100.78 304 P
1.01 (limitations for when) 72 290 P
5 F
2.42 (goto) 175.3 290 P
0 F
1.01 ( can be used. For example, it is not permitted to jump past a statement that) 204.09 290 P
(initializes a local object having a destructor.) 72 276 T
-0.56 (Variables representing size or length are typical candidates for) 72 252 P
5 F
-1.34 (unsigned) 369.74 252 P
0 F
-0.56 ( declarations. By following this) 427.31 252 P
(recommendation some unpleasant errors can be avoided.) 72 238 T
-0.63 (It is best to use inclusive lower and exclusive upper limits. Instead of saying that) 72 214 P
5 F
-1.5 (x) 452.34 214 P
0 F
-0.63 ( is in the interval) 459.54 214 P
5 F
-1.5 (x>=23) 540.02 214 P
0 F
(and) 72 200 T
5 F
(x<=42) 92.32 200 T
0 F
(, use the limits) 128.3 200 T
5 F
(x>=23) 201.26 200 T
0 F
( and) 237.24 200 T
5 F
(x<43) 260.56 200 T
0 F
(. The following important claims then apply:) 289.35 200 T
(-) 72 180 T
(The size of the interval between the limits is the difference between the limits.) 132.66 180 T
(-) 72 166 T
(The limits are equal if the interval is empty.) 132.66 166 T
(-) 72 152 T
(The upper limit is never less than the lower limit.) 132.66 152 T
(By being consistent in this regard, many difficult errors will be avoided.) 72 128 T
0.67 (If the code which follows a) 72 104 P
5 F
1.6 (case) 209.9 104 P
0 F
0.67 ( label is not terminated by) 238.68 104 P
5 F
1.6 (break,) 370.61 104 P
0 F
0.67 ( the execution continues after the) 413.79 104 P
(next) 72 90 T
5 F
(case) 95.65 90 T
0 F
( label. This means that poorly tested code can be erroneous and still seem to work.) 124.43 90 T
FMENDPAGE
%%EndPage: "69" 70
%%Page: "70" 70
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(70\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
5 F
0 X
2.61 (continue) 36 640 P
0 F
1.09 ( can be used to exit from loops. However, code may be more comprehensible by using an) 93.57 640 P
5 F
(else) 36 626 T
0 F
( clause instead.) 64.78 626 T
0.25 (C++ has a very loose and, simultaneously, very free way of determining if an expression is true or false.) 36 602 P
(If an expression is evaluated as 0, it is false; otherwise, it is considered to be true.) 36 588 T
0.34 (We do not recommend logical tests such as) 36 564 P
0.34 (\322) 253.9 564 P
5 F
0.81 (if\050pointer\051) 259.22 564 P
0 F
0.34 (\323) 338.38 564 P
0.34 (if \322) 351.71 564 P
5 F
0.81 (pointer) 367.7 564 P
0 F
0.34 (\323 is a variable of pointer-) 418.07 564 P
(type. The only reason is readablity; many programmers find it difficult to read such code.) 36 550 T
0.18 (Consider the scope within which an iteration variable is visible. A variable that is declared within a \324for\325) 36 526 P
-0.01 (statement is currently only visible in the nearest enclosing block. The standardization committee for C++) 36 512 P
-0.07 (is however discussing a language modification regarding this point. No decision has yet been made. Still,) 36 498 P
(this problem is avoided if the control structure is encapsulated in a compound statement.) 36 484 T
2 F
(Exception to Rule 47:) 36 464 T
0 F
(When several) 149.39 464 T
5 F
(case) 217.99 464 T
0 F
( labels are followed by the same block of code, only one) 246.77 464 T
5 F
(break) 149.39 450 T
0 F
( statement is needed. Also, other statements than) 185.37 450 T
5 F
(break) 421.88 450 T
0 F
( may be used to) 457.86 450 T
(exit a) 149.39 436 T
5 F
(switch) 178.7 436 T
0 F
( statement, such as) 221.87 436 T
5 F
(return) 314.81 436 T
0 F
(.) 357.99 436 T
2 F
(Exception to Rule 48:) 36 416 T
0 F
(No exceptions.) 149.39 416 T
2 F
(Exception to Rule 49:) 36 396 T
0 F
(For extremely time-critical applications or for fault handling,) 149.39 396 T
5 F
(goto) 445.52 396 T
0 F
( may be) 474.3 396 T
(permitted. Every such usage must be carefully motivated.) 149.39 382 T
2 10 Q
(Example 56) 36 333.33 T
(Problem using unsigned loop variables) 115.29 333.33 T
5 F
(for\050 unsigned int i = 3; i >= 0; --i \051) 50.17 309.33 T
({) 50.17 297.33 T
(// This loop will never terminate, since i cycles through:) 70.02 285.33 T
(// 3, 2, 1, 0, 4294967295, 4294967294, etc ... on a SparcStation) 70.02 273.33 T
(// Note that this example does not follow the rules: i >= 0) 70.02 261.33 T
(// in the for statement. See next example !) 70.02 249.33 T
(}) 50.17 237.33 T
2 F
(Example 57) 36 201.33 T
(Visibility of variable declared in \324for\325 loop) 115.29 201.33 T
6 F
(for \050 int index = 0; index < 10; index++ \051) 50.17 177.33 T
({) 50.17 165.33 T
(cout << index;) 70.02 153.33 T
(}) 50.17 141.33 T
5 F
(int index = 3;) 50.17 117.33 T
6 F
(   // ERROR, THIS IS AN ILLEGAL RE-DECLARATION OF index) 134.13 117.33 T
(                 // BECAUSE index IS DECLARED IN BLOCK-SCOPE.) 50.17 105.33 T
FMENDPAGE
%%EndPage: "70" 71
%%Page: "71" 71
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(71\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 58) 72 641.33 T
(Dangerous) 151.29 641.33 T
5 F
(switch) 199.87 641.33 T
2 F
(/) 235.85 641.33 T
5 F
(case) 238.63 641.33 T
2 F
( statement) 262.61 641.33 T
6 F
(switch \050 tag \051) 86.17 617.33 T
5 12 Q
({) 86.17 604 T
5 10 Q
(case A:) 106.02 591.33 T
({) 106.02 579.33 T
(// Do something) 125.86 567.33 T
(// Next statement is a call to foo\050\051 inside next case) 125.86 555.33 T
(}) 106.02 543.33 T
6 F
(case B:) 106.02 519.33 T
5 12 Q
({) 106.02 506 T
6 10 Q
(foo\050\051;) 125.86 493.33 T
(// Do something else) 125.86 481.33 T
(break;      // Now we leave the switch-statement) 125.86 469.33 T
5 12 Q
(}) 106.02 456 T
6 10 Q
(default:) 106.02 431.33 T
5 12 Q
({) 106.02 418 T
6 10 Q
(// If no match in above cases, this is executed) 125.86 405.33 T
(exit\050 1 \051;) 125.86 393.33 T
5 12 Q
(}) 106.02 380 T
6 10 Q
(}) 86.17 367.33 T
2 F
(Example 59) 72 331.33 T
(Good and bad ways of setting limits for loop variables) 151.29 331.33 T
6 F
(int a[10];) 86.17 307.33 T
(int ten = 10;) 86.17 295.33 T
(int nine = 9;) 86.17 283.33 T
(// Good way to do it:) 86.17 259.33 T
(for\050 int i = 0; i < ten; i++ \051       // Loop runs 10-0=10 times) 86.17 247.33 T
5 12 Q
({) 86.17 234 T
6 10 Q
(a[i] = 0;) 106.02 221.33 T
5 12 Q
(}) 86.17 208 T
5 10 Q
(// Bad way to do it:) 86.17 183.33 T
(for\050 int j = 0; j <= nine; j++ \051     // Loop runs 10 times, but 9-0=9 !!!) 86.17 171.33 T
5 12 Q
({) 86.17 158 T
5 10 Q
(a[j] = 0;) 106.02 145.33 T
5 12 Q
(}) 86.17 132 T
FMENDPAGE
%%EndPage: "71" 72
%%Page: "72" 72
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(72\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 60) 36 641.33 T
(Using break to exit a loop, no flags are needed.) 115.29 641.33 T
6 F
(do                                   // This way:) 50.17 617.33 T
5 12 Q
({) 50.17 604 T
6 10 Q
(if \050 Something \051) 70.02 591.33 T
5 12 Q
({) 70.02 578 T
6 10 Q
(// Do something) 89.86 565.33 T
(break;) 89.86 553.33 T
5 12 Q
(}) 70.02 540 T
(}) 50.17 526 T
6 10 Q
( while\050 someCondition \051;) 57.37 526 T
(int endFlag = 0;                     // Is better than this:) 50.17 489.33 T
(do) 50.17 477.33 T
5 12 Q
({) 50.17 464 T
6 10 Q
(if \050 /* Something */ \051) 70.02 451.33 T
5 12 Q
({) 70.02 438 T
6 10 Q
(// Do something) 89.86 425.33 T
(endFlag = 1;) 89.86 413.33 T
(}) 70.02 401.33 T
(} while\050 someCondition && !endFlag \051;) 50.17 389.33 T
FMENDPAGE
%%EndPage: "72" 73
%%Page: "73" 73
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(73\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 61) 72 641.33 T
(By using an extra \324else\325 clause,) 151.29 641.33 T
5 F
(continue) 286.76 641.33 T
2 F
( is avoided and the code can be comprehended.) 334.73 641.33 T
6 F
(while\050 /* Something */ \051             // This way is more clear) 86.17 617.33 T
5 12 Q
({) 86.17 604 T
6 10 Q
(if\050 /* Something */ \051) 106.02 591.33 T
5 12 Q
({) 106.02 578 T
6 10 Q
(// Do something) 125.86 565.33 T
(}) 106.02 553.33 T
(else) 106.02 529.33 T
5 12 Q
({) 106.02 516 T
6 10 Q
(// Do something else) 125.86 503.33 T
(}) 106.02 491.33 T
(}) 86.17 479.33 T
(while\050 /* Something */ \051             // Than using continue) 86.17 443.33 T
5 12 Q
({) 86.17 430 T
6 10 Q
(if\050 /* Something */ \051) 106.02 417.33 T
5 12 Q
({) 106.02 404 T
6 10 Q
(// Do something) 125.86 391.33 T
(continue;                     // No !) 125.86 379.33 T
(}) 106.02 367.33 T
(// Do something else) 106.02 355.33 T
(}) 86.17 343.33 T
FMENDPAGE
%%EndPage: "73" 74
%%Page: "74" 74
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(74\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 F
0 X
(15) 36 640 T
178.19 638.73 106.87 638.73 2 L
V
0.88 H
N
(Expressions) 106.87 640 T
0 F
(Rec. 56) 36 610 T
(Use parentheses to clarify the order of evaluation for operators in expressions.) 106.87 610 T
1.43 (There are a number of common pitfalls having to do with the order of evaluation for operators in an) 36 586 P
-0.27 (expression. Binary operators in C++ have associativity \050either leftwards or rightwards\051 and precedence. If) 36 572 P
0.65 (an operator has leftwards associativity and occurs on both sides of a variable in an expression, then the) 36 558 P
(variable belongs to the same part of the expression as the operator on its left side.) 36 544 T
(In doubtful cases, parentheses) 36 520 T
4 F
(always) 182.88 520 T
0 F
( are to be used to clarify the order of evaluation.) 216.2 520 T
1.81 (Another common mistake is to confuse the assignment operator and the equality operator. Since the) 36 496 P
0.29 (assignment operator returns a value, it is entirely permitted to have an assignment statement instead of a) 36 482 P
(comparison expression. This, however, most often leads straight to an error.) 36 468 T
-0.49 (C++ allows the overloading of operators, something which can easily become confusing. For example, the) 36 444 P
-0.47 (operators << \050shift left\051 and >> \050shift right\051 are often used for input and output. Since these were originally) 36 430 P
1.38 (bit operations, it is necessary that they have higher priority than relational operators. This means that) 36 416 P
(parentheses must be used when outputting the values of logical expressions.) 36 402 T
2 10 Q
(Example 62) 36 365.33 T
(Problem with the order of evaluation) 115.29 365.33 T
6 F
(// Interpreted as \050 a<b \051 < c, not \050 a<b \051 && \050 b<c \051) 50.17 341.33 T
5 F
(if \050 a < b < c \051) 50.17 329.33 T
({) 50.17 317.33 T
(// ...) 70.02 305.33 T
(}) 50.17 293.33 T
6 F
(// Interpreted as a & \050 b < 8 \051, not \050 a & b \051 < 8) 50.17 269.33 T
5 F
(if \050 a & b < 8 \051) 50.17 257.33 T
({) 50.17 245.33 T
(// ...) 70.02 233.33 T
(}) 50.17 221.33 T
2 F
(Example 63) 36 185.33 T
(When parentheses are recommended) 115.29 185.33 T
5 F
(int i = a >= b && c < d && e + f <= g + h;                     // No!) 50.17 161.33 T
6 F
(int j = \050 a >= b \051 && \050 c < d \051 && \050\050 e + f \051 <= \050 g + h \051\051;   // Better) 50.17 149.33 T
FMENDPAGE
%%EndPage: "74" 75
%%Page: "75" 75
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(75\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(16) 72 640 T
250.16 638.73 142.87 638.73 2 L
V
0.88 H
N
(Memory Allocation) 142.87 640 T
0 F
(Rule 50) 72 610 T
(Do not use) 142.87 610 T
5 F
(malloc) 197.83 610 T
0 F
(,) 241.01 610 T
5 F
(realloc) 247.01 610 T
0 F
( or) 297.38 610 T
5 F
(free) 313.36 610 T
0 F
(.) 342.15 610 T
(Rule 51) 72 590 T
(Always provide empty brackets \050\322) 142.87 590 T
5 F
([]) 307.4 590 T
0 F
(\323\051 for) 321.8 590 T
5 F
(delete) 351.1 590 T
0 F
( when deallocating arrays.) 394.27 590 T
(Rec. 57) 72 570 T
(Avoid global data if at all possible.) 142.87 570 T
(Rec. 58) 72 550 T
(Do not allocate memory and expect that someone else will deallocate it later.) 142.87 550 T
(Rec. 59) 72 530 T
(Always assign a new value to a pointer that points to deallocated memory.) 142.87 530 T
0.36 (In C++ data can be allocated statically, dynamically on the stack, or dynamically on the heap. There are) 72 506 P
(three categories of static data: global data, global class data, and static data local to a function.) 72 492 T
-0.26 (In C) 72 468 P
5 F
-0.62 (malloc) 95.47 468 P
0 F
-0.26 (,) 138.65 468 P
5 F
-0.62 (realloc) 144.38 468 P
0 F
-0.26 ( and) 194.76 468 P
5 F
-0.62 (free) 217.56 468 P
0 F
-0.26 ( are used to allocate memory dynamically on the heap. This may lead) 246.34 468 P
(to conflicts with the use of the) 72 454 T
5 F
(new) 220.24 454 T
0 F
( and) 241.83 454 T
5 F
(delete) 265.14 454 T
0 F
( operators in C++.) 308.32 454 T
(It is dangerous to:) 72 430 T
(1) 72 410 T
(invoke) 100.35 410 T
5 F
(delete) 135.99 410 T
0 F
( for a pointer obtained via) 179.17 410 T
5 F
(malloc/realloc) 306.4 410 T
0 F
(,) 407.15 410 T
(2) 72 390 T
(invoke) 100.35 390 T
5 F
(malloc/realloc) 135.99 390 T
0 F
( for objects having constructors,) 236.74 390 T
(3) 72 370 T
(invoke) 100.35 370 T
5 F
(free) 135.99 370 T
0 F
( for anything allocated using) 164.77 370 T
5 F
(new) 305.01 370 T
0 F
(.) 326.6 370 T
(Thus, avoid whenever possible the use of) 72 346 T
5 F
(malloc) 273.19 346 T
0 F
(,) 316.37 346 T
5 F
(realloc) 322.36 346 T
0 F
( and) 372.73 346 T
5 F
(free) 396.05 346 T
0 F
(.) 424.83 346 T
0.83 (If an array) 72 322 P
5 F
2 (a) 127.44 322 P
0 F
0.83 ( having a type) 134.64 322 P
5 F
2 (T) 208.6 322 P
0 F
0.83 (is allocated, it is important to invoke) 224.99 322 P
5 F
2 (delete) 409.41 322 P
0 F
0.83 ( in the correct way. Only) 452.59 322 P
0.91 (writing) 72 308 P
5 F
2.18 (delete a;) 110.56 308 P
0 F
0.91 ( will result in the destructor being invoked only for the first object of type) 177.5 308 P
5 F
2.18 (T) 547.9 308 P
0 F
0.91 (. By) 555.1 308 P
0.6 (writing) 72 294 P
5 F
1.44 (delete [m] a;) 110.25 294 P
0 F
0.6 ( where) 206.68 294 P
5 F
1.44 (m) 243.18 294 P
0 F
0.6 ( is an integer which is greater than the number of objects allocated) 250.37 294 P
0.96 (earlier, the destructor for) 72 280 P
5 F
2.31 (T) 198.07 280 P
0 F
0.96 ( will be invoked for memory that does not represent objects of type) 205.26 280 P
5 F
2.31 (T) 543.2 280 P
0 F
0.96 (. The) 550.39 280 P
-0.29 (easiest way to do this correctly is to write) 72 266 P
5 F
-0.7 (delete [] a;) 271.55 266 P
0 F
-0.29 ( since the destructor will then be invoked only) 356.49 266 P
(for those objects which have been allocated earlier.) 72 252 T
-0.1 (Static data can cause several problems. In an environment where parallel threads execute simultaneously,) 72 228 P
(they can make the behaviour of code unpredictable, since functions having static data are not reentrant.) 72 214 T
0.33 (One difference between ANSI-C and C++ is in how constants are declared. If a variable is declared as a) 72 190 P
-0.75 (constant in ANSI-C, it has the storage class) 72 176 P
5 F
-1.8 (extern) 277.54 176 P
0 F
-0.75 ( \050global\051. In C++, however, it normally has the storage) 320.72 176 P
0.42 (class) 72 162 P
5 F
1 (static) 98.73 162 P
0 F
0.42 ( \050local\051. The latter means that a new instance of the constant object is created each time a) 141.91 162 P
-0.12 (file includes the file which contains the declaration of the object, unless the variable is explicitly declared) 72 148 P
(extern in the include file.) 72 134 T
0.16 (An extern declaration in C++ does not mean that the variable is initialized; there must be a definition for) 72 110 P
-0.44 (this in a definition file. Static constants that are defined within a class are always external and must always) 72 96 P
(be defined separately.) 72 82 T
FMENDPAGE
%%EndPage: "75" 76
%%Page: "76" 76
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(76\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
0 X
1.26 (It may, at times, be tempting to allocate memory for an object using) 36 640 P
5 F
3.02 (new) 381.14 640 P
0 F
1.26 (, expecting someone else to) 402.73 640 P
-0.06 (deallocate the memory. For instance, a function can allocate memory for an object which is then returned) 36 626 P
1.49 (to the user as the return value for the function. There is no guarantee that the user will remember to) 36 612 P
(deallocate the memory and the interface with the function then becomes considerably more complex.) 36 598 T
0.91 (Pointers that point to deallocated memory should either be set to 0 or be given a new value to prevent) 36 574 P
-0.74 (access to the released memory. This can be a very difficult problem to solve when there are several pointers) 36 560 P
(which point to the same memory, since C++ has no garbage collection.) 36 546 T
2 F
(Exception to Rule 50:) 36 526 T
0 F
(No exceptions.) 149.39 526 T
2 F
(Exception to Rule 51:) 36 506 T
0 F
(No exceptions.) 149.39 506 T
2 10 Q
(Example 64) 36 469.33 T
(Right and wrong ways to invoke delete for arrays with destructors) 115.29 469.33 T
6 F
(int n = 7;) 50.17 445.33 T
(T* myT = new T[n]; // T is a type with defined constructors and destructors) 50.17 433.33 T
(// ...) 50.17 421.33 T
5 F
(delete myT;         // No! Destructor only called for first object in array a) 50.17 409.33 T
(delete [10] myT;     // No! Destructor called on memory out of bounds in array a) 50.17 397.33 T
6 F
(delete [] myT;     // OK, and always safe!) 50.17 385.33 T
2 F
(Example 65) 36 349.33 T
(Dangerous memory management) 115.29 349.33 T
6 F
(String myFunc\050 const char* myArgument \051) 50.17 325.33 T
({) 50.17 313.33 T
5 F
(String* temp = new String\050 myArgument \051;) 70.02 301.33 T
(return *temp;) 70.02 289.33 T
6 F
(// temp is never deallocated and the user of myFunc cannot deallocate) 70.02 277.33 T
(// because a temporary copy of that instance is returned.) 70.02 265.33 T
(}) 50.17 253.33 T
FMENDPAGE
%%EndPage: "76" 77
%%Page: "77" 77
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(77\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(17) 72 640 T
226.16 638.73 142.87 638.73 2 L
V
0.88 H
N
(Fault Handling) 142.87 640 T
0 F
(Rec. 60) 72 610 T
-0.04 (Make sure that fault handling is done so that the transfer to exception handling \050when this) 142.87 610 P
(is available in C++\051 may be easily made.) 142.87 596 T
(Rec. 61) 72 576 T
-0.5 (Check the fault codes which may be received from library functions even if these functions) 142.87 576 P
(seem foolproof.) 142.87 562 T
2.22 (In November 1990, the ANSI C++ committee accepted a proposal for exception handling which is) 72 538 P
-0.44 (described in chapter 15 of ref. 1. When designing fault handling in code, it is appropriate to consider being) 72 524 P
-0.04 (able to make a smooth transfer to exception handling. For example, instead of using ordinary fault codes,) 72 510 P
0.13 (which may necessitate a lot of re-programming when exception handling is available, a call can be made) 72 496 P
1.99 (to a function) 72 482 P
5 F
4.77 (void fault\050const char*\051) 141.58 482 P
0 F
1.99 (which sends a fault message \050somewhere\051 and then) 316.63 482 P
(terminates execution in some way.) 72 468 T
1.51 (System functions \050those which are specific to UNIX\051 ought to be used with care if the code is to be) 72 444 P
1.23 (portable. If such functions are used, the possible fault codes that may be received should be carefully) 72 430 P
(checked.) 72 416 T
-0.61 (Two important characteristics of a robust system are that all faults are reported and, if the fault is so serious) 72 392 P
0.42 (that continued execution is not possible, the process is terminated. In this way, the propagation of faults) 72 378 P
-0.17 (through the system is avoided. It is better to have a process crash, than to spread erroneous information to) 72 364 P
-0.57 (other processes. In achieving this goal, it is important to always test fault codes from library functions. The) 72 350 P
0.23 (opening or closing of files may fail, allocation of data may fail, etc. One test too many is better than one) 72 336 P
-0.52 (test too few. Our own functions should preferably not return fault codes, but should instead take advantage) 72 322 P
(of exception handling.) 72 308 T
FMENDPAGE
%%EndPage: "77" 78
%%Page: "78" 78
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(78\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 10 Q
0 X
(Example 66) 36 641.33 T
(Future exception handling in C++) 115.29 641.33 T
6 F
(// The top function where we catch exceptions thrown in called functions) 50.17 617.33 T
(int f\050\051) 50.17 605.33 T
({) 50.17 593.33 T
(// We suspect that something can go wrong when function g\050\051 is called.) 70.02 581.33 T
(// Therefore, we enclose the call in a try block.) 70.02 569.33 T
(try) 70.02 557.33 T
({) 70.02 545.33 T
(return g\050\051;       // This is the try block) 89.86 533.33 T
(}) 70.02 521.33 T
(// If any exceptions, having a given type, were thrown when g\050\051) 70.02 497.33 T
(// was executing, they are caught in these two catch blocks.) 70.02 485.33 T
(catch \050 int x \051      // catches int) 70.02 473.33 T
({) 70.02 461.33 T
(cerr << "Number " << x << " happened !" << endl;) 89.86 449.33 T
(return x;) 89.86 437.33 T
(}) 70.02 425.33 T
(catch \050 char* x \051    // catches char*) 70.02 401.33 T
({) 70.02 389.33 T
(// Respond in some other way) 89.86 377.33 T
(}) 70.02 365.33 T
(// Anything else that is thrown, is thrown up to the function that calls f\050\051) 70.02 341.33 T
(}) 50.17 329.33 T
(// This function has no try or catch block. When the exception is thrown) 50.17 305.33 T
(// in function h\050\051, it is thrown up to the function f\050\051.) 50.17 293.33 T
(int g\050\051) 50.17 281.33 T
({) 50.17 269.33 T
(return h\050\051;) 70.02 257.33 T
(}) 50.17 245.33 T
(extern int somethingIsVeryWrongAndICannotHandleThisAnyMore\050\051;) 50.17 221.33 T
(int h\050\051) 50.17 197.33 T
({) 50.17 185.33 T
(// Here we find out that something went wrong, and throw an exception) 70.02 173.33 T
(if \050somethingIsVeryWrongAndICannotHandleThisAnyMore\050\051\051) 70.02 161.33 T
({) 70.02 149.33 T
(// In this case, we throw an int as exception, but almost any object) 89.86 137.33 T
(// can be thrown. See) 89.86 125.33 T
5 F
(Errata) 221.79 125.33 T
6 F
( for \322The Annotated C++ Reference Manual\323) 257.77 125.33 T
(// section 15.7.) 89.86 113.33 T
(throw 2;) 89.86 101.33 T
(}) 70.02 89.33 T
FMENDPAGE
%%EndPage: "78" 79
%%Page: "79" 79
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(79\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
6 10 Q
0 X
(// Keep on trucking if all is OK) 106.02 641.33 T
(}) 86.17 629.33 T
FMENDPAGE
%%EndPage: "79" 80
%%Page: "80" 80
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(80\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 F
0 X
(18) 36 640 T
188.17 638.73 106.87 638.73 2 L
V
0.88 H
N
(Portable Code) 106.87 640 T
(18.1) 36 596 T
(Data Abstraction) 106.87 596 T
0 F
(Port. Rec. 1) 36 566 T
(Avoid the direct use of pre-defined data types in declarations.) 134.48 566 T
0.69 (An excellent way of transforming your world to a \322vale of tears\323 is to directly use the pre-defined data) 36 542 P
0.78 (types in declarations. If it is later necessary, due to portability problems, to change the return type of a) 36 528 P
0.32 (function, it may be necessary to make change at a large number of places in the code. One way to avoid) 36 514 P
-0 (this is to declare a new type name using classes or) 36 500 P
5 F
-0 (typedef) 279.47 500 P
0 F
-0 (s to represent the types of variables used. In) 329.84 500 P
-0.6 (this way, changes can be more easily made. This may be used to give data a physical unit, such as kilogram) 36 486 P
0.35 (or meter. Such code is more easily reviewed. \050For example, when the code is functioning poorly, it may) 36 472 P
0.29 (be noticed that a variable representing meters has been assigned to a variable representing kilograms\051. It) 36 458 P
0.79 (should be noted that a) 36 444 P
5 F
1.89 (typedef) 148.2 444 P
0 F
0.79 ( does not create a new type, only an alternative name for a type. This) 198.57 444 P
0.87 (means that if you have declared) 36 430 P
5 F
2.1 (typedef int Error) 196.44 430 P
0 F
0.87 (, a variable of the type) 322.97 430 P
5 F
2.1 (Error) 438.45 430 P
0 F
0.87 ( may be used) 474.43 430 P
(anywhere that an) 36 416 T
5 F
(int) 120.93 416 T
0 F
( may be used.) 142.51 416 T
(See also chapter 12, Rec. 49!) 36 392 T
2 10 Q
(Example 67) 36 355.33 T
(Type declarations using typedef) 115.29 355.33 T
6 F
(// Instead of:) 50.17 331.33 T
(long int time;) 50.17 319.33 T
(short int mouseX;) 50.17 307.33 T
(char* menuName;) 50.17 295.33 T
(// Use \050for example\051:) 50.17 271.33 T
(typedef long int TimeStamp;) 50.17 259.33 T
(typedef short int Coordinate;) 50.17 247.33 T
(class String { /* ... */ };) 50.17 235.33 T
(// and:) 50.17 211.33 T
(TimeStamp time;) 50.17 199.33 T
(Coordinate mouseX;) 50.17 187.33 T
(String menuName;) 50.17 175.33 T
1 12 Q
(18.2) 36 132 T
(Sizes of Types) 106.87 132 T
0 F
(Port. Rec. 2) 36 102 T
(Do not assume that an) 134.48 102 T
5 F
(int) 244.07 102 T
0 F
( and a) 265.66 102 T
5 F
(long) 297.3 102 T
0 F
( have the same size.) 326.08 102 T
(Port. Rec. 3) 36 82 T
(Do not assume that an) 134.48 82 T
5 F
(int) 244.07 82 T
0 F
( is 32 bits long \050it may be only 16 bits long\051.) 265.66 82 T
FMENDPAGE
%%EndPage: "80" 81
%%Page: "81" 81
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(81\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
0 X
(Port. Rec. 4) 72 640 T
(Do not assume that a) 170.48 640 T
5 F
(char) 274.08 640 T
0 F
( is) 302.86 640 T
5 F
(signed) 316.86 640 T
0 F
( or) 360.03 640 T
5 F
(unsigned) 376.02 640 T
0 F
(.) 433.59 640 T
(Port. Rec. 5) 72 620 T
(Always set) 170.48 620 T
5 F
(char) 226.44 620 T
0 F
( to) 255.22 620 T
5 F
(unsigned) 270.55 620 T
0 F
( if 8-bit ASCII is used.) 328.12 620 T
0.4 (In the definition of the C++ language, it has not yet been decided if a) 72 596 P
5 F
0.95 (char) 411.9 596 P
0 F
0.4 ( is) 440.69 596 P
5 F
0.95 (signed) 455.48 596 P
0 F
0.4 ( or) 498.65 596 P
5 F
0.95 (unsigned) 515.43 596 P
0 F
0.4 (.) 573 596 P
-0.66 (This decision has instead been left to each compiler manufacturer. If this is forgotten and this characteristic) 72 582 P
-0.21 (is exploited in one way or another, some difficult bugs may appear in the program when another compiler) 72 568 P
(is used.) 72 554 T
0.47 (If 8-bit ASCII is used \050as is quite likely in the future\051 and comparisons are made of two characters, it is) 72 530 P
(important that) 72 516 T
5 F
(unsigned char) 142.63 516 T
0 F
( is used.) 236.18 516 T
1 F
(18.3) 72 472 T
(Type Conversions) 142.87 472 T
0 F
(Port. Rec. 6) 72 442 T
(Be careful not to make type conversions from a \322shorter\323 type to a \322longer\323 one.) 170.48 442 T
(Port. Rec. 7) 72 422 T
(Do not assume that pointers and integers have the same size.) 170.48 422 T
(Port. Rec. 8) 72 402 T
(Use explicit type conversions for arithmetic using signed and unsigned values.) 170.48 402 T
1.28 (A processor architecture often forbids data of a given size to be allocated at an arbitrary address. For) 72 378 P
0.11 (example, a word must begin on an \322even\323 address for MC680x0. If there is a pointer to a) 72 364 P
5 F
0.27 (char) 503.68 364 P
0 F
0.11 ( which is) 532.47 364 P
0.53 (located at an \322odd\323 address, a type conversion from this) 72 350 P
5 F
1.28 (char) 348.8 350 P
0 F
0.53 ( pointer to an) 377.59 350 P
5 F
1.28 (int) 446.35 350 P
0 F
0.53 ( pointer will cause the) 467.94 350 P
0.28 (program to crash when the) 72 336 P
5 F
0.67 (int) 204.29 336 P
0 F
0.28 ( pointer is used, since this violates the processor\325s rules for alignment of) 225.88 336 P
(data.) 72 322 T
1 F
(18.4) 72 278 T
(Data Representation) 142.87 278 T
0 F
(Port. Rec. 9) 72 248 T
(Do not assume that you know how an instance of a data type is represented in) 170.48 248 T
(memory.) 170.48 234 T
(Port. Rec. 10) 72 214 T
(Do not assume that) 170.48 214 T
5 F
(long) 265.75 214 T
0 F
(s,) 294.54 214 T
5 F
(float) 305.2 214 T
0 F
(s,) 341.18 214 T
5 F
(double) 351.84 214 T
0 F
(s or) 395.02 214 T
5 F
(long double) 415.67 214 T
0 F
(s may begin at) 494.83 214 T
(arbitrary addresses.) 170.48 200 T
0.05 (The representation of data types in memory is highly machine-dependent. By allocating data members to) 72 176 P
0.29 (certain addresses, a processor may execute code more efficiently. Because of this, the data structure that) 72 162 P
-0.04 (represents a class will sometime include holes and be stored differently in different process architectures.) 72 148 P
(Code which depends on a specific representation is, of course, not portable.) 72 134 T
(See18.3 for explanation of Port. Rec. 10.) 72 110 T
FMENDPAGE
%%EndPage: "81" 82
%%Page: "82" 82
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(82\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
1 F
0 X
(18.5) 36 640 T
(Underflow/Overflow) 106.87 640 T
0 F
(Port. Rec. 11) 36 610 T
(Do not depend on underflow or overflow functioning in any special way.) 134.48 610 T
1 F
(18.6) 36 566 T
(Order of Execution) 106.87 566 T
0 F
(Port. Rec. 12) 36 536 T
(Do not assume that the operands in an expression are evaluated in a definite order.) 134.48 536 T
(Port. Rec. 13) 36 516 T
(Do not assume that you know how the invocation mechanism for a function is) 134.48 516 T
(implemented.) 134.48 502 T
(Port. Rec. 14) 36 482 T
(Do not assume that an object is initialized in any special order in constructors.) 134.48 482 T
(Port. Rec. 15) 36 462 T
(Do not assume that static objects are initialized in any special order.) 134.48 462 T
0 (If a value is modified twice in the same expression, the result of the expression is undefined except when) 36 438 P
(the order of evaluation is guaranteed for the operators that are used.) 36 424 T
0.67 (The order of initialization for static objects may present problems. A static object may not be used in a) 36 400 P
-0.33 (constructor, if it is not initialized until after the constructor is run. At present, the order of initialization for) 36 386 P
0.06 (static objects, which are defined in different compilation units, is not defined. This can lead to errors that) 36 372 P
(are difficult to locate \050see Example 69\051. There are special techniques for avoiding this. See Example 29!) 36 358 T
2 10 Q
(Example 68) 36 321.33 T
(Do not depend on the order of initialization in constructors.) 115.29 321.33 T
6 F
(#include <iostream.h>) 50.17 297.33 T
(class X) 50.17 285.33 T
({) 50.17 273.33 T
(public:) 70.02 261.33 T
(X\050int y\051;) 89.86 249.33 T
(private:) 70.02 237.33 T
(int i;) 89.86 225.33 T
(int j;) 89.86 213.33 T
(};) 50.17 201.33 T
5 F
(inline X::X\050int y\051 : j\050y\051, i\050j\051    // No! j may not be initialized before i !!) 50.17 177.33 T
6 F
({) 50.17 165.33 T
(cout << "i:" << i << " & " << "j:" << j << endl;) 70.02 153.33 T
(}) 50.17 141.33 T
(main\050\051) 50.17 117.33 T
({) 50.17 105.33 T
(X x\0507\051;        // Rather unexpected output: i:0 & j:7) 70.02 93.33 T
(}) 50.17 81.33 T
FMENDPAGE
%%EndPage: "82" 83
%%Page: "83" 83
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(83\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
2 10 Q
0 X
(Example 69) 72 641.33 T
(Initialization of static objects) 151.29 641.33 T
6 F
(// Foo.hh) 86.17 617.33 T
(#include <iostream.h>) 86.17 593.33 T
(#include <string.h>) 86.17 581.33 T
(static unsigned int const Size = 1024;) 86.17 557.33 T
(class Foo) 86.17 533.33 T
({) 86.17 521.33 T
(public:) 106.02 509.33 T
(Foo\050 char* cp \051;                 // Constructor) 125.86 497.33 T
(// ...) 125.86 485.33 T
(private:) 106.02 473.33 T
(char buffer[Size];) 125.86 461.33 T
(static unsigned counter;        // Number of constructed Foo:s) 125.86 449.33 T
(};) 86.17 437.33 T
(extern Foo foo_1;) 86.17 413.33 T
(extern Foo foo_2;) 86.17 401.33 T
(// Foo1.cc) 86.17 377.33 T
(#include "Foo.hh") 86.17 365.33 T
(unsigned Foo::counter = 0;) 86.17 341.33 T
(Foo foo_1 = "one";) 86.17 329.33 T
(//Foo2.cc) 86.17 305.33 T
(#include "Foo.hh") 86.17 293.33 T
(Foo foo_2 = "two";) 86.17 269.33 T
5 F
(Foo::Foo\050 char* cp \051      // Irrational constructor) 86.17 245.33 T
({) 86.17 233.33 T
(strncpy\050 buffer, cp, sizeof\050buffer\051 \051;) 106.02 221.33 T
(foos[counter] = this;) 106.02 209.33 T
(switch \050 counter++ \051) 106.02 197.33 T
({) 106.02 185.33 T
(case 0:) 125.86 173.33 T
(case 1:) 125.86 161.33 T
(cout << ::foo_1.buffer << "," << ::foo_2.buffer << endl;) 145.7 149.33 T
(break;) 145.7 137.33 T
(default:) 125.86 125.33 T
(cout << "Hello, world" << endl;) 145.7 113.33 T
(}) 106.02 101.33 T
(}) 86.17 89.33 T
6 F
(// If a program using Foo.hh is linked with Foo1.o and Foo2.o, either) 86.17 77.33 T
FMENDPAGE
%%EndPage: "83" 84
%%Page: "84" 84
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(84\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
6 10 Q
0 X
(//) 50.17 641.33 T
5 F
(,two) 68.16 641.33 T
6 F
(      or) 92.15 641.33 T
5 F
(one,) 152.12 641.33 T
6 F
(     is written on standard output depending on) 176.1 641.33 T
(//) 50.17 629.33 T
5 F
(one,two) 68.16 629.33 T
(one,two) 152.12 629.33 T
6 F
(  the order of the files given to the linker.) 194.09 629.33 T
1 12 Q
(18.7) 36 586 T
(Temporary Objects) 106.87 586 T
0 F
(Port. Rec. 16) 36 556 T
(Do not write code which is dependent on the lifetime of a temporary object.) 134.48 556 T
0.35 (Temporary objects are often created in C++, such as when functions return a value. Difficult errors may) 36 532 P
-0.12 (arise when there are pointers in temporary objects. Since the language does not define the life expectancy) 36 518 P
(of temporary objects, it is never certain that pointers to them are valid when they are used.) 36 504 T
0.67 (One way of avoiding this problem is to make sure that temporary objects are not created. This method,) 36 480 P
(however, is limited by the expressive power of the language and is not generally recommended.) 36 466 T
0.02 (The C++ standard may someday provide an solution to this problem. In any case, it is a subject for lively) 36 442 P
(discussions in the standardization committee.) 36 428 T
2 10 Q
(Example 70) 36 391.33 T
(Difficult error in a string class which lacks output operator) 115.29 391.33 T
6 F
(class String) 50.17 367.33 T
({) 50.17 355.33 T
(public:) 70.02 343.33 T
(operator const char*\050\051 const;     // Conversion operator to const char*) 89.86 331.33 T
(friend String operator+\050 const String& left, const String& right \051;) 89.86 319.33 T
(// ...) 89.86 307.33 T
(};) 50.17 295.33 T
(String a = \322This may go to \323;) 50.17 271.33 T
(String b = "h***!";) 50.17 259.33 T
(// The addition of a and b generates a new temporary String object.) 70.02 247.33 T
(// After it is converted to a char* by the conversion operator, it is) 70.02 235.33 T
(// no longer needed and may be deallocated. This means that characters) 70.02 223.33 T
(// which are already deallocated are printed to cout -> DANGEROUS!!) 70.02 211.33 T
5 F
(cout << a + b;) 50.17 199.33 T
1 12 Q
(18.8) 36 156 T
(Pointer Arithmetic) 106.87 156 T
0 F
(Port. Rec. 17) 36 126 T
(Avoid using shift operations instead of arithmetic operations.) 134.48 126 T
(Port. Rec. 18) 36 106 T
(Avoid pointer arithmetic.) 134.48 106 T
0.19 (Pointer arithmetic can be portable. The operators == and != are defined for all pointers of the same type,) 36 82 P
FMENDPAGE
%%EndPage: "84" 85
%%Page: "85" 85
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(85\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
0 X
-0.23 (while the use of the operators <, >, <=, >= are portable only if they are used between pointers which point) 72 640 P
(into the same array.) 72 626 T
FMENDPAGE
%%EndPage: "85" 86
%%Page: "86" 86
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(86\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
FMENDPAGE
%%EndPage: "86" 87
%%Page: "87" 87
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(87\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(19) 72 640 T
207.52 638.73 142.87 638.73 2 L
V
0.88 H
N
(References) 142.87 640 T
2 F
([1]) 72 603.67 T
(The Annotated C++ Reference Manual \320 Bjarne Stroustrup/Margareth Ellis) 136.91 603.67 T
0 14 Q
([ARM]) 527.68 603.67 T
0 12 Q
(\320 Addison Wesley 1990, ISBN 0-201-51459-1) 136.91 583 T
(This book forms the basis of the work in the ANSI-C++ committee.) 72 565 T
2 F
([2]) 72 530 T
(C++ Primer, Second Edition \320 Stanley B. Lippman) 136.91 530 T
0 F
(\320 Addison Wesley 1991, ISBN 0-201-54848-8) 136.91 510 T
(Very good for learning the basics of C++.) 72 492 T
2 F
([3]) 72 457 T
(The C++ Programming Language, Second Edition \320 Bjarne Stroustrup) 136.91 457 T
0 F
(\320 Addison Wesley 1991, ISBN 0-201-53992-6) 136.91 437 T
-0.11 (This second edition has been completely updated with the current \050and future\051 language definition. It will) 72 415 P
(most certainly become a standard reference book.) 72 401 T
2 F
([4]) 72 366 T
(Advanced C++ Programming Styles and Idioms \320 James O. Coplien) 136.91 366 T
0 F
(\320 Addison Wesley 1992, ISBN 0-210-54855-0) 136.91 346 T
(Possibly the most advanced book on how to use C++. Contains many tricks and tips.) 72 324 T
2 F
([5]) 72 289 T
(Object-oriented Software Construction \320 Bertrand Meyer) 136.91 289 T
0 F
(\320 Prentice Hall 1988, ISBN 0-13-629049-3 or 0-13-629031-0 PBK) 136.91 269 T
(Somewhat of a classic work. Examples are written in Eiffel.) 72 251 T
2 F
([6]) 72 216 T
(Data Abstraction and Object-Oriented Programming in C++ \320 Keith E. Gorlen,) 136.91 216 T
(Sanford M. Orlow, Perry S. Plexico) 136.91 202 T
0 F
(\320 John Wiley & Sons 1990, ISBN 0 471 92346 X pbk or 0 471 92751 1) 136.91 182 T
(The book that describes the class library NIH. Includes many good examples.) 72 164 T
2 F
([7]) 72 129 T
(Object-Oriented Design with Applications \320 Grady Booch) 136.91 129 T
0 F
(\320 Benjamin/Cummings 1991, ISBN 0-8053-0091-0) 136.91 109 T
(Treats the design and implementation of software in various object-oriented languages.) 72 91 T
FMENDPAGE
%%EndPage: "87" 88
%%Page: "88" 88
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(88\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
2 F
0 X
([8]) 36 640 T
(Recommended C Style and Coding Standards) 100.91 640 T
0 F
(\320 Bell Labs, Zoology Computer Systems University of Toronto, CS University of) 100.91 620 T
(Washington, November 18, 1989.) 100.91 608 T
(A collection of rules for programming in C. Contains a good section on portability.) 36 590 T
2 F
([9]) 36 555 T
(A Guide to Natural Naming \320 Daniel Keller) 100.91 555 T
0 F
(\320 ETH, Projekt-Zentrum IDA, CH-8092 Zurich, Switzerland) 100.91 535 T
2.29 (A guide on how to choose good names for functions and variables. Not adapted to object-oriented) 36 517 P
(programming.) 36 503 T
2 F
([10]) 36 468 T
(Advanced C++ \320 Jonathan E. Shopiro) 100.91 468 T
0 F
-0.61 (Binder with material from course held in Lund \050Sweden\051 from June 4 to June 7, 1991. Filled with warnings) 36 448 P
(and tips.) 36 434 T
2 F
([11]) 36 399 T
(Objektorienterad programmering och biblioteksuppbyggnad i C++ \320 Martin Carrol) 100.91 399 T
0 F
1.83 (Material from course held in Stockholm \050Sweden\051 on April 18, 1991. Presents useful viewpoints on) 36 379 P
(problems which may arise when designing a class library.) 36 365 T
2 F
([12]) 36 330 T
-0.54 (Automatic Detection of C++ Programming Errors: Initial Thoughts on a lint++ \320 Scott) 100.91 330 P
(Myers/Moises Lejter) 100.91 316 T
(\320 Usenix C++ Conference Proceedings, Spring 91) 100.91 296 T
0 F
(Article which describes some programming rules for C++.) 36 278 T
2 F
([13]) 36 243 T
(Code-Style Prescriptions \320 Carl R. Dickler) 100.91 243 T
0 F
(\320 Unix Review, 9\0509\051, 1991, pages 41-45) 100.91 223 T
1.07 (Article which describes a number of programming rules for C and which discusses why programming) 36 205 P
(rules are needed.) 36 191 T
FMENDPAGE
%%EndPage: "88" 89
%%Page: "89" 89
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(89\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(20) 72 640 T
248.17 638.73 142.87 638.73 2 L
V
0.88 H
N
(Summary of Rules) 142.87 640 T
0 10 Q
(Rule 0) 72 611.33 T
(Every time a rule is broken, this must be clearly documented.) 142.87 611.33 T
(Rule 1) 72 596.33 T
(Include files in C++ always have the file name extension \322.hh\323.) 142.87 596.33 T
(Rule 2) 72 581.33 T
(Implementation files in C++ always have the file name extension \322.cc\323.) 142.87 581.33 T
(Rule 3) 72 566.33 T
(Inline definition files always have the file name extension \322.icc\323.) 142.87 566.33 T
(Rule 4) 72 551.33 T
(Every file that contains source code must be documented with an introductory comment that provides) 142.87 551.33 T
(information on the file name and its contents.) 142.87 539.33 T
(Rule 5) 72 524.33 T
(All files must include copyright information.) 142.87 524.33 T
(Rule 6) 72 509.33 T
(All comments are to be written in English.) 142.87 509.33 T
(Rule 7) 72 494.33 T
(Every include file must contain a mechanism that prevents multiple inclusions of the file.) 142.87 494.33 T
(Rule 8) 72 479.33 T
-0.38 (When the following kinds of definitions are used \050in implementation files or in other include files\051, they must) 142.87 479.33 P
(be included as separate include files:) 142.87 467.33 T
(\245) 72 452.33 T
(classes that are used as base classes,) 142.87 452.33 T
(\245) 72 440.33 T
(classes that are used as member variables,) 142.87 440.33 T
(\245) 72 428.33 T
(classes that appear as return types or as) 142.87 428.33 T
4 F
(argument types) 302.18 428.33 T
0 F
( in function/member function prototypes.) 365.2 428.33 T
(\245) 72 416.33 T
(function prototypes for functions/member functions used in inline member functions  that are defined in the) 142.87 416.33 T
(file.) 142.87 404.33 T
(Rule 9) 72 389.33 T
-0.4 (Definitions of classes that are only accessed via pointers \050) 142.87 389.33 P
5 F
-0.97 (*) 370.44 389.33 P
0 F
-0.4 (\051 or references \050) 376.44 389.33 P
5 F
-0.97 (&) 438.76 389.33 P
0 F
-0.4 (\051 shall not be included as include) 444.75 389.33 P
(files.) 142.87 377.33 T
(Rule 10) 72 362.33 T
2 F
(Never) 142.87 362.33 T
0 F
( specify relative UNIX names in) 168.39 362.33 T
5 F
(#include) 300.51 362.33 T
0 F
( directives.) 348.48 362.33 T
(Rule 11) 72 347.33 T
(Every implementation file is to include the relevant files that contain:) 142.87 347.33 T
(\245) 72 332.33 T
(declarations of types and functions used in the functions that are implemented in the file.) 142.87 332.33 T
(\245) 72 320.33 T
(declarations of variables and member functions used in the functions that are implemented in the file.) 142.87 320.33 T
(Rule 12) 72 305.33 T
(The identifier of every globally visible class, enumeration type, type definition, function, constant, and) 142.87 305.33 T
(variable in a class library is to begin with a prefix that is unique for the library.) 142.87 293.33 T
(Rule 13) 72 278.33 T
(The names of variables, constants, and functions are to begin with a lowercase letter.) 142.87 278.33 T
(Rule 14) 72 263.33 T
(The names of abstract data types, structures,) 142.87 263.33 T
5 F
(typedefs) 322.45 263.33 T
0 F
(, and enumerated types are to begin with an) 370.42 263.33 T
(uppercase letter.) 142.87 251.33 T
(Rule 15) 72 236.33 T
-0.34 (In names which consist of more than one word, the words are written together and each word that follows the) 142.87 236.33 P
(first is begun with an uppercase letter.) 142.87 224.33 T
(Rule 16) 72 209.33 T
(Do not use identifiers which begin with one or two underscores \050\324_\325 or \324__\325\051.) 142.87 209.33 T
(Rule 17) 72 194.33 T
(A name that begins with an uppercase letter is to appear directly after its prefix.) 142.87 194.33 T
(Rule 18) 72 179.33 T
(A name that begins with a lowercase letter is to be separated from its prefix using an underscore \050\324_\325\051.) 142.87 179.33 T
(Rule 19) 72 164.33 T
(A name is to be separated from its suffix using an underscore \050\324_\325\051.) 142.87 164.33 T
(Rule 20) 72 149.33 T
(The public, protected, and private sections of a class are to be declared in that order \050the public section is) 142.87 149.33 T
(declared before the protected section which is declared before the private section\051.) 142.87 137.33 T
(Rule 21) 72 122.33 T
(No member functions are to be defined within the class definition.) 142.87 122.33 T
(Rule 22) 72 107.33 T
(Never specify public or protected member data in a class.) 142.87 107.33 T
(Rule 23) 72 92.33 T
-0.23 (A member function that does not affect the state of an object \050its instance variables\051 is to be declared) 142.87 92.33 P
5 F
-0.55 (const) 543.52 92.33 P
0 F
-0.23 (.) 573.5 92.33 P
(Rule 24) 72 77.33 T
-0.01 (If the behaviour of an object is dependent on data outside the object, this data is not to be modified by const) 142.87 77.33 P
FMENDPAGE
%%EndPage: "89" 90
%%Page: "90" 90
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(90\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
0 10 Q
0 X
(member functions.) 106.87 641.33 T
(Rule 25) 36 626.33 T
(A class which uses \322new\323 to allocate instances managed by the class,  must define a) 106.87 626.33 T
4 F
(copy constructor) 445.22 626.33 T
0 F
(.) 513.79 626.33 T
(Rule 26) 36 611.33 T
(All classes which are used as base classes and which have virtual functions, must define a virtual destructor.) 106.87 611.33 T
(Rule 27) 36 596.33 T
(A class which uses \322new\323 to allocate instances managed by the class,  must define an) 106.87 596.33 T
4 F
(assignment operator) 450.22 596.33 T
0 F
(.) 534.35 596.33 T
(Rule 28) 36 581.33 T
(An assignment operator which performs a destructive action must be protected from performing this action) 106.87 581.33 T
(on the object upon which it is operating.) 106.87 569.33 T
(Rule 29) 36 554.33 T
(A public member function must never return a non-const reference or pointer to member data.) 106.87 554.33 T
(Rule 30) 36 539.33 T
-0.44 (A public member function must never return a non-const reference or pointer to data outside an object, unless) 106.87 539.33 P
(the object shares the data with other objects.) 106.87 527.33 T
(Rule 31) 36 512.33 T
(Do not use unspecified function arguments \050ellipsis notation\051.) 106.87 512.33 T
(Rule 32) 36 497.33 T
(The names of formal arguments to functions are to be specified and are to be the same both in the function) 106.87 497.33 T
(declaration and in the function definition.) 106.87 485.33 T
(Rule 33) 36 470.33 T
(Always specify the return type of a function explicitly.) 106.87 470.33 T
(Rule 34) 36 455.33 T
(A public function must never return a reference or a pointer to a local variable.) 106.87 455.33 T
(Rule 35) 36 440.33 T
-0.01 (Do not use the preprocessor directive) 106.87 440.33 P
5 F
-0.03 (#define) 258.33 440.33 P
0 F
-0.01 ( to obtain more efficient code; instead,  use inline functions.) 300.3 440.33 P
(Rule 36) 36 425.33 T
(Constants are to be defined using) 106.87 425.33 T
5 F
(const) 242.33 425.33 T
0 F
( or) 272.32 425.33 T
5 F
(enum) 285.64 425.33 T
0 F
(; never using #) 309.62 425.33 T
5 F
(define) 368.75 425.33 T
0 F
(.) 404.73 425.33 T
(Rule 37) 36 410.33 T
(Avoid the use of numeric values in code; use symbolic values instead.) 106.87 410.33 T
(Rule 38) 36 395.33 T
(Variables are to be declared with the smallest possible) 106.87 395.33 T
4 F
(scope) 326.42 395.33 T
0 F
(.) 349.18 395.33 T
(Rule 39) 36 380.33 T
(Each variable is to be declared in a separate declaration statement.) 106.87 380.33 T
(Rule 40) 36 365.33 T
(Every variable that is declared is to be given a value before it is used.) 106.87 365.33 T
(Rule 41) 36 350.33 T
(If possible, always use initialization instead of assignment.) 106.87 350.33 T
(Rule 42) 36 335.33 T
(Do not compare a pointer to NULL or assign NULL to a pointer; use 0 instead.) 106.87 335.33 T
(Rule 43) 36 320.33 T
(Never use) 106.87 320.33 T
4 F
(explicit) 149.6 320.33 T
0 F
( type conversions \050casts\051.) 179.59 320.33 T
(Rule 44) 36 305.33 T
(Do not write code which depends on functions that use implicit type conversions.) 106.87 305.33 T
(Rule 45) 36 290.33 T
(Never convert pointers to objects of a derived class to pointers to objects of a virtual base class.) 106.87 290.33 T
(Rule 46) 36 275.33 T
(Never convert a) 106.87 275.33 T
5 F
(const) 173.19 275.33 T
0 F
( to a non-) 203.17 275.33 T
5 F
(const) 241.2 275.33 T
0 F
(.) 271.19 275.33 T
(Rule 47) 36 260.33 T
(The code following a) 106.87 260.33 T
5 F
(case) 194.58 260.33 T
0 F
( label must always be terminated by a) 218.57 260.33 T
5 F
(break) 371.79 260.33 T
0 F
( statement.) 401.77 260.33 T
(Rule 48) 36 245.33 T
(A) 106.87 245.33 T
5 F
(switch) 116.58 245.33 T
0 F
( statement must always contain a) 152.56 245.33 T
5 F
(default) 286.92 245.33 T
0 F
( branch which handles unexpected cases.) 328.89 245.33 T
(Rule 49) 36 230.33 T
(Never use) 106.87 230.33 T
5 F
(goto) 149.6 230.33 T
0 F
(.) 173.59 230.33 T
(Rule 50) 36 215.33 T
(Do not use) 106.87 215.33 T
5 F
(malloc) 152.67 215.33 T
0 F
(,) 188.65 215.33 T
5 F
(realloc) 193.65 215.33 T
0 F
( or) 235.62 215.33 T
5 F
(free) 248.95 215.33 T
0 F
(.) 272.93 215.33 T
(Rule 51) 36 200.33 T
(Always provide empty brackets \050\322) 106.87 200.33 T
5 F
([]) 243.98 200.33 T
0 F
(\323\051 for) 255.97 200.33 T
5 F
(delete) 280.39 200.33 T
0 F
( when deallocating arrays.) 316.37 200.33 T
FMENDPAGE
%%EndPage: "90" 91
%%Page: "91" 91
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(91\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(21) 72 640 T
322.8 638.73 142.87 638.73 2 L
V
0.88 H
N
(Summary of Recommendations) 142.87 640 T
0 10 Q
(Rec. 1) 72 611.33 T
(Optimize code only if you know that you have a performance problem. Think twice before you begin.) 142.87 611.33 T
(Rec. 2) 72 596.33 T
-0.12 (If you use a C++ compiler that is based on Cfront, always compile with the +w flag set to eliminate as many) 142.87 596.33 P
(warnings as possible.) 142.87 584.33 T
(Rec. 3) 72 569.33 T
(An include file should not contain more than one class definition.) 142.87 569.33 T
(Rec. 4) 72 554.33 T
(Divide up the definitions of member functions or functions into as many files as possible.) 142.87 554.33 T
(Rec. 5) 72 539.33 T
(Place machine-dependent code in a special file so that it may be easily located when porting code from one) 142.87 539.33 T
(machine to another.) 142.87 527.33 T
(Rec. 6) 72 512.33 T
(Always give a file a name that is unique in as large a context as possible.) 142.87 512.33 T
(Rec. 7) 72 497.33 T
-0.16 (An include file for a class should have a file name of the form <class name> + extension. Use uppercase and) 142.87 497.33 P
(lowercase letters in the same way as in the source code.) 142.87 485.33 T
(Rec. 8) 72 470.33 T
(Write some descriptive comments before every function.) 142.87 470.33 T
(Rec. 9) 72 455.33 T
(Use) 142.87 455.33 T
5 F
(//) 160.91 455.33 T
0 F
( for comments.) 172.9 455.33 T
(Rec. 10) 72 440.33 T
(Use the directive) 142.87 440.33 T
5 F
(#include "filename.hh") 213.09 440.33 T
0 F
( for user-prepared include files.) 345.02 440.33 T
(Rec. 11) 72 425.33 T
(Use the directive) 142.87 425.33 T
5 F
(#include <filename.hh>) 213.09 425.33 T
0 F
( for include files from libraries.) 345.02 425.33 T
(Rec. 12) 72 410.33 T
-0.47 (Every implementation file should declare a local constant string that describes the file so the UNIX command) 142.87 410.33 P
5 F
(what) 142.87 398.33 T
0 F
( can be used to obtain information on the file revision.) 166.85 398.33 T
(Rec. 13) 72 383.33 T
(Never include other files in an \322.icc\323 file.) 142.87 383.33 T
(Rec. 14) 72 368.33 T
(Do not use typenames that differ only by the use of uppercase and lowercase letters.) 142.87 368.33 T
(Rec. 15) 72 353.33 T
(Names should not include abbreviations that are not generally accepted.) 142.87 353.33 T
(Rec. 16) 72 338.33 T
(A variable with a large scope should have a long name.) 142.87 338.33 T
(Rec. 17) 72 323.33 T
(Choose variable names that suggest the usage.) 142.87 323.33 T
(Rec. 18) 72 308.33 T
(Write code in a way that makes it easy to change the prefix for global identifiers.) 142.87 308.33 T
(Rec. 19) 72 293.33 T
(Encapsulate global variables and constants, enumerated types, and typedefs in a class.) 142.87 293.33 T
(Rec. 20) 72 278.33 T
(Always provide the) 142.87 278.33 T
4 F
(return type) 223.64 278.33 T
0 F
(of a function explicitly.) 271.39 278.33 T
(Rec. 21) 72 263.33 T
-0.52 (When declaring functions, the leading parenthesis and the first argument \050if any\051 are to be written on the same) 142.87 263.33 P
(line as the function name. If space permits, other arguments and the closing parenthesis may also be written) 142.87 251.33 T
-0.33 (on the same line as the function name. Otherwise, each additional argument is to be written on a separate line) 142.87 239.33 P
(\050with the closing parenthesis directly after the last argument\051.) 142.87 227.33 T
(Rec. 22) 72 212.33 T
-0.31 (In a function definition, the) 142.87 212.33 P
4 F
-0.31 (return type) 253.44 212.33 P
0 F
-0.31 (of the function should be written on a separate line directly above the) 300.57 212.33 P
(function name.) 142.87 200.33 T
(Rec. 23) 72 185.33 T
(Always write the left parenthesis directly after a function name.) 142.87 185.33 T
(Rec. 24) 72 170.33 T
-0.54 (Braces \050\322{}\323\051 which enclose a block are to be placed in the same column, on separate lines directly before and) 142.87 170.33 P
(after the block.) 142.87 158.33 T
(Rec. 25) 72 143.33 T
(The flow control primitives) 142.87 143.33 T
5 F
(if) 255.57 143.33 T
0 F
(,) 267.57 143.33 T
5 F
(else) 272.57 143.33 T
0 F
(,) 296.55 143.33 T
5 F
(while) 301.55 143.33 T
0 F
(,) 331.53 143.33 T
5 F
(for) 336.53 143.33 T
0 F
( and) 354.52 143.33 T
5 F
(do) 373.95 143.33 T
0 F
( should be followed by a  block, even if it is an) 385.94 143.33 T
(empty block.) 142.87 131.33 T
(Rec. 26) 72 116.33 T
-0.68 (The dereference operator \324) 142.87 116.33 P
5 F
-1.63 (*) 247.1 116.33 P
0 F
-0.68 (\325 and the address-of operator \324) 253.1 116.33 P
5 F
-1.63 (&) 370.43 116.33 P
0 F
-0.68 (\325 should be directly connected with the type names) 376.42 116.33 P
(in declarations and definitions.) 142.87 104.33 T
(Rec. 27) 72 89.33 T
(Do not use spaces around \324) 142.87 89.33 T
5 F
(.) 250.84 89.33 T
0 F
(\325 or) 256.83 89.33 T
5 F
( \324->) 270.99 89.33 T
0 F
(\325, nor between unary operators and operands.) 294.97 89.33 T
FMENDPAGE
%%EndPage: "91" 92
%%Page: "92" 92
612 792 0 FMBEGINPAGE
36 36 83.99 47.99 R
7 X
0 K
V
37.4 737.26 85.4 749.25 R
V
0 12 Q
0 X
(92\05094\051) 37.4 741.25 T
94.96 714.26 184.69 726.25 R
7 X
V
0 X
(1992-02-25) 94.96 718.25 T
393.99 756 414 756 414 752 400.99 752 400.99 749 414 749 414 745.99
 400.99 745.99 400.99 743.02 414 743.02 414 739.02 393.99 739.02 12 Y
V
0.5 H
0 Z
N
439.99 756 459.98 756 459.98 752 446 752 446 749 459.98 749 459.98 745.99
 446 745.99 446 743.02 459.98 743.02 459.98 739.02 439.99 739.02 12 Y
V
N
504.99 756 526 756 526 752 511.99 752 511.99 749 526 749 526 745.99
 511.99 745.99 511.99 743.02 526 743.02 526 739.02 504.99 739.02 12 Y
V
N
415.98 756 415.98 739.02 425.99 739.02 425.99 744.01 422.99 744.01 422.99 756 6 Y
V
N
490 756 502.98 756 502.98 752 500 752 500 739.02 493 739.02 493 752
 490 752 8 Y
V
N
461.99 739.02 461.99 756 487.98 756 487.98 739.02 482 739.02 482 752 477.98 752
 477.98 739.02 472 739.02 472 752 468 752 468 739.02 12 Y
V
N
0 7 Q
(Document Name) 94.96 751.23 T
96.02 737.26 276.88 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 96.02 741.25 T
527.98 756 527.98 739.02 540 739.02 540 744.01 534.98 744.01 534.98 756 6 Y
V
N
428 756 428 739.02 437.98 739.02 437.98 744.01 434.98 744.01 434.98 756 6 Y
V
N
0 7 Q
(Page) 36 751.23 T
(Date) 93.9 728.23 T
(Rev.) 195.55 728.23 T
196.62 714.26 227.65 726.25 R
7 X
V
0 12 Q
0 X
(C) 196.62 718.25 T
0 7 Q
(Document No.) 234.08 728.23 T
235.14 714.26 310.04 726.25 R
7 X
V
0 12 Q
0 X
-0.24 (M 90 0118 Uen) 235.14 718.25 P
36 72 540 648 R
7 X
V
0 10 Q
0 X
(Rec. 28) 36 641.33 T
(Use the c++ mode in GNU Emacs to format code.) 106.87 641.33 T
(Rec. 29) 36 626.33 T
(Access functions are to be inline.) 106.87 626.33 T
(Rec. 30) 36 611.33 T
(Forwarding functions are to be inline.) 106.87 611.33 T
(Rec. 31) 36 596.33 T
(Constructors and destructors must not be inline.) 106.87 596.33 T
(Rec. 32) 36 581.33 T
(Friends of a class should be used to provide additional functions that are best kept outside of the class.) 106.87 581.33 T
(Rec. 33) 36 566.33 T
(Avoid the use of global objects in constructors and destructors.) 106.87 566.33 T
(Rec. 34) 36 551.33 T
(An assignment operator ought to return a) 106.87 551.33 T
4 F
(const) 273.69 551.33 T
0 F
( reference to the assigning object.) 295.35 551.33 T
(Rec. 35) 36 536.33 T
(Use operator overloading sparingly and in a uniform manner.) 106.87 536.33 T
(Rec. 36) 36 521.33 T
(When two operators are opposites \050such as) 106.87 521.33 T
5 F
(==) 280.34 521.33 T
0 F
( and) 292.33 521.33 T
5 F
(!=) 311.76 521.33 T
0 F
(\051, it is appropriate to define both.) 323.76 521.33 T
(Rec. 37) 36 506.33 T
(Avoid inheritance for parts-of relations.) 106.87 506.33 T
(Rec. 38) 36 491.33 T
(Give derived classes access to class type member data by declaring protected access functions.) 106.87 491.33 T
(Rec. 39) 36 476.33 T
-0.54 (Do not attempt to create an instance of a class template using a type that does not define the member functions) 106.87 476.33 P
(which the class template, according to its documentation,  requires.) 106.87 464.33 T
(Rec. 40) 36 449.33 T
-0.27 (Take care to avoid multiple definition of overloaded functions in conjunction with the instantiation of a class) 106.87 449.33 P
(template.) 106.87 437.33 T
(Rec. 41) 36 422.33 T
(Avoid functions with many arguments.) 106.87 422.33 T
(Rec. 42) 36 407.33 T
(If a function stores a pointer to an object which is accessed via an argument, let the argument have the type) 106.87 407.33 T
(pointer. Use reference arguments in other cases.) 106.87 395.33 T
(Rec. 43) 36 380.33 T
-0.54 (Use constant references \050) 106.87 380.33 P
5 F
-1.29 (const &) 205.99 380.33 P
0 F
-0.54 (\051 instead of call-by-value, unless using a pre-defined data type or a pointer.) 246.68 380.33 P
(Rec. 44) 36 365.33 T
(When overloading functions, all variations should have the same semantics \050be used for the same purpose\051.) 106.87 365.33 T
(Rec. 45) 36 350.33 T
(Use) 106.87 350.33 T
5 F
(inline) 124.91 350.33 T
0 F
( functions when they are really needed.) 160.89 350.33 T
(Rec. 46) 36 335.33 T
(Minimize the number of temporary objects that are created as return values from functions or as arguments) 106.87 335.33 T
(to functions.) 106.87 323.33 T
(Rec. 47) 36 308.33 T
(Avoid long and complex functions.) 106.87 308.33 T
(Rec. 48) 36 293.33 T
(Pointers to pointers should whenever possible be avoided.) 106.87 293.33 T
(Rec. 49) 36 278.33 T
(Use a) 106.87 278.33 T
5 F
(typedef) 131.84 278.33 T
0 F
( to simplify program syntax when declaring function pointers.) 173.82 278.33 T
(Rec. 50) 36 263.33 T
(The choice of loop construct \050) 106.87 263.33 T
5 F
(for) 227.05 263.33 T
0 F
(,) 245.04 263.33 T
5 F
(while) 250.04 263.33 T
0 F
( or) 280.02 263.33 T
5 F
(do-while) 293.34 263.33 T
0 F
(\051 should depend on the specific use of the loop.) 341.32 263.33 T
(Rec. 51) 36 248.33 T
(Always use) 106.87 248.33 T
5 F
(unsigned) 155.72 248.33 T
0 F
( for variables which cannot reasonably have negative values.) 203.69 248.33 T
(Rec. 52) 36 233.33 T
(Always use inclusive lower limits and exclusive upper limits.) 106.87 233.33 T
(Rec. 53) 36 218.33 T
(Avoid the use of) 106.87 218.33 T
5 F
(continue) 175.71 218.33 T
0 F
(.) 223.68 218.33 T
(Rec. 54) 36 203.33 T
(Use) 106.87 203.33 T
5 F
(break) 124.91 203.33 T
0 F
( to exit a loop if this avoids the use of flags.) 154.89 203.33 T
(Rec. 55) 36 188.33 T
(Do not write logical expressions of the type) 106.87 188.33 T
5 F
(if\050test\051) 283.97 188.33 T
0 F
( or) 331.94 188.33 T
5 F
(if\050!test\051) 345.27 188.33 T
0 F
( when) 399.23 188.33 T
5 F
(test) 425.88 188.33 T
0 F
( is a pointer.) 449.87 188.33 T
(Rec. 56) 36 173.33 T
(Use parentheses to clarify the order of evaluation for operators in expressions.) 106.87 173.33 T
(Rec. 57) 36 158.33 T
(Avoid global data if at all possible.) 106.87 158.33 T
(Rec. 58) 36 143.33 T
(Do not allocate memory and expect that someone else will deallocate it later.) 106.87 143.33 T
(Rec. 59) 36 128.33 T
(Always assign a new value to a pointer that points to deallocated memory.) 106.87 128.33 T
(Rec. 60) 36 113.33 T
-0.5 (Make sure that fault handling is done so that the transfer to exception handling \050when this is available in C++\051) 106.87 113.33 P
(may be easily made.) 106.87 101.33 T
(Rec. 61) 36 86.33 T
(Check the fault codes which may be received from library functions even if these functions seem foolproof.) 106.87 86.33 T
FMENDPAGE
%%EndPage: "92" 93
%%Page: "93" 93
612 792 0 FMBEGINPAGE
528.01 737.26 576 749.25 R
7 X
0 K
V
0 12 Q
0 X
(93\05094\051) 528.01 741.25 T
528.01 36 576 47.99 R
7 X
V
338 712.26 421.85 724.25 R
V
0 X
(1992-09-18) 338 716.25 T
0 7 Q
(Document Name) 337.01 751.23 T
338 737.26 507.01 749.25 R
7 X
V
0 12 Q
0 X
(DESCRIPTION) 338 741.25 T
0 7 Q
(Page) 526.99 751.23 T
(Date) 337.01 726.23 T
(Rev.) 432 726.23 T
432.99 712.26 461.99 724.25 R
7 X
V
0 12 Q
0 X
(C) 432.99 716.25 T
0 7 Q
(Document No.) 468 726.23 T
468.99 712.26 556.58 724.25 R
7 X
V
0 12 Q
0 X
(M 90 0118 Uen) 468.99 716.25 T
72 754.98 92.01 754.98 92.01 750.98 79 750.98 79 747.98 92.01 747.98 92.01 744.97
 79 744.97 79 742 92.01 742 92.01 738 72 738 12 Y
V
0.5 H
0 Z
N
118.01 754.98 137.99 754.98 137.99 750.98 124.02 750.98 124.02 747.98 137.99 747.98 137.99 744.97
 124.02 744.97 124.02 742 137.99 742 137.99 738 118.01 738 12 Y
V
N
183.01 754.98 204.01 754.98 204.01 750.98 190.01 750.98 190.01 747.98 204.01 747.98 204.01 744.97
 190.01 744.97 190.01 742 204.01 742 204.01 738 183.01 738 12 Y
V
N
94 754.98 94 738 104 738 104 742.99 101 742.99 101 754.98 6 Y
V
N
168.01 754.98 180.99 754.98 180.99 750.98 178.02 750.98 178.02 738 171.01 738 171.01 750.98
 168.01 750.98 8 Y
V
N
140 738 140 754.98 166 754.98 166 738 160.02 738 160.02 750.98 155.99 750.98
 155.99 738 150.01 738 150.01 750.98 146.01 750.98 146.01 738 12 Y
V
N
205.99 754.98 205.99 738 218.01 738 218.01 742.99 212.99 742.99 212.99 754.98 6 Y
V
N
106.02 754.98 106.02 738 115.99 738 115.99 742.99 112.99 742.99 112.99 754.98 6 Y
V
N
72 72 576 648 R
7 X
V
1 F
0 X
(22) 72 640 T
384.79 638.73 142.87 638.73 2 L
V
0.88 H
N
(Summary of Portability Recommendations) 142.87 640 T
0 10 Q
(Port. Rec. 1) 72 611.33 T
(Avoid the direct use of pre-defined data types in declarations.) 142.87 611.33 T
(Port. Rec. 2) 72 596.33 T
(Do not assume that an) 142.87 596.33 T
5 F
(int) 234.2 596.33 T
0 F
( and a) 252.19 596.33 T
5 F
(long) 278.55 596.33 T
0 F
( have the same size.) 302.54 596.33 T
(Port. Rec. 3) 72 581.33 T
(Do not assume that an) 142.87 581.33 T
5 F
(int) 234.2 581.33 T
0 F
( is 32 bits long \050it may be only 16 bits long\051.) 252.19 581.33 T
(Port. Rec. 4) 72 566.33 T
(Do not assume that a) 142.87 566.33 T
5 F
(char) 229.2 566.33 T
0 F
( is) 253.18 566.33 T
5 F
(signed) 264.85 566.33 T
0 F
( or) 300.83 566.33 T
5 F
(unsigned) 314.15 566.33 T
0 F
(.) 362.13 566.33 T
(Port. Rec. 5) 72 551.33 T
(Always set) 142.87 551.33 T
5 F
(char) 189.5 551.33 T
0 F
( to) 213.49 551.33 T
5 F
(unsigned) 226.26 551.33 T
0 F
( if 8-bit ASCII is used.) 274.23 551.33 T
(Port. Rec. 6) 72 536.33 T
(Be careful not to make type conversions from a \322shorter\323 type to a \322longer\323 one.) 142.87 536.33 T
(Port. Rec. 7) 72 521.33 T
(Do not assume that pointers and integers have the same size.) 142.87 521.33 T
(Port. Rec. 8) 72 506.33 T
(Use explicit type conversions for arithmetic using signed and unsigned values.) 142.87 506.33 T
(Port. Rec. 9) 72 491.33 T
(Do not assume that you know how an instance of a data type is represented in memory.) 142.87 491.33 T
(Port. Rec. 10) 72 476.33 T
(Do not assume that) 142.87 476.33 T
5 F
(long) 222.26 476.33 T
0 F
(s,) 246.25 476.33 T
5 F
(float) 255.13 476.33 T
0 F
(s,) 285.12 476.33 T
5 F
(double) 294 476.33 T
0 F
(s or) 329.98 476.33 T
5 F
(long double) 347.19 476.33 T
0 F
(s may begin at arbitrary addresses.) 413.16 476.33 T
(Port. Rec. 11) 72 461.33 T
(Do not depend on underflow or overflow functioning in any special way.) 142.87 461.33 T
(Port. Rec. 12) 72 446.33 T
(Do not assume that the operands in an expression are evaluated in a definite order.) 142.87 446.33 T
(Port. Rec. 13) 72 431.33 T
(Do not assume that you know how the invocation mechanism for a function is implemented.) 142.87 431.33 T
(Port. Rec. 14) 72 416.33 T
(Do not assume that an object is initialized in any special order in constructors.) 142.87 416.33 T
(Port. Rec. 15) 72 401.33 T
(Do not assume that static objects are initialized in any special order.) 142.87 401.33 T
(Port. Rec. 16) 72 386.33 T
(Do not write code which is dependent on the lifetime of a temporary object.) 142.87 386.33 T
(Port. Rec. 17) 72 371.33 T
(Avoid using shift operations instead of arithmetic operations.) 142.87 371.33 T
(Port. Rec. 18) 72 356.33 T
(Avoid pointer arithmetic.) 142.87 356.33 T
FMENDPAGE
%%EndPage: "93" 94
%%Page: "94" 94
612 792 0 FMBEGINPAGE
36 666 358.81 687.17 R
7 X
0 K
V
0.5 H
0 Z
0 X
N
195.99 720 540 770 R
7 X
V
0 X
N
291.56 37.91 540 288 R
7 X
V
0 X
N
36 37.01 283.39 288 R
7 X
V
0 X
N
36 297 540 462.01 R
7 X
V
0 X
N
36 468 540 619 R
7 X
V
0 X
N
36 688.99 358.81 710.16 R
7 X
V
0 X
N
495 18 542.99 29.99 R
7 X
V
33.99 765 54 765 54 761 40.99 761 40.99 758 54 758 54 754.99
 40.99 754.99 40.99 751.99 54 751.99 54 747.99 33.99 747.99 12 Y
0 X
V
N
79.99 765 100.01 765 100.01 761 86 761 86 758 100.01 758 100.01 754.99
 86 754.99 86 751.99 100.01 751.99 100.01 747.99 79.99 747.99 12 Y
V
N
144.99 765 166 765 166 761 151.99 761 151.99 758 166 758 166 754.99
 151.99 754.99 151.99 751.99 166 751.99 166 747.99 144.99 747.99 12 Y
V
N
55.98 765 55.98 747.99 65.99 747.99 65.99 752.98 62.99 752.98 62.99 765 6 Y
V
N
130 765 143.01 765 143.01 761 140 761 140 747.99 133 747.99 133 761
 130 761 8 Y
V
N
101.99 747.99 101.99 765 127.98 765 127.98 747.99 122 747.99 122 761 118.01 761
 118.01 747.99 112 747.99 112 761 108 761 108 747.99 12 Y
V
N
39.01 32 55.02 32 55.02 29 45.01 29 45.01 25.99 55.02 25.99 55.02 23.98
 45.01 23.98 45.01 21.01 55.02 21.01 55.02 18 39.01 18 12 Y
V
N
74.01 32 90 32 90 18 84.02 18 84.02 29 80.02 29 80.02 18
 74.01 18 8 Y
V
N
80.02 22 84.02 25 R
V
N
57.01 18 72 18 72 32 68 32 68 21.01 62.02 21.01 62.02 32
 57.01 32 8 Y
V
N
168.01 765 168.01 747.99 180 747.99 180 752.98 174.98 752.98 174.98 765 6 Y
V
N
68 765 68 747.99 78.01 747.99 78.01 752.98 75 752.98 75 765 6 Y
V
N
37.35 628 74.34 657 R
7 X
V
0 X
N
273.36 628 310.35 657 R
7 X
V
0 X
N
1 12 Q
(Change Rule) 90.35 635.99 T
(Add New Rule) 333.37 635.99 T
385 726.32 526.73 766.83 R
7 X
V
0 F
0 X
1.27 (Rek. 1) 385 758.83 P
1.27 (This document should) 417.59 758.83 P
(be sent to:) 385 744.83 T
20.06 (Rek. 2) 385 730.83 P
20.06 (EUA/FN Mats) 436.38 730.83 P
1 F
(C++) 205.99 755.01 T
(PROGRAMMING) 205.99 742.99 T
(RULES) 205.99 731 T
308.57 742.8 362.92 762.15 R
7 X
V
0 X
(REV) 308.57 754.15 T
(C) 336.23 754.15 T
39.95 473.36 533.58 615.09 R
7 X
V
4 F
0 X
(Text of Old Rule:) 39.95 607.09 T
19.95 603.09 21.95 615.09 R
V
39.95 302.1 533.58 458.01 R
7 X
V
0 X
(Text of New Rule:) 39.95 450.01 T
19.95 446.01 21.95 458.01 R
V
43 692.99 354.81 707.16 R
7 X
V
0 X
(Name:) 43 699.16 T
23 695.16 25 707.16 R
V
39.94 41.18 277.05 284.32 R
7 X
V
0 X
(Reason for New Rule:) 39.94 276.32 T
19.94 272.32 21.94 284.32 R
V
295.48 41.18 532.58 284.32 R
7 X
V
1 10 Q
0 X
(Rek. 1) 295.48 277.65 T
41.98 668.64 353.79 682.81 R
7 X
V
4 12 Q
0 X
(Department:) 41.98 674.81 T
21.98 670.81 23.98 682.81 R
V
FMENDPAGE
%%EndPage: "94" 95
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 94 1
%%DocumentFonts: Times-Roman
%%+ Helvetica-Bold
%%+ Times-Bold
%%+ Helvetica
%%+ Times-BoldItalic
%%+ Courier-Bold
%%+ Courier
%%+ Times-Italic
%%+ Helvetica-BoldOblique
