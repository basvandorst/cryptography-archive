*** /usr/src/sys/net/if_ethersubr.c	Fri Feb  3 03:10:31 1995
--- if_ethersubr.c	Thu Sep 28 14:59:41 1995
***************
*** 1,3 ****
--- 1,10 ----
+ /*
+  * This file has been slightly modified by NRL for use with IPv6.  Search
+  * for 'INET6' to see the ifdef blocks where this happens.
+  *
+  * See the NRL Copyright notice for conditions on the modifications.
+  */
+ 
  /*	BSDI if_ethersubr.c,v 2.1 1995/02/03 08:10:31 polk Exp	*/
  
  /*
***************
*** 61,66 ****
--- 68,84 ----
  #endif
  #include <netinet/if_ether.h>
  
+ #ifdef INET6
+ #include <netinet6/in6.h>
+ #include <netinet6/in6_var.h>
+ 
+ /*
+  * External globals
+  */ 
+ extern struct ifqueue ipv6intrq;
+ 
+ #endif /* INET6 */
+ 
  #ifdef NS
  #include <netns/ns.h>
  #include <netns/ns_if.h>
***************
*** 143,152 ****
  		/* If broadcasting on a simplex interface, loopback a copy */
  		if ((m->m_flags & M_BCAST) && (ifp->if_flags & IFF_SIMPLEX))
  			mcopy = m_copy(m, 0, (int)M_COPYALL);
! 		off = m->m_pkthdr.len - m->m_len;
  		type = htons(ETHERTYPE_IP);
  		break;
  #endif
  #ifdef NS
  	case AF_NS:
  		type = htons(ETHERTYPE_NS);
--- 161,195 ----
  		/* If broadcasting on a simplex interface, loopback a copy */
  		if ((m->m_flags & M_BCAST) && (ifp->if_flags & IFF_SIMPLEX))
  			mcopy = m_copy(m, 0, (int)M_COPYALL);
! 		off = m->m_pkthdr.len - m->m_len; /* KEBE asks, what is this 
!                                                       line doing here? */
  		type = htons(ETHERTYPE_IP);
  		break;
  #endif
+ 
+ #ifdef INET6
+         case AF_INET6:
+                 /*
+                  * The bottom line here is to either queue the outgoing packet
+ 		 * in the discovery engine, or fill in edst with something
+ 		 * that'll work.
+                  */
+                 if (m->m_flags & M_MCAST)
+                   {
+                     /* If multicast dest., then use IPv6 -> Ethernet mcast
+                        mapping.  Really simple. */
+                     ETHER_MAP_IN6_MULTICAST(((struct sockaddr_in6 *)dst)->sin6_addr,edst);
+                   }
+                 else   /* Do unicast neighbor discovery stuff. */
+                   { 
+                     if (!ipv6_discov_resolve(ifp, rt, m, dst, edst))
+                       return 0;
+                   }
+                 /* The htons() is necessary on BSDI BSD/OS 2.0 but NOT on 4.4 */
+                 type = htons(ETHERTYPE_IPV6);
+                 break;
+ #endif /* INET6 */
+ 
  #ifdef NS
  	case AF_NS:
  		type = htons(ETHERTYPE_NS);
***************
*** 329,334 ****
--- 372,387 ----
  		ifp->if_imcasts++;
  
  	switch (eh->ether_type) {
+ 
+ #ifdef INET6
+         /*
+ 	 * Schedule IPv6 software interrupt for incoming IPv6 packet.
+ 	 */
+ 	case ETHERTYPE_IPV6:
+ 	  schednetisr(NETISR_IPV6);
+ 	  inq = &ipv6intrq;
+ 	  break;
+ #endif /* INET6 */
  #ifdef INET
  	case ETHERTYPE_IP:
  		schednetisr(NETISR_IP);
***************
*** 511,516 ****
--- 564,575 ----
  	{ 0x01, 0x00, 0x5e, 0x00, 0x00, 0x00 };
  u_char	ether_ipmulticast_max[ETHER_ADDR_LEN] =
  	{ 0x01, 0x00, 0x5e, 0x7f, 0xff, 0xff };
+ #ifdef INET6
+ u_char	ether_ipv6multicast_min[ETHER_ADDR_LEN] =
+ 	{ 0x33, 0x33, 0x00, 0x00, 0x00, 0x00 };
+ u_char	ether_ipv6multicast_max[ETHER_ADDR_LEN] =
+ 	{ 0x33, 0x33, 0xff, 0xff, 0xff, 0xff };
+ #endif /* INET6 */
  
  /*
   * Add an Ethernet multicast address or range of addresses to the list for a
***************
*** 523,528 ****
--- 582,590 ----
  {
  	register struct ether_multi *enm;
  	struct sockaddr_in *sin;
+ #ifdef INET6
+         struct sockaddr_in6 *sin6;
+ #endif /* INET6 */
  	u_char addrlo[ETHER_ADDR_LEN];
  	u_char addrhi[ETHER_ADDR_LEN];
  	int s = splimp();
***************
*** 552,557 ****
--- 614,640 ----
  		break;
  #endif
  
+ #ifdef INET6
+         case AF_INET6:
+                 sin6 = (struct sockaddr_in6 *)&(ifr->ifr_addr);
+                 if (IS_IN6_UNSPEC(sin6->sin6_addr))
+                   {
+ 		    /*
+ 		     * An unspecified IPv6 address means listen to all
+ 		     * of the IPv6 multicast addresses on this Ethernet.
+ 		     * (Multicast routers like this.)
+ 		     */
+                     bcopy(ether_ipv6multicast_min, addrlo, ETHER_ADDR_LEN);
+                     bcopy(ether_ipv6multicast_max, addrhi, ETHER_ADDR_LEN);
+                   }
+                 else
+                   {
+                     ETHER_MAP_IN6_MULTICAST(sin6->sin6_addr,addrlo);
+                     bcopy(addrlo,addrhi,ETHER_ADDR_LEN);
+                   }
+                 break;
+ #endif /* INET6 */
+ 
  	default:
  		splx(s);
  		return (EAFNOSUPPORT);
***************
*** 611,616 ****
--- 694,702 ----
  	register struct ether_multi *enm;
  	register struct ether_multi **p;
  	struct sockaddr_in *sin;
+ #ifdef INET6
+         struct sockaddr_in6 *sin6;
+ #endif /* INET6 */
  	u_char addrlo[ETHER_ADDR_LEN];
  	u_char addrhi[ETHER_ADDR_LEN];
  	int s = splimp();
***************
*** 639,644 ****
--- 725,755 ----
  		}
  		break;
  #endif
+ #ifdef INET6    
+         case AF_INET6:
+                 sin6 = (struct sockaddr_in6 *)&(ifr->ifr_addr);
+                 if (IS_IN6_UNSPEC(sin6->sin6_addr))
+                   {  
+ 		    /*
+ 		     * An unspecified IPv6 address means stop listening to
+ 		     * all IPv6 multicast addresses on this Ethernet.'
+ 		     *
+ 		     * (This might not be healthy, given IPv6's reliance on
+ 		     *  multicast for things like neighbor discovery.
+ 		     *  Perhaps initializing all-nodes, solicited nodes, and
+ 		     *  possibly all-routers for this interface afterwards
+ 		     *  is not a bad idea.)
+ 		     */
+                     bcopy(ether_ipv6multicast_min, addrlo, ETHER_ADDR_LEN);
+                     bcopy(ether_ipv6multicast_max, addrhi, ETHER_ADDR_LEN); 
+                   }      
+                 else     
+                   {      
+                     ETHER_MAP_IN6_MULTICAST(sin6->sin6_addr,addrlo);
+                     bcopy(addrlo,addrhi,ETHER_ADDR_LEN);
+                   }
+                 break;
+ #endif /* INET6 */      
  
  	default:
  		splx(s);
