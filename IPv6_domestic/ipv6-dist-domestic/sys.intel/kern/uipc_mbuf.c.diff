*** /usr/src/sys/kern/uipc_mbuf.c	Fri Feb  3 02:55:06 1995
--- uipc_mbuf.c	Fri Sep 29 14:55:12 1995
***************
*** 1,3 ****
--- 1,10 ----
+ /*
+  * This file has been slightly modified by NRL for use with IPv6.  Search
+  * for 'INET6' to see the ifdef blocks where this happens.
+  *
+  * See the NRL Copyright notice for conditions on the modifications.
+  */
+ 
  /*-
   * Copyright (c) 1992, 1994 Berkeley Software Design, Inc. All rights reserved.
   * The Berkeley Software Design Inc. software License Agreement specifies
***************
*** 56,61 ****
--- 63,72 ----
  
  #include <vm/vm.h>
  
+ #ifdef INET6
+ #include <netinet6/in6_debug.h>
+ #endif /* INET6 */
+ 
  extern	vm_map_t mb_map;
  struct	mbuf *mbutl;
  char	*mclrefcnt;
***************
*** 329,334 ****
--- 340,425 ----
  	return (0);
  }
  
+ #ifdef INET6
+ /*----------------------------------------------------------------------
+  * m_copym2() is like m_copym(), except it COPIES cluster mbufs, instead
+  * of merely bumping the reference count.
+  *
+  * The hope is to obsolete this function someday.
+  ----------------------------------------------------------------------*/
+ 
+ struct mbuf *
+ m_copym2(m, off0, len, wait)
+         register struct mbuf *m;
+         int off0, wait;
+         register int len;
+ {
+         register struct mbuf *n, **np;
+         register int off = off0;
+         struct mbuf *top;
+         int copyhdr = 0;
+ 
+         if (off < 0 || len < 0)
+                 panic("m_copym");
+         if (off == 0 && m->m_flags & M_PKTHDR)
+                 copyhdr = 1;
+         while (off > 0) {
+                 if (m == 0)
+                         panic("m_copym2 (null mbuf)");
+                 if (off < m->m_len)
+                         break;
+                 off -= m->m_len;
+                 m = m->m_next;
+         }
+         np = &top;
+         top = 0;
+         while (len > 0) {
+                 if (m == 0) {
+                         if (len != M_COPYALL)
+                                 panic("m_copym2 (len != M_COPYALL)");
+                         break;
+                 }
+                 MGET(n, wait, m->m_type);
+                 *np = n;
+                 if (n == 0)
+                         goto nospace;
+                 if (copyhdr) {
+                         M_COPY_PKTHDR(n, m);
+                         if (len == M_COPYALL)
+                                 n->m_pkthdr.len -= off0;
+                         else
+                                 n->m_pkthdr.len = len;
+                         copyhdr = 0;
+                 }
+                 n->m_len = min(len, m->m_len - off);
+                 if ((m->m_flags & M_EXT) && (n->m_len >MHLEN)) {
+                   /* This is a cheesy hack. */
+                   MCLGET(n,wait);
+                   if (n->m_flags & M_EXT)
+                     {
+                       bcopy(mtod(m,caddr_t)+off,mtod(n,caddr_t),
+                             (unsigned)n->m_len);
+                     }
+                   else goto nospace;
+                 } else
+                         bcopy(mtod(m, caddr_t)+off, mtod(n, caddr_t),
+                             (unsigned)n->m_len);
+                 if (len != M_COPYALL)
+                         len -= n->m_len;
+                 off = 0;
+                 m = m->m_next;
+                 np = &n->m_next;
+         }
+         if (top == 0)
+                 MCFail++;
+         return (top);
+ nospace:
+         m_freem(top);
+         MCFail++;
+         return (0);
+ }
+ #endif /* INET6 */
+ 
  /*
   * Copy data from an mbuf chain starting "off" bytes from the beginning,
   * continuing for "len" bytes, into the indicated buffer.
***************
*** 529,534 ****
--- 620,712 ----
  	MPFail++;
  	return (0);
  }
+ 
+ #ifdef INET6    
+ /*----------------------------------------------------------------------
+  * m_pullup2() works like m_pullup, save that len can be <= MCLBYTES.
+  * m_pullup2() only works on values of len such that MHLEN < len <= MCLBYTES,
+  * it calls m_pullup() for values <= MHLEN.  It also only coagulates the
+  * reqested number of bytes.  (For those of us who expect unwieldly option
+  * headers.     
+  *                      
+  * KEBE SAYS:  Remember that dtom() calls with data in clusters does not work!
+  ----------------------------------------------------------------------*/
+                 
+ struct mbuf *   
+ m_pullup2(n, len)       
+         register struct mbuf *n;
+         int len;
+ {
+         register struct mbuf *m;
+         register int count;
+         int space; 
+                 
+         DPRINTF(IDL_FINISHED,("In m_pullup2(), n = 0x%x.\n",n));
+         DDO(IDL_FINISHED,dump_mbuf_hdr(n));
+         if (len <= MHLEN)
+         DDO(IDL_FINISHED,dump_mbuf_hdr(n));
+         if (len <= MHLEN)
+           return m_pullup(n, len);
+  
+         if ((n->m_flags & M_EXT) != 0 &&
+             n->m_data + len < &n->m_data[MCLBYTES] && n->m_next) {
+           DPRINTF(IDL_FINISHED,("In ext w/enough room (using %d) to fit.\n",\
+                                    n->m_len));
+                 if (n->m_len >= len)
+                         return (n);
+           DPRINTF(IDL_FINISHED,("But not enough to fit all."));
+                 m = n;
+                 n = n->m_next;
+                 len -= m->m_len;
+         } else {
+           DPRINTF(IDL_FINISHED,("Allocating new head cluster...\n"));
+                 if (len > MCLBYTES)
+                   goto bad;
+                 MGET(m, M_DONTWAIT, n->m_type);
+                 if (m == 0)
+                         goto bad; 
+                 MCLGET(m,M_DONTWAIT);
+                 if ((m->m_flags & M_EXT) == 0)
+                   goto bad;
+                 m->m_len = 0;
+                 if (n->m_flags & M_PKTHDR) {
+                   /* M_COPY_PKTHDR(m, n);*//* Too many adverse side effects. */
+                   m->m_pkthdr = n->m_pkthdr;
+                   m->m_flags = (n->m_flags & M_COPYFLAGS) | M_EXT;
+                   n->m_flags &= ~M_PKTHDR;
+                   /* n->m_data is cool. */
+                 }
+         }
+ 
+         do {
+                 count = min(len, n->m_len);
+                 bcopy(mtod(n, caddr_t), mtod(m, caddr_t) + m->m_len,
+                   (unsigned)count);
+                 len -= count;
+                 m->m_len += count;
+                 n->m_len -= count;
+                 space -= count;
+                 if (n->m_len)
+                         n->m_data += count;
+                 else
+                         n = m_free(n);
+         } while (len > 0 && n);
+         if (len > 0) {
+                 (void) m_free(m);
+                 goto bad;
+         }         
+         m->m_next = n;
+                 
+         DDO(IDL_FINISHED,printf("Returning 0x%x normally.\n",m);\
+             dump_mbuf_hdr(m));
+ 
+         return (m);
+ bad:            
+         m_freem(n);
+         MPFail++;
+         return (0);
+ }               
+ #endif /* INET6 */
  
  /*
   * Partition an mbuf chain in two pieces, returning the tail --
