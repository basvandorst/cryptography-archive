%!PS-Adobe-3.0%%Title: *CryptoBytes 3.1 final for pdf%%Creator: PageMaker 6.5%%CreationDate:  8-9-1997, 5:35:58%%For: Andryw%%Pages: (atend)%%PageOrder: Special%%BoundingBox: 0 0 612 792%%ALDBoundingBox: 0 0 612 792%%DocumentNeededResources: (atend)%%DocumentSuppliedResources: (atend)%%DocumentCustomColors: (atend)%%DocumentPrinterRequired: () (Acrobat Distiller 3.0)%ALDOriginalFile: LANDRU:Andryw Work:CryptoBytes v3n1:*CryptoBytes 3.1 final for pdf%%EndComments%%BeginProlog%%BeginResource: procset P65PS_PS 1.0 1%%Copyright: Copyright (C) 1996 Adobe Systems, Inc.  All Rights Reserved.%%Version: 1.0 1 %%%/setpacking where{pop currentpacking true setpacking}if userdict/P65PS 454dict dup begin userdict/P65PS known{/$MetalHead P65PS def}{/$MetalHeadcurrentdict def}ifelse/P65PS currentdict def put/bdef{bind def}bind def/xdef{exch def}bdef/ldef{load def}bdef/ndef{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdef/MakeReadOnlyArray{/packedarray where{pop packedarray}{array astore readonly}ifelse}bdef/T true def/F false def/q`65[currenttransfer]cvx def/PSScreen[currentscreen]cvx def/PSsetgray systemdict/setgray get def/_PSdef matrix def/_WCmtx matrix def/_LPmtx matrix def/bse^65{0 0 transformround exch round exch itransform translate}bdef/j`65{_PSdef currentmatrix pop}bdef/ps$65{gsave scale _WCmtx currentmatrix pop grestore scale}bdef/k`65{_LPmtx currentmatrix pop}bdef/l`65{_LPmtx setmatrix}bdef/m`65{{90 rotate pop 0exch neg translate}{-90 rotate neg 0 translate pop}ifelse}bdef/L2L65{1 dictbegin/PageSize[currentpagedevice/PageSize get aload pop exch]def currentdictend setpagedevice gsave 90 rotate neg 0 exch translate pop j`65 grestore}bdef/p`65{dup length 2 add array cvx dup 3 -1 roll 2 exch putinterval dup 0 4 -1roll put dup 1/exec load put}bdef/db65{exch dup length 2 add array cvx dup 3-1 roll 2 exch putinterval dup 0 4 -1 roll put dup 1/exec load put}bdef/setcmykcolor{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat systemdict/setrgbcolor get exec pop}ndef/setcustomcolor{1 index dup dup4 get(Red)eq 3 1 roll 4 get(Green)eq exch 4 get(Blue)eq or or not level2 and{exch[exch/Separation exch dup 4 get exch/DeviceCMYK exch 0 4 getinterval[exch/dup load exch cvx{mul exch dup}/forall load/pop load dup]cvx]setcolorspacesetcolor}{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ifelse}ndef/setprocesscolor{exch aload pop pop 4{4 index mul 4 1 roll}repeatsetcmykcolor pop}ndef/sethificolor{exch aload length 4 sub{pop}repeat 4{4index mul 4 1 roll}repeat setcmykcolor pop}ndef/findrgbcolor{4MakeReadOnlyArray}ndef/findlabcolor{6 MakeReadOnlyArray}ndef/finddefcolor{6MakeReadOnlyArray}ndef/finddefgcolor{7 MakeReadOnlyArray}ndef/findcmykcustomcolor{5 MakeReadOnlyArray}ndef/findcmykprocesscolor{5MakeReadOnlyArray}ndef/findhificolor{exch dup dup 4 2 roll 2 mul 7 add 2 rollmark exch 2 mul 7 add 1 roll{1 index type/stringtype ne{exit}if 2MakeReadOnlyArray counttomark 1 add 1 roll counttomark 3 add mark exch 1 rollcounttomark 1 add -1 roll pop}loop counttomark 1 add 4 roll counttomark 1 add-1 roll pop exch 5 add MakeReadOnlyArray}ndef/newcmykcustomcolor{6MakeReadOnlyArray}ndef/setoverprint{pop}ndef/currentoverprint{false}ndef/setseparationgray{level2{[/Separation(All)/DeviceGray{1 exch sub}]setcolorspace 1 exch sub setcolor}{PSsetgray}ifelse}ndef/colorexists false def/proc1 null def/proc2 null def/newproc null def/level2/languagelevel where{poplanguagelevel 1 ne}{false}ifelse def/v2`65{/colorexists xdef}def/j2`65{setcustomcolor}bdef/setpaintrgbcolor{exch aload pop pop 4 -1 roll 3{dup dup 6-1 roll mul exch sub 1 add exch}repeat pop setrgbcolor}bdef/setpaintdefcolor{exch aload pop pop 5 -1 roll dup type/arraytype eq{dup/_curcolorspace xdef}{pop _curcolorspace}ifelse setcolorspace 4 -1 roll dup _curcolorintent eq{pop}{dup/_curcolorintent xdef SetColorRendering}ifelse 4 -1 roll 3{dup dup 6 -1roll mul exch sub 1 add exch}repeat pop setcolor}bdef/setpaintlabcolor{exchaload pop pop 5 -1 roll dup type/arraytype eq{dup/_curcolorspace xdef}{pop_curcolorspace}ifelse setcolorspace 4 -1 roll dup _curcolorintent eq{pop}{dup/_curcolorintent xdef SetColorRendering}ifelse 4 -1 roll 1 exch sub dup 4index 100 exch sub mul 5 -1 roll add 4 1 roll dup 3 index 0 exch sub mul 4 -1roll add 3 1 roll 1 index 0 exch sub mul add setcolor}bdef/setpaintdefgcolor{exch aload pop pop 6 -1 roll dup type/arraytype eq{dup/_curcolorspace xdef}{pop _curcolorspace}ifelse setcolorspace 5 -1 roll dup _curcolorintent eq{pop}{dup/_curcolorintent xdef SetColorRendering}ifelse 4{4 index mul 4 1 roll}repeat setcolor pop}bdef/k2`65{setprocesscolor}bdef/y2`65{sethificolor}bdef/l2`65{F setoverprint 1 exch sub setseparationgray pop}bdef/m2`65{pop pop}bdef/n2`65{null eq{pop pop/m2`65 load def false def}{null eq{pop/l2`65 load def}{dup _process eq{pop/k2`65 load def}{dup _spot eq{pop/j2`65 load def}{dup _rgbeq{pop/setpaintrgbcolor load def}{dup _lab eq{pop/setpaintlabcolor load def}{dup _def eq{pop/setpaintdefcolor load def}{_defg eq{/setpaintdefgcolor loaddef}{/y2`65 load def}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse true def}ifelse}bdef/r365{dup _process eq{pop findcmykprocesscolor}{dup _spot eq{popfindcmykcustomcolor}{dup _rgb eq{pop findrgbcolor}{dup _lab eq{popfindlabcolor}{dup _def eq{pop finddefcolor}{_defg eq{finddefgcolor}{findhificolor}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}bdef/SetColorRendering{systemdict/findcolorrendering known{systemdict/findcolorrendering get exec{/ColorRendering findresource systemdict/setcolorrendering get exec}{dup/DefaultColorRendering eq{pop}{/ColorRendering findresource dup == systemdict/setcolorrendering get exec}ifelse}ifelse}{pop}ifelse}bdef/_curcolorspace[]def/_curcolorintent null def/_ft null def/_fc null def/_f? false def/_fo falsedef/o2`65 null def/p2`65{}def/_fpat null def/_fpatn null def/_st null def/_scnull def/_s? false def/_so false def/q2`65 null def/r2`65{}def/Q`65 null def/P`65 null def/u2`65 null def/_trt null def/_trc null def/_tr? false def/hh`65/HonorPMTraps where{pop HonorPMTraps}{T}ifelse def/w2`65 null def/TrapStrokenull def/trMTX matrix def/_LBOmtx matrix def/_LBOgsave matrix def/_MLgsavematrix def/_x1 null def/_y1 null def/_x2 null def/_y2 null def/_rdp null def/_LLx null def/_LLy null def/_URx null def/_URy null def/_th null def/_hthknull def/_rd null def/_wp null def/_hp null def/_diam null def/_w null def/_hnull def/_dshlen null def/_rem null def/_spclen null def/_undo? false def/_dch(X)def/xfont null def/_ch null def/_spot 1 def/_process 2 def/_hifi 3 def/_paper 4 def/_registration 5 def/_rgb 6 def/_def 7 def/_defg 8 def/_lab 9 def/_ctype null def/_trctype null def/_mingray .00390625 def/@m65{moveto}bdef/@l65{lineto}bdef/@c65{curveto}bdef/@cp65{closepath}bdef/b`65{/_ctype xdef/_ftxdef dup null ne{_ctype r365}if/_fc xdef/_f?/o2`65 _ctype _fc _ft n2`65atlanta^65}bdef/atlanta^65{_f?{/p2`65{_fo setoverprint _fc _ft o2`65 _fpatnull eq{eofill}{_fpat j1`65}ifelse}def}{/p2`65{newpath}def}ifelse}bdef/c`65{/_fpatn xdef _fpatn null eq{/_fpat null def}{/_fpat _fpatn findfont def}ifelse}bdef/e`65{/_fo xdef}bdef/a`65{/_ctype xdef/_st xdef dup null ne{_ctype r365}if/_sc xdef/_s?/q2`65 _ctype _sc _st n2`65 seattle^65}bdef/seattle^65{_s?{/r2`65{_so setoverprint _sc _st q2`65 stroke}def/Q`65{_so setoverprint _sc _stq2`65 fill}def/P`65/Q`65 load def/u2`65{_so setoverprint _sc _st q2`65 show}def}{/r2`65{newpath}def/Q`65{newpath}def/P`65{newpath}def/u2`65{pop}def}ifelse}bdef/f`65{/_so xdef}bdef/h`65{/_trctype xdef/_trt xdef dup null ne{_trctyper365}if/_trc xdef/_tr?/w2`65 _trctype _trc _trt n2`65 lopez^65}bdef/lopez^65{_tr? hh`65 and{/x2`65{T setoverprint _trc _trt w2`65 stroke}def/TShowTrap{Tsetoverprint _trc _trt w2`65{currentlinewidth newpath 3 index 3 index_uPosition add 1 index 5 -1 roll add 1 index moveto lineto _uThicknesssetlinewidth strokepath setlinewidth stroke}{pop}ifelse newpath moveto/tsLSXxdef/tsWSX xdef/tsSTR(s)def gsave 0 0 moveto<20>show currentpoint pop/spwidxdef grestore{dup 32 eq{pop tsWSX spwid add 0.0 rmoveto}{currentpoint/oldyxdef/oldx xdef tsSTR 0 2 index put tsSTR false charpath currentpoint strokenewpath moveto pop}ifelse tsLSX 0 rmoveto}forall}def}{/x2`65{newpath}def/TShowTrap{7{pop}repeat}def}ifelse}bdef/@fp65{gsave p2`65 grestore}bdef/arct{arcto pop pop pop pop}ndef/EllipsePath{_LBOgsave currentmatrix pop translatescale 1 0 moveto 0 0 1 360 0 arcn closepath _LBOgsave setmatrix}bdef/RectPath{moveto 1 index 0 rlineto 0 exch rlineto neg 0 rlineto closepath}bdef/RoundRectPath{/_y2 xdef/_x2 xdef/_y1 xdef/_x1 xdef/_rdp xdef _x1 _y1 _rdp addmoveto _x1 _y2 _x2 _y2 _rdp arct _x2 _y2 _x2 _y1 _rdp arct _x2 _y1 _x1 _y1_rdp arct _x1 _y1 _x1 _y2 _rdp arct closepath}bdef/bell^65{{_LBOmtx astoreconcat}if}bdef/south^65{/_URy xdef/_URx xdef/_LLy xdef/_LLx xdef}bdef/lpd^65{_MLgsave currentmatrix pop gsave translate rotate}bdef/jp^65{grestore}bdef/jbd^65{gsave bell^65 moveto lineto setlinewidth r2`65 grestore}bdef/ald^65{gsave bell^65 samson^65 setlinewidth r2`65 grestore}bdef/ws^65{gsave bell^65xfont exch scalefont setfont F roswell^65 grestore}bdef/samson^65{translaterotate 0 0 moveto/_dshlen xdef/_rem xdef/_spclen xdef 1 1 3 -1 roll{pop_dshlen 0 rlineto _spclen _rem 0 gt{1 add/_rem _rem 1 sub def}if 0 rmoveto}for_dshlen 0 rlineto}bdef/roswell^65{gsave/_undo? xdef translate rotate _dch 0 3-1 roll put 0 moveto/_rem xdef/_spclen xdef 1 1 3 -1 roll{pop gsave _undo?{_LBOmtx setmatrix}if _dch u2`65 grestore _spclen _rem 0 gt{1 add/_rem _rem 1sub def}if 0 rmoveto}for _undo?{_LBOmtx setmatrix}if _dch u2`65 grestore}bdef/yy`65{gsave bell^65 newpath}bdef/yyq65{grestore}bdef/yy^65{/_ns xdef _ns{lineto}repeat}bdef/yQ65{/_th xdef 2 copy moveto lineto 1 setlinecap _thsetlinewidth r2`65}bdef/Qy65{dup setlinejoin 0 eq{setmiterlimit}if setlinecapsetlinewidth}bdef 8 dict begin/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-500 -500 500 500]def/Encoding 256 array def 0 1 255{Encoding exch/.nodef put}for Encoding 97/circle put/CharProcs 2 dict def CharProcs begin/.nodef{}def/circle{0 0 500 0 360 arc closepath fill}bind def end/BuildGlyph{1000 0 -500 -500 500 500 setcachedevice exch/CharProcs get exch 2 copy knownnot{pop/.nodef}if get exec}bind def/BuildChar{1 index/Encoding get exch get 1index/BuildGlyph get exec}bind def currentdict end/_xfont exch definefont/xfont exch def/_thumbStr 10 string def/_irad null def/_orad null def/_dx nulldef/_dy null def/_ld2 null def/_sz null def/_th null def/_lblsave null def/LFont null def/T`65{gsave 0.05 0.05 scale translate 2 copy 2 copy 8 -2 rolldup 3 -1 roll{neg}if exch RectPath .5 setseparationgray fill 0 0 RectPathgsave 1 setseparationgray fill grestore 0 setseparationgray 20 setlinewidthstroke/Helvetica findfont 180 scalefont setfont 100 add 100 exch moveto pop_thumbStr cvs show grestore}bdef/q3`65{_th _orad sub dup _dx _dy EllipsePathstroke _dx _ld2 sub _dy moveto _dx _ld2 add _dy lineto stroke _dx _dy _ld2 submoveto _dx _dy _ld2 add lineto stroke}bdef/V`65{/_irad xdef/_orad xdef/_dyxdef/_dx xdef/_th xdef/_ld2 xdef/_hthk 2.5 wcu^65 round dup 2 le{pop 2}if defgsave 0 setlinecap 1 setseparationgray _th _hthk 2 mul add setlinewidth q3`65_hthk _irad add dup _dx _dy EllipsePath fill 0 setseparationgray _thsetlinewidth q3`65 _irad dup _dx _dy EllipsePath fill 1 setseparationgray _dx_irad sub _dy moveto _dx _irad add _dy lineto stroke _dx _dy _irad sub moveto_dx _dy _irad add lineto stroke grestore}bdef/f1a`65{1 exch sub 0 0 0setcmykcolor}bdef/f1b`65{1 exch sub 0 exch 0 0 setcmykcolor}bdef/f1c`65{1 exchsub 0 0 3 -1 roll 0 setcmykcolor}bdef/f1d`65{1 exch sub 0 0 0 4 -1 rollsetcmykcolor}bdef/f1e`65{setseparationgray}bdef/W`65{gsave F setoverprint/_dyxdef/_dx xdef/_sz xdef/_th xdef _dx _dy translate{-90 rotate}if/XPaint exchldef 0.35 XPaint 11 _sz mul _sz 0 0 RectPath fill/_dx _th def/_sz _sz 2 _thmul sub def 0 1 10{10 div XPaint _sz dup _dx _th RectPath fill/_dx _dx _sz 2_th mul add add def}for grestore}bdef/calBarArray[0 0 1 0 0 1 0 0 1 0 0 0 1 10 0 1 0 1 0 0 1 1 0 0 0 0 1 0 0 .5 0 0 .5 0 0 .5 0 0 0 0 0 0 .5]def/X`65{gsave/_dy xdef/_dx xdef/_sz xdef/_th xdef _dx _dy translate{-90 rotate}if 0.35setseparationgray 11 _sz mul _sz 0 0 RectPath fill/_dx _th def/_sz _sz 2 _thmul sub def currentoverprint false setoverprint 0 1 10{calBarArray exch 4 mul4 getinterval aload pop setcmykcolor _sz dup _dx _th RectPath fill/_dx _dx _sz2 _th mul add add def}for setoverprint grestore}bdef/pw$65{gsave/_hthk 2.5wcu^65 round dup 2 le{pop 2}if def 5 copy 1 setseparationgray 0 setlinecapmoveto rlineto _hthk 2 mul add setlinewidth stroke 0 setseparationgray movetorlineto setlinewidth stroke grestore}bdef/Y`65{/_lblsave save def[exch 0 0 2index neg 0 0]LFont exch makefont setfont}bdef/a1`65{level2{[/Separation(All)/DeviceCMYK{dup dup dup}]setcolorspace 1 setcolor}{0 setseparationgray}ifelsemoveto show}bdef/a1a`65{level2{2 index(Cyan)eq{1 0 0 0 setcmykcolor}{2 index(\Magenta)eq{0 1 0 0 setcmykcolor}{2 index(Yellow)eq{0 0 1 0 setcmykcolor}{2index(Black)eq{0 0 0 1 setcmykcolor}{[/Separation 4 index/DeviceCMYK{dup dupdup}]setcolorspace 1 setcolor true setoverprint}ifelse}ifelse}ifelse}ifelsemoveto show}{3{pop}repeat}ifelse}bdef/Z`65{_lblsave restore}bdef/f1`65{/LFont/|_______Helvetica T/Helvetica aldus^65 def}bdef/_xbft null def/_xbfc null def/_xbx? F def/XPaint null def/XFill null def/XStroke null def/b1`65{gsavebell^65 south^65/_th xdef currentoverprint T setoverprint}bdef/d1`65{setoverprint grestore}bdef/c1`65{XBoxColor XBoxDraw}bdef/XBoxDraw{_URx _LLxsub abs _th sub _URy _LLy sub abs _th sub _LLx _th 2 div add _LLy _th 2 divadd 4 copy RectPath gsave XFill grestore _th setlinewidth XStroke 4 copymoveto rlineto exch 3 index add exch moveto exch neg exch rlineto XStroke}bdef/XBoxColor{/_ctype xdef/_xbft xdef dup null ne{_ctype r365}if/_xbfc xdef/_xbx?/XPaint _ctype _xbfc _xbft n2`65 psquare^65}bdef/psquare^65{_xbx?{/XFill{_xbfc0 XPaint fill}def/XStroke{_xbfc 1 XPaint stroke}def}{/XFill{newpath}def/XStroke{newpath}def}ifelse}bdef/e1`65{/__$jk where{pop/junk save def bell^65south^65/_th xdef _URx _LLx sub abs _th sub _URy _LLy sub abs _th sub _LLx _th2 div add _LLy _th 2 div add RectPath gsave .9 setseparationgray fill grestore0 setseparationgray _th setlinewidth stroke _LLx _LLy _URy add 2 div moveto/Helvetica findfont[180 180 J2`65 neg 0 0 3 -1 roll 0 0]makefont setfont showjunk restore}{{6{pop}repeat}if 6{pop}repeat}ifelse}bdef/s`65{gsave clippath 1setseparationgray fill grestore}bdef/r`65{PSScreen exch pop exch pop dup type/dicttype eq{dup/HalftoneType get 1 eq{begin/Angle exch def/Frequency exch def60 0 currentdict end}if}if}bdef/t`65{{1 exch sub}}bdef/PPDSetup{countdictstackmark}bdef/PPDCleanup{stopped cleartomark countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bdef/AskFont{save/sv exch def/str(fonts/                \                                       )def/st2 128 string def st2 cvs dupFontDirectory exch known{pop(Y R)}{/filenameforall where{pop str exch st2 cvsdup length/len exch def 6 exch putinterval str 0 len 6 add getinterval markexch{}st2 filenameforall counttomark 0 gt{cleartomark(Y H)}{cleartomark(NnN)}ifelse}{pop(NnN)}ifelse}ifelse = flush sv restore}bdef/AskFreeVM{vmstatus exchsub == pop flush}bdef/AskSpooler{0 == flush}bdef/_PATgsave matrix def/_PATmtxmatrix def/gl^65{7 dict begin/FontDict 9 dict def FontDict begin/cache exchdef/key exch def/proc exch cvx def/mtx exch matrix invertmatrix def/heightexch def/width exch def/ctm matrix currentmatrix def/ptm matrix identmatrixdef/str(12345678901234567890123456789012)def end/FontBBox[0 0 FontDict/widthget FontDict/height get]def/FontMatrix FontDict/mtx get def/EncodingStandardEncoding def/FontType 3 def/BuildChar{pop begin FontDict begin width 0cache{0 0 width height setcachedevice}{setcharwidth}ifelse 0 0 moveto width 0lineto width height lineto 0 height lineto closepath clip newpath gsave procgrestore end end}def FontDict/key get currentdict definefont end}bdef/hj^65{dup type/dicttype eq{begin FontDict/ctm get setmatrix}{exch begin FontDict/ctmget setmatrix concat}ifelse currentdict setfont FontDict begin FontMatrixconcat width 0 dtransform round width div exch round width div exch 0 heightdtransform round height div exch round height div exch 0 0 transform roundexch round exch ptm astore setmatrix pathbbox height div ceiling height mul 41 roll width div ceiling width mul 4 1 roll height div floor height mul 4 1roll width div floor width mul 4 1 roll 2 index sub height div ceiling cviexch 3 index sub width div ceiling cvi exch 4 2 roll moveto FontMatrix ptminvertmatrix pop{gsave ptm concat dup str length idiv{str show}repeat dup strlength mod str exch 0 exch getinterval show grestore 0 height rmoveto}repeatpop end end}bdef/i1`65{gsave clip hj^65 grestore newpath}bdef/j1`65{gsave 0 00 0 setcmykcolor fill grestore i1`65}bdef/k1`65{_PATgsave currentmatrix pop_PATmtx defaultmatrix setmatrix rotate 3.36 3.36[1 0 0 -1 0 0]{2 setlinecap 01.68 moveto 1.68 0 lineto 1.68 3.36 moveto 3.36 1.68 lineto 0.675 setlinewidthstroke}/l1`65 true gl^65 pop 5.28 5.28[1 0 0 -1 0 0]{2 setlinecap 0 2.64moveto 2.64 0 lineto 2.64 5.28 moveto 5.28 2.64 lineto 0.675 setlinewidthstroke}/m1`65 true gl^65 pop 3.84 3.84[1 0 0 -1 0 0]{2 setlinecap 0 1.92moveto 3.84 1.92 lineto 0.675 setlinewidth stroke}/n1`65 true gl^65 pop 7.687.68[1 0 0 -1 0 0]{2 setlinecap 0 3.84 moveto 7.68 3.84 lineto 0.675setlinewidth stroke}/o1`65 true gl^65 pop 3.84 3.84[1 0 0 -1 0 0]{2 setlinecap1.92 0 moveto 1.92 3.84 lineto 0.675 setlinewidth stroke}/p1`65 true gl^65 pop7.68 7.68[1 0 0 -1 0 0]{2 setlinecap 3.84 0 moveto 3.84 7.68 lineto 0.675setlinewidth stroke}/q1`65 true gl^65 pop 3.84 3.84[1 0 0 -1 0 0]{2 setlinecap1.92 0 moveto 1.92 3.84 lineto 0 1.92 moveto 3.84 1.92 lineto 0.675setlinewidth stroke}/r1`65 true gl^65 pop 7.68 7.68[1 0 0 -1 0 0]{2 setlinecap3.84 0 moveto 3.84 7.68 lineto 0 3.84 moveto 7.68 3.84 lineto 0.675setlinewidth stroke}/s1`65 true gl^65 pop _PATgsave setmatrix}bdef/_OutlineSmearFrac 10 def/_OutlineWeight 0.012 def/_OutlineFillColorCMYK 0 0 01()findcmykprocesscolor def/_OutlineFillColorRGB 0 0 0()findrgbcolor def/_OutlineFillColorLab{[/CIEBasedABC 3 dict dup begin/RangeABC[0 1 0 1 0 1]def/RangeLMN[0 1 0 1 0 1]def/WhitePoint[1 1 1]def end]/Perceptual 0 0 0()findlabcolor}def/_ShadowReverseColorCMYK 0 0 0 1()findcmykprocesscolor def/_ShadowReverseColorRGB 0 0 0()findrgbcolor def/_ShadowReverseColorLab{[/CIEBasedABC 3 dict dup begin/RangeABC[0 1 0 1 0 1]def/RangeLMN[0 1 0 1 0 1]def/WhitePoint[1 1 1]def end]/Perceptual 0 0 0()findlabcolor}def/_BoldFactorX0.015 def/_BoldFactorY 0.015 def/_ShadowFactorX 0.06 def/_ShadowFactorY 0.06def/_ObliqueFactor -0.21 def/_ShadowTintFactor 0.2 def/_BFontUOThick 1 0/Helvetica findfont/FontMatrix get dtransform dup mul exch dup mul add sqrt_OutlineWeight mul def/_TXmtx matrix def/_TXctmx matrix def/_txgsave matrixdef/_BaseMatrix[1 0 0 -1 0 0]def/_ItalicMatrix[1 0 _ObliqueFactor 1 0 0]def/tempDict null def userdict/FCDict userdict put/isWinPS false def/_xSize 12def/_ySize 12 def/_dots 1440 def/_fDict null def/_uScale null def/_uPositionnull def/_uThickness null def/_uOThickness null def/_dUPosition -100 def/_dUThickness 50 def/_dFontScale -0.001 def/_runLen null def/_txc null def/_txt null def/_txo F def/_tx? F def/_ctc null def/_ctt null def/_cto F def/_cPaint null def/_outxc null def/_outxt null def/_outxo T def/_shdc null def/_shdt null def/_shdo T def/K2`65 null def/k3`65 null def/m3`65 null def/j3`65null def/l3`65 null def/FTextPaint null def/STextPaint null def/_gMTX matrixdef/macvec 256 array def macvec dup dup 0/Times-Roman findfont/Encoding get 0128 getinterval putinterval 39/quotesingle put 96/grave put/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron macvec128 128 getinterval astore pop/winvec 256 array def winvec dup dup 0/Times-Roman findfont/Encoding get 0 128 getinterval putinterval 39/quotesingle put 96/grave put/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi winvec 014 getinterval astore pop/bullet/bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark/scaron/guilsinglright/oe/bullet/bullet/Ydieresis/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresiswinvec 127 129 getinterval astore pop/M1`65{{_TXmtx astore concat}if _TXctmxcurrentmatrix pop}bdef/N1`65{_txgsave currentmatrix pop}bdef/O1`65{_txgsavesetmatrix}bdef/NN2`65{_LBOgsave currentmatrix pop O1`65 gsave}bdef/NN3`65{eoclip newpath _LBOgsave setmatrix}bdef/P1`65{O1`65}bdef/Q1`65{_TXctmxsetmatrix}bdef/v1`65{userdict begin dict/FCDict exch def end}bdef/fontdef{FCDict 3 1 roll put}bdef/fontget{FCDict exch get}bdef/x1`65{aldus^65_BaseMatrix makefont fontdef}bdef/p3`65{dup length 1 add dict/tempDict exchdef{1 index/FID ne 2 index/UniqueID ne and{tempDict 3 1 roll put}{pop pop}ifelse}forall tempDict}bdef/aldus^65{findfont exch isWinPS{pop dup/Encodingget dup 161 get exch 162 get/cent eq exch/exclamdown eq and}if{p3`65 dup/Encoding isWinPS{winvec}{macvec}ifelse put definefont}{exch pop}ifelse}bdef/I1`65{findfont p3`65 dup/Encoding get 256 array copy dup dup 3 index/Encoding3 2 roll put}bdef/J1`65{put dup}bdef/K1`65{pop pop definefont _BaseMatrixmakefont fontdef}bdef/y1`65{gsi^65 fontdef}bdef/z1`65{fontget _ItalicMatrixmakefont fontdef}bdef/gsi^65{fontget dup maxlength 2 add dict/tempDict exchdef{1 index/FID ne 2 index/UniqueID ne and{tempDict 3 1 roll put}{pop pop}ifelse}forall tempDict begin/PaintType 2 def/StrokeWidth 1 0 FontMatrixdtransform dup mul exch dup mul add sqrt _OutlineWeight exch div def endtempDict definefont}bdef/auckland^65{/_ySize xdef/_xSize xdef fontget[_xSize 00 _ySize 0 0]makefont setfont}bdef/wcu^65{_dots mul}bdef/n`65{1440 div/_dotsxdef}bdef/J2`65{wcu^65 exch wcu^65 exch}bdef/w1`65{J2`65 auckland^65}bdef/K2`65{}bdef/A1`65{isWinPS{O2`65}{pop pop pop}ifelse 5 3 roll K2`65}bdef/K3`65{3 index 10 2 roll isWinPS{O2`65}{pop pop pop}ifelse 5 3 roll 7 -2 roll exchTShowTrap}bdef/L2`65{/_x1 _xSize _BoldFactorX mul def/_y1 _ySize _BoldFactorYmul def 5 copy _y1 add exch _x1 add exch K2`65 5 copy _y1 add exch _x1 subexch K2`65 5 copy _y1 sub exch _x1 add exch K2`65 5 copy _y1 sub exch _x1 subexch K2`65 K2`65}bdef/B1`65{O2`65 5 3 roll L2`65}bdef/C1`65{O2`65 6 3 roll 6copy U2`65 3 1 roll _ySize _ShadowFactorY mul add exch _xSize _ShadowFactorXmul add exch 3 -1 roll{L2`65}{K2`65}ifelse V2`65{L2`65}{K2`65}ifelse}bdef/D1`65{O2`65 5 3 roll gsave 6 index not{7 index _xSize _ySize auckland^65}if 5copy _ySize _ShadowFactorY mul add exch _xSize _ShadowFactorX mul add exch 11-1 roll{L2`65}{K2`65}ifelse grestore 6 -1 roll{M2`65}{6 -1 roll N2`65}ifelse}bdef/M2`65{/_x1 _OutlineSmearFrac wcu^65 def/_y1 _OutlineSmearFrac wcu^65 def5 copy _y1 neg add exch _x1 neg add exch K2`65 5 copy _y1 neg add exch _x1 addexch K2`65 5 copy _y1 add exch _x1 neg add exch K2`65 5 copy _y1 add exch _x1add exch K2`65 m3`65}bdef/E1`65{O2`65 5 3 roll M2`65}bdef/N2`65{gsave _xSize_ySize auckland^65 5 copy m3`65 grestore K2`65}bdef/F1`65{O2`65 6 3 roll N2`65}bdef version cvr 47.0 ge{/strwth{stringwidth pop}bdef}{/strwth{gsave newpath0 0 moveto 0 0 lineto closepath clip stringwidth grestore pop}bdef}ifelse/O2`65{dup 0 gt{dup 4 1 roll 4 index mul exch 5 index mul add 5 index strwthadd sub exch div add}{pop pop pop}ifelse}bdef/G1`65{fontget/_fDict xdef wcu^65_fDict/FontInfo known{isWinPS _fDict/FontType get 3 eq and{_dFontScale}{_fDict/FontMatrix get 3 get}ifelse mul/_uScale xdef _fDict/FontInfo get dup/UnderlinePosition known{dup/UnderlinePosition get _uScale mul/_uPosition xdef}{/_uPosition _dUPosition _uScale mul def}ifelse dup/UnderlineThickness known{dup/UnderlineThickness get _uScale mul/_uThickness xdef}{/_uThickness_dUThickness _uScale mul def}ifelse pop}{_dFontScale mul/_uScale xdef/_uPosition _dUPosition _uScale mul def/_uThickness _dUThickness _uScale muldef}ifelse/_uOThickness _BFontUOThick _uScale mul def _fDict/PaintType known{_fDict/PaintType get 2 eq{_fDict/StrokeWidth known{/_uOThickness _fDict/StrokeWidth get _uScale mul def}{1 0 _fDict/FontMatrix get dtransform dup mulexch dup mul add sqrt _OutlineWeight mul _uScale mul/_uOThickness xdef}ifelse}if}if}bdef/H1`65{gsave/_runLen xdef/_y1 xdef/_x1 xdef/_y1 _y1 _uPosition adddef{dup not{U2`65}if/_y2 _ySize _ShadowFactorY mul _y1 add def/_x2 _xSize_ShadowFactorX mul _x1 add def _uThickness _x2 _y2 _x2 _runLen add _y2 P2`65dup not{V2`65}if}if{_uOThickness _x1 _y1 _uThickness 2 div add _x1 _runLen add_y1 _uThickness 2 div sub Q2`65}{_uThickness _x1 _y1 _x1 _runLen add _y1 P2`65}ifelse grestore}bdef/mm$65{gsave _ySize 3 div sub/_y1 xdef _y1 _y1 3 1 roll_ySize 16 div 5 1 roll P2`65 grestore}bdef/P2`65{gsave moveto linetosetlinewidth k3`65 grestore}bdef/Q2`65{gsave south^65/_th xdef _URx _LLx subabs _th sub _URy _LLy sub abs _th sub _LLx _th 2 div add _LLy _th 2 div addRectPath gsave j3`65 grestore _th setlinewidth k3`65 grestore}bdef/d`65{/_ctype xdef/_txt xdef dup null ne{_ctype r365}if/_txc xdef SetOutColorSetShadColor/_tx?/l3`65 _ctype _txc _txt n2`65 S2`65}bdef/s365{dup _hifi eq{pop dup length 0 3 1 roll 0 1 3 -1 roll 1 sub{exch dup 3 -1 roll get dup type/arraytype eq exch dup type/packedarraytype eq 3 -1 roll or{1 get 3 -1 rolladd exch}{pop}ifelse}for pop}{dup _lab eq{pop aload pop pop 5 -2 roll pop popabs 1 le exch abs 1 le 3 -1 roll 100 exch sub .392159 le and and{0}{_mingray 1add}ifelse}{dup dup _rgb eq exch _def eq or{_def eq{aload pop pop 5 -2 rollpop pop}{aload pop pop}ifelse 3{1 exch sub 3 1 roll}repeat}{_defg eq{aload poppop 6 -2 roll pop pop}{aload pop pop}ifelse add add add}ifelse}ifelse}ifelse_mingray le}bdef/SetOutColor{_txt null eq{/_outxc null def/_outxt null def}{_txc null eq{_txt 0 eq{/_outxt 1 def _ctype _paper eq{/_outxc_OutlineFillColorCMYK def}{/_outxc null def}ifelse}{/_outxt 0 def/_outxc nulldef}ifelse}{_txc _ctype s365{/_outxt 1 def/_outxc _ctype _rgb eq _ctype _defeq or{_OutlineFillColorRGB}{_ctype _lab eq{_OutlineFillColorLab}{_OutlineFillColorCMYK}ifelse def}ifelse}{/_outxt 0 def/_outxc null def}ifelse}ifelse}ifelse/_cjc?/FTextPaint _ctype _outxc _outxt n2`65}bdef/SetShadColor{_txt null eq{/_shdc null def/_shdt null def}{/_shdo _txo def _txc null eq{_txt0 eq{/_shdt 1 def}{/_shdt T2`65 def}ifelse _ctype _paper eq{/_shdc_ShadowReverseColorCMYK def/_shdo T def}{/_shdc null def}ifelse}{_txc _ctypes365{/_shdt 1 def/_shdc _ctype _rgb eq _ctype _def eq or{_ShadowReverseColorRGB}{_ctype _lab eq{_ShadowReverseColorLab}{_ShadowReverseColorCMYK}ifelse}ifelse def/_shdo T def}{/_shdt T2`65 def/_shdc_txc def}ifelse}ifelse}ifelse/_cjc?/STextPaint _ctype _shdc _shdt n2`65}bdef/S2`65{_tx?{/K2`65{_txo setoverprint _txc _txt l3`65 moveto 0 4 2 roll 0 32 63 roll awidthshow}def/k3`65{_txo setoverprint _txc _txt l3`65 stroke}def/m3`65{_outxo setoverprint _outxc _outxt FTextPaint moveto 0 4 2 roll 0 32 6 3 rollawidthshow}def/j3`65{_outxo setoverprint _outxc _outxt FTextPaint fill}def}{/K2`65{5{pop}repeat}def/k3`65{newpath}def/m3`65{5{pop}repeat}def/j3`65{newpath}def}ifelse}bdef/T2`65{_txt _ShadowTintFactor mul}bdef/U2`65{/_ctc _txc def/_ctt _txt def/_cto _txo def/_cPaint/l3`65 ldef/_txc _shdc def/_txt _shdt def/_txo _shdo def/l3`65/STextPaint ldef}bdef/V2`65{/_txc _ctc def/_txt _ctt def/_txo _cto def/l3`65/_cPaint ldef}bdef/g`65{/_txo xdef}bdef/SaveHook{}ndef/RestoreHook{}ndef/W2`65{SaveHook _dots _LPmtx aload _PSdef aload _WCmtx aload_txgsave aload _TXctmx aload _gMTX currentmatrix aload}bdef/X2`65{astoresetmatrix astore pop astore pop astore pop astore pop astore pop/_dots xdefRestoreHook}bdef/bmt^65{save def}bdef/tsi^65{mark W2`65 counttomark 2 add -2roll pop restore X2`65 o`65}bdef/seni^65{restore}bdef/o`65{/_fo F def/_so Fdef/_txo F def}bdef/_GRPHmtx matrix def/_imagesave null def/_imc null def/_imtnull def/ImPaint null def/cjc^65{/_imagesave save def _WCmtx setmatrix}bdef/tvs^65{_PSdef setmatrix}bdef/dsd^65{_imagesave restore}bdef/espresso 4 dictdef espresso begin/setgray{setgray}def/setcmykcolor{setcmykcolor}def/setrgbcolor{setrgbcolor}def/sethsbcolor{sethsbcolor}def end/o3`65{espressobegin userdict begin}bdef/vm$65{/OSdict xdef end end end}bdef/b2a`65{/_imagesave save def{_GRPHmtx astore concat}if translate dup scale newpath 0 0RectPath clip newpath userdict begin/showpage{}def 0 setgray 0 setlinecap 1setlinewidth 0 setlinejoin 10 setmiterlimit[]0 setdash newpath F setoverprintmark}bdef/a2`65{OSdict begin}bdef/b2`65{end V1`65}bdef/kHu$65{/_imagesave savedef{_GRPHmtx astore concat}if translate scale translate newpath RectPath clipnewpath userdict begin/showpage{}def 0 setgray 0 setlinecap 1 setlinewidth 0setlinejoin 10 setmiterlimit[]0 setdash newpath F setoverprint mark}bdef/V1`65{cleartomark end _imagesave restore}bdef/_ortnt null def/_orclr null def/_gopfalse def/_cjc? false def/*setcmyk null def/*setrgb null def/*sethsb null def/*setgry null def/*setsepgray null def/*setcustomclr null def/*setprocessclrnull def/*sethificlr null def/*setop null def/*zimage null def/*zcustomcolorimage null def/*ztintedcolorimage null def/*zhificolorimage nulldef/$gate_1 T def/$clrOverride F def/Y2`65{P65PS begin/*setcmyk/setcmykcolorldef/*setrgb/setrgbcolor ldef/*sethsb/sethsbcolor ldef/*setgry/setgray ldef/*setcustomclr/setcustomcolor ldef/*setprocessclr/setprocesscolor ldef/*sethificlr/sethificolor ldef/*setop/setoverprint ldef/*setsepgray/setseparationgray ldef/*zimage/image ldef/*zcustomcolorimage/customcolorimageldef/*ztintedcolorimage/tintedcolorimage ldef/*zhificolorimage/hificolorimageldef end}bdef/X1`65{P65PS begin/setcmykcolor/*setcmyk ldef/setrgbcolor/*setrgbldef/sethsbcolor/*sethsb ldef/setgray/*setgry ldef/setcustomcolor/*setcustomclr ldef/setprocesscolor/*setprocessclr ldef/sethificolor/*sethificlr ldef/setoverprint/*setop ldef/setseparationgray/*setsepgray ldef/image/*zimage ldef/customcolorimage/*zcustomcolorimage ldef/tintedcolorimage/*ztintedcolorimage ldef/hificolorimage/*zhificolorimage ldef end}bdef/GrayORImage{_orclr null eq{_ortnt tintedseparationimage}{_orclr _ctype _hifieq{hificolorimage}{_ortnt tintedcolorimage}ifelse}ifelse}bdef/CMYKtoORtint{$setcmyk 1 $curgry sub _ortnt mul/_ortnt xdef}bdef/$curgry systemdict/currentgray get def/$setrgb systemdict/setrgbcolor get def/$sethsb systemdict/sethsbcolor get def/$setcmyk systemdict/setcmykcolor known{systemdict/setcmykcolor get}{{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1roll}repeat systemdict/setrgbcolor get exec pop}}ifelse def/a3`65{P65PS begin/setcmykcolor{gsave $setcmyk 1 $curgry sub grestore c3`65}def/setrgbcolor{gsave $setrgb 1 $curgry sub grestore c3`65}def/sethsbcolor{gsave $sethsb 1$curgry sub grestore c3`65}def/setgray{1 exch sub c3`65}def/setseparationgray{1 exch sub c3`65}def _spotOR?{/setcustomcolor/i3`65 ldef}{/setcustomcolor/b3`65 ldef}ifelse/setprocesscolor{gsave exch aload pop pop 4{4 index mul 4 1roll}repeat $setcmyk pop 1 $curgry sub grestore c3`65}def/sethificolor{gsaveexch aload length 4 sub{pop}repeat 4{4 index mul 4 1 roll}repeat $setcmyk pop1 $curgry sub grestore c3`65}def/setoverprint{d3`65}def/image{ORimage}def/customcolorimage{ORcustomcolorimage}def/tintedcolorimage{ORtintedcolorimage}def/hificolorimage{ORhificolorimage}def end}bdef/b3`65{gsave exch aload poppop 4{4 index mul 4 1 roll}repeat $setcmyk pop 1 $curgry sub grestore c3`65}bdef/c3`65{$gate_1 $clrOverride and{P65PS begin/$gate_1 F def _ortnt null ne{_ortnt mul}{null}ifelse _orclr exch X1`65 SetORColorProc a3`65/$gate_1 T defend}{P65PS begin $MetalHead begin c3`65 end end}ifelse}bdef/d3`65{$gate_1$clrOverride and{P65PS begin/$gate_1 F def pop _gop X1`65 setoverprint a3`65/$gate_1 T def end}{P65PS begin $MetalHead begin setoverprint end end}ifelse}bdef/ORimage{$gate_1 $clrOverride and{P65PS begin/$gate_1 F def X1`65 dup type/dicttype eq{dup/Decode get length 2 eq currentcolorspace dup 0 get/Indexed eq{1 get/DeviceGray eq}{pop true}ifelse and{GrayORImage}{image}ifelse}{GrayORImage}ifelse a3`65/$gate_1 T def end}{P65PS begin $MetalHead begin imageend end}ifelse}bdef/ORcustomcolorimage{$gate_1 $clrOverride and{P65PS begin/$gate_1 F def X1`65 aload pop pop CMYKtoORtint GrayORImage a3`65/$gate_1 Tdef end}{P65PS begin $MetalHead begin customcolorimage end end}ifelse}bdef/ORtintedcolorimage{$gate_1 $clrOverride and{P65PS begin/$gate_1 F def X1`65exch aload pop pop 4{4 index mul 4 1 roll}repeat CMYKtoORtint pop GrayORImagea3`65/$gate_1 T def end}{P65PS begin $MetalHead begin tintedcolorimage end end}ifelse}bdef/ORhificolorimage{$gate_1 $clrOverride and{P65PS begin/$gate_1 Fdef X1`65 aload pop pop{dup type dup/arraytype ne exch/packedarraytype ne and{exit}{pop}ifelse}loop CMYKtoORtint GrayORImage a3`65/$gate_1 T def end}{P65PSbegin $MetalHead begin hificolorimage end end}ifelse}bdef/W1`65{P65PS begin/_ctype xdef/_ortnt xdef dup null ne{_ctype r365}if/_orclr xdef/_cjc?/SetORColorProc _ctype _orclr _ortnt n2`65 false setoverprint/_gop false def/_spotOR? F def Y2`65 a3`65/$clrOverride T def end}bdef/Y1`65{P65PS begin/_gopxdef _gop setoverprint end}bdef/*findcmykcustomclr null def/*newcmykcustomclrnull def/epsdict null def/typedict null def/*$setcustomclr null def/_spotOR? Fdef/$spotOverride F def/$gate_2 T def/clrAdjust? F def/_fhbool F def/f2`65{P65PS begin dup dict/epsdict xdef dict/typedict xdef/clrAdjust? T def end}bdef/g2`65{/_ctype xdef cvn _ctype _hifi eq{3 index 2 mul 8 add}{7}ifelse 1 roll_ctype exch 2 MakeReadOnlyArray 1 index cvn exch typedict 3 1 roll put _ctype_hifi eq{findhificolor}if _ctype _spot eq{findcmykcustomcolor}if _ctype_process eq{findcmykprocesscolor}if epsdict 3 1 roll put}bdef/h2`65{_registration exch 2 array astore exch cvn exch typedict 3 1 roll put}bdef/i2`65{P65PS begin clrAdjust?{/_spotOR? T def e3`65 g3`65/$spotOverride T def}if end}bdef/e3`65{P65PS begin/*findcmykcustomclr/findcmykcustomcolor ldef/*newcmykcustomclr/newcmykcustomcolor ldef/*$setcustomclr/setcustomcolor ldefend}bdef/f3`65{P65PS begin/findcmykcustomcolor/*findcmykcustomclr ldef/newcmykcustomcolor/*newcmykcustomclr ldef/setcustomcolor/*$setcustomclr ldefend}bdef/g3`65{P65PS begin/findcmykcustomcolor/h3`65 ldef/newcmykcustomcolor/n3`65 ldef/setcustomcolor/i3`65 ldef end}bdef/h3`65{$gate_2 $spotOverride and{P65PS begin/$gate_2 F def f3`65 dup cvn epsdict exch known{5 1 roll 4{pop}repeat cvn epsdict exch get}{findcmykcustomcolor}ifelse g3`65/$gate_2 T defend}{P65PS begin $MetalHead begin findcmykcustomcolor end end}ifelse}bdef/n3`65{$gate_2 $spotOverride and{P65PS begin/$gate_2 F def/_fhbool xdef dupcvn epsdict exch known{5 1 roll 4{pop}repeat cvn epsdict exch get aload pop}ifdup cvn typedict exch known{dup cvn typedict exch get aload pop pop _hifi eq{{1 index type dup/arraytype eq exch/packedarraytype eq or{exch pop}{exit}ifelse}loop}if}if _fhbool f3`65 newcmykcustomcolor g3`65/$gate_2 T def end}{P65PSbegin $MetalHead begin newcmykcustomcolor end end}ifelse}bdef/i3`65{$gate_2$spotOverride and{P65PS begin/$gate_2 F def 1 index dup length 1 sub get cvndup typedict exch known{typedict exch get aload pop 1 index _registration eq{exch pop mul 1 exch sub exch pop f3`65 setseparationgray g3`65}{1 index_process eq{f3`65 exch pop mul setprocesscolor g3`65}{1 index _spot eq{f3`65exch pop mul setcustomcolor g3`65}{exch _hifi eq{f3`65 mul sethificolor g3`65}if}ifelse}ifelse}ifelse}{pop f3`65 setcustomcolor g3`65}ifelse/$gate_2 T defend}{P65PS begin $MetalHead begin setcustomcolor end end}ifelse}bdef/BMT 2dict def BMT begin/*def/def load def/def{1 index/fcheckload eq{pop{pop pop}}if*def}bdef end/t1`65{BMT begin userdict begin}bdef/u1`65{end end}bdef/u1a`65{findfont pop}bdef end/setpacking where{pop setpacking}if%%EndResource%%BeginResource: procset P65IMAGE_PS 1.0 1%%Copyright: (C) Copyright 1993,1995 Adobe Systems, Inc. All Rights Reserved.%%Version:1.0 1/AdobeIMLIBDict_5.0.00 112 dict def AdobeIMLIBDict_5.0.00 begin/_proc1 nulldef/_proc2 null def/_newproc null def/_curxfer{}def/_imcmykdarkness 0 def/_ic0 def/_im 0 def/_iy 0 def/_ik 0 def/_ir 0 def/_ig 0 def/_ib 0 def/_iL 0 def/_iA 0 def/_iB 0 def/_cproc null def/_mproc null def/_yproc null def/_kprocnull def/_rproc null def/_gproc null def/_bproc null def/_mbuf()def/_ybuf()def/_kbuf()def/_gbuf()def/_bbuf()def/_tint -1 def/_ix 0 def/_len 0 def/_cname()def/_ctype null def/_aldimtint 1 def/_localxfer{}def/_spot 1 def/_process 2def/_hifi 3 def/_paper 4 def/_registration 5 def/_rgb 6 def/_def 7 def/_defg 8def/_lab 9 def/bdef{bind def}bind def/xdef{exch def}def/IMndef{1 index where{pop pop pop}{def}ifelse}bdef/_imagemask/imagemask load dup type/arraytype eq{bdef}{def}ifelse/_image systemdict/image get def/_settransfer systemdict/settransfer get def/_currenttransfer systemdict/currenttransfer get def/iA^65{/packedarray where{pop packedarray}{array astore readonly}ifelse}bdef/iB^65{/packedarray where{pop dup type/packedarraytype eq 2 index type/packedarraytype eq or}{false}ifelse{/_proc2 exch cvlit def/_proc1 exch cvlitdef _proc1 aload pop _proc2 aload pop _proc1 length _proc2 length addpackedarray cvx}{/_proc2 exch cvlit def/_proc1 exch cvlit def/_newproc _proc1length _proc2 length add array def _newproc 0 _proc1 putinterval _newproc_proc1 length _proc2 putinterval _newproc cvx}ifelse}bdef/iC^65{aload pop/_ikxdef/_iy xdef/_im xdef/_ic xdef}bdef/iAP^65{aload pop/_ib xdef/_ig xdef/_irxdef}bdef/iAQ^65{aload pop/_iL xdef/_iA xdef/_iB xdef}bdef/iD^65{_ic .3 mul_im .59 mul _iy .11 mul _ik add add add dup 1 gt{pop 1}if/_imcmykdarkness xdef}def/level2/languagelevel where{pop languagelevel 1 ne}{false}ifelse def/hascolor/deviceinfo where{pop deviceinfo/Colors known{deviceinfo/Colors getexec 1 gt}{false}ifelse}{/statusdict where{pop statusdict/processcolors known{statusdict/processcolors get exec 1 gt}{false}ifelse}{false}ifelse}ifelse def/iG^65{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1roll put}for}bdef/iO^65{gsave newpath setgray 0 0 moveto 0 1 lineto 1 1 lineto1 0 lineto closepath fill grestore}def/IMapplytint{/_tint xdef aload length/_len xdef/_ix _len def _len 1 sub{_ix -1 roll _tint mul _len 4 eq{_tint sub 1add}if _ix 1 roll/_ix _ix 1 sub def}repeat _len iA^65}def/IMmakeimagedict{level2{7 dict begin/ImageType 1 def/Decode xdef/DataSource xdef/ImageMatrixxdef/BitsPerComponent xdef/Height xdef/Width xdef currentdict end}{6{pop}repeat}ifelse}def/IMmodifyHalftoneXferAll{level2{currenthalftone dup lengthdict copy begin currentdict{dup type/dicttype eq{dup length dict copy begincurrentdict/TransferFunction known{/TransferFunction load 2 index exch iB^65/TransferFunction xdef}if currentdict end def}{pop pop}ifelse}forallcurrentdict end sethalftone pop}{pop}ifelse}bdef/IMapplytinttostackcolor{dup_hifi eq{pop/_cname xdef/_ninks xdef/_depth _ninks 2 mul def _ninks{_aldimtintmul _depth 1 roll _depth 1 roll}repeat/_depth _depth 4 add def 4{_depth -1roll _aldimtint mul _depth 1 roll/_depth _depth 1 sub def}repeat _ninks _cname}{dup _rgb eq{pop 4 1 roll 3{_aldimtint mul _aldimtint sub 1 add 4 1 roll}repeat}{dup _lab eq{pop 6 1 roll 1 _aldimtint sub dup 4 index 100 exch sub mul5 -1 roll add 4 1 roll dup 3 index 0 exch sub mul 4 -1 roll add 3 1 roll 1index 0 exch sub mul add 6 -1 roll}{dup _def eq{pop 6 1 roll 3{_aldimtint mul_aldimtint sub 1 add 3 1 roll}repeat 6 -1 roll}{_defg eq{7 1 roll 4{_aldimtintmul 4 1 roll}repeat 7 -1 roll}{5 1 roll 4{_aldimtint mul 5 1 roll}repeat}ifelse}ifelse}ifelse}ifelse}ifelse}def/iM^65{_imc null eq _ctype _registrationeq or _ctype _paper eq or{true iJ^65 _aldimtint tintedseparationimage}{_ctype_spot eq{_imc _aldimtint tintedcolorimage}if _ctype _process eq{_imc_tintedcustomcolorimage}if _ctype _rgb eq{_imc_tinted rgbcustomcolorimage}if _ctype_def eq{_imc_tinted defcustomcolorimage}if _ctype _lab eq{_imc_tintedlabcustomcolorimage}if _ctype _defg eq{_imc_tinted defgcustomcolorimage}if_ctype _hifi eq{_imc_tinted hificolorimage}if}ifelse}def/iN^65{_image}def/customcolorimage level2{{aload pop/_cname xdef 4 iA^65 iC^65 _ctype _spot eqversion cvr 2012 ge and _cname(Red)ne and _cname(Green)ne and _cname(Blue)neand{[/Separation _cname/DeviceCMYK{dup _ic mul exch dup _im mul exch dup _iymul exch _ik mul}]setcolorspace currenttransfer settransfer dup type/dicttypeeq{begin/Decode[1 0]def currentdict end}{[1 0]IMmakeimagedict}ifelse _image}{[/Indexed/DeviceCMYK 255{255 div _localxfer 1 exch sub dup dup dup _ic mul 4 -1roll _im mul 4 -1 roll _iy mul 4 -1 roll _ik mul}]setcolorspace dup type/dicttype eq{begin/Decode[0 255]def currentdict end}{[0 255]IMmakeimagedict}ifelse _image}ifelse}IMndef}{{aload pop pop 4 iA^65 iC^65 _iy 0.0 eq _im 0.0eq and _ic 0.0 eq and hascolor not or{iD^65{_imcmykdarkness mul 1_imcmykdarkness sub add}settransfer _image}{/_localxfer load dup dup dup{_icmul _ic sub 1 add}iB^65/_cproc xdef{_im mul _im sub 1 add}iB^65/_mproc xdef{_iy mul _iy sub 1 add}iB^65/_yproc xdef{_ik mul _ik sub 1 add}iB^65/_kprocxdef currentcolortransfer/_kproc load exch iB^65 4 1 roll/_yproc load exchiB^65 4 1 roll/_mproc load exch iB^65 4 1 roll/_cproc load exch iB^65 4 1 rollsetcolortransfer/_mbuf 0 string def/_ybuf 0 string def/_kbuf 0 string def{iG^65 dup length _mbuf length ne{dup length dup dup/_mbuf exch string def/_ybuf exch string def/_kbuf exch string def}if dup _mbuf copy _ybuf copy_kbuf copy pop}iB^65{_mbuf}{_ybuf}{_kbuf}true 4 colorimage}ifelse}IMndef}ifelse/rgbcustomcolorimage{aload pop pop 3 iA^65 iAP^65 level2{[/Indexed/DeviceRGB 255{255 div _localxfer 1 exch sub dup dup _ir mul exch sub 1 addexch dup dup _ig mul exch sub 1 add exch dup _ib mul exch sub 1 add}]setcolorspace dup type/dicttype eq{begin/Decode[0 255]def currentdict end}{[0255]IMmakeimagedict}ifelse _image}{/_localxfer load dup dup{dup _ir mul exchsub 1 add}iB^65/_rproc xdef{dup _ig mul exch sub 1 add}iB^65/_gproc xdef{dup_ib mul exch sub 1 add}iB^65/_bproc xdef currentcolortransfer/_bproc load exchiB^65 4 1 roll/_gproc load exch iB^65 4 1 roll/_rproc load exch iB^65 4 1 rollsetcolortransfer/_gbuf 0 string def/_bbuf 0 string def{iG^65 dup length _gbuflength ne{dup length dup/_gbuf exch string def/_bbuf exch string def}if dup_gbuf copy _bbuf copy pop}iB^65{_gbuf}{_bbuf}true 3 colorimage}ifelse}IMndef/labcustomcolorimage{aload pop pop 3 iA^65 iAQ^65 exch[/Indexed 3 -1 roll 255{255 div _localxfer dup _iL mul exch 100 mul sub 100 add _iA _iB}]setcolorspacepop dup type/dicttype eq{begin/Decode[255 0]def currentdict end}{[255 0]IMmakeimagedict}ifelse _image}IMndef/defcustomcolorimage{aload pop pop 3 iA^65iAP^65 exch[/Indexed 3 -1 roll 255{255 div _localxfer 1 exch sub dup dup _irmul exch sub 1 add exch dup dup _ig mul exch sub 1 add exch dup _ib mul exchsub 1 add}]setcolorspace pop dup type/dicttype eq{begin/Decode[0 255]defcurrentdict end}{[0 255]IMmakeimagedict}ifelse _image}IMndef/defgcustomcolorimage{aload pop pop 4 iA^65 iC^65 exch[/Indexed 3 -1 roll 255{255 div _localxfer 1 exch sub dup dup dup _ic mul 4 -1 roll _im mul 4 -1 roll_iy mul 4 -1 roll _ik mul}]setcolorspace pop dup type/dicttype eq{begin/Decode[0 255]def currentdict end}{[0 255]IMmakeimagedict}ifelse _image}IMndef/separationimage{level2{[/Separation(All)/DeviceCMYK{dup dup dup}]setcolorspace dup type/dicttype eq{begin/Decode[1 0]def currentdict end}{[1 0]IMmakeimagedict}ifelse image}{_image}ifelse}IMndef/tintedseparationimage{/_aldimtint xdef{_aldimtint mul 1 _aldimtint sub add}settransfer level2{gsave_currenttransfer IMmodifyHalftoneXferAll separationimage grestore}{separationimage}ifelse}IMndef/tintedcolorimage{IMapplytint _ctype _rgb eq{rgbcustomcolorimage}{customcolorimage}ifelse}IMndef/hificolorimage{aload pop/_cname xdef{dup type dup/arraytype ne exch/packedarraytype ne and{exit}{pop}ifelse}loop/_ctype _process def _cname findcmykprocesscolor customcolorimage}IMndef/setcmykcolor{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1roll}repeat systemdict/setrgbcolor get exec pop}IMndef/setcustomcolor{1 indexdup dup 4 get(Red)eq 3 1 roll 4 get(Green)eq exch 4 get(Blue)eq or or notlevel2 and{exch[exch/Separation exch dup 4 get exch/DeviceCMYK exch 0 4getinterval[exch/dup load exch cvx{mul exch dup}/forall load/pop load dup]cvx]setcolorspace setcolor}{exch aload pop pop 4{4 index mul 4 1 roll}repeatsetcmykcolor pop}ifelse}IMndef/setprocesscolor{exch aload pop pop 4{4 indexmul 4 1 roll}repeat setcmykcolor pop}IMndef/sethificolor{exch aload length 4sub{pop}repeat 4{4 index mul 4 1 roll}repeat setcmykcolor pop}IMndef/setlabcolor{5 -1 roll setcolorspace 4 -1 roll iAO^65 setcolor}IMndef/setdefcolor{5 -1 roll setcolorspace 4 -1 roll iAO^65 setcolor}IMndef/setdefgcolor{6 -1 roll setcolorspace 5 -1 roll iAO^65 setcolor}IMndef/findrgbcolor{4 iA^65}IMndef/finddefcolor{6 iA^65}IMndef/findlabcolor{6 iA^65}IMndef/finddefgcolor{7 iA^65}IMndef/findcmykcustomcolor{5 iA^65}IMndef/findcmykprocesscolor{5 iA^65}IMndef/findhificolor{exch dup dup 4 2 roll 2 mul7 add 2 roll mark exch 2 mul 7 add 1 roll{1 index type/stringtype ne{exit}if 2iA^65 counttomark 1 add 1 roll counttomark 3 add mark exch 1 roll counttomark1 add -1 roll pop}loop counttomark 1 add 4 roll counttomark 1 add -1 roll popexch 5 add iA^65}IMndef/iAO^65{systemdict/findcolorrendering known{systemdict/findcolorrendering get exec{/ColorRendering findresource systemdict/setcolorrendering get exec}{dup/DefaultColorRendering eq{pop}{/ColorRenderingfindresource dup == systemdict/setcolorrendering get exec}ifelse}ifelse}{pop}ifelse}IMndef/iW^65{abs exch abs 2 copy add 1 gt{1 sub dup mul exch 1 sub dupmul add 1 sub}{dup mul exch dup mul add 1 exch sub}ifelse}def/iX^65{exch popabs 1 exch sub}def/iAG^65{currentscreen pop/iW^65 load setscreen}def/iP^65{currentscreen 3 -1 roll pop setscreen}def/iQ^65{currentscreen exch pop 2 indexexch setscreen pop}def/iR^65{currentscreen pop 2 index setscreen pop}def/iT^65{dup length 2 sub/_lutlen xdef/_lut xdef{_lutlen mul ADBIMTMP_2/_index 3 -1roll put ADBIMTMP_2/_low _index floor put ADBIMTMP_2/_high _low 1 add put_index _low sub _lut _high cvi get mul _high _index sub _lut _low cvi get muladd}/_localxfer xdef}def/iV^65{concat}def/iH^65{dup _process eq{popfindcmykprocesscolor}{dup _spot eq{pop findcmykcustomcolor}{dup _rgb eq{popfindrgbcolor}{dup _lab eq{pop findlabcolor}{dup _def eq{pop finddefcolor}{_defg eq{finddefgcolor}{findhificolor}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}def/iI^65{/_ctype xdef/_aldimtint xdef dup null eq{/_imc xdef}{_ctype_hifi eq{1 index 2 mul 6 add}{_ctype _rgb eq{4}if _ctype _process eq _ctype_spot eq or{5}if _ctype _def eq _ctype _lab eq or{6}if _ctype _defg eq{7}if}ifelse copy _ctype iH^65/_imc xdef _ctype IMapplytinttostackcolor _ctype iH^65/_imc_tinted xdef}ifelse _imc null eq{1 _aldimtint sub setseparationgray}{_ctype _process eq{_imc _aldimtint setprocesscolor}{_ctype _spot eq{_imc_aldimtint setcustomcolor}{_ctype _rgb eq{_imc_tinted aload pop popsetrgbcolor}{_ctype _lab eq{_imc_tinted aload pop pop setlabcolor}{_ctype _defeq{_imc_tinted aload pop pop setdefcolor}{_ctype _defg eq{_imc_tinted aloadpop pop setdefgcolor}{_imc _aldimtint sethificolor}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}def/iJ^65{setoverprint}def/iK^65{false iJ^65 0.0 0.0 0.01.0(Black)1.0 _process iI^65}def/iL^65{/_dr1 xdef/_dr0 xdef{255 mul dup dr0 lt{pop 0.0}{dup dr1 gt{pop 1.0}{dr0 sub dr1 dr0 sub div}ifelse}ifelse}settransfer}def/iS^65{/_invertthemask? xdef}def/OPIimage{dup type/dicttype eq{iN^65}{iM^65}ifelse}def/IMimagemask{/_invertthemask? where{pop dup type/dicttype eq{}{3 -1 roll _invertthemask?{not}if 3 1 roll}ifelse}if _imagemask}def/iY^65{/_colorimage?/colorimage where{pop true}{false}ifelse def}def/iZ^65{{/_readdata{currentfile exch readstring pop}def}{/_readdata{currentfile exchreadhexstring pop}def}ifelse/_rows xdef/_cols xdef/_picstr1 _cols string def/_picstr2 _cols string def/_picstr3 _cols string def/_picstr4 _cols string def/_picstr5 _cols string def 12 dict begin/ImageType 1 def/Width _cols def/Height _rows def/ImageMatrix[_cols 0 0 _rows neg 0 _rows]def/BitsPerComponent8 def _colorimage?{/Decode[0 1 0 1 0 1 0 1]def}{/Decode[0 1]def}ifelse_colorimage?{/MultipleDataSources true def/DataSource[{_picstr1 _readdata}{_picstr2 _readdata}{_picstr3 _readdata}{_picstr4 _readdata _picstr5 _readdatapop}]def}if _colorimage? not{/DataSource{_picstr1 _readdata pop _picstr2_readdata pop _picstr3 _readdata pop _picstr4 _readdata pop _picstr5 _readdata}def}if currentdict end}def/IMcmykimage{level2{_colorimage?{/DeviceCMYK}{/DeviceGray}ifelse setcolorspace image}{begin Width Height BitsPerComponentImageMatrix Decode length 2 eq{/DataSource load image}if Decode length 8 eq{DataSource 0 get DataSource 1 get DataSource 2 get DataSource 3 get true 4colorimage}if end}ifelse}def/iAC^65{/ADBIMTMP_2 where{pop ADBIMTMP_2 begin}{/ADBIMTMP_2 75 dict def ADBIMTMP_2 begin/_cname()def/_ctype null def/_aldimtint 1 def/_imc[]def/_imc_tinted[]def/_tint -1 def/_ix 0 def/_len 0 def/_ic 0 def/_im 0 def/_iy 0 def/_ik 0 def/_ir 0 def/_ig 0 def/_ib 0 def/_iL 0def/_iA 0 def/_iB 0 def/_imcmykdarkness 0 def/_proc1 null def/_proc2 null def/_newproc null def/_cproc null def/_mproc null def/_yproc null def/_kproc nulldef/_rproc null def/_gproc null def/_bproc null def/_mbuf()def/_ybuf()def/_kbuf()def/_gbuf()def/_bbuf()def/_colorimage? false def/_readdata{}def/_rows0 def/_cols 0 def/_picstr1 null def/_picstr2 null def/_picstr3 null def/_picstr4 null def/_picstr5 null def/_invertthemask? false def/_dr1 0 def/_dr00 def/_lutlen 0 def/_lut[]def/_index 0 def/_low 0 def/_high 0 def/_ninks 0 def/_depth 0 def/_curxfer currenttransfer def/currenttransfer{{}}def/_localxfer{}def/settransfer{/_localxfer load exch iB^65/_curxfer load iB^65 _settransfer}def}ifelse}def/iAD^65{end}def end%%EndResource%%EndProlog%%BeginSetup/currentdistillerparams where {pop}{userdict /currentdistillerparams {1 dict} put} ifelse/setdistillerparams where {pop}{userdict /setdistillerparams {pop} put} ifelse<</CompatibilityLevel 1.1/ASCII85EncodePages false/LZWEncodePages true/DownsampleColorImages true/ColorImageResolution 72/ColorImageDownsampleType /Average/EncodeColorImages true/AutoFilterColorImages true/ColorACSImageDict <</QFactor 0.500000/Blend 1/VSamples [2 1 1 2]/HSamples [2 1 1 2]>>/DownsampleGrayImages true/GrayImageResolution 72/GrayImageDownsampleType /Average/EncodeGrayImages true/AutoFilterGrayImages true/GrayACSImageDict <</QFactor 0.500000/Blend 1/VSamples [2 1 1 2]/HSamples [2 1 1 2]>>/DownsampleMonoImages true/MonoImageResolution 300/MonoImageDownsampleType /Average/EncodeMonoImages true/MonoImageFilter /CCITTFaxEncode/MonoImageDict <</K -1>>/ConvertCMYKImagesToRGB true/EmbedAllFonts true/ColorConversionStrategy /LeaveColorUnchanged/SubsetFonts true/MaxSubsetPct 25>>setdistillerparams/pdfmark where {pop} {userdict /pdfmark /cleartomark load put} ifelse[ /Title (CryptoBytes Volume 3 Number 1)/Author (CodaGraphics 510/654-6549)/Subject (RSA Laboratories)/Keywords (RSA,Data,Security)/Creator (Adobe PageMaker 6.5)/DOCINFO pdfmarkAdobeIMLIBDict_5.0.00 begin P65PS beginPPDSetup{(Andryw; document: *CryptoBytes 3.1 final for pdf) statusdict /jobname 3 -1 roll put}PPDCleanupPPDSetup{%%BeginFeature:1 /languagelevel where{pop languagelevel 2 ge}{false}ifelse{1 dict begin /NumCopies exch def currentdict end setpagedevice}{userdict /#copies 3 -1 roll put}ifelse%%EndFeature}PPDCleanupPPDSetup{%%BeginFeature: *CustomPageSize True612 792 0 0 1    4 dict begin   pop	% pop /Orientation value off the stack to fix bug in PageMaker 5.0   2 array astore /PageOffset exch def   2 array astore /PageSize exch def   /ImagingBBox null def   currentdict end setpagedevice%%EndFeature}PPDCleanup/isWinPS false def0 k1`65f1`65320 v1`65T v2`65j`65%%EndSetup%%Page: 1 1%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate-6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$0 bmt^65o`65N1`65N1`65F M1`65$0 tsi^65/$0 bmt^65t1`65%%BeginFont: Goudy-Bold%!PS-AdobeFont-1.0%%CreationDate: Wed Apr  8 10:40:37 PST 1987%%VMusage: 36492 45272% Copyright (c) 1981 Allied Corporation.% Copyright (c) 1985, 1987 Adobe Systems Incorporated.% All rights reserved.  This record material and the data recorded% thereon is the property of Allied Corporation and Adobe Systems% Incorporated, or its licensors, and may not be reproduced, used,% displayed, modified, disclosed or transferred in any manner without% the express written approval of Allied Corporation and Adobe Systems% Incorporated.14 dict begin/FontInfo 9 dict dup begin  /version (001.001) readonly def  /Notice (Copyright (c) 1981 Allied Corporation. Copyright (c) 1985, 1987 Adobe Systems Incorporated. All rights reserved.) readonly def  /FullName (Goudy Bold) readonly def  /FamilyName (Goudy) readonly def  /Weight (Bold) readonly def  /ItalicAngle 0 def  /isFixedPitch false def  /UnderlinePosition -112 def  /UnderlineThickness 51 defend readonly def/FontName /Goudy-Bold def/Encoding StandardEncoding def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/FontBBox {-152 -229 1000 964} readonly def/UniqueID 6653 defcurrentdict endcurrentfile eexec05C2CBDC56B6E215C74E061D95E42988014E9B24F11C8832B9382F20CFC3DE5E71B1DB4928D3B2ED5253DE363E910CF9AEC42E4C028AB38F03CDC489564E9275FC1B38969219F54E73F1E092A49C7BF799F6E98CD195F199DB61E1DB0B3CF2C203CEF5527B9B2299FA64DFB36B4A54BF184B30DA017E6CFB2F58BC1ECF38E0696D67F506AB04781984AC0F8FD4E421E130E2DED5475BFCBB95E68AC1268E6568582EA877385712B375098D8AEF1166B4F7F95300E20C38A6C71A838B2657994C4BCE51ABECA570DC677C31F04FAA1AAA756AA6D1703E1F71C63A6A52400C1323B6E700C136B995A0C53F11BD0E416B61FAF3D08780180CCA8D2E03A1C99E3494027302DB6405D75BAD85952BFFEBCDE0078B310E1D995141CE38182836AF31F1ACB6271CAF9433150DCBA7DE2FEB72A21D5018F2CEC86DAB8DCAEDDAA61466AB0DCFB4587663A176619D7DB14695F73940EB3AE13D13B3051D7EE5CE97BBE76ACAEFA95492FB3F290C9DEE837C55847B859B3D72D95A65582B50B5A3FE69894E0EDB017C6CA0ECCC615E33F89E4562FE56C7685009BD1C89E48929034EB2B09606C5AB33FA0A21F5E518348D7CE6CC34EBC8B9650E5AD89FEB67F1BC6D49655B96F02171E41BE389D6011CFF3A5128CD1CD5DB1B95A42C4509ACDBB1DD974048879937F4B93EAC247220970ACC9E4DD502EF95BE6F71E0004EE5B3654AB6ED930CE3778C0393AF5C19D7DD3A045FD97E27256AC5E0599C6294871D44AD940365F347523289BA9D3DA76D2CBBB0D982B51E50A23D3852E84D7C7884B279F0C34A91182EA30AF4A9BFD81BE604C08C4C363C61CEFCA59212C78544A7152898033FF93AA71B7A1717CB8111AD58E41DD9C2CF0ED73CAE4B3BBA8465A0FB616F18C779CE5F81C0A8B9EA6ACAC96C0BAE4204A84FF3BF555AA0B1F7EF1DED9A8E70962990A099BCAEBC71346172E36D0C77FF99C659DC3780FFFBBC979796926EA156A545F0D22FF23BAFEEFFB317968CC37FB9730C2CCD549BFD914E97954FF7A317BDE53729FF4094DEDBC493FED9F6B083A3BCD624C6754907C751F9DA17499049A4F60466E3E46DEE075B9F33022953D7C45A8A5D51684D5DC278520C20F46E1EC4D99F4B52C51D24BBF72018F8A7B4516227071A4C150211559C17B90DA40B74A7E04F5EDB0A3B6BA40F8C0CBD8D5FF6B30C208A8E3B9C93858AAC5472518B87D23FA2CB6FA975D2F1ADF0349315C5FD3AD717DFC288317E84FDED4D7719596A8AAB89E3B7AF45AD5E6C60CCE8BBE114ADC2D83D9E6ECDB264FE9B92CC5477C6A9A487DC58CFEFFD5AEF72E067A8E0FF28592F9B37B5F17D5AB2E4C0B44ACBCEA49B45422018F976A56DCECDCA3CA41C48CBE2432D5B91456B15B2EE3971393F509CB8CF49FBB2A4157A49CB9476D2651BCD14284281C9D6627B20306DF9CA4A1FF7E6CCD18E80CDB5C8106E3AAC0E69B962669BF6A79EABE838A45B3EE32038BCE2FE77B191D21D69939A5798B17ED87CBECD199250A449114200D6BF32906C7089C1653DCFB812F15AD3F7F96888EC529E83D9DA0EE1B1438335D6AFD8F5BADF61E98174536E727A95196A9DC000245569BAFA89360C62C569FA19608B2143D7072ED5DF0AE70BD395BD773CE5974AF19573139D7D5A0D3A9BEF580A69F9A4E213AE8C84C156051FA26D0FDA25DDBD72985B41CF08D4A0D6A29BE008CB6E219D014975D364057BCC6F381BE29FE7E55C8029A65200DF64215422624C9995F442E0F59262EE96FCC08F25D0CA20093A0B18B7A1ED60E757F40EED4E455CB38B62B3BDA64FC2DA414A295D66D468ADA9166AE96DE5349A54B32B8A48329C919A1D3E7DFBAB931C2B871C3F2C1707E8B0D3F6C20C21E752E0BB0AC17E1402CB438CB6FE64A92E0E457F55C922AF3F5F341E3B9EBE21769A1A4A58B93D9EC390BB6A790E25941083FE7EECA12D52D9322C445AB3B7D97F3F55481861275E7B9FB86A35D69C02EF76DCB01554972217D2C77AECF0C78B8801DE19CDA19361BB96E3ECD24D24AB07CBE84AA27B3E8D262F46D14EA2EC8EED516A502948E5744EEA59F3D66AF39D0A47E9BBAC227C146E59430C5FF51D336C3C2574F5CCD0DD3CBF86742F26DEF812CB5A00CB19AB0D26169596A7FE647104F0235896B4346048A30148EA64AC16A0B4B53FB76846B41B66E9C8028A58A31F2E5A2D735CCCC1ECC777B31055EB8289730BD35D2BF3E6311634E1A9B2E0E4DE3811A28052E8F435713BCA2EC412ECDFCE4E2518B27776CDAFE2EAEB0FC3606D45FD7BE5B1EAC58FE48BD85CBC84C520C535ED11292224D095E524AB5316E19DF5057584260F08FC1BB6B52A1B0CF1578B3991E03AA7B1BC6730BFB4F82DD34166AFA2F9028B7D70DE97ACB3CF7CE962AAADAB02B6D9AE9AC0F968719B5282610D52C2E7C7FCB822911DEED3B2391E04CEC77C51DD557EA48756F670ED992D9116E2D48CF7EA7794EA0EC20DB04763EC9B6FB352220F8FBED15D55A1C38E7E8E0934EB990100C4F8421F47FF902D22B38C045365161E30A3A9637D023E7BADBD78101F1299D6A49A947641E74DA9D61D6EB7C4FC5D450E23565BAB29031A7BC8886B4EF08958270F294D3179E2115C3E8980BB904548E91503D183B059772A5CB6EE2382B3BCC6C8F75F3E89F245915EB2DEB6C5D641BF1EA12208CF9DB0B91F534920C8C2BF01D3A3BC1DDF48067990EFF5B2489D840051A1172E708DA0F19F251F58D7E39072985D39ADCEC3D8EF206AF45248235D4D98A5F7F1C9A0B97DD67242CC7252214126A9220EE8EA24C5A76303698238FCF7427AA41EB7C516F8A38A10060125407F219F02962B935BB55990C466B0CDEF6B9E38194733D655A3330C61E7822BA12EB65DC8FF76A86660C94006A957C95622EE5BAAF82B4EAE090146BD80984FA6E74B59F9D04F48BCB76B5A9EC140E3D6F85214328D6B1F73BC41C587BA7068C2044AD9E51EB221EB697651E20ED953AFC5648A01AB3925D85869FECB293F4CFE239BD38BFC03B209C58C7AFEA5ECE90C3D65BC55113387DB6188C3234A6E9FCA313967C182129ED3FF208DADF3B8BD639F6F92666BF2957B14B3A439172878B6C4D13493C9A75C55052C8C5B9236C98602EFEE58BFFECEE703558E826D37F1402A755C73D5B77F7E82EF344A3A60FDEEA25AFDAB741E471B81617FC5BBBDB774725D515132AAD7741DC78274AD4E6CA8C24BD6E80F6083F1B07BA132C7D59E0DA78C38F53BEB342CF625490BF817FE15D08E2D2097BB6B4298BBBB6623AB3B0120636A3933CE149573FBADA84C465CD32017B3656406A5D1E37BA4741BAEA3F1990DA4CA605514A38C63FDDE21555DA9C7D729EAFBF59DC00724D1C3BB4626666BC316904E46BEB45CDA6792CAEA9C23BE11FF35CEAC0F7F2905F1756F096DD7F4FE59F0F1BD79DF92A39FD5D5EC86F72DBD1CFAD9625E192A0B22E9C31865A6367867C42DD03511703E9A4A980ABD8D7562E690B7300037D9CA741C362469A92D8D3665812910D3E447FB828CF56303EE149DA71B0A05C8AF815F5A307FF4E96D58EDA08E4BD64EF3B9EE6A2EE1040C6229DC2E41AFD89BC45ACB8F253DFD62A0A45EA47EE95DB549616CA3CB633DBA687355FF4A06D0696E40C10D4F767B631BCAD188C80C73BCDC789BFD4E3B2D72A72035901589632F47E5A3068131F4A9628544D9A1F4F6534D6A824BC416AADDA0301EABEBE76B7669161C9B3D361503F99037D51C079017FF5BBB8839761270ABF172423B1F8024041D5335D0292906EBBEC95CCE72A78F9E552B905C306B070D0893597EA0A1FD57C748ED04E81F9E6A36CFA90B60FB280E7D52ED9C73BB10ADD22E93A4A969E572F42BC07D28CE4347412FE0D85C74E72612891B979F0B013AC4F848A75C011335D7A80CA1559F66F272DC2D63C0581F8A07303307B97FE44ED604F7AD5E70EFC83F0E409D0993DA5A92A3D0FB5AC746315BB70DA69A7FA4AA8A4D02F35BE3CD67A8FDDBBFFEA63E79BE509BD99BEADEAB17BB1B2506001154A8AA45EFD34B997D4B8CC9D7A96DAF82F927D4D67584E8C95B065623DAF103C7EB24FC5C0B1705098D73A8AF110E0024778F7DD9C9458772EE9E36C85119685C3679EB9CBB6E079F6C49335636CEDDEEB013191FA3F39E210B57EFAE9FDD473A49527D8657BA022503DB5A61D2816416F00EF3783ACDECEFA1A95AE018A846D0C2AE287DB75F1176611F3F22ED43ED17138B741EDD1FCBB63187D61E506B64C431B9CB2D509052F1E2E9015C38B68983BF8CBA1384DB55EA2483C2EA08A85FE24A66A05C84D626467345E12A61F0ECD28B95DD5BB5E462EF2FDFB4D8F7A9970ED07B355276A6CD2D663ECB4315EAC727CF47C4DF5A86A6E7B2FB75561304CA9DD546E6EA26758947539FA6CED0981C4622D3B57B78D05FCEFE990B715331BFC94932985CD81929DB7682C4678537694BF5B58CB28C98F548F8321722198627F51B71FC09822C8D2F853B37520908361336FB95138D1D3559C5F029BAC879F75421573B268F9AB4CBEC76B080C6ED308EA163D33A9AF82067A3B6D06DA0923BC707DA42BA5D6FA7EDF0FF92D9A52E7A387D695D29E8B836931DCE97CC50866E64A65900621DA1D72DD36C313FB8189A80C90D3F8BBD27CC8D8961F35762F3BE12E50ED1D5EF359142F2194BFCDB8FDB073DA282442E00E9A4DF6FDF14E4517B875E7CA7DF36C48C77DEF59FF14215682710FC4E6D3148F0A8CE24593AAAEB64AC7352971DA4160EF1211E534B05946220D15A4A9B75C2863AAF8D3529FE35FB22B985C0218939DE1A3C9D2CEC808C6457161E8DBA3772A475BF4308F7865EE43C4B7641D575E66042467CB97CF55ADA316002B8C2C9ED3796C964212801784EEC1DD97D9AD64DC0B15EC9752F4188C93FB94623B740E340D913C77C9721CD8B280311FF225F1D0C19AAD46FD399549F781FA059B28156FA84CE125F8924A49D4EE6545C291C9550192BC6071ECE156C91A4DFA61E06CD776D2499A21158EFC76F2338876818A2069CBE6AD6E652EA5C40916E0E9667FCF916DBA8FE2BED1753B259695259F7C0587CCF963AA207C63A3F21E3A28A14CD6793D0EF71B0B416A42A2CB7B5EF520EB5F41ACD46638CDE1F27E0A17158BD5599CCDECD866CF5B77D80D7EDF04A63DDC7A1C3C9A4CECAEA776F69E367E33DF6376EE78BE6E944B609E1EE187E7C0A32E7B711B1CA17075D13B761622489FDABBA30876216F4E3971AC68F7E42699D2206B2417979216BA31D0DF8A9380F636CB0E1440414278C0BEC83269ABCE21A2BCED7448456DB6CD573414F4A49445FA41EC3FC1A49BBD3282977F803BCA68A7FB2BA7DA355981D5332FA7BA68F265D6B355948CC5400DFBF3EFEA6F8E843CFBE6C688866B6CF5A18B52AED08E8D787EDB3285C23B68291D2D386C1A4F2C82D926A2A5114E247F37A105A7895625DAC6921685EB917D9975019356D8C6884450B89C8B2B8320C421C513161B2986ED48A35FFBBC8B857F8BFDF09600EACF8D058F099DE15249D6EEAC0A2DE43D294A2C81500681F2A7867650B3C3B7C3E7376FA2E0699269FA18BCC3835212AF896358925D4C3F9481835940310AC9744E9A82E5A0B19F8AD7CBAEE0BA38EBC610019EB6AC0EC524D9418DB1A91BD63FB0994CFA279EE9A6752E33B2EC0798496D995F78E7732C373D165D539BF8135F3E07852CD3C6CBEE4A754CA8546182B9523CE5AC454C355ECAADEF5ABAD11071A805020D50882948272BD8C616C98EF8B4E59C11537966D656FE33BCC0E2E1FF0406897F6D05AFDA418F73D77777252E89172B3049D9DC7DD6AA690C280DAF9F3D8401A0895D0FC1C3F0C06B72BABC33B25DC5AE2A02B49AA3C7F6130D5F0E4B94DF83F6655E1967009232F5E095ACB83A43D486316384A9E8507158E781ABB837F315D3D6CE4BFC4ED4CBA8A4B0B26BDE929196A5C6EA5EE9D92054C857FD1D4AD34600FC5395740DF19AE578C9242696933FBBB2BB035A2206F98C5F3B43A916BB98D17E2FBBA3E51B6CAA428468ADD18EA7CB2F8AFD9EA27761DDF4731CDCF46E208B6312986593962B36F96FA3A02588BCB733F3855361E25CD428FFD048589966A4CFEB673E2B56B7A6E63F31332D6DD0EEB0F667AE0D3036CAA055D311678ABADE3214CEE54FBB319B0EE864CC3C917B0239DE1C7823231147B1502BAB674BC4F84FB19FEFC5B3C076BF3C844CAC68494F082948E6E05BD48FD35358598594B97FD1823915A34B2D3BA0272A9512E46094EFA073B4072382D72AB8D0E9387158EE4BE7E99AC9BFD7C162B2563D47BF1B9ABC716D91944F7C2A232AB46B1A8E9DE0FA15F91ACD581953BC2941D76A327B2D2720065ABEEC4342B0418B03B47CEF83D21510450D37F6150AAC22687003BD807935EE7D61B52CF8C5E555A17059EBA03D3D8A9A79889EC9360E71873F6C3A280B2D2C646032D1B1687C2E032808F66C57D0EDF8108DAB8252539CF2E8EFF38870E6218839DE06078919CF6B0BEB66DC7ACB852B38A7EAF39BFC363D2F9F0009CDBA185DC67A6F3A04CB1BB53694AE9ED88B116F530B8B692DD4E7DA4E4B9FFFCFDD4B47EA2B87FD1F6D44A8A3BB25C13CE52CA418C5477C419F4E369D4FA765639D67012F5306B75998FD3E9FACBAA3B415536242916C77BF06386CD83C489663520ECDA6BB5ED88942C5A68FEA6B92A494722F284912E8A458AB8C32FBFF986A74632F6527C0FB19E5D5C1B4427F3D0A667FCFE567738E12C4783F3ABBA97449BD390FE6CB27F463C492B8618A3732A19DCB273C7CE405FBA11108C6591E637A1E2FF9DDE97975CDBFA67F161BE497FB1400BFC386D8766575C285FAB27C8736866BA867B9A9F81ECC8CB00B3EBA59C8009B3528A56C8F16A8C92678C8F6622BD3FDAB5A9A551B948CF9F839877822B43EFAA9916944DEEE3B44251F9EE85261D598E1A3BC7BD63ADC28E87383B236E8E5BCF89A83F7EDCFB2F35AA0392A44DFEF9AD0638DA273DA4AE8CF515E8EF53FA92C4EC9051D07087386BCAD26B9B03AA9447C8CC39370B2C3F28ABB58ED71CD634EA73D8F735D054BDC57D3BFE5AF05A0470A980029054F00B63A5E9CAE7427BC03619F976F9A82B7DA9FFDFAB6C3C06282F6738BE93707BCAC8BA75C99BF7FA103704D4A615B6323459C59517CCE922BCA3517DA404E0EB81486D5EA32554E3F6D87F9E33C5F5E96432E57A1DD8B8CBABC69216B0C197B7285A375B2D017CA1976B9C644F0FF44506C9F4B8DB2CF0B3867A0BF29DE7641A5291CC29326E2781E21DCD38407CC97C347BE7F76320B4470B5A03D43F0A4D67BD27438F9D874FF8DCE8A9A781F7F314FB27D1640ADEB76798BA5647028F10551D5625D75A73F3DAABC338DBE29E8B0DB1F4DC8D83FB1BA0BFF10FAB381D6D9845B52E7232E6FE367468D1CF3705C8222C8DB78C5F576622C640835B45FEDC906AF4FA3E0F27F2D2E26F44F078E6DB1A0339006E78E1E72B4EBE1178FFC9AF46BD100A4BC2C2B841C5C7EDC42CAB11CA3097934090653F1EC80AFD83A8D8864B1A30234458EA016A651239E19ECCFDCBDE7C6FF63E830EC06C76F8BACD6E36D9C60B1EB250827964850A9A0C40C941D59C20A69BED82A9AFE0A807B85D75D988E42418F28D6A92FD20763D4FBB2369FB70E31EF5FF7BC09FCD762B706CF633A58CA8B3D9246B68A345817CB4776FEEEF3108E42E20B66A70D780E18F8678630B61ABDBC0EBBE739EC85AAFC375B2B343DA1B6F9FFBBD1041C309A346724948FF7353A1FDC28CF69EAEAE1D602700AC3E1F4AA214481C40C2CF06EAF9506A1DF4CEA601EDBF00535445B4F3798713307FC6CE1D5D551FE4A389FD0D34A49731636789D4EE197B09C447EBD3ED5E08AE35CB3731AF1D98B1432FDF7241FFBC471ADD2DA5C8C412AE5BA6EEC3B8387EE5709610C0552483DEF48952575BAE31BB80539F6C961CE25646D80D3AD877DF2171316AB090B7A7B74AF312F53073E0D17038B3F7BD3BD57523FE9020BF810327D7072103E4C0A2610A1E2761F168022202737CA3F1CCF7AEAFF65C049B8A9E998D0540AD2A515EF38095D8F9FEDB0521CF9020F444A7056CD0F3E73CEFC8E5992B2926377112C0AF7D60E5A8946B78E05C11190CC65163EF7F02369E0F8C0F863F1AF0C5CADB7373BD77797E52BACEB1D601B191689F4EF64485A77247B114FD8925F5F59A7944027389DA5EFE5BB7B76AE39D1D0856A30FFC000E5377D1748AB05AD85C09D979E1377874A00CE95E9D68D339A3B929418204513C41F1B3AFC65DFB955084AA01EE9B8B0757256DB93BD65C0704DEA5270E4B62BAF5C7D6100231194234BB13A1BCEC1DDEE1299F9B4DACB6361B93489CB5899A4530B70A64E56DABBE1674DD5F02F19746CB319EEB4EC533C7C3A5B210E2020459F27685DA9219293E0F06C34F903AEA75AA44B8B5679377366802EF21B615E8DC9E76C95C2F2A87D3A92A610C197DF2A70FEFDD5BFAF7D76D4FFF80F63BEE101FE8C804239B22032BF976C6B676CB4C8EFEBC6FB6CCDA3F817B7119374992A6598195A789019C139B5DDAA0E209928F53A9F7E8FB51BCC61B14D136D7DA131F1B9178947F77E49619130A430515DD50D7389427E6B0B53399FCDB0E25F603D857AF14C2AE2F4E246D9E44533239B80029B5F996F4D4FB41FC99A3386F3CEC5B1059FF867D1516080D35A7463C32A5DA48D379CF032F9E7CEF1E7A37E80264F75372B92FAB488571FE272BBAE0813944CA164248F7E7C313EAB9342E51A8E398EC4B4B2A883A4B522FA4C9AC53893C5829FF86D9453DD291F5D1D223E9C86C4E02AF6ED3D015C8530B24202F08E73D583EF2735A0F3852F8F5D7C637554F1789501566E48D534DE9B41BAB09A06CA480959E4F98312B48F38AB063A316F132DF4A6D12B973B8BD2968CF4004BFE704F5D78DA7FA76C3EF85844AB2BE5A834399D6752EE9E05A2686CC8D7D21DA0FB9DEE08FFF12F67D8C00B282427BF6B2EB07BBA4BD03AD6A6D3180316109DF04FFF274D3B5D1DE199F0E0D2FDCC4C1C564D325200502835BA5B87B1F45A2BE36910692DB619D0DF87E5807955833DF26FC38492035C0E28104A4FB340A65867B0FE3367F670165910B5E50EE5C2E405A4734C6C3B876C132BAC2421EDB9F0729949709E2F380CF6FD5224C0EDC0B59792BF3541AA34E46F650C3605617C5BB4BE9D0EF916A19CE0AAC0D4D95D7EB3FBFDB25063B996B17898E5C30AA1FD66BB51883EC4F97F18FA08F9C52D6B04A7A7737CC010CB55B1B5A21BDB4699DC724F9C86582F5B86460AC2938F03E1621BCC7D2F9785A57664F9BE3617DCAF46D7FFCC607933B07E54C0E9B4428610A47A8944E0B39DF21B1983355952D43669C2133A829232A86812CD8F7835399C4C4998A4DF288E9F7DAFDBC833B34AE5B6CEB18573951D684FFB6F1934B365BC8DA92128ABA09603AFFF9B5BEA4AF539AA945A98D8D0D0A28131EC9B94463A5BBBA1976EB200DA8709BBB7E19536D3561020A9E155CD0F162138539A994BAF573C04CEA12ED781CCBEB879E4A225B520574E0D388DFDABCB2319CF2D5FF0C42B83345E9A9CC31E53FE4E5C149D38E457A01BDC4709934F5BF92778B7CFA3566B43982E54002D2443413BFA0C7FF1F4E65B3600C4452650AC9F1587A0EB40B8B3A9F4730AFA835FF7BF172EFCCCBF1D05F5F949240211F75476251D9732B9C0CBF4B74A1C3FE71046BF2A3670ED78C426C20B5F03E9D6F5F6C14F6EBBBD84E8EFB0DD14C708151413369AA711C9D791F440665F2B4C3946401926ED336A55B3D39B71B492B81C092F8603E2BBB72A1DD5A087127BCDB6EB3C76460888FFB0785E3DAD9B10DD01BFFF224FF76DD947A987DCED1B88797490232EEB89C4C1CA33DF458066449401492973185DA92A1535BECB93692A948E68DAE295DE905F95C091D66D135E0D91DDDC5E903799A98A3A544214AD343B9D87A26DB1010B70CA61CFD8A6B5C7F4B10A032973D8EA383DBDA157D5EE2471352BB0FECD17A421D55F92749765D5054A45D9E3D2BC73FF54A29BD6057CD6569A9DC577DF85BC573D0996669C42533C42F5EB3248310D9AA0FF2A912B4516DEFDBC5A3974F7FE59BA9BB5AB54104028777DE21F0C9568AB7228F78792052F736570C24481F19B535FD052E185D2A219D478D933B20E8B5744351563A3016C6468284A2291508BF08E297C84ABFA2349B5909107EEEE57577D430A89595FC77D52431D9DF7996F7F56F8030A367482AE8DF5843B1569C772B0BE6980139F92B77375E5E49AF9C3138927DCD0544A0BC0B64A12B2FF22A2732F10D6307AC15BDC884795A9B92DD211E54C5D20DD648A764B9DC100F71C00E9312225D639BDDABBFF31F4FDFD0D8C0C0A642BCBFF8270F492FF07CAF06E0D2EABA5BB0E57C04BCC57043CAA40FD502215846F840005DEF22C1B2D6729F8819B3B6DD8D439B655B2C47F39FFD7EC38F48D52DF76F3ECD59CCBF56BAC4221A8534FDBC3F9A0331B1561F268B612BDC6155C8726F5440AAE3F4C05DDD325095788C2172701E6C122215EC25D61FB0E8352240801BC3CA72FA5BB2977F5AB61F72547D024CC224DF908AE4ADE77A667C98548A49BF419C77D254A70DD1764C5BB6787339DD4B40D1AE94F99649B075479604C8F31000DDD9799646717FF4C38D0BDECBD9A109B2B7AD7101B032F94FB7E63AF89D2A77D6270FFBB2369588DE3DD6FB6C28DDA4D6AD7CDABE42A5D875B0E67269F2A87BE01D265CF7FF5B15881A45D2F379C9AE8E8957848B0804FD9959D0642A5FF4A790118FE7D78F26AB34B63338CF3C3AA6ABCA7BE59561E4EC77A42FB5175254E85560045819EA8C6CD0A21F30782035E9521E019215AF47D7E6F530B0B25D3CDB0238483F1B086598D0C67C9A70A667CC1C10ECC09E89B976485DE22E61186C6FB8389FDFD3584E5573AE25024883101B60114DDDC3FBCD557676B839F7A2A9E0DCB013FEE4543C9190309B40CDFF74DE5FB6D8720A56F5A99FFADFC418FC179679AEEF186714027B106294DF72AE71988C1F0AA8446C51F462BAD85E21CA379AB2D94CE81D7F4D1C4C796F031558B1626F7E33C68FD99F08534821FC2988F002506EFD4305FFC130DBB905489D6626479B1459317F87A80E1150C754F3EF27548C9F250676CAF920E1B40FBBF7EA40BADF14954BEA8D152723650CFC2F5017D648133522118CFC7D9B65557A1CD7AE89158FD6A308A716874AF74CCF15AB3F51B17A7F2A91240D712C9977937B6485F309245478D1A0125A0F824F82E987CBFD8800443F32CCD08B32FB55016D504DE71463C563AA131D9674298F94C40B47A2FA2B56ACE7B4D6964C46E795347A1D61012780A4F7AB84F55632FFA71190CF15A798C3B8BBE6E337B5A7F097CF6F3D5CD833D55C38A216445FBF433233D990CEAF0C9B7C45C8E094226E326B3CB7285D1EDAD3D29C95B39B4269530B34A8012F522374421B9119772325F1AE9384FE4101E03CC7106147844AD5DE53890924123C29E16D012DEAC5755E849C0EEDE12AEAF5FC8A059A8F6634400954C0582DEE68EE849B42A33A39204252D77E32237B4564324F4631BD1E6BE3861EF5723CFA96762B7F8D86DFF826243318CA6194A3874C0FBF817C4D2E1776FF092B2270E007E2A8879E859BE6FB98EC63D1E62021D6EE2877FEF1FC745F8437C6F6D66FE23FB18EB1A12E952C81241416DABF63C20AEED32346F0BA96F2F04B345BDC02DF2779061011FED43484CD754D7F48C997942D23D60F9103AFC46FECCC3B0DB178D45F04A7F9B36A59D7997736ECDF3FC79499636BB98B932BCAFAE6DF682CB1A44221911845F8A6119BEB4AACFCB839824390696D74BFA10496FBFC93027BA7C56223885E56413BB84990A21FDEA33F571A7A696840265E1CA1050CB9A293032225DD140A38926AF35776E50D0CC211FC1A4A07EFCF1E0AFD34051CA3A75316D308C66818F51BBBD61F9BC172EEC2702DAEB2243C8DB05F362AD93D615FFEC337A1D856D767DCBFFC0C1C705A6C7811B7A83BCC830827D6A549DE6A0D565D1E83DEC9E46CE25E5B652E7ACF020373E9DDCCB0BB3736A9B64164C61C848F9C7DBFC1FE3FEC7C29CCE03E37E412EBB1C477F66FA5805925249950D18DEC1EB97F8A13EB13BD7D96F6D8C4D6B0E12F5E38DAE98E96065782DF7EE3094F0BCBD7B5CB4CF9DB0844D24AD512A21311F5C0B6376473E3AED83F4F1DB9B81FF6ED2A41068B814D4C58D7D3257113D0426506C37977FD1059819EFD0BE7CB72A8A76EC12268635EDFFB9E22F4F4168DFFB294E088923FA586CA1BFE9FE27F08C71F7B94BD6717CABE2D6134E3CB43B1D9041CDCAFDEC1E9EA56BD93DF544D18F1F1B110481B0F7BAD2AB5973476F96AAACE2AA29E9D905A11E7ABEA00FBE2C2AAF32AA5A5AA00037B8147A341EAA509F91B20A89200E9D439E4BAD86B5B9B140FF0CC94B21A6F303409E8993CAB97CC662A305C86EC5C54A8563FC042D9C1C20F95C6C69A962B9B8967FF7A37BB8306E5B5A4D6D0039ABDAD87C217D0E4E898546476200C70BA77DCF43090CE17061B8DE60A45794242F995AF70E63BB9281CAACFBBA45CA3047B028A0268618758DAAA73CBC3504149242A64B89E09DF736DABF7F980D81C9454CBDB993786CDE0D426A6587323FD6606A2D302C91AF3159CF85B785ADBF51F3DFAC3070118D270444677D475D635AFD1DE81602EB02A003783998C9F482820A88932F4E888F543FF89C095F23D9C3A14893DEDA40FA3689BFBA69FBD553D75D4B37496C6C81E4383D67226704A519B352F6AF5BC9509E7EE958073D89D257DAF4005846B54DA1E782A856E1F50EF8EF71B740E4099F358F4B19B4D2A668B96253F0573C7E003971799290BBFE725BF715CEA581248B512D217963DD2FAE1A617F93F361263EF6548A0DE1AAAC658032B6C8D6FF77B12E7AF9EE60EDF3190C4CA94E9BC659FCE709B57DF167DD45CC7EBCC55091F40214AF92BAC6FD6EBB770F85A7D71BBD32DEFBA6934D06FAC12171B0AD53EA2D1DB9D74001B8423837D1DA3DD424D32D7BED4C58D045A42092AE52B87C47CA6A9D8C60935F0AE2BFEDD44B30EEA4AFF786ABB0FBB2EE86A12C4DE47B7A7C343D3793F8CEC3ABBD3902299CABD80E15D7990A4C4ACDC24E5ABB96F3CBCF9E6F206419D43D12D59F467E89B5C87B89B7C2E32D3DC1EBDB49168F0737561C3FB30665C6D8500CBF7E477FAF8F10B15D0E113EA11EACE1AC3A2F55F7722A4AFD0853C954262ABA1236064BEB13477A532DBE6521B83E7326C89D93B4EBF057787E378D7F203EA849EDCC86145E6F083521AA896605880B4555FE343F2B9E52E963069B9D6485601ABB5E0C2D9A0E396E3A9C65C4B0F58171A90F89CA34138091326FC0725039F59F2DA06A77071BB9F0E33D971F8D1E4B754E2CE532778107F0EDD46C62275609560271C7654C7CE31827A9395B55639FC4CD4237442FE18CC8EA89F0E0E7E72565F6768B8D509385E4CDD2DB413A4E44E6164A5B7F9A012FD936D9A557C1646ABB7EECB84F8B44A1151E2CBFAB64DC2E70DCF37DF1BB7C80697EA6FCA5AB373B32074CF603F845B14AFBC085F9DAC74604D702D3EEADD7410B1DBE67B8D76C206CD36AF3D365D31EB74EC1B94DC5852E7EDB1B8131C3A5A78736D0CE22CAF5D87C2BC3727AE3CC11AF401D07D240DDE37F8B3D0C1D9AB9D8B46808C62670EE692226E40E6FD009514A1DAE6284F34ED5C066A2A11F7C7EB03EC82C61108D0AC1BCF5951EBF579C270C82BDEBCBED6DF2692F7D3F2B6E227BABD2F90E8C8295275417FC07D59635F0C2F67B3F412AD4EA8673ADF43B1024C5CEDC1303FCDA4309DFB8F3AD9FDBE3594A45CCAFDEE914721B03CB6AC686056738F47DA0B063D8ACB04CB888F7DF121A77AE49A689A1270E78F69E1B7C6110B27305602313DB8A18D4135A9C092BF94E79789840A5EA8E4C3FBA97AA45125F8D50FA29C588A21FD5B5419FC8185C4425E5D01B228B2E05D5C1703DEB89E6631FB7D01DF755012E257FAB00DB99D74E9BCF48FE3287F68B89E5C75D921A104D906B00F86941573968D38AAB12791EF1576FC50AF4C4535E8D9E47CC16FAC92BE4C4426676DC3C3DA56D5619C20A6C6E3F8ED98CA95FFD01766F285CE803F3E81309079CF5A5EE7EB3BC13CD4D99FBA73A5AE4FCE396784CDE975FACE8A0D86949D4F3814E6B92790C410A0AF975A6E893479BAFFB684E25D56168F1B006328B9161529E5AC887CCE6F1ADD8368C57988925F6E5AC71EECD1FC98F49AF9F03D57DD940506336A9C6152834A0F5BC36D1F6C1E8DFD2BFADB2A34CA9C241ABF8539F8698F4A8275FCF9067C40B5BCEACCB2E4CD724385599CA6E051E46FF69BE22E35B4F9E426FF61D289F9F85666CE9522B45103BE44827CD418C805AD37B41926B9D70F67A635B75106DCE52EF42C78AD89531F526E4FB2843969ACC96D87A8FC6DAD109D9A6158EFE3D8AFF9345CBC6761CC400D04C1709370B4758346D16BA7B43870ABF407D824D6469C5524C9DBA7E6CA1FD78971A0FF08A1C1D0951C8C00D627E433805FD4B6FFEE1081FFA948743B7EAB2E8C0A77E7F8CD2FBCF8D3359C2701494C55C0C41C6ED96EE595B24F9EBCB8054F012164604A3601B11E8ADA961D0BF0BAEDF1D80E2632BF5153AD6571FFB1D9783E6174777BAB998B660BC0D6D987DB55F23016DFC6BABAEA6CBFA1008147C64037D4A7FC1FC2D072D381628B7321AD0E142866A543C8B8787DEB814E91491582C36492C70BEB087C0314C07C1BD2852EA1655E914FF1FE1C7CA1CE2F3D7D502D719CFAE8F152858BC64C5169376C91E68188D57800C691C6BFA2DA70DE63EED65B209244D2D4C83B7C49477E74AD3FEE7CBF950BC34D97968F6BF476323E050BDBB59A0490ED0211676F658F06A682CAA73E1E72C0F2629735B0D8699BB2C4FBBCB09A72717C6D9909B1CC0A40D5731EACD3243A9AE37CC6D800FB53FC468A99B079F57E4B680DC428EC657876835CAB66C7C5B3FB1334098969458E68E0910550F0B9C849E18F31D912FF5849ACD9C466E8433ACFD235657E6CFCBC313B4709E68A3FE3EE5DC0967E6400383C4319C4393C40797B6112BF427076D1B74AC445EEB64AF0ACBA9038DF7D1D95D62A1963670F38B1C6A080BB941252B820054B3D7DDACCB7AEE498FD4606BD968D4E516104E9024F33698EA7967D8C34E4C1095E02FD0B801CC9E2F1889D12694E57A9859A48C9A87E8C4FF891FE0093D9F56FE4921EF31BBEDE7D304D35EEA8436E747A60153C8986F8C370302DCFD3639D97E579744ABB6207A7DC2871810A97EB55569D0245D95169211A429EFF74E7202F4FD7A9A8C1F97791264F4A4AC41BEAF48EAA30A645BF7BB312C0CBEA42D5EE0693F0D06CC7351FE9FCBB6754CE78EC33A09CAA6115C0949340702A51D5528B01F74F0D2173BAB1459249984E843E3410598FA65782E014B54065A1FB12589C4CAEA874716E55BA234316415E505964487AA7B7B50063937F58D3499B73E24DFB91352F92077F7E97BB3B0EB1DB705C76F5D3C37A68424CC20A6743D8CE6BBA301D6FD286FC929EE667928C43BF2F0C2D75CA624C540143A1AF2FF46AAFC8FF3E3DF8E18B72FE08412BAF2700AD7E76AFD09680F934D1582125BD2E16E51AE3E1B70F6E359C3AADF203EB7A05FEDF824F0B73718E47E070277548164B4D64CDA34121361A02C145DBF5CC6354F4E2AADE06D7E9C1807D29BCA35B9ECECC91A08BCFD832941272ADDE87348619A6FF475B5A2E65F207730C2FD7061DF523F85914F9806D271224B9984C1E0FB8C909DD97BFF2C2D5499B154D6047D0A47F2648269D59B1EAA45445549957123B1FC4ADA2EB03ACE01A7256359D827F51E088BC7B524180397A2B47C1A86D380BBDDF68868A09C83C37639DA8EE299D9CC81C1F74E2F0E9EA338B272A2CF441F6947F63821EB8EA0FB971417438E9A7A6A9B72519613C15CE0B153C8C3E26471B1F0F381CB0490E6F92979E97849A29C54C44011FE04CE774CB1D16865F33799FE41C330EEFA60F1C264953A31AAB00B98535B7CB6868677A591ADF5F4839F54A513F396EBB6030D233DF5B6BAF1A5089497DD1F3174A093D006D5DBA6F011E98B210F79564D9B9CFA4D3CE38D66BDD05F570DF9231B87F8F73820F99C148A465B4A0E8EA484E87D238309FA5FF52919106AB3BA9C29FFC8B6E90D14EF47A46C5DD39307B61D1CF81278230D0AEAEFB6E1E84B783B5497FF39BDD1AFCA5527B58BFF4E3DF409AA9AE3F18A80480AE4DFC62DF2246DF999614349EEC928546690D595E79F1FC40D7E03BF3201D2A4948365D93C787449BCAFD8840A6E3580E9F51069E6AC58E50871FCADAD90DB77B5C5894E2DE883DEC38D8F1EB4AD90C3F145012C8B432DFB3B2DD6E4800414C209425E0879774E0E3D066CD6C4B9E7991E72739F6977ADB3A6A1DBDB245EE1F74EA154E3877F9250A8FB74AC8850A7693A5CD76886046F34E1AE1BA2171C602DFA107EC099D64EC1C0637F2D9DF2B2CF27B032E49D31F7803B3A220217A25765C982DABB33E120BEDDA99D4B821BA624F860F0B565ECD6875E70F9AD1BFA516F232037DB040BCE0BEEE3ACAEE95A7DC40F9BDA105457B5983754459733217EB646DB1EAE5E49AB9FC3B944E0021BBEB36CC6A60864E41376D9797B79D0F028BF610DBEFD8347090DF530B580431C43CF7DE7C627555E60A4860F898099E67B7B6EDA086A23D789351DC0C23AE99B236942B3ACE3F5BEE429ECFBB6532CED15175D4D9806CE911064D32C6B08AC746C9299134E61579ADD3FF22DFAEA128FF53076B3C29F3D73640C7FCB1BA5D73686A57E80DAFC1BF3B08B1A1E76CD0F132D7D0E6D7AEF0B1E1C6B801ED9D7831B0DC0BB8275FD32BD38A36B7062C9D4A5F752EF8668EB8B02BCBDB2AF7ECA8644E69DEE79736903AF754ABAB1B3CFA112EAEB66FFD427DDAEB7C8510A263E4C253D6DBFA7C1A9868108987516A1405C8A080851A1ACFD6DBD5AE6D768B1760A29C0A0D6ED355CE23093D720ED4E9529FC0BAB874D5ED673140772B78B238DF57D4AD97243C50C2149D713FEB9F67E25E291A7623225449AFC1398F968B148D6E2075EB7A3189D628FD3B0DE397033A95F289C453E50A594152D9533E1C7666BA3371173740E36BB5B788EA12730D7FC5CA489FACE5E14F2654ACCCE4709CB3493B16E0EF8D5806C642F3F52FE689E7018204CE36979CB8466EB45C4787AEA9E3056C5F0B4EFC5285035F3588E597B12F92718677BB021E416C166A3F29AD9700B488476714EBDEDD845A20DA397DBA09B2332C86920CE9A411E36454827468180303ECC927BBB5DB53DDAD3204F11EEC0427D559B20E6E891E7C7BF98FAD7D1C7F1ABF52280EA063FDA052AB6FBFBC69698AFDBAC7A289DF36601E159E00BA3BD6DE9D7FB7AB9685AB809E0430ABF456A8EF68A895B5CE8E38CB1343EC9DCEDA45F71ACCB27B5D1110A7292F7F6B6E5E4BA651536B498F826D7E1BF29F24ACCC7F9E402D0E25AA3B261EA69B3BA7F30C46A15BDF38128BE477EAE6F2F7D01181832D6B01C6C70A8DA9A7AEEA1E455213129BDFF8CF5F54CB4322EC0440EF9E15B11E3005F3F89572E29F77E4B79739175D41073AEEB337198F9B9E076F1BB8379A55E8C1ED3536D751FD697E94A98D4905321FA75C5CAB1B6973F792786D78ABC188156A439974CB7F11BC9C775089D49576ECEAF1CA8E9E5545501CA52FDC347AD69D02EDDEAD54A34782C2BCF2F7EA0011D359D13F09719A48ED4954792CDBAFB246B2A38AAE1F010A0D28538EFA5F1840FD296270C4D8AB0FA224E53A0D213E755C96B37D815FF556163616C29DEE8B26921549A51FDA1AC95A49AB0238D5366756DE0C04E649D805B541CF515A8D677063482AE6711F0328822988D19E4CF61D6DA62B316673A3D14D206800C7822BE4025F9E45B5D542A0BD673C78B7CAD449F645ACA112198A6E60D860E45B10945A271FE93E59CE6FDBBD0AD41ADC950863BEF3B694561181A59750EF026666EEFEF02937C420F9636011E090A6AB3D701E74B1B742E2E3C0F4ADF743925CA8278B4FE9FB80FBE34E8FF195EBC82A36EDBFD56A5D0A078C783B429AF97220B02C9512A801A369503BE9CC49B183DC8C132E94112DCF079D9E9FC2A5E57D098A328C39699B72081D1B31EE9E08C0A5CB8A6FCDF6EE1F940B75D8DBAD9F775E4A0B924462C02CD08C382129C71295AF0369FFB5E24BDBA3E596943D5E4D3DCCC7D4587C89931D85050A3B9633650E547E58C0A6E4E094B49E2A8590AF0E1F918A31C577E8D1CB18BACC669C21D42881102FBDA9C8EF65CD3006FD9E41A72C2516A216A4DCC744C196954CAD30BBFF5777C5350E34BBBCF8133C20CB1DFABDA2732F9C04C87D291D12CB80CE96F762FB3B3C81F1291079D3B518A95E4D48AF2D316AFC124D94789B6A1AA15421530F9908B40BD87A4EA0DF6A2EE2C6C9EC830BDFE930ED3DD43A75C7282DBCB7974B5D8C7849F4737C5DBE12585C6E30B325CDB9B05F5B023C534CB0FB5AA7CA2385E54FC7238B6BEAF7BF7B3134174F70904A3C11D40A0A6B6AA608FC7CB73793831F1DAFC1C6732227DD1E3BD8F1248E1F0F7946B29992536298B4B008F40C549C55E485E370A1094C31481600E5C4C1F371316505092CE1366C10C88075DD1C218BFF7878F140A964E9DC71C4CD0A860DAD98F70318CB4C68FEBEBB6D10163E0A6B0917C1880FF5F252D2062AB4B0DC9CDCEB0798BC3BC7395D602573F4AB0C9A5E37E69BC58E4F502234B927AFC20FFB487627D10C6D83D0C13753B94CDE2C21884BADDCB92F9B3B2437BF1D5379E3BB9E3D4D08831908180FE7157215BDEDE19703BEB985CBC14272263FB1B1D288AC1F7C1C713AE9245A364A825C3DF3958A27DC958F81FA9C0442D5D3C6301DFD8D84E71737AF7F30A00E89C93A706ABA33E34BDB168D0948F621454213254D8E3DEAAC945E78D88F09D435A0506B2AB3FEA3B2127D25909FD73ADEF905286EF1F4939C77CAAD61D54B9B7A9468A4FE952CCFF742719250C07D976A9BF47B09048D2C7F1938F8908CBB934CCB72A4DEC2565060C1EDB830698BA839FD131B1EA29065E6A1A54A27F7C0D5C181DD8F90DBC75FB4D7F1F3D0C4E4103F501421093A357FD01AB43D19795E1BCD4C4175C0C25A1E318E779963E962F7254CB4F3A684524E9BCEF70F770EDA6FE59167D803AD7101556C21B8FDD414069B6E411D4A9EF26E2B61C59F2CAEDEC7349C09865F4E45434BB35622E0CA804F414E815D6D20A34DF1C630AC7F0CE5588AB9AC7E77DDDA5D5EAE63F024E0D961A1E59E8DB75D9E1E9FAD9A23B41A1631E7DEF26BEBAFEA6EAB8D2195BA2D588D9F73042D7E908C256CB12CF82B980DA6951208D5F4DDC2D1EB4913B62D4218187C265C7736087B630D1FE49DBC2B87574760CA472A68A28C52A975402F2EFC9667D61FE0E63664F1A15F0AC495EF4B3CD31ABECA26ED5D96E28285627A1E25C98E59400CF90D02FD30766A6B81674B0B3BD6473C3747345B3690F2D875F8B1D7A652E837C3FB4B5740F414DFF38CDBC7CE63D2FD4CF9F46A1D2D150D8C2ACB903BB2E2F91263F252B16AA579A05D2C4098B914212F17571A6E1F8FB0A134CA76AF7E92F2FA601204AF9D16FC614D7507FE0753D4CC4D8F8FAEBCF79EE536632BD3E1AD6121901C551D46111CE82CB5A369ED6272E9E3661F6828A45260287AD320D1AAB0FB7AF933289E81B36EEBEE5D9FEAB7678F9606B1D7735A0A6FD1F5FAA14E6D7E72B81BFA449719CE127413F839DF401D405F80F2BF1815D1F3E4585CAE723603B7371E67F376022C91E724B4259528A3F140639552491E8C99BFBA0CAB50546D643E2436FF9E48186C1FE87D4528144A47A146ACA5651C678465A3DB4863FDAF12186B257078A390C0A14781280A024FD169A064630232A13C1FDA4A38226975AA144EE255EE0E478A213462DD79881E0A4A6F43089029B3C52A5E574932CB7FA7D75E3CB6B6D550DF8D9605B1D295D7C278FA7904B29AA1317F1488C7FFE96B4929EE7C37E84FD75A458797801AD1EA5066AC4D98B3B308CC5318A4DD406C7C6E80081561068BFFFC81EA3AF0AEA99C8C97B880D5768DCB4AF3FBDF729302743A7867CA7A9D594FCFE9351273CBAAAD19FFC776DD557E6C0AC2BDC1A27F4D83DE3C572B0B8C08F57EFCAC052128B2A1068A365DD2BC1FD2EA535BAF16563A88DB2C4166D09C175FE4BDA90CFF12898E7481BC296B9BD339A5909BF65CB094BA79B889F1FE17EA23AB3AE0F1C0CED6290C4EE50F9E29BCCF48ECF00FC30432DBCF32BA14439591A42534072982FEDAC250A182F018222B56BFA0300374862FDE40AE7DF1FB94CC8507C3497E3C8D80983A606CC29DF33B59EEB1BA0868369497EAF3E7460029EF38DD3C9E304F0F398E99B8D87EC982E8AA83BC3E3DC35ADB1466B4CCEFDC74405A531A924B1E4C02F0A7369CF00089F34416B4668B7CD4312D8C395570670889A53DB43D8A3D8F0B86656BBB52BEA9243DC270B4913B3F9F545898177B83A81DE1665E1366EDBD5BD9B64486027650947FFC9241D8A5A99448546311AD1252AC27BDD0C63F906910DCBA26B7C16DFD54231ECEE46AF5F5F1960BC8D65DBFB2D162194108C6CA1849F2EDF9F5C79C9F97FC6EF73D340F8B0EB1F2CDD2025950BAC439339F38088BB76C86617CE628C8D7CEED706DB17FA1E8B129AE450C3A01EE41CFE958DAADA9B1E9383F2DFE18898F910FF2AEACD3EB869F33457DA1DBE99D12BD5240AB122AE635F580687AF0551F34E5C64B7A5EA2FD2811E5BC4AD096A0B3DEBC032C269428CF87446D43C07A5F3E25F89AED1E8225CBD20F2E120FDC454281C0ADD0E47CB34BF9B620CBACD71E64E23FCF0DDD398DCF73AA17F2EA985CB6E2DCE00A51597F0B1CA02D0D617C996F8F0A2250E68FA7866F2ABAED21DDF258FD2D7C22AD27BB68C242D2C374A93E8BB67011D47813982D6EB24BE53C8A2DA4B491F2122052236220FB7282B7E65D760971A1522757B32716E99CDE1B8C9E42E75A84230D29177263931885A648F5FE0868AD30AB2CA850A51118583C4137BD2508ACA0F46A249A05A2622C5D9DEC3446B5765C53B9CD8A5E2263D0F35522F79FF5877A1C9FFA6E13A82E94D55F427B09715D57E4FB4CEA4BD63E313FD1495B95192E29E227C89B9040A90160EFCFED6C9F1A50AB6D4DAB8F6684D73619641C7EB2037BAFBCA2CA4A3F89B3DB37E949D29316730C61CF0C1368585796C15BD76E1803556723C1D9511B1C90DA85227051B8EFD7820DEA5DEFD67773B4D6C0E32EB9AF74DE4AECD8D761894101A12B2B37DBEEC77B573912411E3192561696EA4D1D24096B350364A03D617553AD6C21974551A78C5AB9680C06121EED630BB4F13E803EA3FC65BE3D8A7D56FF67E7CB84F102DEDEE56F38763213CD781C70B5B1B1DCFF5B2462AA03A2C43149E1797715F00F3E6693DF59DC9B1AE5FE4E63F1BE1D63FD3E991BD09405293D557ED2E2E5D76B83E1563D3F38E8A829916255C729E03CFC0E827D332CDE008C6A60307FB4A75593ED424F79D73BA9C4312BF1BC33F1450847698549EA760702D4EE4A2CF321ED6FE27D90784E5AE36A856B0E141F08F091B5FC20FE2CB2EF66C6A59FFE02BFB0F16B0ADC20EAFC68B1A6A62CA59E8F94880283897A2E89E3EE031748214D5AD6C4C363670F38B1C6A080BB941252B820054B3D7DDAC5CA8179653DD50F55079E6E0121B0544FAD86A64FA3D4F12ACFC4EDB7393D53996838EBDF44A545205919098C9E2A5BFCDB9DFFEC62467EAEE3820B51555D89D43810B61AA3E7686CE8202B8D51D029A14B985FB09548AEEF11683EA70551FF77503D19B92808FADD534D05D473AEEE02E2267600534D07CE92E1E6D586D244A24CE89B8BBBC3174EA404AE8748871193E5E1C3814DEF7B8855F0B3F0EF636AF35C631182ABC974EBF6709CA5AAAEEF3471BC99A9B0C93E41DB2DE1121B8391735EB42960BF9A72F8427FA4B62AF63D3AD3DBF79CDC8B253A1FAA8A6D225015CF658150EEA60DB702F43A2D4373327B7863A95F1551E458A4C61CE0FCECB0B1FFB686D3DDBC5DD8E51010E3AA0910815DB063BD11645C24D942DFCA27815A8E2882EDC2D9B362B1BA041D486B483E4D05516837A09BF9FA616063790D7496315359C6EDB89EA23BBB133D52B6BFE47F3630C697E5D0A12B5BB4ADD935B512B8B2660549D6DEDE34FBEA77AA15BF49C0F35486A86038BE79D693969FA34EE0E0F9E09A834A5BEBEEA11D534A39FE3F80641AA67198122E46BE8F04ED0F7B6338C5759E90F62E717C3574CC7D3D57BFB9BB4F72D8D6B92F7DFBAAEE3C8D4C364B62093C1993A9172D42EC6A253AE4DEFB4CA90AF98526141C5689CF03A527A4F3027B7970D2C7AC0E664A8D15EAD0B3EC80B5CE962EF81F7C02502F4369ABEFD7AEB4274E4CCAA0A5508F6E0E34ABA51A4EBAE58CAA5EDBAF95BBAAE3972C838623D0DFFE902589D82ED736601F37AE1E1B0EF9E5A7FE427A06EEF34A8A9892A4D0AC102C21CBB19EF8FAC978C8CC8D69823F2401488E5F171FAB38938AE20DC845A2648CE2B973D69F44274561F774C16DBA98D913AB3604117DE79D2131051DBD52EF6D3BD17FFD0AC54DC9C9FC15EA029210AF9A36EEBF8E2E14580B4F54FF048663F935DE010A9DC51DA97541C7882C84E2283AF7F4E6327B7B30344FD4DE11524053F389A46FD158536654622B6341D637A101ACA1D226AF9CD963DFFC86569DC56F28B7C3B9139E32E2D3EC041295059964134E3E92073000F8693784655462F2538DAEA1FABD399D2C4B70572AF77C37CD77F61D3738CD6F4FF2C093F4590A6A83D0534B26FBE27A05F88B81048B28F82A7A3E40129A0DDCC564DF244C4011D84D101BBFD6CE76387A8A5A0FAC3D2C578DE89A5D4B29FCDD051E1BD30E78D7EE3B6A3AE02890DB296037472A341527615D771324FF6DAC9498A1D5FBC5E6F05FDB6DC3B185B31F61BDD021FFBB78B52E2428E3DA658AACFE23DD912BB072B878B3DD6FCB9A90EA298CDE2CA45227CBA95D010A83950F1901667204E75449BCC20D7E2965017E1280C86DFBEB5B16760824999BF949FD2AABDF68558295A14B90E541155B6D7566E117F56CE0C711D89FD0EF0093D1DAD9F568AF97353810A976329A17589EC1D22035F8425835E2E3CFDC01B8DEFE9C5468439ACBB9EE097BCB403F811D57769C8B90B1AF4B965A5E3A028BB2C51BC87BF1BA0F73FE2DA4B5F60B0CB0ADD20BC80D6FC3CAA8675024FB21D64EC38ABD51EA2BC1B743A0C72D8ED396CDCA0E60C47F260AB31226A220F129E37E46795D7E8FC6D20E5B773F4F3DD507B7D397045457DB729A9B06141959E4BDBB6C3355B272F24CE8790B1D2A83208FF1FEC695F6F461194644872CFD42644AFB21A20757B118BF8C4B55B02FE902C0E6EA73EA27A834B2417CA375F654C5487DA8463A41444736A7A420C1B386EA70D0FF5F3C6CD27C8C7CF25C528F61B1410BAB54AB1BEA020DC9AF52DDC4DAE2991649AA23578713AC6D22B912E418EA73577274D0541B5B76B3F29F2AE1C890A0843D0E647B174A22D71A487A906CF466F067D6C677FF652A627E1EE47300646925F4859A3A5066A518E1D361C67D2D3A0E81327C959BFBDCC16B51B66E53B6EC45DD7C345F2D401F2F702491AD15224E01E1928632A084C00FB89B67BB4B93807FECE08A8769F668E0C934017BA635B48E7FCF45462F5B5159980DCA99B1778C45F0FED7D35E9BD5D6C7799E83F9BECAB061F6117366C0FEDC392965DBF727D3D64ED7741F3D8B018D48BCAE7B5316DCF74BFCE172CB7AAB3D8F496AF4BE325CB23552BAFDBC9E0A949214D5D304F03D5F3E99FC7F215762AA5D2CD519E0949584E8C30297AF94353B00D40A26E1F5235A2BDD5732B516FA6F01609C281B97852025C1DCAD4EABCCBF1F054B228BE4295129D2583D0902C1C85CF835E4ACC7876CDE634D41F1B2E5B3FE1A2EEB0AFBB60BA452573BE036C2AF4C7CDA123CAF093D84D9284B20FDD357A416BD3FF7542EA8EFBFDCE516A3B56726127F9B0C22A128AEC2733B7B6A378D1D9FEBB8338B73565F5A885E76FA2641D6692E46B2661D9AC31CA80110EF6C989C80980AB3814934CC9488455BFA9A3E7C82673C99EE5505CA5E6B07661C3138626242736489AF13BFDD74450091D7B0AFF9B31E09AE34EF169A90308C3C9515EB9270758C017D51D559827A38452E2FA967D6587B27E4470BA7578B339DBEFA9A6521C7003C9620E1F6062BECAE1E59A1D6185E2E0036F3B25AF98E05A3218818FAB23881B66820EC1EA6B85B46C5A0226FCBA324DF46E18FD124C9A69FDE8504BB828FC20F2E314D26542CFAC28903E46D6617F1972CDBDB1245FBBE2BFFFBE2FB8B7E434B9507C629F642FB3A423500E5DCB4C5771F51ABE11A00D7026876826397BDD4098B12BC169D122438DEB8FC94EC70556567E6C0CB07D04B5BDB33EE4EBEDBAB023761860A3C580A44DC9BC5B6789965C8176FA3B175A61A181554B484FD3A0165B1561D1D002787331CE313129934785CB9B7921CE70F919FCFAB2234EC8D9C884A1E11751762383E6610E8F1FC5C3DFF8EDD0CB2BA6820D3883D8CB2494F0F4A2048C7386B63B813C6F6D75705BCF92D325F5B07EAD6A298DF1DBCF3C5095D4384F5E95909CDEDAEAC091A8AAC6C93C32B2E6820FBFFB7FE69D1C66D4D1F469523061F2F8CB9F34F5B6DAE6C9C9CF6F948E94BC36C801AEDA22E8273AB0F20E0A011E6F7B9888A42852F0AF345B57E4914FF860A4DDA77B354845440D4DD039B9E15E34D0F566ED6AF0661010CD47CD4E86F9FE13E4DDF8395F15C37154298010844D4AE145948A28909E9408DA103248687533F2F8F6F965ADBB7B12A9C611410876235B7D00DF0030FCDA6484F17688032787F696211C628188DBFCE0648B89484C33698F102ABE1CE6A28B179F2D1A22E4BDC3B3C7B55EFD86377A2018685072C5FBDDA758F67447C3C6717D9C9436561C19F6AC363085E889D042EF98378600AF2200FCC3E27DC290A8FB709E07BDFEC1A40374FB09BAAB3EC1C896486BD4BB9F3FF19265FB8C517386999DCA4582DA7127DDBDFB19BEB8F28EBDAD2A8E89F52AC1681A220DB64F2D2EE369F1908E76551B5D1D98C254B184B3D1F4129270C4231FCCF58CEF9C65F94720F02FDAE7C1D86EA21B41A9712B594CFE4FD5A2B7F7389638E4BEC4E901C5E7CF9B9D4F1895AA5229D71C6EDDCF0F33CD137A66E6A939CB0D9CCF526AC814F4F066B06625712FB600BFB582217BAB9510AA7002162CA895C3FC095C5866E9CC3922272FF70C3755846AA2A169DB2DB13F27E7A17F0F56701B7F6A16DFF3729CC2BAE4BFB0134660265C1B2CA74DF394BD96C97A4AD023E8087F7DB795EFB43DDB4585A41E55F3FDC4340A9F130106AE79CE3B0A80D5C9761989601283768147A807D1969E2951608E14ED0A4A4452C8A3782829B2F30A54A23AE5E4D11753CDBE3193E68C2F8CA5F58D04C98FAB203B11276A50EE966A145995A1BDBDD7DAABB62F7F7A118EE5349CE498E92093643F5DE8FFD2C8F97D1362E6BA180737EA651818C40CF2609A1FC85C58BDCAD47FDC3A40316C69BBA0730BD847C064068D477485C2A809D1E799EFB1EE811577006E735C1E93DC636CCF314CD6186A6E4FDAC6A35ACDD5A1A2E6B22FD5ED03D1EDAD0C71C8929C6666EDE7608BE9498D9498ECC6F6475D31AF092CABE79878DAA527544126FDB423F70F558A86AAD80FA327856D987B968886E82026F0661BB4C476D0CF1F834317642EEAE5A7676DA4CCF12148DECCB4EAE8C30240FEE7D47C755ECDB7A494BADC172D902EF073974E25B0DA208C6314AC10EFE968C1EF3D89862BE15D58DD2F01FF77A6A7AE509BC5D6C5FF09C110547A0FF4B8B129A76F87B859B5E2100977F6131EA6F55F659A1B1D211886C8EA4BA004DBFEEA2CF59AFF464BD4611ED64AF1F4DC9D29645C5E0A38A73531CCB2D556E08F6086130DD2BAD6331A13B814A8364277D8A7E999039A029DE0E1B445E4AE567D15A6A37D66FE613246370610CD83DDE3C9122C839DC22611CD9445563D716DB0C0D2EB3E4155720265F96C6D4592DDB002917BCF959DAC3B1F2F8F1211B610B774AECBA8331A05C52F3967B7D4C6600672199A2E26B60F402513B1DB19AA929FB411782045FF79B3E0A0E00C3E2E05808D40E1DFC23796D49F5887C9C2D4CCF71CEB1D835C1CC6F272745D6AA113A5E3010067E9C1D69AF3F537676921CEA28444E5F0F7ECB70720C831B3F8518F4C99245F96A3426ADBF5815AC960E18E0F6C83857E0932A5B4E414D08B16422AB884D2D6757ABD50E55FF1376A2CB2E8E994E985B1626CC7743C5B3CA7F3A8E37024B7651AA96AB48386AC3DE73C8FC7EB1021A2401E9E971834E107D1CD85491F0BE0B4F78F3EFBDE6B77581F71325C8BC24DB03507928B5E96CD3E13FC27BC61C189153FD96E9AFE7159D02BF33EA11CAED2F7D2773364A0B41988CE7A3BAF0EB7A8B76D94366AAAE7F23E9534101AEB0B5BC0A836265B899C0D97802B98C1E3C87146B24AFE8061BDD58C1BB69713EE7D3E56C98FF468C33CEE8B765FA22FC9C4FA0DB2D42D7B3B0B22C462426285B3A9537E02BF838F3AF2184C140B3A33EEDABA9FBB64D127A1F57211B4CF641232AD106B1F21280789C13760EB4183E562942FA7242C0235A37219428A3DAFEAAFBDF81BFB57412664CFF9158C062746003C35220BCD5E9C5A37B1215777F4D9C40E8030E8DF78E79BDDE261F74ED79FE2DD72FC1D355B7B13D4213E4E62F4F39E2863F5CBFEC763ECDA4C20766034EFAF7FAAAEAF2A8572528EDE05B447757838A439E9569C44B1F9D62D155863DC730FA668DDF35F26A126E26B8F46927BEE4F5AD9A8FD9E521AC9903FA0EA23BF09DFC70E4C97BAD4E731E14D8A5AA7D93919C08BF32EB21FBE536D36865F3DEAB230AA00B9882198F603BBE7759F2790B17AF852D8FA6E7809DEFE884414A61C98A9166C7EAD5BCCD0B911FF3984B93022D3F1230FAD028E43127F1D26B6FE8A806A9699465DED3A69416CF16094984EB166DB8C5726E187C4779BF3D2CB09D7263EBEDE244FF1E03B2851CC6D36D031C033BFDBAE1C81A426042F4004A936FEB092892935CC2E61B035ABE50657775365E796D684BB9A9BAF1E71CE23F65BA574CCB5D9252A0878C4E7EC98E10AA8349BCFD7E92EA1E7C8664AD464C033F19FD147098CEC3A3296BC35C1CD21E28AB22C5AD6ECADE18A0200E0134FB1176D2DBEEA06F9BAC206C08691550229239078860528DEA19D99F064959E2257FC09F321AA807DB03FA82443A20C80CB360821DED22015FEB4980E415BF17B85633B498F78616BA9FE9A6479DB11871FBE837A1A7BC255875DFE488AFB7A2AE6A8D3F0A114CCBCD7B0E23C10283D9561265490FC10582A9366773BBD2EBAF25E0D740CC85C6DADC34D31A35AF776F15133170D273E8B6240ADBB48FAB8B0739A3ED9B6A7746EB3974F0FAF7949C0CFE54985866807F8B004520331B8B56023B45C9EFA6756435B3FBE6BFC0C0E693B8208EC39FA527E01F34752F9E1F7CD1AFF80DE1F627208C3548FF383BD8FF49E44D287AB3493DB62B372447C1034BCED41013EE61610296D393873E2103E0D7511243AB28223AD13718048EFE8DF955BAE536EB17123CC59D3E5C23777D704799C59F0BA0CAD237997260BA7CAC86607FB1AF1A2E8D845279677AA2B3114691E9A4FBD49C580B3BC7F97AC30D9D61117E513D049233CF5610176DA01AA6CB0E0E1A92183F386656F53B009ED3EACC657099EE3A93C7207FD42801DCD1EC4AF3B225330318045E4B7CD779109D3F8BBE8E2A861A8623F231927A4899120FCFBB68EA585FE161DAB866A36F9E7C5050114ECDC9567CDC37365B51F6BF75B3F2440440811B001DD223F0B639F9C56FE47BC245F217EF21ECF34237F88A53EE8A0E14BA4C41ADD9E2CD90E8197FA1BF7807DA487D1F58430952455DD24E5AB05A882A3310D25C6ABA7292D9747C74D47318BB369F37039CE738519B85BA98CD58E0F4ABF991306203806C1644319B361564A69164C53492BD32EA3798A46DC7B5F0C3767A629F209868984E62E175F41A519D69E6D56039CC445774F1763D93C1EFE43AC384202915D70EAA4415178596FCDCD8CAB1B1C70793DC958A2A74D26456D90CC0E4C078CDC74796E7FA6E6ADA2895E728C32275F086014886316EC2D8AD03D961565C21FE08B8DAB6FC186FECD409020B9876D2A0464EDE00E1C2305C49963E64CBCDE49E2156B1EC3251C201F5AAA773354ACFD93300A6F98712A9F95B2936A4FAC740998B503556B66727EDBEE9DA24B743EA022CAE06334D72404C236658C1B31BD1A73449A2E794E3B5E3D73B2D32E3B612FDA8E65DC69AFCC0E0ADF1C445EC90359700809AB2FC116D97D06D4A8A9005A45356E71A7DCDB1F36EFD6987FAE17B857254AA7F48C5215ECA394D393D7AE2C2C9390523243A9AEC034145F6982A892E8308C35334F22899DBA002F02A1D6B98BA6363A2CA722733D308AFC310007F2CB2D3043F1BCCE1B0AA700519126AD111B7DAD31DDDA53699DA9B7CF2F9D323D911CCA19F262CC1E9FEA6053E08C6010BB4C0FF1C4112C1C45F3FA3B12A9D6FDF9BCD641ECCBD3AB522A7B3E26DCC459A91B9DA6C7007EF588E020FA7E3E6A05D55E379A79488235A3D533CB6132C66E141DAA75FA3015247A0EC71FAC8EDA023EA0B10AA904F481FA05EDABD8AC03B9507F7A59E2B0D53F8B93C98469C046E304F5EA1E0026A689A4F2E80456EBD1C622554A818A46BB3E371E0C3420F529BFEF3CF47D116AA9CC2A496FC8FB1BCF9195B33FA8984F92370EBB15AF0B00B4BCB8084DAF8960938E7EA1E8436FB665C1D26B7AAB05858281FD114182AC44456EF6B63A2B6DBCE0E8687E742EA78CE9CAE1F13AE8694D9DFF64A93E66947A96ECCEDDB7D36A04FA0A323C4605146D9237A8A9C8CF4C5BA482D98B6514B2418051A88837103F87EE6917CD366F0A3E91FD9152E5A29AB450262DF507E46EF9D471A362168830CA9CE202D79709162D4D720E1B89A0A90941480380C096CC44FF56E1BB1937FD0995BB8B03D1F7BB3F40CE6719253710E4532CD68FB7F14D27B13C1D920504B5F392630B251E35BD0E0E24F2D7B0D6C8CB2F9B84CECBF3ED9ADEE4B286D77E8A289313544C7F935F66F4ECEF0B708A4779599051872BAE751911FDD456BFDBC54A16B227E912F6B10F474AF4EBCAEBABA192A0E99FBB7A2767FF55274D2B9320872A7D82AA3A630C5C81ABF5D967FF90ED604D142F57FCE7B05DCE52510AE87A811E1B13459F40A08D2622E57C7D33480F22975AC5E91D22CE26D72AF87D7DE06ACB1E7F09CC90B124D06DFA726E9D446DC5F014475014A2BE636D264D8B8369E2A74BCFAB88A9FC4EA9CFE67355B8AA1B62740720DF4750E1B7FBB440F909619786E36C3625971839FDE395218315C56BCF6550F09DE598B4B95058C67AC18092B339E2DFF2E3BBB50188DC338419CA4D4B263195A52FC90C7D16C823B80E9D305928102D6E1C950CDE8A37A5E685C7A7BCB384430A8C93E2B23FB74F0A526F526D873B6F8AE5A99AD12BD145B35A4F8E1F49A75F9705921F5B43458F87C0EC5C5D0190110084FC7E9327BBD678665FCBDD6ED08E66A887DFDAF3FD60FB67A22F1E563F7D5C9727810A626DD4E42E634E320824179D22E2005232130D9DA41276632C72C2F9C79A208100C2480095BCC998A038195AC5B00420291C6FE350C693699E69D7DEB4403B640E0A47E4042A02BBE3F74AFFC51195FCA42B2296874704EA3C54588ABF365714A874ABA82F3834F02F501AD84AB310E9B0999F0B5073F694262F2A9EF4E2329B6C4CFC1232558F986F0889B9FF39C9A1EDA08E278FC1E395C7A9107E1DA36A5FF31A319FEA14A7A18C5FA860A326BB7E3D1C39EFA92CA3CBABDD3034EFAAF71FF476DD2D9DF4DB0A523909D25741E2453837EDC5F2586282BECF6FA6843F935DE6EA45C263C2C02BDFE653FC3CAE18B2813796D0AD2A734A5A9E913744740D69CD5E4BA95C38E7CE3DD898629E85E6A05E4486127343D86AA1D42FFC8325CAAE293300185A85B0997B2FA2F762DF37245C3043CFBD70ADC7F95075EB68DBEBB46F2EEB1CCCA8C306774B0F16DD0BAC726B315422824858478AD2EC0C6342BCBAE71D6DD204E1333E8EC28C94E5EB31E140E294EF189A22548D79E1584E3A4939C95B6CD24071475B361430B1923E41476291531535352D4896233522124855F4B1C7F18AA74A8081BBC589C34C3773BA179B45EBBC962F2DA2B1BB622038A4D92176B3A72963BE31C6976417C56F468CE2ED1B147801E5211794570F1881FFF15503DFC6D76A14FCD37C5157123350C8B1D5889693833A1513BB3E01E8DC3640B9B9F839FA7E3239A6705EDE0A94F399FBA57D467AFCCDD8C8DE71C5C6AA4B103C127C55FB4382C859F1512CF9669BBDFE6820372AA935BE5E43D756976575D23B60A3DB922607255F345F4A8B0374414B895439410677F9ED0020F47988AACCD1013DE88430F61CF894FDD430C56C357FBC1ECF0225CF1C916B3F60034C1629165D78D1B2FAEE678E9F72B2208AFF50E112481155C05A71D6B32D243E372B0C98013265229CA8DA91A9FD150C8D9B30205A04F03E8A5E23C934E55A9C9ED04C51D263D3974E6312F27C98BDF604F5ED8F7231116AE0BC2331998EB428E841E7A9AAC1A439CB0F10D9B29A322452F3B91BD6FD9A4A02A1D2575A68976246528709DDCFB28B89666936E1A62C86C1DEED84ABC1E04CF64FECBD924749AC1E6A097D9EFA2EB3D96882CC82BC4D858CDF175BCA586213E8BFA5F90C5A18B1C3A3B985B0B9A418723FE1606399E823D6C31F987B361E3749E2888B4963333E127DC1DE5101E0550D29A4BFF8D286E7D6C7538EE7F843158737A5116C006E0C174D663F4D9381B5624BBE6BB28E317B02E14A6123DE829A70894110ECCC8C74A85BCE6A5A864BB290449B5F82F9D7910B97E1ED2B4516B1A133A0E992B0BBECCBC82B17F292D01811310BC02DF6C566A91C928E6FABD17C9A9307734C13B8461391565D7FD16F344A28C1A3445E68D8D94B3BB5F2F7F9788FF4668425A3A1A8B41E5840175E216F61ED32C08874F3FEE54B79948E7544BC6C5AF64434392B73D7ABF73530A940E747F83129E90C8A8212488F3710587032B0F5E2F4C23C670D718AC82495F9B25C17CB6B873C0999800561EF4FC77884435DB86A6651D69EE9781C55E55BC21BAFC05F245BE04AC5C2AA88C412428A90F5A8E4283A565883BA11D0360F322C1F974C27598A820AFD2C8C967A659EFE06A68381266FA850B4C78F21FF77F12CD3E159EF88C0A5DC2E20A0FF5D55878E0ECA5564DA0EDA9378E7BDF945A430CAC6F9A8F311A5DEE9FC1FA04ABE021DC7BE23412C037BD2D99C8F2234F6BEA0F28B7B8AB99243717898B5CEA16161B845617EE990F67381F2879E6D383811497C083A6ECD3FF732FA822AF5AB91688952B5C39BD5B5F4FC3D57DB17330FD2D28259301CAE00930D6BBAB4F8E581D634665AFC85DE3D091C59866BFA28CB46113D822599B1820E11917363665966C25F87D151107136FD527506F730ADA2BE53BB029BA6F5CFA27247A5959201BA84C995DF1AB3963ADE78E375CE0181C8076C36089E302AAFA3233247519677B5299E210FBA1CA24C20198A6EA3159A6A8375F9108255BB9B9E9EC0EDFFB747FE3E5154B29642700B93CCAB81CBD9E2363921CE8CFFFF713DC2EB9CFAB60DCAC6312249DB5991F88ABC92115C5192C8A4B07ABFF04E211ABAD73FEE6C6490E1C5642CC56A43DE9070D85027053E50D64DF4C7763B229166BBE0C04419EA2E21B43FD98F00FC3097D77A3552FF83E9F7B28E974627ABADBF69DE5107F5346D625BA5164B08DA2F3187DC3CB005BDB05EF8A6485F11FCFAF23C541C4ADBE5FBE8B4A335A4BD905152ED6FF7FBCC53129D02E239A8490DDFD8141AD4927F365BE32127B569183D6F5B2C821BBC745A4EB3A3394525AE9AFE28AA90977420B8803B5C44DAE8EBE516E709E628795758D35420B65178A439F85A3D77364739992911A79957E46CAEC9C96F7BEB1D5147D869632AE6D4A6CDAC7CDA9E885D5AB689B5881758DE8E86C9F23B46A8AAE470EE1CA8D9947C83440329EDDE267FA50D104DBDE26D8DC8781296FB7CE72303213B2F165BBEB2EB8460D8AFA6F178C6D94403835F17254C7E57F4739B570A04F2FC40ED552922992F24612BA46F7F36620CD361D7A2487E05DBC216B072342DD806AFF7776F5A7ACC75EE1682C044A42D2EC8446A6161CE66318AA34A2DFB502BED2C4B8927FDE9709FEBDA5E41E573C4CB75900AA5012A0A8772C35A9DCB0FBC1B0DFBE8BB9279E0E4C1F26FBBD70B54C26A5BD192A7B6317C7020B4D9ABA904D59596CDC1D691A83D2695BB0425B6281E34F93276E9F2FE690773687E0B57C12A3C6D1D5D8D10855EDF009C041A0E2AE3E864A4C9389D0E9DD9AE830F2464E264989722A4F38A22AB9FCEC0912C959CD261B5E329E90D759786C28C1F3B7CE950D63A76D6138FAC3233924AB0173CB1D16865F53945FF674CCACF3D419B917C375CFE77BF7161876771866FBC8A97F973717BD63B547BA8D300F11383DABB7A7DDE7AA16933293490332DE9220688BB1BB06B4802E15907D0426799590C12AAF4F39317809AEDBC95269ADDDB6B475F6A8FC660CDEF8DAD4FEB4F925CDF59B6B9BADB25B113F8E9545CDE0EDBC42D80CE565FBC9010CA1B75FBA896CAE0778BE838247E083221B05EFCA7D2DD21EA501BF3DB5E2C1F052C2B25322C2E02FC9CE9E3D31099DA984F526D34E29252D291BF5811E5EBECE789363E710C1F97B98AF59C2817AD87D2104D2BC50650D50C9314B1A7E80C4286C7D157749665B56B5218D774CECE01FF973324A73A940FA74B2B08F7B3A8255DD10EBDC0B51F14AEC2A5125651F9864C5814C21375E7E6BAE0E784BBC17289D95B8CDF00E5A960F4DB01D98C4BB2DB0E1E2B0BF4D6BD096BC772660C302FC355A515BB91B357A5D48167B72D1CAB406F29E110921261D02702B035F62E43A9CE3C8CC65FFCDA8FFC693B28C79E16F378834308EBCAE7C639508271F26DDDFA53D389B7E5589CC2F11057B518C383F337900339487F0E77252ECA52FA83528EB57D8588C14679C85C2FF60BD1727A2B3A71AE8B17F03AEF1DADCE83DB954DDD3B8D688CD15716A787A3B4A8F4AFB953895D252CB43A96D0CB45F7F460718C1AB4C0B7BB1EFD1111D2D4C39CAF2354FADE10A153802A78EBFE098E059385D978256FCF544F0748A22E5B48B7C111DDF71DC73E2F0F7A1A26F2995EE064A58E4052C7540970D6E3C851A0D6656F07805A86733AD3834292D376A7EBB25C49AD176446F3CE021651B8173D5447355B28B4DCC20E2C9100AF8B9336BFA7F82B5FB51DE1DA2065C4B0933D0C7FB335744FB66E83B8CFA21FC830839123C94C4DA31E4A234EA1D2389C579F13D99B5C31D744BE8E42E20CC2DDCC83526A26B9379285DBFD9648BB91E08C659F97C0C354F903EA7C170F9F6B4EF85046C9BF5396EE95C4146DF307B0A167D9A25291042540764859D4536225C9B55CC604AF15467BB68C6820874F92A18147DF42F787CB0ED283E1876E13E4CB3957C14F1C54A38E1EF02693A8924B2CDFB51A0A43F89E85D8E6B5D3FFAAB345667D3D5A729D282C0EEA0978E3320C4CC14EB70B465E75638509466782CC7C9FB9DC939E23FEEC9AF29C2FF82226E8B33494931EADFE3ED0263D2D48D1BDEB47FDFA6FF8197CFD733CA3604EC8483DC7691497E77AA2F64A9574BBD4EAF6E9692F8F887AA8F7255B86059A9E11C423B533B9C465B08A48A3F31E98D354156D4B5A42351AF38F9881FAD0D901D2F2B1F02786422EFF3DF974276B8E90FCDABB3BAE6632B39DAB2E0394F2E21955310567A4F15F91E228FD5852DA2A06C8FABF3662DC92EF3E68A89848BCD6C1AAC7E26ACC934297478EA233AB446942177AA0595A9C8011AF993E84AB00074B5791DD6257AE84587B926226EAD0CC90533313423907DB787D48C138452EEAE27BB7609607A32C9ED4F0519A0F9C9BDA9C76B0DCF1F3630B3AAB48D5906AF51406408B3A4D94B68DEE72D1B3B8C4FD8F23A9A6139651D9E67B35712D0B30BE7C29F02E64663A4FE315DF8A49E06F0BA3363AB5F56B9273EEF80BE38738D50D47EF056AB7896A0745ED8085D80B4AFD1C4B7B0DBFF478E1D6BF105A0DF184F5EE56CB6981CF84A437A51ACE406A7C64FB14ABCB34A10C0CAC6097891DBBF49DAF8671D8E849D3A6EF9A8551B0B70FE08F601E0D05C8D2DB784E01ECE5C8EA7FE78FBB91A60784CAE4DF10E38B4A5C1962DCA0F3BDAEA44C0AF30DE71FBB24156003B6C1839D10024C041732C3C06610ED2F3FC87A2240B2E702EC5ED62FE8558FA8ED65424750C09161AEF4324E32DEC498327AF46934B8469E0AB3120C4D0C6F9DD1651B3DB82998685D92A60E7FAF1E5581FD7115CC42B21A9457BBC56FF558D9943B08AE9E6C31BDD155CF97B8D2E0A997D5168607663696973274430F375DB57D89740BFB659EFB3A539DE498372364B25BC62381FC4FC91CE36D37546E4D0EAD2D817DB0695174C3E95190B14F9F257ED23DE77B7948A8AA5EFE4D72844EF737A8C7285B82CEB657DFF4F54E3AC94F555098CFE7CAE67B9E139C14FA6BAB36178ACF2466092FB3E9D1F1BC853BB52A8C9E1723C5AEE499B863B2AF577C8E576A88B618C3F66BAB2DDB7898FE4510EAFA4DC695B48157623F5DB08500A8799E0400937877858590E91EA82E09FF040979830C2D5487DC7A2583A865A0DE3B4CF769D8FB7673FAA81895517981F6807D93D018309E5BF777DDD6FC6F36F79D301F8292745F609F7E6AB1506B5FD7715951A29AC29A444BAC23B9D12A7E9D07808314DFAC1E2467FF3185874B435CAB4582609BFA04B3C308F01B32693D8BDA9E9A50664C306AED02E780CCAD1B089D678CFD37F0C61B4B41447C0DC22F498A75830A73E9FF4196C0A5CBE9915DF65AFCB20430B9BCA04AA23389064638D7120225D41CB1A283D140248F62356F609FF84B89C53DD73A0CC525AB10DFBA6E78EB94B147DAEFB20D6DC9A456741105B7976824C39022E9A689A9C23B903B127C8B6D22BB267FE9BF539A6252BC71A5EA6FC654FDE5160F47F796F3B2ED639164A3767750E49794146EF0CCFC23E4615136F22C842E8D52DAD1BDEEC7FDDB125F1B4626B7A1BE58127504FFFAEF595CBB989BE97D42005689FA6BA9DADCDD3702BC69DF3B38AFC2A167933BF224958546D484F8B700AD09E50103D72C6CF561AC60AAFBBF00867735FF1DAEC48E72A4F533C426C27009D6B5E9093DB7A2BB5F1A122A6059669F3DADBB81DEDBA1373819ECE1ADC9CDA5F9A7A38540EF359F9C720664FD4D574505E30FC8C8408194D65E237C399B973014797BA58A28862C505B8BDFF4CD3C4E5CA5B5345C97A355210A862375DC75E509A28AE960DF2D1C2A69744B674305820F884CFCFD750470D86E8DA9F2CC4CD64F7650E01B94EE4ECEF5CB1BE7435D44B0A7D6C2B9E077CD8024DEBCE66CA05F4342A3D588614216DA6076BE66EC53952A5684C63323EFD75DA0BE85756231EF898890953191A68FADF68ED7FB7A197B0B662991413CB4730319D8DB7928A4AEE92816F0C3BC1763520EB4943474F1B4F38FCA3EBB0560F7DAC62CA956095860B96FB9F75FFDDB2CF09F8F7AC66B8F5C9B4B071F82CB6ECA3C37B990B3F9DCC9857884F399FFC917020E6BD5FE60CBA52B59D4A984AB83E3355F87DF4AC333A5ADF7FC3E0F1D6808BF42950AE6FDDBE8C907AA9EF1E81AFC6EFD285119B1089FFDD85490821C1D9BE6F27E1B1F13D67BB896AB186FDD131AFFE432173F654106D47F12F797E8686CBDC3507CC0E06EE122759D0A9CC6986B8BCE7EA5C62AE6D86F238622A4BE3BBDA1D6835D5CDB4CA597694248381B99C602BA27EF4987C25DA8373AAE9A08EEDEC22E79109A584A618FB7F4ADAB4C02E9564E3F314A40EF3B88CBF0D8382B4167F04B26077E949D851E912F490A6732A70F2AA8361D2D70DC72962E5E0F1E75D121735CC24610A681B85681D7DB1383418148EAE3A6BA4AC541070B4947B5AEDD91027A5964E1497863489AD19BD91A1EFCCA66A2B0834F70D11154B7560F423468603573F9C2BC2A9F4211B0B17BD78AA6D9D6A0B703DCE79DD5F04C8ECB38E1387142F29DB208051F0B71CFAD5554292573F8D89B646237ECF3C4F15777D8A84BEFE76A20FB7B9DF47DAB94DBE8520BDDAA5C34838E622C9FA08A9D97042C8123622A120DA01F6E3A94600C5A02F451BE21223CA5E7F2ABB0C8460ADE52A4FCC230AB6CAB3876C89199309207B97C68671059B337B088B051DB41EAACD4EBD8565FDC36BACBDB747A30F76A85084297817ED7E9547C4CBA89B538D190335ADFCAF356565C69BF32012268CD5E9F01A53FB9A0763D6C0303D9B6A244F42F5B29060705C1D28690ED0FAC55850A1F766677642F33FB8728DECE9671862971A01CD32B3BC998FD6306A48942F1DA3913ECE33E8449BF6A1EEBF6F621533B5D1D12FA1741734A80B6D94B181515278BFE7FD72DE3AD3B1CE4AF489D23CFE404BCE1A44E7E1868010EB1466704B17B3626B5456D21CBF50FBCC7AB4F01ED6EE123503D5C39CC45797167EB9FECD547A9AE1F8847600F9A795DE2D2A005CC43F081200C2451C10E70BDC062494E455FEEBFB96E76A829C5BE78F4106C320259190C1202B5E613C4DD9BA9E991827EB7EF8343ADB4E30CA05130A4CAE24DD34DC1937A5F3F86B813C71035AB3446F307B96D90551F9E74FBC6506C9D9E02B2B863E9B16169DEAFC8EEE3FB00CB06C8FD5D99BA53921791CED692495F362309482E4DD3AA707375DEBC9960E35648760ABD4D32A9813AB08004304929F2F5D9B9E6BFA71C31161D7C7316F67CBA152B6A2BB70E0ADD84969AF0247A301014AD1781D4D8793051FE140900C2AFA66BE9D69690AF7434FD6635DA91B2BB39B37B40817BFBFABCA0F7E72094CCDF97C1273A5E0FBFB6D0A895423B24BCE11EC79F39A40C6DFD93AD6EA09ED6030E8255009750242C841DD004859557D4EAFAD5B7034D8E066237C39F0BC5645415FEDB08EE6A475ACF1DC041EC76B294C1FC4BFE60292C9B0B8E525B5E2A969F6BF10586FB4E9DC4A1882BD7D9C09712EE0B51661E2B4E513DA195C055BBD6B7F7D9C498E6606CA653759A11046ABEF801DDDA28A062BAEA176D42145295AFCAB83DAC9A53FDEA41FA5B743E65D64CEA2FFE78738D417FE40FED9B1CCD19AE075FFE7FA415BD5F04428A77FDC6B0DAE8B83082F1314683952474C8356F92CA5BC6D86C35355F5CFA6911640A175C1E5CC29C64872E2792124F69834C6ED419111DF9F04700335848BDFC0675BE2352968F651D6157F588CE32C3BDD445D062B0DC395C746D998565189ABC19BADE3BA1D57B59C03EDD3275252A91858BCB52EA615BB9491D8E2CEBE38304C569034AE6FE6E4B5B27D89374D2051B8139DAEF8768E6B8DF2B09A70C8AB02702C86D576E10B3CA31E6F5280BB703EAD77E9D0CF1762316586713E7D4FC783738164FE49B0D07BC119144004FA686D2646C443596DB570CCC0EEAC6D234F71BAABD068E14D55BA6518FD6BD976560E57738213CEC060BA0AEDC730E0B8B834201BD87B8CA9B41D3D141B3333F638AE079855ABBB16659527BECB195F48C0E8431297111439DD0DEE73732CAA784A6364AEB0CE19BD674010250C38192E0EA06882D96B4F8255A18CB7D9EF5D77F82B98BF47BE1142492EC99EB3E432DD9E74D2686825A0C49ACCC1782EDE9D9502218713FA886F61ED9BA221B3C7EE98028B7AD4FC8EC1A26BA078E2C297AEE3E9D76B435B6E6028F422DFFD76CA33BB4268ADB42B95707EE42F5BE626BB9EAD5D63751386BEC590D6CDB93D7DA4341F1D175CEDF43A935B64FD4B207183C1D1AD9374CD3CC650E7BF320C4D3D06454EC9E46BF685FE041B2130453CDAB7E8882C3CAD0AFA5D7F8832910F6F1C108DA7DD61DC03C84F7757230C1236D43187FF22FA4FCBB2092A7BC621DAC7775790CDDC83DCE372EA2140F798D6B005DC9D6A10C8568E877D00A35FAF8C194C1E5DCDCBA3221A2DA51313A9D2C80EEFC94CB8E4AC100D2307FF5DE3162F27FCBB18E470391DFE81A60891B21215F9FF8BF5BF92D3CDBB33E1728703EE9611CDF442609B482DBB4E9DE89CE9C04159175B253C89FB355D776114AA0CF7C9D721317377E6C276E71A7D359B75F9638C918B506221DF0FAC01E97A931A370FD560568F0AB96EE2583F0A6B8A6B09BCA4EC7156FE12C94D7BBD0602D628F49FD29B7727A79099863FE32C9249015809AFABADF308D224DDE43351A08175ACBDCDFE0E8D3FE2A1DF7BEDE28127CE43D6C0F022A99BDD72481587D6C654DB889A83B639AECC4133EE7ACD813C8B5B96FC461789E7E08AF847A68FA5D8887251C4CD99BE73AADD0C00597D498B07BACC23F5BE005665F1523BE0D2596ACFE4A3F1B0A77BB33064E3F2EC6F49AD3A9915FA172D363284643C1D361B2A4788B621ED731D9288EFC0CDE38F999F6C73DEB57766AE81FC0B706DD1C278A93975CDC0E78E2B6D1B17282D7AFB067EA08C6F054666EC10BB8434FB35B190CCB8604C8E71BB5B1C07F9268AD9F3DF2A10B6800EA9825D1AE23E0C0446CAD7D15423E407060DEA00A4CC96CD5383D75A514BFB195AC2B3818F302A860FB7B4977671F8C0347F379C04019FD9658FD8341A3A88059C19797DCE626621AD493F9D0B075CC8B3B6116EB467C5D54EFFD65EAC0307F172E90A6091535BECAB68CC117B5B444E02BA395181FB88DA509DCC299B5BFD34695B0482B7E1BB253DE879A6E10784354DD3EC9D3FFB2636092BA1E920A25D7A0C5F33CD124D97CD01BC50734AB3E7B9C1DDC635DB178620E1EE2CD6F9168EBE985850984CD2BB4509495D6BD86E692CCAD317817ED610CC90225AC28FF9C6433C610A3C5ABE49799B4D2BE32CD2DF52B2D49F98F3BF174E1424A5BAEC19FC7564066647CCAF44926A08A33A0AD41AFC38FAF4B2D62635D48B29DEFEC13F74DED8F75462D001A3466B27F30FA30984D2736BC1C7C83C67F367523769EE57F49AAAA4A012D032C953DB739151ECF0173339AD6CDD3E39A80FD8ED4EC72960F9902BDF2F3646F8F54AC04470872EDB2179575A6ED4006098F65B106A7277794E9FBD4ED1DE19F15BA0D096BAC1F4124B2F16CD3EF2EA763BB1A89038D42787BDC830F820D3B59915249104DE67AF4E17448EE0B9CAF3C7BD75D0DC2066204A8081722688FF106FC2241D97C737A670E3F2785174616B7ED0AEF8462FEF0168C9F1E8A02660C17C41CD94C5EDA767CF7F647BBBFC8BFA2880D1F4C0C8E8AB2B9D1FF0166C67F3137E2B8D3E82596A002636C368B29AF9EB03E8740AACC2D10D35D7A229C3639A02ECE25A69B19DC9F30C29111904D6985971DB7EDF7225500BE8DAA8FD4AB14F9E9A9CF7F0F77BE712A6F3ACFCC7FF09F40DB95D4F2E34A65CE9A272A39AEB786EE684F960B989E50260A3F68D3143514C8E7993C9F9A32F5FBCBC0569D8F4D45D5D5AD05249B9DD4B06AAB8F7E3798B0E7B2A739B9C6B0DBCD8F1A986694CB2C33BF40744BA8F452A5CF9E63355EF3E4F8CD02BB312F90760AC6DD0EB79AA21DF835CF0490B2BA004B5A9DC44F6EA9AB309F2ADB938A5A50B25076764481EFE41BB7000E7D9F10CE83CE4A3A97E2A59F07EF837F47ED80C345F82C9DDB2B7DABECAEEDBE55944C6EF516D1444AFD860A0D84732D3887E602350F90C17E6548676A4959BA3A04AB830522A1417D4F79353C2E44D55AAC693B7B2EEB63CC6F6E18F448DA8F45083E93DEF1AE233C36634596FE0030FF401E592416518518DE0A07A502CC9809B99AC4B0468CED7CEC4A8A6CE3783960F26F9EBD48CDB5666A46E91F87909684DC73CEEB9D9EF4E6A7988C59822453DBD1FEF9DAB7580A8699AA561B4B594647068FA31E3DBEECFEC8D2EF9C323C3EC0DF0248027EAA4B0F8313F5E12A45761C6C8AC76DE905776A988DE1133D298DC6A24679D2DF4CC10B8F84FC45FF08CE1591F9350734ED7FB68FF5F02384AEA425BAE0AE2C739EED08079861AFC213CB857A128D425A74A78176FD79CECF74F2669D301C1DC1B19CF5F84CE46FE63C984259A8BE3CF01C6D4E4FE55AE95D19353F72E6162089E978590A32316EDBFEF20582E6A0EED3DC650CC573EF4428450A96570F8F39232C89BDD346DB19E49465977B7439160EE9DE8921AE8E49B55C18F0334AEE05C12923EADAB56731F1AC35939C87AAF28627705C68C10859E50A0349F679683CB5F1E7B3EFD046CCE2B6F465C24D13F59B83E18BAC67F4C71F4945FF1C9F6180A7240BCC21AFD7719B3EFE592CF95B5FB930FDC2A3AC1CF2006ACA55D63C0964608D4D2F91C154EE590A2CC4BB1E6DF0F53BBAC695F2BB9F888318671AACAD18F35BBFA6E443083CF57E7D61E9E264A1820C5FFD4A89EF17B3886A04B80B1324BA95D71339C96D05FD9517BBEE33955BA6CED2425DA8254C32D26645E97332E3C63A9DCBC665AB71BC67FB28D448D51ACF6844A8781A3DC486947E6F474D412F4D0E58A94D381C8F462F401F307623C8DCEF4E182BAEA50ACD3CC084AF9C96E27AA47D577D50C3828695FEA8819C076154D30A699D4BC725B6F23701EA113CBD6F625AC650D4A000462D74B0BE271C0884B17F05FD07B46CCD853834B53A9BC9BFFAD8F4B87EEEF3EE27B418DEFCBBE1EED42E7C683F02E44AD4C22E0E30836F57A2A099CDD58FA004319F22E4F76B730D0AD1B82A3A0EAD8EBA85ACDBD9DF18EF5CFBAB5D1D477D245C24A1472935657C9C273F4DE9303591FE02189627CDF80D4871B8F6361339B8D37353FC574F6233210E60741D75C7903D71D5D1C1C3F8772DB0F6F45A8A9F7E874108E741E6FD6621D442C453FFC9D5D2BC0BA13ED78A7B565C1A54AC5EA0AA80AAC1524161D78AC4D400E2D2C206E4FE290468B74A1185A3BD298291050C016BF80AD078BE516AC17160C89A18BE2B3592A19B927EAC7607EC95F02B96B8ABE9FF855FAF2D8C22976077A4D55DDDB322DF6F307676721C71308D068917ADA5038F503CD335C38BD8BCBF446FB770426FE772DB6264247720283FBF742CEC2638E702CCEF386DD688C5F957EA08B5BFDF9296BD3E4B93F03556B9B69907B9868C483E34CD485A9B24AE5459BC9BB8ED7279FA18FFA5AA7A48B8CF1F4274DE8B721EDCB1E7243E76053F58C3C55C36184BE3FDC0A5DCA583D8AABCF35E788BA398BB6DDBDF019A34957FDB5826B4609308EBF05F7A24A1C7DAC00E6E53B3B3122B37A2218E1F918A3992A00831D8F9536EEB990AF1A9FDFE31C1F78A34D9F87CB9860C7FC142EE3E03EFD9E3E6DE227D2FA3B6E6C485E0C2348593C3B7B50C0EC5D398C9FB83B38B0F602A045432236F71948C36196E7CB287D116E7AEA27F94CE9A2F51FDBA0F578448C099B4CA97E5FFBDD71C446264DF6ED27FE1B8036FBC4085BE4F74B57FFDA93310F8642802F34CA28E2FC27F60A5EEAA6CE637B1C1A1A3ABA359FCE2E920362341E4E19366F8C4FFD4E699AFBE08C093A652C61E4644EEF86F36AF44DF412761A5F5B552CAA2440A07CD4F763027F964228F2885F6BA9BF2A1BE6A5BF383B05A2F942749815B1EC4815B85FE47268494587FE1E6A0D1EACFE5268A6A256A02267E560BF6C6FD8EBBE9AE7CDBBE73FCB4BF5DC98C0D90D6ED6E6B0386F6E9C9B305A2F0B147232CB5AB116221365E5FB11FDD8ECAB4B78BD97D1DEC2DC43873386FFB90A7E2D34254321434007DD73384B0196C7785C73218D8DF7603E29536DCBCBC7DC53012B87B96B2B386AA97CDDFD1CEEA3C6A682133A4AA345090655E2A1916C9278DB133EE7FB73DACA9A23F1636C5B75738FE5281C77A65CCED9628B746745207634A2D7FE93AE4420610AC398836857DFC1CEDC10CEFEAF9A250420D35BB27CD9AD69B2995306EFEAD8B01862F4233A3DF61956E299CBED4892FBC8ACD5532FEB5AAD1995ACFAB63C8B5210536683C9028C325E3BD05D0F04140D3D21256CF0F4FA3177821AC19143020DC9357A5D04B8C4E6B2E3C3C9B09A815137FBA82E563EE9C8651C769B68F341E0146BF3C75E32E126DE7C2D14DE0AC6BAACAABF4C58285D7CD5D719F7EC059A19B4E81392D2184BC0959D679DD355AD6F8FE41F4DEC71F3A8C888C15768F27E1012F94C431BA15F2DE5A5AD8F0BF8DC4E41A551C5F39E81465EB0AE61B2933F12932C460D9D9BCDDDB637DC6FE4B49D0BA7ED21DF78B25AC7571BA8F19ABFF37A8E89DF83281AE934284BC55638ED0A3ABDE0E6F643851C3CC48793DC08B6DE2E8B837E1ACA2F98CBD28DFFFF84BEDC11E71889EB4AFBB245F80C902947DCDF9EBEFFF186650FDF5CD3F53CD7782D4D2B4460E892FDC2040C25199D06F91D76B518FCB9076885C9712AE992F48E5206D10C2CD2E3DCE815AF540619044BD90C1B4768CC68E5E15A1E3C4C93F8670A9C309937B79C3C1EA303A8EC688CB4761C027E59D15B5D7BF8E33FFFE804F9DB79C372B500D50348F4D5EA947FD3904DAC0A0984D30992BFDC087429D74F9503423BDC2713686A8CD660E7C2C2E82F98DBF8B44AB02150336412097F78B22DA05B1421F593F9C2706C0AEB7A07BEC9757B8AD5579EA9829C7851CAB1B61AD835D5C9FFE1CA1FCF9C84DE188E5C5C3A5F67A538517C22BAF50EBEF71A5388E1D3367D1585CE83F61F02EED0D54F11FA64CD4BE1DFA3ADBB00FF82FAA77DD70D94ACC445B119CEF59033AD425AE21AB9563B93C3C0311E1F887D3CFC6F9AFCD3BDCDE865636EB49ACA4C803BBB8586EC4AF0D051952C7B4B248788970AFAB03A214960D18DB6A43A83FB1B08787DC11E51E3FCCDE535D6025D305B3D00A4E10BD84B475B5DF940CB3026D37B81E1E9D373A52C76DB32B956F20F77A31FAB331181119D3D8D56FB2B46B688792D3A0F780F27557D12CD33317D35399A0B7CBAE7240A7E48D57E3B39B7459B62DCA641B37A79895C45F953039D13225A2AD1B4EFA56C2AA694FA8189F8F36DB9864313312A53DD1E34E5717C3CFB4BBEE4F8AC98C8483BED97109B705C21E4720750205730A4240EFA11AFA1AADA71D6AFC2AEFB23B02D85653E231E88DA46C5F9849B0B136AC638F1F6EA4F3F82E9432A4FC5D84142B35205830A478418C0563D189B19A6FCC3093A2D1722A7D97D2A627B38A4FD3D060BF7313BE01949DE3E637751C4DC5EC9AF13255CF6E761A080453D48156E8C9C3616DF487E4281DC99B8A8E4A7D5B59C354E5BE245C6A71107F60A03C07BD1FD0231BBF61AADAC8061C3AD77AE31AA31FA5CBA42558D7AFFE26C014DF3F6FEBE48FBFBC293D09D35BC331D6F27E735DE836EFC5A99E7E1DC3876D7E98373A7581AFF3804FA3D1741982B79A657FB1D3159155149E0F4B36998364475CFA4522DF016D79482ED96C144256D255CA0C001DE061E8EA9B2D3300E2907BDCC64A4F0D28E2500FFB4CAB759F9316E9D82FBD1F1810D6BFF0D5F142CAD09763F9130C87198127F6E0A28328AC769E52F537D49929D30A4495D8B4CEA82D92C2BD3141757805C676FCC948CEB32A214C5798111F16839A75C3B749163FA3D20F3DABD891F80B630F5E788CDBDF8F2A6C9A433C9C9DBEC1997764D4D57D741E6D0F78AB8369745CE3F85B9D17321A9D53C4266861B41474565E393FCE34E71A8CB08CDA34A5971062C7A3F2028AB008AA85CDBFB9F325E9E71CA10924F412D0786AD2C03F6AB23ACDA127F66C40716B7CB473ED647007E9A86D21E04A4123F1438C956BABD999969F7F0D2DB010B2E7938A1271910784B80DEBBFB97F9CD8D37580B1926046D7E6CFCDE5810058BEAE457C308BE6C8589970EA5594B1129F035D1B7A9415952CDB25DFA1DF74EDDEF501C17642EA2C82DE0D16CB182099A03FEAF7AEFFC24351851E8CC022E1F42FB72EBFFC85C2EBDF9D417B9D3713E071D003AC262B6C26600AA6E557907444285DC05C77FEAE8D186090417772CC9FBA114253B0D39CA2433AD580D2E00DC07944BD761DA569D60B5F669B8A69246846651F4417E3D0546BAC49F57C5F8C241DBE45653388539FE1379B747E2A638130184CFAC0F83E8C4A7CF8755845682033834268D3FB4A22B3339C740BC0F0BAAAE9956B46C81C56E1C871909984336DD53DF6456E672A1A9113B4891586D8AB9016AB2D8BEAC7A61F4F096D610237DC163448868BC33E48F7C2C4E5B33E906FAB8A804E57F08C2478839DACE66BEB31A770D02F55A272786142A02182283AE860E0E39694640FB1E42E208D655EF2F3E97DF1AC48849FED9C700DBC8048425F59822C900CCD829A42C602B93B18D3BF42173417C6E7FB13A7F76FAD268B5E773AF2A1AB105AA77927E142A92124A620455A028E5E276CA58FDC84157AB3C0F6DAA8B9D6AAF01E9DDA72B0024BA9D9CB83D35AFE79FC6BA33B7A277BD93144360528C4AB0FED01D7664BFF25D52B4E53478930AEBAA01EE9DDFCAF4B3D40DE6421A694BBE12C6D1609539DAC1C8E887DC300048E6BA3BF16A3BD0176C9F308377469C32720E93391E21C45DFA855ED624C6DBF4FCFD50A12D06591C65802887BDF31F874C94D0B2AA5F2D5A5573E08EF1BABDE3A118CD6618571FD898318B57F14DA407AA1878EBB7628CDD33BEA1725A5E63A17998978C9611F7C078E3AB40D1B486CFF2508773B7ADF873DF4AC304D2ACBA6C7E451C7B8A57B94BA0A1E4620A0EBED5184F4908E2ADF07ED42F69BA313844C0ECD0974185F4CE3C43C6FD369925630A88878156322AF330857DA66F305FBC9B3C1FAAC2EE1D71E91BB1DE0C44654C5DB823BF6E0C54AA365FD40838356C26DDA1926CEB718BE7511B4A4B8A45C38459D6CFAEF4F6E1F78AD46BB1682165933BFFA9E67BFE789A1C305D6D096195F5536B4CE9456DCD21DFD90F3AE940BD8F1A638C8FF2230DD187EFEAD927BB0AB57A17FED7F352A4E7A25620DD8356425EAD9CEE31B644DC6734665C159799FA6A5E71EC9CE64DE3B7B50DAE886F92F3A353B748A14F22D89108BCEB2369F97925F85CDD729B4B66CBDCDD850F01772D8FC3C2DA9CAD1705202C698ABAB9713168C8C41ACDC2495059E661127E463094D60F737FC860270BFCB4B428F0C1243804643C079107F12209BBEC58FA4E4760D61264613D7C69A4E4F2D53115C9C5AF0E5A51B9B79035341C5AB7CD56F44FC495B66E37AD5F750815CAE656B8515F5C0F719E8BDD3AD936FBBF669F80F8B6AF2CA881C92848805964C61BACC4D2C332F7F4650B3EEF316FF4E7CC0ECA3AC2B6ECD1FA2D882E3456437F93A5E5911A90DD6FBD0E1D45E4809EF46EEBC3030066565ACC898B15359CF5BB1C727AC237496AC9BAA93670CA680F92775C3429CF089D576BD9761BAE64646ACCE5C902171794470A33D9ABF683BB723722C4EB00844BEB6993CEBF4133E2C66C81AB7D328914FACCE7B95EB7EA91A4B4505C59FD6E6F8AA9EFAB3321A03626CE2F10AEEA0BB498877FAD47008C74C07723A5F0B04E5D35CD11F89BAD57BDB27352A8669E4CDB0464E6E204DCA3B48FC5FD8397DF3412F4415AB6680DB4C57DC74DE4660622279FE64DF6372F40560DAAF2BE2D0E7F6FB2991221038C2C0B8180E57BEF3E5BEA3FD1B3B0CDA8610901ACDAEBFA7A1901DBC422309D0E179459B6A0251B1B12999B16478740AF9B30B7823939F096138E49B5F1A55D7655D5D143C91B09E9313C8E10937F46251290BA2CDF2BD6A50A34DEDF8E11DB7630A6DF5AB053B277C1C246E7AB282123DAC35FDE61B4CDDAA3BD6786C51B09906434A56BB57F82EE253C25B199186E132EC7935D708EAF5B2F1B272C6D3438D8D31F52B42FB7024954AAD6AD1E1B934D4B4E7E752B142C470690CEC66E2E984103F099A1B7462FA29BE2843B49C359E60A09BBBA3A051C413FC89D07779FA2B11093E3A77BB8D0B7D4AF2FB4A21628879E92AFA9126DC964B0CADC0D4E8281B9AD3756ECA67B56DCF16E134B7DCA737C9A7101DE9DB65F3B951DDFE9333E0EDB668837CF6F16FF101C464C6556EFA279BE24A561984C081E43E476851CAF38723583AEBFC81D2D42921AB2CFD091C58EFEE17EDD46E1A5963CD3C13209E879DB8677C8E598F6089CA6DDCEF501E09DD8D2C38F080C1B325790D642A2C935A151D53D41CDC06DAFB98DBB8D441DE950C8DEC3170179E7AA7215E1B7E7F7EFD7B44BFCC0298FBFBA946FC53AE7EEEFD5C092C0A63019C56FD8DEE064B59D72653873FDF408ACEFE4237CF31F9636E05811FAE14F499C0CEB91AA6015F81CF53832B0DA87F5B5278B14B0F3594F50226015E75CDAA56C2516C331AE4B34261F3F5B5D830C7F3170D1A682C2E2C2E71C304FB8ED4F4AD32D0915F4B23A09ACC8BC18A3F032535A6284C1EADD3974E1BD5BF7BDAF6A6968BFDBA26C93A1CC1459034BF72EA25B106392BC4B117D1FDBBD1B9EF3FBC7D1BC60DFFF20CDF0F2B1962A8B1D17310B143C4D36FA48177AE29550E0B12072AF7598D8B3EFE96FA28562C605F615AD68FA7452FE6CC8EAC2B81CD2982D32071775E834F0FDFF0894704F78435EA4B2607492383797B1248526E76CCA34C8C7784B41F3E251DAA63583B692B4C62D3EDFB62FEBB4FCA1B84A6D2D0675035092E49FD21A7D0C45F84BAFE58344E982E9ACC6E521DD27F6A83F9E6461DEE264EB9D8CB832432E5BB4D8202C6D97B119E92F3D3DCF0409DE478BC29BE0228C4DA442F4F5B978072BCFD934AB5CB1E06CB31DD23D3F9C5FD02A135ED692928D26E34378B606408D2DE94EACE6D7072353AB08D821EE610A2702EBDFFA0CAE9A585960238F564E1CB802154C88CA1F64ADA7F78232425F8C1D1F1D74E640B77F0F4776AB2C9E71DCF553B17E2BE6390F4EACE5220BDD0B35B1E9EFA4328C9297A7D84BE8AB25EF7AFFC2EF37803A10A8816B5A528C41A939EB4D73902C8380AB32DFC88EF34974710DF042AEFDD56BA35CD318AC54FCE2BE2D9BB412B9A8E83B644C68A624A8C99D470E303FB5B222BC8018B83A12871FFF4316C237E2E71AC1A4AF60130B8A50144F53895BAD1386A53A6F48619866C6B294D07FADD1E7D8A2F540FE14007A768AE115CF33883456631FF7DE37896D5624F269AA7C9B84A1BCC6094A2F8946F804E52DAE374F8F71A78B9DA9099D5E8871FF4F4FA8DAD07A44298F4464FA0FC76CBBEADF8458879B0E3085362621D126ED49C87AC9225ED377E3D7CBC37470281DCD5686E5E6124096F0E1F6E2D861E5DE8573D7568F7FF0F6AA7B0E4166187548664DB471A3223041BB9E54FB84752CBBB09290AC65D12BE14B51852C00FDC296C0CBF040115CAFB4601CF3DEBCAD55B8CB06DF047983030A5D7371420022719FA9A523B9A88305A5121AB230DCD00FA9C964313BCEFCA09F4DD9B6954AB52B973D2943B0F6E97B91045D2D7BD111A684552DAC453784BE0C75716AFC25DCC6686FEC32CA4FBDCEEE5FF022D22FDC38E381E09BA9DC8F04779ADDCE791F4AA9809450D389BA8541F080082E1EA08678A40001E9B7F614C7554AAD4C54265E547447E855ACA320342951C0EEB53C978F460CB220A303613A220126DB2937E9F9AAC0A64497C60C02E597C2A7267A345A6E30D02A4E6BBFEAF5847C53EA9A1C48126A1247031F4874A01152F82B379F97BF5678FFB3ED57156E9113E2C34C207AB81CC7BCCC70D4981471E4F41FCE8D7DFE2234D83379C6DC6C4B52719CA8DF68C9234A4E76048EF59A2CCCB0AA965615CB1A9C0B6ED6031D477F6FBE7DFD9411943102B9BA6A4B6B2B6FC576AB5D178F1F00A0181747AA20CBBB555A3E437095358C197462E2115A4AF515E892366D05CDC8D15A51F76A4465217C6C245F02C29D8749BC22C16E659C0EC7B73583A9D786A1D4B00925567686FA49171132B7E76D0B2D4216FF4643144B666CDAD4AFF6D71017FAB3CBF96BAC7B1B186B8D623D08809A1E45DEB90C3979C73D28FEC96CAE9573D0C952A61DECE6DC9177EFFEFD754468CFA7E4EC111603B219E4EA695CEEAF22481AC7EB7C9C5FC75BF0D93E68CD4630B09E55CBE9DEDF69CB39FA2938DF6CA901510FB89134E4B89ED1B3DAB2A55044D8850BBC0C030B6223FDA5DA28B95D456077ED746FE8A1C79B00AAD3D46C82A7C09C24363CE068A861D5CD2ED9218E07C4A0C856C0BE90588C328D621F9C57454FFA5497A2604B01F705414EB811F0E702CFAF28D36BFEF3733D04E679BD9D0607A9F0C4C1E2585E2FF6720947AC99CF226E8535BEF4530B883E5FBD39D254CD7014FB2CD371BB3B35B3B504A5F29D62A0021AED96C56389BE43D5DDAF55FE24C724CBF158019B2D81C2167FD37110C7F31DC72E699FC501578708875BAD39DAB5082DF1749154679A2D2E653324C5A303C01B09A1EDF0EE8C5E300A39DE7B471A86B34C266E91130E63C35F6D3CE7AE84D03CB04C246389FC592E8B4DF7B4C8033AAC20562AEF02492E6211CE44735290ABA153622F315E6474EC1FCE05F6B3737A62353EB83C2CA48022949C8FE3BEDAED3F9F0A0B30C20319D50D3533ECC1DBCF27674AB7AC1124AD2DAB1A332A03796079BEFA6F24C00FDA9ABEA3F9CF2B6BFF9065F6E8E05F1D2AE5A117CE77BE3CE167726F771A064FE1B277103011E7C3F3AD81A19FBAF4BF0C374C6CB1521A18AA7AC856FCA7AD7AB8A46313060DD30896BA0291FADD4A63BC24A02BE89C02AC67FCEF6F3144D340C0A8B08FA372A46E59F7BAAB6D248492F0F137472EA4ADD86058A1487F8C8FD83DEF1BEB5118517539B31AE50F2C25650649732AD9BF9E95418F8D582E6C9A3834AD0287F70C820C505F506DDA2A4A6BEC18346F6B4D1B30D664E08ED0C75BD93DBFBB71FF0806B4E196ACFD71D99F7B6978B0762F624CB7B0B54665A0991BCB25FBF6D5D3A1D656CA625D395D7AA6FE146D3FBB94B3765950A0F9AD3991ABCA4EFF1452EBA501E9ADECE3EBD9A9CEB50640B913B921A241425E8277657F6B1D81115E5EEE49CEBAC5185F495A118C1D077155CC6ACD9AD40697BB78042CA84B7E5A6A8170FC9F1A1D423BAF3BD42D41C37F4E4F4744B7B5B7FC933275FB7D8F6A499A75C1E51605718E15AB4EF91475712E3D157815A1E00786B683546B71743072FD615BEF328E90C92DC806052B3F148306744C9B3B8C9DBFACFF87A31A20D24EAAFAF745C765DE8CA543BCA24D4A9758AFD209B1305F3F9C54873CC714EDCEF5C452F9A5D00DCD4D8E74F915FAFC36551246600FA2ADA3A20832D8EB1CA560E62231A13591C99DD29DFA9DC76FDC19CBD551A95CEF164EA7957A1CCDC9DEA198E984540141DCE1B11B72FA393C29D8A50A83E9B07AE377C752A7E7D701997C89E5167A54CAFE302BA949374FE1FC2DA6EDF371387788CA681F52D05C6DAF91E6BFF6FEBB326AE86123858B68DA5938053ECBEA2A6786723AD4EE3F01E67B0207F5E9A16A1332AC24FE2034CCFF19BB80AB67522F26CED2336DAB2A8F68ED15716163179D12278B1FD3FF4C273504E340972C7EAE5D97465E8E245DE6E89CCFABAA7B3749EF1392B163CE8EDE544C09CAF7E2AEF7589A5EA15DEC2990BCBA15B3E1F37FE6C1A64D01FDCCEA1794B2744DC60E40695DABDDCF05E22DB1E4B26821FB4EDD7505E8D50ECA1D69BFA0D2A0C00C5C8CAA7D06B784EB92B07974A66098E332079BFDE95ECF657C23634D01B95020C23C5F4863CC36D7923481A2B55D3E82EDA6B112F37ED374B03004427B5B409E541D5BDD7E56F02DF06C8C8786C729001DEA4C5990039ED819C0AEEB4771D0B7A4E92A9D9F848EA15D7D27E7FC968D43C8907A2973581B61B4571ADE4A6F93A6F2B45D3C7014BEBB2EC41532792920ADBC13B640E46447525AA70634EEF2F90E5C2841116D82DD5585B92275EE75E2601865E2806B9582A7DD73036D001998378B2666841BACB947C3EB262FAF5669A417AEB539D62ADA76F9ACFC4883F8404A3F2516103FCABD4186B03ED205B1605B5738E413C6EAA5BFD6CA1AF1119E36D691A12F731B116BF270407472A80DA77525F7BF68964641C3AE871206618F33FAE4B9C6CE964538949E1CC23E173013BAAEADDF9D54EF5B5B39588B4C0223FBBF3B1238A14FD459CF930316B3E5FE9F8C2609C208DBC9697056C7C6B9D78873913EF47A38AD66BD0E66F01B0CD862227784AF3BE3A7021AF4E1EDBB47F25B38188C4F39D1E6C305284C6DE6DE6629DACF3DA68AD172F371CB482399E9907DBB3CFAC0DCAEA3C4560A5E8A239C85CA69175F64EA728D733640E88D10E6F24643CE9CD48DC41921C4A243845538C9D91CAE62381DF6D0BDB92FA98D7BFF40630A635B14BADC28B861D18EEF01CDF1832700D3081075A3319B7951CB92EFEC4B5873248F581921D5F160B8C9C9FE4FF6A8EDD4E4AB587A8B1346A2990D7773F5BB3D9070BC0FC61D035D54DF7853AC150135E01D1E38810834D57E24F727D9CD2AA2378329C19EE1BC2D9443820E03EEA14A332449D81FF5E71EE441E9DBD91675432957BDAC3D19304D4919CE64307493A58C629A6674C13495337C15C4E4805ECADCC8425248333C029110733870A9CDE69874B4E6784C24A28A2AA8DBD539EFC36C78E3F20D2911B7A373A6BE0EE6FE1423A40047137374B5446C52AAC1C5128C74BFA3937341009DE8C782DE74E7798253BD7850E1900BCD730D8DB5C3ECA22AF84E1AA989306865B3C870FACDCF94A20BA3E332631CE4EF7084E2FB6F522811EDAEE0DE455D958C34C02C14EB92799B93D1851CCB430B0FB7F4EFCD228BE7F4267559B55BDACE313F4F7429A96D9226521303CA8E8D3D524546E9DF6EEA13902FBEFD1288F2C06AA757CD254D251E3FF4B237E5560A6C255A3E24D35C3FEF9E3908DC62F408A2618BD5218BF50DC57A4E993A4018C76D8CC73C4C485BB8225A2827E576D0F488BEEE703A23B7924228E72E788DA881262FCD11360C0684995E3F4447591F0F0D2EDCAF3BFFCB61DA9484E7BC33A64DC005EC647CC41135C92C1C5657C31D96689D9C48391589391D6928601763E6C62D9BDB51ACC24328F33C00A96AD881BBC580E2788EDD638624E560FDD85184C46312397EAF7FA7DD0D1221BEAF9D6ECE781945886D8FB2F77DE9E067E62197EBD296299BF1E3FFC5ED6C4875BD00425DDAC318406EDE98C7CEA4143464684CF312E46E429A193819F04D53C41760FADE3AF94B095C1BFC62A5CEE4E9B7C443D27D207294D3B1FD69C7D442369A609DF3F972C7786CDEEB00DCAD36E729BBA5091BE2D36C547ADC911B8001877771769AC42EE2B87B4131090E0B0EB50C62E0EA42AFEC44746580E05E383CE7603E4D209D1574199BBCF6BF1BD9FC3C006F4675628D896BB832D695DB32E7786D2874D82FF77D56C1DB11FE76591A5DE52311E0D0AB2FBB503A76498A9C724FCA0F24F972DE6D9910D008B863BB0F44E44354D2F800367BBD9F26B8CCB17CC245A60A5BAC24E5367E53A02B24207F50690AD2EC29AFFDAF769945A9E5D32896972F04D476E4161B3ADB9773910B45C6C56D673E98D7BC0B8F003A44DF1BA5AF8C14885C4C27C003F113965BC07DCAE61A07E28652D017B66682EB69F1250F264495438B8FCD2B449C477C71138353902DD30DEEE36E4272990DDC5EA3D5A0C80332C16F33973B7F8BA1E2B8291A4CAA45DB299B191A449DEB0E74F90DD4C2D1221B5F0E7272F9E4E964717268E4ED96D6A89DFD514C449FB77C9A76900FA8031854DE09C897EB92A9F81147D5A1FD1EB8D3720C85216BF03C559B9B7F18D71566B0F810454AAC03EDBD13979843E625E22663974AEEC98D76DAC872A32D308A02F096F4DE20A88DE2889E39671FD100E8C9EAF0453266081C083ACFB8E4AF6087378069A41B1F707C81D774B983408DA0BDDD82BB279991BD13554822557808D55EAA511E4E374B128C11BE258BF2C4D93E358D5FAFD164911D4CC20A9A22C4C0BE8684D8C1E8BC41AFD7C25E8A48DE3261E5CD0F13BE1D5EF08C948EA7E838D5A03793C95B2EC3482AF4399A46CB5FC6FD81F01CFC11F016237716DAAE85A3EA9905C24FC9CFBAADF93B298F83AB362C4126E275AE6FA26B60D2A5D109144808FB4F6B82FC4F5384398CF93B3EBA809F2DEF0B55B0053B46B2090C23B156809139933D2CD2BB8525036571459436C774DEC1DAE06077FBB4352F12E2501DE3CC2DCA14E60F59953196438E26B0300C52DCFADFC64160B50BB2C4CA8CE2C3EF91370E1E3F68C2374EA7A8BC17C89C4AC9A3D4AF70C252E3B665FC99273C5301B098A1419127E3BEFB0927BE80985673B13A7DFB5E88BE91DBC14C96435555F63659CA28881E764F191A1F91D648CCA33CF403B8965AE3837BB05191A56D82EC0E1548C056758D24318E596E215FD8B70686CECECC05F4D16A7A70D56720105C9E7D0989737A20C41AA0E09577F3FC5D611706D14328DBAFB3A3A0B3E807667B136513F6900C2795EA6D619D9961365B55ACE60CFC7D2999A9F7C4698B264DA79332EAD460842BAE5F093AED79BEF28C1C169C0F1A7A3613D95A28A16B1526660B4218F7ABF031EB5398341FE9F3D661F4CE9B4ADD717D0AF751330694161ABBF3F0446908F963BE85584EE3A970A7D19CB89CF77353053B131BE3F0E436EF99E094FB3AB746DCB97F03DF0FAECF3BE47AA6A89B755D6E5816271FDDA869479F45C466254971BF44131F2B6EE7B3A9531F0293ED50546B47F38CC675BA76849FFAED909E070F48892E38DA36AFCAD7DAE282E7263093D70A5899613365249771E4E3A778570CC97BEC5881CECE8F917DC2944BC79732728980BD6F4DA04CE7ACF598E5C830A207BD5CD29458CAAB57E1AA7438DFD3E53F862B3F8F45ABC5D2A90FF0F93A44D8C1AFD5F31ABE4D3450DB6A1483C068FA97040A9575680C7BC72AD5D33248BB086AFE13081088938A3A83968595126E5096CD8BB0AA6A9EB5AE2D4FAF371D9166409CF4E48B0EDC38C4393D52CCA4AB4E79046F0F1DC2AF6E52D898A2688C97F7B62CFE5E6109249F2C023924878A5E635E118544B139998A7A60652D1166F3B61752892063F8CF6E22F752772C3E80836898D488C2461E2C911074E5CBA648EE84D13ACE0B5A78CD0759052C0EF858DB6B8C098A5F6B77FD0673AF1F6F80C0B833312F40A7C83F88EDCB5DA993CD05F75CD37856954374A9703038ACFF42CB537A1B1131C20803D244775F5D189F641742F1894983ADDA8EF0B0020EB3BAADAC54044ECC9C328F8AA757C232161BA29E72119E2044D3F47364A78F42B0E5D6DD0B2A91A7C1D3A2B521A4330515304A2AFAE8C8F22CE707995D9FECEDF1F3305F19293AD65FFB13635264056469D4F34EE657ECF631907E1BED0ACBAF2C29661DB5F7BBCFC03D75777A20E2BE697A24A1567E1F831A142A83B9BE3F992424919C693FDB57AAA63D76AA5470BCC297A36E54C96811F4B535F7B620E8BB4064656A9ACF7E533E0C9BC5A33EA24DB5B11E6B9590EBF17C5345B1EFB1DD1234EB9295C7B983C6BFE4394235DAFC7B8B74DF9EF64B75A758EEE94D68D732E4E58A511553F31594E3122F75FCFFD1BEF130523FC0B14CE5425A8138D2F5ECEDC439B11FF3C65E84594BA4DF89CE3B525CDA29B2383EDF5B4C4CC03EC38F761270CF8A9DA67797CBA5686412D354F727326393B21E5ABCF803EA1F7F78F936E1267EC760DBA4726EA0CFC2431F3D1722EAD2D03E7316E8DD7133C16198E28FDA2A82829376EE6636AC16B812C115F76667D3CE7B54933B950491C9FDD1925CE70C81E45C5FBE7966B1A36FD1AFC4D98A1A8D6C32E08CB2CB5E1FB12584BFC57EC3707B2CE86D3B5B9DB9C6A3D733923D984361334B04A06C31473E29B458317B122EDA83586BC4D96954BC1D0479579B01EA1935BC9C972A02B1057DAE2A90D1B02EE88AA402EB7693575583FBA1987CE4EBCE0B8DB726EC7A62A0C07F80D2E62E420A8339843DAA7CB0741E196EFBFCF3975E2EFFF936ADC00ED7D25B6914D3BA8E1E6D142E0DDCD4CD4499AB28459A10FC8E092B25AD3F0D14EE9D404B76F74A8B026D7DE96170C85FFD0D290683FC0A4810D68D18EEF0711F0153423CEBC6D2E61A3CC4ACFE395022429827F40883B6E70CC4B2E106AA6B995F19F44D644FC3297096F19C19000695A75D32247025F858F22B8E7A31B488B6392AC8EE11DD4594747256E6EC2399B83256B46B51A83C2DE39EF2D596885A22A98E0F61A18C9507AEC3E9A4819065E635E4AA8E75C8EC8560FDC4A2AB82C7009BA3472B35772EA7A0EF177D59438C420E646C4B753941187FDEDE4F22411E96878D73302F50EFF928809C47E96FDCB5EAEF0B5FC9CDA9696F25E7C57C0F3A0824A56AF609C2E184E742403AC7E9D0ABD3AC1DDD58F26813D9DF8875F4430F18199934C7843FC893FFFB85A914FBDCF5C95FE4F8949C883C3D2E2BB98BD89F0FB2253E2C508609A55A9EE8EFC5944A5AEA051DA91AD3187CC93A9D0A4E963598DB9B9B50328708D595344CD324A71A975DB8ED36217798276A454FBBD523B0D042911FFB6C3ABDCFC31869B60E0EC7F7FF3621A8DDDD15A8A667561834648447CEBB62E6C94300BD49DAF167C4B44590DFC0CDEB2ED276A7E440217A23C7804882FCA07787FE2B091A4E063BC3607D6C89AE84EF4EE8D9FE6B61540E35E259F38E3A56F42EE68A5BD21F93DF983D2085680397636C75999FD29EC1114C1725351CED77C713E83DF9CA11C4390C568E0BC4EDF8A0BDDE90459AAD10F2A5511A650CB536304B4478D8D5208EF22AE41D60D5AF0FBA1796A40006F897C94CC3AACC6F27F9FA83D552F7E517B11E7C4AC652151A359482E9FFC95448AED60D0FC1BDFE85ABFA35D21E5995E4A22C24B272244D0CAA80D09217AE98A7BFAAB20847D2A5913EF22E9EA92B415EF14A34FADDAB45AE3197759211C4D36021EBE34C64A1B46C93495EECB95AC97096FEA77B7D1E587E570A764557FB60D7B263A1289F87CDDBAB3B1C349800DE66A14138DB2BF4C6BE4596EEDB89EA26959B90F5429EEDC313B3E90166C35CF5960A3C1C75776BB3E92A81686612433F65EFA55E61BB81ABF80D540CA39EBFCC9B123435C0E55C8150E5EC3B8B159491D19E8F17FBF109219568A31EF0B98B274E125DE10C6537EA4155AFB79EB2BAB93353C79317B48B951D7FDD129794EDD18CE47CC69A8CFB0C7375CE1D8C9DA9432FD58267330BAFF54F8201FE0424F167DE43D67C90712BFF727144C7EB5CB9EF8D8BD57933BE5D9EF4620141BCF03C353860CEFDCC1B4EF7D02A414547C76DEB3E4A63CA91CF13E0E288974DA0D605D532B1EC8B749E35F934849129B669338F810149B6CFC45CCE9102910BCCE656B87C5577D77B064C2BC3A344F32B7CF4195DEBDE97277AD7F3262690F2F5883E1FB917BB07328C0CF3B2C5E2DE5B19A0169A3A2C3CBB7E8D175024475EC0CFB116E2BC13ECC57B9F633AF81BE8645FDCD2A4207187C5752EFFFA1BCDE844F1131A7BD4E128D7A6E65011644E3AC6FFB7444F80AE8B430D763DEE08CF23D47BD38ED4D0C19CADBEED062A2982A4EF5700449858BD16710AA1666B89C3D4768BC64886D7CF4195A155854D139181A3CC247F9621BACB28CB8160E09549CB3CFD5C1D021C75350AA2A785689C5ECEE4F7BB98D84B4D4D7B40B6CEA251152A437EDAC2602D281FBFC0DA874DD5DEB2B5FBDACAF11331C408913091DBEA64A54094856EB9F05BCCC41692C9430DBB5791B810FE3916F5DFCC62AD767AB7EAAE9210DC57ABD8AE83F3F92850C84F8A3A30DA5B4A5F29CCEDF0A255C8C04141CEEFDA7D1DA5AA242BE8E063ECEB2F8BDC3DD2C57CF9738F26C5A6F50588C79828E1C3CAECEC3FB3E7B2F661FFC8DF673CAE3E692741E4AB0688869D9A08544C5AD998C2EBA68E076EB0E032EFDF99D55DC0E6CFA12A4F78E19F766346FED391A3DA919C5AE855DA1CF2099696FACFF1F7282A271ACCB92C3209F1461332F763A79988D6BDA46949A2B9B90F406076FD6598CCD391A581E3A15D310594508130F1B7F1CACA73FE677F64A28BC1D7F996EC6500D2B8AA65144919EC8209FE183BF06F0BFAD317C61BD140859244959458A5D9375C39F6B0BB160425EB4E89788CE462F364C3DFB26CCC3DC8FE2F44C4C09408936B97223C74D6F518A549875D3BB117BF6F09146D0981879CD51B11B6FF7C023957376B88610502BF9FD4A474FB681966A952FA5DA16556954ECB7F47829214BD63FAE90F9116384547131363F9EDC6642E334B6BC6DB9B786A06BB38BFE459235922CFA8C54771A73B15EC194AE9B45FB46433B4CA50D48038034B1BC935FED670D325D3EF0788A344E0B55248ECB4D1B45FB2C0024B599D8C09133471B64DDAC44177546D79279C0E63DF5D2E72765300FCD7428162AB8653DBA963FA6CBF9590E98D5A10D846C21F68111EFC32BC5D562C3266A0E71454CF2CD71AEBD3115D0DDAA204A7567420B6AE69235680534E2D2EAF7971ACD99AE113BAA9B0E4123FFFE610E3A495761BCB7A600D73BF6B32E107E85E3B6FDA84D15974BC25A50D464E380476AE8E8CF4162F7E3ABABF27DAC69ECCB4506232506BC07F9BC3986EEA285FE41C24376EB59A6EC6B589D5F80305872A400BBC36CBCC2249372872F386D52E82587C79DE332C19A7C30FC53E3E033C2E398FB7F7913898F414DAC4CCAAB9CBBA5700E98C191F4006AB790A94733476FD9B4337F8C54D958EEE36859775ECE94933DF19720612010D727CE2048EB952BB71281EA900EDF4D235483CC0291B33A4EE09C1CA368EB3D031ADF3F050F4361547D4D52212B50C56B674DD3D682E2F0EF0018129D912D6E47B09972D762ED95B8D1381E8196866268827260F2E924F00E5CDE418CEBEDAF06C9A93AA6FEA6CF5CD294ED38A593F11FFED9C54803397AD5DC6ECC00A9D3E106A227B0501EED87BEFCB41E6078A1455C4A79D5510947F0B99DA9268191C7E2E3B37BBB7161B614D7136A4755E3A7EC99EAE6B8B59DC9F4D7FD9E8672F2543DE22029054826A537FE1BC0EC987937F24C7891E9D4CF82D38DC4534831102795DE50C26A17A3210229EF646EA88D8B56156497B42FB2815D07ED82A19D6B9D6199972CDFF3D08F857B69D3CD123110B57E47FA2A53F41934D16F00B0522EF8C7EA6011A7699EC67E9B4A7A5F11A547EA0BE74E514CE9E2C198C127411B1EB0E81492FA3748BD771E060BAFC0BC456D39BBE17775826A26F4E2EFA2649E2FA149689818878571469F90592D2FCFBB5198AE16104145636723D4E450E775CE4CFDA82E6728F7CD30FFEEBAE130D5FD2F31728A4380234CDD0BC886A551DD31B317587FEB13C3DC3EC483FEE8173B949629C2D27369B84805C289B65C8E06FCA4E0970A4D6A863067CD131781A7CFAB03E66424D8045B2D3B4276ADA25C5142094A1D6BC4BA1D9B2638DF629D2E3611A10E54EB191417EB3E8B1D396815B4D3A4A46E11F4C5B7F9EC5A87AE87D66AB3943D0B2C32EA70301564FFE63B1B8F2309CD04D1333B73BA7866C12FA36F2E9AF3659063AE4BAEB1C9ED89BDDA592F08F43CDFE8BE063D3F856D0F163C66A79B185AA27A88E5BB751339B462242E437F7A7423E11A673C83E0FC5F77B86DCE06B5EADF4472EC85C0900AC298CC8F24E4CAC778C722D693285A730CE176E339C3526E96761358E093EB1C40C55231FBFE91CC31DB91008C3B646665FD99499C82C5A56E36FDBD38FE1EB995286861CEABC4A1A40951F66670E75B661E0D4BE5BB9064B8FF2593B50BC612DB7AF36858B59CCBD228E90F950EE2147268F52BB2B7CE985A4F655FF3A84C0B2F0C73FE28A8247584692FDF91F02C1871A8B41329C846392752522CD666FC444A709762978C03F03F0040B2073026F4749D7F85B2A7ADD57320220523D514EB23BCCBF267319F3E53040479B2F3504085E3E4A7CCA6575EE9EA529BD7FDAE3B72D7B3019666675267C71492D740EC3D0E68F940D60E291FAB720094DE6AF484CF27A9479A9FCBF5ECF9556B973DC3AF634FDEABA15E2A798FBE7348A67293C4C95F3FD9B2928679B0E93B238AE5A028F763198E7D5A282D539532EBEC01A044253A6B94EF8F7B42010C19F0A746B0D26DDB0D28CD855140F64D9D18F4BAFE7D69B21A8ADEDBBFE7EA68029D366AE41227D915020C10928AB93B42D7FBA5BAAD240052E065BE9AA45F14ECD62F2DC2AB6622D843013CFE0BEDE8CD10BDF596B51E62791DBBE6DF0AA193C5058B27986B64E0843809DA95FEEFD4D2BC42E119D4CEB9BC933F861327A014612462F604DED6D95B1280EFB6ADB2C03633F8511749CE9AE864979A9A1058A9EE1EC5DA235F242FB730641AA16B6217CAC2320958CFA2A817C328980F4A438DA21F721AAD4713D144B76BD6F51C6851EE64E7D11FAEACEEC8D6F64FE2DCF9D383309DE67EC6C8DDE019EF5729CED45607F1E21704E1A9C34B72CBD50E35E5757638B0AE700937FD7B31F90552439B2776C6F364F742866F4B13F9ED5DC744D37957CB668D38AF1DE6033DE2B1E9EE2E9752275CB17CECBC2E4AC117F920DF5538DEA99B3332FAAEA03ABD1ED0EE6A21921A01B8ABD3BBC116D75200DAE2D7F74AD7956AC5C0A3A3FB9D705AEE90890AEF77CD2878DC01E04E154C17A24FF70D5678E7C6B68C5C4529F076C987DBF912DC970CE74072A8E7DB595089D3D5D549494B1F9B8C65353E0D48BA7A78BE2FAFAA9607404360D092628EAC6BEE5AB011B4663E5D78B5A83E532D32E6EA1C996C88969850163D21BD20F791ACF533CD3E9494004AA715A16D8AC98C9A4FA1F77FC26534859C78C601A776CDF2C0CEB4696FDA59A16CD471EC36A64D414DA2922B1B6AC5D1F3A4BB8B8E61E6FDB908E2407D756508DD37B804F3A215E916736C921617CA08BB6F3A33582AB6E5A2A16EAA706CA16BC52AFBC5D48D2F31D10AA9A4B2FBD360242B730F148C4A3CD4245BF31F07F79668AFF95839D430F2AF64A447F83A3A01146DFF30C9A45C4B20A515BCFB225E8DA890433191C6888751BE860D06B4028D6F7A81486487230495CCA71D057E7ED9D8F92B9D30AEAD5963998F7927D1D6C8F6D89406D22A354F3F14E029ADA62B04F4628C86E18CC3A72A3E5D6CD2B56689AA05C454E8AB45B9C5876E0CF5F4B9CE005A1534226C56D522D70C650157F43EAAA77CDDB46B4D30C711E03E1044BBD3C41E078CF2B49177EDE8B71BABBA42A629F0B7CEF4427D590BECEC3852E6AED09D3DD9043305D31D3B8D85F1CAA05AC15F31E690E1D0CA9988A25DF39F6470329821811C49F0CA700A28A9DCE21883D902C6888C3AE4805BF63CA3F764F946BB278E44B38B60522F4F898E2E96253A329F5993A38EF0EE7B54D82A2218626C20AE64BB2F3F97046A6B73893D549BCBA41649DB210B9DE4DD03780E1FFED4DD07A45EB394369366E589981E4748B1B4CF1549136E62B9776113D6FD5362726E85D91ADE55AB2B43AE4FD633B7EA5AD19061F720F9485A8C210309612662F90A1F7DCB4C56FC25A80DDF9BFEDF5349E57ECA15C504E083E7B50A56BD831F6888CD2B08846B688843C70B712607DBF2B661261EF284E8F783F347F431ED5BDEDAB5E633FE38496C7D841C31A298041C371B87EA01A658D96482EA3FCEFE92B9C91CC93AE907D1EAA14E458EA5DA40B0C66A5B7830E0F2D5A29CFDBEE073ADE3DD1F62EEC6B6E0D7D66715E014E08300BFEDD02580E7B8AEB7A20D1A21DFBCFCDEDEE02CE0F25FDB30DC75572116D60066553A72206E3088128A7DFEC3C3D0615DDF385C9A7D48B4B066782E5FF4094B4B0221E3A2DACA9249E3FFFF5DA2214C9FF4FC40EF6BE883A339E6AE3446A2EF521B7A0F5CF51A9F4FA9F98A57C1990813653A96F2BD12F0722A1A45DE11246E149BC7965C1D38992089D588C0D29A010848260B640693D2904E9A2DB1D27C7E4BAA11800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%%EndFontu1`65/AA /|______Goudy-Bold T /Goudy-Bold x1`65/$1 bmt^65/AA 1740 1740 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`651175 -2253 (C) 0 -43.92923 480 0 0 A1`651655 -2253 (r) 0 14.070694 296 0 0 A1`651950 -2253 (y) 0 -7.677902 355 0 0 A1`652305 -2253 (p) 0 -14.923737 347 0 0 A1`652653 -2253 (t) 0 -7.677902 234 0 0 A1`652887 -2253 (o) 0 -43.92923 319 0 0 A1`653205 -2253 (B) 0 -29.426483 454 0 0 A1`653659 -2253 (y) 0 -14.923737 347 0 0 A1`654007 -2253 (t) 0 -7.677902 234 0 0 A1`654240 -2253 (e) 0 -14.923737 307 0 0 A1`654547 -2253 (s) 0 0 282 0 0 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`6517 4800 -2874.5 1050 -2874.5 F jbd^65N1`65F M1`65$1 tsi^65t1`65%%BeginFont: Futura-Bold%!PS-AdobeFont-1.0: Futura-Bold 001.001%%CreationDate: Tue Jul  7 16:43:39 1987%%VMusage: 1264 26869% Copyright (c) 1987 Fundicion Tipografica Neufville S. A. This record % material and the data recorded thereon is the property of Fundicion % Tipografica Neufville S. A. and Adobe Systems Incorporated,  or its % licensors, and may not be reproduced, used, displayed, modified, disclosed % or transferred in any manner without the express written approval of % Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated. % Futura is a registered trademark of Fundicion Tipografica Neufville S. A.FontDirectory/Futura-Bold known{/Futura-Bold findfont/UniqueID get8863 eq{save true}{false}ifelse}{false}ifelse11 dict begin/FontInfo 10 dict dup begin/version (001.001) readonly def/Notice (Copyright (c) 1987 Adobe Systems Incorporated. All rights reserved.Futura is a registered trademark of Fundicion Tipografica Neufville S. A.) readonly def/Copyright ( Copyright (c) 1987 Fundicion Tipografica Neufville S. A. This record material and the data recorded thereon is the property of Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated,  or its licensors, and may not be reproduced, used, displayed, modified, disclosed or transferred in any manner without the express written approval of Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated. ) readonly def/FullName (Futura Bold) readonly def/FamilyName (Futura) readonly def/Weight (Bold) readonly def/ItalicAngle 0 def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 75 defend readonly def/FontName /Futura-Bold def/Encoding StandardEncoding def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/UniqueID 8863 def/FontBBox{-171 -264 1441 1070}readonly defcurrentdict endcurrentfile eexec5D9019DEFD1C3ABC2E04D323862D978108E42A8CC86274E9AA0FBA2D3B388A7CD0CB3160FEE780622CB36C1E7F789AA933324251AB4BC8520477D7EAD370CA089F0C91695A7845F6870800235A8D66E60F29A286B21BEC1C7388AB40A58FD697AC60CC559AAEDF1F46948166B28D478CCE98A00F5A5A907D287049371916F88B6F379324713DE7500C814B7F6C4BE7FD083CFC90B3E5F1DE456D0D3E7113FD80C77E9CD47FD98B9FB26542F433A4B51A4E07D833D09A2349376AD846A3181F2111460FD236FD47CA2A7C991A726E7C8E72F76529F0E9E90CE262613D443287B61A79F2175A783ADFEB831DF5450E588B7671F27DEC70608F6FDF4D98AA5926B45948D6E8135B4D90AE9351768F4E45B262FD2D4BEB511BFB58983870E8D22A4CEB003FE12B57009F1C455FEAFB01A47E26C6DFF526FA985E34016169F1A8AADB5C48C343287A6047399104DDCF837E6A8708B82CF42823B7C01ABD83931C0191CEC83D1B3780D185EA008A42920FC999050E8A9E83FB4F7CFCDDAAE2D2B621528328C78CDDE96DF7D52A27FC9CF0862FE6492DEFF6C367DF65CA02E8EFB82B3F71A77ACC62697A96608C4FF9F16E1D77AC807AA01D43385A64C748B94E403C5269E9B9710A650FEE889F6AE63E732AF6A0889DF71BDEDC60DBA9D52670793BD01318DD9BCA7E65CFE726E7E27152D48CC36096FDF24AF28322E719D702E63A4026BCCCF459939DD82217C23C9507D069B50A4DABBF828DB5980E3FFBADDAB3997D50DE54C7AC02B0365B337CCD174CD2F9448721E42378083371D96C47B981C05FC820942F83EAE53D1C2988C5E081958C86B42A19651102E76F3FF91B82281298CDA421930251C52C8AFBFD8100FE42A467165441200806FC6E87C3C765FCD18A7A45A5AC7A72EAA23524BCD563BC485542155714B2E39641551E69991C1655AE02F9ABE62D95A1BAF3A04FFD586B4EF3F05DA3C4A221516B5C490F7AC0574CF221AD4BE9639EF6C4267E08858567124432FC8A0E1A3C26E2D3F664A8A00594D230288F01AC3A69275CDBF317F83712E12C406152FFFA59592734A8A0EA2C26B326C46A04147259381D744B625C844917D8A934DA8BDC7FD4F0702DF8A4D2FB67F6AD72C04505871504890D3891A2F7B5449CE93E6372C087437B94C3EBA6254CF5400238A93B3EB431040CAA44469DBAF1D82986FA267DADD1134D5ACE747EC98BD680F230BBC69F1E6127A9C0A87F58DC7001C7344365DEEA228A3AEE001311BD364500B24DB577074B08115CC47F1C49AF214998EA81CE20ED6D0C415620384813DBC1FB09B5F844BDAD07BD610A3FB9F86E9F0BB70273940470AE533673C842B6B8F3CE98AED0F3E57BB0B841C07CA456E88EF5BFF49BB75ED786DCF25A748C26F8EE8165F3D036FA15EAECCDACF8396177D8E9F97026A683ADDCFDDC6E05B8838C61224BABC03553FE8DAF5595C82784C1A15D610F6BE4109D5ED83423F9F6B7025153A1EDACBC46F39F32C5351E46462251E57BAFE1280FA20E7C92DEF60D2E1185E581A028801CCB7BC78043023A2E4639C2E773D309939310A9000BAB0854F4BA26C0EB3A7CEF6FACB1255BA1D285A5801A29A21E83EBB9396F2E9B42A6AF60193DC758DD8E9FCFC7C1AA06E23DB61A23204AEF77D8262BCFB293AE0519BEF6A39D2AFEFE00A79CD1B1E9B384922A16AAF7E7C32A97D8DE9018DE6D2489C683D60070F63B64FC73A8D7FB8F45950E40991C8FEA6A732DE9556851D50E25B93FFCEE2930147F634C11B37E42E231E8A856E46422C1FDE66CD34AD687CB16949401F71799D89845620DBC216CBD42AB7528FF0A67151184DBFF78C8119843574F77E5D95C06126867EA887A5CD39365AF02A4E8533386E362EC7CB8F36F74D1F84F5A94880021532D6DC0A94F24BED07F35492F40177FE2B93F59FF5AE74B66EAB6FEEC20FBA22DA80ABFFFB23587F80F4DEE5AE0E721A57393CD44034EAAB7F17C5E81A45DE283CEDD49E0BAEF9E6ED0B538A69AA943690CC15CCF78C7B368CE96F74E432F75BF662193B91D15088BC439F4A441E0138C72BF69CD42F923FE68E99B9F75309C665D3BA88CC40027D8F4ADAD6B480228280A8AD355A330F90A810CC3CACC1D141A1CA3F2FD94B2C9C7D5C1D2205617B0D434C8EBDD13BCF00EFD694DF8FEDB7BCE18AEA8591CB30CEC7D2C69A181397C870B9DA1B9534E5BEA6F3D455BD6FF14D5042F67624833511E45AC1CB5E95933BDA41E8FED34AD2361495C1810009CF766E9A06223DD2F219B706394A9B6C5496BB1B7206EF28DD001181DD38EA8FE88807BA1EB9E68A16E32AAFF6CDECA9B7B4C62375B3B86AEDB75691CBDC32BCEA03FECD9DC91C2469C99B536570476577727837B2F02D54B097EEDE4E3FF425BD5D25484B3B33B78F5AD1D374D933FC89ADE10CDB0F3EAA8E51A9005433168BA835FADFDBB35A9BC0C59A6FCF9B41735F931022D46BB134527A97473DA692882B4836FE049D60FE8A2C51A2A1C1EEE702F2F7B3584614369253A3955223AB451FAB8406A0F21674D0B31F3A9129F07BE5548CDCBE6ADFC2E4CBC5913D7841234962C7FAEE72CB694ADE0282FBD9035CFC5D31AB899E88EA11D215B66ED635BC04E7A68414E5506FB4C378DDFAED33441AE923E9F961A2603709E1CB009EC9DFE0FFA3AB1FA6FDBD7EF309F6EACA55C0BBC365FDED57554CC8554E90E9759A1FD9E3E1FE0DA6131E1E0E926D3DA1A5659F9AC90ED7BB8D99285546796FF12323B4B2087BF94FF1939955E9B623C1E56927357137873AE88D53366FEFF456C51F7ADF4D1723C53BFF45214FFEB917584EC2EDCC6952D9ADEEF7AE8244D47F69F7CC49699FB8C590DFA5D9DE893C013A4DC242A821DE55B18B70521D368E831E5E7068886D094AAA65D2883BDECA4F73DB77E9CB1DC2E700FA00F1D3EF24B9ACC8D58B2729333E0240BCB50E98E68D5F70CF0A67800B442988AE5D9408FBF96D13140C852A54B66C9E5BAC254FA1DFD7D0C8FE157A639DF51E96122C1951BC2B7CB286C9DBA24C33A33371316528160B4116C666225F9DF8AFAF6B572773D2F6F80D7EDD894A0792158E0DD21BBB14369607AD272064E19ECE6ED8390DACE32541AE084BCE06A7788364D4190E50A5AC9AF293EC3993DDADF58833A4EFA28E9782F9C6FD471EF22E7CBDBDD8782C8C37A0E621E792D212BBFAAB42568FEEDD0EDD121C1942757D336E5B30DA7FB339DB2851415387B4718FD08D778DACDF493FF86B89125611D368589CFF1A7926FA59F89F2567DB34DAE18BD60B0A8C79CC1CF4402263AE426DC130AA89A234AEA51D87674D605DA63F194BEA070AEF3EC7ADE673500D0A7AC8D21AAE731A685565F3D8479F61D3D56C1B261F3D4D6FDA296FFA06111BA87056E9535A9C28EAD79C31654C83FE769424CAAAF88BB8CA6499ED7E23D1775780079E875C667F81E1E6E89354A12100AEB49F49F767DE586FF6D2B86FC2373AD0C0B1C78D5F5F948C1BD36396959E24DCF5FB47115DFC51BEB5F8A36696311BA459E8BBB2F9A203E6BB52F01F04D8000D75EDC4A0052779CA107869F4C66202883FC0E02D6BBC0DAE858F4933E4D69D4285E5159D5517C79CAE08EE0894893B530ABBCF27BF88A4BEBC42999494EF296546F527020B3752121801B16A44FA926093CEB9AE0A957682BEE7EC6A33E6634516A1700A2526EA9D0BD603DB7CCC58B771290AF040E5FD5BC8FA0880D4C8A2199EC1F182C92543C549693318E7A2A70BE94C14F76F6BBE5B3F0295C12E148648C4C58003F470C0A9893C596A49300C4D3FD6A54184B3F1CF8C2A173D3B7AB1783A065E145DBA2C58449E0F282E095F903F13814922F75949A11F7DEE2D363F460AD2EDC697C77FCE63C645312D63991615A2F1EE0117B12A6E278265EFB6A6D4AA3DCE44C1CD7235DCD4346A322E0DE3BCEA7984C4AFF03E863EB23D7C8349B3DA156B9A6459AED543DCF284A13404A9B5FF534FBBD8478744C6C63754DBB0F72EF39C1395AF38A8AE44CA3076CCD1432397B9602F4C77FF78D90D61B82DABCA9ADD03037E61E2A1C90371870A9A59DCB34FEA1D76E09ACCF09A5AD3238E2ED31DA6A182BA8A11EE7D943BD1AE5CC2B7969B641753F9FDD48A1B542D52630C295D75317A4A69E995C7383D97273861E913D9B5A4337D86A43C12E25C7B880F5A0A5673C77357195FFE14FA95FACF240CDEEA9921223C1C05B83852C9D447F3447CE4BC85D0067DF9FE1D1EEBD073F2376E62AF3F139266BF0A7BCD4074E1B286F620CD769AEB5554927B4213281A9B184E11FDEA1780EF8482509B69DA564F877225FCBF8EF6BE65D7114F906F42E8ADE242D3091EFDD499519F87A0FA94C45E558B9C8FFD07F200A82F409535F7405658B66C20C517670C902A1EC331EC8FF40561330371FFA8C58F280135A011B682AFA42477A61C974B2CEEF6268C0D314E18393CD4E6A359A9CEC6C2BB64ADB976C44938B90C463CFD3A7FF6294E6B32F3A80E14518B6ACCD8200F603D10EAA7018C1110DD104EBC27D273DCE39A6FE3ED5133D991BF495CFF5BD5C47AAC3A9DAA9F9DF7A21A097F5DA066D87CB527725BA3D068CAC1F69D91776A0587A852BBA549AF12635398F34D1589713DBAB4DA2618BB267223DDBE0652B977199AF92C10F9F1795FF173B98B9BE38A4C935C8D282F4CB896A0FAD7DFCAC69563AE9E2B2FC18DC682A3E544E3BE9FB2741EE1865E95FE3EE153B568F3043F969E8490F8F965A5D603592EBFC51B52DC2FA4CAEC63494E3986C1F034BF700C1993871E96D3A94314CC94DA5B3017D328B495B0350A8C0C7868CA244BE963D48B3D449E96F84777DB9054E1EB971C69BFABB9F0ADA092D9C850DA6588AC932D8B93C9625132D9994327DAA382971382C7E5041F3A504C039E6F9E451F68E8F44959424AAE6C48467D96C2C4960969F12DFF7359A41E0181D69369AFA52B8192BD4E82FAD46BC5FBA3ADF344D91AA3F7B2D999B892414AAACED4E6F28FE3B12BF3A3F234E0CACA7DC16114EFF9DF1C3751E074B0041540A6C5DE1246731BECF3429627C4051E24A353CD132C7049C8F0993DDD8F3033BAC62502E08447B09CC18B2525AB9B20C73D8B03C9237AD01BE72F80328A1C8BF58D151234A49C40B649A7BA45ACB8D2F683C6BC22A273844EFD463CCF214E2DD043AB6D58C17846DE285A5B96417CF6F422484DA943BA9B1CE1ED25BCBC5196622CC08610A531852CD936DB8EF98227EED0C87282DA863525423D618A69340007A11A1DB801FB71E1963B7D96CF5ED3B41770EE64B5FE30664DC830E891D178BD7EA70EE95CC8EA6BBACB5C1BE23E4A229EC84A11B139579149A25CECAA3AFD380C8A9ADB762829BA52FED255F610E9E14384D189154B1026930C79B47D0EB54324915715059F7A0F07C4B1B2D4412D6C0B22C74073075B76D6EB8732ABCFA8C804CDF63B83427A90D03AC148CE881D5072CD64C3B0667E8BB74C875A4130B73D5060E66EE723DD84BCA636C05B5FA8EB682028E8FC8E77221252F55C654863CB28988A8A565AF1BCD5F7F4E35131819811A9768732D568ADA2D1876E916FC57E25235EFDBF7E51D56C22CF37FCB441EABF31D43C02DD6D315F35C8231746500DD87ED3AFD9AE29FD1940A387323F67B9462FC55ABE1B42CAA15943256C1E1EA05B3DE120CBF2CDC24D65063A84B7A0E30546442F55A1E7EADA7ED8FE74B1E823686FD595F4DE252CCD7338AC15426E4752C8AAECC1F3631A87484C295DBE466E7A53D9331362027296794213A063A14D0F6DB571607F9CD54D5644D9E442BABE583D53125A84D10CF0385167F3E6C2C81046BECD4E82BEC593DBCC5F29437C6F4FA2375719E962ACC3BB30EF7832B592CE181AD028B17CBDDC69ACBF9CE69F6B30ED1DAAFA042AC33F614B8F96C0FA2B8372F713F45438463C5D408C56280045A105BA865FEC188BE24E44EA9E950D02B3F1BB76B4A73D8571D28E98F67D61173EE1A911F5B262ACDC7705AF296FCED7F0B4F3425EC5F2E8BBB0B5E890267DF1A61CEDF097D302BE05923A90571C5A04474FE4D777E068B6C458F95EE50089FCAA85727203856A82816E41BDC05C055DE4B2D0EB47A012EFB972A29EAA2EA64BDB1ED5824E00E0D4ABF5E65149D67952116DF195DE7B3A06FA1209F9E1DC0AD70FBC14D90861D3B96C7D9C04AE882A45FDA8E0C0F72775D3E66E4E0146BBECF144B89C3CE4634F0609F33F404C83B8C05F128D03E5BB4382FF66AB25E33151A750FA97CC071F6E51D77EA2E4AF1F3B742D41AACA01C5A025BC0E8C76C5AFC97EA1F1B98FC1CF1F120395418AE1450660397CBCE196B98E89E0F7829AD53D41C38BB8A73549BAE251C21AFA7A6A0E0249F1AD581F829C5B12F452D741002B3A2491F97F5C22C1C8184833AE80EFB504340040E2AF2DF4C70C80AF81960C0E6D8EC126C10203DEDD68631C3D27E0A228AD124C9E6F485748B5423207845A8E645D02B1628C14D18F8E1B350EF66FFC851B564B8FD69A69703F18B069AC159EED02450A9CC26D93D8774516FC5AA346329AE73E2A71342025DBF037AFF8A021F37873BC8CE09AA28ACDB4317A27C32B1FB72931C729920DB78C8DCF3D9BB5EA80EBF3FC123B43EEBF00D0AD9AAF4C0D30A96F097A5D340C636181933568D7879B21FDEDE7264C9BF9374E18A151D502F7F92BF8392616E387B6895DE64FF15AF26F16E0295A75A64DEE8D4BF57138433B5457E6E4AF2E9D0B4A8E5D80DC8965855396B2EAB11A606FAB63E4A86226C536D9DEB5DE2D46902FECAE58D22ED4CC7A9FAD95E18E524FF965EA30B0CEC8FAD7075A48479C16449483BCC4C9C3A9A4D5FD86A6DB7643AE02B3CCEB938E8B82EDB5A968DCCFF02F86ECB9083438A7103B2307FD26BE0F55735B9489BCC6182DF29D73EDCD75308446BED8CD6D7D6C8FBA9C15086015B200314C0A447F1C40B669F0DCA02B54454580FA35CFEBAA1243E5811C889BC611DADDF54099299EFB92C228A27411ABA4ACF3EEAB7DD54455B48E8705451EB3829222887B9B05BAF7DFCF1ED1CA888E68E30DF8C3C084FEB0E1942A3396A88C63C1F567F7ACCA694706CB411B5AF5DD7852C20A3DFA258EA47B9E177E5472A2ABFD5EE5BB0887F851FBDFFFD3CD8871F2771A2C68EF0F3BCD606515767B40EB344A9397BE2B75D3A512336F6233E71E32F13C3211639B11F8C1021A147F64F647F250A8EBED15202B306EC73034915866C5763B55D2D8B56D7EBB8E8784A5B2BDFB492D25F09441535E2645A406BF0B2CCA426F161DB4DA4012CCC3D920B2557630D11CB8ACF0785DE9994A4FCC106D20F510E3BEA4B42BDF5F803791C546060AF14C16C8A704BC0944EDCC892FB928071D2E98C0A38E029F947CC74E895134BCC12B42AB030F3B311114D25A87AEE40D297C90761D7189AAE127F97240E75EB89F430F41E0E8C6952B20B62E8E1EB00F82C9C16873D24C5D187AAD708B6B48B968EBDCA1AAB93F55765485788D375B0EFBB2CD76CC8A2ED5E2DB32761A40FACAAD42B1ACD4D5F912CBA2050DA456DEB33927346D4D90483EAF5B63CF1BF9B83EBE8DF1F7B0A6D171313F92A3066DCDE9BD8713D94205100AA624D71D905508C2AEE3157EFD015FF1711352780AF9803A5E02C95873925FF3B574A6AF8A87EA6E412A15FB82CE00139DE388888F04C3B6EC78513CF0277DB1319FCFE91A4F9C4E59C24E3AFD33A4B0C3903A381C468BC35C97123BF3D41D9FD41EED78B4B052CD921B9C4155240FDAEAB36FF46D7157E5E933829542F2BEBBA6EC58376F5D2EDEE657F0C333C2FA271BE71B343BBDBE6B06D4ADF8C2F97F4251B93B4C4D950239C0EE7DD69C14E19E1CA85638BB0BE9C722443E958A4F16173DC5284042D91FCC142D28E6288768D17C66625DB7D29A3BCFCE07C946957B00D7E4893C1332D1B127E6ECBF63D41483EACDA0CB2957C84DBCF0225A680F3356D1A85FC84DBF6C8D21B1EBF049127E34DD040569702222A63D39114E76CD206028DAE6BE3D8FBADAD09EA3A0C1819A99F8D39B75F8A52C920102602CD69978855E52C3A9966B62DAE3D806A49B05CBEAE0959BE049C714F23AE1694E5C14DBB9ACDDCEC996568B948066BE662C15D5596379E5D7C19DA1FE0E4552DF07AE8D73A146EC7611EAE15C4C6FB891A0ABE3F42EA9AE496C90E643B8445F750BDB3A925AF4BA98164E483A61C715C7266BADA3C8BD167167987589064F977DC76C1B210E18195A6F0EA5A81C0DE39413858E8AFDBC1F4755D9E7226A4E7C54D0B3A5A2A6B7A46A372B59316C24FA857CC119B1FAE5A5BEBEEDC09E5FFEDCF0CCFCAA4BE921487B85E84309CEF4AB70EAE83908876BE0F5A5DD2D1DE41F65E0C3BD2F6167352E6BA2B7606503B0F67BF168F83DC67C6E93B7FECFC67D09C14115AD2C7BCF0E2F83C1B9AA4339DDCCFCFD903DF37C305A3CDF873E22391E9929C5261A53F07834ADE7DA7EF904291F898DC9B65A975776971ABD3190A6E8D988A90DA5C9565A5FA995F1066121CC80F5A908EEBF71B9A23E922FB77EB24409DA40C118854CCAED4D30AFECF7937392AEF4D1102CA1A2490ECB86497589A63B81B626ADA3E29439ECE9B7088AC38AC46A87BA28D3AEF282CBCB7FB6F9960E1D3B19279233BE317E907C79DAAD67E5C3050171CCA7C216D40D728FAC3675E909BEBF8715E0D7C1E59F3B636DFD414759A02F03EB99A30037A319B42CF451C8F6623B17491F6D9F544E4A39C4959B1E25E59E70E4BF53BA07154D1F5A76CC293D2E6F78D1B712CFF3238BB09099AFA002E0F5D25DEAFF75CBFF6604F21F14CEB6C23A2082F465882AD7C61DA6E89C38ED101495725F43922C41602CA554562F2A0BF28E5FAFEAD5B64C8800959153EE97CA00E737A4AA171CEA3252C6174B2EAE2CA0C619827B5ABCFD98A422438D8080A43A2FD7C28919D066050578CFDB73A6472FDBE78960B03FA907E69AF05703C02C4E1A6FF19F68A8650CAB0784D077845E62A17509512C50E949C2B2F65425E72F9ECFE1F9374F49FAD7A2EEB148E00C2308DA2517158D893A22C926BC6AF204420DADF7FDF1750AAEF0E3D5F203E617C4E9E9DBD8B1CCB1136ECEF702E0775E7B8230B1723CE139B6E77FF1F701E9B2A70AB58919259DD8937D95FCE64E29DCCD8DF4E61B57A6554BD77B64154E67864042E45048D3C4255C76B86CE5AD7B8F0C3F429D8FE9C4F23450B475FAA037CB6D871FD9BA0B6717888A818135159D449CFF303632968FFB1AA6D68AB6C5107A0149C59B08B12CFFA9B78536C3B51EB691AEB2DE8C8E3332AF1257906262C8CCED072B48FB9C596F51AA9D8ED88E7B7F987FAE240BB2B5CD04FEDB52BEE3806C628FAD61AB5442DACFDE349DF8A55B1FA6BBB20F093DA9703946B1CC243B382235A67FDB42A36A94ED3F829289D359D9E24B083E54D902F05D5139929360F5B9608276F16EE6483B9607C5B070975CDF818659DF7EA59A5098CF758FCABEA3D5E9A61A9A34F1E77FE037A0094EDE4CB883685DCA82037561DFAC225F060B9B2C6DE4659BCFF03976DA5DBD7D29CEA4A5160DE825C2AAF80A528A5DDD9F274B960E1F4714F177B5A3FCC337649E327A0BA648DE6E27DD1D18190D6C817424D34AE88DD5E9763A4B423CE7D1A473186005523F649FDC5F20FC57F622BC1E908693C92DE5CF1101240448715CC3EDAB28B788755FB13D23216316DF73427FDD8640EEA8C4E36B2278D0FAB4CC2FCBBC98434DB5099670350954D24B6D8D15EA493E6DE29B8D705CC5CD3A3BC6945C3E29B736CC57AAC413294A86284D5B103493C3FD348C6D98250FA35714223086958E00E00799011F47E711798546B2BA8FBCA4EDCD201B947F783237B9B7F7C008968FEE61058A61570808EC31543C587BD70B1A7EAF6EBB75FEFF336272B3CE46AACBDDA64802FE031443CBA9A673AF469F081F739E7762D28588228646251D1DABB4499DE9401B0C5C1718CE876938EE8C03A30D733B6AB7D6F7FDB242BBAB6C9EF7D7DC68C5D7F211642924F9A8B4230DC79FB05EB9E933300E3CFFCF05CABF4162C1DB21C3E971448C941F47D986161B9A621B7F5C1B545B5922E847DD58AE8A5034151109A78D0821CB882745FA5A72B4C777D347A8B61C0A49D610813532C567D49027502073465A62BADD237BFC008A6830D00CF75B5643B23B2B7887A0EF7FB39DCD31FB2900D907EA721BDF125BAA5D9A4692E8BD0E53B8C207A7DF99BC69E662175C52E577A0F5854CCF9FE53315ACF51D1AF37493E82EEA83E4F90A1E6E90F3E62A8425A9A965B15CF1316A7BD5A800968213B2BC6EA3AC8EFBBA631A69AAE6C19C4CD90DD72E4C58039BDD2BC46A774F9F652972330B348B9ADDCD96D3B9BCE67179BDB75C2312213764310F0A89AC4F7392FC243CDBCC8D56788BA08B4C53AE3B7DF2F2365178CE4FCFD3CB5230738463C74881DF1DE7B5AC44861839AD4E885569B5E1B641B6FFEEEB53339DA54802EBC92CF23A73AA1501A044813C9934D073057B5FD1BDDF811EBD759318AB752B5362D0CA04530CBE2313C7C2D1C0A67012880877C08A61BA3F73C89B75534E967E73701E1192088DFF77233B654F43BFE2297D703B902E1967A63B56FD7632D7CC06C95BFC3E9BE267B70401391156F8E30EADD6FB2E71B778FB6C1BB81DBA1047E447D58D8AE37C03E17A7A27A953F0C09F7297B398A16DEA4515264EC3497D2FB330A96B87C8EBE50C1BC9124DF4DED4CD5A53A83B1B4C61736ED6719197DD45103580B0526DDA9E749F1F25FFD77ED6762BD79936382F3DD764600E6DC00EA9DD8580718D4DF8E7A36E4D885D696E354BFFC1C0AB63460EA44F4C18CA83AC02866EF681551824D5F7096A92C0A13961D99D32D5ED2A1741781D9AB3DE1F3C80FF3CBC6EF817FA356DAD04421BE0C25E2B9980B9B8FE8FD065DD1FB92C07F558D2E73CF3567BC49ACA02743FB79E4D37B466C88FC40842705B4612326DF5CE184A7847D93C7C4710A20C60F03055446C5343F6B60A66D59AE1626421E3F8BDFADA9448F11C641D0925C81CF7C37FBEE5419383A040A205E323D00708BB21C26004D333936CC0083B50251D861EDFD6577C65F6E5BA6779E8FD5E505031C40CEE321BC3123669A8261CB063DED56636CEB1ACBD5B2A041E9B947AE0428B202486A649265C03C0AFCED7C23EA6B32161B121780E324D7909501EDF4CF4A190E7C299AFA3DD5D6CF69BD8E4BDE7C7763D2683A502B5D5E345FC549F41771640FA64DBB4EE3F8F8E48A4E6F47810326E9DDF979FD296E829EA7D7FB23FC917B30F6D4898C3C62240B360D86A6F38C67CFD0220558B09E4373BBC79F82B1446E1524D7B51505DD6D6A94B6179B1A7225CB19EC0A1C9AADA6B5EDABE04441EAF0D74CF6751017C1406704EE14FA5273458DE4BF9AA6628DE752E33FE6EC37FA454E4227B7CBE483EF8957E543103D732B9AC847725A2BC367E129C9BA1F33A97F3198467DC41C53BA73139F4FA758F289D7C77FB187C84CADFC45E663B39FAAEC35D78ECD8686644A2ADA44CF2B067FE3F98257BAB958BB3BCD1001090A4A749ED9F2FE00A40E23E5B71C4915AEC3F6F8EE8FB2E5F9FB52DF927134E444505BE3CA930ED3852DB08AF19047131A54933716568479B67F8E79ADF4837DFD7804BC33752BB3FCBB6F64D449DB15F540DAF3B35B8020C8811D02FD840997B9C82195F636CB730AB60593A85A81B9A5986AA474C2FA0D8EB2C07E2480DF5678E45959E062479775C5E82A401C126865C4FE0AEDC3A4C592F79C537A869C0A898C0D5C52927D5F81BC20AF037BBF1E7986CDADFF1038C31B0A561D1273B419A77543F5A3137F6932A03680CE3A5E6994C0ED190F2A2B641A2A54A603CD423F3387FAC65EB8846ACAD7646D497BBC5661E244E26786B3B27DFBA71FB39D5D798AEE210893D4EA706912AFC4F5795B0CD56BF9994B18BEB5B165C46D507F61B166AF3B6B67E516672E1AD9FDBAE2E3E4C2E2F18470EEC62B0318E2850166967278425C5B9E3A2EF8DC6E99D59FECC17274138498432888605828A421D9A14D5C20353928D2DFED431147940D3A0778B6436CFDCC2297F8B849A03F52B4E00386F04887967CBB406F9AF778B4513A95D6C72F16B3EB465EA34378F550289FEB38D6520F832451EA010783923C878306E71C6A37628AC7E89D190796D21FF9F4D7A5664E597C7385010FF377C2FD3BB338501BB7F04A266A9B6221AFEBD221FD15BA1035953B590BB8C1300766A480E9308B8D000578C255C1A0003B9AFC7B0177C16AA2AD0758C95EB33FD9945DBFE28AEE2617F8B322AD6E3AB0278E8E4E08D20A32632C52472A977DFC2AB64B5A86538B1556B8A398D216994C10A2BD56B48F2BD5E648948E3970E5FA3E1CE384E69B6F0230A36EED4818FF85B6DAC49307549FDEE7698DAFDBB0C6D4821AF204E92B624C9E981045A5B46A0FCF3238C1038CE4C2406019D8BAAC0A5E09E475839BAC9B75FA66C9192FC05F2265A69E332335EDF3FAFA9B11D261AA5E25206CAD87BFEB2C4352796A4E3F660ECCDE5BF3818EBB0E75D25A4FCD15287217E6C7AC5FF758C5B3D090F2BD8CC33DAA090D15D6D68FAFF197354EBE3EA018087BB8C7D955705BDE9B54925DCC864490846C12FD80F47C15DAFBB7CFA1EE9A158A746756ED2B22C8FC371818E8AB7A897EAC7DF42EFA371151867B803D365FCF00A93F0169A212AF1AC41D8C3CAFB8DE656E3995840B7C6AD38963EB9D7565CF53A78D17F9DC12B7037C1C20C985B80AF3B2FC49D7F0820BC9D640CB7B8279F6E0234C2EB6B7DBAECDCF13472BD3BC6C73A3CEFD125CB9E3D0D1C3E1BF73C1B5E4C8DFEA1B0B2447A2C00B9A0049CCBDCEEC18C94A93E563779058B24BD0D080B7107EF9DD0097CC9E7A0C306CA8D2F5BA5BDDDEC5392E02641A53116FC64BA5AFAE7592251E4C4E718A935F0E7AF0ADF1CD6E0DB41F953F0F7588B6F1D8CBD2D806B712F69E94874B940A649B7263E234E150DDC63663EC3D826A8BE0546DA0C13F96985F8D74536C6217F90538CC995F4664AE0A6D6D81FF5DA36BF0C96ACBD646B80DBAAED25CF27C5FD7504A4A74A514C3781BC95B17B613989114802F36410F81322DE3D319F8C15708DDD80085F57CA435ECB880637BBAB35728B17F7AADF26503BCBFF2664DDFA27D444469201CC403197141575F7B964CAC3C97ACE3EA2D2E652D7004782DFEBAD849909289E7551535DC0242B17A38881E0FCA4AA65E714C58B421EA7B2B3FA4812D730C759149FBEC022F77CAFA970EA9398C5C0F52823BD683118D73F1A98C362D7271D607026FC008F9186A49EAD4BF5C4E27BCD0272925CD1295EE0508E1955A9C18475C04C6AB3601D2345336D8B3FE54703297D0761E3E15F9E3FC9A15BB8B83EDF650D975B575E06A497FFBB24BC1DA124AA9535B349A92BB03D24D1AE1D1FBE5AA454BC190F67E852DC16E518BE0EBD0360A3380372927CF77EC1419344E83AB29CDB60F327FA3CCC09B76511E99BE8D0C0BFE3D5F2F97A7C5CE2D6D165FE5611CE639A9CC5A6A0EA97E9AB1023D07C3BFE717A9B5426C19A9D5F146D480777D39E013EF0CD6130C71BF86FB08093E9A8E7FDFC797325CF5CFEE4D0EFB16F3D7275E2CF3857E6DAAA0CE107E53C1A377622D951AD1331547D613A6D18437748DC739D1A29C74A5D75663C52BF311141464F0501BC1052C8BC5866E9CC3922272FF70C3755846AA2A169DBDF946CE8D3891358A6098F91F1F7DBDBF19641A3F93DD593C0BB622BE73956A7B20E0222DE95CAE85E5CE1987502C7B098CDBBE4953A8F9450A857B355BC0F219E6AF6E49E85FF5A0A6DEDDCEF624D92075C235148D97CF64DE53937529B40F93D3760E81DEE7A87CB181D4C1FF15C8472FACF9CEA05654D92491DB20A7D050756676DBE030C60DFEC87E9676509A886A943ADCC18C6DEE92A901465418B3B4692DB1F40C7ED6556756F81A9E311345B7D1C8918CE508579CF5FE00F1068111F5F08B8C269DC8F49CB315852EC5AE9D60DB9E7037DD62967AD54E3CABF16323BCCABBFF2CAD315B78223EB3D75C2E58807B859ACE5FE4F8593C5E738E3AA2A4767FF597A5555D1690C4F19AD4F0C3EF185830BDE47E02E605586DAC694B79B00DA4A623C27A7152035A8FEA9FCFFE3F3B74C9B09758EBD984DA0B2F20E36CD833C4B7CA28D8717C84434A457C24F9D75D5D4D0CB4E4BD39C4C46A71C416103EDC745F4ACF6F49197C1E34BEDF8998F9918328D42C3BF03F7C2B7695626084EED4F8D1464A673A15BCD0DC7ED01BFA7410CFB3C5F5E18488FBDC2B42009F445D068437A6B84F3FB9923A26F866830C1393FE1EE8EA1C731CF7E5EFC63D7FF8337A70F3B6A5613303BE5E01215F059C1499D76C0909052FCB1597360844D4896A18947752698C2CC655EEBF4609BB575E6BE7EACFDA0336E8E21E3FD6C42E5EC1F456B30BEF9EBB4E7F2F286FFC0AB2D37A4503051BF9214DD33AC2FC243A2287563AE70BDB2FD061F030269E85F54C143CC8F391129F91780BE31F6B4C22E3E8F88B3D1C36956A038CAC1C9F505CD5B7D3317FA019F367B228948AB676C2022362ECF489F0210964FE9BB58CC73DD5289C25F4A98765BFC1905AB205D1D9030BC74E6609CB8E41C1BFAAD83CE64564DBC2B83710C1FB1A369B016AF12F1D9BFC4919F200769D4C13977967E690A93D23D1B4E210E1C01D9111290E00D4E4DD514C714AF638A22F8A9FE5208390144241CF8665F6082CF191CE22EC926880551358FA4F2CC7A5296B167657E9C32DE6FFF8E465233D18F71B589C9F5B0A7EF35CFA1A763F4D379B5C186C04C2932BA9EADED8E6856FD8C78278D614EAD4235D982B9ACF324E65A36F807BEED06835DE2A9374EB223646A48098B648EF392A8775A95F2DE67C9EB52EF9C1856C1A80D5271BBFB0F88CB6B980DED3928C84C4E92C906270A098E8E93DAE902880AA138C7C3AAA230EC8BB076A4D7B02948459B8FD4C882601B254BE85FEE4EE44C52C7AD15EE52F6CBAB8400FAFD2D7D8879239893499778F1825C4C88BAA1E393144A81D91D69FE223AB6B610C5F155019892C634FE930596C9A573BB6037ECFF169858564C78D2359F5CDCF918B2AAB53DF37012AC8FC857BF89F2E89DC39FA6C68D78C6A199FADF86D4EF07A8BEB30F3143F270CB704F765DD7DE21004AC2774B61670D70046D2D7E30AA0421439463C59ED5580E566772D3786282BBED666F37437E98233782CC24A3A90FBB38A1D69A79B2DB6624DB49D72F50D5E83FE4A615ABD7057151B151F7FE8F058D68069417622AD2B5EE70D472B688FD7B0611B32AD5B6609AFE8F80984D21EAA01338FF1F7122A060A182809F38134BBE71D4A3292C597EE0E6949D989A6D053E8B94B0908D41F2836FD0F5937760F6EBDE87C53E800954B2796EB4C441BF365F23F704EF19D9DE105D31DF64C519C5AA2CA7D5C230C9372A8D266AE8B3B7A59A073E75B1DF7215C076B6B43C2F4D5F4B45511A6218C774ED80D2AD3B95D827A56B7EC46C18E81FF661B0348465B1CD4DF6A1C937F790FFB4C945AFDD33D473261512ADB2DF43B9754C1383241F92AECBAC21019A9D5558A0C9D9CB27A56D643C2904D9A29C90C0A18253BD5DABFF3A3179A08788E5BB006D03D2345145F58727FD3C8295886458FDCBBD696C3ECA4876148373A70566645F90FAA395934BB8F3CA2CA3A1F0B1A5843FB4DFE2F4698AAE9011A7ED5DA12DD644D42F5DE1E3B8B14D9F6D969FFDCC4D7CB728F730EE64E8E933A2EED30B43EDD51DA8A263C2217118CED80E13F835838A17EB126A134ABCEB12CBC212B1D876697479B3FCB895392BB911725BD25347486B32E755293487998DD7C6E8FC116180699363ACE7106006E24B78ED4551D24BB926C3669B85BD33711533971875E9D9CD4321728B239C15408F885C02B2F2D9E73BB84D807F3C38C330241537CD9A3DF3EF5DA5780208E47F6DC8215883752D26A8C170776BD354E612B94A99E1BF97481AF99178B37D074897AC5BED6A9FAEE1C55A26667A22967B53259AB5B347CFE558658941D66A9C011E05C1A5075554B181F1DF0A3492CF04931ABDD1EBBBA7F9F190B5F197122FD3B71276CC203FF6B6E3768B8E2B758C6A66B2352FCF0751EF5313E46ACF13E2A64A5AEC0312B3B002DC47AACADA401FCF2543BEA09FD347942ED05171DA87C6AD6E47D6B8232318EF55555E1391CED2DF52AF1DC8B803F3F6A4BB21E2EC42B80F074303DDC1520F6C98729401D2C2915CAB62F8BBEF848E2C2EFDB19D9550E9786A13CFED8BA5F315CA12005E5C62521FFB429747FF928FB6FFC73D9AF399349DE092C0EAEFE74FC83010F8667ABEE6E5C8FF55CAE8CF599C6ED49B0D8FE2E9A8B5FEFE8231C0B0F6EA8E5A104793412910C884C0B566C673B97D1224C8E80BA18A8AF23E8DC9A18BB7F60784250F71280ED3A4747DCC476213B453E13448C5F542062CCAC039DB5D2EF08718089FC39DD1CF6CA5E53637C2E02A0F8CAE2AB7DCEF05018D064C0095913C7258B246D438E480FEF3BC9C8297C9D9CF27B695694B6B169693C0A2CBBE5FE698578DFC0C477F7DE3435558E4C4453DDCA3D68F73664F3D60B07D8A2183712371B33778A3B354603168BD721563D7E5AB633DF11376DAF76E79B9BEA9C27CAA9732F6715BFCB124962C49E9466AA0866E62E5B34B6DD751ECE43CA400FBF702A60F6AAB73BBF373EA769382DD58FA205413A2A26BF471931F3D8FF65DCC461BCF8BD833B7FE3B6718437BE86E2352E86F7F9A5314A56671424AEC5007C987984857EEB52C41EA9EE3EAF722E6E2E03F833DFC6D7703CE00F6C59DA1F4EF71BAFB31E909BBCA635C6409CE4F353B45D1170C07D3DEB5EB6998A8EAEA1F6F85CFB2B8393131248841B7885AB181A586BB40C8FC38F565867EFC1EEE900FA558FEC09C98CD651CF8E023DBCD0FE9FC986871B804CF23D51196A3EC529122A58F2423AB280201CB90A2ABA695C1D992E51640A6C155B347DC5508B985640133EA2B586CDD3D2BF68B107CE34DB9B220E2A7599634368AFC22AC3558BE55732B9A980868456A2FDB25746FBEE98E501E4633C8085CB33D69DBFDE1E7E623D108049F2B9B5E089E9686D7FE6D37AB911F088DE3585606B89BCF1C227A686B6D333DD168D2EC4FD7B4B8858324712C2F4B6D76F0F2F33C6DA78DC375EBCAA33B34D2B5DB4B9EE9AC4966B6E2241F27DB659E3229FAAD37CDF4FBD9560FB3837461C37AF7AE5B9161FE75CC12B4D3EFAD79794D17FB47017370473AC0F11AA96C7D596C9C07EAEB8D63BE73B594FED8560ABD8CF1896A5750C0F0DC22DEA53622FBD6C3ECFB35BDDDC4DD136D7F42679D2EE4362C701BE281F261C15B32F8747F8B1C50DBBB419CF80084B28521ABF9E59D5C4B931D680C009DF6028BC8286C0B5656576D02D2129B676EC7F11916E603E0ECC02439D46319DB81821A72EE003DB7998DC56BF9E262D98756128906835BF21175E42D3A5A38D2FF36E3A7AA02A80313FCD66C48722A24D5A2190D0B830B575B8224542802CD66101AA769D8A9A1B2D7B41D415C6FC042447DC703A38D9364839EDF9893042F1F78AF91867AF13F5AC5BC1FF45875BE689C89D666305BA3E98009B4B23A708FC1C60249D11FCC05DCBC0040FC542B1C6D751CC14B6BA24504A9E1554AE9C08B24874C67ECC9EBBC1064BF42320C6514CF6A0F9FC768DBFBBC5DF543A4C4F4F703C551E4DEC31C7B45CB49DC690FEAFAFEAF970DCB7355512A6ADFBC25BC0DA1532A4C22F9670B75191256A08BC8B9E02FE8BDC49459A36D8649ADD53414723CCAEE0837AEB782DF70E0C06323A4E73F1E138600EE00A2CC0E5B3D0B22CDEA7EA841DAAB59F39ABD0211FA73A813FCA8C8F985CC83F1E87C2CC3212F3B9685BD73547D05496324D217432888BBE8BDACABDE6124458A75FE50B60FB6FEA5AA0F390671DF65788F0E5620063232E7399E85D5322E45DAC6AC0E4E93B6768EA9ACECC1D51AF73E5BA39E5CA0DBADA382241D86936979CC9443296D7CBDA624A95F85E781C88189449E80D6A3BC3B893A385E4ADE122D31E97179F8C7F333BFCC7276BFDF9728A0E17B04E1D0995AEBD0455BB86B47E0C853E926D68551647A1F6F063C181A7EBD92375B5ED24F6EF7195369F7853E85E7E1EEA94739968A5323D5A7DE4C431BA8424D9FA30FF2819AAC21501F08138319BBA6874BF50BB8D47FEC158542C3988C7BCE04C29442500AD7643629C0267FBBC1247CE082622BD4EC3E896ECF38A598EDFC6F21128F9FECCCC5C58560A67D5E08AEC907D61CED3652CE59BFE292CB518E8A1EE6C3A09144C31CC1543DC59DED433D7F03EF3F0462C4A935E1AAE597F6FDB0FE53972ED110A91799E0366D36D24758918094F84C7691CED05B8DB8A1312BA6F3ADD1FEE3CEE3AAEBAE7BE259577395ED84D04EE1B73ED6D4B9A5EFAE536414BAADE5F121678CC3F2BC5792C1E556931F4BF85BFFCE86E01831C7AED633056C2F8798C6EA9BD248DD375484A990EAC58BBED117B1B9327B6A87B5462B14E4F7DD49717F225C11237A3E5C5D6190F2E301A10707B7ECB5E9636371A68818CD0F2C9311067D485498D16350CA8F806D0180AA1CAE964E4AF65C128D93F3CD16AADAF3257FB3D9530CB667D4E498F822212379F6B7717694211251E69BAC5DE317CC15C4A48D8D263390BFE218754E78BAAA60BBC2424161083DEC6995E9EE32E412747F7367E7A667EA1F44F73DF58B0976B9733C65B6106CA994CD46C747A7355E93ECDC173F6B2B5377FCC56280D7D29A00DDBAE0FE0FE295E6E455818B61E4BB05878B6B2B9E4C126D4AE519621B38029BC98B570CB517E01E87D0278246061B06E817A3B6A1BD1792A58D6E56BE088778A1F48D3601BAA068423F0B8B33CF0B6C90F831107930C39BFD15D68E35DB1C9146190C4D6486689F381CE4794F26A7C8AB89FB4187ADB347F88A4D633BD33AF60DB07965A5BFE9A919076DA95832C3248EF94A01CDA761B257C8BF96435C281B1C1896B4F600802906415C6637574DA96781D9433A0842AA145C8CA4483693B1E44D28B0A6D0AA248FA3426CA0ABCAFD5AB18A49E052E370AE05925263B5B18B658FFBE1FEBF797937518908B507DE50227001FEC82DEB511DC571C3AC0860305172E3A619DF255D9EADC8425721466E9C7D19459FBCC8CFF6C9C0E45EB895B100CA6E9FD336C585B6C3F8F2E02C6508D4473C29110B3E0125D29912088466144E0D807C8F252B5C623CABB80276663FE97DAF362E1828F8A2F19346A97AEC3CBF058A9EF63BE6A346B60B20AE5A32D694E61C118E1070B70B9774FF4CAC7412F122FA9828E678153ED91CF87E4CC4F9E0D11B9D26F277C02199F35E9496D6DDF33BCD74BB429BE2046E67E22527D0E0380569BD93BBF1E05C9E3E1E16DA351AF6166268F470A4117A5CA5A15BB001F6CC87355FD13A4DE4D7D15939DC51C561D4D275F951315B3913BC94330F8F7834EEC27795F928AF6CCC1C9840B01FF408C416770138998305D3E6604D0EE237051C422D1FE16ED26D2E356EFFB2B107EF5703CCF5F9F0DDBC9962D776412738FDF5954D9556DC9829CB4F240CA7C05AC56F660734F387FA2CE230C9BA625D57D5A35541F851417A30480F83F0D94B4586927121A66D46F4400CE3B89776791D671C28A8F6DA3D0E3C5B0B1DC52C71B0EF3D7312C202B897A3AAB79536FF54A54DC5035EBE354E637682DD3F0C73D81DC5DDF09BC263A2AEE0E5277125832E258C7EB347D77CFDC01225317F83B0B8989AF67DED36DE33352553171A50A924EC50563D08153AEEB59264C26BD4F3307BA19C45E58D87CE7AE102E6F92856E32EE69ABCF9C0288A7B2318384D8AF4EF60B5C80A4516769BBE5CED77727F067ACA597CF757DC55470AB6847175DDCBA0FBE4580081E52A6FFECFE83955C8DE2F21B6EA610E8AD8565BCB51CD01361EE269AC0F66605A7ED127B661D51BA048FDEB3064D0A68806DF64F0F6193D916D2AB81B3DEDEC0C4C9CE4BC8CAF5B2AFED66BCA1CBDB1A0A2AC941E1BE53F376AC74C00CED0A931897E90FE43A239074C6810D3CF742EF29F948F6FCC5A8FC5AE120ECD89B3D4039E5026120702FA34F1286CAD65A26819D98B1BFD0A5C537358E97640F987D43B8A499B11C524091B6D5D583C9FDD78452FE17C1880C6393E6EBEE970FBAEC35EC39BB0D91AA767488C1362EB3F3E7D96B366FA5BA421F49080A91AE8BF3B81C69D9B73B7D49944EFC71C2B42F1C64B7B70D77365E28483260BC1D15CE1CAEE4793F72F46B9A9D51A4CB33187C5163DE294D35BF9CBF57E21EE99B889F7962232E6AD555FBBFB0CA2A67DEB149AD639CCCFC0F62EB3C53B31C775018A4408A01C8249FCC54E05B84488960F9E3D22FB401F3A7BC181E048CB32FE4949C12FA989C0440EFC7FD10A02B81ED48D7329B32C6C90822A941EA6FC9440E751462C7DB55FC75E26FF3F53DC60C8D6AC90BC3D99CDD6373E74668CB1F1A19BDFC1AFD69A197591A8C7AD5183A292F40C737700390FC4F45FB178B1F413B598C77381A1DE6A3D23560A62A1E4EECC93F06A4A4B7A705E4481CCAB18C5E1C8AE9F7AFFAF1B90C5B066C4452E2522DCDA9B553EB64A7DFAEDCC967D00922C859E859A3387CC52A0F7A5E656DD79B3FEB7657E1279073AE6CEF8E168BB615D041D7B16E9D7752337B065443C9EBE5D438476FD786962838DF6A986626428A4212282BB98A33BCFA475A2346D130E4485ECAED426BC7C2770EF96FF7D060DC0693E1C01AA9C81C15FAC063996C96D24291DC838FD16DF1D3D8B975945F43FC1DB485A3BA674CB8E717DA447B4909463F5C80EFA5F285B4B1DD68DB63DE5DD3345B3A8668A825B4C3907C9FADCFC4BCD37001352FDADB62646E778DF36153427F6A88D1732A9AC37080312587183D5861430AA95860C6FF221B23B131EA1EF0372298C7037E31240AF4424A9A8EC197EF663A211E3BEF71C1833E7D7FBF8BF60DC7B821E1B95007E94637E9ACDF3D84A71867A4C022735D2691E715E972FB2F21B2604BF7946F1AC35E229BED358989102409A26FB955F1D2D9241D03E9A3CDF2A428F7515C92E4C518320DDAF9317B750C52E63CB88ADAEEF6C95302EBC25C9CD98F960610827DE3418DEC0A7DC3D65E69D29D8E6E8F35C1652414B234419A756F40903CF599393C8F2F05A835E1F23EB31EF28BED7F73D562F1B6FA8F09D5AB73201F431BCB0B936F01ED2ED0513036F1B526CCC510951FE8DE111B33D308B725B5FE831B5BC56FC28E255E23DDDC66F049041E3F78598877687E076F64E84FE71AFA1AD1C638562509A2A230B2562B25292ECA53EAD28C91749E1B2E0BE8EB414AF683D74F596938322DEACF4E3FF4394B3D349FB81A1CDCBE42F63DCB467CCFA34343A62FBBFA8C017CC02F3585E7C24137570DB49563510C159096782979AA3DA87911035DD7188992455C59D1BB0E641A594403891CD1B496857A1F293655228855E853A49BA423F711AC02D3928DAE5C4FE57142C304F145B0826B92DEDD6B289B16C7F07617A2ED21E3E378DE9F945EF48A36D27123DF9041BB77AB871C250C4712DABCA48C811D32432449845F58ABBDB99D7B87A375B1248C3CEC0156F1CB90FED496B0992C1A2A56EDFFFFCB3368858823E8609A5FA84B1903E17D4C23A299599FD450D0B6A17DEDF5C6A7ED7EA15BF429AA8E6D0AC12BD2D056F87E58E98C40FD32CAE5839B8F8DCFDC639D9EB0C43C7A3279A518F24CCFE6E36EE72975ED7318DBF33855C16771B24444E5978C3F5AFA53F447D4583DCC3779664054883E709BC51820C89F218F6E5928945668403AFD2D92E9A70281C022A9D4856C56BA19D3E5B6DBBB7AEFE3D178EA3DC53AA480F1569E6146C036780CC8B58EF84090E36D21DC29FA8401B57B85FC1F96ABB54B0A23DB568DB951E4D976CB9581A5DAE81EA7949E40BCEB5FAFEB06EA1E92725F35DF1467EE421C48D4C913A2C2E0A696FBBEB6707245AD636D087AFECFF163304CD5FAB5A59E2CB48A380786A0C33C68C6DCD7C781EF353066017CDEE0BFB5AF4541D2507EFF958CF536E5156AC26EA9602E7A08070513CDEB70D37F4C09A6956981B89AC19E95752C4CF9F02377CAA20A9FD16551ABB4A00F84E99EF7F10228FE130F3AFDD1A6896D094C6EFD34E1934F062226B4C80EDE27BCFB7234CFB0055767AECCE270CFBB9F1909F396F2B9EB2ACBE2597EAA5065DB47A340C2C5A55782964CBC5CCBCA158126D2FBEE65785C7C55E6E33F527992A376F28D2656CCDA455FA3683308CE69574D6998134829BD84B6D40D31C497EE476BC727DB2F9C70EA8A7ECD4AC33D98FD0ACA8958662C240E3120E90A38422880BC52C97A296D3F9705126E5809ABD8007F6E98C510915A269BC9BFF6318D7D1B3C02C99A3AE405B8769F272CA4BA68EECCCB24ECB6643D2E4E300A0E6E4C81D9A67B38B597D4E5E09D7B64AB4AD2E2CD06286B9182CD7575D4DA28755C30776335A25E95211022723E89CE8BBB34477ECF444F38F2EED5C3D8D327C9F0814AFF3A729F4F0EAB9C980120A76FABE0C915FB7C7A26001E5FBD4AE9D30AC6A3357A931A13E3D240977695AA0C8562BE98B044E9A73291DE9347350884EC426A9F42E27F418043F8832219BD23B5C830750AA59E2C63E1A9386D591FD0D70A69E8F36C1F272D05D13D759DC049DE6548F2CEB827EE8CAB621E1FDE96EBB7BAD2643062B62A50B858E219AA706C9F1BC7B14FC4A5DCFC81D4BABF00E9C30E546DE176B151BB8A82636670E545F410AF92F7BCEE52E0D7D88E20AE65E1D874739FA202FA4A04039ACA05ED4946260E2E34410E7266048728058C746DF6FB45363F1649A1BF9AABBA6E2BB3985228EF49335D8FBE18C3F29F56C49C22CD16395B8323CCFDA8D1C4FEA77BB4BD75E2A0FBCB63190A80FB52D7CC5E8B829CB1B1164E5FC0EA2A0ED652CCBF9D2ECBFED76A64F6ABC1779EFEDF5E6D1E974044C07234D3EB69B2A099B5222A573F55D45BD7B04478432C6BD3AC0BC2FD4B8ADBC17E46389134873DF23DEA04D83F28D48957522F04C4460326D29984589C279FE3B57E2E2199515859E564D1EE3CBFD56025FA199579FDCA7CF55DE501EED285CDAFA682894BF2D7AE4DDB03D1BC9041AD7A1A15AF8FB0FB880ED0D6850E509A5AA2FAB4DAB26F150100681AB9EF006B9B938AB2583DD732F65F5148DCE99980EEDE198BA8B28B5E66AE0ED02C8917CB2028C06D466EF5917B0FDF34039904E0F815FD9F433F58BF497C63C13688E547CC640F7E01B61ECF6AFB0E145F8D13FD6087D4F56A82985AE8D6180DF028FD554E74C7B78D75AE4708A576CA1C797A8123A95FF5DDBEF93B3E13475BB03EAA4ED5054DB41FF55FC346A09260A3383C96C49EB20215C57D278469A8905616072693F2C495FFD5DCE621C034597F38D3B02DC9F0D4A03D96D8C66E38803A1DAF4A33A964E9EC52E224FBFD7AEA0A79373FFA282967E6BB340BE5B9AC5326EAD5CDC6DAD71C5FA6DFF6A45D013CDECDF6899DBC0DA728341395E6EE0D0F5F66A179B2BC926EA64C6EC7A34CC9389DCE04BCE255CEA6D081E7A2B8F19A69D0EA3B1E51B902AAEE7A5B947AA976C8674B02B687CBC96D31628B0346821EF351B28D3B9695EABDB03CDCDA9900F04AD63291D00D69582C3B0B9E669F50E78EB52A162A6383B7873E7AD4340740A748D27AE7445E543E1AB897A385E074EB39E8BAC480EE9B0B3B1187B08BFBF59D1F97CAC6B579DAE21F2BD5D0CBB0F4EB1C119099EE991FB134F1A9F80AD1D0124C1B9ADC7D5630F4478CDAA01502C954978C67E2A8D688C68F655ABBA256FEAB688CE67EED80E2EF937D098962B9CB7708349AFD14D5A5B467862E670B3FB2FD1E2EE801F7CB8F0794812F7334CCB103EE2C115F91A57C1485AEE05CD0A08C41B17E67C728F46970A9A4566BC8707BDA7DBE313D3FC8B1E1AC0B4297ACC27286999F9FFC71D0CB16E917987C768FC432153DA2B8146191F0930361018FA3D37774293FD7FFF1AE7FC2092F711FD6491F3FB24EC4C3E008F445978F5BF735673DFFA4EFE1B8064E1D722613F11FBF374EAFDB30F0B4BB6254E199953DBC4A28A7D7BCEF101ACE9BCDB016E8BE6F0DDD27AEAA33FC827F287BF003BAEC1D135BDCFEDA248430D2A376EB880A65185267FC5E79A1E39416D18F23AC44024A9006B3FA53A2DD5E3C1828F87B75DBC6D59C89C7DAFEA2C1CC8CC67578DD1536A18374EC507648D4EE8A97E46B30577A3E4D9761F92B723EB296EF49AC0CCF63626FC20173CA26F302FDF8A984F4D3339A8BF9A9BDA44611AE7F6CF5F382E007B653F68242A077480FB73EE3576A02F02BB15ECE8B89C9224FE97E7F58A41A85C3A929C62E71E789D5FE83ABDAB18C9951012769E4A8E11BBCF5590C5166C3C244C9F68C127FFA1693E640D1A714FD0E18169DFAFC0A5143CAC195DC29D6E57FC50263C34DCFB8E35E82C7575BF22D06165E65EC59F68CDC7B9134E92336512E8F78F68BC6DAF9B25BA40B306C98092FF8BC430DFA5848FADEC06898C9E2951AED113AF1DBB69FF3E67379A2EAD571670C11ADAFB6FD0209E805FD780C48044E484AD2225A773D8A5114419FCBCA0CFDB8F42D90235106DF2CDF3159680A88FA33AEEEE106F0F62584134FF15DC7BAB8618C246D94364DDF5ABA7DFA28B72B160BF7284A1847A8F9A4903469206C57393665B4CBEBFDD6546BED6816427C33EECF40E22D45013CC12EEE34919ECC79DA145688F70BA33EA92B61FA5F12808F34273F384C57C24421DB95D7825862B3032E7370F40454C9EDF8DFCEDD7EA91D63743091FB5333CBC7DFF2B63A964EE76E3EEF8745A3D101DDCD53BE958D14B8450BCB2AF3FD7F95A9FF6454EA9058393923FD161B9664D012A4BBEFFE712A1A6381389D5A8C11ABD9A47AFB1D96C3D402B050E61FE1B33CF535BDBD9DD3F0C9E2FE4BF6CCC4AAF230321A2D21A66D7DD926C0B5B221BCC6747778C507C5AD128A62BA75E1228AC2B3008D6E7C958620897722C19B95F8D5558AF2E99A82AE4FC0586052E4DDA1D527F83AC5B18F80CCA10043A3421A5519C6A7135C5FB9192AA95E0A59BE8FE79E6835D30BD73122F35100FD0EAEB0ED018E764E921162A42D876A4BA7D656A32E9ECAED8DFCE1C41C676812A013D7E408E06576E6E08E6F38C7497FCD6F93E363B482E72AFEEA38A4DD257026BED785B5AC4353C1BF14B693FD93D4770F4FF6655D6A08EF4362E01BE1ACC8CF320C6352B87C66223D774E89897166D79F033D5E0F56FBEF863196CCAF2B65ADA9775AF0DD3BF1350B992855983136E2825267715E4C750E623AA9A651158E06C0A2514EFD8693DF71AAFDE4EB9E96F8C5A0F2E5F8984CB48E9AEDC2B64786A3086AC54E60986FC5DAD39C3C70C98BFFCBE286312380DB35E7A35262A12F12115167F5524627B6F0EBF1D1C1522E1FCEAFFE141CE016B6A19C6BBA58A45E952688E926E2A9BDE11F3B39294673A47DAD7C148847F68B2C7183A02AE68D13F201C115E7DEB94B8D1C2AC2837BB82D8842415B386F540B5E3A6594996016B9A42588CB4A9B9E4DFFD97C491ECC036027D8064F3AF6B09B355BE69C0F33EE88122E54C7FC89FA2386A18A97F0AB2D4AC46D95D2B08A1608AEEB32B6D27FEAE020D50C0106B3F61B7D183D5A16F387B53500E2928D7CEE2165684AF0DEDDD96CB051E930CC0F060EBD723E2C89F2461565F9D4A5F8349D347B8945C84C3BB3B727A327C9580A8B710FF143D56C897FE6927F899C9FEC8B45394E58944343A87F01FD7BAF6322D71331624DB02AC25AC1EBD2E0DC84D9753D72938F4B4260ABF69B311F5EDE1E58ADB931C49DBD4969FECAE55E563F8E8BD85BCD8A966AEC7816C5B2A8F94D1E3A16EB4599562C78D5726C8FAB7A32D28E43D5C899321AD57DC9CD0710D870EE5C13914205049C9BCFA4B49329DB23FA4BEEFD95B78010CB9840C4070BC0FA0B41360352A645FC7C9387715719EEE8CC82D9CF8AA8E2A4AF9BEEC3CF91D7AF0DF627052ABE0FCA13367A72FAD73B4DF4AE0870544079A9E6B816624808394039BBE7EECFD352C3ED6A7D10A5E6650F0DB9FBC7DF7AFB90E4BACD75D5C556EE246BCBAD9B330D7D560BEE1A81444532764FFDE9D396C401E30F92AAEC0708BA86B68C5EC5569E5D6E082E85B555B6040C92AA82F8F212FD695DE62E4D0E422C00A8421626EC5F6AB6D93BA1D6B2F43900D21C9E6249E99C84504A6AAF017ACA7B72879CCF263B12E590E2695E2449BC8C8A9D0E7CF1E6A658E0676F7074F6ABC9FF1F1C77DB3568725338F6D04E536C25EDCF93B6D806278A6718264B78954FC4E9B517F7AE6759CEDE7E7E8E9423F6CF1506D95CDF50D374E8D4041F0F6E1367B0ECB53D02F92FE71932E00C9610D1D451D14912CD66D4EDA45434570503BFFA0AB2704AA16197AF1DB1081DB41E630B02A4BC9A4BD9FD9B881D23CE7E982F128BFC1F2026AFC536F8C4EC6D3E09EC3F4505C017B1AFC5221388AB4D9EC288D6BE862AC9551F7CEE4CB1C831269210B132ECB37BECD6B61494A511147C18104606E9C32E16D21D18C30555CAF909C7F5D462F71BF700587C148DB5ED01317365DED4CEDEA97482C1992BA900100CED8DB9CF2C69A2359A6246A895580A485ABD297412015166362F34EDA92FDFD3A9FE90D624E4FD13B225310F70107D1F1A1F4B32F291CAA6783EA7C138C85963B604C098B3E20EC46EB051BE2AA035A27363B84F6E4FE3AFEB0C7F1E873659F0C3EABFFEE74D502A9CFF3667D311DC80A7675EC4B574EAE9B7F5219D519A2A35A26F0F888AFA4DF63602C72390377447ADC96F4F3D05C8867ABBE82D5BD81448C26DF660EADA39D79406CBBFDA2A28BE5674CE7FB299F524470C5AEDF81A72212A3D05AC42C12D7AB2FCF7A4DEA64C82C28EE06999C689BACE0147717EFE53A44B5CC3D3206BE447530D9DD63C1BE37864DAC7F48C0E25764A13746A4544AC6A9330F51C23E36A2D7D9F459C188944035B16C97F2E94C66F1A80E8566BE6742CF74361336C4C268F936A102A7456C60B7F0D4700CFEF1402AC0AE20491AA808AB0F2FDADE56EBDADB713E0E59464CE57A5BFD71FE0758F58EEF73AF0978DE03FD9503E7BDFC4B896D281C2E8637ECD260404206E901A213665E4CFA80E39A538589A03BFB86D558791B529CC3AB4C47888920838BE32ED6EA0A63E76FF3A9585EF7FBB06DAB7F187DC2C0475114B31D4ECBFED2CE8905CC5EF7207D0684075CA6E0A7853695BE43EE0C5B5787D823FDEA9B0C7FBC10BFAD7DA0B6E02FB649D7AD27A3C5BA682E788EFFF4D8E64C3F84291C629A77073F2022F89A1CDDF367C4381D7AEE5DA3C11F496BB71AE472D7F067D76C7191BB45FB0C7289D9473804011268DF8C6BB7BF7822492E0D40CB05C0AA1DC9916BF77924D1BEAC0A2399E2BD66284204E629E702E34E034106D05C55FA5311D5710EC5130726B375C6F7552C38E0A813317ADA4833E9EE41E924A9D95BA724A4346C90C4A0B68F56A65D7A97FF1297414DBAD7FF117CDBEB4B68EEE84864F2B73105C59A8452D05C7052204604607CDE30ABA3F617C2DE949B34820ADC831C36CB88F941741594AE3118A295750B5D5888C9038912094327B39C3A9980E6864137E35771CB1A82EB257E32D6E10521A1B305833CB11954D2F55A7689A284B6E19B40A6929FD21C3F03E8B709F79AE42B9B5C6DC1EA8BF876FA2A0D1A6E6D30994EC09CDC87E98F64E253FEFBCCBF4189D97CDB81EF86E00C23CDA3443EC2879BDBE6502B11E5F0824CA04A4E63D3B4D65A2BEAEC3145F4155BD3CCA36717313442C33306A38757EA6A0A4992D9F7F9AFA3FE7CAB4FCA43B8F29156A58BF3799469000CA9FD654138FAD2FCBB33D1D5AA4AC7959353D1E9A6DCD70FD326836EB8D9E248DA71D4747A7F2949FAC1CD1490604164A16EBAEA19D431CD83E920B9398566F51AEBA07EA6ED5E7552B77FB189CD3AAC48B92AAA2DD4475A273029B9E6C0C99350272E8B6D76ABEE584970EE4D61302B9205A5ED60F8CCE97FEC098B3B9C7355820BB95A5F9D2A2FCB1BE9FCD2D1325C55B4742FDFF6606D9DBC2F776010D7AB078BC07D236DCF3F5063ED9E07B4B1D3C5F9A1DC0CF7B67746AEE74305104E96A7AB83462D62D37594F296632825960243BAF7B1C999E7B5CB29A9F4A4C865E9F34A930C15D57A335D91810142AFB846D04C424E1DD2D311857461FDA9B7A7BCF4B289C8F40C1134393A224243A6BE50A67D55E01377E11414D09041683E6A3F27E6C485F3B1D1947DDB19C4C7C83398BEE1A0322DAA3A336BB1963752784E3E5AD076D176A5B968FF55BB4530BB566E160D6025543CD8094AC4540584B6CB6D2F74584CDE72DE1E1E5F72A5041435243457BCCFE8BC422CCA20F2C21CC06C497B16F90FF10EC5F4F3FAD59A81D9F502DA20C0E809AF8748846B00C70E489501F032779FED29078DA818B01C70107AE94E201BAF5F3071969458BEE12F740F6B78D08B58E35C4A6AE103E2ADD2070F313913DFDEF81158AA3203C919213AD47A06AE9414C7F1C9BE8AE12C5E3CBBB233A27270DBBB9BB4AE2CAF5A2413631BDC884D403420AC36606DA80BBED526182699AEC7778AB20164B99B20332AABE8B573941A772052BBDA8C8086850EE26751AED4D0B4270E39754738A934936551A1E4C6F056FD557103378F484E5CFC78A94B76569731D46349502EEA8208E50F94F71346A60F997D8F5F2331B3296CB61CC13642E6586BC4D44BA43182618F18D31D6530CA5727E519915155C11A0C54CC156D47B2C24B9C5B16566F3D55900D5471EA9084B3C903A989B5F9D6D7589F6CE8A3FDD695F0F1A526BDDB7715CE96177F6A2B44B6CD3A4114F4EA68DAE433DFF472AED3250E700EA41E862F7824210EA6E7385ACEDD65DB3FCBF65AF88F2EDB3471C36BCF434AD6E38CF2D23A28E7F1978214097965B9BA28F4BA2B8AE2E7B1DC68BA945B3D080FC89622AF2999029A86223AB0D1F028F11074623D2BD8E1944B5AE21A1815C78AC3705C1A3915CEA9B46F94B3AF8D56AF14EA585C46F5E394145F53B6EAC3F232869E494F27DD6D3CF03D4C0EA6ABD5632C4B2E837898DF4C46DDBB73710A4991CD47288BAB2D2E13EC529AAF5B387B68A7EA1C9E02E149EB3BFD58B001C436F9275F767B426983DA46EB46B70DA9A28402E43999D718A6F128CEB28E8A02946825362ACD9EA19BD942F1114770AB0E8C4802D6D9394A5DB82D3C80946BB3AECF7AB68D477275AE36B8D2F20350F7E3F8D51D39FAE609C8B4799EF7633FB0E8BAD28FE7BE5374072B0E2B2102BB38B080C9E406757F11BE4553F84B80472365169E87922B7DE88E7361CE23FF6910BB50D09B219C4908F33ACC96EC9FC5C77353ADFADAF88444F633B9B9ACB3CE40F519436565D6F4C7422DF289725F3F14C2C8C7842C33B2F419A9E36DA488D13FC8CEE011CE6F3EE4A33567BBCE863BB873150E015799D4E831A0A1638F3E856E201E88814C4B8D64C03F97D8FEC374C6CFADFFF8890F1430484FD184DA1E662557B3D3D6C18B887B2A34B3C6CBD1BF9F032D159CADF6A4A5D22F8E80F90246AE47F9118DF922E8CF2D1343DEF7844CEF3F2280DDD8447A3BE0EDA0F43681CFA6BBA714FA3C0F65445AE917B6C2AEBB29A0561A18ADD8FB5CD5F1D7F586E07EAF6D262F16E5A3D1F9571E247EFBC3D3D3F5C74757062E819C772304BFB1B3B6E3EB1B24F2671D16B231E40A1CB73EBC96D2DC5154018D357152B758A22E99480D41810931A2C848EC6DC208A19D69454BDCD0D606738A51F60E2126ED61B00153CFE71927CA68FCD93D9D1720C21485D90413A466F87F2A4A2E4FD94D93BD6089B8495F1ABACDCA82B7A6DDA95EB05E8A0CBA0DA0BFD6C6721B89630921AC4A4E09038137A55560DB1689B4B6FF9F34D4BF0D42296C0395E1034D9CDFD9FB22A4EC50C68281C0939F470060CE85293D91B3EE6FE7D60D2E8C52FC497D7E347CB90D580FBEBDDDB52A85B6AEA9E5461E5AB57D616F367009A84F3A2FB35DA937AA6D2240C22335A96AD7469C7EAB2DD06D2AAB09FFACB63717062E51AE223BC8C8FE7152F055DAF05A25132E2061AB8BFACACCE597517F0880FCCDFFF1B26AC1BE358111219BD1DB97F85157F45378487E66F77AB46BC513B0ED915BF91E5FC92CEDCE90B9544BADED6DE32F10360BF3A599D862B3523C26A04EBE26851FABAA94361FD3DA942934C139D950F12C4F97646BB539F1CE9C6BE777D5362206A95E2622DDB650E620D7BB4065C616C2E8C5A05870A58729B0C8CF3288AD5827D895F3FB94CEBAB0F40A498BFDDB0BCDB41D65DC67FFD5C6977C6C1C43A7392BD49E7FD9F6F3A37C4D0870660AB5551A61A21F4B451AA6D59EC86883C25D13ECE425081DFAACF4FBA074192237620AA33B563A3AB9795CDB4099427C71CACE458C68829183EA5360B2E6091D2DF3F6E03FEF9D085629489A644EF30334D4D1F02255D4EE269804D9FC518510030F9B67110E5E990DEA4FC01B31968DD6C79475A26D3FEDA03A66AB35C2170A9B0FE1A36E866BE7CE24E2EFA2BE63D415B8101735C8B395E93EF7EA3AFFE4E77BD1825C3F1D99EBD4162AA0968E7398EB5993FCA97BB6366BB576A2196E05EF7D4A3FF35F25EDD1F67DBCFC4AA83D12A2E2671F328E7C4143D8FE46AAFB33309628AE76AA9F4E27CAF534D76D808458D484F1C1B6E8F5193DAAFBD3A8F51F6B6DFBB73951D9CEBE63C088AD0CC2FE28CA51045E0FB4E94A6A895175D91F13A2DDDD6F03AFD94FA0CB69D8C2503DDA82C0DF2E94FA80F545E1F8C1F15A900A06AD767CB55C34CCFCF261EAF9FAC091BBEA6311DCE7F307E3378917C4D30D6C6A43E1C807B4939BED0A5F49E9F07B9AD5755779C0912801BE39E83550364C8E6789A08E4FB3F18AF75398A0D768F8F4A644FFD691B538E0D3BFB0157740313EA491C9B0A7D4F916C6DC1574C18F6E66D782B4E407E2A22C1DF52AC516BD400C4FA2445B42476A75DD7E3179A9549C35422D34E7976241173D5F7C80D15AE51F1158CD6735FCDEA18F38EBBDBDE669D69B60643DF60059CA94ECF3C8F91FD11459E00FDB73B1FA539BBE943064AF555B5A2FB2ADDCB2A68AC15FC0559C8C9F12318E3B21B68826CA8228FEB75B3E997C07C34BEBA756A9E9CC2AAC6866F6856ABC8CB66301C3A92A61900112ED993DA1822172BBE57E1CB9EFFFD1840CE55002BCAAD2ABAE11944708CAE0F707054A4DB2EFACC97C99D3E411C2E3F0F852C36E3842878C9E178384F0FC0D9FF9B7AC8C6AEB854F823A04D7CD2272A5EB9A2EC2F09ECBB5D105362AA84E174A6B81F972D98A1FD0FFCEDE5B0CFD1FBAA914C292174C20957EE4EC4FD49CF294AF28A387A6F95D974B993EF6347A6FD5DBD3E3BE4F71B448766AB3F7B808D7C25913C5F349BAD2955DDD469449C5D566A374F5489145B1E47C8A238EB38E28DCA4FC32C88E3A8E5C74E1CBD30F14EDF64D5234AC38672E959C24DD0935DE6E1EB05102F82BF1C231515C36E5742534CE43F18AEC5764C206AF941D6BC7069C4CE3D5F6EEE41BAC9E473A9D9A261592B8D406AEE6E8D90758185B626C09BFE4903F85D825DCFA4AEAB742F72FC905ACD1AE77D47044501596C980DF8EAAAF58F8E279D6D1F22BFD48CD390AC3869644BEA3FAE4407169F6BD6808F961EC365480FFB67D1F1C748E0E0D5CD8FA02C87CBE0F7C3FF62912E9AC671EEBE6DBEE013949988A7EABC6CE4E208A48DB826D279C36BEAE4CA9B3639B5C5CAC9CB5B65DB3637E6A4F358E00B7957DD8B898838734C393CFEA640ABF6D2C97A6CCD03A25D18456B2F53D986DE30430B6A0ACDF6A816DE7DAB8D831ECA6F72DF6BE6831E5D6A806F56A1EE8CEE40900C2A3B145E1E348999711F223BE2420647917B1B1F4614E946630E93B3196A67F3A600D14CAEDE6CD9E9683A7E9EFDC109EF94A2A5A9A681119DDFDC7856157763DD1D12205C5565A6681A7BABD084FF36114FB6F905853BF47BB8C6D041D126034D4A8D31227B86EFC7CF10403B359D75832A4E8423FEA4AA64581E4D9A89F8D9A998AA2B9AB9D605878BF7582506A00DEB63D34712486FE24DC09523E0F3F6C8D72CC9E4202569A706741834057D4730595D3C998AE062C2FC16C2A7339859A9BD835D4601005EB7D0836C09D4E4F0030C12DE82561F9DF0CE8549696E2D8CDACA795E4C36D2A2E406C0BB78F16CC03E7C411C80C5BB7A9978BC4B43DC533A5791922DAF65F2E63BAE30752672CCDD33BFA4F488375536AF08A40B13A4660AF2001C5BF363BB0857BF55F6350621D6C7F6720DF6A286071CE634B8E89D36EC7755AE6053D5802996890B9BB1D45F33CE187353FB1B5A25734FB3AE78589C5E8648FC197FD7F506C5A8105D33132F89D6014E07E90C45BE4A75D21E71272C1F004006E9F52204CF3EE5CA1342B2DAFEBF65142BC91B963F28320716D54BA0EBBA3BDF357CABA27E3F8A508457B21DB3D8AE014BDB54B5DA55DE2FDE64035713795168002264C23A4E6FBDAE6F773FD8A132BDFB2595E2313D189F166CA916CDA2D435D7F59423CBB2BBE0CE5849BA483EA6062DA37718DE264358B6B5CC711145BDDC5B1F62020384AB35F39AF8366477FCAD75A156B5787FDFCFAA903B5619422ECD8F4F2008D532F49266623552886C21E52CF5CFED837F2B840FC94FC247FDE9CD088361D9EBDF0B703B4959A1D81B73933B18E03B981A0F08AD30E9402E9D33DAE94A585D53E6620F09B47F7E93C799A11C324B6BBD21397C23701600997562DAFCBFB67178DD598D8FD833A8D453E7528C26DCD0F70BEA3A50F2C89066DB2520C254EE4959FF6EC5A6DC06DFCEA091CCD19585F7B5D4F0DCD4CD8942CD16F237FC3105897017B4E3AB98B9E0201510DE202A9BE21D79DC1E0548DF9081BB4301B15C5EC99B0047EF076F39763CD9DF0B0E5CB956881715427E8C13CF52213BDEA6DD4C3E18FE78E5808E5634DC3DB68DBBD3FB01F77B34D4DCDADA347345058AE6D24CD1ACE007F0B249A03C308CDD4C09A584A27B859B666212A90C5538B1F31A764C41E236AF974BED59B8725B3D24A26A6CDA7673E94084644150B164A9F76139D55FFD51A7FCA1743B3DD897F16E66C383496AE5331E1FFA2B04652789FD846DB759DFD0AC65B751940BB8119DCC50DF5C5548541447902D2BC0FE746556E324C4598A90B57C0049D4373FC2CA673D9333CEC47B7E1C4F57D7147FA0DA421F71B165832E207C46DD60508A407C6394B48D8B6EF15FA55A1E43A7DC153DC7E4B486D46B8950A7F4374D40A667CFADD9A40B25924F5347275D4C47549DFC9125693169378F1A2AD2B27A688D6AC5B861D1246DFD3D847D76CD3FC5324B54ACEFD49492D3292790BD236EA71B2DDEF840291B907602E3E86CA168919C08601174AB1AFD8DF49CA3F9240E7C52938622639BD0F99AE0E1764AE5C18B65B77C024E1B1790C00CA93A748AA37D7ABBA5121DA3E8FF6A7A155958DFF36C5EE40B00450844AA8F91EC04A1626C3F437A95CBFF943793D3C98F938B1DBE319E3F3021204ED5E9143032228F62FEF702CE2C64EE9C83690A61C6F28CD2C3D2AADEAED947D1CEE3415A02EF0A093BE7181ADEF11BA0B266451DDF9DAE62146B28E425A9AF84AA8C2A9DF5DB1DF3DEC486E859CB9651BDA2862E0B6E5FF14542C8B1CAA5E494D8094114AE0BFFD99B273E81AFDED1E77D390D880A07DE6FEF9ED5DA111E969106B2574A4A69A1247199B209BEC362D67FA3B5D2FE695E4A6CECCC5B4D0119D14CEBF432A9BF42E630DB258E733EA0F2B6A47B1A728C5A416159A9940B4BE16E51B2BED98E858C18C460980E21FEEA7189F1066B4EA3E249E9D8B15CEACFD4CF2BAE3C75672A19EBCB2A52DEE9C031A20D9C378451E0B5F4C68E00E57ACED2B9DACB9F2AE82D15A2BF4D2EE1A4233705BA9F4F4231B64A336EC979F38306FE9019DE52B3380172E251FEEAAF5E954F1BFFD383F8679F699C9EB4E4926D86D4D46E30FCCF4113F320FAA6CC9B036A0034B14503390B1A01BF58C6361B5559F30329F3A7324E211604D1EDC8E2BC3C019F17263212B7E17D8AA1504031098AC5E8B27E22124ED8DC62CE40B8ECC30D0D1772B7B783CAE54C599ECA9318A4C945B2525AB4CCB15EE203294CC86706B586BE744A0B6D69FD55FED7E5FFA56AB9AE39BD0DEBD413906D8ECA5AFDCE8CCA436F143FB4242628E21665EEB52F2009F224804724CF7C4B7456C62E4CFC1CEC3188995D9E8C87302A77C905E752AF1B1E7E6069A586FDEC8C29136FB211F5A5D836C91D35E30CDB2C9CF11CD6BE21C20342F78B3C8BFEB309B5F9A0BE7D524E44AC3520EA40DBEB90729FE536ED74D3718B902FC02AFD1684F11FA8C5894990ED95E7741B9F9B6D91AE0A3BC6CCC2DEF7C5A32CCBB656D3A09037C745E10D4D3841DDE4CF1918C8336DA2EDF7BD51045B52350AFF8F3C5D04D8B5BD9EFA0CA80A25F943F50031487DB1E633F0B6E4A882A61FC5CE91A21D953AB54EC581FA42E3311F133AD87E98D18846BE48566F647E3CCE717DDCA589EFF5E885C177DCCE272F776E6D60788697D62F443F4F153279FC7FABA38400DCB89D65D438C24F1EB924B4B8174DECB2243F6F94CFDADA887BE008B72EA29A37FE1A84DCA56914D6D5D34BB54FC442B790E1CFF1ECCF523F32C077C9E861084938B8B1AE8F8925305A095221ACDCDF395E287A23F58D72D7781849CF87C93FC7E91F96816AB9986AFBAA88DACE5BB9DE7C83C9991596C9BA23A01C32A084DA8D4B1EDA91971B2E3C2A348788A5EB56C590294D02DF24508ED637530969EB4C9B3FBDA84F28D6A654E86F95DC16A836CE061ADDF21BA788DE966E96104A2FAD59021DA19C333F99BEF0411777BB5766BE1A45575BEAF98658AEFF7BF10F6609626A11586AB5FCD45D1C73096F15C13B9544A4044CF1C8710EC5CBF5060B27A1028627A19D01B394B66F7E7FB7E7ED91BC0E96723F807B8366D1D243832BB52C7B863E31F0E626307C36F9D9834F5B2120D3F9DC63658F00FE81B6C06FECC31197110E3AA20F84051A349330E049D20ADDF2C85B0D1BD29080BE82540F2E182633C46E883A8608FAABCB9C3ECE59F949A4C27A38AEA85EC1A98CA0FADAC0D9928E9236618C23E40072A0789237C0C3C7779EA009C938FC59D456F8A38A13B5FA855E18FD327C8EBECD15D039BF31A9CA20451F4F2245CD060FCDFB3F86CF1BED3A86AC08028F3716558339DBA90425AF347F6AA036011954F49E162F49D8836AA9D82431CF88212681A345D68D5D3CB6618CCCE45871A29B6F5C440A1412D0AABFF036D26118CE8CBE1C0B23AC97126529E2F308F8E1620747862E6FFE6D6AE7897C8E0FB5731AF94FFF2D00243B74E3FAE3EB882D668BF5B8C5A5E04994B8D851C4EF1BA86BE997B6F7AAE810EA3B8B0D3DA488ED17B01193687F567D6CC587B1D2456EE976D644F93456EC9049CFEDA927211271D8F658329BDD3813D1EDB50DF06FA57A3ED5D3531F3C7AD48C9BF94F59B84E563F47DD4E0E49261FCED26CB08868979C642B30797A5F8984B4DA77DD2392C8E1AE1D262147340636404FC99F2911C7272503B223EC3986EA3C24C06323358DE4A0DA5BA11BF17B238ED83D7A70F75607C1D3EFD669783FB8FEDC77C2E9E6B0FF692FFCB2F2052B68E471EA7C3F524C296E1393BFE4018D45BC3D5851CF5BAFC28D2CCFB2F29E6BDBF869CF09121B69378F6D7397BA95D96E7FB19E1E3BBA74A9092007F7306FD47FF2C946BB742BEA79961C6B2525BE51CD7E4FA42827F6E6B024A455BCA76AA24720CFE067BB33F27E4C32F60EDD3216F7C4888CC051634BEE029E7D89781A15B3674298B37BD26ED935EE833EE0EB182073B4607241FE92A7EB8E440597A818C9DFCC41E4878720C35E5B248B11AA69CB7200BDCCA73E4D345E6BF7ACE1758ECDFA09DC19C10519D5B486F207E116D7E21C6C6E5978F5505C4C6434B616D05DE9A8BC1CCCABEAA28B8B71819FE24B8F6855FC123C745427F11B21250496DCCCB4C9FB2A1584087BD3A57E4F529D62FB57F7F7875845BB5A18A326B9B03351B45C5B4E1E1B89BCE3C8F7E8E2261E1187B00D41B953E66D01E7BD132FA950220E9968F585F7615BC0EFA2125AF244469F420E4C03674B50C9A006F5B2233C5BFBD7B546142B313887635D278ED17223C2F7CE2E6C118AA81C0FFC16586841AEB75E1F9891428E526FABC7C73AD957FBA8370EB12C539CA2CD0750C2CF5D1E78D9584A4C1E713E2C05C6642FBB5FF2465EC1C88AEFD46A1094F0338EEF55DE44FD233210E607FE2789A9A9B2B467522FF61D3E4D2E95AFC0E8205C6AEA188CABC8752FBEC51C469523F0B616A7A7E06647D3D4CC9D47921151D249664FD2E3CA7AEBDEC28AE517F6F426AEFEC288EF9094470204500B2F1F61529D8045474D063903E93F860813649D2C2C9C3FDE2F3A7E8B5EFB9CFCA435E585338C843CF5285C57B56F89EB5EC8107C6FBB3B83244D88707CFF278C7B7B7CB840339EF5A000E32CE3949CE84A56F961DE96D4CAC94BE4EB59400A1576F0AAC7B6CA5C59B74DC874DDB775D67FA6AA8A08B5AEE597FF939CDE61E384EF78EE2459302AFC7A9B99C38C3033C0340A7CFA97397DBE34B961CAA9FA1124845961179DEFB8A475794234CAE51949F8EE0927C5EEC674B19744010E94EB8409D18E46F9A11203E5ECA0E832B2B6268F8E160DB9575D688F5755811CACD80F3F5DA86A3375F404D434A760BC46FE5534C45A07E6F07DCC62F451256D2989CC49B72C3EC7E9D9524B93AD4B0908E16253C2C09DB185BD8C6DC8775CD0BB1623B2DB3991D1E8CE92262796ED7452BBE5E64856EE08AE4AB9F8579BA9BE3DC077E6725862C9BCA4A9825FAA399CAB8CC1F1CB438D4B2ED38D4040A2B9B07405BFA75E8C8C432AB64CFC7BD7CEFAD0802151932B3C27015D4D04EB6DDE3BAD6DBA55ADED73BC30436A8DE42CECF0D48C831C6AF841D00287C1A83A21DB1797603A488698406C3EE57D488C5B97A091D91DF117F73AECEA3B67BD042FD8849F3D9022D9FC764877C1314D6CF54345566C354B15A91BE9D6CDFBE3B547380F343AE542FD4409E79852F9644F7582D21E04A412DA96FBF573DBFB46FA26476F78DE4145F6935B5052D2A2E50BFBA7296AC7DDA7A1833BA079F652C77AA6E5971F9CFC2433CA273E816C04F3D0496BEDC5CDF8CF3817E4A185CFD843EEB2527427DBC346A5B1C6982FAC58265D6F6F89D2603E99623C59AF8F7AD607491ACAF8B1C27EA5177B5D28DE4E2541E817FD4CFF9ED5EE1FF7887009C0B6E6B694519426D7313107D3D58184FD92E3C241973FFC68F5C8BD8D0763AFDA6605430570ABB49B70964B6C3D895C426D157A1FC1F56460213BF17FDED3102CB6DE45D9B8C828FCD4AF82CF8012895BEE2C224C8854F3591252AB37AEC754C726C9F5C3E2771ECA252EEBF178AD7395F14BA5D3A82378210257AC59945F0D1E318011D7902D6E2D6CCBD42F2D7A9FB00219E166334121DB8EC129591DC97C22C3FA0E53B2D87A0F4127799F88BAF63D5632CD608CC06EEB44A6C775DD34F1141AD93B02F1CD11ABB225867D8C4784F383C6DCF4B36312D4A3FAB6411A48D9731896446A25FE6306E8C77B1DC41424D3F1EE2B5FBA58F6047EEEA1299B395C09933EDB210C8EC23F16462AD38A8A974D399628E8C00BB3C3EBFFE52A1433F757A1AB11D4B958C4D65A49CA8AA1777A9A5170A8F33863BF7632C96BCC1E5C8E6751C9C7024B1CBE1FC19A9F898ED308BED8EEDDBD4B157A8BECDDEC9596032ABDBFB13DFBA4545DB5F555307C48D66CA16C25780CD239E3398E205AB6293894F1D61CED4D62FF52089FB71CF6994CFBE086BC46F61D7D8BDCA24C4E0754CDE4B017E785B92E95FE8F25110646DCDED99FF3961910408743F9B22BB589F6189A1F692A6C159BBFF3605E78CD22DF3632F1D0DF869B66FF7CD9A00A519522605EBB163F58182FABA7056868D182B0D871C675A3BDAF3CE3B1142972D8209568F9965D0FA3CB09F4627A10103047C0A7DE6890906431901848223CCA3B7D996F42EF0813A1C1E136D4C54D9F9C93CC41AB1BA9C9AF074E1DA3B9A72C0CD53C89A49B46FF588FECE6D8A89010CB2E9B8C529C0B4B686C0EAAAFFCE1515CC987C2DB748BA99BD172E4FF7834996179804BA3D50E2C96C9A1A4C85032241BA39255E28FE4CFC36B1DB0902DB0ADE7C9058AB825A0C1F9776D0026177E21945E26FF3A677F1B9D855530A684ECD234FEF5CFBA529E4C0A74F03B347DA63827A35894FAD89FA03258CDA36DFB6B1E1C89E64DE15897036F169D32EA692798466F26D271B9448A9D2A16A8DC3B4D8535BAC61F02496D4C4500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark{restore}if%%EndFontu1`65/AB /|______Futura-Bold T /Futura-Bold x1`65/$1 bmt^65/AB 130 130 w1`65T g`650 0 0 (Black) 1 _rgb d`653040 -2915 (V O L U M E   3 ,   N U M B E R   1  \321  S P R I N G   1 9 9 7) 0.001785 1.841431 1760 35 60 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 1048 3008 1048 -2883 F jbd^65N1`65F M1`65/AB 179 170 w1`651777 -2702 (R S A   L A B O R A T O R I E S \325) -0.146179 4.016235 1328 17 32 A1`65O1`65N1`65F M1`65$1 tsi^65t1`65%%BeginFont: Goudy-Italic%!PS-AdobeFont-1.0%%CreationDate: Tue Apr  7 10:40:47 PST 1987%%VMusage: 37745 46533% Copyright (c) 1981 Allied Corporation.% Copyright (c) 1985, 1987 Adobe Systems Incorporated.% All rights reserved.  This record material and the data recorded% thereon is the property of Allied Corporation and Adobe Systems% Incorporated, or its licensors, and may not be reproduced, used,% displayed, modified, disclosed or transferred in any manner without% the express written approval of Allied Corporation and Adobe Systems% Incorporated.14 dict begin/FontInfo 9 dict dup begin  /version (001.001) readonly def  /Notice (Copyright (c) 1981 Allied Corporation. Copyright (c) 1985, 1987 Adobe Systems Incorporated. All rights reserved.) readonly def  /FullName (Goudy Old Style Italic) readonly def  /FamilyName (Goudy) readonly def  /Weight (Medium) readonly def  /ItalicAngle -7 def  /isFixedPitch false def  /UnderlinePosition -112 def  /UnderlineThickness 51 defend readonly def/FontName /Goudy-Italic def/Encoding StandardEncoding def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/FontBBox {-167 -214 1006 951} readonly def/UniqueID 6630 defcurrentdict endcurrentfile eexecAA6F6552C10E621CA02407697EF7562E4652AA12CC757F4E86AC0397E817863F2A23BD89A7432160ECD2940D543A9BC65C9CCBCA9C459D7D00DFDDB8D00B0FD925D0C57B0FF9B76334A12A8D0A619F211295B25129CC4D4DFFBFDA6177E3B741B9E47C2EAB55F62D831DBD20AFEA539A3BF6DF3D296741741EA5B8F0C893E8A4F7E2759E888095E77680E87D10F8DA655F86587C3A8ECA98434F6E8BB5869BF003FDA475E1195E2ABA2514916523A68632AC8A8AE08F0937E525DE5F10787C17D4E581F6F380EDD952DD1BC41442A397F82E6E1D86AEF3E0B267D55D757DF44D2C7617CEA679CB2A498AAC24522C81A076D5B3B1867663784A01BB56AD1199BA9C4FAC03E9F0306178A4DBAA8049B0FBCC6D47A9562CAC1C0B2268B43304B990631C1B785654DDAA671E339A9AF67216DAD2BD47B91429134F645D3E1576FF9F43B45760DCD245F29360D47FF1AC36F7CA45E5C874CF7141BC3AD12C59752694B9129191EA67EF5BBCB4270D745622661E414FF6378F9CA570809BD3F66FB9F4BCD42643444DB45CFB7B41EEB9941F287A20CA6BCAEFDD61979C759744E952B5A65641B571D7E8048D212AA4AA9528C78BC21EB94D48A71DD11EA025E92D9F26894EAFFAED88675AF70A8A4FCECF2E14B46B6CAD9BCECB3F92C39FE85CDA32B1BC8D64EB5A6B3B7FB4ED899D0EB1D89107C8123D6BAD202EDE77716033CCFB049D14CACDC56BE60738C1B33D5D4BB54E268B856389349AA5169D52EAC74FC3C8205EE34FE4158B4CC48930EA2B46BC437B251B74F16F5886FAE8DBB99CF2444DA3128235960F4468437D3C56B09B80AE98538B6900E55A862B99D4943C186A274FBE5A359A4F2263AC4D39A4E75423A12236B074B81F7171CE974CC46770E9D9C09AAD95AFE51BEAF6C047F6677E9E09A3225767E347FBEA6D69F97BC1B31F2EC83F05E428ADCF65663E8856E15ACCB12FAFFDF85A00F8F4F63371E6F3354CA6B98F75302DAA2F44ABD67C8F229F2C8301C8D5CE9C52DA3E3A8CE18EA8FD88D9BF4FFAE156E1D8A00A79D7DED1C0D2F5E1C99D8BC413AFF2C931B0296F74FCAB0D7275D290DDFADC3A668A986F77F5AAD5C4039962B35C6E1B513D41A2DF3D4C849BA5AA8A2D0C507E314AB63AB9F9D6312F2AB42035E89D4EBD1BCB5BB85596E5DE0DFFB78C5B81F6217989DA2D82A098D9350DA933FA9AE0C0BE5522EA7F51BF572B3AF2AC54378E79A2CEE0ABC1565F12D222110FD372CC10F45DC9FBC3F21BF9A3EA1289AEC1956AF4D644CD8F7813E340AD267A027BC46F3D22702842E126BF62972D9978E7DEBA05D2F9C159BF6058841CCD9FF8DB915B82E561CAA4ECD27CE2F979EABA8355A85A4E45C2F6CBDB3B13C527B75485763DD6B5FC3CB473FD1DA5270F9D41DE9CC9C9C3F26766EEF3524CBF6C683CD2D8A91B7805277908A92CEF5E03183B906A34267049851B67A8C656BD732B541C849A0A24B63523140EA9CA68FAAD75FA2146A95C231AD29C52829E6F978686540D4B16C0956C405A3AE2444E8842D2D5F5D1D3B060FD067911150993F9C06E57ECDF2D7BD68CF0BB9EF1530F52944C8F44D695561C95E888766047BB665B0BC426A02FF5D6811CF26BEF7BC2F3096B4337EC957F7289A583362886AF6E1037D3F948438E2F89A2D16973D032ACFE8DFA008BA638A5491E1A1B382894BD5925570B99066E148B064D7A7F645EA3CC97E10E8675925970F90158CA2F2F5604613E5423E3554E2FD3FBD1F246749336F2044EBE5C8EEF25946279BE44E28C6C55F7736E2329AFB8DE6CFE6D134A35185056F7C974B63A9B01C59B94B487FD402AC53F4534FC42E9410FFE7CA3CCBCC3B7B7DAF2301B7E498D4F96788C06AD8656B8F99B5D72001D28E6F4C1E2B06B817CCD56B5404C86D34ADA528F30CB522C188AC8533AB3463ABFE094E8DA8E524EB3A9EBC44E4FCD6DDFBE4CBB8008717E10E63D370137B720E1680DA15261381C4C8C5DA4A060B6C4C586B573D11E801FDB2AAE2C4B7BD4D71D3AB45909FC15828CB55782F614670121AA3CC63FE3B724D8B7C72E7E4A3208A5B12F8FC5FC0D117D1715FE36AC519608FA8C725CE27C23029FBE152A0DA4D40863B38AE49C5F215B95B3FF0F261AD6E157636559AF0393A0F9809FF07C82F5C59D0FD0A9444B583D789C4DABF4E72F1647F9EA2F8B854E2FE5603428D1B15D6AED1380C5B29020B3E86D783966002386E8E78FCA6ACB244B87F0CE85F007C8F29C39418751494E2E690D1408E1F0E7E1D122B47E791AB0857BB58FCDC5D9BEB6514E6A1A7E0F48B3532DB2625C41E7B664121B7B2E414721FCBE7C2604558E1B666C11872470A09EB33FF3EFB3F09FF193E64A995CC05300B2E8BC8D4AE56AF81BFBF03C06CFA19BBB75FCBA00B27066A3A6F816CF28F6F278778D4C6D507A9B4977ECD9C1625B7009716947ABF2B816A6E15F9A4B7BA8B9F8BAC26306DBD1F3D27F6A25D96CE5C57E61BC299C57D60430E83DEA6F1D4A55FE3D47BF39776446B6FB6A215E9BA52670A620E02F3A7841774009E46679A441755883AE070A68A5342E1496788B75A212EF89F0D347258AF952DF21A670DD617D623623A1D132170097F5AB454EA0D1D4F5F5C8311805F26EA4DD34A51E8787AE3F1C17BEF89E1889437D560F56005EBADCEB76EAF35DFD9BE8CC8E52ECBD508FE1093FAFBB37EF949137AD1841052310B2303F3F316B75C9A8CD8CBD7DC9ABCDF8D68F72E4F0E678460506C9F79CE1C950D117572B9F6D36EEB7AF7442589548200303B03B9AF6191DDDD673F0D8E052428402C8E5751D6540C384A2C69DB626DFA1C070448E25EDA84C2C1289A5395CDCDB5089984A08536BD6128555B5B44709424AFFB48B32353652C4A6569A3D862E675DEED7B4E9A6436440C23CC1C862A11E47C8B0142F7904617826FD5E39650347A9561FFCF0C1BE6BD7F3E067E7A038BD97433F423B5263D9F2B3D1EF76C4F1618936B5A613F40A863374F1EAEBC95BB1D4A79CF5A75152F67DC30F02E65E548C4B47808CF357C8DFEAC83E58693896AFD86B35A856A027296B7B0DF4D0CD0FA74A102EEFF47F1BDEAAACBD875D4BDD120CBD9A7974F9A5BEAC1B78D16F9EA490F9BA1C230F5AEC824BE121A2B78E7B65092976DE67D369B31D4718CA88BC9921BF945DD642EF9D8A875C7656D20356DC9C576BB8814A7D400452915CB7395D5E25483181E9204B0E4C68A202D40A7CB2803E4F00BEAA43AB04A82AFFE9B55D6999FB8140D3DB5E7071748801F7652B39E50382D3072233D99FD92C8CD743AD9BA6AA5D34090BB2BAD306225981A5BF8CA19E9A83808D88442CF2DCD9ADAD3380456CB98F15F7EFE1104FA44CF0AB56ECF33277A932358D00E0014562C5E8AA6E75D9E1CC6EB952DE080A457481C647EBED7697F1EC1338DC29D2C0F78EBE2436857CE3BF61ED73591C6D55BBC3E31B8E0A081FACFC4853FA787363797A060D3F6E545BCB1E7F40EF7E48C648BC7C981436E0ED424AEC686EB4ABC1F3CFA2EB75B3D98EEAFA84254C2EBD2122B4BAC2D8D874307C08980D6F749BCD40BABDD32FF825FE400BDF4ABF456290CD379DCEB23B56BD37A270F812A0CA58228ED0523B82B2E1667899670CE05CA87F8C582C08DDFC76EA98293964A59CAF046EAE9B7C9A7E8DCA971C4802B3B132591EBF937FC5FFC1CBD8FD29F8A77553957D9C19CFADF315B5A3546C3D0EDB1AC31685368ED570A44D7A8A4E0177F6562C94AECBDCE1139E01E8CF51C59D031D8C7BCE17FBC9CF7B862D55D960E2BB5B6E2548B6FC22DE49ECA7759D84E1CDBD7D7FAFBA64FBC43374BB8B94D654D26B4A5CED6F47D72768B1B8E901E89FA4826EB623BC7C2F55216A921294AB3E591DD50999C99574504CAB5193852839448C98BDF3D0F33EBBF21E3714F426369C48C4DEE9FE5298E3C3FF8B81EB40EFD9DF4EB1169027E0DCE5582AA49E90BCC8D57E0288C5479E40187DB0F5688062921C234802AAF06FFE4849CDE1081DA00D0CB081F3313E4D7F0EA25D3731A531C5485AD8E0575546B660AB47FCAB410B8C7C9F8DA748D5BC7E1CAC5BD2460D01A9689E3332CB5A8BCB0C8E710BD5952EFA08BF21D2E107582C3A8DA6FE61848B9B498BB8AA2692932CDC63CCF6C81AFB443854099FD10FF193462C2076C9F0E2DB86A392BDB23F6C317AF52F3F5B78C62BA8B39D3F9F7593B31B9838AB34FDD7501044EDA2578BFD23502595960DF04AB6193B5D607FB7B7B4F9F826680EE682ADE8C78A062B752534643353EBFFA73DAF3EA3DCC92A33475F8B593669568D39CA7D73F9B7F717D57F143799862D9B62D7C3F09801B9FDE8EEB3008F82306A6446BF5F00DA355D2BEAB50BC2F5620ECE916D4E32B7E160A8309231DE453EFB4F5AB67C1F97CEFB00A137CA80E9BED5C960220FFADB6533DC0F1DA10CA3DA8AF07AECD705B5DAC88D22160F6CD763AFB1A419B7166CD5B914657FB294B03A7583F0A88A43ABA6CF0C075F566EBAE1D0627E8CD6F127C652E48C586457BB98AAFE4E92BCD812F52E34501FEE1AAC6500AC336A97B28A9D756AA3836855E68BFE46CD5E145E177F23017445D072995678187C286CF14A82320168E83AC780D650F29589B73C0772BCF5D20306366C75A4430D68CFF8FEC4DBA5BD95243ECB126AF7C8ECD25C9F10C8EBB5BA993FCC4D4A61B23D839380B0B7FCB06ECE5D9A83FF59525EAF66126ECADD8A22032B59A183A282E2EE01F1684338B9360DD73BBB2A09E2750BE2FA350F27E4E65172BB8B07A5277B6FC1C1F777889726559DFFCAA063B7004277BED6A1A4451C206AFD8C8B84101B927FEF92E3453B04BFD0AF6017D3253E0B06EDFA339875A5FD787E214CB7978BF211551BDC6C733408ACFDE4C7688AD2C80F76CFC49143CEE3FA4B0130FACF6C95C4CE1C0DEAF95C0DD3D26598B48026395F559FA31268451609CDC3F2D5A1A7120DBE9291CE88F1FD4E3C5BC7395DDCA0E529E4EFB96571AA3AE79C87ABFE0F4411E772373D3AA50EAFD143372B81AB5B0D77D63CBF7D7D02B5D8534317C39B08525AFA501DB39404C7B99400B2724F716BB55978737BECDF8B5AD67DFDEAED9BBD55C877C8879EA9C60F5454907FD0CE37FEE3DE7449D7B53AE29AA808D52DCD4C9E18FE9AA1B7AF072DAA6E153421E4FB05B1EF3A47F9B6C56BC5020A38C50352A4924AC48B7999353A9480DB95C321E90EC111C36948B518633DB64D15E63C6351B10C54865C709AA823F24E7AAA3B6A4406A8BD649A32D90F12CBFD319A30652E3DA2EF25F769CEA24251E5BDB37F9AE81AED5C0CBDC2B4E808E493894B0EA1FFA9C625B164F90411697193EF1F8B4A3EFC912BBD3A14144676F14E62951F8AA9034A2C42C2267A50D8C276B68B386C20345BB96F4605465C924E71C249EF6F5CFA976C32AADAF44E317061E7A941F91D83B697DB8881BA3F0081A061A160B0653D4A47D451233586931319DDA4FA92148C2763100ADE936B58AD64A6741DF74E4DCC2DF8AB597E7459A91F3BDDB34E44AE5022BED0E7540B8E1A19370EB09855734D45FE48FD2632E579F35E803078615278344E259FFA86D548E4DEB7EE3A5B9557F098850997CC6BBE1390C74FFD9C1DCFCD8EBDD2A69CD158FDAB08D5B56325D4C83724650BB4E433D031A69C695012D973FB28DDB7E75F1D39A725640BFD7E2B31E69DECC1A05DD4740BEF2F3899B547D6739783B54F46A00428982EDEF8FCB08157675D795EFA0BB791DDEB614BDF526C585611C5287A9FD86B9CE5BF394842D877940ED4EEF5BDAEC804EDA7FB30AD8391EFD0002785D593A1367519847A0FBEA285DF1B595AB6788914C978199527BF9FA66058460099CD55B9E1C8398983168C705EE6AB8E545F297499CF5C6F1B9D3EA6BD15A542F4EE9865390D277F14E581D5A7B2F0E2111DBE0230A778CA62B3FDB2D2E8AF9E0AF5C9029DCC08C3ECBD063222A3A7A43F9769A47EC46ABA71AF7B04ACDAEA996A8139DA05A6C086E6F057F0FC23A90ACC37933821AB075E30465E1CA02B9E68014CC976C18D996B70264148C61B389DE7FB2E3A92CCDC6762F295C65963C264145F9251C2E8D8B351E2B123F7BF901DE1356E04BE20D47F294B049E8F55AD8DB56E4C5DFF2E876DE455F8A746D879C156AEDBEF7229D47A9830B40DD4E6A0B378A15BBA71E37DB3A337E376C2DF023D1AA4674BA38F307298F910C2CF4E8A78C21BDD105A61A1E6BA25012DFD1F014F6BC382AE549E735124F7030C6392710681907A163D6C0B8012EF0BC64213CAAF54BBCA524D986B3F8FED4CEF116677FCD5D9F71748A37A0447CB5362B8B31877FFBCACAFB6CD42DDFF0D04EF6E8BFA3A83C17D0D659580B2285CFC28619AE1892D65B11BF3F2528BE791EDD5819C900E77F9BBDB029C5734C3F113479C17A98D4E7E91259C30ED2E98092AB81CED2476678A22357161F6A901D1A04B32E5F90FC9F6536AE97FF96658CD181A602DC2020D0F418ECD1439358E32A4C4FC0604870CDE118F2F2EE1732E2F16161227EC10584EFD2566BF625E6539196A9D4639CB28ED364025CCFA48699DA1FAFF3413222BAAEB42EF1C94BBBEE1208867F1BC2E35D626F5DEED1D7EF3DF961D61056BEB92B820BE45A6FF775D95549302F421D7C7E5B6F041329782FB9F972853810DACC6BE29FDA1228840070C759D1BE7DF05A6D5A610BB6BEE0A8E843B23A1CCC38D0DAEF75C7AB2C340B2678219C1A2117A85BF17B105E9B3C708794F8FBB9028C4A4ED1582927D4D3A0F3B1A54B63B4B6A6B65177CC51043A7715F8BA268AA8BF6FAC72400BB71E3D15B16AC4F76FF703C909B77272533AB239366EEBEA9BF4709113AB198F65DF7FF1C235E77AD77212A488387BE97D236C5474176154FA5A78507D24686C02EF4520CD335ACE51928FB96A23C14395122BAAD11247EA85FEAF875AA7E0FBC77945A337B9D5E19EEE19563179747530F9E3392C19CA26F7BDC7A213994B9A2A1E5EA67028EEE6DCAC2036626C09AFCC329B96F9125780C349E46CD8F46D39E90B32ED8E7DE119675040C0D52F03AAA0BB5D21E9FD5E2C20D898B43A36398C75D743D26858CB27392302B28B937DC213F6DF0E7CC0EF2B40B95A8723A7804A525687B1A982390FAA39D1AD70D93EF02586738E6CE14A276760B91C05E32443F0C36124F972282A367BEC905AA8BD1530E53DB43943E48CCE24077E7B6E3DB9F99B4ED371BF82777E688ECF403801BCC0D809D329D7AB1801371204754083C2D42D0C6E7F7AD00009F28D0251AE696734ABA4DED599D9D6FC1124AE793BFCD7FD07D43130487D2A389E22472A098B50BF0BE234694C84BAA9DA56B2796D93694EB75E76E0EF6FCDFB82ED58A90A5447416030E6196BB81085497F51F716F6F7A9DD49EB4DEE2D2FA6F91425A2A1D8A30D2788E8C89126E048143A0D7C56375C18863D94BF09D8B2F4F1D1C86230EAFA22B1E79D2E444B72F584A8CA056B21AC917716890C0EC3B7842ECFD3426A8D7439293F1AE02F791076FC0A430494360844D6D89CF3F8B9E7DB4EC85C819CDF003FAF7739C63D95BE92230B25E33DA7D96C2329F6CC3FF5B108844F7BC580D75F50761B1DE38813B29E8856E24B604399BF452A09D3DB1D86534C60D164BCD1909EF9EBD9AC8DCE9993C761BEED1C9EC099983B89E5C492ABB7A8DB9602B33799FC3E2AD6334B0F012A6B9E1582C07FD09CB15A2410F8CED6F51ADB653729D6FEC4AF7683B4174445C95EF089A7136A09376F67A50EE4F87B39A887500C3B1D9B9851E415D53BCD1CC1F47EC8C397253B0859576C4727F41D672DE63869612CD6AAA729EA5F46BF85A4CCC9E1331283E66502FFE20F5EFADAD9978D974541C0E257C316D5BE060407B0A4A28471F1EA526A53630A6D08E4D371BD41EC74E3BC2A295D92CAE0B5EDB00717BBC3ECED9638A7442FA498ACA1288F424B2992B39C32E528EC29E158C0E2877E0389542AA7CBBC2952E91356E580EB1BCEF8331F410906B8727CC37D06ACB82DC237A9613E7E095C4CDE651FFCE3E7E7DCF01986517BD48B50C8AE2A1A668259F589BC9072106DEA7FCCF045535E44A62BD20750C2EBBEC84324B74B0EEC422F100780A88DB808996FCAA8935930FAE80D0BD8822BBE8F3AFC23272546D97397A8F9BF200A95ED1505F87542A42078E499DC53C0660FF1A48831AC0A8B0FBB3237208D9ED948C036C6D3F1C31DD049C921D4C232978D1FC41A41CBCE5084B1C0EE60AF0523A6AEC8C1D18593CD17B225EBCF54F3B68DFF163239CBB6097EE01E87222452DA206D5E9660C9EA7991A1E99487AE23C9726B0DBAD12B6D97ED8DDBCBF5A8E2634F93C197F6C7FB63811D11E770438D64B9E46C0D9248BD202A6816083BC7CD547C2ED6FCB9C163F2C4787385C10EF68358B1B12E2576E3B459764160BFBDA28C9EBFA4FC0D9A033ED4508CD599D3E9D62FDBFAB12ED310A6FF1AF39E517C614D69D0A686E84B326BFD8BD1310A38F2CAAC0A4BF9999EBF3670C06DCAFD853BD843EF94B0C7EA803CCC68756F69F8B60F1BFA269BBE3B790E1A0ECE64439ECEED307BD55CA6AB99B23811AA3DC670BCF06972DB69BA3AF634F1E6EBFF04C43B39D6340DBE1D537102AD6BE22F0894BAD10E161AF6B2007ADBE443ECF3CF0E147C56215556B633440FA2276E9E351392296FF5DB2184C5E6DE38FCF3A1C7E1A3617B11DCAE0132483B0200C80077CF0E6527BA45CBA4B1E40E3BC3FF9B205854F2B07E8AA6735194F49D4A2FBC1CA14D4AE7D2865117103F71176A7DEF121D08DC2805F46DD31F748EB06E77E5C63846CE0E6FD3705872E977AEE4E3F7258221851D6F327DA9CF4AE207E15930A30712DB97FCBFE96FD7EFB684AA48FCC3BED299DD2D32F01239B5435880D10FF0CF9D58A0A2469E4D32DD2E2ECE6152BF8537B7A3CA5CD74781C615889EC77682766926A2DF1FBE19CBF9ADAEA5B3F0ADFF5CFE2A9E579C8E031A7321D020A72E2F29E8E87B55C6979236B9C718EABC76D09BAED4B5C07452E2764C7016ABE402501DA6639138E4611B1715129FC033FB82028833C6D4747483F08290FB03B5D2871DCD98E97B0D96E3C6E177C0962D658ED22CB3BE6B310183CC98E5E8B133FF0345C6D59FC0A74695DF3BF9C2AB6E7BE9A167600E242F531533169B9888B5EDE742E031339312F3634D91A3391F4137169EDB8E662E8F2966C76AB555A751D53B1E3D4A824BB074E402F19A01F1B634FF26DB245B90517F984DDBAC899B925318320092D3A1FD2342C13A682C47C96BE165812329A9070A9F95A86CDE34B79E9197EA2D65605DFEA3E68FBF018AA21B209878772149B6573B467464FCC7E234C0AE33BBD93C4EC0E5E98263A1CDD80861EA53FA4D5C9D6B74C3531045D69652E855AF829D511ED0BA33FDF2052C3E2C1083AED233A9B8AB1F9C6BDD3CF284F331FA00F06916D21F0B535C66EDA1882FC7FF905989582B760788A5AA260A3CE568C6994E18108A21E60BDA52B8671CF425E74B487DA401ED9F940FE498D44473ACE9A0185C62FB021483C5B8D1335BF444A068C652C293F46D5907F450A03E0F96CE95562728102D136DEF31B53AFA5E5F6E04DC2E76F407F54F1BB9490EAC773F346FB4102A0CF3403DC4CD4534FDCBBEB8FC14062F713A9751713D0F49A22EFC6739604A47D09C04B5100101D0E1857E24DA7C8A8972057B72C0DE6E2058E54C97B5C4BF572B526D76AAF82FA978908C87F68AEC46FB2F16E6E46E679D5C33EBB51E04BB1042711295A56EA29F355111874AA23197DE5629FE2C91EFDCC28C4D926FA5AA9730610F5B200BE4A6633A29373C71636719CEDB4E2AFD3ED9B23B8C3891A934D8D2DCF345E2F14354887F5FFA066E507C3AD8D5F0556BF675F671E26068CD8E3EB25F18C14FD6E83DAF332617571BAFA9CA10283E4E27C498E416F7637997B5DB955F5FCA2121BFD268E5A2B5343A05323CC8F52911C61704834F5FFF78235EC6EC9FB497844D2431E01F36E341BDEECCE43B033105B1437E6B7CBCCB1EF0CACDCB8AD3D9785BDDF596188635533A1E8AB454FA4042718577D183AC76100852FE8E2F084EF9BC57328AFD260794518DA40F82691968BFB09D2A8975E70AFC2F0CAE888B0AFBEED3086FDEA2DD672AA48B849C556B8B4746ACF1A70358B4E922750C429EC7A00811286C307F3F662252C1CDC2803AB65D93197751EED8D74153207C76DB2C2508A181F766F6C74D1B1215E24EFDC901DD2E8EF34745423DB6168512944A4BBD878F364659370276C595AA8EA2DCF50EB1256D4C0258A77AE2A10979FD7473D4FED61A667D421F3AAA5DBBECB4825DB56CAE8FC0204E5036ACC6F1323A92A9C0B03E17AF920CCEF8C950BD48DEA7EC65FE35BF23A0FF9E0E609A1C05930D07618B8E795E4CEDB5AE23FD238C6F57BBC126CAEBF6F7A8BB5CC5B88D8AB738501951DBE2D3000A4218E986B57C925109E5657137C552617095856A62319E8640035FCA0757242BE4702CCDEC68DD23D980A66DA6404E4D909314CC48FF15D32573987F38F423702DC55424EA662D6D671D045291EE760FD9EA784B061A8F201B06A551DCB6D88123DF2F34477CAC40E935D2858305ABC70952F2D4A4D459184CB6268C43938E1666C1E6043302546464A9D37CE04CEEE7C13D7052007F9104837CC74EFF3E610CEE04AD16FF5EB10545D247ED392657DAAA3B98C84D46456892C28DA072F14D55E830424B2A146A70C1B29DCC9029AA2B8F50B84F2A3F55583FCF9A060778F2C1354CDBDBF367F7E6B795742BE83214E066FEB7CE0DB0B46E251F2A9F09ADC87576EF997175C7E403CEC2BEFDA23F5DF76BE05BBA38793B6C6929BA47238F2D4E99D49E3F83E6D6DCC5BBB92AE3E766601E5D2379AE7DA9EB4A3180E446AF32609A5A133E6B4D9F90BDE25BAD025878AFFFE7BC5692E094D8CB5DE0FFB92525AB4DEE43E9589ECBF8CE34786114DEF84D20C6E65CACEDF26EBAD798E3E9E04C86874731892F3A8B987D38071E11164DB8878095E068902A0F30AA957157168F5F61A185832670EC2EDFCAABEFB7E1F38A0220B2A107A1F61D114B4F175C62B64D5EB75119EE0FB730FAA30CE0BC3EEDFAD90662D450CF705D0FA9400BE6D53014449924A3848AB85296635174F14521CC19B48F82609B83A97163A729D90FBDE92A6F4F33022188CA9EF9D91E58E82FF1925B4C5C408C3327E9FAA5A3BC4B2F25CC05D4433986AD5443A812077861C0DA2B0BCF5124711CAE2BADB97BC6D071E43549D5F0E33FA9C2E5A4D15B5AB901B689F860B40D4545FC28B0036D96A8A829BC0DE5B6E6C07A1EB109AAD486192A05EC582ECA2AEB05DDE8132FB30BB04EE0B1474CAFE4FF5CC4573BEF5154DB117AD06BE13E3D421B26F40EA1CA5FB77BB6F9571D3A7ABF5E8C35643085FC259058620D20FAE7D7E90B67430AF882629AB14619EEDF3B77D23CCCCA93D72C6C7AD47EFA259BCC2D281D234DBA7F94C8537E7372AE98FD6E45FE61A6D58C4F61FEA4727F6CFD430DFEA8FFF7D1148C57D17C0098C952B3A1996F9A563D3AC49EDCE6AC29767C6CB5DB4E0A901768891379BE197DFB61716A95BCDB1473C85B5F09FBC11067A39F7B30F79650251CB3313729933DE6B1DCA9EF0CAFF4927BF0FFBBFA61CAD505D7302787F7ADF41B8879B37BA75E6159C3FA9B933EF45C74C51E76ACD88508707B7C95D4143164BFAE6F250CB44C32B4AE7550594FC1EA50090FD061D335ED333DD6ADA59B2CECFC8FCFC9E70DF765D27B50A2244DC8F2977F1A7F4C4E0A489C3155C56F4D4F1F3D5CC7FA26E94BD82B651F2FB71F35059A988681833603B726667B6A985B191D8822847C7DD9085C9E4070C46525B498C059FD353B23B5A8A90BCFFDF07E37A8E85717B02D70581F98874AE29DB2873563D5F8026E36592856ED36696A5A7677B331880FC82C2C37BCF4C576A29E9575EF6F7F0F593DF552B244921D918407DAA23C49BF08ECDB3958CADCD7895C4AF10EAFE973041C2057C9D006D02492A9C5B934C0E1BB64E75809B52452C5D0BB9EFD606009CD678C3D75C69893C05382DAA306AE6658FBFF5FB8BE6FE4E1048657C62E58916066C74D9DD11B3C6BB814B241679C09D11F44FD6E9474B130606145378A4EB8AEFDD1F1BA166F15BE9A602EA49461FE1CCBC387A62ABECFF0BEC71605AF40DD9B3F339C983B30C7182B61367F79D46D8051FD6B193B9DB269FBAD0524AB36D5F3D9F6B8987D6F311DC270E3D2B2F7C5240D02AA4608B2A88B483EE6CF2592824F6E97E89315965E10967BB5E7283224CB85251A6E194F113BB75A9639E234CC729FF6094E73E3DD55DAB983591A9A2BFF1D996F7C1C2DDC9BECC51B1DA90C247898493243A95E97C252D5F337C207684DFBECCDEB4A6890E7455C79DE5ACEAA4FAAEA662CCE09CF45B327128E40FBF213FA0C9A3C2AC3ABF4780EA6C59312523B62A38CDF03DCEEA8722655A78E1570D28A196D5AEF56FFD234F69AE7C306AB8E87CAEE2AF40F73FCADBF8B471434D39858646C1C6967D8C34E4C1095E02FD0B801CC9E2F1889D126623DC02A6554CA40603B20513265971B9FEC939235BDBE34AB9B4435DBC8CDC07D1F849DC8EBEA6F5C4A246E4ECD0114CEFFBED424A787280E5BD6CC72A71F59CDCDD944CE9DCE6D3738A33FF0C1E481A57F221A0D2269A5DE6E065B70DAC2AC96A5E44963E8B66667991B7D3AE7E17F69FBD90A27E07676AE52F4B02A5C2522D701741C34CE88E7271B435FE05D8FE09D9EB3F7809D981A79812FEA1DC1233297EDD8545184E7661CBC3CC656522317766B12A269E8FC987C492C33A28A6C3BCE168C5E25F9977D9E0C445070635DF0F4B16F58E74E95C783EF9C657E222C97E8E17FC7EFA8ECE6096DEA1DB1A463B1A7BD41FB7204564C0124E96557F9A15A0937890B6143697EA12F264D76A595C31335228717A5E3F7F521D3A54A3FD2D8D4D156E392A565B803E72D2DF234812396D4C7506C27968228749BF932E37E1F373A6E601D795756CEDEA4EB45DBF0DDA1A1593855AD119FC93753331E80BE565312BDBA57D6903110046932639E92F3D20936889E1902735729CDCF1E26CA98FB573C1E165B9DF0E9B39B1A347A6DE2C9DA798C4769F2960F3631F8719D38F0289F53D32BAD5F7F35589E95388A0802D843ABA6BFF775A7E0A7951DFDD00DA70B3E14305FDE5EEDDD19490BCB49710BF457AA4C8580ABDA2F7B59194FDE93AA5F2D81AE17565DEF7B30BA7ADAAE3EF40F30869BBEEC7BC9F490F38700E7D5B7274DB5A9E9B80FE64B7304D5E99B14B2F9A97A0F94B516086355D3FECA73584432FF66E40127D831FE587F4B892E9D5CD7F492B2EFD7C3A3F37E5910DE87B4AD9D987AADEB224FF2B6EEED7E3A47B64373DBBC3C3FD1C348F4166A6597473E145D7F8DE1C3877565D209977B5090A0584CB5E26833A6BFD12251BB3B5DA36B63EB502A3663EF06338DC41AA98663D7B415DD6C78353072966FFB7D7E3077E61E6BC3427F865FC056A6B47EE5C6C46EB306BC41C05A204859884D80602DE790A99084DB09771AB972628DC7C768675D38E558C0A0E34D5759EAEAC2D77166528CAFAE2AB99D76827B26E1AF8556C208B3224351AADC23466ADB467F0498F3AB0D27866E1C61DC7DE88E30C42099A470D55A1A476F6C47F19D8C865D807E6329EB0F012A6B9E1582C07FD09CB15A2410F8CED6F580EB9BFD5DA1534C9E4D99C80A386AA87889C209A9B31A9A864ED6FEAA1CF563D8392D5A837294C6F2DDAC6A751FD4A527ADE2139E8B0B205BA5D681EB5689F204D64772A5F0A6E42C4D68E290A26BECDD9981C1B679AF38371BE15F31102BE774992CD62F3D27ADE6E65565DF26F7BC053E8727134A50AFFC44864F77D48C92E6D6456E17AD79B5F802CC19C0D7C229C069140920F4BB209208857B40268607458FF02E23ABFAE91FA03AE9E54526AD66F5106CD9F155E12A0BCE4158F82DF0E9C76C4B3D2E7A2865DF311CE8CA02E904FE9B1FA76A0A71C114A562370F088649F368E7D553EFB55BE55DBBF1FF3032C0CF301A3BB85BAC98709E279E00C7A444C5BB1ADD648BA3135CB765F109B9062AF6B4C0D6FA77A1C6DC6F46669AEBD163098F49458FE066AAB6097FA9DBE3D1F16FB2B3B6A401BB87D3A83AE246E22C83EBA09E8AF6E832CF797E64ED8259014FABF1246D4957117C2E7C49BF7E283F0718BCAC9A20EA422D7BF1482C2E84414E2C64E1C88A27EC4415F31792D7B9CC47C87371866264F997B4B11AA22C3DB06AB15B27B1BFBEF533DDCBDA27993F6617DFE9E51557B2EF93B30D25532229C79A8527A40A6691B012BE45B94BD2F7EDEB1FCEA1B6F0A329972F626C60D89212B20BB449C1FDE6381D88288DFBC6710813EFE0E98BA42ECE25380450F8F00345E3E8FF561B57E4332D2F5720F9632ED641D72F9038A294BFA54672024F3433556A7DEBF71BE521D244700EB5C4AAB522CDA05A2B89FE4BB8470C80296B2C24A70AB71DEE21C5C9F0FDC7964043130D4B9FC0E343A98981F371BA7193153E0FC2D1070627E68C55292F67942B18A2966939277F45EBC32D0C5D4C71B169F1C53A4CEC428C3567F0F1C6719773D027D2221181CD8E8C2FB871169DFCD131012C729D3359CC9411C7DE24EFE5ED43398B08699E9CEA8C02EBCAC0E5445176FDDD542C8C22696D3BF8F19341C84EEB838DB0E2BFEEBB6528D3281AB6178956B7BA2DCCCF6E961A0BD7F1DD286179FFA007FE9F2968DFD809BD1DC6CC2A458E1C45BEE019CF0CC8AA77FAC84BE6EA0408967F5BD41F0B7570D2999B706BBFC480987E677ADCCD43CC5BF63E508215421D26057B891C56C1C6C2D33677F91512F3D4C7C79D21900C6B093487D326AC0B74A5C29A5926DC68D88E74FBAB3F0EA123107CA9F818AA03C2425E839FA2BAE1EFABC7E5CA27BB5C21EF215ADF969CCDED37E3634410BAF600A11A1BCEAC3B268E71463540A80ED96B528E1F1BC06F9303A91ED7B8D2438F44D90AB49AC822B171E5090C1EC704142817D35799222FFA9B18696D85D14039580BCAC9E7F01CCDB4725B4AACB31287F9E0B4A826E32A3D49771E3AB20654A39705F97ED3DBD637973853D8A6622C190DF71A24E0C67E94D18737DB76DFFAA435BF63D0201C53A8711DC713139A22B136CCFFB195203498933C739BEF58B4BBCE0626440B9F526E0B46746B3A5AD218F7A28EE66D3676A41D5B157796F63F2BC5F85F9C3FF5DE2570FAC3AB1AB884A5464EBE22AC9B84668F69456BF09B0DBC250145DFE4BA99703B8DDB4CC63EA6F3631B915A70AFA44D4AEC7DAE6F8EE3355FF5E5C8B1F61841E7AA01FFEB542A99FEF345F5779C4C5DE9DC2C46E348363F81B3040F32F3EECC844D091FE6E11069FE39BC813F2B745C486D6550EED6511D1F5C78C298D7852EC1BD5072423FF06E5DFA9C5201795610FCEB7F85FA2AE490A9167DF57914AC5222C8955BB599EC236AFD37A82C1A83071B57C67AA9FB22FB6449A9D0A56C892CD5E35949A47E64BDB591CB04FC98815A84A10F61BE189008A2A95B499802BBA3D592D93EE676308A6A424CEB7453E64309C9D2486EB1DCCC59E7EA5630FC267A9D5431499A64443C0275B358906ABFEDF310B44E0D469B5EBBA3E8ABC1831E5CEB2A6FD6109E66F49F8002D67FEAABE5695B00CC8F3E8F3ABBF04EBA7C3615B4376CE949B6F72F200D78FBDFD93B8EE85F2D7EA55AFE993E1341C7EAF623DC6EF9F5231F856C6E5455BCEBBF796385494C54789CFA1DCB25B01AD5E0026C7929C83DAFE81AF5E9698DB5F75DC1F51AC9BD93FA6E6E3CA2D81EFBAD15DA4CA5E3E395D38B02728AA2F7C31802A5B12C88D6BD586134A38CC09B0A95F613F562870C15D0D395FB3C72B97095FC5CBA3C69345CB3139DBFE01B6FC79CECD6E066578EFFF23A20DB74F260EB35BF592C010CBE43C8E77E0725F1C2CB2431118FC6701836C94F281B5E30E5BAE30D28585B62AA4305807882BA168BA87F2FCAE094A37A9A1A118D95E873BA355AD9EEE71C1F0F766505162336CCE411FEFE2D5FC419BAAB07C4412DBC3C72608AFAAA17FE750BFB815CE491468078633DC2F2F7B4438F7244BBE1E0CC2E2CE1198FF6783D2177C738835F640B34413E783D29CEB20C670A8AE03DDDE74A49E21846C389D7E5F91E5B34F8DED1408BE1BAFF2D5903B626B5B480756A0D27E0E0FAC89BECE5B47F578D71E0A16BC0BF34CA1952C50811224E965C4E80DB9DC637EAB22CAABFA31EF215DE957697E920092A7935D45CEDD7E4B1F79A66F5F7024045B742ACAF7BEBC21B0071E07A3E4BA8F4CA1A475334CBE07B4F8855F0CCE7D7681A81C0D94B975FC09D8A634A3FF5238D612DAD96EDBEDEF8512E329CED87A2CD027256FC61D837FC77BE2BBB8A864D380EAF21B04D715E389EC2DDCC3DE2DD609F5170F768882114D6E2AA6A949628BC13077DCF35BEC1DF6B978BC15B33872C838572F0D9B64FA26A188DB1E5BAB897E1D4B38E6510EB9942B41BDDD6C46B4BED107A561284EA252880B2D6F5F59EB52111DD66351F84A2E1BD152D225D04264983927703D34AFDCDB7A57C378BFA448DAAF3AB32E24920D6295A663CC9481C40D56CC6CA4752AAF92B80F90DE57DDB0C84EFAEE226618E3007DB5BCCDC7D038813EB83469D836BF15E47B82DDE9C6FFE653B03CCEC67474A78F2B7BC1D7533166A87595F0E4A6F14F7C4DEC517ABD3D998783112E87C16976508D7752DB0132619096A7AB4384A2FAFC8E32702D537FB812518C8D6C97F8B2AADD5E93C221F496C600686F0D251CF8E2873AE9A68B915C2CDD853084763BF488C3A689639576F177F09A3B8AD5A241212A518908282FC1DFAA248FFDAB0CA563334822006D5F93294925C9C71FC0E87D102217BED9161D391E60CE7686DE153E2EA3A0F51434314F2DF89272CD032AF6AEF61DC6DBF5503DDD9BDE5C5B8978D380B13AE5385748A6ACCDADD8CE7125504983C0FCD373C9DA6ADE8DD752CBE59B8766D80D696E7BCAF8E4F7756D531AE2DA372B3184B20548A09D2881F717BF58C14DEE08DFD7A7C1CCC6ACCCC17B6CD4543560A2D2CA6940DC3857D667429BEFA3362DE52D3E3C1DC1328E7C910FD23A4B763E0CDD9635EBCD95B3652CFD1C05FCEB2738EB81F555F1EECEF527455184A0DDEB53C5116660C62D3D6981E7689EEF260F95186BFFEA57AA24E97F473D5C500921C328ACC09E84262472284EC59B599F5E41F8A47FB5FECFEFFF73AAF04619F978A50B9A99BBBA4CACCBF2EB764EC6B6430B227A6C49B71DF7326E5199F34E20EFF9475E5AF8267F1F64F688F60A93C0AAF406FF743C5A2DE58804F4BCC07310BBA96843087734CD62CCEFE0DC430171E9320B0A9E21666BD16A311544068E5C8BAEDA334E9A8DDE81D7D68144F4884BFC9216A06EBB4F0EEF622871C7EBE70D7B2DA4EF792FA6BCC4D713D4EF62ED797490280814E0D25CD4B163DDBB07260659A2BFD7CABB2D26A31FC16E30DC30BBB3FE93FEE6396B6777C2CDFFE70802A8404252174603DAFF2B52F03F47A221BC9982EAB2F973A9D0CBF308E301CA27F1C56A87A154A73D3511B0125F2B46877976C12815196ECFBB7316889A86ECFD0F5A670169B55CA7A5B81E178E44C6A7F5376F2BBA7A35F2B4E15EA535AD4948F3124C2967AB06ED725C8F9D51918D1C47D6A5D14F4BF367CFC1C49AC055CB993EFA46E2220273636143FFB8E88234B688FD3F5CFB00C01F0D5FDC5C4BC73239A6AA42E8DFC909470214C4C57B5C5A324302F1E8BD6510D810680E8B19FC4470134E2B9EAD2A130B725D554494D4DE96FAE277EE3F751371ED0CA789DD1368D2F285937BB4E990FD45C77E9BF2AAB9938F437E56B2374DC7942CC1A4242A0377008861026998A15C21284E895020196C5AAAD1D6DF74FD2EF3DB78447D019ABF6F2260874D58352E4D83A16FCD08EF97A0139548EA8A043F329F8A02FF7362E9493682E33F12EFB47F3E60AE7BB1B115833B06CF755D3C77878346360F8354DB6F778D8BACE7F20E30678B2273DCA537FE09D294EEFC27AC7600406917B138B2149D1BDA018A1FC95C439EE694213B39DE9B7009564234767F95F33C1E2B680E15EC7EDEE377F27EF9DA256BCECFF67F8A67E78A40635C814F99C972DDFEEA675153393B9F12A5CACD872225BB94939FDC8A6CA0EBE82CED44CAE845B02E87D5DA9DEB7815E96109E4802F6A342FAFA403C7AFF4493F0C107C8C9E892DCC1683A5CDF2235EE9D13BAAA73A9CD0AA234CC92E549DDD0BB2650EC67BC03A37AA6667A1FA5E5299406300FE1BAE4EAE0306548E24CFD65524DAA5AB3E35A11482789451DEF56D8977CBFFC1E744F9E033A3B2F62BDF327C0500C0575C9E46F4898B6D4717044AB647857EA355DA1ED4234799C8B5AD7DA8BCC586F80C5BBC48FBEF587BB17FCFA0F03175094E771993FB87E2E004C6F86F0ED37D6822533E97E072E81645E1CCA96C06C25D4EABE822313DB9DDD1366779B86C3109AFAFF57257B8C826548C24685819887B3FB0A6DABC458A909D9ADF2EB5CCAFBD03732027890DD1E1744BD7DF663AEAC56BDC8D5753C09A97158B7F792C0DA1AE9982C0C870C1BE91326C3ABD4A038022714224C9389B1F747F80657F492A3A19E3AB383257C0395954A972570CA91049DC89BE4C7C39EFA566CE7C35FCE0A3966CD41783CFEC33DD1ECFA3832B2B92470E21D3847C80DB419875494C4021F0BD66243D58EC95B58D8C4D04944B45752E8F49487216D72CA98021758B446C08300FCE87CA8FB7577A786221C5BC031919CC4EA3896767373D7E3FCBB5506B57AE1E354CBC3AAD3BEA7BD3BFA003EB25505BF063D383DA20700DB08440690EEE808D617581BEF453036EDD5DB3712F9926A8D4A5CE459F3F4E9F7BAE7FE6559E173E758D79BB485D2B7C0C4BBA1C7FA156DE17A21975DC3835670198523E06BAC1E4E2BD7116EB5A4FA30F7BAE56B523743CB2FDD752C77924AC079E9C2CA2EFC769355351FCAB9549808C318FBDC587000E5C9E17A06A360023FE09D49BDDD2F0DC8899309560BE916D6A2EBA557CA489951B16FA147C9550ACF30D7472F86C93E1CDFD2793D28214A84E644413C2D5FAB5703AF3AE96B5C067B6295BEAAB740E56DC45E50725875A31E09B72EDB522E83CD7196B5D08E759E58192BB0011E869D196B1ECE2D71C736121A8FE275591C85542D662E723027C793200C8747F35F610C4F9411EA312BFFF5E07EE93EBFDD051BA9CC1B3B96BD045D6D1EDF0BF6CE2D2F557415F95653086BCD1203B08D8B7F7B6F141C803D9C411C71D8C733966D64FE0097F61FE66B8E1796AD4C68D8657ACA4DC18DC35F6C26015A01520BB05791F78E395C550C16D1E2CDDF0955A172CA4CFB9C9464D1F40E9FB30558F403EA61C22D91D158835FCDFC1F711E8087C176C666D2CC84969326A92D622144EC71AB9215FC159AEBCD1E4946F2F9CA8032AD1D7A2BD393C732D65DAA54FE525E9C653A41C1AA7D2DDD0EC090013601940D7AED36A93CE664B7364A9201EDCC3D04B789C3D648D7BC0BBE8F8BE10FB39DDD8884ADCD72B3D38AAD07D83BB5ADB1500A6565A6169355E7DB2A79E40829E6D5AE5DF4CE76B6A383436276EAFB8A6E8F1342AD50AA1DE8755C3440CFE99E667A67D0904EF2107D0F223AF3537402962151D64FA83CC380735F02AFF77ED177D93B93BA83DAD379C64ADBDBF05790C977D7A80FFC470C1D8AC0182E369EA529F60089D3462803F2B72CF35172FF64A540167CE1BC13343D4B1296E676B99DA4696EB06FEB791A3E2D3B8EDEF01E9F32BB51E9118545B4804DE14ECFB15B47A9CC3E29A91A6B514AFED5A00C95950F19EBE007E3ED41DCFC6C0467BF07C0F4AC5E8C7D1E09E418B68C5D72439AA939175B8A1514B6C653D1499ECE7CDC1DC5908AE1A6034252E6D054E45405C8011E9B2F786B223E95401B4A5E321FB4554C959536A26DDE4EDC5CB496157DBEBA5114C9EF4FA89BDC5891EF0F5DADA689CEBC3315ED90B33EE443C8227EB31F1467170380DBA6F0692711E9C13971D47AD08921FB99B3A3B257B5EECCF6EB4CB6144675484886478D0FE47B265E238F5DC60542BCF315D433C726B2F11CC7EC2505E5EA994F1F3A99E857AF06E1A05FE00DDBB39ACF909F65A3E0AB92C5E7BE45461C817CC4BD84B479267F7E2695602761EF93D1875A0381FA264E7B7BB105B21F7B202765729775336D31E22CFFB3A108CA981553FA00905A30C75EF3DCC1399A60A1EBFA765D607DEC2784D902D68932766F85FA4880CE65A66AD5740671E41198FF0680049C6246A1931B2DCFE5BE92DBBDB93D813A18BBA8EFCC6D0BAB435C1F70DED31389878410E85993494EB9930FA1EFD274AAF9A4A2F4A611929E34FC2036B3A2587354181E5C2798F4CD82E280061D269A3CB26B472E98C3C2BD21F546E2B9FBC942CFD62F6E66F3FDA3F6DA0FAFE83AA1FFD8108DA39DA238B990908B2D54CC5E530B33BB034FD3A72CBDDE459870F2F5593174FDD33E43F24BD6CC35C652504DAFD49DBE35DC87559928BFC5E2747673D47899EE9F5DC02440C18EDBF1B112A606637670C4A5C474D29FBAE3576D372F5EF8DD6212B87CD85A3195726791483348AAAACCCD76988251708E5E6958436A353F1A867FE22558A362289DAAEDB0DBD57FEAEACED58F572D741DCF02484EB76A0381996E22AEF63B98D4A88FB54E29C677B74148DADD702B5D65185006DCB950D26AA6168879931801B709F90D965BD7C94BECF9E9736755717B4B59E5FD5098E1C74333BD75190A2826EAD40F1C36CEBF6EFBD5D06CC3C365CEAC104BC81261581C8678EF42EC66525E2BC1901F801978782FDD009DF9F54C654F19EC5974B71A15915E3474DDB7EB2CEAC9ADAC7C7B68CABE3F67E9ED379DE41C08C377F3B118882974630AC1960DE5C525DF849FCA91F71342A9761E1EAC43BE35B9E7C91DC7171D76B178BB2F593400B962D02C63FAC8900B1C591ACEC2A3BFE9EC87F11F6502395C8535183EF188C17749552AD1D7CE01722A54E3AC3022206679F7A64F845F77F93AA1ADDB1EA6F2ABDAB377742620800AED7970E1AB7598247264ED614F840BAD3B3793871D2C803E124343DA97D8B16F27B1A1003664713C7AA56D3969360B29C99F733C833B7AB3F2BDA82C4EE9D47D10C0B3AE400967C922C286C083A3514E7DA9EB4A3180E446AF32609A5A133E6B4D9FA39889A5882F85C9B1CFF0CA8A0A9E45A443BFEC91B575EE8327166EB6C75B0C3E3ED1662F7EFB944C84A2FFD5C4700FA5BEE6BB6C87FA2B71708B138203ED581AD669A6BBA0153A2104E510C79331E0056880968F2266353C97AAC62C1CB1A3C6E267745CAC76F6B4747FB76291CCEBC45AD2BAF358403417EE33580302BC318763E2BDC6A307DE2472277EB9B724C09CEEB5EFB44F98C840157A9D93DE12B4B2968FE76B89FDE21FA1512C52DB1F78A174EB80445AAB6937BE5560A785B8052883C283C02700D1C51BCC0D34639540D8FFE8D4C4F0CA3C844122D7B2BAFD0383FED9887D5D0CFCE8ABDA2FA8B5B7EE67C9B9984D70C32AEAE8D7662AD21C69F2CD298CC8BE703A6BEE582D26525C35B17512AB3D6386EECE60AC0ADB63CBA46794E8303AA76C7FE0D1ED0FFA59E37E21D702A80BBF1D4668AA044FEDDB38F1EA079E9B24F0F41159AD50DCDEDD11FFA8313B745E3CE90BBA3F71135D0931B84184A2E15E32B051992361C3C2FC335CF60B38F9D8C023B77A4A2C0036956294C4AD1A985480A73A65ABC3312CF7100D0393E75878D759602C5C93D5F27E9BBB48DEED9118F1EA0D64FE7D935470F7D1C7E8062D9C6EFA259BCC2D281D234DBA7F94C8537E7372AEABE58E195FE214980C0FDD55308CCE163DFCF3940E255E6C754BBFB61C981A4E4C5DC5A118FE71EC0CC6EB66FF3E689B2B265EA1AC1E126E1665739F425142C3C54A72D19E18612B9C0623348F85CB8318AF00701F7D49243B86E54F8614F0E1805B3578617FC060B993531DD69A22A69CB6BF2534E1691C28DE82C7EB1E1B846E6506F2FFB41F31777C7A97A0D8009D75EFE71CE1C709C5E2F62303855881E74A05A27FF56BBF213841E99B9CEAF8D1118EA79E63EB415AE418713C95BED28E4D2653BE372DD5B975827E2E44638B03676CE357DDFE70A70F38984A8AFEBB853AABEF4B2DCDF306FCE6D5D4DFCC75AE18C1DDD7907E829A11AD1D294675CD9E6F3ACB9716A4A2DFC27EBEF67C02AFA68ADF995A937EB87340D0B8DF9AB49EF5D43DFE5C1C80B37D2584C853E736323DD107D17C5AA085EED1F41037C41C28075A8443B91B25F22604D68BA7A93AA7CFAFE2DD305DFBF0FFC808C8706AB12B44AAB11985664378B5DEA349FF02AF538E5107EAA6B23D440973BAE37C738F18C590832C729EA55C24B744555982F7D4083F8DD04F8914FAF7FDB5E26A4CA07DDDA412F76C23FFB111E62377754D36F43BFE0AD41AECFBA52E6D7CA7736DD13D60E45F39CFB26E968BAABBFE6E72943093FBF41E0C40BBC6A9BE8DA6CB4C36F7A3BD32D647937C02FE4D17EC31E65AF347551E8C3A27DC29C926FE5D82FE26973D48EC369D9C07BCDCB5E4D6F49DCE506ED876C0D1A65E2E71BCC485BE3F312A1ACF380732560D04E5F44CC5333BF90478DA92327D432E9079DDD2E8B3FEF62CAC3029BE4F4C1A227C4CD472950712B2D95BB62360D62B0146B23180A416B3F6412670918DED67CF5A8B85BF2E8B20AF5D2F182184A7DEA592EB318E4FFBE4AEB1D8D7C26BECC3DE49CD911269074C74591588D5208E1160D32AF76253C4894731B5614A320B0D6060EA21F174F445815E0FFF7BFF62143AB271E6811F081894615B05A08D20B11750569856B47E7D25843D74DA41DD6C28F360ABE5195F5FF44249CB924C5BBF5B77020C43BCA562C94FEED7FBF1A8A756D0DF8D871C6382F53C63329FDA9603F990760D72841A33FADB66F08D69F8EC3971176870BE4F9C78357323905EAE88ED3FC0C438C2C0B370510E5CD8A453E7395951AF23FF6841002AFA3522F8D6C9D57BAABAD8AEA26988ECCCAA6B51D5CAB233797B9F7F820C348A473C2E677B95C8A9019F74D4DA21E63A9849E0833AB739B0F0E3A7F924E247550A4066BAB85FF697832E2D1DF239AAB612090F755F46BB5E90C55F5942A707693B25CCFF41BC9E669287BDA60A1DCED095F673A1594BEFCC958BE3A49E50A88F8CCE73DF2519CE4ECE4FEBA71840642B4B9CCA00125F036D9B0940D5F8A55CC4831CF84F6F547D7B7F1A1A73E8B38C3D22E97691A4A879AB28086CC7CE49817745A1CFC97EE0536F0B7094DB7CEC0A8DFB88222EBF0BA97047EA9BE8A158790233DB53E2B572E3298CF6A94C3BD0C4A5A06A733C3087EAB2B59929C70686F9DFBF5D95BD299DFB1A0684309142026FC3818F7CAB4DD1C2FFA9AA2AE9076F2AD063F97C6FC652B9338C842FC81D1F4CD43264DE7978E5195A7E881BBD84FEE2479012FB5B775424ABFFE44D5177E6F937DE9CA6E393963278AC35FB8C52ECE32B6296E03DA73FDCB9124E4EC8F0B6BA08F57550DF3CFCDA69C4A5D5C727E19DCD7011945C196E894143A6220FC49F5377EB4243228BE6E16A4C3ADA517A821B948015665B34524254DC3548CC618D7F48904B32AD8394044E42E9E34D1583629E20B6B70FA9A6FD4629769F9D318E9237EEE15FA2DB5B4BEC1C0EA67218ADC2CA1F59A7495E656518DE07E342B5FCEA940D39790871ECE9AD1A901E935261061579095C7B7D58F9582B1FEC8C6115043F2ADA18821DFCAB96EBCF03807F951E1AD7856AB269789DDA7C7A362525D6DB5D58BD14DBE4C1D1846CEC03C7BC1A740FF5B9E6BE62AA3E2F0063DD611A4BA539D8125251D58184CF236FD4D9CED7FC3EC892033E324EBA50271AFA58D24AB56E01FDD773CE927EC803CAEF475EAACBCBCA2526BB7F3C72F30FAD6BB7AA822DCC0E1445D00CFCEBC9A18762419521FA81F2026FC38B7E3302094D4C0DD1F4AA9546D3EEDA3216F68011B20DF885AEF174CBE23FF504E72F6BEB4E6090A87AD97E2A731A4F36034035E7277CA703CA4EF9BB5D8520A9A83F8DF189129B08E28C19C9AA6A0DF14591B146D5B42D128875B2549BBD28B37FAD7958B60B70308BDC4FB97547E713EFB3061B997431B92A8F877AA0B7567E023D05503BF14B7DB807496177D3CAA00B20089BEFA037A8804944DECD051A5732C3D1A03194E76D375F4C7914254191383038E58AD230D12ADE014FA0B046C0BB550283845712CBFCA394EC284AE27B12A87CDDBF0B2EC2EC6164D50C910BEFA2FB4D9BF5BC78532B05F7894CBC919917DE4221F0C990CDE94EECF1A2839C73B15D718CB10253C94B63F24DAA8DBD86938591532C95399B1BA357216596CCE6447C643F6E1C81FD3624B743270F802BA8C43491E8DC40027D85A0A535ADCC331A4BD715D95900E6310124DDC5CF577732CED894C524D7ABCCEB1CAB56741F1C3C0DE2EA5B63475491E0AD2345464DF8240ADA7D36009D36FDDE09CDA43120FA661BD163A248F2054CB611B8E70B61CB6B44B27DC6B35B8F935B32C26465A2176CD47181C522CA2C6191B5E7D2019C0D535EE3189D6E1C4ED963EEB2D5936B2A2991086164A625D567566BA4052AAE3711A992B3061802DA0DFD59CD044D0A4BCA49B18524C91BA7A2D6F6EA8BE3F561ACC4E17A966A6E77CEBE1966C41C47843810A0F08712B194E16BCB01074F8C462B721803DD227C32A1E10C8A1961A09CBDA16DCA52DBD42BE2CE129AA518AD6D774F7F886B49F2194DA4F458B5B2B6BD949559C75D505DF8F5DA10EB5AD9E442B7A830CF6FF3D26A7BAB409C800B1CDDADCC7855CEB40226EE7938A36C2064C5913079B64B9980104F11E88601C80FEB9894F809069687E769346D3AF7194A0FDF41236AD3FA3AE0B8AF8E8F66058242709A6698A762E5A4B905AC4456BD545BD1BCB5BB855BC562DF5325D6FAAC3C6EC72DE86B95AFC6A287C4B7AFCF4897B3A783C2679AD262F8442E405AF65D00A9937847A2850BC77DCDC5B378883331898AEACC038BD3EAC9BEC42E692486FD798291C1428DFE25031B800B42A191A7607BE44E6F60813356C09B7C42D743FA84F23FC30C3892C66CF5DF9F7793FB93DC399705D719819B4786D1B3991105774678B791917B421BC5F985270C63EB66AC4DB7BA63D8DA6B1BE8C06275AA4621234E9AE8BF0C53119480AE40BA78C4B4B83200E5640A0794EEFDD6ABE852D22CF7527DA51CFF45D0AE6FAD90B593E4AB40F1A8CE5F8D81868964C47B9CD8F380ABBF3EEB8E869C01D1B8F164B8B895E8BBB85A15AEBC6FEB522B597F41364F4868F1661EE6D13F9043572C7B598E3BC4FDE62EBAE674DDB14556171E982DADD8C7980F306D4FEBE7A420F36E406E5F7BAC2A2D14C449114F894930AA63E2B798A3F0A0F5925B0720EBDBEED94AC91AA48D4A6F7A76B9CE5CE4413E1EEDA7427225D0455FB1BA8942FD9EF69D54DE9B9B786F879560CE1D8C95180ACEF4C389F0A5EE7AAE02B8FEE2468C31918DAB9D4D5FBF0BDB77585797142BD3276E14D7679FF1E024CF3E37D6E54012A5BD12EDA0D3B0B72D095391393A38047ACD0231D1022E23AD66CB09DAC924BD22741C9EB398F9312D23B9C110F9F2283A52F8CAA021F158F1DEE55B1E5A1943767A19236EA447BEE08C3B5C1BD1EF7F499824BA0DF65341F0AF1EAEC894D369A47408D406BEB3F80BAD4C633BB6E0E1D177169CF0FA6185B9B4183AEE96F956C5833324EA06F9C88B0A5F28F68DA52DD42EA3D9951231A0407CD784F7F5564FAB78F5FE6F90AA0ADFCA270689ADC65E6325321792329CFC7E672F8DC96E82ECBC89E0DF046FD67AF67F05FCB02948BAAD6D6CEEAADD73ABF5C23965F9090F4AE22E7E16FF2D28397749EFA5132772A96AF4FA9BE4B4A2BF8BDE281BBE7CDC7DBF46E1F78220AACA385C42A8AD28EC285EC1BB65083206B9F9AB83CFF88B8660E3FA00D0C5DA72068164332E444D3D891D0F560ABFBBEB9669156C0CD4C4E630DE02E7AB251075BA499F1A48915625E99A7E47C5E08DD09A0E59FD9293D622383C2AB3C984CC099AE0A98D9E9AF831FDEC57C919F2655A6ACCE9237249F75256FE75196B6CE3475109E28E5E691BDE977FEA725DB745E2284397A15D062EA64955DE21AD4DB77966547A97CD8B5414F674D99093984231489C0D01A23B4E02595C58E098BBE2E42DB9C1520183080076202F7F8410AD8737891E6714EB5A193A4CB6A5F015014C3A9230A9D9438D6C2C528403609B5B997A816067107614735EB0CF132A9A53F83D022DC6056DF7805A5F354BF9639483E91BD0BE482A2E88DB54E012E17047BCA18E063B395D34C7187160A3400489FB08F6E3EF8DB20151FFF288F3C6BE5171503AADEEEC13786467174529C537F3AF9C705623C298B2CB587F5C8F1B409FE389A9F7D94CFF99DB759D4B0EB6B1B033EDD8FCDF7A6A7BBE41EFE2B0BAF1B0C6A59C108722324C43E8737B42D246A4B877898792AB5A157036BF27C109EB5AFF09A27FC385C96E5CDB8947976E1B9C2460E51D7FDB736A53E88311598A100B9928D3272F84A9BF52713CC15C98F4F72D94928237131A91BD8F26E15EC274EBB325552F5F924DDFD4972DAE0714E37042D54D5CA0475EF09663FE53E7C884ED0DE4294D595F29D47A25F6B895FE3AFA4312F68701E8015821CCE9E44264FBC80834DBD729B243B7901D20472BA98DB31B4DDECB660E018912C535843106990C4CDDBEFB7B25AB283AC1D5896B3C23FCF23787122109FD5F2C9585326C828BD402576CBDF62F54FB94942D689B00D0844C6F32DCC7ED423B04261586211C408822124306AD1F7AC00FE383188FD0D610903088AF7C56E9245C61CF9936805513F05010873978A321F2CC7F4F80A4A2854E0B9951E5B296FBD8E9E87219B07904E2B7E41A02851BA5FCB42F69E705CA477E02D6AD0A21E016069515C416B7C1FB3CDEEEF512C3841051CF3515633142AE3480C307E46ABEE3603B97C85D818D4CB79D485920F71E218966FDCADBEAD32CBFDFB9FB41F83A8CEA7AC9BC03BA894756FA4440B2A530E83A12B37CB6455F01855262A05DFAB6A0AD2E00BBE99B040550B1F3D31DB43A14110563ABCAA878C93C064BFB5B95B6E8C517F1898CE672EB4C1E427C3FAA7D049E559EA353ABB3275FD09A5FA5A91E9F9F3F7D98F0E2746C3E3636FD2B6F0A474EBBE834A2BD95857F7A9AD1C0C62E0EA429EEB104F557DDFF488FE7FC5489A8076EBCC3B6AD3DD651C676F64B2438EC6867EA23D5C6659412A55FA1A47C30BEC61EA3059FC6DC945F0ADE8D64BEA6A63FF906F9D187CAC5BA58307FC23AF4CA6678BEE08417556FE700E831B812B1F55EB738862D9E47BA14987937A7BA9A83F16FDD70C651FD751A05909E252E0F900CE693CDA6850A12A46DC0ECEDA40DB238D03ECC7FE11F9BE76A21CD7433FF916EADF36D8B418CAED5E3F169987B681423019A7A404FB0829232C8F0A52E1DA041A59E96344EDF62FC282B7AD1F06AB7CD9D6BFFE18094DBCF7ED90E33C70F203DBAF2E1312099F34F0EBAE3DEB473155E10639A65A432CFDAB569EA65909C37D7495675FB21D324B5A59373632125E6788B9FB5700CE41BCAEDEA3F5195DD4B3A831C4CB815D877866B95C43AF9C19607EC4798CB0C05699653AA4E9B6CDD3EB56FC683E1264184D6DB62933C679F032664506E6901B8FB41BED0F01933D9DA6C0CCAAF4A5D175D5EC877FF598AF3DC75A4AAE514B9544B954C6C711740E2280AD83F41808008A7DC3180E2936B4CD2F78C95E3255F0E92778F8CF496ED5FD4A5A72CA4197F292776D87A1B8A67A74A72F839001097CD8C8D1284E82DADC66373863FCD8C6690B201C35CD1641E65722EFFE26F1E88CA40901A37E6C7D5AC805C5987510A4678A99C90885CBC6E77E40F3CB1C8591269E58734AA1C91D5645C300F065D614BB8D288B8F9154A9A3ED20B29F2879E85FEA3BCB713EF286F934EADCF84C29BFBEADB0708535013056956625126B04FA090B023CAD2AA9EA61B61A7F820AC777A6F6883732A12944759AB3E2981DC0D037C14EB06E2BC1BB4FC0C017110C972A1D3F700F36A1CACAC5E1C5746EC944762F68835F9B06498A14E10A1DD780C26CA2F46322B15404177E052541BE6AB8CE1D48444827568DB6C9F5E605B23DD62090F9E8025F4584DB08957E3C332B66045978C169FA126293CE898627210A8AD094D3FF0BA63F8E8CFCA83A5C7D7A7E821D12822962105055F69BADD0B95FEDC316E933EA810A3E7DE699BA313D3CA2817EC397484CBB398DC33C35DA39C8E531418763B01BE2999FDCF6A9C8591D81A6E9DB6B10246AEACDABA8429FE8D01250432314EC2808226A900C0233B7B47CDB2E7204FB1C794A648F5F2E94E2F36D12346F4872DF6BD3611CE246B1F27D1AFCD5AAF502542AE0F23861246D4A5A930297E66A2EE8D4A2FF1982926234ED2E87185B7C1DFB5B6C58E0A7761048D4A665167F4FC29A139E6B62EEF9B72B844805DF32F3255500440FF0FE7BCA0691E46434AB1F7D47CB9385D705515AD8D30D0ED62461070F84B5F4A4E80A92EBEE67E6FC03874953429E99857AD1BB087D86470BE98D7AA5F940F954060EC8212211540B60766BCA6B0839E4341502095F8966368443201A24CB3C7FE7632ED3327FA903DAA3DCE5E761407AB6ED19E9404E7AFD210CFC509EB5B31E86A4E56D1C322C8EF43E629B6591C1E2DCBB872A90E984D933ACC14BC897A996B9BF06D1729C605961CD48FC4FF3DFCD04C613EA41AA661A73C4D522BFC32D35967EF46A3C3870E55400BAC38F0D12BECD6ACACBD348A63C5C4F13895320E113D8F026BCB2550C00D0D9FAB8187ABA26A9D719423ECE6C287261A2D1014CEB220D13514E76F304C9CCC9FA26E95688A801CB7F0EC6436BE967F6AF0A20D2B416C0B266F2DF84F8A1EA724609D097F129B4FF80731D4A82D99919165E0677BC73882C0EA0CBB20E341DA60355217C023527912689360F8D557CADA7E519C2240F790D9DA1A9F44B452A6FC4336F8C184809DFF7C0D7C4A6B2B061D410D3EB052B7E506A6870DE4ABDFA62DDB20B820918F71BB02029674C3D4A7B77C9535603217C0D9AE3C352F5184CB0549C1F1ABD55EA44106839ECCE71AB4E899A5A71F5BB69599E2958492548FC42D52495B2BE4ED8FC9A4A0FCEE725322256FD47CDC242D000FF28D61CB3EA81A0B86529B2A9005E1CE0539E443D9C2C9C47D70C47984843AFE9C17C92F7AA2F318656FBA10CFA9B09592DBD619A60677B8FECEA88545DB9FD6C0AA6D5ED91FB68D4541276501E0A37CFEFAFD4BA45D4149656F0D6241953F8FB92ED5F31869644BB9CDA21A13E703D8DCE0E78BF5BA7C6A2542CD56D4BAE4C7A3A1BDA27CC8B97869F2F357CE67ADA2F0CAD5A0A1CB970BA5A674C575ACB79FF9C95096AA3935BD320BCEAB0E0F449DDF25508262A4E05136D53FA97C8B31D8E3DD8CEA625935D98887F105CE637754F83C63F00C45A239C69F6F31D75AC1B2C8F6CB56B03206CA411FF5BD2440E57583C46FEF23D6CBEE7B24BAFFEC8F7EF23981649BC125FA5ED421A971A6A695362F8EEA9B3675D4801DEE8B5DC0874293F397F045C0AA929ACAA1B4B7246BCF074678D1AC6A8BB39271180A0F7252805D032C4E9504FDBB541D53A22A3F2640FC0117BDA8DD2B5ACE95006E51C9719B14B3ADA2B581C817058922C4EE8E169503145273CB4CEEABDF446676963874E8E8216F76D268DB4A844CEC377E0B45EDCF6BEEE6909DEFB4DD5B6CCC383C8B044523A98EC9A6B43C2F878C344BEA8DCF911ECC45AC7D48340E0B27A91AE22E4EFE4A60BFBFA64EE411541D9153635CD7CCCF2A4ABDA0E2186543B0FCC764809D65AEA871A26E9E582331F649DDD2E9127F7A0C46AD9ABC9016C20FC1843F44A98B0C1C44CE362622E9C008AE9B5FE51027DD385603106268237661EEA36B733895E5FA7E1D280353D64D8308B51E3D5CB7E51D6D9E5035D281E13A1BDDC6CC81A80A5B66BF6D91BF744D30ADA78873F75AF8D94ABC66F5559A6167753C3FBF6DE9DF07362EA865C157FAF8D07AE754F6BC3349B3E39825158D767B52B633095868313001C2DAB69C578F5EFFF54660711023BDD7936A2DC3EA56091663FCE0FFD586425FEB892CD7EFD30506AA2AF47955864285B0F330438E6F090E862B48900ED6906643E938AE80A5DE1B2DD13B7E6400D9AFBA80C4BFC3CEAA60D7B9037E32BB00A1130B40D812E54517A4BB32FF4B25789654F4954D37B6774532241F8AC79D9DCDB2ABE75FE7B801ADB01F36D2855E886CA608DD1F187E56F98BCAE5B1C6676018F412646A8CB799E5969AC494EB3D0B90E290201967C4B27A225F9D9E0F12E12CF6868F6532AF5E0EDED230BD124C3B6F4BAFA8D19DBC3DB8B91CFF790F49B40144D07D2CDCA2D1A58EA12B20710CDECBA86DE8EDBA905F1346A93AF80D8553A047C77F27F1FC8269DB268CA01092D73F356BCA7955674333F904AB352A96AEDDB699501A108E2A6A57F36767843B26459BA94FF15AC1B1B9C3BCC2008F3FF5614F695DE420F935C1FE9088DDFEDBF26F9AD1858334E09B41FF98AC21715C00C7A16A47A2B19DA4C2A25C5632912043F1875AAFFD0E7CACEE1A63F1171FE5DAC4F26909726A1AA8AE2103580FAFDC780D03A275040087B1B30D9B71382544052210379D9363BEB3A102E097E05E4939ACEA0F93CCF9D5DB41E494A4B08EAB029DA005BE5C8A55E2FEA5DD43503973DB4E91F24E3FA6DA9884C2AAE62F98EAC6680879A8F2C76E413C5CA1E2B5158DA89BD0595DA9E59132987870A3C555E7CAC60040701EC20EC7CFCABC563388BD47F4E2928C8B3703DF954ED9622909EA15D6A34713F7B872F7F7A22C964A60957E62AD6FB6B98AA093F8E932676C36CE436CB881C344022B17CF0EA0B7C768C08E9346DFE5805FDD1075866222654527682BFC80576DCF49D7BD6E2910EA32C2D3F767CD5B965E3AA7F2D22EFC2C2B588E0C5BDABFDAADCA7ADC82AE31970EAA18D0AD8B7DC412007C360742A3693B74EF6F2EA92E5C0D4E2BE06E009BF163C73896409D934CC6EC817F21F6C29C3CADA6E3BBA4EE538EDF1CD37324041B5B22793F5BA16EDB1E2E4A5A9C7F0D9E360B4F4C2E55E9D53069171FCB8F44919C8DD1D15C7E352B4AB5AA67497FDDF270CAAF3D3D53B37C632142AE8B9C508D986903C34CB1EAC2EAC86EFE664DBF3CB94130A91094D781756C988A4E9DCDAC36760A1C71A8C46E0269440A03A69986EFB0BA41F24BA536AFC7C8171C5305F6E55F64B901BE9C94A50531A550A903842EF98B16ED39CC06589E44233E4AC45DD42CCA882C95088A4DFA413712ECD6A22D054F2DA96C60581DD7A2DF5A43210128930C41FA051FF102E7AA3A048FE41248CB2FBB31EEF98D32CB9A9C562A06533E091AA805BF2773D58BE214D4FADEA04CFEE734BEA7549D68F0ACD245E0F3B67FF4EF24538FCEF3B1C6DA9D71E1B7C314159181FAE9B505EF1FD92563494FC86EB5FC12E940D147B2C92749C8BF8BF983D71F24CEF1B63569AE96C7E611D8D98E7CF1761CF29B6FF196DCFFD1D5F18293B42ED8FC194A0C1CDE2B39AA8B484B58993DB9CD23235140803007A0EF56AAC53938FADCC9F39A81141A9B4F80E95DB24B12E8D5F90DEE630AED0E0F580554EE4BB3D88EB6CC53FAE7983AB9E218B9E1B5BE17420CD3492465094EF762BFBD83168F068E574127D84822F4B328A22C8604BF37C525B28C2AED5DE8F7BDF89D5E31AC25B399DD6DE645634059D8DA2B08A6703EAE48FB0AE538936090BD471268995E85A78488B0EB54E28B5943710483D8EE5D8267EFB3B0B3A126020E998A8404A7EAF56174AF3AE0E32B426D94B3B305F549E1EA1B919FE168B910CA95C864227370A6A746D22BC3B3878B7A6EB9ACAB1B682B7D4DA15CFE13C6F1AAB673313E0A27681432B41F3BA850678DC77522F2102F889FDE92E32E8DEE3EF918302D0299A3F7CFC78E23F0D75FDA418A7EECBD4B7615F4BD757B77C3A011FC164E3E7D99909E006565451BF8089AE4CF6444B24FA52EAFEB1D1AE36B2A323AC9B5738B623D36D65B9B43342000E826017EAA38A427F012390CC3448893F4319DA68850EA6169E16FA743CE5C56BCC168DA3AD7263D869C1FBB56B27BB8A442252AFB425F30A51CBECE0DEADA23F8FF64E37B12659B46E64A0379D125670176B0D1B9A8D69C431566A75140992FBC83BEAF3642FF8BB7C0C2198506DA4DE2B2BC97610DE399CD12C4B629A7C7E5EF4D41313E01F58CD93D8F974DDAC25995E50F9611C866DFF07DBF3F0397A288EE72581FC0B9F2C861D249C44BE8B34C3AFC29B469B3618FC07DBA26B6157F3549A86A6F0D614791362C7DB5901083FA86ADB4B126A76C9D9999A47260D4B7927C281FB81524F1DF41285DC812C39CC1D47614F745F1144B10BCE4A6DF3D377D7592B078673693E26DEDC9BE6F70AE4D1E2DAE74940F96CC5410F37F33724B3F0AFFB6FA7347F239CA045D11DCC94ECC844823B338FEECDD784386523BC6BA66AC698539D3FE00569F36F3BED8766C506C8FC803F0679D0C5EB3871B763D7F52535A35CCA172E5B4A39C1116A302AB8BE64161A10823E95B481EC02FAF4A87C8FAA83CDBBD890593297A39214E2350EC8AF45EBAB2FF4E2BCE1B3B314D16F890418BF4E8E759096778E784F80A7F3CA6EB2FE935CA92A8AF674F45D8ABE52C0E7AED668E1E0793E46E1911B503C4E129814F48252D40268954F90C20BBBCFF66B08456412D672D2868B432EF910E0F476001471607727F45D48E35C0773A9834B8DDEAB4AF09BB364ABF272551A158A40E75DAAD17696A682AB0798BF2B9C7DC2B1F2CCF8CB40F0881BBD3076A2B78DF5FFA47062822884431D5E5BEA278CECBF22A027B368CA42F1E6AF872B3952E9D4F39F9C0F316157B805E7738282AAE4E0BDA77147C3668A711478087448C89121F537184E0C7511977EBCCAD5C7936C875F1E378F8992101B83BAB8197085A8DFEE683C6C63C97B4D7FA816A31DF4CE33DB18A48B647888D2B59A189307FD26583A5F5F0D4315F7F02F6C9522A958AA77C82D9A9CD93B37878CCE8EE7860736150A38A7761E9A55378F676050BF02670487C4EE7DD4F0B1F891B847BC21F97DD2AD98358C5E0FFCC6D53E60DFB7BFD4495F0E24D692DFAF52EEDCA1DF7FCF7E046026614F11C60AAA878E26BD68B1EA996EDB80C3AE3F40DDE740D3CC738BE6B3DA3E28AFCA2B84F1372AD3057C7A873D30C590A4A5795B9C6E5EA78AA6D1E930BD78E4BA4224125C55E9D6AC45CAEF6E7E46F2A555F14DEFFC4EAAD724716F8393DF0B69D15B42A5F2126C2434D5727DD6EFE2146E9334EAC6E2376F32447FA6BC4D20141B9CE13190C99837952D4DDB999C8BFE5C31C7A5AA8D0398DBCCBE4E191DBAE2738D59BFF64F1687C9356502B30E945F3EF6C2F8009C53041AA3E7A565F5D3009A912628A083A8004C83D31C771B815B9633BCF3258A4FE661B43A69ACFE7CF237B193B1F601B51BC391E43596C3AB0137FD0AA16E32055A8C282D6A7CBE2C55AFE19DB95F530ED3BE3D9316B181593C1581747CCCC035CEF0C99224885012F780BEE74352C22E1FAAE9224CA60B569292050CC6F50DE06043C6455336468847EF5656DCFFD18BD93F163AD01F2CEA12491F22E162374EA86B4CAC644BF188644948287A31E7AA1FE4F2C00B61408134EE62324F9E3B9C79C0C2D3249B7A445A4FADEAA3ED5EA84071355AC527522E39F7EA99ABEBCF837D08941FAD1C038C16044271BEC3603E4C1F0EF577E1CA8A372D1B8198237CE0A0DAC71EFE74E35254A3264D7002D0BD90FCB62A8454D66D76329454BDA83CCA95A7C40052481A9883853585B2A12AA15932355987F187A619163189597A8B6CCC7E79B6D6619331BE4561791A96A63AF40AB8B86D1B9E15C767C73041E63D3DBA879450A4FB521267BC1591E531F59ECDB51F652354E55232D0B4BEE7B2BF7BDE0EC23F62E62B35B79D8ED0A1E3D2DEFD1E48C8B20867C8F3C4803910FE69340D79911BDF29075B30D0A37E9A8B304DFE4A46FBB169915142B0692D1622E081EB39D766F40A09327DADE2A816861BDEAA89362A0B41BE0CF6DBE36232ACC3E8F7AE09230832B93CB55459CA30FF1DFBDC91A49A64468FFA8B45BD88983A0390E8B3BF64E457DAFBE7E69DB0412610A1111AE642CA55ABA2D5A89D6DCFAED1C4F53072CD6D5DE43D7CBB4E70F8A6083D5C0D00A67FBDBE2B6583BF11D23F925091E22069536477E29C09D9AA68889CB1980897699865E66824F5458AF8158BE4C485D7D7E06ABF9972A71F642695EFAFD6E986A2EFD96073099C6869CCFC862C44F598FA2CAADFBF06D7982C111A584FF2918E40B6D6C58654637F86A30F2774DF33104A4DC34FAD79BA8D08E43000B8604806C909E28773D385F8420A1A65F1403047C304FEB560136D0642CD639B26AD4E283B3F1A0E833D61C79FFC9D0801F15869F372D50F843AA6D9E48F9D2C5D46B437B16EE3F437859C710388578D35281ACB98A88101CB086419536126012FE240024245EC9811FA67B1BA628BC5ABBE3F4721F3FF649876F99F512276810AB4403C57F437EB469DCBF10B9D54DD7400E4837F6E196489EF7EE9B4F1D028CEA129146FEE836A1105C44F2391C7099D063922BE0547D6C63335DA84FDF8BDE8E29F2E30567EA957827DC736D83025916D4F7166E93F6BC7E45DDCC0CB31D28346613A66269A0A18F10D712982AC2F3E92F4B7258CA0ACDD538AEABB534C47305ECD6C101DBB5CF95D862B8FB68DCBD1ED65C0A6F833C4921C479E8DF173AF7888C259D974A2FD3F31BC3ECEE5C864EA0CA263C7AEF2554C15F985B90ABAFAF15A3ED24378CF24870F546263FBA2390ED80579B21D7B780ABB72A334F1270ADEDF8064FDA9B8C7BBEF2B176B6B0B931B878213DBFD4F3451098E9200F50088AC348DCE987E631F40A024D53EDD02E5A29F6D469ADB69CC10AB6DF35F4C226125952CEBE02A2892C686678F22F3904F882285BFDAA3B311445E4997D438886AB8D6243C09AB71C3ADBF28C299962121EB6F6DED824F7B3534AD4ADD91F3523CB9F5A4DF138AA6C23CBBC9E88D4CE91B0B52EB525E429A611F56E5B249EBE25BFA2D64545E4BEB80ADD70F817BE60F9380BDB96E0F5C304E50B883D773B9616D26CC92D97ADB36AB32F54CEBD7DEF8BA3B67F5704228ED554BC8E8CB7163720869EC0763C9EE033C24B7E478050EBD68385AAE8CC37E47F62BBCAACC2FDC585E89A68A5411AF319D3AE37BF2CF93D168CAB354532121D26BC6DC6E5F850C85EB4CDE2A909DB3588D40E10C2F40B8C450BF0A283F327B668849D928A79F1BB5214A82FBC24B1EC3925564DA08A9FB291560E1379B71CA1DB9711EDE9B0331186377DAF4389E11ED23ADB20E6579433F48E6B0B6030FA5FCFEB54ED448CEEA7BF1D0A0C7850A151C38730165FDBF8DDAD0F34A51CDDF7AD20A9D1D287B61AA690A7568911F6BA40ADB925C4E8200A7B531BE03A251CDEE74BBD9C79BBCA66F0A38335234F3C1FDC2C76395AC0762CC65880244411C80D923C77A60052A173A692FF94D3F512B5FCD725A562854596ED05CD12B7772D75B895729C8221D5DD7C847FB522DB9DF0993852FA145F10F483D826E220BFD992DA54AA768D7D2E2FC3A28547EA9C1AAA67A70B02720B1F3A86B7588F2BBFC5B8B46BC0833709C07A047C8ABC52043ADA457D0996D03EABBCEEEFF1B39D73AD46205D4B3141C185D7EF6919ED5A6EDCB59F92412E6CA85FA3510D95C1F90689ED61C638CDD890AEB728B38740267F5DB56EDD857FE2D74A90FAA41B2031B290E07E64B50E9A181767FF41704EF8E6E0B5946DBA15F784DFF6CB93374F9125DBB89F549BED9B1D635D2DC056CBE63A915A6FDC7F2499722DD24B9EE1B8B8841D4A31C7470D42CE89277A16631C345B3E27F181FF797E2E63D25CD5800884C72FEA629161CBC6E9E6C6DB0E89F80107F57FC101825D3469E30307C1A0A8E0C126E271B22F3EB000BFDD005156ABDDB40F1E276CAA6A84B49D7CFD11203AFDBF91FBEC66E8463D031FB8ED32C0D24C8ED4481CC22F54B5CEEB3F138EFB5B67D72DF94A973C036F6C881B8FD3498FE8C2E8566F333D31203187E0A0816B4C5E4EB83BA0DEADB31813056DD89ABA18D01DB2364092B093D8365EEB0E8BA9A0699D8DD40285C2DF14979B3651218FBA7E7F2300DB2CDE0FFA733035EA4A4686A5286582251C30B55EED826C1A24B2A8A580030B6341B3C478B4DB8233A0B2ECEDF39669E3513FC6E52122BF50B6E8D15EC2345414462D143CCF83013EF410113B13DB41CA0493F5A9369FD5F2F1937BF009D3BBA6E8653709D7C1B09B7FB2C2DF1FDB620EF489816316B319D0FAA107785F737BA326360F6ED769C67265BAE4E90A6A30FF24194B3F7BF596549CDC2717747A3811971A6BD762843EAB2E9A3D4FCDB8B56B65220E9F1DE0AC46FAD865ED09EED33961CC4D031C8E7AF507AFA8D502D906A3725653FFB8FC55E3535674CB915BEA2D462B2C05D81A1E6A3CC48570C4B607F5BDE4F32B6C7C43E4F7F38A5A16A970CC00D5BBD4B4667F1535A3ADC67BE657AE4CAD1F1AD0208C2172E89B9E72978912E8BE0BA63AC339E63F885E64E3CF48F17CAD618DC9CC8E23B7DE60A1D55D09C85920D92FA8DA4791DDFAF27A28B5C67DD766A51DF8D2437BA2E5936EF1B5D3DA9290F907780EF68928EA264AAC10E00798CF2608FE53A5437034A620CCA71DF67751FDD3CD434844151970D7A3C0E4A998602B284C1C4042CCE7D274DE5709EAA45450AC1624A117204639408958E714B5B4570F0A746280FF4B0FCE184863AEAE9EA222FE95174421C1A2D15E8660DFEA1F838A5DC0E4FC2459519494173BAE76254E13CFC4ACDDE3E50A360945F16D65204C2B956B4BD6E28BA2D97C61013E5FDEAF87039C8E52CD6186755825EC461F66007CD6358261B949C1352F64A1E872EF5EAE84ABDABCEB40C86D16006C5F97C2810902C9716ECAE3CE5B8CA3F80FE9E8159D723592AAFC627A05B9BA405C031AF7DA35D65F05180141A583EF9DB9C9B029EE160C3B59A6799E388C1D43152BD7BD2409A7C7B2CA769F88666488C2DBB72D2D0FDAC4FC6BB7FE04957B7BE3D63605499A42A491334AD49946FA6FDE6B7D4AA7891AE51C2193B88B2F2470D4BDF4CE9E197A2118E2012C807137C419641476E8B465A1AE52A21B904BB57A7A2C85407E76A013CE9BB4D6F05D34439A9E7E43AD9FA2463A23DEB4E9C5F2C1635C3500548E5E59B0C1F5691D3881483D4D80AB140717735EFD8FF8E57EBF0D30DDA581F7CC89F3D1FBE93894327C71043736B86928E7F7334B0FB949F3C5674A37E9233243900145C51A5B1F6B4698D5E929856D11CD84B8B19CED64B10FA8FA7850D858B0C06E85AB5AC329301F144F2A06F07E8AF8C65B0399D28A0C0F633C5F1FCB371426ADFC3DA076754486075C34F6DA750BA516DA9BAE48BEFDEB75E00BAA637CC3F2D225A02795E89F8A8D763316FD3518D08EFA9819576BE5A54855172028D652F6411B7E62839565FDA64E744B16723D804AA5C6CA0315EF5C4801F6E737BEFDEBD62A19228B18AB6A3C32B2781CC44B9F89606DBB6D8C3688417FC820D0122B58E8E7F67C205626935AD8698A5D8ED0EA6D41F527855476FE4A46D45C748C35785C9C0C8A8FE0DC407C79B56DA0043DC7B859955A95C9373058C9BE13C43C3A46DBC8EA6EF1701F513E9A5DB1B785C418796C9DFBBBE89F78BF2261BF0092891A3E8E20CFA34DE1EC7EE2AAC0435441E73AFB9F05A9F3F0340B3B9475AA51E6C334F63F51B403111F367083BBCE859A83AF62DF5F73D722873909823BE2591B47BFBE01564681F3B84BE760C23B155C089BCE365205B6E22CC21FB1697366B135F3CF5A6BC3917F99E9E55900FDD4138EDB1AA0487E6AAB72A2B8245CC3836F85026EEBB07D1AC6FB3817D1BCCCEC59346B0F4A3BEA46F5D1865A5FE1AA9E4FB72F300DDC5774CD9A119B6FA2AEB38F3052FF529A00D71D7E36E69DBFE610B1C225744EA476D6A2FA938379BB09E76F6A63CD51DD54FA3304D15CB0E72E6A129E6950E647FE205241804B8EA7C3CCA0ADC953F7E7C01C2248AC36157544BFADA71CE0C4AA7CC1D61E99F2938B505CA4489710B13147B9350B32844551FC280C4474FF0DA044C1CF5C29F3DBBA82A10DDD96786A4B61FDB94BB10EB50D0CC34AA9F96133D467D71C77B4EC2F33693D6A3F911641DFD588BAB96A43EA29AC053E5C95CA472486B72D823AA3D51C6B2C10F1B32CF7B9BADEA145639C17A09EC2FCBF616E761A804EF1583685C69432915ADD5B0269E0A61C330EB7B690387573BD3934DF28932AC55DBFB2F823CBE5D62DEB1DECFFAA1F20C3C7F9E8F80EB5FD5D756D1FBDC517E4F0172BE0DCAAAB31F7921BFCE4AF2941ACD59BD65A5CB432187A39AE6D3309DD65AFC1A50D4535A5995A6A21B9F6556507DED6925E554D1662A68498333FE2DDE72E6D7A5C95363EBED07711954E5EDB1AE864391E4A0432A0B81D23308ED50C730CE6CE5D0102E5293DC191DC67517984F113469675531208E84BAC82CB8EC359FAEFBA5B22D0FF367506DF72CB72B81C78814E78AD7F2165FC9CBCFDAEF5F1A42E92A212B86B812C6BC27DFC51DEAD7C1BB334182A823C43FE872E7D1F9A7703249C960A0E1C61262DF2809B8A74991F8D85F4E3B07B139A939602FE71B7A1DFE104A093C81EA5254BBFD2A05A8AB332B9002B21085A94BBBC114D9555B542AE2297FA4F39342A1CEFC5AEE5A5D5B580520194FDC8934A3BC592E636C8713E118E0EDCD2C8420A4B432C9F1503746C2C23D8A06B25E3BD0A783CC929B36E246CDBF2B04466AA1F4EC291D6DB89DDAF1355F93E0235FDC5C1A429392696A663B22C81FF4C4752D975DD955474298F591F86FAF5BD5674D21E6F0D090C24C9EA820D8F0A02F79BD545259465837DF784AAB51FBE45212AB398D2C933904AC2A0E070BC814BBC60D91361938CED9E82CFA201C24BB31597916C48E5FDD956521A2C89D408AD76A6C1E36543D0A85FC7EE7065E4C90C62DF365E32031BB5CA05CF8A70910793F3B5F4A51D6935EDA5842E801EEF3729578C8F9CEB01E50C1A853075356D0F270A801E34DA2C56D57D3D68FAFF1DE0B0AF5D0A1DEA70D2100E48E1AB72135B24742FF79B0402FC9A451093B5BC70B272B19CA88D92CCFE0AF9A6CDE81947E6D233C40BBE9DFE9AF9AE38AD831CF25EBFBF8E158301AB6E24CEDF044103600497F753C763AFC6D5C9FBCC474680731417A906EF15F079F2A0B08CFE40279C91938569156EAC5E994BBC6ECD50D9AE5E270632FF59830226BA2758D84792D6246A3E45361CF0D8F96C6ED96ADEB09EBEC472EBB412CE1054BDFD907B595A31EAE1010B21963B23CDFCF337478CA96CB64C5CFCDD428E0360CAF18E15078687BADDB9F600DF10D503BD000074E347D05C615D20946EC68BE9A4F362ED3B2B184FD0250216E7A3F0B7759332B3427337AF094C83217DFCB3934C8DF0D62A62002AE3F7E16A35A41209815C588BB7FA1389A89343A9160BFB923B21CFBFD03B9E241B6F8CB6D7B129ED0ACCAE62ECAA446548893CFBD60AF9F2E3E650C5AA7D918E9EB420C1292C24D1A5B237AB36B66127EF6650DBB477071A4B5A69A13B81A70338B5092F52C8D0227FCA6181BF181B4B0BC04D49FE74A8C709466F7B0836AD04864322D4F795F24A0DFDB338B24EB2B34961325A914943C547B2F41F2A185EBEE77900876B79EC3D5D6F45A3C5EC8DA592B27D26D43DADCD89A8FB56AE9D7FB687C7DF7ECD55FF5C612E090B5E199AF9CFB49B1407A188115DA8F8F70E4B28C06D85AD88A10BF85414762669A37E03B6DFF25A6FD6984989E54CA99400C9051F1EE2A95942C8A5A84108A50BFA33D36D5C78C836A8EDBF02A45CD20C29F4680E87C3F5494882D2BAA605C7EC86D67299B0BF57D11EE1B0245AB86FDA48DAD9455C8CB78609A6387E8780024BAAECF38CD96C26C4387F91B38EA35F8BD777250048ED495CFCF8180047BB91CB775BDB3B7F5F8B806EF84730EF67FFA946AC042E2F7E8E704DF18AC8A881D64172C181D83CFC74CCC98C368FC23120BFEDF52C7EACAB12ECD08C3231C479C2D14199AB096FB5743DD0A63283700CA6934066472A5B60B12BC58678AA2C4FC8136087B731473F60FD5F8352296D8F321DC88977879DAAC637719AB1C23917BCC32AE8FAB3F0B891029D284A19671B709AF7BEF13C1BD92F3D8B29301EC2D352F932DD2E20E4D05877E58BA45AA33B6550911510D0DAA97DFABF31EEE44E4F7F98B0D31BED1750F259DD74CA5EABD4387C71694778A4B55E3D9D355D9A1E0C80659BC811D94887039242F0D9CDE4BCFB0DB3BFD565CD5F66D9C0C9C77C9C25CBE2F0232C27C9AF94BD85F0C48FCD31B69664CEBCCFD2AC6DDECC8D2D22B5453AAAC48BA4C867B1800616DD7D3BD00BF5677B343CFAAC0B6FF763AD3C43E1A5F39F7CF24DB23B2287C7C1F3BD5E25AB41B0204D340AE63E9E788E0423D936DC16D564DD27613E03CB53CFF91260F43997991920BF054BC49DD76FB323291DFC476258D9138C95491B274B9329C403D07C08C3589B12E3374AA81FFC675FBE592FA49AFADC65DB7BA711DD6DF50396CB57CC09DC91A13A81A17D87819FC1E1CB4B7037E14EC698F75FE9E9836ACDB7EC67517549182EA1D00421FC482E8ACA4AFBF5BDF7A71294CDE81E76B1D18F6E3072C1E56007D1AED87343BF04521827E7FB58B72774DBBDCCDE86FB6D30E7F9B07185D9A26A927A3BB6457F34D09719C13F33C2E5437CDE8037822471306C9036C41C8F1604A0421D7FD4406FE8756D5B5C67BBA00BADE8A242A9999417BFF3075EAEEA85CAE88CCB47B0EB6DF0B519CF3E156C4BB59302A7B07E222DA9B674A27BD02F80AEE85CE1EB18660809EBF6C4DAB5AE9CF7A7BE9EAE60BAE3EAFE290A432E3F1DA7C4A9F0D8F88D9A2A441564AD238ACF74C1F5E1ABB6663F9629402851CA9604984436F2C075BDFD846D04D145706C72799F5777D6049B3580401471889603E402B07E61331420F7A33F274ED360A1A7F2050B59B6C5877334A7FBEF94444E231FFF0DF7E3B9E43CB4B0EBC50EB77084DB8149260E15A0D2AF1AE4D7F25BBAD6BEC0F136D588AD204A7B3399B31107E4166371A31159E3963012030F7F386E6C375F550FE51CD89609FAF69B78B7CE533C92FF81C608771DAF095329CBD7562D1476A74B7015A4601CF52355E9EA578AFD314E0BC25667DC370D522BF24BF80624824270BB210057B7D98E95D8D40D2A82A7BF2B94F16952EE1A8A890E09371E99FE4E9A13B16035F8E9FD054BD21CA7D026A8101AB68B1347D546F9363FE1C0C357E411856FDE104FB9F240872784F69BF6549B55D21610C8C52F9C30BB964F5DE9971061A59F82F324748C0D684F84A98D20CC20AF5AD16D3DAF598B6321A27FC9BA81B7D5168677208362AC531B4F70E8B9663302E2997ECC47A3696A5ADDC81F58E8DAB1484337ADC283FA02F5DA0CCB0E46B35742290AE3ABD09186098310A739A3E7BA7107FB07F873FA914F1749CE6B82408C9F40705EB8A33FBA71B8253EE3C78E5F70A167945414E16EAEC82C13C4911BD3EE91F9D09141B04A01AF4C4F04F83A882E2482CF3C7CCCA1DB43261BCE181F0C7E5DBC9668FFC710C0B8FBABF345BF0A6F863C410CA78D338BEABDA396B04BA324C382F2D90C4086C55F95C984F20A27956BFC418B1EE64E93676BF68E8A613782940687935BD3B5336C62C748F7BBAA1FAA1DFA128842AE150AED13BBAD53AE669A7152A9241FCAFF58780CA4ED38B1F1B9A523E595E1BD4B4345D8448D382E3C1276F0A354B9AA82F0D58ACB27894CE82929D1728E77619F9865BBD04BFE18D6AC51D3D45D53E2572D2BF28953D2F6F4CD420B2A104AA247EF08250C5112FD8C50E91946A45A5BB0760E25CB3E7810B45D83B3A192DE26EDC2A99716DF9269F69F5A38F923DC9DD17602BED7B1F04C9941EE939E825C9F94FC2A9CC03127DA32F96E9F359AEA982B38F12B0D83E287DA092EA95E39F3CFF1A71B98B6F753F5DF491CF3B462C974C725FF77F85968E4FAB9703A8F2285F5A6CC9F1E0C5CA867B4BABD93C48EB040BEA1E436CA5D31B48BEB555EEBFC7FF0C43CEDABC0BE9048A6D17306C5F001B568B4139594279BF1842CC1A58CC683401CC2F1B275EB573FC7105B8D6331B736A83F9B61ACF3B929F2B95E5778D2DD06E596E571F479D74E15833AB0FCCB9CA3B26AF6F3D9BF8852131110324BF7E91174D3D610A044424BA8C20A5EAEE663F8A277D80C3672FAE469328AA6FD6CC4571D356CA1F6F3E505A496E5BEC1FA7D9775BDF0A70DA8F861F4334A16FCEF60D50612ADECB5A98B6E927E8FBF9429D7EA4B480971AC95F12A76813519848DA2B712D5A5FFC6678EC79BF832DC4AA9D7319ABA6F72142FFBC28595387FA52DE536273309568FAC7E17C27C3EC0043C842602D923E0E9CC8118FB2D718F75CE272FF5C138726A4E5998A6D4CC2CF7B6CA18E7693416A2B7B49C7A001C7A01121DA23D80B51A5EE66A69E4B224120B8D6DF25D986AB93EC857E60E514FDB201C7045DB7D4C83800F05D57400285C92C60EA8CA7DF799DE14433234F9E19823084894331B559308720CFF59E7529C29962DE714E59AFC974C7E063F652827A14B30133B5231CEED63FCDCE31ADE7B9E1BAAE9115F4AD59BDFF4DBA4C1F04E1AABB0457502BD92845BC741A50F3B8A49FF2B6A08AB5F05E0CF67614753AF86E36570E078EF8F8F70569D60B48A90B279C7D93E14652F04D2AADF584AA7A137DC20D64108D29E0EFE47F504CCADE184E87033FEEF717D8EE1619C0A69A55748F7B02B3BD1FF343D66D42F75BD76F00E2E5DB9E1F5D8F1DA333DE5FF248F5C808BFB0364CBC6F0329841A94F5A9D5D3AD0CE0A9EB859ED6D593266E8B20C9CB5DE62630008A273371EF99C1060361E4FB664B5A1973AEBDCA015CD01D50318F0817EC2A063083E91D072963AF2971A7CE822A6498B5264EF40B2622A65FEC2929B3B0659C74D2615C0D36FB322953280414B678CAFD93A46C62CAF50EEAE27364D62F7F7AA5EBB3D8D6CFF5DC693AFE840142AD33057505804B8CFECC63ACA4F21BD2506FE0F22D5A1CC0C0216832ECC807A665E20BBF855CF054D3D17EDE4455EEB29991C6C510D57FD7683DB55EFF863922FF88882F5A43F58A3D2BD8365B32F0D2A26F5FCC790FDCA8D0702C2B1BE5448F6EED4A9FA8F39817FB7278EAD7424B6AB105D1505C968FB7839C06D5FA317963D312709D98385942A1B7B6EC126DDA2A4A611EB4C6670A3D3CB398D097D7D14EAC79F81B574FA6F5D6A301117B7377EB4CC449236BC74379BB921FBD04C2601B06D5CC8041368FB326F27C17A6CA694B9D6040835A4EE7D9A097B3D619B2AE923CAF39B52F92AD46AA8CB2D7654AD8A5DB68ABE0D5B8DF8C0176C8BCC7ADF3D5980A6C84ABF8DD1BF288EFD92BBEDA1B4ECB5C4CB15B3E9BF92E3A81342CA28ACB37FC113926C8304E542211B63EFF9063E1D94DC838E16F82BE4A6B1096AE8E118D45A75CFB581FCC7144EACC4297E5DF9905702767FCD811083E1DDE59BE4A8E676C855E4C112F5CAAA349148CE6FCE294A1FFBA91FB5459E2FF5274BFA15DB857E966F983129F2957DEFD56253531E8BB9C7B58C3067DD1BD40966DBDF799D807B55374DCF30AC0C06D9096CE4EE34C700179E1D17F24A6C93368A8DA48DB6624141E594D96F09797F80DC9E1E316E4C71235290589D02AF4360A3F1119757BC5991B549EC66E2845754A3CFFFBB275092BBE7D8C769BD6E3BDA6A9B29A0BF947E840AE5EA73E6302A4BDF7EBFD7825A920C701CCABBFF0335A7D62391CCCEA08EF814F73C88DA89F2C955FF37924E219D5D324AB0F1CFFA11C0857ACA5D8577CC5457F74B9D26BB8D15E28E23DB2623EACA28CC9DB76E1414D6040612C47C31ECA11327D6B20BB2A8C88B1C3713D168B4BBDF006DB33EBB9534BBDA8A3C00167391D98FDA952BC30AF00FF59BEE8A6B65562D849AFB812F60DE4019A14DFDA9518EB8A5BCC48D2E48C889F42FB7348B7760863ED09B8088AF9E12CE8028D68B4000D4FE3FEAB6721E49133351B2A90046EC60ED7F66DE448BB2B477C2AAB918281FD67C81CED6598FCAA292DC1517616CBDAB7E7C439C20974E596243C4A6464D1194F0ED5B6B106B1A71EBD71900F470059A02BF469195A3AA388B96E38D55A19AC99C7AE4679DA2008E86397099E2F5EDD1356FF64433CDE66C7367BE509C3FC973A5D0097D1952157F90AD490C95068B8D993F8FC2A32E3954B052B8DBE8AB1F5EC5FF183AA0625B7808EFEB0090A3907609EC706C0DEC6CD8843031AA81FDE323D8984F7637365FD34EC33BD511B21E552E6E30C6C78E7742E169AA40DFBD1DC1F7B580D6FB61748D1133D2AD34028C6F7C809C9CE95BD11494546CDEC42E979F16BA1AF4B4B5707D0DB5FC9E393D0BD0156734935313539A3E99BFD5E475BD6FCF686D5339ACF3832C80B3D6E9FDC8C438647CF8C1D5046E855161C76E92BB7F624DD0C1367B2C9A6C0BF20BDE2C4522E5B94D504EB934E9E90BF79735B2439672914109AFB45B7B0377090BCEEA247AAB423265FDA265803B228D7E206C05E84D21EB0E0ABB406DF1F25E7BB10B39F5374C30B0BB1FD1164A4293646BB88289209B6A5165D0479BEA977A011322569983C9C1BD1B544CB0FEFE5EE0E9B3A9B8AA94C2BE5530BDA9CB3DFBF651E276386025C01E38C01DEF1E602292FC75D53B5445CA38BA67FDAC6E76B85168F70196DBAEB3C17FB866AE93ABE3F30242F0D9CB7D7293CDB52316D626E561EE8E07EC6EFA09D6432448B0B05C2BAFF124D3B66B972904B3985585BB4E7F82E9AEE1747BCF932D79399F34E6DEB9CA99E1C0955FB26FB0A42E9F8C8BFF57C9E9B1EEC1D055E7FD4C632BDE79CF5512DBA84375C358546EA15C91A676BBD281BD463EDC847B115BA9262ADE33D96B605FBD989ADD3CC7D07429037CD838F5BF4C7216EB2DFE2C162EDE460B93C97A7725556993E8E6BF2744CFA641E6AAD3924CFECC3DF86E397CACACAA2ED62E2CCC4A93372F6561C4B574ED7C9C422B5528D2262AF4DDB39984F37A9963C9DD11BC6D7DCB07008511CEC4BBDA403E4E86D8E3333F9386CF427F9D516970E40480C358F84CDD5B654B129710393BC3A1004522ADEBF582AC3D6B70A2FD29E07282C61841A157CA626A27DC43FC344CFAF3A73491850E7AB06E5936A900C5CF05F754B563179448082977E2CAEE61727054BA8C20FC21F76B180EE3C2E2750FF555F1411E989A18E0D54F3C256188AEFF5D961C73F1E8DC7662E22BDA7EBD3B28519F4E5733F6B8200F2883725596225D5CF5404D65F1998010F9387F5E5D9A4ADB83EB429D736A0407A70C31D81EB26C84611E28F0A80A9E72A83E244E0BAF92ECEEE44B8D37E3C94BD67B7049C72253E2D73DC5F6B1D0DBFEE6074DF813B903ABEA88C865231BE0254B9456FCB85D88E36B5B6F4204FC150F3681DC4610F8E3A160B6FF720842FEFCEA2EDBFA5DBFAF43511D5263A227212C87A7198BC50F7741BEF3FCC70A745C846B566E3CC3CAD41A9A979668BFC816708DDCB6D1E2362F29664D58BBB3F859224653B68630EB74D4FE77ED660824C1A82944D8D20ECDCF0E4C2F166FFC1AE942A2622A9D646D59D2522B99DD8B9285D82D3B733B6BCEA113B4626B8919ACA7F69456DB5396469B9E908F5121623D39B0C878C24DBD5045ECF842C47063D3E5FDAF051E800E28D6B3873D4C65FE22352A85A0F33AA6C7EA65325AA6715C3C03C9BD58BBB691BB3400E81BFD1204442FD7C8510AF176CC8C78DE550D49D4E31D20305D597C5EA82D02C9DC6B19E18ADA858A195D3C5AA65D62F199830698300B36DF617EF4AD539E78E05A8A4E8798AA8DB3DDFD833FD304E130086B51C17A4732CCDB54C11621046AB7246E716AEABF00C278BE4A7D5BD6A35505AAB80FB671F8B2EF318E1F7E1335177C20984C95F1D12C070893170D078D45F423F798802C63244F6B69774ABB0CF0E42C27D2237F2278D0386F4949AA0C3A47C0C5AD4445D3071072CF0A411D7841B18ACDAC779D5143093F1DC6B81C497AF1A3BE5D3D64B78DB939BE7367E4901678B19F11C9564E5254CE43FAA6D58FA9BE47FD9B896F0F490A67472CB6149AD8E138EB77E4645EE807026C50C1DA84029C61FB33F59A1891390EC9DD2242A3F5454C723A1C53C917CF7C39B3409C58897496D51452AC1D6F99725680C2EFEFBED4C3EF23D3841B17ED2FB7FB61B1502085A57DA5C3F6954172C7925C2850369BB35757F8DD200CE6150FB7AAFAE260A4C4FFA3C879DDEC613F8B34D0922CFB3CA68037E4D2C948B7A13B4B9133F0D2F8EBB4CEB6BB3FA5654B683EB3C1B5962E2BE65EFB333B04A7778D603005AC2F66AEA9F233DD0BC6424AC516030A1082A6660ACEF4CCBA47CE3EA6D7149F3BA952A8F5628B83A2566EC7476356F7B0445C88B374E0F593F1315D6000F1507560454C30550C60BF9EF87844E6DF557D925EE452271C81403E7F31627A715F25570A1662F542E6D1A25416EC83B84CFBF364C9691FA4E9025DD1AF88FEEE603C215E9DFF7F34BB1998A1BCC18F0A7D0B129A345BF880401C1DE1C6EB066C96846B7EFD613A311C83D0E2C7A7BC1CF2D41D3FBE1C96CD6A853B7085F3F31282888BA04761CABDEF121481E66C471629E966EA06F6A01F8CC88D96364C3FD63FA65BF83F2941CB97F4DEC78C1E4494443B7BA1A21929164482A43581D2DA4AD9943264A9294390658B480EC4EB38A142CAD9C0963AE557275C9E0E0EF8B3A87DADB851279A77CC552A8B362EB1B13BE6DE642330EE62155157450574682C9567E6683F0BB3E29BC7BA5ED65274B349FF91E6B567C4C81B83EFCBE5B264FC2880E46333BC23695EDB146C44608154421DD97B1F8FE82801D77B7A192C89CDD847D38132B7E45E7FC4E0237FF0D8A75319D2AA0C2062C676A461F66B60CDB9DAAAF843A6C30368541A16E45DAF33020EB9D7E56C6BA50BDF48EB007EC51D052CB65B691DDA434EFEC0AFDF18822E49AD09B398D49522F9237F2DBC0C0244014BDEC3828C4A4EF313AF50F2678ED983FD80D65C1AD3A7848DF33CF9275358EF9C3127B7E6328618B01CA4A6DAFCC66F8DC84F3B93655E0B652C4B7B325A5D32F80E40B5D03F91FD08AFE718D52072FA6F291C5A80C93F5B984FE5550B47C45D9E7EA9F34D4BE524F9B99B8FB9FDC031318C885920C492D0413FE4AAB2741EB930B193FE2587ECB1792235A48970726E5C471C8BB1B607DC542BE910B29D9E1B4C59DCA5FB9FE41BC81830ABD5E49C44A94A85B3ABEEE623C70A374AD854A1262B50D258B7D531DCDA24585B6D5A06ADC690E899D7EBF25DAEAB994864E0738FDBAB2036AE876019185A60393A980D06DA411C0A3A84888B3A5BFC674E6AFA7E68B6B040E103F610F2B3F1613B38339CD352F34B965772A9E24003EE85805144CE157160F121918AB74203D6F95E5D3FC2249F94157D8FE09DFEE20F9BED97A059338BFD285D433189D50C5BE49F4EA0FC828671188B4818AC9D62529C47ECEC35DCE1C0F424B127C43B72CA1EBC0205F75CF49CCA153AE7FBC933D295AB3DC1FF55CA713DEF46713DFBB1D60A3B340BECFBA923D2047FE17F0D0A189C57B370BD3C697097E5F802951F73B1BB5A3DBBD1322CE289D2B127506CB796189B076A4020BB6F978B48BA61DFE87B964421AE151137F94BEA0BE42075CE7B1F0F472CC43DAC9FB8D4C747E459F7E5CD2E419D9599FB879F41CA59A9A5D83D67918BF728F8BDBBAD56FF321ECB6D1B6E554313432C8E0041E8ED33470EBD5CECBF8B5936A9843D0AD894963295EAC80008D0CB29867D059CD0AFDBC8AE8B0BBCABBA80AE290024022037075154634556DA1F13922741A9B5EC4DC23DCED5B712BB89F05EB038056BE0C71825E6CC67789948D5A38719FBD440227498354FBA7CF249D60FEAB4EB215778E57CE44AA6E631108A0BC9F4DB5B5F23F05CC76EE31EC51E362ED2B696BAEF360AC9CDE0075E23CC8544730CFB1474FF60D83FBBC6B2A880D8B4E61D7EB7E5D7D4AE61DBC0DF4EF9CD0C33F5050ECAF925FD424C847F0DE96EE56170829407209D3878BF7FFC0956C547D0C5595BE7F0B9BB894CBEC3AD0F25CFEAB2EAFE15FD0F8A2552C108BC83E7A34863C8F68F690A97A693BD538E8806ACDC2028ABA2D5F4450E158EA86C7BC0B3FECE8B9CF5A63056603C18547D1B2227C10C7E5DBBEA8631C38C244A80508670221FF47AC29383845D12A353FE056A105309E7DB5224E05347D0E3726837A50C31F65524ADEFBDC7698F3D58860BE791E5A72F5134B96D9986FAB38DD64CEEE7FDE8E41B77498EE08CFDAF82E8F82A1F5411A8D3564858D57221C20C4ABBAB8F5605A8ADAFA78EA7603A0ABC1D5967D09D01C036ACD69A67B786C3A81561B155EB9FFC50B89871AEA53FED31F14E7853A26BC753F21154894D73A1CD1A85DC53CB66F1B26D502144B82311B67AD04BAF65560A14032AE137E6EC82F0F77D136C885ED9B9E5803AB91B4C7AD8DFD1254AFE0C22FE4EBDF0214CFBD1B16CDED22E8731DB577AACAE35AF66ECE3DB9C68EDCE70126C32EEAD223DDBC34F059448C0224F63B1FA0B5C43B7FFFA5E356C557B840C8C6C96175F8F7854FB8ED0AF61BBB4FC88CB67FFA553F323983934E7B274AD7994B99BD7C4D5ED7A746169C41441737DF7696DFD07D3417A32769A79D17681580DB1776EF593B063F30380D3EB9AC1219010AD6854B3706A5CCA912A231A826426C961BB15D65879CD8590440AC1D2C3E903FBBA40953113E6214766A89D64245D94E96C7936C4A6B7BE993C11CBA1C82200DA63D25544CA2AAE0E423091470074183C8AFD8CF5AFFED8DD65CE1EBEA553056E30C214F769155A5FA302FEFBF73EF1DDA896552037E48F5139197BE909DF95CE2EB440085F62147B7782369453FC58C4F383570201A3E6F014C0693621FDDFB40F662B8A599A70DC844129E040AF3CC581B041627A1442DB020B34DC9DD040A2D76113BB8E7CAA579A7EC465AD649FDA773F5C4835D6BEB96617E8032786F49A61EEA49AC170EEB940239918773004C2C2D15FDEE15A1046B5A6EF5734DDB62A5FD3A910792851854A7739E11481A964EE8DBFF31E38921AE7DF2C8A7C373232A95ED2BFCF16F8A51AADEBEC85F05A1B6B5B56E5D13B08BAFA448B10374A8CE474F3DD1E34497178F13039C5685D95840034B97A29C46451DD274735433C7A7B48CB29E036F24B167875416C92344E9EE1B5512C1CD8989C4C7B395B007573AFD24347A6E5CBC8D851D63D10DD8D67D3C871E0EE58C025FEEB7691DD0DC8FE8CB0272994F45E8346F6B67D75E02AFBBBF5B2DB57E6A0A8CE7A1DEA00238F0EE408C3E171DC75CEA55BDDDB2CF32FA9286E4B9C78C34ECF55BE80DFCC63CE40420D837969FD3412EE083B88FFE6A7DD4F925480966937D12059E7AB96A2E6CF271D9A60A585E05364C6C1531ED11B4785CD5C8C026983A86AFC852FA96D850AB25F97775E5F81FAB856AE2356FE435A28AB312592A7E7D0552D8BC509BC3142125D52A169B5BF9D0E70B861D178C072C8945561CEF025FDBD2C6054C33AB30B4790DE01FEF6338DC9A3FD076207B46130A11FDE9F0B8D2F6B7A147E39809F99498C042D2845F3CFA7EF91565CB0DD94C290525EA4EB5DD644BB73208E0A99BC53FDA72E755F2CB42AD0C5975723C8CE5E462A812EA3E678DE1B5F048C705C3555DBEF286841F33C9AAE70134A0D8864CD9FC46A6F57E2D81776350BC8B9F93D2E75B3E680F735A925D0E78A65485AC214359E75A70EC398F16E0767D99D243015E115A765C7B86BCE99CB7D6363048C488A8EED2B9956D12B10531B1C2B6BB1F36DA0DC14C450DBEDBBDF91CE0526D84D72DC6E58638CBAEC1AC17B0AB15CCC32CE4BF8DEEA9E2782AB0EA976C5B9DC7373732DA81CBE2D1B8AB9E21FA06746F96C3E3ED8E9E3D0FA84F41756E45D3B9D170C4703636F5015A869EA64DF019AC9FAF1BAA2FCB0AD42DDB16B6C6E5932CBE83D4FA91FB47C873FF2939E8995C0516F9FE6310AC09F0E23BB1FB7A4B834DA7419ADDF6E2CB67C1EF73E44B5982E9BFB9A0F9F9ED65A5932330E0328769008267F7D4564E39ED8A3EE83FE07DEA9327C22A0488D246E97DC7C785187A81FEFB9DA449A0FCD790AEF9A6225ACCDD167D3C823B0C5DC75948FB5FBE61D659468A4A841F32615B99908FE75EDE18DFE30188E8C18F24BBF86C32749AF2FF48F503A82247037E7DDDFC2A142CB7D04AD085D8C587101549CE9CF0CCED3B49BFBB5165654FBBA7E128A59943C3B925191EB00D6939B513EB03203EF1DEE74E517758A56C03E9F19A7E843546CD739B9295572703C8D2FE7E32B0A38D988FCA1A136C5F541B2B526E60DE14CB27508FEBF37D2576B161701E73AE455C3D3E4FA03F567F8F742A76B1CCC0276618C9AE386F95ACD47445D2F296AD037F5803D06549FE110CFFCE88815988CB5777D5A0CF6FBC731753F4FC9B3B5053725A85E7E2A7766958D858AE59D8C06E58B25B501B0F0798F714FCD6048A0BF625BA7CA5849BA81FB8303843E7BDE9068FD65365EBC9D7E8BD265DA946B6EC2CAEFFE0B9BDA2B7894D5CF2B08A83AADAF3E632A05DC6D4C8840A1D07F7DA07609107FBDCC6CF7C631467A6E3231C25DFB20BFD1EF35BBA20E45971CBE6C15F3F2A05C9CCBA6EC5EE311C157784A1435C3D8BA39235DA2BC478DDA4D21184A31DD0D60BEE8DBC953648570167FA3611033A93D0920429F2797954795961C780ECC6903AC658D6FD0F030CC7A006EEEEE3B7EFF91C0922986993D8777AD9DF63D2BF2C70CBCFB7BA08100F0967485DCA6C3183DD60788511BF0FE0BF479CFB6BAAFE4F5E98501EABBD2CF141802D31F808516A4685F4888517A96AA5F29B882ED27F44CA2260073D2139180B56103C7560407B24DCAD37C880CCB8E9FF4F88767FC5CDB029577966AD44BE3A9EA9A46D44ECA5DB7A7AF0F7D472FEA0181D30B7313C9781D4B106FEE9677E7B9C3A4D34BD705098E6ED40ADDA522E93AF22E671E683C3AB36A45A8191D65D08CD58B8F24230392835F9043638AB7B3E4F3A4215D5F872013021E037A58165D948A269BA6932CE64968071B39DC6E0B3F18A9381C4F4652DC4910917C5739C7188133C1D6B6CC0B755E26751CDAB7422B5C45EE5517B0C5ABD88E8596CDCC07AB3214C0D5CD9644C9108E020997A23D39496C773C8EE5784CC0FB2E92A238661AECD8BDFD458E4B5112A2963CA2B8958C93CF661C536FC4439B2C0CD7130D1F31C8AE653A9391E570E8555D5069AFAAAE6734AACA6C8B7B9A9F0CBFA3E2FEEE957BE10DC878635578B793BD5B9DD29A8B80146186BC28D221BC3A7E0928662AEFB8EEA1D21BF1F168FE2C642FAA1FC3FC8A6790060560ECE64F148CBDEAA30A85C209D7C05B0DF24E03CD8451FE4EED5C15D9CB202EFFC868D9831A46C323D3403F390EDA65647B776614EB1E8F5F6BF795CF3489D80A76A155A7DB5EB04FDC82C825BDB6697EEBA678AAA733FAFFD419C37B5CD3D9D0E7A7C95F054083F7DECDDAB855C29941B59EC8DBC9A7C9E26DAB5CD3F47B61FBDD7E5D3E65B1C5B381E1EA000EA3F32EB13EFDADF7698475713F1C673BB22A010D42F1CB466ED3AE885DE154BCF6A5CE44EF02A103214C66F31993C9E12BE6023DFD9007DF8A40972DBA5AF18B1F8495B6FF574C91BEDEFC21869AE9C3F26A1362871A241F7534D61F884E73B526290C78D202960E81ECA0A2200511C2B6CD18E62FBA80BCED8E86A4F03DF0B6B4A539E0A24AD7BC9AF90DE7C60F35D2CF6D06C2F9960B0E6433DC2EC01376A3291C5DE411709E175375826250D6852310636B970AFED047DD524CDC367CC13A5B0D238C725D228F3B8E48345F046C3562686F02C87F7205CD8E32236A98DF2F20C019A5DC06A3167B357C24DAFA0A3ACFD8DCD456147F93EB019FC0EB690EC4E0D901E8599F908FDA419DB0621818F652859FDDCAA9228A2F184F9E73654A7DA7FCDC5BF4A817B2D8E5945BB22AE367B6C04459559A3D774C210B60A1637BF7F7A22C6D3F8DDB7703C0A6C4DDC56079799C6566EAE3E7ECA080BCD57F8CAA3B328239362A113E3D89890BD20A6191243193145254B1CDC7619092AF77521337FB888BA709E6F8AC4C4219D94008A522EE789419354544AEDA8FB9132C58B5C1964A23F071789224FE8D8EB67779AC9038A62F2748C65C36F44B4CC82FCC8BBB22E1845E046E2BEF451F44D626CCEC23D30DE130C472EAD7C9AF254A164FD1A07EA88C2453615F4B93B1AECAA5664A8A2C13044D118439F94D77907B766A246BE3C6DA7BDEDA76216E5E14F1D08A9F5B131D72A66A7EA1E7DC23DA9170CC17176DB5B96618D8D239447E691E2C9DE962735A99C0546E7C12FD53D797EF24D4522157F9AAB7D798CD1146A4B822B4C7E39FE373D83D3E2FCD406E12E02408E6C825EB345F63FD3BB66CA8EEDB48FA0AC1515E133C2048B58D21442F5FB1FE93BD118637238132B7E1813634885155B3E16FD21953B24CBC3D98AA89112B3FE455D31B6773E6EBD52B55930F4AEE38EABC6CEE1B7CBEC204942BEDA202B678A1A0168434D107606469FE9242CCDDFF37EC5840680D8CF41A505064B55D147C2351BAA6C6B2883348C322B4A8D9D895365AB16310D979B06D3B1ED0D020E2E0907DC9DE54790A15EE2F7FFC398F0252B32BBE9C03212D46118E1F50F0755E7141788A1600310E24F5CA0D42C890E1310D26477A3D3F176ACC4A8A43ABF2676AEB1C6FC0F6007E3F09517B9393CE699EF2CF3A5203D592757B9D2DC0E36B3398E807AD65B0C3FC65CC96B540A809613802562B8E1D620EC593D9D87ED8299B406B6BAAD130D92521C10065D085BBF6F5EE4133D80FB0F615E17780AAB744300BB772B5E37714A1465A2557129F8EECAA9B26B8EE19392B114F6A2AE9627C9EA81CCC95A78A40F07D477AF4623F62C0F95CBEC45DCCA7A0F00401BD71370B15337C437D33EB1E1B73E1D4BBDAAEC11974284B18CFDD91B1598AA70E5A8E46B80698FE39E4EA2A44181CF2898ED1A0CB00643D8AFB262360F7F0CFFFDD72BA02E6EB247351DA760B7F7550A548E9FBC92A5D3B7B20004A6F211103047398FFE7426DE7A14A0AAA33887504B5EB5BE03E53FCF1F3A9E1ADCD38035E5FD0459B4A4AEFEE32B5DD00F094B5628C2D9743D14CF9AEA04F6490EE2A381709B394F072238DF41CC32EE8A2C0B6146F50F9EDF0A0B7F9D4ED8D14B70B9CA2D6F8A0BEC320BC0F2A0BAAF1C679D599B5E71BFB19A3BE8DB242035203FBF976291A79A177878698205047CDAC66099988D61A9C82E6D12F268CEB9877FCFB1A62643B0B05A647E21887CD18BBDEA4BCD29B022A8B2F96D45A3A3ACD6BC162B577D4260EA013A7CFC23F7A0B9287653F98423199E672E2311AF9A6F24A45DD487D22DB4BC2AF01437CFB3B280D7BAB2FD37B85AFE6341331C0D2F253E179FFC670CE7A151B5B1596DBB0A49A08D263CBA8969E5B1FC214AE69ADE31CBEE2A34942F369B4EE11F8B2657F3B68F928ADA90D6193A5279F2BB353799F2418331844089BA38ED609961DC1E367811D1FA36256D87CB4B9A33516365DFA5845AAD3184B9A910BDF49451E89CEC54957D7B60528ABED2E7E324E21956A1D0F5410FAD1DC47D4A3201ECAA6ED8BF219471B5C23B2AE976C0EE7E536AFBA42B3717C020C40F0B30FF2A296FD8B95750A7603A1C582F1F158987AED0B6A2567ADC84B79B12EC1F9F008E4CE05BF518F90091ACC30E1CDE0D690412A159F6827B58736CFF8BBEC2FB5A45BB567ABB83DBA0BA7397188F06C6E877BA3804E2832BEDDEAAB2BDF0EA3EDD6C4DC7BAD1733174EA30E3A7BE45090906E9DEAFF1FFF57AFB7EC77B73BCC2D9E222E164FDF1ED91F9E7728ECEF0EDB96DF2E7E1B051F7D70D2B9811422FAC2B8CEB7F05221BC2C13289746C4D020DF3CF0F4F4BF4D080F7BBDCE19AA16CA02B0D09191FD48A98020CE491B7A6D14AE914198CE1346B044B5819B3718EA35828489222127D035A77C1A9523D3A2B951B9C8EA3ACF89A86EA0081239C0F9953595DAB999CFCC9A2D6210C352E72C6590AB0DFCFFE6FD5FAB8DAC46BBBD672CFB2092CF880844858E094B7C4EC672872D14128F7ADD2237ECEE6089DF61EBCBE81C2E07069749221081DEB5964077B9AB8C8BE61AE77FE05127B880C869438A080FB3113377C075D721B5D4BF9DE3404014CCFF4CC7754139800B91DFEDF041791A8E07508307FE100D99B0BAA4B0664CE606003862B7A0197E9E5372BE6CAAFC30BEE9A03057AF8141C8CEC4A80CC37A97B8BBE4B6EC5C3B3FF6C32FA15B5FADEA21F492DAE5B75FA0F02E28613EA3813534DA7472132057BAFF4F7BCFF1F5880E3B4FE83A8FE1D6E61C0CD2012D977D21406F1B9A813FB799905DD9ED9C4F7BCEE2CB952FC1AA0B2B78CB081F18937DFB5BD52637F910AE0F816140129AEA4B11C3A819D1B146ED1E80725E23DDEC94074893F5493988600A874134CA5481AD431B80DA6E52982CC7FA2DAA32FB1AB2318E567D0F210A0FEF1B2F691325AE68038A00B6FCCB9EFD5437BBF372A208456860EA5731BF099ED775F759B9CCE2853EEB484AF0C68789941D4D324B1B4DFE909B5C325780E05D0468554F46B18F1A3971FECE26D4B73959170DB17AA5505BA77B10561DFF86260075DCDD62DC1C5F826D465C8DD3AE76B181F121EF28E4B74423C3440F33055D92E400CC89F0A6EEB2D8BC9015B5CA9617100445F7839A942EEF5B35A1AEB69A2F4F09010899065AA355D0579028366E14076F718EB791F4AF7D32EF96786C26665A1962C7D0F11066CC99E14B0DA71912C3326CEA4A74F86BEE3178B744E22E9B4AC9EB3E9EAB8947ADA9B92473CE47FDBFE0134A3AA67A59FA074A44293AE142589E3F5A06FE7BD94D7A4C1BDF49AC868D707747E44B325CA3D9CA76818273FDEB5D08F6520A19418C9192863F5F293F05BFA9EDEECE76FDEFD25FE68FB68C06D0CC4E96DD740037D373A2F9B0ADECB75BB7CB88303AA0B71511F6383D4C4B68F3A93B2163FACBAE1583A86D423F26D144CF7CD1B3DC5B69CDBF7F68A739DC5F9CB142D51472E383B979F06E6A7E809F7EBCBDC2E74462040D50036BCEB60F47E857A7F26F7816A919A50BA67267C90148BC152288E0EF4742E560C37A24C8F08205FCAB5C8C23D29F4D675D8D79D51C817BBA8ED5701F68CFE95D8F4F065247BDE82430FDACD7D2E693143B53FB51CD8392039FDA7F9B98E283714D1E9D385471B63039282F53E94766CD3CB12B2775126791DF31489D38DA4CB4EE44398AA07AD7F3C67A6E183C10F295B7A22AE966953543FD4C28765102BAF1B03EA6FA961607001161DC10CEDD98FB11BEB4892C625ED63569F143B61B45155ED83143FE688D41B6365B5BFDC9490D6AF3B48741EC3E3DE4312C3A6BAAA3138898342760E0CD207D03058A60F0B3336E9F71763D453A1020D27A41BB1866718E824C9665985971464DC7434171FBEEADA35FD55A0FC6B81897B22BB9E0951F34516DC3763B76DF6BE191DB2657E99C550592F8D1AC6A8BB0DB0343E14AB61B3DC1370FA893778081CCFC21E40D2E5B07BF8143C0D62446C1A823BE4F75077CF0AAD81E6189B6A6BC55E2E0515B466257BF1EE5508D9D59442A6E4BF5510AC136E7A3F6B183DBAA9C1841CA6D24F4F4E8F89D0B1D9BF678824306D8124B544BBB8CD74D1EBF33D9203896B9B6841F4D34BE2B5384326A01F59ABF6C2AFE282A43CDCACD4C355B4682E0EF9C84D55C7AE8DE003FE5C84B4413DBB778C8ECEE01D792B791F517265334534D70793141C4A77C0240649C6169FC9715C1C2F673715886216624818DAD3B2A5AEAFCA72E4D6A9A53129DBD14D10245139F3029F8DF066865EF0B4CE441D2D9EA0B1DBD41D72504E3BD6ABBA2926AC81850F56AC238A6C1CFCC770E1075FE94C74EF9FE882ED25D534E2E657E32694D4F517FB454D8433DD398528306A7B4438665F2061EFB4A2B242A5D4FA65050611643DE255AF342DE5CBE9E5E02844B9E022CB74DB2C7FC80A8958AC5D5CFE0318A3FEB28430C649CD1FDD90F8E565A7B5D6B3AA92B8808FB130B8B73CD2887E39F7B0BCA4B1C53C90643F49DEECF9D7B6B179A08E39F3C12434C9A5A5384468D3C526C87524AC8EF73139D5C1E8FAE99E8032A04DEA599A0FD6973096ED7C5453064D33334FC5F4D9CFFA84259591204C4CEAF845C5A84D64DC8F024A1D526680809D1D29894D7AB1D75CA7695BCE26B9D17FC1613710F79070A745ED5E072F000A34D6793D8FEB9FD034D36745EA84E227EE790394243FAE8D6B42B493857E21B89D328CF5FC404B50F0DEA703F12C41A088DA3434A1C819DB5C283D1A0DE25D09C97D232A611715633B67500AF440677F1F6D89F06E1FB0ED9051BAE7EB06127807189F5331B7F5F54E80D3CE44D9F0A53A9DC1C04B847D2192D34C434876CF3BD463F57766EA32A4FCD9AD7B15D79E90848FD010AA782CBEB00B14D45F6CEE45CD69C41A66EE035FD5535A03D101CB7FB111955BA50249CEC63616E824F8FA0A6671D596B35F90B8D65746B2EB591EB36A8B6B54288F65721189C1BC6CC1E7D82DCE573BD7DAC4961C11E9F7A01761AFA58623F30AC680439C2093B8D38A1DBA920C4B8506579D45487DC587D541C8B73DC9B82781D58DE7E9C54C587C9EE6A4BD22D3BB1F3D0B3C1746F4AAC230231A323F0CBA9DDF4E78CB479A157A4EB16FFF0EE7055105D7B1AEAD3F224633D6EDF97DBAE0E6D8AE2D2451769046EB63716CE696D39FFB9210ECF6A8E7F7D38091F49E910DC53B016A08DBCF87192518C8E3AD381495BB5FEC36EB0522C1C9D470C723CFBD9CCB3F48C8B78010E5E529B33DEC4086265E795656C2242ECA2EC81F95993EDF10E606FD72BB4D15A94543993076BFD0E359C22FB1B5DE6EFD8421DEFDCFF0F85349AAFDD611A5C194241C77704FFAFC941BBE19344C08FF1686753D38D889BBA16AD0D9280CD9DB731CE1B38791252CF177C387512589B5B5F010F9BE1E594FE5944599FA1E7679C4A8674BF9BB01ABAF22AE3C713A11AD5E0BAF5204D71E2E7CD406366A676DC3D4EA5925F3EFC3D5432CE00940D09B26B339DC69A36AA4C27A29D33097BD196AAE43505494B43E9035F9E74285D2F1E0C61D46232C774E76F89D89A88870B717E6F1800D8B3D2BE4A8B2FC13BBA521FB035F2E8B1826CD127C76FFC200951A61946664D3E05095B79A9825402BD361A8D74BEC1017039DA42E3FD63129922AC1DB5F2AB841E2D37784D9F377947AC55CBA1E555F2A704CB4DBB260D90A31D8250C6C78AB6194163D839642099189488691EFFC7C16EB463459C761ED70442D527352EF558092A10B84900B4732F9FD6FF897C8DF2CB07F58F1C80F4764444597D7B13F66A67BDBCFF79C92A08D6D62A01C5B3A1C8915C3BB536C2E1001AA4A88C4E1868E8174D6914550BEC4E7503072B5C8C2172455C6309749C317B9A75221AD87D6D4FADEA0157BD208068AB14EDCF9001E7C294BE39CD58C044F2BF818279053FE131877A171EB6D0BEEB5CB4EDC09ABB22411F5B10CDBB3EDE591E22AAE1654823D2CDD4EF0B720D07D07CC2D6A7D8D86301D01620996E05B75CE9EF6881885D8A26FF1BCFB828E815670009A645D8334842A9642C35AD6F6577502D54B492FFC5A590AFBF09E54FCAFC9A9A4A5D9D068912BB2069D977240AECB0AF3E19BF8477A1C377D51A11CE65955332B6EF2C2CAAA3F76D080B9D99AE06DE21DF26A27960CC9E8E89F28128B9B2EDC928C9B379094EFEC69824CFAA6F0428BDE939D077720C3FA30C36D5E4E8400C37B9EEB678F55FA558944E9BD723A6220DA49ED44F4A8650ACF122E22CE8617DE185D4B4BD72C58C6FF2580BF69CE09EDD0AA6C6D62E6C9A8F76112A4A0BBD7FE7E81CB4800FB14B28E909F27945DEF90453A62B121F6D0EAC161B043849EDF70BFCABABD85707ED2EB3F9F53CC4E4731A8BE5D758B7D842EDCAF89AC29511DA47551A3798C538DCD48C6532DEFF9F1C73E9E33C42FC6C52C626E040B6974B853F1A893DB203CF3E3D368C6BF3B536CA87C47B1E08F0524D7FF2CFE681BA75D021855B214369D8A8F6650B733F9C2ACC72510BA97C23C640D81029CB8FD0B4666569DE97E7F3F57BA2A82AA0562B1ED652D24D27211ACA6655DBBB8B74707FE0869CFE96A2D37F3702FE76F9FE904C27092EF3D27DDE37F39F1BF96AD1F357E7923C95D3113088C33DA40AF6225F661AB9A35DC7BCA3967BF0F40F2ADA3BD5F14A598604DF23BD92FDD2DC942C9B858A04074FC29B5FD396173245D701B4A77456FC429CF18FD0C8C3BDA9F3DC557A8823174192D3968295D2E5E1D15CCBA0B28A9EB8B436AE7C919441C8AE6E30EE0D0CD4A1E944D52FF52819CC9B07E4F28269DF7FD84892882FAC65EB8C6FEFB75A9BD0CCB8E01C38441FB513EF166A8E2701A71EF71A97A7BB0980BF5050A5F5E5163064B9E74989638A30960E87F869DD8F55E8A6F4AC9EA432129A6F100D4A161BFEF0E2BCB476AB4EFCCC51457F5A60904385334F457CAC6079CC9FCA4C7FFC6172F593F9A2AB04C020CBB9FE94AD2BE492A26EA4B13D6D12E9487487B5F2D5EB40B0409AC19005B402707805E0C5C50DEC807F536FAD69622F062C9D2D96CFE0058A45305B6EDD32D7141D335CD14194EFCECD6BB6A3CF7A74A64B2BB7DCE1C6A4D8F0004005BAEDF606E6FA42E96EC67606FC91D50578BBF613C9C461C63F636DAE935B9AF2BCF9CF858DE7844B0E91DCCB4C88D1642B7CD4FF9628BD4F5A9778B984E7212EA55354DE419C34B0FCF47E6EBC846E7BD7F80F4C67551C2F3EC379C16C27048AC768FCB5AE87C67CC8BAC2D61F11F8295130A44F6E6D776311CF67247235954E8199F749B992913A0714F9D3D5A5A049BFFE30AB73F5A745EF4F5D077896D03567B585709164C38D6658C4DF41CFD1776B84BF5EC2F8515917102CA39E1686CB250A10B44F151EE15A4F2B26D2613916ABF1DB9757929C52C723A4202A244C90DB433CB704BD14E3956A64D923FD2156A302615859B5CA79428575D66B4204AD5D74A0FAED1CDC4D1D307275F107DD770584EA667B7C4EEB398E2FBAD9FB943F193BEBBCC8F786611B95658A6189DB204150925B9893718F2F874BE7D972A472B7AFA8CC6AEBE1DF9974510999906218BEDC33AACB8765CE41C59C394493A422B804BFB11B984D3AE7D9021BB688D9BE6217B32AC75690C84BCD83DFF33FB6701708B2F9B87272C1C68D0BE18D5B6272CEAC3566CFB07E3A2AE98568CF4A49FEB5919400A0F9ADDF25FC16550CC99EF8323DCA50A460D9C11153C108A23F7FDC22F6583DA848547558D9CF5F707B9D18A9AB9114A27D91B0F90BFDA226E780C6CCF8FDA46505456A16E18062B89E245E61F45A943542493978AC38B18659C740AFFB82B02A8B02C65EE7D5A15C6DDE09F296BE8C6B3A3BC411AECF8939B04E7F4A91E3C96E37096BB544C89203A94DCD4860ED1CD703838E85BC0FD07B26487FBBBFC40FA4F4CED5EE1D5D91C44828420FD484C846CFDF53C84780BCA73B203889895A997698BB5313E189B035A56864B9D4C3F742451FB986A8EFD17B7A2E0D1E41FBF2BBBBB0168848283B70CFD0A50E47BEAC20793726A3E1E6856D11F370FA03D7DB1F49986DBC9E692A62F88090938631C2AED38DFF9949F72BD9C7D6E171F461825ADA47679AF7206240B89E9FB90920C8A97B27039A2E0E2B43C412755D1D7FC90D0DADA5D1B80FCFE724ECD961CDE81AA616FA818CE55B0F23A5419D8811B363216987444C251C681A2D1EFDF69253AFDA299C90D08AC551B4FEE01A4F31566292A991ECB014F9C3A347B6061C2C5D8A9176B4FB9F3F5C22F80E3E5166BA4C335555DB85921B7690DCB183D5B458971838103B5E4DB64FEB4AA1FC21DD89D6A070DD00D90033C4AB5B1CD6C90C26AC8268C965CC37FD964C7C4B5CBD1EAE7EA179784D23CC605F02E1C13063A8F98190776917BF87BB0C8CB2392E2983109344B8233C8334D04DF216E648F873E8982166D210D0E32108D247AC660AB239C935093FE6204EDD785D9B9871FEB5C0614F97767749F7A45FA7EDD744DE0440D8F94A364606E64B3A394B65B82B7D0C121CCA6E448C5431312000918FD9756E6E2B3CAA1C52663C50DD2F397CC7067BEFE5A20080AE0F3FC243E4876DD7C5CFD3DBC32AB96A3EBBE32CC727B4233A22E6BEDB6A6AA9228AEA0E647DE690821B86AD3AEE0F000896640D17804EBCF52ECFAA0A66FDAA6D9115D339A5D1B151CB37FEFF2E4E2B97A7204D33CB0A3142CD160A20D0D2D6137B60C530CB6E28A50F9C60485F69AC4BEA9C7BF72CC6BDB9270E6BB4EAF1CA2B31D784EF6B4A3B4706E371BADB014C52E7D3579017FDF63A05C2373F9CF71C30ECAFE09C542E96810391532F32BF55B0A760A5A45EF138013DA62492BE91D01B82053BDD857AC4BD26D2F2C6B43FC4A1F0B49F517E41710B83AC7D2B231E6B3D63E093D49902C9380234DA504AAAB47E2372B48C5DFE17EB59DCE0B993115FF9822B38E144DC504B710A61C9826CA1484FEE279000C0AC8FC4452CC3D1B857432548E0BFFCA494A9252B2A1B2152B6027ABAF45F1425E5E6E4E717BD1B23105D9F7D5649972A046A399012557833E7340176386E51FFBA23072EE85C06C047A0731166D3C02723CB6E6F86FEBFBCC89E2F1CAA68193F61ED01C5994F56D9F46D50C45A0694C5D46205B84D91DE62806037E2B2C58D688920CA115F20CC77374D11442815FFC50A178A7B950E6FB05E7F85336A41275B853767CEC01D9C9CE3A5DB181E3BC7983E83BD9965E3F23797B3A8FCF85A4396ED5E5BFB935AE438E5F9D0AC77FD077EA696BAA8511F1561395150BAF70CB70A37F0CE893710E0DC325A4F63252A53D466556A5FC9C2FF84140933D39B4D11A4C0F146DC21CE16232883BAD676A7D80A88125D3348DB2B6FE1EE4EAC74049974542592C7538385C04E5BE623930C58D6B4F0A1C30DB08097B64626582877519FFFBE781094AD45E5ABEA3F1EDE216698FD516EF7F6ABA3D1FA54BE621F3D50C2105BEE7CE61A441032FFD7DE9AB06A124BFE19607E52C52B3BC9CB8776775B138D581ACDACFE68878B9647ED7A52B671789105FB19CC0351BDAB2F7973DAF2BD0E5698019C545B51FC394F8200648E5C3A05AC2E9B7788D7BEF4A7C51A19D42107B5070E274B032C8AC5F5509207C9E3EF54631E10ED493CD40BC967BE7EF6A7FE97F76AD8E8E2C8246923F334E781AC3B6E4D83E9749BAD89960E6E2151068CCAA5857EBB8B229C69C68B479DC556F10EBE1E5E133D69B60E9E0FA1C1DEA1330D0FD377519A72009F39D73F2485F8C9EC941D2E4CB094E7FC0AFEB42B95CC1511B835DD9F39ACBFA36493EEF33DA245F7B4D12574F91FB708736A7582479B36C6082284959EF4A7CDF0FB5393C4BFF997B56B213B7ED155803D9DA4F34835DA1C9B2642F4249222AD5728D5833DE9FD0A1D2BC1E632946D37522261A851DF453491B2CC306D91206257A8D5C812A2450977E673C26D01C5C5B04C8DCD0F69F1DE8C20F8F5274FA58A6760E3C6051407A914B70977AB0F56239EDAEBF2FDF8890B19F7857B29DF5739BA65FB3EE16EE96D1AD87C64465CE27A962CBC7656834E2C23DD8D3E22E2E92F561AAD6CAB0028589FF924FCBD5C49BA2612FBA36E747E7577BFD203718279DB81E37D0D6599B543ED8233963A18E868AC320C7BD86940FF74BB8CA5E7A1FEED2CDB021B66C4A263C20C0634407E200A9CA846C59FD8BF66F4513ED459D6E7AE4252A86FFBB887327476CB7BD99B9CD0CA8EF25F357CDEC447CE25A4178843A2805DC526B82FC0BAB8448DF3661B69EE84975E1CE479B0122C657B6393CD29B33AC8F34DB24358DE4A0D1418CEFCC2CAD419B653D38FA6144E890BF2112736CFFBEAEB2D9BBD040F5ED0815F69213279BDE502F2AA486C71D8F2A2300696E20D440981768DF7B04E6FE58B509E976E9353C9714C502EA31F4F16B48683F2530E5CF1E5556A34002B678D9C5B9E63C6365FD1024FB9AFD7AB54DE5C4A72ACF401DE0F81DA7D99F7317BEAACCFDACD460563FDBEA582F02E3A40DE2890C4C276995BADE4B8D3C8959D82DC6E00F9A26AC2EEC21439EB93AEBC071FA9674F9142401B624BDECB510B997F06CAD88311F0B09AD0D846AEB414CBAC00C2790DC1D985A6242E1E584F9D80B5FB578F123B1D325D3B59B0BD1DFED99CCC314323D25BC340DD39D8689FDF98FC833A5EB06ADF6175573471A21A26150109A42D0D1E1542EBEC5174D3B8A30336A02A3FF709001BDE89CECA924290D2FA1C794A62D33FA42530ED0F559D520493E5B4D4EAF9BB1CFFEAD7E3700080E61770BF88021175C37EC8F4D1D663EB69BC970404008D978F87A2C26E6DE090A491168DC5C92780321A56475D804E1C8A889710F34A984E120D9DE1937854B5A3DB5AF30D172284DC7EA41D14D57A0DFA52010BC3427EE1FAD7B71A1E8B3E4D0964E0DB5B7FCDACE40CFCC1A3D7CCA5F870354F649C51D207F45AC217152BD68CBA664FA4E995862C92B1E20294A41861B0444E5ECE43F6655A7E724E9A2ADE2279C61B3A72AABD4AE510F0F7D06AB97D73E1F42E27EF26941AD895E963278C5C7E3E03B6C9D396874ADE506D401525F543BBDCA5CA17EB254105B31778FC203A706033234E6DADA6267C66278BD28EB1CF98421BC8E1B297EDE879C679553C2C26644F09BCD5E1A5A68599A0CF73A43256786DE3DA970D2A3A4A55ED19EB52BC95B82F9F4E13829BCFC2F2875219053A13953AF8769FD9A072C794FB44BCC0C26F94AC9A7469DFD885BA85094DC6F31766A38A256F104EC141E288743DCC854AFEA4EBFCF8E170D9DCAAB35E460780C7FB68A65BA6105929E1D1903CEB1F206116D8DA10360AFE03587696CCCA2B26174500DBDAE3AEB7F662CA2D079028FCAC0EBB03096C50B6A05BECA213B0A550F3DD9E4349D9AACBE05AAF9E7C97AD65B31877F8DF0FFE16E4236278555C58FC45EC90D00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%%EndFontu1`65/AC /|______Goudy-Italic T /Goudy-Italic x1`65/$1 bmt^65/AC 273 260 w1`65T g`650 0 0 (Black) 1 _rgb d`651200 -1950 (The technical newsletter of RSA Laboratories, a division of RSA Data Security) -0.701126 0 3362 11 76 A1`654557 -1950 (, Inc.) -0.701126 0 242 1 5 A1`65O1`65N1`65F M1`65$1 tsi^65t1`65%%BeginFont: Futura-BoldOblique%!PS-AdobeFont-1.0: Futura-BoldOblique 001.001%%CreationDate: Tue Jul  7 18:00:33 1987%%VMusage: 1264 34093% Copyright (c) 1987 Fundicion Tipografica Neufville S. A. This record % material and the data recorded thereon is the property of Fundicion % Tipografica Neufville S. A. and Adobe Systems Incorporated,  or its % licensors, and may not be reproduced, used, displayed, modified, disclosed % or transferred in any manner without the express written approval of % Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated. % Futura is a registered trademark of Fundicion Tipografica Neufville S. A.FontDirectory/Futura-BoldOblique known{/Futura-BoldOblique findfont/UniqueID get8872 eq{save true}{false}ifelse}{false}ifelse11 dict begin/FontInfo 10 dict dup begin/version (001.001) readonly def/Notice (Copyright (c) 1987 Adobe Systems Incorporated. All rights reserved.Futura is a registered trademark of Fundicion Tipografica Neufville S. A.) readonly def/Copyright ( Copyright (c) 1987 Fundicion Tipografica Neufville S. A. This record material and the data recorded thereon is the property of Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated,  or its licensors, and may not be reproduced, used, displayed, modified, disclosed or transferred in any manner without the express written approval of Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated. ) readonly def/FullName (Futura Bold Oblique) readonly def/FamilyName (Futura) readonly def/Weight (Bold) readonly def/ItalicAngle -9 def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 75 defend readonly def/FontName /Futura-BoldOblique def/Encoding StandardEncoding def/PaintType 0 def/FontType 1 def/FontMatrix [0.001000 0 0.158384E-3 0.001 0 0] readonly def/UniqueID 8872 def/FontBBox{-171 -264 1441 1070}readonly defcurrentdict endcurrentfile eexec053782FB021FEC740816BB693AC7B79A3D14B35DBFEFD6DB21F728E19039F75B567634A0341D457525B6F4B5E9B7B49AFEAFE2F553780A62A5D35D655C20A759168202FCCE4A647DE368573365026B0E1CF7F75A3811DE6487264D9B6C94EC54F36BCD64A25A36CD6540FD12711A4F7DB5970B8ACD3DF945AA0983373DDCB08CE1E8E6BB9A66DD2890592D23372DA2BC7F8DC53ADE0335755D49BCE08DF7E7506DD8D42190BA9618A7851A2C6612694DD0229AD4C15DAB23D9831C4ACE1BB1977894842A7454166AE0D2CE9681CB2399FF4ED4487CA8482A0E93D23881C7CC87F141FB57B10C93426B3BFFAD5100CA42F17A66C42EB733E83B92BF3868701868F9A30D3CD635829BD311DD180DF69D2F10F4EED0F29F4D52A729241E0E45D968516B2A700081956E0BEC81C9150B81E2581ACAF892F6125C2A532A044437F03875007DB0C74DED47501A09929CEC88370CE011CFACA2BBF8C2097B4F95D261E8489071976768366AEC48073BA68E3F9E2718BD8A55AA553A1CAFC7E366B3AAE9914E7D1B9C81C506243AAF286100B03815894CF3CAEE58FB674E208D40A0427E39D10059EDEAF1CD987D084BAA7996AE56B990149FA00244AA377E9C9F388A3837F3260C405B4D4F560F0D0E8D81A3152A488AABF4EBCC655FC144284FD1076AC830C0D3DB021FEB31CB9CC46E8D4C8926D27F2AA1AFE92ACF0106DDC32C25D11AF67DB43D07FC43F029EA52C4AA1A5D92705C26B6C21106E696A26FBC3F1F25B38E2CE4E0CF42A1C68CD2083A0EF0F78D77AA26BCE0A45136AD8AE61C3B442BA69297E0D4B2B0968B8912E3D63217C64B35242A24D72B0D75310EF1B0736372A29109A13ED3694518496127755F12B6690837C46BF86CDBF1DF043CC22110D064FE9599D309CCB9E76A64527EA98DFB8841A515CC8E8009364414D2F860795E73F4361F6DF3969BBDDBEB027193BEC57EBA934D0967F6FE72419A745231693E1446106FE77856C2EE75C49282720193C7DB9ABC3DEC9016E62E4D3EC81125D78F9A11ED811E9D55336EC636D81D4D10DFB5C510344B344A1ED8ABCA3C10D59B618374B1BD7DA9EB7EC56AE6A24402E9E5A5CABEAB66D5C4320EE8B7FC311EC4BAFED1967D68A327D99C9372FE052456B896F2A07ACCF1236BB34D6866F58674B37CB9FF006557D841EC9A6DF1F8A432015A59F27E0DB45EF77C9C30D0ADD20DF13C7EC6D406B3DD8A501B1B5BBCBD9C670276E7FFE389C393E990F6D84EA08B993D2CDD890683028C11669EC7C7236E838F54C7A3169DB27A6906056FBE42EBA8A912D35E162F2DC68C29911F793FD800292BEF7C0935D852DA91ADAA5769E6F3ED733A3EBFF13F19CC71F314AB7AFC299F777EE201C946D8B5E69AEF41CFA8F527B91B567B46F519B9F7DB2511961DB34EE0281A56405FE70861F2A6ED7961A003AEB114F54342E6F7BDB63EFBAD600B3CD5F4E11628BC42C2E2AD19099A2D64D6DE2AD7C1EC7CBE65B75BA703FC2722F700E13770A8817ADFA7AE017234ECEDBE2356ABAECC25EC50FCEAEE00BDC56E1D19E17F544357F1C3E3F49876EF585879F73B384A3F528D5164DBEA3AC731FCE81ECB9643889658A54D516705F5ED1CB245D42404D9C1D1E9E9414264C06A4DC194D2976E27AEB8B9E588DE0C6CBDCB820B75BFD394267CE0604F93B333F7946551955D1BFC89A8565D4B0BC80BA9105F1B62D655AE21A4BE09784EAB2CE3F53AB129D59000889412F86706E039FBAF39F94739C514452C5AF30E3061F518EE6B9735603FC9CFC724BB8901F831F5A37E0234394B93327501BE0CF48FBB40B1153E8B3BF8B312E9576E25EFB03DD0414747979C5ACD8192077ED9EA72F3856F96CC867BFB2B550ADE725EBF17BAAC0AD0A0D321FC39EBC71720A72C9D975235C8289C62D94BF4ADDF41B7165D0D80797D96BDA5970C8160160A42E4C3CD348D9C2F8385BA4204787707795CFF296B8D12A48A1F4DB1726740E0B074A232A52B4EBEBE440B9B4661FABEDABC6A3319CD0000DE618C8C032E596A4AC5CBED20371F03A2C5CC0843DD806BAF0C8681A1A60EA7E06E94C594D4966DFD441624017B7DAC8171CE3B3FA8D41D112097BF7C0AC92DE422B739B6572D5BEFA613DCD5B3BC639F14B5F502DEC16E24B0E0998B0A7BC79B211608238F604E828BADB0C2D94039BD08CEC0CA072DC5218F11B316726D0E66ECF5722743E02D6F0938E73A1FE54925026F5AD245D6A34A92AC8DEA57D1B7A04EE12CCA80B49B81AA12086FE193C90728B12FB23E176F05A6F0E431192C0C9F6D2DFB3139352D0230749485FF88038F4C36F79104F01F928672AF8E79A7B39B432EDAF802290C5B34341CC1732632F9AC7AAACA58FF7D169F5F552777ED4B52F09EB4DC23F158FFE415CDFC44E1670F295D1DFEA4FF900824C87F570AA6A1A7C524EAD56DB2C61DE329BE72DEF7819ADA4E69B1C5C5883A9EA15131D4ACF805AD0E674C72977EDC8301FEF4B26A32409D58AF66F55F04E8BCF45A09443AC0FC51C16896CE62D3E940621CD05FD0657C2500E3B555523F65139C39D54BF08D4B42F05882F3B0304A91E9DCDBC2C634233DB5C24108FC0F3F70F5481EF52EEC38F4ECD406BA10ABD25F7DB49E35429827C81C6BE61492080675C32175662930CFC34EF4F8CCB6B5CB8833C620E67C797AE6631EE7F0012EEC388C326AAAFBD8B62F28A5D3AEACF5AF8A26D8DF342EEA443F7FCE4E1FC505D2126842AC388F6993C19D23F6ACB9E3083E20281D9603F6947DF092E132773276BC13716A79E875D5009C27F31B8DCFCFB9C2532E45749ECB5CB968DB5B1379592F1D2934EDFC2F6F567D79C175E8787E78C3E2D63A350F532087DBD1B0578496C9901BECD1AC187E10E61087005A3506910AE5B1A9356A45B8572E9CEB1A6CF67EFA90FBE91D5B2BE81A2D6E57B24C3BDD5CF5A01943F34C9CE70447823B6F8712C408061C00E3E35D684464CD4B29E20D27A74180007F6CCFA357146E0B98927E538D7043F38212BEA6534D9D4BDBBC9FD28EBD127BEA807C8DBDE9082CB9709F68880DB8F9767ABBBB7DB4BE06191C9C92FD3672C6AE72AA71D6D23C8FC4623BA1EAB57E310F3220DF96041676B4D63A9852E7F642C4AFEB7372B5F2D52A45604D17CD2FFACAE3089F25F1469B2FF493A53C30860F22CCC9BDE79FF46708B1EDF60CC79D0076B2EDE4022CC505BE554EE4E1688BBCADEFB61C52CE65D9A8E4A742987B2FA419D88E32B0BB0789A0B813505FC8155F7955DB29462BBFA9F54574EBA4947F7726C499CFE9719468FD4888CA174FF09DB11D39E1C3589879DC76C48D7902DA3EE54C2B35E98EDDD9FB24BA1AD7BD6FE12F6F0B52BC598D266AAE08682590F7C1A5F0FC947C4D9CDED16BD0C30B9E194FB7F215D021986BDE118BF99CBF68220D962A381F505EB671E0BB98F07D8898F29EFC9A77A9C46571C4F820BC08558456E6BA24C18BE4C20B791804F0D67526FE9A7E30EE30EA1C3F1079CE935AF879A3385FCE5A50B697D1441CAF847F887FEE830AFB9C24151724BE31EE5916753B618AE2BEFD791C4B2462AC5B54BDCC8D947BB5E954CA9EA2EDC1F6B549DAC91B9017D57A794E4B73F8E2AC8C939FF4243CB6C471F79BBA308A6F67280D8750B1B985791E1A1F773BCC7BAC5F87330BD6BF8B99D2E0064EF10CC7B1E1EAC3D709B73FD6A896E4EB969633817C4485115E498BBA133C772DBFD84A05DD11CA2AD89326C2E8851AA30B71605277551C024CF518268F0B406CB1ED9F6CE7B594721DDD837AA55684C35832DDF86F9786D1D16FA85D005776FA3E34B91C08794089BE8B81F0A54F21E779790F91E8FCA14DA3354467400E2599ACD99269E0B3076F24FD824A1586C7C3F73D2A98CC4896B3421C923EF1254822CB45534A5039BCA7626B8F92ED65E86601369CC89C77179D22AA75E1578CDC9898E7D701D356B660308360D9134CDA041D550EC975E8EF920B935C01F38217F72A7F8CE815886AE0E025B8B0F8312082FF7DFD57D62B5571919429144410F230FF021CE3CEE7872BC97D992D830DE8B991D5546EEA012C7827F9286EB725D781AEBA0087C5DD57E35AED7195DEE9E8FFD2575F101B76580B827DEDD73B0E47B5C16EF5F179B26E6BEC69CE370055930A06670467477357ED75CEF800FCEB8A2D42CF493DCD4B48CB4CE005BA86395D82A6F6B4DF34237B2BF89AE9B47C5B589BA32D9FDEE39A4384B227391A361FE5F22CDFEF5DFA13FACC50AE1BAB9C1547A45D9CC0D2BAA7FE2B2D3153434C80EEDF52D9B8B77A69BC7580C4ED43A11590DA47B08679768DE9A398F99BBC5883E2741BD603F271A9F6BBF468B42EE988B5C1F83787D6E4E92F229F69509C88766F9A6306A09CA67A956A1805DA0D3900CDDD6F55937A300BF9079F45D87E6CAD09AD384A83F6C5E47ABF545B96657D39EB34C08E7F32D7112D44D9AE8114FE5B4251C88E56A03556A412123233B7F0C14985969F3191CD03E73203AB0FF246D9FCE9270EA61033EB31F4264CEF23F836B2AA1A7873BC433DE27C4B389F7F88147B65C42938E25FFCACC542CB24FBF8013CF0C05CEDDCA2A6CE8B9040398D637E57E92655791EF0AA27D9E3552F4EB126DA163CB067D7F24CA8E3C2C7B2C786EC6B2BDFBD9958DA6AEED622BCA8E7C53A5A75DCDC8A7A2EC65113239D4E9B7F73DC2172DC133EEA03E9E6FD21DA2090FE986E060E261A3DE0BBE05571FFC7167BF754C6957F8DDD5E41ABC54D65043A2C40F8A50E6CFC6B9CBD493853D069163EFE84E4E10F210662A6863C43AECDA27355E70F8B50C4BC5019D45C5699C164694C1B7FDFA4046F119C41F964CB12B66FF83A201183E5D569E9DFC62DA79E87BF71E1A4A1EBE8B76E0070EBF5C5D9B13A7743F8782C8BDF962ACB61CEF42414DD5D158403C00B64D4C59A0A22756B829D8B1B8900255F75426640589F5C14C07BBDC3B85AFD465CD5A6345BF906FB300F5BFE73224D7833966939AB475C107F031645BFA4B30B2A6D585CED41D852CA124C4458EC7AC7B84CAE2D5357F4703F703BC9DAE8A12B11FAF7EB2AF0F1C8A68A307B7636EB9751E0214097398C834484CC3578C70DEAD4D050F595BA9F8929265FEC3D502C09748BF6D20CDBDE61D988B82EABE66FDF8AB336AF12541B64A77694E5A48F9FC7DC4620C9B3C9CEDC20F966272C0119AC29D1F25C7000187340B802DF89578DECB05AABD245592FB8EA8D1EF6B4A1B238BC55BF505873A19988774EEDD4DD903A942CB774F91F0B5C9DBC067682E47DDF7E483D1F9B4799EAFDB40D8FB2AFF9F525A19CD0BB69EDE0C124BECC565587F5B34063E50CFB986B01EAF3BBAE3401A501E024C89296B4B62C30B0B509757603591E8A717EF82B3BE445D76AC8B2303537BE246A952ABF2CFBB28F6DD3BD44BB9F79B2B01C1F12A04371EADC40120C5A73B4773FFD6A5B3A45C2AE7B48CDB05284DF0152D3DB9960299F95D7A5619E3D727A3276009C2FB114CB9BE44DBF64AF948563EA59A3E6472AB5E04B1F669BFE87E3B4D7A1F25B5C8174934CF21BDFCE5C30A80FE839D3E387C919560C05D19E98B9CF0A1627338C4425C08B81A8CA1194D784804EBDDD91CB69EC1C157817D6F5D7B9BE75842F99232627D8443CAC57D42E4CB3F422C90CBEA204623B98752E19B80131EF6E267586599045A18ECE15A792E8426BFDD46C29906FFCC4E07648E9D067C053205C1112B570F744197AD65BCEBB08901E5AD36EA88D0B9E77EF80DA8775B7F32658D374BD34396E38B37A1B87EA4FA1593E26790632888EFB39A3C548DEA41F6ADD669AFF10CF6BCC281CA11D8023A7F60DD4DF49863938C18097EBA1F260B1078F38D72BD2C3F76FF6CF49F3E7372C962CD3FB0755A2DA166333E37DAC2EC448407A986BC82B7B28472CBB9833972E2E0C2C91650B1E140095E8412C63E941BB83B3C75151D6FC2DB7B7558F93F3D067BDB207D7CEFFC882EE19F4260FD960F5AFE8A6C3FF18E73E7BAC4613F5758F81DFDE098DD4478D4C22D863881D1B91ADEC56360BAAC0339545E4F9828865DD1F7D4236620DBC0396C41966D67ACACDD1280287324DB4CC0DDAEB3800EF82AB53852A5C5C90B5FD00F830FC867917DE67902D0150EE7EAE053EE9F54C462574FF117DED12EA898AA1B44E4A55E9CBFDF4EF39347F76028333A410E8B43A7A4377FD652C8EF08475985F4FB0CB3CCE4BA2F41103DCF3ACD701AFCD4BCD91B4B10B1D42C4557B650F014F024DA984AF3038CCD2F9AF8775EA798DC546A507927A6A90D2E11AEFD471CD004FECDB353A138C6A91EBE9B7E306931EC3FE78EBB31C05A31C0E975BA0CEC0EE5378295293844567F886BBAB05823C08F37F167EB3D06566CB71E99B04993E8E9548A5C991E3EDCEAA5AA521B713F31EE76ACABD42E8E9780022906E74245CD699CC9D8EE9838BC7CF1B5788E1A6AFBC155C25D03C200F400CF6F43B0F9837FBE1B4CC4C760FA968A062EA1FF406DC70860DB6369B811471EB60FB398E08FDF17B4E9E410471A380C38B42BCE1EF5CE7CE9C742015571904C06E7DC546E679D2BB894446167C27299F2560DBAB74004A66184B33399D6CD572308E1FF89D1CF4CEDE7E73DE28F25BB127D0C7E78FB9F15065CCF3FFF36492D265A7B2E11C456F2386F26337CB2EF6287FEA3781E50DDC619D3C68DDDD10AD660A2F925868F50317A6DF8BAC540DB2371F4CF24489355D530860BC1235021B7BE97AA8F8A088A1BDA4DA59016FC3B861618C581005B23341ADA66C6225300D0A369C03C964E13829931EB6B3407A30349B1CBCB4CC46B5F4F4AC5B4C769BDE149EC54AEBC3F4A3AC715C699C1A78A031CBD5FC78F5847730B5EA64100805EDD3D288F593EAD1ABF08217A801E3A222BB22F6670DB35CA24FEA1B2D4DA8C0D10C553C253CA45C9418884F40506EAC8B5C45F92E8E4344AB889AB0DE93B15D0A024625B586162CF01C07722A026B7C67B2768FE690F942DBD3F81547D041F30EF02E7453561F64CC71ED95A850863F18980309B3F9D69ED01FC5A86DD18A20919CDB469ACEA8C8FACC1430F370BFB4D05CCE4621251A2B85439AD1E26FE176A3BC3862FAE25B3B2CCDAED881FB8F9673EE94181D511B28272C6576FDA492539D1E60A1D5E05A596008AEB0AA2ECBFCB5D5AF0507F1EC3CFBFF44BF06AC30D09673BF799D2B65F3EE7DDB6BDD30A4598304EAE86730478AB56A966F65A4671ECA1217005A74E37B7A0B6BFA0357BDEA11DDD6BA0473578942C2DD1B9A0DE265D4BF7008772ACFE56817D37D2BC2FF54DF95A845D0D31B10B37FFFDBF5191C52557E163264792AAD0D93455E87703A66B0A08DABFF23D5D494873955D9A60B8E5EBD4D340338A7F0D5A02592D625557849133FE50034D863ED13A2C102F171F81BA218E91EDA1E44AF4C90B2F30E150281755D77D35269A5C9C3B30B6167E8A1D8A4923CBDE12A4889C3AD36832BB29EA76C0AFE8C4EEF9107E7A3243DDEE7B64DFF61ADB30C8548235824F1423D0225B4FC179296CF1ABACD7A3DB7B7681D6534188D0E8F827DE558BBD784A5E99F465B31736C4C7662508CDD83794B1D168FBC2A4D6543957108F2841CA700D224C67AB8FE9F861FF8A0ABD9EA59581924F489403CF19655AB610439FBE26021C684473633B1179CB9B56BCE182FF134AC514AA31CB04C42EDBC582AC5BD8CBFB6CA9D9812D627C83C59CDC4276A72001B247F57C5CB006545362E7E2B7092F234EE4FC861D76E996F91915C87466255F106D8B82DF57D7A0012BB7DDE879C5F544A470357D4DAA604FF10D61826122D3E8A5EA92FACF5F2C1358EE5085847E623813229B0732A76D4F510B78CD3727F22B978D0D22CAA4E9F16ED86D02E01E614D27DBC17219D42E8F95B88120B19C4354517C3D95E4E102C6A19AB6FE2D0E5C7120B5EC64065806509AF5498E8882EB3FCEE8984334B920E187FF1FBCA9089ADD0355438AAA34A6968FA123538DF3BF7AC567F5F407C6CF97CF6E04963AE14DA76E64FE2DAD4DAA85E6D209E14DC082B926B8CFFC08BF389E5732E61B83092E8070EA5016F5746BC2BF95017B2ABA6ED015622FDA0C0AC391FB6949771302A3C5D2B1C8DEA23BCE7EAAF72D381628B7321AD0E142866A543C8BAE48867BC0BF7FE402C34B123E41CEE2716740575EED2AC1CCC64BA10A81699D3BF71343D17A7FEFC69673E1FBBAC370BA56145D47A3BDB0B10C37F2F4F96C525A1184E8B38B2C60253FBA03BEF3B3DB3C36F3010A0644C8B88DF3669F50B20E8DD6A283309C18E62D6C2857AC3CCAD7CEDC3E934C8E2F3833FB65135C5B6D05AA6B3EE02DD5BB03F97EB9F802CD6806533B55344365EFA567756D6B864AD9355DE077781A9E10BACA1CEFAFD2392CB9E2E786D29A3564C15744F3C1A280792519BEDC5F2C3AB726EA1CF96EBDCE38C845D83D452A2F3B321D1550F987FF86BF2F4A8DEAD8789AF5A68FEABC002EC9D2319E8013B0242C977608090A8A9E4CDC25C60E8A66C3C688F6658B42A074271015A07EE29494748606C77CD06A8350F5CA5E106F9B944B30AA67AB27FDC32AFD8FB3729625C7D0E8AC2E1ED34BB3427368AE02CF108439BBCF1981779D7CA7B583DBD440241AE690EA49BE9F612EC568D0543D31BE772DC2740E6FC545BF69B6DA42B1F8015A60FE41E83541A829519B71BCDF1A9CA98BE49C14FBE153FB10A53366F88C02AC2EA57C7B77858C528084E913B9556D408D38361388412825BA02367BFF510B167E5BD9D96A9D931D72945614DC4DD4BCD8CAD9A8C90E4CA244927C3FF366DD2DE2FBE6AA6A8387E49B8F796703B0E813F4243B6C34B3D18920CF9AE407A0220DC63C4D0750A27E96C77016D1C010A1B663AA3624303A445684FEA31A9CBE2549D5F35D770FF7B6F66603995036FECA76D16591A3005B3DEE76778893B083B4307AD2F846564AE7E6BE81F6B02AA7EF0A42259F24DEA05BC8201897A6226711EFBEAA592F499B0693694DCFC48F066B99F6AB866B4E547B741DF10266F1D33A0F3E2DA4596B2AAEA2A0750E246C53A87F4DB94950EFF4CB01F0F0C18C6299B3B75605CAB23BC5D249C4E754554BA6F89E628B8995DC632300A1484DA4063E0FF179707572094E88D47A3FD8B618397BF30BE5F4AD8BBF069EA7F5C9C89D8733DC83DE41A7619F6BF95228F274C928D947139B0C3AA2551707480A05036A55B7BEE716CD7A7A87017626A007C585EC573291E6E5243F3FBF1BC578D016D041DFDA852422A108F28E1BD820C5A1A85841BE1AB7B9E38C87C35CE75FEEAF900583FEA9D6A443A5B25A6DA82EC854A89AFB4FAA3CD105D1450BAD53DA3D715BEAB5C1368258B9DF8EC6BBE5ECC3094FB50132566DDB349EDACD1BCC907BBFA3721330BCD96C5726B77716CB2A4954E586A1FA1984E4C649BD1AC601F550D8C96775624F5B0101326F7FB20A09359E35B4A3F66A3D04E0413581FB65595A27C826C725869F375D0949FAC21283E7380AF45A3DB4259A587CD8878C61D6EF24A769A5F7805D07E3B9BC5D0B9A7AEE1F42E3406C4FE8E12C07BEDB840C7C367ADBB312CDE3AFC6E615F6D3EA47B5F5D33940BD88D8B30836E86974480E8E922560D03EA3EC00A5555F4A3B35B8AE30297E1851E0F190C9918AECD94029C3ED5B71A1796A4D8EBE03E1A2875BF85D940C7D841A9D8F9FAE9DEC9305C170F158D9CC3D818352729F2A6D4D26D059DFD4E0867C273DCFBCE3148791F43B9F5C8668A5840C09D751F3FB11401A04F6A32595EF433FD5235A91AF80BF83D908B6CC5538178F58EA8D52190999205CFCB0DE294CFE5519305206208ADEA13571FB326CE4F04EE13F7062E84F2BDA69AB490C07D20432DB76CB92582F19F00511FB6E78B84806F8017F77B55ABFF38E1CFFAAE125D52058E5FCA089165E720D5CC54737E40BF3A9CC2EE1671ED6DBA57975BE80772FAA1A6C57A503E362EAB52D8622D317FA5DD2098C573DB35682A42EE68E913136DD211E9202B31E51621398E9676E502EA63766B9B90822D8DEDCD500AF267544E297A5E42F2CCED6C2237CE9FEE867F3D35EDF9B5DDB6BEE140BD0A30ACB81B691021D28E2C7945A8082D10F9CE7B5A806F934F3FF67655492F11BCA28317526ACA2D234AEECE11C7AD68554FBE17217518EF5D9945F860103A0DECA57679731AC595954FC7F0BBA94B891C4163C7E368048DBC380D9822BF0CC6B226C0242118F1DEA799ED757E02FD7B9F79EC9730BFFFE827505B8F23A92684917D2C9AFA6E239A748F564D8B5B88D320A726B56CB934A1FB1F9E195C0D5197F9697B34FD5779E160FD21EAD75E0F991869974B94E429203524B49A0EF92F950E67178B1404F90221D8F8D0111320E96D57F97D50F8E30388387ED07C17751EC8E5F253C4E551DB40AD899254B09C20566AF81A78D8E158C2A936FF0369E381E282C38ACDCA2892C187BC6D286138C4EAC273BD4FA649A767A3D0AFD1C4F4609576ED3DCCF12A4E818A46C9F39FEA7C4264A95DABE192DA54A3411854404D433609E21A2580DDEBCE160B1FEB57C303D5481E6350EA6C3FA5F7EB952544F6DE8CB86FC3CCB9227DAA5B219D41A5BB1CBECE98F254FAB2BFA47858C3B2BD190636755A04AD6C137C39A8463F305F4E01991A4738426A73A7EE00FC1DDB19D2DDAB37769C458843AA4AA3BEA0C162A813AF7A2CA3845FF656EB916C90D8CC60F3F1E55BAE0785B4184F686718BD72911713638ACBDE602E96A78882737302FA1DB587A1B4927D50FC81D96D74857E492232AA839275AD959F70B3B19170AD548610951C09D65171C94E992FEE58E4AD79220B8735BBAF54C59A024C99C3807A15305A2A448641F4176BC47FFB0AAC440DFFA2C2EFF5C936D7D9BDF9D00730B118E4B808DAFB659736D578DCD15B58E830E432512322A42C4A4A6219D26080F2AD1F430833C3A8E9A281072CAADF629CD2CFD7980DF5967D6BE8BBA0F344C3A9BCB64C9B214A47AA2CAB3CC7670B59B01671D256341A0B07DAFCBE5536A68B7A6569A0B2804352867E4159CC516477C37DC8A0F8C0DCDA9832231FDB858FF76550E45811F44CB77973B1AFE807D313EBDAF18D4089F13509E702F3488CF3E5871070C3ECE5E5218AF52D2AF67F0302605D60D99DEC4AFCDAA5207EFA1F1B9709B7C99AB31722A92D554E8E20294271C115A44ECF6298BCDB77028E41FEFD310710F275A348DB9C364C11F9027E16AD115C8C5DF99BEFD4CBBEAED947CDBDFFF2B33CE382FEAC0F2C99B5DEAFE96C4E38EE5F6E0E851FC42BD07B7DAD3ADB5AFA8609D2E303921ED8291B2485062A27C1238D37E064BAE21AE3EC36DE732A83A2FEE99D283DAB0F9F5822E2D14BDE21DF88304AD810A3E29C0F09B1CAC9E31B5DEE717FD8D489E2D8508344E9A902C9C26D8EDE44213D14B4248D290AB45EF73B4CDFB7F001281EF5F1E8DC4802DF891C4795B1DBB86C1B9743C494472D992DE4A4869130108E7D01D4CD352587D98FBF4C8F5DB6284B2CA576775EA583E74F0267F9164307C55E68BEFFCE1D75908136D4E7220296510625A6B903E093F216B955F598974BE93AF6002443AD37169DDA9C4089C3EEE71B07CFE5F4C496A3B13ADEC6E954B7D91BC1D1E0865BAC02B405EFB3B366BB05555F79E82A305299402D07FF51B6AC7D6C093E3CE49FBFE366A81993E8F1D7C33B34294783EC44C3E77E4FDD6B93E6AEB0D8275F2B51D8A2BFC4F660B745FCA49B0145E4C58D053D9F36520335504DB617FDAFAB6625944088CE89C2871DE04B136A9015679C0BA4EE8F899BEB3E7821D6EE3AEDE7860748F96BD4E22B1588D5B6E06FACF3F75D94911471EDA846744429DF965E4B4E7CA25C91369B1A45719E1D3195FF228857904917B6DEA2D2C662E2C9ED0BB9EE21CE1976B185A15545F913A0CC916A57D87AF1B174C52E2A58328783850350E729FF944F0E51BEA272C32FAC49E89BA047598937367489DE2F04FE8C0901C09334DFB7A0E3F135AF777F538655334CDA2AF8DE37EE07AC0CF42FF75FCBAEA9AE487263BE936B005BD6497DD184785C04C23C0C6F3E0D5574D519DF4A1C00B47417182922415BB9658CF921DF9D72F9812F3D1F7AFFE8469BD4CBBDF23B69A568B287C269EC78BE83980985A2FBC0AFF55EEB8639DD2944D70ABAE463184F58477C80A2EF8CCAFDE25FB14D88F2D70EC17024CAD083A46CA7AD040830524695199ED56ABBA50F2610D383180917ECD640A97CBB548D1941B97C5975FBDDC7BF6CA13E49934134A05D7284D3D6AC1A5FF96DBDDBA3C81751C203D6F9BD7025B0072862B05BB6A6BAD7BB7B2B09B3FE3F8AC8BB6CD68426EA1414CF2A55C3C769CFFF7CCF845F8B32E2D81E7475A2F1B8AF13E655044519BB48B55F6BC7A040027B38C92D8B20287BC48BE687667889F43524B11E384A71D58792936EE082463E8A1C7B44FE23A3AD481C03E6AFBC2EBDBA878818597AB49309DBDC5060417A2F7CA708E940BB16551D185EE0FD4130BB44E12273E3503778E0595655C9C7733C9E4E5B7CB1929311A0058393666664760F3D0D314943AD3595FB1598032EB9E14338C9759A08FE695F775E2194AEDE78E88DDCE76B4862BF3C5C38A60422E0BD1D007AF629CE409F51E69C5AAF97AB73D826C8BF8396EFBF5FD0C432E3CB02D9FEFC290045BA3067D3BFBC978E2783BF0FAE7F61389D54F178180750F144E4BEFE2FD948C90E230DF565A62F823AC0E2E2C78ABEFC6DC12B2DD70E2B85855FFF5B243BAEE5144D1A64E627C4FEFDEF265832EC7A4B5D11B5B3892B43859A8050D0DD4D8566A3895283746C7906C0D048464CE708CD726211FC41450CCD4CC858981F78A5831C8CBBA35239F12869AAE705AEA2FFE1074D774CF798013E8E6A102C7BBFAA2BCC3E4A088ED9044FCAE956BC4678AC1EDC99F7A1E45462E3BDDF5425E157C4280F8E121E1ED7AF06E12FF18A91EEB23B3B11090F7C5C863ABA03F753DCA2ED93934657102A6DE9167E27BD39AB8F8F6676899B6B600F103CF1792D5965878601CCD313A74E669F2882B2316D60A7F9E1239E9B26D6F4BE183F20B078234114E5776F2945B9507541E4D33F5FF2E98A02DD6FFE1680C92E2B8267466F0D6BA16853C17E124F07B77CB8A80D9C0D7F4D53637131679B3E628613AAA93320C0FD1B9ED0A31D651142D09E90CE770D456524FC3BFEC390DC0E140A9D2C837B7CCFE7250DA1F88879057E3B826E4FAEADA7C5F48903D10AAC53B530EE173F8DB5B25022F6595FBF981120C9F272089040638D0A0C00A61ECB43F1DE8AC3C8014BFFD7366A696C570482A561D7344534CC224B953E6D8E2878753CE948CE95DD4AD84006148028121FAD44B3AF582BC9D18D6635F25AA5AA8447DED087A8AF15B28CEC89D1901EF9E2B3FD8268C0D85B73A1B6CDDAADBE1BBAE6458410473E5FB5A4A8EA0893235D2A2844B273C094FC630E73AEA5901DF0966A03A5AA6EC5E80EC322BF50D4CC5B46676187DEFA860F093F01962AD0685D1453CF733CCBC1B7F2FEAED97F586EF13C0AAF9F5FE752B106E591CCF9B266CBE89234176B89DB4250E20353B176C9740DE0F529D010D795ED7FAD08A455204CD6A2600C41213D9802D315EE144B9A2E3258B8A52A75C1E2ACD95E0E8E442166E5FF210DE196B140C2137153A82E4AF7D4EA2783F6942B48613008F8AE34244BC5294D072E3ACD2C5DE8EE036B588D6B5265EEB5729CC24B1831908947376F13E40ACDF76EF5D0A8C3C1CF5515BCAF0AA397C102C690D14494EDD692D3C7BF8ADC82AC145EC4A28822FCD0819746BC58D3DF9784D2338B116F150BC91083DE95F42B6AE66AC9EC8FC6A99AF119E242B2503F77BBBB0D2813DB9674A22B418CADC5DBB5C0C50374D20D590C8F3122698542FDCF2A7E6D1B3B700BEF7DB7C914B199FB74B4257874876B01E2FC23660F196FAFF9866E59D7C47A557C5CA2EA134F8ADCBC9FFD598C658353FBB1A3C5EF5FEFF4ECD96263159177B3A4242380CEFF0CE0BC3FD958E66C31EB465C0A450E140289C4C76711BAA22EB8665D3A501864640C8D4778CF6F73BDCE81535AAD99083596306F54E4B51BA5F7BC4047001D9D86B882FF2D097BCC317709EAC893173122939E64B0DB55F6B8F6710365DAA173E9DA8801A9483A035ED7CC3D2BB1A5D88196A652783457BF8C1E21EF15B7F86D2D91899DC8521D6A5F30C472F5159A2D73E41BBFF22CB3A9BA274DF3E2AF06DFC6B65D682DECFC742AA5A73E31EAA0102F1C6A52B90B520BB732C707DE98C42B166CA75FD3A4942EEB9611E2F12707779F13DF5499606ABFEF62D2633BCE8344ABF8C48B4E4496C12D849B2974EA0E8BE78248E3CAEAFCBA4C11065E29627564D3B3995CAFC6CC79E2CFD8D52E1501FC974B27EC7CED18B0DAD30F89A57B967481C1E0494E28B26394DA92169619FA30617F790A60125ECEE5097A28676747B97E666E25CD38665B65E566C1F5CD23BF00DCEB6D31D6F3F32764AE8FD86053CBFC6E1905B7395C394F4726E26806314238C912CB1DF147DE93D876779F5B40BE79B919FC1C2E5F2051381E551F91CDC866B28B745079A8A0D74CDCDC01ECAC86B2BF32DFEF0442B259C075BE3C92A41D468C19A0D34DCBAC7D7B818286552FDCF49343840A6CA3A763CAA3D6C2F8697844E0ACB7E86EB14149ABE8ADE6C27C92B9B1D14AF487057C7D8DCC58B9266CD509F56BD5BA95B4951A6386772C8F75F10BF4C0709EF1350ABCD7F319061203A2BA46B5E6874B5C4F1705CAB1828D233946B52FE4602FE56CA75B4ED7738E7F84A9367441A162B8095FFB5586C941BE6BA4A2F8C74E7F0535C8D2940948A4B977B9C72A231C444B539E3C8BD6D4112D1218C617014803190680BCD8A10E312D4D5B0F1E1919BDEE6B873C1A8EE91137ED459810B9661B1F818C23E99F10C7BE3D93690CD1E6277D578683ADFAB97675F9C247D6EB030520755BFC760DFF6EBFA88F8A5675CA0F43D737AFC8679126705DF0877DB0A87CA01C799560AD81873A7432453779A5666F813E8E6968C2D4B90ADE999D60581D760CEF3849CC6260BA16E9AE38C42AC86B9C9B9754FFB3B78C3D82E11263786B3244FB210520FA97ED378FF2FF690CC35CCF2D6FE06222157BB49552E29997DD081670F66DA73DD326392CDAC1E38567EC8F5D02BF5D8E5B8E62498870283D789B06E52427F97A1BFA7F35E72D58C53D9C24D7144D6DDAB2F89C2CF118CFB09413A38D01B3B705712583FF1EBC6F9CC6F57F0365D681C7390C7648763EAD79CF6BBF0CB424986BC3D6087347F42E7DF8DEEF1B2AE2B386AD8E38AEF6576760B3CF05047A3C3DE0ED81CDC08950E598CC78686685D3B398AF9BD4EBA2C93640BF4EAF06FB1DA6E9B8ABBFB8B567500F2D6732A458CDFF6F852D7A81196C47576F7977F1E9CE517EC08BEB440C95B32B315B96365D3708A4B11B655A541EAD9D2F0A2EFC1E89C2E3CC5164A7298731DAF1CE9A08640743FFF9699D0A18310671CD38EEA0AEC29DECAEAC6DACF4BF014C15409513206BB017205CB76490F070FCD460C37C5A94B27B1CB8458FB7DDEDF50306E65B77E120DC4531C2B4643D499E9D46DA9F223EB995D2B705A9C9EB732ADE3C0F25A1AA84BD4705FD6EF8A40D3A40E3FAC57E2B86F364C71B3FFCB39B40A51A72B86F7E885CF1603D10806ECE57E591482680CCC04D21FE2616958A371FC8C775CD36693AE5CB7CD9D771F6E18E42FA88E83B8E3E24CE5DFBF13771C1F57876393897912641EB4285AD5A66BB1AF85C71DF08762B556873DADE5A222290E3B2EF585A1C233E3992818A46CA9E7A6212E8B52D3D4BD92AC59B50936EE93F81AC6AAF3930482DE966359108CAE05D7597B8CD33A676285C2C4C4D9E02626F0B4DF1B646DCBC0A6BFF8EC4F8670CDC397E72A301E6D14045ED90B72D27A2A639FD5C03C6AB14FFAEDB24B15FE588BFACDF40748B0D7375CF3477B69AE57D87E18B446E4470AED95C7BDB924556247D501A814739CF1FD81B7023087B679EAC7414A53C074993CD50D3FC620E2AE941AD02545D6704F82FBF30D477F5CEA6A5654F1650AA4E2488DEA70FDB92D46A74EF718F35180EFD63C44596D91C121145DA667C3008D9A3C12B4C6D0D95192C73307A207D36EECFD9A9979FD153C7DC32BC6579BF6C69DCAF776E411593D10A734F5E231E993C2158D4725C55250F72ED6CD179E2B982E0D6051D8184F5330F741B04C2273C7B8F1C0496FF799BE364B43583D27DFD366BF9B5516688B1281EAD7E8DEAE3628CA7DF3777B3EB6E1532A5922E6FD6210B8B429C2D668E233DA2D16A5424283DE18A12EE133870759F473C8EC329E81E66494AF3ED971F5F7D788EB9B9FC130C92ABC2584F49D54A962B170CC13C0ED7A40581C496AFFE74684E3DEF6FDED4727EA646E2CDF5EB631D7AA69FE0830487BDF7A1CB1E61022D067D29EEAEB781FFFB092082F8248FFDAB65147A42DE960D3CB7C4BF14EF07EEC077FE8AB09BA20D99ECFD56FFA8AB8023B6EFF17A7B13931754BD65EE4C7E6A76268ACFCD67D866EC946B11BCD7FE2935E62D3DC563E0FE91DC1CBCF5DFD21BDF976FFB618DC9F9EC1678267363EC655DAC755548C5E9D8326107C4768828428FA2747C56832CDF048970207A2C4CC7885EDA854A1827B2C85530E9939C3F2A34BDC323A1682C3EBC94C08A12612B6CB179471FC40756C9ABE5BF2ECD0AF5BA0308BA304C27AA28B06FAB12BBDF10880DE05E50BFCB2B012FA54EAA7809F0EB021BE5C826AC8CBABFA5AF01AEFD64162811B1AB5ADA54F700285E024CB81FDBE6FA6405485F880314EF21D3B7D56EB82E56383395147F4BF46E8576CBC4F5500CF580A9A5901D7B480C369099F15FCF91461865797B989710F695AF4A9AFBB3A25711E92DAA9A022826EA30FD081B285E7FD2D1F033AD41B31AA4E8B2B5E2F6D0CEA63129ACF3AA70A2DC69B91CADA6D3F371C95534FCE478630DB2CF12CFF7539770DF19E8E70A39508F5DB8EBB9A8C756F2216D58A02E363DCFC45E9CC4B5416C2858BC7356EC8F63674B19257914E695A46239EC52CD4CA572377B1119AC22ACE46B483BAB25465E9B3B16D7B89E6DF6601C13966E1ABBF2D120EEBE647CECA5790BE2DFC8C49F990693A324D5BF2364461D86D4134C8C0ABA70E731C383C24180C55B87FE587AB30CC65AA4C74C26FF888F3070EB35A4113AB278EAB7D7433F7A1E745CB47C56B13FE241AFA619A36DBA7477D81608477B1903083240DBBB06FBE36BEA6C0805CBAE7DAF3C950A393F71DCA4B5DCB050649869974ACB63C87910D657F019D4C22EE8E41BA37F9BDD83AE95E542EB854A7B54E34FC40DE4CC14E6C2AA6DA75E323F0D6225F134AE7D5DD19E3D44EBFE004A783C80EEDD6B992CD38709BA30B7AF5FA1CC4638E7C5306E012AC5EF329133EB91EC7D471C2D9D218B02272D3A222AF420A9AD8FDF3AC52B2E9FE045264F025AEDDE809189639A178A9769540082A2326E8B2A7FB6069E6D2E0FF9585E9D6A5706C9F70AA43FADFC014DC3B5F1DB3C085F7EA4BD4AFF31C701AF80540342586AE7D80AD24605AA645CBE46A1D205A00D50415E33D75C1B8D904C9F698DE5AD1E6184101D5451AF419DF8A2C817B641832AEC7925742FE298AB31D527317F3CF882A26E722EB7DC6C9A382C4C8A59BAE1EBF139DEF92CB8033B0ABDC81A8E7869950B25875DE0EF7425536F50BD80CE4803D84548EF54C6D51880536502C4EA327C187C3078FBCC14C79BCC6927B0EABF7299500D38FFB91D4BFC72C60292E855E314A6530208871FF0ECBF2C90A5CEFD0E6DC4653386831166CA2B8FE3E4CCF714F9504D7706D7A27F3B2EAEB83C151C29F97FD488514746A83553D67C5BE01220525D6B313B4D32344B41865D7BB241979152D3E9C90DC336F3E1A1DC7BE0464DCB5D0FE3C66445AAA7D4EC8E32C0E364D52D0EAD84151DA4F622309FBA9ACF67D13971C411AC35659664F4825C16456FDE24FE8762644C1D15A0C85560924A5427648206F89051DCD0ACC55A40ED0359496F6327DB4A7180B3FF9949EF724C70AF6C3DEC64CB6C2F614836B497D832042231F3DAFD1AE1B9BB14FE7ED73FAB42258C43501C21C97210324E811F562E119CA194FE2E24E1ACCDF2C02B21714DC3E29CBCFCD4EE12E91506B545C22F121670C1BF917B2CAD90795EF04EB8954C3F51770AD148001A166829B22397089362C8DCAC2807EB2A7ABF02CC72385E3162F3432C0FAB24623CB7C192857F8F5ABB57C7C7CF2C261F726803A5990C8666F09281F6BF5C5A902D80E08FC71182DA92032A8DBEF6173887E16C38CE9E898EC8197F9ADE84C17D352C82839D7C473492DB3DE81757E1FF7F10491A203C9D06CD23F44F6E80B5C0603E19A8BFC167957676BE0EBBF19C04E142688938B9020BE0823A700D04A3D613BE285F839D896CC95599771044D4F63F680CC87B397B4A288C708695503817BD3C0B9061BFB4694B84213C7D46796D852B16E2BA5EC2F0B71CD020EA5D10C56D8700D4521D40185DD1ECA0FF529AFAE5500AF367680107CF8D3D0F207BA3AC7DB3D36DFD7266553F74E1D06806548F79744862C239B03FB775E4C516AD31593C13EF7A749E8EBAE2A7BB3938E9506F2D4925EA86F000F59763DB59B53DDD49DD60F32A4D3A61751AE6213C1B188E50A776168ED67579DC840D2ECB063EAFAA17278333258DF7865EC148E0C60514B4BECBC508D4E81D164EA03BFA558BBEB1AC75315E45D303B9EF3B83D2BF4C63D75F4B57412C9A700E2704F8708BF81D90732328704BD2809F952959587A7D90AF4B9E44C5391F84DD05CA6B27B9382044A1A2457E63344A5A7B317AFDC2B1AF08DCA563C1F43F1961CA7B768E5FEDBE6432710CA5715F8E01E1FA25292E56758DCB17EB18098BCC0DD3955CC9E1558CF319144D1A56BDF4F22F6A28D8336F35672DB7E9455A212444B6EE678188C3398FF737DA1DAC8F15C92FC15A218E8577DEFAFF9E7F7D97B04C63CFB4852A3407589E14CD992F91A856CBDB5FA0C3960B64F7CCCA8C2BE32605CB970D0A6915C09493378E3C3F62F222E1145F351433ECA889E5E654DF45FF91624B47E59B9D5EF108E5ECE4E75825D9F8A4EB26AB9DB4D008FE69CF97C4105CC8D14248864EEF112861D3AE876A453B52BF641FE858C39059727F27B9074E6B476691608E488CEA3D3FF59AB02B65CC31F5E6019339C300BB81EA9BA3DF2F5A0EB5082F8FAC51F3E859A4151069EE367CC1F8803185B5E36A89588F2FCFC8F2FCE1D0D6AD88D729C1DC163ABDBA6DF6E3ACE9EDF67E5AA4064003846DDCB161022F0056223ED514075EF74AC12317B7344ADFBDA8E10B84577D41193EAE6A76D1CC7B518A23E515E9F18080F133A9F37D987203AF8505810AD377B1A0F3A7BC02E398FD75284154199BA25CDE754AF0AED346D429A8215D3E73DF96B2CCA47C3E5EF027221E62074B35178846C0F4BE93884D516F577FB6AEBDA22D301F4A05A8E57F753D39B837A6E66B66F16C949CE35FFB7148596108BD800D261CB13FE9819E456258611F0A284381AB19615C3F86FAF60573E7C074023131096BA53F8473BDAB08E53FE06CCA2C2A6684668F8CE06371131F2D63D6EC0F7207BBE85319420D1C00AC1FB7C2D57AC32A162A2C7B58DF9C93B7D562DEC37BEE430D9DA4F608B2FC409F642FBDC50AE61267B7496CAE661FA6242DD60DAF66CE735122C136EBA8DB5A850D05C94C00EC9EE967AC87167E82E9AF3DA123DACFCD829528CB8B06F841277BFF545115A4347BAA5EB67924967BE673A0415D82A28C534D966D46B1783BA2CDAE581CE663C5D4D4AD17139816C3A0988488ED3C0C20012E372E871C938989ABC457792526DFB9B35C8E51205758397CFD41A10BEFABBA0D09A566C87EE7CE7CFC681768BE453B694B000BB904FF71F88198E44790E216895290381463C177AC6050247A757DAD50A0E75DDDE5265A3B5008E78A49ED7FD89A377E39B419937A8BDFB9997CE35E6A9E4FAEE8CCB04ECEB771D2CC766434A0F8418D12A253D43DFF6E3012DD77FF28EE1283C96347AC0B5E9C883103BD3AE54B135D621BD65F8624E148FA215DF2A86DAE2D2A085E4D4AD8FC03328D2D10309B637F71720C993644F522EE900DAD8ECFF9A1F030A6B5EE676CA320E70E6FE1746564F3F4D7DD789AA384F2208A78310DC343C19C499CFE516E89D9E120C8C3418BB9B4D955EF9E28CD2D07D3ED9AB81E9011E3A25ABBAC29EFB45CC1131A748D13E801DFA62DDE5E8128500D51ED238A47C8C4387BC718B315A9A6A78E729C4B7BD061337F88074ADA8253622FB5A7CCA688A88398390BA4DF4EB69CCABFF4EC1E14D88DDACE92D9CE6CA1380CC2C1A3D1F734DCB2B98AA3E1A397872C0C168FE414F4C27E8327C0C0D6DE7B13512709C082E849411376E19FA2E1B50D9B642A077B7E25CA9ABF6D06038DA33C9642BBBBF5A53B6E748923FB4AF9CE68496FEC6A94316E5682198547BC8047B0C93E88F1EFF69D089378039EF24207EA47808AFEE8F2884ED389688FB9D9C96F4E1311F591C863669979EC6D7453F5B977542AD37FD990CA6801416C5E6B9E4A7F804FC89F3E50A70B6A38B3828C991874BEF5C887B22417E11C8AD1C5304288C4265F10ABED7C55CEDBE6BCDDFE40C12BE4A95F431F959885103FD6E7B2B58E3FB470856634566894BF4AF531FB31DF59BB7E104C8916A751FA153BB3910B59D20DB142DF400F869668D008C1F77ABE35B2D05C80817FF045B32248616099B5BE5B6A98CAEBF78372F7B242E62BF878383102EDAF21726D0F3A2E02319BA2FAF15A69A06F4F3E9E698C4A4DC06862D118C8E95E0DBF937EAE15B92CAD43AD4DD8D39D33AB01517C29F61A07D97EBE1FC79E8192ED3B9F879D40E054818B89956AC3B5E1D480A3F4C5EED7ABA3A57DF259700A5C84C04D8A7C375F0D0EEE0295F8B06DB20C8D6C62F8867C39DF1CEEDB3580219104B2B11E2AA06210F601D765FDE3E91ED37955CC0A54818789AA04687B2B011D3A298B06FF931D4EF461221987A70CB79EAD5FF412DE427127ACC44787D5B719BADEBBC4DF702527C61F73E633E5B772D77EA2A8442408D776BC199F9C2DF46E2FA55862DD7CAFEEFFFD145D9A3FAB6046D72F6AFE099310F926EE5E7A171632AD72EBBFB2E61A58B3A4A43B3F8E73DD30083254A3CD885FDC738BFA717A6AF4C4B8425F037168DD15F362A7CBB8FCF5A30BE391516F65402C2390D8427ABFDD822217B0F63BA7AD4804DD629C55989EB7CE4151D101F966937F68DD83A39BA723C811B12B72C95227A30EC0E94B900DFAB7D85FD2A22D13551F9AAA75439B33442AA025880810901BD0C73C1D8D267EE77C538AA78EDB17890D5B268399A3432EF6DCB94CEA925528515EB6A9644B0585A236D92E230D6BE57795828B17EE7B063935083BD78A7D6068AE4453A1B0E4F87F34EDA400F37178AB6C60A72386ECC656D53DEF1DCD2CBB2790226290D5D5C1A66AFE1130C1AFF2260DC5F089EC3CBA2AE0EE2D7CC5275AA10E1D821CB39CDC0D96F6D311C782B0D644EA078BD62A83D257E67B220645327C648830B60E1C064CF664F06EC9278DF08D2A6994B6C5AFCB2503A1FA21859189DD0D9CDA26769EC67538B4BCBB419E535C3DCB1089A11813D8FC2DD418A9E14590A37D4476F7155F34FD2238EA530983A62738C56E6FFD5C951C3F5A7754537190443BFD0E2145BC70221B655504B9B0A0DF9A416DA319F7FCBB50865326C0975B8AAF564D04C8A69994D14B0E023886EF210967F05E9DDF2CA1C4926957C6BD02566A37F351B7A9DF85F59702ADF6646B7FBEFF1B4DF51270B8AAE91C4A8168777CDA206B2E44B5568040D2A098A98DB625884AEB40D64E19E8BDE63C25F3165649459995257D17BC7483468566AB5235DB12C16ADD8B4E595261C85D4A060CDD33CA80C41EEFDD8972E49002325B0B6A906124D014F5E48ED524FCA259D6945401F4E723F827B164432C8106ED4C8CA25084729FC11C6A677C67A39C701B53CC0F016BB8675DCC305AD90F0F15E0ECE39C2AAB5DBCF3FC487F169C6AEAA86F582EF459CDC4EC5C1283E70978F1E2B170BCDF5A126A35269B2E1A65391EC7F330AEF994428BC40D9CE0CC13E0B142027849ABD3408A5EC54CF6BDFAD40D5E5CC9D6856AA5F4066F1A3994DF6ACEC317498F902B939458D9DB2F8C4DACBB678D1295654924A58D4AB35F9D6C335CA8E6F32BD407F64EB6266831B54A55A446EDE1A838B20DAA8E5986E3339781BBA23676F2780B98629042592B146FDF0535C3F01A96980F19426D163CC644BCC4E94B5A82485CC71EAE818F63AD24D5506872E75DE061BF63C3515F1C288E060377F3CFCA0E233A78586D483DA69B07F6830E8DCFDD26943F23A7DC6F562D4080D79C99F838481075A38065DA5BB5CBD49F4CA39DD8965880036F8CE4CA308107643A9F057D06A7FBD494F534D7BADE27148A20A5E40B84B828A2ACAC14F6165D817445499E44C5396D004A0AA101BEF39BF7FDC279923A91F630D12D02871423F0A4AE09DCF57EF4F40DB8F7A2CFEAFA219B8551605838755643A786CD48082134D702BEFAE46EC7CF9EF37DEED20691B072DA28A0C890F06B021FB0CEB280B5471D2F779B0595C03146ECC2B0FFB5F10591834D1B77A8B6A78F6A37F59EFE38CCA22FEF18EAB410A3AE752F53BE5C31584F1472874D50B3D992538D4F14626089978C8B13F2AA718D1CF1805E233B747B5414E6D697858C6B4102A0CF3403DC4CD4534FDCBBEB8FC14062F229717297656D8313A2B04C5EF9426CA78F49DCB3FBF7AC47542CC5B96AB93527574B3E781046A2FF201FAFEFE9FEE2046EC2FCBD09FB701870EEBE6AFA27BB04DEA993352526A5AE2BE98AFF1513DB3C512EFC4F79BFB78621C1EB484DD4DAF84CFDACB5167FE6680A1DE72F6C777D29F4925601826A9A1E781343D82730B08542C59A365B372F2176DB8C642AB403CB8A5F3E3154F608D75F7BD5150046843B3E84A68D6B493E347CC3ED0751C1DC47C99C9714E00604EA0315928F860891E10C650C1217B1DE69C42B873F385081DAFBA82AAAB2D33A01D01042CC9066FA825779A6802E2A607A7520233E495234F491DCD1574F26770245472F1B44731958844C6342D61DB9D031DC3B4D084C9606532AA06A91368AD57A29D420B1AC7C255932D1E48EC2ED9AA106D0B447A8D306057996896888746854000BC2B7B16BF4014D2C720ADB10CE83C7E297176DA26B50A069B22FAC7ADCCA456564266CAA356A086217DC4B4327280F91F4A5090F63EAC5A61712622E23358ABA77425CFFD81ACB5812FA88818FA4758CFEEC51A392862A204956D5936531D4FA64B04E513AFCE3DC732F87115C190F12A8EA33F54123F139E7A5B9064D017DD805CB22F41C8B8D47F6101511FA1D19C095341F80BCE93286ED6E89E9C036EE64AD831083B52C206FC893205524049097BCE6580B6DA54A61DA385342FE671856A6EFE2D17D1038335F5B785E15CE4179D18DA3AFB869CFBA8173098C64905C9106A0696B1828CA601D37EC2E1455E201E88814E0C435DBE8B0EF39ED36E883CDE714476DD6F0D9D311D4494CF5F51FE18385633B7BC1FBE313B702AE85854A512F7F426CEFFF6393EAE086A7AC0CD719D62BCD1FF909540CAA2E8904CEB116565158E336CD6953C45420E68E5F30DE6DCA0BBA0FFC311828DBA6DA78FBFDAA4FB3D8D42A203DB1C5C65EBDEBC7AB9FA27886DC25DD27E324429096C40EB5FDD5D542F6C1CBCA7D09F66DEECE5BDDA7A40EF18989491BD748B80E096B70BC62570197C33CFEC552D245160490C1A5BD4767284E6773EA17AB2BE566E41DA5E10CE45347274074C2829CDC29ED1A9496843EFC3F88C63613DB8B5171D26A8F53B426BC60E451227D8EC0800DDB69B1EF311567BF85DEC1D61FF5162AFDF669E8A66D14206939359463F041DDA1E23E4781AD42DABD2EF08609744A9F3182D74141C13DCCD9A289D0859E51C1C940C06509F8A6761FDDB27FD536D25716313EC7BE24DF66E154C58FB943706404C7BAA665C33538C333D3E3B73CEF6762873AC06BEC34C3F7364EB5F6466117259B2C24710E447F26CF3BBF7C414A914DAFD7DAFB71ED3DB9E4BC32D24AD22CF36ACEDDCE7423CF795A4B3AF4AC459EA5D8F9F339419A099B03AB0BCB7A2BE4EC7D5803D70D4CE0B7BE8669C5DF64F292E99CB2CF45805C642303B2724B50B9C569574E536FA1B81857054348D1A28DD9F53C3B2574EDBF2E2C8C9EB05327BCA1584F0D6DD291A1D856853B605D2BCBBC3DA9F74F42F85679F6EBDC8024E5D70B18716F84F059C32119673426101DFA4A96D937083C71FC95B70AB9726456ECA006EAE76A1558F9ECE0E0277135A6BE16A3675A6BD25794E518AD693896C2265856769DE651648057C54A74E5200E92AE093A3CD0AE66503EE2C9C75713496DCA5FF2BB33E11C847327ECDB2E8221173A864B26C39D937A06743ED8376E23A0F38C9B2A20A01F77949E5F7E471B5F8CCB6A7DBEE40D3CE74A32A1AF64428B74A118AEBE3BC1CCE93836325DEEE296DD7153284F90FD7F93B32DD3668AA6DB8732764B9B9661DFBC35987E6D83197395741B0EAB8BD086BD423B98F00117548028AB878F1D7C735170E2C5C9D4DCB38514AC21D964C5CBB813B8F00B3D94EE14E10C0B6C9D2C9B6D7191ED0ED24DB77DDFB68FC86D2BF0EAFE9A7094551C2B40F9067A38C2775FB9739FF826EEECE1AAAEC1F690C4E589797AD80206FDB9FE1F6A7D695A66D8EE2706FC20323269570000D55714CFF5EC4C5C94012C951CCD0D41CE2413282A65DE16C7E2EEA8118F3693432DEBDCBECFB41C1A39BC22DBB6B85BD3073ED796B712A35E54FC66366CC93CD089C9DC6678342E8FB0E466B490133D12CB9896C19E051CCF71A8DD36643FF1F8C9DC4977B048D7DA5DAD79FE8C18DF4A3A6862E8A258EC0F8CB85C4110D5AE6C04E26A8B4F5BFF0A0157F84665F3A25BF35EBD0E242F9161C291DB37880CE772F0B23AD9B4F38A4484A735C56F821760D5F682ED88D60AF60FAD268C4343E6DCA6ADE3434EF67D7496180137F9C8705089856E54B08D83FE60E3747FE501C3B5CB67C3378E0E4540EA0BAA79044FDD449EB0B0EDA2EA6BCC2064E8D3416E871211D8A4E6025C91EE33D2031E76C49B22E8DC11AE2C152894B897E738A6910ACBCA6EF3AD3149230C6591D8B010897E2C25C96D7F87387717393DC2E72D9216D822888E9B819C4F4287FD8F6B8AD678465F0154739BBAA6D66D44227640513850A63756588D4503DDD714E0BACD71BCCDF61D832734C6C970FC932088EE1724B36C4BD07CFE985D57E003B0D0D03ECCDA89874452F31B40DBE2A9B9775A6FF96239A87D10BFF6733A53D9D8083964E3993DB2531F0DF831C0425AA4667BE38C7AC82B494855DBCAF5DC69F6D5D5350C232AC42546C30D41CC5996FC76DD0F29C1CA5D88322E14E49E37695D9BDAE60242BD4749EB7D8BBF4D14952499A3D3D6EE5E59A02C23ED1EA4A89B5C03EDDF22717B0C7A85CFFB5BD6232B0B7A1208D0075BBF757779ABE1FD8565131A281B01888643C89EA8C1D0844E181C355B740075BB1A194EDC63529D6E007E09CBB3C0E845EF0CCFC24C66A48B0DE51AF91434D2327CADA6219112E4C0B401D7580755088DFD464749BD7AB5B4333294517F784716335386404311964F6AEE469F42EEC269634E96DE13C4E94289F89DC96A019F1D52F3354FBEF89D2650B8B286C8B6C07CBB1B0EB4599FE5AFA0211C82EBCD2D81EA997E43AB8899D4F3D3C183CCF66C8C613C6EC6A56AB34DCBB178C4B9F06A7361E0D36B000AAAAD520C8232ED8CDDCA396EE01F7537D56DB09D0E64F4C6C4E7C3E63CFE576060B865D9AE8261DB14D936270109128204F064AD30979E540E313E12A57D546FE43F229348F9120D05BFFE42EC70961D028165DC14EA207D85D64CF7DFD6BD20CFC700AC975473E6B457B1EF1BAFDDF558B6CA9D9812D627C83C59CDC4276A72001B2474BF3F3A9CF7C77342062AD5990A1F6E7B23BA5CFAEE6DE38F7FCC69A7929ECD5A275673104B86FDE522ACFD1EDA0C8FE861BC6A16F6C44C4471AEC6B5DBD325EBAD7C107C524A5D47C15DA5E1C78C7DCAB3FD03D6ED7C1D13803836CA4AA3DCEA238523CA4778E4EA608F9F2E67C06DC9EA93771FAC587DD2EA536B5B664154789721615C7E427BD0812565E40C071D5FCC9CE5488EAC18CD4FC4362FCACD4BB49BFE1A05BEFE8C3E17216AAAF2249243C2A07BEF2C3FF1CCA3CFEBEBE834393C0A27BFBB678DC10F7FE5F1FDD83FDD63C6187479CFEC19F3A13DD49C1C23B97A00994F196AFBFA2CAB828DE77D15475D7C67661F285DC82998C52E81510B33728F913695FAE0602D03C74C1847A948947A09D3827AEAB047366935E679E9C032295951D857DB2FFBEB1A87A7FE3A03FF73536CD04016CBAAE3E3F6492FD00AB6E06411B8DB4056E40A34205A048327B24B9F0705FF8A83BCBAF9F5F8C3C1353B49E55B04E411E1100C3BFAE1E240A33DD1B21AA425ADF07339A062B6D3A3EAAED08B64B18B54376A9E0CAAEA4105B9F9285BC17664BF66DE31F716AE37F9E4D255199B510A7D8B58020A0954FA4F34777FF1CA94398533AA91BC261D4A293E2DA88F6A4A924C4289983603478F61C1275582F7A2939103D1586FD630BF8318FA741525D4BF407904D3D1A13ECAA93DA4EB755B054867E4A6144E4AF82555AE086FE1F7FAD03A6A5A81F1A4FA5E427E219AC69F00FCF0FAF8B24FBB0777C683CFE5247F6B14FA2D3D8D2B0559465E1FAAF89115EF7FCFC37272F54D0BC3BFAC6EE21C54498C7778AC3F04FDC31C436CD0D643B49FA4829E6112090D7DE3628521BA088D30762A7B9978F4A5C87672438C0A63C870A53462C7A3B72540E8B97D39C99C0A0B7E1A708B3C93615D8E0CA5DF60AAB9DB3C0C7987B41264EFB42AC3A6EE488B44F398C604C47446DCA06F8890807A9E809490395BBAE2FDCC2A2A9783B543BC10D17FDA8755CB08642A341E29D4FE00769CB556A92698DF9ED07E3F8CEE84DBEBAED87C1F5F8C36E9850A3EB7D04294E1B6B1DA6A3D6F33049925D035316978D3FE3FB4C87890D9CB45C56A51A9C55213AB00006D4EC854C751DA7430761294349CF34AE5E58FCA5835FB3995539094FDA4BE12D0664FA19D517990D7D4E03BAA5623C826D959E9C03B43155AFF57FA2E1D2E0CB5268CFC59E471F4D60EA6B46DD07C931669F942DE28EB5903E8D7896BF18FB381F2B0DF7A5456EC6CE31FF96784377CD5B7758A4CA6F4E4AE84595B492EFD8229E056A696BF1E26AA3C1F8D0ED8CB170E5F9ADCF3B689DFFCBAAD209289EE20CA91222B5AAAF098F2787000452A6C25685E8CC57D6988D4868F5841E3A4782E8D192249B0834C98A3A5A2B949C6C493CFE342B231E1F8ED66A5A6A70EA0385BB85DAB82DE6212A5A6DE417F942B078BE2A4FC45885A093F5D796B191E4D8CE97823A7E6A19AB6DEE05669E2F9C27929FCF12E5B861B2D187BA3A2E8F917E7D1CB05A2B1B204AF04CEF75B474505FEE1655700102EB0EF40E44E61F8AC48BC30267ECADDD9B8FE0EB89114DD2EDD760FFF78E59B817C5C5B261D3F1ED6FE00C9426DD7B09EDB4D633554BDD8501F3FEF0412EC7AF05CE6ECDDF5C85A4E1B1FA7870C10827C43AA3474D20EE8477263151910A9D799B44941D089B84CC5718DDCBC65EB50861611FD232AE0972C57A0C151BB302928E4358DD44EFFD209AA5F464E44F85516139BCA34432F17D1A679C70557EED1DF5F7C49484C85F6EE61FC8D55C25BAE0B614256275E828E592CF14788582415FB036953B6994BE845848C3D374DC36C429339DCDFB3BCAB4BD11F01166FC4EA7BB0C16E80FDD48893E22E713A09B42B4F71E18BF95AAAD9D3F8BEAAB595882EB97B1C3CEDA03519FD76FA41EA5FAF337DD2067EAE4AF8CF29A2702A4AE09BBC4C6FC6CD60F8BAB8D227DACB39A625DFB4CDBFF0FCABE6573730E75D18C52D450F0719C299BED51C8B2755A67AEAC1941F0669485DB88BF9D6FFBF890199FD6CBC1C7AB8248F30565B69772E8F3A5002EBDDFDCBFCCB57A92E3D611C5D70B56BD4EC321EC22869822ED981221C7017DCDC675CA5B3913ECEA1805EA4B19F9583E2DAF7D8C649C45ED950C39BDE5F6FB5411F4E29AEE12E73287CCAB5390B87D39418F3C09E8D62E3D0C0631A1816146FDF99D6413E6FA1096ABF88CD7E2111F4B0700267BF4E95BDB3300FA8087B59614EC397CAD30D2723BD3E87362F25CE46BFC3F9151A847282B46FCBECAF6099F71EA1E2522978AB1C6AE9CBD9C640693967B8D29C10735B7E005032A2402E8C83326F83B9A880EBA584010C075AFACE0BDACF93F68C46F7EF339C980D0DA150D5C25A54C6446972C5424467E8EC5E1ABBCD6DE72D542741A111311F44C2671A405DD68E4A0B7FE7AE2485D360277B6D40B430FD4064705406507B99F164BDEECFCC5EF22092277BC738D5D2E1270087B22819DD25A1891E991980CCC920330B7B0A6E9F984EC88DF341F4F949F0555AC27FC17F9EF030FEDBF1F0ADE98E058B5B9026F1C35BED362845054F14416216DF6FFD17F652116B0C2940E3660EC4519F71582C73ACD2781FED9CBE3D87EF5F8F057B41431278B4E33C3C8060E3454B664F9A8C00B9A28A738013D473363EAD1D360E9AD1E0C8E664DE0B65C2110DAB42A45BB1A5D9F7614C9A8970D8D1C8C01F69FD408DEA5FA569F806A75A066E78240CAE4955E021E40B3631D3EACB8D1D8DC3600591D4BC80C93B6C5EAF8EE808CA61F9ECCB02A5E3A92F8A60AAF5095C1472DF7DD6A9C8A3DE9D3FC52D450F0715884D65BD06427B0BD3945043945D05267635A2E5D85E8FB44F89353035701C217A1CE457FAA0790018733E89920DBCA32751AA5A3CE2ECB8D16FE1B6AF0913F16EA6367665F14B3477578B3A0D618419FE7586CEDE550A7116E1996BA88EF103AD6C7CD2B6800553D05B492C969D4CDB784B3F96930E73893DFFB7A2D3E76B27E238C68E1EF3F89F3303D8DB20CA540780BD1C95DB27740DDC6D1A56BE59EE10C8A32DF04B5C9F44399EDDCFF076723C43937E37A13A0B187E6DA5BC9261D7F0BFE31BCF076F46FC88B0F94CF8969E2B7CE5AAC00D012D62F528F73E4AC61DD7E8301A143D9F6AF46BC022C0540D8E8E4754509C4012161756686881F945FCA8B11F17F76FE2C149B9FC299251BF6D314CB571D12586AEAAB45CB014C8538679BD6C0E4D0E95ACEFAD3C14EB667CCF64C1437F0613FDB26003A4349F5FF58BDC833D5A9CE3AE2B9589473CDABB258A1F7B6CD1A916BD69B35733580C7737A7F88EE8471014B9BABF42AB6FC7B7FD93A52E520142452133A58F823A4957E44F94F5FF0A505FFA25BB1092ED2146712EF1676593707A3EF77204C6061EA706C016960CBED4A74EA85BFDDC5F1389F0AAC689256B28DDE5E01CB07E33F47E062E788CA42D928BC713A9CA4648ABE4C76311F76558FCF68DC28ACFFCC0334FFDB9F0F62541780AF29DE0BBA331648FFD7668420A7376FF0AADB549194E73E4B3A3106218B19E6D64DE2C71AA4A34B63D6A3F49999F49328A98E3999593CBB26700A0029C03822895F6244CA506394DAE47A4CCFCABB933872C9F333AA21BFCD622ECF45254CCF9FE56378A36888400089847EA8B32B0F9136D7D550B39FE9992A9EC376C8C633FE21D641A09BD72126C686D6C35432276B35DEEFC7F9E21D2AB783227C5C8B143EF71A99543A3C3D89662DE82B9FA01BC2B3CE8060FD369F342BA803EF6DA415AF5A1180DB62C48870B3A3D382CB0958F7BF49964C0A6C0CB3320A01236AC3B65FF109328702C1BD47B44B85A8AB34F52575FD4419575BB96E12E78ADCACE1DB1C33E84696781EE7B95F3167DFDC5D4EC26E847C73E6B1F52DC401A698055CFA7BF58A135386957A867506F336BFFE73E93C5D29370F4C76140D5EE7BD65B8003D1634B43E8B431DD85E7C7F151AD27A5985B59D2BD97DB7B199B4AABF30B5298515C0E7197E2659613604B7F3AA648FA45FF18AD1B141871464CD428FF67C35470A230D3968013CC7C8DE1F2589C1648834527C1BCD3856E5958CA0760F354AD886EA0913E2FA170364440E423B2EE489A59B3EFB9D678CD421EC6E7D8B48311D1FAFCAB6B1C8B71A7E354FB697DECA9A04F2C700922E4D1DDDFC361F742E9A71F76A4BEECBDD69408D4E0CD3AAA8BE071F9DF3F3C6EE5CA4C1A6D2FEC87A3C4CC7F1E840B27E452C04F330E852BE3AE2BC6FD83B1249DB7965E970876CE1A68B2F68C47B0C952BD8BB51D83D2485A0276B3422B0E39165A19BFDA2D0C86D7228A989AFB332A9CE75CF64B7EB6D5252DD416436463B5AF22CD03ECDFD2C4B73F6BED81C5D77321AE7C63BD26AE39AD4B4F1531ABA4375B2362276E6B0F2043840D043BBA09900733C9490E1903318BCEB2D0EB61A9DF4B9594BA0A7005ADA838CB5CDA28AFE474F4C6700F94934343C87A78DFAE7934699E799B1263E7763830B55C23D87E3445EE867F148078D82DB87985528BF994D23F3E4DFAE43C759E3A7AF6332CFD0AAC47247779EFF13F9D21DF59E34F5F42F54978251CF8C181A84F78F368F3D0FA34FDE9F1AA2B8B3DF017CA1F21699996D6BC64D355CF0D2838BB5C480EAE466228717EC9009A87BB7461C7B86AE0FCA6919AA66DDEE1781D0361DAAF0AD33B56B29CA271FBD244EB3D5D4574A3F905537D32549DFA9ABCDF83D1498D844A594F690EBB569CC987E2F85F6702246787C43C5EAC691A0ADABC78474CD1FE667730B1062F34A97909AB1D116587EA13500D8B64B47198C214BA9C82104FB38C7BD09509D1522ADB955C5B7D6D2CF7BF30F085ECFE5B91AD2E451CA3455148C35D9DD660BA2ABA959A9C67EFD0D7189571DDD4F3210BC84BF7D2B72F82C57FB08CC8D76ECA8939508135D3AB63F195F31D25FD741D74BF73F66BCA331BB289BE4F2532571FAFC4E28BC1B565992F5A8923E58A208A1196ACC96F4820B66E00D4C3EB2F5003B851E2854A6836B9159C605585687C59984F2C2E9C2163314D5556B1A9842A9B60327676AAACB7A40D89785BA85B40A088E600C2EE1DF4569EE32E105BC4F5EEFF32E4B36E0BAEC9D2C74FDC4224AC83D537CFA38EEBCCB3ED83CCEFC64665AF1AB28C81C357DD191B7C9968A211990BF72F882C703C4DABC0D7484CBF5919AA6A4FA5DF4E535FA032F5BFE13942FF2C67EA230B4073DE49EE755324C115C3C685B48C8703B4DB6F2AF304D0130F0444922D32EF45B4FCD9BDC658F4F954E1F88C267A4FCA75296450701FA9DFF2790D2D0DD9E52473DD26455DB4A9219F20D97ABD6924E477E14387F269CC8C7920C694A5BF9FAC3F5E0494F0DB00F0160C9CAB64107EBD71161DC116E014D96BEDA82033C919402CA1ABD14BCD213A779DAFF64DB16988106CB48FEB05290566AE5D2A53AB523F1B71F5A3070B199549D1226B82EBBE6D71F3377ACF2A92A801C22A311F286391FD0CEA6138FFBDB153351DA9D8F53B452D55237DE380019F35D5A1D2FDD361AA6F8BD564C09B5901CD1217D2BC2A5F8B551623A9DBFB2BFC5A3069F13FF8F96E449097F3A93FE6831CDE8EB80348B0DC220FB747B00AA023408FC04ED31AF83650A4E8704C07AE81FB9A66CDC7DC412F2C2E150F69B27DB6AEFE862B40EA04591317919A49E7EB82CC04FE072592A531EDCD89E45D53CAB113C2C9BAB271069A6BDB9B5EBBEB44D652460552515457A4AFE9997516822138986B5FA49645EF3CF84ED00DFFE8F32B74A13E146DE111513ECDE91CE1D59789606C32C5E0BBC34C3377ECC18EE97F14981A06819D0D95C4F891ACD468D11D074BF8E2D5640F7720EFF705101CCDF86EAA94076ED698024E83FCC87151DFCFEA3C8989A6CA24B18A3216C83D4E1DBBAC18A0EF343C3E9FF142B9F45BDA35B4847516F9E63D6C4C41431A59C9557F7601175338572F5F7B09F882286074D8644AE25138AA49D661A6D44B2D39CAA2A427836896FFAF95519E86C4940FE5359B5A177C5AB8EB3726981D67E20AB946494501EE3B7762E6E3FC601137E5020F0959BFAE0AB2470A7A748AD992C0B2B4876BE8332405A4848C021E89B68945B09267F4FDD36F1BC178DAE764FCCB1A05124A30886C62472639E93EC46226634EFE747E6D852119FA6483A9FD8250D89E24EEDBDB648ED3E04CF30EBC7B1F1E5AA4E6209EF91C3EC22B5184B5FFE9364B45A037950C0706940B595B0F2E6B45D0282839086BCE9F5B2A41DE7B682CCFFF826F16C8FDD5DA7D0A5C9967647637286C1983D9B25AB28AE207A21E133DAFD4B49248CC318F6B95CCDC25A5623FCF302A204508E987D2FF16FACD2FF3E4DA6E0C1442E8E1FFF5C405EBC32355C49BB578791A3981112580CD8CF34B06D6547F8DC8D3DE80E9F48D2B2A289A91258517B00E2F6A5421CDE3EDB50C8126BCD86063F49978F8A063428608D11AC1688CFA1A9BA13F0C4AFCA4B8BC3E858015F16FC1D7B0FF08B461D273B2F5894E958D92718F6A2D5588C325B73D88E901819FAC7981E6B6B709EF8DF79259E4CA3A87B032BFF29ABF6386DD67F27FF5F9D93E56D8E083E7594FBCDFFD9A17A56017E9790F60F58CE5B6E07902BF932D2013D6F670AFA0698566C2DDB4153257658BBFE09CB696AA7C31A2989D0E0BF0001ABDAE56289DCC59E3D7DA6E015D6B08656C22824C4287B17F6E9B9DCF26B0A4051C720F20C140A852C08BAD95267C45FFE6BB1402CC90AC1E346ED231A06E3E7C7C1E6262EFD3AAE52A84236F0D76EAC0132F9C2A0B37EC300A47C1E0C952F562E1BF079CD2C3DC9E10FFB7D228AB2B667F480E2631FE82BE387BC27C3F89E3F2B612F6B4EE91867386B7FFF52027F415FB0597EBE1D8B5C837BEAAA6D84C3AF3E026D68257F7D0E9248AA3A38868C4397D5FD8F26393123DE503F1425A6712D071B756BA24DC8830580CAA98C8B4C8F65DABAD4DC6A8D836E2C1893017B73137E23EC302220601ADCB525A94A108E5D2F3BAE057110858B8A392358E3086240348BA218977032054B28FB53616AA174AC3DAC51F5C7E76491E2AB643CC272FA1840B142FBDAA5881761246D7F81D99CDC4AEFA58820081FD8929E33707E0BDBD25E71D5D6261014B64E0644B4E1DFC294108FE113C46E33CB061FB90110E64FD883601BB9A5F38249C8F8A69311756CB8BB5198E05935A333CCBFED9282F047172F60E1E933674F6A850B9918C292456E585BCE9405264E83B659CB4AEAC61CB044EA34D08D5999BAB20CCB3ACAD59BB2057F550D91732457390B60321F9A13D84522E44411786455E546C8D67D6E7EE7D035489A7773BA5D6CC5994896761E6E5095B5EAA68B6F61EF589AA72C7EAEE55501CD84E3B5DC5C86DA6ECCF17C924BE43CE4E89FB55B44BCD222CAFA285A4D0B830B575B8224A4A18CBF2DB76AF865C3ECBE6AAD67033C9D0C1A79182DF0B9E7BD05D834409B00BF6B7EF03384EE8E2D1C3B6AD4BE3A90A4430E56AA8EAFDBDFC80A7F7D58F649D689D62377C40C4A72660D61C47BAEE3BCFEC80F0CCFD30D46F8C4FDB2814C86756422A9AF82B4CB1829726166EC28A7121E5DE152EC16DD4B5E9A399CE223E932DBBACEF36BF0D3C249DCFC7A31751A8B317F031E2BE1EE8E988D5A6AF09CC7D668AE00667DF4F789B767320DA88D45096114272C4CD6B14898DDF3E90A222F96EF86AEA935593060A02719DE9B202A18BE37174D580081652C43AB329D848B86D4250516A76D64BC397FE4465BFF0B9A1DB46B3284ABCF2FB3F52A395D9F12E716001114A5B971C72C35B4C8C850434696F83EF347AD8D4FD6B68789E623773FD73C6BF4191F5A5305E006D299093F23C73B1D84BA4B990FA2886EC8802BD73C1EB0D49707B9CFAD4DBA677CC284C60A421C6E99261A3B550A8357C3D58FE6B84A9306C85D0E5389986542E7388751474F2661E40BE0AC66669BE7BCEA593D033B3BCC97515302AD23190C8A777B66B56EAAEEB08E59E3F2ECB65541CA14C6CA646EEC35AEF7874CB810AB9A80C2D204514936FA9C86BC0E2F37D5BEC50B971B371373DA1AFEE017CF168CE02E9A122083D9DBF1E9E12473FEB23B1DEA4735951B888E4F1B819A1115BA8DC8D87C50A3DB60C6B5C4A0FB28009B6CC56DC0841E0AE802F161E43D474E3BAC33D7EEC24618D29A928E05C5E0D0BB57C8A912C35815150D517AE7293B97DA44742232A33374B6A205BE49CFBAD1878AA9C358F52176DA4432E1388180D0A335FFE5EAF4A47A4E4C5F50849BDA3C3D7128AC4A65E8120313BEA5E531EA8E82BDC29821CDEC370CB9489EE9A0DEEA7A760E19672A93E8E536D63A777A31644FDF4262C0EA5E06DA0F6FFD9E5E5325D1A835429EE3AF7FEDB78DF86C04F2384F00D32ED5C2D79CCB24B58652A8E0B919B5441A6D31114176232502554BAB40380D87D29C9D48483556CAA257FE43F2BEEF0B8FAA99700DE74DC7CDCC151C1B52B237567F5C460EC6FF5913E4B6C37FDDB43AA3FE8477C2BB802FC7339A16CA361B2A81B3D30E31515D55E0A59D0EE92D3735A4A46D777722C29AE134FDAC44D0ECA434E8593AB4D87F99EBDA7083E0227ABD747DBCDADEAA5A30BC0AB0E4A63BBCA0F001EEF8C3C035056CD105765FB1259866B17716128AC56EE8BF6AE34E5C0433487855483083402BFC7186D75B2CFEBE111279C2F21BF33EDD7BF61B83B7804CE1E93A803F7ED2B76E61D4E1D0FC48071521C1C7F38439901BB77B28506D2A1FB2A382FB78DF609A0AAEB7D97F4FC392C5456941CC7A8FB05742D3A5A5443531B7996056FD3EA256F12F7E89E4B5201527F7A9789B33909466BC4147F359C1B5BA332F6ED2F9C60570C5210BEA9CFF73D4561D091025BFDFA27281B13BDAF31F7A6208F935C83D5C1A7260FABB1B0BF5EF398C098154328D7320DE689657B3C7DDF4D2E93D2AD0111FE527559D9D70E8A581536B2FE1F65A624C3FA9CC96D809F8C1BB9EF1BB7D725B2E7BCC24BC3B87278685C0438445BDAA6A6C89F025BE9AE140E212D0ADEEF1356ED1F643A09877E5B908ADE7CF06CB67851862DC02D0DF9B5D2DAFDC748B2D0D2DDDBCE7D55DDE835F6894D3B216063B0911D554A4E42FA28D9F82F65221693BFB79F20D0A615BE11BE1D9ED28C9BEA50996A61ED4B6D7EA38DF354F82A6F1671A673F000F72D14D6568A69A2938AAA177DE46859885F64F8ECE6978C6BF7C8CA907206F7398B702EC11DF329036BA65DCFAA3FABE9D8DCAFBE473B6235931EABBA362F6F4CFAACCCCDF4023E9BC4E7E6B6A0F091797E3A301CDC5E7566792C25F17D1959AD0C836BC1F231D925D75333179859ABA44B553077767C37C17954CA6C9E32FBC495EECDE18DB0B45BFC432975A1351815E00115137835CFAECE13F1487B7B49100D424980B00068CA5716F97CA2EAA3D8E06D7C8C5A853EAE39F27ED88EA1689CCDFBEA091F4AE96E92FF825E1FE9276A26F61ECBA9887D3F3DEE5CB3678F80EED613C95174E716E9DE2C6B11D51B25975C86531D839EDF87015B182FFD559B3B72F487D8B0F39F9CE150790435277ED34F95A24C1B23D27810510DA5A34E725B83D399D0374C715AC4F2618D522DFF8CBBCB60FBDE83155C53143836F48CF448150F8DF2CE57B2D712E2C31236D3130D133AD60F68F9EC675134C89025956050FD9EC178BA56076B35B909592F3718A2BC882FE04B9CC9F84D7F7D638E52ABEFA332F6443D0C7A512FF15FEBA81CE58043E8B78457151D8105800EE9C9825F644DD7F726E37360B12998C11B2DFA4BF54EFE10D77355F1612EB0FA875BD5FB87267BE5E8304F554166D2C359EA7993438BCAE17587D21FC0D2078D0C8D41F693EF2D82360BC70D2AB1542650DF1CF64DA97C2EEE2DC111331AE5803DB5321B1786841C78BA02F48BB19C4BD42A96971DDC9D5EE70744D24855F46935FBAF73CC9D4289B4F0EFAAA4DBFD44A8FAE7937B03182612965B8C400EA3D2F80B7F7BF9B2B33427D585F563B3B469A405871C6AF841D0140BF3C6414568321A006376E4F05C31B95462DFA9EE751270F10D134529BD9F3C45B68319B1476DFA42A89A2333E2DAB5C2743304F7DA4940CDF1143F0655054586BCD692CBA42519D604EE78BEF51158AE98FC6041149A30C175D72458D8EDBBF71733CB27CEF644DC22E812D121FE71432D8531EFD7DC1765EB6F11CBA9A1408A779EBE1DF86DC9A84A0015317C8600A4BE4491E60F99BDF3950EEB33DE889A45A973251BFE26B44C03FC9FC923F0360C80B5FA6D4EF66A15B7FC8D01EE95AC74E89D2C176F6A9CF43CCA995DFF44D778C7C0054D84A10D952C7430EA8E3E9493BBD44D6F111F99AF530268C506649156D1A4F3952ECFB38EF51B3A7D861C3B915DB1B6EE1999E35792920E127EF99AC4F1A5D20E2B4277E704BC424EBF225AC626C084349760A6F3DA1EDF9C010E11E6CBE7DB84F29B712D9A5B148F6F3DB76EE36F55BC1BBEEBDA0E38DBDFECECFDA597A4C8DA2C984AD60AA1376F9C7E7F7BE4D314BAD88BDB805C2F4608EC04528AFFEB39E6291051EBB4A36964A5756CE339A865CA12B9CE811B5F4B6BCDC8D525A9FE10BA27DA7D6F82D4BC9BCBB63DFF3BA89E20C29BB483982D05EEAB1C936A61EA2EAD1F85F1C52A964A471BC50995A6BBC812D3054A5390DD53EF59E55FDB0BE507C647988A1485E31A513D271269BAA1505026EC3EA154ACC20631F4F3CCCFC16FCA6283C978A2E1E1F925106BE71CE48F17DC637B52D87EA8D878C7B2A76472325A0402BAC790639078B9D4843ABFFC2453E3ECDF2AA46BF405D622A53481B9F2B3CF29EBC66F74643FC86B9766CDF170EB4E50616C5A5F9590A0B1722602941AD3E2F2ED3489444336508523815A222B5463EE5A9DC06D2835B5C04013C955FE423F02227FE1B336E72DDB85A4E1F61B09811F9493C2316C90275A902CBC6EF8DE90DFD2EE8E647C821183C600FE9F32555E47C1F7528920258700D7F57BAD3179CE5AFC34362836AB290C4DDD51EB428CDBCD76B1D861C4D64FD81A7DE2CFA3615B755C17CAD10044693A31E29E6F13206DE98AD9C7352B4FEFC17442FC7ED4316B1A6C3CE16F49955D366E66A034FF2FB1BA709724964AD25EBD52FD9AB104FAC2697D50115F821D1D0B8AC53FE45402FE90577BDB862C6EDD41F0BEE909C78576299810BFA6D74B19E6E82AA2E11319F1534B20CA1D060604EF88295F7EE75EF9E95654F45D5D9A2D77F7F6C3EB020951835DF5DC37859F326ABFBF64664A08FFF031C5F34C8510A12F951C89068396AEC910B5CC558294019E1E12A8E385B2FDDE51B22365AD375405AEF89D59BC50072AB851B9001C889E2C7A73FAEA6E40E7C4E8C58059670B026252EB0B22C29DBD764075C5E3EE3433017A231AFCF83EF9D5497D64AFF89B23147B46357BB5EB79426324361FC5E5482B23B6D4257F9BBC953123A1B0C20E52E2ABB69B852182DC06498DC67A91FA1B094B7DD1689061C5944C9805EE1FC108E7E5F939A408BB3C53F10098A265C9BF5D5541615D569930FA0BBECC0EB6781097110E3A8C18E60F62A8E380B07F4CB1DEDAABB50F4561A03784BDB9C3F78B59605FAF7DA8C8579294B4B81A2A6A0AE584977BA4E367396AB5746538A77193D8A395DA4787CCF3E830EAF71786E7439359F5086DC57FC08F79E6214F6F0FB6F0096CF9E6BC9C3FE959994DE83925D397A6D9B47F3A5B8C3B1FA6CD2EA6B8958F0B38560C7EB21B9F781E7A207793A8D15C3824BD0032747153C3571B305E766DA9EBC361B46575F59B746149070AE0C89AD095E09A425DFE6FBF6D4E4ECDD07C219FB21A3AA997A9063F84DD96CCBA79F2C9944B5A6BF4B0DF2AD0833D976CE24E38A3421C651A47A7DA311C085CCB22408F73CFB68E410F5AD9F14CE4DA2CEC794C62D767C1863460C5D8BF04FAF11DB99DD7A0A88F11F25BF00A521D7A71E93914B45C5A9145CCE7010C65E8095FE2420481C3D1415BDE99AEFAAAA2F797E5EB9A6A01B4ED9B8C747432F54B0FB0B3AF85BCBD29F4D804ADBAA1CB098AC77AFEA4FEC2A031CA8A438C5D4838A45BD6E4290E3ECA9B2E94148728DB637BB3C2BCD88C7C3882179F839628BAF503CB349C6B582C36E35EF9F78036E5AC48898AFC775709E7522A4D6CEAF60B6E071D67E5035C41F0EB8A6B91AE3C08C1C504F706D149E152A30526E34DDE6135B3882F20E05D36934AC085670D9B8A35A3435711D6D858744D6F4095D2C46FF5D518BA385C3D64299EAAFA750F89B31933169E97336FD1C85F66D8CD19123B46BA30C47F8EBC26BE48658CA53CD1D14D132A057ACA9B7D650D683EBA9065D045E36418EA6D022D1EB955DED36084FFFE967F39BD040A81FA988C1D60E315A3327A379C6793F21FAE36AE01F6E833ADEE87582D9A96D4CD0A98392E7CC9D63A1D61656236BC6AE26780715200045499166C9E8D4C4F3DE718232382F0CDF5A6251F40DBE2A93F66AE6118A66EE51CA2F8EDC57D7FBC96D68B2AAC52082ACD6B7AA272B269646C684968009A09FB3ED9FCADEA516ABF4D5346EAAF0358873190CBA53F9892DB4444603D279E89400DF7AE0CF7019E2F0BAB94DF426564E94EBF1219FF45FC3C2590BA07977E9A1A1DBD202CB2D474F0B98E356762493C5C0B9CD0838AF7DF6658B6060B95F4950336C8B457ABFDA93A28F471897A89B57188C7832FB097E6D9294016236A7ED9FA25E2B4AB35C8CF920AD33DDA27B018BB999487DD41B465CD2954473B6C9608AD7E20AB420C0A2FABF1E085558C9039DF22F9A01D436232C2C7A12F72FAF2A1B525AF3AAC4332E204CEC1A2025BC2E35E18CD4E50200B62A044190D485B80EBDB08A252540C26BF9F9A6730A91530583D8705DBE22E8861D514EF344A8A1DF44A990913F983BF3E6E3DF0EB978EAE3E578AE06C27BE608B99F2AA6C2A39894FD9274247B8428FAC528DE0A0A21F340C9EB1F4A1C7EF9BDFC1666F681CC1B5D4FFEE4A06AA686A4B9393514C9372F0859D6B610790D23A4A96DCA7138E9FC357346D9EB3BA7F6991CF752B1085B75575A1CF1C90C7218877205057C95C1CCB2B60A840D51787BA6E36D752D9948790D3985AAD127480AB249F5E647A86A0427B8CDA01435CDA0C4CA9EA785AD8AEB34B328396CC0F88943AA309FC88A5E3A87401990B5DD2414D0173022461360CCCA49E83AA9C3085E94DFCEEC9A7E62EBFA298E9FB1E5FC0F3770C86C730D9DC42265B43BF7B0F4C1C24B8B7C69A30DCF3B72D0A737912BDDAC5E517489B8AB85328FF7D4ECCDD99C196DB40E479F788820C1A618CA8EBF66F56546D9136D196A52E1CD2DA70502097D6BF689D52B12D27D4E189F5E4975AD3C5399C356D09CFC8A20E572A859530AE96BE497A48B68C447CDD6D4C11CB29D5B0D2509B280CC9FCEB7EB6382BE0832046C88C0E139537C2B55D5C80CED7CAAD22B884F1A33BE3127F96DE4EDBB4EBD02ED343C51714FFB1CD8899F8C48BCDD96EEFDB8E33A705496098D50D129B5D008A272E3883B8EA3CA29062BF8BFD84014DEE5758132F13BFD86B08B4F07AD93C54594515E403888ED124D8B49B4A0E2A68FE32C10EEACA5046F99B4EE5A8241AB841A17D7EB507427473DC94DF6DD3EE080E20F3005684CDBF8B43C043C6406EE221F917ACC0673739E4C1BDB2417210AD76B7E73B20E86DDB34C3627A0E2386348973E5934C3990C5BDF18F2B623C21B8F2BA6F3F67220F035CF3AB3659B8FF0BB8206D978DA463727CE26951B8E22F94D220A8B2263AB3C7D94F26C3BDDB645A5C976F37C025AE69D5B8D22AB0D505AB5C49A421FBC9D918DB1EE5243C6E9A630FD307C4770B7C236265D9287ED37A848B150D82EEC08F88110DE3B764CC940116C21CC62F565B80D1A531F0B23BFB09014282CA31F411DC6CA7632DD055DF3A9781F1E58CA382C0E696B4AF44AE76DFF6514DAF34D5CA21EAF04F5F20F9E7F61BB887AEB7CDDA6EB8F9C7B393F6B492CA21FF017515897BCB85697F41E4A0D6891BE36CF0CC224132B3972A7BF546AF08881EC9FAAACF5C4E9EAF6C5844D49327210F0AA05B85308427DD9527F7B1E7DF49693BCDDC795FA3685BEF6CF090345AA75EF9F197E491B791A1C6600E366933BF49F8E317543DFB86FA6FD63E75436467C3BD075366CA3DBD0A3AB3D8D3959C19BF0079011B16C4F8D7D2A8B52A062B53C8848BAC561CEAA940AE8D5F0198E11EEADD528DB84C6E09FE841911EB323D7C046EAD895D92DC2E540FD5BEA80C99BF80478CD99CAE455971E71A89C25150CE2B0C4B4528FBEB3A63CE3E87BEE72F934BDC2529779E31128051375B43DACABCCAF4926819F8EA242DDBC641D91AB4026BC1B6D81944984EA9BE7C303737BD1584BFE68D3420A88B3201199E9E2A7A36E3454A062BB89D28C23411064586A403062C518A6E2061589B3616EE490408B11342A7CA278CA899898FA274FAD49F583F6397DF9B100B5F0D6385C783447FC4C66B3F2E1DA36E7DCE698D8C55925AFB245D2F6138D22AC9A8DD85881A70DE3EAF6E19B4AFC55AC7866F2374B6558DCEEEEB3527EEF9EA09AA7338CB0A1992E7B90037180BD26496B259E716100B5568C61ED7AAA415549B4F9F2E478E1D4BFFDAF6344A764EF3D7A75A3D379A2CF757E03EE6D265DC1F1D44F98A9D1FD51D31CFFE553B595381EEE76D95A4031A38A0BBDF9D2CC9F88B4DEE088C2AE71D8C7299DD73118CD617F50ADA28C5C19958A7129CC3F37D7F24551058C2CDC66482A17532F8079FA0520D7F3BF1ED3B2FBD4F1CC44595D840216ED51025482B980800C6693401A1F04AD72F8F941200794D55DE952E82368B316F0805CD0A74B8B6AA918F16B7B52BFE67C459B692B1EC2EF12E87FC106C37FCA948F329F779DF139FB7DF20C999A0091427A74955BE560331D7452E5327C8902DCF4AB362CD6F6B4A50972821DCA7838FC47A4069399E6F20AD2FE8B07EF8356B95D82079EAE00703D242092673FECC3CA0584BC3AEE435E62E768185F54216CF0730D703A4C197E61814AAE0FD6342FC4721112694CA66D52665E3CDC90034F4E62AF72C41FCB72F35EAA742C951319DE25BCBC4EDAD132D732FFACE0B5FE6C9329ABBFED94C080FC6E6127793F76B76252C28928DF9EF1276910545E135781D7F5FA08C6EBB16F1CFFAC9C94920168A962225C22D02868D5AF55656CE14F39462BE3D7F767AF708C7BEF3E907DCA9C1F23FB9DCE49AF1A43048B5BFA44261E59606F953471993C5139C577FA21AEDC5B263FA0E5E33E930B6411ECFEC49EC86939B86E4D014B1F818BC7B27B445D30652A9A0AC890627C5734213DC4952C4D8FD1F78C5E98C3815D9B359B1CA962219A0012FB0A60034C8ADF37FE3F700D90F3AE940BD8F1A6393EE1D161891BBB386882FA3EFE7EA49AA8594072DA747E88D8DC358F87BE84778191C2B820EFD8B699829BF0FAC02373D13CD9E56933193DFC799BC1166DFE816ABB08D781F5C4C7F53025ED100B84BB6E562D5E12A144AFFD8E19D1ED58ADF1A4600AA43B198B3AD0B84B8472BCE99FC06A5D394854DF5DAE9384FC7ACB8542058C64491A9B34BBB6A3205AC20CA39A6075D70C00BDB3D20373CB9A6E80568437714C877310006456B312DEA2F75FDD5C905C8BAF85AB11CDEF5722A57901036B8A71B4AF8E9469E8486EBDDD0F03A45976F0010DE04EC581E3BF34D9995E4C408A488DDC7FFE0983010F01366F85327265F22EC55ECE1E4C07FA424E2513DB55F43BF3AA256E98F9B8CAD417A8BD38291FCDE5E8A91983544019C1E6FA3CC97545FDB31F77B2D03D913B1529D49120BC5B79FE4EC9929A879891585718A115ED807678A854F2E4B6F5A81500302DAA99906CCF0605C54044ECC205DE8725C200A20BBE4B164C5E8319B29E65893C85F28C032704E3C7A587E379C220A9C030417A3CBC94BF9BB60E7A2F5772065BA35F67D784250F30A1FA22D6570402FADA03D83C4EB5C556BA601DB3F7D1E719F13BB6DA501B475A84BD3186DEE1E5F12F7E1EFA4A58F3C5590FB2BD7B5FCA6FFC640E357D48A5807A3F53981C0FAC00784B132D993759D199224203583CBEBD9150F66E06251A095E8E63E927CE546E74B0919487D2C1642417049D9934196AA2A3FAA1466F4AB01AD5B62627A97A3B7842AB9E76DBA4A07132625788F1646AD0FCB572D26D128C47B2F0C91F15DCC51D229B3C713F2B13B4B67E30C78CFFD56DEF237BB08E7E0020E232702F41B505FA0CCE5FDE701F58E4263A664553B7B2EC8707314DAC8B7FDB6931FEAB61769D3833731E1A65AC400FD33F84ECF2030C72DBB493EF471A0A4A794B625C563E1E22652F79150EA349A7D32887FDA40CB1BF6FE183F88B90359AEE458C7840F52F34AAADC963E09E62B7FAE06DB0AFD9D65878B0A18EC78566A21E8BA49D870438CE06E36518876C38E8F9FD3B50F97C2CAEBE4C80583C6933448315B3C5690E5DB14386E224E8D28F15A81F8FF270F45525101EA8FF47A5220AC819C8C58478348426EAD353A5F8677DBCA8EE3AAF1AD75A37C6CE66B8A92D22B6C296C34D38B02309624D9BDBD4708AFC63B7E54A6D010AB17A0AF43F2E24436216E54C68FDD69141C36E0BF478C8D8D81095D3B25AFD3729D7D38590AE750562226E8DD38E26BE7A7AAD347C3CFBEF90F423E6CF66E82F70D869D3AFE6DEC487355910E38CBCEBE2F8FFFC704EB12A4875BA64E0C02C3A0FA3C4EE47448A51DCBF9821B3919C8FEA32D0CA3504FBBB04660DAA0BBC0229FB4675AF0BB1D55B46EBF6F053828951E42D4F58EB74F7535D4DA4F1A1357FF4039430A03D1699B286118202032693334FDE0113E741C388F861F76CCAACB54AC1A0EA51AF8F0448FAE1F61BAB4F408215EC3A6579814458243228EE9B99D8700989835B9FD4B69367E9DA7B17A6F02894CB36F835DD636D668A4085F829B7BF946B18BB91160ED7A60915C18E8CE3DCA4ABF57105D125AEED3E578C116C8D143DD0EACAD8357F5EAF4E6B8985E718AF929606AF98416D5C0CB91A657CF10C9B11D5879227679FB4AFEC8EC5EC1B5B0905B9A034C9A1464A5A3C4B8AFA17C2A7A109D29CE9DF19F82DCC2A824C6989689A0D718856917F7699BCB542A9DC69B0A679223483C3C9BF5D8894A4DBF1A34614549F7AFB5C9A7FACF510FA35A43254274D0938F10B97906195D2FBF5E14E2EB2725071AAE8B6C6971F663BB2C677036C0E4E0281D2A6143AA95031B6DE31D9E845CF0B5942C13279A834CEBE4CEC6FF030B823D0809F5A9FB5BF5C41B3C26C2170476B1FA5DB5E2000DEEA13CE0790211295989EE441438ADA6CF5F06289448334E83AEFB6E2A855A0D128B48623A257F3561A03E69588D04417CA7038B1FF4AD974494C01984CD1ACE8257AA3175C9C7A00988D94982CFEF5F5C859FC537BDE3F1E5986480D29C76329CFC6BAC749010B0C6760E0A3EC528C7133B6B8859C66B43997CB80971BE1F5CDF2CCE35653BC8D02DC853479CD184640D86910AD39F64B8C7A21AE9A5EEF68F6EC50EAEB24E3E3483EACBAC37BEDFDDC691FA8E3E7EC5A304F073BB7E611CE19473BCAF316C10E9C275C3169B79887C6998CEA3D869B5095F32C35DE93DF12860670486F0E52C6B54B7B1642ADE2C57BAEF1CA8FF611D86C7772CEF342361C3490EA124CC6D41C7002559075EDEF485221192B7C91422EC1BF5CE43F29EA18E91830ED66B441771ACE097E50A7218C823E63A337F995AE24B2262CF30EA6A2A5EBB73FE539872BF0DE56EFD64A7BC66B1962D524B12713FEFF2FA79D006D37F2DE799747F57E680ED61D0F60E4AB86C78D2D1201708EEB3EA3555826D24F4950217240EB7698CD4837BE8F800F718CE1D356A6E9231CDD12225F1FC7DD2AF0D79214884F02533B08363929B024CDD30E6F83CDB6A0054E7BDBC44CFD35B8FCEF5E0E2A5B310D5818BC94D2CC3C907912DE7D9AA4AE3C56F58B97A3CF6CEAAB9696E30ABD06BA75E0075FD01C139851E3496459B1FE5967CE2D60C127D7EAB8233E678A63F72605290A5F80BDFF4B7EDCDBB6CD86E38F4DB8840AB4D33C65B083C7B2F097AB9E9A223F285AA7994DAFA5F850121BA27B6DCB63664DE50A789424A7263A6EBB92DAD29DE5230E1DCCAC9CDF035574687892564B5A1676D99FAF8FC80135C7A991C1C5F13F69E7756B357EC52B47030530FD5599A37F3E30872937106983AD2224DD0EF3EB1A8751F6AE5AA943B66A097B015972B5472F090302FB0BE5F88CD2C13397BF5EF2B95D73DD57CB64E47806C548504B87CEE128A133BEAD4013874A3C67D3F276032F4E32A55966C740C2CAB2675518D1539FAF75B41B5F85D768AAE9C14734F5C32739F3B6A6DD36B5A50B7F1B256CFCCA23F782E5E92057306F8066508A02F697F63CD657D67997072BCF70FFB06231C1867BB9FB2A1361ACD93D82F922221D195FEDC11E792E436F7C68387C8AFB892E0AE24B1631342C684D8A4D8FAAE889FCF56AEC8D67166AEC577331660FB6BCFD9EF7458768A204A1777DACBB30D853B0F28B4202CC4C68A71ED79BF85DF71A83309A008EB4A93F7E95DA329A239CE9807B303E1D2AD24D6D9053D855038692987E2B31FCD09B102BB2D026B5019EECFC381D99A9098DB446EA007EDBF700484748D3B8AF138CF11BEA56E12BCC5FF8C62E010AFDA71CC755D038A7632BA8496F38C96CB05829454464914D586BEAC16349502FDE9A89C2E1B5829E3CF29F4235FAA09ABF1C02A88914A0853AF5B1AD9D6F752A241080C94B1927A10D00CA1517C01034016D420F457E1A66F250552F41116E51F763D60F47D0DDCB88B9EFED4D1BADD276754B2EB195C6D71EC4B78860CE1FFC3B6324D0F583DD5B10D8041AE0EDE897E54A84E4D1ACAA2222112C86CC072C84E06E9D76FAEBC9BF049F29A5377539B16AA7E64A937897C5B2FC51DA82EF3CAA120BAAC0DB297A894CF82402CB81A44D3B44A77F7A1765D4968F600E8E9725842338732B80E3A700EB5AB09B426BB45768EB7DC9FAAB7C47C191DC322CDAA0200DB8D57A583B22604FB5421A493BB15FF8F96D364109D3EDF53686C4C696522F108FE2AD6E061ED777C5A4766E7DE08743918C2EF1D79AAB50B1E20D260E5F77183EEE4344FC89545A6F870ACBF403820D5EB12D31D6C240C1F4398AEA50162839457D8C21CE1F2DEC64F7C458DB509D60B4EA48585D48572023585B44552225C79AC451C5C007096CFF0A7E7501E2D4018FF5916DE5525B0807883B5F42C9146D9CBE1F6178A6D21261684EA3D9C5D28C1F5AC4D9C63315D2B140F5EA55B9C9CBFD52A894CE4174D69497D3885FC74BBB6D6B5F754B90D8C5CE6B4585DA08B0590397B88B28C17CA7E8C5696AF4BE4E0B1B821C059E933D233D6B73F16C0588A9A21E921990E992AFC59D0077A1AA40081A8E46349759191D6C2A13DC9BD02DFF3D609C9F6151D84550F96F08DE258CB9216C67C7D7C4E50378260D7179CFFAFF1E857892A8E6D9EC61F57D48155A677978954D80BE1C788B5287ADDF68DDBDAB732F4235AA407D80081DCF92D5912ED57E6DD850CD228FA6F0ED4B15CA0A87029F02118415462FA0C34C25CA6CDD5D49B3F0D71E86ED6554D8CCE3E9FA13AF2AEA9A9BA60E36F38C84419A592B920A3E4CAE2C1479E9393FF313E7555DE83B8BC5CF50DA0C0603C75047757688AE78DD5B7217632338397E4AE5A15FF72AE101EFC6059BB6AD4DD03448B7973E9681698832FC1A179C1671E8F227BDF4F6FF58828FB5DE55A4630A9B14D4F35DB6EB5B212FD99B3095821FCFC2803F49172777C257686E7133D139384F984A8C74A1177164AD58617424508B1D82A49C278725D9C0FD53A2D6BF0ECA520A0F77134505F33B66234CCB846F34BF9D08D453752A79AC1188F8450D2FDBF02ED48DDC2183F2F299F6D1057718B278CCDF0C957E409B86728DC1B51DF622482541ACE08722E4BC450850240BE12B616D6AEB313AD3191B3228A242CCE64977513B999613FF54F1456430CDF1FD9DB57F47B089231D6ADADBE6E525D6DB5F640AE39F414C99618073B7C1BBDF54A070E4EA82497C9ECC5401D33CCD4D4320A3A08CE57F855F22D19FB1A951671B22157B4FF5DF54524CBB839FE031DA64880C8472F37CF9F7A10AF081A316F49838948FE99076CB5F73C90FABABC8D8B55D7152D76187C4AF81E2D781457E7918927ED5D115EDD3402B594FBF566DB88CB80B0D634A11CB16AA55E248570502F5637E3F85858E3DA113C7354F06CAF09B1D782ED18EC519EC8AF2FE73DABF9583D2C5BD11E07F526D52B69F2566091EC91DEEDADA3EA7A72DA8D2E77656A678A66364C3949172AD66302AA416640A501986DEA5EA0E83491231234E066A936B044DE98BBA0D370B6F31C2A859E0D78ECD60853145B11EC68938D8679447969592619175D49DA166B6C12EAD7D4E0013335240060BEAF1E97401D5CBA2B0EBA587818822E2DBA3100598AC6DB3F3EA988FC42CCA8E6EAB18C2583378BBE5CE713A6ECEE1BFCF48998511EFCEF1C4DB27CDA060FC6B64F7EAD99A4260E2D46E68AA1B25AA32CF010D38E496875EC1AD923C51A6143959FE92CFBFCE68D0529F8B28BD1D5A7F5B97915C525E503EE456FFEFF37F196E563D7EE12380B22330DFB1288FEE922502E640D3C288BEAF178A9A746DC7B0A08A6F927FA58287DC452019E5287E66BCF23A833E63C2502DD4A7C1F4FF704844B8051284B498E84F2B2E850829F513AD0B4FA3D84777751D11978846A615A29D16B133F5CB37D9369B2335D53182B51547FB779B4AC207D6D77457F77AAA528BA72D2B59789EB465BB663892D211A3E1C758C91512C5E649355099884EFAD1B9C163D48EAD1BCB30F11A59394E2B079B8E993F9AAA2A10C07FD00C1559B3B3D12A2D9E14C6E9B8270499A8927D3EDC2FC7A6F2E19917D0C4D8303037530EBAB407FFA8FD3FA5BC9116653FAB370A45F47F1A52721C23B9DC41D65299CD29FF371C4096EC90FCABAB9EFF8F2689A77580D7ED559291463857913D4D6815709B4DF9F79771B3958DEE5807B8E08847EF33B6CD800CFC783CFDCDA2629218BBD78E1EB08487B6A6A10A44C8F381AAAFE50096C4C154014BAC2CEAB872C459190CFF7CAE1160AAC943CD59BC184303BC5998212E61B2032408E1687A14751AE7F2445C433A62D58DB09E7CA1B0ADC04251A5298D4E2D7752AF4AE5A1ED48B763FED3F9B88ADF311CD1D7ABAC260792E77FA45CCA1CCD2E808B3B8492852B97F867FCDA24D57374B1EE412608D49885E239D2E3C88851AF23752050593F2D3A7FD173F6E691D1E45B2C739D7389BF0911681111EEFD8F268F6BF9F8664D4C69FB5136C6B3924A58DE364EB5E67D95745C6141FD393ECF0D6630231DEF0DA89BDD0882BA0B105D2F16717F52CCAA6CC9D0037D35C318D8CDE6171267C6607938D4D3D1BA8A7B6DBB7A898225F2AD90D765FC7898116D143D0E30F32A7EB7868B31C82473B2147E85FC2ECBC3A47AED70AE6882E6EB31769D9D1D604FF9781EE0B0B06697F110C1A247F252BF01EA391B837CB49810A9A1F328298B02AB2298E4346FA566E02D061A439CBAA8C7BE78C973C0E4A94D84922A8AFAA888C71E08AFB46A8E661D701614FCD0236FDA53AE10433C51681FE615345D724C80AD4C534CE1353D905D6AFB1A7332760D837028315E99EB647BAF5937D66B4AA825BE97536FD00DF5DD25B364B13B165B32B1C86398099FCF3DE5731E687956014823708235B28253FC5FAAC13F910F811494FE83092EF41CA38E276A8FA737BDDC19CC311BD3DF4A8AC729CC6D18B3A1A146D1498A544C743620E8119746894B696194B61B2B489EB8630B441A705AE7C0EA7CA99C14CAD1A2BFC4C693B454108F1CEC32A019BA980DAADD334FFD9C94324DDFF425C0E8E690690F1270C0F1DCEF2078FAB7ACA794A49B311A69F0AC431CDA669438489FF79B2E0783A8EEB353D0AA5C72FA05877920BF7E4660D98BA66B2BD9B3C2EE091DC062B32DB186F43CAA5B3F99B72ADA0290C7BE5582FF9C654EE36543A03CBE901B6BDE1DD306C24B5C1E46B2D7DEBBC1467004F05E05672BB9FAF93A6A0E9B0EC99FD70EFD9F772D8133C71DF0CF1F598A72C2B1975AD8A9896039B1A01506A34C072FB891BA9046E03D316EA8F918B2D1C8C63FE2BA43590C65340EAC26E3A97AE7E6A9EE9C18108E9E2AB34D2463FD0E93134CE2CD97D3EAF3FCD79657B3120A4D5421085482F5BAEB320EE0C77427F0A90A4153CA9AF45BA3DFD7D06460F3EBAFEE9D4048C35B1AEB70B4B9583D5A061A01E70F9B006AACEEB4DF00E40541E25B2CB55778E6E3912D566920F465F064F191E9300DC3EB88A83FB7600E0CB125D14E9F7CF9288D4827EE2A9881B8130C01371151A1EFDECD021CEE15244132B286596AE099949D3D7DA9901FD7A491743B54D079B6BC44DC229FF080C508BB04D157E7F4D4CE47A05A9EE1751FB258D6745AB4857C1DFE76A63FE4F092301731AAE93AD09DCE711B27C510556BFB2E2455E54D23B317599565B12336EB7A10FD81C242FBC2A4C2744758FD91A6888C4F6CFCEE6DDA8D4DA6CF78721DCC1E07A6B77429501279EE1715CFDCF79C2C616F2472405FD3F2ABD833F79714708644AA1D6D02001E3D8AE873E002ABC6F92F2B0C37773A2417DD6B63041497659B92C89D1F782901F18FDC8E5984DC999B2AD1DA3AE8D924B22602CBB83002AFB740BFFCE75FA9E3FDF9E16C4BC48248E0BD5A051B44EB71387898D463C8F87E0CBDAF9709317E7E0CA0ADE8E197985732299F6D86F17367F49543ACCF5A5B3A070220A9FCC70B3E81519DC15024FC89336B802BBAE50AD5EB0F91394791E02596678116DE9279FE479C07288D6B676D1DA5FD0AD1F4E9DB70BB24A147F4C641F7C627BF19D8CB49A7F800DF7F5234FDD8D102F79E050375A1D8513D15519DF846DF3FAC44D4FD0A83626CBDC5270708A4C369613EF7DB13D431A5D38966A3D4991F2EA98D29E8CFE57B06BE86916FBDBBD49B265BC110A0FE422272142A41AD620B256CAA7176D5A24A364407789DE38133377974D6102687B24A40078A7B826C603D5C7C00AA4C4C3A2C6E21D0964D68783059619476A164189C62FCBAA966874D326E6966B7CEB7C2487CD805B814ACE63FE02F67F1AFD3912D7BB963FAB49F1744E9BB9D601413B2660D89B46B4E2A0C40D560BEFBAF5334CA997C979C8C1983E95D44E0483DCD172FDF2226B3B097FC5F2E289A5C16DF7DA94D6E8EDA89569CE3124271AC21A27C859A88D78FC821D03B9FF0218349AE7DA4BE4151CE318861F0847A4798936964E0F0B3A7EFDD369F89A33AED49042CDA737794CB91963D43540252277BF15960817F9C952A5D210F0D51B437A4D7FA9D50DD7ADA893D8FF098B3703989745234CF836BD0C460DB0E0FDD9F8674C7658F4573ACE8ACBF67ECB8D74EE01F5907B767BBE4FF3D6209089CD14F5640BE11D0614250010C07665264A032779DC868128C3B3D5729921792E2D20420C731370D93C3981575A409E832AE185AA33E312FA5AECF879C11EF5260A7DE4CF7FD73B1AAD991A1E99DD3AFDA9EC788C4254B85C2A72CF02D0A450EB3DC07D40A427E77BDBCAF9CD2CAD11F44A080EA8A003E9BE2603CFB02B7276E1622D3D586FEDBB881A311500B2CEADE689DBB666E035F6F5C4477AB375C6F203F264AB1F6968784A443CF3A0EC12DB594D21084AB411E3499D3507B9EA758EB35DD9DF8E62A492DA601878245111406D751A4DF66E2DA29400BC3F69BF329FCE330C0649CFC2D13828FD42F50B6A08F2E9CF9F752B9AC9E873C2BECFADBE21F6C2DA67CCE880A67A2C0C0E911A75DF78900A3461C19553226A317F7B6F8A08AD3CF2FE32DE0F420775B160E5D6CA999F204F51BCA6B3F9FF185602F4E5255A6D55116B6AE48707499D88CFE378F3D1EB430D6E1889CE2F131A3A5F1514C51F7A435007158BDE4BDEC7D58AA9D476C99F66B374342C9B86182032A98F5ADA5DA02D74FE38D7D10BB946F4079C1A63D8C803E152866C7BA70BB84F731490B0A28B7C2BB84D09B0543716E92871E42D26E5FB982C1BCC9FCF13F052F8030CECE0D45EF41CDF65C9A4EEC1D6C180E04BDEEB8DAD442948508EB81D72F499CE0330590C4C9FB6D1EB46A23C247ABA6CAE460E390FDF16F0D1C4DD2E2C32194DF7228A4E9891575BFBC0FEFFC12118170313F58A3E1DE09BB5F525006C5AFACD9C3A7F71B746CDB4EADC6611000347EE35AF639C44D4F5B01D39B9E2D3F93F02DDE37E52B0A49D8B34710060C423BFC6791B18F21F5D91CB604B2825340200D4E1BD94AF89EDF9D42DDDEBBD76BFF59F8FC8A18D12A6A3524839791CB47FC003A95B3AC143B68D6423B021E9EEC33258738D83377F79478F6169FD2F3B4B78B600010D11216A6910A949985B669DAE4F928AF95417403AA11AF96968C4ED0B8481826D6873D74A2ED5277993B38DDE346265CD1485D74B48B1D8BC33EBACF8D3AE94506596ABB192017E600D849B02A07F83C15936CC9208F9F97EBE8062759797A917E5DA4CDD195EBF0C82B7AEFCA4ACE47437F516E7BB26986DFC39BDDD654A3A5A6D3F17FD9E46A29623991A25C130203F0287A618CE8E522D556E23912F71717C364BF753282A075536A91A77563851CE58897D3AC01601FE9E1F568D4E2727E1F3765ECCA232C4D1748B2226AF8585C4B0F7509673B241EBA46EC67013EB27825ACB9377DC4C0A9BCD8CEACA773029B726EE2533FC5C9D68A3C8F460D6E6968513A73AFB5C3C9A1AE2F48F1314E0A430FEE03CDCE13B91A59D2EDE75AA8BB794ED77345E7E6007E7F81EF49AEB113954769E225E8E25183AA72763ED1FD6345F2B6D0887F8F6E5DE231AAC27E9018FB520EBF8DF3A88A17AE687C4EC46F7B72D7CE6165023F939B03B3EAB3B3FD88988F24F4FFB46FD8F3313707344A28803E05C234A9C9AC5C57E7CCC87560661665EE7A7AF7F810D9CD5BEE78FA84DE0A72AC90E6D6FABE3508DBFBCC07E94F157EFEFE2B6B71F3A5B716E424BA88A6645CA8BDA8E04227499C85C492DFE4A7B24DEFE583037648AC8693CE651BC701F7F12E571C0B93DBBC8CEEFD2890860000348CCD8D4F166FE5A035F9E38ABDD2619CD65B08CFC083E7C60C623A340847B710F4D9D5B90CAB7A5713C2D08BFED0437707F0EC286B5756E3A71268744B52DDF38EA0BCCB70F08C696E9E7BB8074525201C645A80D8F1352D69F044D2A05DD0D7B8DC44CF2CB91D3010854A83DE5560FE400BACC1FCBA5979106A4AD8A1E2E07B3A39C692DCE80E812481F75DDCDDAE2E8D0BF93E8545EAD44BBA91CC7B56E5653A148E2C93E64D10D0204B736DFA976AC6CEC75668A029B7E14C5527F509C1D288D2A89AD53AE78AC68AF41246B8CB0A9D0BFB3E2EF99BC57DF69D7341358EAAF27B591A70672497608CA8B24C5E8D1371B84F99928FA1406A720304EB4C9D2E28E548882326C55BF14BC3B03CBA02F8D96858A5C42965A05F005AD13023EA02DA0B46624CED9441499C73EE67283FC07F347ECFB41A343412321A0E904044F4348326A7F2527E5BB01B2EB93480BCB986732727F82E8699251F257933755A5A9BE7979B6D13475BA5AD3339EBDB26924D3F54A70542DF7786D19D78F36D82B57138D9CC595B7EF2C1ED68C1B4B43A0B87F98C2D90A2DE2971364DAEE2B3C7BA247EDF02980CE908772D5BBB7E3D1C8A6947A41597D86BEE5D78FB3140DABAD4ED8C9CEDE645C1DA374E4A61AAD88FAF312AEAAE966D5591E120B2A9443161C04861C02CD60F5C77C995CC82EF9D174FE85E35B87760A81F9A82A462BE8588F3056584BF18CAE7C2293557835848F070A620BD3A4485405B91B641F2B8A07D7DFD071473C37738870EAC7F5F55B7EF42BC10662BAD070BD7BB56FF78280CF9EC21F786D5848DBEF01DFDE7DD5C3EA1B95300E97768173E6E3399FFF803488BDB9F5C00C58468C4F251D50B8F6D63D37C238B871B10880D4BD176C6D11AE34581EDE1D3B5594B156A9A971BDA075761E27019746534E194ED85C20CF4F0737C8F7BF5DF5ED54156174C0E14CBDB0094D754834BE79207E0FA3738BB4006D25566270D1A8283FCE939B9E4EFF56888DA559483B277943E4808A203BD25BE3CDF37B053F4D858127EA4E403AB846EEC56BDF1DA7B226AFB67A02A416B6C2EC731ED0563A647065E36214E3E7A8D56D0358841EC6BEE67D3F0A1FB2C45487E1EE402AC240E983F35AD3B56BEE4B1F958CA60A7E1D95AF6054C016746AEB639796702C5D13134E92E3A6A3CCA698ACCB79755929086A9568DBB7EDA21C9130B374C66CB8643F0438E6EF08A38FA4329B31698BC689524B4A29D3A74E797298D0FCE96B741CACE8A4AE4117D39A45330216244904E559E82CA8BB3C042F405220E8C4BF34E00B887A7C3CC617FF7E0DE310A1C77FEC788E917565E9450DBDC3489808B3DC7CB9BCC81EB363EF879CDC3E70266902783B0CE96D4429C8F87DDFB65B3011481537093C51232A10537C8DCD90E670FE95953F679DF9612ADE448F4D5F710AEE887291B1AA37DC450F3050CF8D452DF55441B3DB7F9B74BFD61E46B5F199BBB3F0490AF8BD8D73DC98CA1A75BEAF14B604EC20CC7020D4BDDBDC305288CECDA87C6885327ED192F5262F85788B2732AE634F60B26FDB7F3BC899B9B4BCFA45DCEAE7C4A56060A5C471D25070FE895BC97016BBF62A96EF4F41E91025C538FBC0918FF86EEC487A734F6EFAB442DEA5CCD437591D9562865AA5EEBFD8E89BB2EE328EA6AA41C77A765DEE7BDAA72308DAB661EE11AF78930CC3F22CE2C036539921753C21CB45AB5302AB1BCD972B4420298CB466B49A033E503B9461E8ABD354879D853764409BE49EB1835773D7C12BB0C2A562E5D84544E05AC26737F778DB5518477291FE303C6E1474F1B20AD5568508C1FE616E541B4C976372B5A91FE8C0C2D8F3DB27D6707DA400F934A9E5BAB9CD83C100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark{restore}if%%EndFontu1`65/AD /|______Futura-BoldOblique T /Futura-BoldOblique x1`65/$1 bmt^65/AD 200 200 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65363 -1950 (Contents) 0 -0.012894 374 0 7 A1`65$1 tsi^65t1`65%%BeginFont: Goudy-BoldItalic%!PS-AdobeFont-1.0%%CreationDate: Tue Apr  7 11:21:18 PST 1987%%VMusage: 37587 46369% Copyright (c) 1981 Allied Corporation.% Copyright (c) 1985, 1987 Adobe Systems Incorporated.% All rights reserved.  This record material and the data recorded% thereon is the property of Allied Corporation and Adobe Systems% Incorporated, or its licensors, and may not be reproduced, used,% displayed, modified, disclosed or transferred in any manner without% the express written approval of Allied Corporation and Adobe Systems% Incorporated.14 dict begin/FontInfo 9 dict dup begin  /version (001.001) readonly def  /Notice (Copyright (c) 1981 Allied Corporation. Copyright (c) 1985, 1987 Adobe Systems Incorporated. All rights reserved.) readonly def  /FullName (Goudy Bold Italic) readonly def  /FamilyName (Goudy) readonly def  /Weight (Bold) readonly def  /ItalicAngle -7 def  /isFixedPitch false def  /UnderlinePosition -112 def  /UnderlineThickness 51 defend readonly def/FontName /Goudy-BoldItalic def/Encoding StandardEncoding def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/FontBBox {-167 -229 1013 968} readonly def/UniqueID 6634 defcurrentdict endcurrentfile eexec9C940A223C6B1933A97A7FE69DDE6395828EAADE5964F4D67564874CACB00039C688F0D15B9C88650DC28DB0C1C9D05D9598526DFD569C3DFBED78A02A2A5A5F7A83E0CB8B5BA1207BD6004005555C6CACC77DD524CA146D1799E957ADC562EA03C7EF379071434948B368E4DF26E5B5E8148E5306B00DACBE881804FF9D2F45391899ADF09476EC8D24A66B0669A8AB55E56D0B4F261CB07317F46011A065C80A027F57BC50F1BA4AC17F60720D1A298033CDF76BD83D41F7B7FFD304D70F694E80D3F9B58C449D6E0E7054D6E0ED39A0E991BBD32A2788D7DED872A9342EF59CC036EC81B8DD605C8DF4ED6F1E89EA66F3E252E9A4C00D0A894F25AFE3DF64BCF2389C865B652BFC167948EA612C99AC1487E9AA8602F8C7BB9DCC3675275CC6BC9545703EAB607BC227449B6F66DD28C3C64D0E5A5780556D95395E3E89A0EB82C2EEC676894DB3CC1B3AEF7033CE05538469D83638734A71E7066059647FEB0FB182A4E381CF1946FEBAD27CBACD8B221DE1A23FD8A046396C44C55C635E047762270556CE08C52387A6444FA9421932164ED97A0B3450D94AC867DE551C3D27F9B4934D08CF6D09E6629C923D3068183D75D80D1F6D01AADF79A4D92AE42A3A04E4743CF59F5EF9C39CE58E1993D3CDDED874DDF32805530EF6279BB9A7D30ED163DF1409E79427F07C7CEC57B86FCFCDCF44BD0B6F8B802AFDE074CA97B6BC1E402AD9616A94E763ADBC9A1C958276F591AD9170826759306FE146728A56D8360D42FBEA3976C21F9FBADF66B3685B38028CBF2E62DF527FB202272E9784952D59B67769887329088AF41B721DDA38FFB44BEE2E4D34B2D3C5CFE151E383FA3DE396419A729255C1CC17E885FF44B02389808B44FEC0CBC717E920ACC09C4867FD2038CE34F7A66B97AB6AA67185DBD4E061F55A1E7B5F4DCCCA00F34901B48A82BC158D67F06A401CA858CE0188BA149D1C435FFA6B31964FF21653C70561C07064B3EB7BC728CCA97BE2E3171793C92B5B11071FFC3F84BA8B897A8D697A37631AF27D60AFF2E5F61D33B5023C6BBF20C8749BDA9FF660FE0427F5C0E762DEA26757E3BC9D7A321FE60B8806EF4016CAC3AE8117CF347CEE3BE148B32597A3A56B5F7D81CE3AE0727C5C3B5990E8BFEC8463F45091FCBE99E393C58E2CFA17E39E0B70712A33640AFAF6AAA23C5FF14AA63B38D60DDBAC9DB375D7DB60F57F39AF7A9BA812F63A8973B22A17B72081CE67CB4015FFD1B7FCE3129E86A818B225149949C61E3F431896E41B5A6372E1FB4393A66FD6BB45F40A5C4E9DAD598196875AD0F87CD960607DB76CF641536E86592286F2F592D13E7744C9F41B97667042C8485F876C4A5A284276C5806EBB27052A8D10F96629D0D1A7091EF50FC087B107D9E22FE9B706DBE508A4152E2618C6D4D6A6063A436284B849EFD01EED46B20FA9E141328340D053105D3D95D75F08ECBEABA239CC2F07B99AC35CAC765222B5D1512F5B566F0FBED7859042332300AED25B1DC87091E84C0D2B2E7C5F99C3969C825A7E8D01E115104F16C2195935DEC7B2176029F33EB30BCFB0B1E4926FF5C63F4574899D4D2098589C6B337D5997B47152E84C789781A7DCB2D79CD86A733D296B514F11D0378A70035590521795B572B86BAE78404E81FF05E801F06E4EAE316A7B5B8DB1B7D8E71BEA9059914F2FBAA0171233BE4C7C6E0EACE86420DC2319BA195F904CDFEC5ADEEE84D52B6BA486530A3F9E85F95ACBCD4D1CD7FBB214FB52E168A5C4BA5F2326FD2A0A2EC3C077638F7224C887184FFA5494E1F25150BCE8F5515EE4450ACC5471A4C648F83F251E7A376781B77E8B558B6191365E8BFDB429FE4ADC3EAF841BC62BFDE9112EB9BA379181C029CFF700BDD8B5781ACF6D6CE57A6668EA0AFC3DFCE741720C3EB5D9FACEE4BCFE3DC343B98673490990FADC1F5C8EA38497BFB894ABE0E35A56FCEB4EF15C17221868954A9385FA3EF1AF92837A95331AD0731096F9B59CBFCD10BF1F76D9775A9606301E63F3E66958F255813DD0FC42B2CB645A6CB379D317EBD3F46D066B63DAC18E51E1AFE88B14203B23025217A024157D269FD2D94C08F750F24FBD1F481BE2E236B0CFAB58F09EC69A4718FD7C4D20F25BA07A6A0C8027A58236B267CA98D116A95C854852F4C6EABC8F5EE17ACF8C146D85651568D7B4659576E8264F917B81C17D7F2905F16F761F98548D73BB6E4F9B25DD9789DFCBB460782441AE3DFA17148B13DF941575227128F8C7CC1335CD100F291DC0AF202A0D973BBEFC4FEE81E94D828DC999D5BB92C0C351ACFDCE69DA94E010B9183E84D3A4EF8299939CBDD17B61E691805FC322BA6BC635A2D3697625D320A99DE7A390B4D8624E55B7E97735F21CC5BC35DAD6A7625AF5365333EC333CD33FDEFA27C15107EDB1AFB77473EFD1B19ACA2321F8247D796C9CABA543BB7C7CA2E4C87873DA99F459289EE93C75017BBF032EF3517A432A91E1E245E58B7C9850E9C27F0E1158CCAC185725A89AD2B936A3C8E3DA09250C7712547A819177ECBE2BE36E3F41BB245BB957A79B464400C2C7A3704590E97C3491351F5B7455CFFD2FE16CE52276C3837A68DBD69A3B40073C6AFB1956EC814253260D13FD38BB350EB0BAE0320496C7DD0DDEFEF9B7CB2916523D014388743C95DAAF255176084C97F6CF21BED363DFE521FE4F30E2868AFCAB2AE9B00C8659385726548AEEDF768DA21AE05221D53FC4BC72F067B0D7F32D22C4DAFC1396FDD13613F63915E7C1F7F860F84AE849AF6F1F3F32C5FE47AD30E67D262CB945394190C822621DE27511848D9DE086E03101EA99A686727E837E8B4D23747364B1AE1F6C85608AAA2F7B9C41A7CF0D0235E3B07858B327B9A75D4D04760C9629D8394AA57CFE463FC72D3B09606A87D2FEF5B057AF4E88FD6050662A1134296ADE1F037CCA927E6E0650624E8C5F1E57D5ECF7CB07CB2EB213FEE14FECF8D34951E7E27125B8482FD1E42CEE9D446FCE49C8F5B707284DC736C5B6AD7A07461B4F1B87010751638BD0F3FBB209BA21F669CDC6A21C866199245E839BD5D91792E75EC160A0676D349A138D0A9F9471D42B1D6F45EF98E44E2AF8526B3A7F2597955905AF73A038B2D90609192D4B25C7744FBB84BFF632BFE113FEF0BD3EC4DBFD8F53F2AE926633BA66C7ED691B2325B0467B57B1AE1D979AB4AB395FD14862A917459CFD81FBCB99CB88ACA0DB36CB9BB9CB4B15A4B6E98A61EDF10D0ECA45D8A05D84AC7174D3EB8A196B016D1991EFF81FD4E68981F6392A2559D169422C175E403504C1D2B38328B509F01DADC5EBD990F83E2D6983EB5EAC0ECB597AA2EE3A3CEB2A8FF9AD100AE5BD473E5ECD36E34E1B4EE5C39F60DE65B0D81FA689858B0C586D34ACF4C58F43324B6D6BB481146DF197643E70F2479193F1E0D43052AB210D464AB647DC3C45E0F89E6083216328F8932144F2ED25CDBBE3A7006E93175FF8129D79F58F2AF4F8E3BAA4EEA331B3F9B98348C5C5CD714C57E12A2D8CB39A5B61AB17C14125BC94E9B2A713CCB68E57A55E5F9830395F856413BE53F65544B6AC5F5D3D0235CD842236D9905C948E74A8764467F9F80AB9E35C667E041F7CBF2BADDC857D42B7D96193A44F9B58FEBD157DD2FDBFF8F033C6E91727CBB972995E499D30D2E10DF9E2811A6E1186CF7C9BCB0F178DE8EDACF0347AFBCC5B05A3B6B94C81276026F4FD5C7408A1425F5824A86F814F09126657BA43F3DFC1F94064CE819587FA844028CA67C3C0740FE606DF74BEC0513B209865D2A02B9EF70502182D6A0D7BFEF263E6939DD68856D59985FD4E25F6E5236AC8CF0794F3CE034EBA76B240D9CEE37CE18A929538360E8A2BCBB0BEF0125FF366BBCE334F8E3D9C6C860D11D87A39C579584417B78B515D26AD3B063564F6BA89B58C50E7E4DE8675FE625E104C40BD84E4167C7757996F12C1B809C7963EDD358C90C87F7B04D1BA47A14919024040D5A34B6E541B4C9EC2B5D1E3F1808B4B24B9B7806A155227CFAE402895A157C7F6C93E0DDADF6670F370E0F3CB43D395E7B8887C842BADD4C8C7C65A11A44930731188967C8D6B0B196B4AC16FB6FCA4E27A65BF42FEB58C592120C4C6306EB1EB28B11011F10EE0580F5563E735C3E82812E7CECC3D34F10BDD01F62082A8D3F3D0D562E1720C1D301CE66AD106EF3A6D67CBB32D23E5EFC6EBC2098AE1661C1B1B1A5D911682FE03BA944E6B903B9C9071BD53F71026EBA27861D40D708F4D4B84EBC5F169300A46952992EB4DAB955F8F8444DB94612F332B597F88E821F8BF8003C719CB91D59C343A9CB13A39F3FA81DBCFC3C2119DF0A0034D02DC1DDEDB0DD62E5A0E819CE5CD62A6F3961AD5FA7E707D5D6F5C270DFF7215AE595476CB9CA8C92ED5D57A85CCF910DA77016F4EBB8591C48A367DEB6D6F76D51C688FFA1E8C0BB99C59A96533914F42D27913A9EB955A1277C1254E0DD2FE151599AB796F83796B1026F457B7F23141E7779E9D914698E3C41E0F106B50673F552FC91747323348A1A68DA1373580D5936ADF4C4F222DA1765E339B65FAB5DE485B630715D4CEA53EBBD2EB188F8B8C19352C34EA3532E2410BC260E15658746805C79A280CFA97CE61C1C9C2608C78B2F3CEECC3359510572499BB9AD9F65A16070A616E96625271A81C254B9F2DB5B21B129ADCB7811CCA40DBCF288AF7B4985A443C6D50CD5DF7C8367BA0B760FFD99220ACBA7712E9165600B37CD54FA65BAE4403E8694F6B63EE010AE8165501510F7C46E3E1209133CAA663AADADFBA640B28E154E2D2465764738C895BD439455E1C5F583F1B5E15596615697B6B875AAD12A17D68D615DD35CDDC99E78A370635C71EB52C3C5E2BDB455D84A0D0BE643F43FF8206086B90E7AFEC4AD227CC70F1CC740D2664FA5EE9D79B3D35F0FF53B10EFCEF79E2576A77FD0E9D96430E8BD37DD736A6B30ED64744A7DD2769E33CA947294462348048FD23E397C7919056B96344CE5249FC997B5C9ADCB3A3E456F8E878ABD43D966B8D22E7D073617586FCF6C19D6F0914D445CCD92D35D5437DC7778FA867549629A8A6031BDAC201DE52520610680114B0272EFA69F8A37888BA225A562D97962DBBCF511AB9280757427DB7E55EE831E17D5DD8E8B21CC675651AE9B8BB436E59587C6F776106B0A13076B8A63EB476E62670B371AB1D3229023E0F2883F2A763DD2AECDE12C7A999E9E25A5502B6CC9257F06CECA661E139F0BCC95FB6A718EB37CAA717ADD8511E986727D5E16F681756EBE04568AD673272864E073729AF6F5FC520999689459F5B44EE8F5A3D19662F61DF37818C1D7904666A69AE3434B66CE7EBEAA4FF4C86F295767DF7DFC14AAB4946E9F55BD3C156AC2672F0A50565BF7163F07C7FA5599667CD72E832B06D702BC09A44B9D764389DFAE6CFAB075355CC78CE37B11A5CB8D4AADD70BBB5BAF5161769C7C64EB7402B25C9E20594EAEB61012D2804205B29289C0ACE810B067D50EC6AE930CBC9FBE0EC1F93376954F9D31753AD8F3399ABB5715087DF26318361F9559EFA2781915375DFC383FE1569E9C4581DE0A0711907023EFDD83D87C3399C902E5DD4B8C55890F358EB29B9A70DA904FB683FA27E8A66949483B3F95A9CAA793B633306C2D3261D50DE64331108EBC2D0CDBA2EBA290500C08BC2BF16AEFC1BD258048283AA621129D5ACC2D1031D8097BA6294E9BFAC728D44FD5D7BB4FA3431A417EC7298C19914255D3857301AE73B16E525C3A252EF418AD5AADC0F84B38B2946A342ABFA025C5D860ED305F81B3199820252532B7925486F78C59E56C1124736DD436ACEF272B0BD4F788A7A3BF2A51335C70F0FE2248C2ECF4B194D8438D4059306E357671CA43B01DE459A86AAAE741A49435BF3353C84EB27C2ECA05571FAFF7484EA8F664A14EDC0B45C39FB55CFE8FF9166B47EB6B89EA35690AB4D63957ECC6A19F4CAECBBF05B0113F16529D9666610AA8ACF7F93AE874AD1188EC91543555DC9ABAD885616CE92AEE64935CBAEB952A83783FD63F8025BAB290350C7EE5325CC1155388C87EF836B07A5F2153532ADD0BE3C120BC5556E66002DA8FCEAD39724423977658E8CEF69CAD926A1AE4019B6592C865B492F885DD348E801086CE9CE5231DEEA41DA60AA89E201B06EB7E65E4EFACD7CCC47262AE7396CA205F1E6989D8366206E493A17CB3DFA4B9544C85725370B8626A57A6C0CD0075EFDDF77BEA8D9F0E40447F0BA201B663F41DD12FE80C59846C33DA190FC1CFF037AA4CB66D6F7DEDAB5C7E34499E2FA80C08BA2CE68EA3A52EBADE2A2840ADDB428D5AFC3FC80F45F75D6424349F8909D4C1EBF4A42AD30F61C35931395614A61D53CA9491B7A2D9BAC451C690D8A9077C15B30CA0D21234F65E0996B4CF83AD64F3D459DBEE03DBDE589236BEEF6D23BFFC9C493DC8E181BBA377A82AB807345C49ABC5859A26616DCED92101EB7940A82A6B83D7495A9A04E63CC4AA141CB20F271B2189763F4CC0CB203D9F361E6DB9A64CC4C88F7453ADC5E330143AF1BC9EE677DA59AE4FB23F0F6DBEA736A9847F10D7C13AFADB129AFA334AE6BEAD47BE6ED97A9EFA7D8CE9A2F90E6D1D36D88B0F4C715A2A43FBCA0436F021C8CD57B7DA8AAA8E0217577728E6B15DB90D155067EAF47EA066327E05AFD8BA977AEAB39E8A34EF7C0C4795BE34023D5461958DC347A32174F5534E6CB47A4E5B33CFD63ECBD64306A9BC6FDE8ABA67F53B62474DF5A9DFF735DEBD7CE89BAB8963D5246A82DB3BC132A128A2DECC0260E7C7D55369A15183794B64901046B0EFA9AA3F7DD9D016B8104A932C2CC1694C9C60A9C4031BE10D4B8DE94AD39269656AE078C088D87E6F212FE16546D48796AAA036E50F889B81FF91FCA96BA505E3E7F5E60FD475A3E494D272FB0879C28C8E8A0443859E1772A7F14C099C05CAF56107167F4013FBBCE94E5305C3E182D752CFE14D00FEC768893374CAB2CD746865974A4CF47840D4AC0B98B61675AA3FF042BE63F92D5D1907599C60E287F12D29CE124FE963FB0BBE5131E416F3C8F5C381D8DBA6CDEA7F2E51109FFF089C6A68890A2F7024322B18243415F5C26D43FD320C1021D7C472984D670859180E3C62E17CF30FE14F78AAB4747DC3133216BD0D32F11ED95214C528324B561176E39E7FAC1808883391E82D7C828ED5089DA9B8659391CB72F2CC198821E82A48160ADDEFF74F03CB8EBD349A227F01A69EECF94B018CD06A43C5EEA105F66B6CE4E6FBE9322E32D78D14C301A3E3E464645944506AC2E6078CBD78ACECA3AFDF059CBD32A9E90082CAE32B4CCB304F5D0B45382F3E6E6B701E1BA31FB99819EA1BD83076AAC5050421C39EF2993A240635D656130A132BE528BF47CBB350D54082154FF22AB23604E778B737546169F4EF3EB059B3907062D10719712A437E1A3F9718093AB1062F87656FE24570F3AB77E66613D7A4EA73AEB5A52A6F75796D8B512FA5DAA48D1B6A2248585BBF12B5FA26BE079994757427EA3A712CCC0EE9E5ECDAB895543B6D1D21B106FDD9AEA6CCAFCAF0DB6CA8546D6CBF22DD4C8BE2C94C0746FBF42389213EA1E28ABE896316C1FED8B07271A77DB1CC708C861AE4D46FB0BB945AB1BC47C64669B77CA68FC1B807BD4A04494319C9D71454CE4F16EC34783A0FC2538343DA229A36497C1B53F88974503B72169FA9CA69E48084A5F696811DEF0BEEEAB18930A03AFBA7EEEDFF8A832A1BB47301FF6DD10A436541E58E38A573E07FAD7E39D940F263C3C9F1B532C2BEF7A36115C10B5977AE0BF92D61A41C721B0EA9467DE444A13C8A18D3B6E59C0A8E2E1D7A2CB6CD5BBDF876D583285B4879BBDC3CD2D5823D4D155586DAA982160C7143CB5AF9BB8775774BA9A5F4671C826E5FF825AC6DDD547BB810604CCE3AF453C5A365A4826454B48594A323B1041E14CEBB2D6FCDEDBF2F7E039F5B683E82A35F44803D1FEE1AA4F29AF7349316540394C6F83010CB4B17DCB51F46FA3CC8FFA971BF1A83C842783A9851808FA0631E1174DAD7EC8BDC1B58BF599C4885297B0F811DA80C0D543CF43D1A040652948DBD4EC602903334AD158E4F897F10B9BE74AED8BEB32F190AF4B23ED9BDA6FD91061381AC8AF639A3CDB023BECDE75CE19DC465E490C81962B1C43C1AB5E2A6CE609CAE3883655A99CF5267EE78EDF6A80B36FF9D13D3E41D5298411EA04EBF7DB33C029C9CF68FB6AFA6348B46FE9523683EBCF2CCFA0121AE3D9400F3172B9A3DB751533282982BCA555DD205679839D20D087F7C369313BB8BD2E1ADFBBD1D28ABD6DF18BEA3A2B82270BF8905BAA1B69DFABC25BB254F446F80CD3948F9EDF4A59CAEA2E01A5DFF2033C98CB32CB6D0F620CE5676D47981C8651A45F5366A1F3EBB4E08F06C6CCE90C041DE631C74740B7EBC6E2E2C06D97A640DFEA8DD7CF5B1C6B0B7F538B28FBED3269B687EB8F76BE90EC4D67A604BEF039CAC33366EB01FA72AF2DB267F2DC812CD11916892644A1A12EEA00F7FAC643DDF3969EE33528A11EF97A8095B81268F3047D6CD9354A6124FBEF15C6E0A01C403B6296A0662A2C687D1D9ACE68CA43F660683E6CCCFA1429531556EB5FEE6DE4A582775682D3844081E64DD419091661A00DA0D795203604FBE8F91FEA9DF79476D27C3EF1427CB418ADABD282CAF2B95BDC20840FA318CAA7909939354ABA61B203EAF10B42D24F296A942BE64DDFD89E27C2F513176F717925472AB6694515954D1C37329E95BA57603A8B131A6A843F99F9D2732DA6EED869FFA7A8D47F15F3DE0460B944893F36B8F4077B485BB5F2ED17300B1B48125DE8209ECD29401719C5FDD40FC1B58DB1A460A2DEE85F729006F05E9634FD9B1FC68762644C1D15A0C85560924A5427648206F89051DA7357D353AFE0ED83CF38CEEF638408A2E19E459A279D083681F03D46B1EF54456225FBF274F37D8517658BB41D4BC720BFDE9694D3F8BF234E79E4F3FDBB7CF5D6AA38907A32102E9B7679EFD1EBEC93DA9D3C39B36FEDE930A8EE1629F84981C7DD53BFCDA8940D83E246BC487896E9E7844BE50A049BB9BCF0FA2804E0B8BD76293F727EA7676D96BF097A4676D8CA0A5A508003563A206AE062D5DDAC93E427A2732BB7C9776EE71301453753A46D5A2DB75C2D18469BC95412DE84B106851B8B03CF3F092118F8AA39730C86299EC2892C6EF215C62FF665ACF742BE1666E63B554E6D9AB7A646816D6C82BBA1F5BA9C393AC3058748DE7B10B796F6D86E979E0395FB086F0D7BC9294D63EC9EC6D915642BAFBEB8D80273908E1A5E26A034341F1E09D6E7871B6D82CEDB146327A7CC1ED30487CCCFB7A331890E4C398E6BC347165E47830294E88E87F0E7CEFD59254D6C4A3A9A4433EB4966002592DC50FD222083EAC81F20E3117DE0E125D61FB092BDCF10DC1BDF5C674E8B33C9F8234CA36736423537CD2C5B43C01E2847835CFA339AEE361173DAB2832335030743A18904EB2DC24E3EEAC2737482A2640325E5AC4B42CD2D7A21115653C3FEDFD744A51AD70CBFE5727D1D448826558DC3FDD7707301BB8F1EA445A55D234ABD662A4B00B92F153E4052593863B9090B6B9980FA9DB4827C27F3B650D3DCF5F1533BB529A9DEED6D1FB01293A285010641FFDE887504E0A9437F7321EAE10C45F01232B956CAE06CA9F56D57B1D18878C4D3CB126A6AA0446B73510BF34B15409B2F6D1ECDD16EE9511D40E4382AA6B904003930CD829CE540DFC2EF288356FC237995F7D44DA6EAAC0B08106DA6F9C6E7E7566F526F99BEDDF1F12B4487AF460E61B15C3B07EF11C8F35311E224E30B3AFE2190599FA0518E1CC78D6686D8A660AE830F86219A2C0FC15DAB7FA0AD2FB4B3E4C9484AFA29E640904C4F019C9D14A6749659BA576604402914AF706A647368AB407E8785936C320EE849B51C3962BCB789AEBD2154AE4B51BC322BB9057B86770E164110C6497DC7732BD57F004E6B58CEDDA665F885A577B0DDAA535C85BFCC7344F398611170A354A1F1BFEFF3DACCD95937061EBB8D852CB8C7244C26ED803A7961AC0BC13A7AF81A8E604E39F9865FBD2325F7F1ADA633796A985C0F5D5A3E0D4BEDD546F4202EB2FDBC697501986BCA7AD615745DCAEB349FA39B3F5DF98895E1C12DF3F0D448DE4DEB46C48A44472BEA7F2DAAB193A77DEDED3CC4EED88A059F173400073C21AA0201022164142AD10EAA5F9D5764A95A079CBAD4B4CF7FAA36F559B0C317064A08FBBF8A6D722B58341C7D563C43EC5D40B754EF4DECE4EAE91382CE8572142BC8E0AD2F50577697358BB5A26540B379BDDB2987DD74B66459FCF85D95A91A59B67E522AC8D3460534CACDF0DD7067ED60CCA3F315333F0AFCFBA7DDE1F1C5D24857AF991D2263C36CF64056886EDC070C175EE36C02C72E88E9B7A5EB4C8129753C3191B6339DBF8C79B4D11FCBEBC11C00D471BB00C4FE04181DA379B6ADDBCB41E3367491EA050DB92FD45D8C60D590E2400A402794F4567B8A48D85F5291277ADC38D7A95EA37D59F089E1922920990254BEE84306C2A440EB9ED87CFA9B64A04D256835FE52F07C83D67226704A519B352F6AF5BC97EE83E111FCC452476B041AB9CB0988C48AC26EE3C73F9A37BA9384DC1C42BEA96A094BA653C97322A2DB0AD231F5EDF7F492AB561E551B37B0C88AF6C2DEAEE6963891F42F992FE127E9C74E7C89EEFA264993D05876FC9A252D392088E04858E05E687AEFDF33B2F67295E3A70CC99C7690F375EBF30DB80EB278A8099E29903CDF161F81436853ADF2257BC081C0547AAF0DBC4EB1FA88FED9F4D252B8B75103C5C811E458D64A6E39C09C775788AE98CACF74AB3534D6D51D7AB14D8E13FFF12A0DEF3D498E6A5D9881B97FF08618413DC32B1FFAF286E04AA8634232CBE01F9EF0DAC289C1454E8D49EA1FEB94A878933726ECC3302185E475199D6FDB1C5B4C77D25A508D6669BDABBDB61CE5A437E98BF53B0801F98D51F8419C593D8022A0A045D56CDE8DF3644FE409D76E0B3F8C596861B09D26A2ED79E2D9A5A996D82C98AF763B1999957F346BBD771BA74D82FF0B3D3EF61F720C6DC5B789BB4C8EBAC913B6FF986397E28780AA70115E3250FA6243FDA7C90BBB6B08A9D422BE099C7404463628DC8D337C98484649B866DA64EAA4335225DE9E85625D1404DA8CC465DE3F644B36FA4FB51D5AF5BBA36E2EE8A1A46F48634962EB3709E416894BE3D4F378CD384D367370B929845999089BB2BDA1DDA80E3BB0375025E5E31F9952DB1E1D4A9C79DF1C6597A180AE8159AFFAB1AC827D975562CDF2BF9C6494E843C914E25492960A7024D14A0B4915549FA14566AD76F4336E8930D692E12D7755BC3B62E9228D0D7C6463F99AE24AB0CE8E5ED39592633AE086E96BDC5D18E199A00DE0E0536A7B20D7130CE70A3705E694013594E989E1FA0784F1FCCA470AD9E467BA41B143E23845F3FB5ED657846C39BA333BDF9D1BF8E3D63D53E7C3C71B84E64E3DF31541BE5A37506BC2711B298464D30A7CA2F70CB44F4F9DAC7E4A39D7D68044A5D7149B7CE083C8BDBDE3BC847FE89059F1AFF60816B01C836ABFD71341C085B33380D9F18D9FAA0AB007D99FF2FD7FD4A519F04249B9C9867C2B2E9819017A8E4BE37E9C2C54FFBD2768706FC035169AA5DA317E13CC903A3672A5D5469026DF1294A1663ED1A664FC26D0748FD49CAB774A0FF79E7CF1C953D7718DE6328D0724A18EB148FB6F258C5D4D0B1A355A80A1407D0C7101A18B289D7CAA71891700BDC28FB34DCB60F07F606F93C0474DE3BE92DC5EC7B86D7097F273E84B5887E6392C1192540FB5FEC940B5B130980FB0D3C8DD70303302812928AA6EF93A90A732BBD3E1B8DEA6602489B18E249223D34616E08F86CD08B365C5E23F0AF497590E1EFFD5898A77473C2E7C29C4477E0A4CD9E307186E6B853C3815A571934BE34CAADCDBE67CD11FF1A763950F2915B664EA1B9FEE5B290A6463346B3980007D5E94844C5E58965F7A78D6901845BB360CA4516DD5636D61D4EE40824D08EACF968A16A56D6AE77A92748192F0B3EA9030ADCCF0E42756DB87ABBB29BFD66D483136AD7A03B2860BDD648B87D0D48195A049B80FE020CD2147CF6DA00ED2DB6738299AB83B0E8483A87F321EDA1E59BA974C9781F3C3CACFAF460A3C003467FEBB6C74B6B6DF6B2D73D0A56DF28D4C2D6A573F3A249AB78104060031E38A74DE836AB0DC888299FEF377E42946FC0CDCEAFB0199535B80C1AD711FD48ACAD0F0C22E7781B42857AD100F61EED61EC128DE953FB545F38925751EAF0688E03FCC443E6EE790A93AC51DC1A57BCA66777D059F411B53860AA33544EE94DE6B1C06333FE07BEA37576C3E4244436A1DBED8E3A5E38B46270B1ABD1009CD299EEB942F0FA13C2E16A2DEC8E1534F16B8782428A7FC98D22150848D7415086D64AD8B4B3C3CCA3B6E9379713CAD68463A105869F0FAFBC7181F67D1209BA93327D1645BB72CD78EFB512F5EF5835B84831881B939F8A3B2D4B1445B4E646FC7B33401D08946341224C6F1CADD18ED0B9274052D9337B508DBE0299E0CA1BE97AD491DE9E6D97860BBD2653D8271DD46E9CDEDB755B194D68B7CF2D6CC707C84AAAF662ADCD30C1D6D454909CB0B544032601CEFD8E5523D3F71CC86E3EC8D695030A19E59071A8487E61C8E01A3272E79AE2373F780B26C2815E1A1DFCC7E226ED99C099B7358E923B7E087F3E54C0E7B50C0CC57FDF14B5B64F136C837389D229C4679625AFA29921EBBC46ED8F7E3A2591786609782524D91A95B9471D50F6D5B69A8862ECE0F1F19772B3EDF4BFC4169E55B3628A69C0C233DFEDE77DDD98DDCCE6E2F65E398CD7A8CE2D49DBDAB9630A7AC278410C0BB09933EBB1AD46C2DBA5CB6D6953169BAFFB905E3FE58759028EEC89888DA40A5EF710968D6298E783A8E9C8853D413C6625E434C7ADE8B5F8F60F15180E67E0C4B5B2BECC8520CF32C34994A63AE5BCBD504BDAA87C16EF6A324ED5C4EFCEEB4AA2F9AF9EA787C014C5C5597802EF0E60F2053B2EBDFBA548987A2593EBAA97822713747A46F946C33F1197DBAD5BFFD870BEA98C2F67D88F87E5E193382C4C7F3A24AC76FFA534966D554E4FD88237DAB5C91F5C07F7823F1A16C6C7764259FA42D0030C74C57D1DC519B84D2EC32B450D2C0484439CB7CD43A052256FC61F98DB0FE79FAA53ED0299C1A447BF9662B73993A968936C8D7ACEF6DFBABE67FD3429F8A2C413FE3E4CCF714F9504D7706D7A27F3B2EAEB83C15167DD7281E7DD226CF696A7E9D1E50696C9EF387F4C4CB62718A0C9900CF67973EED9A5FE557B0842AC97AE3AFC8DC8C2747040CCA9EC21CBBABD86379D5F67FFE423BACF50EB201012CBCCF8277BF55DAEDDF2457037A816A32AFF7EEA4DA84330BFD39E6FEB1DB3D3A39D251947DCAAC000EBED178E0A003AF869B3D158BBB2BF9AD73DED2F5507C505AD9837D5C617A59A8327CA89BCA7DBC75BEB1777790AF32F00F1B3F43F762533F926625385C24C872D6B96631B86A888E359322AFDABE4055597A66BC22A9DB2FBCC69477BD2EF4BCFB0B6226F41015FDE0AE7448AC76DA3D2A5E325302FB02C6C491A029566C83A394AD65F571858394446204CCC57B21C52C9BF160FFCF44F2D23EF60A500C4775C94390EAC924204F1240FCE9D647B26544B4C3491A2ED70A46AF9F7D268E07F7415FDE82B3F47B12D9134FFB899D8019E8DA068CD107589EBBC6FE64408B22BDF70A15A3F254A10B3BAFDC657CBB932C218454412B0AB2668D657902088913E33C08E4E7A40C2F88254FFA1153C845D64E98C431CB305BD308A1A9307D19E8C818A625636AF9FED1CAC36DB7F2BDA42DDC81D8B8FCB635C4EBB55369D0299F922A49809287531B278FDA524F0CC4EB0C37B2C268B1EC9DFAEC9D528FDD8E3B3FFD46224FDA120E8A3E1C532EFDCA4E983C1D9288FB40EACE504B755597CFF9B5949A5162841DD8168ED2CA97DE5A8CB8D5A2BABBD2AAEAAE93A0EDC3F69CA94439E216F329960F444DBDD3E2FBF13FDA2C7DF551BB27C19A71273D782CA4396121D935EA6AC97E8E1C330E34C856467A6455F39C2A788E6D33DC547A02DEF9A677DC0A1BF0294206383BB3809DB23EEE6B3CC4B52596767D7B13697F358DB830D29247FCEE530A02322335670C1558AFDE7D36799BD09B1E7D6C191D0A21DD10514ED13F42884E74E70BFAD19A1DACD5548FA246237B22B8463247F1E67A9FCAD995C0DFCC73E7BB2BAE349A2E42D4385AE1393BB581DE6EC5E9E2A68DB03B39BED64CBD5350551D9AFAE130665E456D906CB3655197E8A6257F19004572F75BC7865C215FECF25CBC11D4DFA6709EFE360DAC6B728C43B601CA3A6056BA9EC8BF888985C55DBB1FB849EB24169ABD89F52B02CD4A719DE7285880A50B2CF6333EDE69ADE745B8F526DE5E9A50C64F2A9B0846D9EE34EA5E7530C160C89B04C17DB20585A1EF939278AFBD63273853CA2C5D822F8A52F88FF770DA66419B46976BA90CCFDFA5E08584B82283FBAA53D3B26DEDB5EF1B8C9AEFFDF924BB2986D42B44ACCD03A7A799738C6CC95E0FFFD6C75E46280E70CD4BC124622AFDC8452E018209366BF3DB3DBA241ED04026E1BEA720694C3A5C94732A79FF2E5F9D54639E915E98847BA76FF341287B1EF663496D084818FA3C84EE2CB3D320112EC4A49DFFF6FE4B0530A0ECAF85B55895070514EDE05C04AA32B4AAC76AA93D975ECB4E0DC5117FDF9D63EDE439E9C4293D34DF3B8E818FD7ADC7D5D94B3B430184EF9BAFECEFEC5CDA9D20B27F26582ADDFB8269E11F28F90B15F20D6DED6226132CC854A7CF51538E60A0D1CB4A3BAB16F3E43DCE0A605981BF9F2A714EAB644C6CAD65DDE0CBEE42D33CEB3644B4B483F586EF5B9C80F7C12DACC72082057B14D54B89D1E697FCEBA130D5FB1A112B7C97B15BEF09B7138886C3C990436858806F09ACC8188884436888CABDAD503879FE084488B66087E45DAB0A6D42F27ABF8F2D7ED4ACFCCA85BF312EEC8124FF0C24CA9A794DE446117E3945B9607A1AEA7DB21D5B18D4514179BE4A9171E8E05CDAA1829670FC711B7F000BF6D3260D5C574BA302764DCB570C2FC9248E6234F066A0A68DDFBA0CD6995F94EF6B1C68CC7EE039F3712F7C24F0963DEA6DA93ABD2E18E7264B31F85CCFD89041F8C0C207CE2FB5828C4CB715A8BCBE07B81A27BF730D249C0C9F12980CD5214C42DC5BC83A9514B128DB44F580DF51ED293A2A8F0B9C402F681CEA42F35B5FD7F247A6A1AF11BF8587E3EB12F7F9AAA82755E568490FE3C62F96FAE88C0A72C565BCC9FE58899E28FBC864261963D8947BD87A92B0919CD44A6064636A87465E74FD64AB02E94D59E2CDFCCBAC2CBF57C238F4552F82A601CF196CD5853C6171384931E147F562B383359813DFAA6DEFD1100051654499F191A0996942044B176E6DB4C8352077ACD44CAC0DACD02385154B99EE1759E3C6ACD2854A206C0FF4D0721BCB47564830FF7D70E5D6010FF7D1F721B17636E060AFB6E843BB2423A684FB0AD9FC214A09C6D889DF50FABDDCC09B6D146826C427E109FA491B294563DCCDDCB6BCECE527FADD3B412EBEDD08C312B5993759EAA087FEDD125F27E4946A7ABC07CEB5C742A941D24B9957D422A4A716CE5F99F3FFA2236C1803063517CF19BAA54E43A5F3273336AF0EAB0A31730E976FA96BA05DED3285B4BCD0F9970EE4C5EBD02EECE9351FEB11DAC60E3796721972CF98BF669A4F051428CB16284F7299E3CB843742DD7558BE6C01292F616EDDF6A36048C1589A0FB1C6A6BF06F61500BC43C968C61D27B1011949A64DB5084C978C027AAADC63BCD15592B17104363ACBC637A2CFA0A974EE576C7A28D0838CEC985296C045428B0A1B52D713BF0720ED82809E13D2BBB6BD9E689BF0C020E96EEA218F049400BAB1F8B80EE17280B597400951F372A22E333393B5EF97721C156C68F110A5B5AB946E55435B07405379A0716AEC9E4B38657B2EC1C285ABC491FFDF73A01C04AC4119CE82EA96200CD9DF9D741317396EEADCE6DB5DAFC1F601F7F3D2717F08BE3A5DC75CA3BB84CE6BE868E640F26ECF4E7C7E298EF382F7EF4ADA5F11F8E5D830C93AFF92A6A63A7EF5E07748551B07349B2D5759A8B5703F470CD45CBAB652BFDE9501C13644685EE1B40E4201B65624CF5CC3BEF2CFCCD4E66F207672A420A980EF6DA930EFC1122C20C1609D72BC5A35E51EE5A73D8670212AFC3C53B9E71E67C8EE8BFAF44DE175C0B91D4BB0CF1B8FA0B01F8C750960306506CB03A7574F4FF84D2F92D175A0CAFDD8CDEACAB67CEC9C7E37431D1BA1B70DA88CD87AD7A8DFA1D9AB0B225636EA30A2E9F6F6CF17740A2782B67549C741245EFCAD2144B36A27D0F55C6A21223DB553A560D4E3675045C6D40A3D27D52F282CF276996917D6803C05F83340020288940794DC586DB8D50317A133EEA510335843D77D11B92C06F328F9B28E76DC53544DC58997D7A4FD35EFA432B24F60C8A39156F39C36B74EAC94E1CD1D2597F91921A77553F8FBFB797178E5FB2453B1064BCE189300BA7A10980CC66EC03F3A9D28F492E55DF0249486F23D2D9ADE0E23ACDD506751FC9281195185553924BCBA4A7B0330E6ABF602FAA66B0369DCA32DE496E6EA09807B422D2367EFD9F775143E3398FBC0A06538C2277E0E6C18E19AA7C1F7165A71242DD466848A5CB8791BA47C7B61060DE9BF71BEB9616AD60BB6402664CF4D6C662E284A60905E15EC5CA7C767221A2E8AB1C86138EF0B7631669F7947E8AC30A55F7FEA5029C308CD12D018A8AD3CC6503AF1F8CBC3B316B0EE0D7F77EA0B8E258CB16D9FA5C04AD9A989E24520B2FA3ABF784A38A53B5458C366F0F608222559AD0190407D166B05774BB782AA286BE56CA8FA98A51B751CC70A57247A9A4589B585902582540CCB07488A568BD97EB116DADCF746F7937D49CBE4DD3E54EB93B907AD05A0507F7C6B76EAC74C59BA3D81E46B38E19D26A7438BD022098C82FDECC62A0CAC85C12660150E6C17D4DBD52B366BB7A86A1441B6E66437DA1642505BB4D985871ECAF07C815B8E7D2F15BD13027F2BA62EC5F627DB627882191EF19F959B22B5609444C822626FC20739B50E0780333AB3CB5CEBB4A6DA403E3B416C1EEA795D66CA4F3275BEC662F56D577493B62DD0EBFC3C468764B05D1D9F18262DFA3603B02C4808ECC5F39807B5A3A19E6A5B6D7364D5506712763AA873B0718D74F2DDD7ECB556BD896C8FB37974B8BD67BB21054AF8D871FAF2637329D28FC000A3861FBA89C619BF47D372CF9DD1090D7DA0ABFE4CEA5991268D6A62F847EEC34768AC1DEB644083451CDFD70399D4DF957DFCBB0658A6A945FC89BEE05C491B5F2054F9C3F262FCCA4DB1ADA04C0BB9246F32980496D7EA23C7BABA1F51CD3491B43BAE8E507A00E0BE941333A3D09D03B72A13322A366FD7B38B53C1929873843FA9C99292843AEEA202FD215FC1305190E6929E19205D5BF6432674DAA6F0D4D09094D6D938988D908B461154E19E0E51A00C6966324FF2957D39B03D2D1535EC9348EA6BD3CE6713C67E648E16726B48EF6AB241F4B772334EC047418C0E1741B650D0C593E14BFCC5542090DB734617507560FEC3EAE437816F397C57195BF8326C94BC1AF5D9C63F6CC87637C4EC2B158D27FD5506B6BBF1BB53C5E04E657D0B25542A1691D4A0A50613E15C37825BCA655B5ACE05546B51690324A555A8852FA8270752639F3C2EDCC046282B70608FD3E97B731C1CFFFE74ACA3475F24DFFF1A71BA04422CB70DFCDBB9B7F22870437D18A61B94DC68EFAA29F6C3F808199B4482F6907C4F52E8CC8C60BA38A1E30928F84166B36B7255975EA1D879D694F0E488CF90BB11521049E590FF3560B3CDD9F69A497F2EDC901EBF02E5CF59C4B8964C9B7824A59C130B7BA3AF2E4CC537540A865E72BF552669566C536336DF523C68019F60A63E420C78190E1E545E6C9713F192DAB6FBB6AF2DD926909CE7823D3D24175C9E89774D8F5C5A867F0ECCDAD42EEA30C925FCE13F11518132EE0B159F43785F12C06340C3FE221675E0423DDD7CF33E95DAF70DD828B20CE5AD6D42123DA1BA69C72BC3FDDF5DE9587466B0BB7BB3D96806582D38EEE7BA4A8A78F4F227F603F12482608643DB1025657E3745CA5D125CF5E5D07A0EFA4AAF46530F82A3E585DC61E0FFDD1709CBCF0B14B153DBBBD6D9CA2C6916A94C2F25F863196CE40F7CC5B2E5E07777FBC22C1232A5DFB008DA640BB15A4D67A5178D46E90A75B24F05F8B5AE4EC924B49F3ACB3BA357D10632507C3E05B92F985007722A81E09FE2E2837F582BECD20FB485743F53317FD77EAA0E7734EB1A8867244E9120A2AAA153CAAB1874031B00B844302DD9A87F485E0C8747086265F3417D14B4C6BCB019D6779E0446D8779CAFA9A173E28FE755380D248D37986640800814A7AB9BC62E11AB9110C3A2AFF8142C7E093D5A988332031E62983402854D8F36D444BD5BDFE64953E727F61CFA2B51F06651E4E01B1BE5B24FE6772EBFF56D2FC22656F9AFD97CC99BB5F2F53D40CF6F00890B56D6E2D7C6C8CFDFA24D9A3323B2D9C1655A5513C138C7564C72272E0762A9360CD74F8D3870304E863B28548266129321672409220A6008C72FB80808B10067C7E10475F3FB2FBF3D805D291C7AA1442235551EAD35FF0C8BB5E7D3BA246FBBFE1852E02C4FEB7799B9592D4FC346BC403CB4F16A6B3FBCCE3AFF11EDAB286A625BE9BFE4F1C857B962849EC724C21956CFB83AE2AF651FCCA79CE52A0C0D253EC8A79AF1D1624A85E90B0FC048AE4FDA409412672BE2866967AF4ED773CC4FE5602602F089661E765E3AD6956A0D28F98E48A1198789F0FF3FA29F14881377E41E85362710252A3FFC2B3B696DCA70BFA66717B9C3C8974EA0F44358C6849E9EE43008FFB4D4FBE7926A1C7EDE1EE72C2ADEA5C485F167D36B4214B022F83CFF342C8E34B5C2C89819CA8A07BD9A9E54ACE4DAF5B400174948AA5441C37AFDDA286B299B22D35A62CC0C78337242441899A50A97626A35F72C83260699769C9D492EF8FC3CB928B99E279D92C30686CA9981940353B37208DF9CF28F72C873BF6F22357BAFA293B7D78FC3C4F945092E036C34291DD559C0625FFC7298BF44B821520343ACA2051EFB69706D83326333B899C01628249196F928D094C61512890FA28FB8D43577E7AA7BB1CF0BF5A55C1BDFB87308818521659DD964A8BC2189E5F236325655738CF325CFD2FF4D9C1AC924502FE1EC8B397EF2951266A81B37536F1208579720B119F9D37FB5B3107E6DC6B837CE0F2EE1E840898143D2C673DE9DEF8D3424CB6AB1802E4703B6920D6F9606606AC7B4C55DD0DB93D65E31ABE9F50D35EC6ECDDD7186D80234B6986802E58555B799001B1C2D3B4ECF41589A63B3E22EE18EF8CD35937D73EBACC6E2E07A39101CBF112A5735AE6458F0B72995A7C69FF4E6F14E87E9F4DBCDC66BC8DA4C6398D29F2941E485BE23A6C8C8771AEED19A1B6FF73E7F2DDFB606B6965DC999EC096C9F32D85F1F518E22865CDA66C7BFC898F41775581776282564FD0D7979D3A6E980DFA7F95725901020BC2B41212FA20060D6A930DDDB5A4B0C1CACD44D331A2977053EA70A2F3FF481D9BDA325DF43F5373C065D80DFBD2E9DD994A76B962CE79A663A888F8B303CE05A30E5B6F2CC6F2DA9002DE466C69729E309C8ACB9AFA7A582C88FF7B42FC3C98942121C733FC0D0C723E89E9DFECF7D231578898052C21025F2BDF165C8E6BC6F9634B7F34319D7D887062B0C9CC8CC943128FD91B284F7D1825F8B6BC70FEEF901EADDE8677C966FA4CC8342AA2D1639D0FF84BC1D4F5E56B927B9E844672DC8F2496163ADB0E956BBDE853A249360A03A69D5CD2359D7C27F96B9C849DEC54C89E44FE4E605A1D0942918A86FA6F18BCDDD98D0F282DA80C6A225E8079F8B23F4FE4987B062AD496A2BEC44E019C5C01E905DC42B67FBAB9E27B3D2D9BC30EAF5F56964D23DC93B0A327A900BA44A8F4ECF038838CA5DFEB88E8FA85154245BA616F4E866BE12124FDFD76A5A08AE19E2FACDE34D6559D120C2D7041E46B005FC08BB8A02201CA0F40C8BC39ADB21BCEA7C0BB7CB6238C6F43D96C582C15A9A9BF6B8A281AE314B8383D5E3FA7FCA2B7E9ACC9F872A9CBAF477E7C9433F338E29FC6F971ABB26D8762FB06A1FEF5D3C3F2DDE85D50FA1483F86D1F4746DF3F78DD94E2F8F73FDB3A824A78FD76D954D3D0D47B39DD0CC9211B14E8EDA6255B6AA245A7B06CD765D45BBE7AF77E6E11424E62787C5EC53839638165BCC370690A24B5983D4151CF912462C2DD0450C74CF4FBDE3B1759AA652ACA2EB507BC2F708C0B49133C9EE3AC62B61B48A324932FA66B6EADC06031F82A31678896EC55D58223A2B12FDD0208DB0695420711C181F4236EFA6BB54A80B16B010876B5EB02E01028BB4C3BBCF0B06E6873919B634C3AA6517E506B5CFE08E9B0F3288AFFB940E5B5B978B19296AE4EFE54E43981F0A709876FE66D7D9B3233B9397EBEB512D00312900526B1CF1910B33ACBC827661251F7D6C75E226FE1980D274A56CD8B1CA2DE54CF3C34BBBDA90EBFEEC080E933810BB0E0A437E10ED094F2B9F2E88A57F105FD1ACFFBADD6969B9ABF05006857ED4C7B082A4E6F33367BDC84311FFC1D2E32C3B062CCDDB63C6E891DAB53EA098C23958C7EAFC27838DADD1CCE52380DF0FE03A0FD20608F674B6A36EEF9FF98A83D3D1C8B37F161D85EBCEB2E0DA3E0222FC91B5DB8B72E96305EDAE66503E6F5CCB0DF6AE96811040065E04EEEC3F00AC59F158A613E0BD66403A1231E18AF373C09727EE3A79C4CD119BCC755ABC1E3D56B3A1BA010CCA045FA591A35B33645DE4EAAF7FDD62AD812BB7D53BAC43CFADA8D403D36202F5E1A12FFD2937A149B8555ADA3787D70E8DC849AA76CBD1A2E0A3CCE1DA74650B816ACE7E49F5A4F7765778BB8AB1281012D539C8573F20C7495B12426215E2DEFF8007CAA8C4DFF3B5D64596AD4FAD48691C190CEA5F042C6E50EA9B304AC6272B6D797F80F71884703BA90F6AB97B34A035CC3EE954DEC5638B0EC342ED56884263D1B6BBF4DD63E30333B6019081245B43D287F28541E76AD13B0F14A1F1F79915FAB1BE15A30A9BEB3A0949455E4356EF2AA4499885CD97D5550BDFBC7AF6F4923283BB56E629A4B3ADD251D3321CF8EDA6AD96A3F894ECCBF1C5FE0433F7BF3E1ACDAFB8304431617AF9A69D0DA2FDE615BA2B0F0D24E980ECE8C9436CE85EA3467D2F8EC6F68EA45710A247C30339F27AC1F8F83F4A828FB702EFF0BA658D9AAE93383629FD5E02E01C9749887BC57122BC0DBAC20918446B1AB98B58BCFA8CD53D060655DED2743EB48481E0E133D4AB2A1F9AA4EC25E47F81F541F640BEBD8C536823F65937F2A21CB67D71844CF37C6CF341CCC8FDAA35374EC446083C2E1C1BDBC57F004DB5B942206EC2068D5AF4EF53059ADC95E5990E870E808ECD602A07D4C45AC7D42D6C64EFA16377FFFCA393D72BA0FBBF4FF4BF9800D983EAF303DB2D1D4EF2E3FC9D766C66D4F1646CD21C6DC90D6224BC2B2B3DB6D486A7D2A440308927F49D8B8A0CC6AA5ADF801FD46F1A5438F9006CAF627601C8A0461819E198650D67984C0E94E01B821F9E8A989E2C6D6B09812844AE5BAA125B859E29652CAA4C054AD812B1691B625AE66B5B1CA595477C862FDA6FA03F57B3B2C991E32E699FBDECC7655501AC52677C29C7A6938789BBF5083B6AA26E059321682E2B237FCFAEFFBD8492A1051D63F6C9E36AED1040926797C0BB6370F9BF06D019A2B7975F5E385015FA542EA6F7B5BE4828F16AB36398D72D8F5B4BD1755CE0B7E319144D125E03D9E2B99F1FC435F52A915CC3DE33B78058ABA37687B1B530089E2750AA636E4F62D62CE7EC7BFA4BB5A6565D34B9E643A2E42C9C74E19C9C158B8941475739C1A109999D9FB3F7DA1C506A74046DC8044F561D7D32AFC60C7E6625A93E0FB60752E797409EBDB339D09DF7455E47F198A76FD444498169FF595BBC1F08792A508918BE6E5E1508B258E18C4F8AC9138BA4494EE836CFE872C0C3D9BA3CA37E6F10F36CE1F6FAA1EA9BD0E4403E88E545EAD6A46B5CDE8ACFF569007C5D28B5C24C525D724D24FDB01C3D0E778CDBC86356F052C4D44A4F160CA2DAA6910E649903AF1AA9188CC1CE2643D2D78125EE549DA2370DCBE49BBA67526EA679707B3C7ADEBF75D2D8B15B269D08652FCD8C60661F78F9F03A7A4794D5A0ACF335AF66D26B9A0BB726B872831D36ED200DE626C7E6D63F2845C020E5B6EBC079771EB4D781FE91CB3E1A0F5DC9AE90072128615ECDE3255CA1287CCBD25563A324154AA88A99A00E6EB047A357F9D58EEC46EE2433EF86ECFEE07A041C2DE9C72D278609D89FE15246050BF63EC7E49BB3008BD2304C25937818B365CB30738A2DEC0FCF72C57BA0D578132EF0798C47BB6D303E58BB81CA05E04DDA1FE307B65799E15285A15545F913A0CC916A57D87AF1B174C52E206EE7BD842B9606E8C2EF6FE7965E58ABE1579BF7159BD49DE8AAE128A9A8DE8778F9268DE1F4C61958222A3F80B77A6480E9774B69DA7F7D6AEA1A6C23DA91D65B30A5B5F0431CE7E056C14B36EF2A974E9ED9485E20B641E77FE76824DC511772F4FB51265E8F5638C27E44661656D7D70906F03CD66D2044C85B2687172D9AFE554D9A29799CE3DC9EACEC133F64E167E9D27F3AB944E8FC662F1F56E6401186EF99C72775639D2EF0646D2E026A61230F4A8C0DFECCA85FA0E4A2CD439E8BD3A0D2229F042C27A21BC45C0EE1213F3291F1D36CF69CE9ECBB93FB0D3D22AC5E9339A87E18312CB00E7150FE9E40F32A12959FC5F1403BDCA43DFE85DA9641FED38E11AEA8578BCC1BA573E4FF1F806A6DA064D1264F83D866C42E9DB60FF35BB4260C6E23B5959447EB757C9C418DA094EA801A9B85A6904A5642CA5446D29391E927FE8A336BC4F97D8AF95C7FB181A9C3F27396BBC80CA4A3EB1D1822E05172BA2D4A88BC477574FCC968F08DCF48FBF19FD5E0D830DE5BB025EC710B60433083F1A1B6A90DAE3EF4A7A71F675BFABB9BF99945C784C212B3AFAE06A7E08406EAD609D141ABC4877A3F08D8955A6FADC64E87D7F01A3175E1E7812A63C4637B739EAAF07DE5A4CB6A99D5EDBE40A38C4C9F6DEE5CE14D2BE827D9E80282C44F1F1CD389FFF628CC50B1508355BA04E8A76F4DB5EC85D67135EB0EBE7CC56FDCBA9CB77AC57208DBD9F600A44E34AB2586A2C207DAAF54FE450ECD5B7C0F0BF6946F66D5D64C90D0D05515CF5BF1D7E3ABA392BF3874B944660F509BC25BB9F2430E9323C018D9E550BDFA9B0A4EDAA177FE8C36425805FD5C1E5130E0FF37254EBECB3A3DD54588C7559264FBC691F55AAD533F3FD5742D649378F646FA53FD893E939CEDCF233245D180A175613231145141C0A06ABB4967F1B6A11A2B9CEE733F94E890228388C5CDFDF923D7F9E92B00FA98B8ECDF6FAE88662E1931EB12D0BDA6BCEB6C76CC9239DF714E0CEA018CD7AD5BAC1DED89A7E25E2917ECCE870FA27A965E6EA101F69214D7C8034A7F71879CFED83247F75F18BA6AE0FCA65C4B3E693D55F1ED60C379420AA66C16C14AF392AD687C7BBBC2EAA3E54E66EB01F80993D257C9115C1AF83183CC5A040B11CE3485B3CB33607F8AAB1422782E09B8247901EBA8C32B6DB6EE4CA387F434740FB0063A838627810A8BEEEFE0E15EE62B191B03056BAB74E26E1F6BF3A7E247B34B44F8CFDD910D5DAC5F7F694BDC425B940CEF6FFBC661FB55FB4800C5C98E55CF8FACE7EC4685CC84F332FB25205AB84964C6962B827C41203C22387D44611B3FC0938265BEED0A568A8D9E092E9C41A09FDB522A9443691AF610E69B9F21B255F9C366DF677BBB1A6E722C3C997765AF40D48B0B2564C75426702C028E4C8590915FFE778036255363B3C34FAF3915A4F26297509483DF040D960075B605C0F3908C7AE48BF7F8DE566400649D8AAF3D8C8D46DE16981655EDC1C771C7D2F0919B0C91BEA34A6B16A8E5B5F70DC59BDF533FB735531C613213F1D26020E1DC7A7A2441C6AC744EAD581078B87467DCE9D17E2D544FF707086F819078158148F6F24733B660D1C2D655E62D1EFFC2204C58BF053289AA1745AED619CE4D3B6C5D87F9BEB7D9EAD60D2E2A3AB43C85526691E7E95C38E785C551ACA060B4D0F99B961DD3CC795A982063AE221031BB48225E114D91C19F0FBD51A43A02A231A68C53D5E07DA3F04D54C54E7E4082579AABC919A1A71FC00120F483EB5BC524E5617A79A7C0F3E1730FDC83696BDA5EB377C5C87F4D8D5986F8CFB4EA8B81AC1E8FCB9E14E7D275AAA631DD87C33A2B5691D03E836DAD368EA0D9F2CCDD481F4672D16B9C5CA6F07A7DEAE33E45F586BF97A5BA54F4E377CA97659635FABE97C1331D4F0DE2272112F8E13F09BDF18CE16A4D7B02F0C4138C48D2CF741FB7F691CF74F59C8CA85315A368F93C066E652740A8A8D9BF3904DD59AF38C5D4E663F0FFBE7B0016AF4FF1067E70884374B343C976E177BDFC471EBC525B359309927455A491729E12EA7C13A5E83DDEE59387DEBA4278C62B87FDAB51A61ABB0A17572BD5A6636F127477ACA33A435130296CEE1A4A0554511D26FEC375B9D4EEDE5D0C250962704210D40D41B55F910721D67D3B7FBB5D720CDEA150C779B8826F7F3DAF5AF55305AB23B0E68994728A91A10077F6BF881A0228BCB84F5FDA21D1E2B28C7D6017954E984F42C83F58247EE802DA99525687033B043BE544DD1BADCE509DC4263703BD6F138A9BD4B88BC6336ADEB701A5D900F4ACD067759071D0F15E832416A398EB87FAFFB814E1A0E5A142EC832968706E2CC6B5D5DC3BCFEAFAFC75D7F1AE767F1AD27DB3E158CFCAE4D3BB3BEA0EE8B6551D2EBC573C57B42DC62433A601FDA0D3FD96BEE9410AD2937B400510ADEF934DAD2B9E8333B47EC4BEE8E64A8E46B7356973F047BE869FC0B83DD50F15868193C91DCF848BDF33E0539E58F9D324C55E63310A8BE10828C74941EB13509AD8A9C2BE7E065176EAD4D4547B4E334A6D385AF38A8AE44CA3076CCD14323F2BE355148EE29FA18BB7E690C3C1DAB12B3D443B30BF144059FA2A417A2B0CDCDF2050D1453A1CC55F4604D041D48F5D2F912E38A8A2B0A2C1406A9E64E1E2CD1233054BAF3D6C8CB24A6E298C97264DF5FC0C8CA079D07CFBB014CABA46E5C6FEBB5EC95B36E0D21F989EF4AA2FC1EE578033547B7CAEC178992305F462140C71BA9978D5BF330AB3DD8639A1CEACFB17A0D3F354090D3EC4ED9338E232CF9F0C4DD66843141D66044AB7701634FC2AEBB858513602932512D37E0ED763376943283966C932EFFCD2CE0B584D532323D19190BBFC5C0C9A81B89BAC5BCC7D1CA0356019A96D1D9F9A72CAC42D52C26066D353FDE420C72BAD800C538EDB87465A01C5F959125C03700E509001369EBDAA72329645A24AFCFAE0AC031570808DBDC5C9FBA2A4081ACCD5B79E417F2DC2311705AC38905B8A3A29AF9112ACE96ED3869D0A13B796A0698E3F1D39D30BACA66BE75472FFF1F3F425098B4CAEFDF0A3B150C3949FF989F200D6469F10B4856D10A97D2DF51FDDC60FE2F4D2B0053D2314C9E65FBB3F050AABCB55D2B6129DB9525DD496AC73F628C5489D465082D522EE71F07F23960BA4B90D4EC85B1FDFFC5F1C26E8D99892D0663B931875E0E06106269971FB982595C8FF09197592AC90181FD442EFD4B599FC4B4A481F004A3D160667CF3F097C13334934DA403EF5A47570552400CBDBD50DE24EF01441FDEDE1383715A776E2579B8F0E34253B70B07A03CB6D6ED7760BAF0A1F6707527E94821DE2EB907406E1065AEF2FC46914D29D5823075A8E7304AFDDB22A0985110D9B324B0EF81058EAAFAC5316157B3E7C6CFB0D0E84D9989BEDC94C64F57D85F85FB9B65B3874F1E86F369C3FF574FF138D2164F9AE12367E55752B59007C439B8FBB6024DE5353B916A3E1D763EA98FA9412252334FB3AC044840FF9F1108419942E53F6E7AFAD08690034271A688F354CF99829DF9C2F8B17E101DB84D5CE3108AD83460CD8293D6F0B5B2757FC8C0AE5BA1BC4A7CE55DE2C6AE68690F776981C5C96E5C07F363793ACB1F6B4559E31B11FB27A92378FDECF1E6EC2A67F56F7005B250EB0E6EEFF2BEAF078FDFACFE9D01A85B00AA7FDA5FCBDCA143DC3A46DD11EC554DDA27F5038AC1DFED31438FDA62DAD9333D7E26CC3DC02B98C6203D3DE7AF9642414AA62E9A0BD075B20ED574063E291A5C3F860632FD7388DBE43A5F0E50D7D1217AFDCCF5DECFBF6D4CA78D9E728093093EBA40C4CCA6EB0AB039E9969CC04F3EE8C38170D82A1B79056DF2AFDFA3D431E6BF6278A8CED4BB664899068163D6F855A510F3AB8B92D9CA582C07D932CBB4CFA5638ACA1BBA7975B1BDA94EEF8D47EC7531873A84895001FAC2301DD5451251659FEE7B611AAD46DF713C98A12216222B0E8727353512A1444AD9171D02318F3DB2268F85D56D16244DC68380961A1450EC5BDF376A2297956CA78583322ABFC8F8750243DFBFF3571914D39D71C5DF1DF885389C5662E9277E09D2EAA989E42050D9F3E22003CE0F7BF8F286BCB6C3352694125166786251C2A06AC34A1A722389B7D478B65B7E5033945F4D1AF98C374CC6D62C63BF486AC03EDE1B30B669613804D699F1A43D98F2400001CB3CACB1558BA7989B14899A9D8EED6E79AEBF9F0FAF1A3AEB8D90093A66165A81422851BFAE6E466601F07527907C05525D9C3FE217662162D1D7A3F362FBE41F4907F1F36ECE64CBBB137B24541B9D16E421AD1DE88A2094417DA33BEFEC8F9A59884AAAC886EC6B9A0C85267F6EE337F8BACCAC7C5A33EA2CFFA1F2FA8EF729625B842C5288E1E0BB828A47868E9718424C7D044C933F539289363C112C8792CA6B4D4EF2E5EE78E278EED5D3418DF3AB6DB29D9CC30EB9B8BD450C00A6B18E1B2E808D6CCA8016882F67CABCBB57CCC77557FC4738653824D1B01C4D8099EB83ABF9F78C77AF725DD38CA967114398A31739CB319C9C323A42B2F3F52A5B0E7DCD9E84D0CF4BF52FFDF0FE08511048E9AEFB21E74F589EBA80BA44EC9C20AF64B00024481B78F778FFFCAD7EDE1F1A1FD1477BD0DE291ADE6734A6D51C5BC8621B73DFA8B5A9D24210763E60284ACDFB8478C0427E628DB688711C795882B90B3EC8E69BC29FDB4D507A94F6AECF607EED3B7CAA61CFB66AD89976B241766CF0F68223A34AD000F2FE89E797464E4690E12D6CB3E45C4E3D3281A7C69F64ECC794782629039122CCEFE2CD017EB8D7F30DE163ECCA69A2BA37B27588BC57B33BD2DC45E2DF9ECB50EC3F32CE576F3AB96BBDAEDBBA733FDA77189E7E04F815C21D8BC0D4C776DE596EBCB6202E2AE5C9167488BB823F3554E7076AF97A2C64106F6A2BBCF53438997DC7BA2F68403F198BC644BE47953437135FC7C9F0F865DC1E4106A9DF9CBFFBB618F16C24C4BDF109C5F5E8F75D3124654A04BE3BF90DC96DCAB2771CA1BB4892326771C304BE7765C1EC55C1779672878A63032BCEDEB5D67353D3EACC7501F4AD5E64362D0BE901127250BB0C8A35348A7FBAF37B57105F741D9CBB804E36189793BE75FF70732AA4BC4E2D36A00D3B3EDBDF2050E923C84C76C91C0FF3B70728927031BCCB46C3EE2891F25199C2F941347C891BC2E4D4EDE384BEBA93B54654EAD5EA6732DEC12A8FEBC6ADBAF38304B6974D60456965537886B5580CB4C3EEDAD7ADA47B4A524B2CEFC7948A53356BA2F80B4E3FEE1E3B03249F5DBFEF20DAD8AE9E3F9D0F7B70168B0E4A3EE53A545227D84E59873026CDFCC9F94F3C3C40054940E525A0A5C2884D99C6F666CB8A03DC05EF60698C69B6C7B10BA5D11A319F84E011E7088E7C8B814EB7C76304439AE3A1BAB13ED3AFFBD07A630CA51D730447ABC794252381DA764DBDEB0A4B75F5BE95D9AE5B477B2B69F44F2E62FE23FD8493223EDC5D31E0A16BC1DD4020D07E531A6047BFA1802B7E9EB69B58136AF03C34EE861468A0362B4B16754301934608F566233F7257B93F92C2716B6F5E1F8F5728C0E17B76E4C6E040068C59BB11455B00E39DDBB7AF032C243D548034C7B5283B3367804CCC5C12A1B395BD811F2679DCC34777DCA5B1BA736D8B503AADA93539E199F213DA8872E4CD4BEDD08DD1433DC2F2D32A071CEAC2B40497285A0482F4ABBCD4A3B6CF62AD23068445B09C6EA3659E25D50697D5A60B55C298821425A292B2FF44C32D6FDC567A63938A12E23C56EEAB5B4B2776981E9BF51571A2F5BEEA7C3E897B866D3401ED748329A0CFDCD38561CF8B68024FA3E3D48A93FDD9B032F0A285C76B2377C94008FE9082515876F50AB1E62CF37C8D40FE18A005A4E8809E0C4D5528D4999A004E77F77699B9D91F8B9446C887F1FFA87A31C1D1575259D22BBDA987FE5D3A24560CA7ACAE76E4D2B1AB347DDEBDA943C9FEAB1AA76021E1BBEAA3BFAE8F3879830D5FAB9AF3B300FE1885C3C621478C0E1309C8E40DC64330B6E6A08DEC94704225E65AAF202EB77BB59CBE591DED1A08A53E0ED15999E4598B155340412AE164183C8AB5C08CDC3F4C56D6083FC314D230C4D995226589A18E370633649D6702F152B96C8C172A8C567764F7F0BE8F7E9F3B3BB69912C524787799D43706C4F1F024AA84441E6CF57D97A1EDCB9C97D12A236E063E109C0B2363DABD94E722A1E1080DD9E79285F1FA1040D6FD165354775F1E13EE50047989F89BBE5EAACA5362DEDCCA043911F0D3BE92FC4101FB41D12C3CE000CA0934AA727A973F3B9AAB225434817CA79C754B7448D4D34B1FCC27521201CAE7A19D03F900124F9AD2C0EFDF9A2A94D84BEC1D64567AFD2AB545E1980DA1E923128B42945485FB1016433A7F6BDF0BA4F47B2C4F6EFBAE9E7B6B6ED77FA4FED39AE2F29AB2D2B78ED6DE4DB55C198F2E66CA1EC0DE5126A5DB71E99B73FCF9D699F4FCC17CEDA45B8B275FA26BBECDC849F123A276F1B264726827426FFA3F538CD327CDA4E4529496EC3FD56CB83F84D506132D474EFF94424934F0D9726FC0EF91BF3274B132D3FDDC2712FFA9D427E951675689495775B2DF134A21823AB3D92CAF478AF6E0C0DD2F3FC1D54FB6DE2F45EBE1415294761E515F993F49675DDF52141B7A284C61002187B72470068D120B608799E30D91E8E90C785346D7B213E8B482497FF1ED6CC8367327B8F4C8127205E9D268F3B128635578B79139434CE53E7B189F049298752D8B7E143A9019643D26561A0F9033F16979D990E1A6C1F752AFE543A54B1BBBBA1107DA12E16588A3599E32677F19231C9ACF1B9868FCFC88D86F95CC21CC8E5CA14C735651C13453DCC0D9DB32D4DE89E5CD0D08C5BD24D73FB5C66FFEC30F6171ADFFFD18821991EC38A1D128B8C16E5AB4CC83F7DF5B60AF4810E6758DF875C35879E748C4D3AC22985286F3825CFAA2332D203ABEA356EBB7C34DF2772999DC4D576C90E1E2AC0BA4651075754CE299C49532DB8D754D82E8562723C37F6FB44354C38B669A019EC35623F4D0403EDF77006916864F486395BA569C9BAA65660E08F7B871774162BFE36B1E4DC716E1B42C163AA7A049B8F6427227A4F7496745D81AEA1F21F9ECF3B698A68D91797C69E50C0AF5E8DA44922405535A3D2E97D4188829C1F9AEBD4A3B424A1F7D745D480948C6CAB3C003799C209581A96E5C26C67F292A0C7A50855AED3954AA4298A0459AC2D3D3D56163E9D3A6EE05036A74EE628702B85DF90138A4CDBBAF772D8A39B38174344EE4EB447AFF6A9528A237353AE3233E0C19D23A0DE9B72332BA04ECFEC89EF26BD1E1C2946C861670E7456CAA616BCAF2765239A287D511ABEC5B395188379D746B4376B931A35EAEEBEFE88AC6DDE5F9A7A33CC21987F54198C1217659E5896CE26254B7A6594FC0A7510065B7DE8DD15FFB218CB108BB3DC28BDE4CDC434B49715B9207F7235B8D52237B4A16F387199E3B4226D860B095E5B5E8A1656A5568FB04C4495477469C39CC2B5C1E9CD04857024EB47036D7C8A5F8876041C580FD63842C53286D542594E9F5F759988F130C31E5A45070418BE896433482C2635C05DEBF8A0ADEB4FEE454EB4EF1CDB02D8A69AC9792B67E21443CCA17DD88E06529134A44BBC498C4EBCF0C47411292F962D1675938D4F9DC181739F5D22B5331AC1C5BC286EC3CC171AD3D1111186FB31ED54F45D5FBB99A6B9F65528C5010DA3AAF3AA31A8F3EBE072173B89D7A21E7A05102504670D5F30786B945AFEB99E491CDDEBBD76BFC8CD99A3EAFCC9A0777B2ADF0F721E2B0F632C1579576A8E7448A1281D09A6C2BAEF5DBCEB93FEF5BE1655FF3C12E5FA2299EC1A39F600F66D477348AB118787D0C825CF793C0E2B9F176C3074974F901CBEEEE8421CBA5C99A5E9B4FD55F3EE1B96AE82AE8CE882D402D98A6FC969033EBE6AB15815D9B48709C5EDC811D69D1C81A7545DD8539CA057E29A67426056DBE7447EDBEECE50B7F2EFF4AC87833A4073C38601D6E54713B8D1251A73A03E121B936EEC0DE713488152BFE6ADA122CD518B3FD86D4E5DB436527F79B70BA3957186EEEF129D08B3651DCF478644BBF881890D94211B56073B8276EA759E1720E49C56E1B2256A0744830DC2EA9BB06F576EDD17BD6F3DA063F51E59B7D358D1549EC85AF39AFE47133C58D7CABDC734F32D97EE5B095308B3B43D0904AE178EB9B31B897D63C66191A532A575184DA04E7C9C04AFE524780D858F8D588E83B10D3418062D644EE3142F89992B57ABB057F3F8C037BB8A17ABEF2A19522C772739945FD383DB7B8EB7EF83E5F30A7805A4F683A5CCE740E044A919CF4F09B397FC163E2019CF3A13DB59DA13942B020200C74250CD26AB9222E41D0096CA192FA789352E2B996C627B513862FB294AD11BCBB6B0B96C87A27CAA86563D655D765543B1C991A794F5590FE9317B51BC0FE43FDCBC11A5FB8558D02BC5819C711979A375448565605A0F2EA202FA14FA839290CC066EC705BEEF67B30B5B68FC44A0AEC6934486F8FAA1A0CAB2D463325A9F8D6BA5C064E9E7F51BACBEBD79E6B915693A834E4B00E1EF22391861749239D829D7FA52D9BA7B05F50FFDA9686C2488307F07B93F8CB5826815BAB117418094F9F37A3A1CC3F5CEEF780BEF0D385C4AA9E15703FC9077B6B0135C249C23F06129C3E9053609215714E2E6C4B743B99CA4B8BE78D6D893D27959B061B9E843D96F60D2AD455F6ABEE334298B30C3D968DD9F5294176F4629BC313CCC0C4EE8FABDC1515C1E7B9EA115D2857F5B152C639FD07D7E7B78CCD71DAD38B96826A73331135F595D9AE08AC90A8E29E9C19D3A28285F8D7B806AE2D1FF9C3912AAAD977EDBA074A33F5D8E34D55760055D24F07FA82F17DC08CB0F944EA4B9FA3A31D72F966E34253EB7692A0911FDC7F4FFDE6CFDF22EEBD252C60EC16F86C495ED1A2C785C2A3E48987F91E2F6C1F416C8CCE89F1B98B5D43EF69A4FD325895BD3A715174261C9A1CD10197656396F5AB52C792937E928245E7EDE1051EF83D2E0A47A0B17C9D54B6D1923F70883A0EC676CF2BB289AB82F76936ED07BB0D285E3952C816320A122EF306B84BE76F0D074964B1D3CF3B66DC0DD1A29CE1405B4508E50C912F2E408A217187454BACF4F72416BADBE43D07AE6631AD6FBE2BE721A47123F22132B4BCDEC914411F6EA6A2A7376C3869A68814C86282A679B7365DFF866C2862BD1BCB8290A2A92D561BC900275CD8D43ED655C6EA29FFD63BA669F93D63AACCA9E2CBC9D17157B5ADD3FE4527474A1E088B168E06E99057201B4387E8AE3A1342DFF4D857AA16519B0EDFF22D5520DA4ABB38A8412A0C039CF5478CE11D18FB1986EDCFCDD61B28764C7E0FD7AD8C0155C680FB96F0252DD8433B18BCBCC049851B0C87853BF493B92E2341BD1697952E323AECD131D49F347F29E9AD038789FD48FE43A1571A2F0315E79EA30991FBE225E7817E0A6B7ABD8CEC864F2C89F71216EF17CBC6672B7D71E252D82B160580928E924AA6F07AD7293FC42C6C29A44C15C09FF5C33B7350FEE973A025FA009FC78B574309153067E3D7ACB3C69F9AADD14CDBF0B37548BFFF8C88FEF9EE00122BA3D19B2A7F9524ACDEA7BA416CDFEAF0F14BB52928CC3F5F8061ADF9984AD2B31B67C3B12EDA6E28C46C8775C87A04A59BD61DEE5D18EC2E5663BB022AB2F86E8F930FE7B1145B58718B362E2047AFA751C70297094F5E9AF5BCB8C01015E6C0DCC2B77617DE368F206363F769F6B2D1D8507E644BFDFB8E8CE91A426A42A14D05E204B60C9408A0079551578A307C8D56BFF500FA2DFBEF7A46A3A0C6F5D2707585850E9A236363A480376579F0F6850A392114515A02B2D3FD812594DD1266A6C17DC8A1C719DF26DC46A151E80ACFC7DAA25B29D163F0203DAC32B333C3013E8B1006A474F35B3749EC0C0AE525A434C0328AD2AF7403F40657DA06934205D3E73DFC32F863BC47A99B000DD30CDF4A163676A8F9D8A8899082F026F167CC4D4B4C5DDA55106383DD2E14A6D3D0B7B30BBDB70FAA91ABB9076F14FF2A0D892F4BCFCE79C3E4FB8AFBBE17A6A8D8EEB2281DC800B5F4430DA15F866DD439FB168E0B2330EB921CC34B5C1A5DC1B5888808C868574BDE5794A2FB4479AB5623AF45E19794D6345FD45E5DCCB5847CF7D28DC9562D69A792253163618857BC16C64002D76B4C5C27786913602228FB40AA73B59470F2FC295D649882BFB86B85D6FA94048CF6628AE2ED49FBE6765E0B65D15CF0F6D414190F03B9DD75D4827E31C840C36E3A2FFF2A597C1F4C58A4501903350A96A54DE43788F84B0B1E88668F434FEF1EAFB8150876D140E831EC3E887EBFF22989438BA45BDF40C48DB3F086B9ECC4A8569FE3CF286DB9019F04B147DD06F5B2CF2C13B33FD4CD669007B76186422B1112B36D5B3573C9BBED4C336382C3C1E27F5BF55D153B229EE53FBFBA4947158D18704F0892F1C7FC9CF471C4B3ACB4EF4F17564066680EC1E52143CECF789CA687223A48397A513157E238186C1F3E9CEF9ECCEB38C04F11170D0460570A1A0E8800CF46EED0BEC2646F5A43AD36F429B52DF0FF52EB58545F452FD4A3672BFFEC2055B448F1978462B2015009DB4658E185E9480E90B8971A560E115D49029737682D67DDFACE378DED2E923AD2339856BFAF080C6600603663F5AA89176E219B9BF25A3CAF3D130D4DB4A2728B724C5C0F1792F0AA2F42EF1EEE65BF1AB28E13D77DDBF8C20604E63EC40EAA852FBAE5340383561EA2B6436A3E02290CED913597E2C5888CBFE6DB3ACA29F55E9E4435001C4EF4264E0C96C73C55DB471C89D74319A0DC2D20C9EB9A68F235F790BE0206873155B82626A919FA7A530196CB3492F2E108FDF20EB71B122D7E060B0675F767CE738DF6034E9ED1BD81AF1A288F8E19D8231E309C9D406745515DA834DDEA760ADCA674C533A4FDC82676EE1C7714DC59682F59AD29C411499655BB357D2DD511544B8910C71D0ACA91CD50AD91999D0F13675B613606A73587BF4F158FBA6E21DEB938B1D4145086DD20E506AA3C17AC55E71ED80D4C79C96A9EA2B3F9F8F95CB08CD8D533A8339BCF9EAD44387D6E43AA04569115EF6806E1206A2A99847BD48431DA678E223CFC2B018B937768103A5ACB6C84708CE04D54C2EC4B1C0ACD489F7AA9991C6B93FBA521CB44CA9F4C15307A289A7C8E53F04BD43AD964A99E25EA6570360623B5CCE9C5D462DD9E7C00BBB2C286FBB35626501D101542AB9AED7ABFDDFAD42AC4B98786899B2A77949A6047890E9189F7538AED876F5D3181721F2244AB75E4AB2190DC4E87F2391CF6D86C36FDAF310463EF96CD42345073FFAC78EFF4202DCDCC465F72E48AC5D4F93593090BD539DD4E53619AADA97A3DC0A7AE31BA688FB412D33970A609F134EA81B655E20AD3594D14A8B0138167B5B1C04A454B52D7800CCE4C3272D4EF9AB3FE086D42325D3BBDD59C307A24834D75BA59201480CCEE669A4C6D764AE92F7B11096BEABE42596E860A346979B3BA529C654573D0737AA00DB76FD081F9C97EF9600E387A13040A508E85E467A21E796722D35876FF9CE14B09859C24F213EBA6123B9A0928AB6B2D3CE4D202BCDD3235DD814B06B158811AD43823ADDD6E35B87BCCC25AFA4E222800FE757CEC93B9B81F693143AC08580D0A45DA937450FEDAC068012B4EF364858EB05624656BE94676633B51F5D542163404739CDD7753123C813E8AD87DDD8754AD8975C802BFE6740A678F5ED7010DE23A674A1109F033E2D77348B8DD042AC1F37593C1E51F59E3BD06D4C56E1FE84D58AA8F78FFA1DCD25E49D7251380451CF52E65E1758CDBA7932479F8BB6DE85A006D5893E8CB48502761407E53A30C315187A21BC71B4C2B2429223F69FB97EEA1E81E725DD014408DADA0A4E6A72C47F0480A39F4CCDA9D1387DCC3BE7A1D3876AA45E429469BFDB14F44F3096E7AF29488656A6549CC17B4131053BE750C08DDA8BA28BC106679FCD82E06E748ECE2D268E2D212CDEA76D826B36FF1FFB71E5EB3C8668C1B79D2B4A10C0D4297D925F4027AF30202F454C5232D65B78381A8BD337680EA87B6A24C39CC0682484AB6DB7E9DF943C120C37BAC043629D57272DEF2FA0808126B5490498BE6BFC244368D3AB23931B11459296C359D71606B4C6F6D0FA2606EB81D3E5610F9FED3E6BBC9EA89CACED0FEE1DA33F9AD4CD50F7FFCAAC42B265C7F74CFD057D58FADFAFD3866AC5A351D9EE41188B175DC34CEF850756BEAED495C0B68961CDAB49E1AC7969202C9444B91119FE4258C8FFE8EC660D47ED6A9838EA30F7D9D8FCD288611C49A7DE07C44838388A647AEF32C26C05C97980618DCF050A9B330AAD032A1512E99138A5A1232B2AEBC5C8E04283F4416029E77F313F1DE6E1EBF664A75875226E8BA6A9BF80E55401484C05EE697326616F5C9990BCFF1134F5BD34BE7EFBF328DA507874000FB75B15E0DF05D41EFC1FC8B55DC4D678795C0A8AB39FE95B42040668D53A17C1405AC71BF75081D373C4F260DE7812C4EDD6E449DCDBA9F6B2519992F9187890BF557C71B95E393C9EAA9DEE953E8A0C820BBCEE859D50D0BDC4C442B3D81AFD245F1B7FCDCCE3EAAAD521C5DC7D9ED6F899B868B6D9E3B20519BAF76B2AC4EA1D2F9137DDDDC564D1FA79249034F83CBD62F9289DFF40C19351C00272136607442763470DBB1996E50DEEAD99E7839A49ED4EEC6EA88A8C0BB7E9D74412D3D3AAC0B48C5BC01D00FF9575022ABE803E878EB54219777F0B1D878E95AA99CC78043D729EA6D23788B244278F9860CB89E4EDC752DC66983CF5C2C1A36E6FA8B9654CC70D6B5FA3796B22D6571FD25C882AD948F29CC3FC235A37F2EE5DBB1260BEEB803F1DF26F3B551C59BAD5D69690CD8F040BB332CF35EE0B7744DCA1C4C00D48B8B79C212CEE1315E9750631A9637C428A07F787A564CABAC1D0D1F11B15DA974F52794E90E85A7769B57F677A08431A2D1DD91A61E951E5FDF8AEC2A04A2A9A248909175D65CE37F12B3B8F5633DEBC3E6F110FBCB8562F3F2A39CA6C0D0A8D410DED0256913E46C7E4EB7FE6B373DED063BB52A709C46BD1E8A41ADC060116A71223858C6C3A272C77E05F8E1A7F8657DA5E9234502BDB3F8F98CE8AB28487245D93ABA98D6F860DDF576207C3280E3A53E0AEF53BD64DE804C4B7C2516CD1645EF607EAF2FBCC16B150E938E9B6D16F9265CF17A0B3389A6F5236B70AEDEFA107FEAF2D8BA6F99A8BAE634EE3F1269094870B135A48D61FD06FAB62E7F3C5B6C17FF59D8FE84BB3536722AF7D6DF99A6F4FE85E41980FC819BE440EB1A4D90589826C3013C6F95484AEED05C1A7DD9AF68646CE3E5566B69364194A2A70EC0171F3E422F493598E769B2A468A96E122911F9CFFA6257AB5EA6DFFB19B124FB7FB3448DBEF9B48BD50B77C7DD0A658896DE8355E689A810E567EBC9694AE36EB282C8BA711EFFE6F2050689CFEE6ACC69758F68B3338BA7580CD22D7A9D13DDEA5FA8E8D9D7607184F8314A88EAF747223F218FF1B778967DCC08E2F6BF9C7CDAAC249E723A8EA7B7FBED515380C2F84FA1B05ED15E33B58A56E26868E8A84DCEC850E630DBCC39F741110303D2EE52D34E57112A890B87B5E7ABC8FFF28661C9D13E987FAC4068F9E36AB9778C38F623276399C7C50185755DAB9C4CA75CC79647B377B03B9A1B351AC3B26FF4E212E1B9E8E7B0DCAF27E2AA58454C4D0DC9C4AB10F4140DA1D89CD6CF43B3C18772B8D9BCC8DC94B0BA1651D68EF1F8D80F4987B8C347F027352F6C66854E96B03E933FA98ACC3704F4503F37BAC8BDE9931B71E9A0002CB3FB12BD0D185390DFD367BF2782A84A54DDBAD89D8406407CC6AA0B3EC97313F41CB34817A9642B5066557B6333C323BB02AAF1FD04474F065E09C3CCAE2F7875918341909D5044458BBBA176BFBAAC75CAD7F36E5030784096CA9A14EABC545F0A239B1DF04814B896794E5971259868F3D92A5D9C4D7BA28B5206125082BFCFE8FC12A0D169177E90BF0DDD4EB3B833D4F08F7FFE956FCBB385F395C18B7599F9ECF9F374576A5BAB0A7A576BFD00E98237F5E4D6A69824FB6D2816EB56E68A69C9908C4B603DE5C1247332A05B4B34F18CEECDA55B413C738F47BCAA2D1A2977631A57C4771291CD6EB43C4496E0A792BEF6C8AF7D31345495D52C90B5C15AE4B7B37613F4CA1DF7D46EE334A42A652E91F5E1DB3A8B1F70EE6B19557A8EAB9A9304FA8F21D9D9C6F55D9CF9148B5F536B1511F66F0554D3F126EAF9D24B739DB7FA7D4DBE0944E4D81374C34032BE99696B75E8960392A69C064A52F237ACE4639AC4B172EB724D307DBAE686963C5111C53682A0D579CB103273F8AE9AD3BDBA5AD0E2193F686E215AEE1CE794EB9E97FDCE5AFEA4EC60BD477A9F15A954CE9990BE4F5FABE8E11C37603DE3283165E6D26D18E823AEC1E0DC6C18631C5EB7EECE18563419BD5999EE346F1FD74882EF71FF1A6B2F69E63114FEA101DAA9FAB2E286982C8A0C74E88F625E9FB17EC96B1F3615D348FB9AF249511141E09FBC2555FF812D2AB6F5A1F3CF9F60ECBF78D628B07E731DEBE0CED2DFCCB8E6785B70D7F5BDB65DDF8121AAA060AA0AC05F2E77755067A5491BA748DF069685EAC26CBD6FB6F7BC12BD48C04C65F70D7396C4D10EDF8408825052E9E6DB6D1A51787906F7810F8A53ECAA5C532645AB4C77BE9D3CEE0A195526871F7A6963582E926970EBF477B469E35DAA178FE509E17F11EFAB74EB87ACBE0FB7A2514B7973C6009E2E275FD60DE0FB82E71ACA212B8489AB397B80FEF4E61A39697192451D92BB46AEAC29C40AF83BE85032AAD514ABF5DA6FCBB35617C70A19F5B650CF94692411DFEFC5D03A8343358BAD3708367C14DD854D09D82A200307F7D5C8B80D1041BCFFD04A3E3795F68972554439B312DA2F3CEC371F25BD6A039E50DE9E1BDE9ACF8D2D2AA7E0083E7C5F4DD518A3DB2A5A63E6F4FF39B1DE3C9E40B3587396975FCB2974ABA127067770D44385B70E2AF39C31D64DE80032D631ACCC391F39076322A92A657C2E7D4672EDD42F582063DBE5AFBC9F51F2EEA3491E5F522D5872590E53A01CEFBB97DF867F21E306CD7F5ADFE800D4492C8FBC9C3AA9D9D23A295C162CA99F21B8309C0741135EE1BCA568993712F69BCF922D86BC70E0F9A53C63AB1B9A991D272D635F992D55C0B4672FB2E78E29DE195A801EBEB857BC8E9987BB505EE7FEF2280D23A35612FBBF08563DAD6662097CF568F2962BB729C52D3B27587F77A52CCD6422003A2527A4FA28BD13505B8FFEAB3F32253F8ED82DEB84EBC6801C8600EAE7A4779A3C22EF496C1227CF18073F6B0309E3B0BEEA7CD0E0302281ED4AD2ABE6EA6AA04A42B30447A2F33B98954D094D77FB6A5755067C6482418548608E560B096E603A3B5000547532EBBF56652EF296FEBF7DF79573ABC5012F1717873135431864693CCD82622F3F94561599285436E1F3E6860507AEDA275184D6B610139C757174B7FD8189779D52F601E565D8B0E70CC352893D641108AF8039694D6AEFE7BE6ED4C37A830BE332ECFDCD49B4A502BC735253E6F4B6043B0CDC1E186F4CA756002F67FC5968E1031DC916A454D5EE7F4D6773CCE09915661659F434242CACEDED44468B1F1BA034188F34309FF51A078BED4CBE4F9DF9E913C544246B0EF4C88F446DFE9B879AD3C0AE688EFA9D2596F737A9E49528245EDD3B3B6435356270A538A06321E1CE3044EC9ACB6099AD90CE60ECAF79C84E80C287BDC46C8D3AF2C84245CC8781B13C90E1DC85709674BEBF244B58998E765097447436BEF0B2A08EB3B6DD3F7E26C621B6B8768CD110512BAE1BBC565BBA0F62E93434960FD0CCB81EFEB901280462D5D24F8A3712E94A5A029C49913B734A1A156100570E59586DF0D0BC9D5BA860518A1CD82F18835EDAAC0CEBCAB391174FEFD42BAD6DB0ECC98493D3F29B37CD91574C6F54BC0C13364D880942C0BDAC6B1EFE57AD02CD6EA2D59E06BC9DE33D47940FAECB50DBB98B897D9D696277BD9389B0D90948F52C32F45E932E82C1EFE221D87A767FC4389FB68D9878739F629D8E9ADA8255E04A0262ACA8CF45B0AF35923903745477705035C3E1B8A204AF31691BCDC5782AD6A931CA421695D883CCF3BFDE4456BB86F4FC7BF7DD81CF7CEE567D0008349CF2419C089CC9CC177BA8E09F2D0F7D3811EB4F7121CCC37C1BADCD7564DAABA5E208781F85ADC49753CFF92192A5148197B8C4F7E2332E4C1E757E7C4D896F12D0BFD36AB83E10845D633E8EFF360BF1B7B950B3465C37B4245B5012A37115E9DB3213EEF6823C30F0698C617F36CE1CA62855F56D8F37B047702C478192A7C05E8BB465C27B7D1BBC9B01D3FE154FA20FABA6EB64613F97AE489D1D75AE302EC2BD2DA450A544EE73EC54E7A40CEB6ED2DB0C2DA49EC41C50C99DB3F6EC20DDEE4E8A0CD235CB61DA596DF68C6F7E7577717472134D3E460F6712F623847A683BDB5CDEA400A760653A1D4A6E6A63D66103A1EB251832AE0D08BD0CC8DE890C20EC9D8E32A2D22CAFC1B99BA73D2FDDE1751C4E769DD2A83FB7112EE919692EF6BF5BC17A8BC9E19694672F0A9C143E0B5868BCFE9CC7215C5F25C7AB17255311CEDDD7091B2DADFC5E3BF8446FB2C1A2D87A05554208C8C64CDEDE49AB6C913B5BF24BD16ED88C92893DC9D6756EF051E889DB8C48284C4038520176B547F84F0C0A7BF5CE0E6D25613865F8F4DFAF02783C1A69D71978D3A56B2D1184C8D188944E55EB920D44E404A1FF07CBB8F9ED2561479CD0C76065AEEB1256EF54034D8B021CF200C80F8BAFEDD3DF66DBF68D8D8D3DF64BAC6ABB20196DB942421183F420C0173ACDC639CCB08291B268221B5D52B7C08BDF87DA5C3DA0BBB9DD82E492E329B8C43219312C9C71EEA25E65BE68E0A8AE130E5B895E0ABE1F1D6A175E80050331D69C42F6AA4A17B110CF05138F4D958253796862EB8BAAA2B3C3EF8448677F47357A0DF7F387B10308C17600408F0274426C8404454A9C3221167D3B98B9D9944488D58FE005DEAC505F81B88A2289AA804C81AC0005D8D2D484D768BC4B933377F4A123A9B370CA3B6AD1E7401FA2982257D90A067422C8F973D1AD0925CD9DC2D13A75CE4B3D341B96C36EC86C4C7EA4643C3562AA612943754EC2E9F1AFEA236E23608BF65617B5609A786D2FF5A881566D5F26819EF89FFC86197D355822264268D43CE998CC3907B283767DF997D0361B51C37261D28B3531C159F43731A4E888FF92737BF1957D51C889537D19823467B71F93CFE45B5E9F25AEEA9491DF236114E704457302BAEE2DF6A56BBC6FBBF8596E9A4DA6B0F62EC7C1B2073481E5F17CC6478EB1201AFA72C71A8FF3DECF13CF82F83196C74F1ECBBB4DE27125580C8C6FD005523E49A9EBE19AF8178AA80C75985AA684A6D4FE0E8A37F3A06816612D05D12DCA3B2B8D03A2579418C90CB7226E1963B87D8E2BA7970F3554407B9E163DBF5F0618DE28A8379DEDE7535E88DEC779EB0B181D169DA8F69FAB6FFDFCCA3BB1232B60B0D5A876C13742ED22EA9B3B9EA8089EC9688304E01D7F9A14FE66711D6321BBC333E20B7ED3992C13EA67267A966C42B1966D38E47552B79FE7BC267C66D3CFA05649D17759511DD05104572AE80C62BAA8024B4C62BF80D065924EC77CBEA0879DBA5C8284319EA9D226D4C064059D43673C334A215FC40898D272ED4A4EB350DE58EE364AA4441FF69D872509D87AAE963FCBB4E9CFB1E9497A66BC3BDC995BEB476DC5A04683A308B8E486B5A5BDC979DDA2AB51DC7FBBF82B7DFA109F68AF0AFC4FC6DA039D032FEDAF88E8E5FA96DE0900A8DF46B59094C6E8A7CF83609552E954917E73FCC381665DB7EEAF93F80E3DD9630FD12D764DC2B03C9DFF14D196840998C1F40E7C9D6102F4211EE9E4B3BABF9954C716C39215CDA5D27ABA8E691FC39309AECAE9E37EB000E0FDC181C69DCF812368349934A59392A380E5EDBF80A463C3FF5974F2A2927FF0C467505483A9240D66D6A7F3B1B7D920BA4EBC5472F9281AB279E9AE3732FD8ED2EADC0B6FA36E2228AC3D268350DD54EA0878C59A11C41A2876C3E418D03691E1A7E5833AA5D821B672440CDC1D707363020B24C1B993162826C7C26B5B6DBCF9AF444D2732785333CCFF4ECA48C943540DD0E12FEDC70271A5BF028054FF6FBC8F4EE59153C9202268E50033B833F7327020F0A25B2B05B6E81D3F765B198D70C5ACE10B3D03930E0E22D6E9A22994AE80AA034F74EC97071D5327B0B6BA2149006EB195D8762F142245CD5FACC2FEB893589236CEEDB1D5BE577173894E4F0E528FF2DC7216BEF1B406ED0AADF1A5F82A680D8313A24E74049FC1AA5AFE3CBF99BE1AF07D7B6E5711A2B78802ADAC120336D9BDD4770C0F859507E2A22DD06C0E0CB297C47160B67BDAC040E626B539BBF30E0CD87803388DB24F1384947FAFCFA320905730E09524E8142675747F358E809F55A1194F66B8FFFB2F98FFD4DC3B56F3009F84C16A2245CF771F17FC34100E3AA7F23E37D6823B665A3E2037A934BBA256F01EFDF74D6355261859067A5922360E8E052C89FBAFDC04D371EA22EABE0CB77E179946117DDBE722F8DD2CA4EA988923FBFA74CEE70C1FD20D52D725FC272D2548E7B750071F389C5330563553EB594FF01BFBEA3E32BC6510CB36EEA119C48C83F2EA7E591706C268D206F62D3DDC8E01478C884B179FC1FB9E68000D5EFAECCCBD2EB66F878910E2BAA3A477714FDC2E0ACCD8D2F071BCE6F20F7CFC34D3A341EFAA496B7453F879C131D6D204ABEBFE1FC07FADCC78E0E171B677C3DF8A5C5DE0350CFBA20962FB4D031C83CD30A845B47A8B55C774F4371C315B96173853AC0AFE7D75133A0D70BFE5FFD4DCE581E3243476789E34213F0A57931087FE7174D2F4D1F7AC41B8D06C619F497353D92DD7C115E4CA2394D52D56B302018E1C52EB81DFE432B197C07128F8CE85081CC0B748B90E365AF4BC553E5B7B692A5D73051EF902D165DDD6ADF38E3476183F073A7BD7EC648BB647D5C6B9EC4EDF22A9FC364DF7B28548B939D434464EF8526FA30DC27310EFB460726FAB308B6AF9B9B168059E2DF77B6DA231F1F3AC7F711D7B34E45DA899DABE69185C9A0E4C85D9F528A4938218C044691D9913EE5D8733F443F991BB75242F7C142B7EE3CC7D36EA8C5A341731386373D7C3B6EDA072188660C33DE081C270F8803E0EF6A23D7813760E2BBCF98BBAB4DE1C54EB20872272048AE2F5F76A9C9036F978200A37B8788D1283A38CD5ACE6EC6544811DBB95B60BA5F7316BB40560AA0FE9A38E4774F66D3D1235BD0280429A22B809FE0B0F53ED70754DB9A2C81E404D1E111EB6EA97F745E38E4AA023361AB05DA38E8DCCA2D56038F95069E7F8FFDD2091F082C538DED2E1128443718B1948ED4E70C210774484B8DF235CF1EBA1EC1D294C8FE57D0C9CA888C6E8106381F5F773C4A1401334EA339A61945D6928BC584CC926D4240800BC0728E7D8F7284ABF24129E8B7C3A48AA98C91FA4A1C86169D4B597D2D5EE3F9C45C973E30759FD2249F5169C243F08319C0EE2A1A9F598AA2B988F67CF1516961359AD579060B8C37AEB07C5EFBB2BF8C98CCF9E984D1D7C7C7E8510B53FF43C3EA9F8241F695BAC5D1EED60809B213048809D718E076A827DD738F38707985884C0D553882BEDB16729A868E5D9A12A361FA1309399F68577F6B7E8EBB4F3EC454B000A4AA54704A467777E2762C0C0CBCB31AFEF8D4237D384A8F49D744DDDE61B027D7207CD555C54AD53BD1B1B25A7A827E54BCC4E343D87B283B39BD1783E8BC16B55C03548530C8A598A35B79FE3BDAA27C955E5052637F0C427E1C0A3A56CD9370DF7D8152CD29B0587F27C753F02CAC850C09D1F262D5F530A0765020F328C674C2E0B9D5738EB315CF57467B7E937FFAFA6B0A9C791A814858BD1E1043AC05D045E619B5D250F03F9FCA9F2E026043B51000896263D5CE5CDF8DB1D03E45AE28538EA4DC8E7BA6160BA7CCD411E7B074D7BA3BAE7DCB4C0FABE498EFAD780D8E72C44C66B29362899591C0E914825684205A6071B6193222CF7C3D6A05A55A05A0196B7B660089D480008ED6E5B1A14FC787A4D337953981544C17147B8FBC77CDF8D244E82F1DF8294B63B681D7E78CF54B1042D4C8364C2ED36EB43042E0137CFF8B5E9B848BDD980B15F46FFC077902A98CE5AF6C744E298A66D65C08E293B691F1052B904E276CB16ED5F2081C6C2991907CEED90EE79A163B5CAB0414F586FC9A0D493ADA0735E8246A289DFA64FF10E4EF0CBDAC43F55E724F473EB50A0586A229C57C2843BD15FEB3821C189B753EFCFFA1D592AB3173A973D23081B83F9F1F38820A9A12142FA4ABF5BB977519C8C81ECB3253636B2D6CEDBB2EFF6B0259DE4A4405BD8D51611D0FA45362DF28FC585CC4E85082B4E17553687477F3E5BF6DC582E8C126CE903E0511CAA3644BE5B94F6639424CB417E362E60C47C9777904BC07AED5CCC15737D868A86F18373D0B244E121869EEBFFF9C11A24F6B9733639E18BAFF468CB166080E1D6CF7E67C4663ED9003AE399957180CAE135D4F7DB7C1DCD2624A192F3565BBAAB0BA6071AD807539716AC01AA617C4DAB86EB7FB5CA31CE04E5B4A7BAB3BBCA22B76A2A491D479C6B70D2AB91AA4D5789DD9C72BDB0CECC6ACD2D41F699CE98EB7765C96CC804F388814604604395EBDF079E4BBC2017AC7FC8395AD8E274BFCEC7B09128275D855CE467BB611F6BE87124481ABFFC7964406074B9D831DAA2A5120CFC3961770F57773F58A56BC037DF3AEA6A400084ACE9719B0C4C362E1242CF3EF6E5FB0D8F3826C8B8A98FD20F8BEA50CA92E625A86E342B9974B4DBC3C56CE11CFC2615508FB12556B7BBC5F94972D2491C142F2672B6D476EABC99FBFAF288C8A67346DE377BB4EF1D6D2BFED77128E826A8276E26E13642083B94BB71F4B246B57AD6D7CFD89B3EF4D942ABCDDBD2BAB925CB1AB0F8FA6234C99132E549A32DF9090574A543AF4EFCBA620A7651EA12483C4E894506CE379D2D47FF440FF26C7A028322C6519A1B95AD5C24C327075D6E17238429A1DA7BFD2EB8207F4DF86184A56480C6EE5BB06C6FDE6E32B0FCF9693A0C5B1337765081FA101B8AE9C9378F41694A0867F2CD97A88D29F7D107A72AB845B6812606C4961359CF26B313DBC6AE4FCB5C576437146CC185E50760550F691B55E4D8AC415AA9D289A39590220E3EB51872609032D368F0D5AC6387F1AB0F104A255B1997D3AB462F012A62EDF4383FD9ECAD40D4F3A0245B4A03402848B620705056A96862BBA2074470B5FF75A7DFFC685E441A550899CF46CD4A0B61EA7DD21296F80538F13D57B4E223C4F4049F84A0FF482F3788F31A1525F1616D99D7622C8E53F178103AEF75CD2637D1669A59446051FAB0091CB425788D8B4BA9593DD2060DD7200AD61139EBABB360929E22C076029C6188640A9423D8EED8177D6E8D2937474A0DE9263E0285AA5E8EA484E7D471DBC24AFDC8C1133115E79EBABFE7736F23EF7A680B3031C2A0300D3CA7A9DF37694D4649754D4B13C13234047FF378AFAD80075056B05EEB1759BF24C87E7CF421A376492E245BE418EF845CE973C2639F4C9AFD1D61875FEE3DEE312C225E8030CFF08FBA12BE4E5AA076A381E266719362E94F679E79EB224A7E6E0A55CA70C0E003CA30A128E23E4C1B36D9291CE60F6461D27C1B8082A94B62FF89ADC9927578946D1ADBA08D8DBB9FFB7AEE0C9DFA34A574E4C49360751373DD443E4F1E15B53F7321CBEE620F0FC1D1FA0D1B9B9C4CF748B676D5A8967480286492FD59B4BF68FA93D7ED99D51D5CD370B69E2762776419A16BC3DBCBDEE3A9CA5C6066C156E574A5D01BEE566CA2A91B63CD9FB90B60B833C36688B4E5F80920964B8B9E601D69E9046CB31CAA0BF4A9045AC6FBE4EBCAEB868F1C362AB797B5F81044A61D9B43FD6FDBBDE9FFC3A8F083121063644900C260C65FD6945DA31133179A865F4E1752EDA7F018FB8DBCFBD7ED28E393721A65E6B2092B508E6B9552CD9D06104AE7265E93FA225F3C4B0A37F3E679B74E28870F78004542F2038A4ADCABE5F51C791FA47547077A3A9B5D83CE3AFF1883263E293C0C20B6A7AF1D872274A4DF034E604DF4B66F349F4CE41EAA6A3CEFA6D681065366D8DADE198A983BB45A4BA41344010230C2DDC30EBD36F91B17AAF98D36EB03ACE21922CA8A2F8C55BE16B0479EB9B4749CB1B6A1166D59FC7906F7CFDE5151DE9DA897DB855B860F221C47839EEA3A259885BE2F315E34E4051F88439EBB6047BEFFB792CDE4EE32EDDADF53F987AC23E3B45D5B6FB9FFD7158D205862F67B17ABACB4663D2C25A7AF40BE055A9E28C3CFD1136BAB965E3EC4BEA1898D526FB86BF82F861B7D0CEBA499D690D05B91ED4A14802C75F19A27352501595CCD56FF5FC1FB9821E8C9A5C86984E4BE9D5DF1238C1ECB48A4EA83FB1334EAAEC514889608E6F9A2C010C56A10C584909F6EC8D5B1E1E01459D75226296FDA312CD5A6B0EF3FC031A8F3C63481EED9F107B2D6D2B663DE03D9755BF04AC1C34F93B2F5D5E312DDFEDBBEBADC21A95CC6988A17FEC84D2AF9E58DB0DCDDBDF6225052C902AD2E60D1A843D03F1A7908DE7CA3000F8B90EB3CD024F8FB0C3F6B7FF4B15C91B482BECA6343D7F839A22F7265D01542592EE331FA339A3D16DF1D76F52E1F31DF1A1A9C454D5F8C5689FF6D2C6045556B252D647DDE6F2D85A749FB1FD1890A0DF577B398F3F1A4FB690D2B0DE4F0571935E16B7C41256F339879F156026C13DCE2BAEA2993A928D8E3CFA063C9B52673086396BEC19AA891F6960B47DB467202FC925149D0DE8642E2FC9B939609AA57078B7304281E0E9BE6C79A78EC2435120AA1CA7FF25C3D0224F419B334EED68FEB0356D5BEAF99E2AB83ECF535EC6D2AC8D2730432B6EE496299DD5D79EFD76C3D410FB11C25ED7022BBF20FAD6DF3B29B7FC30587442A12330B3A45A797686117DF396F488C965FBDFCFD3D410D6CA995892029E1E3088C99CCFDED59E2CD39E3F2D1F8B53297361CB1781B90AB9BEA5F0013C1D07F16FF97BEA0703F7B5083D30C6B167059C88097ED730CD27C1FFF3BDF68D0A80F9844372E7E91D0E5EA24E4C4017070DA750609BC3485309803624DC2D3367C2E7A9DB35308EF7649F1D87E71D6FC0BFDA802731EE60C6A3C4384C21829F4B140C65B47520373DF2A6503C75AEFC97E2D629A278E2F31DAB18AC480BBD92FA962887595C294E9B798F3A0095B307EC1055987A57D48247DE6E78CA412C09CD05923FE6688D97E622A3794A5D217EA09F1F9634022CE0AF663389205411601A01D9008BAB45A22D5C0583EAAA3C772F86988F32DBC8DA92CFD60919390646F77F74FB2F9A0AA1657AC73F77CF377B309F78A5A74F0D5F3AE2DC6BD45A8E358E36D4F76EFC4F87E6E9F4AA9AF35013F0749168226D25D11609ABB875F8BA47975EBB5216B47AD3C4667CDF8F471D97F4D84F9B17D5D2AE445EABF50D834F24C9585127F9BF10ED6CADC935C755B5DB6D1362D733D38AF535986915960463C52E4D982E5FAB3FDB0ECEF41F7897BE11EC34F6F76B6D19D259A9CBA76B694476261C0F5C05520695BB2EBFC549E548F2F27D0966083422AECA27A8623A7B96060B442169A4842E834A823F465FB65522C2E8DFF0ABED9923BF1CC9A0DBCF27301BD91276D50C71AC04FB772B13B344188E17E1B0B73E60C4E9ACFD39FA442C8487F2AB8B346CF423F66E42DFF174E42B263BCC816311A596BD47528187FF73AF8D4CCF8384AD95E13F7E3C78BBE949A0E646D3D040204AE155ED2956404108E1649C382D0F01E2C36AC670BD11B237DA446298E5FAEF37F581E4E21F25A2A90CC8590453B33995F4FD03C4A15A38012CA717438ADB5C0A904446E23E2F66D01BAC3F69032AB854810B50C095B065EF805BCEB9448AF41F064CA11BB50EC3C89834EC12AC9BEAC04DBB599BB00365ABD85D5BB409A5291E0567EE95AC5C34B96A250B7E012B632F5729116C8E77D41542C840D29BD97CA501FA1C152C512A2B1C8BD347D70C9826F365FB53E3B2CC44D5B2D3CAE01568B193DC61CB93B64A5A98CA5BCE9DD2023AF5BFE6D5CED6CAC6FEE2944A42FA99D941A81A2E4704217930BDFF5F0D9BF30918C5D6769E09EF794E9636828C0ECD8F1A275580CED57B28C5A16B950D79A32E5DC5D25329E3AF66FAF867CD23627D760AD088395A4865CBF3D5334E9CEE7D4D10E4B96F3A4F9F907CC11A6762A434272BFC242DD234C5A30FEB27CB3CA592E196CCE762ACF1EAB0049F25556E9E92F0F0A25D4281BFC0641F54BA4C5AA03112649ED049B7C9E498472E3001D74FB9015BEDDA468A76CB67D551B5268F10CBBAAA72A0DEE4F87636C048508B38F09936DC43653613EDA007A973A3D47255BD229C7A40888723930A2A203D69A642D84E96F47F1FF0ECE19B6B2E38E0AEE9079DCC0FE9B65F434A5065604C8A9902BBB85E0D691B6146140309F21071B5E42D9667E9B4971128788EA9910FD287AC35254CB0F394596AC180156D388C47F81100106E60E194F23C2CE100312A8C61C2FF8B519E700FC74BE62A30D00D56EFD3BC7F3ABC26BCD5515CC210A4FD2EB2A0A68E34724B171F22A7C94D4BA5687E835C399F4385840ED8631A662728EF58A4432A663DCB4A70E0329A604DB17EB92347EB8C756FEE718073BE173F11F9D91CCC918DC446C5ED5B4043F0DEBFEA20E0786ABFA317890053D82629F1A639950F952B736D58221432A25D42ABA5B2CA8BA98EFE429F3CB5CF5DE0838F08C12CCC0F7EF4FA909F70510F2259D32A09C3B20B82B827392625AE9967A8EB68A0B53CDADE3A9E1D23323942264E3C85C2FA4981E1C8A72735ADC173F956824988C22F1640F096EA2738FF72F682535B8F1F5143E806A1DFBEB75B7A60838C5B3562B02DDB5DB15A838EDD175734706C4431B0CA69D8BDCC443F9744A0AE6B4CEF7A48377B4AD1A6D87D902DF26DE42EAD37EA30F185DC34663FA96CED967F687118D4C3B11591E77585EEA5FB09F1F167F5182A4FFCC831806659CDAC8A236E7E5C2AA7FB2B5383B1DEB6E02F9E6BF2C693E529878CAF2540263053BF8C82676FEB890477A5E699EC2777802FBEA04CBEBA7B8F52304ACD2FA76B424DE59B10815509A09E0C51344859A1BA41AED313EFA19C7CDA68809B1D13488BF04F0F07286528D60E40D5901CC27062282189754616C065EC16F22AFF32F5C8F987B72A88BE7D6918689006D66406ED56C37A5902EB2E95254EC2424A3BB77BAD2C81845DFA3236C9E946D9FC7DA105FE7A6D70F945DED965D581BCA3276043732D90A3D4C78401DA13342552FE17475DFCA4B2BD4110B53CA5E959F65CBA3282A41A47C2A2A1FB9B93BFA476D848C9F3DC07381F8BCA3B5B6F765476B616E280DB96ECB8CBB59B9E1989BE43ABE6DE26861906C89CA4BF12E5C80C6FB8A688CD23B60A71D19DDF83F899E1452403CE3EFE36AC6373933911E15DC9268E01F4D89B4C01983B37C4D864D398D2F36534E0B3ECA4E4F0CEA19249AF720445E172170735B3D4E8B7A6C97856C67209136BDE34D6D5F5E398C69F27704CE228E0DE4684D4382BB8E6A84284F5BFB8634254422EF26D97443C6922F0D0849F86415F615159139231FF43E6FA33D64904151C2F1E88D252FFDB240B5CE5E464DBFEF5D55CDA4047B164C1D953CB36B81833572FC12179113317E680D3AC9E73F0436167DA686B6835C33E0AFB0A5D73CFB1929084FA03E233395042CEEF042A80CDC44EE63C2AAF0DB162AED024762CF44D508DDDE220F37C4A4EEF8EBBBB0D1AE1C2306D7EA98B172F0E6D9EFFA807774B2BD512EE83DFBED6F367228CE5D977D8D8711B534992472152904FF7A1ACA768C01CA0946310550E17FBF0DEEB80AAD26C082042B8D027D1B5B4BCB0AA7198D33F53FE03A5E4CE335C9146A8E4561B88158B0D0A992491C91AE06D2F32E15F7B4B327ED665882978186A5A9588A02D13551F0588FA71C86EE04079EEE4481020EA921685A7BB6FD9CF7B849DE628D1991396DC668629DB6BAC7C1C5FF8F238C74EF3B534820174ADB17BC5C6DA521D18CCECB7F2EFA329B2FE825082254657B7873934ACDEC80C6868FC2757EB99A2861D2BEF535279A5A66AFA5B8690B4A4343F443D3DA0DE132BB4020BCD2F47FCC54C8FE112E897BEAA4699D92A0EEBB07FFB9FA8999B209A0A299622250BE472CEE62BDE7A8BB95A1CF4C2BB77321045A9C341A879E93BB638EBD57613C14B3D36FDBD5F437976A978CB45BF9B152CE98B1942EEB47E55A14AA9CFDEC5A7D19F8FE28B6530289237FF4F402F1AD5AC4385C0A1B16DD822E23C3765DF5ED9E169D6DEB6874923710D0BA813DCCC9F081F8C728B97210D30F6415E4957AD58926171D2A60CB49294C5FF4A72CF20BCED5D73D252E39710E3865D70A0168CF7B80FAE811434A39A4B557EBC776FBB4C88A37CC9E5CCDF6A3309325D90D4DA061BBB641C628AA80AFAB66539D6DEFDA6A5FF94652F0D67D35DA276556E9593DC30F783D91A7C582F484994D5069BEA9F6DDFF94E089D525F0FD43176EF4654B20DF27F17AF5BBCD809C3EF417B945C7D2CB09217BA6BF70EBAB2D812E6CCD773F85AD680D35ED098DBDEECE8477FFF0861F0CB25E3F23C879DDE701B0D11CB90FC99FC24A689978C0284F7A742E6BD27B47A13546B338250D3ABC7C819400E05C8A82F4AFE25771024B6B83CFC47B154CC8E70E03A5DAC350288ED6BCC5EF7BA84142866443236B5BAB76CC2D1219C58C57BCC384DCDC26EDB50D3EEADD41EBCC7CD9C6B7C227F79AF6993056B7A1AC85356D9D52C05058722C8EA4C6348519CA477DE403CA8FCA6808BB0BC5995FBBCC8F6844B73D6502A91C27823289CCA61FCC9C1ED72429B330C77FEC5068AD645772C29F019272F9ED832951323D4284ABCFC75A3579C994B7441BF63B27825389635026B2420A5D8F1B784EF53A48518C00E15ED7C4A81486CD6BAEDDAF041A5B1D12DF0432B633D3E50E518EE18F1702E702BC41AD4B5860E6FC38BF8C75FDD2EAEE74E76BEB8ED993928F4D2B1183127EEFA18F7AC05FEEE0D40601E4B335BFFD3789D058A93D5FC7B6BEDD3629F3079FB55A9367C674A551D81B79EB49890926F7AD566D2A20EE3771DAA5FBC89D60D55A140A95A7DA8CA388DEA31C6E567F7189C585296805941848CE16FF71680C26EC0AB8969231AC2D594E5D94725B60FA5D2E099821AAC7E6E6C43594DB7A3A4DF51BF60C9984C1F305FEB4FF09B5D640A734E00896FE2569624240B292A44AA9E2DB1C0DD195E1CDD219870AA5499D8445EEBD2A55CCF3BDDA9965401EAB740824CE67E5CB0BA680909DDDF9284ABC373123D398EDF18B106F49910940298119553DEF26AC6E82A97206011428E8F5A6E23A0C7CDB451FBF654F8CF605D384B033BC65CD90668FF8D867182AE0B3FE5FE7874739053D885D76D7162E2527FB38D3BD988F79846D5FF8DD1618493556685645761D3BDB6DAD3A218CC45E28D499383EF63229FE7788B42F111F77A44C153A445468276B77C6A7BE7C3DF6D385B59A1987B440FA4A74CDDD45EAE64D2F2C53C4ABA6135BC611AAE251EE26D144CEDC27FD8E262AEA5ECB6DCC72FC22DA65E249978AEC55B12D917D9DDB4373978B265665ED7D903215846A59CBAF8917DD006E50BC5A60D48869BC863136628549373C83CE158944C65E11FBB959A10391726B0EF87BF1E7815167EA9B3C9E6056623B6220E297CB9D1EECB1F83D30AF31591D563928354F10ECD261F66CB19D79C40DF7950A822FAC4A86F309A7A93692D5A0C6A3E56AEB63B53AD5B7CD94D56340A7A9BE3854D0DED222319445629590C23FE27BC51B5D12B78B83A63212F9D4AEDDEEC3A8FCE7A43BA4B0F2538BF05939505B1E11AA1AC429E5B0E3ED576835F3B9808E027C60566E77D045314A33AF4ABEA16AAF479CF9DB6E52F720E5C82476CD023A1B2CF6B7F2420B84E2F669B5378485688C965589BC995EE392CD581AA1DAF464985FBF64363FE47AF88BAFEEB3A5B3F3C94D161A9FBCF714A3852E8F79D4806D470759974CC9C15D1C77176E928D62393F84811BADF530E5F626EA6CB820E1956B6A4E9ACEBFC7EE8F28C040A1B794B87BF2800DDBAC5E2647A24BA57971BF33A86A35F19846E3A6FCC0360C9ECD457D87DB20DE991DAB3762EB5951FB1BB8A03F0DD447301A844E43A0A527F02EAC95703956E248B45E90DBB88DB29E629E995E1BD4C85225A1CF0CB7985A62A560E7151607B0C540903A76C82D520C6D7AEE32B78EF029D3378637E7C4562733D3EF9381F638E6344846F5BCF84D17323FBF7C1AB8A052708376203FB835C574E73A60024D4FDDC5B236637E3AAD683720FC6B4C2E5A8623FA842B96FA3D40EDF4995BD9371E26B29B1544C0FA46C078E928846DCDF73320C7CD153250DEF39F944E19613D7B3C4F3F24E0C0984286BE902FE590C1BAD4AFFE09DB327EAFE676C3722EBA836BDD751F7788CB44BEF940775E4B644218C79DEAAECF5023DEC973B04E10C376E3956F1FB504B5167326BA3CAB653C6932AAF2EE916B80AA37FD02D8970DDC91F4FB4362603C36306F7B66A49105202BEE12F7711C6CD16B7C78FCD694D2F1DF1570FB5A6469E9FEF6C1B373F03951630F78818603E21B537AB42D8FDA3C55F3181174900D68BC34DAF9BDDD5A4AF4B8853189EDEBF589D828685C6936E33F668AFEF0264D9E2C8DEE1620957AE79E7740F4039B669EA91F94FBC0625A8817274C9179800DC0F171D48066CB169DAE902013857FA661DF9D95737DB8C933A2AC5892BB7B46385F367B72E406A4980D0D01B6BC0E117C88B78EE741CF321B453A830C35ACD78BAE1B1CC9B5F7288EF34F283C2685798DA09B6217A26202B2FE634D1D4D2FADE85AD50367CFD7AAEFA623BD17E2D6C587455D4D70DE9AD67E301789DCFBCF1BDBF687432F44F5965487557CDD438DFBB4342FE9AC7DBC9B58D803D4C7784A6FE521267E6D62FD93C4C54FDA615CC2594E788451C80FDEBA645D1C797894DB3BDE1DD3076D914FD74A5963EA5D33C21277DA510BBF4EF314952C2CB84202ECCAE179494D8724F8DF82D30A5B494933A6862492371D28B022386DC440124B739271C8CAD6CCF93DE5BF3EC0E57D37C05DD6BFBD5155738EFA80235BEB5737E06A19FE62278997B94E5BA2652F440BC349EE69B0619BF0BD5C822EF65BDBE4C4CB3D0EA011BDD2731114D69AC9B6A493C7D2B10B0E42D1594EBB53EA36672A6BEA6DBC27EC07C0906A39CE10965D3720C322A897E24D27B7C403202427BE7D768E08EBEFBE61A5CA3919A1668366EBD5B33B065608E9B4A73D2677443B4FA94B20F3842DF31BACE1331D780AFBB5B67A8A6D78871B73E7AA06597F5BEA00B0235F4F1B5BCE9B006BED10E7215A79FEF2AE559DDEA03B5C41770249944C5509FA06405311EF960516F232D5937AAA3392DF916B8062A59B162459F27948EF6C3907BF921AB4A3B6C13FBA180E57E03EDDD1FD8D269320EE849DEAC1A7183B2EF1C7B53FA85C5C521AD0137AFA6807BE31E7E2E96D91BA7B04896B4256F6A482731096F32DF8E5D4BF65D05397DF1A31E77C44EE25A6A26A8BF657AAB66894B8E322E067886A6A4B9646ED395F298AE6153247D98DADD3B39CB3057E938366E8B70DDCA9D35EBAB9233DDD269C875E1CE74582554E496B7FAD2CB23EEA1246D6906F3FF1B9CB6E5F1E8818D790B5D3BD5A4CE4581D12ED8B1C3627A2B5878C63A9C917696E8D678780D4C76EB5823EADDB4F9EAAEA23ABECAD7EDAAB1A0A980D9B8BF5258832D8783BFE98DF518618C1385B08CD36EBDEECC275D89D53347F846F9638F15E58FFFB28C69A9641F3EA616E147969C80CA132368446D7F39136FD960E24AE91D88E2DFD0120B1D3358876648F4A564B90443C93FEC5C17EA08F33C95056CB4752772184BC25EF7ED36F2F197415175FB29475D21C31AB1332D5FEAA46E01E82CA67D1E3D34D1BBEBA06DABA0C6B5E8769965451EF9F88A61365E4ABDE21BDB2272B93F4F1784DCDA80A10B2F07E056982EBF27BB40A057EA6975D207DF62F792AEC51FD0D55BEE9D5BECF97640BED4339EB79A52985556F72090EFA280C35A36853A77F15DBB76BA47E714CD751F61B9DCDD0685513A21E435B8FEAE9E85550FC6A49DC194FC70499BFDD1E0DF7C3CE52167CFF40C6B1C55568673069DA0F3E772729ACFB3F728D1302EAE9087526D8F645FAEC4448F6D0E1C507C424A8FD7F6A4DF61878C98854D67A7781822B7F326FEA67D55E46A1796C24E04FCBDD93574FD45FF427CE08F7395A11768811DF12BA4203F6055C2BD10758B164A0EDF9D9F85DA78443BFC7741EA9CBB7229FD0F82BAD2A6A47AC5E3D455671906E8073BD3618BA7A53B2E87D1D06EE104E23A9ED59BA8EFB4A37C841B74495BB1EA23773AD6A5E6AD4ADA07CFCFF26BA63D92762397820D8C6217CFBCCEEC58D79E453EEC06041A3BF1552FACA3E09B6AD3F3CCFAF95CCADB9880DBC1494A7EC4FCD2B674B5A48D8A60096575E04EB2271709DF1FAFE8849DD27B8B818EF02F852A750F6B770E4C1FDF9B1F43CAC00A69D7A0A297C370965115B4868B34AB3FBB864341B549C3254277A3E78C92A7DB53216A9D55941B38736E951238F8413AA6089895A9A9B2EA176599A575F071819189169B8BBB7B31D931A3AF8F1703A6A06BC5F6F3AE6011C671A1CEF73A356BCBD346F5FF37C2948DE7023CCF0E80B4C2F2020334D213F95018FE2674889BBB303BA449B50AD5337E298E58E4FA614D5BC5C20E0C823B90669ABA983B4634BE7E7B4071B5DB7B2A2A1CD1B90D2A4BB92D96F06F03AEB68AED7E0D116CADFE990393CC9B42DCCC0FE7B4C9CBB95FF0247D8F7C2E02F2E1D3CD3B83C96B9C0343E7AB251797CEC0016EB4BA79F60B605568C8F740D959D655269BC7B2B571A25719FB0387A554526ED470061A7099064B2650B2DD43E2A9CFBA7C7088BCFF67E97F2C6EED25CFB80A81973BB3F61159DE21982BEB0AE19DC4366595910D0576BE03B24E6F1023FA9B593F5BC67FB2851F0672895D49119C9C29E47F186AF90EA20F26BF51106F2D1FCAB1B78F2F0A557DC358F04C28895152A099DC36390E07D1F1FABF10FF32DC6760FE0E91816B9CF11DE16B704A1FA887A7091D5638E0D5D61AD6E03BDF5BDA9E827C11618BDD56857A6D07C9CE75462E709D247D8931F08A78B477B057A5B495143F4CAC654A54A718978415178FB378D84BCA02D1912F5070E89D80BC6429CFA89C0BEC92017232D3B831589AFDAFF36ADAF8842C6A6A4196FBA639B0DEA8B9888D966EE26523C0F7A89B24595E716DB780BBBBEFFF81B11DC91EEF2D62D36C66CEE6CC821C44C5689DA0AA0EA036F95D2F31BB0D16192CECEDDD9725A5CF8153C09454D333EA8DF381DA13BCF09FEE85BD5EDD4C37D09128BA98BBCEA1DD5DC523BE09AD451B0845BC33D0975065FD53BE085A9ADAB6798A01FCC9C9E43ADCC218C273D8301A5E13E7FAC6B5A6F5E3F7513D8469DE9FEE3821DB837FDBEB195B0ADB3E0CD1F655C8B8EE8CF9920AEFCFC95F5AE74A8666FCFA00A6FE2065D268988049EE1453F730DC2F42890DF8518E9A3F23A95B76E3E3CB42710FC157F9C12B4156A43B4367404AF987A78CA42BD8FCA580373511ED1840F243D52A678E861EA3933927794BE229012A41D8211FCE345FE32B3EC285DCAD22B5B3CE39A42BBD05099F5DC0F919D2232235C2188863AD1FEEDF4BA597D7AC9BBF6D98ED9793322306FF0D5E580E23DA758AA3087D16729FF308579CF5FE363915CA2A2B29EEE6EDF0ABE8785BD7B2F2E84087527C00A3179F43F3F3708E4ED8A98D80565406D7DFC04AA9DF6B6FAFE43061529D30CAFE38301B0F0C7E6B1257121894B99E84C5E851ED5CDC4EF84BB56EC142ABEC219B989785A70413591D304F01E71BDC398AF1D11C06ED39BC79453FEAE8A2EB29DB6225C261CB02326039193E8063502E92F046572644FF47E15A672000449CF8AB47AB511522B997590F03CF6AC99E7968A9065EADFCFC3D60BF4F7865CF7C0597B255E21FD2E7DEF7DF6E8FDCA04492D065C92BC165C76F684A81EEF016F6A1A11168A99A2FEC1872D38424F8E388DE99767DD9B715FEF2603B1E5E8C45C23B0BA4677D8DA32F8812A52AA047CB4561BA1C0D948B1F1A706F572713231E963A0B0C850A8F674AFB92850B3442FC2AC71359B8919EA064BDD0A87B511DF6BA79257CD3BCBFB882F91336A52C9327DC20B7A4B4285BD7B3003264A432F6E354C030CA71090D30CD922FEFCF5AB973AAFFE59ABA3C672BC2065FD2BF5E619FFBDDC8DD5B7A5E786A199263D1629D47193BE33962888FCD620B45FF020A16C8B9E038B9047901D1AD0E893F57B52D53427E22B88EF5DD95A1C7660F898C138919E7C5E1C3B805F0E7FCDFEB9E1A4EF4992E7CC3424C18E147342550B2B7514B60D1ED565AE5B9311FAB6687BC5F3A887349BBA084669B5437926A78BD5684F997E51987D1F0550C5A172FBD1BF719E25209878CC8F09A02B86F88F45FB0C876E05A5CAAFE163512E051300E5A4D654B3052E9BE796B9B3ECA12B7C87C7E6175B3DCB1E04886DC3A95C6AF933221C30AC11284F8CB98F9D5AEF7CF6DC59DB362D8861746A0F62BF6FBF55DDE9FC6CFD33C592BD50FAA3D067C29D43D3E2C10A77F75DB3D2CA8002CB9A799CC932DBD96D0E002F1431897235B02D1539D3CB6B83C099CA58D0636604779FF2CE824C08E977FB17A21ED802895D3B07EF80B510F81F3CEF22922CF0FDFEE2C04A84C22D68E05A5BE6112450ADE1EDA193D122946BE6561C34B8522B9C09CF41D0B212FF9AD4084B5F33807547C55B3C5953F95B8527F23D62526B605AADE2951529666D5D7BDFC331FE2AB624CE4AF79FC73F1677CA8D6646C21622F5F11D4271B7CC93385D5D02C093A62E32292ABA17124DCA9BE0A9CDF370A2FA0BC00E6B86097877FE9042AA03211DA67D45588876C0554C48EBFC87F5A0582CD5C2050D88BBF42292111B47E18771079E4404F792CBA94455383E6F4FC663B8FB94BAE0D95DFA6B1C6203D2AF1F90DF3E2D5F2979BC59050CC844EDFF88231793D92323A07B711237035DF41732883A17BCCC0569A8DB90A33559FA159D6A8A54D98FC2533111C9F38247BB299D7B994282E8B8EC074BFDFDAB58BF9866EE29F59C5310F2F0B2128C8CDD59B4B3BBAEA2B7260EB5D943E58B02935C21F7554E5DAA2677E9F192D53F44278F4B6C0A2898E4D8A783DFD143217BDEDB31E5AA5C3C0A7D0F65972A7029FA0FC11345BEA57EB01F242616C9B9656F1A7D812CAC5F877D2B396E37A83FA2D085F8665F83A84F91B5DBF27E35A9335FF7D5C3BE0E51674A2BB77744E9BAC6FFFC7450E896CB14E2457CA7CD1AA185CF9DEAF7CB51277C69BF768B24EF85B4FE8DC2B3F7DEE91C1F8D9B5F7B7FBAFEB80BD34811DDACB2E3D7629CF021EDEDBA6A85DB39F6F5422D230B752BE895E22A9692CC97E96C2EFA2B75CF0AC3714FC110BCA8E03A87931CE05F0C4ADD38905DD71990359B1BCA1A0360BA7BD49F8DDCB63C5FEE44400CB85B59CE5F464E57324B410FC15FDF3E42213DE1F3D3B68F66D84D77EB3B647799142B834DCA6C6096DF4174B858C5CC746A45B5ABEDC69B6F8B28AFCAE5D7D32D55FA02397935316C7431B90729E44708ABF24CA6FD24DB2344BBD0070DED43E11767E824BE86B9CB06F6AB25EBF896589959B1D1D5E62A860F45F98F4A1BE2CCA5323961F9C7A07ADA317CE5AF77FFF2AD3E6DFA75E46647CEF9E09D39BE03C15640AEF71270367A689AD82A5E64BD8413954B2A18727E3E953A82FC8F43A687244A7DB933D1275964D6040A71FFA0917551A50FE1D7A3D19179D74564AA804DD1BD9448F20C87B743BA0406BC53C77A957AAC564360A48B340D026DB2212EB6BD2F240156859A7591E2E43C80E8C95F8D7337EA78A26918E10FEF6038DF5003319DC9A336B310B40BE512432294C25CDEF1ABCED56812F793464F5D38FBF6A0A360436A2897F0EEBD61E2DB0796770DE27FF3E1A16F7AA998002F793E94917E0099488BC8B20F6A5EE43DBE2E1C3ADFF16A7156DA3ECD28AECE5DD1C5B01DBB7318C994D597BAD608D8408C6A8E6BDBCEE9652078EA15EE790B0AB984028837DB7B81528113DB5E7EBC6F4AF95C380B4DF677004EB472842626C910678CF75B7DA6087C93FAB2CF65413281E007D0A4071DFD8BBCE104A9484F700B3CF9469CAC2CB7994CDEF54B5D56CCDCB57225E31C9F6BA85620B372BFACCDD5063D2C47DEBE3CC01ECAB1A88C8432F8360F8816E0BCFD340089DCD64C7B1AE047054C50A8830A3056273F9A54B670EC5D43E6F4BCB53443F74E6CAF4EA87903A1EEFD8278531556D10E09EB8060A90257EE92438B00318FEF51C4224CD5CA75E68BE28EEDA90C8BCC9A36254FC22855EF36FE5F26043F90A8A6DBF86776720B8E526DA6CEE1366658DD965B03A48ABAFB6A167E50E09180347EB731173981829463695C0ADDBACDB3A41C85A8E7B25E3E6C0E60904EF50D5CCBEA90CE8E2E915DB06AC9268E2A8EA14FE9E1CCF371305C61260B29197A27B586AFB1462BA1987076EE73809CF5647C0537864AFEC9FC404D62EB3FD1197160DA8D42D54DDD5B5C1AFA5070B87455382543C5C16D43B990406628F548E375B3311F45D798D9CDADE6AC40C185B576F20F342A4C48F0CC2FD0BF4BE474627A7DBF6F97C7CAF9BBDF7C11B8ADC9F7070C7A70E6B1619D2F3AC404DC00D9CE24D1C6BC6C87A663A9CA3D7E08A610BEE0AA79A013AAB086CC8776440696BF694037A5B0F4983AAAB4DAA404DB22F562B279E3875B99CC5B475686CC307C35457608F07ACAD7BA317C2445BC2E9063ACF1600073555133752B96F7ACA6CF76F84BF9F1F45457CEBD2D5BC02A8D444C86C36E347C080F3E6E7EC590DB184D4E135B929CDF436E20390653BCD9698C0C0F2AC3FDB63E3EA0BA6175296B07B394D271AFB84D4180EE4585DAA42121398D0F99D156A3902FE18CC37F2F381413029164B8719785231FB795C4DC56FCDE89997E4EDF5EDC74C6C10929A8E6F2FAEB3A5C801612948C21421C6B4F2572BD89CD2F5DAD2A10091971D1478CB5ECD3AA2931E139FB8994FF933C0180D7A6AE4BA7A5FB6BA03453C442C5AF7D04700286FB3DFBCEDFA41EA8EED30970BB87DE91F1E9E29131D2EF7D5908F09523D7DE1D04879E6AB62A1B32F4840F4D7FA21DDA0A06F887F666EE12065147C9C346FE95147964F85E0EE14E950C60D3532B792F99873501B656400F7D1C06AA80B68F89FA2F29C5677AA5DA706F9CE721B6302AF0EE5BA540E08EE8AD197C50442E055FC232629778E646D18FDA19F980B90AA2D26BA61CA05A04BFB5AA14AD0B355F3D88A0631595106BBCE1EA50984230F0B9828E5AD73EC422BEF24AA23E760A09586506D8A657BBC26D0AFA016378759FBB5750B2509C537E1440D8343F1796E015D6B0877A329BABCA2F280DD7550445EA0C9B28C77D537159AA07DEF8FC5858C1C7907B695AB2C44727489EF05EE8993662DB2517EF118A0523D59848BCD63765326584F357613E89F23DD2AB2E20C66743A3F23A5FB8C86F3A53554FD3F3192669A51D415AF23A682C3D734B7B18A4D46BE5EF4F3624C300F7EC57B1871C361EF8884F8CE85E34979EE693F8BF0E44728636FAC4637CB46D31B5874C5CB275F6B9F445E05DFA750FA026A92F5EDF83343FEDFF0C5D18539CB97732A42DAE498401729CC0DED2F890AE7631B632B17E2782288722DAA46CC84F596B026BE670D86273D0B40CD8C9BBC942F53FD433979E1E8DC2F1D2F8D7EB7A7990ED2B42A9483A7CD7F3C967B87D594B00FB43D2C3B2177D09DD0A036CDFD327E568B5158F12804933B62D08E542A4167756379387AEA067060A095A2665EA3DF0F2713607F38B79FB2082A78BC40FBEC31B03EB638EFFECB75BD583CE23C7B637A291D9AC64A5D6AB2ECA93E5004B7345B0CE2DA86CB00C0B995F6FC4F9053A888CB65F7F6FE7316561EEC80F953BF046010BCD8B2AF609ECFBE8AB527F154A3D24F0A0FE7C490E4EE531EF07F1CBCF13F60455B27C053718D1A2DAAF0034DB05C921D488DF3BA5E5DAB6042E58D01C9D661E8B884AFC31BF1ECAE0C51FC4172C7DA95633AD2500136796B43276AE85E473C25644968E28810A12C25AE1B751F8FCD7D955A98D2CF33EA51DCBD213FF4C6F21C48B7D65C1B384126E878161D4002A047E7DC86DBF3ABA95C468F21D13CAAF72384FD1083881FB91C2C562D0AE8349D6772C71503D9658297CE25B51934D60798223264FB72D01EE6AA7F8637EDFF2EB71097027D6123D513E59B163C58549E7264812A175B099A4B216152A55AA565B56804E0E5DDFEFF5AA4788E6B681F5F18AA92723966DACC37D02162BA466A7CEDE3914ABFB67BF0B948D18266BB075CB38937C9A1E373F4A07F525AC9869EEA358254DF944EB7E00DBA78EC290842594DBCAC8D164A98C2E635FFDFC17F7A9A7E945CEDBC794DCAEB97D9AB4254ABECA25DEAE768D3380F24898D9D9665E3356011C13955D96BE172EE6B178F5086D941B05540A47A044AA5149CB07E66DF125A28881D8AC6050F51450C8645F3C3FD748E2686A514BA3C4729F0399B203FD7C43B18AA0340588A9D76C775F9452B5E20C8E50140B4A04B7CD220E1FAE5B54B9D0A453BC93CE019612723493985348F2B9FCA48BF5E74D3C356A6913EEE40906BDCA81B32C79659C9D459EEE8B32426BDD1B3A6DB6901EC613ABC5C5BFC5FBAD79D0D4D36E5EF6514BCF60EE964244B36814CB299B96A65930F75228E44A2794E4121DCB46D0ABDF3833708970E8D7D83325D630C2DDDAC1450DB6B05A3301125080B26614F83C508A7A33C3692103BE2C7EEBA6E957874FC9A39B73BF6B0DE10CC8DC829D7A25E54148CD663DF45849858F79CF346117727E59BFCC8AE6A19F044F442423F878C3C283C024C9B0893909FCA45A835F24AD8F4F32EE46C7E1F82B42CC11FC11E9F40A1F8F17478D78DAA68CA0CDCEDC32004D20B43DAF2CF8A29A84DFBDB4B892C8CD24BB58EDF0FEA63D9468ABD8D7827BA288E81184EB5C7DD6AE5A463BDA4876E233C8D9AE6C2562585D9D04FBFDE4242F34646E836053DC0D16886F68D704D8F1BF04BAECDF543BE1F83D43E788C08F758CCCFC88109EAEAA375BB0C00A17ADECFC24C3B342C8CC5B7B821F7EAA8D6075B7411FE368A7F68547D4C5851D17ED7521AA9C0511F2F6F04B9CE09BCE90EDA02C72BA087FC420D970BEAC12B49550C86BF024B5CF319DF3B1EA6A606CCAF8312C76BCF6F709531057B14F819837949226F78418C3F05AE5D1B93D57B80C7779F64A787532ED25365EB58EBC8713B3C743D323566A5658E38C7DF5896F74D57AE6EB379DCE89D03A3AF8A557C066B6010DE8AC0C2007B08255EA55F4849713BD339F5D750AFCB8D07EB870F9C5DF6634B29DF7FF831C68EAF6414D9E95CAA8AE8D1242497BF403D5F492DBFD82A3616DD82AFDDD62D63244E8F5E5DB68244A3A6815ED50EF4C1AB6313EE7378CE553F809E33FEB355A8F4ECDFF9440A119E5ACD9D0E756DB50D50B5BCA1D95723BEC5C32348A16C2D08E961D5A330947A8CBA37C478312A04C039BCC8D26E5B7E09F90A01C8278FB9575F098F4DC9874B1E3650D162248E3CC1A44DE64AF2F309D69F50427CD2E7BC88D05099BE422C0B1B909D7B581172A7894B8820ED032FA581910D93DB6AC65D47C62B4CBF6B4DF332C38A90E999D16F56FF1E3BE021A4F678BF8337F9B8E68FB40B0B12601EDF79D3553E1B2B24B6D6B47A3DD5BA22B12396991B10426530DCBD25A3F6E0AD1A064D4E624B80E4CDC9399BB53139384C77FAFF59BB51E1813F7367AB0918DFB85DC1EDF4A527836CB7A002F4BA401F10B01F79B97716F3D32715F05DDEBF142712ADA2D042F0E3F82A919B9D14A3D13737459DB469574AECAC8BF7C923F001C639AA1F5BC18CD4FF9C9F9085F86B02C784DE71625B3AF7CF77EEAE4652CE0EFFFD000BDFBC7AF6F4926F4C7A3EEBF4CD091FE949E615258695C91D88A6DEE706A7734E25723EFA3BB7F78AF1D5721D1A90ECCB526456C8CE0F036B71919B6640F6898398B5C809ED668EF6163179071B4663E5D784B6E736E2DADF069B3C0363D2B1130529BF297B34D9F2C354C236AD2D87F3DF3D09E5240747A23B927B1D556527B9D7EB5BCF16D718800C511F666305B388E064D568DCEE6E227F51E22A5188E98D433B0CA3F6D9D0FA0F07CCC572D434F05D9469DD502670E788BA2F3DDF796355819CCFD10D8CECD419DD39847BC24992D8C7862ABBC97D107B0344BB5E8FE80D4200606A77EE31DAA143DE6E86004304F810BE9C6462EDEA0337E4CBBAE8C2584A0743286E2C15FA383F350C43C958C53CFC5446B5F9AD7DDBEE1CD50C0304E77FA9E97E3168413CBB9402E6C1BA434C255963C6CB0A2BD2C3E8B72638875764A26C000ABE279C5DD7119F4AEFE154283D6B58DBF92D475088D409B69461E9F79D60E3AD83267B61A3DD765D1AA6BF24B73FC56E319A16BA8F2FC1BCD47E5C652C4330918ED288B3C08EBD2CBE809E2B7D6609F9EE7CF9CFC9F23B12C00D35614CEC8E130FB8238105D60D0ED83807884EE0A5D4011965C4076783FAB7C6E32C85CCB64D91C464925C3695DCE95C8840D1B12FEFFD433CA02210C67D7CA72C2CC40C3A0D3E420E91A67F36E434D3EB984C61AFA3288C4D28A699C3A32B44FB4882F7A0A51273D059B850756552EA29DBE8DDAC8B208EA51FBE25D7C95AD28195BA4B073DD929BED14C17AE779B515541D0DE1797F949F47FE9582B88D99A02BE2ABAEEB29464745B18824ECFE74520885E85B106AFD6E78C566167535A101D23BAEFBE16A0019C4A59005CDB4D21A5731BE160F62C34FF91130A026874C2C2C8421BBCF86A4D191AF649637C88EB8E60D41CBFC10436B2BDB826B8206E2E4ABCB65A078B0B2EEB6ECC6F37BC65FB2F083DB3E7905B92ADDE223B2DD38DB69BBC5E50A6A687B8E7585F1C70A3DF05891DCE31094CC158F6BB24A88607D144D480435E4AA080FB84B325D625CED56315CFD766816F009DBA088F4EA60D05DE2D4D77286D74B751AE6903C1BE92C6B9470B5A034CEE3FE0C3D6E7C85A23B6762D5D6E29C13EA48B6C6A9B7FC81CDA2E02217B6D95756942510AA3C2C8E3128A85FCD1D736E511CC4BDF82CCAE349BB5F3A68C9FFB181A638EDE4149038156A5D038C28E1FFA8EB3BED75248BE0D0EC8A5A92B137E76A165B85BF66902F4DDC10531A2BC3E75C997510E56702A9BC4B74E9A0DE5C598B3461DAE7A13AE59B9476D5EA024A3D86279D3936C315CB8279E3FBD1B277F96EF244F6E0846F0A48F9F7E000FCB81FC24B11DB809FE7625132448BD6E4DD83384F9CB69C86D5F2C0FF7FB04F5C669B8CCF3E5C75AE4CA74CA0073D9FDBBE0B8102A7FBBA6E7F775255154785543B4F2B87DF034E8C351C487F99057DD50FCAF719A88B521ADEB22BBEF3111D4E791573FBAD70CEC037AB523882BFF36E419ABC06719FB16C4750B2436741F601F20920DCEC09EAD49F7F0D1327629D7A4F7B1CB3DFF02F809CC75736456BAD3B2D9D6B358DF9E5E6302C20A84DECD9543C6D12000FBAD5EB33FDA7949EA890B062F35EC43613B311512D41F93D6C299C56FB51116A7FD81D9EEF8CE403D8C4F3DF14EC39C5BCCEA3988207AA4967293831D3D6EAE8CFB8C8E55F5EC5071F744E477BF8D9425C0993EC81865546C40AFF8A4C265E144119C876A5C2CFBB7CC580E031F8F572BFED16B3FEB833371E60D911CADA5D81299122F1F22D69027817963284C1305A7EC42D5A93D9DFEAB97A127D13ABC6D79CF233DE5547FFCD2244D49BF63702A1E6FD6E18F9E5FCC76A1B69E5B99F51BA65C12C2AF3741ABC0BB90DA648EAD9A1FACB172A1E9B65743BDC152190746E5BCC8F9027468F4554F5C654AB64A4ED0F3C9CC846733CB58E8445C11E95D59976EB802B5ED766C129A5FEAE398D4CAECA007E6F10DAA5EA60CF0D3822F2D83301A568BA294A46464DC39E062AC8ABDB1C2D80D258B018E1E74A2731BC406E6493C8D294601F80099EAC7DC6C6B3268E3B25744805E77A4775A03955E59606DC96A27CCEB64E0B81DE952E1101A94D50708E4026ABC65F0DCA7EF486B9FEC5259BD7315A668054FEE5087F3FCACD239837CAF875F9CC7BC66131531C8D45A5397C986763A32E5C002E2BA437292A0FC7687FB1A84F114D400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%%EndFontu1`65/AE /|______Goudy-BoldItalic T /Goudy-BoldItalic x1`65/$1 bmt^65/AE 180 180 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65529 -1725 (1) 0 0 42 0 0 A1`65/AC 180 180 w1`65282 -1612 (Proactive Security:) -0.107422 0 535 1 18 A1`65249 -1500 (Long-term Protection) -0.182693 0 602 1 19 A1`65297 -1387 (Against Break-ins) -0.03215 0 506 1 16 A1`65/AE 180 180 w1`65529 -1162 (2) 0 0 42 0 0 A1`65/AC 180 180 w1`65363 -1050 (Editor) 0.045578 0 175 0 5 A1`65538 -1050 (\325) 0.045578 0 21 0 0 A1`65552 -1050 (s Note) 0.045578 0 185 1 5 A1`65/AE 180 180 w1`65529 -825 (9) 0 0 42 0 0 A1`65/AC 180 180 w1`65320 -712 (Fast Generation) 0.199371 0 460 1 14 A1`65282 -600 (of Random, Strong) -0.03743 0 537 2 16 A1`65376 -487 (RSA Primes) 0.14444 0 348 1 9 A1`65/AE 180 180 w1`65508 -262 (14) 0 -0.052902 83 0 1 A1`65/AC 180 180 w1`65282 -150 (Algorithms Update) -0.03418 0 535 1 16 A1`65/AE 180 180 w1`65508 75 (15) 0 -0.052902 83 0 1 A1`65/AC 180 180 w1`65297 187 (Standards Update) -0.03215 0 506 1 15 A1`65/AE 180 180 w1`65508 412 (16) 0 -0.052902 83 0 1 A1`65/AC 180 180 w1`65319 525 (Announcements) 0 0.010178 462 0 12 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`6517 4800 -937.5 1200 -937.5 F jbd^65N1`65F M1`65/AB 332 350 w1`65T g`650 0 0 (Black) 1 _rgb d`651200 -1155 (Pr) 0.08812 0 154 0 1 A1`651352 -1155 (oactive Security:) 0.08812 0 1184 1 16 A1`651200 -989 (Long-ter) -0.014221 0 597 0 7 A1`651797 -989 (m Pr) -0.014221 0 339 1 3 A1`652133 -989 (otection Against Br) -0.014221 0 1370 2 18 A1`653503 -989 (eak-ins) -0.014221 0 533 0 6 A1`65O1`65N1`65F M1`65/AC 170 170 w1`654212 3007 (\(continued on page 3\)) -0.061676 0 588 3 20 A1`65O1`6517 2900 2279.5 1200 2279.5 F jbd^65N1`65F M1`65/AC 168 170 w1`651200 2392 (Ran Canetti and Rosario Gennaro are Research Staff Members) 4.199127 0 1700 8 57 A1`651200 2479 (at the IBM T) -1.725327 0 351 3 11 A1`651543 2479 (.J. W) -1.725327 0 152 1 4 A1`651692 2479 (atson Resear) -1.725327 0 331 1 11 A1`652022 2479 (ch Center) -1.725327 0 257 1 8 A1`652276 2479 (. They can be contacted) -1.725327 0 624 4 22 A1`651200 2567 (at canetti@watson.ibm.com and rosario@watson.ibm.com,) 12.271484 1.934158 1700 3 52 A1`651200 2654 (r) 0 -0.006302 23 0 0 A1`651223 2654 (espectively) 0 -0.006302 276 0 10 A1`651497 2654 (.) 0 -0.006302 23 0 0 A1`651200 2742 (Amir Herzberg manages the Network Computing and Security) 7.274063 0 1700 7 55 A1`651200 2829 (Gr) 4.076874 0 78 0 1 A1`651278 2829 (oup at the IBM Haifa Resear) 4.076874 0 789 5 26 A1`652067 2829 (ch Lab \(T) 4.076874 0 277 2 8 A1`652336 2829 (el-A) 4.076874 0 117 0 3 A1`652452 2829 (viv Annex\), and) 4.076874 0 448 2 14 A1`651200 2917 (Dalit Naor is a Research Staff Member there. They can be reached) -2.279083 -0.459625 1700 11 63 A1`651200 3004 (at amir@haifa.vnet.ibm.com and dalit@haifa.vnet.ibm.com.) 0.001099 0 1597 3 55 A1`65O1`65N1`65F M1`65/AA 200 200 w1`651837 -686 (Ran Canetti) 0.133453 0 426 1 10 A1`651752 -578 (Rosario Gennaro) -0.043945 0 597 1 14 A1`65/AC 170 170 w1`651582 -483 (IBM T) 0.03746 0 195 1 4 A1`651769 -483 (.J. W) 0.03746 0 155 1 4 A1`651920 -483 (atson Resear) 0.03746 0 336 1 11 A1`652257 -483 (ch Center) 0.03746 0 262 1 8 A1`65/AA 200 200 w1`651786 -274 (Amir Herzberg) -0.108231 0 527 1 12 A1`651860 -165 (Dalit Naor) 0.127762 0 380 1 9 A1`65/AC 170 170 w1`651662 -71 (IBM  Haifa Research Center) 0.036301 0 775 4 25 A1`65/AB 196 200 w1`651200 139 (Intr) 0 0.002014 147 0 3 A1`651345 139 (oduction) 0 0.002014 365 0 7 A1`65$1 tsi^65t1`65%%BeginFont: Goudy%!PS-AdobeFont-1.0%%CreationDate: Tue Apr  7 08:57:22 PST 1987%%VMusage: 36380 45163% Copyright (c) 1981 Allied Corporation.% Copyright (c) 1985, 1987 Adobe Systems Incorporated.% All rights reserved.  This record material and the data recorded% thereon is the property of Allied Corporation and Adobe Systems% Incorporated, or its licensors, and may not be reproduced, used,% displayed, modified, disclosed or transferred in any manner without% the express written approval of Allied Corporation and Adobe Systems% Incorporated.14 dict begin/FontInfo 9 dict dup begin  /version (001.001) readonly def  /Notice (Copyright (c) 1981 Allied Corporation. Copyright (c) 1985, 1987 Adobe Systems Incorporated. All rights reserved.) readonly def  /FullName (Goudy Old Style) readonly def  /FamilyName (Roman) readonly def  /Weight (Roman) readonly def  /ItalicAngle 0  def  /isFixedPitch false def  /UnderlinePosition -112 def  /UnderlineThickness 51 defend readonly def/FontName /Goudy def/Encoding StandardEncoding def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/FontBBox {-168 -213 1001 967} readonly def/UniqueID 6616 defcurrentdict endcurrentfile eexecE5AF3B2EDA9456110EBA044CF37AD7C895880017080589B8C8C8CB8EB2071E10DB7D2E04BD3FFACD88E55B0E2E3A8230DE530111911497A98DFD078F52F5BF9FD2F485FFF453903FD710E49348FD59D422401E80A19155AFB1DFB12BE45A6731C75B5C46729F2BBA6D645F43E0BAEF9E6ED0B538A947097F819F96A555479B11C4D43C322B4ED6E6EE9BBE94DF8FDFD0F6A50753B37A10F23C9DC6655B6E87E1F5ED3A52C1178A6743B3638F1A88F1D4C531803DD06CD4B8C94F23FED28355D09074D8A69A39DD894486B88C47AF32D76C839D394EDBBE5E732FB03C588A4C34BD5CBC616859555D42D37B4B86C48CAC5E913A8D5EDC2C506719932251DA8C73FC654CFE5CE4854122A9CA91735C99ADB3BD6F5BD02A8D5B47B9F37BD6F9C5415748C0D34F016440B4B59357027137E59E51051479EC2FF13A038333F80883D0ACDAEE62D1AEC38424015041FB5240E0AB3FB984A6431D1098ABC18B662227E999A614571582B0573A79CC8F7BE6787E3BF651B10358EEE0F38F6883851B685D041A35C29DED861A856B2E24DF31EF72912117DF01AA3CC37078EC0CBD88DC2EF7F3B8546CE833F319C9F7316657AAC1E082AC1B11B7E624D20B60733D4929D28492C0E64470EC0849F8C7A608FA77653E2D1729B77F8FACF5E471E68151ACA4AD137C12E4A2AB012E378CC9FA79AFEFE664104C548355E67195E5BB6EE8E51890B23B9A115D69EFDBA58E31AEA591C4CD3A3E58ACE9F51AA4139E3CB4B07E3232EACCB2AE22200166E3E13430528FB507D46B19B0E46BAB07CF3B59610B6E363A736E3416EDC3478C964BA7367425EE11F5E1699C4C2F0A1CB3A316BDECE8AEAA94F87F0076D8A1EE3F2CD5332C1688901B29B4DEA302A42C95B017C50F22F7F4C0C3BED431213B3ADAAA3AC60D00ABED2926B2017E8422D01F853F2FC8560FFE9A08FE752B98B03F8BE85C677998A2A2E050A7CDD9F72150F4A41E10EA078B2A1B11F275F6A0FC4B22AFDF75468328E15B319407A76F887862D561EC75FA8CBDED9C3BCECD95B1E95A0BB5A4964A307EE7512AF02D301D1A351BEC0163B1653F3D64DED03735D945AC5D0E37F3B3DB857EE909CAF7B1EF4C90B8369906C6C5EA04067BDC322108A38AB77089C5BD8E56C4B5F9565E90205124CF89E71CC365C7C5607C615F60BE50AEE7EA6091D46D1AEFB267FEEE2F7D91F4128A10B399F3EAD2A8D37A300C57E459C5AB2A74EA7817FAF0ACC8197E206705E95E210B2C0B5AE772E7628108597DAB095FAEFF0054CA2B0AD9363EB1340FAB4B53F18AB145FD30D5C34A3F6993C7CA92A48DBA55F247C74F1A77E7CA5DEF1557DDCA45B7D43DA973E0A61C87DBB397A0D4EC2CA67D8A8799462E89A9ED517AF47E0EE5796F360CC91D4AF2726172F339294D3656E7D60C76CE241AD00B737816A53E69A46E5D55CE9EE80CE94E3A2FBDCD8C71C433A8AD20779F228A3B39340A7AC530D7CA8585ED2E5812754D116F279A2B0D476731A7CD7C02429FC84D420EF28D27C6559F97C72FFD4830D349A362967E7CD92CCB9F0916560F15EBC3462AB43092AB5A2E308EBA713D552075BD590E4CFDB3E45163FAFB3E774244CF5C1546BFC5018D3730F888434A78B12EEC38CA40F3FBFE043D0E16BBBF63CEE07B6AEE70CDE6186F7F5404EF1D433C7B370FB1EF39AE78F17DF8E4F6A5E7DCD38B551DFFB18EFD9EAC6228B57273DA777FED496A1801EBB054551FB3A3C66A08B32545F7CB18BD232157B9BD73087FA7D2A6AB2C759D5CF376977275A2B5FE9DD5716B3CF5D4169D22E099E3FE81516E4DDB7F302F6FFE060CD2F7ABC067BAEBB2B7A0909FA039E600B67A748B5842DA8F962E757C1F82965CABC97A1B02CBD3C1BA14CE114F1E5A8AB9A87D7A7FCF09370BA60425A70A56F51EEB6A47031170D99B779A844A0FA7EC032E9AF5E01707ED183446D5D6A505D6BC93CDA3DBC885E9D2221810C6D27649A3562E4EC36E0F6E9BCCCFA78A3F290220E5BC9D3871FBD5B05487CA2BEA5B86DE30D134A6DFC0153DA363154B352FB3EE21A7CE0734E8D5175D98183873BF47F1C257BBC03D9EE1005F03E0F9C375439A2825261D020D5910A4DF673B2850BDC4B0EA4DF88E7071BE73CA65FDA1F323D7B361EAF83054F5057D7B40213294E0060A6D77EDC522F64F206031E2311617475C9E6E69FBAAABEABE40D7696031DB8B24A7FF3AE0093CF9F7729A562B79F7F533F7114EA357028B179688E4A8BA26F386CF4840903BB1B8D262348D2960BEB75F49840934714E501558D8C56A9D01850C10B351556CDF1B88E74837701EF42F5622F77C1A387D2CB28B487C680755E797B525A16420942187AAD99182F61100AEC36AC470F1997157A2857CC219F23E02710B78218D1714406E40A4E7E243F280FCA10DF0B91D75DA689B0B1576C7AE05ECCAB8FF183D6AFAE4C195BBE24CF0960310D0FF0ECDFB7625F645214A6F8B0D7E1F3AC97607F3B46ABB543211C40CEEE24DA2E63CA1F9A55D040D015C0FCB3C34D580D5FB0874321E667E89CFDE4A8B6EF2E78786ACD0CF2E42AC9291DAC4DBF10CC15F9B56898E03B2302254D4CB09A71147339695A675D4D1C0AF3A79407D9CE289625FA5B2DD8DFBBA7E7F93571B431BA703939A6F330C4A85A452F692886B85100D697672CAE0CC90439F5E596DFEF8C319A55F48BD941E44BDE95B7C699838AB6630A88F823BE31C2A79EC05CD56F56F5415E81E5614397BAE6EB4EE6AE67F41D480F11D9B6F5B42254570569173D5B732E42274DE1575A8FAECAC9ABF132B64628E5FA15B4421315B133D543A559586737510185BB86CD16ABCD47E4DDC647ABB5867C039F3B0AC988A5AFEC83A2562719D244DD6039DC17B6D9518C4CF8DEA11C884E9FF3E97E244717F3805A0BF008CAB407581844E8A6DF8BA62E2BEC9BB3D7B0AE3164C19EE038635DCDE473C81145CBA7E45BBC11B61B25207E0C25106A70CC34989909295D4EAAF10307DE368235E2AFF75DC4406F9309826988BCC923C1076A6BD7E7AE3366120AE4D012648A8F23747035DB6F0C99EF403E4067497805C110FB94357EB5CE53BC6C014C839E1F98F5A4F6B0B4A8668DADD29175D1BA9A1267D4B2F4A68C861BC7A0576CB3322484DA293A5E9F5790DECB1B633A760D49AA96A2C9B7487CC201557A584A487A155BE82BB8B4E5FA075A500620CD2B663FE348A88E56C9AB4C4F95D45B9942EFDEA0B89D6F50DDD7DD9A537F980B00396627A9698A679FEDF563729DDFE0ED555F07E41C30FB8997128D0C66B65EB8401D5E017F5BC53158E226D0E2C90A7498A19A583135FA5B8E9A945AE65D0D51BA4A201561363A1F020C7B4A57C8FB3EE2E769B21C0D26054309E48A4A020F393CFCD70A1AF841864B08BA0970EC9D5A9CC28EE5840BB290475F227C8D6382C73C6603A54DBEC8F521AC55F16D74755332FBD92D7F0FD9C50806CCC9FE1234DACAD38B4217788F9F15C6E8C2E363D9EEDF181B66FCC595CE38BE5DA3E06087A6B9E5A942D8FA695059BB1F092CA38023B83908DC3E8393F45667BD47FDFF7BC319D9B6C28ECD86FFAFE4DBD138D4BA5EA39F02BBEF622D79ABCF4F94F231859F9B24F3189246F8940146CA089768F484C84100A7544B63F54EC2FFECF897C3860E881C62715D46A74E62573C36EE82CC4BD69FC9FCBAE4C9DBE2D6EE582DE2F5325AF66D39B6879820420030DDA0420541678C0762EFDCD7060353DB84176BCACB39A1E3203AFA4652DED4309D12EE07BA9E9B182E7D26442040B2A2E77CDAE50338B6C788A0310F1A8E7DAD1AC947D749261C6D1FF3D7FC6F70395D20924336EF81A8659E1D7355BFF7F669C7034C0FE496D1034CA003301FB172913A0E2A25F120D8C71921F032CE56EFDAAC184D04623AB78B72EE89F30D85D0A1B23D85C1CE3C6F9F0F5E64201E9A7457ACE7B55BD0AD3D38CA7B5D7E20D631A1B94D6D2BFAACE3BFBEA6D565E8E7ED45E4EF05A1E96800D3CE5772BD32A0BBFF0D5B08685E340FB5C6FB432A407D65A5E822A7C5FBFBAA74418FE51D9A16EBA7DD18103680D07C3D0E3D75C78243AAA73F6112BA52F06C7183A2DC554CFAE25BA6BF3EC61D24C96CF03545BA8D6B5581DA26495D36F7D8EEFF8607C1C5E4B2EF1537A082AF8283F1EAD3DB36884B4F166F2759609D66FDEFD1D1D0A47FA23DF5E8566AFD492D8092AF03E169CB444D8932A54FB283121C2210BDC912E1D3F0A13FEBE6E06787859FC538075F260ABF89A1738FA8111D9623E5A62ADFC9360772248E4CA516F8C5DD16851C19354AF41294EFD39A5F00EA2F517CE12EA83B5DA86DFB24DEAFF63B80ED4D6766574809377A8073390DE59D61BBF43289618084839E3D922FFB10B55AD511D7850222414B44756FFD680824F60C9925B47BFBB2359FDD5928A6C5A93612F0290BE01A912CB37AA44E5B733B179FF655F261A3A6AFFC1ABAB7CA382D9EAF0F2989146616B91C4B73CAFF880A6C4F21CBE7F2805631E4327D6655699244A86E3C11E2D8D45517ED9415A521B50FAB8A1788D93682DF7BE38C3A56D022B464659B2848557D53AA5529B41DBEF6B06836087E38333AC7D3B82B65AFA3014426938E58F3BA153073C8B3C42A3492B008D374F6DEB1A2F6421068768B980C5C49FA9F9E511E714FDA1349BF2A68EBDBE1FA964184F85648A58A1E9FB8F66324C83A09C2694BABB23246E25470BB7C424F6416CF511F495151B2D6AAB75BC72494A82B4BF5E4392BF1F716EE4E7DC95052E251310B0C68AF11542118B4AEE130C212905847644903D35853742CB2E640FE7220CF2B791B6B492C1B5F26866971689CE17862ACC6869C8D86D8DACDA5688D8773FA5F39687E4554E0191F3D628E66EE14F6579854EC56E41205C0B595D1F43AA8A1088590518FBCC6908648ED7F74B5F31569CDB609CBC37A5B87CD63108F31E0E34B2EC8D622F6344342C642DD44B64F35B46EA5A59FA3223C0125447292ADFD774C1DCB0E46256A40593B835EC81A920087EF4068D650B0EABA6B6EAEA09F958BA43EC9424E6D0D6CCEC084C7C0AF2EFEAEF2F5B18D6CEDC3D059AF342FBFBF6C4967E1435260E4B0753BAA4F3B1F0CC55BB2A392832DFA327DB3A0743BC8805264B63EB3D53242DA0C44ADD4BE22DA4117FB834037543D8131BEBBE0FFEEC3EB2078B1ED9AC73A23471EAF639862D6126F25F4E8A67E9C783B1C82599F47CA03C15221E90B19A0101300D00A16FB54BA52331951294901632EE34019788A8542ADA462EBD0896B2AAC46F86BA86BFF39BD75E4F71A6AC9E1A84B69BFDCCE481D8F9E03F54D18E517CE073DF2DFE00FF2B4FBC2F84217C4C9105CCAF5CEA114E28770A1562D029DDA1559648DF40B4210143D6A89E8391CC424418E2EBAACD46B81E2E703B23C920F0B8F20E1B5C1319D290142B154E668DFC48C248C9A946621E38A49AA0DCE890F434E3AEAD7C36B97813AFA7EFE499A459293158374DC3C48C1E13372940F2FEE5E201B0246133BF26A63EBF0ADDF348447F3EA1E9DEBEEA499B0E09E5DFB450890697BE82E5E1FC90F95E1EEB6879709B9D72DBDF19012E8AFAB526951D08E829CD5FF45B13388CD7887857AF359C8E3B8E989599C82B162BBEAB778BDA805CA40C52D19B39FF52B5F5129326E184E4EFA52644DCCFD84F12F7DA105ADA13E8AFD4F1D73288C9AF865274C56D9AB35EFCF751845550128F5F9D3F0DF8B41FFF47992411C022AC87AE1F5B19485C1E7981F4828921DBB463FD090511761D1EC15A4B8F6898A74DC37C0CD80D3D193EE2AB3B78B41D0D83D80D5800F8E4C6A39F9B66AB7F0FE1F45B7954096DC868A9FA35B58EF37C63BEBA4FA92745E5AB62BBDAF2600C05B05899F5C29EA744F5DE39C000E6BC554A1191BED2E4B4EE0DFB237B5F29C2644659FE39CD59EFA52F5B1FA1973701120A7F263CEFB03D042738515D368E34DBC4F095BBC0A3DAC68B2FFB44A7F56D6CA349D34F8EFD3539ABBEEA9A362E3F49CDB7F739BF3955810D54A3F5FED4412B08860C146F9893A0E795B04DBFF129D9BA31E2ED096DA75C91B2663F9E978A55FA0FCA3E916142D19860535D833E6B9842A086A223C3B56D0F82EDEF8C26E9E318EDDD62D8E2E8F134EBA60195CE3C678335913BAFB88E97BC62AFA6525976A237E89C2D15A31C66870829A70E7FCF4B1AE12F58BAB2FE6477B2C6BAEC4F5CFFC94C9AB54435E9EAEAEF0478B2E41DDB33E0560956CCF8DB15A0234B024BCFF1C4BE4F80B5965074E1F37A275787FDF0496E320131CFEC1F20E49BFFC4242E41EB616B20F22FA6248AD25F9307D25CA330FD73E76F100E2B154AFF708E4FF55B590B9690FA8EE2104750A96A2603F5798DC92E7E27175BC0BD5386B7039963377E9BD9A1373ED544E1DBD1ED49052D477C65B48E0B624D4B5B03E977C8868B7539C6DB116CBC4234CAB90215585CC93F91F75A5F17B05DA296E2856A2CCED49DA9D81BE79EA06C48F655E0343E6AB7A2B540E7954A788275CCB4A4F4DFF3964A01AFC95B626B79690ECAF2065C159A5A480D4B79EDDF219EFA7C5FE7844AB06BFDB6032E04E2C7F06A739A844883902B1B8B05D073DFE2E7739AA2DF7545CB492989C0805F9523A755E417611CBDE9CC645598D9260D1383DD9CEA1041A0892E1F891611331362C08C2897D734D738C5797445B43FBAEA0F877F0DBE0381EB9AFB919DF50570EA0F7F9867E2A3167F8B9FC000A25C93F24942A1BB0C342B3D8398D811FA8AF1806A79C9A1381958C3B70E5A5526C0130512902AA6055D29CD83D493C12DA556C5E7469E45B3B4430A547398A126F68C9B273382D0FA6AEEB42BFEA50DF3C4797B6A456AE1F38E4064835D0C2202D733F9ECA55CA9AD132E086D7F75C8B016767D0A94DEBBFB127709172E5A111B42326DA2310092BD947B344CB84C7797CF968DFE6CD59BE73053045E5F3586DA3BD12FF7B95787D511DC905C8FCF02C7804B81EBEBE021DFDFD7A568B56AA17A719A7D770CD7F1D2582AD999861563717669DF5ACFAC5472D014EA21AE696A9D8485B68F63E7A2CFE2F6119EE646CE1A6766F4A118115997CDAE9CE1D04E7CF89E65C42DD2F5000E9FE664CED3B94FFC148693BD1462E41210B740D36ED49FA373996C157F2421C2ED95F27CE93B32014EAC036974E9C5A1DC0A4838E84151AA654F4C3E79020D36A47D3FC4491FFC3EE548B49E2C56098B413F8B2A4353BF0165F4C00A8E24BE6D7405BD81E86D85D65A4225D97263EF8AE28052C538954633948AB5B29D4E78AF520FBF50552271020A50E3AC644857326E75FFFA3A9DE60CF23F8FE3606A77D9B5C94608F8321966FAC5DC8FF75E0DBF78095AE914026A4665FBF523C53145E7D2769F5D2989CC5A36FD0609ADA3E14238044549A352FA5E3B1A8DAB65410F00CA5007B15145D928AB4578B901BFB1C332BD38A46F5C45CD1CA9CEA54EE949ABBB6A5817006D06ED358936ED310B956737193376D48497FD0D84CF5CFD5031E55F270E8DBD7211E5081EB835631A5923251327BD950FDBBD2F859A41CD81B194A0EF6F9125434423BD639FC193795BBE6577DA7F90A3CEDFFCDE1DA1C825CFAFD282C3EFF6CCF0BB7157DA7F61664CAF40A0DB48B169597D78F8EAEEA93E03882B5E8E18E0E8FFB9F1B4BD2922B295C77DEC08F92B0B8C08F57EFCAC052128B2A1068A365DD2B8DD8A5378635414C4E2E9E4026BDFD734062B4E76050E6D79DEB35DB81F0177F85D97A7C5267C2BD4636CE618EF974D18C4CD4929F042DAACBB2B8CEF15681800C4367D1BF61F8399E5363B5A5B0E5E93F60E383D28A42B8DD95DF02D7378C715DDF28654D6BFF8B45C6770D745616A847CCE66D10E1E49DCA7491CE04DFA28185DF7EBD5F9D8446EC4120D3AF29479ACAD583B891DF8E775EF38429DCDC3ACED287122595AF02DE1AAD71D0D88414313C3DA2B60032F855C4F4847B354C52D660CDAB453AC02D1CC1752B0333AC5A8C2B197CD78B2EF02E9F73C7588955B61625447DDC5F71CED049354A5F5FD46981D0541B285063AA8F86FCFD5299FFAB2684FF842CB821E635F9C686593D088B74F5E2AE3679121F34FCB2780DB9E02BF55ACAE8F07D80087D9E697156D00412C92C1BDCF0986DDB61424A871FB337B75E70B5624C39C960C32C40ECB7F462E0EBB377038B6EB24625547D67965FC95B0FF0AA4C4917988CCF6ABE0FD306CAD1BE3346351BD887C74189FD728BFDDA86CE165C4AB8FC385D337E14129B7DF0DBAD34159112862EE04B6AADE740C2589A7A0B56BD58A8F545E3E1228446D06285117EE0808603B7EE891DF618186DF6558A7D055E62DC45D5756CC74E68A30D92110C4172BC97D8FA8FE9C82BD43A915D46BC01AD5DE496D9E824E47FB9E97AEFFFC405FFBAD1E13666A70A64FDEF78B9981819101A7636A6EFF6E26CAE0DCF2F93797E81ED2F814AFD87BDDF47AD7981ADB46218C5B20299792B29D2E1943CFDABB1BCA6FEECD923E680010995360EA2678D31D0A457DC8BC952DD605E9C7FD880D1602DE723E1D7F0235B8E649839C2EA187E89BAFDC23595C3449ADFA0FA563F296131E57EA1FB61A4E5113702E7509C38A5B7D71220F1807CCAEAB2156E5EC53626B022FE12D3D40B1E95D62CD017386EB22EF8EA358CC7AB6D1CC4E704D248E14C515E495E0BA57B44B7C7225B9DD429512CB599DF98A246AB5193B0303E76949F56BE6F34728CB7B0410EAB93AA94B20F659FA17067861371690E421B6313F0ECC97D08AD8E429EAA92AD717710341706A0230AABC32E72C89E04BB642CFB543604A943F4D36F6100BCE906C67201AC4BF8AD6E20D60AFB98FBD440F18FDC68237A110F82E82D6FDB060974C392E5EE8E8D979981C287FA9BCBEBA73C4176DB67AA63BD0B4D219DD7C71649C22A20B171F6C411AD33B4FDE881D113B869B58FC34F63D15DB1B2049FC766DABE86D4F4F4626C4308A1EE34B0A2E2D64FEF6B74B5CCBC1E9941B6B1CC19A30341493975ECB1C21D38E76EE6D98234C5168DFB483B2B84D25CEFE8239B50E3D6856F07A88A044BDBD0FDD5A7B8E16D60541F893FF29111A71B881B8224BCED2F3D3FF9A23D1C2A42865ABADE8C44C8F54F07CFD2C95C3EB738CC56318C37752936137E3E507FD3BEB3CD7E1C0516F8C206220A0CF773DD6D3CC3766F3E20D0808A4D77DADA043267422EC734C43A8A8D071B8326C53EC3E35F18843CD83C9A8C1E8EDFA80EE1E477B6D3B19E5AEE814AB8DA158E3079CAB94AA6573CA9AB9528E82951538EEDDF0F028FF308F55F25CDD9AF161B5AF337219C668ED902E819A0B15BA723EAC097692A78D6ED8458AC88EA266DE42EB98C241D42EBDD432F0A921E99937F75835680B2333B7FE91D8AC70F4943E20C2F151C5A5769362524A779D37686192881938FCE2DF9B772DC39CA0B214C02A5BAE547344D4A8201202DAE1587CA951142EE756B2048DFBC3AB81D8CF3111416E560CDB4313646348576154C526D8403C02C7ACEC41E68964F04BAC3A9D16231DEE8D8B193FEE49B09E82600690B1BA5C3C39B024ADAC6C6991F8A2F49AF54DFEDD08136734637DCC4DB96121EDAE94286B4C12236ADBEAA0D7AD970987648AE965EFAB090E92DC2EE3061A5057826A537FC6AC530A949B4096EEC938B2A66608EC8F147386BD9C784C77F9ED5D706EEBED89270277BD1D259FE3AC70921EA80813627F25B8A17CBF5C0AA6B1DE4DC0A3A0FD3D0A20FC9A8BFFB4EBB3AC9BFAB1C967F9F288279EC1E175486DD277FFBB4F67700733A24146C73F1C2ED5D557102050EDA6AC1BDD9F1EC954B8E02F17F958618B5B186F7836D92AFA8B64AED0AEFC8D81133A2487169A9F4E47E0B54084FB44D5743F693F074EE9D053F7B2F034229388A0385A0FE056479DD846A433258DF7865EC148E0C60514B4BECBC508D4E81D14F1FC27C00902D4593E5026AC2C726B88EF04101920F66C0C6B6E42231F04FD56B3E87B957DFC0E2395E6BF38BEAAA6D83A9F6575F8F3EE9871986EDCBCD8E18BB7082D7079CFDC111060B475470F228AC186C94D697800FBB7AA54509D3193C6A9B8F132426326A0BFE50A84415492D33A9F0FBFFA7182CEDECFE2AA1826D1CB601CDC94E0B0558D3387A25365EB3EF92DC181346D9C207CF80458DC4F82CE96055BD1B8C435D1E1FFC31C279C0E6446CA7DCC2FE096C605947E30D2740961CACEA83FBC39CA5590539B2863134B3238D89130852BF3B4C6F2C846D77AEEE7F27A27074E9E45D95A0855736D0210490428D810C62AD4CCC961FE92482A9B7FD8CC28A1025966B7846CD100C5D7538AF41C4F6D272FF446F5CD7961F53703515DC653375F92B6C1E1551D18CAF0BC44DEDA4F8244B504FDCF416E922F71F5D2F836D1224B28D5D71D334D922B14CE4856365C0EA575D8F15DD6930ED7010A48D73F5BC4B89A8D1C8311A20494F964B183E1C4853DD726D3B9F7A665B9B8DE839E2DE2D52893B80107A9A90F99845A625E1AEF537A5AA41E9AAC5C8303AD6A08FDB65EFA6D69F4A40BDF8CCF1AF4E891AADD7A829E49614CB406ACC1FDE9B3DACF186C8F849183B24B0BACCE207E06D191599FDF264EF8A54BCD91C5C51D16316FD2F9D2AF113C4C22C87BCA7CF13E888F0A11056C29D0BAA512FA679EB74A6383503C82397C7F501995FC9C8AC68896E3AED7160BEF1374628CB9EFF4806337CA30AFFCF49C6AA30FA1CA880D94D0C278AC311E5D5E2F4E0934AE0FF07DBEFBA259FC239E31C98426959C17401ACF82B2E07842C99E3CB7EEF1CCED979E486419DEB1F7BC4B9707B40D9E41DB0B016728A73806B5920C502E3078E5A09E56ABE92A09FE9C2D54AD545445D81FF6F9351242FDFEFBB89605309991624A07434D0AD2C17C5623EC299F496DDCC5EE76F7E18B6FD15F372D4945209C4F04A382A3780F143B4EBE48356E897F16A674D33A539BA858BD8788F7FC9C773ADCCFE721F1BCDDE00722495C0C1F2F369ACD400AAC2EAE84FBD66A1D00B6F866AFB046BACC9418998B6CBBD99E0ED0B398B0BCAE22B0819065EF6AA909B31F8D45A54FB5DC88CB629E69CC806264A23A8418AC9366001CD319D82EC62697B4AEB63DED68F643BDBC31732B693CB931E10F99C8C1330500FA02F85C37F679C92CE1C15838F672A968EA2D94CB60B6BEA2E2B9283476108E25CF8CD30B248615B87F638C6CBC4BBEA010E14FBAE47F67C6C17EE37E048C73F073F32305375D717229B7F9BDF0F2F05A4A5AE12586FA4C38444243136D5716B23859A461CA3971020D802268103C8DF3ADB6BA6C0F80EC4A178E55CC89FE4C1BB709F5769699CF988EC98F5998BD3957F1CED2D718C48BDD19046CA4B9AF90859E4B4ABE454A0402BEE59B3AD348DA19371E2D3DB0E4D8FE92338C03508ABBE169FFFCD596199A878B3ECB94C471125751E91C8BE314CF66D79470F298BB3F0B77E4053ED19334C830E38779F9270C11CC71A7DF73DC7A3DAE233197E722E9D9E81BEF34E58BF6567DEE2B982C81620373C4DCF04D13FBE516E6BBF1A12036EEBFB52AF587EEB7525965E7626A4E52140813996B856D5916BE263E178290B0B1497E835326F981514303C9E50EA55A109C1B0B8FCD2ECD441F2D0E16BA0AA87474DBBA7E4EF964B6AE2EF28A4B0DE00EAC91ABAC89B2439448B0A0BB7EF57C18AB86364C08776907790B2F12D93ED1C9A473D48470C20FD4B21624AC612942AB8836419BD8551F86586236AB8197E30CC86213CB8CF1523A0578B14654F786E40623914121E915D98B3EB7C07CFEBEC008411F88FE6DA42769D3F834B82FE2599286315094FF67595670D82A50D0834882C4F4C411C2403451B3F5BE3BFB78E2F7421F5821E7F5919D725D085796512D0EDEC9649A94C7474755A0F4E4752522C20489AE89FA613FB649763978DF2BA02AE45F669AB8D4C558EC6E255EB21B34D3DE8F1E223CDAE777E3898AD09BF71BA09141221B8DECAA58C012FEB8A8CDBE4CAAD8464980EAEFE17744A83D96F2BAFCE5AB7057B8CB51D02FA19A5EEFA53A81613BB88BC7048E08EDA2782C79998EE7CE754198B678F661FF15DF0CBA04072CAD6BBF5EF43CB9EFAC71FD6F949DCC745AF7F2BF87BF629A2A1628767933A131150638C90FE0492EF6A25ACB37B6510E7D63DBEF864418C976C3F0088C53D664C223C2AC9D703EFA31057C9E26074DCD4615E7171B502CDACF8B173CAAF0003C315CDFD8A7AF7A7D9CDB2FDFC74C30F6C3018888D882887523132C5057C2FCEF4D742BBA228319A23C3768E366FDC9BAA3D83D889CAA3A54D81CE9084154613E3E6AE6F4838A3DC29D14AC4476388432D15DE8DA0758A6916E86DD5A8703592FAC9A34B0541D5592BB18D097E5F07125D81C2E0132A502B0202532C46091CA80DEEB684165DEE84BBF1DB98B722103C089D5627A8EBDC77C02B7D50660EB3BDB03BA80A22E7A309AF27549FBF0833C83F91DD6836E805477A9177AD4746B67B4C6CC7EE8C3B1AD3C5B66299CB810BD9E10EA3E46D2A470341A0D9516ECD19D0A686A40751073F5BECDC0A5C0FE9CBC0AD5AB2E0922DC70A9240093F2F296EE793376E751779B782FD8658BF2D89B9888E3C00E74ADF09D8FCC0741B562DF920855DC9A7CE74B71303AFF939FA1D769AD480B79AED2B1C747142399AD5403BFFA108346A041D32A624163486B7C2BDF2179985C774DF6356CC84118BDAC0F12E393641F3997A3CA60F33ECABDF1F5FCBB5D341BD65608B2783461FDA6CD8297EB6E78FAF19FDF6DCFBF55FCDB956B82DF89CF7E24CA9CA1C3519A190C9FCA1C2BF1020B7BFC6BE132D37B011EC94DCC802391CAAF899D36290E89A83CF0865086E1779A25B78464F73BF14520F519B6FD67561F8A6B5030A1F5A95CE0FC1C82FC65CEE2A055C0EF427BC93D1AFE3F7EFCFBDD32603C40775AB0F60506AA74CAC58FFB0B595114FFB83C806A5E0EA92E4B82483163F798EB8CAF3339458D31DB7E251070D11AA5F4E35E58310E87C9E4014AA9A32F7B8B15043664E3EB581189DF28A3C230F5D518C958B375E55DC1D872FED1E50973FFF2851038A85E28D3A61941129FD26A8D20D49C951FF73DA2A6C5975B3E3DF7FF817CD875A2EC532EAF53CF89A9ED0EF87C1192977F662727112A827739B952437F5E8250B96D469B14220DEE22CF1A66F7F77C76456488BE87D00114EE9A47570FE484D686041177ACABDE904A4D538D5619977479A916C6AE48ED10BC5D9DCCCC5C674306172B7469FEE780A7A0D17A8609C9623B8BF2229ED655CBB1CDAD094AC29A86D8856ACC14A07E0590BFA6BE1BA5D362265778140749C7C44C06AB69FE9E84CE2F137C37FD58AE17A59FD6E8B306F68286959FAD715C57F6A6719B661BAD5CCDD313922B21BC4A13A7FF52501AAFB12370156662F771A9D39677092F0BD3355A59757299FD57F5053FA968A53744A51887721DCBF6EE435C3ACF8A46C71052551DC347BCB105E264BB296C4884C503A9BB6664DB263338CEEDCCBEF0B25F5960DC7B62E48ADF574F0C90B7DC59602A6395ED243DB4A63566472F65281ABAC5777F0C49356FC91245EF85F923739C270C77CE9DEA6D2F6D1BE47103937064B388A05FB5E4784C4BF6D52E7AC2AC855EDA46BFAA2A5AEF75CCC17BAB67071B98173458DD227E611D2315E67E97AB17B4CE2A5CE8DAB4003C36674BB4F3A177CF6F3437BE29E38551136BD4D2B5EB5C8FFC7315935E83892587025DB22E9BF5A1E45EA92AD4F3183CDF5A02EE14573F6B701EF8C21D87606D6DA3FBFC8FD1B4B56D530F7BF8A6C2831336E278BF3708BE205B8082BD94214BD4E51FF300E36C7131B484E1D7C202C0490E2B440454375359B2FFB559768064A2E4F9D11EDD5B600705C841C1691BE4B25604D3B9C0585D8A537F9C3385D506EA39978F1D73EF61758B57652AD4E1CAEE04D19A74BD75105195C1FA76148F93A740D56DC20818F03007CB124EB2DD5465E2971558E5927D04FC4C7E28A7DD08D4AE452B8BEB4CC5608132F87180CD856D74E24BADBED35DEE30BF2ED5904845376AD78640478264D252BA859D39F862D23A46B3A46789B90611C6C66D9CEB7DDE2B66ED16D4C8B5CDFA5812BFF9EA38F180E700EED9F4727422784ECF3E069C3A9A2FC60442205B805FE1155F0B307069F41D5BE7ED3019D297A0F043F08FF49DF883612EA2729A10C7E2B9BF701D899BF40E9133D857AFC2E192852AB6D5741015800A807DFE202F5251B0906F809B56ED9E69191EB056956B78527795B3BB19D348B4D41F2A7DB5A5B14DCD9611B6DE9A0264BCBE52733EEC4846B1A0D3BF5785EBC488BC8D250F6D5AB8FEE0197E5B28BA3C65CFA86EA2B18FDB13F473A06B84C2EDF31BC022FD20E0E4000C7F5FE018A6542C4B8DCC9A24B28BF70EAEC1A4CF220CDD5ACEAB44F74792FCC42C024E304816C04A0EE0021CA45D7B751F2BD7A5B43919EB6C563C9471FC79A8C50906D89A82209ECD03FBBD8A67CDBFE5B120BA5F26998B1432BCC52EC23DBDE988FDD126C80B1D10EB549A78AA143839CCB6653AE12AF5C2431DEEC9C446E77700E4DE22C2170F9647989E1F922EC044E525E08C373814DB252D630EB2EFB0C598D309033205DD7D562ACDBCC4211B1D89EE8A288F45B1A13CF24B7133F753DEF24E634DDBAF27ACFD99C64F8DF067322107844EDFBE155877401A93A24A777A49CBE034B31116AC3BD5E858CA9125AF3443E13C29816C76EE52156F109C74B368A337B7D955C2F3CF84711556C2F0AA17FA45F24D76178129D9C31559279C9221C41C140E30FA7F1D172991FC1A0A294D4DCFF267CDDAFF180C4A868142C5DFD3BD7DBA43D10F349796C58DD259C916CE4982A6E06CC6459845019EA8A732A82734711836125962EA0224FA28FCB34C219C88D9E5EFDD84C5DA04918A3C7C4C1C8B74B02E0F3DCBE6799AC6F3464C123C384BBCDAA0CF3CE8D045C8F43A22185FAA92355481CC08D630F1B5E0E48392EBA57331C45A5B9C1883962192FEADA09FB9694E53BF0747256E83C7FDDF55D31AF7BEA3BE2E920BE8190A823ABC95DBEEBC22C67D4CBC581869A2AAB7B2AF1E2071131FFCCC94039C4EB3D83D5922AB5CDF1934426A455F6FF01FB27FF8608CFD0517CA72EE661A1C1153DF1C12D4403A1E455BEECAD354A034E04E6CBCE9AD891937BF1231A8E7E42C2BFB07BE3246306D8AE949649DDE92D00EBC996860809D59812B36DF9185858A4A8D3DD680DF588D9722003838965493687382FC157688FBFE45C7528DE15A0FD830FDC6532FCA88258499DA1A19A3024D9CE92D030949982BFD094A466EA0ADB2FFA9E057CD2AF7F721B7BA707A2904C4FDEA2AD0087AEBAF8D5F331692517B21357E1E5F607D5A989A7351108E18E3438DFF63E78AE6F9487AFD6E4B2C69BAE2C9535B0071BFEA72166BB83CF4735227424CF485DFD0F09CADE2891EA38973CF4CDD815B97316E28F948E3103C4B7D107AC76D5C1117F4D84C567F20E2EAE3911815217917618A9ADDD896224F56FA2FA23620415052361AD00239E71E93EFDCB4546004191D5094860FD1FAD4DAECA436BE7E7DA0865BF69233DCE988CDE6DDA03B242BE8B1CE258E7B0E3582FC5590AF7DA3E067AE442301558D9263AE49F13F357E365BA5AAC42D595969EB322594D1D165304C0AF523FE8A1E1386465B4D2D2FE5BD95C13D8850A13E2C450CFD18FEBBAEF48F888FECD5FDA25857F8FC2DE2A3419F0DFD0046D57CE8632F19C5C24ED9B7645BA3B0C737472384966E51CA99E77FC46CD9840EE482FF7D042B7B49D1185698160AA317A6C231C1357A9C218E22BEA1C4C38AF6D60C6E01B3D9FFDDEF399AC9E92DEDCD8DA15026B52D54FF21C955A53290594BA1C4055F646083307C88C287418295CC4BC1051DB576B471D1EA68C5902D8DB9D2127B1BF7908D049A22AF4E1011E4B95DBDE78BB227B2DD64550F88995D35324DEEA3CF822D6B4E0310DF9DBDBE4B00DF8957F243C4AE9C11F7CD715F5C8F0CDD6A1771097E479EE81B9186905F4FC64C19A3C479FCCE1A16F51B8FF62C8B2312224F8C8110E22991639A51C3064E8F9239EE4122402C5516C50B9A318E1288F586B10DE3B6B5C15C6DD2F75A0CAF6AB6098A183321557FE5F1FDD83FDD63C6187479CFEC19F3A13DDC1B32C6903F5023A014F5390E0478D216CB305993E4C57D9A20E0B97D6B2331E47E8C75CE4A11679F22E1817ADDCB20AB6BE7AB49C9AB24C64A4AB9CED8DDAFB6AF9B4BB1B49B04C78C2029A55B68CFA324C7A0CDC05EACD3CD4B4BAD01492201C1019F3852FB4AEA42FB787B30DF959CEB4C0AB51295178C7D53DA27447D7BA9D0F46C69240957A7EEA025C0D403BF470444E4F8AE42A783B67E1FE7C787DD161E004A263FCEB9BFA4D8F8D041E5C6F199384D64E541BC86CE3C0B941946EDA172A99BDAA43DFC723292E809E0923A053ACA78A9E47E62B0E273A1632F1663FFD015ED1110C41C566CB6092CC2DB5D353E9D9180496FC4D9998C368EAF26371DF3FE8F5D77EF09D5A28DC3821E971453A49FFD838E1CEDE08E9E4C54BDD1BFC428DEE3FF29B9EAC7C446AD7A26C8E2483629D169CC0D6E4C5660C5535A3F3FE7B1FAE075C77DFF40A5822CE3776DD5D044193645A82BD59843DE26515BF301579164F825C023DE8E7BB098EBEC52DBBE70DB9751BD775A112B0D99E405957EE91109ECBFEA93F3C0F13D1D6660E04828F71B89EB3E8286E5666FA5681A4A9BE5CC7A71C381974C249F0B209BFDC13B54F95199E98E660A250267C0B2851077B7870C35EFC7122E2ACA999F3C8CFD8ECEDD70E19E2E6AAD3E153896DC97F50E034DFBD2B4C6A315A93C689E1B6AA952B000D1AE29DAF6C62FF5FA677F1E8B66041FC27B98CBA3377C22E7A832D09620F680715A9CCAFCF4A5F86BBFBDF50BD8E9445708274C7ADCF236960AED4E86E4B171A05B1617D08FF2491401904048D64D5FB256D9379A898B651D7E93DCD3B80E0CA756B070BE1E651FE10520D8C44E0146AAE952AE2DEC441FC1EDE29E4BEC5367A0ED49609124915A7BF0EF11AE61D7EA749DB8C30DB8206D972CF7CE931AE43923783295F0C0AE6AAEBA07290EB4047166565A726F55459DE07D73B9A6713C65629A6093594E08E10E74A55E6B29AD0A99319C635EE2AC07C52B7C010B15D71983E07927F88529D815FF098A92C862E524ED45385D2E87F2C2263D8DD51CBE27D6D3DFAAC670690E29855C30D82177F2F088D6FDDDE337989E751E23F574F53F9A9A66B859B5EB77057A074C2FCADC7C3C0559DED8D3A6CDE7EA13D283004CA5A723540B3D0A89634B8CC18048657CCE94D132D59BC49502F4994AA34F648EF4F7E96427F9401C0AC9A16B5B50FF63AEE4AFFD3F8FF806557DCCD26C3A12711BE6C9071CD82DDFA74DDA3FCD02969FA7FAB7434E4AE1F428A8FDC39589FE67E755D2778A2F775823AA848E218702E5A42548B9D256D6E6C86A99D5EDBEBB880E1AD3C09EDC9729FE24445380DF363F2FCFDCF54BEAF5798DE720FD4A88932AC902092B427B8583BA16C93F0630CAFD866D6D10592298069CEA01D66E73065F5B79D90D68B335F949FBCE867D0F7DE207770C9F73CDB7DCFF5B2418C58DF2FBD10E7B16ACA5BAF89141EFB12FB7CBCA5E134C0E33CCEA8D6EDB1EA09D8231B4A8C4D610DA4D8E08D40954BEBE612F3F5DC789895C34B6B661FE828C79CE94608E6B90B33E917CE1A3CC544D081F3BA498AB2387070AE6BDA1E37B2F59E30CF19106C90E1A7AAD14E941434215FC1E1C73DAA847EB3BF80D4D06DAC79D1060A8695B0F2D93442524067902A9117A53BEDE2BA1360A02C3245452F8AE786C3FFAEBF3301F9F7D85631BD76EACB0B066BEA9DFFAB24974E6B5E53F176E84B4597EDFCBD0A820D95177013821773A666DE5392EA041B6795BB40DE68A33FD035F8338F4B6A865F81614B203AF832398C62C37DB6C26FC0549B3F2ED960A966A5C63AB51312862BB9AD0EAE085FF2E6B0DB9CE8E5DAB073D2188343B445244707E97ECB36975F6FF54CD25148CE478F13CD6C46F971FB4A2C9B327E87A501BFBADBDAACFFD8E4777F4FAB3B9AB08C5A3C4E6BE77C68FCA7EBF4F2FCA7FAB999E032762E65B0CE22274DB28F42052AD15A3240D28D9438DAC9C1D7EF12C60C05804B2AEAE1E493C4B666B6905534EAC9349EAA55384A71AB61CD843FEA6F82FBC2D1F846B3099F1A122FF7AA54AD78C89D8CFAC04F1DFCC786257D89E39490439291CC0ED0769D5D4A1413ECAA93DA4EB755B054867E4A6144E4AF8255EEFDF20863929D103D4D762AA85FD5884B9A42291C6F3214AB2EF93D357378F1EBE9C3B36A51FE2E992A09645E5D5459AD4857290DC1392CA0C006ABF646D01215B917B0C09036FE99DC31B5498E44F279221C363B282CCFC8E5D5C1A1BE8195AE7D8874BC11A4FDAB50CE15221A503D381BBC77F9D8FF5EE2EE913EAC5FEA0525DEEB668F0BA54BB3ED7707AF4B7D3196ACC9CFDF585DE5155C95D8A32A7281B0E9F6BDEE85C04C501960824321E0B37266590ED02750D5B955EB3FCCDA46A62912A206646C060C4C1C9FBEDD36400D878FC923517A80B8922B05C0FB1F40E4E357C1E3B3CFCC7298239D4A47ACE02E6922EF35A82D9E53EC28587DB8133ECC452B038FA1E0179FE1630F06993A98D2AEFB250955B424B48A786C82433C6F8C325C0A42079E37C1060ED7B69CC636ED9AFD2B38ECD93D8AA8F3D83E27D68DB26EDA3C869050BF5D846C3755A197041FE92A7AB27BD166349FE82E86470CAD98110D040B0D74980E7391C7947DB05F1382A3615EA941D3BACECE30C5806F72919124D36FFF5B57C08C40273F5778CC42140D08DCC5CF19450458E8C1A4A5B324CD5B64B70C8A3ED6C7776BF63DEC7F67293B5B0DB37F954CB92CA975F7A0B1194C92F5B8CBBFC139BB72D62F9A222404E0B88E59986B2C038E52DBA3BA1589647526FE34BC39E66193C939B3B1B2B185D5F5015EDC189EB40222918D034C5492AF6D6CF800897617E4C228A650CE765D998FC5934EFDE1A01F62DC4A7E06F2B8184B305E6874640D8EBCA3B080344188775A570CAB92A189389F5492F2208EBBD77CBE0A9553CD6D37521C7A3A817B09ACA438A57065234757BDC05E96F957A73919CBB9BE29333102FF46CE457B500056A74B8FEBEB17E13CC2A5D232CD31F8E506B2C05E81E9285FD87CAEABD6A110FDC2E2EF2B0923053159C5D9AAEC4092C7F934749E1CB055F134FC86A8F294D6A2C15AE3AC8A93D19AF5EC768D94E63DCDBF39EC35FE4193FABE875116CA9B63010D1C06F24E1E3D3C5430FB5BAB8BDD2C2356929A4BEEC5B0A071193E20BACB5C7CA61C8B6559EF21DB2B510D67F74C45CCCF83268306DA0D47233EC7848ECCE11D3B2988350E3A8F4327F9184EB34EA6183454A02A09387830E404DD25FA4D1EB845B584C0F3657486876E006590B361E7EF98086181014241E8DA7AFFADC6C88763FA27246A62690D29DFCF2352AEE798CFF355D26AD2392C8690C9416EC660E7D6384152B100417530A87C7C305BFB167B978E1C3FC7137304B368A6CE423B6165118F27212B70E6741D8BCC9CAAA7FE7735D3640C4BA1D16457D454D14596189E9E1DA1E0634222DD2517C8169169344F16D6312A034EB7A3B6BF6181861B59CDD549EDF7A3D8CA56F4B7ABFC7C2C3E0C62F0C54421CDE6521332CB0D8C11FB3108C533D456D914471A57EB7C8CF176570733AE18F404E41705FF59732B3422139DD5CB53C9002FC942C261DD54B8945C88187AEA5DDB2AFF1D9C4C294194971056D8F1D7D9D7AC13ADC954B9B3E4DF7B4477E51D9019AA1FA13187C131DF805AEDCE902D52676B56F217E7B0466DA4DB641DCAE316FFC86D051CE75BF20A682259D35AA7C1EF219D3B0F5AA288130DC5F42820E58C8E2335702482BA7072787716EE9EB56DF1A3287C67DBF056FE2609E8397818FB7AF20ED571AF6DF2303B006D1476A62AB2F4638434B6ED74F9DD21CB37C99462F5EB5DC2B9C4020BE0317C755C38F8240A1B456B1EB437675B0972B07A91605F326AAA26F0F86A034F5C582FD07FBEC635A9FFE5F563A7E422087D947B00C999581EB4EF099AA09DEA4AE78F9A6631223F4F84A046DA695E4F745C4DA1F11715F1653C90E780CD19DBA4389C199F859BEB90195FD7DDAF3E82D59078A3AF8A9632B07BE88BF9B83BF35B5D6B067C35997A3837E5FBAF66EB4126071FA2431D38D25AE04F11BBECCB5CAFB2E216691B0003D652B0723430253973FFA8F975C6CFA2055998CFD4DECDD6E90E2CACD37F305944C201ECF5D7DAEC7FF5DE30090F80F29A9545C6A458E7365A18D690D50E5DFA9F5CD133982A0F93015454A47E45D74F8B75A30FDC82E233B284E53D7E0AEEA9F139A06CB4D6A75079EB7F104DDB9ED74C865EEBC9CF8A03F05F01CEFDA0EECCC2D796B103009623AE994CAA7B940B15CF79DDCC81048D0CA844AB773D62A1654C846F4F2CAA6BB4E79BE368D7EEA054B6B429C3E4C163DA52C560223BE328289772826B363114FF386239CB2E78E40E62B116AE19F25BDC928E3F52144B287EA050C35484685431447C51AED58872BA4E19FF3A9C5998EA3561F4D1DE8743547E45D74F8B7590822372BB13132017AB0E0A831E14AD92B47E9DAB116E61AE99A26D97451E00372C64ADAA4793EDD2A5272B2C64B15C7A0C3DB9D281042C1AF03295D82FBC6D7AA610FBE6513A982F23E4A0FCFC261EB908AB3F675FD2DD1F5ED76E25C471403F7FA2CC2B30AEA6FA503969CCC5C85750B8E38232B4A79EACCA7C78D1D348C6321EBF1C1035D47F96FA73D95BFE8FC175CA0152414C9A062D061013D61AB166EA64839811B6CD883D46F34B8F3301D29890903458CBE3A8D0D1F0B7FE5927EB7B0CB21474514AA4227A42C2669ED4AC23B3631DDB38F8FCF10F0F00C7E7A1F14687B9E3518BCC475AFE71B5A355B57A891CAA134DE979B1B6122AB2422ABBE5A495EA414874753825ECBAA92E1751F2FB6B9CD6505EE8911C057FF241169D814CDD3700ACFF12A64AD5021B35AF59C99F33584144449084A11FAAC10B76E7BF9950366D1A270A096CDE6B2A448A03DF77FE7983142A020B35B74ACD2B7089936EB03806099473C82F9FE15EFBB258909DB5A4BEBA730B675B107182B8ACB6AD460CF720DAB83B9FD4D815B2D72C3661E5174D5A24DB6F5977DD252F2BA728DBF332ABEDC9AFC82B90755E6C57E4E01AB8F077A0BD7526BCA9929938640F97BF3E0248B9448785C687EB61F729BFF254FE320C2E16AEE3A4EB9FB5728C67DE8D67D8E243A693C37806C0772AB4D5F908AE6B632FB5BFD9E2887F93040730E67C4AA541B71162634A4B9ACF35485BA3B0CC6A59CCE59412F88511F7D12FADC86D5A80E203322ABFC8F8750243DFBFF3571914D39D71C5384322DE49FF7AF32F6E95074E44E2D94A6F991F86C2D1A064FCB1109BC31F3CAA7247CA581759DB60DA1193D06F6E50CDDD7470088522BE2B0B4384BA816CC11C61F5876CBF50D23F9C4E58B54D4DE7D6E7156427DFFBEACAD2322BCE8F67A8E7BA457E05E8F3A5C8319015BE685852F84A85C35CE340D42B9B2E1EC49EF8755FD9FFC70304557D3C17F4EC4D2FAF5B4BB4948E6060EDBDF31591BD68B185A8F2048DB7073759579CB97B6C392AFD8522ECA8B3D55C752489018B9843A429688584DC53949AEE31029237CC4903CAEE8A7EF3324975110287C38EB2E91D9944F5A8254B753AE24407551DE6FCD38E757DC3E55BD276032318416D91D47628C1671CC7EF65A0616CCFC824C8008644A66782AA31C7E95DF18393D9F791E70D15D81C1AA9950803E1A5C898CCD1BCA43019FBD386CD318CADD19C95C6D5BC26737E0151E169AD89872A17010ECFCF4078194ABC78DBB28A137EDB6EC99CDCD962431764337074A74B48F1590D388B75946AB7DF5082F36A91D4E318618D41C3DFA5AD0A422E121859B5414013AAC1D4878C8D01D6B2D1C09996D60F7809226F83C55BA5C369FBBA1658396F1588A7F3276F6A9F6EF7CFC28D2964832B5905787D334FB2C79B3E9EAA545B6CDDD02B22AF2E922E66CDFB0EBAF467C7E7085AC2A67E4BA2C5D4F2BE6E644190E6C42C719405D1CA5D7602606438098DCEF61E78A3742B946220706391EBD10B2DC46BD35484FC5AF6C69162DE96A35AF82C61F52ACC3AFF797D384BF35A304734491AC7C4D795C823ACBAC5B1C7DA9689E44E8402231E617EA56B73B31FAF135346768E57D0BDAE53B6FD589DB9BA302CDEA8C9659080289BBB8F053D088F3A439C570D5E11669CDCB63274B611B2F63E9267BBDA7CB79A074EF1E1C0931211D3E37A68E65B8FD195BF91175F7C9122862633A852FD1531D25242E8625B865C2D23C0F059C3318601AB109ABDF6B641EBFBA6B841C0CC6F9F61CE0B3C7A8975696A9B0F1CD0F8866CDE92B8633DB340C2928AD5393DF3FD35D28E08CC4A00DCDDB20D592EEF0D1E8D95E2957FBD81A183AB1B5B21B980C668B8E3477DE40C82F9E388F192BCD99E24AEFC2144744E50ADB66E3E2C5F05008529B547FD83AE71B524E358EB3DBED6DA5EC85E287EDE66BF04594C939E5A0F116204A5C2AAA6CC7BA0FEB465309FB4132FBFA7915E8613F4D25CB8F168CF44D90456AC66AFAABE3929D390515D33E083571893EEA0C6310C6507AC22F9F5D047CF53B3DD41AA6D426FDA288186855665861562D6EE6092D0A4D2FA75B9C4CDF4716058B98E301B9A037556D52836708B5717ED9CDA345291887475BD61D3B9100F08574FD776A01763FDCAB4D9967B550892E2B8E4D5CFC88C15FD486B093CADC74D223808B0BEFB2D3D0A39173F4A19CDA1EF40044173082470A23FD5566865E8E12667D4E9455876726640216D602CDF5CEA3D5CD0EB13F46659D2ECA119C0B77318D8BF320CEBD92EF4AD22CB3219F6D2DDA742E2778E72DCD5BABD4697758BEC18096F999739CB336FC36ECB67208F370EF98AC0AB0276672A632BF467A9C4CEE7A4A5B003F67C04663E7175E7E8C777815049F3BE448B03D2F1FE880EAF437806E05E33D59BFFDFABDFCEBEC206E8BF97727B7CED180807A45E877716A9DDCA481E85DD12D414D51AF3AC959C8FC117B6825FB9058C2DA50510D0DC809C96469486593450FE34A1C4CBC1C33BAFAF3287FAC63DB64BA1F6FA128A5FE4F30DC9278351CB1C82C158FE370F3195028805EB34A58689A3BF3A35F58D72122510A88053A66A1027F8C014080B864B822E4B6602B7F9EDC42C78158D9D179DA1CA9225D0F605A5A99F04B8853E3FAD2C5A96A8BCB6C96D3E788AFF74D4C1D974F49BCBB2FF598E6F56E26EBF4E7D459E157E6C3152DC46C39535307797E0E8726E0719C25035CA4FF192F362445CF990D55FC747AA98EE53C76CF5945F574335250E5E817572CD03383B202EACB8CF907F616D9CCD97196A3F9CF317E67E2100A4414DAA938099FC685C3FF354CE20976B7F53425B002E1FB02617593578D15612D5ED5A0CA70CEDDA65F93D5CFBE34C4349D022A1E30B459B4F9F72A969460D2B1F396728ABFDB95D48A5757AAF4BC125E70EAA93D2AE3276B9FDFB0985F1AEC47F49458CD4B9EED0CEF918D40AB0CB4DBBF6DAD7C5850D83FA774835BC16561D72E1EC2157D12E5FB136660F7BD5B3B634D50F00D486B99FCA64B3A9FEF582279C17FBB787ABEDE91A3F594EBC759C9B24AABBF23420AF5D94E7689252D051E7BE6A56FBCF035B3A9000B216896D299D6175D94E2DADA1B404B5C5E99E63E17C350CC0C3B3D62F7EE2860CBFD16A6968F5BDAB9959A98CA1BF63EAEB04019E3EEEB2E1AC88CFEB3A18BB78308B147882651177E725836DED1634C3B14896F6E514F8A4740F7684C560457FF370EA3056861F057EC0665C580587B4DD59EFFE19E6A871E1FB3E807643117D655110B5042E614307F0EEC83A94CE6557B05DF2C75609FCB0F77E291E5E53EA0420C23FB9F534FB455266C9878BFE2FDB0676132F660C9CE45D5E65C041BB0DF606C0E9D91514411DB3F7D97679B24CFA19F90E320174966852CAF0909A2426ECDA255B24AC9DFE0938A6A0DE70E0BEA67DB2FF9EFEADEE98CBB1F664B5A0EDE77558235549BBC8A3906D74DFA0FCA3D493D12984EE7E20F0B535E99E8790F08BF4E28C20DC62B6CE314F300F2C4753CB432997BF545B061D822DB91D5D49F574B76AF4E548E9FD45A1FC7A9A84C5EB2EBDBBE37131294D670DDCD265A9C17D23B32B8D6586C5DEB0781C465DD7C529887052EA8F02E15D173126411BCF1904E1C3D43B0326A7DFD966BA9A5C610666C6B5262D17A16FC347B3689C18D7BA6A081812BEA838F708072054DBB8AFDF59A7944541CF0A7F34AB7B54A7DEBB84099AECDECB45F31EE06F6C026A42A703FBC84FF45E41FE140081D5333EB841067578445AABD5D8D7EC53858FBDE9ED56A5C88178D512D1708E5E6BA45CF0FD3C240A8870B2BCB6712E955926090885B070C015F3771214C30B0E7E979FA6EA53FE7474CAB5EA6ED007107A0814DD0FCFFB2DF79697260DE5FFEBE4AED3B3EB653BAA4E4D646A4F959A554B3A88C72A42AAFC5D333932A2139E85B1CB166BAFC418AD733882437A28D9A692A86B398E37DC0A263188B95B4A1AB398AD03D5D31C3DBECE631926CE3E13595DA1221608BF6A366CD82CD0B27D2DA50F4BD175DE834326DCF6D30878FCD51E7C8683703A0DFED0D86FC38D01F55739F1786403B4733CDB00825B6A4FF4A41B5E98478530B1A6E1424BBF7CAAC3DA1733AEE8E5198450E926C53457F36B75F2B39DECDACCA94AAEC053198ABC8AAEDD35A6BD7BA92EAB33FB3F3FC17C7DF160FBAD1D0CD4BDD97B60B7D3F6788980BF8CC3DDA025D66AFE6E46104D76978AA47CB645B8206BB4B3D84519516224B77CED8D3D1BF9C8402AF1F62BB10E6366909CF1BF13BDAAF5A709F97AD47C4A434D57C877D0388BF6A5455D6F226E1DED2392B8FAA93E84D7BCDF5BFB2F134D7893F34B84065B514D14E3A0FDFD89056A8A7FB249C8840852713943F20B3E806E9D1AAE39F1DB8662B025811FC6349A86EDBC204A8B33207AFBBB322552ED9D484C037FD70CF3CAF823A46B1F2193898BB2D97355503F0E3EE02CB3B39DAB1F9137E93D5114CEFFBED02475DD7790D4C8A6D6BC43F274A49411926C4026E60165C60407036549EB9ACF1114AA24114B8DD539DF798B44EC3435172F4087AD3AF4F891DF04A1F8ADA63286E36520C664603B85D0770C2A39D5052A1909F77B1671397FC4F0548E485B510F3B0E9780F77E8BD78EA74E54C290564411D2C4784431E713B4B1C797A08B2EF5AB3031ABEDD9477F4F524ECAB193C09A24926A771FB96DCB57840EBEB5F07A233E43D7ECA2281315938FC281E0CF3B40F6F1E8092F22E3DC42623E23C8228C49FFB92A30CA7A9A9396C5F4CB9323AD949FAE4804AB3BFA856907ABD150F13A702608A1E2DDE91F8FE3ADE3FD7E40D0D29C8C3E6FB56A50F82BC4E24FA269C93E2CEACFFC297F363D72578861235E559F2A0CB5D8EC1C9246C0203C4E520736842237EE2AAADC4F2AAF81C7077DE87826C4833B914B5C85B5CAFF700DDEF8D4AD4419195FF3A3CCA460B1B74F3007F83CC23C05AB6EFB6231D50B934DBABA259E58FD94A101EA342724D07CF80DB9EC827B3A4A8A892702A8FD5BCF46DC33D8DDBE43F749371597028583D720C77EEBD6A4F8299FAA4A71B662E79BA164712D5D0CF274C52A308F349C6A3243F28E97FE09939A34AAB481B88339E537A48EB8B7223D1AD2BED3461784CACDFE29FBFECA21EA092B862E9FBCCD04FEA8493F59A151FEB8A0DCDF4D12A188541A03D0BE97F71FFA0CC672C9A14CE880E9892164C225FCE5DB0DE02981B2AB617A40C6396FB3035CEA21DBFAA14EF5E2216C3CF947CDC38A1B279FD6D8E7370CD74C60AF1C3B6C24FAADE1A07FC62F0710BF904B15B9B8F22236CD3F4D4625ED4A9812112F7DE8CFA396F2546107FF5401CC4FAD72D85B5CC42EDFDDE9DD90BA6EFAA85A4DAC55F802516F9B4CE4ED3BB1406365CCB19077E3C6BF9C2979C816CD8816CA58592AE4BB229FC1138996669FA6C74514F5FEDD69C2C187D4770E947B0E9F02456CD76E54615F9A1D054CD48F21295720731886B13844AE95F7A73307F5A617C586DA8AAFA66A757CC55C28D6442B91A2B03E17432C74FD84E9E220ACA632B8895B1D46369EE831AC52F61C908D4B9205FDECA87DFF1A0B358CFE0B9A61532A491DBBE58BD540444D3161C4CED2AF2EE6B96487E74885FEE2B495F37485AC0185765DB6AA052E9E9EEB8361433A5F91352E416286DAB9195C91200B42FE3320FB8A9DEB31A372F0427281D46CD6BE8154EFEA72499ED4605E07BABFFC2D7D5B8117BC2EE3B391047AFE99C239947C9C9A33408B0D9E506CB9CBBB5C6F9E2A5E1E60217736E179D9A25CA69199FE7C57991062024199BBD24D2E387F823A83422C18F36C47C4398F7E1BC6A4F076EF1174F1D6A5B511815C962171CD9D8E266C1565EC862EBBC192B5FAB59DE2BAC5C77B5FF383DADA6A05DC5F724A16535937F30F473C880FC4673052509B40D0ED081746F2AD19999EB88E8537D669F4664A58EE0B2CD2DF953884B291310AB0FC8DFFCE6EBB32E045C9CFCB62798AADA85BBAD46902E089853F3799F8F4BD27D6664904BF1CB46CF01C3ECEB05405189F79920D973F0F201CECB56403714622345F51B4F417FD550F2C3B4BF5840EF7BF44BD7BA23638861CBD7B5F63E7D9CE4595949F652F4DE387BF78DACBCCFEA959E799B8DD2923A2B2A44B3816D2017CB3202FD76204DA38B88988EC2B2E9195D4A3075A255852951C0E2F89676308DBE1602E962BA665F8E9B978536BBE09C7AD73CD338612EE13E1BF1D9879863EEB766FDEB8FFC959965A76C206F52DE2BBE1270E5D4311844B8205426B601F3DB169CFD788A563EAB82548295A0C2B2548E5F128931635F9411ED29CBC5B97114BA299D3D401D281C8F2F7C9CDFABDD45D7649711C10584CAB01CF3D64B934CE45336358FE29EC927D1071152003316300CAEF98E8FCBF91EDCC88764558691E2DDEDF2F2CC19419A8E69823B14EFBDF490421BDE0F60B260E2CC29151C6013901B2C2FC64AAADB78B5B172536066F0DB6D7802781E0052054F76658744CAA9CFFB260827EFD186BA7F3A67A884B35920E0F69FD0D7167543DB7AC891E6038673830A1E2636B7378C890CC58BD94D86A1A0AC550DC73EF392EFC4993D16FDF38E225524851BBD21D3E14FCE54A50839F16F331A00AEB5FF14CE4FBCF4BFD029829400F6D178A67C680E2CB50DF54291F36E63846CBDA38331E3BBFE3C951C136B9723CD392951294E4502FB4274D0F7D9ACE8BFCF303EA5970C0403EB12CBF26B687A625456B421EA02B541239DBA99A5F5D52F7686B3B4C88DDDA4FAF8625F0B3FEEF7417379D28D82542974D1DCFBC142B1C1AA912B7B8D01A1BB21F72FF0991758D1D364BC1CC99C2FA1F342AF3F369F0FA47DF723E66DEDAFD8697360437177318F2229510C3C95A92F9DF4DF9712E117776FD184DCBBB6C9F154ABED46906CDE0AACAD8AFEECC5D487401A7A9A5C7968FC8F4D0279BF1E229557AF8CC5BDC7095D02FCD99B6A389C31C2789B6B335EFC2AB2B857B1B19212E896FF1EC0DB57F9983533D49987B4250866A0E67F3A6BEE3D28F43273CD8FC0A9291CA7E0B81EC0EEFD118CFB4BDF843067D0CAE981C658AD8260CDAF364CC779F687CD95F0B1766062F8C8FCD43EE95E14F4926E1C93DF4A67212E81983411878B1A270E4AE59303541B7A5DB1F052BF71EC76EFB45FB9B23AF8A711A30C8AF6513CC15F9284AF03392DC206E649A23304302B881FEBE1B31EE6C5186DFC81B792200F32EDD1B32DB9E2DACF16B7513833E3736B41F229BEA2C8D48D7DA68EF54CEBF1F29AF6C3FA9B49A8889CCDC16D583176298B27850A47243A23AF1483588087117D32537F651239E1DD9DCC873635E155348DCB22D69504EC5E8514C6EDB07961AAFD4322B1050C041FC8A7AA9FB8E07A27AE926E1CD6E654DDF87E686FADD0F39CE3941297613D6B1354B73BBE047949FCC12D399E0E1781454A6E8672CAC81FEA21DD370000E39CCE39BDAFD6345B1220870018B23FC95D8AE4F86112BBE6588C3A13441C05196BE68AB57A15722FF153CD96B3B18234BC21D1A21DA07DF90857DF6FCFF1C290777FE222BF93848F2D5CF75BB318BACEB3E1791EB4A4980E2414CB57055F96A3362DCB1E9FE1E2E175EDB6EC7081F7AC1910DF2804255C032A3CF1769E65E301A64965549E0BA0847FEDDAB6758059CE3BBA177B2F49BD86FE3AF217294C9D00B3AF20A37A16DF6D46F38999C62CE34E05B300596538114C7C097118232D791B353C17429D1B12DC7468B82B69CE5843F5DC2231155C53DE6AE7294E1943180164A16E96BAD1DC5CE5DC5317DF70BF57F24F04E14BCBE55878D2053DD40623A51BB0227A67E64547A8E5803990DC6D4B8E54450A5367E515FEB4F5437381BE215BD01831FAC165441BD6C4B19868B94FDD0EBD1DE85C3949356A4A0ED6B6B8AD296B206A6B22929A768DA40398C613CB0CFFD5B7C11EF053CF5E95E7855BB20444F5F60BE33963B448EAD7ADF437A594C73881938B1F82AF4744989563C394BA8FD57DF1F9AE67E5A4517E43EAB7A81BE8E042C8A988F86FACDDEB75A2CC86D89BB035F6F0BDF6173EEC1ABA6E27E4AA9CC0A8669A7CED0548EC3244EFC84BAE8E9F3A0C2C5CA403C6043AF956C633498C4FCF6E3A9F097189BBF73D5A151DA775B4A19814A36B8E675EED3CEA58BBCA5316D296A971386313A45AA6775B1469AF8AA9588AA4D35A1CDD533C79B81B42BDFCC3E70261A81608238DA364033C44B954A623935668BDBAB7E7B81F4F9F451721CAECD90F08A35FC03C1A1934FA8013F1A4182BCFF67662E1F5C2236C7012F89A27B1EBD6BA6D187454096E16616C0FA3ED6595A33724ED713277490441363840CBBB1AC994DE0853853CCF40513ECA24924D5C60EF580CECD0CB0847FBB2D7AC14A9C1F47893C7EE1D83C7EF76C4D036B57FBB7B09F2358D7C9961691262EFDCEFDA12D54D0956CF5341BA0EB988B4CB8426A56FDD31D94FDA543ADB0930C401D9438C088C0FE3C916D7356505A49356B40A7CC00F2C6B52FD217CA38D3E8F2CF548164F8C03E815455389F2735615B25840791ADDEC9CF72D4564A26C31224C5A4F9C55F8E082865D7D735BD661F77E24E3C56813CC74601738F320D9E4B9C82CABCD79ECAE61432C4B22FDEC64BE65869B6E65114A287CA3B746FDCCCFD2B28E307A761C8F0239452990E6B4834B7B4E815F9E80166968F1E036EA3C5223E9F116EDF3B27C624D5FCE0194C40F2D96C953F1150C6520033AA119A5F03745DEF68BFDA7656DA726F1AC79D346E5F017C41954500F157E6609317FB0D000821B8031838D727CC54635D0784BFD17BFD4237CAF8C9A5EA4B7C6A1F57C4139CE055AEBC9936BD7D4B3CEB381D3B8DC11B6FAFBB6E9895213311185F689B72C1290BD49DA2E7CD147E7587513A4A8D589513A458DF0021E372B6F6098E7105B6BE7BCEF943427D91B503DAF236728DE7056E035AC560653D4CD3579F999ED1A818C511152E5C739C650A7FBF6CC8A3D6AD3EA10B85C0B7582E36436370C98397FF06942F0234C789CBC14074584F1104C358C76A39DD3BC3A8709A762776D3BFEF1A0419CC62FEF28F39C8653C55B5911DF2E74973930FD313C96F381817684CC7BDDEB1394CFF1A2C05B534A3B554438EB1482227F25EE733838BACBC1CB14E0F74FEAFBC5D4707D8EA1339BB234AC30C1A30803DC61F05E59B8704CD677A4072F22BE36D375FADC3B724962051A3A688FEBA7E9B13038318616AAEC84D6339A3BA2AE7588BCC8825ED7841D935A7166B302AB325120EB1D66D00B06352A08A4F76D9EEB988605D2F259FE796BF026FC1D296E5285C5BDEBF545C1D4C896B617C6470673BF379A61575D61F5B19AC864D6165CCE121B46DCB9050BC0825B912FCD45C8D7709C6960CA631D8A5BF72BA9E133A4554269EADB1E9A79C552C6450A6ED5BA43F732883C78C2CECB85269F01FCA4828FF32B3FFDECDEEC3F13B31F80DA5610200881EFE338720DE44CEAA39420121CA9598C9FF1075C939708EE8A7511092ADD6DC124431987A9C14003EB3DDD814052A0977E63680743FBFB94098B8CF3EE3D9E2F974DB00AF2F4C052ABF0C9B99A06D4833A93C2C5CF0FCA76F6E7E53C955E25826278D2E8D0BB3899D4D78930176E5F4D300B95912AEF0CE0DEA97498AD39A92FE5AF3D1E2E59E28984147BEA1A2EBF44FD09A97DB7BD4E02F2042C61A063D36BEC0CC532ED06533E36DA7517F1EBF988071EADE2D50234A3957F9BE599AC9F1F1763153AEFA60DDB71B3684FE0EECD7BD91E3A47F213BB664C97F9775F8EFBFD9BB80D876EF51B8DE61F5078331AC233A8A29C110E7709DEA190C1FC4093861AE8B77B50625B822168B8880199EB246A40A77B1CEA33899010A63E60CEF97B4593E28CF9928FB6D9E8500125A68FAEE3A7CD42D78CABA8ABE71C74016B25268B491DA82AE56B97F61BD345173886B44C3C98CCD2D9D19FB2F68F0E6395890EEF2E06E43ECE0EE9DFD255DA346F68A06E13DB24C6E405E556107F69DA72104D0D2E6F5D2E7BC042FF4E892CB012E253EFA63A229DAFEC0141A11D165A552DC34FDA617DD343374C61FAD2D287B5864CC815B697D84D6B7BD1F28C9FCDB7B55C6265267D77537A3CA70CCEDEA115C6B760779C2ABE8D8695E092C14D3343785CABC07A80FACA8A40C3D172D439049A343F88B381563E51BF5F549356ABE0842B779AB8AB20DB096BB58419AA231B390E0F6D116BFFA3B0753F590BAB0FE5A8961E154DAB6A9AF26347ED2FA291C9F5FA0C66E13BFBC50DD6DAFA5E482BF247F10924E3731711A7AD57972913D7609DAA909607726C61B80AB385B0E9E6CE97B65C2EA2194DFA91CF4C587A135DA5075CB99CB95086C44676528A807347351E8427836EE7A2DE487833263934A9E8947E748C6121A1263C6A2B69E5C88D7A93E08D63EF7965B220F31B4AF53C164509A0BAC9B753CFDA019CDCE5AFC84011165C421FA3F0E669EE9BC31B8DA235615ACAC6463DCB93A254812FDD4000DEBBEFA1C6C289904225247C0FC569920FED61CC483C57AFD959ED4FA413828FD42B513F22C8F033D79C25C4B6E804C460D61CAF53BE5B7D4BA71322CDB395B935D5E924FDD916DFAAE68DDE881E634C656951B96AEE84953ECD88AE4B0C5CA62575BC89BC9B619325C8F185335F4FBC2060264774A5FEEFC6C329FEADBA3914F879286CE86F8BE7CBB52DC2C082D2EA0548EA98AFF513299F1CB8F910D8F10A417C3D226D1F9CA4E64E2E5EE760E6372EAA02CB7D885E3741AB44697998115C2EE43CF8237A57DEAD72C0F631A78EDFCE1EEF7E562D803394819D1EA0F839723E6A450F868270748BEA8E13F1A77CBFF60979B2F53E49311B03941030B8C604DB424D385EAEB0AA588C7E8BC039896549910B46CE917AB58552575C3A7ACE33B249D5B74A8475E75C84B4FD0C56F64F8D02B79D8A8886F07008C85835AE402FD974F198DB88E3BA95D18221A05A5A7F3B44170E38F4657E4B4E56D486E2F554C9C9021093900788976EDC57141339AAB48DEA0F785FD6A80CE50D75C4A605C743B8768C07A8D3A2B22837A23A6578F1A5539AEC80995548D71B428AE611E8B7B9B202BF2B504895CEF251742D0B59708CBDAEB393853906DF2BF5CD294ED3AA2A8F0437373A18A022D24F3D513977A9985E6F174E3F9233995AFDBFE615FA04CCDB67684A5396364C558C14F066DCA5B20D187FA72E6BB36A8A6D8DFACB86C9F945E1BD4665B2AB794496AD5114DDDE3D88E91FA720ABC7119AC1BF27D4BAD1397EB29E5D90FCA8769F30C83D4FEFBE3F7AE02D8D70D67B558B1EEED4476BF54DCB1DF2DC6D4C975C447A5E07277B6A7459F2960FB7BB9E623F74365BA41F849675092E0998D82D64FEAB71776A2AAD240CFF349C06F33535B614CB2EB4CBB84C304C8A86C5983A25E05D2B4B37A95116707FBFC222A9EEF5344DD92B5B134B8A2596FC0969A6F44AB898D9130E292D16488835AA01A90CCAD8F6B4DBA1859554427693CA2CE0B7EEB99D0BD8A9C9E9A49753F42AB11C84F83A9142875629F693B3E86B1B47DC30F66573905495BFF9E79263006E9E72B038A8AA00744F4452EAA29E19F5A9EE1A5806D26E28BA52D3DA4B5F67F90F4E201285FEAE4EE78C57ECEAD7C3582CC547133261B5EBFC6D198E9B692ADAD10C8CFAB1E7A05CF20EB7F44B41B68ED11CAE3CF475654A1AE9E04843A9E6F5A9C91417AE51885D27B907446FDCEE3BA71114D4B50116C2241DDADEA6067FCDDA22EEBACE2E3CE4A13F00353C70CE7C6F4FEC0B9808C408EFAFE9556775EDA4E9969DE7840372D07658208B53E3D8AB90597FD24EDC22883F5A02E7E9191C6928110E275261D0E7C234E6E2029CCB90F97D2C88742B5BF0F709A9569DBDC981B24EE45B3674FC5DB1028FBE69AC0AD1038BED609725A7AFB007B18A0B4BBDCC491F458BB207438B3C8FC9D08BC78DD4BA89DC8399520877B03E60B53FDE15B363579AC6B6F1DD4A9AB367464FCCA63F40D0DC2B11DC169C2ECE665FEDA1D267C947D955B03DB6E8420D168A1222579A2ADBF0E34B69047C56A18360CB643602B908466AADD8C559594D8F3245B574E0D10182CE2787079F9A98B86C35BCACFDAFC79F24CF996FEFFA7A70BD081ABD5FD988FA777A21A097F0F5DEF1B8F5DB73B43B7021DC151C2EEF39E174AA04B3278B127A51DF5976D947D673F0AC04C131171A7C082709F6CBC1F2C24EFAC4DA7500AC67DD7BB2195ECF910E06FC8E457FBDA204B7DD8A1B11FA87D274471EDAC77ACD197CB8750445339757E040C924D2959FF928448D3673C03D82C3E66B258266368167E1ABEA2EE2CE79FDE896AFE4316F91EDE46CB50E7350F7E3E4CF876948FF7BDE992373E4F17E02B9FBF25090F7914558C26F23BB2BE21CFD4C7B5A2F76ED38E7B43FC6EB4F440A1110B3BF754165B202915DF6FB30B8206AE1D6C4A54EB5D4FA60F7F7BC16A6A667A14E75E3CB555E8AAE157C2C3AFA8E8421C45D8AE8694F859FC18C24E92E4B766E6408FCF633DA482CB9EDAB11BC345C039988C66BE0BFA78DEFC78B06FB8ACDF2E5647F1EAD367F7F0AE62774CF2B0F5615EFD8077325D3B9F23DE68FD960419D6E9FDCDAE9B8F8083073E2ACCDC162F65AEB80E5CDFF9130402E7CF416AC9221D37B2ACEE611EE5EF29B8764A5A9F297FE2AD7FE1CC759A83EA028E4BCE80AF8A71C9C7547F041CDB0580132813FB53C4F121DA8A4FA55BD55045D9885D1EAA42CCBD4E61DE25799CC2053E4634C638A77C3803BE942F88207E4DE4CB8F8793525FDE9AB22FC53DE5BCD2D4AD11F622BFFBD800CCEDC95EBFAD78BC89079910564122EB06DE4D7C7AFE783E8B2DC02F70CC6694310EDC6E5A81CA1B6C110ABF5A0F889BC344AAA5D74717EAF687E54E203D2F7E3C889616E7F60244DA1C9A254278B495690E170BB89EB88398621A9483E564607C8550C44BCE0F84BB6537AA247914F0BA52023B8C29BF407EEEAE8C5C04E8F4661540B2A3E2178B238A2E435A0E7C3E8A750E285B25CED9BC23DCD9E8BB5E4BF0993BC0CADCA9139AB4C72F4E94489D4A0811B65C862851EE171BCE1DFE8D96D68144A601F86BD86FE70E45778CC6963EF590B174A3B2214DBEDCEA28D6D64762729E642F3DA9D6A5CDC18742B007BB57EDF324C9BCF69EE478C9FDEB194F8E0026B4EFE873F1354E03B8A6EA3219F0AF056647A266985D5EAF38FE2F67AA85FADB1B3FAA5719BAF8DD2419F7D5ACA41F75F846891AB1710905B69238BD92BCD20614B28F9560DDA37E0F83188911F3754ACC4FAADFD96E7C70B1F7215952C7C8890DCE9B5332A23A995CBFACE56DC5A2DB2E84DBA8BFB58C90F1C07B0D4096226DF28691B8D2C2AC0FB3FDA601628704951F8E0B3E195E50BC37AFF2418323614085EAC86480BB66176103787A0B1D654B223E78B858EE59012652065C6ACD91D713545C36CDAADA63067F77375BE38827C6E9A41032C9744E33E09870BF5D6FC25906214025747C2FF960D9B3D9092103708F61EA0214D1304214BD4F1901FEF33C04745E15BA49E52B347E943CB1EB4C0B9C62BD0660EBF874F08B3A07B51F1E53233A53F63B5DFEFDB12C642AB86375B46A41E42DFB6A49DF3922B8F152037E582553F914C125DA2BBFA7E13EC26DFF272A1C4789949A37835891EEA7B903562797F9761DE3509A6BD65C7CF99FFFDD48D60FA4C08C1A48A1E9D3044A868C7A16FDA61B8B4FAB0C52E5DAA9CB8134DD46CDBA47C85AFB057DE22651F501D14260BA2A98E9B692ADADDF9271520ED36C3420BFBE32B4BAA030952DADC51E5061B08C3D2F63A3DD2C8DC505B658DA11898CC9770E94A1728E38AC2A0329D417D70C79CDA99B6C065FE1A3B0D2E47E230BEC01D4B0DF5F3E4467BA42925B08680BD95CAC4EDDCA44ADDB5CE4F52EB196D46332878FA60AEABA1C87F7B46C2666D15077426CE13E80DCF727BF99663DD32D928E144CF053DFD2B827B438E1C6559FF70BAFE230B41D7548596F4AB4F1261585C07C2F6C995FE5BC32F3281674C1AFC0B851C100A612B309F6E816F7D1896883AA61D8CA85B531FBE03B746D7EBB995F2D3641228595317E601517096F7EF31CEF14B6A48ED24D24239744511EC492C3265DA20D60DE89CD629694AA4D5959E25B2BA372C120A101168487EB3C5873D1A848FDDD572DCDDA1DACA9FB727180948C305466C94A6F41115822990AB6CDE9D31F34CD91E99D4EC200DBCCBFAC3AE511FBE06E6259E40B4AD65D62C9D63563CE0516D9E7482F7A1CB7B1F98F2133637CB3489C505A6622F93402EF3C3DC500DD0A11273D2B24DA6593C845997815B485045B4769A30ED2C49CC06DF6C2B577221D39E437B2B3D394DF92739552C1916E41546065A422AD260717B94A364D65BE6C1B8A2AB391F1C866F9CE77CA916EB9369539319411DAF4520245F5E193A004DAA8E4F19796535BA36D8BD76BB22978D207CE96026E615D5AC4F30349292913503D66661073BEF1169F94E0467500C82C0D65E55AB50F00DCFD42CD9EEDB4A8329912713831299378B8EC6A919A2BEDEE6EC265EBF4506BEEA8796EA13AE1D3321842A819061C99905AD7C08CBE81745DA3DAD6F96575125F75469CBDBFC0E75B7E06FA47C3E354E164E15F2BAB175A411746D67947AFB945D1E0E1FB041720FA8FCADF1BBFB1C0E7C3D21D02EF967CB442EF626062A240FDDDFC170A0437F807D44B154706B7A793D5B5711F7E5A10A1D6577E06E294088C160D4EA621D057C0E8E2CA21FAEFFDC60E85973706D6B9F924A79920425E730D49B4B85711293588AD422EFC7F032EBB5A78068A203BDC3209E7A3584DDD80A0FC2C1569A69EF71D638AC72626C6191DAB1921BBF5A81B22A8A41DC4900A88D6655B250AF64A7A1D3BFBC1E4250CD9D58AFB2E5E7598B06F8693036E20DE1304373F8AB957305642EEF30A44ACDB9DDEA24667CEF2CB92D49153602031D55EBD988BACC3B762965973F9C984DD3F283B7F9DCDE70585817A5C736F82D71016D85BFD5ABA04A5A0FFAEFE351CCDD2233F81ECC6439B7F4F7807FC00602D1429D49E00C987D3199712BBD765FB260FD7EBA51B72A91E662B3A0A29C03A6585EEFD4B8F36F58756F32777D8E909A39427849BB09F8200C74242A19B9C62553EC366CAB1ED90BC79E4581DDED95AF932E60BB7AEAB49D991D626476F27B306DC7E8F41674C3E02065FE22E74551B27C12A6884B33A65D2F3681B748FFAD2E98AA2A49143626AED21155003CD8822944C71D3DF644A466E2CC5D254A34AD41088F8AC334CDE43C86D1A74CB4EE9C1C07543E6B8E2F2E16FEA0867938003072EE6EBDF3AB25B46F2DB8BDE363BE340F947CFD5FF4B0C58A4023535E457EE09C9FC0672255B9711A2A1A2D3312483EE979CCDB56E2B646400378E62C9D03273E268D998857CACA25125FBBFC24CDBA01A4343742D786C29E47E88C26BBBE22515CF6214E341BA276469C6E8986CDC3015565D72598BB9B9FB2007D7596645EC72FA7D36C0F8083D05FBCF6F365A4298B1ED6BD34C39C6A968BDD1FF02E1FE16FCD0F0B8297EBCCD766994D00792DBE7B55AC2687D088952312B5E8087B6DFC31589221CF477FCC38C55B25777A9E07E267AADDF2C090CF575D4F5D4C5036E00535761027EAC74171EE62638442BD5A37C88DBAB03DF82BC09083050355466B4A6411F23A519E062D05C5EBB0491BD0C4969A51DA44BC079D852618B968CFA80DE24D3797CE46BE6FD86927C8D7716B93BF77BEF30202B9B1D7CDD33ACFD7206B4AB2937F10285820F072197DFFB9B295E1F7FA12D21C90392BB769AE936F312D3309FBD4AB7357DD14A83F5ABF59C066D3721B141E796E6FA27183BF2601914E645418877CA2C88BB7506897F9A546743AB79A112B14D8F0EF06B427A120CEC80B35EF3E7E308A24184AC9643FA3A9D5D7C2F99F6FD6F40DFEFA319362E8147576D0AE5D256BC16A1D00037967CBF2F30C31B428F4ED7B0DFF684E3769274EFE2FE849B79E568E547F55527E906CC6A6FE558FD743F9B68FB51610B055AF8F588EF99A2411D6B78DE6E81EE1E96293AB10090BCE86FC4A612D3CE5421B44C2E3C9415C29DC94955B364BAB59AEFD849FE82A1909D9DEC32264160E2424BE4368FBABE266428B0FCB97FB9AB86A10FF3367E0A2D19559ADE5571289E5093A0976A264D0D9B0085C06DBF0FB5D2DA57AF0DEC66D3BDD11F317B6AE5618F3F24492A16F3B7BDC2E8B82C07485F7D98D0D1CE838B5808CC8CC26CB919EE373C8CFADD0C9F97BF16C2825E107F2B9C94F604BE1D5E12BC0274FAFC683F31FA68F98C14BFA9A757047C62322B15FBB918AC1FD7CB0EB19D0BDE8895D051918C5EE8FA311391FF9435DA04A24EF7D120F2CAC4115D88E872BD7D0B253225B6EA713B3E8ED914F8698B3FD21311BC6DA221DEDC539E25407A2BE094615C823280625BCF1073DBBC04005EF5B5EB49D4F062A3A987D0689F143A263A354B42C27BD2563891667000BAB52E787C7BFCAE95167036EBCCB2B37015B6694DE579C8F5B8FF751B5BA2F701B7C906A880A5171D0E3C075237AFD3003BA82AB0503C6BCE9156AEEB6322BA9E8A1130919C60FAC7C508F1AAF88A7B138F2EF4ED766094AA5D3DB1C5638F9A95F98FC56E2FA1C4A5E9CE6412A41536BA2CC9975ADBD7BA62C03051771C26E159D1009E328A0F17F85969134E6C99148EA42EE9777272553C72C2B40B9331AF73C45356503737B24DD18AE1800B086C8FC5AF9C6F340D49B2538DE52DCD68730B62D293B0E84197874D696C1EE44AF1437BFAEF52383C2D8C873473E3086382FB48B33F07C68EC550104CC12F8075F4E7C0CE85518631E2033CE95B9B7D3BE4594568F252BA40F042B1D0283E6E58BF107045243BD1E4114A86B147EDCBC0AD848D2F28BB86420F6F980B211AA390483A244699DEC5C97A70307FD52FA2DC916105E6507CB3098C069C1AA5A6A05F2497A92A15F7C959E0492F0D9ADD39454B53A0B527B676614EFA10644AEAF56DF810A7FE38CC85F1B8F38204BD63C6CC93BD8B9CBB8EF7061E530A24E3052B82FF5A1197471241DB69551DADFAC8BFB6285006C39DE07FA3C31CFA0211B0B3A8183C6F83A45415B51E81A0E52B030C70E14EEA2A911EBADCE73A5377501271FAB1E4F0E9916691785C28BF8F9BBA2CDFEBE22E961AD197F211588EC85E1094EFF8087F4E3D4980DA3DE9ACB58F6EE0EC2D9DAC15ED487A018ECCEC2220798659F50DFC5DF5C255EC64B510DEA300C12B223A85299155E92AD1EAB3858E9492EF6A25A380925BFF1FE2333E1AE5264AB2C8CF6FC17DEAF65529FDF228FB6C3DAC93215ADE2151184BFE24EA20346DC974F7A670FB68801BDA232A4B4FA00BCE85286AA0CCABCF33E6C586ACBC7A84AD867EE7AC9E54BD195442AA4FE1DD7D980F9164A00FEFAAD3D423D5DCD020BAF09931F0ED8C24BC2A48253733F6446E66E045222FA9E5E82BF251E2DA036E426C6A627376A0E74F3AE8FBA1DB16BFD1084EA5304C1A59789713114B596FC1FC243DF1FBA55F2C66B148EF3BC19CC35787BCCCB852B8EEEA830E2B8163670652D2CCD0A673009639940AC52D3107B2E52A107668F8ABE8E7D8CCEA807B2059CF87FB9CCFD9A2CF5A64E541053763D60CF866941611F814884802CF3551C174B9CACA8AD3DF7CCC177651A2A5A5C1E8CC8592410281E6ABCF69CD093C134BDD0986B3EB0B8DB724C4917A4FF128F8BDEA1B0DBC30639D43EA2D76E9214ACBA32C90C36BB26A7BA47A14CB4AA085BDC1DB0E9C28A1992FB8D3E7BC4C3EA96CFCF26E6B33C4F91E0BA9E9BFBCE94906F409BC580CB333C178D32DEAE03F04A2E381A030DE795F7C54581E5DA9BB03021BAC71724534AF09C882EC76FFE4E28FC28579A0231FA3CF8A20385D962ABAEB3163E662478E85445FDF5C86E579B00A62CD4D71504F370E939ED21FAFC183F984156BD62B204E80486B5DB887F1BCC0F44F98A6E5058B70D783D56CB7F32A8F0DC079F6444DF3DC598A857C91D33E50EDB4735A90A204F1BA1FED0239D8C10A77B866EC5148368EBF8295EB1973427F67270EC778585EEEFF48068B7C0A24F2C6AEC73A3890FD2CCB819B08A1EB396CEADCF5813C64AFDA349124D690ABBCD30CBC80D5CEE56F16BFFA9418C20C569CA0884971B19DDD39BEE42515E2017FBD5A94257412B710AD39EB622D801BD10B422E8CE69B2095381DBF1504F9528BB94323D8B4F3ECF2B269E5B161960F631FF046D6B9E3EFEEDAB9998945AD993CA36C065B333E802EEDA4ADD4686E772DAC6983AAF2009F08427496AF42E0EE38F0B23055586F7EC8CB811330A2D5B26C2DDCF71E98D425F8816739E0A49771638E07020B284EFC45C893D5F4B2861BC432A1EBBB895AE729E21454CB7CC352A61C08B94C31A0C2B3B0FB6F9B34833499A290AF976041A8E07B036C327E35FB7DF9A79423581B092F122D18DC385C8FEDDA8630D05F6BA9F9B06D875DC167C96BAFA9964EC404A04CDBAE5ED544C37FCA0EC937BEAE7A39F90C02A0AB683E67BF9F0EA63DAC852E4FEB8A8A4C547CFFBA3908DDB49129E340E99745E643D723442708D3CA59B2F02CC02066311DAF5796D6B41DBBFA69A339F99C3483A81EA49EB04B83E8914A9A4A26E4911988C3B9B026ADEC18F9CC6C120E6A64B94A1675BA7D1BDE4F2C490BCAFD982F2B07CEC2709E1E66AFA8E93372DDE20256AB2F9F3BA342BB9C403BF9E2C8DD8E897CF3F23755DDA33C6917A4475363D525BF68629C5E17461BD356208191CD08193582271E3C5C3A9772ECC65848C6836021C8ED0DF3D2171984CA0B631BD8AA9658628448671006598A0D4F720303EB8D53A5D71B5BB1911E95DD3956A447DBBF9D7B6D6C4A8CF8D9F093A336842C9CFCE90D15C7A7A777EB6C6397D8B4DB1DCAEACF3AE761C613F41579130662DC531C40EAAC75ECB2ED5AFBE7286728715CE57F0B9C7794250736423AF27087CB8AE899D893A3ABD63395EE2A440BFAD7784FBD21B87F391616E67A5F66B251C1B6D77D6E9F16FA5C0BFE295CAFE8C1F251D8541539AEBA53CE6820A65342FF296F76EAA2160BBF2877F4EB5689AE6AB74B095865305F36DC3DF911A7580F07EE2BACE8345288D864115F05F256B73356D0AEFA45A11138D1DA78AAEED837087D116D5E656CACECF2D386C1EFFE16CC221CEA41311CD149E58C1C9E6A2B2831B38C12877134AF3E47E22F40BAF1A0B1FB9BE5D1A9D644F939817DEF8F28E3AEFDAE4571F906F1970C0C76DD22A96A2927123409C470CD0FBE104DFD5978CAB2F2A4DA38759999E1BB21618A138C61F7E576327E36C485FE1F86636020A93E268EC8713820CDE648747DD09A722C65104631A98A89079D3B753078D8314F95EC6322AA42ECD8569218124233595712B4CEAE0EDD27C89BB34D5CD017C6869572F9960D24BA07C8357DBDC728CE0D871AE804AB33CF91A018ACD0D28579F1C4113C4B94F7E50921E4B1B1AD2D716D0E3CABB14891A5A230E39ECFF7576A066A59E86AEF92525D3A3F41702ABD8612594E2DB9BDFFE91B14B1C3EF30BA3681BB022CC688171C9B6E441B6691A81DA715581465C8A6B959AE1A26A5CED538BA22C53A965E1053622D5185A5DFF1C3DC5E00A7EE8ED0A26A86B9377BFEE092E4F39DEC3D1D0D470AA2D1D5BD2A3965B5054D66D9853AFF1F88CDAB729D6405BE3604E3AE838F4F19DBF21C9532D2287F17E621512AA41F913B228B69FD7BDE569DCF6DCB897F9A7DDA4E0F186B4332FA4EBBCADBDA8B8132AB0C15AF517601D022BD30DA9F0B001EE447D51578D7498651CFFCF9AF23567EEC6F515B5C116D401439F8353555E34E389F2C1C3D8560D1B1D92386B4209E71C32934225B772B8CF5B6731C1C339E2090835AF8D40A3989A8228DE1943F66E1C131F7D04D6EBE68689B0C1FCEC2CB5180155D5B5D29DA6CBD4C20B98C46B1C1EA87B7F56B4BB2BA62A8A4E870CC7531F4B3B89F0BA20A57617A277598F80546D3DC1C8D16051EA5A8EC6C1D996C3BA2D687CBD0CDC404EF0E33647C5FD96A6701A992DF26ED3CD2C66A21D109507B3568262E6FF65D1119CBD8F399F5921F82B3635DCCD1380326DB71C0D70F1A72F3FA42DD757CE24C4AAA12FD2700E8EABD1B9990484B12FDB43A27DD5968C074888FFA578730C88129AFF4A06EE6BC0753FDDA4A60F987E0943CDBF1DDE833A656A59B808B31EE1BD1FF4703858993FF1DDFEA3586B275AE7D86843AFB523EBFD52769CF3B8D8CFF61B13E391459D793BD144AD92C5AB536F0D87C4B5552E84083ADB2BD5C21F7764912C00F859DBDA2E345F5860A716AF1E01BB68A7B019D9670D865744DB227A10DB763214C9FC4F09625BA488D1660671FA8CD950DA6E5FB17C72D4C0E488CEA1207557800501D65E08157A17D52C8ADDE24C265988359C3D44D3A6167AE6F98D22DADBD354B06460D6B759094BA843F14CEDC6650D34B8B1723567E9179A17950E265F3082DE217846FBDF03E318F2F2E954EB9F73A734968043C7780C9AB9DD6FBDA55B3636C9A2559A9DF3005E24535FDD7D8A5C333EA713DCF11D57BF9F0BE774381CC2D4B45801778C83A227BB98D3CB56A4E2C0EE511AFE4E78A071E7E4AFDEF548A348446CAA45BF10077D83AD7F194E2D14C3BFC86AA4F548F4286719F7DBF22C383AD66501EC7A80DD9FB42B88058F6891C4F9F64F5A989D11A15C12FC0FE5E4049840A152985DAAE882F9FE0DDCA2288BAF29FD73F14A933E6C7BD5E20DD42C89335277E8ED2C5383F3F999B306F480F37F9FC0742F94A871F97809961783FF192523EB775F9B7E17353D4A13E88F9B6C39CEF6F3808AC7D37C570AEB7D2F6068B2FE8C8690B6EA19FE70FDCCE38F4A2ACAE12B662950F9D2C449454984BDDB36A4C1ABF0D5AAA3E2A956914D41103BF60CDCFD226AF4D3FA4C4A73B4740728ED1661A8D1BC26564A1D719B42ED7B490F0027C9DB611119055A34D780FE991B151A56F7E071FB7B848A4B820781486B79FFBEBFB15928AE68A78A4157C2DC93726A439C7AEDEC6978B7704DEF9AC109441FE0AB8E74A87C9B39D8DA374D1D69C4777BD38218A03D93EA050E5D8F7FF928422902877B877148BA820B933063CE583E54380D47E5784AD460786BA82DFD68496B9358FEC16E3E1E091B744B05962CFC4BAFDA9C43570774B3BCE04B967BD1D5AE0182C81833DCE86F8CB39A82D5AFB617AFDDA4C994F3D051F35B6B76182ECAB3E6142EA8E9DA46125E6A89D33972B9B2EA8193004419F2E6E19F72A53DC1E70736C32A171CD69CD4F66124B0A53E63A4A81A0D8EC04389272E1A5A3C0DF086A601C66A0D4C00B81909B7CD4EE00993DE5CDDA65F0890FB5BB3503A07376BCE7BDE9F05AAF60B977FCB078D26E423B1ECFD40CDA9E002AE9A024253335C685811F9D9CB27B9B10517E8952A8FA0FEBC8F3624EE69D113C7949D74E27ED3DADCF8C095B36C4A3034DAAEF316D60D8697AA64D8D1CBBDF7893A8F26EA7138F0C7C3DA18884A607CE7D5C75FCDE532A19364D66E34B65BB82829DBB964B22182A3AFFBB2251DACEA499877C39306FBBB5DAB13AAFC192B690A94C1E8088BE8F58EDC78F582CFDACC4B47DAF44169C207DCFC7287460E4BBC4ED521F70123EB8B68F19EE376990913F983BC8E9563148F26CA737FF3DBEFFFB5AF1C6CC87451C104FBD9466FB0E8B24408D770437CDE3A88530821EA2B3DF7E3EBF74A7A0D80681A59FD9CFB0E147C4AABD60013E7743BA687E3A1AF9759EF5A73EBFBE2D4F0115BEEB2037980BB9B3CD9ADB569DA5F4BC5988E1922A2E4033109E3EBBF5BE066B2B588D1C1CC2D3067FA7516925A5EF334AD8760D03B5708B685B1821E62C5F7F27A9DBE41CE8F324DCECF02F2366B4978E342351F4BCDB6C4D648FFE2D2F067DDAFF57895917F7C11EB7A7E37989DC35AFE0C4CC48B665CE8FA254454F6328E32F95B858E5C0360ED7935D0EA25240892CBB09BDBDF094A150B5E5BDBBAF3C5C4ADC3B5ADA71CFC1D8AE27D408B8E40B4DD78DF51BD5AC914CAA3B96627A8C640A18B85AB677200B8CBBA1A31C3D7DBBEA9F1403565B44D98DDA4C27C55D2AE76B0BD40294B643E086370115143C87A45A35DE4B234DFC85F44924548C7AC201C61CDEFC115E2C8D32665F86AD5A8F3E9DC82169B544537A9564204E9ED14B3BBE96F3F673EBA9F3466CA481D10FEA84B2B769A0DCDC750A9FB390F47FD9AAE7E9FFA59EE2A5E5738D11D4D1514BE554D93FA64C50D28A84DE9C9480059B4C396826FC8837228632753ABDC1A553238ECD27B6CC20522CC9A2AB31A1012E45FA1F3FCBA2624C45BE26A5C58F2AFF976DD5143F1E17C6140FAE5E40B03156967390C0779996E3AB2305772C14DB06B7641FB5ADEECDB56B9F167FCC353B6715DB5DFD0C5C704DAFCCBE9A0781601EF4BD880C05DE0764318F3EC9DEF33A696B15732F46D87DF85942116BF280BABE20DBF42A24C0615777EEBD162AAF1ABF601BFCA7C4D17EBC832DCE84FCDEB78C6F92C2BA75CA6D91AD13CA4EAD7ABF8A21156182B701CFFB89519D5D5FF361A5A8B483FE99946E282C56410F366F387140597C9427FBA10A6D86FC7515655144748D2E70177457098479C7A4850D55C6D2C4780420ED7C962A5E8878619022C5485DDE4E3A1228BD843E0B788292BE1F9AB3E2596E24E6E86141018A1DBA4E2B21D4742FC7A41F40D1180B1D553E9B16B702641EF8AF87759C8100CB80AC794E4EF3B9FDFB6E7C006EFEA9EB4FC2836F593224A3AA711AF9CE6D8940A5B403662235EB5347492871A295FF24B982D1769A8C750F27C9304CBC3DCC1A33EC0C6ECD9BA0F25CBB232E345DF4EA13ECDAF54A7E550A71CF164263727F4D674BEE5029E0C2F5222DE0649B1C21BFF9F4DD87E10DED1AFD4C7BD171A95DE6FF812C8815B8779385936F3FB3E86B1FCCDD1D8687E173CEB2A45A55248C683305079DD79D130C4A158CE68DCD43EB0BC107CC88063BEFF9525219C7DF1C10F4B42246A8B986D3EA5F50E79704AF3C202C74D68D3CC25F76D5F217AB1D8512564DB11B6B4CB8A8C0B64DF99579C019D88C328990387A55E8E173A3E68BC7CC703A8115D49F93DD9584294398E25F2068964439F50CB6E993DD8A85E3F26066E47C7FB8FE4347C4DFA461EE6A733BA769754C21A09ACE247966157FFB24B838F63C7B155E9A4D2448C642804BCBB36886B5963F679E12470B20E65213216A4EA8C7EE0EE8760B7EB51C0242CDDE7F993AB3EE3F8491D7D7F1665894C38DC546DA7CF23CE10921BA94C6C891F86FCF2AE4DE594BBBDF127B4D45E29FA87AB47601FC8FA1E8D4C808ACABC4456F8A96675D52F052C71FD1FD3664AD5C2B357CB176E9D6028BAB11A0238CE5503CF511D7BABD4CBF3BBB18A0245E3A73EDDF545CDAB52B84A1727007DD8478FBFF5C4C3AABEA79A5CA721E471240D222D9432E36B129F79DFCF762C57FCFC2F1C244846C695976AEA75517A13457C2D634E1ACA7C9DF5CC15E921901B248A69445E9E7BC4E49CD8D75B25FCD4C33839FD153BBC9D144F11B1536A93137301251E68A13F77EA4526EF1B9E9F7EEA0407697B688A3D8514EB3EF7AE8DDD42231159617C66A52B5A005DF02F7E3F330B51A863D8189BEA556DCF9877F65037A583EA2945FE9D755B949A173463F4D95B8F5C01A806BFAD73CBB56809D9DB49DF5CF330151D0783D3CD539B8A325FA09B0C64455D888CCAB5D38D4C842ACF0CCEE65A6D1663C0B079E3334DC7B683C8D857E38D9798635DA1F53596A14074D07492237234F45BE408F6C9D7CECD7CF6485B96E4A2D3F33EB450118AA48B64FAA35B7CD15385F330CACEB0D11D9A9BAACB3DF7DD7AE753165226C5F8AFA8DD0B743A473B92F4AC121D4A731F7BE4C33494526FEC4EA7AEBE2065596DA6055A2C4723F15F8078FC2C4C4554320D8EB12F0283E15C6756DD93755982F497C96C9C5CCB893D30005DCDED6D738C876284C590E3B690FD8971B2707812D70BFCDB3797CF855BD3C87CF79BAF9E79621F11BF7BD6EA307A87E6DA19D80E3A3723585D6920B45F27599147322890D4F7B2310557D89D7179FA9DCA6C0E5BB1BB8984B7E493004E4E77B2082B9F5773B52E7600B042A2D5CEA1175AAF1DA26CDE5CDD3C7B5B559A7A5EF1811B6147C5933BE9E9D46CE2AAEBBED6AAF56C250DFE4756A1B859C4C99A7BA954B528246B013B6394EC13009F0BE7D3717E71D1F4978ECD24B21D1DF31DC51369315CDD25DBDCBFDB55BAC9DAD1785DDD871CA17635E664D7DE6D692ECBCB9377E57398F1EA877FF1762D825143FE41D427259FF95442EBD1C9716D97610C730BAC81655D6A2347DDFFF90C0BDF41481D8BA7C4A6DDA80D059F1ADE31E20351A5D3F8BF750490C6F31F24E572B1341CFEF7295856860D1751F9219F6A01D276491DAF7F415511C14C1D483BF948FFD28352F28A37AFDA0C6DE992510EB86786E722A98E1C346C756FB919B6B3D7E3908E8E72114518BAAB581877D4DFF85E8EB6393B109D8787E24EA982DAA89F4B878584F1C2E378468D0C4D2D02B6F3931124C5BE7099AF95CF50AD88D6E95E2DA86E8C4973E468680C424AAB7414E19C79C1DEEC4422A8F168F17FE7CE8C2327A2FDB6A319C9AC13A916503A280F878EC99237DB5731FBA5FF31BFA2402C6B5752E9B8933222DA239C92E607BE8E8532708DEAE31433D4C84C9FDE694A31509508058BB4EAFAECD504E88F1FAD26180775B314BA515428DE5ECF4783614216F615A0AA88CD44C1C65021680BE404EBB588682CD509AA78F0BAED9A1BE1F74284B4191ADEAC39AE79634D17F472F6C4C1E57CA32C8DD0FF469EE6994BEE8337DBF5104D1222C1A1A03F374D2EA2718D667AC2C11EB76BE04C942589B0E2852A522F68B652A2AB22233D67B9D0202F8FF0A5729CB5F1F85E53F37743B2946EA5D167B5A276AA2EC47D9CD5888C7983913446543CBF683AF194A3FF512F2057AA101EE388D9CD47B90D9ABDDF25EE1936076ED65D04707B11F5B6600FA2ADA3A680B70CFBB372678F1C7F8779587439A4495B836D567512CA533E732F35F5D1313847F9416C0D17B8FD6F9CF08AB635D4A9BAD00A64ABA93A6C904B4392E0D90DAB88B16CC9656FD3E7DED3E48005E62C67F84E66387D57750677BB5F4F8E9ECB759DD2782B8408D2121AA9BB2597D31B9D22D074BC6BA1F292C2C80FDD8A08E161F077FAAC3049BCB4BD51547850712687A3DE0A67906BE5C3D74700315711DC13E5CA2E2C82A017A78FC175B3169A478C92CCD023E3B7992510A010B3A8C115D928108FC8344CBF8ABB4989300648A992EC9AC9F41A0CDA27789459D31AA8378782E31944863AE1C2F6B391E0953A6D935E85BECFA16019F1BED894EB10F0A79A3C79451DA3D9B9501606CB8B41C931A2B2F94A174D19AB5E486B151BA954613EEB9590554CDB0D5A0959F3397900AA0B9E6E7473F6D63EA03F8DD4CAA76D805704DB3E3628CCDF8515683381055404EBD650C729A86583AA3CA85FAEA8DA01DA987594AE67FD32768D7773A9110F7867F96F5D42BCF3300FA91A74F9A87704BE42F0577D273F4E8D7BF9587B60C0EF4120282CDCDA4FDFD81D79CA888181F97FC7DDF29754CB31CA23756EF5F706CA2DB950DE912B903F34B025B0C8FE2260F973BB848763617957CA16563D6428859D5DB895AF201438576D768CE9112F6295FF4014A4B261DB1B1D6755871528B354B347DF537CC895367B39EAA8DB66D6A4F1F9AEF5F37B66C866D48960092519C956091F00AE6BB6B3DDD7B99D6B1571244B57EA6D7AD3F098F387CC628E1103B39689CFE97EBF7F8B717097B0C5044B7469542A56F5E5A820CEE35621805DF2F8AA265755FDDF210952BCA3E4B19CFE1BEAB637041D53091149A68E640291CA0410974D37597706090DA43DD84F29830B65E426EB5F724679A550EE6DA56AD3CCAD311763EC1C24793B47DFA1B7731CAEBF5659BD3E2E6A649602EB50818DD91C9F72C32A4359FD6EE38A486E3EA8EB27ADDA400A870355BED9A869C4F1B9A7CDE01E82E82483162E033DC60063EE101E6266494CBEABDBECCAF302427D061A21079AF4097A5A04F4BA072AD6E9F9136571852B135E54F0D61DC64EDF5F2A661E06709FD684C1937799726491E8B27CB98BBDB61B7CB82F02CE00F299E6B7B1D25E29589F606AB7A6995B06F071EF5FF3238056ACE512D6FDA3CE22F4383BA4E3C0168740B2BE4804B91B6FD0FBF364A74316D8995FD7ED6026BDE40C7C32E0D7225D7C886A6E5A1D58EFCA59BF7F01BAA2C577E0E32A4D6898633342F1B4B43E7A3C099731E23DF0D4EB71013F062BA62BBC53FCBD9A7682F873138AF681EE29941D67BF7FEB8FC2B472EE5EBD448815BC11C760797379ED25CF992290CF14E2288965C72171C0369A9B6E211274D07E608A987FE13971546EEA22A657087CBD5972E3AF52E51853C5385492843577003FC9467380CF870F65CCC1926F04434EC44E45F60E48B4C2E9A0CE50926C2CF8DBC0D6D5F787BC29BF63FEF06C95BBB1348C3AD2A322E14C7DAB45461C400B93C2D1DA2D3283A8D10311E26C220326AAAA0FC271D9034EB95FA8FB40D676AC16C3EC884BFA254D13E6969660399CFEAC8488110F52497578E833E2E495A65869856A15DCC1EAC04C388C6973EF9C9B68090EA84940B326A24D6F600458179C66C42DCC9239CDBF4133E231118193D61CCB45294EFCE6C602D622DE08957A7A27131360BD80214447A449B4809827941C891CBF640C3749C6E2A90B5B741564801E43B494C00E9596BD2DC1B57134951FA777EA8B0D51A42F62545E2A462A6A6281A9DE9FAF1165229779B8831BF0AFF68EECA7B53508944B76281167EACB0B906E3D83D0F04C2665FA770A58B037E3C6AA29079D4C1F2248E875EDC9E00F6E215BAB1859DFC5E74B77E998DE33E34293EC379B27B8E57A39B3CDAABFA4ED2CD392290DF53F382012365DA937F1D25371AF12BD20E46D9AFBA1513FE336DC430C93507615A805AB224E4910EC70EB62668781C6159EC4A5EC215754EF4C6DD77A07622B4591B9D81133FEF79930AEEEE27BEDA38C0EA480577F7FE5BBDDE3BB5EDB4EF4806F53872F0E2810760346DBB51F6DC7C6ECC054F5B0EE6A17CFDC2BA49437866590F7C23E0449B3B8054AFFC7E3DC7C4F71A0F7797BF7D79F4078F2382B2B2BAC2F61C1D027473D70E4CF3577BB7007EB1831C25E4567EC272273EB3CFB20D792123016A77DC6C01CBBB571C60B3021E702B60494933221A3A73038E36C69C57067705FCB2C14EB925F7BDF124BC32B134406A9962DC4447183559FCE32AA8F88BB3AB08257367507412941D5FB8D2261EEC57558B025E70E7E12969D94329813F5B8C94B7B95942FEE8F9F584F5FFB8C23BFB94FD816B8FB8B3495BC4D5F8D2501E230BC0E992BCB94313E7A12891606C32DD7CD1587307B35951CE75B20025EBA02E999C03338B037AE283617F66B60D3E421EA548EF8A727853AAC434D9FB127CC57C3430F22CC5B05E4B9C983FFAC7116626B84950E2A904F13EA725A5CFE841C644C37B884D7FC2229389AC50AB852AAE3A61687CDD3305BFE614738B2F48B0435BFD9280B6F7A8DBD10D431B033EAB04369A66DFF27E364FA82792D8A45FCC32FFD0236D0FCD6F7EFCA578631607A24B694E338BF236C1C5AFF5A6E19E10DA342BA61EF675A679C8AD255A0973FE6168C52032BF8E311B9CD2C8FC38FA2E334C3195F937048658D33A76781DF485C10F59E66A865436F0C5A354922DF3849565461690D4336C6269A92AB6DC5244DA7A0FFAA5ED57CE89643850811BB5AA5FF3072BCDEADA616F561A4A072730BC9D0369F0BF9CDB439E216DC09E2D40A6C6E24B6DEDBBE9881AD046A3E2ECA4E718FC180ED9CB39CAE02E5CEAE2EA0E02AF0699BA772122B6AEDA1CAB8B077639CFB1FD769504C4F735BD535A24E62E0AAD912C2DB2146C0DBB7A4EB19F1C50D8CDAE6616D72313E5621452F6AEC4536FC89B6AC7F582F6F6A59F507AE09CE48E1CA4E47F1F66977C6B76DCA2ACB36610ABF4E3C564290D12D402B942B2C4DDFCADA5B0C83C3183ADDCBDB0EB9CDD96E122547455211668AB448600BDCC02C0B34E811A359C165FD75770CB14845ACBF16A759742686C0AC9C89AA07FEFD11F953D8800E9E8F05B5F15F45067A3B732AEA1768F8AB805EDCC28F9249C26324189CA1E91F07B67F14406825461F29C863E62EB7E9A2EF6128E9E978F75DD970EE275BA57CC5A6298BAC2BCB0EE8EE0162957E7C4041A5D249A32002675E32D5C18D6C1DFE77DF9713C0CF676D800A9962A94FF066C0CB4AF5FD3E0CEEC75EFB788512EA0D585AC3F5DF5D94BCD516B760B936F1AB4772B1B06A24FE8C8B46E142A01CBA1CC8ED2F228612D57D9AF59D38F63F0CBC3D36F6F1B01360F7998AE923C4D1D05F57D6A77404220F5764CA9A9C90492B5B9AF670339AF85B4F2B56BA39422C32709081920413019708A7EB2DC36CC533E7EDA6B9C4B9368BF3C485C0BEACAD96350806C4F2C622687DF62AF0CE57075BA1CFB314A07E0BF7A879046DA090BB9593E2715260B48784F00B0B72C1B59BF730F2CC206C20A0A426D4F138C7A16F1EED8077D87D45B6073AA24B23A6D263BB6B4ADBFE2048847F529820366E47674D720004014E19C1762489F38C6514F5534E6D77CE003861F82C47B7D084262622B7520A727D159E0BC756F4B9186EF401246C738B2CB351A33E75BC29360305102CC0953B3F97838A3C171D2C38467200EA4E48D60A646CEA5F756B621B091EA582DCBBA07744380C643BCCF50C446CF18093B6FE0DBE114D997B6FF8FA0A4D2E7E08A76647513D0B7031A12728D0C8CC075DC829D1B2F6052FFEE25D7B267F751834A6C43308B1EC81DA1B9A99C6FC5B6970ACB905BD3FC0980329A16835E5E68B9DB9F1D8B1775354A6053FC1AA1367B7A8E15E2A23BD6ABBA628B2B35BE6EA1645CD8F9104191E17C9D118BDC40741C12DF3B0134366C50B82983A325D32D2E4BECEF6095693C78ED571B4368D64F1576D76AF6FC35DD2B48AC676DB5108872461CB3FB4BF13CA031D8CE008D2892DF8F24111EDFAA0BB4505D0AA95222D358B3A74B823C9FE881E4C77A39C7F7AFFEB1D50A73395D1F026ACC03475C368AD97F94CE65B623EA1A6F4EF151E17D4FA8378E74D40B342EF240FE60451548701057CCAE07EEA4ECE88A04CD170F16E9CF529990E0CCB595038AA6344E2B608EA02DF0D1FD0B8A8E5AB332E365EAFE8C8B8FB107121D575CA5AFE5BC8531193A531D9A5374735E1B2227395E9476B56C63822BDE8BFCBF5343A33D2CC0B702B175DCD0CCAD435575435E1492B7CD88E65C99C2580E852A323787DDCFFA2C89C3E62F81D30702B8DCAB19F4CC442DCA28F62C8638666E97D21BA4948E2F50A4B7A8B472CDAC37CD7D0DC94EF7621EA8FA85424EEB7E2E215112E758DCF55B152E88AEF55D9674CA706CFE5CD0697AF9BDEB3E01BC9A9E97194D965D83A73AD54E579E136031349E86A6927F5B55256D382DC8BBAB5C4DF96512C9670A3E73C59A25C250C84A0E63B2EA34C84E1910E37547A9FD26D8657829A7B8CEABCC3F0643FCFE3B494FEEF0C968AF4C1363808B2192BD2326E27E7EF732DDCA5A8A2884D04E3C4E3164212588C2A9054EAE32E5DB01546EFE04528CC6ADF923BACD537B01668C45FFA862024411EA2AC704065F9C11BA819C1AC9555820F9391FA9A351966907A8A49C648BCB47717387B132C71953C8994098E0A6BF7FA396177D8EEB5962264B247D7A2B4C03BCE9ECACDADB7340A65E30DF171E02D4A75A62A0BF22DCBD5A3AB67A9A624C0DF0C9E92740EB982DA6A6DC767BFDCC950FD96D9181971EDB0528C27A56C9E4636037A68B7CE8354B1BDAB27DAB5DEEB79326773A193E6475F137CBB60BF260AA2BE6BA7391709FE5FDAEA6FE876A60453E950907F82687961B0A3B675B5CD83A161B390FA85C7DDCB2C846867022714B5F4C53A15C27875D8E19DF43D7B6286180F1145087425BFB7F549E8E60A3A620EA9C88531A3A80B514E6E85DE4A746B2A369F9AE26CF0278132E06A1128DE571F9EAE8AF51E386C8D9E7E17C22560BC231D8B89790C0DF4944AF881149710B2DEDD562142B7BAAE031E2A7F35038869FE2D58BA0ED5A4ADB592ED49311FD812C5CF35DCD622ADE9012E410E60EFC02E54E398CD86E20DEC7E84349EACDE8BE343A5C43CCBEE9C52B0C45774AFAA47772B4E8C1D9C54F85CF3A05CA1F6ADD17BEB428554D119D71FABBE9FBE108116FBEF1376A97D73060FE52679E5F6DA14EC3E3AAF30F3C68C1611B038D9BB5511523BD9BF091401EC3E480831904E4283DEBF63F7681D5B25870DF6ADB6AD326A6D60DB8171A1AB661ECF62096886726B4499B1C6A92CB9450359E26F3BD77DB86CAEBCB21A037E9678A55BCFCBDBB59CDF6651243B1EA1587DD4D0ED7BEF8BF20E4F4C01AA1C4EECF6FDEF284C869797A1354CA6B165E8868273F591158EA71B9A94FA7DEEA37C7692207CAA93240250433A3D69F4257A23606AC6523480D75996658E209090389DDABB2442F3ED6DC3735EEF692315F862BBFB73747894917C5AD6D737C3EE6A7711AF85ABD8AE10458E1852B243A9DC444F76BE403065792F8FCEAA8151F81679521A72A09A86EC88EBC3679AEF135051B9386A07BEEFAF5B705DCDAD8A1926C7A27B6792A5EEAC9793C3EE3E2755DD9415B9618830977F7AB477C07873E8C26D66A8B1914C197A039B1B2A6A86DB4CB9B14A46B770FCBF1B7097A8C2B0AD6FC2F8040B3C289F9B37A6C346A0C598F55F7C5F4D3C74B6FB3BE516FB8E933BC37EC3B2E0132DAADD972B54ED612B8597BF9527934B663B81B5C84E0D76C1AA9119E0A9119165615F3CE5A7214D6BBB5AFC276C31ACD2EB64586D28083CFCC75D22CD897A427E8241EE2252785AA09317426DD518B7C956D2A8CC3E0D894B4FD8BA50219DC55BF8103F4C394753D0E1FB3DFE2459DE3F182DB779B56249557F30C6C71E7BE088E4BFE578F25E7270F00339ED741F78B6FA17A97DAB5EDE5305D2CFC95BB3C46902C0C653C329B2C1E64BB92BFCDF2CC91BEB9AD0315AFD126FF8A9FA38FB2C7C25290F781D3AC0000C9A9DAF2E7ED0EE68DCCD43BEDB4459184FBE3C9100B9FF94D14CD79C6467A11695DCC499E1959AED012A1C590C7B961EB03FC9F89E7EBB01D64E7490D43E6C1FF5694DB31938736C7CFFF537284AA70144D6326BFDB46A81142458015AE5C8E87962246CB7964A588CA6047D8AF0EBC6FAE4CA5A8862D7637E0A44CE1ABF03F733349A3A4BE6F7AD985150355A13CA12004F847A9AF2095123B2E5BFD5B38BDB118B7D73C4A5F579945142B47F9D92D7B8E8D0B6FD69F7E8D42BF5E8AD7F10884082EC4C4B501624E55C1890858629183CB399B95CEB32F6FF0C9DC7B395E7C04A7E41277715D9C0F93693E8198CAACCCA8EF0EEA69ECAD7B4F2C221B313B339682090A8663BF1278554F0EC1E9AD3F7FF039B1B30CDEFDD8FB155886FB3682F38A69B07BD571580E0932BA28836C8FAA7179F8E8387E38AFBFEA4D7AF567A120724C0DCECA305DB5CC7D43AEDA785E780B0CDF0550DB4DF7987B9D1299F46ABBE6C111A171E2A5967FCBB6921D4EB3C5CC4BE31777A0C94E157C3C0581C3CC5B799F9FE269A90E6BD40914F29522779BFA7D9CF4A62E7F9AD6738FA0D1F4A327950014D8B399B557BAEEF61854F3ED9930EFB7D0891ABF5192445BDB7519E9453E4CF7591131D4F235523786AB515317F927EA41F3BBFC37BC5BC1D52EAAEE0FBFAA04191FB8B2ADFF7913A23A445FA321438771F72D9B98459E45E218DD6183533911956743BBD0F756C21366487642D369ECA17B64B93AD1D9E940C06B6381F3C2D457F5D4607D6FE2823737FE615132CAAC347B28F32C5FE538A9955EABB1EF90A11896A3E21DC74D44202CA45824B293E2B6E31AE0FD6EB71FF491F95E074A532EDA3100016C7945B13DC6DDD7F1E4135D1F4E5122D028340CFE6347D85D4C6A4DA58B810A661ADBC4721A8F2DC97A8E33D81AA5DF44F5E86BF824FC76A70704D48607700AFE003883844A192C0F768DB4662F1C1764B774C3C62F2EC4FC428B005C44FF8D058B874F189D1C82331833DF94976425EE307E42CDE0C75DC2A2713201E33387795545814BCA136C0B9AE02AAC547E5D25B5D581FE5862CFB4742CE4C01124D7DED634F0B17568B26733B52A3A86434A121EAEB5521CBE4763DBCB00B83954B340FC1FE5CD1D5D445A148E8279EB63C1BB7D8A2689D7A39444CD18F987D3B09419440FEBC052478E53EDE10CFA5373D9C3BCCFB24B4858E74539133239BD77159E607B6B6F64897E8B9F0877F050062CBDE26996CC812A31B56C4EAE45768F71BFC5AB806AD356BD246507B38E78CC6C59F50714C379F71E25E1B53C5F54578C6C6B103A44E7A65241A8F6366EF5A4A85A7F12983922E91E564EF39EBCEB5904EF6D62C128E0E0C68FA89B4252B846C1A7826D58EAF1C62AE11233042399B57783A511944D5FE757697F2B152BF6B55C161E4B587FC8A49A514F5EB1325EE7A3332C7ED3FD8D834B0DAD5F3EA273808B0DA5EBBA6BD122921637185FAD1103201087DE2BD1E627FC9ABA23395386E8AB20B207982A3E4ED40E9D4DDD6FE82B9BD382AB162C2188EF6FAC6A3EA8949B157D3D8954654D227F3FC19A1886073DB7587AD353D729A5E26C8AAD157F1868BEA17E12DD28311E17D90690F0DDBECA92A3F790041E208152AA8926EB41C13776C2870F71F3B1BE55DC0E3CB42C2CA84512700C810BDFB621557E922488BB02102DE5C6B53EAECD6A663187BCBC95D961C464D07C119D9C1B560ED3DAC603959BD6F7955F6FB0F0D6CDEFD5419A51AC44528B15751FB58F84671414B21D34B5DA84479DC709F7DC003365DA98C3FBC750CD8B37F51564EF2EE82966FE054AB0D826A1EE4BCC2711D7B260588F5950F63F3C8564D769537D9499A3BCAD259C9CA6C0BF9EDBD695202C28E5F0C55EE52F6724B9909C1D9180E3F36F1EF26D4158214400F5D7475BAA56F03C4F5494FC2D4F84C8A071B61934CA8DF56E01158DBEBB77DEF3330FB4906638C3C4547C11F9DA6B55F1E4455142AAE28DB686E126AD809BA11B84EC416C47936BA8921D30EB995D073253E5FA7E28B4C69A0030C9B44ADFD0976874FA19BB7796B47079589AAC6E1D071AA2F59BA97B4495F744A772B3979FA569AC0C24906BACB767FD9FF988B67BC35A46830EB59246FC80C2E6F01F9C0F035F5A6E0CCA3CFF448CAF3E5CDA39486DCCDA67FCB0689386D0B261D1FE8EE524F25B1FEE05004F92BBA7D55F421ED0046B772BD32CB210533F56F8E25B114F0AF70014C8BE7CE8AC9494DFD23360AC744E043F2DA8C78931B0321564C843D6D52B961515790BFD5D87AB71995E3FCF0F6467B7C3C78A763B60B76CDF67221B4E638D7A5F6064D3148972452151B0C806EE13AED6EA4693091AB33605FFF542F5E97E4F8B2FA16F030146B7940FEF6A1D735D938C5ECFB700B9FC4890AC3142130967D39D9B6CCAA166826FFA1CCBBDB51E0E215CA33169CB5207559C956E8FF8BAA550096323E3BCB7553F98E3B30C5A6F0392930CD0D43238F732C76E847BF6378D1F34D8CDFCABEB83B64007432C9DE1DC909C4464523E662509D1C94C52921656899FFEA4AE32C0999DB95DB6A16E19794576A6291B5F67A40302C034109F7B5CAF4732DFF54BD4260DC146DC476A0F8BBCD259D4DB82143765511E540F6B991535928CD85505359314EAA239979CEA181463528A303C41D81EDA389EB8F04DDC423DB87CB7E2D9996594196D718C91D47955A479FFC9C8A3305EC535F083678D5CB7B0A86531CF3FAB559441D771FCB1FDA504419620773BB26CE8872CF518C2EBDF9495BA3023632772B63D98E2712A89FB3C2FFF8ED64B74CF4290D7ED50AB13025AAE7C512CF9CF3A5BDB8F58982069E7F854C752ABB8EABB1C17757A0F45E935A61295E2FF9F9EBD543E8642B7DFD106C3E9A7373A5B12CAC9CACED2936DDD4AFA4C27A14AFEE72095C76A5275529C12E42E2299A3075377FC0789CE1999AF894EA3698926BFBCF867515AF9F374F1C5FE7C2F5BB463328505ACA92A9BD231657186C018E821BA83F45AF5F25E9AB5C31FF8DD666070E8B61F97D777BC4C3F6C7F22DF8CF19901BEEBEA547AF635F2B8BEB4BD40983DD8A2FA628AB8245F11DEF7A0A242019E7188DFBDD36EBFA5893937A2C56B498ED84DB2B96EB4CB762FCE22DDEE35D5323DAEB4F8E7FBB526027775F3587AFC73EB4E97C550D3E1501F61C1A336A160A28F251E32D1ACB6F324DC483F5C6C383A50BA02A54D2F2C88D75A207F7E5E23EEA95A09AF7E699A8C5733040F063460BC2D3DFE83EAA3C5BC03115D1F6297BBEB8B922718704A83D065317B1F41579600F8DA257DCF46F85AD5C8EB121E0F941F72BC965BBCAEE91BE781FBFBF34849DE9837DD2CF952059DA210F3429D2D6CC2A7AC2C4B35A29AC4297E5A0D076CECDA048B244E056F51266DCF60AA2A6249A8849A3F266414DC400717649E686B424553D0C6B4C5955AA1033166528D0E97B89D94A646D4C3ED21C0B4C6A66F6CBB36CF79E68EE7E9DA9A3914C8107E358102DF5FBCA560D65C5818AC9A5A7A8C96648614CE1CF0677F57DC82E643B20F89CB6E80693832D602505B93129E4783445F832C94F21E59C792042EAC5E600240DA51C9A1961C94A1D3E5C943B7AADD2EE9570247DDF04FE4E40716F850EF652B6E486A8FC2BCAB012E1A717EA44C2397BD6B85B089BB0195401757E48D8E150A1C934D02E40ABD46A7C03E36D34D6CE021DEB1EBE80AA12BCF1F0CD1F5811637ABD2BF696BA9E191396158C8CBDC68E69A58C7FA39700CE038322C0282FD9A20854C3394F626AC5C48ADB75B30C0E26F60D5F31D635A7C783E806EBFCD9FF04D94648393E9CF7BA67214B8F1B0E888C7F43F235D73FBE4AA06772EC1CFF33817BDC7E92F73460103E2A768F27B270ACBA71DCA07BA7C522396F3222ECFA6142CA096A977A6070AF50097857323CC93C384F89075F7E35B915EEBDB8E2DAEE157A3CD790E57AE0C5E651B1303CB81AC4CD0B32689D6B74E2EE302BAF25210397B2980E4D862FA72961D68B353695546894AD77E44C15A992B36566C93C2B7D9B3CC1BF0350D7E7CFD2B887816507F3DEDFD897972D341C2EB1962F1E2C0214AD4D4849C456304CD6E88847FD8E0DA9C72361165888381EE74B07AE10A1BE7FC234C1B0E906F6180A270C5045E178922C5F1587EEC32C5A64FAEF9A4DCFE6B3188AF9E8CEC34757E23A54CFC33265516F4D412C45DA2C0604D03D90CFA0551EBB0A43D79DA428F70C36B84F39BA08D475FD6CFB3F640C29E9061DF65BC65DE5DBAD06FF745F419F836E039A92C3C40CE654E1345DAF2568EA40BBED58F591A7062BE276C04AC5C2F846B853B34A54E34D53AE82066B6B1B2D816983D23FE315671415E7A4A984AEC23948D4C70BB34DAF5C94F89F98794F0766F91D696034164C55150E4EB517E9DA65132507ABA0A7BA15FDA289AC429A50772DFC962D97C0C695FCA207628234518F6217912655F08B8DE88CD92CB3B3E9AA8C7740598EE5B2AB18EFD4CB9073A304F6C58EA3B218292EB3D7164DEF3D0C04082671E4B67720259061C41031181379DE750208D2F6013BE0BFC151341012ED3F338FD2016F1B1820C0B1CE44AF4B0CFB9413A2FF4420E3138D15E31A87D151066508561C9FF8EFDC989286A99D3453E6096A43732ED46B748F1E3FBDC0C8EC9EC4273139B1290BA2F273279BE37FA38703091D38033F13B9FDB98A0B1FDCE10E4DBA7A5AEF6C3FED7BEC7EC49B4D53C687F55C2CFEBDC9FBA67C96CB9872E48EC2F2FDFF2BF315F119CCA4F1045F67AE143EEC0EC58710E44005A1E2377F2244170DD986F54E556D87FF2F0C2E7444668CAA160B853E818F881619B2CFF9FCF7271A59062312718E9ED73FFAD072DAA3366CCB0AED1CF0F98A53137A384E97BB7172B34B49E3ABCDF6C66C038BD1901987FB956B46B95651387F0CA33C9E53A3367BB5F0E018A02B7A6B1447745F17221D1CB827AC3A3B1F661B3D7BE7F7DC76AAA7E6595EEEC7408F5343C48764707F573C51A387D76EFAD3A1C445750D078F675938EECA8C8671090BFAF50577EDF09E148AA6D24BC3C093AC563FCF7EB44CC2519C77A9A7A7E782B1988C724DEAFE9F0E2B0BAFB2409D23128D8BE0C4A2EA102B76DBFB008B1A035AD372CDAAB8EA56882705610031AA57BFF855D901856306A89DD798E777916E35D18FE9AE48A933AD840E889907B28CB7BD067DB2A12CA3329A27CA13254C7E32206493413586C7ED89ADE06BCF39B0A355F7F938B55A07A3A949FF6DC93D299CC2A18302E0C01FDE24C9374799758B82CA8523EE4DF2D3906EB95888AB1A505B40B5C73F6980528315D73548EFBD794667273CA77E243B8C940EE1D2D8CAC7C21642269A418F0CEE160B7CC778FCB53A4D3A16B65B211D1EB0A00BD5CE0937C7E488D3F4C928BFDCE3AB3FE79E054D35A7456E455B0196A2FF6B25666EAA42674520A772E93B4815ADE2F7ECD6016B2623A53291E6CC5677FA45E7C09ECE3CA30D798DB0DA7A42332CACA79D414B613C002495653AEE7D1FFBC0932CD3F2EA5FBE406EE0386F9C1BD2BFEA31E683096A20652505F6F5184B0303197FD63E861D0E730A995FE14932B523A73E3650D281A17BE1BE47A5C834CBDE2FA27C628C05AA490FB857A15A599182405155592F7430B08878A0D15552DB455A0E67427CD88287F22E055C5DC7ED28D38BA461AC984B65A0235B64F16D011919DF9D01064DFC6A2305EF2386F01CD62C84F25D2271D9053341EDB20193A457384743CF8F5921D614196F36511DEBAA1C5823C53859A44E23D7557B3C077BCF721DCAD0ADE94E5204B46379B46D26E9F2875936B6ED8CEE1C96F445C4FB9940F804268D11D4E04B3337F22230AC38E6A20CBA433BF25EFB562A546228D7417A87823C999E975243B176DAE4141C3DD68660C340235F9F02F251B3C2DF38740FDEF51347D1520C2CCA173E6B6B3F0701C3E440498D18BDAED4904B9CBAD84F0A0D6036D12885569559C2ADB2399E67806E45F5FCDD7D380E5E4952C81EDBD8231B4FA4305AC9A031D8C34B5D42BBC24EF58B0CF5C51C8402CA94EE690DF1FF2C7653CAEB7DD7ABD082FA803B79EE81B9EA958424A23A1E7D54F3D9BDB75B618533AD67B8F389869214905BC3C19E26CDCA144DC3761869A7352AE9A3F2DD4262C6AA806874E2B01955C535655F70AB44C67CA8C3A9E97A1F44F862033451E7FBD96969E98BF5FEDA2F8CB8E2BD5246AAA4D2B4296B9A36BE70820B9A832A25BE40FB0C43B7D856A196121BDAA00D12EAAAD65D8AD639839103BF26BD5ED7E6FDDBAA54E3040E85A097D4C9C6CA44FF4F168CD6AAB6A06E54E26D24BB597E00738C91A41ECF3BFC8D3D26BA1C76B5EA48114097807BC85B810184D6864E5D9A55075237ACD3CBFEAD4DB9BDD5130EEF008F814CD6AFA5CCECD04616757BE73FE5FD7ECE8521438DCC2F315FCC2E8E175F84F08A7ACBF5A22EDB19F47F9C92937C5FAB5DECE7649674DBE9B0F13600F1A949838388DF9CF59B0024AF55E8A566E5F1E28890C6B8ADAD7B2E584F960FA6AE2238AE5FFDE75A0508A1AFD55A54420ED7373CB7AE0DFC7BFC3E0DEBDB6300B2107543B8E73AAC6BBF5EE69C4329DB9A9FE37EA10789A602DFFF871A8ABD077859AA7DD66FCDCE05F7D8C88C44B568E90C92C9D058F627A3669DAFB4A7BBCF6F6B7E51A67F65B73281AD216D2CF21FABC3CA38775CD6F6D7264FAF7E459E03FC5781FF426B12AAFFCC13F1F30E1755D59784A7BEC4EAF65FD18143151E110ED7C263913A76DBD18DE76CD398B54B1FCFEEBE1DBCC0D2FC680D984BC733253AD73864588D32D56D8B18CCC17D05532AE6C21B1868F911E4F9B8975EF21D701E5CAE484305850F00841F0EBC54D0F84D580E915D2B486E8FD2B4D4F054AC6CF52FC3FD477308C5BCED34D7170F152B224886E7C4BABC8746FF3906CF9030C87CDE2E2F0844990470D2EA935505F9474CFE03369F4E396DF11E2ED12D2BDD7FD568CB9641247F9CD8CAF9666A712F6D0FF853EB7827F2B36E18F6BC5513E2F80595949A0CFCC7B8C6584FDCE20216C1521570CC5975479AF20B015AD1D8283FFDC314DDE2800ACD385AE8833DCB2329E6591177D5D5D83BA7E6DC5353043D23D866740734482798D357F028E442D405BF973230DB7956960DD4807202F6BA334F44F61EFD79A5915340967E7BB073DEE8EA54E7E19CBD242D44D3A70F593B67F30E261A93932C008C5FD34E98D53D5655D6B7FBAC93C5FAA13A4988A548FF1BAFA2CF4CD986FE5ED79E82A390CE99FFED318E40FC7D4EDE769C5A6BE5A6C31ACE82E67C90EED60DA49152E0641ED88D2C4C57D660F4E4FA7A6DAF9D2B48349E69573AA31E904BECC5BD0E24BE64892694BDC719F32CFE8DC498162D7406790B9AE66E425B9D2DB08FD2B12A8B257C7C3AC9F1D83A1E6912B7BA4B1BAA426624D3E08E85122AE271D36453CFD42D66390809D9D434B72FE38C43C334EB28FE5FD85A9F9C0023C5B2E5707B7FB764DAC59B4501DA6E690408AB8DA4607881F89EB4561E7FBF99B871035DEB33EEAC270FCCCDD31D74EEC91378ED62BA17F138D79D58607F71F521FCC08B7D50E3B3A02AF3A67F1003EB7ECA7291BB16B3354924BF31D9373468F75F523B1FA94C24AB49AE4B1C1127DF3420B11B35CE6015C9D8EA38787478D42024EAB66F3E482BCA2AA59ABDDFDBD1572DDA521E4ED4885785FAC726DC4F110F4D6BD6B3AB1569C9E3BF2EB3C32A46BDC6E42B6ADACC69BDFD34BAA496B5FA1B4061ECEA4D3803AC2CD004C927E4B9EC550632512A852595BE8D66A37DB0BB3E0E9EED1B1D1718FDD87F677C6281B7D2EBC50B754B4419B043BED265E1CBAF6A3BA3FBD191DE223F6C1CDC5F0B6383DD55108453CF983E8A7D03E948AFA0F800143B5283EA7FA2CAB66BBAB0128019E06A9C5C5B63CCE8F47F971B5881E00180A7C2BE749C6BB4597DE265ED67634D656D3C65BDD8D48AEE86FFCE0CDE375013561DB783F34AC0CE8546E9BBCB49CE41E9BDE8B68FE7D5834E5207134A57184CC73B7F3663272424F920302F2A99565BC309C05C4B3F61D56B86A9C71ABF102901433C2AAAFD993D283BE2A0CA5881C4582498D0622884702E4C826D217EC74812C2EFBF9615AA5B3597DB06B0049899A6E3FEFC8F936D4B8E6D7D99177A295ABB4708B9B74F8FD900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%%EndFontu1`65/AF /|______Goudy T /Goudy x1`65/$1 bmt^65/AF 200 200 w1`65T g`650 0 0 (Black) 1 _rgb d`651200 247 (Cryptography offers a set of sophisticated security) 6.535339 0 1700 6 50 A1`651200 355 (tools for a variety of problems, from  protecting) 14.399872 0 1700 8 48 A1`651200 464 (data secr) 13.002213 0 307 1 8 A1`651507 464 (ecy) 13.002213 0 111 0 2 A1`651611 464 (, thr) 13.002213 0 156 1 4 A1`651768 464 (ough authenticating infor) 13.002213 0 891 2 24 A1`652659 464 (mation) 13.002213 0 241 0 5 A1`651200 572 (and parties, to more complex multi-party security) 6.887985 0 1700 6 48 A1`651200 680 (goals. Y) 14.582916 0.018906 274 1 7 A1`651467 680 (et, the most common attacks on cr) 14.582916 0.018906 1257 6 32 A1`652724 680 (ypto-) 14.582916 0.018906 176 0 4 A1`651200 789 (graphic security mechanisms are \324system attacks\325) 14.582916 0.122238 1700 5 47 A1`651200 897 (where the cryptographic keys are directly exposed,) 1.510239 0 1700 6 49 A1`651200 1005 (rather than cryptoanalytical attacks \(e.g., by ana-) 6.92189 0 1700 6 50 A1`651200 1114 (lyzing ciphertexts\). Such \324system attacks\325 are done) 3.046249 0 1700 6 50 A1`651200 1222 (by intruders \(hackers, or through software trapdoors) -2.708374 -0.504959 1700 6 51 A1`651200 1330 (using vir) 1.086914 0 290 1 8 A1`651490 1330 (uses or T) 1.086914 0 303 2 8 A1`651784 1330 (r) 1.086914 0 28 0 0 A1`651812 1330 (ojan horses\), or by cor) 1.086914 0 752 4 22 A1`652563 1330 (r) 1.086914 0 28 0 0 A1`652591 1330 (upted in-) 1.086914 0 309 1 8 A1`651200 1439 (siders. Unfor) 11.40448 0 442 1 12 A1`651642 1439 (tunately) 11.40448 0 277 0 7 A1`651913 1439 (, such attacks ar) 11.40448 0 571 3 16 A1`652484 1439 (e ver) 11.40448 0 175 1 4 A1`652660 1439 (y com-) 11.40448 0 240 1 5 A1`651200 1547 (mon and frequently quite easy to perform, espe-) 14.143539 0 1700 7 46 A1`651200 1655 (cially since many existing envir) 1.567886 0 1066 4 31 A1`652266 1655 (onments and oper) 1.567886 0 610 2 15 A1`652872 1655 (-) 1.567886 0 28 0 0 A1`651200 1764 (ating systems ar) -2.708374 -0.084564 520 2 15 A1`651720 1764 (e insecur) -2.708374 -0.084564 295 1 8 A1`652015 1764 (e \(in par) -2.708374 -0.084564 281 2 8 A1`652296 1764 (ticular W) -2.708374 -0.084564 318 1 8 A1`652611 1764 (indows\).) -2.708374 -0.084564 289 0 7 A1`651200 1980 (As a result, computer and network security involve) -2.387863 0 1700 7 49 A1`651200 2089 (a set of ad-hoc tools to prevent and detect intru-) 7.670807 0 1700 9 49 A1`65O1`65N1`65F M1`65/AF 200 200 w1`653100 -686 (sions, and to regain control over a computer from) 4.553116 0 1700 8 48 A1`653100 -578 (the attacker) 12.908218 0 417 1 11 A1`653513 -578 (. Detection is par) 12.908218 0 617 3 17 A1`654130 -578 (ticularly impor) 12.908218 0 510 1 14 A1`654640 -578 (tant,) 12.908218 0 160 0 4 A1`653100 -470 (since once an attack is detected on any one com-) 5.093826 0 1700 9 47 A1`653100 -361 (puter) 13.852615 0 176 0 4 A1`653271 -361 (, system administrators ar) 13.852615 0 893 3 25 A1`654164 -361 (e alar) 13.852615 0 197 1 5 A1`654360 -361 (med and ar) 13.852615 0 402 2 9 A1`654763 -361 (e) 13.852615 0 37 0 0 A1`653100 -253 (likely to regain control from the attacker ) 14.582916 0.098679 1501 7 42 A1`65/AF 180 200 w1`654601 -253 (\321) 0 0.088821 75 0 0 A1`65/AF 200 200 w1`654676 -253 ( on) 14.582916 0.098694 124 1 2 A1`653100 -145 (most or all computers. Furthermore security mea-) 7.667862 0 1700 6 47 A1`653100 -36 (sures are likely to be tightened, and at least some) 6.398132 0 1700 9 50 A1`653100 72 (security exposures found and fixed. Therefore, at-) 6.474304 0 1700 6 49 A1`653100 180 (tackers often do their best to avoid detection, and) 2.836533 0 1700 8 50 A1`653100 289 (indeed often give up control over a computer rather) -2.708374 -0.45636 1700 8 50 A1`653100 397 (than risk being detected.) 0.023865 0 833 3 24 A1`653100 614 (A common approach to enhancing the security is) 5.191925 0 1700 7 45 A1`65/AC 200 200 w1`653100 722 (periodic refreshments) -2.70845 -0.222198 647 1 20 A1`65/AF 200 200 w1`653747 722 ( of secrets. Examples include re-) -2.708344 -0.222198 1053 5 32 A1`653100 830 (freshments of passwords, and of session-key refresh-) -2.708374 -0.142746 1700 6 51 A1`653100 939 (ment in secure communication  protocols \(such as) 1.23056 0 1700 7 47 A1`653100 1047 (IP-SEC [5] and SSL/TLS\). The idea is to make \324old) -2.451736 0 1700 9 48 A1`653100 1155 (secrets\325 \(i.e., secrets from before the refreshment\)) 7.694992 0 1700 6 51 A1`653100 1264 (useless for the attacker) 0.557953 0 762 3 23 A1`653858 1264 (. Thus the attacker is for) 0.557953 0 826 5 25 A1`654684 1264 (ced) 0.557953 0 116 0 2 A1`653100 1372 (to either lose control or to be constantly active,) 12.100937 0 1700 8 49 A1`653100 1480 (thus risking detection.) 0.075272 0 752 2 22 A1`65/AF 206 200 w1`653100 1697 (Another approach to enhancing the security is) 13.24968 0 1700 6 44 A1`653100 1805 (the ) 3.774704 0 140 1 3 A1`65/AC 206 200 w1`653240 1805 (distribution ) 3.774704 0 387 1 12 A1`65/AF 206 200 w1`653627 1805 (of cryptographic trust among sev-) 3.774628 0 1173 4 32 A1`653100 1914 (eral components, or servers. This approach is ex-) 1.4991 0 1700 7 48 A1`653100 2022 (emplified in secret sharing algorithms [26,3], and) 1.312408 0 1700 6 49 A1`653100 2130 (taken to a much greater extent in the notion of) 6.446594 0 1700 9 46 A1`653100 2239 (threshold cryptography [11,17]. Here a secret key) -0.210327 0 1700 6 48 A1`653100 2347 (is split into shares, and each share is given to one) -0.388123 0 1700 10 51 A1`653100 2455 (of a group of servers. The servers engage in a pro-) -0.367188 0 1700 10 50 A1`653100 2564 (tocol that \324emulates\325 the behavior of the central-) 2.193619 0 1700 7 49 A1`653100 2672 (ized solution \(the case where the key is kept in) 9.098557 0 1700 9 47 A1`653100 2780 (one piece\). The protocol ensures security as long) 1.840363 0 1700 7 48 A1`653100 2889 (as at most some predefined number \(a \324thresh-) 14.434235 0 1700 7 44 A1`65O1`65303 -161 0 161 0 0 2.917492 -2.919255 73 3027 F kHu$65i2`65t1`65%%BeginFont: NewsGothicBT-BoldExtraCondensed%!PS-AdobeFont-1.0%%CreationDate: Sun Nov  4 01:12:21 1990% Bitstream Type 1 Font Program% Copyright 1990 as an unpublished work by Bitstream Inc., Cambridge, MA.% All rights reserved.% Confidential and proprietary to Bitstream Inc.% U.S. GOVERNMENT RESTRICTED RIGHTS% This software typeface product is provided with RESTRICTED RIGHTS. Use,% duplication or disclosure by the Government is subject to restrictions% as set forth in the license agreement and in FAR 52.227-19 (c) (2) (May, 1987),% when applicable, or the applicable provisions of the DOD FAR supplement% 252.227-7013 subdivision (a) (15) (April, 1988) or subdivision (a) (17)% (April, 1988).  Contractor/manufacturer is Bitstream Inc.,% 215 First Street, Cambridge, MA 02142.% Bitstream is a registered trademark of Bitstream Inc.11 dict begin/FontInfo 9 dict dup begin  /version (2.0-1.0) readonly def  /Notice (Copyright 1990 as an unpublished work by Bitstream Inc.  All rights reserved.  Confidential.) readonly def  /FullName (News Gothic Bold Extra Condensed) readonly def  /FamilyName (News Gothic) readonly def  /Weight (Bold) readonly def  /ItalicAngle 0 def  /isFixedPitch false def  /UnderlinePosition -84 def  /UnderlineThickness 65 defend readonly def/FontName /NewsGothicBT-BoldExtraCondensed def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/Encoding StandardEncoding def/FontBBox {-152 -236 1097 963} readonly def/UniqueID 15530871 defcurrentdict endcurrentfile eexecA2951840838A4133839CA9D22E2B99F2B61C767CD675080AACFCB24E19CD1336739BB64994C56737090B4CEC92C9945FF0745EF7FFC61BB0A9A3B849E7E98740E56C0B5AF787559CC6956AB31E33CF8553D55C0B0E818EF5EC6BF48162EAC42E7380CA921DAE1C82B38FD6BCF2001ABB5D001A56157094CFE27D8F4EAC9693E88372D20358B47E0C3876558EBF757A1FBC5C1CDDF62B3C57BF727EF1C4879422C142A084D1C7462AC293E097FABE3A3ECFCD8271F259833BAC7912707218EC9A3063BF7385E02D8C1058AC06DF00B33B8C018768B278010EBFF55AB98B872A2C9C85471BF96D293194642808E6CFB3CC09D829A74211107FCFF5935E38EDBC85C3E2D923B4D8D002BA2B78FCDF9851000AC48D2872A087D915D1431BEEF20208C32737C18BBF0C937FE392D11C5C2486A4C6B70F4AB84CD12D494F6508FCFEDABB7D05F440C22012BE9E02D266B97ECC65539E2F558BCDDBC7410BB2891A7515F3895835203963F8B1D7E5948A469973E1BE3B814B53F4E22A2887A7B357C2715BD34E12D730239DA298A9C1ADCFB209D8554D10088E0AC3A609528056FDA9C4182DEF1EDE372D39CE55B15F7425DA3D2272332DA431DAD7474535A2D640C61D7240CC797907A77F5963D01B2082F02B635B3FF22E3C6544E878775728623C6F9C5E42A45C3E6483BEA57418AE6AA4B7BB37992258AAE6A598A3F7C2BFF6F948001F842ECF1C5E1B8CC62980CBA4FED67A0DF10B9CEB4D93CA3BA6CED77D5DAC676DDB72DA724EB38083FED640C4AC9D2BB9BA99E017AEB467A9C4952B8F20A318C384DF286BAB5B78A1323D552D039CF322C2F15E48C023823400821FA68752DE6FE32ECEC3B0BD41DFE4671C1326736B34002D979F470E12852DEA92F474FDB1B1275C978A268BBB25B892B8065CB1F3853E64FBC69DA43263DFA4BA6892CBDABEC16DF41429FAE98888FBA9F50CB5808D80264E0130544EC3C0F85E4B8C56821A56410F924EFF778094290875F4614F6D86353BE2C7CF00D4A072EA4BC96A74E7370F308197A8BDF0C860F8B121FB90371CB6B7B9AA763F5E0C71547FD3CC0AB1B015547281E946E1FA5C91181E55A726D0B0C396D1EE2F23B4AC9EDF5019EACDA4452F8FA94EF07EC66921533ED21F14FFB061740608A868EC0D009A7B54695A4C744286FB6B2E94899EB64632398DA55938E4DE4E66AABDE42F5C0EB16E8A106BF35FBD24A9ABCD0A5F6682FB65D5A6792F831EE2C348FEC738F4164D9AF89DBB94EC1A5203B9743DC0203BB42E29CF3ABA8441A595EB76C475AFF4CA627518C069D91C9E77B9A62C926C8C446B77C24D074E47393EB431961A8839074F714732ABAA983A08CAD5C8E447E59778505546E08E03374C0690B367D4DE44C83F90EA5D926197C411E3E790427F47C5F3D0863779E813A1008059E0855C02ABDCC3344A3630A11CA331C30AE96D9BAE2075E202BCFE277369657F46B5B73F69D03C4BDA2D2DA44135D54FF9A77E1DBF5364A412C16591939B40B4DD496CAB6FC841876E63E8E3B62DA36183F894284F2ADE5C0C4450E70925352E4BE4A230200A733F16F2256D1EB3DEC65BB10E2384825C58713A806CA9C60D202699A1A44B90D2A5F16F7263D18FAF7E0C86F3C90D7469F6E0285BEF84A7A088E9C1122555CF98D1E3F48E383AB3F7B204DBE94802B2A873AC59C45E0F78F91B5EB25079F8A2381521CAB7A1FA7A9F5FE54C3765B43DD1AB260E8C99C61AA7B20425B4E35DF8BC2BF42C838D43CFC784A0EA1AB5B13A4DEAA2FD4FC9B418B5B25C1872038FF48C2017274B4500D7B2E6B7FA17669C55D6E101A2C17BD6B8D5F1B638172DBFAFC77D26992399D55B5844CC171838284B9D2274041BB5E3BAF9334A0C9980724808DA3B7FC06F8FE46EB76DF72A42143CD2857029F7D4501C5617580E39085D8188BC8F5C2C0F246366BBFEE042505F3BD5D0BC3AD548F32B6BC5EC4AD3C502C80F90E35E27CB53B25F48EC7C899B385BA16EDD3911D02F4C2284936FA10E7EAA32729BBE7843DA5516AB5313D477AF85C2B1EB627AC98CB7A091E53190A3015450F980B3F7D19028ED619B812931CCF5198A3A4F1712E33A1FFA8D0D1B9AAD7240BA53C404E04B2F4279001DF10832770B8192F37405D333EEEED7973E1774DCC578472446881C3029D9AB0A75EF8759DCB3695F31763FC442E8A73E6479F234FF6C2A44BD912FE86CD46C61A37E638AE00339E9545BAA206F0DA894FB5566D393B3431CDA8B3076C697C357AB93495C0672EB1A4DF54A2CCD62AD95BF560E4FF8C563E83FCBE0350500410F2EBAB19C9AD30841CF34610028317C0E77CD20D6579C72B4A3C165AAE517D26CE2168ADE7F53D7CFCCC782EBE3FFED2F5728D9F7E392A51C08D9C4B63FE7983B56D8452C81A19D67BB4CA433F614D367DE226E69B89CF9D5BEE6EA025BC510780AF47A42D91F5C26F210CA184284ECCB442E6D553FD77EF9ABB118E6BDF8B77F9D82DF6B09142B44FA2589DEC319E8A1E67D3AF7D3F487CC54773A0DB8B94F5F48300943DEE9A1039D017DAE2B0D570DC21285EDB9CCBCE4D01173262C7560CAB183D677F80028A43A876228FD2C980F029641C260C78FF226D20667B7B37FEE0548A107B32ECDFD9C0B72FF9204CCBF041121405C53B55E61ABA1F40429EA62FAFF1503D2B36A84FB881BB190C5450680D9933CC0BB1903883C79BE00C1FC58FEE11C27D5FEB504D2423E8FDB436E9CA63D74F21E79DFFFE0BAF1BD55E0FB15210CD1260974E84B5E9380FD8A194F0502AB32E2DB67162FACC4E5950575AED5FA882980F0914C718E401AEBC2D707D00ED1D4AC55BFB5357BFD27EF7425A0C389121791B8545BC4760AEA1B248CDA3B9981ED62AA00E99C9B89F28C42DA41921C96A427B9A41A37139E6E868A53FC0D556C5790EDB3056DEDC8EDF595C2E1F9AECCD127597D1148C57D17C0098C952B3A1996F9A563D3AE2BF81F8C37008484AB6E8885BE89B67AF5E1F99059F10C630E598E27BB2A1F9E53C014169A39946B307265BB0D8BB48B393A80B331478D0C5278591FE9AD48DD873CF5DB3E5E4DA5A4EB246DFCBBD6E63AE338CEF4EB97971B44EBFD9613091EC249AB3545C711C329766F63FC44EC7041DF23ADD7E58713D406717E997C4288FAE73BC9E1262434BEFEA8CC4573F39981C8F9260D00EB74CC4583A94F44330D43CCF488D7AE53F5603AD9BCF69D74022D7383624AF036741AC1A7A00548DABE57A15AC02341C984949B83CC34025D90310C25A30DF623CC2170D51424006777A32F6D25368033806C6D7D06E2FAC346E9D9ABD05C6CF16031167072F3C44454C98A61725F8CE5847F7412AE59397788700BDF1A3E4535E8E8384103CC539584AE657F1FC1C73490ED30CA3BC6C343DD22A064364F15AB47287EF100A5D391A772EA7B5C93EFFA8ED56B7A43A78A2D6E58FF3198787815D304F0260DF5C357B7200A5141ABA3802CADE132E7A617608B21AC41C81C5DA1421AB8EE45360CB7D808F3802EA7544D117D164724BCACA3F81AB69CA9C20B62EA80134C84F1FEE5AC5CD3E1BA02686823141C208377BF1DABD40124F12B5FA26BE079994757427EA3A712CCC0EE9B31C45D0C9EF8CEB0142FCE397462921829B349A8D89D4D517A56004160ADE08A86616EAD072489C6338C6685588248864B16279C428DEC76AAEE492407F9A2AE730EA850FC3533BA85383C13C77C44CFC3764FA1956E7FDFC83EC17EC417214D33FA213575C770BF2C4F9BB87964812579D27486D6E9BC60ACBCD439148EBD65D8D583906B6D6DC7D74B554AF78B375CE1EE3D8A6E695473D003CF8378A0BF7FC4E5CA807B875F91CA36D8FD98487AF1612452C3117FB6C9356C1224EE53A6A53613723FCCBDA11FF304C4411C62D483F0969406EA33DBE40D138DE32E8380DB2E2260A03C052D4A72DAC811857A57EFDD0A99A0262CCEE84184E0C271D0E1F3333F2DDE22710B9070531567B0ED2230C42F49A6E6EF77CE8A5DC71DBAC07ACAA36C9D1D87962D344C76A43ECB36FD5929692E54320EF48E127CCC37951FDB5FAC821BFDF2BBDFBC1C31CDE26A0B7A27F0A3B1E9C679569AB030B74F17D0E7118C8CB8C8CB127303002CF5697ECF51C081E8B5C71EFFDF00FB37949B914A834825AE03AC88FD506DE43CEBEDCCC3AC5F42CDB3192976164198006606B143CC272FAFCE864D30F0C127D91BC5B91AEC17C9BE23F4D46E208EDE9E9B8F3DD9CAF43F98295357E57CD8F3FF013DA0A4DEE85A79F61CD7450CDA7E512A398FC6C5E46D32E569662AD9114C95AAF13A3E778163BA35B7CA82B6640CE04DC0949FA672223307E3F2F8F3E254827B830CC89E14B834A3969BA7098701E101DBA5164513827F804E0399913BB7F16EE000E31E85739B44D1D960533BF8C3740F8BD2D77AC93DBA4C76E8FF2A8543A104A060A4496501444B8BCB5616E9B03E301C72291EBB112E93EC08386B24BDB050841A1FAF6753D573D766E9C50A26BEE2B22F0DF9C9C63C4FB42D5A44F802C470C8F9697C19946058471CDE2C6272E155AE4E96E4EC6568DCFB1B93C6A2E2FB4A82D1C47CB174F5AC0E3FF013C70774B5FEE56501AB6733E9A2DD2D58F216386736CE73881B803EE83901732F042EB1F6A7F5C436C01BFBD3E3C03AA28CDB92AAEAC9D735C0999661DAD35094B8BF3068551FECC90EBED21D6C8D3ADB6FAEB1827C4D2618007F459F5B5B36BB052A6CE3F1C20242DE3EAC5F907FE592D14ACA80A4495D9608EE4DBB89172337C6DE822ABE5AB073A95356750445899509777886AF364EE8CD61CC8A6AB2BDA2498F3072995846421BDF9D5C7510EA319A5D6844A84829EF58B84C3AB35AB9F45D9C5AFC166264F71A2E77F1419DCAF7D7CEC1C3A65570E748B5BE0C071E2F88C7A1AEE0FD4CC02876893EB567CACF54736B1AA23B58B71CF6944FDAA9B66B2A554610671D3927F7088E8D42C2A174C432F96933EA9DE66F5E594950534A7A36BD8D6B57705902FF70F8131CAFF56A1A6A0BEBA3ABAC31825FA49631D63587F724BD856DFD80DDF450CE2B5969D35479A0146DED2F46865A8315C983F8F547EFD9800F984ECE7C3F03BBFE962E94A11101C8813CF46806A50BCAB883ECE828B16396E29C438C3EFA69FF4DE1CC26C0D1CE6BA47EA4003D4E3A31D8985A96349AA5FAA969F02F1C756E47869A64E63DA9942D80AA6415EC9F41F38A52D82543409E4ED8ACE73C6375E24CF68A70EA1C9653A845F6E4F58187B59ACDB0B311BC6D5FFA0C6EEBADEB7CF1ACE06FDCFB4A3102A15A965EF4E5E826B6E3D2AB73BA6B94419F2C90F3E9CC84F36DE892B09F1C9B24729B982F9F4DE31194F4302D7DDA5B6C6981C0282B65265F815F8E6A65141782F7F37CBC3EF018A13C1A510637BEF21F0E4C7846359172F34958B1C1E55FBE95900BE1C868871606D4EDB57C18E0DB0B0BF5BA1AA884148EFCF6190AAD361D461F6FF58A46BBCBC8739B11C8B58D8854D55FC9901A1D6BE40DBD21C84A94F3A1B294CA7A16F98AA10C1FB7EB8969748EBFF82554F18F3C63590BE79B42D1264348198CE6A6F6DE6BDF039B0A3DF63E23786BF1DA140654BE8341EBF38BB208AD40339EC3A4D665D327D81AAD4C8589FA44CFEE3C49CEA7F3B081D3EFD803E12F8C43E80B1B4FE12CA0632E50D327FF890E6D1C9D52968C5AF56E7C24BB6B296A02FDD67275C2DB1DABD6808F63FA77657DF760F2D15C1BAD264A06E0D1CE25805870C5CD32B0778E8CFB1B87AC2CACF43305D9A6302F178F31746226EEEA79A9F382EFFBF86047BC3750891D3D73A91D112C82226E860FF493AD4668CDB621BD851AC1847E439C540E5FD59DCE65B7952CFF82464978BF450EAC43FEC00F1ED5A219CCA0F7DF9459EF867FE07E5CFC49BD57D1EBAB2C8627F089D26DC9FF5AE8260FF9EB92DD0AC29EA3CE918BFAF42105487CADDB4A6691A776ABE8B76CFCDF68CFAFDA574A6133A4A6603241A899B2A53A401453EE5500A91D35808182767A33CB425C2144843E274852C673ECC9BAF899A2EB0A90AB660279B182A2543A8F4068525BC8BF98FE17A1BA82328AEAE43EC1A6C407D21C473D9D90CD7ACB9E6D1DCE563689ACEE1D389F3E268A2AB3A25957BB013F9171F43C666C2434AA603AB8506A44D56767AECD5B71C4B9F6DA039F56182327965F9B5305B6B5F11AEB40381A2489DC4FA46FF6626CA0D0420A248667317911E60BFC3487013A41B174992DAC6D42CFCCAFA47248318F587FFCCE76A48556EAE965C757963227AB13409EA22B09A4582A92B3447860859419205FF185A713D0C56625BA97F047A768BD85A2F71B8E9D742BEA457DD32150BA0811498B5996542F152AA84C8D6A54FA78440B9117C61C187FF1E13C47706AFC8BAF8C4D4B1652A9F5701A563A6380DF6A66030781DAAA348122ED55883975893E6F73DA86413B7E7BAF1C72E3B822DB6E66B0228FB7FEA088AA2EDDE818CF637F1DEFF17565D1F22B1B093CBF8E07654A5104D6528508C0A8FFFFE1182B2743D3341F40AB2D5B15CBE94DB497A2E2412DA10155F9CD9BC225ACB8C5516B238FB4D2B2C08FA92E88831AE333A8F384940F4AC04CF53A4147B1C897076DC6CB62103814D84E7C8881A9C97136056ED48C3DB4501ACD396938F57F9A654F1B51140C272ABA3CC1697D04F8D9795D11CA46D6A6DA042C99FF27D8244C9BF7E7B8B276E8C45749E7503417D71AC1FDBA44250FF40E43CE0E8526B816557B314EB856EA0B7856D540B9268951AE256AECB5608D3A1D3368E9A4E5B38FC6AC8F73DE2BC00E681D124DE7EE38768FA01F08D85B503E6CCB0EF3247896CE266765CBC5EDCB32809186435B0E0698CE2576A696827A218BFBCC83A93ECA395340BFA16EF63EE1C25DCBA45FF2A85DF19616994AA6610855E4BDBE3868905232A3737C532B8B6279FE2FDA87240970F1E7A315514DCB869E4BFB8393CF1DB3773F4018D73AAF5DC12CCEAE4898BC6AB44B2403F319F99D02960F7C3EA91B365847C7834817B9A624711CB9A96DFCDAFA438ED305B32BECC0902209068FAC389AEA9E3540CDB3347F299DB50D4876CEEB60741E6B032B24CDB270878AA7DB4E22C487E2942E2E9BF90E3AB94CEAA6787E86EEA3B052DC9701EA25BABD1DEB09FD706B0E831D4152488587C947D9E99BAEFB623FA9A71B7C631CCCF53F147B4D2B788C29184143269630378D255E0F78F91B5EB25079F8A2381521CAB7A1FA7203C1ED2525A0904BC308D203C633D0CE43E26D4C89DEB9433C02DE7292834B1B5A7C2EA4E76B3BC76FD991EACB5FC23787AAD6751AFAE50FDC5A5E9D448F77C218897631519BF905CF540893DEF4DE939A67EECCAF1E56E5FCF4CDA16118608AC5DF9E068DFAA15D5353F1CE182BA933046599F72AF5193757CD8C698720BECF09BECE1B97483486C0D4C95FDBBEB869C08BACA4D27A1A55AD755232BB822AE9C22ACE3344324F1D37FB374B55E57553069A198A411452B0FC7626A4203E5412568ADD282F473C7BA7BC3CC5FB074157D2EC4BB6372498CB6FBB2E92B200B037D6E1855B38508E2C581199E66064D6EAFAB6DFC3B5720618BA8D65B888AB9D8383A026D067F4BE91A9397B32DD031A532E286CB4EB269C0D380FCA5EB6956595540ED2C2C77239DECAFC00694F3248B678AE18A2C2849B35F157DA232DCFEE25DF4D795755C9442EAEF7C5085291997E13CE0135234A31FCAE2809CAFE4E5B39E83F3C86F9750C48BEF74D181895496A5705CFCE9F0EA241BC3CC4A4C9E74BDD196CB525D078BD60662EC3185A8F2048DB7073759579CB97B6C392AFD854844FC40AFCC661672940F6644A6112B66528C9F63F4BA80444364183E1E3BD67C4857B42DD17F19B73B44B45150CC892737D5F356C148480E3C24902B672E6B9D51A021F8A43740AD9D58D04258E8D92713F384F43E8F6C9E10E5C132BCCD859ED43320D24AB953D97105738FC25281E0F668871098260566EB0C68E167C1A118202D888373A67D5208C920206002F22C695773A03E082CB877F70FEAE7C4539FE904EDEE53696960537FA910F623A0BE21D9D789C7D42CE0ED7BFE0C94CAF9E06D0C489F68BAFEBF3857567DC58DFA2AF122CF56CB3F511D3A21DEB39D9B83BD6EC36DEB54586FBEA7BB5AC25E69D933EA3AA2CF780E35A2A5CB4A9BE8DCBD3C38D52C3D22FB709E5F547CC92B2AB8BCBF38306BB0A102F253F72303BF7EA2CCEC448F866C8131C2B6474EC9B81906AEBD0BBBA5E9EECE9B3B5FA70075A922C02A31E725F6CB08AF0FE1BECC3F977B42AAF23DF97C030FA862244AE5FBEC3242099C00DE470879D52F4B4B58826FFC9AB43B5EECE512CBC8FA12451BEF939B82D4D71BA9A42D12B894E2C6CE8AF3D90E9CA97B136FE6D18121FEF64B61880A18BB38BECD6B7CFAFE0DB0DFA32D5BF7D4B301E275987B1BA003F28CEE8BC0A3AD90AD2994C7EAD49BB12788C8FC175A1CC009885D32A0043B1952618D7190FBAED370592C9D1754EA0F0EB8F72440F870DA4B2D1B633B4DFAE52D1D912CD88AB213C4C69904D9079F56D231587B5A1B011F1738F0A9979D877795D8547404A025289720AF756116FFB0900DE8B48818787C50619FD9FF0ECB6095E34BFDC2C01A0A9F3D18FBBD724DA5120FF314940A5D2BDE78C9510749459B34D2DEF0C4948247646826C2B2267D8CA84D8B0E982A2355E4936FFEE83A114BF6888BF5799F5CE9F6FFB69AB1E696D758AE068FBF240EDB83477ABA86E9D83543BDD4DAA23DAAD59E8EA5B3F3A1DF65E9C270A8F0B16F721EEFAEF3CBE55FE2AB8929DCAC1519A3CC0D1464C0843E01B80AAE959C28E408A90634BAE0127A0A86C02817A43871409134EAE2E58FB143A28BF0C68B30375C0DF2F9222F006066C98B2382F1AF48939274A136F3BC09EC56B7EB624BE133B0817B79BA860D93FE15E72ACC92E88B6D6DE98B3A39A08709139BDBDC441D5A279B03CD283F2496D1C273B7FF85C1E5ED75E7A0EFA4AAF46530F82A3E585DC61E0FFDD170AFA4FAAF4FF9C056045F1CDEF998669C2A03CC595DE3272145A455B661E17DBE4F5891AB5E77A046FEA034ECC3FCCA3E51B813F2AFEB6203C5458675CA0F02575DA3C1546309899495CC9FC56A6BC272C5CC8A211F2562444FD3C46DA8ABB09D4492245171D09F049F53E45ACE8A1F4B214CB9C8FC106C2DCBBE85110C75FBF73CEC5280880B86D28D84749735D9F16379A8CF88EC21FBB75B8530A55D4B0C1C2A6F287255097ED4FAA8287E44E7A74815937CB048E4BAD26E81012183C1D533CC2104D3D61C2ABABF4B805C20F292173FFBAD17092D6747CA2F9709529044AD38A354E369E5BFCC5D30C1F9C893EB698A15924FD6C535029B0048EDCA0F9AFC28115D599503A5C13F50CEA48BA45FBCEAE0F0502630884CA09F27FA6901D3572FD1C364939AB1E4ED29C359D43797C0CE920DEDD1E593BA94829EF589A24851C34017FEE2A9E86673AC999DEF7359A9CEC6C2BB64ADB976C44938B90C463CFD3A7FD859A6738BD1F7F54DB82BADA552BA5BAC347AC372A57476CF1B798AF9E00A5E8474120CABEDE888AE4DEBC35AB27CD5A1F14FAA5789FFED10B823FD06E9EAEC47755C82A71938A8DA5945ED412E1EDFFE33852D9DCD913B3A8EAF9BC67B578D2576724FBA5573337BF3A701C3CF8206B641EBFBA6B841C0CC6F9F61CE0B3C7A89E356AFE1D017804AC7C5E046439B24B73306ACD0939870BA53D9E6D6ED2EF64B348F45693F9E9E4078A809559DF7EE3C9D2575BAD14D095ECCC3257D0337335582BC30C609B1F52F2B65F9080BF199486238038CC147584C25A54EAB69FE32F853CF80EBFB18D5B5E99C2D0ED2C2F8EEDFE6750EE57485A8C5C2B3D5DCB5D09CF6EC67815D27934CD9F6AD2DB577ED439810A08AAB0C822D2A33FA1497D0E41EF4FE8600F1FF67546AC367A17B332D8A523B6840BD2987024D3243727D6447BE0C2D1526149C5B308596249B3DC8A309F8A2EB71F6177D5FA15DC8FD9F7F58957AF9DCF94E33712F3352BE6E5420E7182D74C8B92F00445AEFE627FEF042BDE7BF720CF5C09429CB788DE47070FC79D868A879D8A1A450F9F9C7EAE95C296E0365B68952FE9BE2696624F98600CA9BAD63A9AA0784581F5C1B6B67463B18AC67DF2D97A91F1ED3474291B997E9077FE81F8F4BA6615BA0B91ED1C890862AE3AE5552C1CA7780232473C53FF3ACCB88E325A6AFFE2F65EBD16FCADB55F00ABA624733F1CBF53694FF4502212760D1B363A66FA9FA34EAEB1EB6FD2B76E8A358D20F71C862C52CAD14A8141A3612B2DBCB172322B496CAE661FA6242DD60DAF66CE735122C136EBA8D584C4DE87C737719D6E7F170ECCAAB3E2D0F392057BEDA6AE2CD57D6C5CCF393A383238EE573E2A452A97ECE636E568E95C040BECFCAB9AAD85E86B07745CB5CC946DEB8CB21CC83DB1A961300CEF10A5E753492BDDD5735354EA555BCC3A81FCC99AC54D0DE885F50BB00C77F8E1C3F45D4A6DDCFD7A6F736DF4808E1DEE3F11D60C8C2CC7F7A5078D576091B6C4DB37769818C9CBD3FB92307CFD043935DC7F02FDA136FD501ABFD89F685158C8C5B522FEC98EA553F7DD66D38141DA122921AE686E0D4A9366AC6207D1CD38AF07519538968531B2525BD74D6E62890688033C878C1929F4A88D0C8A62663D6B561069BAF56DF3469302113C10C7C4F54C96FEC991D2408EF58642165B98167CDE8FA13D16F2EB1FE159AA214E5F92A1A03827A688E8FFE406B1C0C82B1E921BCC101D1061B6C7186813E84C41846E5AE28517DE870F3B142611AE323F8CAB75245C1FFDB72B0340F5A908006ADCB798809B5F30971D6782DD453BA55ABDA0545A5146950663E335AA15A1958A73680716E17F6832A19EDA1B8D5E36FB785784E0F16E70C4ED687054AE15B01F70C35AC95593E76DAB34778D3B6D5F16497CF2DE87C8801BA6A0E8B957B40E4D619F53049AEC490E0A21E542DDE9BDC335BBAE974D72477334CF4A8F0C0E0C030EC4923477E629422E96055595876ED040C93267AD80D7D0805EDE202762DE28E381EB1F8D8D4C05914227C2D87E63A8CB792971797FF81CB8BB337343198797F5D11C5BC1AB2C05EC22D3E24CADB417FC3B953E7F2F88BB7B020A41AC48E566B5620FD5B0AB6662C757462D5D1B948D015DE65512F76EF6F729E2EFF6853A6F158AAC05BC4E88269F266C389A4EA47F07442C859ED1F5BEB2A17DC6C8067874971985325749D4749758B44C59184BCB4F81E484426DB5FF06396D0751DCB2ED5A266E761DC0F08616FFD4C6CEAB8EFA2D7704FD1B67EDC3593ECD0A4B1F11108AF6FE36C6ADD319F4A9FD2A831AE638657A7D1B2B32FC9FC9A4BCF182CB4545B013B6B7A15B3508FEBB25488CA33FCEDD919E7E74470EA1FE4DB5B47A20BD739E39B03AD6213926E21662D8E1CEF2E0230F9658CAD6CECDDCA2C7727A848C5A278253421DEDED8C068F1B6755E37CD7BA2482FDC4034102DE4B2B2E794A94F92E43F51B117F7E8ED6D3DFAAC670690E29855C30D82177F2F088D5C8AE88094EBE209C544B1B4C7E77FF8A7171C70D7F3476D5094DBC46C49A3E9D1A93D8C5ABBA43D10F349796C58DD259C916CE4982A6E06CC826CEFA51485E27FC2B5AA92BE1AA1109E980BF46413DAF8161CBF5DB4DB5BB6FE2E31895E8B97007A546C835CE2E3CE47E4A0F49EAB4F5195A9718115C388922CD93181BAF90D01EA656599A605A8D2A99C1109C5FBAE8997BAE2D6DFEF77CB10155AF090FA9047A8FFBA48FB3D38E5ADDA7DC68C67EDDDE106956517EB6081C375900864C65B74173BFD121CD8D0028621BE4A9F8656E3A835B98D582717F715CBD87892B23FB8298E1344A6CBA7B968B6B3CB203A21888E25B6E2EE7B1776F9D14A27734F22996E49C6E63BA68D142AAD3C4771429F3544AA15BA12207AAFB19031A22BBC6057678B453A6BF150E3747054B318C4086B7B0382B72FEB6BD47C6F9A324B84A284CFF0CCB16664EEC721B1684529E9729C36EBC444EB17D828BFE30852EB08779004776B150EACED737492049F7DA6D78A4DA3E1C4CA1744AD8C0124D105CFE99B5DE5E48C1231527C8291CE679F358241EF5CAA8D55F03D6F01BC063B0C183F07EFF1A50E66F970762E21F017D2EE704FF9A41D72C6CE4D2C83690E32DD4C40A2CB7708E1773870E0B8B0DAC4612A485C39FF7C27EC4C5891EEA9F07560BC08F28D2B2188B6D6EEEC2351FE8E123504C9DBC3A599E862DBE742136F01C79D0203463F9953B6EC5EF71AE7D7E77F1D60FCFDA56BB23681EE1DBF954720ECC39115204A1702B9B5ECC636E426A9F4F77D1FD37996C682313BAAFF67B2EE7200978297986C2488A93DDDD2DAB8BEE10FCB3F1025A7291C7C074B3055F5FFEA05997C54C512865672A6193570394A1F126E233908D1F80D8B389CB9D52D7D871C72CBB81B7E79AD937FEF37EE9BF724CDF871956840492A23244197D756ABA8B768306C436D6EDD326F2DBB8AE589D9CEE75E52E2A3CDB5B46610E9F0575F4B061E248B7B1A12ADA82472A11C2D646A227254114C628C366EABEDB280E5CC3879D9EF7748B3DC7E5A3D111053CF1B0EF7E7AFF4CDE8D1F7E69F476810838048CC428ABA3FD3271437FC3B53602A2C174025B4AF2D9DF1FEC9A398685984FD9E717CA14163532C592D19FD3CFEA906D6518BE76E7B26F5E61C350A9F4EE7D0A955DB42ECAFAF619559A5AFAF137AF26D00ADFD556E3B8906DA948576F4A73D20FFD3CC7542875A87BC4A8B6810F14BD0118EAC554A0606F69DF4E0AEBF7677ACFA275764AF6935E1E4D5836A5CB834678F3C157BF22C12D9707D344A296B7EE90DAB861FA4E16E62ACC3C660A1CBCA5CAEB5DFDB1DA883438DDF3003B377175E0E18F379D21BD94EDBD2C61BFD4823074356D74D93331FF300355CF877008047DB5AB6255AC6962484E003A5C653B8E95CE32F6A42B44C8DE1ECE57EEDF6EFA865ECFE09F4B73FC8BE7999D64A32E88394A474AAECB28BEA23131DA6EC22ECEB779BB2D38C58531E5AF4BEC3F15A82EC621E0D054ECD3134EE52F84F17785D3E84CDBB6803F87AC5633C0BC57F1C0B64DF8E0871D00D181AB79164D7F798F6D88796B86AD7296B0538F96B28C760D032235D159D01B926EFC331CE568483F2CEB05F72C9B9EB6637F7479FBA5A0F039A0C7196B753822663BE3ED83ADE4DC810796E9628A38189D19BE5CCD8A66E6A8FDBFDEDFFDC75654B0F134129B81E9075344789091D7EA0B991E853518833B9C51955313A67FF381BA5D18E23C0500CF7CD54D10CC07BBD17C0E75FF3D7BEC3F328E705AB1EA71B4C390D8A62D6A05D6C0CA556C341C70A0F9B7779CBA771BDCA5114B62645902C841265B2AE693B9A1BEA097AA417EEA60603525D02165FFAFFE2C015E19549C861B21FBE8D4DBAB1D59FC45927ABBC36D311669441FD1D06606A2D302C91AF3159CF85B785ADBF51F3DFACC4D2164B97E5EF34B570457259B475044126403C6CBCA220A2C1221E10C6AB4C5E55E75313ACEA441D1FC00AB8C14EBFEA809D73785158704B897A5ED0AC615711C5C72C5A10E09725CBA79CA1A280A3D3AFFECF18FF8DE738330A3F0234F8791102E98E17FA565057070DF6DEED6DE686B7102916F448DD51F34557DDFA1423BA7FCD1EA7D13DCC6DB0161BAE01E635736A9AE88BFA448DAAF3AB32E24920D6295A663CC9481C79198585AAAF80687D6240133DEB1A4DBF4CB29773386FFF59FC73B1EDA656F31E5C4F820714301AD9ADAE6F05442DE54D4A7B6A301526AFE24EFE5C7F5EF00CB7B8B6E72A22EAE8C1628F3290437F871E13DB09BD4630B4C31E12D7AA7C48A130EE2F96F307CCE056DC8D61D120F3B664FAF1E085FA742CA38EEAB55B8C4FF4AADDF29C177FC520B84115356F72562D262949FC415FACAE066651BC3431D861DE981712368C4D3001B64DC491C2BB919C744E0268340DF477A8A48A8BDD8E1E467038FACA41950DC3A24E5C0013BFDA8379616263DAF87CA60288BA3481BE94C1D8558FBD82E6EE22BE530E2B8FA564D35A88B90BB51AA5DBF4ED148711DDE0659FB39BA652B4EFBAAF7E6E6521C07417D3338B3E88ADCAF5DA26566D502A70E5EA15F3C631C47C04BA2454CD28E03A9910A825CBC99D5C9DBCD8D39A76DECE79CBA91E2E5737B6553A15CCF696DC0193E8245F22E0A0B747A376863F92220BE30AF438779463FF7B9C1F9850938DAB0BA4E6811C6813D4C5D20A0F1C91532C8A46FE7E36B69BB599B776134CF7FE275E5962C4D07A2A3A8F1F4D8230C41B58838BD2D8FD56A789020B1CC497F2290E89DE8ED6A11416D84E1A659AE8CBCEC6C28012FF5A0DEC9E29F8EC01AE0B853A7F5BB1C31A9EC683E8A59722EB0923B0906730CC663CD98B0F6D1617594FAA48B949BB07DAFA1C301FB6DE228B1D57022196A790CEB99A8830845B1DD03D85FEAC905C3D83FA32ACCDACC05C67E51AE6A44D9CE47E5479E390AE67302583F65E8ABC45EFBB5C5A3F4FA8782B61367F79D46D8051FD6B193B9DB269FBAD3FFFB7B4830F261538F27E7C1C1E0ECFB04DB9525958F24BD7696325465722504BC509BA6D93D335277D0F59A8A7F8AF8F1EC6067431602127BC90091A438A09907C10CA9899EFA6D90C15F0B351ED7BD8F6265A45FA0AF3C84C99E9833D4014CF60E27B4F3EC119A87B1831A188E7AC7CF0C2F7FE86DEF99F4002A355E8685BF376BF610E55C56F15B59294A13F32E6784FEFE9BA15E50557891E29DFCAC305383BF6E4B5492916F21ED9CEA78AC0233ADFAB32407FCF1775679D174C51CECAD6A8C6046D910DF4E3D16403C6DCEF3A93FD9E649B83C666ED66A885392196291AB78C83AB12370B0541984DC0AF6040C76B18536888C82541237DD11CF1FE88E62888363FCDF76066BD33E19CF4F652E6040EAF5D64BB7DE2DCE83B2FC77D92425A6DEB444F5E4BFB33CD91DEAB198341A5EEE027F049B7B52C71C106DAACA9494AD2991AE9DE37E0B04B451D269707F9C01D35511613D360687A4B7AB106939344BA773F9E0E3CC47E3E2A738CA02E30DA25E0B77632AF633FBC7ED9BC9DCF160290FEC047822760AEFED15ADEF488135A206AA6AE4682812F04B6E33F755D3016B000C6227D3E7E343C85962B6E169FCE91E742E16E794BFA22D36C0FF7E3DCD1B72D26B850BE2BAD8755B218BA04CC3B762F9B8B6A4E5F8A7EE5A925195FC9295447E451B135956931EF755460CEF6C18492B7EAE580CE761748E7EC89698CD570CC8C2C6336091FE55C14D0B5AD57ECCDA19392132F8C2CF44A004E66202D38832F6D2E5338661A4339B25733B83636FAA3E3307131C1CE25320E7BDF5CAD4A3E1283E441B6CC24903D7A00FF348A5168C794D9D7B5BC423B142DA3DCEF9E8D5994CCD9D83FD9AAC3134503FE26AE22E8031B89889E01B9B0FC09223EE1FF652AB6AF7402D58A74D6AC188A8BDCD790AA616570E84983F32A4318AFC464B56AA171F960938DFADB1AA937FA1D1D94B3A2D4EABE26E1E50C0507BA85CB3C2E31F2A31305E8E5D87E1D64567FF3700FE9C5C7E3EA5F91837A155416B44A10214637EB9DDA86AD85F74E100A82DB2389B4657D5A6AD4F426E56BBA527A5374F85D43A74DC6EFF0C1D08D0141EA7CD685E9CAF909D5F48E3A60EC597B80AE3FB97C8CF8D84C7832A35B0083E925FB76DFABB78DA91894D6E2DF027CE2794C3EDF6687730A200703924489328434D3225E433FA728551B9D26674CAF2AACED1A43C6491796A8526A97E0C1297970EB6F253596AC633B08BBD434C6598632DDF4AB17FB54D746E3CF3A5D345AEB46F615D8C0A51CB96198EC921E6787B2C8ABE46EB806428AAAE07E7ED55FB5B299A96C59EF399EE70315CA1A53FC6A2F5911C69ACE9EFD8DA83D464FBC013C9F61C104EA13613F831219C61F1DD1A9ABE9E3B763971878FF09033E20351E0BB006ED758E96547BF1FA7C071EB2C726A88E67A1AD8820AC63689AC865416DBC972DC92073B0CE438784282E122D22640CB78F9497E23D136B8889287511ACB357918801683F00E9A536891E946480B529484CCBF0870F0301F9A6CE710031A5B4A72DF1038A576714043E3A037D74D8237F64A9DD6490EA379D480C97D82D22AE22FEDBECDAB401A2D2BA8D1C0AFC6636DF1B5169FF7A3BD0F46077915C883FAADD39FDBE00B6F716820FFCE46C8F4D9465C93D4C63001A415AB6078149023A00C623F8D5B9345AB8AD4902BAA8F413F0C1D8FFCE79945BFBB71A8F9F1BD648F598103B4EB2FF19F977AC575CAA27172299E20CF1BA154E23EBF49D55AD6DA6D6B8D3C169A8E50ABAFAA2A6F7AFFC53F9715CFEA736F7EA07B91DE652760F73D437B4C9FDC867002D773A974068E163978E923CB83A922CCB9AC7A61C62D769F14C5D5C5F164F394C4C82C5BC03E32AB2AF2918F5C2AA1A0E7D1911A2B2112C7B95D9340222229D04606A3EC2CEE433554C8AA6743FC7079429127560CC8AF14C08133C1F814D5BE81DFE6F86187ABE01731E57243A53EA779CE63CFD1FD1C3510EE8C2D9CB66496ED8E18F3E6BDC3EC7F4AABC8F79CF47D62C7DCC18CD905460432A4AF98815CC2E6B07C12A2D97AA2D3655EB3E91D7F1CF11BC25B11761DC726E38DD484DB19292FEAAFCC9E26869766EA5F5FD907D150573ED73FB0D48B7EB601FB91613A05A90F09D17C8361328FEE393FD2F78D750308C4F983E1AE7E210F3256E38050EA2CCE81EFC3193AD6D0B71228DA42B42A2355F876367172111E64B2E6F97586A3C573BCF553A37A27E7AF11F2D67B79CA3B3A2BC156DE2B084912462D08B3A7685FFF579E74F491FD86558B5D1781ADCDE40766C19879BCF23F00329B22F005479CA3451418950CD7B7C5D12EC98E0A80CAB5ADC22D8D2A8B876299464137B52C150F85E02C5AA2346EE80007222730224BBF249B8293BA952AC63222CB5D0692A6F3519A7D2453427205D26F03C3C1EDED5DEFEFB161D39A9B7C4F7065733295CE254CA616B4D2CAF66A27F2DAB7C837A42789A7A45288C22A6478517A9A90786D5F73B733FF9EA97925336293A922B21B60349DD905F7A5A3798E679FBC115B636E3A51F87565F216E1D3543E95E79B6D67BC92DE2ECE30E378A165618649B2C8CD5A06CFA6255DCA94AFF8C94ED1D5670D2E839C031F90F6E85630172AD501D33A5369073C4F603C6090D3D84BA9EC1519C05F2E89BD38FD440F226613AB8DE4E2A0CEBDD3A78F633AC9844BE6632AEF28C5026208BC6FD2B1A41DFCAF06C0ED66574B727E6E36B4D820E21112FE6D6E162A54FB3A197B32082E31E09CD586964E34592C08F52C183CEE2DF9FF583391DDC1DED94CEFB22A9CDE75647BB8469E3CBAEDCEF710F588E6DCDE11CD3623F4357EB236601165E28EACB236EDF66975A63478736D2CD1BE35399F2CC2BF50E86EEBF49DDA7F9B2DDF13F5909B183C4C1440C378884E9065860FF62ED9324BD98033C3686FE3BFA269AAA049E342EA89635486796E68C5380F53B985CC2669A73D0D403A44F422B807DBA29926AC21849DC5C68260378B8A218EFB61C81A2D35217C64408405984A102406D72852B10837E9E0E14A8007B64F6ECC2B367FC29B3C11B3CFDAEF6EAC3C9EF8C7CA6F9A2B861BE4B8B42F5BF2D772FDCE4FCE085AD4AD2941119957B67D49B8D1EDEACC3DFC847ADA5038F515551E7B7564C036AF9CC9518C42356341BD1B4B5F04ED8AE3BD78771FA7D474B806D3979C442F0C2B16EBFC2309A3366D80BE186DCDC43CB7D22D5F1A8056F198D54003FDA5EE4F3DB526CF130E03EDD363F8CC534F946064491EDD99641DDFA1DB63225A2786909FEEE57B619CA51DFDA26D0A48D6D9CC37D45AB7FF4C64792698A8488C08C3AA4B8D28CD5EBDE40DCB7C1AF0E9A6C973AD1FB1AC3609B90953D8DDC44A28E2C0B07DFBFC0FDEA7F042588437F29953202E1F9E784CB17E6D0E197105F3B78151374AE32ACB5527B0A6177059A6E28A8D77F2BC9435D312E4831F6147B137237B639C639E19D9CB1A0B7B01F967401A2C01F506C2E94D848C0C0BDF1D916F2B60D933B92987C3444E5D588724471043004906BEA4005F96C463CBD63C745E680D584243847B3AEE3552ABDA36C72F738095DD3A73FCB1641530CE25D96184D8BF930646729009D3BC66F501AA24FD468B173FA8E9D1A5644DAE011A74FC6C6499775AB180615D5E2ADFEFFDAC764CE5257DE1EE9F718C179041917273C2F5EBDC1105879A953F5E5D2D507E8509589EEABADA0CDF827E2729F633FE055046DA174AF429661B51378764EE2E394526560A65BE21C5BA818D943C9D0FE49C2E07452EFC2B9AC0862BCA3C7E51B9BB701CA0D01375752EE821B50397F9CD4C4C31EB06C7A7E49FABBF077A1341E9E6FAD58B813F0258FA3DF3BC55331D36C159D46E263E6DB6B3EA136379146AB8DA050A0C703BD97FE3CD4A2C36637F6ACCF9B7E0A9EA5145936FDF4D68AEC93DE9095DF3B6AAA8D3227A054CF2FCF8CE44181F9C8A9BB23D53E3BC14D127E68412D7ACDA593A8C64FD50BF59FF7490BDCC23C2583130A891EA1CA53CFEE5015E5A492985015CAA85BA1D941EF7D2026204B0A59CBA8119379CE9537F803845226D3A83C2F6BCF6D9647F48E5408D5386812AAD82FC5A4C79778A8E9CD1B00B481822F205544452CFCC7CF9E9E888F9858231B8E3FA648156F0488D88552D7730268A26F4EEA3C0CEBDA38629F946A5DEDA64F7EE4FCD9C24793B32FC77ED4F266DF973AC5E3BB759184C8E9D40FFB6EE6EF43A13225BBA213869E63220504A22345F7F25CACAABEF739E4380E080497807316A4D917E0C9260E13948A5D393B53980DDEBE2B521D3195B9CED8757EE70A44EB8E481435E9907169485BDB64C295B475FD03AA47F10D82C96BE9003329A82340825C9DC4D57D366E7F0F5E030450BC814E77B50F0CBC72341FF78736FF21568981E435694E5F65ACD3972F4E21E262B0CF65802DE30035875F12743D31E53ACC2A32959E8FC05D56F20F4E91FD1D044EE2F67F8AF68F0AD480DE42FEE74E6BCEAEB37E7094F368C05A5EAD60A55E196FD9342F20147D752F1CEA25DDF9FF5473E9F0576B5C4FD73FCD6E506C56C20992DA9618EBB10C211D44724C938BD7758B15CE87193BE2254B321FC589EC77ADA2E64296D3F0FC51E714B9E34E3F4488E2586E41B7F38D8C9B091F1560418186E85F72A67175E2D27042B0425C1A48D381D63F0F166D36FB1BCCE399B1818720FB918B1F5D413A54FFE90EF6525E021026C91774365E8F423C3618CB3D3ADD3E73A5D9D280EAFF311563E3595A74D260FFAFCAB7308FC2C6E03C3E1164016BAFB152D48B30579F1A4A341C826FEC1CAFD4BCAF1F640CE248BD2FAC07065F4308BBF5038F213AA7350E34D0C2E92EF28A74B206B906972E694717F21B6BA8D4E64C7EB5628E76E2B6EB94423DCAFCD7D65B4865262A2B4EE1C218C4939C002EC24C4FD771079EDE5ADC7A62CBDEC05085EABFF850F451B46D2B4FF992C6DD040F0185917A68BEDDEC4DCC890E97D394EEBCC507D2DC5A3EC5B7EDF9F07798A66C0FF85D0D794679D402913B877D0B25BBDB43E42587A97C3834A034BFD8ADE49348AE60E5C5F4E977241788D5E6666480A0AD80587A69596D81628E2CBFBF488FE543E932F4B83C43EF1EB63EE21C2E8B56A14D2F04EEE0EEEF7D26569CD5A2B7AB8B0D1F826A44D5B05345D1E0941F2E746E6F518053535A4160C3382549AFA5C2FEC1504F5DED6A81FF053A557699E2EEFCF302060E63D0043FADB850BDDFCFA0969D0102F2404D913036E07CEA4D9028FD58259D99F5542F1F078E9C7BD6060A33829D7F4045EAD744BA3690BB210BFA8E74CC01C2DC27766EA034B58A27359D41F58979B36641DA9A8DA6FD39FE3133AFA1E69F230F49ADD571C15A18606D128ADD619A3D4720143873CD3DD4229220B42614D6ABEDBA04E3D9E2A6DC86D3DF7532968ED7FC2653C87145420896A582CB8847558B9DF8EB26CA306677E0A404A9E34323FA20FAB3043496B3C18CD1F3110585A042B8143E58629F4E5987035CB8058DB5DF97D44E8FE646CDB6E6CB36B712491AE185B5AA1296FB364952D1E07FD420ACAB584EAEDD544BBCD8BFF6443BA104C3D3575EF087A163F40EA06E609D19EF66DFAEE9C5660803815708F320493315D610CA0204EFEF1EC92E79F5B9F1ACE64FDD66018CCB9E83182A5F0F95C728407EA188083B890D149259E046DE2855B765AFB707B8332A1B71301009FEE9F36BC479DD8BE3B90B7D8D7082CB4805477FABE8442D27E53823CC67673B56C4364212C7E9F48A206B0B21CCC6A123D600CD156FFAFBD1019F83AD9E094836578E7FBBFB20A5FB52914E3E38B84FB75786757C22075030CC45C4C2D1CEAA21254AA68BB0F4F7CF4B628BE702B1696672CE75F7FA141B5DF427DAD99C95036261624965A142A8314C9AFA360BD6F209C578066DE2B554F5A2ED8B18FE3B2639B5E40AED52AE70BF80BB83A8ED3EF397770D8B3F8674057005ABE5EB8516C44FC3BC9F67E4AA2E5B873A64A422D2347E85FD4CA6932F7190B62217E02335815B91865C56EAB802D00BE09D6F8E6673A33E09EA0997BF8B45ADF1D942BADED916A4B7EE9746E540B8580CA225843D9E46B823882F6995F39838F3546307C5BBF3D92AECBF8AE8664C49723D92EB9FF5537F33C391ADF038F766B29CF9E6EB9CC1B7360F3AE77FAEB98CCA3E0C6369B0A168BA7F7031880AB054AF069F470F167A3839F7C5C9F65A5F5DFF9F4788AE96A38DF924B4E6B61F0AF4C9CD730A62FF1F343A18E6873966226721396CC0C9368CC0A2002FCD357275ED3BC9FFE78C2CA8EE5803D00C53CF11CDCE68F11ED9E5016C4C63402160C3E95DE967AD9B31070AF3AC5795954248DBBD1BDEACCE1F5D9F714BF7A68481ED34223472A8E81600E452B98BF6949B9A8C1C7B5D0ED8A638F32A4B86E5EEFE3E8C06BA1B2AC210029643858B9416A3857C236A7E494FB64A4EE1F41A426F205B33BB30FD834798A69C15BFEDF6649F47DC70B17B631C35FFDCD1DE5DC11DBDFD0B229468F15FA098F29F52D768B20AE8EE7532BD1BB77FE3C056C42704914AFF0324147D18B9A813A2F3BCEC897BC20E294BF6BD63874F8A5FCF4F6D4A169EB4C669F1D0EE17BEF7C6149E422FA5768E933BC5F47DCF048699BA44317FC47632A62658E7B28341B0B89D6A04EDB8CE9B7320EC94E945750F8F5362E81BE5D7320FB37307561A800E6A89D8E21E4C0C7A38C24410F04ED92EF2303012C07589B60AEC2A3BDBE28E8088E2C889B43A8F1C7479367DF1D222E40C16334D57A9737430E95C519676870259631AAD74CFACD771668DB8EC3AB1CADA17497AF851E35AED76603C072AB3A555AC2EF17A93535146AEC5B31FEFBA0943C26AFC440039D6C2D32AAEECB67A4B76F69810A06CB29D763CFAD9BC2BDCA67A5912D951A22E658EB0B4006E7A94C9E2B355BF32CBCFED014CF492CF80D94F34737B481D3DE3CE107A7DA7F7AC2EA601EB7BEFF383D1401C7FCF922369EAE27C415A3D0656DA1DB04B48538874DFE66FA49025F6155F21911737181638F1EC12DAFA59A9BF883883B756443990D49FDC47ED23A0369CA5DBC48FE379C55268C0CCCB3790706844A814A86452F9648CF04DBE5DE21E64B623FB50644101CD148F9D462751B56399208B81DCB91AC9789A4926862DD12AD3C2BF89C133115AE09A639C089D1299F818FBA853C3DFE0A94306C701019163E9A963A8D99B9CDA6CD3F2543936CEBFA4A6454D4AB73B632D980118020370DE1AF19F7779096B65302571CF7DB35E97C7F3E30CFD5F3B5DB38E2624BAE06DDE1262FBA44A6EAFC82F5680A7A74AD680CC8D7395E660372EE9AA58DB7DC0AF5320F167D8971F62F69C899AB316E7F36FD22166E27DD184A064EB5F3143EFB895F50214AF2EC977066066B76DDDBDC66B1AE7E50ADDE955BA3EC2CEE433F5C505A88B35C78C46D8BD6AC9ED69D48CA9249DD2D32281311687954A4F0A10D565721BB7A769246E85A151CEECCFD22F898F4711061363DE252FAE6582AA955885E9735CB2CF1E0FB58E951E6C456BC1D0F260BF22EC4769D1659C2282C88832D49FD82562779BF63786FF1C957FDA639EB6C0B808CFEAA8040F240264912A2ED9CF560DF3D9ED914AF388FAD43AD0BDD285C8DB76843015E349F5A374F0E9654E9352C49436FB42939B3BF2AB2773E46BE16393EDED48FA3ECA0F261B921F4D2FC0708C76CA385235ADCAAA94E5213EDF984EF2A591B4F420F594CD3BAF442E2EC53C70DA6D9F51D95117FB41A5FED1F974AE1BE110F2E408388C4F5CF9387B5163C3806D01DB4EFA56C2AA1D006C3BA01A5205A9A37F14037525236ECC4C396D1E6DF9C7D216B81CF220D9986F43FEB2E5D945EE418A96943AAB7E1CF1E400D99467166519F1BDCA557216896E8E08F461DAA18AF1CAFF4AEE99AB42F958CF33091B54744E61A22136486BEFF74772F16404886405C436CAC49E2F6220626AE2CBED04D456412059771E649A5A3FCAE0B829E4ACFBA61CE6D84BA4350F74BC789951543D9183F11705BE98D42B3A903C4A939EFD150E7BB23EB0C0F05A106E69610D2D1F5EFF2C8865200EC0E44DB06007B0D5CEA89E4A19BDBC224B7A81647F3D0CEE329F8BE534E7842DCCCF23122872ABF9465420C6E5C3782B3952FF81FFA740D50219E9FFE90398C10999AA628A0F7FFDEBF27D039CADD10D3BBAE3441C7DE4959AAD130FF64827D4A1FD4A7866E3F5EE964B1AEADEB3129925508444A17E4EFBF69A6A16916E5FDCAA6A591421CED5BE871232D5608100E28E4F87DFE547DDB43B11123DAB08ADEA4FAE4B3079ED4EBE00A6D8FA3BBE9B87FF1EBC570188EAA64E774173450044E482ED9A3298808F1F64643A5B0233CD40DDC42581581BB3FA95B2DC54B8FE04277ED9EE11086ABA447E5D4A2B0F8872D92E3FF5A8BFE38BD330609D54F54A864935F71FC0D03EA2C5180BE1476F2B96D10E4A72FC01F9C9E37CBC79575A29241488F9059E23C75C824533F01BC5E926FF9013861A5AB739DAC4DFAF35F0F6158DC6DD82A7EA95747704AF6EA244BDC1CB39D25A582B74295F90398ED4760DDCAA1055622B781791A666C1AC04D60E05607443BA136DD264FF9271D193CFD447C34D125F102B530DA6F9DB672DBABEDED0D9632BDA5F3E407CFCAD47B8523660E7F433AAF563A3EAB1F50F76CAC2ACFCFE2AF6BE6CDA890FA79E5557A085C21C7ECEDF87704FBFD7108F7CD2807ADC4F60702E2EE6AE1FD1F3592C346C15FB350F9DD5DAA56B8C869123C94852A114ADD9A63A874D01351AD2155897BAF5F0011C1AF4B5E11E467711E1245D003F62C5440A4D0F55AE4213236FC4A92E5BA8A3D277891BA48E0DD787E5168109BE042685BC9D03E879B3AA40986C71973C1156659E2B626E2DD17A96E96816A0E876E0C69398195F01EE0EC4D53ECCF919AF3D4EDFF9C06454120914EE772C461CA0A45A580B8FC4C32D8A47191E6BC3F3293B92E3E37ED25188D82FB4AA7F90AF9E25FFB3014ADC840FEF2DF6F79C74790E9A3D2CBCA202C3778B1881C082DB45EED7E829F1A1702B8FF5F7BB86EEBFA5FE81652BA93B7CE91E7AEADD9004641C9C1A9B757E5069136F2277EE5F3A521BE014BA5B51180F3E80A922DCFEAFB9E6D22A7C5641548849A9BF3868B32BB0E71A9C8999934E4B7C7E34E09CBEE2B121665241173EA92C0C2AD360FC050E9B538443C9ECB7CCE75FDE6C309AFDC04350EBBF118A23C68FFC4C8172777EBF24A3B1DAB8B31B9BBF3D5D54BA75AF6C8E299AF22FCCE257F9F3F943125F8691185EFAA4BAECA92A3277649CC042F78C9B181B2EB1ED5A10E993451E65535E983376467F8E64253AA60E2515FC330DB0B879786D9A7299DD26EA109B432CE7A94DDE23CE71B224025F0556787AC4A62C02C11E2A0C294F2478DC6F765381806D268C52EAC03880604B7CED84EFD9EBDC0FEF1FBE2C3B0B2EB371AB43D1F7475E8F4191E3AE180C6D742684114D4019BABB3CC2A467C39774EB9931289A7BB2FAD12A31C18369E6BADD49C50B481C7407C8FBB037EF6720945E3A077AB1C5F4181BC39BE068763897FADA29F3448654F623DF28D71D6D7F8F475D828202BAB5C6B3302EC444C2DDFAF192438244D164F490A140B8F1430A7DCBFA441D6956AA4A6614A75076ED5A264848FEF7C1EFBD1754BB008B2A1F1557CD847506DD15EB91DD86116E3666F78D7DAACD51254BEAAB9EBC7285AC5A14A3ABBD4C2AB0ED8B4982FA5FF8BA16FDF6F994C1BC06DD4AC0CCDB653A70009F8A7C04FBEAEFEAD4DCCFEF69780A24A0277ECBA6B0B6486F24F66C3676BAF539872252AD6972EF14B0B288BAE2501DA3716BAA68115B9924E33E655D5D4654307210DDDC99706A2916C0B0C3F33624EC8024E35157D34A2ABDF9325ED8554FE9AC8B95F817A247B8B4D5F19B9076F972DE79A7CAE300C451B40D192D282043F5F52161A84D63119FB1982D80D86B9EB2736AFA0E59FD44532534CEBFB99C95103BF474D53937307DE4FC8D7764D0D6757253D25600524C27293875FA98E52BD63868E2B487E97326EA686178F6088BA84623E705A72F96B47F097A0FC715613227071C1447C78159E3EB3379408BF3CC7009A67E928C753B5A6ED57FCEE61D73F4FCBA2CE990033F8A5F3D3EE2B431D2BF0D62C739E10771B768AFE25B71B6CCC2ACC18B2FA678849C7141812245B6A5F7BAD752B589077D4A4A1B7283A0CE83B417217BBCAF872328BCF36C4D88622C6A7D8471BB709F5CB9333EFD2C95D3576866E25DED581B1BAA5510F19E62B43C355F2AF71E0EBECA34DF2AC3EBCA63C06C77C3DD49E805CCE8D6C56237091C7DC48619897E38DC0412F86639A978E68A1ABF971416CDB61DF5855DE5C8558C45AD8E2D06C7501D60FB6FC4A1D71B5FBD7AEA070437C06B86BA7FEF4E5504438A61D91F6B4AFD6BD1E2DE73D176E39D9EF896A62E986DD1E9B78C40DA519CABE15F66961AD79AB6123329302A94238A78CD99FD64BF77ABC14F8B99408510C79E05D336C400DCE8A5777ABB909C6490BD059A25B685BC3C4002CE308FE369A287D85C51A957FDF3BA804D516991CA4E02C4533CDB0CE56A77989E76A8E331C5A208118B244D8D49CCFA3613B7361EDA55F8699AC25FFE6FF5DDDE94D59F98C37557F1062BBEAED148FBA259BBA6A52A65DF17DE6DA41BA34508481A4E4FFC987423ABED665B8918F945C29B3BCCD2ED11134ABB868EC089A478966A39989A24B5D4AEAAA31F0E64C7FC689C4A7CB89390BF5A302F836D1FBFCA6489360E8F5B8480BF087668E7A15395BCAB4419955DAF8385A24E4A41DDBEB930A9A3FEEE73F875CEDA81549AB741C95095ADF72CB592E520073BD3E859562719A3C36887411713DEE089959A52ADFBBC4CCACCAB53CD11B5E4029BE576FF5D2C77B3C440FD8A9852CB07B1600D9F5C3353D6566300EC63CF99C7A2839562F29F5896957CCCDB9573586895A4C21101140FA7F2F33C3753922B84C854FC5CB6BAFECA70C5323D07B39A4E4FEB5F7E050BA041C5C4B1C694CFB4BA8283D8F890273D1252BC69BAD6BC30D785A81B12D61FE2FF166D2688F8A491D334B1AB0F596F2159171050CAAD411C27AB7DA26D760A48B69CE3E641BC2B831FAA8E47EDC1C9D79D21179225BE5FD93015C7E7E6E75FB40AF992E74AB8C8BA072AD41A9D3D395BD012016BAEDCA20DC8B9E7498689F6561964D8D58778B274B84CA5D1E4EF6F49951B36BF10C2A47104CEDC78598765B71E1DE6DE07D4BC469CD04C408E55BD82224A2A5DB1F191B9312EDA9BB32E3EB6BE6041AA5B45BCC3D49DCD40745BD8B985C928567A48A7A94473248F7DFD1BE64E9EFA72F99B3E14496BEFFB7D734E196DBF09854C7EDDC604743902A2D370CBB8B7561AD5DC75EE5FD110A11677F2A253BA88D1D4699545E57E02C9E1543C02A409AF17F10587A5EDBC935D7F96A834DC932E3DE7A0409071E6E9D7CCBC831D1FF67D6D54D77013E8748D9C5AA6BEB1B58B139B69F69E19385CABF957384D08DCFB6E44EFA4F9391C45F9122C92A0384684E190CD921E3CDD8769BCB7470F72B9AE03A48B5CA9C62AFC6F909C3A1565BD5E7A1AAF12CBED3EF75C8CED96A29CFC96E59FCBE714A54B3178178D1D65DBC76D9792090BBFF516556CDBD32E2DBB11ACFF91D58F9C64833802C75D5B66AE5A5884461CF0CE9004E91388089A3215B1B723DE7B1454F65037E918DE28A41E817FB74A026E691BAD5944F3E8960D76C6E629E622CA9B512F1FA9945CE2F0F0E4F99E4349A6C3CEC79AA4343645DB993EA75EBE72CCEDAA07BF201541187C7BC8027C2D86329592380657078DC149CAF443BFA2D53EE8DDE112B5DFA78FD12601E4D84778F0D2629A58B7A007493501162672A12529760730D0CD59EC52E63F374B5550C54399A78A4BBD05A1A4D288FE4BDEB962C03C249A8EE66757CB0E210782DC27D3410946EE905DD03CD20B02431A6FAF7D0894AE663297713208C7E95EB962328FE3D6328F5D80E9EEFFE718F5491DEF6D0F70B2F841E6259B6B50D4CF1AE60B06CDE9BE03BF1F83F77C9E811F3DD28ACFC652F3641F5F937851AEE0CA47A8A5D8F3FC318A60A0075E804108AC7714CD87E8753F4A7CD74FF13434CB48972FFA67BC9A86FDEFE2EA600A1E905AE4A56DA1CCBDB8BD7AEC25B1A22A50AB28942C2E691CE72C22B122A3F7ECC56CE650D82D9FDBAEE6613FD2CA7B62E0C2D0B8DFFB2B83AAB21D86D4D29B43B0D720B8982814EACFF8501247A5B73B7E5E5C950DAFD3F8F05E5D0CEBC2B38B91EFB409F8D9A9AD563A8CB6528DA91497A26347383D663C63AA27CD6C549E6BB060BA306F5DCE198BC413571084D7B0529C10607EAB2F42C5D3B18D03BAF6C418837FD853BB9B4E3FE09863DB04E1F083B1CE88F92765F14A3A07DCCF0B962AFB8F4EE5BF0952B1297B27F3F0BEABF63BC4B07D5A897BCBF93E26BA4126B2D867249E48C6A2588A99C2D69195FCED93785D938AD3035AA7FAA8AFB0AC857412F2145F5E30AC0B68B80323968057074B4DC7AA762FFD3956F52F2EC92E56ECC448A5491A4B00340327B280477C4E78DB175A1FC56C68E7286EE653098A82EE0E506A0DB7B4682B45ECAE682AEDCC8E3E3453BFD449923D4A0D6C328966BC10D5992040661F8DBB32A0343A3793EE3E4474656D784F529807F2BE01A50C1AFFFE4A6FDB6BBBC314ED7FD95E610E45DC7BB7AD718063484AAE0DEBDB15CC149644FE6CC745D75874CECA4B594D95A39D902D334D640445777CAC0FE3BC02A930CB1EEA33309D687887DDE94A6C837EC00BECDC9A3988E96C1F520300A243DB2100ED4230632F5AD8C08F9B336E4BCC7588684FDFF726FA42A17406EF5B5D4CE974C5C2CD7B12D71EA8EA3998280F598E83AC79308DC02460C0C873AABEA4F3C11A0955F9C1DBE70126BB8794DACD09FB450AF869A134A1B2B7AD08B5887091DEBF9633183689124AEFB78B2011306DE752E9FE63C515A56D63059C4B2BA594678F2F2818E9A3E0F8F7E4F9147AB020AD558084DE0164CFCC7DB2545C28E9C2D2FA5CD79BA6FB1D6BEBEE07F06D32E74B502E52F1D555ACFC24A262FCFE52D2A22902BFE64FC95CBCFBE746FD3464CE8BC41DB572161AD9D7889F4985BF1D95F2F6B99DF4A7888FEB904D0D9A561636327785B6BAD84C3F8C426C7B275E9ACE13BF00493A1C23D80278E73A726BA1A8201117E0BA3C11A727DE502CF48376F286EE3E70F5DC69CE03F28E2552B7F86130CF7CBC09D48316B4C0F53FA2A86C8EDC94271006658F29D4C86D739DD584636731BA811828B1048AC58CDA129A946D8DC3B9A9121D5864807C5CA77EFF524074DD1B9A2483BB2A54338E42D4037290EB1233CC8E952BD4008B68D4FF8F0E39439A35203F37568BA3244DCFEA4B1FFCB8378D77FE82AB8FB0C29D2FBF09C79C4EF9F58C51487E1BC6AA002EB18910BD5D3E87DB671A86A176F8235153021174C78D184F244FF0CE22BA61B11827C821A87BD6BF2F86666F6C9142E7C399CE06598AFB8AE44796B4782FB075A498817106235C7C32A82A83D56442E7919DBBDA48E3E1E8C602CD094DD45D68F9EF6C6751C1F3E7332725F9401F5B11BCE8A2EB346180F4D55352C8106781C94F0F773D311AA3CFB2C086726BCC7A82B33C37CF569D6F08CC46DE499E7017AAD9A1238AE9C84AB3473452324E7AA52DB23DBF64157719A7FCB4B37B54665ED7834E7FC0035ECC25AACBD9CE2370AE4036B7BCFF9FCDFA65E75661FFEE94E928C07B36A79C6A32BF3C4BF34FB778F7776CBA527A95E948670E90C52744BEB6354CBED26F9A5BA10471A1DF980979DCE956A3F11D0F348B2222F8CB9A74247F695354DAEFC9F692F1B6FF6A25C5DFE5231FB42140BA0A2E2F75D0E89A324ED63C44A947FA7B8C212E3BFD17BB06DA231F410F0060DFBD685AB801CF6F2CACFA78C7F7464EC5946294F25A713F1C64DB5BE6C31A52768775B543C9BA8184B72104688A21AA1421022D36D8D588F5EFE96346C006D2BB065FF80AF0A9F0B96CFA5C5A2A14ED2E9AE61286FBBB0D035398FE5BB057848B0C3FEF1E2B3A683CB7F8CE5446B188D40EAF6E3ECF3EFC5339AEB524125937E48C92EEB5EC4178947D9C47BF29D9FCF7DEC166A0FBB5F3C1F7FCAE7C4A6F81B8719907EBB2FDCBFADDB65B94F9235CCF15AE1A53F802FC69BA4E7BF3AE1BFBFD5B51BFBD8D693F748662A70A2C2AB35B097E25B3ACAFC791174205AF6DEA60C447FDE59639F8A9ED30107F98C0C3C2F049F07133ACCCC86C1CBA9E506BA498C2A1EE65E37ED7362D08247EAA657519BA56B5A45CEBF5F5BC3157E40894605DC7A33C7D17CE5F4397BF6C7AC9E361AECFE0C46DB6B72E4E2B98286E8989BC0DC540CAA65BA64352A153B05A55A61FF5AAE83C2E1DC6EFD65621CDE50DEE899916B919BFE761995F5195E2ADFAF9C2C0D8D8D02FFAF830B0F6351A88D68616E43DA9FE80C62AC4BDCFDD7E74576F6D8873084720C5F01B51F22879D1CF9C641262E9F47355A421A628CB060530686848F6199CCE28E3BE3EBA25264DC10AD923380E2FFF91B389A22112E8856FC4F73A66E2593D067A79707EC5F222BDA6D3095A27B45BDDBF4532CCA13EBC517C30BBD45E6D23C7389CC685B2773985B013A353E33F72125BDFDDDB5A5F6A694633D5B7C71FC12C4D8E8766E1E3ED14ADA1FCFC670EAB3BB25914C026B2A7074AA8DE3B08C99BAA99AAFD563F518C5B6708BC14EB920B59CCA4C91E09822133DCD4EFDAF262AA204BCBD4A79102F08FFF97AF18C6EC054EAEE9174F9F1279F8C4EAC5133AFF5292F8A391BE7C741AD0E3FF5FE7423EDF5EC082763ED855602A690BBDACD3772CD2BAF63BE87F5D433100F1516133933B7377BF8278F852AA6C577F763941705455D419E8A9CD0ED1041042C81104770A3605A167997936430A561F8195BD3ABD2441F928083B428782AD77F197B5CBD79B8488F338E34BD85BEF86C5495FF61CE899257EE30B595ACA7BE584601FCFFD69ABC2735C69B8CD06AA56908C1A3108A21B70FB34C09283C985730F10CC12D35F8CF72DA7D3C8221E05A0905BC1090E5D161EA578ABD9C2B21F04DBDCCAE4B7E5344751A2B18D18453320281C43F297DBC88D99DD34BFBD17C62ED442556F3705660C862F0A449070C849E425D7230BC40B591EF584CA737B38D8771E960427724527047BC71E7CB5E874CC240B3A8207AFE78F6552E927DB69355C5DB95CC32649C9878E2296474F8D4C48E71E90254E243CCA91E17D43533122A55803A00CA83DC3010492BDA43F1BDE4947C68A171A950C893C8A25C92139506CD74D2B7B96E2D1DF5160BB7A0603B56F8BDA8EF8AA7B8BF6002B205555CC04C73B3C32B7977A4AE23A08E99917CF26E40C79B6F4546E013BF3F9A4C498CEC9E5C3DEC98E29567784A437F9F1D6184D51435B53DC1A107CC051E0B035E1A687A8CD20AD45A41868FCE6CD0E071B321DE404102ADA44A81E9ABC268C701A2B7228B6A3EB400254BD5ED434F37B857022E37CFCCE05D170D1E15AA46716DAE7F3165944CEDC3C9B87554DDA36AFA8771685B8A472B3F83894DD585AE89DE23FD889B48F44AB6D197D3B3901983AC70267A330751D416CD3D0ECFE55FC3BA9451A8B3C5E6D7D2B0ED492CD159F31771D90DAB33A87506FAE22008C0BEF318483784EF0723C198FB3C8609BCCFB5E75E94BBAEBF69B24B00BA253B01E90EC03DB662B1F3DD4D5E87F2F64138BC99674F6276FFF65D18C091CD367FA2AB3E5D7DF35B5C33A9DA8C10465DF0898E137EA26F874B541A9F9376260733F63A10AED1FFC0134F3BC34460732FE430C015E8E13D46C5A26D9F899B2EDF9E7A141578B29CDEFC019DCEA7080A9B33001B9918A95FDC2287243732672438974E76A9F190A37330F49C8CD87E8DE0E0BD2016E288856690B80370629D518502054ACC9AE0A28A359CFA0A8509C66791E1E0BC3334BB632A69DA59A6B4D13233919E773CA6E94C0882299F2858BE0D3EABCDF223223D65EBD3FB61C558D2AF5E6211B7BE2DDDA9D19A1832CC129EEE40A7A5BD192A7B5B60DBC1BCB0007CDC43EEB252DDBC7D72708FF65CFC4D9C5E89ED752EA0A396229A08D2A66A92C6234956CA3F69B0C6D42C8BE06358C6282B0929EAC62DE39893028B600B3C53E1ACF61C2C384229984CA59389BD9C141DBA809BAEF5905BABA9391B2D16899781D7B31901D635FF5CED4877A2E6CD089F9E4BCF0C262FA87DCB04F6CEAEB097B6DA6DC39EA0ADE1A84133C07320CF375F8DDBEB50C69C2A0C38315E2C947BCA2B17A784C79479E6159281014F2755E50537968FDF276BECE9B355D468966637FDC97DB5A8C911DBAFAE6C9DCA5CCDC78FC053EBA91893097C749EDCA823F66958297C86566F4A992BB380335C52AEDC86423E7138DA70D1508470CEAAFC855EDB65F6BC301D196B44C07AFA569E6E4757D154DD8B2012A6645A3742F77AC61483D8A89A025D21CF19404FE10E839951444AB188833B273729A33E2996C93583B41ED978DD4F915425F7E667901EDAE00A461C974505A481EACC186A3928BFC34D477DF3B5E35F5917A7DF01A261DBE54E2D2E41A0801131F7132F1B5A891B1340708F7742B3736A120A806301C5EA5B73A6FBC0FF0D5C6931BA675320FBDDE7DC1AC2E441580C09C3E6B336582079F97634F971A1876DA662676CFB4D35D93F2633B7007213C55CE19B27D1C4B248B34D6D15BB8555D52A93CD094837D64C31AC5315CBC7972FA8C42E5EF58193AF681E62F368DF18FF4216CE5B5969B160FFABF332E01C9CED83E531011E0DE31E9D475E5B452BC5373C9DAFAD1EE5DFE41FB1FD5B8E74A21DFEB5BA2B3F8708187F65C3CD0F303F96F1EDAE5DF6EDC59153E5AAAD7D82A43A9A71E2D39DA6474A256FF091720E86DF73A87B86CFA89FF2D084CA674B8DAD4CC25C9C294A81BE794C7B8541184082E379D6ECBE5680BD2B85B02BDE3B50B0D560EAD6329489B04FD690BD4D031CA9BA18AD462BDB1E1FB9F0DEECA35261FF6D2DC33065E718E67D46FF0BC156BA8363F828C0473C750BCD33AEADB203014E161F48C077BED47ED61E6125FE2E4D9EE71C18BE195DB7082CFEA9031855CAA3953D1D7F3B7E06DD8E93E6F928EDFA54E95FDC7AAFA8409B93A63469540E5DACE049B7083A2E7FEF3A6C1E7914443315870A4CC8029391C78BD64EDABD1C2A24980C6E7354CC56B5633CDC2F998A571EB98FA84E71C6FEF8144BC3AA208A72529D170E4FA96CA8BC336C3A8045F2DD7C43F77307CB8F18ABC5E9C25BD746D7C443CA0FA495F61E947DF39ADF2AD107B8E8E8492B0007C542590501E74FBE9DE1FCC09C7033833D39CA9C99AAC0ECDD16DFBBD3BBD45B3902170A945661962ADBBBEA95F1CFA9D6E5FA40CB74E15E2FB5F763568B28C902F11D2C1010CF5DEC2BD30FFDE24AA696BD0A686EAC2383DCD87F36B914D9B0F369BFD3FD89FECAFF0DA75422575D43108DC30A17216B6B600F2F34958BFC4CE6D85326CA96CF68F65FC96DB659E3229FB08C83168B02AE4868017621FB292B809160CD16831DDD65A3448A7DEB4760A39744A2556A4593B295ACF383D10DAF25AF7CB00A307366A7CDB432735A231C73951E222602CDDCFA25714EB875DDFEC7AE6FB9A1B3548A07C755EE46EF5FD5354528BEA753E5A7113642495ECBB9B85175CEA2A8A6383B68E57656A6C57DE004C6002D91FF3B82C5B8AB8795D38671B17ED80E9C9A598B2D5D3504742D169912AE515D76EF406CC9B6D31E7B7129ADFCEE15FC0BE4FA81B3B696F985ECE72F29BD022A5C349F6940E0E0D9B89E98CD73E6973401866346F95E3948E1E8AC965D9CE4BF837CB5CEAFE1E90AFBA24F16896BA64477593A874DE2833BB2A89EE200ED42B526209851E2E92188BF19594DF3804E9B4FFE15FB5DD72661EFA12E5487499E781157BEDD6894BF4044205ADDEA7C44ECC51037BA5D95244482CFA508E8437E48082C0F35BE2D8B88ACF5DF69267081456814861DBCFB01A6DB22078A55817227CA40139902045D9B73F241BE2F118CC4B1F7B3D33B315F9B9CD1B6591686B32F43A5F5A4EE4293E1904352113CC3BEAF6B9B9BFB206F90197C02B92851E23A2D3C6ABD779DE34FA36736EDD6827CFB48654EEC62D4963FF83283FDC16B9D14A277021930224B4170C67B6DAFC89E37021BB3D26F1EA4EA1FA83BD2863B255BFA973DE8C8C30F8F19374D8278E23EDD5EC73F511DC2C9109A1616C23C835B15EE23B9380D615B2DE0061D925B0B41FE81326A4CDC3ED7AA5D9BDC68AF150DC4C11536C6C802DE9C5B519661D77B35773483BEB6E3D92854ACA927270A0BB51C1BCA8711B42C1CDE70C75365FA7783BA709FD2D0BEDA0A973DBF2DF06A23254F224D8900B7DF538AF3352718884989D4E02F4C0931B65782A26B626F08DA342441085B4A98EF5FB79050116370BDA1B150F7D250C1E112150A6B3905BD6FCD8F95099E81BB9F60EF2B332A4A81110F33937404152407D3B941E480A30497670681B7D48620B188486ED2E9A1C5D3294576BE5EAB553F2E4A277F2938F22DF335F0F92AE74327930035D8A92FFC77E9EF58B2F68188623B10600D07ED732978C08B233B1381B419DFCB1B8CC860C97177D5A448A02B763D748E3DB5729000FB730E391E2C9F365922C5C9CF7721CA06FC543696C2ECC8FEED1FBF364C65F29883038A7012B6A1C67A2462EA82503F4B1927A9722DE39DFF606A6B70853B38C86E46B5B9E165B8EE5215849881841EC8BCF569D178F5D40744A235DA2281F81BF7BB2FB2487684949094861D7779B9C12878401BC91A1D795800135C2DC0CF8978285604A0F7B9CEAB00B5D5C4485D01954777092597EE1E52EA55709D037BFD57C8A329A5AF15B367429886AB539E96D149DFCB0968AEFB037C2D41569C7CD5F61785AB05DB159A693B663118E4F015DC2F7BAE3534ABBFD3F784348D911062927E7C6D109208953A05D673B32732163675805624A88607D17CB98DD55268D40A29BE5DD37B8CE4A1A68D2C282C18B4468306DB8036EC457F512FCE1AAA211EAD20801354B23CB134AEE6D7F0EC0C503AE41A9A7088DBBBBAF61469303575E4259804C8C85A492B9E2E4C68B9085280F9C51988AAC73F5B467502D4DA2F6DEBE9620555BDD36C6490CC0D8E90F62C92CAFF621817E4AE3858B5356B59F6B23509750C3ECCA1EA1652EB5075204BE38736E1AD2BB039647EF3F93C4D9AF5BAB995B4AF4E033CF352CA2C91546C37FFBB21E0659F82DC0C30784FF3CAC77FFFB64526D33182439B25F12357E30DBB5598A0DB8CFE2242E236E81E681914AA924CE612F0BDA1C22B09626EA98217BB4FF7738FB785CDE083049FFE1997EA40DE9FEBC41C00050EB281EB13B841C0879E3541E1D4F66E59A2A22E9E1F9265EA882ABFF60E7B7622DADBD354905C2E710184759AC40A9860489445D68F5EC38032857D619D54B129EBB76D2F10B83620D0AD785AFF999F9AFB0F3954F568D09BD240497193DFF43E45BF1F330C7C0BEFAEAE30EE1F82D3127726DEE05C0C0A148D347B81E6D718248A92EB5DB5A7DAF78B6F67B973C485123138AD9EC9E87458502802AEA652A2A4B04D1ACB005F9197099394CEF52C73070B181456FBF6AF6FFF5D88C9CFFA7B811C433BEA2AF7A8009402F47A42D958D16F8B6A32F8AFF9D5C6CDCA042380EE6048CDA92B8BE385914130ACAFD7437AEE79CF10A9960D357702CB3F5C3CB1037A14685D857162CB1F7D694EA03F9994C408D7A64AC767DE7AE35920C5C3DD93EAEE7A2B1C15F66D41A656BBF2BC1CB71139D9CC8960403EFFDC2860F9311462C9D90C0902B6F4D3D26943F79DF277F598A754A43888EA149BB3B64020BEB3E7EF152902388FAA0F61BF1FDA4C0B812F5582E8FD9F5A47EB493EFD3F62D756B54C4A873C521678A413779C7DA30E4D8B576ED6A16DF8D4399BC999F0511FEAEEC1EC4097DFD71FB6B96DF3992F0CD0894F48AE58DE0AF81547173744798CEFA6F7989C1BE8640648A91990A692512F7D6009874E7668ED3C506CB46519FAF1775B4CFBB405E18D9B9F604FEB4213FE34F6B602BB12447F34D55947D0F539193C16B784DDB5BC2787FE92568FEAD02F2632AC6C04890D1C5B99E6D54166B43F9D3A5355DE4DB5F25204DE373809454BFF67B2DD7AB44AB3A28DE14C5867CA18DCDF058005C428BBC4418A8EAB5AEB9140FC3E2BE9468340A70AE46E389267B4683E3196F3C3EC8FA86EED8073F0B48E1AFF55FB2C78F57405080746B3A7F193653F51ECDED59B122AF89E62F6B4F9B29DBD49B512A36067EF7C6C862D2B1079C13122F37D028B52E7F937AF26238CC6CB117E341AB22B54C296F3E81C15C3BD9D0BA0B8DE78C79C551F7C5F6C9F462415FE40B48CB8DAAB076B473FD2853045985219252948EE60E382DA515C9D087E7D7B23819B8B6869DAEEA46AB7275A3C86D67327A76BC6E4547B00CFCD8778932124ECF23142F1B4D852FE69F134DD2DC35902843EAC8636051E7FCB41A2D7608D7B6EFA3180EB57302461E1B6C7220E8FEC2F3DE7C894DA8B35DD3B43E7C56351F25E8BDEEB1F757930F0ED0BF01EC537033C695A6A27EC0CD764B71B7B27746AEB69C8CC7D99D3BE44CE2DE3DD3DF8295AC7A7E68B345157CF0FFAC763C0E55E5E24EC9D5A0AD2166D49E17A6769606BAA0670E3C8529ECA35F067B453AE183CB6BFB7C014DDC382559DAB50E4270F1386AA90F705A3A4EB4180386860D2FF630D7155BCE1F911DE201CC16B82E1E9F0B60998DF3512308D2D0A77FF8CC76C7DFF6B29F477B8B65ABF6F4C400525A880BD537C05C7A4B1EADB34CBA169297A0AD0FB581F126311C40D313FADDF168A2A506EA8C7EF1BA13057600FD21775D01A4A996FF86F3C5B82CD50F48781919A5EA1AB5ECCAE928C9083480AA4E9B551191646F91D45CD0A67E8DD2F7EBCEA60F6984A64E2DEE708C95A7F94DC875D7E7BDDDBB0EA978825811A8B65515C5F2588D0AACFC25812734C53C18CA79FFC0AA571A187BDAE721E5141F4472972231D97BEF315C70B290A83BCCF561DEE1A1EE0D96E14A02883B1C3243272AFC6E773C2B61461F93CB99348A49AFA1A152C770437440C2DEF6C1A7EBB93088E2112781E9641145662B4473C8115ABAF60BF82B919148063090FA9A414EBC24F49B691BF9F3ABB1719A75D26461162F869AA56929AE01024A130D1AF7A82CFC7DC341301A6DE1EC7AB603DF6C97A4C465B69925C1A695A2D2FCA2D7AAD6698250AA1656DF4974851FAAF13BCDF369F5A5A7C33C246764B2828547A37AA45C0E35FBEE5EEAFCD884BC2448077BE25AFA04E34B48EA54F5C68B39B4229AC0F13180D82B540536DE86CEE1AC9F58F55C2B76BF7603377C4C581A303B66C62B4CFD4084A6B720D81A5761DF25ABF12EABDA6B712F801BEEAD6DA293762699A26C5AFE08A8CF2D0C17058C20CB00B1C43C5CA673EABA264D15ABBB49FE29283614F232040C5BCC6A525E3B960C93C712DEB550F9A42B1C7952E01E9085916FA7A7E46A668F649EAB5BED7B0A1DCBD0634FEDB1A42EA7A055F1D9225E2AF978E8B8811C932DE08A3A693C0DF2B3C9DBBA63B0039E5EB37C747ED43FCA951DDCEB0CA135BB9A2271EEA49EBB61DD9FA7C4F782A5AE06F9C8E0E2690907A7C0F5830464FCFFBBE6FB74BA4F99B565941B60ACDA971F4DBFE0AF7765EC6A7AC41B8571B13D2DFF758224350E3168F762092079E805A2E980C908C5993820A132537BDDF22A3775F61473CCF007E7782CF89935BA3F8709FB76CA5DB6182A11B28299A8E62752E04E9F93EFFC35BACE77C52832BFE3561FA8EB48FC2243F89DF540BB59F64A01AA6AF351BC8C485ECDA1CCE8DCF4C1268A3362391ACD54460ACDC9A1BEBE392E954CA26C021AF3B067E9AD00820EFEB765B1D19C3C1B58EBAD10A8B81F41F3FF72BA91DA8FE1D2897CB380A71DC73D1AFC600A99B50F00D4F577CE3668FC93E1E85FC82AC94DC99EF395FA40F47DFE8FDF058E52038E2380B1C63C22C1789F582F1BB37AA2177CA2B4D1A4BC5D60C218DC5D1BC4B74CA7CEFC71E13B7E09D376242DB2239F82C725B084A0B94DA7E3D5799F81D15D16D58611E4DED709696660599F666C8B53E128BDB631E57DF8141C3EE6E424583EDB02F77A677729ED5A7E45EE47AEA4F770D63C0FA62AAF817D3265A578ADBA64DFD4FC9CFC3E871876318F6EEA04C5C6620F058DE7D3C2D93C9DF9AD08FAB3A7B80F2564D266F8EAC42A025085589BC2870EE9E982B937690EE2D0B34AD558E7FA5E470512597E87E285C10168BF77A9BE20C1BCFF2C2732EA122B28DE606109C41FD4C42CAB6ABE6D3794072E620D120A5F3CBA6D2F509ED11DEC6C4591B12A9833EB318B2285E5D434C1A1D6EE6436D28EE7FEC457573E88E601C1A4C061E8BF3A9F469F75693FEF65D69C15EA4F6B4E2D49D3BF626D2D32CFB7840F55508E3E5AC5F161F0DCBCDAF3BAA0863482C0899FB1F2909300BB1179D4E498BD895F73A8DC70BF244F9D580E9625515D24798FE00EC7946AF588541BA353492E05FCB7F615C5C1D89DDC224FE20A3A976E03388BDB2CAA2667E153AF859E5776463B062E6E1A17F8E2CEA5569B3E43BB5B06BC2EDFC20ECEB01A246CEB6CB0E7FE56396544BFC0B01830F03E70F78F0F28250BBD4FD57658F6560F4B0C43DCEEA18BC300E9A57D8298F2D07F06487674FEC215B2180FE7DFDB4E4BCC024BB5EEC031534B923A727C7B3A3E703A41D4FF32EEE75669E56CDC3983FAAB6094E7B0E4C38C609A62562BECFAF6E157B7992D95336952007651643717455C5C82B22569B26A0C37C50C523AC652588642D30265A156387DF3DEDABE7012830BBE9D41C4A5BB8D16E1881E374C7F8BDE6631A9983CDC6C338946823802B581287F5BD8FAEFFC42830B3B06131C0717C65E0FAAED325B8FE6DCEBA7AA259A6A5F1853397AECE286B0AF7201F8DBE5BDDBD9F84F8536E328CBD00C745CC721F2984A9B5161A05BDE78DC32E0F6EA7A482A8E32FBB091A80EC3773849B8A69D8404BA410B893400BA35875F65FBBED725322B1059F0BE5FC85628FBA419D7CE9DAC8F2724517CF6C1F693413443154B2201AC924D823F8B7199E17C17A438E9B4B419F67E40CF3D3BCDDFB0B1B95943C397DA532D7E4452966EDB4D9E387146253D316BB9FDBA9C829DFFEF84FD0A3A209EC61871E1EBD81487D5FD457A7BA8F06209239BF3D7455ACAA0F1826175D99B10C43D1A2CD814C0CD8A3B00CBF71F98CEA48E4FFEC6C84E04C81B5853B37A979469B2B8D1A659402875617DE66C8BB52536FDE6AC1F10C1F2F05D25BF2DAE44CE7E76B26C5ECC34BC0972185289022329DD16EAA2F951C8980C7A5083CF36FD1CAF2689F74A00D2763C32AFF46F7796E2176685C3621F4F466CEF609DE9BF8F8A21723ACB67F8D30043A7522A4B5293324A729A4C774BB26E456420F29F0E2EB8B363ACFEFD7B6C92392DEC00E88B22EFEADA39D0F2742BF9B53DAD39FEEBDD684F84C8154B330BA9A06DD8283F9081CB377B50EB2039A7BD56ABC59C72B198651F6B330890E255924EE3567EBDCFBA000A2D8E1D8F4B6D97F87DC65A6C78748C054FCD711405CC28C558A81D9106373041A7F885F26FADD924E25DEB09E846E375F81D8B2267C35E9D508B3163F3EA7863147CE77BB2ED117EC60FE939C82F450FAC55541FFD95D5CB63329938E09255613E46978EB029FA55E81415742264B519DF138EDC2B4F8F3C7BF9ECCE5CB0FC1C8593D11B8AFA789762EF099FFCBA33E1A0A57EC7EC3D5D9F9D41B65796C7D524D9B700C0399D47A6B52CF2BADF8741AD5788068E2CB6137ED2714EB00F6441147C1B6773D7A0FF7F9440BBCC8251C0F4125EE0396563F13E457F75868A17B70A2C1EBB89F71C813BE5AABFEE79EE5C3AE9B1CDB3C2395E0D1CA0FDC14BAF0E8A4A8B21313C2A862F73890A6B544D479869F58559EEC7DF2D4431053ED79E3CFF28288981939695F82117EBBC54FBE7ED9BD21A0AC691A173E01615E93B2D6BBD7481D3D082D92A55D8D2A6B024E8A01B37FE8F588410A002C9D4BF3FADDFEED9FC743E2F7979279B55748C036CCFF2547653BFFAEE723C61CC2A5E0240DF377B8226F1C7998CA11FB1C4B5DE26010526FC14AFD9EFE1B9489D26132DF95246B162932D68F9CA0199DB9EC69440129099C45C5A5217D8C3B0684FCB1117E434C6C08284CC5C4776E68168FDD7FFF52CB06EE77308B4887986C300A9359F7A75D5E74485864F0C255208855558633079370A0F6F1C4581E1C4C9944D738B7823B2037EDB42B476D36A1CCBDCBE0732F2B5E3BABC697D203F74EF13CCC7D3DF0E14EB82AF2D8B4C9DF259DE66C9BC3E8840E8E84B60EBCC151392CABFFD22A2DB037809201DFB7315A27150FFF7B71C01F6CCF9B9BED1AECBEA6E2EC1470BC1A7A622F91F3258546BF927F23DFF2445B85F302503F67A6F44AB86F9368B5DFD64E9D594129C284EB0572B0A92080059B4BBD7C3A6E1B1ABCE6ED4AFFE5ED6E6AEAB6AFBBF0513C6F62D9585BF1180BBD9DF522804D411FB4150A8C6399B12EF9CEA67762C5708AF0D16C21A0FF3E301299ED1699D29F2625BEA9E5E68B9A867CBBD04707F69819FFADB05AFBE606D0AC65B7518A00942E642E07499EA8D0D284D6AE51B8EE479F22C6BC00831C00B1DEC78C6F6D6AC2EE601EAE7BAC27D751BC7C0A1D6D5C93C3F89C8CC5598F02CA53EA65FEE72A9EFCBE2DA6C416776D70A4F12F5D97768CBE9E797FCA8A64430FDA4681F70DDA76E98294C493BED73E91C0DE7DAF6BF6A4D1EAC0D570BD70261B9268157F3103DD565981A9A75ED41F90FD86A5CC73B8D0784CED6A6805279F234A00389D5A140ED0A981E001720BBADA1AC5DF9E4F3F8551E896B39E3BC8BF597CA52695223C7F3363333CB4004DEDD7A5C98E6B4A4B6B3A323CED847745579285AF20BD7704FFDF483303E4EF48B2BD510651ACD8B998C7EC789C69CAB9448ECFAAC439C1C43CC8CD4A84F3A47A52C36139EBA64C600FB36FD3A97DB9921268B3EBE7AF5AB699A84FDA2DA5D1C93BC9B90E91E98D8283CC7B2DBAE1642BAB7A0E6526B6CAECB4FC80AC5CDCBF00310B69257BB70579C48E65B7D7D72B5C7033FEEE6E45853CEECE531BA50D79C602CE1CF0518A2A53112CFA3A62A01F3097883689369AB15A0907986DFFD97737FC523CF6FBEFDF9F9C65710F03E6D071CAE6CDD8FB0D23629670A93BDF4A513BC40806367A0AB83FB2D8F05F314DDCB40BC7821EF28B7AEA56522E327DCB7428FCB8023FE3E564216C0C7B9E5962FFA6EC0C74F3B7C93C231E56C0C13D0EF13A831DCC933420111D6E11635C69EFBAD8DDE10E4BB5B40D4AFD3831C767B37870F7CEF3EB802527BC16745E244B0796647C5836B5EA528D08B7EC82F4427C323B32E3D437EBF6BCD071FD5928BA4AACFBE5B11D8CCCAD944A5E5F00CE72C5771CC80B214D15E1CC931742D96F727621E053374682D633D846F0CBCD1F4AA33CE934CD4E2F6A41E41A3E5B40AFE83175D610F3A6367610FB0D0ED5499CB7815A4682508D9CD5C7D2A0C43BC3D097A4D6D131D462A01252F929EDB26FDEEDD737BA169468361DA640939FB68414AF5479DE90A2587FA9E65313F8302274DB62D45572A4A7A28C76A9AE6CE7558A8E32EA96F2EAFBD7F308316233C6AA5702644662B0313F735ACD8209858650F666F725EFAF5665819C54E146323C28D79763FB122243472AC5D6DC3BFC4B2BDFFFDEE06EEEAEC47333D34C7DD6003E036DEB64DC2463187B95DC3825CBEAD559AE7C22BD843E92EC446E7D5E14B00742ABCED70B391910B93F40BD2101AB95C7A9317605AAE1B3241D66C450419D6047548FBE2771FE89CD871988E82DA5F8393A1DB700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%%EndFontu1`65t1`65%%BeginFont: NewsGothicBT-ExtraCondensed%!PS-AdobeFont-1.0%%CreationDate: Sun Nov  4 00:55:07 1990% Bitstream Type 1 Font Program% Copyright 1990 as an unpublished work by Bitstream Inc., Cambridge, MA.% All rights reserved.% Confidential and proprietary to Bitstream Inc.% U.S. GOVERNMENT RESTRICTED RIGHTS% This software typeface product is provided with RESTRICTED RIGHTS. Use,% duplication or disclosure by the Government is subject to restrictions% as set forth in the license agreement and in FAR 52.227-19 (c) (2) (May, 1987),% when applicable, or the applicable provisions of the DOD FAR supplement% 252.227-7013 subdivision (a) (15) (April, 1988) or subdivision (a) (17)% (April, 1988).  Contractor/manufacturer is Bitstream Inc.,% 215 First Street, Cambridge, MA 02142.% Bitstream is a registered trademark of Bitstream Inc.11 dict begin/FontInfo 9 dict dup begin  /version (2.0-1.0) readonly def  /Notice (Copyright 1990 as an unpublished work by Bitstream Inc.  All rights reserved.  Confidential.) readonly def  /FullName (News Gothic Extra Condensed) readonly def  /FamilyName (News Gothic) readonly def  /Weight (Normal) readonly def  /ItalicAngle 0 def  /isFixedPitch false def  /UnderlinePosition -81 def  /UnderlineThickness 37 defend readonly def/FontName /NewsGothicBT-ExtraCondensed def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/Encoding StandardEncoding def/FontBBox {-166 -236 1018 962} readonly def/UniqueID 15530870 defcurrentdict endcurrentfile eexecA2951840838A4133839CA9D22E2B99F2B61C767CD675080AACFCB24E19CD1336739BB64994C56737090B4CEC92C9945FF0745EF7FFC61BB0A9A3B849E7E98740E56C0B5AF787559CC6956AB31E33CF8553D55C0B0E818EF5EC6BF48162EAC42E7380CA921DAE1C82B38FD6BCF2001ABB5D001A56157094CFE27D8F4EAC9693E88372D20358B47E0C3876558EBF757A1FBC5C1CDDF62B3C57BF727EF1C4879422C142A084D1C7462AC293E097FABE3A3ECFCD8271F259833BAC7912707218EC9A3063BF7385E02D8C1058AC06DF00B33B8C018768B278010EBFF55B480F9C45EABA26C5352C774D5A6AA2047F60797514DE315658DF831447B4CB35D1E3C043D33A02F345FE0FC2050AA1C139D9C1DDCB8EB502C72CC4AD2B72758CD03FF093E3B6E48C714811579D05BB1ED138ECDBDA8318D02E85B3F80C5A6CB3472312EB4A8344E8CB6346042F7590AD85A323CA02092F80D2A5FA0FE494DF0CFAB2CC6633AA1A11EC710BB5E76C84034C078C6E729343EFE1D26381108D662EE6B92FE0FB4F65F398B999D7C50C107C962AE2110A513CF8AD9B04034E814F29511586F62332B831DB36D3BBDAA082D2CCD197F33B3BBC5A6EC2AFD9AA0654F620FCA3225C12CE5D295D30F9BD0AEA2D2B4500FFCDA98BA5D8B0021605D8C9B70879F4C6C136CC60F7572C4E1B1D9256458D43E2FAEE023FA2C4B65AD39C2B4F7793B0E4326A5DB52EB130C439E32DABE5F13903B492738155E892DB85D2E6C3B132D41B665DB1A8624FBD307229056B401C407D8E644E82C20235DDB415DA383883D0A7C5BA77917DE2888E9FB4AB60962AF2DAA52BAE2FFCD9CEFE8DE641E20E6B9C62FCFB5795AC37B59F2146197FA663109B494B7BE514F1E3B53DF3B949AC5C5013CB1B233BF96256414670E405FA3D64263189F646BB7318A828FD20DD1D9C68F0451680FACFFA15A9142104E2C26C8AA2B4E442DB3D093DB29ED8F1CE0825934FF07F60D73DC6C9B36AB231664DF604F3591A98B355058190E8BC60A1AC9665448D136F05D3640F0299769C78CF7EF18181FF1607F454032B01B0B2BD738F2F62E1BB618D1D6D6C1CE914E55257DDABFEEC4FF62ED1AC601E0BCC65DBEFB166A4B8038ADBAF276611DEA462B6FBD597CD0F045F34A0C984F9D067F152B483A6F0ED1CFDA1FB5CB6BB25A3FCFE1A193982FAA8D29F8417CB9DE753D129837E6E772659A3ED57BE3946941C7D2A6DD625D5CE56F526EAF15B2AEA3648C55D7F63DDF3174A099493D4841C661A489962FA594474D330A59B827381B9604582A21BBF80ECC08BB969C156FD695BD9DF3657000DBF4A605E4D9172E111958D59957A46918F4131CC52B5876374560491FE4CB0152F68D9E27AD9FDCB7D6C79C89D4CDEC071C2486FAE604FB505DD599DADE72194A4909DD0131A006A5E2C2C81C9EABC95F5F43D5CE6E424853C512D8FFAD4C0877A77D9E5C950D4C6B4C39476E2A1FD45E073CBB612A92B3B5EA41D761A6E81023ECC2F9A650B5495100F6B3E89ECD0EAE163D5C390E02EBCEA24D63DB3B4FF6B063A416AB335BFA324A534F4DBC44B28D1D3FB20F77086C8B0E6973F3318345426F32A3ABB406A921F386F32B5BC1D03CA32DDB34979EB09EA5F7563D495CDA8BD352227FEDADA5A4D49248C5EC3CC2FC622A82AAE5DA513AEC3DBC0FD0FBAD1178A2DAF3B4A58E0523EC03B7CF2A8619FEFA7A9E194B33254A1DECD3FC3CE3A7788700BA8613737DCB3A7E65D084958460C2E2F7B56589E3BDD390CB8BCF0347B27755DE16C3326A6B95A84337259B29FBFD735EF69348A3782D28F3D70AD491322140F6F5CF47C104AADCF7974D58709BC8C1B5C69FE8BEFC61A55A458147BA921A31A1AA674F739F01F3395B73A4F7E0F2202AD5B6F9E500A0A221BEEA6FC2AC98D741DD307082C5B29D802217CB7245E39D4AC71768AB4F5AA13F5B879BD731132982770FCDB548E55B98BD13DE37174A59CF19558DA44BBCD3995ABDE2761C3630465995F1E73E4AED8193F43A59FB60888041289136DA010DB84BA58F99E7A562BD2CBECF3ACD70E1C7242D9E1A0E9700366151C0BCD68ABC3B2D75A94B8B9C1C7898614746547C13094E1C4B73E5D2ABDCE64F0FF89039B3A37809E3652C5277D9A803AD4783C877A9329146DDC06173DAE28A34B525D008419FB2190697A2C8EC7DF2A8EDD732E807D9F8FF63151CE4028FE175298F5223D9C29A8A708711CF926D2C8EABB19AE0032C1D961364CCA1664390E50B0AC6C133AC39ADD6BD62D383D8DA7640342E0CA3B10E807500D4F00B07A20710523E454331B3AF0A6FE184EFEB4D1CED070AAD1BEE8B493F137864D15140CC17E3920D2C4AEAD9B3651783B7DAF2141EA551B116DA9642469496F57F8EA8E9A9B4554C6051D85AF8E5AA76E1742887BFEDA9402CF8CD9F8118BBD97BE831BEC6A625CA6C4C38FFEAE4EE7E4274E2E149CA9A242CEF0841B12589E970B6399581ED1C0136E7D2F5ADFE07EC02F19DEC6BCC0D2A251008F18AD510F7C12DF577DD9114F7A985747F37E00CE6BA7E05F56A6134527F45C553BB50DF89C28469F25F98DE0AAFD8FD240084E3F117AE192F7B60B4FB49F2DC8814B321AAA8AD990CF59DC4A2DAEDDCA895309CC0B044DD6F0A4C53579116B7EE8B3F071E9C85A1330B90B3E71E3839258F41FE30ED3BC901A88C9D6CC461562FA1570D637D75322AF86F00E3033E3ED7F0FFB40ABA738A7F1749EEFE261809CBF8CAFD3E53EE91A2A43E76CC1454770E955EBF38C085F63DA5B67B75FF1496F1BD82495DBA5F9C5648D63086DBD8CC6C7299188350856B35BDCC2ED261E696CD1C87A97871B53AAFA61BED25AB464DBBCAA7D42D9DB149C365A2896098DC7535E141C4CF9EB8BF52DCA6D63088CE5C9F5A1A1AB5F8ADFA81209FCBD24B2038CD9D61D1532AFD66EA16F9758D80967262A675352367E775FF89FDF7DCD3C87EA65BB5E9A430A2A0A5866A00257BC69181663295A59025EBFF3380AAE01BB18BCF445819C24D0BCE9CFC82E090CC777FCC20E56F83E970CCF0F207BA3AC7DB3D36DFD7266553F74E1D06804FEBC8101318FE113B778249CF8F72B546F87E67474D6835419D8879469887EBAD438AD1624409971FE0CEBF7927D5AD5E143FCCDC15AC19640F8710DB5B494F7C60E6D3CF27AFC45762C6B0E831D4152488587C947D9E99BAEFB623FA3FFB28668372CC0E8067A6CCC9FE6370BBAD56E540BA822F4801C61971E8EB5564E33EE96E6431DD24BF8155F61D852C60EC15FE8D5E3A5BF5717507A22097669C3ED4051168BF3CD1141B0984F892C358BFF2C444B2D7917BEBFD9350DE247737271B8D3ABB86EF9097BD7FEB3C4CFE4840751F76AE43D69CC26AB092ED45B663CF2852AD0569AFF3ECE3AE0E328B331A7E32F9DD3C95119D4C6328084EC2E6857E08582AD797F9490AAF64D33CBE6A4271F2B6C7824A5253E77C42CAE2C3CCFDD14CAF6AF4B97035E148461C9A48183C3FB7B995029CFB255C5370C3796ED18932EDEC2896A94D56733F8740137146B7FBE3EFAC37D07C3F09978A2F8967865ABB01B75E91233BD88A8A431BBC7724EAD13242EA8FCBFA36B6A90D5EE21179FC81E606538247629A86AEED06CA0D147F9CA5F3045EF2534C3CEE925DB459733371EEE68C29FA7652AB64568EC3A19F96C113AFB9D6EBD90B292ED67FFC11C1369D0DA2552CFD78C119934FFAB09916BD905D0E50A03363175E4D0D907CE0C8FBC59A127C57B2FD67B771E742DC7F31EBF21AEC981009CD7932FDE0435F57FF690D8DB6B90375463A94486B93DAB8D516B190C7DD155E0AF275B8FD9CC0AEA383C54FBD942DA98E456F7A9D130AAF12137A6A1587DDBE090ED07C030CC61E267C276A8B043774FD1A0360AB0D794FD9FF77679E02B6676B79A9DD2B498FF83BFFB0B4F51EFF9253FA1B7AA312A84BAD87D12C264A6FF01BFD7AA90B8351558DCACE98313584B3A903801FBA73F9CBE0B6A9D6BDE11B459B7FD4064837B1596FD2C1AB59BFB6AE18F8C86E263FEE842913BE1971B3C264FEE344F655D9882445DF3493C05C702D6FCB1CEA4D982DC26AC93BF39B9496ED2DC5290ADE2BAA5933562A354B42CC154A5BAF4F401E28839AAE72F1B0368E5667726C24A09EC8A7FA8EB6B5C399B163DB98206BA898494ED78D075A308FC31A8B15186BC08FF2319C4458AC8F55DB21ECB2954F26A1518A102889ACD793F539B213BFB89183F2CBCD3AFAA1A806FC92E4DA288564B77DE99F8AE5AF0116D17326649CF893705BAA376E01C3DE356F9942FE086BB23FF7DD34E174FDC022ABE4E344B1654B9963E2850CA073C15ED98BC8EFEDD302D93879A71401BBA5C6E7C9E45C5D10B258C514590F1E572BB757D2D3A5F366689ED3A853F944C10A5F37544AAACA8DAA86C3A662A067E4F6A352AEF1E9B9E203E20BBCD1D52F1F82576E1DCDFE4699CC9F512DD26645EE5B6EC5AFD5A4AF4DE1B4F721BB7149720E103928A9DB907211867DE94E059E83088A623A54FEBD7F137084856F4BF89EE43D486CEC8555DB970245200E7BBF4BCC31434A52C083E038C50B2485D6340E8C693DEE8A58C448A48AF585E900317CF2CFDCA9AFD331F1457928E228A1B0A1BFC42498E255697CF251D014C4C424E64E48DBA7E6F7909330A0FB4B1304696B64E2523FAB7DF6566D80BB0558A41CB92ABB4522BC38625F2225FCA0CF578BE23262B203C3532E4464E029FAAB29431A574C42B8C7D4E232A342918D02BC04C9245023150665E911A184B1603072092C623DDC0E21821D847B8B33130CA5340CD3A9850271CE52D9C7A5CC76A51E6E3D52912A82BA05973A4DB75D88AF0E5CF8F99AD19817055B8EB6F6528A3CE4375D3671667AAC2CE58055C5322B5C064CDA15760E450314AF80AE4C5B9288FB786F9AE78282C193A6DE967C4ECC5A277A58345B4640BD1C75AEA63DEC60D8C4675CD6145928DD64DB0B60A83CFB2BB95F3925FADDA8CE86118C0CF848BDF33E0539E58F9D324C55E63310A8BE058D043EEB32E261FC6C444D2DC137BE936FE10A3F8C15D543652D49E9223C19F0AC8D5915F8ED6135F0B1BC9ED6D108EFD42A121533960DC3AD0405A33CDBF8D62AFA119B766FF93FEA3C84323A00EBCEC72024DA68BC3F91CE6BB74CAD27B9EB23749AC4D365E1120AC08A0EB13505FF4467739B15C2C7365A94C6659ADC3A90F91F0C2A8285347F1FC0ACDD08A7F73D493EB677A8A21E0364F2EA6879A8BDB7E8BBF54F917ACA214AE2FF69B804C0501F18C832D93DD0336FC64AA7775A35581F363559EFDFDA7B8BFC7A71345EA19A011DEE4763F3D2AFF386B96C0BF325E28DD7288F85BC146171253CBC034B7159878044246BAA34AF1FC1E300E2D830D1D819B9A118B5E523CB3DDF83AD27639E97178BD2EB34D2CD8BF10876B66FA8B428CBF1592DF769E04096196C0B9CBC486B943CE2996B35DDBEFF4A3EC836E61F39EEF427FB552AB47FADF32EB96E102F236734CC3B4C7907D53892675621C21CE0C69502B9F3F8C13CBD1BA0B381DF1493B1B51B8DB79BF61894010BB79F8DEB3986A0636171678EB47296394B968C8F38020E9575402937E25FC5B3CC7E5A0962A7148DCE3240DFA2A2E1C1EEDCCDBE0AE23E543A9AF6711B404E485FF5F57BAC2F85E6537DB88CE2CA4B5EDCA8A9D9D749FE46910E5AFC186D57E7EA1A2E9F4FF1C384BBCBD9CECDDAF2D1B96864CA02F2EAB5E1966019A6DB10FA00C09F9AE17069D530892B8842FD590E4B5F8FE6CC2A73358BF053289AA1745AED618282A46029F4B1FE2A7F62652FD713025251A379B8A945D44A48DF388967D8C34E4C1095E02FD0B801CC9E2F1889D14D6B4DD37549FB6A4A47DF01DB00DD73573FFC5EFD654AAFFEBEF57FCFD99D0458430867B45A9EC3E566E3C0A23D24F35302D07F9CCEDB64E0E969D3743856291F793AC8271230A0A12F6B6E49AB4648FBFD352580F8E8854274B18E220367D10BD16A11D8CC970D2DAE1580106FBFD82B805C20F292173FFBAD17092D6747CA2F9709C8EC0A783A532F591D7D54791262CD70A5E5924A8F7BF7A7878D068FF6FA7C32A77844DD43D86A53C740627E9FF4B42192EA8BDB4EA46D9ADC913C98B401C66908642D82730B08542C59A365B372F2176DB80906804161D06D2FA8A9FF6829C592492DCC0964DB0B4676A8FC064290B8A0673B604884D66AE75E2F1CD390F5DB2DD1B821E29E560A8501E44076F66C045E3487273B4B7C061DA73440244D77CE7E48A143D6170E9653BEAF348EC803BE2ECC53B538B0EB478AD06078E50B8E0B5FBAD6C84A4A25497E29B86B7D5948146D59CD422039408FCFEF55C25F8602E0ED9A6A38BC751F077F7D51EF814DE02C80BF0915BECC418A5A2FB1E1FFDBCFFBC85E3E420F0FCF485CD72CFF305D8C940CCCB99F677ECD2F48503338DD285F87164D536DD961C57EAB58CEC83759A744B66F2914EF3E5E455DFC8C27337645E2FD3177E150B2A81B54CB0EA2F534654992769FD14C4FF98621B01BA8671B67AFFAE910A6F329CAE26695FEDB60719B2AEDD4B6D4E6D04B28B0ADC31605A852A8A8C43E662ABF22F25E88429CFDC5089A6C3D4B5218D9807BA5DE0BA388B2D1265E6DC1EE49D5B6FF44C4F613E4ECE1D3433001D091FD44AC6693744841C148498D3E20F7A3EC032141B86B59268A4AF0C1092DA33DB40F3F91C5CE8374A9165F151FA205EF1F9BCE3680F52395C803047AA108AD55CA2187336B39ADAC76898142118182D6B49F6514D91682C8B919ACFA8DB758195AB57607F5B119EC6F491745861DC9D910D129D0B6A74BFDEE60A829010DB76D57F3D928DC6AD4375E7BA3C188E0FC735A9A2813A766BBFD713410372F81F477B5CB00D0B7DA7FB4D0B7D19F960B990BD456973099E881A26DBF07A9F44609C80850156959778925F07272DFE5A4A2E444288919F29BC3F38377B63F44C5D20B9EFCCACC58A1307344C3F7200742FF48861AE25EFC99E4CF941E0694DBACED35AF367A1A65AA96CD33C0E58C54F32F852E839CD52BF50D9945F869B5EB69C8907F08E1B25E55E67D3F75FCA90D4ACA840539FBC5BDF1EE225D530A5D67FC1322BEF3F21B8F19D2B34040008F0EB3932CF591EA8E0FEC2B1235F37D6A96F5574F17E826BED149B224DD251A40A34BF6BD06A068CB4CEC0F0818F527C37DA6A29E897B98EC9873A14CE0E439E602D53A632845E6F67DC2B5E597B9C25D9E5B5331A12DEA252D8DCC786BAC4DA9BA69B73850DAA1E2FEEDACF4E57190DF25B61DF20D0565E9C7AC81793B1C175DF9D28104279EF3000D937041ED5BDC6251E834CB80D67DCCCFB9B7EA01B607088C2F8D083AF733802C298605DA79B0658D99346DF915D6760019EE856EEBCD17B79244047107098DB3BBB028287451FE65A47D575DBC840463C33B97B58D6B95192DB3AFCF1F87C76F12F0C041A4805863C99CB07D2526C68810F333E5E409CF9B2C9D77E17853CA1BF2705A0DB7D194224C1A2E27535B6B8DBE6B85D209148C7A30095A621FEC47BF25B05C10F02A06C1D3040C8E0198AB139143B0D93FA77C39EC6ADD89056A682302B65515CBCC0CC402AC1350173E2A05471D5CB6895F1980ADB786EFEB06CFD58FE470F7A33C414CF484BAE0E78E25BEF011DE662F5800CFDF6DB8CB6D279410A1A60247280757CDC3F5F7A170C2F9C94FADD10ACC3095E1D4067A87A4BEF7245366CFCC31DFB5C558D4CD3FC770D1B943C6EC7AF141ECCCB0FD9D41769D222BFC20B39672A6664408EE100E6D3F1CD6DE36479503A637910973C66955EF4E75F0AE306A266E189817EAD9B0A8AFB40D5820779F6B72B1B400D75A45B61DFFC8DE707027D510A29F7F24EBD3B519B4406642BE1ADDC79700923B29ECAAD4D26F753F39AB6B4A7FE22FB5EE27977A290A14095D574887DB86294B9BB71A7BC623F91A30B51D44290B4EF387B58A25E4EAF736F2246CF8E6D31C550D77F0605CFD55CA7FED3C7EF00AE19CAF063662732EBC81F6E6CEE2A382FC0585A7AF68733833509BBE4D2C85271CFB61E1E8E46DC059E24E2DBBE9287C1AE40FF33932A89707943EC30549FB6A4D4285B9F2BB1FFA50E49E328174F285A8B05B87944229122FE44AD8B15F0EED2A1516D44926F44DE3FAA2494EF8537999D0EA35D147BE9BCC8D9449B0527CC6F916A9A63B8967B847CE861B685EFB2AAE33C38800DC2638765C46EB390D89F9E251FD771A284613367EBC2BE866166C8705FCCF4A3DB214E9EA72F12E42CC7F23A6AA144611BC1DD05C683E82F3B9D3F19A87D67C9A93C72814C3D9E70EF3EF7C9A77E421DAA9EB87B37CA9AC41C808604D05C00EEE1F2386BF4DB12430E421E0E88786C9F35C0B8B41A524CED55506EE3450E6921F9C992FEA345BE81D197A3A69628B47AB50A7877F6D019FC5777C731B0E18DC0A9FF7B7D08E39C3887679047E9129D84597BDE3FAA2494E20ACE16B15DA4EA7FC49253F3659F25E2A91AB60F38BB7872457EAB5AA4A04B3E1A0D97E46E70E7AC21E38B9D59B10ED7385E0423912271958D4D72605D25E027FEB15A3BC7D5AD91E5C8E7C2C55D37F8E5596DD33477F4E200423B9958DEC6FD918A24BFE90BEC0E545F1966E8D884D6EA9F079CF4C3A5A9BF105BF8489BDE53DCD4D41824E8217581867D90907A6945C29CD5FA2A344B67986EC275D06CB2F58F53CE66BF1B1028634658F1BCA8CFEB8C522BED3690C87532658841DC7A75BECB13504E71F2AA51FC36DC926F6C6C1770EDD7D7FBE6B563F3B0B0671795F807B63809E650D98D7919E021720BDEDFEA6267E2448DB264419513D638BC0C253E6E51EF826A9756F1196C057FAE69D8DCA708F380181C3A68E5DC8A94A3A4C5874178201DB5953CB7D83968F069CE5FDC72FC1E8DA905DAF7A230CE18581DEE16F5AB9975E815886AE0E025B8B0F8312082FF7DFD57D62B5570E6840CFE13649F7786B0E3979E0330A5404D37221A68984ECA939832C7EAD4B685025DCE099BF779EBD302CEA6B2046A8887A925AB9B3CD58CEE58FDAA8FC0706ADC7F053190BE98D8AC463FBD2C941278049D0ADFE3A902B23F3810ED9175D5D28D4F9ABF147775A8C3638CDED6D7149E761EFC095C1CCBE908CE43D284AD3FFE5181F948B8D7D1ED80547FF1418DACF8F81D3F6B9FF66BE21EEF62936547108F4876BF202F6FFF3953D097D3D121179B6510F6E825C66ABA32D47FC304BC882934D0E602D3C36C836BADD98B8E40B11B7C295479A701BBE4CD76504F07065AAB5CDD83C6BD20F16CB11152A58EE7BFCA977AABBC47728CB31E019D27A4278FB9B8E12D2308E68C6CBAFFB905D52C343FC86823F0D0A0699A2924756ACE9B40B2DBAB83325135F8E5ACB4A4D230535557F1690662433D3F3D2C8C555D55EB49E346D0AFFD9D5C0E25CAF22E5797F6E0E60E8C410A54FC2AC5C7B38FDEEDA71A0DDCBCD7AD762A5166BC0D2C96ABEE9ACF4301B1F53F1D21176E28D45A3E65F75F6BCEB8469768156E7ED23E46E357884E219046EA47B6FB45DDE73A989E5040FB254DACC46C2AC8DF6A16BF95E926385E9AA3704859FEE1CF772900B0A49BDEA86FE9FDD6B9969BF0832F95B7750646F9E6A25761581ECF0DD126DE12D88C355E1F1A3746A2031B3727680E546CD2B2D4D619712126DF8D778E4BB9C0EA91C552C300F19182BA7A3CAF9B00A3548E4D434867B30266F3C048B4E05DC67892FB6F40834B1751C95355A1F1693C9B6B2D2B169861541BD716F8BDE72DA983E9B6E83450954B245887C4888AD49F7F699E42EE56C3755E1251FF69B34D18E8786FA9642469496F57F67FBAA740DA768A93C7DBE6538F53E538617EC5332E573732525A6E9C4EF251DAF0F24767A3790069556DAEBA49B6BBEC5A523CD2A1CBF739311AC12AAF59A38F0EADFF8B8ADD5CB82F09E29649AE28F4FFD9F715BAD21C5662238B3646DF10D1447E9FFBCB61BDCDE5712C2AAC862EEB4D3F2BC376CCD42B38979418658E898D61BAF6222AF0041CDA978FA7AE515B090943F38DF4B5E54371F20215A5E7FBA528FB4643A9CCCCB9E7B5EA173B346DD972F3C4CE3E632FF2ED35F5261FD935E2EB0C06088B73AF8188F26CF00E9E53992D6B1110B7B3551774FEC1F7738C8EEF4951CEDDA6080A58BD04F2E0E0CB1EEF217621B81B393C1829893B76719AB1265B20ABE6A0B0CD98DAEA196EA9C5E4C78F5F67C638E80AFF4EBD28FAC77AE0DE6A569252BE2786EA7F9FA8EEF42A31899BEE3663F8B20547A2A4BC22F97BD21ACF955A9A4AB6C53E78526B7D413E3ED2E3125541E96AE1D549F09A4C69F93CB1F73FEB7E005A1EDEBC9D6FFD377E13CD5686E553F6F1667C0C33A4BA8206BACD2CD88813A4357DA1F0C79D0B3B849006401AB64F51DB040BC72A3F45A4F6DD59F3495FB7185BB2B15761E6F2FA29248CC308EA0FCB39E7A27702E0FA652354994D2172D4FA7CA49628C27A58A2ED181EC931894BB989F60227DEBA75938212450E926FFA773B2EE34BAC93AF229268DE3DFF6012C7C89C0B70F344D77D8DA10E7CCB67FA4144AFE76CB2EB647E157D13E08BC7B088D788E57EB176C24E22545962DDAB10A84C0B8D8A8AEB1229FE69C92A762D05F9C89072C71DBD31FEDD6B61BAA1E179A47D4C26D5DF73913B051B1A6604FBED0E63BF1051B31574D9DBA2429D17845B699FDA09BFFF5379B5108F1D768DE4E80D9D26E67FA6E593AE41BF0589933F0F4F848ECDB45C076A1B30C88BCE3E01E63CA856B9AA38F8C9B8B772C2FE021AF31303AE1A4B7D14D6FD56279C687F828EF0A6908CF632FAAA345A5CE0157066738C9F4BD8AB8C4E41251846F443131FB88BF3D445766FDB6D608248E964FCA42A0E173902B4631A0B8DD8D20B2C5D7DC0B891AE7A53832F534654992769FD14C4FF98621B01BA8671BFB0EF4D2150A47EBE4DB13AC8BDEC27B3FEA5B1F65E72CE0B45AEE1DD36DC984367BD97FDE3E0FA7711ABE824D239093454294DA641647469BE27C6157E0E91BB9884A22826F283731958844C6342D61DB9D031DC3B4D084C9603CE59D1EF645414C4E2356BA3FB948636AD597BFEC723849D2157D02491A922D74607CF7942F122685FFE0AAC21DC0BB42EBA513E57E864F86B64A7EFA09A5B815CD84C81AF48972238B68B04921D93D38AF541315C8F488F7B5DCE94512F2F7487EE9F97DA5D89D8FDB6686140DA64160F3F2ABE348EB875ED270F6C61FC2287089DEABA9A36E09CC86F94AD486F6C7E238C2DF681C3A6AEB4B0BE06BD6B1D95BA66AF36D3B654745A2D51D7640CCCCA076C987160F586BD41218A6F4D4B7A8DBE41DCE721F60457DA1BDEC7088482EFC5454EF049E77A9E7CB8DE7436F572E9D505FB77FBCD7F375BE28212BB1BB46A30267DBFE4659DED69061BFCDDF7562F7984C98E1F88564F9210951836F99758D15E32A4866F21E2B6F35772F85E20B105205F80DE02455B0CF8D53A4C530DB3DD20162CEB901D9ED719EC81DAAE3D48E48D312E19158A3CC8328295FCB57C5F9919FE918622E922C16D4C94B8AA6FCDF00D7208547B89DF3DD4943EE86AF5E392992E994E3D07044AF419F93F462516C91AFC975D940A4B92CD800E994695786BF5C082705C6794FE911AED74822D337FCD128E52862143D67A9411B6D6CC61B2C5AB6AFBE191379C3CD3EEC3C21B8462DF421E768C1C37A2432A65EC46339874292C8F30EC9CDC39106006D6A74092D3F2F2D60EC22AD63BF5BC3E232F3C7710A35F9FD05E2FD10C46E3A46AA9E129F8C4E58665D883F5C3B0A09767B24644216ACF265048A74A712A3D1C92CD76F22754DF27DEF2F591F5C235D360700271408557DA0B285C8EB13F1E17BB472B694CFE768D1EFC47050220E20A4731D479BBB0D730982A828B63C5E4804227FC26D4CA6DE2E5691804FE4A2E4A82AF5946F8BDEC95968BD37AF944AF6DACABF5A6A239C17C64A71B779441C86CBAE46460888FFB0785E3DAD9B10DD01BFFF224FF76D95299D9F4AE1806BE0DDF103A164750FE02F0C253D4E47F9B7059AA26935789ABF480C05778EA6E4A77D3FD72054627B70B012311B37C8BAB89970FFBAC7CC08807F1D76D36A1FD6C4A1B7FB275A94B4395CB6BEF2E99A0B846F7DA471CA46BBD34B322EECE84198F2F05996C833FF37178AB6C60A72386ECC656D53DEF1DCD2FC19A92C54843BF6CE457BB16FAAA3BA29A3C2D2E25B1291C694E5489E2673904A176F6EE3C23D221BB041EBDC2C39598F67356D0AD59BE63361F717874B549DD93E419E97D427AC33D88C3ECB95BDC650F765610B12440FA46F360719B92DDB84786A558554602989860B096C50788FC543DCB976A61ADFC583F80FC411B3CE7C8A4FD63B103AF80D17F2BCDC438FD2963A8642A18F333A7114C71B3B5C1D6C354F10DFEF6AABBD953A34CCBC44F70F00C7B85619C9848F07EF108C01F557651A68295C35013B9B02CEA5C4E730EB38093FCFAE326DC7B9D9ADD9C3D9DEBD4BEC591E015E6119568A383F1E82B94D8162CAF443D92E54714314E1D2AC2FF8B77A5855EAC60E247C4E366D44F9F1AFFFDF087F8CE82F94CE7152535BE28B23F8A9FF70AF922CD52BDC76EF21BE1559C5E7E303CBC26311732416E2316B5E6925634F17FF2E77A70F68557FD09424A81F8B24F3060979B8B10FE3A23E68BED3C4513F5765EB935B14E7EB71BA8E538BF128F0475758341C0B2D161E55DABA7E936D60517F58E3B94D43153110D3B4874ED4214615449680DC5B1932EAFC69132897D4F1A8B6CB7AEEBC149C1AB629881E64FA599943A2DF763AF2D5C4E483A1065D7278B91E725ABE897F0E2A1FF572A90DE4A6427ACD030B3CCB81FB44936269C8F218A8554D488431FC399266E18E2287237824578EC5A2743EA914E2488358E9EB1B6EC877FB2A268DDD64984D594016573BBA0A5589B16383FF019BC62D354EEEAA480F411A988061B1A9DFA65C5A1D34370D961259AE19218F4AC2A62DE9F20999D5D2C6AC946E13390896A4006DB267D0F21C35BE916EBBBC4DF9E1FD8F2057C3FD2EAA35363AB3B9092D1F569CA24B2893E50847F8924B16F199BBCDB24C77A82D8D1932DDA22BD40962EF0D39E08D6E5D4C3925B9993271ED782DF0E3E5322A527177255B3EE209428D4A31AAFF7E0C824CD2747787009F95B4ED549273801BA0DDBB21587979288BA85F429267336A9AB22AF952C9D8E3872FF2D8C381B48628069722EB694E6C943D421869DD474D38FF2C421C605F1FF0121A2078F104E1D17AD53968AF99AEB39A32316087F8D57EEAB4B1FF6B3A5F1804A25E9DE787B35AD57DA0C2C90AD60D9B9754583F49104F6412D571BF49F54071FD582641F051985DC7B2F6C51C636987F4A1E2B5D3F25E995B4BC9ED15B97A883D95149A0B6861AB1CF7A669748C5EA405054B5B3CAF5B6E7C17CD9C25338D0C87145B98EFF693D21550AF501CE377B5C892905FAF504DDF8D59495AC852DF1DBE3903B04077B139B5F108CC6B9C82601C5A79C5237062301BFA3F9E4B8E90411966AC03ADEDA6D753988C1BF259A6FDA29415488F1EB02875C2EA046A7DC6E1339E86C8381E4CCE6C2BDE45F7D821F807509B4D82AB37B3DC87EEDEEE9F6391158B43049920F9A07399953D320929E2E806F5EA0CB126A95CD6D89628FEEF5FA103B173DED0C8C752334530E5FCC12361150360EE6C95241EB65CD84CE05CD2A2ED6B9BE97B19BAFE36765A5E6E28BEC2E4EBD868DCA1A2FE4479B8725B72CA5F618FCDB3DEB7DB0B089005B0E33D8F78D4D64D7FBDF9633F0154B6EE64BB4415558FF0C9107C20BD120B17D619D3704F9740F71848D4E10ADB432CFE16DE7B2E7EEAA4B3C62DD23D3B62DBBBE3AA765C18E07890FAFD23BF44A0E980E2C495F925318E58D7504F7E0258B6DD35BE1A98E26840C8F41B6D08CD2649DD3472DA89177701C73BF06B1DC9D8463EAC0A6685C31182AE58A624629CB38B262E6EA7ADBBD041CA1050CB9A293032225DD140A38926AF357753273180B5046DA7D8F38934DA03C79FFA7BEC6B2058D9346BE454765A3BCF858A506BEBD25ED3063D413631607487A589A31B29FE2FBAA8C2D1D545B775285BE81D3A30F994454723783EE6F501900968782A52120A1F7E85B025E3272A383DCC9A843A69B43FA6542B1053CDCCF0A0EFAA31217637A398B71B94A575645282813504CD1A679BFD409A475FDA03E8E13B8D0805F557EB2984B85182A69C1F44E8BE02FC003919765B2CB6CCA1D756BEF30A8EE1640FBD049B42355EA6972A6295E5764A47700CA3D7B46825A528B3EC365E142045DDB14D5999DFA601377BD05C3E14616F36BE360232A9B29C8A5A175C91CD2EBFBFBC3DF46C00372D35E76133A4A25E7A8C207373EF5DAC34E704276634DB1F1BE0B4FE0B564BEF9FE2123856339769347C2A3CC509AF9EB25C40BBF5042629ACF94CAC2DAF9D826C27965B0ADC096DB6184BEA5DA569163EB6A14E7AEB2F4FE7F8916C622E62DE6907B5B19F58D59622BD91A3391F4137169EDB8E662E8F2966C76AB5607DC5724AE6C165A39A2FCA68AC7FED2A7034C8E0DCF5F320C01A3E5CF81FBEFD8AC956FDA8F72658FD6DDF62D2FC95386981574E5386A6484974A18AE3FE9FFD29DC7BCD799CD4F7D0F6982E75CF31DEAA04F24DBE8762981541CF7013E95A818095675D010FB5ED58BB084B04AD9DCD593E1128E4982D668F9D867B7F7D59A3A4323DD292D98288C0400F9A36E8121DE1190F3ACA04208ECE242E89EB7203A0AB64B9D77844178FCBF8E514EA41376F86BD0B43DD04B595F1819F6BE4E6374126BFF0B2F49278C2CF191B6FB6E901830F70A84F87F54C2143DB8227EFD5AC72D6B826FAB1D9A6B453E51C0951C2732DFB00A386EC98CCC5C107C79C59EC7B4B98459C3C89C9EB73222F875AFFC1F2E130524C3A8CBF126D33440713EC3C818FCB6005C032F8816148C5D449389A846592E7D62E2E168984BB1DFD52FAD5C5C618954B5B0313866060BC2CD35B60A5E0A151AFD5732BD682120FE728C7A39496058B8DE70F4892CA69F32B99E8AB4B722C041CE42E9CC4BC8F4AF3F59B134A37FB83C83818477AAFFC977CFFF761A6CDF7D5121A5C3F2F3AC77F80094AA865A779D95EB55FF645DD04F05E9CB9C301903040108B0F180BC649BABCC975B837E4275D963F3B4BC1A9BB0AA37EFFCA83C3D1A160AB02AE1E881FC1C5FBB5A014EAA2B51B44C6275E6833535C5913B964E17FD36C24DC13EE3F60E7A8D6FCE44F762ED35D6ECC7C5CFCC312AFB56EE0CEC88A6AE7F8057AAE7DBABB6FE0C730EB6BA74C371B531ABB8171FA8E8683B4D0C6E632CDA5EAAFD50C9492565058C9AA7CC4627A84F58E77E5018A70769219F2FC3FFCC3F9C44257B699AEA8BA052E649708CD73558991692787D7F952FE17CC87DFF9780537EF469F25D32E65F07A7A2D241FBB66C15ED925C55CE262CFE5412D4A86C34057E5E07B0246635FBBB37D42F501776A5787435CC2FC6656B6D4727780C5B05FF6A114E2F938C2DA502DCA17EDE3CCB3E6CD66F2C78E0E0212A08702C29A37B6967A5B9C22E780D818D24848167612AF5F60FDB4153D083A91911C1554F070414744121D31984A1A8ADA8F65910C2DEA9E12550425BAA3BAD2A4F144913D38ADFB6502035076CA7DDB5241ED9BBD939524C0AE24C2441028CC1B0AC61E23C4B1D5ABF6D735404633C08F929FCC114E06E8E73183C4DCB64D898B05AE6860A0D2C35C6BD8B30F1738DE0831209298EB6C78B4BDF8666991B544B227F9FBC729FFA64C2A65981D10EA917A3B82447F65F9F80F1346C1D455A5BCDFF07A3237470AEEA2696BEB9A25F1C2742CC0762739E51A59D3F7C83C2FF5B252080BD7724600FA25E0EEA2E2639CB78887D9F8C3365FEDB9BE619837A0A7EDB24B9E5140EA06D492F2D6D22AD194D8F6E4D712C4E6CFA9BAA1E8CD211B72D528C95376D3784BDC97D60BBDADE0725EBEB0969E9D7E08E053969911E1072E47E0FDC3B1375217AE4A688F875B770C328747B6954F7926035FBCC7AA0515A6BD16678B45B8B43BA1F7A5428CFD9DBCBFE9711BFCF4BE0C181F7527920F13E51548BA29C647726931948B0401EE54ACF6C5850D4C64E693BAC02A2EC891077E885D5C9159C2842388F30B60139DB21285B321E8EEC209DC3235E6ED165723308ED3301AD16F853C7B5D656A4A5BB6F071E91AAC0E44DF399793E5C803047AA6EC06AC1A642E7B89E7476C0D2353763C0A5B97E3F3FCBFFE369F5494F9B8EA0CFA4312428118FFD6C85043F436D3CC7FD2A6249A2142B28FC2D107AD7DE74D16D95C4CDDF23A7D7A456D4DBA703816605EDAD196B23D4C3F055CD690A1F2DE57701CAC3AB06D9FE2B1AAC5EE8531A77478193EB2AB3748AAF33508320EB5F19CADD491A5CFEBCA7121788B5C46E3BB4A9D87719658CC18812539BFDCC120382E26EF898DB5231FAD50EE7AB0400F29EB1785BD21601CF4C1C00BBC2E5FC8B1F91DB4B5D5F35BB342330C14E1844EC5C53EDFFC811B5330AB0E20FFA822983DBB2550DCD4B4B1C697682E4AEF07F1A4ADD9F55A7A8DDB4786FF2B20E27B0F95DE320195567DAC294A4FCE1203FDFB1653B687B124B423E69B708840352BEC6878942739AADBDE6558086BC1C7C5646370BA28468FA6E1981E1D3384C0943E4EAD169B009E96B54970A84EA2F92C74D262F7D0CBEFBD30A9B5798C02FDDF168BE63895B1C88293629A641A42205A9C3EACA790CE5E73792A2CA4FAF3ECAC5ADFB500F22313A11B128CD001D5FDB08F074665BCD3950CB690E4D83A8838D6A4A7FB204B622D378E224FF714FAF45DFAA7C662C5B0A4B75F3F56671E9387330E956D72691D6AE39315409A0639ED9E3885C8E1C938AAD59B217D65013EE789DAD376042D338CB27A4A479D7D7263D770CF364185B2BBDC9C11EB7A9CB600757F67600AED4411914746D812D08F483F8E30F659A05F68C95C3FB320D7E41AAEA449EC8DA02B8A21B8C3652FDAD74858A81F1EE969697051E87CDDA4958ECDC731410F808EBE3F34856C9923973A3D3448ACCB3D3EF2687DF593494F1922DA813DE7F92AFB372A919D3222DA874E1CF84AA685F6C2DF115470D3D6375B2EF5267809CDC573599B8FABAC859F878A82E27344926798632D5A017EE5DE4514D101E9B4408052CB3291FBEE7C71089D64AE105372D1B2943ADC83E4E630916B8383B90622A7D38682F91C99DEE893EF5FB519DF7660D1A1A2F4BE7BA7A00A517605F6FEDDE5902201817FAD5B8F61A038F52C4782D1890028C5E666B987C669D29A1FBCBDC0AC5F0C00B246C4E3BB9E4C9A741DDF300E546459C7C531232C0FCAD66BD105B59D2DB016A8663B46B9DF86EA70551A26D7462019871FFCB137EDF97B13CA90A12B911714705B3F7E4053608CBC49B03111C4EF0D1BF7F3E95BB7C3355385ACDFB80284EC34B4C0081CEB5CF4406E77B33EC62E0E11E505CA13BDC8CA0B7F0A09B70148AB31312373A610976084B5B77E16A0FD3A10167A5C875876DE73DFA20CE47B9DB06D26C1E6913003642EB53AAAF8FCE64C237E8846C7A1DC0DF5C4E277F6BD223587F1CBFA0C199251708E09F1BA6992DC12DF69907A48A11A493038D6932C5FE538A9BD82A1E4C31B2F8FE0A6A336C22669BE344A7D5635659D5BDA192128B94765F4FD1043DE0565C3F53CCB1AC9BA4B52B8E4B44D808E59A83B3C2B926DD842008F74B58EB6DACF57C16D8AF58BD6CBFEC7C602DA81D23F2F402BAC348396F080518796071E3DE80AFB6119E922ABA4917A322ED3EB1432A61C171EF78FD619B8C00607F8A4BD1576D45A207D15194CA3B4B65D7E8DD74EFE1B83E7B5FC366CC1316AF9591C3DD3714673E8055CDE5EB2E59A4EFBF7A0302CDD334862825828CAD36432B95B5BDADCCB1CC4C67F33F9CA3905AFE1DB96735E4B61A3CB7DB89DD7D81E3967D6731C25A10A817CE788CD6C3FF663C01A6502C5925D8C4383AE8FDEED078A5F1C3E25B010497F5E3DEC9CFC432AE6DDA40E53078DE2C01A135F8FF9C99EC124163EF44616FD844F7DD9B16C9ABA10F30740FA5838066E4E7460CA6B5F6F1EDCD69C5B2E961FC2A4EB4B912BA4C6F3056A3448728C19422F3629238687A46A48D3FE3EE5DC07D1B99FA27E6906D22D3B2352204CFF0B0274F6C472C4601C69C3EB98A6490801A9CB6669EE0C23418F7C2749928BFB642D255D9DE55394113FF68779E953B87C2C62A793E555E99DAB0493CD897049296A4F6F6771C9372CACEE4ACB23E9BFE88824D304E34BD2FB73171BAB3CF64302903F0FFCF2A65AD8BDEFB25948B2B7B2D71FEC8538749610A974211B80B9AA92542360B25D236339FFB24CB54C5031DF275174BC369EDF30690E1DEB237436E3DB06563D51E0437DA5CD183858019CA52A69B2F53789332C25A6E84951D565002C2479957173F9F576B999AE98FCF9B217AD465CC44AA5E1A5494EAEA73F43881218A3F0CEF3EB24CF242283550EEABB86413A5895D360FB8B6D41BFC68C9F31975513E70D9EA939D54AEB60DAD05BD453854B547C251E9CF0319A868095682C372A732B81F02B0E953B4BCC3C2CF5C0A00E696C1BDFDF83127730B888BE011419F84C129E6DAFD26801ED4691CB519419D6D5309511C323AAFD8FC6ABD2803D2AA6E3652B2D5732E7D838DB37B9DEEFA2D90044CC434D22F7C8F6D578B1F9CD0130F818C9A94AB803BF5D62412C93C8A2DCD161FDC1EDC0FA09CC7DDFDAD29A2CC7ED7988DFC2DF6DE90E343CC2B96BA9B67F76224A9583F8DFEA86E939AEF85D87D4AF8EDB3F2CE7F1ABB74DE9503E58F74BEEF064A8D2281B925EE2D1F549563A273E869AB741C0967E6EE24A8AD0658B0A0E0A9F50C36E01534A377DC216C055BC705EDF899D58CD46E857BBA7E38A2508A297E495E5A8AAC2B272827D368051F7EB45CBECD32D6712F2D3CE3802FFC2ED3939F220BE19B339AE210523864E9F5FFCAD6114599D1ECDD684886C68EDBA6C248912801E920D018D834E7C09F4616F89D182FDC2ADA84490D1FC7488794762BDC9E7A53E248ADF1DBDBB3EB4F12B98745EFC1B4E5E6374A066C4B2F48DDDC029311B7C023B1655D995FCA84EB3BADEA8CC0877CEC4E14011670CFB67EB327575FB800599C29FEA7F359860AC71EC2F61076183294428FBE46D33CBC18A13DF22CC692CE2B3D41210E6364E95A1A32196E0DADB609C23D54B78E60FF7FF376EC5A2AA2E6ECE24ED1873B4C93820B878E05E6462DE0900F4864E2BBB5A0544C0614B31D79552C1BCF45C23002DB7C93AD3255808A113370B97A347B918298DD691E93D31E10A37C3F511A05DA8469EBA918935C7008DE32485ACC33E74A2937BE964CE3E4E77BF33AC9411AB931125C014E29D65496D4F825BF375E1ECDB9A2F5A92868866EE9DF153567CDF6E434902CBA9C365F10850D91BA24738B657B25FE1B6CE55BCEEFE50D545BECB365FF769F3F4CE703F0692ABC9CEC90DAD2FD66F8165A077A6AED0D238538C209F3F89ECB338A9D7E9072F95DA188ABFB6F51E026EF6654399379AC3B706742A2FAF159CE29E6211FA612F8312FCAA2A188321028F8803F5C4D750D0B9263623546D0093B6496E4089EC04469D1D87F9E314072BC7DB3A64416305D97DC4AC92E686D9442CD493C4D0F0D580A2579F9671F2BDD434F273ADD5E4F32660EB28FD2097B077E16BE8391548DE58009CCDA66D6C12A9D766E4B5A87DF7CCA4911C0B66B6AAD685F66362A053777701B45FEA361467D6805E4102F186C95EEBF61CB61695665E6B7C815E80F6B7C1397961890805BC39C79F0C8DBB8AAEFAB6C6B7542DAD2E83CD646926A326634551B426105A202A89A94DC03F3CEC966D1F0DD3B1A6D0A6B0A57721F699D6613714708644A9A30A9246B03E4DEA4A4931DEBE555AF3517D92EFB6A07D5C4C8E91DF157DA0C51733A55A797F7D863CB354D7D1B94290DBC41C7B983C6BFDE63818C2529CE5E79489378ACBEF8D5DE40A6851152CBFD6BB2CC65F05932D00C130C6DDC5C1219AFBFA3FBAB7075374D1AE6518CE4709FB95806450FD6491D85146D7908B6A6DFCC2EF8A0B18588B3E70B1732A77E1E6DAA9BDD02A8F30CA176328DA060ACD6F8876B9BEEAD81682BD71D7F0725AF43D9940037FC52970988A480BC509F897193C76DABEC7BC46F6066FDA505CAD9FD1EED3F7A39A0197BAF780AF3383B7622E59C37F0388E1D053F7070006FA984DC74C3135DD53F6EE15D9CB096A8B4C740F73CFD4D187B187722105CD4F9E8E7B9D4A2F0A8CAA7B238E0E5F4B8466D84D05978338AC3E088A6628F3598F3908CFFBDB431E4DAE1DCFC8FAA8D64AFA3BC4E669FCAD9D53722ACAAB781090A6A360689BB3B0A5D4BA485B9C1F122F20A24299BED895093CCD3C52AB78D8B1696A3720379C3DD2FE21C8B3C55C21B12BAA60DD2A36FE5375F9B852608521A3015361B2A47889A9016C1C006604763028DAF1C629DEB381BEAAE87BE9E16FADD462DBE029616E78EC50DB4DD3437F35B047A605B7327D0835D539C687F7A235FC616D18F232610E14BD49CD3A5C91504F013A82A63907F1C9FD49935BF70484EA3FD97FE29DCD2B64E04CC15703B025A43EECED36B1C08AE08780B3BF0AF8CF7B90DE9EBC000C8F1388F261272DC605C3F1D8019B87157173B5A651C2B14D92019F5439DCAB34FE8A65FA203D83E012CA717CE246425A183F30AB7B121871820385E3375DB5E97806A3550092967FA172CFAE9BE488493B475DA7795209F0F99303E010144ABD01FBAD93D4F79DADAD9A0C662AFE414FE87AF12A9DDBFD4F2181D941D29B24686754F429ED6D7DB56A0A467FED88125488E3B709C7286CF0D09C2BCD130F9578A2326BE05743F8B055216496DAD811A79534538F9F00F5BE727C3391DDFE4F96A890775A1B6AF1DBB05AAB925C6F802A169F9130CD62A7A31EB4004B9D4C64B5085C645D7EBBCA59E770A673904D30852247CE39A5058D88D79A983872456065063FE1233E21463DEA07A47F0E5E5C4EA29E5F83CF69A4CB0C0C92A8D38A45BD9FB6B0E82265695659D0C81A5A7A88E5ED5105A22C0AEDDA0F8AE15FA8BF07C00FF5017563855483E9505225DD7A5816700B258662EE9ECC814BB3CF65AD550EDC01BF1CA98C2E201EFA768D1C828F39050A20E80AD02959CF08F01E9A4930E5864A749E1DD8CF860F1DAA8D4A7147FCBFDF8BA86641FA9DF5D398607334B307B9A0778DBFFE882504879892387F090C42372553F2CD494A885F311668890F6F65444417E2116F980F14D34CD2CA47AC01BB12635C5765DEB35749CB01A853AE6929B37D7681685BADDB5700F676115ABAD06361FB8154DD2BD0249C963B702C5EBFC13E069648119C4B2BD8513B73D337F5F7E65708E4407D28E2A6424DF0C78E9E4743B1D1B65B4561A57711FF74B4D7EE8CCBF80BA83B60343959AB4A60A0885B8059650E44E46EB07715118E8879AE6BE3FFD16C599D0AB2B0E5E369D768310C0B508A86B2948756AD10F626C6263E0BF461A9511BC05A575C2116A4880404A78CCF7E7012BA8E1BEF35B26DAE14C8F6199510D099ADDA48DD4B8EFA4E3F607349EE04FB5DA671FB3F28635C398593AA680C907C0BD63FB694A0414ABFF1B2BA03BA5E3274387D7285BD691873F5F456405F3301BD0D91C6C930815025D086D84DAF02E1FC3C0787FB93C267739AA40DB68404DF833EB599895A6C71495EB264DE0A4BD192A7787E0DDF2978E7CC12F573BBC358E6D0CD8A24CDFEA9C9E4B7529656F93C68A3A378F47FAC3BFC269C6A751338617C4F4AEE3DE6AEE39595A3A9C179810EC808A837D1EBF6FA284F2F03CA237725694C2622D51A7F278DAADCA0C407613A20C92608C194D3C8A9C33812B0854DFFE776B737F04FC335C0525C15443C2772EA6FF95998BAC1E70D92B532C4E5393E059ABBEFF6BFACE5C361C3CB15B09AF81F218A9A46B3F76691E84AD0C43394C7586D0B9AF9E3D6CC07160671D6105EE6E4AAF2E837277402DC4813A83C79764A496DD0859FF50E33DEF0E9D7463853D1832644091DF3EEDF4FE1F561789BCC2C3084249B3FDC737448C4DCCE7DE8AED9DEF8195B6C4036C2CC13DC7153E2E752B75BB1F2A1A3988BCED992BBEA1461FEDE24977D2F1E291FAD2498BD7FE4E3FA11D179EF5A7137F5537EF2F8FA824969C6905DCC8A8F8116F005AC8AB53855DBE4E79E7BADCE435E27F1C75AB66495FDCF9DF91977FEED04D0860014EC76EEEACD32E059879877F700E89A9B76A13C01DC2B23284CBC411FBBC87D1DC4A2C9AA993D4214947066AC805C75EDB759EB2836C6FBBE0CDCD40CE038837776A03FC2873A48EB90119979218A0D1231C4DEAA75469F4B0FD81C9B09DA99538C4DF8172B5081BE4B9E6816C832ACF83C76B282F649BB8BBDD0D7A23285B65A5B78C17190DA0D8B1236950FD215022F2197EBEED03D7768B75B63C3906CD68BC992870E0094383484D2E12B4DF2925294BD2DEFEFD7EBA50C4BB0E7E5C6AC4195AFBB551FD43862F7B9B62D31AA2010C43C7A9CAE0E7F4E05831197B6DEE92214B3D2F11A869D5ABC794E8CEAEB1D4BBD41BC285612705E9D0DA7C693A7DAA87DCE5489803E5EFBE8B6E258A19D0BFB3BF929A2F20276FAB5A8AF4295AB9E5B17924249E875937818079E4D1A8982C444D80BFD1D58806E5D5D59A2C46D67DE99D23BF85839E58E492BE4BFE4FBFCC332A2B26AE552B3CC2F998F3268635CCB5DB655A084BDC8C6726EFBADD4FA4324DAD42CB349AE336B0A1B3D69F10C9A71E48EF1B1216032CEC812591778BFCBE5519FBC4997C56426CFB4534D9FB42C4217A3B5214D76B7E4E96FA43A6799AA3527AED795DAC0CF7EA277732D1F6492FCC5810EF3D66F2C9764CE08E6D8193DE10FA5A06D7207B8F9B4AE58A9415B34669DDEF09EA35E2E82339CD9C5C079830A7FDC6C89FF6E133BF26D0BF419F81620CA6DAE4A1C6115BDDCE1846CDADC84F7DD0A43B27B6422389CECF5F7DFFD8ABE9B568E7762BBAB9D2E094827D172F20CC3118C9E6B4FBF803839BD92EFD7FBAA335C1A3BD06883ED7FF26CA85CB6B6C283EBD568B2AC5CED20822742E095ED434873B32FE11C0C0692D2FB84C31D6EE9A2F06546B81E54F1980C5A44234E547F1B6CDC57B3883427C9B51B9EF51F935FDFEC2FD070DFC6853B5E2B2A016786DDFB5EDD8C09114B145BF1C1C8F39AFC62360C83FC466CA3E246B157CE05CF210263555304370D9D435C5F92F618933B68992AEE0B7FAB05687F31DF1E7906A5BD4A95E6E87810F14A52105CCFFB6F14BA29ECB2A19045063AE3EB42C4C3BD411E5D1A9A81604A369EBB637FF9CDB8CC844D8BD9FC6720621F14D6D9EE941CDBC6E7B5BD799DE57874D16AD052351199715425FA1AF6F22F1362AEFF7DB8176D16712AA6FD1AE0AECAA5F3203A84225155D054E9203D5AFE963E37064653A50232DB60D3B170D4AD2C014F8B71560C44F6D8FF63987D729421AA963BF1990369DE13BFBA47FA94545925E622D32461C23B8873A298C26F2C021DFB6E3D9ECA8DE264229CB98E0F03D84A01EA0331A050761C09AB94DA4241224B7FF069EC0B0D4061026474D866DAB24ACA52DA2256D8B0FF0D161A9BF5555C6E6899A50168F3F624589D2439B9F26A6462553C5735B1412DB5D71DEDB1B920E22E64B3120B25E9A51E06E173EE419B92CCC26BF6109289B2B375DD379D301555F58A1D5537A710536CCD6BC9426239DECBBF0AAE81B5A03B7DBEB25544833EB6320C4AE62FB4C94E5D274F3A5BA9A65F1AB049F061298F6DDE66BC04C15F97EF8605E601C891BE33A2E9BA7E76D19427ECAD56C29C3AFA36CC4EA4CCDD94D5C7A050212A14E7B8E9C44F1E3758CAD97EEC1DACFFA20C6C12D824FEC378F00E5AA66E7011A7741F0F57295920FD91C850F528D46F3897F8BC54ADAF81CA07ADBF47CF90B0971627019B6D5BE03789911B87999E65332BEE69FD78327CE200A0B08A08FCB5C7BEBECB27EE4E767287CC0CC59E8D5B6DF229592819E688AF36A1057261AEAF37435956CA425B0A44877D15864319EFC27BFEAEB77D49EDE894CC7D9BE4E55DE1C14AB769538758E24B87A4965125B304F79F766222FA6A2E55E674E4FE888E4E9029C61AF822B5D4B9A305961EEB10B6B1B1838629CE0AB443A34851E51CC32C59CAD123E937F089BFD76CA7C4B82841E3590D350A4F661AF46D405BD2BB94E1E6EDC7E8FBC2871E38EB08AC5889555992CF84756F6C87A20662035D3F254C23ED3FE9C24E8255C56615AD7B56F0D9FF832FE8FE265EF49489CA69177C8FD8D3CB48A4D03E68F7C0DBC752E9E3FC53A5D6D94EA6BEEE1B8F3BE8599051076ABDA74630DCEF47F62314FD05DB9D22BDA6B80674D1E97701BD9623EE8C963927D5D1801953DAAD66837B4370094C412A5510A69F9FDFBCDAC817FEF0557CCD835EF3A3CA06C157967F4414D172F159EBD9CFC0E4DF0804DEE87F577F0055803D45A4A270B4E8935C0596E6007F101987E90D8B2EF26071C3B33B6158DF52A40C2AD7FA10FE65C109B9E3C136C4B529F8A436D65D76525AEB6486C81742B1DC6D466BE41A1E9658392F5019352E0E328D0BEA00DA1307CC315BB804E77F9627DE8E898E37CCA8AE097DE4555515BA535F0D2DD20AA555B252172660E80958EFBECE9568168BA9C96E6809EBB85F6235BECAA180DAA79C787FBF7E7EA6AF46019F9E7656B7DC42F4D6F7CAD425FD50C9C4A7EB6A10DA22B7DCF557C01765A7576E667E9A38D2617C92D1B71D01CD12722B0EB500B4123F1011EBD2BC98D4414B6BB86BB1E4945B8695F59C21EFC7E632901B90B411207BB83FF3F30B69076EFB5733FAAE539B08E9FF842ED442ED4E2A43E66B5B6C41E79F4FEB7FB46D64D81010942945784E525222E2D4FB96CCDEE545ABDCAE188FA88A4C724061B3F466CF35568D99B4F86F6B6290E8C09BF1E58B2A5187E2B9C56C22855F2D172F8F58C4ED4B3F7C224333039A47688C09BC59C7DD8B5E0BF99C065A4DE7ADFE47A6F906A4060773C02D2E5FA8E885EE399B0F6999E7822FC818A83A4FF03D7590147131F870C37424586A60D788AF8DFCEF2C1CF797563A914121E2B4924EC500EB46C33B01F27C3D413B1044682068EAA17F769A65D98D8ED3DDFB976A20708098F6BA0BA983E14D8DA4100343CCA75DBC217334F027110C275C330472BBB61254C22E06A92C9769B944B129097B4F2E527370F0CCE1A4CAC61667384D0C50D6A5A675BFFBB1F96C2EDD3F94665A6147753BE17FEFE253FF62D4FD59C09B34AA9A1F8C27033DD6F920735AF76A3FD7C998F96F269A7B47CD2C351AC2C3FA087A7B6E15E44F6B4E416995E21B5600CE85F34F7A839A1DEE650F3A7DA2AE63486D028FF69A5051FAD73C691ED97AC867D513F20FEB8E76F0DE15414274B8CADF041933C46AEE55E6552D4A79BF85DB82A5D612D8B14313613A61C9C4A26EFFF0F649D9D8B67C1FD2D9F670EA4CB7E60A102A55E225F56D223D3A523F4E68CE5040715D6EA38FA8C41292A052ABCA7EA92ECF0B5FC5D0EBB2AC7033AAD6FA8C97EC5EF19EB6739213644DD63F19ED0BF65D63A3618F84A3E6ED58BF00FB43F934FEF1B2778E872418BD218CB653D370985DC077677CAE3D19DCE9DE0DF3A74C23208A36A572FBB78396A9312A459836A99C07E7A645472E4D2AED0497C15617EE65434D7C6F00E5438FF81D21440A04BFD041EE3693F6863C7D8272C1B111A3CFEDE3E2DFBADF582EC38BBDD551A64D192773DCF3D026097664AFC1AC45380D00BD3A49F231451DA0E76202E0E207FE867697C56E143B5F3EBE3B1996C4F35C495F9F0315B613E7432702177393F39EB49106553C4217CD6ACBF53A1D520F9313BC0B98F7D01DA91E8C046A410EA07BFDFF63BE0DFEF043E099987EE4722280B1361C14DE7A7B333B7689225E3320327AA8BEFDAA3B126F79C5D394F3E7E9390F99CB0689CAA90DBC7EE3CBBE64AD884D13EF3658C5E790B4333E823CD2662FC1409B0A3DF64B4C751DAA23CB16811356E147F49804CA489C6F9AC6AFDB099A4A8A4764644B5A2138902B2A9FF98864B0525A8C90516B926D6844FA3F09476BB1ADA0836F90999ECDCC4C69761B3B5E65BF967E0B199CD9712D5E4C6C2D13867E7C331D4C684988D2BEA25F04FC3525C5641BB1CA99D332273B125EFC8431EBA9CB556E8CA28B5F0072D13DB388A7A6D42498AF11D531B8968006BA13E696A74F325A928FF2D532CF9C89420C2BA879FCB854D917DDEB65AB59D1947E554BC0A4932F1D226BCECC7E4109EC5892186BAF08529648D4D1B09E17F47AEB9D21A916E7183E341CA0EFFC91392514DC863D52C1DD1171543A8FFF10A5702C60320BA499749B74BB32109328100BCA863866329E31D78ABD8C3E577E0698FF83B8C19B4439C1D2860014B2DD252BF05129CAF2C6C14B1B34927E80B100A3400483927F4A7879F6DEF4182AC719F28F57D3DC1964BD3A0C20E55D0788569E00AEEFB9494EF3E4B36C6AF0356104147112DE423A97E48DB3F4A29F545B318DF4030DA4E9B7938DB9773AB3F3F54D385BFE274E9DBE588539A2F1DB1EAE5DAF356331395D7DEDDDB3D2191B8D9CEB3B1D484B8DF341786239BC3FB660D65C691E147C824368CA7EAEA8414B1FCADA40AC3FF521F2D3BB47047C42C89C05B557A6D5195D4DB004053FF6275B0F635EABB364147E9260BC25F5AB4C300F42323798E7FEC180133A5C46E0A9F14AD2869662242F1D46B98625E1B665CA603B8A10AAE87D7236AE01EC58D111F0AD422FE5FD789C3FADE40A9C5FE8A2EFB4976AE2EAF1B2C34F9E8DC225415F217DF9F85CD8DAEDFD15FE54587AF74AA0BBE7CD376565B11D4A461E7AC6B6393B8520D1FEBE246598812AF0E7417EAD2F2A187A17390C30EB577EC839E6CA14215408056ACE512C219B91550BCA63A6CCFE4257C3A8FD09D46FC3BF09BB2379E7CCEA6136E440794B11DF8BA4B83AA442552B989D61DFB9059F49069C47F6B3F810930334CF499AEBDEB82DD982E000253E01A3733A34BDA75DB3DF8397986D625A8F7F18A24167AB96CFFB1ADFBF15591B21842B664964410EF937ED322EC4B7288AA0737BE1940468D4D5A84443EC572A685E65AE9FADD3F02499DE40775FFA3C475C568309DFD5F9728526B27C57AA8E11B51D34A4D7F463CB87868235296C0CC01236E10A175ABC19F86E3063A804276AE5E6962D71908266D367B50CB58F711C36292870FC6546352975350DFA21F54F7F98C5EDA39BCC9B8993EE8744C6C700ED64DB1F1F969A170393001D2AB1A999ED0BDE73D6B9D276DBCEEB953077D44538CB2F71982A6F030272237C2542D47CD3851642312C4B34B4C29E00FC44E8F5337E0C327CCCECE7617C688FFB927C714538B9313EC8A1602567C6D2B66A2728DE6DDCE7151D51E6FD7BE006F8B2B513BE9D0E9B89D23344D6BA0A032F1456812BB81600B2806F5F89733E940236CF2EB350AD7D820C8C348464EF7551594184B84D4A10663CA585004EF50A0DD0856F8E490805A397A1540E881E6634C6A882CFC57245F2848624C9212AB0A032F27380A0F7376BA6E6552A8B0F592A4F4512C3E9802194A6B0A20D74093BFF02A95CA3C33EDEB516BE7FADA3DEDA423C361C8468852F38A070CFB910BE69A0AF9717491118B8D7635DAF4F9E6E5D303387ABF8BFE653DA9BD62B3E9056344EE7F87E27FC3B5F5720F983A37A93E92AF0F613C0FC88A9C4ACC76598461D6ED44A9F7948649D4670B1DCC27AB112A0BAF49B4054262AF086E61C879EDA4D68E6DEFDF2B85ED827DC21C4B450ADA72C6937B10F620AD6AA738B54292DA73DB5F224A28CAE7F4B92A9BFBC8C3C5B57A022EBCB447C9E37BEBE063C16E1EFD8337A0BBA234327C82C1FC6850935F1222F7CC5EEB7551CB0A49068DFE1235CA6F3C6BDB71EF2A38FD6CBD008E4F28A89C9BEF938421A6788BA63A40AD88D4B50AF3276CC7DC4305544D9F09BC6E91FB65157D5E37479E32CA2FB2593B15B6B8FECAD32CF5233FAD735C4EDB8F4811680660CD5B10DA5945234EFCBAFE82AE66A7938E3F7CFDBCEC93ACCF6175020A6F78A6691569600FC99CEDFE3447ABD5A0719ADC4BE75960E2C8AAD9B8E03251251424F2C26FE39CAA6B63B4A1111333F50ABE33276EFB22E5255C5F7BD7730B375DE9EDC21332B95C58D8BE6EF491B4A859ACB1B62E5D9C623050A864153964B56412C5E42FA122661F8F0C9422568B36C949773CE626D3A1E28B3A14662AF8A8E099F22A3EB660EBE296D53CF44A158668F402E94009F23FF0C3080E02DD3C595DA774B89BB9FBA6CB5273C3448A271097728668B3FEBF3DC7B6F8520637A225ABD29642210A9756B1089B606927C4BD3DA21EBB40C0EFBD6DDCD38581FD329DF3E329D0EEE8B8249648547B517A91CBAFA06B457731E1E985E4264A07AA94D367EC4EEC36A26521D1611D5C0BC09148395F63146BA8880CDC724B9A9A8DE905E2CF693C94B97579B18EF81507062343EF1075D9A4D5B641435CA6B4E9229B6B997A8EDC9878A627952CA80E8EE113E5948F7714248FBA27C6DD788A5B2EDCD6D8E598526A0E05FB23D840CD2ADA289E2329110366409B5C17C26565C5650A40466CEAC274F55FA055C894973C17D0DF802CA05BEC941D7C84C7CC9F59BC948EBD4898C3790D53599237EC92C953029F6F373A559ECAC76D7041C1669EE135D845B1B8070515749C4233EAB1E2896DCA8BBA154424E7AB53B3C743B0006393B91D3C00E2E9AF7DB8930E703082DCD4D52AB14BAEE5D4F3471E7112CE53288E68B909A84052EC09EFD4C68C09F49CF662B386988D2CB0F841705183BD91B4C19657007E1B4806CB3BBC6EDE891A10875FEA3DE7D1E2BED57378936C8E20702E2B01C0C4958A787E6023D499D1EC7AF33A575C086D072AFAB3E3359A4C3962FDE43A028376BA3EFAEDB993B0DA79A9AF699E0EC4A59D5CD6919A9E4D70DF921A28EAAAB2F44D534871F243C8BBA78D0BCF39662A12079FE6BEA1655BB7DD6852F2014D7F6462F979C43F7FE438C88EB1956628140551CE52AB7303621D7F1383C97408DDD9139CF460B0F0B45E79261F32161B62B195E13DC915CAC10EA6BADF2F179785E4817D92ED333107C8FBE0F9CCAEFE4609F20A57B5DF365C3D5D2534D5F0E6E991575A0CCDCE0CFFFDD195E0FCCE8178C7F57711D9652E6C061624E585CF1AB5179315AE58A03106CB8707E22E6B269936D2BEC548A29091BA513586582DF2C96FD92EADCC61885D98609A43214C01C02B0FC5C8DC124EC7EC90DF1739EDB2A7A4E9CB6523264621FA8D3FE57C165E82BF29832D518B4F86701CA492BAC76EC42E8C537625AAD1B7CDEB02A66EB3B8D9FD0B2A5683E97B3A05F7EC5605E6EDF905DF9A76E4F54F73023289F1DCC2AC27E3AE5D030CA4A6CF079099016F44DEB840D494FBE8430D9DA4BED41F27B30B1DD7A3601C4391AA84D8D53E93AD4774390BEB5935ADB5B08FBF4F6F6DF1E1D022249969EAB04B5013354FB58D4521868A31228F3B7ECE0402979BBA30C4ABB72BFB906804DB2020A2BEE2402F0D0FD2259732DBB8C24B72B0F16F781D2DC1D2FD2FFB720A8660D3452E7B04127F41E94D767463394332BFA1EC7B14DCD39560E5864B2E016B5F86E0B702D125853E12C9552B9709EF035C025227B795FE0BB4183B49D89B1DDAE68602B24903438D3CBCA837EDAF14E850D2A31037197A66C573C2F7309B2065FEFBC127A9766C34944123B810481D2D415DDA4B958FA235B49FDE3A087B34FCD4CEA1C7E9F3614D493058B7FBFEC7FF4E60C61405E254F6133971EA0B4BBD0048520D5B191E82162436EC31D55EFB3158E88B2A9FB33746A7618FFFE7E2698731C91919E3429E619A1E05F4DA8B5BA67B2427242A01B63B5DAF8773009BA80C523402A35CA25482F6776D9EC43730744A194935F2B45DF3738CF36E6A6B231DDCF24872A05EE6176FC65768CCFADBBFD3E3EF63779EE250360FBBE469CBF9D0F34EB7C7A906978911BB87D12325BC60B7F786F6786690CB3C0452CBB1250D79F1FBC243D7EEFE836550640404A866981B74AA6AB9929A8BDF4118D2EC1F1C32D0A2B13D1DCDCD8702F6E3B0A80D5C976259A4880CE655A3B3E53BBF27B49067791C0DE79177ABEA8336D23C64A5D0A239C8202BB4593559411C54C6347CD5B7758A629DF2420EE0237007B24100E695DDB9B22FD04C7C8EB12420E7E8FCB1785BD2160A9E552952C842913A7BE8069DF4A5090F97E9E334B71C47C547119A7642B663610238D7C32B1C181C45FF29837BF57B9FBCF182D52457A5645FEE8C1BF11679EE55482FC6AEFCBFE11CB2B316DE6A35553E122B14F2BB6B164BAAC10388F9A05A17B1184D4F34D4B97136E26A1E872E9C127C2152619605C733E72DB2F6B01EB25B7FB06F9271579A64F32A7CCDE9FE0B8AF90BC74EA8D68386E2B586265D7753EECF3D834F8C4F60B578D25713F18998A4ADFA03AEC8877F87FEEEE3CDEFEFAA3C51FA969A17071C388797DEEC46AB2954A0ED50B379EB80F50DF8571682C172DFF541770034CCF2A0C98FEDFE78A1507AB6158FEB53C82DECA3465F68499D80AC369E8EAE0CD5165CCB2AD8181BE4338E5C14F74440CDC4A35DF13E2EDE623988A1140D450506F9FCB46F4583C691AD85D4FB6C7F6D57656DFE6683BA42D9D92CBBB2F3DA6AE73250B7ED3C2F04EE3CB415DC265EC86EDB86B297A1002845473C7127A7A0622D8C459D6FEA1CC892A0139548EA320E37292D338179B83E17004242A6B9EE629598943B4A1997E3CAD8ACD11043872FC0073381EE774D41A5A611C4AFD6AB3D7BD0262A6A666814E95550FEF052F57B1E614D20A227B21A3104EDE62195A8AA0AA397A4DE8096B80469E96C8E55262E8C0D1E4F93E9837B243167752EB282B57E4B53923EF47F6ED2C4A5B7BCA11C5F4AB29764B0B3E6D54F586EFD5F8C5CAD28AB5C3E1C461977BCCD3B7018E6B0343DA0F34F1337A37DF34ABC8A36E00F161819EB5DB5635F39B7B6394032DCE272BECBAF280B293EEC19BBAC2196DB2DEAAD10ED7F18632FB653F4107FFEABCE189D62B3F793D4F316440447B2AE7DF5E831F8BA917D590546E6321D882EF597708EF507B41A6CB2DD3D9C78F263179D0B84FB558CD8BE843FC1630C2A5EF50D01E1E3AF288045DBE684DB7E41691DBDF0A366F28E4981FDA5C4AF71E6D71F3DE2B510551C3C2226AE2DA0B2DD7AB44A83634A4DC71A791D7DD6AC1AC8A6C842FD22B47FC9F38EBF5269EA731E120FFEBECECEE483FF5F69D6B1893E9DCB82D25D46890FFADD65EDE7D7B47DDCDF783982DFCAD2EA923851A8A4AEEF6E8074C8223CDDCA4B7D1CA82AA4B34345D14C2E72E85A1D420328106A52DE129AC15CADC78899EC8B8EE1307973C8383A6B4F6BDEA36332795440A873AE44D13DA992C909C2932B82A81A6DF75C77AB7E3E5EE3144556A53EFCCED515E6B66D76C95DC62A6A56854FBF83BCBD65933787BF3E904F943223B4F5EBC826ADB9138476B52E5C6071E168209E11B0633CBAA34885973368B9DF3C0D30284341B470180B2E5DD51AA0CB08C84C833CF57BDA22AB81932794CB933CE7CBE0D40D6728C765589036B563BD7EF9B9DE0397FAEE65140EFAC794AF0893E1838FD0EE21179FF8497E12E048A111B387EB0DD800D8FFA1D17BA11F45B49A32CD6169E2B6C4E864DC2ADBCA636679D0AB1DF4CB8824E7B5D323CB5C0FCB5C2A3BEF9BDB0855C80CB0AE054C9AD87E80F5DF1E4802FCC80D02D2E01D4C91C6D4438FED1E75A1898D6D608356B6D9755A03C5F3407F1A282E14C38F1084B8956020067AE693C247B3BCC987866B4B0DAFC5594CE7CED952CCA17AD08525213F883B8B5CD527E7181C3BF7379FEA01D0A00FDE15B4F6BC1CB04665C1418EDB8A2D8AE6C09B54ED3769A7159CA0D0DB38CA6DD243AADFE24FE462AC6096F4480E32AEC41C561799A02B33152B953DEB38D65F0ED4E734E0408732F4B560C6277D8DC6571DD6657203071D63D70225593B0BD25BF4BBA48B6C8CE5C8A0C8CD77ACBA54CCA40E4D49E3642720D412660CAC91F23B5E6C609707529C0940ABC813967FE071E62F25EC479B9BF9E9776832226D3BDD3AF86F30F2351C5D87F2F24A491333DCFDE11C3165294E442EE3C15B5871F311502AF44B76CCF71B9258BB2BF128B0FFBF4CCF81D572106FA0E7FE0FDF954D5911CC32F0000C4D32B283B874DC0CB0EDA415AD5FEE24343A096446F8AB5FBCAA34289B1C4900FD2131CB6338EE4371E704C8CC7EB7CB60A57541DB3F7C4AE85E10901C3A6DC54CA251886A7AA1333635C619B99C6EC005AAA0005353E2A99CEB195E84182E17D19B9E81CB750B871611CEE18EC7EBF96684E1A0DC1C28947CF67FDA18B975690971B910FE1D99A969190C2FD041A361CE12DA6ECEBFA3505CEBCB7195AAA5BEE05A86B7205F5EDA631DDF18883AA52DB2A62E2014B1D2BFD6FAAA545E4DDCDC1FD0BE4617C8BF8F8AA900BDEA700FB9D50B618940BFB0B72935EB5A118C226FD3FE20EFAD3DFDFA9AF6788187D992A0E98A6ADD1CEF0A858DAE32D86B03EFE4467605CEF00E1B0ADF7F75C4F4175933E52AF2054D4A9910A26757CBCB8F5385229301F6BD59348F3572C63E67625724AD6C4FA9BEA13DB948BEC6B0310EAF8A9AAEFFA04D657F23808CDEC36A5610F98002AEE0DC864F0B6781AFA3A017EBC2FBF91EA053A15EAC76ED0081627531E232133DA088159554CF3776BB60747F0812648FB62CBAC0EA70956A4E4C418D787663017BB3B87639A9545B849F8204D33F5CFAF1BABFCD9E83ECFDCF2A196F997FCDAEC899EF2D1F5C255DB9A82440F71DA9A8BBC5A7AD7DE40D3800EE3A73A97DAB09458414FC9D7DEF9EBA0E5BB9DC867B004A3E980BA167DFB67780054BC1AB8EFE47078382DBA880902E5869588304CB4CCBAF595270F300AE3E3D5ED3882949FB721747169BEE35D0A5B1C31F9F6E55108FE28F07CCAA6225030161B4BBB101D8E8823190E687C951572529DC0702E7D0C86C088A1154890F3A2C4593BEFB7DFCC346126B38B602D5141C605272C2EF47DBF52A6AD5C6C21BE40370A07109355311147823FD08629397C58584FFF11587C8C2C2A3DC77230AAFFFC8F91E44CADDE93C9A4DFDDE5C193F61BA4FD73E3F31790C655AD99A0C24030176565B15526F994B5B61C9B0D324767565DF0DAEC5762A7F1232C110012FF676E8BD789DD6778AE1D1900AA91EC3DECD716B982B112A794A54CB2BF76206BCC786259119015CD8B80CB0A0D24D976292FF6801FFE863422176972E095F688835A48A59807D3572B6493687B4E24889D69D146453D1C0BAF6F531E1E2F82A8EAC53C528FE93C933DE0DDEC336E34AFFEEDF892F28F405E0368F3940E31A2B0D91AAABAFC9DDBCFE7BA6412BA6AAA1BFA435917F10F6C099C63D331D888F69397D4A381896F78D02FA7DCA75767DB609368169570C2D4D6F088F46C12DD6EAD7AE1D7108A5303C484047DC8A67DB01A431FDB390407F3086BCBA401B7C6C8BA1A4B1F27EB8C37B5F565B860E01D610AD4AE076E41A8216C1F524812BFCC15DEC2AE0257E29160A7A6D2A262A014FB5260B642DB324EEF032A04FE98C97EAB1DCBCA2CD0E1F194BEAAA116BF47C93CB7C00DE7C1635B52FD63E29F789912D1D2F8C8BDAA0129FF62AB0F3E3EE0713784B8C125F96AF009D0C51A685077EC9EE1B1DAF8A2B9377F91E8E3E5F65D6D05CE26D37B9E3D4A8245AD46BFBCD7E0B1869581B3D7444A2A3075DBB4099BDE1A1EE37220B005E20D2A432B3DDF83ACF35680C6F06F5FAAC7B50CB19192A04EBBC7FE569D7F9D999BBDDB7FCFECF5B2CE0864085EE4D1C2823B3E0AB5D6B2666EE45BEC28CFC2AB5BCF3C553562C16FF9A7311F830B89DB90DA35A6F5375741C66C9CA7489E938DA6FDAF36727FE76705A0CEBD4F8B1E5FAA547712CC202BD1F3C2FAB47984206DA79C247D42010F2CE95A1918E8BD196EBC7B17AA38BA493EB1AE00E58AC65EFAB63BC26E5AC681735808920B10FE953554E4F85F3EEE103793BF6CDA62D6B250CDE483F4C9C796409982F1100C9F5624E0DD3BF456885BBA4266BF0AC520646E8EA34205E76460AC3E14616E315B27FAFD6EC07DD292B0C63E5030B1F206E3AABF6EEEFA05B2EA8C169BBE729B7CCE2CBADC3605398CC2182B00095F42D18E4BE605DD6BE3F64B839C34D54DF70A4CDBBD3F61367E89706C9C3E7147F3F671E3B3772FD2BE577193897920BA6FB07DD954D0E104546E3B803F299C2770F534ECCBE152991BE4A17B9F37A2D285DD331C9CBE8419B9A6A5E5BD8EE9FF7AF329092F98573116F2607B4DB7B148058F5F26D471EC2B9B7E5068202DB77892FF1A0BF70C2D64AF07E817603F8B1446FDCB07A4370126458ECF1F34C2A8E13A4EB6A171F29656D2B38985C6528C0E9A053D6A897A87776CD707A19DB9DB64450514AFAAA680B98A3451983B9AC951ED63FBAACF83DBCEE2F994DB544F6239CFD4F999D7E13A770092C53237559D55BDA19A4BC85377BF9FE0B6D9DEB89DB38A526FB398B00E180C07C8B83C7E809443BB05F917D838F4A0EE40919183AFE2CB7C812265C8E9E3F15D30F0FE9370EC4122F535D095CF2D58501AF9F7932D6FE5ED4D2DE55C164C546169C1DC08EAB263BD7CD7A6A2ABC5C8FEE2FCAD242B9271BEED9D3F5C3E96D3E8D0906530B5EF3C5EBA1898698384C28F5C23AA3085EEFCE3A79DB72EE21CBB40CF3297DD359C397BD13ED0EF369E943DFD9060769B3889C1C883F18298EDFF8837D6A83E51EF0E9B53A5773C2FB7EE82CBC8791D20098AD09FDAB3DE8F7394FD2A150AF8E5D2BB78A42F971B19731F46F69D486CA501381AE0783D0BF14794C76544BFC3F08DE445433295AF29C9A20E8446B9B285951E05DF7325965EB712BD3DB2967D44B6E0AE6CD1E6FA05A5FDE61AE4A9A0854D12F914AFFDAE5CE0DDE3A1DBC3A6CF6DF857132493E0DF51B655A1BE9A71608B4B2F86AC10E23F3C0B6387EB7450AEF660D4FC9E9C8A7C2D10083510B45523BD91F286FDA911CA687E4F664EE3709309145DAC334683F5A2D49AE28A8A3322C6E9C9DC195D6DFABA70D42F091073B0AF86B17F366E1670F143C1A3F1963C339F9457F904C8CBF232A26A1291891ADC8EEBF2A461DC38C5140B80ABB1C32462BC16902AFC77E907FD27BC94E8FB93E85B3688E9002B249B22F52B2E41DC86B65C9AC3D9E5D2C5A636D1DB8A93FDA0BF8A3968EB9D3325C04E87FCA5E2592EDEE963DF89A34E47CDEA25FF6F6DB096B5ED696C27C393E346F9ABC763676584EDCF15A5CCF019B6568D3B1339FEFC00833BC3A46FDEE5327C2A1522CE62F312888087AABA7DB345A5F22E3A3B01E2A5A89A21C8A7A5766EA89648F58598D328C0445FC2ABE0ABCC3AED818501D74718B991E61E36D62B34C9161AFCD7E4907D74A3761AE8794DDB725C5DA645C74FCF0FABF6E28A95C126B1810EB1516AEE13158D1B8C50EC0DEB8A1261C32A56735C0A6060C6F7BE63640B26C31BFDB040BF156C547E810CD86E7E0DE0FBB2350F7E9FCED13F3CAB6D4856BA0895F2E4DF2D92C3778F3114F260B4D8AAE5E43A79A8EB6AAB335A65643A5C4A8C211D5E8720D13F1E5DDB2FE3DC46D5CB9A1B12C3B885176BF492ED2B5C33AC645B2DE452FF5E72AECDE6F6BD6DC8A06DECC81E2A993BB46F3AF3A8FDF8E8626C8FA1DDAE311C763FBBA1AD4838EDDD0B8D93F8EA2A7B8BD6C91B42315398393E54ABDCC920E1C6D09CE7A5752F104DAC799272E45E0BA87079A82524CA6D0E66C40E450F372E5E1E8A141FAC09EBB38AD1A74A389407202C1946FAB433D9DD3E47C9C29881A00F920EE3ED91CC575B6BD1AE11A47EFC55A15083236E9571B5864B842AAFC23F67EF1C3BA231063F9D2DDB3BA2A90E598A37F6842E4691F66EC1998C4EF2FEC8D58333CDD069A8D31A3FE01A7D3880A219E9C7E400AF9DDB66A0C63F1F2012AF33ABA6D07F11F2074EEB76498EC583EBA11ED51E14A7EA110950CBBF2343433994C56B63C4E75332B615D4C2A069102681AD6CF9036239ECA37257D67E248C41961BA6638ACFF7B0B2B8DB0A0E1C3B96CC03F13BE08FB8C4458D27CA078032503F9270341B7E4C01E1D09E0C4D552A1ED9F74545289664C3EB9BB3F09F719013BF40BE0232BD1409BC9F97DDCD3F391868F0BE9710CAD5B45B45FE8C3179EB4D500F07DA68219EF85098C33246EF4D3BF339FDE5B9FAA1FB9146EC5E5DEE24C52CD0393C157AAE3A2C47159F19BADEEF4A8071CF5F434368898C7BFA4239F2908C714BDCE3D68293B2C06816D5C2A13712B4CD460AB0DA5E51C35810753334550C091257BEDBE473EFE88DE1416B01D5927A1DAFAC9EBC1CF2F86A048B9E54F44FDDF48B624BF0D0FFEA0A869DF5BDE18E7BD421A9E8FC64A9553B6008C09000AF2C1A0F36F2751673DB54F61006AC97F5B6B1EF84DBDBFB5644ABC6C90A399E451B57E9809ABD18BC93F6E3EA818C3CDB13A492A106241E1CB5D134215AEE159C78458DC3B5C0E8DFDF87A11EB266DACB6D454501D5BACFAE97672C4F652307A00A6CF429C06D6558AB69A7BCBD583114F48FD69290D31D05480285B7E949BA23839AEEF7375653F72DCA298C424746ED36DC0064F03E02B958E747CA0943D827F0B7B0C178D1B933333B224B45FD3CB233060307BA9B2175819CA4C43B88FDD20203A5A802969EAF2F1D003ABCDFF927431DCD558789549FB380336ED73D5DEBDE9F473580244E758676B917DE504575DA0C44BB9AB69EA4ED70B2094DCC078A3ADA2D6359503FA90D6CC33179E3FFA710D3FCF1DE83A42F717308BA983A9D7ECE79AECD5E57832C569D5DF96B6022673F92AC6B589E4087CB295452B722D4D8FCCDBECCF816CD2986DC3CED8581E11DC078BCA9DCFD78F63BCDA6D662EA1CA72391EC4C4AFFC51E780F53705CAD3A5B98C4509BA7363BE2BBB1E87B15FD90F2723E3E9C83D2F4B70197CA02796B53AC3B613E8F6B1C030BF34DDA482AEE1B4263D2C668B9EB74DD9FABFD03E8F841B3E4BA5D30042779C58B4F2EC3743B7C2A6FDA79BDAE17822F2A3DD3B1ECE2FEAEE39E0FB5EFD6BFCA3B7B0AE0E6B6A09E5DD4980EA15A05542EFC7CAA91D220AD14E4BCB20D547A71BA7EBB138261FDB52FBD175EA7619972FE982291786627070B71DF23A07BB394D8D8CAAA02C0CA34516AA898A97210D30F627CB5F6125077ACC27E2F4E542AB497EAE010138EBE8AFA71B8AD50B1716ABB601E449A5C6F75D49B0AA94C7CB60EC6C49DF73F9E5A96D52D2E935A8C30797D20D10C9974AA7EED62B288B39095EA8C206D29994CE5A2E43BB4410ED711B6F0E29FC157C6C08400C65BEDCA487B5693BFBD712D11DF96AFA7C340C79BA8CE331522EBE5C4E82839B96890F44811C1B8363DAB81AC2B402DE1520BB1BD3AC3ED467FB6AB0E785BF1DBB370E4D33202E28570D9AFDE2C0419609BCB6A6F3372753EE65EFB20A405693A6C5A8D3D40CA93EC9387A35DF5E21110471D0EB57A400DFEB56A02C85A06A964CB00765C7A64559F7094B4EA5EA39A17B1813916B845F3F2303A29289F74C61562D5F249F3A9C15DD7F90639148D373BC743A1FB016D97510F508BDA5940DEE6474B21DBF8ADFE19FF8E2B87D23514D88ADC6ED398E577EF3C909DE061C1A804F4F4BD9A858B57BCA124568E5B96EA4B0C732093F779D3A1679338C1C7C24ABD13BB1902DE81B733C0CC1CFCF2D26770B73DF725A848F2E81866BB00BBE1F6BF1D3FBC81519A28C086266CCB97BE0BFE7CC3D91A131C0EA30929836E8AD3A56293CB7697C1D92DF4C6EF72672DA229A8D72D91B340F2AAA249C6F101A72F2058FA64424D61F4C6E45EB9CC2D16953EFCB4B96AB172FBD38B83C52653F7ACB4E4717781EB7E89DDCB9FB608BB7AF82207DC7227260581A6A3834ACF7E0D267C9DA8D5D82BF9D40F95DE474D356C73DD2549B0CCA47374265F8B88D39BF1AC205ADEE08BB33BF884B2D0FA052622611FF984914A7C4DFBC5FE3CFE3B0841185BA704BD84B6CA18209B210179C2F961660C3F31D7920AD32C0D19594150DC29A7798AC86E1D59FD76696A69836D73ED6C639CD7EDB5EED2EE758541E82D9455AF8826FFC28AD933CAE406908A4534145FE63F3134290BFA6027647D81908974A2E80A57836D6CA1AE653BC55FE6ACF74232B99591A9EFAEBA32F411FE08A38895EE730BDE813031FBACF04FFF1474D92FF8B77DFF7F897D9ABE2E3AB45AE06F7F0BB369BFA07C21AFD13EC22B42654E955607F1F9865C781C36FB9A276209B72A9F061D41216429DDCC67EE05A45C85E03F65B57973B1540DD0F808A66BF26D9124F3A7FEF51E83A3CD7664F3043261F2CFE4149946693CEA93478912AD06C1814237B9C344BB65E395EEAC7CA983F1B2ED29F02F6528C81DB6A89A331F0964FB8C6300EF61BEE6193377AE4C238991CBA1F8F81925E36CCF1D904E44BD877F3C9CEC2F4BD4B61CD48A93A5C626011B284C44F8A76BEF46D49A15F91BFB84CB4D2F3848B9BD97A38D167D1AE4D6C1585B85A4A0EB08A4D2700B45C8465A2A585393A0B255AE297F41E78580A96641574E1F6BBECD5AF87599E77B31EF41D11512A40F24B21EB19EF13B5620877185381C8D380862A6752DE90D17F06D46304A7E403D2351DE927C34B66B79706F90544E546B3F2FB3057548D8D00526908677EA473355D2E74D306429D011DDBD477AB092422F869175A0E1767F94953AFE42D04AD40E3CC9BE05A5FE37D6BB6E690510B6A39F7686D1A7D3D452432C6C7CB27CB6D795B9EB2A1F60C82DCFB93AE1998C7C645D816477C3481791678A4F9223D3F5C9D762E94F4226C6E865704B617055025B1A589F7C3D789D7AF6522023D4518530CD3D3F634E9D024F9D1D0C6C19D5DF2417C74F1967D1B81814324A729A361391C89FF4F8859E2B4C2AEB7260E931C1683E7CD9DB59F6C8EA11C979E19440635D735EA4BFDE1DBBFB7C6D16E403EB6FC5AA45AACD4C6CC5C0BA06E993C997BD81C80A11B5CBBAA1AEA8AFAA8E8F24E995B5BE67648F4837760100038A16BC44A3F3068AAE45900229E4E05B2AB3C9144F7CDE32DA9D92A23704FD3477FBAA8BF769FCE3CB7C611B8817E26334B49EEC90AB5621A928FE604C9A4BF3E56CDB2C8E9172787C1BA49EAE8891B44BD43B5976DCB4685D8828524A6ABB98A5D4A06ACDAF788F504AA4D458939910639E2960CE17B9228AFF85BA7A6E1D4A66D24E5DADB4D2F95672C7E7E6444451E42640FBD231C99E77D91ED498A60B4F4022F452D3C21039CDFC26554B345FE7A44F1F5CD28A10D08D3059669C7F75A230B38BDF0186D4BE5C7C7D60348754DEF1676CD45A6E5200AC8C34FBCD19EBEFB47404B5FF6BD43896D9890E70B6CFF0229068F9E7A984B4EFA08BAFDC713340EF70ED192C7A09D1BC99398CEB6D486C9BA95D4912ED38893E229755CCDAB2F6A8C314276F755A7221131ED74FBB1D08A4A0147ECA1F7D5D13F6D66F8FC63DDC4C25D4DB9E723F35F00C578A199CDEC85035B6E3CD2E1E1A483AF62BAA5C9B75C725E3CDA621D9FF950E5C8601212ABB472AF53BBE893B95B5E339590D927A193C9FA27C04E0205055CBA308B80491CD59EC53C46933E950368A46227B5AAA0BAEA2DCF00983EA3C190B940340623336B9D4C0BDD0A19A04874DF5F1FE318B62A11C5CEDC64517D95E2F4DFA1724B7503620CB1034A2C0F76C6DEA538C5D4D5B41C7EC8616B9BAC822B65A1C727A8420ADEF1B9DA975BA71D376224A4594324A521C5EBDE52FEE530C66210A4DD02AB8C901611E6DB12DE649E1C209159C7C1F2B774F29A248C804BE016CB3F357527619DE0F76A0AA6A8779991CDCCCB237AD32077B706A7180684B639AECC8218616FD810E44B427B7EC826911CA06D9B42F57226330F336C8195366E8F62D52E746184F135245EF7EA94AC9C94A65AB7091B8B9C67D0A45E855280BCB7825B51F50717C9F9979DF446761816B02D5E621F06DE2E0E945637BAE38D11DE38E2B74F212551B3AA32F31AB0DA712F3E8A1E6527F3D40E92CA7CB16FDD09FE1B19D00B646CD60A7386D87ED30B85CE1FE095D08FE44C9D04B773D954EA0995C4E8B2BA82CB4B5EC5A19F77A4BDB91F046172F4DE93D332CE3A709669A8D793DAD65489C9CAB8133824B0B10279E87E3AFCA3EC626839243067C1BC89C4D04871D2BC6D57F73EDDABB4B8CDAD77281D007F0916F7874E8DF71B577D5EB96B581BC239A7DC843ABD38DEBE39F6EDEEA12B56EA5CF8FCD753E395D789B182C38F3B0F15B57C544F6EA1561A323095FDE728AA61B8EC0A4BBFE36D9512B2D58C4B11DED914FBB8F3BB043F78624FBDEB061AE169F81EE6531D9A9500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%%EndFontu1`65t1`65%%BeginFont: NewsGothic%!PS-AdobeFont-1.0%%CreationDate: Wed Feb 18 17:47:55 PST 1987%%VMusage: 23138 23869% Copyright (c) 1987 Adobe Systems Incorporated.  All rights reserved.FontDirectory /NewsGothic known{/NewsGothic findfont/UniqueID get5671 eq{save true}{false}ifelse}{false}ifelse14 dict begin/FontInfo 9 dict dup begin/Notice (Copyright (c) 1987 Adobe Systems Incorporated.) readonly def/version (001.000) readonly def/isFixedPitch false def/Weight (Medium) readonly def/UnderlineThickness 70 def/FamilyName (News Gothic) readonly def/FullName (News Gothic) def/ItalicAngle 0 def/UnderlinePosition -96 defend readonly def/FontName /NewsGothic def/PaintType 0 def/Encoding StandardEncoding def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/FontBBox {-187 -202 1000 1020} readonly def/UniqueID 5671 defcurrentdict endcurrentfile eexec6029EBACD1A4244B6679D0445322C46C7A2171DAB3C63058614AA52B0C24FE4491B24688A5CF2F71A38B12B0BF76F7D896B89637137511EE86DCE9ED2C6A6F77CFF120ECC58AA1C1E2F4969BB78D60ACF4F33299CA663F0A3E1401B5DA864CFEA7FA8C4A1134B8DB618E621A4036AA6783FD094BB42032FE3F741A9C01495272A6A30B5217A5C161E13EB9806D09478E29E3562A64B03CA36080DC099F838EB4A5D5410C81368CEB888B7F5C551CBDE5F9D61405145E4DC0FAF72AF4CF754566F21C84035214D8F2C3B8D07744CBC8A522974C6EBCCF5070B7D0EABD2922B1DB940C1FC9547EAFF7D442DB81302AA8FBB9884CEF8FF2F7C53BD30506D75730AAF95E41C5E700EF6553A99FBA9D95F608EE248036082FCB8CB3A134E2C53E9EB5D1C728C9239558EDA14214B3DBC129BE3BB842540291FA26D08FD65A95F956A709FAEFD28D14247A52CE0A04872BFE3B28315F784860886BF61F7DCC4B49E5238CBC3E059F1AFEF9A4EBF953E5C561346380D0B5D9B3DC0B9C3F52699BFA7688CFAAA1DE507C4CE125B76D85A3DB4F65CD12CFA2065556E9E745A810C035B5DA652B59E45EB9B8C308F486D9DF48707B0E3BDBD6C1BDC3B6B22E01226BBA547C54526770409B40DE00DC41DE292EE8D8753B8332BC16B22D4C503563D5CA9B980F848C69D23270ADF6389EC69176519CD12DB1846FC08A3AA1337963C594DE49A23D04575F2933DA6471FB12BD538A4CC61BF0040880BFCD8115E12D2606752779BAD9489EC5C3EBDC154C4A286542D838A3758274758E7C9F6DFF5E93CCDC37F1E81DC3A8FFBA49908D6B9EADD115221EB13ACF27D391565DEDA8AA27F631E3FACE8607DE153830C29DDDD571AC4F0CF6E38505D785FFE5FE55C06D040633FB895718BD76B26A123E9E22D1F0FB294A79470AB0D05FE00792AF63E389283165F0D5CB85342CCE9C3C91386465A1CCE4F4A3D2379AAB3525A92F06C6868BD28EC285EC1BB6D3C07143FA670F42C19B04F775862315BBBFA846548085FEB15C98DD837386F411D4236360F6ED761699CE645490474BA28F26C793854CD7CE4E791DF401027446B0481EF026766AB82F3F53A281105A2619D076BE16F08F04606E4B4D763E34B0E317DD561ECE0D30A88AFDE4D48B2911B2586A253E42643408B2C494690C16B3A10A67A55DD5BBAA633C7A6462261541EF655EBC9AEE94726D000A3F799680FD8A05E28BDFCF6687F6FC96578D99ACE69CF151556B77907D13E6661E481339F75040A9F522095AEA88F0B407A1D671650A74179B024397A6A80C58A119BCF0331839AC01CF9855219AD3DD5834ED43EBB59CEACCC4F3917F451AED001A8056375188AAC4B522D0DDC723E50EEFAE3408D8BC9DAF29A1F8A6E330BAB84A96D386C3AC0045C181F2A326AC4043C01B9A63BAF794BF32D2DA2A4351F618C1FC16FA93255F1672705CBB8E7DBE3E4107521A8549198C3940BD9A99394F10407ACFF452A29E82C9847A7CCF9FFF51B17602FE39ED672C6D35B42B22E0B9AFB00C1E470452B74A10D016447478E706892E5F4F1DFA27893E3A56A33637D1A9CDB993E63DCF7AED9D0CAEE66FB3F861A4C575C9FAA9085A56D9F899917126CEBBACA54A6ED6AE8F51FE6C4994DD9A399818812A6464753BEA2A3BB59CDEFC016F631C2DC9D79F718B927076BFD1E873D83C0F2043FFF5097417C9BD6F22ADC4033B48E22B013F30C9AAAED95D6EE869382E9DB622A4D46E11BFB516E33DB9C51F4943D148BC3B8E9BBA42FDEEDD21532A2224FC3BCF7A2BD51372CB65CA8A87CD1EA796187474522195D40E4A2CFBB930BC789E4D589BEC741A47C20B62165B529CF53C470012A4EEEFC3228A601235FF3154BD42EFAD0F5378CC111077ECA454C7CD34052597190F51C42FC7C9FCC928B537D3700ED881E7F08DDD4E37B6C8549E5CC15505010AECCED8B6E41ACA56176B6B32A2443D12492C82FA16EFC84860FFCD5255C6668EFE2F34E38C0B979040C84FF1304D11F1ABD07DF0758A4FED6D2DC00D4CC06FD8B59380F4C6B7C62473F8BB0A35E66AEE58F4A99C44E9F3B2FFDA0393C22ED01CDA14AC2C7FD62BBD1F51B8B2F26E17BD8D3A3D1B4CDE8CFD7CD334662ED38A6A8120873913F943B7FE7605EBB6137BB7DE6368E8994D82383461B467F6B6A780826EE72BA1E31349B2B064F07490BE92D48E022E630D8782CCC85A721EBA9224A059C7B7BF4EACD237361AFC7C81E210058336339DDAE42B2BD54E13C081A4458578DB18639E5247FB11B98470E00DF6DD3D8DE5460F3A14EBFD5C4F94952C05A652A4AEC6FEF615E0BA4C800DC69A23F9AA67FB6FE9ED4B3472A2EBD155418C4D38EF9A132D34AF45CEF0449813966CD8DDF033FCA3BD6CBF4B698FD4EAFE3FCAE8545B50FF9633798741BA5B2FA529F46F6296AF41C287877EDBD6C5F6FE1CDC302BFA04B066A94A8247F310FB3E09B9C23F2F91D00F03A6D3618AECC4E94B097EE47C0771C4B86BDD7BB033431645BE6F3BF0D7E978075F4C41BE3B991EBDA75EC65D80A670A6FAB523D3C161E0A255A0C375AA354342DD3CD9C3E641BCD5D8C0D1E1B3C954E6E816AA1C74E37B43923DADDBB5A02795D049F3F0F3A35E9674A3E754F9FBBF9DAFFA40264F503BBB163D73BB1B3CB4BDB813B8934EBD3ACCA3C5C989E69DB2C9AB985B73D5EADA826563488032C6F6704BAFEB6E74094B4615F725935494F7F8F81566CEF7587AF53A92A371461CD8572B3C664A0175BCA644871B0193A31EC901FC510ADB64B6E928C133ED28C7534D567540EDE93511690985A0C34EC2F01F207F7B838DCF959C9E20F113EC6A245884EBD1AB109BC96CCE6CE4D751F53ADCA40062D09FA7DB2AE944CA05073141CB9C37795715CE41793BA7D20D3433D217C0E29E8F2166FB317997EEC69BF29B51C0207CDCD62F94805E99A9938EF22E4E742512E93B1818533F70DE62C2864E4B458E617003F7479D4F38B7C45658ED736D9EE1FEC84D29E9C6131B4FEB2343F15FC680228AAE14DB3800896DF9E59765462AC142E3C34AB4017C11A630F3DD03279418B1FA6CCB95D53EF39C8B562740F33BA8C97D9DA4B36C00716AE4A0C86B4C54961BA2C05CD2BB52B79067645A24F91618AD7AC49927F172D479DFC8F0E2128369D84C9E5724A964FCA2A1BC869B2004C2D352126AFDD860C1994021BC35762ED8F17CAE8574FE27F15BA85E1CDE1877A3E6CF740BE6654F77A379A4DC799108C7F0FCD45038296CCAB26560A7C9E467EA8042E688D62CF1EFA5BA659F74D54B83ED746CF48FAD6D3F3C0FA303B12E194BE9C222699C3F3FAC808FF7AE5BF68F000DF5A8EFF015246F95A100E0941B85F81946484CD160E65EF4742BD8C0727B60C211A3F9C4B08B544DAD099D8C42894E54905F25CAFA5672507EF9C645F4162865831945466EAF526EFF29B8390512E73709FD583CA9A30D94D51640E0411A659EE31562FF145EEF3FBDCF42EEC18E29451C810F299D6E1E2A5BFE0D595DBE1B8F3D3BA35089775469B7ED307F561D5DD0C4D6484F9CCF073D0B115F6B1A4B4FEF882F320DC82425694812EB1E27AE12167DEB2F6264986D682E95D8EB13344B1994F5C1BB658F2FBAE8BD0B442A19D9F3D178017826AFA1DB0CEF1C2E778774DE2F0CD839239B9591C978AFDB6FCBCF6A23BAA5B1369A41979D77A4C7CF992B8463AA30EF506718F9D52073D01966B4A79F392D9D0C6F6783E632F94C5B6BB2C35AC4097C4E9DCF7630AE1FE735021894EB0E7DB3102DC8FF8BF6840E1EDA6A0E01056A303DCEFED5EE6DEF94DA5F13AFCA226B0C361AC9DE8844AB6AACBDDA64802FE031443CBA9A673AF469F0841C71AA5C18BF8300A97847E1F07E7E83F6D247C73D7848227551565F8FA72BB7D57CBFCE553AAD6E4BC732C7203735637CF07623BA0193C2D4899E4F66A0EB288242D5A9A485E5D5285EA6E37733B77973B1AFE807D313E03F13926F4406BFCD1D5E2F1BA3036FDA1E99EDA12899243DD35B6E5C999E346365B267C967AED16B4565E3046F911220DCA568E45E8822C1209D162513A39E1829640B7EEC10A362B4988794666459CCA8CD01039EAF34A2A624AAC67BD3C804C24FAF978C704FFBCD151D57073B5B8388B5EDEDF57334ADD96E296A70D5D7542ECB44D7A4297A9E79E2C02B0BFBD7C81BE6E215EA913E6B7A22FD0B7B897F51C09561D808FA953853F9B2E8BA8F1271DFECA66E04F1BE094D1A981EFECCF61E62AB9CB7F35339D71B6F9838E0BF7347530642AB7AFB9FAD6955D3865D129895AF01B8AB6E4616FE209123B6E2B50318EB63AB620EE14D859515D95BC799CEAEF0666B6ED0EDE1447FC7166C46103AC6011368DCD36E1571C15A376E55E2512448321BF9B86A9CBA2EDA4BF11CB44E6E33E1374F426F7CD67C0896DB3CB0AFAAC2570C07913BF1F6845D15CD598F5EEC6C9CC387A17F9A01DF20C182AE98C77323A3CECCAC567B95E211172B3C0880AA3990F90D72DF009042711962DB6FE4CB8C3FF6A0410DB57B4D5C255469271351A8F578F18DC2B78CB0AE7D6B7177C0ED789F0B25F4C1998B447B3987332216B39A3D26CBB1FFAF12CF9D10AFF2491DDC0679A6F533D33DEE58031EDFCB007E042E4B52FC361259DAC43709F082E1F56FAB1FBCA22C5CD0D47E22C71C1C1A32CBF50205CA6A9BB8D512B37161E2D02E7F3462C1F5BEB43B80DE2868DA936CC612251BB2E589398882D8B3E9ABAE68EAA2DB59B3F3A7773B98D8AA05E3A82BF060CC825EADE73221DF6C9A990D7C670265FC8FAAF6B0E0A33C94A3B94010E0219786B61DA91B46110A0D254704EEC1400016D6F6725C473C36536A9FF8FFA5F589B47706DA2473993D1B7FDDFEA8892FBF264A4F4837259C8CB2C6A8148E6D98393DD986B213BE49358147FA8A4A7B565F49C4593C3B5840B63583C543B8300EDF586E4DDB078457BD8E43A845AD7E8CD345C7D93C5DEEA12D6FAC6DE39C6AFE505E8D30B1152DCF8181A119564214BDC2BB93FD71C698C837184E620CCC9EBC74B96DD3C067D3CC2FED69BA82C5DB51BBE2FA59B107FDA28F11F2F223EE08F0A9DBC4A05C5B34B7337F90014DD2F9F9E9D62EEB4E30E6E948B1E7B1270FA2D529A5370EF9881598521E7EF98B4097984801E6509885B970952C8281B538A6D4F7CD3DFA6A5797539A33B7A932AD41EC9EA4B2EE211BCD8494E23616CF4C910842D44C60662AD1F14002ECC55EBE464E86A20873924529274CD616E710E0F8348E887D687CF06FC41A77C8F5944E2C1CB2310D3B868FAB1879A90DF74D209A1D05F4D6A858CBFC5671A778470D64F4745F5DA70889953F033351E1181660658ECDAC19816C48F432D0CB6CCD78EE49DEFCBD03EA026C38BCD9FC0D30D42C5D0E0F6A9AA6689B53F57CF01BBE7404EC576E99B79D86858B20A5977B3F410F2EBAB19C9AD30F2D271768DCCACEA36F1DBFD9BAF3F5A8817CD479F29AE756C1C754D22DE7FDC5B60BD506F7D93E4A4F135FB5B114CA319E4BDA21BEEE5F92262E30583F9721AE96A352E90169E6151139BA938C61CEB31B2BFC9710A8C8EA8E6E18DDBF8A407478AB0F1749ECBB56EF90105D47FA00D522EEB3D644CB6DE19ADFC637836CCCFBE71F3C5EA36EEF3B27BDB5FD906AD2BB93AB5E7A4D610D596555D0503CB2C8198415ADC8B5ACCFDCEA726AE10560BBFE9407F2A18F8DFE95A979F11F757594CF913133249EEC9B23AE0EBDB8BC5326290A7F2DCBD9004530BB6D83DA2D35E9AD6B9F7682FD54FB4FEF6A325AF62B70EEA10CBEA8B071076F7902F174C246E8F77226C214AE869EE5D5D92EC5CAAF0192556C57E55857A328577A9A1E35C80B95FD888EAF03C170A7B31AA85086C06316A0080D599725659E36749B8137037D285C2D59FDAF08C9E308B07A29165D62B7A78E4E1B5A5B8FFF7A4B66756C2C01AD25C7AF4A0C47CD18FBC11D31188BBBDBE521B77FF2963EB81C55815D8F7984017EAB7E653DD50F62E2098E44950F749360822DDF8082961F4BD51936C0BE578996B73BC8F0974678EA5F8129B8C345CF768B199D9BADCFC0BBDE27EC6EA5D3D5454F4BD4B94BAA271609C7DC8EEB28A369B4676EA27880CAB5C7D0C7D6A1CAF54C0159B6AF83D8D2E41A201FAB4C9EED92369CFE3E3FA5FD95D94B07F991D0DBE78D78223189B77D10F339E196BD979F6D500019C55796DB01FC26463CF35651244286A15D833233E8600B506D277D5855CC3C72269ED8CD09DF415C97A3A9F5E8105A29C7351DFDA56C856E0DB142019A78D38A8D3666D7FAFC2688C7C2D6D45EE46629FBC2F1330422F8A8C454C6D3F0246658BBA30655D963BBB8682DC2D607F4822C2722704493C21C9C1C02C101D05B38C40462E9DDD06B37948B63263AA842B03EA2D57517E2AB3AC9FB79B75D9CF3040CE864760D12C07236E102C68F887E4DF7B380F4D1773E36B522F9E70B04554A0B21CDFCEBF3CC0B6E41A4EF3A2F16E5545927182738E061BBFB2A5AE2CE32B6DB00202EFC5829429F8C3C77DD2A1B4AFF4C2B2C95BC2423FE9BAABDA08E0B6D604D742C55D97F18DD12FE8AF452BA74FD4A4547B50DA85943ABAED8BA6E48712B6526098A8464A8AB89B26C80F3B4EB5FCAF438B8523F95E5EF145F76D4996FA3C39B32BC45A0A4C793E5A50E8C40F6F607FEA4E11C6A2B4B873B5A2F4C5EFB7864198654F9F18466CDD889C6C820C8C5F11E09512FEA07E1D969A0D65AFBC6B4FE349CE4F97BEB8F7305430720D75C5FAD20D8F91DB18EECC8020780E2F6277E088E3646607A577D01D7B189A5736B548084B1F5F9B82BC6F95456F5C53E4A0CF487E6BE998AB128C71314B8F1E87F7FD7963828796947DBECD65E24C9DBA73347383A47B738093E7C391D9A0121B21653DEB5FE39027CB6156C38FE0F17514F99F206791BFC1774E90EEA68DED574DECE3590D2C58B499C326C376A9B7EB432203774D10B2EC61895005721D1A099334314E8ACFAD8BBD5CC70EF37648D0ACD2EF412A121D8958CE7A564659C565511F90E15D662300C11B0D3D8CEE381D027454047DC85D2E8DF3DB70BEAF8DFDC2FAF1B8FDD6B301F15384EE1A4E0864A9BF98687CA2390972B9C059D3B566733F739B92F68AFDBE4152175AB4D97E0D536513DF6E9EF7A56B0C1D77B769F6B3811A96B8B793DB9E52A99871A0AF0EDCF0B1FBA7C07E89B0001525C04159FC1B30B3B6188DF4F73AA4BAD5B93F63C3A19461C01EB6D466B473365E7A788F9B3F91F6686764F68142446F34706F95576F4B68C701CA98E2A1DA4BD6C8EC2036DB2D8D623F8B7199CEC80CBCBD765C3022613DBD46A566454C6AFA0130E11CA04C8303662A0B2F48FD7E2F77F2AB124037CA75AE685980411229E257E6363999A69EB9605DD1D7AFBC355A362A6D320AE248FD949521EE7AE7E0DE1E2F373A141950956C9600191E5ECE169F2066F17BD20D6A0358C6F20882415BB9E3AB45A0DAC53D3EE7D2BD91B0195D0DCCD9246BF1679262F8F4D1DB19ED8F5FE5E5C4CB47B1260205E7BF858B7B4FCF0074888B9B78594F1469538C0330451A1D6B48441EED2775CDF4D1042399B16A7D0C01766653EC3F130AE2EC255564E0A1EFE579D3DF5ED49DCDFDF5DC1556D9DED45D8B46666F31013FD646E415D4EEFFA585E0199BD6613A7ECFDE68267E3C76BC2A09968BEC63EBCC473F85F1CBE2882F3A7EBD95CB445F7BBAC04EDAECD88CD3E71E46F1DAD8326F1282DE7DF41C14EB3D520C7720F8869B172FCC0BB92C18F31E0F74DD322D342133F5C89653A7755E11D4BD1488221F57BF00007441DEA63AFD1B909F062A60C3A14E40DDF5A0D2DF224DE87502577FCEE71C09D814C9A274DAEBC7ED6921D75B305AA23BD365208DB5834BC93816587D010FD26F5D8242297873E4AE4C164CA96968AF15BD2EC3CB34AA74FDAB3841DE4A3052787C61262D94C4F32D31145559ACE9FDD2C3848042E6C62D8C472FD3F76F289D0A90622C5BED0235CBBE50175BA9B08C8D4BD11459CA5F73DEA22CCBE06446D3A12B4AED305B2FE297FB530A0FBFA08BDD3FB64EB3E918F3E2DF5DFA91C5F7FFD2BF4004B8270DA3B6BB5DBF0D354A06572290ED945AD5C770388C0D5478D76E93FEFCA835312256AAD2A509FB1D441E24445BC5EBE7F766EE7C580D10FA10CBFFD59E8B2E696F9EC20A89D938E9C74BB5BE2EE1F7866687C1895395369F9D0BE2E8AC53F13A6EB7BB4514AC2042F359A60E2331142F84494854D91777AA8C4AC2174FAD80C51AF6E88B386922789D264F3092D5F92FCBA6744138DCCAEBEC2131BF28199DC8D84755FC5C4276114AD10804080B9A6BD60A092083E29E2FAD08229F735928BCC4A769FB5873D1FE92656E46B5A3851E798DD958F59B53A062B05C086688B5062BEA61851F53DA1A9EB05A40CA5658372EB2613F5C6E897502CACC037EE562A53F0D067218A278C0460093939B71B492B60DB0582AF67E489645D363FE6AF432BC1C422D2B434068BCD26D3B1F6B6D0D59613F674FFCF9020534BA4A721517F8F20ADCDC46EB437DA920E78C739CB8AB2BDFFA1D2E31B4EBA30E6F3D1E6E160FB48BFC031720FEE62A5E86905952CD17D7FF0B98369DA94DEED75F38575103A76AA8261FDAD2C2B324B83A59C4B1126DDC98E03D6C87DF81D9C07C401BCFDE1D8B8520618E6A434380A1A3242D0328C65FAD38736C09EF09C294CFDF291974A2C5608F1E9EADBC6A675AA548D373BF61D7087EFF5397161B8CC6B81DB4093026A4A9456B503D5ECB3D87C66DF77EC6B4BC6111EA26C4E3658D76908663C6DDA9740C6D9FF8793936CDDD7F7BC3358C1CC2EAE1EDE88910B0AED0C88D50B404EE2B0C90E84EB93E9FB4D7F9825B0247EDE814233B5A7EE2D8F094AF6602705B88D6832B6EBE5EA8DA8E0FDEBBC27F7F5E86BA78B9CAA27C003D8179610BEC8648127A01F737D05E7BE127677D6FED9884DE2707F27A411CA9A664958E587FB7BBC8F3270917C865463258A29588DD51C0D0B15D91C7D2BFC2731FBDD2C97856E2A4DDB3C7E4ED1BECC743B97CBE12455954F1BB5FA94A868070A353BD9BDA487584055333F95E2DD2F6DDB0942947EE50396E84B5B43FBF18587A1506EC2766157E7A61CBBFF0FF8C49947ABEE965A5E660382EAA1EDFD5F99C38F53D6C282269984C8713B2C07A4998FDC0D46AF1BC72877DCD350BB3786A132CBB41CE1D33C0CF71601AEF9E15321639736DC24AB30FC98229015917BEC819FBDDDA0206E836A338E202643AAD8AC84041D61E78195A7B381C23AF129099A9A62B272B9FA0D339687E0B0FBAC41E1EC0AC829AEEE4A0EB0E8FFCC7B4AF918D8E1A561507027A040D20DEEB9E82098FF15466A4B6B43FC6D9E22435585C5A631E84672793D28C7A9AD6D66D82DC68FC4C683661FE8965F117633782DCC5951BB4A71CAC7A89639176762EF68A6A962577436AD1C69BB60B02C044B22906013A4B9FC653B34AED8BFE1220EBDCA7A50FA0A7CE3EA6D716DF6927451F3162E1B9CB711FFB79D79F925AD630ED002E9C0EDAA24B64EFFEF65E673F7EC4FFB38CE31DAF3949348103A910DF8E8BACD9069C517CB85125798EE2CC9BED407D0877B91C84C750914A51F8F7A83CDAF360E4A59BADF20FC1DD6EF060831B93EDC4D08C0B207A96CDE09ED0C69877104E4B69E7A5D2D3250BBB12518AADA61C16E2D53F035D257E8B07CCB057F7DED0D34056B4FBE41C2738B443DBC98D3B6E5879E4A221AFFDB093D7611C3D89D441F691FB238CDC4810C9D5F9EADCE1327A7D59CD85C6B9C4A551A06D163157117F11530CA5830377A7252CAB48700FAAF6BE7A8588360BA341BF2B897F80414DF0D44123F312385A4C69C1CC976AF343CF5B69A760E9D9C34DD16992D4FC24A4EA46DAE2AA3C7DD774AE0E6253D8D2FC277C986A55DA752699267D095409BB0F755A9B1B8F605A101950D8BCF545CF0C5B31610A935DBA522D34736511E57225A61B4F01F16609B5FF45185279E4623894C9C028B931B6EAE54AFB630138CC6539900BD185223E1552F21C16CFF1E643A2089327DB7E42A04F1D4D2C9FEB99F5EF42718263D170ADF351BF13F5BAEF9550596B474D58AB0F151D07736D529024DBF468A4608FD665F2D887429FC27DD29952CC552444CE55ECC5B58780EA9B6A93493935DD62B789144513E7E7DFFB334380A93978712C0D195E9B648D8789B29583B03581FD09640C6AF579BB24E24819A6F5C8DC15DCC853982BA656B3F07010C3E6CBB2026C037E88C1C4196C3F9CFAA367A1700B1803E889B4030A574346BBC0F040178A6C4A0951F6C4EB6FACB674B9DC30415911DF5C0D4E9A876F9CAB8BB6120F06055D035ECEF41DDEF69D54DD65B59C0AB43BD5651C5058FF10D823429287B2E44F6A8AEC6E303C1DB799A589449C660310EB5851B60F117DD3FD69F2A4DBF86D5AC59D18F035F9B5E1605C65135BA35769025983A7C45063FE43846FF6AEA30EBF9626586BA4452228E38E13E23C43DC1892777131C5C8906C01C5C22897030E87AD166A97238481ECCFF298718F343C85F30204A4F1134CEB4E6B4A9D7F532AD024E596C30EA132054AF947F15F2BF02C8C43019A7EE47818106766576E7E8DF2CDCE1F921AC09047BB5764437C7ED43626115E00B625050342869D8404BA43A8F72E4DD5187DA096F3C7BA963A9278F7937ACC5E2F70E6A8EC421C97085BDBECC69C1E4C3BC0F554CE1BCDEBC66DE346B25BB92A023BAF70E35985B6542F23D53EB132977A22FE59DCECB742A52D6B164965586B9D03054A20CC8AD4BA54879922114AF99835DC2A8ACD6B24F48C3D3F22065F8102921CDE8D541216DBF21C555F17D780CBEA0AC9408404B3DE4569E93BC140AA48519D6645934B82D4902554268BB023E46078FF6218F8D7109B84F41AFD5ECFC383A3C7A41036CE2FACCA654E3CC878C869CAB754020ACC0F96FC9C854DEB662285D19634874A57F8CA29F05178AEAF8B5F2B74CE0DF1E02E9ABC32158E8790068FF12135D9655A365D482A3C468D3BD63D263450D02B95B5151486ECD7F4505930D91B1ED7FBA11C05B6A5DFCD8F2387891BB151627B3557BC5F06354BF41DAC19619B16A04F459F0AE0B2B9E3DDB7FC6EEF96F4165678A9295D9D29E1263B8BEFE5D7FD93E31E7A0669F91B17BE47382673C999FB576804FD145532722BB4C9B1DDC4EE4EA3FAF0970C05B8475FCABFCCEF589E202A91113A4FA4D50317E584767BD0900E3693176296DC760E5BB531E1A2853A556246A5037AE4F7272EEFCE125F2E6C21EE6D5DA3C968BB13337D23548F6472035AAAFEA5C162D534DB7A2866CCDF6552F661156E540C72977EA8319DD71BF4EC289CFD690F8DF0FA08D1A8FA8096BDDD6F29141064B55F3223525E6F05EC618E6741B5970900FB15C7A962526F125B2A18827FD279D2D62C487162B059EA0E4C4E3337285F44B730ABB0C9913270C4221270CAE156FA5355070CF295A876E45CF7180AED877ED3BC478DCB2B544C327D524FB8F146BD7EC86BD23CCFE020A622E3CA06B7C20ECD71751E37D13AE85CFFA0BFC3BDA59825D833D548F4C5D555D00A7EC1C3B77B31931B84A6A826A01BC59302DB58098358AC9C7BD5269908E6D3B71D14D1C9267542EA177767FE91C0B3AD19EEBAB6D5343FA9CD6757A0E060A337924C96B2A32FF06A95605A3194F7E229E2CD004D08E3EDA79FEAFA460AF0ECEEA50C8D178B6F4EF2C9FB3766297C5D0AC9FBF38B53E654E85D17EC67958F153C6A6FF63C9B696978CAD7BFB055FE8116029391DBF90B1716C9A0C9D8AEA7F216EC7E4EA85ABE7A531F173E2F4A646EC7ECE9E5FA98FAB6210CEEB54620F81EE204F225D0013A0A13FEEF639ADC3D30655F03DD0304F026FB9CFE907EC532870040D570E1FC50100E6C62446E87DDACA510E1EF22AE3F3E53B695CEB8FB1F15D73920554B267E5D6DCD14588DD0DB44A5EC20854C751BB2D985D3F779DBF0EA7805A84053909477C925F781C9E8F1F4F2A5E4A69CF00374CDEBE9EA85EA8655FDFC61BE59CF0CB8F434AD0C419F8CD7811A6CFAB1D887CDB32E87C3023C77293BB3178204E8F58D5B1FFB895F7365FEAA5B59B96DF7C345818B5406AF05F32E30B319EC50DD36955E1C70E316EFE5AE6EE36298D5778A3F15C2F84BAD69A0F1C199B710EB382AC8C6FAD93BA873BF744EA1B0E19D047A0BA920BCE04CA6AFA252AB0097E0B803DD3983C9FFC8D3DFC7F41001A9B9EE1FE06845939279962535EE3BDE65605B185FA96BFBD33150C21F28585F6164C88824A5D5D1321BE52B47D39B79AD8078447F9EE1B51F1457DC170548A7DAB1146AB86D051DC297A4A4A72CC52CE85F870DD44ADE16845D2333439F827C10660E9C3BA2C3B0F5A6A8D194DDC9E5A60CB97B65D26135FEA01E83F7EB75B3B0505CC203BC7C44EEB802FDDEB3B2891F855797F54F15A748BD36D4495C31F76B9BFB659B3A948C2EDD8FF421E0CEA9385C0D192913CCFF4024A862CFE7A47E222BCF98AAA99EE04A313951756BE430A8EF6342A2F3005B2F86E733FB0BE69B8A89F1189EB4D756870E129F77F13C28FC3709E558D3F12C3F7CC69BD36D95C24B23B811A87AEA62744563D16454F1908F2A24BDB90126F5193461B427BE0D4F8C4EBCDE77349AD663E0FDCFB4B6A2371687D8F0DE118D00E0C0E17964274C57253E3E546899AF8BA8F963DA5B655406FC73516D6390B9EFBECCACBE2BEA76ACB82EA227DBA71581D1EBE123B4536598971903241190FB8E7F5CCD8C631F05C369FE8846C9B4931BF6350AB20E7D73F3497CD5FF5CD5EFA8E9DE60528E7C53644B45BD9B191F4154B835144144F2710CD65D98E08014D329F495AD4DF51960892AD0B6221F3DF1BF0390D659C9D253FEA0D2FB6AF5091FF4740929DEC8BB745ABEDF0568087F00919455188BE15150F6FB1B8D850EC078B7A5C727B830BA9C1AEC697028DD07AF5849DC7CEA14B690EF37A25D8D4973EC472B68D34038940587385635CC7DF9EB760C8131FBD22664D53DD1BA8A64A64F353CB7A7B95A04B8F28B994E14D53DB1D7EC9C2C607795D2F8A736DC4687B06CBA83327FFDB5A90E493A1C45563728AC1CE65D5559801EB0429B0EE5A827BF6BFE8356B42FC96661498CA85C8885530EDCD984F6AEB13385B4D90D933AB941F95B0F840657A0C12B4C79FA3789D6C9C456181A76293E141F297EFCC16E1DF259CC8127445D15D484762F4ACCAB225D7B68B1373FCD263D65C59CFC0A541E7146836639A85F79C0CA923393CC6C9FA49D1A2BFF1E3030E5BDD90CB9CFFE5A2DEE0B37360AA8DF53DE9489E44C539295BCBD9EDAF266E075A455DF5DA6AB4B6480EF2DAB4791D4DC498D6FF3B189DFF6361836D4C03AB5DE8A2F089CCB63A63750F15ADE166F364618C5C54601754D407B38371F2C367586182DD5C440A4D951B2694323605C912D38BCCAA20BAFF37AF6E6752AF9A2C3A277C2E619D6A4E7161E27E3FC00D143FFD4A9BB7B7B725938618B4A796FB5713AD2858E496B95F6B7197CAD2C3CE2A6FBA3A13E8A7DC21E799F3776FDE2E22E2A1D89B27CBC0686EBE7CD3D471662DF837AE01748C3B38B11C3EB2A5D292BA164C79DA8CC51EA37D1F4FD791837038E4590D20B45E2EA823AFBECF3440176C30749753541F69EDECBBA8002C401EEFAB4A7FD6E628EEBF620385B965025BAA35573ADC5D86C8CCAF32F9D60E2DB69CC84F651B7DBE3E1FDF6B941F2452F50FB8CF237A7E3E3FBED706A0FF9C0F562356420557D900B7AD4A175ECAE4671AE1EE1584554CF47AA308DE6EC2F2795DA349126BBD964C40F8BD657535F732866C49F2EF0F6E4A6B8C72280433A9858EF4DAB63CD2D8B1F99C1B6FDD6CF607A381B2C65FFA56D8C9AB9DB8AE85088125C6FE5469003962991E42845FBE9DA02E2F0315794D542B8609F80A85CADE99DB9E29CC4949FEBC66077C048EEC2EAE98A8223C74A902149E8EBA91474241F59BC9591E9C2F16138DBD36C3ED2FA10AFE094C053725507D3F7454925FCD540E794706370C02543B2D83796471C198BACFF1611A5EABDF6088812E8DE26FB0B4BF62B287D88BA321592902D342CA1390A96C364AF28E8137314FF9011BF9610CD3306D27167DAD9458FF17811A0CB8874FF846C609B70FEBF1E5EE38B3A8C01DB53241DEF3E76F1090D5F03AD46722D1CD7A661CD00E89CB5DADBA8A4B14D714A2C2FEA0F9AC9F9ED54BE41E4EBA56923B2D98EF0C0D6E2CF128E35F22885E36C1B9FE0EE2F0851D46B14ECA70D9E0BCECD2D253ADA047855DB8D13DFB39E84A3F4F0BAA2290F8BFF99F1902CB7B2C14E17AE32668E270D6CD236BDE14489DECDCA8E811E24201E062F7F86E566827B8C7E508321139E8DBABC1831015F7B4FE004943776348B951FD44AC1CBBA75A5F9EA05BA5337843FA6F904DE82BD9E448E4B617D1F950C77E9827FF3A915244A604E08D5F672F52131DA0E012784799681790FDECBF096B77A5089E3359DA2F6DF6C9CC52540D10D67256E1E0AA9F26F9D009ABED59E85C8F5BA03C3BD01CBE86A7EB19DE47329443AD8B36552D594AFB7084C9D113D31B71F6A3096364B552A43A0361800B46D50337846CEBA8E4E1056F1952C1096F8F39043BA3363380E50BE48FD5BC0D729F5F65B9BD8ED346417ADB47F5BAE092FADB18C95D8D6AE40F0B897874D50A6DA5254E95EFE711FCB25CE1FB17C85695D77CE4C6B1BB8D72443700AF3098BA72D60B480B94D595C92189FEFD937C9877AE7FAA42FF974B6A8A3145B792A863B789271FC2C88A95E41B9882F56C3D85A0498A8F9D53B6A109886FA17B1CF1FA444B6F5401B12CC305CFC1E89BBFE69CCFF57E2620D97D988738407EBE8CD89F1587785BF4C9B65D4A8AC11313C0CABEE9657FF807C084395FBA4E4E6EAB639883FCEBB94EF110056EF8FC528C354EFC7043FAE6436C928CBC6C38E14EC7330D07CE71539A6614ECB79F82DBCEACE55CD47F3936D17FD1B8EFD921A227D7E036E57C0F7E5B71F0332BF091BA87B0710B0FC72E35C49D55CBF110C98F67B9F2F6659E7DD430C81D8BC645FA37F878C51E3679E16A618CAA3CD07C04157FBE430A1423424571866598041E3AF7C70A11621E5D739974FB5326E178BEEEAC1BE5D8941587CBA5794A83425BDB4A214A437606026BBE7BBB6138B155E0DCF26DF9EA8DBD635D38D737B29652E7F70AFAE2ED5658EDAE5A5677E876274409F903C5FFD7A05C3912F24FDFF239423E12251E69BA6E0D54CA7E88A4764DB6080EF35E50988736208840B574BEA0D99E8A0303E0968D5F544B297C4BDECCB83A5BACFB721D65694B4B44A47E4EE8B29CE40D52FF9F7B42F1F59F0607E216008E60390F331EB53AE66D3ED42922BFFD5AAADBEAD38E0C5B1D21F60AF7430CD59AA6DEFEFC3BFD6FDD2287990A0176B514DE22EEB37E6AAFCB1DAA1FE74159CF89C2B1C3A8477C2D93417C81423A0111B75431A5B5E6AD8F824E3332B7A585F1864C43C42E8A0417B3D7392598B4450DD6B863505F2AFA0E518E042522333DFDB374EF04E3D68ADC465FC53E9EDDFDE4F97340F5737DE73C2248A7D47E871139C7BC73A213BB3195999E166686A2FFF9C27A27B5FD1345FA3099CDCDBE92C07F4B3A675F78F3453CC197EC730216D771A56DFF29C002E4E9CABB17FFF641EE0DE9848B4312C63CE2644F2EC09D3E42B7657103E9BBF183265BFDD5FFB2D9889C46F3C5562D2DF47C1E30D4D253A0AA86054EB49B58E443A48D1413A85A3BE1E63B0C39C6D75003AAEC72B55F97C4558384A0307D02BF105BA6DEEA4223A8FBFD2115FACD4691F5963C4106DE3D627408A94AFB2E844A8F2FB20A78286F695677AE515BF5AF23B97E41AE0CDAA008AE240A0D7BB5BDAE5B85F498A75C90DDE5C97E5430DF57C5DB447BC9E55004896C2BF1B6BCEBDFCB2E3E4BA3276B9CAECDFA9B326ECC2AF1A0E82C1F7D3487232CA92523C2E25FA637C2BD8B4C345E8B5667EAD76AD680DC36B602D02BB60A45AA2F9416982A371A45C7738A7AD3BDB01F8200D8BDC59F88FD77A617C9B30E493E25B629954706AEE7367BAFE744027540FD1776BBD3383EF8F2DD99DF5456B5517F6E90FA888B4C0245240290519DC311F2AFACE6C343CA9B2E27F27708A0A2FA8AC9BB80BBA66C021002BF782BF71BBB809711E57946F0E6C4A68BF84E582FF0D9A0001CD7DDCDF0CE80FCBA06E553F5C6C45F19A8469E4B1C09A243462354FF09EF69BD93F8F63D7C7DE7340F02BACCCBBA2035AE4FC27CC35F5FC1CCC6F245084D512473307B3FFA6A72A60CE61AAA8F0D1F6CC845CB5C3E16158179E778E44F3CC648B99D49C182983F9D1213CEEF7CEE4E17246049949C069D4E0BB474E0E76087431349E495D4979A1814103EA3B1A34569AB74EBD437638C077B78F8D175B1DCACEBE265BFFB5947C502CA21321BB56D82F217868864EAEBD5E7DE6784D365CACC94FB3429CD0D1B4A3B0302281829F345499C5EE1E5754D081E2A0148CD1BCD1C9C57D0C22248B7A7E62760637FB5642EBDE8FC22257B49D237AE0AC3E0A2044E5988BB4E102429A5FAB628024C75F20DA662FFC79066CB46831EC6B35722B07E2DC2B82677E8B595CA1EC1D40942453C21C504ECFCA218E0FBC9F442CDC41B911AC57D6C666ED0B0CC2338708601121DBE8BD2560583215BEAA2E4DE7BA9C1D06E654AF47D14F1DFE32B7296AADDA288B493A11A14C7D3CCD05D43744322C9C0065E0AFEB3684C380F49019B2977041F5DAD2444EF98C41916B656980676534B9132829358F98D35432052A03FC6F816417A963D9EC81674938A1E3E148D29E636DD03A2C28EEAB550ABC30B18D063471669E8A638D6D4098E886A80D474FD91CA6C98BF948CE3A799379AFB4193EFC6F2AE6D47C0160B4826C45DD5E99F871AA692EE8FCB5AD1FCAFCBD8D7178597DBF78CCA867449099C5E423C1DCCF423677C013624CE0AB76EB022ADF81983C986FA2DA1D1673BB9E8CB9E103DC7BC0A88AE3DB4EBCA0E1EB5A26870DD975B46032D97582ACA12C2CFFBA4B703DC301A01D47AD4620F83403694ECB39CDC7F55EB310C425B7EF6D79E2A5667C596D8B98D273F5490A80D2ED91430D3E404746B514749ED5F13912C845890DAF0B5F400474548AC9ADE031ACE4476807A1E7A8429D5160454ECE4276ED526D67F63D9868FD07A97016D3F90EA89AB87D600E9912E868FE1F48AD392D4F64381B4B7EE67B51E68BE86D85FDD2793913958A9DA1A788DB61308C9098EF968C568A2353C38B448CB59D39D6A7018728143DA87367C71A83B68B2EF6470F9D813F1837A0E621A9FB2DBDC34235CD17F7DE61A9D8D7C850BB81BC7339FC29A6DBF2DAB37AC5A7299855CB242CF689A532A9ED6FD9BF0C80966C7BE8AC16427FC677F67B8812ADAF5E26145D4F2C1324915126644CF5195DFFD15D21C3A09E9E5B5A5CB8E11699494FF944184D3B9FC37C80CF1CC27065F8BDA6D31B31E2F27CFCAE3F78F8D2A5CF0BFD9096EA1423B945D57F41E218AA7E6115902C91295CBC25B2025ECD6AE444244500B6634209562AE30F33F0A15B85E7089B06B550C5C73B25B59AECB9907E65CF0C6D40A098C9204CA1AB429B0D37CE6DBD0E11069BD0B2CE00EC626E9D709A644B2FECBC247C7200911CFDB1C30F0FEB027945E4379EFA639709E763A3C9DC5EF12552579454845636B69C26958B0FECCA269E4132B88853685623FB10E852FD9B3722AA7508120DF4315D4EBAA6BDE9AB82D711D8FE4D4109A919EE62A637E43BDDD8EAEB1584B8C1555EA48C6DD28A95C71BDEA294D3AC88F56B41F7C0469B871DCB03A0DADC36142E84092B40425E731478CD0BBFA655756202D87E353CF042C02AEB9E7C3F84F81DDEE77B9F05A5E7596A164BC8CDB481370B528CCD29804D2FC5F02D74F4F2A5AFC331C3E0352760D23E0BC0C271D8249BE0E5585FEFCDA8B90E34097DF5FC0A21EE5AD309F8E87155AA71140EA66FD834B213622425360C808BCB2FFDD51C91E5FB3125F69875BD40641C02EEA846E2E4E67A65C4D2F3B8C63CC65186DBB74F84D8E67704D31206520060AC428CA2010030F8486D5BCDF0951AF71354B25181446A8C37B680EDFA7C48C7812CFA64F84E7E7A8BEDD8B2E449784380D298A6091354A4E283B8D7F114E5D45F6896E9465272AD65E4214A833ECA1EE18AE986592D43B259109E3FAB9549E834B7ABB010C093C76B2D49A0EB7D2AAB96475232F0EF8CA7E7A8913781D5DA01BB1C1D9C3CA1381AB966EDFEBDAC70D9CCA4E6FE89B703F6E4CCBD34ABC1F2237540241C0EDEAD8E60ED350D99B774BBAE8363C722E3C9DC3A82F7ED613EEAA27280D3F3745A744E5564E1BA607FB256B6E6B96871EE116007B7B20D5281BCC45410799A0F4B5DFE34F1E3B5185D5737C1A348B1B975DD5B856B7C6ACE924DAF76FD03CC40A53EBFF99889A656E50F14B5AC99F76592ADFAF9CFAB0B50A0DA3F5520829DD81E17BE9721CD58D50BCF1C17030F6A46BDBD80D6E60578DA8F176FB53188CEF990BF3D0FCCC90128FBF43CD9E45027B4EA2DF93DB7D08025DE8530FA1450D5A12F711C2ED4946A783174E3DA7202681D769F03FB3F481D098EDA758CB5D312B00BEB0607539F04F28450945AE4B6908711AB924EF82D7E6DA6E0C14373836D13E665A4462DCD4C44FF88CDDC4A73AE717ACF51FAC014633E5031F01AF2650C6CA0D9A276A68E14506CFFD0C68ADCF810560ED35B64B845BC30FB3DBE0A01ACC173F8072F8CF32C617A126A39B0A7F9373142749E3FA6E039DC6F4990BA00B8F3ABC90C2AE684201EDCFE1A46DC42ED706B585F0B0519DCBE81A2C7F4F24F91E85E86E09B9A41047EA9C2A4C457990CF8A5BAA469F4AD6501B48FC225B1AD6804CA1C6D170CD5B4A8E9053C5928C66654472480CF90EE292613E4267852D66257ACD89561629206619783147A04B9632C6834CB286614E72BC0E125B009BE1C1482E5B0DA6D6B6F04AFCC7E11B19B7098D8FE618B27BB5BF7B9CB0F740481505D6596B0A362873A1EB83EB633218D6F48F0A8B46B35E6474EA28CAE2B9824C5662DE3E45C7F3039FE519E738B8839438E8EED287B59FEDB0594F1CBC43984B517EB81B26CD47CAFD07F8F0D120F8A10CA59C80CB9CE0AF3CD90D6FD82F760CD74AADAD3D3EF2A5F3EC92864B6041D9622BE047DAB6DDB01920DD5249358C6FA2B104A6C4D772227BA548EDE6CB362C24D0C76CE6F43C216B8D484DF5F4CD99B224DFD0A1817C1D2D3F2E91FBD4D233DD68C07DC2D0A0DEC05DB57B772CB99B75DE20DF25279F5E7A8D25CBBBB72CD93B80229267049531AE0F9664F77C9F9D4062BAA73FD22B69A2F69C5F93B3DC73367102FCB70ACBC1282A7F53A42D2FE8893E3DFD546A89CFA00609103312B152CF6DB089CAF9814D543E1B14E8FB9C9DF5BFE7C0D918C4074B22848C3C80B45C70B1C176E244A2273C41D3903FFDFB0A74C9B2F1204CD2F6DFFA3C14A2980B53FBED14C84F626F7C97A19B2E347B5A07CC16648AB42C93090C1A7611D6EE51018710526D37C536235B174537F9D99B87B8B79384DF0ABB42FD9B6317BBCFBC9648BA47CBE81803756AAE27BF00607AC9066C9B832430CFAABAF021F0E461BDDD576B9B0C786B55CE51F1747C45BCC84660D5D876098471DBE598BF98469DD3EF725FED39C269E2712F3A39BE33AE911C5FEF8D975E6ED625F93C8D61262A6753A8B0A59CF72F111E219D11C509BB555CD4106FE974E94CEEFA5F2A00E63BB3CA0F593449E314317916E1BF85CE2580ADA51CFC3F25F296494AFF51E7D2B8C294E50A7D1B8436825896BBCFEDBAE3F00669224CCAF10F0D500664CB0E48F275A5D30888F2C1F2D7F0D6A5900FFDE9FB00CA39171BCB7E40DF2F664ECFAD53EC8F60A687A5C6EFCCF27D71E2B7E6FADC49664B2F6EE3FFA9FEB5502F3E478CFFA5833A8625AF830242B4FD7F45E8CC95CE9E79B47F594F9BA07DDBECE4F6445287681D95E5C66628A58D2770C3C6CF5D0A72F1837AE94E6D1D9A8BFE83391BD5C20354789B779F63A8F3D929E8FBFB5AEB352447C687A7182F66D921123CF083C5E7809C8A674E9A3710B4652360623BA03D82B6010BDA029FDBDA751BAE3A18D4817ED6F65D1CC0842E4187AC600D610E241E294F66BE66322A5B7C4C0444A479C4058C4D607B3D8B95D71B2ACFFC8DAABAB66B23627AA4FF8237D9794169CC8BFF8970A2820851AB1516B31239E9DF54087FBD6F24B1D269DB8FDB7646399916B61ADBCE7F9F51FA4A2FB510B330C075D288B9404B9BFC0A263A310D95340EE40C17CB006269738CE62EC8FC291B17B4E61D320809740793C9B693F551F51004BAB1FB85819227DAA9FF603B0F0943AD959C02B381A14B84A1D06ECB4A2CD666E058CF3C667B7CC04F1E7F6EAAC30A9E1CF12859D7D89ACC977FE839764D7801E91F06419E842F2DB69C4427C6E0EB5AA9A986F50D7C2BEE2DA73310DBE09873F734A2F07CCC6D79D8C7AE3C2800E75E7FC62E82FACC04C2148B7F311FDE88A17669A3D548A743220347EB644A1C5DB7F8624EC97DD405DC9CAD4C1AFEA470FF47FAC70B08D062C705A4B6D212AA0B0D546C36C84214C3C9E610E7F587FCEDAA1A8631F01EAAE1E5E8D07F240BDA57A5C681AC283B535BFD57A50A8420DD6120764C246EA6846C35172FF90F805D186DF11588AD2282C00DF651F42E53A0007DC15EE257D1E2063124627AB7037528095F1091169812C3F0BBF53EA6D5F3C24AD5645BE25620C5A4388D35F495B8A1EABE961A3F56A8D6A2D7F06D9CCB195D693BCE2F19E8D8DB5E3C9DAF7EF1BE50B4BCB7EE40F94703E024548D3E7A1CEBE981CFAB40BBDE6CFA7F4CFC2E9D193A2D3CC60FD305769F48B981B3A0400A1376052A1D41201A715F25111AE40E26B4100CE40B72C7A4400DF96F0A5C5FACB1D46D2E3105C0D8DC3EC0956CCB02F0DCB2495BD67719251A40349CE7100EB19FA4F9444D83301D784D094E20E633957010D72F9EE8200E6C53E3961FD8152C24712EC7D30022A0DB3BE79E9F68A1D9DE56596353ECF95C4469E87C3296706F2DA08839A536DD51A6474CC44838C482674C6A3AAA6F9CDCE55A7207D631C1312171580A1F33A67868B313EC9DF64377BA830D161190143B46B151F1EA3BCF465A457084706AAF35316032E675D618E4436AE4DB2D324C6718929A5EB33EDB178E6EB9567D3B85FEDE11CE2ECCBC9A3C5625FD8F67E9D5C1B03A4C188C15D8098B4095362751CCAC95DB05E33340C2D2F52F93EBAF66C485012A5E2B602E833BE96E097CAC1B8D99FAD6497B5070BC756B7C2407446FAB34B1E2BF610535161A71788581825216AD0FB1D47BA009191CE9F6D5B4E273111D6D2B7BFEE7E6507DABA8DE4A34C8D944083B6AE23C8885D341582DCCBC01DA905C56EA0C2D04611067704F193839C73D2DAEC3C01A3345F5ACCEE24FFE24BC6B897E0446D0F822F44A7AC81F00FD2C32F5CF02FCCA62C9E70129CAF5E10C1C68C02085CCB4923ACD5C19AFB41BC7E2C72FAA5CC1F4D3847EDEFAC7E3A6388523F9466E15E3BBB848A0BA34E92833F1E44BCB6780A0B0CD46CB0B73121F13928A5FE059CB8AAC75A8CDC4AA9596C224366B13474FEE8C2AE6F809F2E7958CA89F4F33F6B69DD18847AD626024A091A764000F2EA9A8CCCF15A0A583982D057F2552F63DAB7B3FD90538ADC2A0952421D3902FD5328FF295AD63B54A31F64B69461C01F653E9E253AE0829A766BE5FABAAC5CB108E40906C7EA06C5D5363E59641877752C4C8E57302EEF928B846AEDF429750C86C695FD18E2C2C45F88558D8CC80AF0911E36D8FCD5D28E7CC29363937BBB58A343DBE5AB97F038E98A394D402726B15CF60BFC5E0C391B866785E3DD56BEA19B1DFE76CE172544AAADFAE27C90F86A105AA79B54185797CF385FBC83416789C7163C4465B89FF4467F34D1D693965459BBE55D515C8FEC52EC30ED9E8BF5912577595141AB9E1D9547400D9052D3A477E79BA31D780A0942F4CBCD8BA7AC375E344D7C4F52A6288A36D79A4E0BA0A49C7778DCEB859B8C0C0C6AC69B328B59331DECE8D1569AAD01DD74D48633859DE29FE55482767D815A22FFEBDE2BB1942B72B15C2555DA1CBA0A3B955B32DD98EB822F9A7B3A9A97D5A8C2F87C02187E5E23890721EF1C5BE17FA500101F6C54BDBECBA3B0149BEF1828060ABDD578D3F62D644B13608E079F283482CA6FA024E24E2CFEACA6289DD1622D8A3AE1053C513EF2C8A74A4B9DD057637195B466A691D6B54751D16B1B35B7D81AF8065D5A7B2914597AC0D50F0CAD3894610ADB22EDE889EA29C4F6B99421B68B397B3309CB4EA25F7032D617DF587FCA52840C9E5092BAA7176219137804ABA4AE434EBCB797715EEEF83A2B9E76E56D17DA5BC48A9E7DFD2E052BC1076496C7A9DC830FE43647C809E3088BCDFBEE4D96F9D52041D7297267B32306B5AA6BE1BF726BABAD38EE261F0F7A89B4A1D6871B10115A28F3055D9F4CFDCCDD1172C40D36869037675E8FD82F25511B5BA3CB0B241FD41C4DE09AE82FE28A2921D065B1E632C06CDF01C6FBBF48CBF8077B13F44CD51D14B5E4F0E43E2B46FBF2BFEBDD6EA2816EBF904101BF05E9031DB98C317245CC834E1ABC7E971FF9435CE65D27D3D2FA174749A7416CCE4698008E6AD87241F88125A9A127D766AA4E9B2387B3CED17EF86D6FC7B8B74806AE0DB5F05FE0BE04078B8B81C9FB0C6FF79138B10C950CE213A9C78F6343520CC854A56B71B8FEE5B12046458BC26DA522B7A2E289BB35ABE8B4754B85B07518590C36B958D9DAC3C73F971775F67F53ECDB8987D661D9FC78589FDB649D70C37BDF6B26B97C701C7EEA41581947E3AA86192A4E74D219D67143843F9AAED68E46647F84CD756B035E016AB83E6007586A6E0C0583536860BD25560CE44575151EBDAFD770AD6AF109FD9F2C19D591C51467B6AFBFB7020F704ED698F4C090DB919E17D0A6126EBA3D37C3CBEF142D6C2D7AEB178340B6CB16A27B1899392C747E57A267DEED58B3AA6F6D733C8FB8D34BD32AEFB97D614CCE4F17DA28E3906525AB4DF59CFCF6E5202A161DF9AF908476D3B05F24F2F9D03ACACF7562F25925CA6D89DE63193C946663256345F3594CD0789B8CB3DEC7BBE10FDA5C18D9588008976D9B37BF228C4466D145B6D52217F2BED3AC44B95C258F900FF43E2307C1C85BD55D4C728DD98FEF647EEFDCA976EFE27F9460A397B610493AF17D483FE888282E0BDD6A0CC492952736C29436EC5A392475FC4231C5C8C39C697000E0C17DC072AB3A5B180BBBC0F649C8D2ACD561437C591B863571123E5361FE0BF11626590920BF95A5B5F69CFD84FD085572AF05EADE10862BBDDA180D3A35A30634F7195E037AF11682E0FEF5FA20EA2239E3BC00F56CA52B9BE5D0CAF0B8F881A4DC6FB25E6851962477D08F959AA8A47FAB85DE1009AD863AF4CE26401C28F7C73E357520C361C2B863FC25FA2D0A5886DAD4ECE0A82FE8646CABBDF54E7F48098CA7B0F2A99855FE883662FE1381AAF5A050BCBDA822DEBDD04230FF60C95E3A406E2B1FBB0F328EF7842B3C0FA7700F2337D4541FE0D22B4E03FC7713A87E1D56010CC8EDB8EE76D2A1533A3884E30E44AD73C501E62A56FAD9DA030DF88789BF009C0ACFDEC16849C6950C4398F3167A2ECA14C38BF81F061CCD96526A9983200E1B6CAE405846BF25D1013F39B628B886B3D3D2F9DF6965BC832BDCB67C79B408A9F6C5C46C98021408E34C38DAFD2AB447AC84A2B87A9FFB3E7C4E2E63E35B442ECBA09BFA6B938AC4CA9DB421CAE1399D64C7E8E129F5766D0F5D1DBBD544AD42C3F5724C249BBEA16A407716A4B71F4317725C421FAAA6B00966FD8E6DEF071785B6E906902803E149A7757135693F0F0DCE1F7D17577740B6F451B2A9B5EA3303AAE26112BF44530344544C02E97A3FA8FE990AAB9A7282E3C39EF3A2D061BAC7524F9EFE3D2EB948389D4749A09BC859B812C4B2D67D7742CA29A8E793D1EEED4DE21EB5949D6EF193D2F02B4C7E3FA714AC5B6C633E5EF10BE22BAB612CAE82CB6D49DC8560463C7C543D828D16A0F7ADAFF69282D0BA6C8BB11F1B9E692D595977340551C3CB40BC69AE7F35DD753FAE6A05DCEDF61114C9DD990C1420F70142BEBAA3703B25B072F118050E8F9005B9D1027E3AE5D03068E5331F12CD410E0C33FAC3EF9C9BEC0D214CFB2761E6EF44D464518592DFA3DC9FC947E1FFBA3A9B1D363D3B2149186BED29A7BEEFEBB3C1152DADBFFE67B6BC75CDB1521604B13ADA2F7E76346E056EA902FB84A0429E18A039CBAA52A8FF9CAFA9667C21BFD582117EC892B22B32F92B7228218C6E9DCAAD0B98514A0A90734112122B5E2C9E84B42FC4DD5F0077F623D249A67D7C73589A13FFDCF28E7D7AEF4849F3482ECE915A66D8D4EC468CC68EA12EA4EFE30233C8DB5328F1AE5F2949A4DAFAF27148173346DA4AA86DB0D61E3E216CED84CBCCFD2911ABF6F2AB7114549A1EDB2301D85DD5F2DF6B91C6DAE33AC03F451687C3D94E84576E9328A74A580E97D2F3A0685F5158D159B6D299D79B3BAF1B75D856307A3C08F7B6B353DF81953C5017C835A9FB82C4F8F752ECA39C2C9D07592C417E5CA26D426B728AD2A19DC6F4ABB00A8B5D85E94EF56760B806A28F286A4A3B53E957032A5120CBEA08A5B9D51B15AE14721F62358CC845E8AC5193D19DEC822B75C475DA0B6173B756A6BA05532CD2C7937A3E840B4B0BC68198A9F8943742CD807340D2B87456344FA29B73A39B75DCB7F06073FF02BF214BCD6738BDCB1304BBCF111CF2B84338EAAE495896D087CB6F4E2B5B6466A71A711AA1D360D40A05B35A29BD7E098158416000C2C5F5EBA0DFBFB2DCCB56B53C5346235C5EB57CC80A4D77AD8BB87F21EC4FE451EA8DFAD34890946B2CE651A16FE6AA5EC70D825FE3D40CF45319AD17A0C76D1549418D1A560BC9F8946BCA888B77FEF068259D169A72F6BB25BBEEF7C684E046D7C4CFC9975CA498513D5016BDECEEA9E22B1C224596341E17BFA1E0337E643ACC252CE308837DC672B9BD4A69F5B5160154206A3F2FD7F80C206AE3DB39EAE8FFE8A3957FA5CA8B2A47DD8C28DD4FFC95C5AF045FDD06C1843B06A9B20BC14FC8CF8F286E80163227D913F472AE82CE5CAAC81A2FABF0403325EBBFF36827F87554BB5AC04A54ABC7FBCF8AFBC853771FE8C552BBF2AA34E2AC1D7C5B8F06F3ECAD4A285D80C59747564B7D9CAA072B3EEB2761C813E639E0E16792C42F5B2BA32AA2EFCA2BA6B98831F2CFAC6F282481025DEAF94D58BB75829BEE5343AAA9C70E4D24ACD3590EC0F7BE9B1C3510EFF0B105166E6AB2B14D3461986B5AAFFE85BC6A02F4D283B70C1E4EC4E9F4900E530C3E1ACA2EDC19D54064E65DA6A7BA6DA608E913EE08EDE9B2A6E8F68548D2BC3849198C8B8A9940ADEAA7C10B1C011E9A7786B27B37ED709194ADDFFE2A69B41907997BE225EDFB5402BE4A6EDD01CAA208675715BCB9EBCBB1976CFDB6083B0D886586B4DB51F927B122B57187582F79B7F62FE460091893E712D8B18F0ABA194ECA1F7168681C0414CAF46CCD70DD4BE551E540A4ABCBBC9EB410FD6CCD3D2D3EC04DA4AC00388C5EF7BB8A171D0CD02F6A3E930F1C13ED205BC582AB61783BEC2F6CC73D68C84BFA4CC4751E9375407BE322266DD10F25157F1168AC57DE7EFE3E97685070326BD0AB70ECAB78BD328A2CFE857A72972785E03C1913EB0BF0BA93E8BCA7906DC1AC956AC8000A7D358DABC5AFB3E93C6452F5FAD701B377DC41D3A9257EE30B59D223EA098E3414162CDEE3D7415C7EE364318450EE9725BAD36E84518E0CD8E626445D50FBF682016D385413706E3B787EC1DD4BAAC29436328277772C479DEC0C3206DA70F5D951A19C204EC0A819FBD09B64B6076E1B92EB0C014EF68E3A0381937776BBDD0708E37A821DEE3E6522D7AC2FDE39AEB47A9F2AB49A2CE564A155098D5B29B183C69A8E7FF0271D7B74A08334FF0DB050E224F60DF653AEF2E16205AB84F85DC7AC3E197F30DC87A3E9C06619AA626E685359D9D66ACFAEF6279FB94873AADC679F856EF27EC7011C9B68C53F8B63E323F6CA2C219633480029BEA0E91754A0997D9258B59FD10ABA1E1D072253D073E2F634E22A0A1096B00540D9AE6A2576223F5B0C99CA778C719902CF0D086098F52F3A36D3F5908458D6DB6C93811482D8EEDDA00AC8171152F87C30D411D16F871BB1E5BABBFEADD822BF63C164FB637F052C17EC852CA7BE16197FF40C27718E858F979A535CEAF773020D95153A63FAA2224CD9370285D50B7C36CB8722C76C7336564986121C60D789EA5BAF7E4EF73CACDC94240C115934A620E681A76AC6EEE004E0CA87EF9021BC818F93028C34C23036DD3719B9F1C912B7B90BC1357F2D37DB08287393FFC51A522074C6EE62401FFAAD7CCA5A2648F2AE90C30ADC827CFF800625458FC97F47E854E15AE3D3EF371F75FEC0EE04A4B3EE5750E0A3023BD9C048511CE4F6C370478A29111E293DE458D6472AC85FD14F32C8FCFAB434B12C742837D6A5AD0385107CBFAF2B8648FFF01188D2FA458F9E80C8D91AEC69E98D152438A27911AA1727492A7678FD2EA7FBBE5FF2D97DA3567C2D7718AF463C8920472F36C8E6AE55CB00E97B39C52DEEF8E1E0D0F8E3A663194DE28AAF6B78154ACFC6C1789BC4870481D4E19151F89FE446B317D77EC2E41799068F0BF0EEB11E149C3E4A45BF84EA5C9FA4FF30280D68129A408EF9E329AC040A56FE9772DB450CB975D16B0500F6B9385B0271A17FB4F21F544B1AA1724EBF40D0C2C915B42E774792F9C5DD7763A314339D2C5897F58D48ADB1A343D54B4751B6AFA52D69BF6872CBD7F70B33C00BEE2858E35C3545CD4635B8D88709EE9F043A1795643DB6E8CD29A9FF7F0A38D45C557807E75F3E847DF9D96A5A0A6975A4460DCA8C1207FE0F06F2B3408140DB02B2FE84309E984EF1131DC07B716F0D063F3A3AE3655FF3BDB843FC485BA67C0C4B6D58FDBA8847242F351E2B055EF934B48CA50C496DCD0A01D4B52962402D6F9533E34DA71DC7AF6D430D147AF94DBED18FA76B9DFDBBDE236436899ED5A308285416EAA7C362355DC7C85B0C9C1237995CB6D3F7064E24D92871BA9373CA9A30B4A747AB5E20011A1D2F1B2DE66C5F0A28B83569C84B44E65E4FEA4C574E63A638D5BBFADE9D827F63B4F23AB6D261127B96FDA999AC012E7E08ED14B83275CD7B344AEC39E524C3672BC9E0EAB62FF503842583D912348594859AE77A4B4D13CE9274F510A255024C5EE314E5A1B716A1C43D5E24712CD7DF92FA099A4DABB918F7923D69D045364300EBDE70822621CF8AD1807277D772D1E10FEA8316DB0327C7E651D31F4C0D15BFAFB6A6FEA9CB3BCDC65032EE611E55AD64333866C2577E539AB365FD0D44AF28D4DCFBFD604A6BFD9F6595006502244EE3A71E150C97115B7767172B5122FB3E670601A875CDE1F1307740016C9F1614222A6FFC3D05FAE06FF26D075D13A3F9E9BA675BCA2577F9C8D51E822FB95E2D414BD4CCA5979BA8DFFCF4A972EA0ECD474C8552D21866D519D4FD0540AD6F6D4F4C0A035646822D47D8EC65BAA5F4297977D1921BE66FEA32141E26330397F6A13E5EDAB9953AC0EBE18CBB1544A09632D72A45B08B61F0882131B29013FF8EA0C836A3A50FAE1487F47F75F142F4083646499D9031CC076927AFB862349899CB8DF1A0C3AD1D96C863904E006489A5332F819C844A99F9B6657E265BA12A7D49628D7E9126F109347444F5E52FF2B362087DE890874DE386270C4D6DCEF1E789A3DE607D70E113A25D85F69B22EED6585C3F99E31ECE4CD368B98C809F025B3B535656A5F3C6B2021D1471D241DC8A98C92A6AD4D40E86065D4EA4C1932D55BEFB0734FFF7C2FE8CB1FD46CC44F4B943333D200844A2FDCFBBBE56D3093C474BC53791DD3C8D9B426628BD4B446D6728635FF9FCB66D3B34B60BABDE37A80DFE49BD2DEF84597614490C31A585D37D7B2C13E80E79B0AA83BB8BDBA03C29B78ACC8C901AD5391CB815FFD699EF68CC73739A454AB5D0B901C009EE41A73696EB25C8CCFCA21300A481978604BBDD30253DEFE93060078C94D0312D1B67FE09720AD5E5DB3D8F0AEFB24CA703B0DE8D587A9F41E868A84353DCFB55BAE55A452F1E801D779BCD2D91A760A121CB597CB7A33A888AB7F5D78106C8D8D14A08721C963B39363F4D5DAAE8B302E66D08015DC5B10A28C82E8D5460074B48577F41F343DF899C86B258D16290371F4FEF51E7DFD8DFEC7E7C5AD06EC664E953C07343B59AAB4E555616F8777D40C1061D497FAC6D9A2CF6D41BA15E1922B48A4200D1A65C825198688D223D1F65CDEF209A6DEA5D0FC5236E7C5D3954D69F4864B7D33D1424391E5128BD595D9AFA5E3B8F793147A65FAC58B19B9F9F17C07BBC866E97C78F36ADC240B5F713507F9E7B32D8D6B67B84EE9C6EA059937D5B8CACE0EE9FCFA0CA95B8203D2DA791D6A5138A5283ECBF2B4528616CD21421AD455EF5296BC0F9E15317691D53631576B7375254FA0D5D4C781C4B99414DAF63A11ED08745F66EB57A02FE331055B3771068EDDD41FF523013058AD0205167D671F61D7261B6E48B92F54D3E2591B601A582E9B9E13E1FBFCCAA682E21185182890254F43F1C83882FA96CD99E40EC3BD89A89C678FEADDBE948E8B36D7BAFC81D5473E9FAA32FCD75178D7B2D1F80E31A8635470F63C88710BCDA86D504B339728513A57C47425AB0F776B5F6072FCE9F55E80CE274831AFCA705E6E4373AA8583498B04A4D81132BA6C99A7FD93EFCA65B63F99D3C6B4225CEDB4BA33A34310D19CCCC469ACEEFB41A3435FF015CBFE1D132430C14BB163E35FBB64B243864E5591E1489F704C2B973ABD2BC7FA91E99B60070D8DA49D3C0B805C180611B97ECBA525B1CE118BDDBE3E6D281CE0EEC29256E497EDD15200456D2EABE927A9D8AED0D4B0173D0C28070ECFFD520964E7E1B1AC5CA4FA46E5B61037B1465C2B2E672A077FBB8B18C81E7352AA9F62866D8189BFE63184B96DBA039EB567BA9FA5861811F8276DD0699DCA59E2C7C343AE3D60BE09CE56D60243AA1033FE9DD75D3227644EDFB1B5BB8F2CFB262BE0AC833418BD1A910CBA8ADF82C45D8C221AC96DE379F03F25640A3CC3B0FE7E966107F3F22C2891FF5668F8880AC6F42F1F420E804E36D4557704A91506EF2B56C7B4B70BED50DB22C64BFBE8382799F6E2198A25DD9DFF55973787C1DFE5F51E1ED3A599F86C77E56660E87B06B683E8A80BEE02C7A35C06AC59435CE398520347FB437F2F34A9B1514662D320429C9757AD20D0706653C89330D941D45CD12E154885B1EF6865756D101724461E14FDB1E71A36F92C17B7099F24E1A32E5DEACAA8E5B7A822C890962C030C2D8E7A6B2EC63B7BEECAEB74A8824BEC16563C8D375FD063759A9E356C4DD79EC7A7F3B9D7E2BC2C7325DCC56F5CF65D69F03F44D419A4BBDAB5744D8CA82C14923C4E75435A60C7C5649D4FCCEB754055CDB9C52C64EBB8467B3433FB39C85278FF4FD1270493A31EFF85CA77ECAA17D46B34B3695D04887BA8CDCD247FB975AB9A8FCB35A0F2D95A09C9B7FAAF0727C27FEE5A04EC478B0797B01B0DEE85649909D763E98518B46E018927961BD27198E2B5ACC98C0663DD0916B18D120D227C0D3BB4B7525B6827D4EBD7949F608581AB825E8FFDE54752791BE81EDB1A3051708B84C374BAFC06813946CA03744790D778BA0B676D047CAFC50A94A3E7C0E931828E2B62928682AA56AEBF823E0D16551C830E0DF380D3003B669E1844ED2892A9369A2DBCC0F485E1ABEB1F1E11C8CADEA6ACEF6A42CD20E8642706ADC941EE944935BCAE19E1DEC093B91B19CDFFAFF1FAA17CC4E7998330F9F857B36F77ACF913C1CCE8E367E3E2DC674595FE113A55D9E2CB076C52ED337A9D0C8FE0E5C78BFB9BAA91102E7A0E5F1331150CD2FA4598A471CB0C2085115466DD0DCB75A58FDB049ABE3D87C8CB9FD3216743F83517F885720BBDDDA5857C3FDC460361DE4F5A636FB3DBAA81B95996428DA6F7F49B325824978250C3CF29C198ADA298BA3E5BA796B5D518950939C393D2930A50DBA5DF1F615E9697A770799B25FEA54B570F9F2076F28F54B569D0285322BB26D1794F59F24582C3A23406BE87C36C4A34EA14E40F3688ADE8FB68D5595E5EB5D7FDDF3FD31AD559F04D91A9FB742485EF697E6881049990891DE4B2D5606126DA57754BDDC75BCF4207674E06B119134F6E9B802C7B01AED4B5F3B052BDA644CF2BEC7C404F96C901BA38F833F03BE47ED81350F958E393FC5E948FF390848BC05ACAF535E7CC2560A3A41F3B6F7BF37E288EBCF8D6F3CE6C47146667F1EAC4857E43DC5E65811C286B149008493827E2905BD84DE4E537692C607F607C5F810FCC59E93616B2DE347B6896D20910C5C254D15B2AFF524FA44929C8045646BF89A959DA4A1E2E4D4D039AB72C2021080E059E10C4BF42FA5286D560B5B8CAA4206D898E74F70E8C8DFBA386A99CBCF40EE24DADCBD73486F05EA3B1A4705B080BD52F60E0F4055ED6957B961AA90D4B6E82AD0CAEAADBCC5BC73F34315106CBD9960C217A2751FB80143E46DE29F5CF0C7CD02962D357C796A327B12D9182EACB7231005AE0CDBC99E7B5680CE2FAB4057422107C44ED79100F372BAA7B0317725F6C5B61971556AC481998613C7AB25F09242668A6E5FE1162639A1E375A638691878E8C3B5AF82C5DDF3EAF70D98D76652C63A1A854642D1B25FA9C6FF930DD07D3865CEB24EABAEEA91F87B85E5B601C23171A9672899DC65DF9628EA061153A1D6E55CA39F8F195FE7A7A93474618A7AC27719366BD4EE48F1EE012402DF4228852A5B6831FE5C0C6A947EF797993176E41C91960BC151FD11451FFA35518B050DEC194A3B2A1EF91BFDB0807BADC42FFA1DA0953F51D02786191DED2829CA2662C4376D6F950BC6A19AAA96BC7775C917344CC4F58FA0A5ADC0FB4004740CBE7DBEE4B2D095D3D7732627A20DBA8315D2A17A2F293DE9B7E83777E395662053117B499D4391F31959C564B176881E40A6CBD5E8B3E7BA90E38508DF9EBEB40B854D766D432449A79BCEFD3353CD36F5C998F83346B9FD0A289EF0E54606558B91DB2DAF05D81C98B1C6516245A4E23AAB1F3C0DE0FC2DD70753E6A94D3F60B8C8D9E2366CBAC7C3871414C625413D5D4C80D3DB86EB8278CA9F755602AFA30A28699D977796E257F848EF50C415A2BC2B2CF947B1B076B5AA9A10F1E4CF17B43CC9370728601AF9CD0E8EBCC024882764BFA82C7E4DDDDF625C05B71A88D3C35FC2C38E1130C50A11BB7A912D49E8D1A54D73BEF4847D531016BA44A2B7CEF84B2CA521B1729560E53049E48C0D373E02318AC2A0103537B8D71778A096AFCAA2FF278D52E144765D3BCD18B4283829AB985523F6DBDC932086C634C266670B2206D0AD65E9A3E500C745FB257446130F760E724CAB7F539956419918266E7659C8B1738C8147AEA6C8194522092766C83E825449576114E5688BE7E069FF79C44A789A84871973224ADD8C7DFE8C5EE5F67B9DCEEFAB51571753481E601885A5269BF13B130FB68400589EA22B5781BAA07E8842B3B44DDC68A10D48950AA8B620C7DA3FDC7621E0AEEC92BA5561506431CF67C5F8711CE608C246141A77517E1BF9B5A1188404886F203FFD7FBBB764C4AA75A29511084B116C769B7290006E4FF61B6DFB4767DCC4F2C58182178334764FFFC981AA43EA6FC2F2F51DCB94D63A7FEDDA0BBEB9201F87E5302903D3CF4DDB064CC70C7C5B5C55712EEF91DE63380F37246492C29EA46D710B2D6F5AFE499610D9152CE6EDB0BBD12C1F3999633FE9D8158CBDCA068590FA3294563C6DCC97569A3F35492F7FE96E438F5530ECD4307F6208A1C93447B3E6E4A719E5CE0BB293907032BCA2EA249E7189FFD743ACD0283251E3B41000A8296C2355A9A0C233DFEE5F7BB47A2FBB687D9FBF270DF2CB5C3F3E59BC7E93212AE4202328FF81F41AB4840308FE26F62630A5968B3254E805D0FCBEB012262100E29F51807CF3578088DC2A62D9705EA3B587321E318E01EAE190D93662E3A80C38E896E8C469BC55F8B1C46A4F7870B43E5724FA227025E5B4F07B2928EAB9F74A586F13492892D6ECE120EA5DBE814E56054FF40641CBF13962301203933EA4E2EB935A2AFB189A98FBD3F5E807BD537D9624B0EB50E969A1E3F91BB7B5FEBC5B8D50A50C7A8E3FE02801C791A3A17EAB5DC85E987C97E1E722D3B86A7C1BB82D1E9C4F185D14B7C152BD078E81B072260EB11ADBE606C2E0027CCE8A436B7148199DF5FB1126D5AA71CA23EF5B9098D3E20E459C8EA7E9E5CA68474FA7C0F7345A6150717BD578563739B84423EEE22CD0ACEEAF775C72BEADF013ACE6A5876DE042CB553719339D5FD5B65FA4FC5B06491E7F9E520B3AA85012055EF44C5D3E74E9A65EDCA3EE8D2A651664521C7E160F424484375D9F3992882638A6A4FD81EE00F74F86A9213679959FA4FB6A2D7403E612D10C04BF363FB300C84E8898B968B1498B0C02938AC90879BD9D8AC7D06B72961E96FE547C76366A1835BCE1E28EDDD44606B01DB4BDFD181C27236CBCB62C60412AFEF4388AED963D828B5AEC6F473FDD6240D4A5FD44F9BBA3CDC73CE58CF3A945583A3B853800506922897C3B96515F9A5F69756B7DBB042B08288DA0BA2D62F77935B10B81907963A11859B895D095F456371D4891B45FC95F4030326CACAA7CE40684A47A036CCA667B5F69F0F1FC437DF2D635F271013C51C3CED07F2E894B9FF10AEDD08C39665D1FB0C37D214F234FC56EAA463CE706018B5B7CF00E5E8066648424E5A4989DE5CB9922CE5124DAAA2A9F8B5AE30E436EC46247D3E23710520EBEEB41C66A425EF2D09E3B2EDE5817913E81BE726F643AA5E9B4B6E99E3CD20CAF8A28AB160AF5D0E23BC5F1DAFC5D9BBF7401B4757A1969DB19F5C9D1B0DFACAE39807985259247413386841D57C3198AFDCBC415A12AED7B363AA59F06AF00B005A1F15CEA0ACEF6EF3295C424A075BC7088146959E0750C4C24F348D37405FC87A03CC8E971214037E1DFEBE6E81125A398383C51903AC0406DAD57E3683B6AA04E229BF47B31205FED9CB21DA73ED10F16D18A591E7FD9FE688FA2FA5595DD6A94C95D466D05509EAD0BFFFDD4DDCC0EDAD9DC7115B7EF3A0EA6B1F8270C4CDF0E2DBC255256000649E92C12B012FA54EAA7809FFB48906DE52BD76C21C0351C697ADF2FF241339CD47A783F0F882DB0618EADF67A11FD55789D64FE4AE0CCEB400072CEC354495F762DF3A5D0FA5F86800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark{restore}if%%EndFontu1`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Title: Labs logo.eps (Converted)-3%%Creator: FreeHand 5.5%%CreationDate: 6/13/97 5:28 PM%%BoundingBox: 0 0 303 161%%FHPathName:Power HD:Desktop Folder:RSA/SDTI logos:*final versions:Labs logo.eps (Converted)-3%ALDOriginalFile:Power HD:Desktop Folder:RSA/SDTI logos:*final versions:Labs logo.eps (Converted)-3%ALDBoundingBox: -160 -535 452 257%%FHPageNum:1%%DocumentSuppliedResources: procset Altsys_header 4 0%%ColorUsage: Color%%DocumentCustomColors: (PANTONE 202 CVC)%%+ (PANTONE Warm Gray 8 CVC)%%CMYKCustomColor: 0 1 0.65 0.47 (PANTONE 202 CVC)%%+ 0 0.085 0.15 0.43 (PANTONE Warm Gray 8 CVC)%%DocumentNeededResources: font Symbol%%+ font NewsGothicBT-BoldExtraCondensed%%+ font NewsGothicBT-ExtraCondensed%%+ font NewsGothic%%DocumentFonts: Symbol%%+ NewsGothicBT-BoldExtraCondensed%%+ NewsGothicBT-ExtraCondensed%%+ NewsGothic%%DocumentNeededFonts: Symbol%%+ NewsGothicBT-BoldExtraCondensed%%+ NewsGothicBT-ExtraCondensed%%+ NewsGothic%%EndComments%%BeginAGDEmbeddedDoc: version 1.0%:s8W,W5t=<t^::f#!!"LF!!3-(<,$2\ErZ1?!!3-*1H@6H"^*\8%:!!!d8!!"`30E;(U!";5;F*)>;;e$.7Eb/g"!WW6(!!<3/A7]glEbPdZE-,f42us9b+#5N)0J5=B2uiq40JPL?3A;R20f_*D3&*Am!&-/a2E3EL!!!0&&PQVSF8uG3Ddug^ATpLQDKKH1!<<-#+pn?+!<<9'&A8*C@ps1b!WX8A!-f[f!!<3$8,u0]!!<-$8H88\ncJk/$3F617Kk1Bqu?cu!/gmR!^KpK!(@6*!!#"_!D*7l:,AOW%:"6VB>7fWbo#QP_q!!//_!+6!2mf<Fh2\&Pj@o.2[DKHEi;Is>G!"/cB!)*B$!-8-O!"frd!*:lTB`N6X!$D8?2#qGI!+S4n!!",A1B9<50E;O^%'53(8HAqo!%1K,6ST*\a%Sco6rI#G!!%OC@<6"#=)r"/&Kk"`Ch7*u+:oYO5o9Y'#B4Wm7VPC)%feUG6q/d60H`2,b5a7N1>Mph2Dr,J!<<6&!WW[(@:NAQDId[0;e^P]p^#gl%:'a=X>!"8ie!&Xam!,qpP!%q1W0Hu#IA6T$9!!tXj;jnd3!!rX#!,nm11Ce7V%r=B1H9D];2]2uX*EZobE^gdpF`(\`!!Y4kAMk!4&-;h8E+*^"*r(7=&g0mZ8/H%D"TSl0)?KmB!!*'!!!L4S!!"kq#20&2*WQ0F7t>.NQYc^.@-dl1!$2.@3?p3Y!&ZH#F_PAt7VQL7H#8(N<"hG!!^J=t#7ZLjSgk-K(B@836&;6q&l\j,;#-:e%:1B9iD+?:TR<>-JT7l:9T-m/M80`a6g!(-`e!(-_d+92P,lOErC.Vje>!(SXC!,`JN!#<?tAhadg,A7K/!WW9%"D2@aC]XS@!"2!pTc"W=+95@q)0e.X!rrEZ2aTSH@/sd;CRj)Y!%%]8"Yheh'*'Ta!(?l80b$\n"[<*'."D;71B_b!!"&]256;/l!Y,eB.0r0=!"KqM!"L7S%KlbU!$2+]!!,Y8!!36G!$j]7ir]8rl2q#$ZP\Db%:ncAe,C]Y@I!<<m,)?9aQ$NL/_#8TN5!<<lT!##>5)4:I)(*ik\J,fQb.f]Q.$3CJK1]RO<Ai0TO!!(6e2#p#E!(a6-!!!d.>7(?G<-81G!rs*&56([!8Igu8!!!dVI0#!'!#CLp!!3pu!$qUH#c\ZN!%9W'_#PrD"k7_tg]INlAIJV_J/7YT!!3rc!%TuB&6*4cF@9[??tNhiCihsbFE1.h5naN;@;KNi^iXL4Bd"i,!!D%5jN["F%:%0QY4!![LdE[&A=CJOs5!!^gi"$[M\%KJ3`,6.]t/#!"s2)kRp,m5q&1."2C/2mSR!$='6*@A,n*&SZk!&Y<B0F1`'!'^HH:E*%^"u%h0!!%]QK`D)Q=9/^g;a:A;!(?lB%fnlr9-qMLN@Z:Z!]C$!5=#>N2cBr#!94:h4>oP3s&FaQK`En68,u!]K`Hf,,6nrE1C#p!%6IJn*$Y[gs4'.n;[8!VFT=c62ulk^K`H5q,6nrIpH:fB%:1C$'!#<u,l?h,6/#7*:W6O/;FK`En68,u!^K`Hf,!"(M%$A67u!!*'b!'E>D0eEY21KdIaG>^hM:crK$B20U?$8DM]!($ZS>sU;A!(fpO!!!O[_DPj3!"T&0#$V'-1Gg's#+P\o*'jr`8dPIt*&I^s0H<1W(]aUV:IRJk+Xe=(!WW9AE<%jY*.2f0KMqsS*/V"`0b4UK#?qN91cGXM!*NQ>AQCGm!"8im5R[Vm7fZ!Y)#tL0j%ghj%::DNpF!#,D6<>,?F!"f2B57%f]8I@7`#W"jQ4Yn,G"98Na'aXk78Q7WZX[Yr;D+7.R7Rmk24U#3]'e)TR(5#%+6jQ!mdmP]R!*^'j5U/T*90WG%64u(q6UDGi;fm:NHN4%%A2+&a3DiL,E<Q=s2'E&#))2*k!'60.@LW;p+dE1(Ble@s!(db)!5Us<6r>mTTc5ai!=]#42$QNMHY!1i4(iI3)ut*]DD?Sd!=1i+DerrX@<lF)n`!?2%::18KQD-eVT8gS'^,od1neJolF"BQmZRohmaKk":>+;7u+5s7H+<ErU1<WH,"0E;(h!*oSs!!$s<+92C31eT#/!!!<1op"qO[`rLD*/+BH!([.\]AX%(cs-g0!-J9D!OUAZJ-`e*Ym9fQ!+c.$!Q+&r#eV'@E"3,,!-J94!PIh[#f7:?#DE/#!([.0!Pn\=#g*=e#DE/#!([.7G!$&M1,oM$#DE/#!([.=mN)YV]c.31!-J94`7OtN%:!?M9ok^HV7K`H5q8-.T,h?_,\km)nBa+/:48-.f-5$.i>!-J94!U7MO#g-*'J'S@R!-J94!CIDh!JLMr!*B7V'[OU('SQNE!([-N5t;a;`5#^qK`Et1!!5J)m0M.:%laTA!/1F?#h9*B8-/PGbm;nkh$<[6@=g^D!.=i,!=02dA3^0L!!j0pnP'"Aj%'1aGsb=0#Xn_O"B>Fc"c*2dANN]hK`DtaZ37X-!DWd%(N!1U70%`9fM6`T%:2us7P#;?14!9*KR#X&/Y!VM]E#W;fh$T8,f!'L;^#W,^]UBgXq1--j>!$F14C8kP?#(d-a!(MhI!$RnX;,1f%AcMc1!&A3f?j6VHTdW'o@OOAk8uuM^4^e>h4_.YX*rl9R!WW6bEB$+h`rh/H#iJ#,#DE/#!(eQK^VMl1L^/V6^c6H:=97'J#hr.X#J#NgAH57%k-%YO%Tiac!-J94!UQf3#h5E>#DE/#!([.O!QW1F#gFR-+F?3"%:#DE/#!([.IbB[1jK`H5qJ8n*\f[0p0dB1_"K`H5q8-./iPun(F*/+B8!([.7?D.YLI^B?6!-J94!QF1'J?0%(;FCbD!-J94!Pd*b#gBjlGk_Mt!-J94!CIFB\Un#sK`Et1=91,ja&*oQn50mR!&XaI!CmpG;'8pVK`Et19/3ip.0pb5`2POP!JLM&#f9-98-,u@8I3*6N*BiuZe<r1!.=i<!Lti@:]Z7MREoBQ_bC,%!LMecg2i6f%:?3E[s2?X7R!'URB!TN?f`ZJ"XK`L4+qa^`W"Qq^4#=\hb!.=i<!CR1mqEP(8!)*Y]!([,_$Ut7f!&asX$p=SRQ:Zi80ku*P7:1gaiai+6!-:1a7mDNG!,+BZ@fQL5K*jM%"#Y[!hIkYj7R&7&$n;5g!"`Md;5g:*3sMD]!#DR9!!3q@!!#UA@6?E`56_0?`YQYs!#A.j2k(T<!s!i%!#Fo&!,'m`!$rF<!#<h)!!3rs2[TO$9;JF&%:8#u\P!)V3[!!!0Y%Bf1%n2IHV!!Y6W:-/o*1[K5s@6*d"nGiRi*C$_F3PGOs+[5u-'l2Y+[acVg,FUh,,O5c_4TRXu^]4?ZlSEB>"T&0!/hmoPaXK$9:E9Eq%Vl%EC(^LHS"Tf^"oeRA%feQl"->SY#66qms8*2)!9[N9-NO8K"9Y=h<W<o4eNX+0#>M-N$igG2!WW:YJ3PC_'0-'n'KZ9p7IL6_Asf:tL&q@nJH,qCO8o7^R]N!Q%:#\<3u#DD\G!'gg.i.;2pndtjr-3;?7!)EOuNW/t`1FtPd(CgF"2)QQX0g.QbU)<q25R@l_]5[g_!!!YM!!%NL!#!L3(p\hq!"qp]!!!YeI/r7.!!3f/!'%k05r,590c^p;V>q9RdM!T#$30c#!#$WN>'0g$!rs!&!!abT2$$BF)DqLo!rs!*/R/AX'4M"C!Y]8JFuo_O!!#XqK)bnI$:Orr!rs"A!rs"I!!ab42$1Ys!!49B?Pk![%:'@?g\'ANhPpT64Pj9#AqANp/.dUc-)4UMmJL(k&1+qt[j!&4Kg*,c9#4kP%9!);K>.&0O4N(s@_:4Z._!*D:@D?(dt)#uu'7h!R9H.u(11G]#J6Z3&L!.b81k@job;CbK\,$Rfg1B=IN!!"NE&JOXg"$974'oQ8M:(mUL1n#OAqEYp30d16g5=#`s4WkjSU&\'k;ge[T59=5n%T>.p@fUX9,&+.q56,t1;BFRj,>b=f,>\Pn51u4[%:!.=hIHkHDZ,>\M:1Vb+A!%CYEs8M)7s7=Ba-NO8K!?6:a*.SGTIlf&S-R2G(l9mc]!=*LrU'Om'!8Vu%bXs&Z!$DM]W4N=7?u>s4#X5>j#]Li?!(A:=UXrF@&s!U.8H=G]%KJ3`.f_q5K3koP5R.:@!#J%S!-f_b*J?@@1IXAD!$b;B(gIe=!@.[EqIKXO:]X9/4TS,A!!"6?",8l<5<<!P,>\e':)!4q#Uk+;CcP`6,>\LcP)-\t%:!!!]t:&t>N:g"te:e-Ak:in*G3&)XS2IW58,>]$Qs8KMa!q?9k(Gl+'YVq6L5E.Z'MZ@1X!BU9IT*YK0!/n?;>lm=mA1q3rN@>;;,?u.($][.P,?ta2$PsTZ&;$pK>"ep)!+IZfE]!i=<<-_t>'#0r'Tp^5,QJNW>6+]s3Kul24a[4g0`*aOFTMpNWjuUYD_YU91BhSN?rSiaGWfC=!5i0+!%G+?819YM?]tIcV#UL[!0@0\S72=)%:NtMEm!s"9&+92O%'Ht77!!X%N3tMAl#%hJXJ2PUQ0`V7T"oeRf%fdb[!sGoR!?!gbJ7'`*!rr-lM>lYY]/p3I?m7iW=U.q0!)8IS)nIgr!"fGp?Z?<@ZShec#\99&#E4fm!)5E\0f_P)/cX7.TE$^e((L=!!%1uYQs3r2!!!3'QN3<Z'**gg!$STdR6=_(?j]#'dQIUV!+c/2?k]gn6KU-+9F!^!2#o.7$Ca*X.pru;69hLaXX;>1%:L@tFO#D5`Y3s.!@";*CRRp]qS.prSh4$j8U!!H7%!1X%E5Q53o?4m5<ScSlr!!!0&F`3g2YtYBjg.+#qBerb#25UZ[T`kEXf`;(7^<OVU1lF0k!."SY!!&er!&=L8"/>jh2>R;7"8?e$!!*'k";q1>VZHi_#s/6d!!"ag<=V=q@6(k5fP:J"1J_pH$Z7g0#6;XFWr`8i*rl;@1][TU3BB_:"AoF)!=o13!2omo<@-#s#67C.L'lCX%:=YWll!,OAnG6"cG!Wi<&!!D^j4%1su!!#@j"98Z,9fWJl3s':a<abt.)ksP:!BUWs!WtO,B)kR+!]^?M!-p^/DED5+Z2jq+rr<$$2,0hI$8DWa*!$<FZN(e2YlLs9!!``/70W_l!]()ah&J?c!<E-@3<.N0!<@fRK`D/S<E0#rjFmSf!!!!"4nC/'=94*UK`D,RW]1"[!/1E,!)j""s"m>0!pBB5!*'""!**$4!/1E,!&tHA^hAk)%:#mX-E"9=eu"TYJ1Mu=Im!<<)!3$*T1"bcqf!!*'k(BFMi!/1CQ>6=_K64-?fK`FOA)#sX\$5!7;l8Ju?"bcqF!(L99!$Z>rW_sT4,PPaLZ!Co@!!):D!<E0h!)!@p`9OB&s1(l+!,=In1)9kp?"sZjp\ugV!'L]]"_e06!f7.9,R+8KrrN0%0`acY##HuqG5qRl1($eoK`GZa!WX>G!/1E,!!#@gBG)eE/ZXR*70#:N"op1YPr"3S%:!D,4>!rr<P"uutp!1X6"[3GYNKFih;K`D)QBE1IF7h^RV8ekM\!WY84!W[oS!!$+$p]!#NK`Hf,!!!'d*<6(n!/1CQ!&F[W)MJ0F!!!!Y!:0Xd!/1E,!!"bil8fYm#tk@r$:Opp!([(j!/1E,!6b@c56:ibrrN0%0`arhCFY&?K`Hf,!!$[4C^'n;s#EB)!!*(O$&&A5!!!!d!^[3I!/1CQ!([(j!/1F*!/1D,<sLG[!s#q5;-N]\%:\cB8@\,`u<[Q)#%[0-J!,!c2/!#Yb:$NL/`@k^g^!(?oS!:p+T!(^lk!'pSb!'ILd6NKIQ5la1N5ldkd0*)=Y^\q.7#QOj!!^Qf?+92C85t_2D!+>q!!'pTN!!$@3kDMt:9)q6X!!#:f:B3le5l^lb8,rVs3t>:rJ,fQL`W3sX_uR[T_>qCP^];+NM?(?j]`86s$W8lmB)lX"GB>f\@AE$?A8*`1D?.``!(\(n('">+"TpY'*_S@1%:<rcp/c7oEC3<K6]b"<KOrr<%'#ljo)!(R*PJH6<Y"TZ_"PfWo5!$MUJbV9.=!5&:D=gS125&X@"1,R-F#QPtK!'5<(brlJcfM;VM!#P\9s8E6'7Q:]G%L`==A,nUM!!>4_#QRBs!<=\O!,e8-!!Muq!'gMq!'D1UB>"9r!CHhfs8PQ&Ch3Wt@:F%a!$`]g!&.&?;fm%oDJ,mJ2%foj@fS7B!DPsr@rq]L;ZHh@(-k,DTE#!eXm._c%:9PJQi!!..I0``tn!!42G9ho,6AH;co!!-,K!^6ZB"[*8,^]7XA1*6Ms!CfUJDdu=L@:Wqi`5OqC!'kU8@gQa`C]e8OF$i<91]me5#6k0I:L\'M1^H2D!s&I*AoD^,!$D=n.m!_7!<PW,Ci==o5]Zp(F+>6)!X8Z/:gn6`Df0-!!<Zh*!E3T\S6c4%!<lD@DffaqF)s);!$O?*$3:-[!^pI=@/rt$CC^FS!<PM!6tHE2F(96)ZK9Bo%:E-+GO5\t*[3!'Ni!_!(tCh7HpDKGkD.SOo)![BQ'%KUM_%7L;)%Qb:(%fm/6@<jmD5Z\1%!F,X81C%_T$onGQ!YYSG7riNjDu`H2!5K<M%7Y&EF`KF76jsn5'i8=\5lbRT&c_rR/jf_Q!!*r<(dW1_+TZM*=TN,U6UN[5+9;O;Bl7K9!Jge=!bME50E<6s!^^^A@qu&M5\:Q3Ao)9F![7XH:i^JaARn=94TH]-D?1qJ@<6-mG:b1.%:3"Ba]'M/NTDui<0?NXnL6tS=q3<Cl7&NKr49KjOJ,pb_T0`c5#0MW+@!AFO0!AIGoH#.&C!C0'T1B<43%7bPTA7]gH$$1/60a_E#Ergmn!Ajd><_Z1,!!!$W!AmhL"="W^!/rf:2,n.3F@J&.@<?Ta'M'VQ2[;eQ!`WT;0E=<f3<XC[%laRk7fkX\CWHiL/2A"B3BRd[Ea`U$@;ngQ5Wf;Q?o`9j(]e4K!BL2n<)[fj!-8,bMa$GL%:,q]6D^Ap/#4Cf1u"TW-r+p)@<&8"0P!!,4`2WG?s"umAP"$ZfL9`QpiF_u!r!!,Cd!H8EHN<M0Z1^ZSM4[DS+7W172,lf.k!$39.!#%4^5la1N5l_Q!$8DPo!C?eqNs7HA"oo;q"@3#R!'pSu!AOU2JHI\0"u'!W,=)Ac&OHL(!@'f/6SSQt3<Koq<RE'n!AZk@(dA'+K`Hf,<<*Xd!\j]h4rC"'7fY5&3^Nj73rfop1''-c@*ML!%:4A?"[56P>q68\g2;[-M28HUaL3sRJ@1g9r:4TK0s3&^h6!&lV41bfh.!<W?W!"o8p!B^B3V*>!s!]N1@3<:]4#ZD!0-Nj_U&hsV%0a8_20`a(E!+Q!j&n_52$OAlr5l_/k9J[P?1r')W!'pSb!?_Cc!?_Cc!?_Cc!<L%[!?_Cc!?a0"5nlTb!!+5D2,aGS!<3$!W<JGr%:~>%%EndAGDEmbeddedDoc%%BeginResource: procset Altsys_header 4 0userdict begin /AltsysDict 245 dict def endAltsysDict begin/bdf{bind def}bind def/xdf{exch def}bdf/defed{where{pop true}{false}ifelse}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/sepdef{ dup where not {AltsysSepDict } if  3 1 roll exch put}bdf/st{settransfer}bdf/colorimage defed /_rci xdf/_NXLevel2 defed {  _NXLevel2 not {   /colorimage where {userdict eq {/_rci false def } if} if } if} if/md defed{  md type /dicttype eq {  /colorimage where { md eq { /_rci false def }if}if/settransfer where {md eq {/st systemdict /settransfer get def}if}if }if }if/setstrokeadjust defed{ true setstrokeadjust /C{curveto}bdf /L{lineto}bdf /m{moveto}bdf}{ /dr{transform .25 sub round .25 add exch .25 sub round .25 add exch itransform}bdf /C{dr curveto}bdf /L{dr lineto}bdf /m{dr moveto}bdf /setstrokeadjust{pop}bdf }ifelse/rectstroke defed /xt xdfxt {/yt save def} if/privrectpath {  4 -2 roll m dtransform round exch round exch idtransform  2 copy 0 lt exch 0 lt xor {dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto} {exch dup 0 rlineto exch 0 exch rlineto neg 0 rlineto} ifelse closepath}bdf/rectclip{newpath privrectpath clip newpath}def/rectfill{gsave newpath privrectpath fill grestore}def/rectstroke{gsave newpath privrectpath stroke grestore}defxt {yt restore} if/_fonthacksave false def/currentpacking defed { /_bfh {/_fonthacksave currentpacking def false setpacking} bdf /_efh {_fonthacksave setpacking} bdf}{ /_bfh {} bdf /_efh {} bdf}ifelse/packedarray{array astore readonly}ndf/` {  false setoverprint     /-save0- save def 5 index concat pop storerect left bottom width height rectclip pop  /dict_count countdictstack def /op_count count 1 sub def userdict begin  /showpage {} def  0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bdf/currentpacking defed{true setpacking}if/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/xformfont { currentfont exch makefont setfont } bdf/fhnumcolors 1  statusdict begin/processcolors defed {pop processcolors}{/deviceinfo defed {deviceinfo /Colors known {pop deviceinfo /Colors get} if} if} ifelse end def/printerRes  gsave matrix defaultmatrix setmatrix 72 72 dtransform abs exch abs max grestore def/graycalcs[ {Angle Frequency}    {GrayAngle GrayFrequency}  {0 Width Height matrix defaultmatrix idtransform dup mul exch dup mul add sqrt 72 exch div}  {0 GrayWidth GrayHeight matrix defaultmatrix idtransform dup mul exch dup mul add sqrt 72 exch div} ] def/calcgraysteps { forcemaxsteps {maxsteps } {/currenthalftone defed{currenthalftone /dicttype eq}{false}ifelse{currenthalftone beginHalftoneType 4 le{graycalcs HalftoneType 1 sub get exec}{HalftoneType 5 eq{Default begin{graycalcs HalftoneType 1 sub get exec}end}{0 60} ifelse}ifelseend}{currentscreen pop exch }ifelse printerRes 300 max exch div exch 2 copy sin mul round dup mul 3 1 roll cos mul round dup mul add 1 add dup maxsteps gt {pop maxsteps} if  } ifelse} bdf/nextrelease defed {  /languagelevel defed not {    /framebuffer defed { 0 40 string framebuffer 9 1 roll 8 {pop} repeatdup 516 eq exch 520 eq or{/fhnumcolors 3 def/currentscreen {60 0 {pop pop 1}}bdf/calcgraysteps {maxsteps} bdf}if}if }if}iffhnumcolors 1 ne { /calcgraysteps {maxsteps} bdf} if/currentpagedevice defed {   currentpagedevice /PreRenderingEnhance known {currentpagedevice /PreRenderingEnhance get{/calcgraysteps {forcemaxsteps {maxsteps}{256 maxsteps min}ifelse} def} if } if} if/gradfrequency 144 defprinterRes 1000 lt { /gradfrequency 72 def} if/adjnumsteps {  dup dtransform abs exch abs max    printerRes div         gradfrequency mul       round         5 max        min        }bdf/goodsep { spots exch get 4 get dup sepname eq exch (_vc_Registration) eq or}bdf/BeginGradation defed{/bb{BeginGradation}bdf}{/bb{}bdf}ifelse/EndGradation defed{/eb{EndGradation}bdf}{/eb{}bdf}ifelse/bottom -0 def /delta -0 def /frac -0 def /height -0 def /left -0 def /numsteps1 -0 def /radius -0 def /right -0 def /top -0 def /width -0 def /xt -0 def /yt -0 def /df currentflat def /tempstr 1 string def /clipflatness currentflat def /inverted?  0 currenttransfer exec .5 ge def/tc1 [0 0 0 1] def /tc2 [0 0 0 1] def /storerect{/top xdf /right xdf /bottom xdf /left xdf /width right left sub def /height top bottom sub def}bdf/concatprocs{ systemdict /packedarray known  {dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse { /proc2 exch cvlit def /proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx } { /proc2 exch cvlit def /proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx }ifelse}bdf/i{dup 0 eq {pop df dup}  {dup} ifelse  /clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{  {/filler /eofill load def /clipper /eoclip load def} {/filler /fill load def /clipper /clip load def} ifelse}bdf/normtaper{}bdf/logtaper{9 mul 1 add log}bdf/CD{ /NF exch def  {    exch dup /FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse }forall  NF}bdf/MN{ 1 index length    /Len exch def  dup length Len add   string dup     Len      4 -1 roll     putinterval    dup      0       4 -1 roll    putinterval   }bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch {1 index MN cvn/NewN exch def cvn findfont dup maxlength dict CD dup/FontName NewN put dup /Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{  dup       FontDirectory exch    known      {pop 3 -1 roll pop}   {RC} ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known {exch pop findfont 3 -1 roll pop} {pop dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll  {3 -1 roll dup 4 -2 roll put}forall put definefont} ifelse}bdf/RFJ{  dup       FontDirectory exch    known      {pop 3 -1 roll pop   FontDirectory /Ryumin-Light-83pv-RKSJ-H known  {pop pop /Ryumin-Light-83pv-RKSJ-H dup}if   }       {RC} ifelse}bdf/FFJ{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known {exch pop findfont 3 -1 roll pop} {popdup FontDirectory exch known not  {FontDirectory /Ryumin-Light-83pv-RKSJ-H known {pop /Ryumin-Light-83pv-RKSJ-H}if  }if             dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll  {3 -1 roll dup 4 -2 roll put}forall put definefont} ifelse}bdf/fps{ currentflat    exch      dup 0 le{pop 1}if  {dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if} {exit} ifelse }loop  pop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf /W{/clipper load 100 clipflatness dup setflat fps}bdfuserdict begin /BDFontDict 29 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}def/:M {pop pop} def/sf {pop} def/S {pop} def/@b {pop pop pop pop pop pop pop pop} def/_bdsave /save load def/_bdrestore /restore load def/save { dup /fontsave eq {null} {_bdsave} ifelse } def/restore { dup null eq { pop } { _bdrestore } ifelse } def/fontsave null defend/MacVec 256 array def MacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash /questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore popend %. AltsysDict%%EndResource%%EndProlog%%BeginSetupAltsysDict begin_bfh%%IncludeResource: font Symbol_efh0 dict dup beginend /f0 /Symbol FF def_bfh%%IncludeResource: font NewsGothicBT-BoldExtraCondensed_efhMacVec 256 array copy/f1 /|______NewsGothicBT-BoldExtraCondensed dup RF findfont def_bfh%%IncludeResource: font NewsGothicBT-ExtraCondensed_efhMacVec 256 array copy/f2 /|______NewsGothicBT-ExtraCondensed dup RF findfont def_bfh%%IncludeResource: font NewsGothic_efhMacVec 256 array copy/f3 /|______NewsGothic dup RF findfont defend %. AltsysDict%%EndSetupAltsysDict begin /onlyk4{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/cmyk2gray{ 4 -1 roll 0.3 mul 4 -1 roll 0.59 mul 4 -1 roll 0.11 mul add add add 1 min neg 1 add}bdf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/maxcolor {  max max max  } ndf/maxspot { pop} ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 packedarray}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{setgray}ndf/setoverprint{pop}ndf /currentoverprint false ndf/cmykbufs2gray{ 0 1 2 index length 1 sub { 4 index 1 index get 0.3 mul 4 index 2 index get 0.59 mul 4 index 3 index get 0.11 mul 4 index 4 index get add add add cvi 255 min255 exch sub2 index 3 1 roll put }for 4 1 roll pop pop pop}bdf/colorimage{ pop pop [5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx ]cvx  image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelseand{userdict begin bdf end}{ndf}ifelsefhnumcolors 1 ne {/yt save def} if/customcolorimage{ aload pop (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdfic im iy ik cmyk2gray /xt xdfcurrenttransfer{dup 1.0 exch sub xt mul add}concatprocsst image } ifelse}ndffhnumcolors 1 ne {yt restore} iffhnumcolors 3 ne {/yt save def} if/customcolorimage{ aload pop  (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdf1.0 dup ic ik add min sub 1.0 dup im ik add min sub 1.0 dup iy ik add min sub /ic xdf /iy xdf /im xdfcurrentcolortransfer4 1 roll {dup 1.0 exch sub ic mul add}concatprocs 4 1 roll {dup 1.0 exch sub iy mul add}concatprocs 4 1 roll {dup 1.0 exch sub im mul add}concatprocs 4 1 roll setcolortransfer{/dummy xdf dummy}concatprocs{dummy}{dummy}true 3 colorimage } ifelse}ndffhnumcolors 3 ne {yt restore} iffhnumcolors 4 ne {/yt save def} if/customcolorimage{ aload pop (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdfcurrentcolortransfer{1.0 exch sub ik mul ik sub 1 add}concatprocs 4 1 roll{1.0 exch sub iy mul iy sub 1 add}concatprocs 4 1 roll{1.0 exch sub im mul im sub 1 add}concatprocs 4 1 roll{1.0 exch sub ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer{/dummy xdf dummy}concatprocs{dummy}{dummy}{dummy}true 4 colorimage } ifelse}ndffhnumcolors 4 ne {yt restore} if/separationimage{image}ndf/newcmykcustomcolor{6 packedarray}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf /setspotcolor {  spots exch get dup 4 get (_vc_Registration) eq {pop 1 exch sub setseparationgray} {0 5 getinterval exch setcustomcolor} ifelse}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{st pop pop pop}ndf/fas{}ndf/sas{}ndf/fhsetspreadsize{pop}ndf/filler{fill}bdf /F{gsave {filler}fp grestore}bdf/f{closepath F}bdf/S{gsave {stroke}fp grestore}bdf/s{closepath S}bdf/bc4 [0 0 0 0] def /_lfp4 { /iosv inkoverprint def /cosv currentoverprint def /yt xdf        /xt xdf        /ang xdf       storerect /taperfcn xdf /k2 xdf /y2 xdf /m2 xdf /c2 xdf /k1 xdf /y1 xdf /m1 xdf /c1 xdf c1 c2 sub abs m1 m2 sub abs y1 y2 sub abs k1 k2 sub abs maxcolor       calcgraysteps mul abs round   height abs adjnumsteps    dup 2 lt {pop 1} if     1 sub /numsteps1 xdf currentflat mark     currentflat clipflatness   /delta top bottom sub numsteps1 1 add div def  /right right left sub def   /botsv top delta sub def   {{Wxt yt translate ang rotatext neg yt neg translate dup setflat /bottom botsv def0 1 numsteps1 {numsteps1 dup 0 eq {pop 0.5 } { div } ifelse taperfcn /frac xdfbc4 0 c2 c1 sub frac mul c1 add putbc4 1 m2 m1 sub frac mul m1 add putbc4 2 y2 y1 sub frac mul y1 add putbc4 3 k2 k1 sub frac mul k1 add putbc4 vc1 index setflat { mark {newpath left bottom right delta rectfill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop/bottom bottom delta sub def}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/bcs [0 0] def /_lfs4 { /iosv inkoverprint def /cosv currentoverprint def /yt xdf        /xt xdf        /ang xdf       storerect /taperfcn xdf /tint2 xdf       /tint1 xdf       bcs exch 1 exch put     tint1 tint2 sub abs     bcs 1 get maxspot     calcgraysteps mul abs round   height abs adjnumsteps    dup 2 lt {pop 2} if     1 sub /numsteps1 xdf currentflat mark     currentflat clipflatness   /delta top bottom sub numsteps1 1 add div def  /right right left sub def   /botsv top delta sub def   {{Wxt yt translate ang rotatext neg yt neg translate dup setflat /bottom botsv def0 1 numsteps1 {numsteps1 div taperfcn /frac xdfbcs 01.0 tint2 tint1 sub frac mul tint1 add subput bcs vc1 index setflat { mark {newpath left bottom right delta rectfill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop/bottom bottom delta sub def}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/_rfs4 { /iosv inkoverprint def /cosv currentoverprint def /tint2 xdf       /tint1 xdf       bcs exch 1 exch put     /radius xdf       /yt xdf        /xt xdf        tint1 tint2 sub abs     bcs 1 get maxspot     calcgraysteps mul abs round   radius abs adjnumsteps    dup 2 lt {pop 2} if     1 sub /numsteps1 xdf radius numsteps1 div 2 div /halfstep xdf  currentflat mark     currentflat clipflatness   {{dup setflat W 0 1 numsteps1 {dup /radindex xdfnumsteps1 div /frac xdfbcs 0tint2 tint1 sub frac mul tint1 addput bcs vc1 index setflat { newpath mark xt yt radius 1 frac sub mul halfstep add 0 360{ arcradindex numsteps1 ne {xt yt radindex 1 add numsteps1 div 1 exch sub radius mul halfstep adddup xt add yt moveto 360 0 arcn } iffill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/_rfp4 { /iosv inkoverprint def /cosv currentoverprint def /k2 xdf /y2 xdf /m2 xdf /c2 xdf /k1 xdf /y1 xdf /m1 xdf /c1 xdf /radius xdf       /yt xdf        /xt xdf        c1 c2 sub abs m1 m2 sub abs y1 y2 sub abs k1 k2 sub abs maxcolor       calcgraysteps mul abs round   radius abs adjnumsteps    dup 2 lt {pop 1} if     1 sub /numsteps1 xdf radius numsteps1 dup 0 eq {pop} {div} ifelse  2 div /halfstep xdf  currentflat mark     currentflat clipflatness   {{dup setflat W 0 1 numsteps1 {dup /radindex xdfnumsteps1 dup 0 eq {pop 0.5 } { div } ifelse /frac xdfbc4 0 c2 c1 sub frac mul c1 add putbc4 1 m2 m1 sub frac mul m1 add putbc4 2 y2 y1 sub frac mul y1 add putbc4 3 k2 k1 sub frac mul k1 add putbc4 vc1 index setflat { newpath mark xt yt radius 1 frac sub mul halfstep add 0 360{ arcradindex numsteps1 ne {xt yt radindex 1 add numsteps1 dup 0 eq {pop} {div} ifelse 1 exch sub radius mul halfstep adddup xt add yt moveto 360 0 arcn } iffill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/lfp4{_lfp4}ndf/lfs4{_lfs4}ndf/rfs4{_rfs4}ndf/rfp4{_rfp4}ndf/cvc [0 0 0 1] def /vc{ AltsysDict /cvc 2 index put  aload length 4 eq {setcmykcolor} {setspotcolor} ifelse}bdf /origmtx matrix currentmatrix def/ImMatrix matrix currentmatrix def0 setseparationgray/imgr {1692 1584 2304 2376 } def /bleed 0 def /clpr {1692 1584 2304 2376 } def /xs 1 def /ys 1 def /botx 0 def /overlap 0 def /wdist 18 def 0 2 mul fhsetspreadsize 0 0 ne {/df 0 def /clipflatness 0 def} if /maxsteps 256 def /forcemaxsteps false def vms-1852 -2119 translate/currentpacking defed{false setpacking}if /spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 1 0.65 0.47 (PANTONE 202 CVC) false newcmykcustomcolor0 0.085 0.15 0.43 (PANTONE Warm Gray 8 CVC) false newcmykcustomcolor]def/textopf false def/curtextmtx{}def/otw .25 def/msf{dup/curtextmtx xdf makefont setfont}bdf/makesetfont/msf load def/curtextheight{.707104 .707104 curtextmtx dtransform dup mul exch dup mul add sqrt}bdf/ta2{ tempstr 2 index gsave exec grestore cwidth cheight rmoveto 4 index eq{5 index 5 index rmoveto}if 2 index 2 index rmoveto }bdf/ta{exch systemdict/cshow known{{/cheight xdf/cwidth xdf tempstr 0 2 index put ta2}exch cshow} {{tempstr 0 2 index put tempstr stringwidth/cheight xdf/cwidth xdf ta2}forall} ifelse 6{pop}repeat}bdf/sts{/textopf currentoverprint def vc setoverprint/ts{awidthshow}def exec textopf setoverprint}bdf/stol{/xt currentlinewidth def  setlinewidth vc newpath  /ts{{false charpath stroke}ta}def exec  xt setlinewidth}bdf  /strk{/textopf currentoverprint def vc setoverprint /ts{{false charpath stroke}ta}def exec  textopf setoverprint }bdf n[] 0 d3.863708 M1 w0 j0 Jfalse setoverprint0 ifalse eomode[0 0 0 1] vcvms2144.5426 2204.5181 m1860.8157 2204.5181 L1860.8157 2144.1438 L2144.5426 2144.1438 L2144.5426 2204.5181 Lnq_bfh%%IncludeResource: font NewsGothicBT-BoldExtraCondensed_efh{f1 [57.5 0 0 57.5 0 0] makesetfont1860.815674 2158.518845 m0 0 32 -0.287781 0 (R) ts1.149368 0 rmoveto }false[1 4]sts{f1 [57.5 0 0 57.5 0 0] makesetfont0 0 32 -0.287781 0 (S) ts1.149368 0 rmoveto }false[1 4]sts{f1 [57.5 0 0 57.5 0 0] makesetfont0 0 32 -0.287781 0 (A) ts}false[1 4]sts_bfh%%IncludeResource: font NewsGothicBT-ExtraCondensed_efh{f2 [57.5 0 0 57.5 0 0] makesetfont0 0 32 -0.287781 0 ( Laboratories) ts}false[1 4]stsQ2105.7043 2144.2159 m1901.4147 2144.2159 L1901.4147 2119.8562 L2105.7043 2119.8562 L2105.7043 2144.2159 Lnq_bfh%%IncludeResource: font NewsGothicBT-ExtraCondensed_efh{f2 [23.199997 0 0 23.199997 0 0] makesetfont1901.414688 2125.656189 m0 0 32 0 0 (A Division of RSA Data Security) ts}false[1 5]stsQ2153.2417 2165.3197 m2145.6418 2165.3197 L2145.6418 2155.3198 L2153.2417 2155.3198 L2153.2417 2165.3197 Lnq_bfh%%IncludeResource: font NewsGothic_efh{f3 [9.000549 0 0 9 0 0] makesetfont2145.6418 2158.119812 m0 0 32 0 0 (\250) ts}false[1 4]stsQ1973.778 2272.2573 m1977.749 2272.256 L1977.8462 2267.3112 L2022.6848 2267.3112 L2028.6633 2260.6158 L2020.7731 2253.1357 L2014.7948 2253.1357 L2008.8165 2257.6789 L2002.8382 2257.6789 L1996.3696 2253.4949 L1989.9011 2257.3214 L1983.8268 2252.7268 L1977.8462 2252.7246 L1977.749 2247.3169 L1973.778 2247.3169 L1973.778 2244.6609 L1973.778 2242.2839 1971.8509 2240.357 1969.4738 2240.357 C1948.1887 2240.357 L1945.8116 2240.357 1943.8845 2242.2839 1943.8845 2244.6609 C1943.8845 2274.912 L1943.8845 2277.289 1945.8116 2279.2159 1948.1887 2279.2159 C1969.4738 2279.2159 L1971.8509 2279.2159 1973.778 2277.289 1973.778 2274.912 C1973.778 2272.2573 L[1 4]  vcfalse setoverprintf n2037.5818 2230.8024 m2033.7339 2230.8139 L2033.7064 2236.1004 L1986.9088 2236.1025 L1980.9305 2242.0804 L1989.9936 2250.0225 L1996.4619 2246.1962 L2002.9301 2250.7387 L2008.9082 2250.7387 L2014.8862 2246.5543 L2020.8642 2246.5543 L2025.765 2250.3276 L2033.7064 2250.3276 L2033.7339 2255.7553 L2037.5818 2255.7686 L2037.5817 2258.6448 L2037.5817 2261.0218 2039.5088 2262.9487 2041.8859 2262.9487 C2063.1695 2262.9487 L2065.5466 2262.9487 2067.4737 2261.0218 2067.4737 2258.6448 C2067.4737 2228.3954 L2067.4737 2226.0184 2065.5466 2224.0915 2063.1695 2224.0915 C2041.8859 2224.0915 L2039.5088 2224.0915 2037.5817 2226.0184 2037.5817 2228.3954 C2037.5818 2230.8024 L[1 5]  vcf nvmrvmrend%%Trailer%%DocumentNeededResources: font Symbol%%+ font NewsGothicBT-BoldExtraCondensed%%+ font NewsGothicBT-ExtraCondensed%%+ font NewsGothic%%DocumentFonts: Symbol%%+ NewsGothicBT-BoldExtraCondensed%%+ NewsGothicBT-ExtraCondensed%%+ NewsGothic%%DocumentNeededFonts: Symbol%%+ NewsGothicBT-BoldExtraCondensed%%+ NewsGothicBT-ExtraCondensed%%+ NewsGothic%%EndDocumentV1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%+ (PANTONE Warm Gray 8 CVC)%%Page: 2 2%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`6572 -73 237 562 -237 -489 1.805556 -1.808219 -4265 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`65-4221 3053 (2) 0 0 37 0 0 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 -4194 2817 -4194 -2567 F jbd^65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4900 3053 (CR) 0 16.086365 105 0 1 A1`65-4797 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65-4050 3053 (S P R I N G   1 9 9 7  ) 7.445572 1.841431 746 13 22 A1`65T g`650 0 0 (Black) 1 _rgb d`65-3304 3053 ( \321   T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S) 7.445709 1.841431 2954 52 91 A1`65O1`65N1`65F M1`65/AB 360 360 w1`65-4050 -2905 (Editor) -0.022781 0 451 0 5 A1`65-3593 -2905 (\325) -0.022781 0 56 0 0 A1`65-3561 -2905 (s Note) -0.022781 0 505 1 5 A1`65O1`6517 -350 -2824.5 -4050 -2824.5 F jbd^6517 -350 2102.5 -2100 2102.5 F jbd^65N1`65F M1`65/AB 196 200 w1`65-2100 2066 (About RSA Laboratories) -0.029327 0 1017 2 21 A1`65O1`65N1`65F M1`65/AC 170 170 w1`65-2100 2236 (An academic environment within a commercial organization, RSA) -2.302139 -0.030075 1750 7 60 A1`65-2100 2332 (Laboratories is the research and consulting division of RSA Data) 5.033768 0 1750 9 63 A1`65-2100 2428 (Security) -2.111877 0 216 0 7 A1`65-1886 2428 (, the company founded by the inventors of the RSA public-) -2.111877 0 1536 10 56 A1`65-2100 2524 (key cr) 4.798294 0 164 1 5 A1`65-1936 2524 (yptosystem. Its purpose is to pr) 4.798294 0 844 5 31 A1`65-1092 2524 (ovide state-of-the-ar) 4.798294 0 537 1 20 A1`65-555 2524 (t exper) 4.798294 0 184 1 6 A1`65-374 2524 (-) 4.798294 0 24 0 0 A1`65-2100 2620 (tise on cryptography and information security for the benefit of) 11.142105 0 1750 9 63 A1`65-2100 2715 (RSA Data Security and its customers. RSA Data Security is a) 9.813477 0 1750 10 58 A1`65-2100 2811 (Security Dynamics company) 0.004364 0 759 2 24 A1`65-1344 2811 (.) 0.004364 0 24 0 0 A1`65O1`65null null null b`65F yy`654 0 1000 0 Qy65-2098 -1142.167 @m65-2098 1837.167 -352 1837.167 -352 -1142.167  3 yy^65@cp65@fp65r2`65 yyq65N1`65F M1`65/AB 196 200 w1`65-1810 -962 (Newsletter A) 0.029358 0 557 1 11 A1`65-1257 -962 (vailability and) 0.029358 0 617 1 14 A1`65-1647 -852 (Contact Information) -0.036972 0 845 1 18 A1`65/AC 200 200 w1`65-1950 -632 (CryptoBytes) 0 0.978867 404 0 10 A1`65/AF 200 200 w1`65-1546 -632 ( is a free publication and all) 14.582916 0.978897 1046 6 29 A1`65-1950 -522 (issues, both current and past, are avail-) 14.582916 1.445282 1450 6 40 A1`65-1950 -412 (able via the W) 13.940765 0 539 3 13 A1`65-1415 -412 (orld-W) 13.940765 0 245 0 5 A1`65-1173 -412 (ide W) 13.940765 0 220 1 4 A1`65-958 -412 (eb at ) 13.940765 0 213 2 5 A1`65/AC 200 200 w1`65-745 -412 (<http://) 0 0 245 0 7 A1`65-1950 -302 (www) 0 -0.1427 166 0 2 A1`65-1787 -302 (.rsa.com/rsalabs/pubs/cr) 0 -0.1427 760 0 23 A1`65-1027 -302 (yptobytes.html>) 0 -0.1427 506 0 14 A1`65/AF 200 200 w1`65-521 -302 (.) 0 0 21 0 0 A1`65-1950 -82 (For each issue a limited number of copies) 9.813049 0 1450 7 40 A1`65-1950 27 (are printed. They are distributed at major) 9.943054 0 1450 6 41 A1`65-1950 137 (conferences and through direct mailing.) 14.582916 1.247025 1450 4 38 A1`65-1950 247 (While available, additional copies of the) 14.582916 0.296219 1450 5 40 A1`65-1950 357 (newsletter can be requested by contacting) 8.249313 0 1450 5 40 A1`65-1950 467 (RSA Laboratories though a nominal fee to) 2.544418 0 1450 6 39 A1`65-1950 577 (cover handling costs might be charged for) 7.216888 0 1450 6 40 A1`65-1950 687 (individual requests.) 0.01384 0 652 1 19 A1`65-1950 907 (RSA Laboratories can be contacted at:) 0.034012 0 1305 5 36 A1`65-1775 1127 (RSA Laboratories) -0.172516 0 604 1 15 A1`65-1775 1237 (100 Marine Parkway) -0.0354 0 694 2 17 A1`65-1087 1237 (, Suite 500) -0.0354 0 363 2 10 A1`65-1775 1347 (Redwoo) 0.00705 0 273 0 5 A1`65-1501 1347 (d City) 0.00705 0 210 1 5 A1`65-1297 1347 (, CA 94065) 0.00705 0 396 2 9 A1`65-1775 1457 (415/595-7703) 0 -0.004501 467 0 11 A1`65-1775 1567 (415/595-4126 \(fax\)) -0.008957 0 655 1 17 A1`65/AC 200 200 w1`65-1775 1677 (rsa-labs@rsa.com) 0 0.010147 552 0 15 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4855 -1852 (W) -0.062363 0 75 0 0 A1`65-4784 -1852 (e encourage) -0.062363 0 434 1 10 A1`65-4777 -1744 (any readers) -0.064575 0 427 1 10 A1`65-4907 -1635 (with comments,) 0.182816 0 557 1 13 A1`65-4996 -1527 (opposite opinions,) 0.165268 0 646 1 17 A1`65-4862 -1419 (suggestions or) 0.049133 0 512 1 13 A1`65-4819 -1310 (pr) 0.055893 0 76 0 1 A1`65-4744 -1310 (oposals for) 0.055893 0 395 1 10 A1`65-4884 -1202 (future issues to) -0.025467 0 535 2 15 A1`65-4731 -1094 (contact the) 0.140884 0 381 1 10 A1`65/AB 158 170 w1`65-4765 -985 (Cr) 0 -0.009308 73 0 1 A1`65-4690 -985 (yptoBytes) 0 -0.009308 340 0 8 A1`65/AD 158 170 w1`65-4569 -877 (editor) 0 0.017715 202 0 5 A1`65-4372 -877 (.) 0 0.017715 22 0 0 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65T g`650 0 0 (Black) 1 _rgb d`65-4050 -2503 (This issue of ) -0.657791 0 435 3 13 A1`65/AC 200 200 w1`65-3614 -2503 (CryptoBytes) 0 0 393 0 10 A1`65/AF 200 200 w1`65-3221 -2503 ( marks the start of the third) -0.657806 0 921 6 28 A1`65-4050 -2395 (volume. W) 0.520233 0 375 1 8 A1`65-3677 -2395 (ith a world-wide r) 0.520233 0 601 3 17 A1`65-3077 -2395 (eadership of mor) 0.520233 0 561 2 15 A1`65-2516 -2395 (e than) 0.520233 0 216 1 5 A1`65-4050 -2286 (6,000 it has rapidly become a useful forum for cryp-) 3.17601 0 1750 9 51 A1`65-4050 -2178 (tographic updates and for presenting some of the lat-) -2.708374 -0.009384 1750 8 52 A1`65-4050 -2070 (est research results.) -0.070801 0 645 2 20 A1`65-4050 -1853 (One recent area of cryptographic research has been) 3.813141 0 1750 7 49 A1`65-4050 -1745 (that of ) -2.70845 -0.046188 240 2 7 A1`65/AC 200 200 w1`65-3810 -1745 (pr) -2.70845 -0.046188 65 0 1 A1`65-3746 -1745 (oactive security) -2.70845 -0.046188 475 1 15 A1`65/AF 200 200 w1`65-3270 -1745 (. In the field of computer and) -2.708389 -0.046188 970 6 29 A1`65-4050 -1636 (network security) 7.001923 0 565 1 15 A1`65-3492 -1636 (, systems might come under attack) 7.001923 0 1192 5 32 A1`65-4050 -1528 (as adversaries attempt to control part of a network.) 5.063248 0 1750 8 51 A1`65-4050 -1420 (The task facing the administrator of such networks) 5.737167 0 1750 7 49 A1`65-4050 -1311 (is to detect and reverse any such compromises.) 14.582916 1.869171 1750 7 45 A1`65-4050 -1203 (Among the techniques available are so called thresh-) -2.708374 -0.381012 1750 7 51 A1`65-4050 -1095 (old techniques \(surveyed in the last issue of ) 2.438797 0 1500 8 45 A1`65/AC 200 200 w1`65-2550 -1095 (Crypto-) 0 0 250 0 6 A1`65-4050 -986 (Bytes) 0 0 171 0 4 A1`65/AF 200 200 w1`65-3879 -986 (\) with which the storage and use of sensitive) 10.507965 0 1579 8 44 A1`65-4050 -878 (cryptographic information can be shared. This forces) -2.708374 -0.163254 1750 6 51 A1`65-4050 -770 (an attacker to undertake far more work in attempt-) 4.185898 0 1750 8 49 A1`65-4050 -661 (ing to compromise the system. The proactive tech-) 5.426178 0 1750 7 48 A1`65-4050 -553 (niques described here by Ran Canetti, Rosario) 14.582916 2.395203 1750 6 44 A1`65-4050 -445 (Gennar) -1.505493 0 259 0 5 A1`65-3791 -445 (o, Amir Her) -1.505493 0 411 2 10 A1`65-3378 -445 (zber) -1.505493 0 134 0 3 A1`65-3244 -445 (g and Dalit Naor can add an) -1.505493 0 944 6 26 A1`65-4050 -336 (additional dimension to this protection. Using such) 2.024277 0 1750 6 50 A1`65-4050 -228 (techniques it is possible to automatically recover) 14.582916 0.597137 1750 6 49 A1`65-4050 -120 (from undetected break-ins, and to force an attacker) 3.461487 0 1750 7 50 A1`65-4050 -11 (to restart the process of compromising the system) 13.720947 0 1750 7 48 A1`65-4050 97 (from scratch.) 0.069168 0 440 1 12 A1`65-4050 314 (In the second article of this issue, Bob Silverman) 13.112061 0 1750 8 49 A1`65-4050 422 (presents the recommendations he made to the X9.31) -2.708374 -0.167053 1750 7 48 A1`65-4050 530 (standards committee on the generation of prime) 14.582916 0.954941 1750 6 45 A1`65-4050 639 (numbers when using RSA. The relevance of so-) 14.582916 0.973419 1750 7 43 A1`65-4050 747 (called \322strong\323 primes to the security of the RSA) 13.414688 0 1750 8 48 A1`65-4050 855 (cryptosystem has long been open to question and) 14.331284 0 1750 7 46 A1`65-4050 964 (the position of RSA Laboratories is that such primes) -1.64537 0 1750 8 51 A1`65-4050 1072 (of) 4.650177 0 65 0 1 A1`65-3985 1072 (fer little, if any) 4.650177 0 514 3 17 A1`65-3477 1072 (, additional practical pr) 4.650177 0 800 3 24 A1`65-2677 1072 (otection to) 4.650177 0 377 1 10 A1`65-4050 1180 (the user of RSA. However) 12.21254 0 935 4 23 A1`65-3120 1180 (, some standar) 12.21254 0 503 2 13 A1`65-2616 1180 (ds bo) 12.21254 0 186 1 4 A1`65-2430 1180 (dies) 12.21254 0 130 0 3 A1`65-4050 1289 (have adopted calls for RSA mo) 12.135529 0 1109 5 28 A1`65-2940 1289 (duli that ar) 12.135529 0 399 2 11 A1`65-2541 1289 (e com-) 12.135529 0 241 1 5 A1`65-4050 1397 (posed of such primes and here Bob Silverman de-) 11.652344 0 1750 8 46 A1`65-4050 1505 (scribes one way of generating them.) -0.014313 0 1198 5 34 A1`65-4050 1722 (As always, the newsletter contains some of the latest) -2.469315 0 1750 8 52 A1`65-4050 1830 (news from the world of algorithm and standards de-) 2.40065 0 1750 8 49 A1`65-4050 1939 (velopment. W) 14.231018 0 500 1 11 A1`65-3554 1939 (e r) 14.231018 0 100 1 2 A1`65-3454 1939 (epor) 14.231018 0 148 0 3 A1`65-3307 1939 (t on the solving of the DES) 14.231018 0 1007 6 26 A1`65-4050 2047 (challenge by a distributed search effort and also on) 5.905014 0 1750 8 51 A1`65-4050 2155 (the publication of a description of RC2) 0.654434 0 1323 6 38 A1`65/AF 130 130 w1`65-2727 2130 (\250) 0 0 40 0 0 A1`65/AF 200 200 w1`65-2687 2155 ( as a part of) 0.654404 0 387 4 12 A1`65-4050 2264 (the S/MIME standardization effort. In the standards) 1.29866 0 1750 6 50 A1`65-4050 2372 (arena, we report on the latest developments in the) 6.767105 0 1750 8 49 A1`65-4050 2480 (Public Key Cryptography Standards. The PKCS have) -2.708374 -0.577118 1750 6 47 A1`65-4050 2589 (become widely used in the cr) 11.586227 0 1032 5 27 A1`65-3018 2589 (yptographic industr) 11.586227 0 666 1 18 A1`65-2352 2589 (y) 11.586227 0 37 0 0 A1`65-2321 2589 (.) 11.586227 0 21 0 0 A1`65-4050 2697 (However) -0.51442 0 305 0 6 A1`65-3749 2697 (, over the years ther) -0.51442 0 666 4 20 A1`65-3083 2697 (e have been substantial) -0.51442 0 783 3 22 A1`65-4050 2805 (advances in cryptographic knowledge and algorithm) -1.228806 0 1750 5 48 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65-2100 -2503 (design. It is now time for the PKCS suite to undergo) -0.630676 0 1750 10 51 A1`65-2100 -2395 (revision, and this substantial undertaking has been) 7.456284 0 1750 6 50 A1`65-2100 -2286 (started in RSA Laboratories.) 0.012207 0 962 3 27 A1`65-2100 -2070 (The future success of ) 4.420563 0 740 4 21 A1`65/AC 200 200 w1`65-1360 -2070 (CryptoBytes) 0 0 393 0 10 A1`65/AF 200 200 w1`65-967 -2070 ( depends on input) 4.420593 0 617 3 16 A1`65-2100 -1961 (fr) -2.708374 -0.124908 51 0 1 A1`65-2049 -1961 (om all sectors of the cr) -2.708374 -0.124908 745 5 23 A1`65-1305 -1961 (yptographic community) -2.708374 -0.124908 797 1 20 A1`65-513 -1961 (, and) -2.708374 -0.124908 163 1 4 A1`65-2100 -1853 (as usual we would very much like to thank the writ-) 0.990784 0 1750 10 50 A1`65-2100 -1745 (ers who have contributed to this first issue of the) 12.692734 0 1750 9 50 A1`65-2100 -1636 (thir) 4.083435 0 125 0 3 A1`65-1975 -1636 (d volume. W) 4.083435 0 446 2 10 A1`65-1534 -1636 (e encourage any r) 4.083435 0 602 3 16 A1`65-932 -1636 (eaders with com-) 4.083435 0 582 2 15 A1`65-2100 -1528 (ments, opposite opinions, suggestions or proposals) 14.505661 0 1750 5 49 A1`65-2100 -1420 (for future issues to contact the ) 1.894592 0 1047 6 32 A1`65/AC 200 200 w1`65-1052 -1420 (CryptoBytes) 0 0 393 0 10 A1`65/AF 200 200 w1`65-659 -1420 ( editor at) 1.894592 0 309 2 9 A1`65-2100 -1311 (RSA Laboratories or by E-mail to ) -0.053436 0 1147 6 32 A1`65/AC 200 200 w1`65-952 -1311 (bytes-ed@rsa.com) 0 0 566 0 15 A1`65/AF 200 200 w1`65-386 -1311 (.) 0 0 21 0 0 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 3 3%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate-6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 4202 2808 4202 -2567 F jbd^6572 -73 237 562 -237 -489 1.791667 -1.808219 4135 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 3053 (CR) 0 16.086365 105 0 1 A1`654452 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 3053 (T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S   \321 ) 7.445709 1.841431 2956 52 91 A1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`653306 3053 (  S P R I N G   1 9 9 7) 7.445572 1.841431 744 13 22 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`654179 3053 (3) 0 0 37 0 0 A1`65O1`65N1`65F M1`65/AB 196 200 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 -2828 (Pr) 0.02475 0 91 0 1 A1`65440 -2828 (oactive Security) 0.02475 0 670 1 15 A1`65/AC 200 200 w1`65350 -2725 (Continued from page 1) -0.005142 0 724 3 20 A1`65O1`65N1`65F M1`65/AF 206 200 w1`65350 -2503 (old\325\) of servers are broken into. Threshold cryptog-) -2.60199 0 1750 7 51 A1`65350 -2395 (raphy can indeed enhance the security against) 15.020386 1.332062 1750 6 44 A1`65350 -2286 (br) 4.552597 0 72 0 1 A1`65422 -2286 (eak-in attacks in many scenarios. However) 4.552597 0 1505 5 40 A1`651922 -2286 (, it is) 4.552597 0 178 2 6 A1`65350 -2178 (also limited: Given sufficient amount of time, an) 8.581924 0 1750 7 48 A1`65350 -2070 (attacker can break into the servers one by one, thus) -2.789612 -0.23465 1750 9 51 A1`65350 -1961 (eventually compromising the security of the sys-) 13.668869 0 1750 6 47 A1`65350 -1853 (tem. This danger is particularly eminent in systems) -1.910461 0 1750 7 50 A1`65350 -1745 (that must r) 11.322968 0 404 2 10 A1`65754 -1745 (emain secur) 11.322968 0 423 1 10 A1`651177 -1745 (e for long perio) 11.322968 0 561 3 15 A1`651739 -1745 (ds of time) 11.322968 0 361 2 9 A1`65350 -1636 (\(such as certification authorities\) or where secure) 6.537231 0 1750 6 50 A1`65350 -1528 (recovery may be difficult \(such as with secure com-) -2.261017 0 1750 8 50 A1`65350 -1420 (munication\).) 0 0.008942 455 0 11 A1`65/AF 202 200 w1`65350 -1203 (Proactive security is a mechanism for protecting) 14.728699 0.654465 1750 6 47 A1`65350 -1095 (against such long-term attacks. It combines the ap-) 2.341797 0 1750 7 50 A1`65350 -986 (proach calling for distribution of trust with the one) 1.98999 0 1750 8 52 A1`65350 -878 (of perio) -0.007858 0 260 1 7 A1`65610 -878 (dic r) -0.007858 0 152 1 4 A1`65762 -878 (efr) -0.007858 0 89 0 2 A1`65851 -878 (eshment:) -0.007858 0 311 0 7 A1`65/AF 200 200 w1`65661 -661 (Proactive ) 0.001831 0 340 1 9 A1`65$1 tsi^65%%IncludeResource: font Symbol/AG /|______Symbol F /Symbol x1`65/$1 bmt^65/AG 200 200 w1`65T g`650 0 0 (Black) 1 _rgb d`651001 -661 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`651047 -661 ( Distributed ) 0.001831 0 421 2 12 A1`65/AG 200 200 w1`651468 -661 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`651514 -661 ( Refresh) 0.001831 0 275 1 7 A1`65/AF 206 200 w1`65350 -445 (That is, first distribute the cryptographic capabili-) 3.750244 0 1750 6 52 A1`65350 -336 (ties among several servers. Next, have the servers) 5.968552 0 1750 7 49 A1`65350 -228 (perio) -2.789658 -0.536819 174 0 4 A1`65525 -228 (dically engage in a) -2.789658 -0.536819 622 3 18 A1`65/AA 206 200 w1`651147 -228 ( r) -3.10022 -0.596588 53 1 1 A1`651200 -228 (efr) -3.10022 -0.596588 98 0 2 A1`651298 -228 (eshment pr) -3.10022 -0.596588 391 1 9 A1`651690 -228 (otocol) -3.10022 -0.596588 216 0 5 A1`65/AF 206 200 w1`651905 -228 (. This) -2.789658 -0.536835 195 1 5 A1`65350 -120 (protocol will allow servers to automatically recover) -2.789612 -0.026062 1750 6 51 A1`65350 -11 (from possible, undetected break-ins, and in particu-) -2.789612 -0.30957 1750 6 51 A1`65350 97 (lar will provide the servers with new shares of the) 4.055466 0 1750 9 50 A1`65350 205 (sensitive data while keeping the sensitive data un-) 1.145935 0 1750 7 50 A1`65350 314 (mo) 9.103836 0 110 0 1 A1`65460 314 (dified. V) 9.103836 0 310 1 8 A1`65764 314 (er) 9.103836 0 67 0 1 A1`65830 314 (y impor) 9.103836 0 274 1 6 A1`651104 314 (tantly) 9.103836 0 205 0 5 A1`651302 314 (, infor) 9.103836 0 219 1 6 A1`651521 314 (mation gather) 9.103836 0 497 1 12 A1`652019 314 (ed) 9.103836 0 81 0 1 A1`65350 422 (by an attacker befor) -2.789612 -0.227646 675 3 19 A1`651025 422 (e a r) -2.789612 -0.227646 141 2 4 A1`651167 422 (efr) -2.789612 -0.227646 90 0 2 A1`651256 422 (eshment perio) -2.789612 -0.227646 487 1 12 A1`651745 422 (d becomes) -2.789612 -0.227646 355 1 8 A1`65350 530 (useless to attack the system in the futur) 4.344177 0 1391 7 40 A1`651741 530 (e. W) 4.344177 0 171 1 3 A1`651907 530 (e will) 4.344177 0 192 1 5 A1`65350 639 (see later that sometimes the attacker may be able) 6.12616 0 1750 8 48 A1`65350 747 (to prevent complete automatic recovery of system) 4.165817 0 1750 6 47 A1`65350 855 (security) 10.778137 0 267 0 7 A1`65610 855 (, however in these cases the attack is de-) 10.778137 0 1490 8 41 A1`65350 964 (tected beyond doubt. As explained above, this) 15.020386 1.217773 1750 6 44 A1`65350 1072 (would enable highly effective \(yet expensive\)) 15.020386 2.263031 1750 5 44 A1`65350 1180 (manual security measures to be applied, and secu-) 4.91481 0 1750 7 48 A1`65350 1289 (rity would ultimately be restored. In all,  the secu-) 2.493164 0 1750 9 52 A1`65350 1397 (rity of the system will be guaranteed as long as not) 1.051514 0 1750 10 51 A1`65350 1505 (too many \(say) 14.584122 0 515 2 12 A1`65859 1505 (, less than half\) of the ser) 14.584122 0 962 6 27 A1`651821 1505 (vers ar) 14.584122 0 241 1 6 A1`652062 1505 (e) 14.584122 0 38 0 0 A1`65350 1614 (broken into ) -2.789673 -0.119415 422 2 11 A1`65/AC 206 200 w1`65772 1614 (between two consecutive executions of the) -2.789581 -0.119415 1328 5 40 A1`65350 1722 (refreshment protocol) 7.302307 0 662 1 19 A1`65/AF 206 200 w1`651012 1722 (. Notice that in this approach,) 7.302032 0 1087 5 30 A1`65350 1830 (security is preserved even if, over a long span of) 11.755219 0 1750 9 49 A1`65350 1939 (time, every server can be broken into at some time) -0.419556 0 1750 9 49 A1`65350 2047 (or another) -2.789612 -0.100021 361 1 9 A1`65706 2047 (. In other wor) -2.789612 -0.100021 467 3 13 A1`651173 2047 (ds, a pr) -2.789612 -0.100021 239 2 7 A1`651412 2047 (oactively secur) -2.789612 -0.100021 508 1 14 A1`651920 2047 (e sys-) -2.789612 -0.100021 180 1 5 A1`65350 2155 (tem does not wait until a break-in is detected. In-) 3.806335 0 1750 9 50 A1`65350 2264 (stead, it invokes the r) 1.997009 0 754 4 22 A1`651104 2264 (efr) 1.997009 0 90 0 2 A1`651194 2264 (eshment pr) 1.997009 0 390 1 9 A1`651585 2264 (otocol perio) 1.997009 0 419 1 11 A1`652005 2264 (di-) 1.997009 0 95 0 2 A1`65350 2372 (cally \(and proactively\) in order to maintain unin-) 3.837143 0 1750 7 49 A1`65350 2480 (ter) -0.035706 0 95 0 2 A1`65445 2480 (r) -0.035706 0 29 0 0 A1`65474 2480 (upted security) -0.035706 0 484 1 13 A1`65951 2480 (, or for) -0.035706 0 231 2 7 A1`651182 2480 (ce detection.) -0.035706 0 448 1 12 A1`65/AF 200 200 w1`65350 2697 (Befor) 4.46817 0 180 0 4 A1`65530 2697 (e pr) 4.46817 0 132 1 3 A1`65662 2697 (oceeding any fur) 4.46817 0 564 2 15 A1`651226 2697 (ther) 4.46817 0 139 0 3 A1`651360 2697 (, let us pr) 4.46817 0 323 3 10 A1`651684 2697 (esent an ex-) 4.46817 0 416 2 11 A1`65350 2805 (ample where proactive security seems very much) 14.582916 0.651123 1750 6 45 A1`65O1`65N1`65F M1`65/AF 200 200 w1`652300 -2503 (called for:) -2.708435 -0.538467 325 1 10 A1`65/AA 200 200 w1`652625 -2503 ( Cer) -3.009903 -0.598404 147 1 3 A1`652772 -2503 (tification authorities ) -3.009903 -0.598404 716 2 22 A1`65/AF 200 200 w1`653488 -2503 (\(CA) -2.708298 -0.538452 156 0 2 A1`653634 -2503 (\325) -2.708298 -0.538452 18 0 0 A1`653648 -2503 (s\). Such sys-) -2.708298 -0.538452 402 2 12 A1`652300 -2395 (tems must r) 14.582916 0.278168 421 2 10 A1`652721 -2395 (emain secur) 14.582916 0.278168 418 1 10 A1`653139 -2395 (e for ver) 14.582916 0.278168 309 2 8 A1`653448 -2395 (y long perio) 14.582916 0.278168 430 2 11 A1`653879 -2395 (ds of) 14.582916 0.278168 171 1 4 A1`652300 -2286 (time. Mor) 0.352631 0 338 1 8 A1`652638 -2286 (eover) 0.352631 0 185 0 4 A1`652819 -2286 (, the security of all clients of the CA) 0.352631 0 1231 8 38 A1`652300 -2178 (hinges on the secr) 1.021744 0 612 3 17 A1`652912 -2178 (ecy of the CA) 1.021744 0 477 3 12 A1`653380 -2178 (\325) 1.021744 0 18 0 0 A1`653394 -2178 (s signing key) 1.021744 0 428 2 12 A1`653815 -2178 (. Thus,) 1.021744 0 235 1 6 A1`652300 -2070 (CA) 7.939468 0 125 0 1 A1`652416 -2070 (\325) 7.939468 0 18 0 0 A1`652430 -2070 (s will pose an attractive tar) 7.939468 0 944 5 28 A1`653374 -2070 (get for br) 7.939468 0 321 2 9 A1`653695 -2070 (eak-ins. A) 7.939468 0 355 1 9 A1`652300 -1961 (pr) -1.078262 0 70 0 1 A1`652370 -1961 (oactive solution for CA) -1.078262 0 795 3 22 A1`653155 -1961 (\325) -1.078262 0 18 0 0 A1`653169 -1961 (s will have the signing key) -1.078262 0 881 5 26 A1`652300 -1853 (shared among several servers. Signatures will be gen-) -2.708374 -0.059128 1750 7 52 A1`652300 -1745 (erated via a special pr) 2.016373 0 734 4 22 A1`653034 -1745 (otocol r) 2.016373 0 263 1 7 A1`653298 -1745 (un by the ser) 2.016373 0 439 3 12 A1`653737 -1745 (vers. Fur) 2.016373 0 289 1 8 A1`654022 -1745 (-) 2.016373 0 28 0 0 A1`652300 -1636 (ther) 14.214066 0 139 0 3 A1`652439 -1636 (mor) 14.214066 0 134 0 2 A1`652573 -1636 (e, perio) 14.214066 0 264 1 7 A1`652838 -1636 (dically \(say) 14.214066 0 391 1 11 A1`653223 -1636 (, ever) 14.214066 0 199 1 5 A1`653422 -1636 (y day\) the ser) 14.214066 0 494 3 13 A1`653916 -1636 (vers) 14.214066 0 134 0 3 A1`652300 -1528 (will engage in a refreshment protocol, guaranteeing) 3.628113 0 1750 6 50 A1`652300 -1420 (the security of the CA as long as not too many \(say) 1.065308 0 1735 11 50 A1`654029 -1420 (,) 1.065308 0 21 0 0 A1`652300 -1311 (less than half\) of the servers are broken into during) 3.435974 0 1750 9 52 A1`652300 -1203 (the  same day) 0.013016 0 456 3 12 A1`652750 -1203 (.) 0.013016 0 21 0 0 A1`65/AA 210 210 w1`652300 -986 (W) 0.059341 0 87 0 0 A1`652382 -986 (orks on pr) 0.059341 0 379 2 9 A1`652762 -986 (oactive security) 0.059341 0 573 1 15 A1`65/AF 200 200 w1`652300 -878 (Ostr) -2.708374 -0.285583 147 0 3 A1`652447 -878 (ovsky and Y) -2.708374 -0.285583 399 2 10 A1`652841 -878 (ung showed how a lar) -2.708374 -0.285583 710 4 19 A1`653551 -878 (ge class of mul-) -2.708374 -0.285583 499 3 15 A1`652300 -770 (tiparty protocol problems can be solved in a proac-) 5.32518 0 1750 8 50 A1`652300 -661 (tive way) 7.61467 0 287 1 7 A1`652581 -661 (, in a setting wher) 7.61467 0 634 4 18 A1`653216 -661 (e secur) 7.61467 0 237 1 6 A1`653452 -661 (e communication) 7.61467 0 598 1 14 A1`652300 -553 (channels are available [24]. Their solution, based on) -0.90097 0 1750 7 52 A1`652300 -445 (the general paradigm of multiparty computation) 14.582916 1.330536 1750 5 45 A1`652300 -336 ([27,19,2,6], is of significant theoretical interest but) 7.849609 0 1750 6 54 A1`652300 -228 (leaves the door open to efficient, practical solutions) 1.453186 0 1750 7 53 A1`652300 -120 (to specific problems.) -0.025223 0 687 2 20 A1`65/AF 202 200 w1`652300 97 (In [8] the proactive approach as a security enhance-) -0.881531 0 1750 8 51 A1`652300 205 (ment to centralized systems is considered, and a) 14.728699 0.639679 1750 7 47 A1`652300 314 (practical proactive pseudo-random generator with) 13.421844 0 1750 4 47 A1`652300 422 (applications to secure sign-on is presented. Another) -2.363754 0 1750 6 51 A1`652300 530 (basic task that has been \324pr) 0.127823 0 914 5 27 A1`653214 530 (oactivized\325 is secr) 0.127823 0 584 2 18 A1`653798 530 (et shar) 0.127823 0 227 1 6 A1`654022 530 (-) 0.127823 0 28 0 0 A1`652300 639 (ing, and  in particular ) 5.539642 0 785 5 23 A1`65/AC 202 200 w1`653085 639 (verifiable ) 5.539658 0 312 1 10 A1`65/AF 202 200 w1`653396 639 (secret sharing \(i.e.,) 5.539642 0 654 2 20 A1`652300 747 (secret sharing resilient against malicious faults\) [22].) -2.735443 -0.127197 1750 6 55 A1`652300 855 (This algorithm plays a key role in proactive solu-) 11.359833 0 1750 8 49 A1`652300 964 (tions for public-key cryptosystems, and in particular) -0.79187 0 1750 6 52 A1`652300 1072 (in proactive signature systems [21] \(extending the) 9.711578 0 1750 6 49 A1`652300 1180 (threshold signature of [11]\). Proactive solutions were) -2.735443 -0.490234 1750 6 53 A1`652300 1289 (found for the DSS signature algorithm [18,21] and) 6.251785 0 1750 7 48 A1`652300 1397 (for RSA [15,14].) 0.057068 0 561 2 15 A1`65/AF 200 200 w1`652300 1614 (Proactive signatures are a powerful tool. They are) 12.709534 0 1750 7 49 A1`652300 1722 (used in [9] to provide a proactive, automated solu-) 7.914032 0 1750 8 50 A1`652300 1830 (tion to key r) 11.8134 0 450 3 12 A1`652750 1830 (efr) 11.8134 0 88 0 2 A1`652837 1830 (esh. Namely) 11.8134 0 428 1 10 A1`653260 1830 (, [9] shows how to use) 11.8134 0 790 5 21 A1`652300 1939 (cryptography to ensure authenticated and secret) 14.582916 1.30957 1750 5 46 A1`652300 2047 (communication among servers, with recovery from) 8.491821 0 1750 5 46 A1`652300 2155 (penetrations and key exposures. This provides an al-) -1.197418 0 1750 7 51 A1`652300 2264 (ternative to manual key refresh. Some of the solu-) 8.496399 0 1750 8 49 A1`652300 2372 (tions mentioned above are described in more detail) 3.75502 0 1750 7 49 A1`652300 2480 (later in the article.) -0.001358 0 629 3 20 A1`652300 2697 (In a related vein, proactive protocols for byzantine) 7.414139 0 1750 7 51 A1`652300 2805 (agreement were presented in [25,16].) -0.022995 0 1240 4 35 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 -2503 ([\311] in this) -0.022018 0 349 2 10 A1`654350 -2395 (appr) 0 0.014252 168 0 3 A1`654517 -2395 (oach,) 0 0.014252 190 0 4 A1`654350 -2286 (security is) -0.104218 0 349 1 10 A1`654350 -2178 (pr) 0.204163 0 76 0 1 A1`654426 -2178 (eser) 0.204163 0 147 0 3 A1`654576 -2178 (ved even) 0.204163 0 320 1 7 A1`654350 -2070 (if, over a long) 0.042053 0 497 3 14 A1`654350 -1961 (span of time,) -0.096634 0 462 2 12 A1`654350 -1853 (ever) -0.080902 0 155 0 3 A1`654507 -1853 (y ser) -0.080902 0 173 1 4 A1`654683 -1853 (ver) -0.080902 0 113 0 2 A1`654350 -1745 (can be br) 0.044281 0 332 2 8 A1`654681 -1745 (oken) 0.044281 0 176 0 3 A1`654350 -1636 (into at some) -0.070602 0 436 2 11 A1`654350 -1528 (time or) -0.173813 0 250 1 6 A1`654350 -1420 (another) 0 0.014145 275 0 6 A1`654619 -1420 (.) 0 0.014145 23 0 0 A1`65O1`65N1`65F M1`65/AD 161 170 w1`654350 97 ([\311] a pr) 0.004761 0 283 2 7 A1`654632 97 (oactively) 0.004761 0 315 0 8 A1`654350 205 (secure system) -0.121933 0 492 1 12 A1`654350 314 (does not wait) 0.082092 0 483 2 12 A1`654350 422 (until a break-in) -0.064987 0 546 2 15 A1`654350 530 (is detected.) -0.098984 0 397 1 11 A1`654350 639 (Instead, it) -0.132263 0 348 1 10 A1`654350 747 (invokes the) -0.033539 0 406 1 10 A1`654350 855 (refreshment) 0 0.020111 425 0 10 A1`654350 964 (pr) 0 0.006104 76 0 1 A1`654425 964 (otocol) 0 0.006104 211 0 5 A1`654350 1072 (periodically) 0 -0.015411 411 0 11 A1`654350 1180 (\(and pr) 0.163345 0 260 1 6 A1`654608 1180 (oactively\)) 0.163345 0 338 0 9 A1`654350 1289 (in order to) 0.004913 0 372 2 10 A1`654350 1397 (maintain) 0 0.001022 312 0 7 A1`654350 1505 (uninterrupted) 0 0.007584 481 0 12 A1`654350 1614 (security) -0.047516 0 271 0 7 A1`654613 1614 (, or for) -0.047516 0 245 2 7 A1`654859 1614 (ce) -0.047516 0 73 0 1 A1`654350 1722 (detection.) 0 -0.002213 341 0 9 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 4 4%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`6572 -73 237 562 -237 -489 1.805556 -1.808219 -4265 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`65-4221 3053 (4) 0 0 37 0 0 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 -4194 2817 -4194 -2567 F jbd^65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4900 3053 (CR) 0 16.086365 105 0 1 A1`65-4797 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65-4050 3053 (S P R I N G   1 9 9 7  ) 7.445572 1.841431 746 13 22 A1`65T g`650 0 0 (Black) 1 _rgb d`65-3304 3053 ( \321   T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S) 7.445709 1.841431 2954 52 91 A1`65O1`65N1`65F M1`65/AA 210 210 w1`65-4050 -2503 (Applications) 0 -0.003342 462 0 11 A1`65/AF 200 200 w1`65-4050 -2395 (Proactive security has a wide range of applications.) 6.09465 0 1750 7 51 A1`65-4050 -2286 (In general, proactivization can help in any scenario) 3.429504 0 1750 7 51 A1`65-4050 -2178 (where the security of a system has to be maintained) 2.42778 0 1750 9 50 A1`65-4050 -2070 (for a r) 4.61821 0 208 2 6 A1`65-3842 -2070 (elatively long perio) 4.61821 0 657 2 19 A1`65-3184 -2070 (d of time.  The impor) 4.61821 0 745 5 20 A1`65-2439 -2070 (tant) 4.61821 0 139 0 3 A1`65-4050 -1961 (application to certification authorities was described) -2.103622 0 1750 5 53 A1`65-4050 -1853 (above. Other applications  of proactive signature al-) 0.14241 0 1750 7 52 A1`65-4050 -1745 (gorithms include electronic cash, where the signa-) 9.795898 0 1750 6 49 A1`65-4050 -1636 (ture of the bank validates an electronic bill. Also) 12.537338 0 1750 8 50 A1`65-4050 -1528 (here, the signature system has to remain secure for a) 0.137878 0 1750 9 52 A1`65-4050 -1420 (long perio) -0.052902 0 340 1 9 A1`65-3709 -1420 (d of time.) -0.052902 0 322 2 9 A1`65/AF 192 200 w1`65-4050 -1203 (In other applications it is beneficial to proactivize the) 2.198044 0 1750 8 56 A1`65-4050 -1095 (capability to ) 6.109085 0 434 2 13 A1`65/AC 192 200 w1`65-3616 -1095 (decrypt ) 6.109085 0 244 1 7 A1`65/AF 192 200 w1`65-3372 -1095 (a message encrypted with a pub-) 6.109085 0 1072 5 30 A1`65-4050 -986 (lic-key encryption system. Examples include electronic) -2.600067 -0.176529 1750 5 53 A1`65-4050 -878 (voting  systems where voters encrypt their votes with) 4.434357 0 1750 8 52 A1`65-4050 -770 (the voting center) 4.695557 0 569 2 16 A1`65-3481 -770 (\325) 4.695557 0 18 0 0 A1`65-3467 -770 (s public key [10], and secur) 4.695557 0 890 5 27 A1`65-2578 -770 (e r) 4.695557 0 87 1 2 A1`65-2491 -770 (eposi-) 4.695557 0 191 0 5 A1`65-4050 -661 (tories wher) -2.600067 -0.186249 353 1 10 A1`65-3697 -661 (e users keep sensitive data in a cer) -2.600067 -0.186249 1074 7 35 A1`65-2623 -661 (tified way) -2.600067 -0.186249 309 1 9 A1`65-2320 -661 (.) -2.600067 -0.186249 20 0 0 A1`65/AA 210 210 w1`65-4050 -445 (Implementations) 0 0.012207 612 0 14 A1`65/AF 200 200 w1`65-4050 -336 (W) -2.708374 -0.011169 83 0 0 A1`65-3971 -336 (e ar) -2.708374 -0.011169 120 1 3 A1`65-3852 -336 (e awar) -2.708374 -0.011169 212 1 5 A1`65-3639 -336 (e of thr) -2.708374 -0.011169 240 2 7 A1`65-3400 -336 (ee implementation ef) -2.708374 -0.011169 712 2 19 A1`65-2688 -336 (for) -2.708374 -0.011169 92 0 2 A1`65-2595 -336 (ts of pr) -2.708374 -0.011169 226 2 7 A1`65-2370 -336 (o-) -2.708374 -0.011169 70 0 1 A1`65-4050 -228 (active security systems currently under way: by) 14.582916 2.099564 1750 6 46 A1`65-4050 -120 (Sandia National Labs, IBM Resear) -2.708374 -0.196869 1147 4 31 A1`65-2903 -120 (ch, and a DARP) -2.708374 -0.196869 545 3 13 A1`65-2365 -120 (A) -2.708374 -0.196869 65 0 0 A1`65-4050 -11 (pr) 12.700821 0 70 0 1 A1`65-3980 -11 (oject. W) 12.700821 0 304 1 7 A1`65-3681 -11 (e elaborate on these ef) 12.700821 0 805 4 22 A1`65-2876 -11 (for) 12.700821 0 92 0 2 A1`65-2783 -11 (ts in ) 12.700821 0 192 2 5 A1`65/AC 200 200 w1`65-2592 -11 (Ar) 0 0 88 0 1 A1`65-2504 -11 (chitec-) 0 0 204 0 6 A1`65-4050 97 (tural design and implementations) 0.021362 0 1025 3 31 A1`65/AF 200 200 w1`65-3025 97 ( later) 0.021362 0 173 1 5 A1`65-2856 97 (.) 0.021362 0 21 0 0 A1`65/AB 196 200 w1`65-4050 314 (Algorithmic results) -0.203568 0 794 1 18 A1`65/AF 202 200 w1`65-4050 422 (W) -2.373993 0 84 0 0 A1`65-3970 422 (e now describe briefly thr) -2.373993 0 850 4 25 A1`65-3120 422 (ee pr) -2.373993 0 163 1 4 A1`65-2957 422 (oactive techniques,) -2.373993 0 657 1 18 A1`65-4050 530 (which we believe to be applicable to many systems) 3.75972 0 1750 8 48 A1`65-4050 639 (and scenarios. These are: proactive secret sharing,) 9.362244 0 1750 6 50 A1`65-4050 747 (proactive signatures, and proactive secure commu-) 7.01828 0 1750 5 48 A1`65-4050 855 (nication.) 0 0.007294 306 0 8 A1`65/AA 210 210 w1`65-4050 1072 (Proactive secret sharing) 0.015976 0 875 2 23 A1`65/AF 200 200 w1`65-4050 1180 (Secr) 8.853271 0 148 0 3 A1`65-3902 1180 (et Sharing pr) 8.853271 0 457 2 12 A1`65-3444 1180 (otocols wer) 8.853271 0 390 1 10 A1`65-3054 1180 (e intr) 8.853271 0 192 1 5 A1`65-2862 1180 (o) 8.853271 0 42 0 0 A1`65-2820 1180 (duced in [26,3]) 8.853271 0 520 2 14 A1`65-4050 1289 (to protect the secrecy of a value by distributing it) 11.184982 0 1750 9 51 A1`65-4050 1397 (over several ser) 14.582916 1.128906 561 2 15 A1`65-3489 1397 (vers. T) 14.582916 1.128906 254 1 6 A1`65-3245 1397 (ypical implementation use) 14.582916 1.128906 945 2 24 A1`65-4050 1505 (threshold schemes in which the secret is shared) 14.582916 1.170441 1750 7 46 A1`65-4050 1614 (among ) 7.054047 0 255 1 5 A1`65/AC 200 200 w1`65-3795 1614 (n) 0 0 42 0 0 A1`65/AF 200 200 w1`65-3754 1614 ( servers and any ) 7.054367 0 583 4 16 A1`65/AC 200 200 w1`65-3170 1614 (t) 0 0 23 0 0 A1`65/AF 200 200 w1`65-3147 1614 ( ) 7.054047 0 28 1 0 A1`65/AG 200 200 w1`65-3119 1614 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3073 1614 ( 1 out of them can re-) 7.054474 0 773 6 21 A1`65-4050 1722 (cover the secret.) 0.091141 0 553 2 16 A1`65-4050 1939 (T) 8.411011 0 55 0 0 A1`65-4004 1939 (o maintain the security of secr) 8.411011 0 1057 5 30 A1`65-2946 1939 (et sharing schemes) 8.411011 0 646 2 17 A1`65-4050 2047 (even in the presence of attackers that can eventu-) 8.239548 0 1750 8 49 A1`65-4050 2155 (ally break into all servers, but can only break into a) 2.638687 0 1750 10 53 A1`65-4050 2264 (limited number of servers given limited time, have) 7.379257 0 1750 7 49 A1`65-4050 2372 (the ser) 3.598099 0 228 1 6 A1`65-3822 2372 (vers perio) 3.598099 0 330 1 9 A1`65-3492 2372 (dically \(say) 3.598099 0 381 1 11 A1`65-3117 2372 (, ever) 3.598099 0 189 1 5 A1`65-2928 2372 (y day\) ) 3.598099 0 234 2 6 A1`65/AC 200 200 w1`65-2695 2372 (r) 3.597977 0 28 0 0 A1`65-2667 2372 (efr) 3.597977 0 83 0 2 A1`65-2583 2372 (esh ) 3.597977 0 122 1 3 A1`65/AF 200 200 w1`65-2462 2372 (their) 0 0 162 0 4 A1`65-4050 2480 (shares of the secret. The refreshment protocol should) -2.708374 -0.32869 1750 7 52 A1`65-4050 2589 (guarantee that the new shares are ) 4.188431 0 1172 6 33 A1`65/AC 200 200 w1`65-2877 2589 (independent of the) 4.188431 0 577 2 17 A1`65-4050 2697 (old shares) -2.708527 -0.113617 299 1 9 A1`65/AF 200 200 w1`65-3751 2697 (, except for the fact that they ) -2.708359 -0.113617 981 7 31 A1`65/AC 200 200 w1`65-2770 2697 (define the same) -2.708328 -0.113617 470 2 14 A1`65-4050 2805 (secret) 0 -0.00148 176 0 5 A1`65/AF 200 200 w1`65-3874 2805 (.) 0 0 21 0 0 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65-2100 -2503 (For example in Shamir) 13.721268 0 812 3 20 A1`65-1288 -2503 (\325) 13.721268 0 18 0 0 A1`65-1274 -2503 (s scheme if the secr) 13.721268 0 702 4 19 A1`65-572 -2503 (et is a) 13.721268 0 222 2 6 A1`65-2100 -2395 (value ) 3.491272 0 205 1 5 A1`65/AC 200 200 w1`65-1895 -2395 (s) 0 0 28 0 0 A1`65/AF 200 200 w1`65-1867 -2395 ( in the set of integers [0 ) 3.49147 0 837 7 26 A1`65/AG 200 200 w1`65-1031 -2395 (\274) 0 0 83 0 0 A1`65/AC 200 200 w1`65-947 -2395 ( p) 3.491272 0 61 1 1 A1`65/AG 200 200 w1`65-886 -2395 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-840 -2395 (1] where ) 3.491272 0 317 2 8 A1`65/AC 200 200 w1`65-523 -2395 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-487 -2395 ( is a) 3.491272 0 137 2 4 A1`65-2100 -2286 (prime, then this process can be carried out as follows) -1.953079 0 1750 9 53 A1`65-2100 -2178 ([24,22]. The dealer \(who is sharing the secret\) gen-) 3.567932 0 1750 8 51 A1`65-2100 -2070 (erates ) 1.090775 0 216 1 6 A1`65/AC 200 200 w1`65-1884 -2070 (t) 0 0 23 0 0 A1`65/AF 200 200 w1`65-1861 -2070 ( random numbers ) 1.090714 0 612 3 15 A1`65/AC 200 200 w1`65-1249 -2070 (a) 0 0 37 0 0 A1`65/AF 130 130 w1`65-1212 -2053 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-1185 -2070 (, ) 1.090775 0 43 1 1 A1`65/AG 200 200 w1`65-1142 -2070 (\274 ) 1.090775 0 105 1 1 A1`65/AF 200 200 w1`65-1037 -2070 (,) 0 0 21 0 0 A1`65/AC 200 200 w1`65-1016 -2070 ( a) 1.090775 0 59 1 1 A1`65/AC 130 130 w1`65-957 -2053 (t) 0 0 15 0 0 A1`65/AF 200 200 w1`65-942 -2070 ( mo) 1.090698 0 128 1 2 A1`65-813 -2070 (dulo ) 1.090698 0 170 1 4 A1`65/AC 200 200 w1`65-642 -2070 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-606 -2070 (. Given) 1.090775 0 256 1 6 A1`65-2100 -1961 (the polynomial ) -1.908798 0 528 2 14 A1`65/AC 200 200 w1`65-1572 -1961 (f) 0 0 23 0 0 A1`65/AF 200 200 w1`65-1548 -1961 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-1516 -1961 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`65-1460 -1961 (\) ) -1.908813 0 51 1 1 A1`65/AG 200 200 w1`65-1409 -1961 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1363 -1961 ( ) -1.908813 0 19 1 0 A1`65/AC 200 200 w1`65-1345 -1961 (s) 0 0 28 0 0 A1`65/AF 200 200 w1`65-1317 -1961 ( ) -1.908813 0 19 1 0 A1`65/AG 200 200 w1`65-1298 -1961 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1252 -1961 ( ) -1.908813 0 19 1 0 A1`65/AC 200 200 w1`65-1233 -1961 (a) 0 0 37 0 0 A1`65/AF 130 130 w1`65-1196 -1945 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-1169 -1961 ( ) -1.908813 0 19 1 0 A1`65/AC 200 200 w1`65-1150 -1961 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`65-1095 -1961 ( ) -1.908813 0 19 1 0 A1`65/AG 200 200 w1`65-1075 -1961 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1030 -1961 ( ) -1.908813 0 19 1 0 A1`65/AG 200 200 w1`65-1011 -1961 (\274) 0 0 83 0 0 A1`65/AF 200 200 w1`65-927 -1961 ( ) -1.908813 0 19 1 0 A1`65/AG 200 200 w1`65-909 -1961 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-863 -1961 ( ) -1.908813 0 19 1 0 A1`65/AC 200 200 w1`65-844 -1961 (a) 0 0 37 0 0 A1`65/AC 130 130 w1`65-807 -1945 (t) 0 0 15 0 0 A1`65/AF 200 200 w1`65-792 -1961 ( ) -1.908813 0 19 1 0 A1`65/AC 200 200 w1`65-773 -1961 (X) 0 0 55 0 0 A1`65/AC 130 130 w1`65-717 -1986 (t) 0 0 15 0 0 A1`65/AF 200 200 w1`65-702 -1961 ( the dealer) -1.908798 0 352 2 10 A1`65-2100 -1853 (gives to ser) 9.680878 0 390 2 11 A1`65-1710 -1853 (ver ) 9.680878 0 137 1 3 A1`65/AC 200 200 w1`65-1574 -1853 (i) 0 0 18 0 0 A1`65/AF 200 200 w1`65-1555 -1853 ( the ) 9.681183 0 172 2 4 A1`65/AC 200 200 w1`65-1383 -1853 (shar) 9.680283 0 130 0 3 A1`65-1254 -1853 (e s) 9.680283 0 91 1 2 A1`65/AC 130 130 w1`65-1163 -1836 (i) 0 0 12 0 0 A1`65/AF 200 200 w1`65-1151 -1853 ( ) 9.680283 0 30 1 0 A1`65/AG 200 200 w1`65-1120 -1853 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1075 -1853 ( ) 9.680283 0 30 1 0 A1`65/AC 200 200 w1`65-1044 -1853 (f) 0 0 23 0 0 A1`65/AF 200 200 w1`65-1021 -1853 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-989 -1853 (i) 0 0 18 0 0 A1`65/AF 200 200 w1`65-970 -1853 (\) mo) 9.681183 0 170 1 3 A1`65-800 -1853 (d ) 9.681183 0 72 1 1 A1`65/AC 200 200 w1`65-728 -1853 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-691 -1853 (. It\325) 9.681183 0 125 1 4 A1`65-570 -1853 (s clear) 9.681183 0 220 1 6 A1`65-2100 -1745 (that any ) -0.178574 0 300 2 8 A1`65/AC 200 200 w1`65-1800 -1745 (t) 0 0 23 0 0 A1`65/AF 200 200 w1`65-1777 -1745 ( servers have no information about ) -0.178574 0 1193 6 34 A1`65/AC 200 200 w1`65-584 -1745 (s) 0 0 28 0 0 A1`65/AF 200 200 w1`65-556 -1745 ( while) -0.178589 0 206 1 5 A1`65/AC 200 200 w1`65-2100 -1636 (t ) 1.7836 0 46 1 1 A1`65/AG 200 200 w1`65-2054 -1636 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2008 -1636 ( 1 can r) 1.783524 0 257 3 7 A1`65-1751 -1636 (econstr) 1.783524 0 245 0 6 A1`65-1506 -1636 (uct the value by polynomial inter) 1.783524 0 1131 5 32 A1`65-378 -1636 (-) 1.783524 0 28 0 0 A1`65-2100 -1528 (polation.) 0 0.018921 303 0 8 A1`65-2100 -1311 (Perio) -2.708374 -0.123703 175 0 4 A1`65-1924 -1311 (dic r) -2.708374 -0.123703 147 1 4 A1`65-1777 -1311 (efr) -2.708374 -0.123703 87 0 2 A1`65-1690 -1311 (eshments of the shar) -2.708374 -0.123703 681 3 19 A1`65-1008 -1311 (es can be per) -2.708374 -0.123703 423 3 12 A1`65-585 -1311 (for) -2.708374 -0.123703 92 0 2 A1`65-493 -1311 (med) -2.708374 -0.123703 143 0 2 A1`65-2100 -1203 (as follows. Each server ) 6.777283 0 797 4 23 A1`65/AC 200 200 w1`65-1302 -1203 (i) 0 0 18 0 0 A1`65/AF 200 200 w1`65-1284 -1203 ( chooses a random ) 6.777283 0 666 4 17 A1`65/AC 200 200 w1`65-618 -1203 (t) 0 0 23 0 0 A1`65/AF 200 200 w1`65-595 -1203 (-degree) 0 0 245 0 6 A1`65-2100 -1095 (polynomial ) 10.297623 0 411 1 10 A1`65/AC 200 200 w1`65-1689 -1095 (f) 0 0 23 0 0 A1`65/AC 130 130 w1`65-1666 -1078 (i) 0 0 12 0 0 A1`65/AF 200 200 w1`65-1654 -1095 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-1622 -1095 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`65-1566 -1095 (\) such that ) 10.29715 0 417 3 11 A1`65/AC 200 200 w1`65-1149 -1095 (f) 0 0 23 0 0 A1`65/AC 130 130 w1`65-1126 -1078 (i) 0 0 12 0 0 A1`65/AF 200 200 w1`65-1114 -1095 (\(0\) ) 10.297623 0 137 1 3 A1`65/AG 200 200 w1`65-976 -1095 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-930 -1095 ( 0. Server ) 10.29715 0 373 3 10 A1`65/AC 200 200 w1`65-557 -1095 (i) 0 0 18 0 0 A1`65/AF 200 200 w1`65-538 -1095 ( then) 10.297623 0 188 1 4 A1`65-2100 -986 (sends to ser) 7.718384 0 400 2 11 A1`65-1700 -986 (ver ) 7.718384 0 135 1 3 A1`65/AC 200 200 w1`65-1566 -986 (j) 0 0 18 0 0 A1`65/AF 200 200 w1`65-1547 -986 ( the value ) 7.718384 0 377 3 10 A1`65/AC 200 200 w1`65-1170 -986 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-1142 -970 (ij) 0 0 24 0 1 A1`65/AF 130 130 w1`65-1118 -970 ( ) 5.016312 0 19 1 0 A1`65/AG 200 200 w1`65-1100 -986 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1054 -986 ( ) 7.717926 0 29 1 0 A1`65/AC 200 200 w1`65-1025 -986 (f) 0 0 23 0 0 A1`65/AC 130 130 w1`65-1002 -970 (i) 0 0 12 0 0 A1`65/AF 200 200 w1`65-990 -986 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-958 -986 (j) 0 0 18 0 0 A1`65/AF 200 200 w1`65-939 -986 (\) mo) 7.718613 0 167 1 3 A1`65-771 -986 (d ) 7.718613 0 70 1 1 A1`65/AC 200 200 w1`65-701 -986 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-664 -986 (. Ser) 7.718613 0 160 1 4 A1`65-503 -986 (ver ) 7.718613 0 135 1 3 A1`65/AC 200 200 w1`65-368 -986 (j) 0 0 18 0 0 A1`65/AF 200 200 w1`65-2100 -878 (then computes its new refreshed share ) 0.031952 0 1300 6 37 A1`65/AC 200 200 w1`65-800 -878 (\366) 0 -27.499481 0 0 0 A1`65-800 -878 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-772 -861 (j) 0 0 12 0 0 A1`65/AF 200 200 w1`65-760 -878 ( as follows:) 0.031952 0 363 2 11 A1`65-1673 -661 ( ) 0.169968 0 21 1 0 A1`65/AC 200 200 w1`65-1652 -661 (\366) 0 -27.499481 0 0 0 A1`65-1652 -661 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-1624 -645 (j) 0 0 12 0 0 A1`65/AF 200 200 w1`65-1612 -661 ( ) 0.169968 0 21 1 0 A1`65/AG 200 200 w1`65-1591 -661 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1545 -661 ( ) 0.169968 0 21 1 0 A1`65/AC 200 200 w1`65-1525 -661 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-1497 -645 (j) 0 0 12 0 0 A1`65/AF 200 200 w1`65-1485 -661 ( ) 0.169968 0 21 1 0 A1`65/AG 200 200 w1`65-1464 -661 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1418 -661 ( ) 0.169968 0 21 1 0 A1`65/AC 200 200 w1`65-1397 -661 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-1370 -645 (1j) 0 0 39 0 1 A1`65/AF 200 200 w1`65-1330 -661 ( ) 0.169968 0 21 1 0 A1`65/AG 200 200 w1`65-1309 -661 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1263 -661 ( ) 0.169968 0 21 1 0 A1`65/AG 200 200 w1`65-1242 -661 (\274) 0 0 83 0 0 A1`65/AF 200 200 w1`65-1159 -661 ( ) 0.169968 0 21 1 0 A1`65/AG 200 200 w1`65-1138 -661 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1092 -661 ( ) 0.169968 0 21 1 0 A1`65/AC 200 200 w1`65-1072 -661 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-1044 -645 (nj) 0 0 39 0 1 A1`65/AF 200 200 w1`65-1005 -661 ( mo) 0.169968 0 127 1 2 A1`65-876 -661 (d ) 0.169968 0 62 1 1 A1`65/AC 200 200 w1`65-814 -661 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2100 -445 (and ) 3.049927 0 149 1 3 A1`65/AC 200 200 w1`65-1951 -445 (erases ) 3.049927 0 209 1 6 A1`65/AF 200 200 w1`65-1742 -445 (its old shar) 3.049805 0 372 2 11 A1`65-1370 -445 (e. It\325) 3.049805 0 156 1 5 A1`65-1220 -445 (s easy to see that the new) 3.049805 0 870 6 25 A1`65-2100 -336 (shares ) 1.480774 0 226 1 6 A1`65/AC 200 200 w1`65-1874 -336 (\366) 0 -27.499481 0 0 0 A1`65-1874 -336 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-1846 -320 (i) 0 0 12 0 0 A1`65/AF 200 200 w1`65-1834 -336 ( lie on the polynomial ) 1.480881 0 773 5 22 A1`65/AC 200 200 w1`65-1061 -361 (\366) 0 -34.166138 -6 0 0 A1`65-1067 -336 (f) 0 -11.666336 12 0 0 A1`65/AF 200 200 w1`65-1056 -336 ( \() 1.480774 0 55 1 1 A1`65/AC 200 200 w1`65-1001 -336 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`65-945 -336 (\) ) 1.480774 0 55 1 1 A1`65/AG 200 200 w1`65-891 -336 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-845 -336 ( ) 1.480774 0 22 1 0 A1`65/AC 200 200 w1`65-822 -336 (f) 0 0 23 0 0 A1`65/AF 200 200 w1`65-800 -336 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-767 -336 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`65-712 -336 (\) ) 1.480774 0 55 1 1 A1`65/AG 200 200 w1`65-657 -336 (+) 0 0 46 0 0 A1`65/AC 200 200 w1`65-611 -336 ( f) 1.480774 0 45 1 1 A1`65/AF 130 130 w1`65-565 -320 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-538 -336 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-506 -336 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`65-450 -336 (\) ) 1.480774 0 55 1 1 A1`65/AG 200 200 w1`65-396 -336 (+) 0 0 46 0 0 A1`65-2100 -228 (\274) 0 0 83 0 0 A1`65/AF 200 200 w1`65-2017 -228 ( ) 6.682114 0 27 1 0 A1`65/AG 200 200 w1`65-1989 -228 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1943 -228 ( ) 6.682114 0 27 1 0 A1`65/AC 200 200 w1`65-1916 -228 (f) 0 0 23 0 0 A1`65/AC 130 130 w1`65-1893 -211 (n) 0 0 27 0 0 A1`65/AF 200 200 w1`65-1866 -228 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-1833 -228 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`65-1777 -228 (\) which is still of degree ) 6.681931 0 864 6 26 A1`65/AC 200 200 w1`65-914 -228 (t) 0 0 23 0 0 A1`65/AF 200 200 w1`65-891 -228 ( and whose free) 6.681747 0 541 3 14 A1`65-2100 -120 (term is still ) 0.011398 0 395 3 13 A1`65/AC 200 200 w1`65-1705 -120 (s) 0 0 28 0 0 A1`65/AF 200 200 w1`65-1677 -120 (.) 0 0 21 0 0 A1`65-2100 97 (The above procedure works only in the case of a) 14.223099 0 1750 9 46 A1`65-2100 205 (passive adversary who may read the content of) 14.582916 1.962051 1750 7 44 A1`65-2100 314 (memor) -0.006104 0 236 0 4 A1`65-1864 314 (y but not mo) -0.006104 0 433 3 11 A1`65-1430 314 (dify it or cause the behavior of a) -0.006104 0 1080 7 33 A1`65-2100 422 (server to change. In case of an active adversary the) 4.769669 0 1750 9 51 A1`65-2100 530 (above techniques wer) 3.221191 0 733 2 19 A1`65-1367 530 (e extended using ) 3.221191 0 595 3 16 A1`65/AC 200 200 w1`65-772 530 (V) 3.221313 0 55 0 0 A1`65-721 530 (erifiable Se-) 3.221313 0 371 1 12 A1`65-2100 639 (cr) 12.991058 0 60 0 1 A1`65-2040 639 (et Sharing) 12.991058 0 325 1 9 A1`65/AF 200 200 w1`65-1715 639 ( \(VSS\) pr) 12.991516 0 355 2 8 A1`65-1360 639 (otocols [7]. In par) 12.991516 0 631 3 18 A1`65-728 639 (ticular) 12.991516 0 217 0 6 A1`65-516 639 (, the) 12.991516 0 166 1 4 A1`65-2100 747 (VSS protocol by Feldman [13] proved especially suit-) -2.708374 -0.294846 1750 7 51 A1`65-2100 855 (able for this purpose, and in addition provides the) 9.622971 0 1750 8 50 A1`65-2100 964 (ability to recover lost or corrupted shares and to re-) 2.965775 0 1750 9 53 A1`65-2100 1072 (install them. See [22] for more details.) -0.032272 0 1282 6 39 A1`65/AA 210 210 w1`65-2100 1289 (Proactive signatures) -0.204254 0 738 1 19 A1`65/AF 200 200 w1`65-2100 1397 (The security of public key cryptosystems relies) 14.582916 2.448959 1750 6 46 A1`65-2100 1505 (heavily on the secrecy and integrity of the private) 9.386475 0 1750 8 50 A1`65-2100 1614 (key) 6.194916 0 116 0 2 A1`65-1990 1614 (. Thus such cr) 6.194916 0 491 3 13 A1`65-1500 1614 (yptosystems should be augmented) 6.194916 0 1150 3 30 A1`65-2100 1722 (with metho) -2.708374 -0.382248 385 1 9 A1`65-1715 1722 (ds for pr) -2.708374 -0.382248 264 2 8 A1`65-1450 1722 (otecting the secr) -2.708374 -0.382248 548 2 16 A1`65-902 1722 (et key while pr) -2.708374 -0.382248 484 3 14 A1`65-419 1722 (o-) -2.708374 -0.382248 69 0 1 A1`65-2100 1830 (viding continuous availability of the system \(e.g.,) 14.582916 0.162445 1750 6 50 A1`65-2100 1939 (signing capabilities\).) 0.074875 0 694 1 21 A1`65-2100 2155 (A naive solution may be to share the private key) 12.695007 0 1750 9 47 A1`65-2100 2264 (using a proactive secret sharing scheme. This solu-) 7.419952 0 1750 7 50 A1`65-2100 2372 (tion provides the necessary protection as long as the) -0.445038 0 1750 8 52 A1`65-2100 2480 (key is not used. However) 1.487183 0 846 4 23 A1`65-1259 2480 (, in or) 1.487183 0 204 2 6 A1`65-1054 2480 (der to generate a sig-) 1.487183 0 704 4 21 A1`65-2100 2589 (nature the private key would need to be recon-) 14.582916 1.232254 1750 8 45 A1`65-2100 2697 (structed in a single site, thus losing the advantage of) -0.402359 0 1750 9 54 A1`65-2100 2805 (distribution:  A single break-in to this site will com-) 0.079117 0 1750 9 54 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4759 -1203 (T) -0.199295 0 36 0 0 A1`65-4729 -1203 (o maintain) -0.199295 0 380 1 9 A1`65-4848 -1095 (the security of) 0.016586 0 498 2 14 A1`65-4842 -986 (secret sharing) -0.011108 0 492 1 13 A1`65-4924 -878 (schemes even in) 0.093231 0 574 2 14 A1`65-4887 -770 (the presence of) 0.020157 0 537 2 14 A1`65-4837 -661 (attackers that) 0.207291 0 487 1 13 A1`65-4863 -553 (can eventually) -0.091095 0 513 1 13 A1`65-4826 -445 (break into all) 0.048035 0 476 2 13 A1`65-4744 -336 (ser) 0.078812 0 106 0 2 A1`65-4635 -336 (vers [\311]) 0.078812 0 285 1 7 A1`65-4936 -228 (have the ser) 0.012192 0 435 2 11 A1`65-4498 -228 (vers) 0.012192 0 148 0 3 A1`65-4761 -120 (periodically) 0 -0.015411 411 0 11 A1`65-4919 -11 (\(say) -0.095642 0 148 0 3 A1`65-4779 -11 (, ever) -0.095642 0 200 1 5 A1`65-4576 -11 (y day\)) -0.095642 0 226 1 5 A1`65/AB 161 170 w1`65-4782 97 (refresh ) -0.026215 0 271 1 7 A1`65/AD 161 170 w1`65-4510 97 (their) 0 0 160 0 4 A1`65-4807 205 (shares of the) 0.048279 0 457 2 12 A1`65-4577 314 (secret.) 0 -0.029785 227 0 6 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 5 5%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate-6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 4202 2808 4202 -2567 F jbd^6572 -73 237 562 -237 -489 1.791667 -1.808219 4135 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 3053 (CR) 0 16.086365 105 0 1 A1`654452 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 3053 (T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S   \321 ) 7.445709 1.841431 2956 52 91 A1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`653306 3053 (  S P R I N G   1 9 9 7) 7.445572 1.841431 744 13 22 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`654179 3053 (5) 0 0 37 0 0 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 -2503 (pr) 2.694199 0 70 0 1 A1`65420 -2503 (omise the security) 2.694199 0 611 2 17 A1`651025 -2503 (.  Instead, a pr) 2.694199 0 487 4 15 A1`651512 -2503 (oactive thr) 2.694199 0 370 1 10 A1`651882 -2503 (eshold) 2.694199 0 217 0 5 A1`65350 -2395 (signature scheme allows the servers \(i.e., the share-) 4.795502 0 1750 7 52 A1`65350 -2286 (holders\) to jointly generate  valid signatures in a spe-) -2.708374 -0.169373 1750 9 55 A1`65350 -2178 (cial way that  prevents an  attacker from generating) 1.930466 0 1750 9 51 A1`65350 -2070 (fake signatur) -0.825409 0 427 1 12 A1`65777 -2070 (es. In par) -0.825409 0 306 2 9 A1`651083 -2070 (ticular) -0.825409 0 217 0 6 A1`651296 -2070 (, the scheme makes sur) -0.825409 0 767 4 21 A1`652063 -2070 (e) -0.825409 0 37 0 0 A1`65350 -1961 (that the key is never reconstructed at a single site.) -0.021057 0 1684 9 52 A1`65350 -1745 (A proactive signature scheme involves three phases:) -0.983322 0 1750 6 50 A1`65350 -1636 (the ) 5.739899 0 137 1 3 A1`65/AC 200 200 w1`65487 -1636 (key generation) 5.739899 0 457 1 13 A1`65/AF 200 200 w1`65945 -1636 ( phase \(preferably done without a) 5.740005 0 1155 5 32 A1`65350 -1528 (trusted dealer\), the ) 14.583054 0.221054 710 3 20 A1`65/AC 200 200 w1`651060 -1528 (joint signature-generation) 14.582687 0.221054 814 1 25 A1`65/AF 200 200 w1`651874 -1528 ( phase) 14.582687 0.221069 226 1 5 A1`65350 -1420 (and finally a special ) 8.408081 0 718 4 21 A1`65/AC 200 200 w1`651068 -1420 (proactive key refreshment) 8.40831 0 812 2 24 A1`65/AF 200 200 w1`651881 -1420 ( phase) 8.407852 0 219 1 5 A1`65350 -1311 (of the ser) 1.075714 0 312 2 9 A1`65662 -1311 (vers\325 key shar) 1.075714 0 451 2 13 A1`651113 -1311 (es which is done perio) 1.075714 0 750 4 21 A1`651863 -1311 (dically) 1.075714 0 222 0 6 A1`652079 -1311 (.) 1.075714 0 21 0 0 A1`65350 -1203 (The signature is generated in a distributed fashion) 9.715973 0 1750 7 50 A1`65350 -1095 (fr) 1.259506 0 51 0 1 A1`65401 -1095 (om the shar) 1.259506 0 400 2 10 A1`65801 -1095 (es of the key) 1.259506 0 422 3 12 A1`651217 -1095 (.  Mor) 1.259506 0 208 2 5 A1`651426 -1095 (eover) 1.259506 0 185 0 4 A1`651607 -1095 (, it has to hold) 1.259506 0 493 4 15 A1`65350 -986 (that despite pr) 9.608444 0 505 2 14 A1`65855 -986 (oactivization of the signing key) 9.608444 0 1089 4 31 A1`651937 -986 (, the) 9.608444 0 162 1 4 A1`65350 -878 (signature on a message ) 11.392944 0 827 4 22 A1`65/AC 200 200 w1`651177 -878 (m) 0 0 60 0 0 A1`65/AF 200 200 w1`651237 -878 (, computed under any of) 11.392944 0 862 4 22 A1`65350 -770 (the representations of the key is the same. The) 14.582916 1.358047 1750 8 46 A1`65350 -661 (scheme withstands attackers that eventually break) 11.807983 0 1750 5 48 A1`65350 -553 (into all servers, as long as only a limited number) 14.487579 0 1750 9 49 A1`65350 -445 (\(say) 13.900421 0 134 0 3 A1`65478 -445 (, half\) of the ser) 13.900421 0 590 4 17 A1`651068 -445 (vers ar) 13.900421 0 234 1 6 A1`651302 -445 (e br) 13.900421 0 141 1 3 A1`651443 -445 (oken into between) 13.900421 0 657 2 16 A1`65350 -336 (two consecutive invocation of the refreshment pro-) 3.217834 0 1750 6 49 A1`65350 -228 (tocol. Proactive solutions for various signature) 14.582916 2.603668 1750 5 47 A1`65350 -120 (schemes have been devised, among them is a solu-) 7.334213 0 1750 8 47 A1`65350 -11 (tion to RSA signatures and to DSS \(Digital Signa-) 5.859238 0 1750 8 48 A1`65350 97 (ture Standard\) signatures. See [21,18,15,14] for more) -2.708374 -0.206665 1750 6 52 A1`65350 205 (details.) 0 0.013245 238 0 7 A1`65350 422 (In order to exemplify an actual proactive signature) 7.094437 0 1750 7 50 A1`65350 530 (scheme, we outline in the Appendix the DSS solu-) 4.391876 0 1750 8 47 A1`65350 639 (tion. It is based on the threshold signature scheme) 7.344391 0 1750 8 50 A1`65350 747 (of [18] combined with [21].) -0.040085 0 914 4 26 A1`65/AA 210 210 w1`65350 964 (Proactive secure communication) -0.062973 0 1190 2 29 A1`65/AF 200 200 w1`65350 1072 (Another cryptographic task where the proactive ap-) 0.179703 0 1750 6 49 A1`65350 1180 (proach seems called for is maintaining authenticated) -2.708374 -0.116577 1750 6 51 A1`65350 1289 (and secret communication among a set of parties.) 12.697906 0 1750 7 47 A1`65350 1397 (Here the parties must keep the integrity and secrecy) 0.165298 0 1750 8 51 A1`65350 1505 (of the relevant keys: shared keys \(such as session) 14.582916 0.144333 1750 8 49 A1`65350 1614 (keys\), private signature and decryption keys, as well) 1.807755 0 1750 7 52 A1`65350 1722 (as the integrity of public keys \(of other parties\).) 0.01973 0 1599 8 50 A1`65350 1939 (It is a standard practice to keep two levels of keys:) 7.289459 0 1750 10 52 A1`65350 2047 (short-lived \324session\325 keys, and long-lived \324master\325) 14.582916 0.968414 1750 5 50 A1`65350 2155 (keys. The \324master) 9.022812 0 603 2 16 A1`65953 2155 (\325 keys ar) 9.022812 0 286 2 8 A1`651240 2155 (e used to perio) 9.022812 0 515 3 14 A1`651755 2155 (dically r) 9.022812 0 280 1 8 A1`652035 2155 (e-) 9.022812 0 65 0 1 A1`65350 2264 (fresh the \324session\325 keys \(e.g. in TLS/SSL\). This pro-) 3.244949 0 1750 8 52 A1`65350 2372 (vides recovery from exposure of the session keys ) 5.794708 0 1675 8 48 A1`65/AF 180 200 w1`652025 2372 (\321) 0 0 75 0 0 A1`65/AF 200 200 w1`65350 2480 (but not of the master keys.) -0.017731 0 893 5 26 A1`65350 2697 (Protecting against the exposure of the master keys is) -0.429779 0 1750 8 52 A1`65350 2805 (consider) 0.403503 0 282 0 7 A1`65632 2805 (ed a har) 0.403503 0 269 2 7 A1`65901 2805 (d pr) 0.403503 0 132 1 3 A1`651034 2805 (oblem; when deemed necessar) 0.403503 0 1015 3 26 A1`652048 2805 (y) 0.403503 0 37 0 0 A1`652079 2805 (,) 0.403503 0 21 0 0 A1`65O1`65N1`65F M1`65/AF 200 200 w1`652300 -2503 (it is achieved via manual master key refresh process,) 0.432327 0 1750 8 52 A1`652300 -2395 (done perio) 14.582916 0.759384 381 1 9 A1`652682 -2395 (dically but infr) 14.582916 0.759384 537 2 15 A1`653218 -2395 (equently) 14.582916 0.759384 297 0 7 A1`653509 -2395 (. Some mecha-) 14.582916 0.759384 540 2 12 A1`652300 -2286 (nisms, most notably ) 0.441772 0 691 3 19 A1`65/AC 200 200 w1`652991 -2286 (perfect forward secrecy) 0.441772 0 718 2 22 A1`65/AF 200 200 w1`653709 -2286 ( [12] \(e.g.,) 0.441772 0 341 2 11 A1`652300 -2178 (implemented by the IP-SEC standard [5]\) provide) 12.444092 0 1750 6 46 A1`652300 -2070 (protection of ) -1.614853 0 455 2 13 A1`65/AC 200 200 w1`652755 -2070 (past ) -1.614853 0 144 1 4 A1`65/AF 200 200 w1`652899 -2070 (session keys from a ) -1.614853 0 646 4 19 A1`65/AC 200 200 w1`653545 -2070 (future ) -1.614853 0 209 1 6 A1`65/AF 200 200 w1`653754 -2070 (exposure) 0 0 296 0 7 A1`652300 -1961 (of the master keys. However) 8.796478 0 986 4 26 A1`653281 -1961 (, this does not pr) 8.796478 0 597 4 17 A1`653879 -1961 (otect) 8.796478 0 171 0 4 A1`652300 -1853 (future session keys from active impersonation at-) 14.582916 0.512512 1750 6 48 A1`652300 -1745 (tacks. Proactive security provides a more complete) 9.066895 0 1750 6 49 A1`652300 -1636 (solution, where exposing a master key does not re-) 7.346924 0 1750 8 49 A1`652300 -1528 (veal either future or past session keys even from ac-) 2.956741 0 1750 9 52 A1`652300 -1420 (tive attackers ) 13.919815 0 500 2 14 A1`65/AF 180 200 w1`652800 -1420 (\321) 0 0 75 0 0 A1`65/AF 200 200 w1`652875 -1420 ( achieving the same effect as the) 13.919815 0 1175 6 32 A1`652300 -1311 (manual key refresh process, at much lower costs.) -0.005341 0 1622 7 47 A1`65/AF 204 200 w1`652300 -1095 (A solution may seem straightforward at first: at each) -2.762558 -0.362747 1750 8 52 A1`652300 -986 (refreshment phase, each party will choose a new) 14.007309 0 1750 7 46 A1`652300 -878 (pair of public and private keys, distribute the new) 6.643112 0 1750 8 50 A1`652300 -770 (public key to other parties \(signed using the old) 14.611694 0 1750 8 48 A1`652300 -661 (secret key\), receive new public keys \(signed\) from) 5.931992 0 1750 7 49 A1`652300 -553 (each other par) 1.625534 0 499 2 13 A1`652799 -553 (ty) 1.625534 0 66 0 1 A1`652858 -553 (, and then use the new public keys) 1.625534 0 1192 7 33 A1`652300 -445 (to agr) 2.220398 0 198 1 5 A1`652498 -445 (ee on new shar) 2.220398 0 519 3 13 A1`653017 -445 (ed keys. However) 2.220398 0 606 2 15 A1`653618 -445 (, an intr) 2.220398 0 280 2 8 A1`653899 -445 (uder) 2.220398 0 151 0 3 A1`652300 -336 (who also controls the communication links can suc-) -2.762558 -0.355362 1750 7 49 A1`652300 -228 (cessfully ) 0.234207 0 305 1 9 A1`65/AC 204 200 w1`652605 -228 (impersonate ) 0.234207 0 404 1 11 A1`65/AF 204 200 w1`653008 -228 (an attacked party by sending a) 0.234207 0 1042 5 29 A1`652300 -120 (fake public key on its behalf. Mor) 8.519684 0 1200 6 33 A1`653500 -120 (eover) 8.519684 0 189 0 4 A1`653684 -120 (, if the at-) 8.519684 0 365 3 11 A1`652300 -11 (tacker broke into two machines, it can select fake) 6.075027 0 1750 8 49 A1`652300 97 (public keys for both of them and thereby perma-) 11.654617 0 1750 8 46 A1`652300 205 (nently \324insert\325 itself between the two parties. This) 7.268997 0 1750 7 51 A1`652300 314 (way the attacked parties lose their ability to authen-) -2.762558 -0.309708 1750 8 53 A1`652300 422 (ticate each other) -2.197327 0 576 2 16 A1`652871 422 (, ) -2.197327 0 40 1 1 A1`65/AC 204 200 w1`652912 422 (even long after the intr) -2.197388 0 709 4 23 A1`653620 422 (uder lost con-) -2.197388 0 430 2 13 A1`652300 530 (trol of the machines) -0.050903 0 620 3 19 A1`65/AF 204 200 w1`652920 530 (.) 0 0 21 0 0 A1`65/AF 200 200 w1`652300 747 (These and additional problems are solved using the) 3.740494 0 1750 7 49 A1`652300 855 (following idea [9]: The parties will hold shares of a) 6.225433 0 1750 9 52 A1`652300 964 (proactive signature scheme \(such as the ones de-) 14.582916 0.263794 1750 7 47 A1`652300 1072 (scribed under ) 4.809372 0 482 2 13 A1`65/AC 200 200 w1`652782 1072 (Proactive signatures) 4.809372 0 627 1 19 A1`65/AF 200 200 w1`653409 1072 (\). The correspond-) 4.809372 0 641 2 17 A1`652300 1180 (ing verification key will be held by all parties in an) 4.231674 0 1750 10 53 A1`652300 1289 (unmo) 6.580002 0 195 0 3 A1`652495 1289 (difiable memor) 6.580002 0 513 1 13 A1`653009 1289 (y \(e.g., a ROM or a privileged) 6.580002 0 1041 6 29 A1`652300 1397 (memory address\). Next, in each refreshment phase,) 4.401199 0 1750 6 48 A1`652300 1505 (each party will obtain a ) 5.009842 0 837 5 24 A1`65/AC 200 200 w1`653137 1505 (certificate) 0 0 301 0 10 A1`65/AF 200 200 w1`653438 1505 (, signed jointly by) 5.009842 0 612 3 18 A1`652300 1614 (the parties using the proactive signature scheme, for) 0.16275 0 1750 7 52 A1`652300 1722 (the authenticity of its newly chosen public keys.) 14.582916 0.589325 1750 7 48 A1`652300 1830 (\(The certificate may read:) 5.624588 0 891 3 25 A1`65$1 tsi^65%%IncludeResource: font Courier/AH /|______Courier T /Courier x1`65/$1 bmt^65/AH 180 180 w1`65T g`650 0 0 (Black) 1 _rgb d`653191 1830 ( the public key of) 12.150787 0 859 4 17 A1`652300 1939 (party ) 3.383789 0 273 1 5 A1`65$1 tsi^65%%IncludeResource: font Courier-Oblique/AI /|______Courier-Oblique T /Courier-Oblique x1`65/$1 bmt^65/AI 180 180 w1`65T g`650 0 0 (Black) 1 _rgb d`652573 1939 (P) 0 0 45 0 0 A1`65/AH 180 180 w1`652618 1939 ( at phase ) 3.383636 0 460 3 9 A1`65/AI 180 180 w1`653079 1939 (t) 0 0 45 0 0 A1`65/AH 180 180 w1`653124 1939 ( is \311 ) 3.383636 0 280 3 5 A1`65/AF 200 200 w1`653404 1939 (\) These certificates) 1.566269 0 646 2 19 A1`652300 2047 (will be used by the parties to authenticate the newly) -0.66684 0 1750 9 52 A1`652300 2155 (received public keys of other parties.) 0.035156 0 1226 5 37 A1`652300 2372 (W) 9.363022 0 83 0 0 A1`652379 2372 (e r) 9.363022 0 95 1 2 A1`652474 2372 (emark that the above sketch is ver) 9.363022 0 1213 6 33 A1`653687 2372 (y r) 9.363022 0 95 1 2 A1`653781 2372 (ough; it) 9.363022 0 269 1 7 A1`652300 2480 (omits many important details, to be found at [9]. \(For) -2.708374 -0.356934 1750 9 53 A1`652300 2589 (instance, one has to mo) 4.644363 0 817 4 22 A1`653117 2589 (dify the pr) 4.644363 0 356 2 10 A1`653474 2589 (oactive signatur) 4.644363 0 539 1 15 A1`654013 2589 (e) 4.644363 0 37 0 0 A1`652300 2697 (scheme to withstand unauthenticated channels in) 13.561676 0 1750 5 46 A1`652300 2805 (the first place.\)) 0.009766 0 511 2 16 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 -2503 (Another) 0 -0.013779 282 0 6 A1`654350 -2395 (cr) 0 -0.01445 63 0 1 A1`654415 -2395 (yptographic) 0 -0.01445 424 0 10 A1`654350 -2286 (task where) -0.097534 0 398 1 9 A1`654350 -2178 (the pr) -0.006226 0 209 1 5 A1`654558 -2178 (oactive) -0.006226 0 250 0 6 A1`654350 -2070 (appr) 0 -0.021942 168 0 3 A1`654517 -2070 (oach) 0 -0.021942 167 0 3 A1`654350 -1961 (seems called for) 0.011887 0 571 2 15 A1`654350 -1853 (is maintaining) 0.135269 0 500 1 13 A1`654350 -1745 (authenticated) 0 -0.010925 478 0 12 A1`654350 -1636 (and secret) -0.17041 0 363 1 9 A1`654350 -1528 (communication) 0 0.009644 531 0 12 A1`654350 -1420 (among a set) -0.003403 0 439 2 10 A1`654350 -1311 (of par) -0.203339 0 216 1 5 A1`654569 -1311 (ties.) -0.203339 0 143 0 4 A1`65O1`65N1`65F M1`65/AD 161 170 w1`654355 748 (Pr) 0.166321 0 75 0 1 A1`654429 748 (oactive security) 0.166321 0 545 1 15 A1`654355 856 (pr) 0.196732 0 76 0 1 A1`654430 856 (ovides a) 0.196732 0 297 1 7 A1`654355 965 (more complete) -0.037949 0 522 1 12 A1`654355 1073 (solution, where) 0.10112 0 547 1 14 A1`654355 1181 (exposing a) 0.182236 0 393 1 9 A1`654355 1290 (master key) 0.021927 0 397 1 9 A1`654355 1398 (does not reveal) -0.076294 0 546 2 14 A1`654355 1506 (either future or) 0.064209 0 533 2 15 A1`654355 1615 (past session keys) -0.066177 0 616 2 16 A1`654355 1723 (even fr) 0.095184 0 248 1 6 A1`654602 1723 (om active) 0.095184 0 340 1 8 A1`654355 1831 (attackers [\311]) 0.03688 0 462 1 12 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 6 6%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`6572 -73 237 562 -237 -489 1.805556 -1.808219 -4265 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`65-4221 3053 (6) 0 0 37 0 0 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 -4194 2817 -4194 -2567 F jbd^65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4900 3053 (CR) 0 16.086365 105 0 1 A1`65-4797 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65-4050 3053 (S P R I N G   1 9 9 7  ) 7.445572 1.841431 746 13 22 A1`65T g`650 0 0 (Black) 1 _rgb d`65-3304 3053 ( \321   T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S) 7.445709 1.841431 2954 52 91 A1`65O1`65null 0 _paper b`65null null null a`65F yy`652 0 2 Qy65-4316.667 -1630 @m65-4316.667 158.333 -4100 158.333 -4100 -1630  3 yy^65@cp65@fp65r2`65 yyq6517 -8 257 501 -257 -493 8.352942 -8.375 -1650 537 F kHu$65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W%%CreationDate: 4/26/94 5:20 PM%%BoundingBox: 257.6375 493.0625 273.4625 500.2375%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin257.6375 493.0625 273.4625 500.2375 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsuutrue eomodetrue fhsetspreadallow267.9625 496.8125 m268.9875 497.9875 L268.1875 498.7875 L261.9125 498.7875 L261.9125 499.4125 L261.3875 499.4125 L261.3875 499.8875 L261.3875 500.0375 261.1125 500.2375 260.9625 500.2375 C258.1125 500.2375 L257.9125 500.2375 257.6375 499.8875 257.6375 499.7625 C257.6375 495.5625 L257.6375 495.4125 257.9125 495.0875 258.1125 495.0875 C260.9625 495.0875 L261.1125 495.0875 261.3875 495.2875 261.3875 495.4125 C261.3875 495.9125 L261.9125 495.9125 L261.9125 496.5625 L262.2125 496.5625 L263.0625 497.3375 L263.5125 496.8875 L264.4625 496.8875 L264.6125 497.0625 L265.5125 497.0625 L265.7375 497.2625 L266.5875 497.2625 L267.1125 496.8125 L267.9625 496.8125 L[0 0 0 1] kafn269.1875 493.8875 m269.7125 493.8875 L269.7125 493.4125 L269.7125 493.2875 269.9875 493.0625 270.1125 493.0625 C272.9875 493.0625 L273.1875 493.0625 273.4625 493.4125 273.4625 493.5375 C273.4625 497.7375 L273.4625 497.8875 273.1875 498.2125 272.9875 498.2125 C270.1125 498.2125 L269.9875 498.2125 269.7125 498.0125 269.7125 497.8875 C269.7125 497.4125 L269.1875 497.4125 L269.1875 496.7375 L268.6125 496.7375 L267.9875 495.9375 L267.1375 495.9375 L266.6125 496.3875 L265.7625 496.3875 L265.5375 496.1625 L264.6625 496.1625 L264.4875 495.9875 L263.5625 495.9875 L263.0875 496.4375 L261.9875 495.3375 L262.7875 494.5375 L269.1875 494.5375 L269.1875 493.8875 L269.1875 493.8875 LfnUUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 192 200 w1`65-4050 -2503 (Architectural design and implementations) -0.036575 0 1741 3 39 A1`65/AF 198 200 w1`65-4050 -2395 (The security of a proactive solution relies heavily) 14.43721 0.225891 1750 7 50 A1`65-4050 -2286 (upon its correct architecture and integration with the) -2.681305 -0.290619 1750 7 53 A1`65-4050 -2178 (existing, non-pr) 12.847504 0 544 1 15 A1`65-3506 -2178 (oactive, operating system. W) 12.847504 0 1002 3 27 A1`65-2507 -2178 (e out-) 12.847504 0 207 1 5 A1`65-4050 -2070 (line a plausible architectural design of a proactive) 14.097 0 1750 7 51 A1`65-4050 -1961 (system \(this is the design of IBM Resear) 9.1828 0 1390 7 39 A1`65-2660 -1961 (ch\325) 9.1828 0 101 0 2 A1`65-2563 -1961 (s pr) 9.1828 0 126 1 3 A1`65-2437 -1961 (oto-) 9.1828 0 137 0 3 A1`65-4050 -1853 (type\). The design does not view the pr) -0.401962 0 1280 7 37 A1`65-2770 -1853 (oactive mo) -0.401962 0 368 1 9 A1`65-2401 -1853 (del) -0.401962 0 101 0 2 A1`65-4050 -1745 (as series of pr) 14.43721 0.108505 482 3 14 A1`65-3568 -1745 (otocols but, rather) 14.43721 0.108505 642 2 18 A1`65-2930 -1745 (, as a security en-) 14.43721 0.108505 630 4 18 A1`65-4050 -1636 (hancement of the operating system which transforms) -2.288162 0 1750 6 49 A1`65-3050 -1528 (it into a) 14.437073 1.705261 310 2 8 A1`65/AA 198 200 w1`65-2740 -1528 ( proactively) 16.044693 1.89505 440 1 11 A1`65-3050 -1420 (secured system) 16.044525 1.308929 552 1 13 A1`65/AF 198 200 w1`65-2498 -1420 (. The) 14.437088 1.177811 198 1 4 A1`65-3050 -1311 (design also supports) 14.43721 3.478668 750 2 19 A1`65-3050 -1203 (proactive implementa-) -2.681305 -0.271606 750 1 20 A1`65-3050 -1095 (tion of various mecha-) 0.309875 0 750 3 21 A1`65-3050 -986 (nisms such as encryp-) 11.045135 0 750 3 20 A1`65-3050 -878 (tion, signatures, data-) 14.43721 0.092972 750 2 22 A1`65-3050 -770 (base maintenance and) 3.928986 0 750 2 19 A1`65-3050 -661 (other multiparty com-) 6.255508 0 750 2 20 A1`65-3050 -553 (putations.) 0 -0.005936 332 0 9 A1`65/AF 200 200 w1`65-3050 -336 (Figure 1 schematically) 0.244141 0 750 2 21 A1`65-3050 -228 (depicts the integration) -2.708374 -0.36319 750 2 22 A1`65-3050 -120 (with the operating sys-) -2.708374 -0.346436 750 3 22 A1`65-3050 -11 (tem. The) 14.582825 3.705261 354 1 7 A1`65/AA 200 200 w1`65-2696 -11 ( proactive) 16.206482 4.117737 396 1 9 A1`65-3050 97 (extension ) 16.206482 0.952652 382 1 9 A1`65/AF 200 200 w1`65-2668 97 (consists of) 14.582825 0.857208 368 1 10 A1`65-4050 205 (two parts: the proactive program and its constants.) 7.094437 0 1750 7 50 A1`65-4050 314 (The underlying assumption is that ) 9.710068 0 1222 5 33 A1`65/AC 200 200 w1`65-2828 314 (the program and) 9.710388 0 528 2 14 A1`65-4050 422 (its constants are protected against any malicious manipu-) -2.708374 -0.094131 1750 7 56 A1`65-4050 530 (lation) 0 0 176 0 5 A1`65/AF 200 200 w1`65-3874 530 (; the rest of the memory space may be subject) 5.784637 0 1574 9 44 A1`65-4050 639 (to any type of attack. This requirement must be ad-) 2.680954 0 1750 9 50 A1`65-4050 747 (dressed by any implementation that adopts the sug-) 3.11853 0 1750 7 49 A1`65-4050 855 (gested architecture. It may be implemented either) 12.159256 0 1750 6 48 A1`65-4050 964 (by some special hardware, or by an extension of the) 2.149734 0 1750 9 50 A1`65-4050 1072 (operating system\325) 1.833908 0 582 1 16 A1`65-3472 1072 (s ker) 1.833908 0 157 1 4 A1`65-3315 1072 (nel to suppor) 1.833908 0 443 2 12 A1`65-2872 1072 (t this security r) 1.833908 0 507 3 16 A1`65-2365 1072 (e-) 1.833908 0 65 0 1 A1`65-4050 1180 (quirement.) 0 0.001892 368 0 9 A1`65-4050 1397 (The) 0 3.860641 150 0 2 A1`65/AA 200 200 w1`65-3899 1397 ( proactive program) 16.206406 4.290207 758 2 17 A1`65/AF 200 200 w1`65-4050 1505 (should first provide a tool-) 4.955933 0 908 4 27 A1`65-4050 1614 (kit consisting of communi-) 1.169128 0 908 3 25 A1`65-4050 1722 (cation and cryptographic) 14.582916 1.611465 908 2 23 A1`65-4050 1830 (primitives which are) 14.582916 9.980408 908 2 19 A1`65-4050 1939 (needed to implement any) 14.582916 0.278351 908 3 22 A1`65-4050 2047 (proactive algorithm. In ad-) 0.477417 0 908 3 26 A1`65-4050 2155 (dition, it should be able to) 3.940338 0 908 5 27 A1`65-4050 2264 (support multiple instances) 12.261658 0 908 2 25 A1`65-4050 2372 (of proactive applications) 14.582916 2.120758 908 2 24 A1`65-4050 2480 (r) 14.582916 0.560623 28 0 0 A1`65-4022 2480 (unning concur) 14.582916 0.560623 515 1 12 A1`65-3507 2480 (r) 14.582916 0.560623 28 0 0 A1`65-3479 2480 (ently) 14.582916 0.560623 174 0 4 A1`65-3311 2480 (. An) 14.582916 0.560623 169 1 3 A1`65-4050 2589 (essential component of) 14.582916 4.84375 908 2 21 A1`65-4050 2697 (such a pr) -0.352371 0 300 2 8 A1`65-3750 2697 (ogram is a mo) -0.352371 0 464 3 12 A1`65-3285 2697 (dule) -0.352371 0 143 0 3 A1`65-4050 2805 (responsible for refreshing) 14.582916 1.481735 908 2 25 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65-2100 -2503 (the on-going proactive tasks of the system. A picto-) 1.574158 0 1750 8 51 A1`65-2100 -2395 (rial view of a plausible proactive program, which sup-) -2.708374 -0.406509 1750 8 53 A1`65-2100 -2286 (ports proactive signatures and proactive secure com-) -1.329178 0 1750 6 51 A1`65-2100 -2178 (munication, is depicted in Figure 2.) -0.008957 0 1192 5 35 A1`65/AA 210 210 w1`65-2100 -1961 (Implementations) 0 0.012207 612 0 14 A1`65/AF 200 200 w1`65-2100 -1853 (W) 9.062042 0 83 0 0 A1`65-2021 -1853 (e ar) 9.062042 0 132 1 3 A1`65-1890 -1853 (e awar) 9.062042 0 224 1 5 A1`65-1665 -1853 (e of thr) 9.062042 0 263 2 7 A1`65-1402 -1853 (ee implementation ef) 9.062042 0 735 2 19 A1`65-667 -1853 (for) 9.062042 0 92 0 2 A1`65-574 -1853 (ts that) 9.062042 0 224 1 6 A1`65-2100 -1745 (ar) -2.708374 -0.072021 65 0 1 A1`65-2035 -1745 (e cur) -2.708374 -0.072021 161 1 4 A1`65-1874 -1745 (r) -2.708374 -0.072021 27 0 0 A1`65-1847 -1745 (ently under way) -2.708374 -0.072021 530 2 14 A1`65-1322 -1745 (. In IBM Resear) -2.708374 -0.072021 523 3 14 A1`65-800 -1745 (ch, we imple-) -2.708374 -0.072021 450 2 12 A1`65-2100 -1636 (ment a proactive-security enhancement application) 2.568497 0 1750 4 48 A1`65-2100 -1528 (based on the architecture described above [23]. Aside) -2.708374 -0.506317 1750 7 52 A1`65-2100 -1420 (fr) 14.157272 0 51 0 1 A1`65-2049 -1420 (om the basic mo) 14.157272 0 595 3 14 A1`65-1453 -1420 (dules, it is intended to initially) 14.157272 0 1103 5 33 A1`65-2100 -1311 (implement a pr) -2.329453 0 509 2 13 A1`65-1591 -1311 (oactive DSS Signatur) -2.329453 0 722 2 19 A1`65-869 -1311 (e Mo) -2.329453 0 171 1 3 A1`65-697 -1311 (dule based) -2.329453 0 347 1 9 A1`65-2100 -1203 (on [18,21], and a secur) 14.582916 0.948898 839 4 22 A1`65-1261 -1203 (e communication mo) 14.582916 0.948898 764 2 17 A1`65-496 -1203 (dule) 14.582916 0.948898 146 0 3 A1`65-2100 -1095 (based on [9]. This application could be used to en-) 6.234482 0 1750 9 50 A1`65-2100 -986 (hance general security management systems. Sandia) 0.227859 0 1750 5 48 A1`65-2100 -878 (National Laboratories [20] has preliminary imple-) 14.582916 0.184372 1750 5 48 A1`65-2100 -770 (mentations of Proactive DSS, based on research done) -2.708374 -0.623413 1750 7 50 A1`65-2100 -661 (by [18], and Proactive RSA, based on on-going re-) 7.013779 0 1750 8 48 A1`65-2100 -553 (search by Frankel, et. al. The implementations are) 8.722 0 1750 7 49 A1`65-2100 -445 (completely flexible with r) -2.708374 -0.219879 849 3 25 A1`65-1251 -445 (egar) -2.708374 -0.219879 138 0 3 A1`65-1113 -445 (d to the number of par) -2.708374 -0.219879 738 5 21 A1`65-378 -445 (-) -2.708374 -0.219879 28 0 0 A1`65-2100 -336 (ticipants involved in the protocol within the param-) -2.229172 0 1750 7 51 A1`65-2100 -228 (eters of the particular algorithm. Sandia sees the ini-) -1.894592 0 1750 8 54 A1`65-2100 -120 (tial application of proactive protocols in the areas of) -1.040115 0 1750 8 54 A1`65-2100 -11 (multilateral international treaties and distributed) 14.582916 0.798645 1750 4 50 A1`65-2100 97 (cer) 14.582916 0.343231 103 0 2 A1`65-1997 97 (tification authorities. However) 14.582916 0.343231 1079 2 30 A1`65-923 97 (, components of) 14.582916 0.343231 573 2 14 A1`65-2100 205 (the protocols \(i.e., secret-sharing mechanisms\) have) -0.724274 0 1750 5 51 A1`65-2100 314 (proven valuable to a wide variety of applications. A) 1.541107 0 1750 8 51 A1`65-2100 422 (thir) 0.256851 0 125 0 3 A1`65-1975 422 (d implementation is the plan of a DARP) 0.256851 0 1370 7 37 A1`65-612 422 (A grant) 0.256851 0 262 1 6 A1`65-2100 530 (project [4].) -0.143219 0 365 1 11 A1`65/AB 196 200 w1`65-2100 747 (Acknowledgments) 0 0.003845 790 0 14 A1`65/AF 200 200 w1`65-2100 855 (W) 13.138062 0 83 0 0 A1`65-2021 855 (e wish to thank Shai Halevi and T) 13.138062 0 1256 7 32 A1`65-774 855 (al Rabin for) 13.138062 0 424 2 11 A1`65-2100 964 (their comments and contributions in writing earlier) 2.437958 0 1750 6 50 A1`65-2100 1072 (versions of this manuscript, and to Hugo Krawczyk) 6.716614 0 1750 7 48 A1`65-2100 1180 (for his useful r) 0.014297 0 475 3 15 A1`65-1625 1180 (emarks that impr) 0.014297 0 574 2 15 A1`65-1052 1180 (oved the paper) 0.014297 0 500 2 13 A1`65-557 1180 (.) 0.014297 0 21 0 0 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb b`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`65F yy`654 0 1000 0 Qy65-2990.5 1276.167 @m65-2990.5 2698 -329.5 2698 -329.5 1276.167  3 yy^65@cp65@fp65r2`65 yyq65null 0 _paper b`65F yy`654 0 1000 0 Qy65-2998 1263.667 @m65-2998 2690.083 -339.917 2690.083 -339.917 1263.667  3 yy^65@cp65@fp65r2`65 yyq650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb b`65F yy`654 0 1000 0 Qy65-4795.5 -1467.583 @m65-4795.5 -52 -3193.667 -52 -3193.667 -1467.583  3 yy^65@cp65@fp65r2`65 yyq65null 0 _paper b`65F yy`654 0 1000 0 Qy65-4803 -1473 @m65-4803 -60.333 -3201.167 -60.333 -3201.167 -1473  3 yy^65@cp65@fp65r2`65 yyq65168 -148 0 148 0 0 7.5 -7.5 -4632 -211 F kHu$65i2`65t1`65%%BeginFont: Futura-Book%!PS-AdobeFont-1.0: Futura-Book 001.000%%CreationDate: Tue Jul  7 14:04:15 1987%%VMusage: 1264 26929% Copyright (c) 1987 Fundicion Tipografica Neufville S. A. This record % material and the data recorded thereon is the property of Fundicion % Tipografica Neufville S. A. and Adobe Systems Incorporated, or its % licensors, and may not be reproduced, used, displayed, modified, disclosed % or transferred in any manner without the express written approval of % Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated. % Futura is a registered trademark of Fundicion Tipografica Neufville S. A.FontDirectory/Futura-Book known{/Futura-Book findfont/UniqueID get8835 eq{save true}{false}ifelse}{false}ifelse11 dict begin/FontInfo 10 dict dup begin/version (001.000) readonly def/Notice (Copyright (c) 1987 Adobe Systems Incorporated. All rights reserved.Futura is a registered trademark of Fundicion Tipografica Neufville S. A.) readonly def/Copyright ( Copyright (c) 1987 Fundicion Tipografica Neufville S. A. This record material and the data recorded thereon is the property of Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated, or its licensors, and may not be reproduced, used, displayed, modified, disclosed or transferred in any manner without the express written approval of Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated. ) readonly def/FullName (Futura Book) readonly def/FamilyName (Futura) readonly def/Weight (Medium) readonly def/ItalicAngle 0 def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 75 defend readonly def/FontName /Futura-Book def/Encoding StandardEncoding def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/UniqueID 8835 def/FontBBox{-161 -293 1178 1056}readonly defcurrentdict endcurrentfile eexec4D463ADE87AE888B22F6B561B00126A70AF913C4319DB42E911ABE9C2BE086060902DE489F524B57A500225D0AC65341B4FA79E0D98DD94DD37BE563B6B6DE3A6CB6BD0EAEAC20791DDD6F5296CB664FD933308F8AEE54D077B23C0904427067D71D97D612D88446AD546945D57862C28EE582075308CB568A6D428DA55A1931B60AF68E4710846BFEA133DD8FBE4A782C75DDC8C1B05CB48D8C931590554B102EB3AF9D1E3024A5D86AB74F1112D40B2F0A812C498D3491B6789630CF52EC4B66D6AA04F12061718B290AD764CFE37489F3C4F87CD294F60D75943AC2D84D4B093D2E7D58FB675812A4F819622763524E95A6EB1130A87765BD4AB9E3E120D261511BFCB9199A39A8F544166FB8593C471018C7BDD98BD4EFD9BFB938303CB27C0F5335A9744BDB785A0A57FC8E522BF16E700A1CF1C41F63150E04A8E13B3F1BFEF3537A0CDFFDD1C7F7E250BA2BF3C94CBCE10DE13D54680BFB9BB6D0F73F0BBA016FF6E19B4014C1F02F83035A53B9711EEFD967BB69D0FECC7CD159649A9B9D4D7F3FD34D1E1FC336D5DA9A75200F9B11795DD8D35DEAB8DC31E342E91F034EF0C8F0D245DA2BC4A17D21619FCF4AA48A182EC3DBD06FFF84456F02DEF87B1FE130519ECE37F985FD0DE7E97151ED989A5C2D0137DAA7077BBDB96706650EAE7FDBAA303ABDFFB352EDA2025F66BF2B02B02995B42861B43656D79722228D0C795175EF2AC056669E55438AF10CC26D5D60A150E2D132DF641A197BD6C103EA3FAA7BC7A88C6B4A890B8C5A18F8D72F69AEC46BB6316134331E0835283C7DE1F2E8729F6B81ABCED2EE3B19214C4C1C5A574157B83472F3CBC9BCD54DEC027C157394C3F4A448CCEC378A6C4C039C437B2A114DF27B7E94A7F9ED82E4EC6EA830D461E089B3B65546A669716643C3AFA00AF984CB7A55D61AEAFEC0836FE87B8813648BA359C566D92DC1EE1ADBFB9EDD6B3401E7E700C67060650FB2892F85FED8D76EA9F42BFA29CF154F27BC027F7069D49AC4B6D1433EAE00EA035FD288B38AF16CC710BDCE6BCD498CB7F7CD9532B5F78E841F7A28AA85F0333AB2A3565C12E22DD1F002AB7752ECD7D6A560369CDA2B146A6F032307814F82AD32CEC56BC98ED4C6B7B40C3CD802F65F0FC0A519F96A172100B63263B3E5FB630870B3C02419A12D185BFEA7D30E5A0DA633C9F8CF05AB1EF444D983D25F1494D7C8ED25F6E528BA1C105D198E6BC25DC68C8E35BD0E2CB63AE27676F645C7119907D7922C0B5972DA1EE972B70F484269906790BAA2D6C798A878E0EB284FB3A5867453FD59607B76EC1CFF668C536B67CBA56E5549452985C39196E47B0C8B9FB11C30F7EA5473DE597E6F5A355CEFE7CA1D0EFDBCB9C7D0E592543A4151CE39F64AB10348D1BD3368F8460900D1B8DC0452696D3B038E4FF92F4273B2A2CAEB37050E53271433C11DD8C1E810A8CDF971FDCEE18E999F817D4A5172C3251BF654E74DC1322EFB44F4C18CA8E3000611D072F7D2C7D3DD4C0BD8F9FAF4D2F4362F1B75408E29138A98A95DFAF4F8A5E5F50413D9E410A7475A3BC84094B141EA21F0C965AC1D55C49645F9E72144E2929833C6D96B3C22160703464E323D0FA44BD958B285DEA605823DF368BEF35A304459E849B4FA578CFA9FA5C47CB4437F16010FFD5ABA3D4F90ACDCF08F2838AC00AC1925718581AA727BA0E5B100C3FCDF87826626BF0CEF7E51C44BB8C5CCFC80A21EDE82E432B9DA7F948B6A40B5069C62E68CA7CC2262C1000DF039E3CDF8AAE044004222042E0DA763859F5CCAEA726164FFFE081085AFA78A9C4D98976209F2AF215E5C2D6B1CC9B9093E1F9990481AF75EF3E36778C4287BFD07B90A0251F542F5D0E28BC5634D4AB8E0E3B1F8559C689830CEB0B6B2E327F0664F236EB82368A0635F4315A63432068FC365A56A0C65C8C92C71210CDFF5D331D9210553052C6C9E5D60A1A2165319560FB9C5C653AADE0521788DB0AF181EB0A3CA9CF5CE733FD33A63279418ECE7B4BB2331D975D3A8944CAEB337FCED22460837D950840B413E97E0E6566840F1009680C47B85C95E8944A1ACCF09A5AD3238E2ED31DA6A182BA8A11EE7D94012A848CE495AE3EC6CDD09A85AA6149198F9BB726018D8371A65BFFD99468508FCBB672C99D694611AF63DA94461044C8706DFB41B966F99D220D1970C230FEFAFB5F1682C8957F3161560D6CCC9B7C23E303ACC035634ABC2E35C00A8DC01F117E5F89AD352B8B59A886055DEDF85675E8D8EAB29E9843320157A4BEF273A824218BC80D4A8DB59D35788C00E0D38B163A919490F83B90E6DEC2507AF1A05212A02D331CD9C12B2F55B674EE9D2A6DB04A050A28466AB4540620CDF3172A98CEB9D140E4AABEEB64E6B6435D089AE6B0893B1D7A37898560E47E2DAA5ACCDDD062EC0200691E4A431BE62D6CE2894780648FB690901D964B1C29A76AD21C8971E649ED708E19FF489658A0D7A5D949C7040347F5E08F7769FD1DD27CBE30BBA2732877FA4C71F797F17B86B4C6E8FC8372019A7E2321701F81584C87B5E843169505BFD8FEAB91EC4DE5A8EB4AEA02BDEC80AF7456EDCC4B27C5C38B86320FD69FBB941386CF0E056564521077F2FB332A939ED9D22DF4440A0B4C8CB8DF11AAC0BA2AC438695F28D11EF154A08F4CBE908949314C929ADD3C9C9776BA8DC3DD17B2ACC84D840E70E0D46BDC2AF7BC997AA4C03503F508D85F8F3A4F267CFE4C05C80C49293E18913854F4BC15649EA9A1A0A76E80D87F824EB87357C84877D83EF497E3EB59290CD0F698B1FF814076B64C1A4FDB5449FCA2891C1ABA035E711BC9C48C48B8123B7E3B608D6F0B0C43290B1D3C77E02B6F1FAF93178DB5787DDE56EBF69CC7424783F95544DD18956BE5DD22B51996B3F6790579656B90B87668CB57D5EC84D9757392D2CE8E37729A8A22744D602503F6BC297629DD687A59F0C0CF5F36BE4B3442AF7DFE162AB23E0884B18B912C852D2812F7F35E55B9990052B8D283B498F10A45FDA83C370038D0844BE480F8225CB272DBF43C84B0A1A50B54C5474BFD78A8CD3A9E17C4AB96FF59DCB1FD40B8BECFE085053AC083995248539295284B158F15FA5F41265572FAC114C556A74AD8274FABBC549A3702C4F20BF78ADBD1F18D68664955E10F3432E72837E46BD0A30ACB7ECDEBE35C0C05B1A76B967EE5DAC10842E9CABEC9E35DFB38F5AF6E941E70C6CD99000BDF8C5B29D9DCC10E62F8C915BAC5A91CF97EA1551C18C4F7F14C4DE79092FDF9341AB84D02F79ADBC9EAC8178984F519BECD91201FE4459EBA7E62F4679AA205E03C42B9268C490A80C62300A345EC19983899535301A10F1C35BB179174A77B7F6F68A797401E740E4F9B1D89F3792DBA47FC5A3AA29225540AAB0D3F153A665F1DCEF9BAD40CD897AFF3C98F554868EC3DD9C23282FDC17E6BB291A964234A320DF9CF093615C445987E4379920A0EF96C16D01F686115FD1F58597EDCF89812316E4C4CE83FC769A1745C8BC0C3C119DFCAE79A597A2E9D277C18C381C38869C798B6C6E111EDC95662E8C4CE2AC2088ED1973D3ADFE81CF0C0E2ECE172EA64CE73FEDC907AF6A7E39167A3E1F89438884A15EDEA7099AE2E1416390CD74682A921BA05C812B6C2B6C2DD3F25D1E7F981860C62DC78354CFA3699D4F6CF0D8CAE264A94B8D2B3188A55927B1305C2943D223F94B443FA401FE691D4ADA75B68501F82269B2F78CD6BC2FFD018C984602DDC56B1E883B1E885EABD469778C30F3A78E5935C48391253254B531F13B824524D2851F27FD20A19E2AD4CCF029C2EF6DC0CA5A9C1B61D7224240AEC3F76D8D7CCB53A1C13F03D0756A8D606FAD3FFF55194390094EE5E06F493327F5A4169B06AA7CE95DE14D2F6A13CBC0EB3EACE83903FC185F2A1206B9CD690CCE42C57003DD955C797B68C47FF96539520359368B6AA2B344041B4DF990585122CA36BE96D3DC9D80E75D12FD86BB7CBCBCE16FD94127BE59A200A0CD7C8DDF08A66A0CABD6147CC1E00AD6B856E9BE01A6BA89846BDCB43BFC0A910BEA5F1926DEC6960735465B0D529DEA85554FDCF50AB87853A3949DA62E12FB2E3849909D30FBCE42EC03BEC1EEF28C3539CFDD5E5A890E7E487694CA0186539656BCF941648998B4F567B91B7FC38DA915FE866FF77D6090C513C20C5882C21CC78D6686D8A660AE830F86219A2C0FC15DAB7B7C2D0AD6004EABAAA6E6340B8EB9D26C7918187E6D3C1945A136DED733A325F759A12113C51CFC818E1AB9BDF8AB4CB1E98F7475D49189F1B215B2266E158E29A808BE2D1979E9EE28C3F6723E90E176A34982A641DB65AD2F5346FF9C3AF8D300B3F2158FD9C824E03703313FFEA237639D7D1D3255D7C34500E6296D88CC4BAAE911AD0DA0114B5F98CC3362C274AEC260A416FD06DDF48A5182FC7FF96622317766B17E7849F70A045F6612E8CBD06000C02AE69C59CB0F00D146AF3DA89831F135E36CC4CF8A5CEB8ECD16BB0382A3C637F6E0CCCEE77E280DFEEB51D49F462509C8175B3CADB023B56C2084560CDA3F01F17A4C84A18A410CF73F5A746A0188ACEC038FEE7BC2427DF26052D51F75BF533F4F66EF2F93ED8686EF38F5F341AF2E6D298395F8FF4CC2258867BB4605A689B22E7A37C9A6691333DBA8FDAB161D9B807AE48BF7A5D4F3D745D0BF210C6E79A88A4EC31B0120CDE7FC8E1EFDBB1BDB25E4F0660D6F02A504DE0DA8F4094F24CEB95987A389DEE3AB4E6AFABB5B04B63974D1F569B5A4EC8B3AA794BC8B59C5C25CAE60DF6F2548C15F59D0BB19ADAAB3BD0AD91C2FAE3E55D128FC16FB1EA7B7B1FC976DFEC805BAC62DC1929E1BB1D4C070038E3EAAA9B44128D94550C15949509EC2859C4C3BD4B01384209906E1A67B196C428373B3DF725DA360925DAEB249DF4AB024634981B3D3F63DAA3104FF742F9200B13CCE9A93A095C6F5CBEA2239CA1A051626DA1AAD2A2A97EFB03121CA47A80E9BAEBDA15C57866BD94093D843C41F98E85CD94B24FD7D8118F2BD147086881C303808F04C38E8BD2D551EC1DBF67084872542AFE54BD33205B6737B142AC751AD4631B77CCF35F9457F2404319608B846871301ACCCE38AD5AC609CD324D242E49D304311BAE9695F3FD50A8C8C4E7B91965D025B0CCA80E1D5E48A27A808F307579D89D56A12B8295DB72601D0E63A7A29E21E860D30057EEDBE0DCB0F8A42AD28C711465203FB4EFB4897125470B3D7FF0D82F2E46B4AA685D08A531C450FA70CA29BB03897CFCBB5CA88B7FBB6B105FE0D7D28E5B2E465535AB32B2F2024E7B2094DA04E708A582F81613482C0A51C92D08902F47FF2C7AC7B78E82AFEABFBCD8C1BEF50462F0F5C3412CE834FA0DC4D5888AE0F1C1F51A57C75064B1CE5FEDA50A00999D3A2D34241CF408077B9CAC2AB8F7FA424C98F089E09EF1284944918674C6E9775725A14BD334FF3160E85CF476D0CC6BC2601209D3097CC6EDA985BF1ED9AB637846E1F2D7AA0BDBD451D9043CDABD9965D2CDE7872846F1570C103268E36DACD25AA2BD6774271C6358BDCFD2C56EC6DE2E0F1FBE02CE3A4815403DBE5DA16AD59958E98F0BA57D1DE3E930A2066046EF80E2D3CEC63C6DA7AED62392F339FA713DC60406C4066436388793F7177BD0993A01AED2312CD8C3C67DEE1B50A7BD40A8732306657C5675D8923629A68BDA09135923EC1450F23E334137EED8C0DD3312A0B8421B2A1C590625E93ED6FCC415AC0275A09C2DFF34BD379793DDB9365B9B0B901CC872C13CF6B6C7B0A7B3347BCB821A8F476A0C7FF5670954E2F53100AD51A8EF9CD9C334BD7CF6575FE598D2D1EB6802E520C59376FB18DACAE09DBEBCE7F7B005851C10890A522464417FF9739D387063C61B973EA96FEF28115D6A60D29406853FB9387E07FF1E26457983B1FE455F3ADCDAD1DC27AAD7707516224A7F330D8C2A0F73A0794E469F77B290A010526074A1B919013C2AF1BF06F9AECA362134C3C08CA3AF8837F390A0384C13AA3B5306E4B82371CD5C5B6B943E07EEDF5F6024980D1EE5B2EF74F68854B1340ED62C57529A97654062B6FFB7E5483790A549E19F205E25624AE98845AB9C983C7970BD4695146770E48E423B16DEC343912AA76ED5AA7BAED4215C926AC7E1E20D4BDD206AB5A4B841D2121986E514B470B2F8D79B7291932742C3F48EC23887DF46A56FF6928FF39B56CC7858DC5EE92A6E0C1F291666E26E9D39AC20EEF112653A0C405C55B6413AADE5A392C08D64BDF7C9CC2E504954FAB1B0C8FAF50766272B5A1EE89AF6D33BE15535A16368E1BF9254DFE4C3A856187CB18A8BBAF8607E5C08C20A2D51481850CC4A21DC51EF448ADDB1671089AF3D95E3D7FB7802F3D557ED27871FC6668EF85DDA903DDAAAAEB4BF4BC43D2C03C4E85A392063094363F70FB08ACC8E43F10D96F09568F5F82600521451E893DE10AF1304C3ABB63154B4BE0E75DE4D74D71580B353A540FEE6755B2A7A81694E5C1B64D9F62ED45B29905AB46D4A16866F1A4682FF4B40F520592A454FE402799EC985515E884B967CE6D0214D6C413232D051F68D36D2CEAED66B897EBE1434CF4FA0D31D2B6AD40A8A63C4E3D2E01A4D7D61DC52FB89330011DBCDD0163F358EF82597C3795FEA66CAE82632326C5D8831C5D5F417E306F1EEFB6689A4A682ABF4EB3DF86C0FE44CCCCF1908B1AE69CD76FE081CF2EEF4E486624390173DDBA68324531D2E426AED152E12301D3113B1C1319BEEEF9F155FF8FD0867DCC5F502083F70A084E4530AB96BA76E97F15603FCEF67FC58AB9CC1D26BE608042B09390240719EE170884D702E4C7FFA7A9F2C250F62E6AEFD9D7CCF7EAA9CCE3D3B6D4AB5FE7FE5D7AD4DC41B55601A3EFD258F616D4943AFCA7CD4D1C018E0AB252FFB925BD7D1C5CC16E3537F4F9F528C4F55589D5B59FACD280B8EADDDC66411F0F08B5386FAC3FD779BB3C41C88EC74015C3710BBE819D5EDB1B2283621D78477B8653CF983E8E016D129A597FA6381F31A53F05050D5E848A3B6DDE8E511EB5EBF039A4CE8FF974B6C47729C17072EA95484AF7496AF020AD131E67DC44679B3C60EC19F51A6E783DE3066313976E514621DD618E22E2609C8111B8F33675B408CF2A84BE7FD1656CB6AC044246BAA34AF1FC1E300E2D830D1D819B9A10D9E979790E65BEEC934927CB45977CBD750A839EBF772D33187AF2C5FB28460518B8F6367A26EEF6C10AAB5DF406DC620E4E177A1605B64B73E263B7268849A24A068FA148670AE291812886A9F6EFF55C24E79ECBF64611BAE9695F3FD524F7F1833CAB70D4313BB494453961BE3464E237ABA87462DAF21F44D9366E775F2BDDC95A23718821A9E620BAB39A4F36BB42AC8C9D27D93CEAB7BAB278A3E20BF6C429434929A253CF8009E771A6B808845C634D9A584F40C5846B0B8E6864186EC379E8FE0E4C2847AA5B01EAB740C638DDF0FE606458D20454EE7C3161C1399FE778827222967E3C9FF5EF6E2B4346218915812FE746129B037B005F4B13EC22E160FA6AE060E6EB11AA9E3D993C1F8A613E2BF85650270ECDE4D72D185EED5B9C3A74723346BE617201E7497DDD2667B5B1991ED9A6DA34A77CA29A80D2D4F62DC61D15C9867BDC23F6D241BF54A7546ADE5FA46BD1CC1FFE1C4A5E9CC90538CE931BD077EBCC0A7032864C9916570279F97547AFFA8689FE5213659797E1D65991420940A6DFB4A29A923E34F9241F58A8D5BF580588F82BB10DB530306B7FCA2C0DF1E020790534D09A9BE481AA672B92A5B9F9FF687E96ABDCDEC7CA9B577274F416E063C3FFCFC5D184F43D67B6246167D10EA75B6D83F77678853BE927238838E4A9454D2FCA6D60FB87393FF350ED6595FAE3933A960D0893FFF21520DF82B89E1E17F40DC135825553D3859B9CD11BD2DE2AAB439B7F90C03A06C3823CCE5FCFD0718CD2C29E13BFB46F40D3F813B35EC9B597344822CDE916FC57E25235EFDBF7E51D56C22CF37FCB42BBDFCBBD285F4BA6FCCE8CC8CA80261DEC01E40316B184DC29E0712DBAEE7986E10C2D8C9CBFE02D3C629CAAE7696F248F026BEEEE82F3C7415A516E8460D153A562A9E745D393C9EFBE7596702CF7C9334D329474335FAA847F88919E64E93217607DFA33BA51FC1BF826DF5C6C8E8220DF6D1B05527C53DF91447D18063572C10B233EDADB3703FAFE62FABECA51832C51DD230F4B629DF4105A944185D99F3323786B2B95853BAF9C9E4B4A0037F8B6570DFA16F2AFB747D0CD07162A889D6176951A04739B5EC4D926876A97A17FE233BE055BAE00101AF2FB39602F8055F98A11C1FBF8520733E09B263FB5C9C8C1A9644922DB2F9658531A31B605812E3E72EC44AB75A7EEA7A442A6F098F83A204535F8180E43EE555C73A17B44372E4C019A97434CE7617AC2C11E68ABBC132732902F9FC295AE1E6EF410AC7DEF3FF5117726EF772AB4206EE0A9BB4FD2C34BD0330B995E85FC77A9737D8D3B9530D5DF3D423F05AD1E099EDE198ECAD24B3972A547288B1C652C75634DB8252ED0D327C3CB56DB8B6A1744DCDFEE7B99CD18506B33F9CB8A497A7ACF9D5FB7259887A04F18FE84C2156079A0CF10E9C8F39116E62ADF5EC244EC402964DD19DDF20100E6CB7F3D37C49822AA2FAE9D6D3D74EEF8BB4785408BE7819BEAA49677665A546A84913D461E85BEA745561E23376E753A0BAFF06410D6FDFA6F9A8C24D1A37A556A6F1BD49BC627439B70F2DCE17CD47D7F1EF176FE207BF80909B3BB3B1436AA20421BDB60A25FD41F98B50CCFC0A958C13EDFFEE6BBBA60813CE4754CD2AA3B79B66F930105D9BA2452723426817CA1132FEDFE0CC17C20E5DE7F3C31E880C53332359B8EDE16EF3A50EC14A409EE405B6D1F1369FB8A934F9CA9B2F0132967FD1055553066C63973D277C764EAE56328D0D0BFE8BCD0E5B8C47AA4FE69A8D00BE79D0342454C7D39CB76E57310333728C6991000CBFBA98A6AD1688AAAEF38EBAF4290F2BEF636A387FE5219EB62055945452B71F74AA516C6C507DA5BD9DBC7801FBF39463AF76197956BA8C5830E1D528AF56CB9E5EFD7DBA5E8019285C1C090E82F30E6B8E15BB6DA80436E9BE292FF893A0005213C411E6B47B14AC846075367414E21316565F1E5F136DF6435713A0A698311E75D8358D0395320656F65E9CB7594D16D29DA9B0FACA2A4B438E37C50054BC7145FA6446656F2A1291E57BD0414FC98F94A6B2CA2C483E2048DD98FB48B81906AEBD0BBBA5E9EECE9B3B5FA70075A9224F26963ECAABAF1A04D1EC30EC517F9D4F1206511D012E7ED866D2950B555C11162C958F38EBBA383D194DD2C571B3AC36BF04E145CB30456492D7CE9493C5305E9F738499785B70F54890B970901535E761CED3765856FBEF035A7FE718158AB893D7084D16B9C4E60BBBF81F90FAB07460DEC39F81566CEF7587AF53A92A371461CD8572B3C6EC6D189B02AC7D1FCA5B2A1EE6E4A8283D2FA421799943ADBED7D547224680896600F7B4FF57C58810096DEA7EC6CB9F71D30A24828A1D836A7E18C6CB7DC9AE0A8C791CA3A30221FA022D496FE9C4491A409DB536374C383419DBEB455E3684816E94228130ABE5B0ED19C220C8E4EAA107D6A48A8EC2DC6738652D02E45AFB2A51561472F852A6C685DBA626F4C946F89D6E1CE1481439FEFE49249D129EE07CD397E6C4BB6B99243B968BEAA0E34BBDB390EE0D6D3CB7A2B1AB41C666CC2FA40F4E209039D69116F98DA47018F432C8260A06AC751D8FD3FD63CBF9F3768609525BD879F653BED8863A88F5A67F59E20FB5C8BDFB3F4E2694AA44703BF0BD4BAB688316C87C056F14CF952276EABE8D8D5967C2344F30BABA87AE753ABD6C0BF90953EA64BE5336ED9D789BC7AF573683B84C3C32F02020824535C8170D8224A7E5B16680426A868033C6ED1F230104971CAA464EC35B3FF256D16F6B8E7897EDDA50E717ACAEF64FEB48585BF524974A406FEFE14DEA214419D1AFFD4DA3C50583FA715B1F5929311D6E527F4BF58F674E9CEF5A86BD272DD94EE8372007387C6D4419452B3F27DCF19AD5F7263CE9714F86C69A6FCAF2E36D484C70A7BAC9E006B0E7F2B4633640DA106E59F771063DE5CFAD9E5B178E9115D15E79E128C9DFD2F6ED5F1E5567253A9C4100AFEC85648DE7729BD57A1D47F65F80A21FCA2F95B06073134BAE5BA74CA7022875A32C123FB25422C478BE98D6C45611524AC5B6A5A502E29D7086DF386206F420E2AA68E67ABF0E51F6C89B677D8185F02D13BDEDACFA361929B8B31D3A0D5F6ADF86D9060B86361EAA4D874AFCD8BA2AFC81D3BD4C54B92C4E389699F2B737B2C24B9C59EB60CB49E92171DBFB6120FDED3B9254928079452606B4D14B0FA618F4632871985823B502FF637DDC680AA07CFBB279B1E2B0BE6F0FB317A477015FB4C5B87A0B55713B90886DE062FA1779C61F9A333C41F6497ADE0FA074AB1C3543F5A304D831B15438463F90426960C56297C56F744EDFC20C0E43909698695A7777E1891AC161E1DB2F03E8FC50F73A9E6DBC43A64DF502C9C572600F1FFD449FF3DD4F835E3585CFB22E6E3349C4ECA7BC2D332C1433D1A07DFE864BC918D7B4686EFD28BE0293A9C5CDD2CBF3EAF746F0FFAE9D628F893ED90535FBE000627BFEB3A95CA3C2381B73E8DF7DF8DF65664EAC7FE2BDB184649A17233F116533D96FD61F0FAA6F007EF62E00A8D185483321F4549B3E0E81F097D5F352FE2A719389C60A75CDDB8A6FD80EF7B3D3C1361A0A246653A6ECFDDC16FD1FA67754D8426B3621935AA964F38C00CC9DFF47BEC65DC10D33A76341289AE970D36F5E97592B44215AE56E540438FC03C3C1FC6B0364391C532FEB6DBB9D3DB60119D1931657F827560B60F38D8E37C539B83E01084A8A096568E8BBC2373E3B088B0F3C1018DB3E70A288AF9D30B56BFF1DCFCBE420C7616325E7847E3FBD837BE3955F03123E2CF544ED62F8A8C180B7B9A507E846DEE93974EB21AFED712D9FDA4EFEE1549D8753516BC5C8A2F204BE8AE1D7908473622A8CCA24008EFDB83966D7196647F3B1C630D6B29C3A87A75DD5F8DB26B8A92F4FAF8DD86768CBD9BFCAEC35420A8567FAB42C4108B8423C9DD7CE455BF1467C26F3470028C604C0B8C8CB6A3F930EE1F24B396DF1D6B2FB3F889698694FCEDF90AF7E3FD38F3AF7D2E7333AEB0D8CF7FA1C6C881777FE74E9EF0F9D9C5BA3EB77EF2FC201F5085CAF16CF0D232B99EA13C079879977BF831BC82B9265A89EB6755E172DE3B4BB66C97D6DBD57335C06AB90EECC437371BA62822388E53DC398C6DB0DE48490C6A33D8E2A82EFB58C9114F5EBFF4B7DD61F54A9BAB42A48E33F6679E82E65216F16EFD884E7668ED57F4141977290AB68F2BE40B843FB5CEC1E4D285D23BE97ECA5E87D7F16D9C047B5994CB8E1CF0A4578B8AC3D50C29E22FB522FBE7E9D0517EEFBA1327EF7CC44E4ABD310515F192EE81F1E3EF184D7D0871E3F37455C8B3C4163E8EC66008F6D3ADEAF9E6C25A463578DDC9650CAC5ADDE2F9C6BD1A2183FAB58EF21B1CFFA854A5E24C2C024A45C36423897B081595238B74A9D9B117C79CC48D594DEC24CBC62482DD64F99DCE908566DA665A3833DB943A4DF367538F7E86671E13E2809BFCE8E0E5198EDBAE7DDC819FDA2B08536570ACEC4CD40D83BD9BA460239B8460BDC35708F6494BA0F3B4D41D8726936E3E1D59C694111E279D07F09885505C553BBD9BDB782D3D1F810CB3EB0ABCD7DC1E4DE91A03179C4FCE85E315F57C8E830FA3D9600E72F1F7B05568DB3A4E3CD29D1C2BDF6B916396F692B40062207DA2AD0345C2EF249C14C335528C4F65907592EC8D3C93B34145D9DB07211398E9CF707835994DC559F9B807C235A48CFBCD2B3E5230298C438677D6325AE5357DEB349BDFEEC9AA24BE84304F174E3FD28E9F2812DB3483C57AA31254D88BD6CA7070F27AD4D7D9FD4B8B976CB7BFC3AD648573E0307FDCA927FF62B5CE39622ADA1311DEE6B7FEA2FB0B315D204DD7EC030E797FC3EF048CCCC20F86480C1025BAFBD3A2C6BB97AAABF050F44198CA5A84F50914667346A897400A1C4A3E04E3A7E9F31341C293D6C71BED859FC80E4CA7A84A3A1DFDBCF504C5CC6505EE8902016292B27D22C9631999C21CEDDB4C5DA400FA39515AFDB8C0DC1AA22EBD21FDF64660480D92509EF882643BECC3D7B5376D66C27E491B50ADA298BFCF05A4C11A2F6797D34CD8088736F3F9B954FE126069542365D292BDFB804C13B61EBEE920CD5844ED70964A732BCD016DC7F5795B0CC14EF012B6D470FDFC7278DC387F8D08486686DE8E5211B9714A598263104AD9F5FD966E7BECE9E8AACC1444FED34F9FA3BAF6FBA4790986C3E66BF87E929ABFCAD617C49743AC74526AFA9C4880A196DEFB1BD1E5AE58F0EDBBA54838B55C6F039C32BB93522EC707987125A2488876973F9E6BDE2C01107D570E52B8915A6299472B5A379D211566B7CC1CB44B17247FE6E8ECCFA1C7776605AFF3BED3D48A9E47B1B3786751DFD7CADBB2F8B8BC46CD249068D482DA0D283B11B413D89ED4C8792DCA6BE375E7900BA0AC914D9343D051BA0C3EDF04E7E6B0602D6D59C165FD755443A220A2B854889A78839E3CFD285BECC0E49E00FB97D1B96E805C33A6698FC151A31A42A67829F3F704408BAECD0209F7E09CEBF0F285D7ADC1BF952B3728847BA0CFBE9886AE33E89BA110D73175F2C4FB412DFDB2133A73AD1F309B3DB920CA7494B26595D3E2195C9DD146B379A4C3AFE0114CD707C1356447560E3F2C6282BA40B0E5B2216D44EDDE2A2BD7964AE0C621CB5D2AC511C8AAB804CAAB909216C8528BBE94A37B3ACA86651A79247F0637AE03AD6CB3EB2B4D36B1591A3C0F144731FC950DAE9811061CB1BB41065E8A3385285D9138D616E6B028E7BC7143538D83823BF2FBC366D287FD892AF2792422224D927FEE493B3363CE26D13AB2DB6641525411711867CE6B22C2FC22E334E27C995B8F413734718882DBFFBBFCAA1E53E252E13E94F43550670F013CBE300A8DB50301A585685BF7E0B627E7094C1450E9B5C93075D5AC9F86C1813202A3A84A06A270081D854D497BC357ACACD1EF8B10CCE84CA94D7D25DD36FC9F5BF62D81E7949831004A94522F7A3879FBEFAC994AF6F13DA9D69CC59439FCD2A5611A8420355EC5206DAC450F1C438DC099A79311E96EE92B88DF11D0920C6956645C31883FB634A270A8058D2EE220F17A119C5D1752C66500FB48225C9D02AC595D0CC2156C8C9DCEC2039EE4BC6968AA77F1AFCF4CA7C2707EE6833B305881507C449ED119D16B66DB666A143A8B2E30C66C6D76AD79EDE8F467F0D47EFAFF500399DAED2F4E71A6E37796D3BB7CD3CF0B7BCBFCA8DD49914E1531E5FEBCE9335105B83386207320C838EEE9C38079D3FA9D72D11E04F8C7329A74F6AC4EE068890AA61C36FE671D8BEEA330EBBD55B481D016BFA74AB287B27B2974D1ED84EE42D758631DB3A7ECA2CC67A3B0C74CA929DCCE2CBC14CA1800C11A630E24F3367E0452D69315FC570D76D0F6E0BFE76C9A726006E5F3D4AB6B038C15A43EDDD181DB57BC0141BC70C853E6413DD6E827105656274B8FB8B1AE56B2890080128D7FABA2328BD2186E48F3749539EE5C1A8E5734ECA06F98F8B9A44C0E89054F89355587DC740F50B9336031E0A3306636411A283921712CFD314CC6F831F72AE9787DCB396E2653F3CE586E4E7F1666E5589020E06BD2CD9CCC89BD545065D7BBBD6CCC85D9FF084F5810B79627460ED4BC430085CCE3F86B38A451732ACDA796A7E87423215D8F6836E37F25951F9521CE25C2CCF1A7AA99304D95EF6B911377C40A5CF7D6470F89B0AD2F307CA11650B7CD68900072EF19C0C7DE9665544E7F8F4BD7DD5FDF21E595A6626DF314831CF46E997A0674E4F725D64A6BA3F9A320A44450C2E083B7156B6532A227290B8876EC91941066B041E14DF557F2C4536EBB4DE163B0E5935BD3F9676C8807EB8AC89CC4A6B3D7ED453A542DBA35B326105CB75AF7311B47CDF6AFBC27CB9BCD014D150BDA56EEFC303C2DA6DF655001A1788F64F82A5A504A96DCF7B2BD90E1BC1306B025F469398BA40C649BE2A950086F479758BB9E7FB6D8171A7F46FD4D683E8E935146BD2E6E040E7DE0E3B412F2352C46FBCBA7F07FBF513A4473E9990CBED54AD6764C04E266851B5B92B6735331E78FD1BA14C41248E58213B96A4A67416022193E3C4F988C5F4F74EDE5E7E520A41556C4B932F4597DE37883A7C47CBA0BA4C3B3C9C315275DC9E295067425DA08A7DCBEB617120DD99D175E9E4F987065280B8FE55C063326157B9475E19EFC36FF3DA5C8CE756FC5F201FBA7F2720626946162CF3EF495D12F1520235FA7D553F3E2335B33AA5CDD15B60F59DC8D077DCDCC7DA271961D20FD2CABB84373260B10F81174D1D8E77DD923A32EBA80A6D6D3DAE2645E4CB2BC2D378394B7C9D1C85EDFAD7CB15BF4D3E2155E076C5D0A23E71C3B856DE436BE7BCBDDFE29EB00016C7317C5B8ADD6ADE8532C2F72D588A58E8EE5F9BDFA0FD4F5FE4937667508B65F12A4007639F215104CDEE2E35E2C33ED0B3AF17ABBD7B4CC1DE567AEB84964B6DD0F7D293086EAF4823AB0586133B8B90BC3EC16B618F1292C9737995F59011DCA9B0C715DC3416C742EF72F8064664A08CE2E60D169E9DD9E32FB79639E38DC3F0D628D771EA38FE25D0FEB0725D6A234D583729CC2BEFEBE8F1CB8899F7E0547CE7A31CD86C361C8203664451DFBE1305ABA7E4243E0DEA9052C16F7D650DB6F0DA77D29A73C61577D513A9654E0AF570C730A41C99C501992658D341BF5E53B5A638C4F885FF7F36FBB0C40A035B25AC5C44EBE3511F075A4F679D2E62A6A1A90FFF246A61BEC073E195723A195C4C395F86EB05A9341FFB84F12AABC69C1ED3C7EE07E3883DEB20C70C783BA8B4E6FD710E6ECFF2321638A9A322AE9B1FFADB8FBB6D9668C41F3859D13D37B66FADD1AFB3E078C01D1DB88AED0EAE09A8D8781894B9A4D905480D8796048E65504E61A625E7749C7408AAEFAF0BFB14868486E10390B4130A5894B580CB4A649F68105AEE4F7E3DCC0175EA3738BC8C63033D32586868AFDD84CFD5976D8AF7FC182E0A700BD60A9928C4C87160C1DEAC7FBE4152F566CD39922E9674567ED23D12ED694E465907791D20E3CD56AA05E72DA65C598B95A076A00F35FFDDF8FF7C4C70C1CBE990A60B3A889B6E0C454C892F9EB535B522A176B7ECF2838541F7F3519DDC8E1430F7A871386BBCFFA6F6E5DB8C03815FECFCBC2E0A06382C49DC50552E51D8D702F10620FFEB20ADD2D4D141492AAA9587C58D45970EC1653550D8536A6137854CB1C9A480EDFC1400F669CF2F34E5824BAF22D2F9630A19D600CC9DD8E693390D4B278DC81BD97007C5644B18AE47A0867E1E1F15E5BA8780AEF7C02A2081F8E4B03D84DEFFA910596E0D9E6940BA1CC18D668891F942F9FC2A542CC715F0FABEBC4A953100F5DD4F12FFE220347DF01152138A3B073F73473E96D45DF2C24B41D207057F790584AEF9FF7AF323891369E6B6EAAB7F51EFE1121C521A51D7325DDCBDA0718DC775BCEA5823D72CEA1DCD65E37D6F0E4046BD56C2696F100294388F520FB57434FA622B77D174FD46D572AE8A2414785DCC4E61024832412A86DE93D6F9CA67561BF27B9008F455D86067EE4CB3B0C89A6D5BF8D0E5E9927A1CC721C92EC53F3DD6C31B141E08B3B761EAB43D09B1D5BA16E2F96C29BF4E7BF384C69396404CAFB33465182EB167CE9E15ED814B7C7BADC52CC534C2910DA76B381C55155780509DF69B8F2C8C1AEED5E9215BFD022C498D2746E964C70C51C58F442DAC6993A64B8EEBF1BB017D2783CD37A28172ADCAA105FCD8BA88216BDE6BE8718DA4110D6220A50D5F6E961C9204F83B983D9ADFADF682E4182BCDD21A53757897CB97B5D904631E6C41EE834C4AEFE726F42A6EC8FCC0FAF78B5F14ABBBD5C628D51B280229924E1D4071B449612753E64CEC73D0882996EE9832E41A8DC35B9FD30BACBEF711DFED70E22A955B3E78FFEF78609B0EFEB4855DFF729CCAE28CE351670B75D97549864E1ECACC99E8061565D95C67D07DD25AE357436561FE9247935E513C1A5ED25F21B0D5A6BD24A3367A7D1286A179F138E21C798D7AACA4C58E69EEA6DEE580B62F51ED289CDEED78A64B1D0EA1AAAD4EC57FAB0681F6DE8F35CCCE640B7EDB8A92095F0EDED2B98712CD2ECB65A71FEF082B35D275CBA51682DCEF96746B56B7F04BCBD81CEEE01500BE12C17B79E8A017817543BC58DEFBBC694C795ECAEE592510BEA0E4D8127373FDE6229789797C26C5FB2140C8F00D5D4F06E4354047B0AAB75DC03B8BC4D1AC4D717852D8DCC1FB82021FBEBAD2A237B58239B660558B9BD5C436606517D4CC0A7594C3B992FE47FFDDD05AE1F56E59403BFA2EC3790FB16159C15B374FEC6F986AF5AB20AE2B2D4731ED62F69D38971C2357ABC289694754574460738874C4CC187C9A85133BC33CA62E68AA79238E7425EEDD68945842C660825FB35F7B92AE73BA332FECC659A610B4F5F2A971D844D0F73F05C03B2654FF78246DEFB6E21B5CCE035D847FEABE1FD3CBF0BFBF16E4775FF7D4D6188EC8AD3145205AD39170C19D0FBD6FC776DAA712A5FE25F0AE647106BA8D2D8CAC7C2027178C0EE1498314084C6B594D64C03121646C25773B7DF404CFABB327F698E08C215EE98175503215E45FFFC11FE62EAFAF02B94AF788AF3EC4899A447DC30F665470AC5A55730D136BADDC86640A65C5D8723B4B65C1EDD0CC4771B3C4C23C7DE1A2BA73D453327330F89CFA41855537A3158AE88BB6AB50B6F67439C50C9952D28F3762D94A8D34288C9371D9846B0440D12661D275B067F7B80A6E1702A4F4CBDF4EA38012724CEC4E1DC023DC56CC21D0DB40077AE77573D94DC0DD48BD50CB5BEC68F6033D0027C3D7962F1D3F9FB56025879BD25520D06E024E17BDB22DA3C2B4B97A1A95696C2BC2CB00AE655E938ABA763D32FACAD36DA250F3D5B0D4600C829E154B534BEA69CF11D6E024E79CD8A49256CA07F5507678C61148610180F85F8BF54EDE644F76FC9A901F4A95641C32D84EB75AF70BAD6518D3E46D52BA93F3C2A16A176B3E18AB07FDC4A1B35140D88F5DCCD19FFF4A69B9E12BF29D345ADCFB791AEDFE1EF1B775A691B673FF26C99C6C1E65D331656B70C11CF9917FE290F3F90ADA33583BA955E741AD3D2E09FE40F46A3DF34A9E06865373A8DB733104D91563C8B0DE3F5348D3A7D95E088B5789516BBD53C0C8F47E0391EEEEAC6ABF5F01208EBF0DD4E1E3DE23987FB5155C60D9431644099CB09455CC44B926763F69A1D6D1B872F672A48A209E2B65C8184F5434F91B03837F38476138B41FD224D369A1BBFE764280527491D9C5F089CF23D50EC6D85851DA28D35832713F084584331C6AD5304B355C2D6F0A4954B9A64C732961D3A957A6D66FC29DDF7F58CB5E3619C5950D938EFC6CBEBF79FAD6E1784063A6EC7809246142894C655F33B8EC9CCC8F183CEC807A1483E7F1A5E7EA4EB226C707DC4277E2F2C7CE66AD0FB74351CADFA03AA215AE374CCFD8F38CC7A5B68A06F6510FDC6A643A29F472A2089DD966544207882CE58DCDE599C45A825A6242A6EE3CA2605E2F06BDD4AED1CD4E10C852B21E6CAB7DB282B62B80B7E1306F5A21635601F7CE1C3421CD91970B6C56DA09888C0DAEB9C9F5D71ED8D9CF7E205552683AE47A804DFEAC110B0F98BE47354D0907E289DCD2F4ECD48B85A56270A53BD741EA808EBC8F8DE95F810AEA956A5A6055AAB9201C97D169C68AF925CB1E376B8102EADA94AE4F074C2B2030246F873594ED958A07BE6F0C77256B0F9CF5B623B1023F80AEC7C29360B9054F61743A0D2BCDDA52EB75487CC0E4748158D947A61E2A2F6DA2E01C573E61ACA575A8BE651860BF8EC1C762DF8475126A715B64CA52A95324E35EB014AC86C5718F191F933B297A011F6604B36B80C3465056E725C40AE78012B9D7C301E60484413C0D8E01A73130B38F3161CA48F0A212955F6D5C56C55796368BE6453CB5EC7161218D0A8C7971B1A9335938D49CC24257C17596EEFE31C19E92487D9B4A9B5BD152BEB8E64D34B94CEEF9008795F31ACE3B5E215A6CB1997E3000D8127AE236EB3300835596891CC187623AE27CF0774315E5CECFEA59483C4B76A3079F38918EDB9013D4E2D8840F8D2DED137705F273121F04AB812AF531DBE740A77BAE3D4DA586D90008025F11F798DD538FA9D3A694704C6CE2C5EAB869DC5A7D0FA4F11F3B39EBFE217BD56B43655DF43F9E9FA8794192A3EDA7098708AD19373B8A5C43762574F171B5B5D35F6B9E14748DD4608AFDCEA3B8950E7370977F7AD9F89A75A743B55034672DCDEB644BAC8D6B1F0BBDE3C455DBA95E63AE3948AA80D301E580FC9701E0F2513119DFB4D1153210D820D68377ABC79F18D5D435868CA00997B89DE0FB2255D5347D0E66E65F4C53F0A3556A28BEAD1DDBB4305F95AA96B3F0D3E5ADEBDB16FA8CB5A70C3E2E6F4E8F8AF3181A8780C53F0233D76D71DC8004C6954831ADD1788F3CE6C2B19C3799A181D158E1469A158F25BD43AAFC822A5309B340C30CF6F295C37DEAEFFA783A508E97CBD68B1A852201F70C822CAD94E5B62CDAE98916753013F53386717AABAA1D6ECD008B0D30840632E2C2D83322B491FAF47E0F26058F806B42ED2E2D956531391B39AE1C33809C9201F56EA73C1C119FBC1195A5CC2EE9BE33B5B840395FCA7C98F7A3B97C4F563B9FB3E6EC6288905EC679AB3EC2431433BA4DEB761C1A26838941CAA499662522BFE5B1B8EE79C581DE1665ADFB4DA8FFA3E7B828099D1CA29D88B9B97E843B0583E9F16951A8A122C052659BEB5FFD1D4C1A31A4A799FD457943E3CC9CE49AD680E564E6E20840BC8FAE56EAF1229E4E89C47638F31C21AFD4FC7375F6F52DB66CFD142BD402E0B6C160995AB54BA9C5B8675ED4D61D4FCACA50227C973199F442A19CB29E89CA43FF7C9E7BFD8769993734FDCAF909B0A3F32EDA859ECD168D74759D81E845C1F054DE986D76FB387F9B005FD0F98E83EA05EF82243AE5B2B401F6E1D4A781D61E4AA0A0D0B812EFF64C5CD126C9E94A0333EC850E608A2521594235174FCDB6CF9F17C0EAAB06B2405B6277BDCE002108174EBEF4F85FF999836687EE23EF30E7907C9512BCFED696A2B414E1412C8F40FF6251C411C19EF40276581B7B8CC0C96D80C70F331CADBDA5FA08F8519B4F28BB468AC01E4F87A781DAB6AFA05AA6B3B14A0FA8E38AC93CD36AB0E04C6CC88A52741BE11EBCE847F94A4E0DBE2BF80BF709C06373784F9DDFCAFF720B4E4A4693AA0E5266FE78EADC877ED76D89B4409377867853051A70AF93CF8283816AA3D86080C86D81A99D44BFE869C076D1377E392D2893B73FB392E54ED1B6555EB8EDB9CD5F47ED3BA0838946CDA1D393C8CC031C7A7438D4DCB771E6A5F8046C1AF16F08812C737F0DE07594290709D1CAB6EE6A9DE7CFC7C6D8931B9B16104F995F1A67087C53D9E84B493F43FBF17729F1F1E981CF38FBA7DAAD330B4B7A4A9454C101181CE289227308BB0A1CBFC7BAC489B4DDD7DF99B31174E3C6B06C0A99E366E42575EC4E644181EAB66904284ACDDE0B511DFDDD81DBA9276762BB01AB1CD43B866F7341CD6864D1ACB010CEC1AF21D4C9B99838C430B2808010C838515E9B8C71D00FB3D88609F2993F56145505C04E05EC557D754AF01E44CF53A40F360EB59B9B8AC782870284293E7F69548AC83ECA0010E50BAA8AF61B5A3A341EE080DE98B2CB9505AFA2A4175726F407B9111CA8F84A827CF34A22B433786420359DF16974BD23FEE785ED966BDA8E1122539FB8BAD6BE296CCA64D50F40B0296D13BE79ED6B8B75E061447926702B9CF0583BBAC5D9E54D4D714247DBB14A40497292860E23963212B666648B8C0486923B3E62DB10F780C31D2AF375A421A622A07A79724FF61FAF704CB22683E3E58BEFF47D7DA80493FBF9D8AE1DE1B73A5B1E4242B1F2E98E2E6FF7E55CB6F93D391DE7977F8FCDF4D97837F0B2E49E1CC6427A4D8D7A3D0A40004E7259FEABFC0212A1F2A6462F2F60A9FABD8E9DEB48DB3A7A45C0141BD4A96249065D726DCEAA33486D6FDA8A0F02DB57BD732B381776FAF96265865F7D082CA497128F73C266D3BB90A547A1948E00FFBFB51C3450E1C3F74C1C3FF8FA4DD4D8B877D4DC38314E9B438CD9296BED0352E46BF90F34F6A131290928FF5E1E9DF2B1350755DE48374E38E763ABA8F142222DD34D7EFD5A05F008DE5C050525BDADADBD701C58EEFC6FEDFE879857BD99811E7892919F9ECB7B2A773F9164775B2372EB61815075FB68A2D217EDAB83981802C8BAAA17ED27C59826108ACB07B718625AD6E31B8A373BE54F5EDD5AE7D064D2F266A997A7BA03CB22646364FC91A868DC31D065BDF1E00F0FEB1BE3995D849F6BB295F8A18264A0C2BDA3F3C398B3AEB54A3D8036E307AB71C87C8AE602BC71BCA4B16F4ACE2B821E02D4CCBDDEA46F1899AA9EB414B4E953CB26485194DADF98F6409067000EF9AE5CC03461E879C21D1FCFFB085F87D930DC4B62DF1DB1E395F5038455CAF02EC02EDFD9E18A5E12911F9DECBC5E82CA768B059F190FEA4D5F2FFC711284C9B3BE5AA429E7F44C275085FE1BEA8F0F3B20F76DA9A5B07404CD65D44049E4E8D73F6DC3EF6AD764E3F86220B4DB7B713E47F2795F97096253BA5D17D760F870A8E7F8DE2B971CC001A8D0AEEC0366353498962525B9DCFB640D82B158FEAE6B6EA4713E9AB67F8AEBD98A1198EFD42A1E4A48EB95BC97F8E9CD5FB0716C2493AFDB020DF0E69A8E904BE753ECB9FDCD5D2954B7E28BC7678074F2FC1FDB7E2CB46D0519ABFA7E10AD5B8F1308CE23B80D07D579445D505D9FDE227046DE2F4B9232C6FF9E874AEEF05EBD9F2A3788691DF876859A3BF76219AFD0D868A095E14B0ADD2277EF74A2838265F77F56DBFC204132C1F4AC88FF26125C00977E25B1A289139AC7BDB87E16245A2F66E401D35D85AE4C1D03C793AC24212D2F17A1798B911CB9E137A68343947BB570C1098C83B3383A8ACD591E4DE1FD0697002D475D533DBE1574F5BB18F7C98455EA41F27DCCE28E17C008B3FF76597359C11509F5D34764CA0FF90B62D8F71AD194CDBA00CEFDF539A8A55EEAD6A747EAB64B8F04CAED69B7391F58B0FDC84B5375477E451E8943B277386E81B4E435D481992274C0E9D72F8C01BC43C238554D5BFEC8909E0AB61139392DAF28D02623FC6D3C29E8B2C233B90A014D4C6BDE72559BB9A3349CCF8EB3B711CFAC97284D5E3AD4D9D54A526CB28F367C1D82DB552D7EA2584DB5FDB88E7674FCE396391A6C817087FA77002B18FC4818BF151D02F693874F4F21F18F73629B9E6243EEF4DBA670A3F6E468AD64865E28C5E03F90095F929B37E7669EB4E8DF42596AB619AA215CAC1D30171C6AF922194C3B4582E85B1BE155C902851DDAB615D4C160AE8B3FC3ADB58F1A1A8DFFCF7B536A73C568B7B43847840BCDDD23AC9D0A82FD5822BD971930F6EF89C9E9531DB66FD95BD2E50FEF37DBFE15CC9116D7321BF95562E8206F1F6B5BA4087398C3258468B7A42402A1EB51548D23DE9F604945E17804371716F402CF86C134AED293216E918B9FC05849FDAF39E1764B90587627DFC7174B7A24E81155557E38250D5451E6DD01AA8F9F32719999348196937605D7BB79DC0D124638AE5EAE93936D7678E2AA07E5AD0CD5D5BF67F6A8004139FD88CA2B25712B7A91C667A94B47F492C5081CE4212CDD7EB617C9978D44AA066EA341442C78A2CF3D0A3EF736B84834A83C5C358B1D1A696A8D92464FA6C9DEAAFEEEB0FBBEA790E574FED9F6AA4369C01EE624E0043A6858D67BBC7B7C2E157BCB1BA6EDC0DF1AC1CA11CF5AEF9FCB1A39F8E85FDF24D1A51747ED4FEB744D25C2FC813E1AA85EEE683766FCEE6935A482C6226A2C76E857633DC99E6CCF3957768E799D7E2BE230FCAA975F724DAFA03668515C254CF573E310FB73D3C62933DCACD7D26A5CD88CBD6CE0A1C49BF93F443C2BEB71948906453B99EE3A17618E8B5E7C14D21F2A556941C03B9C793292805976211D4FE89E8B997DE6C281B3AE9441553573C8F8486DBEFD139D72C6E96AC7DCB2D28F33846C0A25074F9813F8DCFC4F3E0DA6C66C1D73A7221B69D6B9D3892AA1D0B9A3B33AD5D9AF9D6CCA621A85106E0501F89DC9D0D46AA446CBDDDD96A5FE34837F360F11ACA28216362D2AF5781F41739178ACA099389DBEEEC37C1C65DA09F96AE3404DB70F37FE4712DA440118D757AC2AA53269B623540309BDB226809B26935408BD56D468A9E303AC32D5CFD97316C689CF0C32654CBD4C1BA7FDFD85EC79ED5FE77DF05EB43C20679557BAA79873CB3A601F88263A187818DDB38CA8369A7D9FC4D50D9A233B5E8C83A8307E8F05D546F78F0243B42A66D88746E510616D1517BC1DB5AC38F0D36105404D4132CB4151DC86E09338F4B20D444395CC15E831E5B26F54544F26BC69138F9D080DEC0FABACCAB8F645255899760461A8CE53C3939785BE19A8CB41246FF477E551D1103AB0B1E67EFA01640A55A0827E65C87E28FDDE96EF39DFEC263B384E96080A0580176DACE05E9ECADBD37AB139336F3A4006ABDC55D1529D728AE84894CA6F09697B26DFC13AA15BF36E78234E4F99D8E52EE39A477D3E6A52BF95E030C260AA71EC4D1D74B4853175530424872FC62135DF230988B45A5321CADA683D94F80D0B34E0DEF1A937573E2631C0B3C5887DBA98EF20C07FB0A6369F818D990CF47F56C027AE719B35C08D799183BA8FF285A64757D6054C528F6CA4E09F36EF2B8007F4E842B11A5AA754B6B53E1E06A5C02054B4B6F8CE575EC350A19A711565DE03E6B4A23211A3D08B72DBAF9EA6DF897F3AB92BFB50014A711BF26225587803C9052364FFCA169BF099FA28C4946EED26C1F99139FFFD712064A7545A696012837E7DFA2983FA7427ABCD86AA9C2898FA5F43F34D4C6BD622FDDDC73B0D86DCCC1D291412F5218BBCB386B97DD3D7870BF9B0D108904976259FC1C2CF51E67EA055351104B490DEE4F90AFBFDD3773320B94F9139E381FB87D5F6002149BC7FC0A12DBBAEA049301190A6433AE32B19B0ADE03ED30C1FD20D8837A04E920A36485D6882C210B567112CF5D6771019F8B4B5E0B653ACE9162EE9B3B4A627ABD9D58C042C1871B7ED92701D0CB6DA07586B2A2DBB7C0B58CB16B756CA9995F25BB677AF935A464AAA7D9A0A281CB2DCD36971C34670AE18F319DE3FA96B5454731471BFBAB6B1035B71CF04E53EA39ACBFE5F4EBF29BADBE217AC4B19395C2F808E8646E765D1D3850602C872C38699564C160C7CA45B17A5D7C62C20A4051386818990E637469644F0A111F1DF09887117FFE91294905081990150F4DA97A484EEC4D6536A23C21E91432E28F4FC039056C214625F0D53B936337A6497627119F79CC8D973291DB55F7C478061FA9C22A409AF1CF7F94FA4CE0D3321203B79ACD1E92E8B10EDD5C361E8B71BBD59B2B88912625543763ED2B4DAF3D62CA5B8AF4A2010552F138EC1D91D9F83563B9135896C0A2D5FBA91628D0F94CFF10D5AABDE1479D8B88A34D6AFEA1D46F2990F3F41546DDA6E1AB57A7E7C1AD8E69022A5256ACB903C01EFEB8EB43DFB030152AC6766185A62ABF6B96CB8CE6D547FDB461D0D768AED914B168FEBFB603D2B4C158113A7D6E9ADAC1126545548C08867625334BD2CEC1E5F751876822F53F09CE597F12C957318BC53F346DC213BBAD6A2B9A6B959DD6F35A84D36DBBE0677684154247ED1DF0ACAFEB7A59AA77D710E4CB80914E6C9C8CFC4558DC9ED0CAF229F6593617FF9818078622DB2B75ADAF19A6463691864679C853298EFC9FE7A4A3707AA8A986F1910301FC6C8DAEEEDE928ABBB04662A24FA5AF4C6D0C9119411DAFED196D35AD5659F05FEDAA6F7037315AFA6D99F2898BA8327A6260D3AA04F84472871485A979DCEAE160A1EAE8A7269F4E2E25DEC0D1E15EA2754710E3777F80290A3AF861E963A14D7379392F89578F7250D2BDD8940F96C697AF00C376A9604FD2C96F4E13D7AC1B39D569631D3E60F2B9B6CBD7A193AE9A671956FC8A69ED968539585A5CA3E491E54BF2AEC9A1731A1353B78B1FECF6F181829A81170A65D5EDF56FF806DBAC4C6A255DCC315AD32766BE7EAC2C4EFECFC37CD69AB5C21C91108DE3CE92AD5F23DEE32637E09988C855936AE1EE2163A42E399FA24508FD7AAA9292CBEBE639F2E2B03B7E3AE55C6AAEED440FBB8CD390F4A2C0C97CBCC670516E759EDE7D5643E038ADF6BA05EF877B429321A8FDFE5C07F3CBB5BA2887C922F88F54A6BC4C2B64CC905BF8F1FCB3771C14746342B156F581CD7EF4EA1A0313BF46BF802B5904E1A1BBA8A8CA72B003C3525696A179B505977C2770617B38152F1EE752F93AAB807AC8BCB398D54E20688685F05AE41C05E99C36D7468B853088E1175E6780C76014C76EA317FA87F1F2567B281AAA90CBF6C946DE834970E6AB30C228F2B1220F71BED2E2B56982727E31E110F4782C0CB3B4D44B48F62E1F255F4B4AA9DC2CCC93CA23B9DDAC2E5C68CCB5619AA82575470E56E83601A40567CF3F0971F994D4D1D7F47CE495845A19CF2A269D075068FD5831E70015E6D1E7167D2F3F423D06545480DA06B866CCE1FEB32B554E7FCF56D3EB0631849CC4B9E533DB7AD41474B690EADA461583C974083DC4167CE434E09EC43E1A19E6DD67971490CA9BE03C3A7F4AC6B1A05D95EFDEF456D8B9E79E63536C2D99C541D761017F4E25849F054A17CD1C4188F705D25ACC11CA2DA12BA50B61A8B50397991646839CC66DF0FD1E1F07A7C0DA31B7BB4A0AFF5FEDEECE99B7BEDBDE21CF72DF7B2AD4110971713A654FB9792F47BFD3BC3B32988D075B062F634BA6F3A35434CE82F7A3087BA3117D489A78A82909B0A53BC906B0338010615697AF5DDD013BD2029AB359AFA3ADD139A0F10C442AA9EAEE9D9F25B7FD2393173B60C347091A330F6F8FC5781A8A1DCD01838EC47A17735DB0BB31BB33DCF3DBFF7AF6E0EA6DCF35092F64DC6ED2D33702DD820AB264E096F128F9C36B89EC3B752E120C23CE6C5C57D959D325FF0DAD977AF673354B6F5B232B06A34AE4A0031D2F851D174536323A3E4ED6FA4EE78A47D5138EFC4F1CCEF492FDEDF24A8FF848B3B1EAEEDFD4CBFC9D85B4449D417DA59075CB8DC4B53ACAA62C55BFB3F5AA2B5D41D7DC0E4596D941AD72127B07CA38A98419EFD52C096BFD6B9408E5FB982C1BD5501945AFFD797294FB0DF0D5D46833FE41F22F39650FF05D969FBF1D2F2728C359A6EE2D0C6846814DB9F6E30E65B985367CE680D288568F73D94353644519FD1AF81A5DC7DD35BBA4E2DF84BD04B0E0DB3CB7E9397DCF392B7A80F59149CC555E94DC11BBA64DA019CA5DE9014B2EFAF196BD367559D7CF6138D854C0D767F90935C059CE75E0562D7CE8763004C33923EE0960E1F3BA775AC42C216AA03391ABC6558AE5E76E6BE55BAF1567E4263112B987644211DF60C50ABC46D8E5430E7633A2A3C600DD8D851C968049AB77F0F6D1FFCC90B16F29229EEC853F5D9B080CF0966E60246348190E3C35054CCA24DA41A1F4CA9564EEBDB06B25ADC6CEA3655E4B7BD01071240E899FF0C763BE580CDB4F4A299767B8F537F5119ED3F4844F338424374BF2E902F72A9CFD3F482F751AE827599746FAC8E490892E798B81312CB288C41724738A571FD6C744EAF08A8FB7F23D62D199CD470077534D6811EDE73A2089F9C1FEAB79670FD0437F3FC53D0749E6785C78E5FF5608B28884F5F28A36CE39144274E0838D9CB9FF1F21009D2B0C97A78F136C86C86C09A42181E4E10F21A035C20612706CED5F3A7BB0CC0C71396191197D82895DB0E5AC8F4119E13F8F8D490D590B27AD8AA5FCA870CC7B493CBB85F4DF14579058DDD4CF04428D27DB7A96C4A300C4E5AE4E6219CD24E61E9F6B5652EF28BBBD373629417C095A8BDA7198B9431D92B043C14C8155A1D1FBAB643C13A4EB726A674A292FF33A46C3D01802D6F378C478ADFFB8E15DFC36D5301CDFDECDE8C361843734C067BF0A0B802BFC73AEA344A85A7B1DE714737870D5BB70CC64ADA393D3B84DA5FD9207F95D920E25846C6F29E720C9D64544340AB9369239E096DE3B4C49456EDAEDBAE8F00AD01AD45584DA5AD119ADCE3B2FB29FED275DF8FCFB7CB7961641376CB94B6AB38B00B200239A8EC398E32045506EF95150F80048F857B33D8B6A147727125925061FFE63C3E82131CDFC9D43952C6BE7417693DD611FDE2370292FE9628902CD11F0C9317606376E41E261AC3F02FA389D47BD1D3BB66CB3E3B29E0F67203414AD44764D63A174BBF821F2BCD881286A14C576C7C2ED9E5E5666BCD8A6BFAE242766E9053BF74FEDA949A3F85BBAC340A42D88784AC858957E0418847C0E11EB6A967B0EB56D0AE9F54D0C6C37D9E610BD1DD7707C58D71421E4AA016B6E932B0E97C27F898257A661D5694D8EFF1481D790BD6E154B91E73C2AB73AF0BFCDA260CBCC58F4E044792E2FED2A9E455CD06F7FBDC9E5A8DE4D3D2833B3A8CE16867FFB917269F019754ECE60689B762D0F93DE662CFEF5454A4FAE63276277E1F37002DBAD018CED370D840E29CCD599B46D5B48D363B1DE20E0DAB822DE5C371670C21E2675FF040B6D5C51A81903E4ADC684E4F6756A189D0C2496115855E7207C253CDA33D267D44CE8B1909EBEB0C686FEC6DF842C9E9952820278F46BB51ED9FD2C145573653D2BCBDE1C754D86A8F9C944662C66418D24D0774C35BED4EBBA826CF1990BD385F469D3250C91CDD4EDAC5650F02DF93BDB3A0C95A0FBF62AECD0F0D5D725CDD6725ABB64574401C8FAD00BA051E06C6F6F934A8BE30122D2F4231A3D4EFE4D209DE4C2C673E595B28EAFE27076A2892ECAD3CD22DDC99F1C5979E95326A02A996C8AB742A53F8CEB5A47BB1C7D9B447258400E1330A2FC4713C34796F1CC4CCCE3861EB8D26B9E43B7F25226DC4940FCF0E43D7AEBCEBA6863B0FC61F6E3D3C31760828BA2757C754F7A6EDE68EAA2DA6A8A39D73DD1613AA38B0298E6E773D1F2DA6A4A6D0682EA338902924AD68673884271F08D6FE413F04CFDDAC58E94791CC52AF16A4577FB72B97FD1E6C0C3914E65DE45E8993291842C29CEEB65DB03A2D337B764B53924EB30F3CB6FCCD8AFFADB8BE466CFE52695B6D2FB27C6A87B84D9E9F7AF8FC52EE1EAA1AFAD28528E043E128B478EE42E255F638F7C92EB068FA99593F13E51A055BCB598DC90CA623C7228FFBBD873B9E168F39EAD7AF943327E5781603D15182C6C8CF358B61C9C547DE8C61DF62FD9F2988241B9036ABD2F6E93BB22215D8045AF9367D78F5F0CBB0896E23A285391430A65B62EBC4E7797652A1AB6C7E8F6B3FC71A71B12231690E35DF3683250FD01DA6C6934FFB90359C0AE10FADDBE9B49C016F3BAA19222A23E7F10CAB61D71B1F58366C9D452BF1E3195F984CD7BA6DECAF90C1A253210D6FAC3978C5F0D2B1B1841E197557BE8BA9ED50890278FACF0BC2EE35E9B5EAC56AD9E346FE6622E243B80DADAC036278CD443C45AB3FED22341E0C894B17D50866D485C25767B18CCC2A709AE63CB929AB615CDC3E62D5DF961306135FEFC9D718A1249D1496AFF269554288D2359123456153F97E2B97DC0F3069B230BF0BA3A9969CFB45AB467430BA91BF03811B68FC389E21A96AACED9A18A4B6684A41016F4628850AF79042CF0DFE5809FE5EDB4E7CADDA6969EAE4DFF2C365A039955182BE91AEB428199644033DA65C248D27B3F39CCDE3C8AEED39AD18097EBC056C8B02752422FE68E968C679F7487BA52AF6804800CAFF85B68366B3DD0D8CDF0BBF54332FDFF5F9CE78161C035FC64DEF0CE15EAA2DDCDC1463F380ADF3A4181E15124881B78D416A76D4EEFECE238E1FF8DB651CE915608D32C7F8E5CA94C499C08A23C1602185D5A22B668DEDA092BF88AAA5353849DE20D835B401F3477DC3A82FE07AB32708E5C39C22BDBB7F24225C0AFA4004012F46A91CA22BEEB46FB8A3021051B7BEF3FE6976D940A94AF3C9201C4A075B7D15489622FC66FA923CAB9C8605F4782A2659975190B503934AE1C59E3DADB14AF32531951520474C6709161095FD45FD55ED2E987D54BE93C7DB77AD4D9EA21B75EEB3E621A58EF30511D0A11C3B15A34EF50C07AE9F8CD2F3CCA744E7DF5B4C83FBDCF18ED0D40E50F54B6EDA75DF7D9CFDD56C4FC8FAF5A481602AE59F2DBC685A7788D857C7A29526A72DD9F44842A3D7252494006623B3916481C0A904EDC34942417EFA10644AE3D0161877711F569AB7B6544F6D70F147BD2A5A69C9BC8624861C14E950511471865FAB1D55B121F34439FC7976D172491B26DE3E9C54DAA5AED988E8BD1F15A71418C4A5894CC6C9966DFB7F651EDFC10BF6213B51BC72E551A004DBDDC907889ACAA940B4229635DDD8009490A21395C210F9BF96D0D95A9F90721A69D6863B15495E978F97CB42BFF09C6B1E97B68F38F8F1CFC9946797EDC0005E51061557A866516FE3C7D7259BB21AFF0C4CC85EAEADC07D5EEB7988C1C338EF1288C48894FFAF9D7701CC1E00A499E4CEE9D04F17D2B238BAFB62769434BB9B112E0F5F4D1A5884FA712362493D7D99784DF4AA725D50C45930F03A285B436CB91D697FC590948F5A4177384C8DC019DF1FFC1DC9E19AE27D6F1C0739C67C050F47D94D901BDA9612BFB521760CBF5B6463273DE4EF637EC8D2E2DBBF6AEB35BA2100A70CCA9BDE107DE5F66F9BEDBAFD7B896F42FDAF61AD6AB987C18BCFB9A715111AAB49AE56C285B9818B00CEBC31E664A6E6761E45B6A040CD914399BB147A09C081C09C56D3995F503DF16D54A19F47D59ACEF29B4C91E971569970F0638E892D05C6446D8628E72C3B92A835B54EE97DA348A6096732BBD45D37556593B1BF1C0AE50EB5190650CF7A5FE32FA6EAE9F1B057E471A8DF5341C39317BB502586CE71C7A591AE93D4F03141F71DBE79425FECC5B47F273517B79806F40406CD1705AE48762B6C2EFE053CCD7021246CDD240A18F9C542B348B5FB82369B656397E45FF1E7EB5A0D5373ACC72B86ED5593AF75CF7767EAE44C1917B5EF7C41680DEA3E4B13B49BD22D4A0BA776BB955223D0E4E1DDBC51B4D84DC84B208BD05DC1E83BC6C0189BB017A11DD6FC82B52C6D3D838E4F5DCB8BCAFC520E9E02D07B6F634B66311848EADBC13AF9D68FA9D5C109EC108A91F3D61D2863D03E4214B39AFC22275E2C2A29BF194452D1FAA91E13530F695592CD1351D6DC8C7C0114765678E92D55DCFD3562FE4F387981331C7DE2F0466F09B55206DF50D71DA68E4CFE8B7DF5A634705C0E0DB1EDB844B6DE618066C230288392BE93A727D92FD85ECFA9D29624C7086A75F03E0EB905BE5E43DC0E1DB1B296AE04FD175C888AB8D00C36C04AEEF74FC827589DA13CC39AECD905169AF0E0894287BA892C211E2BD66C952D33C4355ABB06D1E606A022E23EED03FF7B21501D0767871A265E3804CA752BAF760BD41F3C7BFC0236791A9090D881DA76C4B8A3A9BBF66D9456E772656C6DBFDC3A16ABE9FE0F57098A6D5D5D52A8ACCCEE88832507D3CA4AF644857327DCBD2794542B6430655A5924F0B4FACC94326D212091405C773B24BD21A897E741E9CBB7EEC4BC731CBD0D2B7AF6AF69B7D71F6A72FEEF263D760DB7EF1B3A2AED3A0BDD5FCD5FA0C13C4F56B5938C1D154F107AACCFC6DE79096E4DEBCA13E9B7B606F6768768FA467E0757EF2AD2F9CD4841F24A196F808FA83C9334A4007BF897D9F4B13590D70A18C2B68485D2A6B0942BDBB53886A4565A3CBA66FF395422D184640DCAE9AA11A75BAAD05341C8A74C43B754A03DD8D74A6A24C3DAF634E83EF20F34BA56500A3FB6836CF6D187BFD924A029BA3F075099F462047D933A74E383F40E524F5A34A6CE9402BE9B48CD6E2B1B8703B81E6A7E97400498C2F510AA06A49891C26D82A5C82744B2EA6AD1D162EC7C0D3167D5307AE01A78623C795D99CD8B03BBCAF111A3EDDCB60D4A29E8F1A5D15EB71E9CE5F5C73F095482A279563B5C431BD9FF374CD9821DEA00FA5C76E447CF5B5F5978AA78AFEDE31B220FD2F3AFB9CD65A1AE25C9DA6EF199BF8FFADE601224EC253BFA0C8FF7773669A5F77B6B85D989CA9F2CAEB5C1AF2F5300A678C1C307B4104803019FB41BA74D49BC9EECD751D031A779B6FD7E851FD477B0A09C5A6C8DE4A521AE042CE5DEB97A672B8E6D3B978A4B9C50DF59279DD75F9D1D93AFB8F55C616639AEEE6D29AEB0A0685D54EA9179C71B7D5E26B27A242D60A913F33538815231E1886FF0A77BE572A6CE34CA7F7CAB1925DFF31F59658E873E8BC6A24F7D6BB804AD455D7EA33721779A5CFBFB58521413D36A522E39454F1B4D9E6ED577099BCD5BEDD1DAC28F760961687A19BF1AFC91B8B816A089D5A0D230A365FF366E42883CF992BE3DD8329D423F52A3E54C8AA3AB6A7164D53001902AAF9554E912A0E4DD87EE8E26B7A2B22EC4248CA46DB19906CF275760D6AA21938185F29760B2FADD11C8A880A35F1333E291A2B2A29B900CE358CE26E1B29D35813FE514451DED49DA14B02FE628B79806E39AFD06E33C659B05D00420408DFD6AF2A8DA7B5320597458F5484178ACE4258C1912C9D3FF5868A856266EF8E90CE15E9887287BE6A4B22A0D589070807B2BD2D66ABC567D4985D6FE7172113459B5ABAFF98286F5A6A340B156115AC16842AEA3811EC7F50C6B0CF9C9B0FD6A22F8FBFB8A526195E88375EBCC95C383819F8B33CCD4182CDC691598B23B08C7E84695617A94DDB6068171790E622B7FF33E4C2E9762DF1BF812D1CC0DDCDA59999163B2311E158101E0D213D735DB9D8EDD891988DC67AC420CFED21956D3C109A98F0AD80A8627ED3ABA7D81E94B799CE39A54BC49AA6AD368BF095BACB4E11EA81132324C984B115EED5E066BC167E36716B03DECC4F6CC5BE220841607CD53E28C576F954921223193391F51530C311DE0393B5A785463FEC3D3B60B271F2055404AC66ED1C3576C1880C51663852A399EED65D375D738000841BEA4909139D46CC5716302F04D5B1CC577ABF00AC7D537087BD099F2FCBC383D2FBC570B346AA3E89F171B698A23A14989B6F2B051F103FD14C53E16C262F0936FC899020E7A5DCD4B5C54BB766788A4EB8CABCA77618BBEBD6CE6F0B62B22A653BA48B7675506F186C69B8A1E1A4FECD7F2A57B4D446BEB8FCB86EDCC85339E9059927BD96C9662221E14B186D2498D5B520B1C9D35F7B697BD217E25C0BB790404BE82AD7788D3455823064D62638F9A93A05CF49E3287DC3926A355276AC837E542D6EF68A87799100997C40204B11B843299736795E1E9D6424BF4880708DCB607A3CDFB7196AEA270360753F272F16B527028F9F1E874005E5F0231CA168BABDEEFA4F98AD93E2496374165D4C647F6E792C499C834ED4A29BDB70641C28E5C97FC333F929B16C81BE5BA9984BA881766EDB45794EA6AA6591C30CFB94419EBDAC645DEAAAA2D03DC8E8DC5F6E949E63CA1688FF1086C80FB33C8EBC1640482FD049665519832766A01D3E17CF43CE19D730FCA403BF47C8131EEEC9550F15FB6343B17B74BEBC72289FC1C7440F53B488EF147501445D034B341BE79C2A027F087B23135247E547360163C26A3FBAC6C212469D396C5BFA6185E0EC672AB75EEA9D602375189BCAEED798D6BA89D88DCEBE448AB25563A89BD3F4950A04466C27FDF36A1BF317D77EEA807C8D8D5355B1197CE1B29F86A55155235E05437721F5BF8C14DFC3A37B58950D885BBFA5D77DF225C9642050E3D0376E6EE3D02CF43FE9535D8BCBDA0B44C5CB2B32BA00B5F67EE66602175099214981BE895CDEF89262A2BC0C92354091FBC9DE2562B5C2DD7CDBD5F2B29D994DBAB96DC4CAA13019F655BC6745F8833703C1DC3B298DDB3BC718DE9B56A9B05E3840032A857CD9F384C75FBC2AF82AC2343237631A96F09E269D088416E29B29F6786AD35484B97CDD01D8202C11924B3F99B5302910CEEF49CC77BF7903F5F34284BB12ADA25986E14F0FC324D51F3442ADBB1531C28849E1656B3144E23480CBCFB3B342FEDC3C7B1F478CC9B67167DB747AA489BD35779317177F938B7900FB97DEF0291C50C119E38FB8C0D75AD87948CC4F0DF993D3325387515E4C9EB127D26A5358F3FF6563B29707555DED284676BACFA6A0F67C670855AC3C29B0322783129C91F3C15899FC7270B28EE8D934884738720B470B77307BCB3219572B2E6C80147D2938CCB11032F6971C513A46EF7E35140F8E9166FE29F85653EF3E9FE49A6B9AE5909267C0BCA2957C76C36EEABDFB78BA5DDC81F03556BEF29D28934C63ACBE50809202E6BCBC96A10BC57509579C92A495CB7030DD866B7916B8DF7F437D3C9B2E1B5A01705FDCB65405671E91F795573C4CB759211594547948FAF9456DA847538EEFBA11BB8024003183A5FE455D6BBB7492376A4DF02B553DB9AF9FFBCE7C12F7F8E812E7B3843473CBE7A4935E50267B51F5AA34766A64BFDFFED1C84C683B9E2AE7E7F8635C4EAF3920175A103CFB95C08D58C670C45380DACC7A1A3573779EA507DD796166740B147D4D4D10D10CA96569FBD53A0A77F5AEC32C060AC36703D148EFD22782C1E66205EC3A80ACC9DF16DC49EA99841DC453D8F20066CB64922A8745ABE15ECAF96BF2251B2D918C0339F929EFEFA53C70DF5DEA4AEDD2E91FF99ECE1BFA9C244227994F6631F9B55544CF20862189C130F89EE0882381324396F371757E9E1B062883893B02F07C9370CF895C05538755FDFF1344F1610E7D1E6AF9A93F9A8372F1F58D7D01B39F0983FB97820E65968308EED3EB18AC79156E871D8D99C8C79AA080AA7288A9A954BAE734479A29BCA3550B095FD1A31635DDA09D964458B6AAA4D1DD27D2ED62F30DBCAB56588C56D7FA2D0E77F5B0B17B4235BE6E077077DAC872A32D04F7A1070A81AC3A311E02822D7FE80147DE7F862CCFF516796FCE03868ECFEDC07051C5F475E378405A6EFE9982A405A1A575520A48721BE3BC04C2BA1A397E6DB50218538A313AB9F83519B5CBC5D4B9216D399EEF16D9FF7D48566D480FF2442F2D5E033D848C801825CA3053CD1801D295D922D5287B827AAF13D868F905C3D6BEB144E41A4653B7D21E67D96155E93401569EE727A6600D360809F787CFBA41A59A66ECEAAFB6917444E5B775F615595B291918923428AABCD11DCE323F40FA61B899A2D563286B31F02E89CBE0D0E691581B734D4D58437673710E866F2AA1E0E9688D4E60F8D28C3CCFE002C75BA12378174E1047D8CE5EE7B13C660AD1C3FC7514DD8180DBF2F7B228D84CE76EEEE3E727D0239185A779E5F334C1E0AD5A3C2642DABC1237140FBDC98A3005CF7C28E73012F521FD63FA6B667FCF75CA894F59884902C51DAA45D8A37E65332D29017D02CC55BB513F36C2DF5B0F5C3E722CF6C100C9AB94B498D097D78257B8FBED89AFB1620B050AFD9E4EBA850ADAE104BAE994354AF22B3E6A2B3F0FC3AC93502D9163BB31DB465BF2C84EED50C59D6A31DF8DB90A697C6118A6DE91720FF1BD5EBE0ED0CB88869BBD55BCBA6D5669965936E394670F712EB6F8AD64068FE9A2A8EB1551D8689DF024D0FE29544700B34B2C725C19D05D916B0866EFB8B6E602D510B0D1620C4C923A222510B06BE2480F60980FF0812FEBA0FA630EA084B931A6A0CA1D67A8D9103942E3C54FCC0B875DDEFE2D6E2652AD4E2122760D0FCA1E97CF69DFB5377DD51EE44A6BDCF13CB2A871F57B9D4C903B3A511B907955D71CF5617AF04D2B3B992BC8858134BF58806FA5B4ADEABFBDB7B000FBDB7D3556E24DA0DEFF0747032E74D678D5B89D709DF16B62FB708803832F5D7697E3250493C4B6B69704CE59A8F98CC2BD25E1CB905F7AE5A5CB6A4C982FBB2CB70085A0988A5180EA4E0E3F07AFD72D83A10FB7CE544CC25883CAEB3C7C63816A53FC396FE11B20AC4D048E427B61001478DE80258F3DA41D1AC8A7E671F9431C6CAA378DA864E3192146D924E75B20CBF5656FC5E0B47CB7CB83F060EA9369A8372899E983AC2524C30DA269D73B95773E076B04C3F96A6A7F1FB28AD947C09F44BFDE9855E026987D77554191965DD058B8895EB46973054A8B4757EF4A2FA7AEC6534342E6A5C45E9CD4660A32484B66A8D88535E61C89E4A33D5D7834F74DADCDCEFE9D92CC1A962D38213F538BA42DE774DAAF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark{restore}if%%EndFontu1`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Title: Figs 1&2.final.fh5%%Creator: FreeHand 5.5%%CreationDate: 7/25/97 11:41 AM%%BoundingBox: 0 0 168 148%%FHPathName:LANDRU:Andryw Work:CryptoBytes v2n4:Figures:Figs 1&2.final.fh5%ALDOriginalFile:LANDRU:Andryw Work:CryptoBytes v2n4:Figures:Figs 1&2.final.fh5%ALDBoundingBox: -24 -34 192 182%%FHPageNum:1%%DocumentSuppliedResources: procset Altsys_header 4 0%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%CMYKProcessColor: 0 1 0 0 (0c 100m 0y 0k)%%DocumentNeededResources: font Symbol%%+ font Futura-Book%%DocumentFonts: Symbol%%+ Futura-Book%%DocumentNeededFonts: Symbol%%+ Futura-Book%%EndComments%%BeginResource: procset Altsys_header 4 0userdict begin /AltsysDict 245 dict def endAltsysDict begin/bdf{bind def}bind def/xdf{exch def}bdf/defed{where{pop true}{false}ifelse}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/sepdef{ dup where not {AltsysSepDict } if  3 1 roll exch put}bdf/st{settransfer}bdf/colorimage defed /_rci xdf/_NXLevel2 defed {  _NXLevel2 not {   /colorimage where {userdict eq {/_rci false def } if} if } if} if/md defed{  md type /dicttype eq {  /colorimage where { md eq { /_rci false def }if}if/settransfer where {md eq {/st systemdict /settransfer get def}if}if }if }if/setstrokeadjust defed{ true setstrokeadjust /C{curveto}bdf /L{lineto}bdf /m{moveto}bdf}{ /dr{transform .25 sub round .25 add exch .25 sub round .25 add exch itransform}bdf /C{dr curveto}bdf /L{dr lineto}bdf /m{dr moveto}bdf /setstrokeadjust{pop}bdf }ifelse/rectstroke defed /xt xdfxt {/yt save def} if/privrectpath {  4 -2 roll m dtransform round exch round exch idtransform  2 copy 0 lt exch 0 lt xor {dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto} {exch dup 0 rlineto exch 0 exch rlineto neg 0 rlineto} ifelse closepath}bdf/rectclip{newpath privrectpath clip newpath}def/rectfill{gsave newpath privrectpath fill grestore}def/rectstroke{gsave newpath privrectpath stroke grestore}defxt {yt restore} if/_fonthacksave false def/currentpacking defed { /_bfh {/_fonthacksave currentpacking def false setpacking} bdf /_efh {_fonthacksave setpacking} bdf}{ /_bfh {} bdf /_efh {} bdf}ifelse/packedarray{array astore readonly}ndf/` {  false setoverprint     /-save0- save def 5 index concat pop storerect left bottom width height rectclip pop  /dict_count countdictstack def /op_count count 1 sub def userdict begin  /showpage {} def  0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bdf/currentpacking defed{true setpacking}if/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/xformfont { currentfont exch makefont setfont } bdf/fhnumcolors 1  statusdict begin/processcolors defed {pop processcolors}{/deviceinfo defed {deviceinfo /Colors known {pop deviceinfo /Colors get} if} if} ifelse end def/printerRes  gsave matrix defaultmatrix setmatrix 72 72 dtransform abs exch abs max grestore def/graycalcs[ {Angle Frequency}    {GrayAngle GrayFrequency}  {0 Width Height matrix defaultmatrix idtransform dup mul exch dup mul add sqrt 72 exch div}  {0 GrayWidth GrayHeight matrix defaultmatrix idtransform dup mul exch dup mul add sqrt 72 exch div} ] def/calcgraysteps { forcemaxsteps {maxsteps } {/currenthalftone defed{currenthalftone /dicttype eq}{false}ifelse{currenthalftone beginHalftoneType 4 le{graycalcs HalftoneType 1 sub get exec}{HalftoneType 5 eq{Default begin{graycalcs HalftoneType 1 sub get exec}end}{0 60} ifelse}ifelseend}{currentscreen pop exch }ifelse printerRes 300 max exch div exch 2 copy sin mul round dup mul 3 1 roll cos mul round dup mul add 1 add dup maxsteps gt {pop maxsteps} if  } ifelse} bdf/nextrelease defed {  /languagelevel defed not {    /framebuffer defed { 0 40 string framebuffer 9 1 roll 8 {pop} repeatdup 516 eq exch 520 eq or{/fhnumcolors 3 def/currentscreen {60 0 {pop pop 1}}bdf/calcgraysteps {maxsteps} bdf}if}if }if}iffhnumcolors 1 ne { /calcgraysteps {maxsteps} bdf} if/currentpagedevice defed {   currentpagedevice /PreRenderingEnhance known {currentpagedevice /PreRenderingEnhance get{/calcgraysteps {forcemaxsteps {maxsteps}{256 maxsteps min}ifelse} def} if } if} if/gradfrequency 144 defprinterRes 1000 lt { /gradfrequency 72 def} if/adjnumsteps {  dup dtransform abs exch abs max    printerRes div         gradfrequency mul       round         5 max        min        }bdf/goodsep { spots exch get 4 get dup sepname eq exch (_vc_Registration) eq or}bdf/BeginGradation defed{/bb{BeginGradation}bdf}{/bb{}bdf}ifelse/EndGradation defed{/eb{EndGradation}bdf}{/eb{}bdf}ifelse/bottom -0 def /delta -0 def /frac -0 def /height -0 def /left -0 def /numsteps1 -0 def /radius -0 def /right -0 def /top -0 def /width -0 def /xt -0 def /yt -0 def /df currentflat def /tempstr 1 string def /clipflatness currentflat def /inverted?  0 currenttransfer exec .5 ge def/tc1 [0 0 0 1] def /tc2 [0 0 0 1] def /storerect{/top xdf /right xdf /bottom xdf /left xdf /width right left sub def /height top bottom sub def}bdf/concatprocs{ systemdict /packedarray known  {dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse { /proc2 exch cvlit def /proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx } { /proc2 exch cvlit def /proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx }ifelse}bdf/i{dup 0 eq {pop df dup}  {dup} ifelse  /clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{  {/filler /eofill load def /clipper /eoclip load def} {/filler /fill load def /clipper /clip load def} ifelse}bdf/normtaper{}bdf/logtaper{9 mul 1 add log}bdf/CD{ /NF exch def  {    exch dup /FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse }forall  NF}bdf/MN{ 1 index length    /Len exch def  dup length Len add   string dup     Len      4 -1 roll     putinterval    dup      0       4 -1 roll    putinterval   }bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch {1 index MN cvn/NewN exch def cvn findfont dup maxlength dict CD dup/FontName NewN put dup /Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{  dup       FontDirectory exch    known      {pop 3 -1 roll pop}   {RC} ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known {exch pop findfont 3 -1 roll pop} {pop dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll  {3 -1 roll dup 4 -2 roll put}forall put definefont} ifelse}bdf/RFJ{  dup       FontDirectory exch    known      {pop 3 -1 roll pop   FontDirectory /Ryumin-Light-83pv-RKSJ-H known  {pop pop /Ryumin-Light-83pv-RKSJ-H dup}if   }       {RC} ifelse}bdf/FFJ{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known {exch pop findfont 3 -1 roll pop} {popdup FontDirectory exch known not  {FontDirectory /Ryumin-Light-83pv-RKSJ-H known {pop /Ryumin-Light-83pv-RKSJ-H}if  }if             dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll  {3 -1 roll dup 4 -2 roll put}forall put definefont} ifelse}bdf/fps{ currentflat    exch      dup 0 le{pop 1}if  {dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if} {exit} ifelse }loop  pop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf /W{/clipper load 100 clipflatness dup setflat fps}bdfuserdict begin /BDFontDict 29 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}def/:M {pop pop} def/sf {pop} def/S {pop} def/@b {pop pop pop pop pop pop pop pop} def/_bdsave /save load def/_bdrestore /restore load def/save { dup /fontsave eq {null} {_bdsave} ifelse } def/restore { dup null eq { pop } { _bdrestore } ifelse } def/fontsave null defend/MacVec 256 array def MacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash /questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore popend %. AltsysDict%%EndResource%%EndProlog%%BeginSetupAltsysDict begin_bfh%%IncludeResource: font Symbol_efh0 dict dup beginend /f0 /Symbol FF def_bfh%%IncludeResource: font Futura-Book_efhMacVec 256 array copy/f1 /|______Futura-Book dup RF findfont defend %. AltsysDict%%EndSetupAltsysDict begin /onlyk4{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/cmyk2gray{ 4 -1 roll 0.3 mul 4 -1 roll 0.59 mul 4 -1 roll 0.11 mul add add add 1 min neg 1 add}bdf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/maxcolor {  max max max  } ndf/maxspot { pop} ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 packedarray}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{setgray}ndf/setoverprint{pop}ndf /currentoverprint false ndf/cmykbufs2gray{ 0 1 2 index length 1 sub { 4 index 1 index get 0.3 mul 4 index 2 index get 0.59 mul 4 index 3 index get 0.11 mul 4 index 4 index get add add add cvi 255 min255 exch sub2 index 3 1 roll put }for 4 1 roll pop pop pop}bdf/colorimage{ pop pop [5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx ]cvx  image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelseand{userdict begin bdf end}{ndf}ifelsefhnumcolors 1 ne {/yt save def} if/customcolorimage{ aload pop (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdfic im iy ik cmyk2gray /xt xdfcurrenttransfer{dup 1.0 exch sub xt mul add}concatprocsst image } ifelse}ndffhnumcolors 1 ne {yt restore} iffhnumcolors 3 ne {/yt save def} if/customcolorimage{ aload pop  (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdf1.0 dup ic ik add min sub 1.0 dup im ik add min sub 1.0 dup iy ik add min sub /ic xdf /iy xdf /im xdfcurrentcolortransfer4 1 roll {dup 1.0 exch sub ic mul add}concatprocs 4 1 roll {dup 1.0 exch sub iy mul add}concatprocs 4 1 roll {dup 1.0 exch sub im mul add}concatprocs 4 1 roll setcolortransfer{/dummy xdf dummy}concatprocs{dummy}{dummy}true 3 colorimage } ifelse}ndffhnumcolors 3 ne {yt restore} iffhnumcolors 4 ne {/yt save def} if/customcolorimage{ aload pop (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdfcurrentcolortransfer{1.0 exch sub ik mul ik sub 1 add}concatprocs 4 1 roll{1.0 exch sub iy mul iy sub 1 add}concatprocs 4 1 roll{1.0 exch sub im mul im sub 1 add}concatprocs 4 1 roll{1.0 exch sub ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer{/dummy xdf dummy}concatprocs{dummy}{dummy}{dummy}true 4 colorimage } ifelse}ndffhnumcolors 4 ne {yt restore} if/separationimage{image}ndf/newcmykcustomcolor{6 packedarray}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf /setspotcolor {  spots exch get dup 4 get (_vc_Registration) eq {pop 1 exch sub setseparationgray} {0 5 getinterval exch setcustomcolor} ifelse}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{st pop pop pop}ndf/fas{}ndf/sas{}ndf/fhsetspreadsize{pop}ndf/filler{fill}bdf /F{gsave {filler}fp grestore}bdf/f{closepath F}bdf/S{gsave {stroke}fp grestore}bdf/s{closepath S}bdf/bc4 [0 0 0 0] def /_lfp4 { /iosv inkoverprint def /cosv currentoverprint def /yt xdf        /xt xdf        /ang xdf       storerect /taperfcn xdf /k2 xdf /y2 xdf /m2 xdf /c2 xdf /k1 xdf /y1 xdf /m1 xdf /c1 xdf c1 c2 sub abs m1 m2 sub abs y1 y2 sub abs k1 k2 sub abs maxcolor       calcgraysteps mul abs round   height abs adjnumsteps    dup 2 lt {pop 1} if     1 sub /numsteps1 xdf currentflat mark     currentflat clipflatness   /delta top bottom sub numsteps1 1 add div def  /right right left sub def   /botsv top delta sub def   {{Wxt yt translate ang rotatext neg yt neg translate dup setflat /bottom botsv def0 1 numsteps1 {numsteps1 dup 0 eq {pop 0.5 } { div } ifelse taperfcn /frac xdfbc4 0 c2 c1 sub frac mul c1 add putbc4 1 m2 m1 sub frac mul m1 add putbc4 2 y2 y1 sub frac mul y1 add putbc4 3 k2 k1 sub frac mul k1 add putbc4 vc1 index setflat { mark {newpath left bottom right delta rectfill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop/bottom bottom delta sub def}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/bcs [0 0] def /_lfs4 { /iosv inkoverprint def /cosv currentoverprint def /yt xdf        /xt xdf        /ang xdf       storerect /taperfcn xdf /tint2 xdf       /tint1 xdf       bcs exch 1 exch put     tint1 tint2 sub abs     bcs 1 get maxspot     calcgraysteps mul abs round   height abs adjnumsteps    dup 2 lt {pop 2} if     1 sub /numsteps1 xdf currentflat mark     currentflat clipflatness   /delta top bottom sub numsteps1 1 add div def  /right right left sub def   /botsv top delta sub def   {{Wxt yt translate ang rotatext neg yt neg translate dup setflat /bottom botsv def0 1 numsteps1 {numsteps1 div taperfcn /frac xdfbcs 01.0 tint2 tint1 sub frac mul tint1 add subput bcs vc1 index setflat { mark {newpath left bottom right delta rectfill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop/bottom bottom delta sub def}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/_rfs4 { /iosv inkoverprint def /cosv currentoverprint def /tint2 xdf       /tint1 xdf       bcs exch 1 exch put     /radius xdf       /yt xdf        /xt xdf        tint1 tint2 sub abs     bcs 1 get maxspot     calcgraysteps mul abs round   radius abs adjnumsteps    dup 2 lt {pop 2} if     1 sub /numsteps1 xdf radius numsteps1 div 2 div /halfstep xdf  currentflat mark     currentflat clipflatness   {{dup setflat W 0 1 numsteps1 {dup /radindex xdfnumsteps1 div /frac xdfbcs 0tint2 tint1 sub frac mul tint1 addput bcs vc1 index setflat { newpath mark xt yt radius 1 frac sub mul halfstep add 0 360{ arcradindex numsteps1 ne {xt yt radindex 1 add numsteps1 div 1 exch sub radius mul halfstep adddup xt add yt moveto 360 0 arcn } iffill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/_rfp4 { /iosv inkoverprint def /cosv currentoverprint def /k2 xdf /y2 xdf /m2 xdf /c2 xdf /k1 xdf /y1 xdf /m1 xdf /c1 xdf /radius xdf       /yt xdf        /xt xdf        c1 c2 sub abs m1 m2 sub abs y1 y2 sub abs k1 k2 sub abs maxcolor       calcgraysteps mul abs round   radius abs adjnumsteps    dup 2 lt {pop 1} if     1 sub /numsteps1 xdf radius numsteps1 dup 0 eq {pop} {div} ifelse  2 div /halfstep xdf  currentflat mark     currentflat clipflatness   {{dup setflat W 0 1 numsteps1 {dup /radindex xdfnumsteps1 dup 0 eq {pop 0.5 } { div } ifelse /frac xdfbc4 0 c2 c1 sub frac mul c1 add putbc4 1 m2 m1 sub frac mul m1 add putbc4 2 y2 y1 sub frac mul y1 add putbc4 3 k2 k1 sub frac mul k1 add putbc4 vc1 index setflat { newpath mark xt yt radius 1 frac sub mul halfstep add 0 360{ arcradindex numsteps1 ne {xt yt radindex 1 add numsteps1 dup 0 eq {pop} {div} ifelse 1 exch sub radius mul halfstep adddup xt add yt moveto 360 0 arcn } iffill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/lfp4{_lfp4}ndf/lfs4{_lfs4}ndf/rfs4{_rfs4}ndf/rfp4{_rfp4}ndf/cvc [0 0 0 1] def /vc{ AltsysDict /cvc 2 index put  aload length 4 eq {setcmykcolor} {setspotcolor} ifelse}bdf /origmtx matrix currentmatrix def/ImMatrix matrix currentmatrix def0 setseparationgray/imgr {1728 1584 1944 1800 } def /bleed 0 def /clpr {1728 1584 1944 1800 } def /xs 1 def /ys 1 def /botx 0 def /overlap 0 def /wdist 18 def 0 2 mul fhsetspreadsize 0 0 ne {/df 0 def /clipflatness 0 def} if /maxsteps 256 def /forcemaxsteps false def vms-1752 -1618 translate/currentpacking defed{false setpacking}if /spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor]def/textopf false def/curtextmtx{}def/otw .25 def/msf{dup/curtextmtx xdf makefont setfont}bdf/makesetfont/msf load def/curtextheight{.707104 .707104 curtextmtx dtransform dup mul exch dup mul add sqrt}bdf/ta2{ tempstr 2 index gsave exec grestore cwidth cheight rmoveto 4 index eq{5 index 5 index rmoveto}if 2 index 2 index rmoveto }bdf/ta{exch systemdict/cshow known{{/cheight xdf/cwidth xdf tempstr 0 2 index put ta2}exch cshow} {{tempstr 0 2 index put tempstr stringwidth/cheight xdf/cwidth xdf ta2}forall} ifelse 6{pop}repeat}bdf/sts{/textopf currentoverprint def vc setoverprint/ts{awidthshow}def exec textopf setoverprint}bdf/stol{/xt currentlinewidth def  setlinewidth vc newpath  /ts{{false charpath stroke}ta}def exec  xt setlinewidth}bdf  /strk{/textopf currentoverprint def vc setoverprint /ts{{false charpath stroke}ta}def exec  textopf setoverprint }bdf n[] 0 d3.863708 M1 w0 j0 Jfalse setoverprint0 ifalse eomode[0 0 0 1] vcvmsq[0.850006 0 0 0.850006 267.569199 241.383835] concatvms1784.0258 1738.9002 m1784.0258 1693.0252 LF 3 w4 MS n1788.6666 1733.4847 m1783.8098 1736.7004 L1779.0681 1733.3171 L1783.6841 1743.8993 L1788.6666 1733.4847 Lf nvmrQ1757.3216 1764.138 m1873.4683 1764.138 L1873.4683 1723.8179 L1757.3216 1723.8179 L1757.3216 1764.138 Lfalse setoverprintf 0.75 wS n1753.526 1689.3576 m1919.126 1689.3576 L1919.126 1618.5646 L1753.526 1618.5646 L1753.526 1689.3576 Lf S n1752.526 1690.3576 m1918.126 1690.3576 L1918.126 1619.5646 L1752.526 1619.5646 L1752.526 1690.3576 L[0 0 0 0]  vcf [0 0 0 1]  vcS n1909.6248 1637.9711 m1835.804 1637.9711 L1835.804 1627.4712 L1909.6248 1627.4712 L1909.6248 1637.9711 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont1835.82399 1630.371216 m0 0 32 0 0 (Operating System) ts}false[0 0 0 1]stsQ1770.8216 1677.489 m1848.2216 1677.489 L1850.7069 1677.489 1852.7216 1675.4743 1852.7216 1672.989 C1852.7216 1653.189 L1852.7216 1650.7037 1850.7069 1648.689 1848.2216 1648.689 C1770.8216 1648.689 L1768.3363 1648.689 1766.3216 1650.7037 1766.3216 1653.189 C1766.3216 1672.989 L1766.3216 1675.4743 1768.3363 1677.489 1770.8216 1677.489 Cfalse setoverprintf S n1769.8216 1678.489 m1847.2216 1678.489 L1849.7069 1678.489 1851.7216 1676.4743 1851.7216 1673.989 C1851.7216 1654.189 L1851.7216 1651.7037 1849.7069 1649.689 1847.2216 1649.689 C1769.8216 1649.689 L1767.3363 1649.689 1765.3216 1651.7037 1765.3216 1654.189 C1765.3216 1673.989 L1765.3216 1676.4743 1767.3363 1678.489 1769.8216 1678.489 C[0 0 0 0]  vcf [0 0 0 1]  vcS n1846.2359 1667.8668 m1772.3436 1667.8668 L1772.3436 1657.3669 L1846.2359 1657.3669 L1846.2359 1667.8668 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont1772.363586 1660.266922 m0 0 32 0 0 (Security Extension) ts}false[0 0 0 1]stsQ1756.3216 1765.138 m1872.4683 1765.138 L1872.4683 1724.8179 L1756.3216 1724.8179 L1756.3216 1765.138 L[0 0 0 0]  vcfalse setoverprintf qWnvms1813.8215 1769.3371 m1813.8215 1722.6562 L[0 0 0 1]  vcS nvmrQ[0 0 0 1]  vcfalse setoverprintS n1803.8412 1753.5949 m1763.5168 1753.5949 L1763.5168 1734.595 L1803.8412 1734.595 L1803.8412 1753.5949 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont1764.988556 1745.99501 m0 0 32 0 0 (Proactive) ts}false[0 0 0 1]sts{f1 [9.5 0 0 9.5 0 0] makesetfont1766.303253 1737.49501 m0 0 32 0 0 (Program) ts}false[0 0 0 1]stsQ1863.3412 1753.5949 m1823.0168 1753.5949 L1823.0168 1734.595 L1863.3412 1734.595 L1863.3412 1753.5949 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont1824.488556 1745.99501 m0 0 32 0 0 (Proactive) ts}false[0 0 0 1]sts{f1 [9.5 0 0 9.5 0 0] makesetfont1823.287857 1737.49501 m0 0 32 0 0 (Constants) ts}false[0 0 0 1]stsQvmrvmrend%%Trailer%%DocumentNeededResources: font Symbol%%+ font Futura-Book%%DocumentFonts: Symbol%%+ Futura-Book%%DocumentNeededFonts: Symbol%%+ Futura-Book%%EndDocumentV1`65287 -149 0 149 0 0 7.501742 -7.503356 -2768 2546 F kHu$65i2`65t1`65%%BeginFont: Futura-Book%!PS-AdobeFont-1.0: Futura-Book 001.000%%CreationDate: Tue Jul  7 14:04:15 1987%%VMusage: 1264 26929% Copyright (c) 1987 Fundicion Tipografica Neufville S. A. This record % material and the data recorded thereon is the property of Fundicion % Tipografica Neufville S. A. and Adobe Systems Incorporated, or its % licensors, and may not be reproduced, used, displayed, modified, disclosed % or transferred in any manner without the express written approval of % Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated. % Futura is a registered trademark of Fundicion Tipografica Neufville S. A.FontDirectory/Futura-Book known{/Futura-Book findfont/UniqueID get8835 eq{save true}{false}ifelse}{false}ifelse11 dict begin/FontInfo 10 dict dup begin/version (001.000) readonly def/Notice (Copyright (c) 1987 Adobe Systems Incorporated. All rights reserved.Futura is a registered trademark of Fundicion Tipografica Neufville S. A.) readonly def/Copyright ( Copyright (c) 1987 Fundicion Tipografica Neufville S. A. This record material and the data recorded thereon is the property of Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated, or its licensors, and may not be reproduced, used, displayed, modified, disclosed or transferred in any manner without the express written approval of Fundicion Tipografica Neufville S. A. and Adobe Systems Incorporated. ) readonly def/FullName (Futura Book) readonly def/FamilyName (Futura) readonly def/Weight (Medium) readonly def/ItalicAngle 0 def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 75 defend readonly def/FontName /Futura-Book def/Encoding StandardEncoding def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/UniqueID 8835 def/FontBBox{-161 -293 1178 1056}readonly defcurrentdict endcurrentfile eexec4D463ADE87AE888B22F6B561B00126A70AF913C4319DB42E911ABE9C2BE086060902DE489F524B57A500225D0AC65341B4FA79E0D98DD94DD37BE563B6B6DE3A6CB6BD0EAEAC20791DDD6F5296CB664FD933308F8AEE54D077B23C0904427067D71D97D612D88446AD546945D57862C28EE582075308CB568A6D428DA55A1931B60AF68E4710846BFEA133DD8FBE4A782C75DDC8C1B05CB48D8C931590554B102EB3AF9D1E3024A5D86AB74F1112D40B2F0A812C498D3491B6789630CF52EC4B66D6AA04F12061718B290AD764CFE37489F3C4F87CD294F60D75943AC2D84D4B093D2E7D58FB675812A4F819622763524E95A6EB1130A87765BD4AB9E3E120D261511BFCB9199A39A8F544166FB8593C471018C7BDD98BD4EFD9BFB938303CB27C0F5335A9744BDB785A0A57FC8E522BF16E700A1CF1C41F63150E04A8E13B3F1BFEF3537A0CDFFDD1C7F7E250BA2BF3C94CBCE10DE13D54680BFB9BB6D0F73F0BBA016FF6E19B4014C1F02F83035A53B9711EEFD967BB69D0FECC7CD159649A9B9D4D7F3FD34D1E1FC336D5DA9A75200F9B11795DD8D35DEAB8DC31E342E91F034EF0C8F0D245DA2BC4A17D21619FCF4AA48A182EC3DBD06FFF84456F02DEF87B1FE130519ECE37F985FD0DE7E97151ED989A5C2D0137DAA7077BBDB96706650EAE7FDBAA303ABDFFB352EDA2025F66BF2B02B02995B42861B43656D79722228D0C795175EF2AC056669E55438AF10CC26D5D60A150E2D132DF641A197BD6C103EA3FAA7BC7A88C6B4A890B8C5A18F8D72F69AEC46BB6316134331E0835283C7DE1F2E8729F6B81ABCED2EE3B19214C4C1C5A574157B83472F3CBC9BCD54DEC027C157394C3F4A448CCEC378A6C4C039C437B2A114DF27B7E94A7F9ED82E4EC6EA830D461E089B3B65546A669716643C3AFA00AF984CB7A55D61AEAFEC0836FE87B8813648BA359C566D92DC1EE1ADBFB9EDD6B3401E7E700C67060650FB2892F85FED8D76EA9F42BFA29CF154F27BC027F7069D49AC4B6D1433EAE00EA035FD288B38AF16CC710BDCE6BCD498CB7F7CD9532B5F78E841F7A28AA85F0333AB2A3565C12E22DD1F002AB7752ECD7D6A560369CDA2B146A6F032307814F82AD32CEC56BC98ED4C6B7B40C3CD802F65F0FC0A519F96A172100B63263B3E5FB630870B3C02419A12D185BFEA7D30E5A0DA633C9F8CF05AB1EF444D983D25F1494D7C8ED25F6E528BA1C105D198E6BC25DC68C8E35BD0E2CB63AE27676F645C7119907D7922C0B5972DA1EE972B70F484269906790BAA2D6C798A878E0EB284FB3A5867453FD59607B76EC1CFF668C536B67CBA56E5549452985C39196E47B0C8B9FB11C30F7EA5473DE597E6F5A355CEFE7CA1D0EFDBCB9C7D0E592543A4151CE39F64AB10348D1BD3368F8460900D1B8DC0452696D3B038E4FF92F4273B2A2CAEB37050E53271433C11DD8C1E810A8CDF971FDCEE18E999F817D4A5172C3251BF654E74DC1322EFB44F4C18CA8E3000611D072F7D2C7D3DD4C0BD8F9FAF4D2F4362F1B75408E29138A98A95DFAF4F8A5E5F50413D9E410A7475A3BC84094B141EA21F0C965AC1D55C49645F9E72144E2929833C6D96B3C22160703464E323D0FA44BD958B285DEA605823DF368BEF35A304459E849B4FA578CFA9FA5C47CB4437F16010FFD5ABA3D4F90ACDCF08F2838AC00AC1925718581AA727BA0E5B100C3FCDF87826626BF0CEF7E51C44BB8C5CCFC80A21EDE82E432B9DA7F948B6A40B5069C62E68CA7CC2262C1000DF039E3CDF8AAE044004222042E0DA763859F5CCAEA726164FFFE081085AFA78A9C4D98976209F2AF215E5C2D6B1CC9B9093E1F9990481AF75EF3E36778C4287BFD07B90A0251F542F5D0E28BC5634D4AB8E0E3B1F8559C689830CEB0B6B2E327F0664F236EB82368A0635F4315A63432068FC365A56A0C65C8C92C71210CDFF5D331D9210553052C6C9E5D60A1A2165319560FB9C5C653AADE0521788DB0AF181EB0A3CA9CF5CE733FD33A63279418ECE7B4BB2331D975D3A8944CAEB337FCED22460837D950840B413E97E0E6566840F1009680C47B85C95E8944A1ACCF09A5AD3238E2ED31DA6A182BA8A11EE7D94012A848CE495AE3EC6CDD09A85AA6149198F9BB726018D8371A65BFFD99468508FCBB672C99D694611AF63DA94461044C8706DFB41B966F99D220D1970C230FEFAFB5F1682C8957F3161560D6CCC9B7C23E303ACC035634ABC2E35C00A8DC01F117E5F89AD352B8B59A886055DEDF85675E8D8EAB29E9843320157A4BEF273A824218BC80D4A8DB59D35788C00E0D38B163A919490F83B90E6DEC2507AF1A05212A02D331CD9C12B2F55B674EE9D2A6DB04A050A28466AB4540620CDF3172A98CEB9D140E4AABEEB64E6B6435D089AE6B0893B1D7A37898560E47E2DAA5ACCDDD062EC0200691E4A431BE62D6CE2894780648FB690901D964B1C29A76AD21C8971E649ED708E19FF489658A0D7A5D949C7040347F5E08F7769FD1DD27CBE30BBA2732877FA4C71F797F17B86B4C6E8FC8372019A7E2321701F81584C87B5E843169505BFD8FEAB91EC4DE5A8EB4AEA02BDEC80AF7456EDCC4B27C5C38B86320FD69FBB941386CF0E056564521077F2FB332A939ED9D22DF4440A0B4C8CB8DF11AAC0BA2AC438695F28D11EF154A08F4CBE908949314C929ADD3C9C9776BA8DC3DD17B2ACC84D840E70E0D46BDC2AF7BC997AA4C03503F508D85F8F3A4F267CFE4C05C80C49293E18913854F4BC15649EA9A1A0A76E80D87F824EB87357C84877D83EF497E3EB59290CD0F698B1FF814076B64C1A4FDB5449FCA2891C1ABA035E711BC9C48C48B8123B7E3B608D6F0B0C43290B1D3C77E02B6F1FAF93178DB5787DDE56EBF69CC7424783F95544DD18956BE5DD22B51996B3F6790579656B90B87668CB57D5EC84D9757392D2CE8E37729A8A22744D602503F6BC297629DD687A59F0C0CF5F36BE4B3442AF7DFE162AB23E0884B18B912C852D2812F7F35E55B9990052B8D283B498F10A45FDA83C370038D0844BE480F8225CB272DBF43C84B0A1A50B54C5474BFD78A8CD3A9E17C4AB96FF59DCB1FD40B8BECFE085053AC083995248539295284B158F15FA5F41265572FAC114C556A74AD8274FABBC549A3702C4F20BF78ADBD1F18D68664955E10F3432E72837E46BD0A30ACB7ECDEBE35C0C05B1A76B967EE5DAC10842E9CABEC9E35DFB38F5AF6E941E70C6CD99000BDF8C5B29D9DCC10E62F8C915BAC5A91CF97EA1551C18C4F7F14C4DE79092FDF9341AB84D02F79ADBC9EAC8178984F519BECD91201FE4459EBA7E62F4679AA205E03C42B9268C490A80C62300A345EC19983899535301A10F1C35BB179174A77B7F6F68A797401E740E4F9B1D89F3792DBA47FC5A3AA29225540AAB0D3F153A665F1DCEF9BAD40CD897AFF3C98F554868EC3DD9C23282FDC17E6BB291A964234A320DF9CF093615C445987E4379920A0EF96C16D01F686115FD1F58597EDCF89812316E4C4CE83FC769A1745C8BC0C3C119DFCAE79A597A2E9D277C18C381C38869C798B6C6E111EDC95662E8C4CE2AC2088ED1973D3ADFE81CF0C0E2ECE172EA64CE73FEDC907AF6A7E39167A3E1F89438884A15EDEA7099AE2E1416390CD74682A921BA05C812B6C2B6C2DD3F25D1E7F981860C62DC78354CFA3699D4F6CF0D8CAE264A94B8D2B3188A55927B1305C2943D223F94B443FA401FE691D4ADA75B68501F82269B2F78CD6BC2FFD018C984602DDC56B1E883B1E885EABD469778C30F3A78E5935C48391253254B531F13B824524D2851F27FD20A19E2AD4CCF029C2EF6DC0CA5A9C1B61D7224240AEC3F76D8D7CCB53A1C13F03D0756A8D606FAD3FFF55194390094EE5E06F493327F5A4169B06AA7CE95DE14D2F6A13CBC0EB3EACE83903FC185F2A1206B9CD690CCE42C57003DD955C797B68C47FF96539520359368B6AA2B344041B4DF990585122CA36BE96D3DC9D80E75D12FD86BB7CBCBCE16FD94127BE59A200A0CD7C8DDF08A66A0CABD6147CC1E00AD6B856E9BE01A6BA89846BDCB43BFC0A910BEA5F1926DEC6960735465B0D529DEA85554FDCF50AB87853A3949DA62E12FB2E3849909D30FBCE42EC03BEC1EEF28C3539CFDD5E5A890E7E487694CA0186539656BCF941648998B4F567B91B7FC38DA915FE866FF77D6090C513C20C5882C21CC78D6686D8A660AE830F86219A2C0FC15DAB7B7C2D0AD6004EABAAA6E6340B8EB9D26C7918187E6D3C1945A136DED733A325F759A12113C51CFC818E1AB9BDF8AB4CB1E98F7475D49189F1B215B2266E158E29A808BE2D1979E9EE28C3F6723E90E176A34982A641DB65AD2F5346FF9C3AF8D300B3F2158FD9C824E03703313FFEA237639D7D1D3255D7C34500E6296D88CC4BAAE911AD0DA0114B5F98CC3362C274AEC260A416FD06DDF48A5182FC7FF96622317766B17E7849F70A045F6612E8CBD06000C02AE69C59CB0F00D146AF3DA89831F135E36CC4CF8A5CEB8ECD16BB0382A3C637F6E0CCCEE77E280DFEEB51D49F462509C8175B3CADB023B56C2084560CDA3F01F17A4C84A18A410CF73F5A746A0188ACEC038FEE7BC2427DF26052D51F75BF533F4F66EF2F93ED8686EF38F5F341AF2E6D298395F8FF4CC2258867BB4605A689B22E7A37C9A6691333DBA8FDAB161D9B807AE48BF7A5D4F3D745D0BF210C6E79A88A4EC31B0120CDE7FC8E1EFDBB1BDB25E4F0660D6F02A504DE0DA8F4094F24CEB95987A389DEE3AB4E6AFABB5B04B63974D1F569B5A4EC8B3AA794BC8B59C5C25CAE60DF6F2548C15F59D0BB19ADAAB3BD0AD91C2FAE3E55D128FC16FB1EA7B7B1FC976DFEC805BAC62DC1929E1BB1D4C070038E3EAAA9B44128D94550C15949509EC2859C4C3BD4B01384209906E1A67B196C428373B3DF725DA360925DAEB249DF4AB024634981B3D3F63DAA3104FF742F9200B13CCE9A93A095C6F5CBEA2239CA1A051626DA1AAD2A2A97EFB03121CA47A80E9BAEBDA15C57866BD94093D843C41F98E85CD94B24FD7D8118F2BD147086881C303808F04C38E8BD2D551EC1DBF67084872542AFE54BD33205B6737B142AC751AD4631B77CCF35F9457F2404319608B846871301ACCCE38AD5AC609CD324D242E49D304311BAE9695F3FD50A8C8C4E7B91965D025B0CCA80E1D5E48A27A808F307579D89D56A12B8295DB72601D0E63A7A29E21E860D30057EEDBE0DCB0F8A42AD28C711465203FB4EFB4897125470B3D7FF0D82F2E46B4AA685D08A531C450FA70CA29BB03897CFCBB5CA88B7FBB6B105FE0D7D28E5B2E465535AB32B2F2024E7B2094DA04E708A582F81613482C0A51C92D08902F47FF2C7AC7B78E82AFEABFBCD8C1BEF50462F0F5C3412CE834FA0DC4D5888AE0F1C1F51A57C75064B1CE5FEDA50A00999D3A2D34241CF408077B9CAC2AB8F7FA424C98F089E09EF1284944918674C6E9775725A14BD334FF3160E85CF476D0CC6BC2601209D3097CC6EDA985BF1ED9AB637846E1F2D7AA0BDBD451D9043CDABD9965D2CDE7872846F1570C103268E36DACD25AA2BD6774271C6358BDCFD2C56EC6DE2E0F1FBE02CE3A4815403DBE5DA16AD59958E98F0BA57D1DE3E930A2066046EF80E2D3CEC63C6DA7AED62392F339FA713DC60406C4066436388793F7177BD0993A01AED2312CD8C3C67DEE1B50A7BD40A8732306657C5675D8923629A68BDA09135923EC1450F23E334137EED8C0DD3312A0B8421B2A1C590625E93ED6FCC415AC0275A09C2DFF34BD379793DDB9365B9B0B901CC872C13CF6B6C7B0A7B3347BCB821A8F476A0C7FF5670954E2F53100AD51A8EF9CD9C334BD7CF6575FE598D2D1EB6802E520C59376FB18DACAE09DBEBCE7F7B005851C10890A522464417FF9739D387063C61B973EA96FEF28115D6A60D29406853FB9387E07FF1E26457983B1FE455F3ADCDAD1DC27AAD7707516224A7F330D8C2A0F73A0794E469F77B290A010526074A1B919013C2AF1BF06F9AECA362134C3C08CA3AF8837F390A0384C13AA3B5306E4B82371CD5C5B6B943E07EEDF5F6024980D1EE5B2EF74F68854B1340ED62C57529A97654062B6FFB7E5483790A549E19F205E25624AE98845AB9C983C7970BD4695146770E48E423B16DEC343912AA76ED5AA7BAED4215C926AC7E1E20D4BDD206AB5A4B841D2121986E514B470B2F8D79B7291932742C3F48EC23887DF46A56FF6928FF39B56CC7858DC5EE92A6E0C1F291666E26E9D39AC20EEF112653A0C405C55B6413AADE5A392C08D64BDF7C9CC2E504954FAB1B0C8FAF50766272B5A1EE89AF6D33BE15535A16368E1BF9254DFE4C3A856187CB18A8BBAF8607E5C08C20A2D51481850CC4A21DC51EF448ADDB1671089AF3D95E3D7FB7802F3D557ED27871FC6668EF85DDA903DDAAAAEB4BF4BC43D2C03C4E85A392063094363F70FB08ACC8E43F10D96F09568F5F82600521451E893DE10AF1304C3ABB63154B4BE0E75DE4D74D71580B353A540FEE6755B2A7A81694E5C1B64D9F62ED45B29905AB46D4A16866F1A4682FF4B40F520592A454FE402799EC985515E884B967CE6D0214D6C413232D051F68D36D2CEAED66B897EBE1434CF4FA0D31D2B6AD40A8A63C4E3D2E01A4D7D61DC52FB89330011DBCDD0163F358EF82597C3795FEA66CAE82632326C5D8831C5D5F417E306F1EEFB6689A4A682ABF4EB3DF86C0FE44CCCCF1908B1AE69CD76FE081CF2EEF4E486624390173DDBA68324531D2E426AED152E12301D3113B1C1319BEEEF9F155FF8FD0867DCC5F502083F70A084E4530AB96BA76E97F15603FCEF67FC58AB9CC1D26BE608042B09390240719EE170884D702E4C7FFA7A9F2C250F62E6AEFD9D7CCF7EAA9CCE3D3B6D4AB5FE7FE5D7AD4DC41B55601A3EFD258F616D4943AFCA7CD4D1C018E0AB252FFB925BD7D1C5CC16E3537F4F9F528C4F55589D5B59FACD280B8EADDDC66411F0F08B5386FAC3FD779BB3C41C88EC74015C3710BBE819D5EDB1B2283621D78477B8653CF983E8E016D129A597FA6381F31A53F05050D5E848A3B6DDE8E511EB5EBF039A4CE8FF974B6C47729C17072EA95484AF7496AF020AD131E67DC44679B3C60EC19F51A6E783DE3066313976E514621DD618E22E2609C8111B8F33675B408CF2A84BE7FD1656CB6AC044246BAA34AF1FC1E300E2D830D1D819B9A10D9E979790E65BEEC934927CB45977CBD750A839EBF772D33187AF2C5FB28460518B8F6367A26EEF6C10AAB5DF406DC620E4E177A1605B64B73E263B7268849A24A068FA148670AE291812886A9F6EFF55C24E79ECBF64611BAE9695F3FD524F7F1833CAB70D4313BB494453961BE3464E237ABA87462DAF21F44D9366E775F2BDDC95A23718821A9E620BAB39A4F36BB42AC8C9D27D93CEAB7BAB278A3E20BF6C429434929A253CF8009E771A6B808845C634D9A584F40C5846B0B8E6864186EC379E8FE0E4C2847AA5B01EAB740C638DDF0FE606458D20454EE7C3161C1399FE778827222967E3C9FF5EF6E2B4346218915812FE746129B037B005F4B13EC22E160FA6AE060E6EB11AA9E3D993C1F8A613E2BF85650270ECDE4D72D185EED5B9C3A74723346BE617201E7497DDD2667B5B1991ED9A6DA34A77CA29A80D2D4F62DC61D15C9867BDC23F6D241BF54A7546ADE5FA46BD1CC1FFE1C4A5E9CC90538CE931BD077EBCC0A7032864C9916570279F97547AFFA8689FE5213659797E1D65991420940A6DFB4A29A923E34F9241F58A8D5BF580588F82BB10DB530306B7FCA2C0DF1E020790534D09A9BE481AA672B92A5B9F9FF687E96ABDCDEC7CA9B577274F416E063C3FFCFC5D184F43D67B6246167D10EA75B6D83F77678853BE927238838E4A9454D2FCA6D60FB87393FF350ED6595FAE3933A960D0893FFF21520DF82B89E1E17F40DC135825553D3859B9CD11BD2DE2AAB439B7F90C03A06C3823CCE5FCFD0718CD2C29E13BFB46F40D3F813B35EC9B597344822CDE916FC57E25235EFDBF7E51D56C22CF37FCB42BBDFCBBD285F4BA6FCCE8CC8CA80261DEC01E40316B184DC29E0712DBAEE7986E10C2D8C9CBFE02D3C629CAAE7696F248F026BEEEE82F3C7415A516E8460D153A562A9E745D393C9EFBE7596702CF7C9334D329474335FAA847F88919E64E93217607DFA33BA51FC1BF826DF5C6C8E8220DF6D1B05527C53DF91447D18063572C10B233EDADB3703FAFE62FABECA51832C51DD230F4B629DF4105A944185D99F3323786B2B95853BAF9C9E4B4A0037F8B6570DFA16F2AFB747D0CD07162A889D6176951A04739B5EC4D926876A97A17FE233BE055BAE00101AF2FB39602F8055F98A11C1FBF8520733E09B263FB5C9C8C1A9644922DB2F9658531A31B605812E3E72EC44AB75A7EEA7A442A6F098F83A204535F8180E43EE555C73A17B44372E4C019A97434CE7617AC2C11E68ABBC132732902F9FC295AE1E6EF410AC7DEF3FF5117726EF772AB4206EE0A9BB4FD2C34BD0330B995E85FC77A9737D8D3B9530D5DF3D423F05AD1E099EDE198ECAD24B3972A547288B1C652C75634DB8252ED0D327C3CB56DB8B6A1744DCDFEE7B99CD18506B33F9CB8A497A7ACF9D5FB7259887A04F18FE84C2156079A0CF10E9C8F39116E62ADF5EC244EC402964DD19DDF20100E6CB7F3D37C49822AA2FAE9D6D3D74EEF8BB4785408BE7819BEAA49677665A546A84913D461E85BEA745561E23376E753A0BAFF06410D6FDFA6F9A8C24D1A37A556A6F1BD49BC627439B70F2DCE17CD47D7F1EF176FE207BF80909B3BB3B1436AA20421BDB60A25FD41F98B50CCFC0A958C13EDFFEE6BBBA60813CE4754CD2AA3B79B66F930105D9BA2452723426817CA1132FEDFE0CC17C20E5DE7F3C31E880C53332359B8EDE16EF3A50EC14A409EE405B6D1F1369FB8A934F9CA9B2F0132967FD1055553066C63973D277C764EAE56328D0D0BFE8BCD0E5B8C47AA4FE69A8D00BE79D0342454C7D39CB76E57310333728C6991000CBFBA98A6AD1688AAAEF38EBAF4290F2BEF636A387FE5219EB62055945452B71F74AA516C6C507DA5BD9DBC7801FBF39463AF76197956BA8C5830E1D528AF56CB9E5EFD7DBA5E8019285C1C090E82F30E6B8E15BB6DA80436E9BE292FF893A0005213C411E6B47B14AC846075367414E21316565F1E5F136DF6435713A0A698311E75D8358D0395320656F65E9CB7594D16D29DA9B0FACA2A4B438E37C50054BC7145FA6446656F2A1291E57BD0414FC98F94A6B2CA2C483E2048DD98FB48B81906AEBD0BBBA5E9EECE9B3B5FA70075A9224F26963ECAABAF1A04D1EC30EC517F9D4F1206511D012E7ED866D2950B555C11162C958F38EBBA383D194DD2C571B3AC36BF04E145CB30456492D7CE9493C5305E9F738499785B70F54890B970901535E761CED3765856FBEF035A7FE718158AB893D7084D16B9C4E60BBBF81F90FAB07460DEC39F81566CEF7587AF53A92A371461CD8572B3C6EC6D189B02AC7D1FCA5B2A1EE6E4A8283D2FA421799943ADBED7D547224680896600F7B4FF57C58810096DEA7EC6CB9F71D30A24828A1D836A7E18C6CB7DC9AE0A8C791CA3A30221FA022D496FE9C4491A409DB536374C383419DBEB455E3684816E94228130ABE5B0ED19C220C8E4EAA107D6A48A8EC2DC6738652D02E45AFB2A51561472F852A6C685DBA626F4C946F89D6E1CE1481439FEFE49249D129EE07CD397E6C4BB6B99243B968BEAA0E34BBDB390EE0D6D3CB7A2B1AB41C666CC2FA40F4E209039D69116F98DA47018F432C8260A06AC751D8FD3FD63CBF9F3768609525BD879F653BED8863A88F5A67F59E20FB5C8BDFB3F4E2694AA44703BF0BD4BAB688316C87C056F14CF952276EABE8D8D5967C2344F30BABA87AE753ABD6C0BF90953EA64BE5336ED9D789BC7AF573683B84C3C32F02020824535C8170D8224A7E5B16680426A868033C6ED1F230104971CAA464EC35B3FF256D16F6B8E7897EDDA50E717ACAEF64FEB48585BF524974A406FEFE14DEA214419D1AFFD4DA3C50583FA715B1F5929311D6E527F4BF58F674E9CEF5A86BD272DD94EE8372007387C6D4419452B3F27DCF19AD5F7263CE9714F86C69A6FCAF2E36D484C70A7BAC9E006B0E7F2B4633640DA106E59F771063DE5CFAD9E5B178E9115D15E79E128C9DFD2F6ED5F1E5567253A9C4100AFEC85648DE7729BD57A1D47F65F80A21FCA2F95B06073134BAE5BA74CA7022875A32C123FB25422C478BE98D6C45611524AC5B6A5A502E29D7086DF386206F420E2AA68E67ABF0E51F6C89B677D8185F02D13BDEDACFA361929B8B31D3A0D5F6ADF86D9060B86361EAA4D874AFCD8BA2AFC81D3BD4C54B92C4E389699F2B737B2C24B9C59EB60CB49E92171DBFB6120FDED3B9254928079452606B4D14B0FA618F4632871985823B502FF637DDC680AA07CFBB279B1E2B0BE6F0FB317A477015FB4C5B87A0B55713B90886DE062FA1779C61F9A333C41F6497ADE0FA074AB1C3543F5A304D831B15438463F90426960C56297C56F744EDFC20C0E43909698695A7777E1891AC161E1DB2F03E8FC50F73A9E6DBC43A64DF502C9C572600F1FFD449FF3DD4F835E3585CFB22E6E3349C4ECA7BC2D332C1433D1A07DFE864BC918D7B4686EFD28BE0293A9C5CDD2CBF3EAF746F0FFAE9D628F893ED90535FBE000627BFEB3A95CA3C2381B73E8DF7DF8DF65664EAC7FE2BDB184649A17233F116533D96FD61F0FAA6F007EF62E00A8D185483321F4549B3E0E81F097D5F352FE2A719389C60A75CDDB8A6FD80EF7B3D3C1361A0A246653A6ECFDDC16FD1FA67754D8426B3621935AA964F38C00CC9DFF47BEC65DC10D33A76341289AE970D36F5E97592B44215AE56E540438FC03C3C1FC6B0364391C532FEB6DBB9D3DB60119D1931657F827560B60F38D8E37C539B83E01084A8A096568E8BBC2373E3B088B0F3C1018DB3E70A288AF9D30B56BFF1DCFCBE420C7616325E7847E3FBD837BE3955F03123E2CF544ED62F8A8C180B7B9A507E846DEE93974EB21AFED712D9FDA4EFEE1549D8753516BC5C8A2F204BE8AE1D7908473622A8CCA24008EFDB83966D7196647F3B1C630D6B29C3A87A75DD5F8DB26B8A92F4FAF8DD86768CBD9BFCAEC35420A8567FAB42C4108B8423C9DD7CE455BF1467C26F3470028C604C0B8C8CB6A3F930EE1F24B396DF1D6B2FB3F889698694FCEDF90AF7E3FD38F3AF7D2E7333AEB0D8CF7FA1C6C881777FE74E9EF0F9D9C5BA3EB77EF2FC201F5085CAF16CF0D232B99EA13C079879977BF831BC82B9265A89EB6755E172DE3B4BB66C97D6DBD57335C06AB90EECC437371BA62822388E53DC398C6DB0DE48490C6A33D8E2A82EFB58C9114F5EBFF4B7DD61F54A9BAB42A48E33F6679E82E65216F16EFD884E7668ED57F4141977290AB68F2BE40B843FB5CEC1E4D285D23BE97ECA5E87D7F16D9C047B5994CB8E1CF0A4578B8AC3D50C29E22FB522FBE7E9D0517EEFBA1327EF7CC44E4ABD310515F192EE81F1E3EF184D7D0871E3F37455C8B3C4163E8EC66008F6D3ADEAF9E6C25A463578DDC9650CAC5ADDE2F9C6BD1A2183FAB58EF21B1CFFA854A5E24C2C024A45C36423897B081595238B74A9D9B117C79CC48D594DEC24CBC62482DD64F99DCE908566DA665A3833DB943A4DF367538F7E86671E13E2809BFCE8E0E5198EDBAE7DDC819FDA2B08536570ACEC4CD40D83BD9BA460239B8460BDC35708F6494BA0F3B4D41D8726936E3E1D59C694111E279D07F09885505C553BBD9BDB782D3D1F810CB3EB0ABCD7DC1E4DE91A03179C4FCE85E315F57C8E830FA3D9600E72F1F7B05568DB3A4E3CD29D1C2BDF6B916396F692B40062207DA2AD0345C2EF249C14C335528C4F65907592EC8D3C93B34145D9DB07211398E9CF707835994DC559F9B807C235A48CFBCD2B3E5230298C438677D6325AE5357DEB349BDFEEC9AA24BE84304F174E3FD28E9F2812DB3483C57AA31254D88BD6CA7070F27AD4D7D9FD4B8B976CB7BFC3AD648573E0307FDCA927FF62B5CE39622ADA1311DEE6B7FEA2FB0B315D204DD7EC030E797FC3EF048CCCC20F86480C1025BAFBD3A2C6BB97AAABF050F44198CA5A84F50914667346A897400A1C4A3E04E3A7E9F31341C293D6C71BED859FC80E4CA7A84A3A1DFDBCF504C5CC6505EE8902016292B27D22C9631999C21CEDDB4C5DA400FA39515AFDB8C0DC1AA22EBD21FDF64660480D92509EF882643BECC3D7B5376D66C27E491B50ADA298BFCF05A4C11A2F6797D34CD8088736F3F9B954FE126069542365D292BDFB804C13B61EBEE920CD5844ED70964A732BCD016DC7F5795B0CC14EF012B6D470FDFC7278DC387F8D08486686DE8E5211B9714A598263104AD9F5FD966E7BECE9E8AACC1444FED34F9FA3BAF6FBA4790986C3E66BF87E929ABFCAD617C49743AC74526AFA9C4880A196DEFB1BD1E5AE58F0EDBBA54838B55C6F039C32BB93522EC707987125A2488876973F9E6BDE2C01107D570E52B8915A6299472B5A379D211566B7CC1CB44B17247FE6E8ECCFA1C7776605AFF3BED3D48A9E47B1B3786751DFD7CADBB2F8B8BC46CD249068D482DA0D283B11B413D89ED4C8792DCA6BE375E7900BA0AC914D9343D051BA0C3EDF04E7E6B0602D6D59C165FD755443A220A2B854889A78839E3CFD285BECC0E49E00FB97D1B96E805C33A6698FC151A31A42A67829F3F704408BAECD0209F7E09CEBF0F285D7ADC1BF952B3728847BA0CFBE9886AE33E89BA110D73175F2C4FB412DFDB2133A73AD1F309B3DB920CA7494B26595D3E2195C9DD146B379A4C3AFE0114CD707C1356447560E3F2C6282BA40B0E5B2216D44EDDE2A2BD7964AE0C621CB5D2AC511C8AAB804CAAB909216C8528BBE94A37B3ACA86651A79247F0637AE03AD6CB3EB2B4D36B1591A3C0F144731FC950DAE9811061CB1BB41065E8A3385285D9138D616E6B028E7BC7143538D83823BF2FBC366D287FD892AF2792422224D927FEE493B3363CE26D13AB2DB6641525411711867CE6B22C2FC22E334E27C995B8F413734718882DBFFBBFCAA1E53E252E13E94F43550670F013CBE300A8DB50301A585685BF7E0B627E7094C1450E9B5C93075D5AC9F86C1813202A3A84A06A270081D854D497BC357ACACD1EF8B10CCE84CA94D7D25DD36FC9F5BF62D81E7949831004A94522F7A3879FBEFAC994AF6F13DA9D69CC59439FCD2A5611A8420355EC5206DAC450F1C438DC099A79311E96EE92B88DF11D0920C6956645C31883FB634A270A8058D2EE220F17A119C5D1752C66500FB48225C9D02AC595D0CC2156C8C9DCEC2039EE4BC6968AA77F1AFCF4CA7C2707EE6833B305881507C449ED119D16B66DB666A143A8B2E30C66C6D76AD79EDE8F467F0D47EFAFF500399DAED2F4E71A6E37796D3BB7CD3CF0B7BCBFCA8DD49914E1531E5FEBCE9335105B83386207320C838EEE9C38079D3FA9D72D11E04F8C7329A74F6AC4EE068890AA61C36FE671D8BEEA330EBBD55B481D016BFA74AB287B27B2974D1ED84EE42D758631DB3A7ECA2CC67A3B0C74CA929DCCE2CBC14CA1800C11A630E24F3367E0452D69315FC570D76D0F6E0BFE76C9A726006E5F3D4AB6B038C15A43EDDD181DB57BC0141BC70C853E6413DD6E827105656274B8FB8B1AE56B2890080128D7FABA2328BD2186E48F3749539EE5C1A8E5734ECA06F98F8B9A44C0E89054F89355587DC740F50B9336031E0A3306636411A283921712CFD314CC6F831F72AE9787DCB396E2653F3CE586E4E7F1666E5589020E06BD2CD9CCC89BD545065D7BBBD6CCC85D9FF084F5810B79627460ED4BC430085CCE3F86B38A451732ACDA796A7E87423215D8F6836E37F25951F9521CE25C2CCF1A7AA99304D95EF6B911377C40A5CF7D6470F89B0AD2F307CA11650B7CD68900072EF19C0C7DE9665544E7F8F4BD7DD5FDF21E595A6626DF314831CF46E997A0674E4F725D64A6BA3F9A320A44450C2E083B7156B6532A227290B8876EC91941066B041E14DF557F2C4536EBB4DE163B0E5935BD3F9676C8807EB8AC89CC4A6B3D7ED453A542DBA35B326105CB75AF7311B47CDF6AFBC27CB9BCD014D150BDA56EEFC303C2DA6DF655001A1788F64F82A5A504A96DCF7B2BD90E1BC1306B025F469398BA40C649BE2A950086F479758BB9E7FB6D8171A7F46FD4D683E8E935146BD2E6E040E7DE0E3B412F2352C46FBCBA7F07FBF513A4473E9990CBED54AD6764C04E266851B5B92B6735331E78FD1BA14C41248E58213B96A4A67416022193E3C4F988C5F4F74EDE5E7E520A41556C4B932F4597DE37883A7C47CBA0BA4C3B3C9C315275DC9E295067425DA08A7DCBEB617120DD99D175E9E4F987065280B8FE55C063326157B9475E19EFC36FF3DA5C8CE756FC5F201FBA7F2720626946162CF3EF495D12F1520235FA7D553F3E2335B33AA5CDD15B60F59DC8D077DCDCC7DA271961D20FD2CABB84373260B10F81174D1D8E77DD923A32EBA80A6D6D3DAE2645E4CB2BC2D378394B7C9D1C85EDFAD7CB15BF4D3E2155E076C5D0A23E71C3B856DE436BE7BCBDDFE29EB00016C7317C5B8ADD6ADE8532C2F72D588A58E8EE5F9BDFA0FD4F5FE4937667508B65F12A4007639F215104CDEE2E35E2C33ED0B3AF17ABBD7B4CC1DE567AEB84964B6DD0F7D293086EAF4823AB0586133B8B90BC3EC16B618F1292C9737995F59011DCA9B0C715DC3416C742EF72F8064664A08CE2E60D169E9DD9E32FB79639E38DC3F0D628D771EA38FE25D0FEB0725D6A234D583729CC2BEFEBE8F1CB8899F7E0547CE7A31CD86C361C8203664451DFBE1305ABA7E4243E0DEA9052C16F7D650DB6F0DA77D29A73C61577D513A9654E0AF570C730A41C99C501992658D341BF5E53B5A638C4F885FF7F36FBB0C40A035B25AC5C44EBE3511F075A4F679D2E62A6A1A90FFF246A61BEC073E195723A195C4C395F86EB05A9341FFB84F12AABC69C1ED3C7EE07E3883DEB20C70C783BA8B4E6FD710E6ECFF2321638A9A322AE9B1FFADB8FBB6D9668C41F3859D13D37B66FADD1AFB3E078C01D1DB88AED0EAE09A8D8781894B9A4D905480D8796048E65504E61A625E7749C7408AAEFAF0BFB14868486E10390B4130A5894B580CB4A649F68105AEE4F7E3DCC0175EA3738BC8C63033D32586868AFDD84CFD5976D8AF7FC182E0A700BD60A9928C4C87160C1DEAC7FBE4152F566CD39922E9674567ED23D12ED694E465907791D20E3CD56AA05E72DA65C598B95A076A00F35FFDDF8FF7C4C70C1CBE990A60B3A889B6E0C454C892F9EB535B522A176B7ECF2838541F7F3519DDC8E1430F7A871386BBCFFA6F6E5DB8C03815FECFCBC2E0A06382C49DC50552E51D8D702F10620FFEB20ADD2D4D141492AAA9587C58D45970EC1653550D8536A6137854CB1C9A480EDFC1400F669CF2F34E5824BAF22D2F9630A19D600CC9DD8E693390D4B278DC81BD97007C5644B18AE47A0867E1E1F15E5BA8780AEF7C02A2081F8E4B03D84DEFFA910596E0D9E6940BA1CC18D668891F942F9FC2A542CC715F0FABEBC4A953100F5DD4F12FFE220347DF01152138A3B073F73473E96D45DF2C24B41D207057F790584AEF9FF7AF323891369E6B6EAAB7F51EFE1121C521A51D7325DDCBDA0718DC775BCEA5823D72CEA1DCD65E37D6F0E4046BD56C2696F100294388F520FB57434FA622B77D174FD46D572AE8A2414785DCC4E61024832412A86DE93D6F9CA67561BF27B9008F455D86067EE4CB3B0C89A6D5BF8D0E5E9927A1CC721C92EC53F3DD6C31B141E08B3B761EAB43D09B1D5BA16E2F96C29BF4E7BF384C69396404CAFB33465182EB167CE9E15ED814B7C7BADC52CC534C2910DA76B381C55155780509DF69B8F2C8C1AEED5E9215BFD022C498D2746E964C70C51C58F442DAC6993A64B8EEBF1BB017D2783CD37A28172ADCAA105FCD8BA88216BDE6BE8718DA4110D6220A50D5F6E961C9204F83B983D9ADFADF682E4182BCDD21A53757897CB97B5D904631E6C41EE834C4AEFE726F42A6EC8FCC0FAF78B5F14ABBBD5C628D51B280229924E1D4071B449612753E64CEC73D0882996EE9832E41A8DC35B9FD30BACBEF711DFED70E22A955B3E78FFEF78609B0EFEB4855DFF729CCAE28CE351670B75D97549864E1ECACC99E8061565D95C67D07DD25AE357436561FE9247935E513C1A5ED25F21B0D5A6BD24A3367A7D1286A179F138E21C798D7AACA4C58E69EEA6DEE580B62F51ED289CDEED78A64B1D0EA1AAAD4EC57FAB0681F6DE8F35CCCE640B7EDB8A92095F0EDED2B98712CD2ECB65A71FEF082B35D275CBA51682DCEF96746B56B7F04BCBD81CEEE01500BE12C17B79E8A017817543BC58DEFBBC694C795ECAEE592510BEA0E4D8127373FDE6229789797C26C5FB2140C8F00D5D4F06E4354047B0AAB75DC03B8BC4D1AC4D717852D8DCC1FB82021FBEBAD2A237B58239B660558B9BD5C436606517D4CC0A7594C3B992FE47FFDDD05AE1F56E59403BFA2EC3790FB16159C15B374FEC6F986AF5AB20AE2B2D4731ED62F69D38971C2357ABC289694754574460738874C4CC187C9A85133BC33CA62E68AA79238E7425EEDD68945842C660825FB35F7B92AE73BA332FECC659A610B4F5F2A971D844D0F73F05C03B2654FF78246DEFB6E21B5CCE035D847FEABE1FD3CBF0BFBF16E4775FF7D4D6188EC8AD3145205AD39170C19D0FBD6FC776DAA712A5FE25F0AE647106BA8D2D8CAC7C2027178C0EE1498314084C6B594D64C03121646C25773B7DF404CFABB327F698E08C215EE98175503215E45FFFC11FE62EAFAF02B94AF788AF3EC4899A447DC30F665470AC5A55730D136BADDC86640A65C5D8723B4B65C1EDD0CC4771B3C4C23C7DE1A2BA73D453327330F89CFA41855537A3158AE88BB6AB50B6F67439C50C9952D28F3762D94A8D34288C9371D9846B0440D12661D275B067F7B80A6E1702A4F4CBDF4EA38012724CEC4E1DC023DC56CC21D0DB40077AE77573D94DC0DD48BD50CB5BEC68F6033D0027C3D7962F1D3F9FB56025879BD25520D06E024E17BDB22DA3C2B4B97A1A95696C2BC2CB00AE655E938ABA763D32FACAD36DA250F3D5B0D4600C829E154B534BEA69CF11D6E024E79CD8A49256CA07F5507678C61148610180F85F8BF54EDE644F76FC9A901F4A95641C32D84EB75AF70BAD6518D3E46D52BA93F3C2A16A176B3E18AB07FDC4A1B35140D88F5DCCD19FFF4A69B9E12BF29D345ADCFB791AEDFE1EF1B775A691B673FF26C99C6C1E65D331656B70C11CF9917FE290F3F90ADA33583BA955E741AD3D2E09FE40F46A3DF34A9E06865373A8DB733104D91563C8B0DE3F5348D3A7D95E088B5789516BBD53C0C8F47E0391EEEEAC6ABF5F01208EBF0DD4E1E3DE23987FB5155C60D9431644099CB09455CC44B926763F69A1D6D1B872F672A48A209E2B65C8184F5434F91B03837F38476138B41FD224D369A1BBFE764280527491D9C5F089CF23D50EC6D85851DA28D35832713F084584331C6AD5304B355C2D6F0A4954B9A64C732961D3A957A6D66FC29DDF7F58CB5E3619C5950D938EFC6CBEBF79FAD6E1784063A6EC7809246142894C655F33B8EC9CCC8F183CEC807A1483E7F1A5E7EA4EB226C707DC4277E2F2C7CE66AD0FB74351CADFA03AA215AE374CCFD8F38CC7A5B68A06F6510FDC6A643A29F472A2089DD966544207882CE58DCDE599C45A825A6242A6EE3CA2605E2F06BDD4AED1CD4E10C852B21E6CAB7DB282B62B80B7E1306F5A21635601F7CE1C3421CD91970B6C56DA09888C0DAEB9C9F5D71ED8D9CF7E205552683AE47A804DFEAC110B0F98BE47354D0907E289DCD2F4ECD48B85A56270A53BD741EA808EBC8F8DE95F810AEA956A5A6055AAB9201C97D169C68AF925CB1E376B8102EADA94AE4F074C2B2030246F873594ED958A07BE6F0C77256B0F9CF5B623B1023F80AEC7C29360B9054F61743A0D2BCDDA52EB75487CC0E4748158D947A61E2A2F6DA2E01C573E61ACA575A8BE651860BF8EC1C762DF8475126A715B64CA52A95324E35EB014AC86C5718F191F933B297A011F6604B36B80C3465056E725C40AE78012B9D7C301E60484413C0D8E01A73130B38F3161CA48F0A212955F6D5C56C55796368BE6453CB5EC7161218D0A8C7971B1A9335938D49CC24257C17596EEFE31C19E92487D9B4A9B5BD152BEB8E64D34B94CEEF9008795F31ACE3B5E215A6CB1997E3000D8127AE236EB3300835596891CC187623AE27CF0774315E5CECFEA59483C4B76A3079F38918EDB9013D4E2D8840F8D2DED137705F273121F04AB812AF531DBE740A77BAE3D4DA586D90008025F11F798DD538FA9D3A694704C6CE2C5EAB869DC5A7D0FA4F11F3B39EBFE217BD56B43655DF43F9E9FA8794192A3EDA7098708AD19373B8A5C43762574F171B5B5D35F6B9E14748DD4608AFDCEA3B8950E7370977F7AD9F89A75A743B55034672DCDEB644BAC8D6B1F0BBDE3C455DBA95E63AE3948AA80D301E580FC9701E0F2513119DFB4D1153210D820D68377ABC79F18D5D435868CA00997B89DE0FB2255D5347D0E66E65F4C53F0A3556A28BEAD1DDBB4305F95AA96B3F0D3E5ADEBDB16FA8CB5A70C3E2E6F4E8F8AF3181A8780C53F0233D76D71DC8004C6954831ADD1788F3CE6C2B19C3799A181D158E1469A158F25BD43AAFC822A5309B340C30CF6F295C37DEAEFFA783A508E97CBD68B1A852201F70C822CAD94E5B62CDAE98916753013F53386717AABAA1D6ECD008B0D30840632E2C2D83322B491FAF47E0F26058F806B42ED2E2D956531391B39AE1C33809C9201F56EA73C1C119FBC1195A5CC2EE9BE33B5B840395FCA7C98F7A3B97C4F563B9FB3E6EC6288905EC679AB3EC2431433BA4DEB761C1A26838941CAA499662522BFE5B1B8EE79C581DE1665ADFB4DA8FFA3E7B828099D1CA29D88B9B97E843B0583E9F16951A8A122C052659BEB5FFD1D4C1A31A4A799FD457943E3CC9CE49AD680E564E6E20840BC8FAE56EAF1229E4E89C47638F31C21AFD4FC7375F6F52DB66CFD142BD402E0B6C160995AB54BA9C5B8675ED4D61D4FCACA50227C973199F442A19CB29E89CA43FF7C9E7BFD8769993734FDCAF909B0A3F32EDA859ECD168D74759D81E845C1F054DE986D76FB387F9B005FD0F98E83EA05EF82243AE5B2B401F6E1D4A781D61E4AA0A0D0B812EFF64C5CD126C9E94A0333EC850E608A2521594235174FCDB6CF9F17C0EAAB06B2405B6277BDCE002108174EBEF4F85FF999836687EE23EF30E7907C9512BCFED696A2B414E1412C8F40FF6251C411C19EF40276581B7B8CC0C96D80C70F331CADBDA5FA08F8519B4F28BB468AC01E4F87A781DAB6AFA05AA6B3B14A0FA8E38AC93CD36AB0E04C6CC88A52741BE11EBCE847F94A4E0DBE2BF80BF709C06373784F9DDFCAFF720B4E4A4693AA0E5266FE78EADC877ED76D89B4409377867853051A70AF93CF8283816AA3D86080C86D81A99D44BFE869C076D1377E392D2893B73FB392E54ED1B6555EB8EDB9CD5F47ED3BA0838946CDA1D393C8CC031C7A7438D4DCB771E6A5F8046C1AF16F08812C737F0DE07594290709D1CAB6EE6A9DE7CFC7C6D8931B9B16104F995F1A67087C53D9E84B493F43FBF17729F1F1E981CF38FBA7DAAD330B4B7A4A9454C101181CE289227308BB0A1CBFC7BAC489B4DDD7DF99B31174E3C6B06C0A99E366E42575EC4E644181EAB66904284ACDDE0B511DFDDD81DBA9276762BB01AB1CD43B866F7341CD6864D1ACB010CEC1AF21D4C9B99838C430B2808010C838515E9B8C71D00FB3D88609F2993F56145505C04E05EC557D754AF01E44CF53A40F360EB59B9B8AC782870284293E7F69548AC83ECA0010E50BAA8AF61B5A3A341EE080DE98B2CB9505AFA2A4175726F407B9111CA8F84A827CF34A22B433786420359DF16974BD23FEE785ED966BDA8E1122539FB8BAD6BE296CCA64D50F40B0296D13BE79ED6B8B75E061447926702B9CF0583BBAC5D9E54D4D714247DBB14A40497292860E23963212B666648B8C0486923B3E62DB10F780C31D2AF375A421A622A07A79724FF61FAF704CB22683E3E58BEFF47D7DA80493FBF9D8AE1DE1B73A5B1E4242B1F2E98E2E6FF7E55CB6F93D391DE7977F8FCDF4D97837F0B2E49E1CC6427A4D8D7A3D0A40004E7259FEABFC0212A1F2A6462F2F60A9FABD8E9DEB48DB3A7A45C0141BD4A96249065D726DCEAA33486D6FDA8A0F02DB57BD732B381776FAF96265865F7D082CA497128F73C266D3BB90A547A1948E00FFBFB51C3450E1C3F74C1C3FF8FA4DD4D8B877D4DC38314E9B438CD9296BED0352E46BF90F34F6A131290928FF5E1E9DF2B1350755DE48374E38E763ABA8F142222DD34D7EFD5A05F008DE5C050525BDADADBD701C58EEFC6FEDFE879857BD99811E7892919F9ECB7B2A773F9164775B2372EB61815075FB68A2D217EDAB83981802C8BAAA17ED27C59826108ACB07B718625AD6E31B8A373BE54F5EDD5AE7D064D2F266A997A7BA03CB22646364FC91A868DC31D065BDF1E00F0FEB1BE3995D849F6BB295F8A18264A0C2BDA3F3C398B3AEB54A3D8036E307AB71C87C8AE602BC71BCA4B16F4ACE2B821E02D4CCBDDEA46F1899AA9EB414B4E953CB26485194DADF98F6409067000EF9AE5CC03461E879C21D1FCFFB085F87D930DC4B62DF1DB1E395F5038455CAF02EC02EDFD9E18A5E12911F9DECBC5E82CA768B059F190FEA4D5F2FFC711284C9B3BE5AA429E7F44C275085FE1BEA8F0F3B20F76DA9A5B07404CD65D44049E4E8D73F6DC3EF6AD764E3F86220B4DB7B713E47F2795F97096253BA5D17D760F870A8E7F8DE2B971CC001A8D0AEEC0366353498962525B9DCFB640D82B158FEAE6B6EA4713E9AB67F8AEBD98A1198EFD42A1E4A48EB95BC97F8E9CD5FB0716C2493AFDB020DF0E69A8E904BE753ECB9FDCD5D2954B7E28BC7678074F2FC1FDB7E2CB46D0519ABFA7E10AD5B8F1308CE23B80D07D579445D505D9FDE227046DE2F4B9232C6FF9E874AEEF05EBD9F2A3788691DF876859A3BF76219AFD0D868A095E14B0ADD2277EF74A2838265F77F56DBFC204132C1F4AC88FF26125C00977E25B1A289139AC7BDB87E16245A2F66E401D35D85AE4C1D03C793AC24212D2F17A1798B911CB9E137A68343947BB570C1098C83B3383A8ACD591E4DE1FD0697002D475D533DBE1574F5BB18F7C98455EA41F27DCCE28E17C008B3FF76597359C11509F5D34764CA0FF90B62D8F71AD194CDBA00CEFDF539A8A55EEAD6A747EAB64B8F04CAED69B7391F58B0FDC84B5375477E451E8943B277386E81B4E435D481992274C0E9D72F8C01BC43C238554D5BFEC8909E0AB61139392DAF28D02623FC6D3C29E8B2C233B90A014D4C6BDE72559BB9A3349CCF8EB3B711CFAC97284D5E3AD4D9D54A526CB28F367C1D82DB552D7EA2584DB5FDB88E7674FCE396391A6C817087FA77002B18FC4818BF151D02F693874F4F21F18F73629B9E6243EEF4DBA670A3F6E468AD64865E28C5E03F90095F929B37E7669EB4E8DF42596AB619AA215CAC1D30171C6AF922194C3B4582E85B1BE155C902851DDAB615D4C160AE8B3FC3ADB58F1A1A8DFFCF7B536A73C568B7B43847840BCDDD23AC9D0A82FD5822BD971930F6EF89C9E9531DB66FD95BD2E50FEF37DBFE15CC9116D7321BF95562E8206F1F6B5BA4087398C3258468B7A42402A1EB51548D23DE9F604945E17804371716F402CF86C134AED293216E918B9FC05849FDAF39E1764B90587627DFC7174B7A24E81155557E38250D5451E6DD01AA8F9F32719999348196937605D7BB79DC0D124638AE5EAE93936D7678E2AA07E5AD0CD5D5BF67F6A8004139FD88CA2B25712B7A91C667A94B47F492C5081CE4212CDD7EB617C9978D44AA066EA341442C78A2CF3D0A3EF736B84834A83C5C358B1D1A696A8D92464FA6C9DEAAFEEEB0FBBEA790E574FED9F6AA4369C01EE624E0043A6858D67BBC7B7C2E157BCB1BA6EDC0DF1AC1CA11CF5AEF9FCB1A39F8E85FDF24D1A51747ED4FEB744D25C2FC813E1AA85EEE683766FCEE6935A482C6226A2C76E857633DC99E6CCF3957768E799D7E2BE230FCAA975F724DAFA03668515C254CF573E310FB73D3C62933DCACD7D26A5CD88CBD6CE0A1C49BF93F443C2BEB71948906453B99EE3A17618E8B5E7C14D21F2A556941C03B9C793292805976211D4FE89E8B997DE6C281B3AE9441553573C8F8486DBEFD139D72C6E96AC7DCB2D28F33846C0A25074F9813F8DCFC4F3E0DA6C66C1D73A7221B69D6B9D3892AA1D0B9A3B33AD5D9AF9D6CCA621A85106E0501F89DC9D0D46AA446CBDDDD96A5FE34837F360F11ACA28216362D2AF5781F41739178ACA099389DBEEEC37C1C65DA09F96AE3404DB70F37FE4712DA440118D757AC2AA53269B623540309BDB226809B26935408BD56D468A9E303AC32D5CFD97316C689CF0C32654CBD4C1BA7FDFD85EC79ED5FE77DF05EB43C20679557BAA79873CB3A601F88263A187818DDB38CA8369A7D9FC4D50D9A233B5E8C83A8307E8F05D546F78F0243B42A66D88746E510616D1517BC1DB5AC38F0D36105404D4132CB4151DC86E09338F4B20D444395CC15E831E5B26F54544F26BC69138F9D080DEC0FABACCAB8F645255899760461A8CE53C3939785BE19A8CB41246FF477E551D1103AB0B1E67EFA01640A55A0827E65C87E28FDDE96EF39DFEC263B384E96080A0580176DACE05E9ECADBD37AB139336F3A4006ABDC55D1529D728AE84894CA6F09697B26DFC13AA15BF36E78234E4F99D8E52EE39A477D3E6A52BF95E030C260AA71EC4D1D74B4853175530424872FC62135DF230988B45A5321CADA683D94F80D0B34E0DEF1A937573E2631C0B3C5887DBA98EF20C07FB0A6369F818D990CF47F56C027AE719B35C08D799183BA8FF285A64757D6054C528F6CA4E09F36EF2B8007F4E842B11A5AA754B6B53E1E06A5C02054B4B6F8CE575EC350A19A711565DE03E6B4A23211A3D08B72DBAF9EA6DF897F3AB92BFB50014A711BF26225587803C9052364FFCA169BF099FA28C4946EED26C1F99139FFFD712064A7545A696012837E7DFA2983FA7427ABCD86AA9C2898FA5F43F34D4C6BD622FDDDC73B0D86DCCC1D291412F5218BBCB386B97DD3D7870BF9B0D108904976259FC1C2CF51E67EA055351104B490DEE4F90AFBFDD3773320B94F9139E381FB87D5F6002149BC7FC0A12DBBAEA049301190A6433AE32B19B0ADE03ED30C1FD20D8837A04E920A36485D6882C210B567112CF5D6771019F8B4B5E0B653ACE9162EE9B3B4A627ABD9D58C042C1871B7ED92701D0CB6DA07586B2A2DBB7C0B58CB16B756CA9995F25BB677AF935A464AAA7D9A0A281CB2DCD36971C34670AE18F319DE3FA96B5454731471BFBAB6B1035B71CF04E53EA39ACBFE5F4EBF29BADBE217AC4B19395C2F808E8646E765D1D3850602C872C38699564C160C7CA45B17A5D7C62C20A4051386818990E637469644F0A111F1DF09887117FFE91294905081990150F4DA97A484EEC4D6536A23C21E91432E28F4FC039056C214625F0D53B936337A6497627119F79CC8D973291DB55F7C478061FA9C22A409AF1CF7F94FA4CE0D3321203B79ACD1E92E8B10EDD5C361E8B71BBD59B2B88912625543763ED2B4DAF3D62CA5B8AF4A2010552F138EC1D91D9F83563B9135896C0A2D5FBA91628D0F94CFF10D5AABDE1479D8B88A34D6AFEA1D46F2990F3F41546DDA6E1AB57A7E7C1AD8E69022A5256ACB903C01EFEB8EB43DFB030152AC6766185A62ABF6B96CB8CE6D547FDB461D0D768AED914B168FEBFB603D2B4C158113A7D6E9ADAC1126545548C08867625334BD2CEC1E5F751876822F53F09CE597F12C957318BC53F346DC213BBAD6A2B9A6B959DD6F35A84D36DBBE0677684154247ED1DF0ACAFEB7A59AA77D710E4CB80914E6C9C8CFC4558DC9ED0CAF229F6593617FF9818078622DB2B75ADAF19A6463691864679C853298EFC9FE7A4A3707AA8A986F1910301FC6C8DAEEEDE928ABBB04662A24FA5AF4C6D0C9119411DAFED196D35AD5659F05FEDAA6F7037315AFA6D99F2898BA8327A6260D3AA04F84472871485A979DCEAE160A1EAE8A7269F4E2E25DEC0D1E15EA2754710E3777F80290A3AF861E963A14D7379392F89578F7250D2BDD8940F96C697AF00C376A9604FD2C96F4E13D7AC1B39D569631D3E60F2B9B6CBD7A193AE9A671956FC8A69ED968539585A5CA3E491E54BF2AEC9A1731A1353B78B1FECF6F181829A81170A65D5EDF56FF806DBAC4C6A255DCC315AD32766BE7EAC2C4EFECFC37CD69AB5C21C91108DE3CE92AD5F23DEE32637E09988C855936AE1EE2163A42E399FA24508FD7AAA9292CBEBE639F2E2B03B7E3AE55C6AAEED440FBB8CD390F4A2C0C97CBCC670516E759EDE7D5643E038ADF6BA05EF877B429321A8FDFE5C07F3CBB5BA2887C922F88F54A6BC4C2B64CC905BF8F1FCB3771C14746342B156F581CD7EF4EA1A0313BF46BF802B5904E1A1BBA8A8CA72B003C3525696A179B505977C2770617B38152F1EE752F93AAB807AC8BCB398D54E20688685F05AE41C05E99C36D7468B853088E1175E6780C76014C76EA317FA87F1F2567B281AAA90CBF6C946DE834970E6AB30C228F2B1220F71BED2E2B56982727E31E110F4782C0CB3B4D44B48F62E1F255F4B4AA9DC2CCC93CA23B9DDAC2E5C68CCB5619AA82575470E56E83601A40567CF3F0971F994D4D1D7F47CE495845A19CF2A269D075068FD5831E70015E6D1E7167D2F3F423D06545480DA06B866CCE1FEB32B554E7FCF56D3EB0631849CC4B9E533DB7AD41474B690EADA461583C974083DC4167CE434E09EC43E1A19E6DD67971490CA9BE03C3A7F4AC6B1A05D95EFDEF456D8B9E79E63536C2D99C541D761017F4E25849F054A17CD1C4188F705D25ACC11CA2DA12BA50B61A8B50397991646839CC66DF0FD1E1F07A7C0DA31B7BB4A0AFF5FEDEECE99B7BEDBDE21CF72DF7B2AD4110971713A654FB9792F47BFD3BC3B32988D075B062F634BA6F3A35434CE82F7A3087BA3117D489A78A82909B0A53BC906B0338010615697AF5DDD013BD2029AB359AFA3ADD139A0F10C442AA9EAEE9D9F25B7FD2393173B60C347091A330F6F8FC5781A8A1DCD01838EC47A17735DB0BB31BB33DCF3DBFF7AF6E0EA6DCF35092F64DC6ED2D33702DD820AB264E096F128F9C36B89EC3B752E120C23CE6C5C57D959D325FF0DAD977AF673354B6F5B232B06A34AE4A0031D2F851D174536323A3E4ED6FA4EE78A47D5138EFC4F1CCEF492FDEDF24A8FF848B3B1EAEEDFD4CBFC9D85B4449D417DA59075CB8DC4B53ACAA62C55BFB3F5AA2B5D41D7DC0E4596D941AD72127B07CA38A98419EFD52C096BFD6B9408E5FB982C1BD5501945AFFD797294FB0DF0D5D46833FE41F22F39650FF05D969FBF1D2F2728C359A6EE2D0C6846814DB9F6E30E65B985367CE680D288568F73D94353644519FD1AF81A5DC7DD35BBA4E2DF84BD04B0E0DB3CB7E9397DCF392B7A80F59149CC555E94DC11BBA64DA019CA5DE9014B2EFAF196BD367559D7CF6138D854C0D767F90935C059CE75E0562D7CE8763004C33923EE0960E1F3BA775AC42C216AA03391ABC6558AE5E76E6BE55BAF1567E4263112B987644211DF60C50ABC46D8E5430E7633A2A3C600DD8D851C968049AB77F0F6D1FFCC90B16F29229EEC853F5D9B080CF0966E60246348190E3C35054CCA24DA41A1F4CA9564EEBDB06B25ADC6CEA3655E4B7BD01071240E899FF0C763BE580CDB4F4A299767B8F537F5119ED3F4844F338424374BF2E902F72A9CFD3F482F751AE827599746FAC8E490892E798B81312CB288C41724738A571FD6C744EAF08A8FB7F23D62D199CD470077534D6811EDE73A2089F9C1FEAB79670FD0437F3FC53D0749E6785C78E5FF5608B28884F5F28A36CE39144274E0838D9CB9FF1F21009D2B0C97A78F136C86C86C09A42181E4E10F21A035C20612706CED5F3A7BB0CC0C71396191197D82895DB0E5AC8F4119E13F8F8D490D590B27AD8AA5FCA870CC7B493CBB85F4DF14579058DDD4CF04428D27DB7A96C4A300C4E5AE4E6219CD24E61E9F6B5652EF28BBBD373629417C095A8BDA7198B9431D92B043C14C8155A1D1FBAB643C13A4EB726A674A292FF33A46C3D01802D6F378C478ADFFB8E15DFC36D5301CDFDECDE8C361843734C067BF0A0B802BFC73AEA344A85A7B1DE714737870D5BB70CC64ADA393D3B84DA5FD9207F95D920E25846C6F29E720C9D64544340AB9369239E096DE3B4C49456EDAEDBAE8F00AD01AD45584DA5AD119ADCE3B2FB29FED275DF8FCFB7CB7961641376CB94B6AB38B00B200239A8EC398E32045506EF95150F80048F857B33D8B6A147727125925061FFE63C3E82131CDFC9D43952C6BE7417693DD611FDE2370292FE9628902CD11F0C9317606376E41E261AC3F02FA389D47BD1D3BB66CB3E3B29E0F67203414AD44764D63A174BBF821F2BCD881286A14C576C7C2ED9E5E5666BCD8A6BFAE242766E9053BF74FEDA949A3F85BBAC340A42D88784AC858957E0418847C0E11EB6A967B0EB56D0AE9F54D0C6C37D9E610BD1DD7707C58D71421E4AA016B6E932B0E97C27F898257A661D5694D8EFF1481D790BD6E154B91E73C2AB73AF0BFCDA260CBCC58F4E044792E2FED2A9E455CD06F7FBDC9E5A8DE4D3D2833B3A8CE16867FFB917269F019754ECE60689B762D0F93DE662CFEF5454A4FAE63276277E1F37002DBAD018CED370D840E29CCD599B46D5B48D363B1DE20E0DAB822DE5C371670C21E2675FF040B6D5C51A81903E4ADC684E4F6756A189D0C2496115855E7207C253CDA33D267D44CE8B1909EBEB0C686FEC6DF842C9E9952820278F46BB51ED9FD2C145573653D2BCBDE1C754D86A8F9C944662C66418D24D0774C35BED4EBBA826CF1990BD385F469D3250C91CDD4EDAC5650F02DF93BDB3A0C95A0FBF62AECD0F0D5D725CDD6725ABB64574401C8FAD00BA051E06C6F6F934A8BE30122D2F4231A3D4EFE4D209DE4C2C673E595B28EAFE27076A2892ECAD3CD22DDC99F1C5979E95326A02A996C8AB742A53F8CEB5A47BB1C7D9B447258400E1330A2FC4713C34796F1CC4CCCE3861EB8D26B9E43B7F25226DC4940FCF0E43D7AEBCEBA6863B0FC61F6E3D3C31760828BA2757C754F7A6EDE68EAA2DA6A8A39D73DD1613AA38B0298E6E773D1F2DA6A4A6D0682EA338902924AD68673884271F08D6FE413F04CFDDAC58E94791CC52AF16A4577FB72B97FD1E6C0C3914E65DE45E8993291842C29CEEB65DB03A2D337B764B53924EB30F3CB6FCCD8AFFADB8BE466CFE52695B6D2FB27C6A87B84D9E9F7AF8FC52EE1EAA1AFAD28528E043E128B478EE42E255F638F7C92EB068FA99593F13E51A055BCB598DC90CA623C7228FFBBD873B9E168F39EAD7AF943327E5781603D15182C6C8CF358B61C9C547DE8C61DF62FD9F2988241B9036ABD2F6E93BB22215D8045AF9367D78F5F0CBB0896E23A285391430A65B62EBC4E7797652A1AB6C7E8F6B3FC71A71B12231690E35DF3683250FD01DA6C6934FFB90359C0AE10FADDBE9B49C016F3BAA19222A23E7F10CAB61D71B1F58366C9D452BF1E3195F984CD7BA6DECAF90C1A253210D6FAC3978C5F0D2B1B1841E197557BE8BA9ED50890278FACF0BC2EE35E9B5EAC56AD9E346FE6622E243B80DADAC036278CD443C45AB3FED22341E0C894B17D50866D485C25767B18CCC2A709AE63CB929AB615CDC3E62D5DF961306135FEFC9D718A1249D1496AFF269554288D2359123456153F97E2B97DC0F3069B230BF0BA3A9969CFB45AB467430BA91BF03811B68FC389E21A96AACED9A18A4B6684A41016F4628850AF79042CF0DFE5809FE5EDB4E7CADDA6969EAE4DFF2C365A039955182BE91AEB428199644033DA65C248D27B3F39CCDE3C8AEED39AD18097EBC056C8B02752422FE68E968C679F7487BA52AF6804800CAFF85B68366B3DD0D8CDF0BBF54332FDFF5F9CE78161C035FC64DEF0CE15EAA2DDCDC1463F380ADF3A4181E15124881B78D416A76D4EEFECE238E1FF8DB651CE915608D32C7F8E5CA94C499C08A23C1602185D5A22B668DEDA092BF88AAA5353849DE20D835B401F3477DC3A82FE07AB32708E5C39C22BDBB7F24225C0AFA4004012F46A91CA22BEEB46FB8A3021051B7BEF3FE6976D940A94AF3C9201C4A075B7D15489622FC66FA923CAB9C8605F4782A2659975190B503934AE1C59E3DADB14AF32531951520474C6709161095FD45FD55ED2E987D54BE93C7DB77AD4D9EA21B75EEB3E621A58EF30511D0A11C3B15A34EF50C07AE9F8CD2F3CCA744E7DF5B4C83FBDCF18ED0D40E50F54B6EDA75DF7D9CFDD56C4FC8FAF5A481602AE59F2DBC685A7788D857C7A29526A72DD9F44842A3D7252494006623B3916481C0A904EDC34942417EFA10644AE3D0161877711F569AB7B6544F6D70F147BD2A5A69C9BC8624861C14E950511471865FAB1D55B121F34439FC7976D172491B26DE3E9C54DAA5AED988E8BD1F15A71418C4A5894CC6C9966DFB7F651EDFC10BF6213B51BC72E551A004DBDDC907889ACAA940B4229635DDD8009490A21395C210F9BF96D0D95A9F90721A69D6863B15495E978F97CB42BFF09C6B1E97B68F38F8F1CFC9946797EDC0005E51061557A866516FE3C7D7259BB21AFF0C4CC85EAEADC07D5EEB7988C1C338EF1288C48894FFAF9D7701CC1E00A499E4CEE9D04F17D2B238BAFB62769434BB9B112E0F5F4D1A5884FA712362493D7D99784DF4AA725D50C45930F03A285B436CB91D697FC590948F5A4177384C8DC019DF1FFC1DC9E19AE27D6F1C0739C67C050F47D94D901BDA9612BFB521760CBF5B6463273DE4EF637EC8D2E2DBBF6AEB35BA2100A70CCA9BDE107DE5F66F9BEDBAFD7B896F42FDAF61AD6AB987C18BCFB9A715111AAB49AE56C285B9818B00CEBC31E664A6E6761E45B6A040CD914399BB147A09C081C09C56D3995F503DF16D54A19F47D59ACEF29B4C91E971569970F0638E892D05C6446D8628E72C3B92A835B54EE97DA348A6096732BBD45D37556593B1BF1C0AE50EB5190650CF7A5FE32FA6EAE9F1B057E471A8DF5341C39317BB502586CE71C7A591AE93D4F03141F71DBE79425FECC5B47F273517B79806F40406CD1705AE48762B6C2EFE053CCD7021246CDD240A18F9C542B348B5FB82369B656397E45FF1E7EB5A0D5373ACC72B86ED5593AF75CF7767EAE44C1917B5EF7C41680DEA3E4B13B49BD22D4A0BA776BB955223D0E4E1DDBC51B4D84DC84B208BD05DC1E83BC6C0189BB017A11DD6FC82B52C6D3D838E4F5DCB8BCAFC520E9E02D07B6F634B66311848EADBC13AF9D68FA9D5C109EC108A91F3D61D2863D03E4214B39AFC22275E2C2A29BF194452D1FAA91E13530F695592CD1351D6DC8C7C0114765678E92D55DCFD3562FE4F387981331C7DE2F0466F09B55206DF50D71DA68E4CFE8B7DF5A634705C0E0DB1EDB844B6DE618066C230288392BE93A727D92FD85ECFA9D29624C7086A75F03E0EB905BE5E43DC0E1DB1B296AE04FD175C888AB8D00C36C04AEEF74FC827589DA13CC39AECD905169AF0E0894287BA892C211E2BD66C952D33C4355ABB06D1E606A022E23EED03FF7B21501D0767871A265E3804CA752BAF760BD41F3C7BFC0236791A9090D881DA76C4B8A3A9BBF66D9456E772656C6DBFDC3A16ABE9FE0F57098A6D5D5D52A8ACCCEE88832507D3CA4AF644857327DCBD2794542B6430655A5924F0B4FACC94326D212091405C773B24BD21A897E741E9CBB7EEC4BC731CBD0D2B7AF6AF69B7D71F6A72FEEF263D760DB7EF1B3A2AED3A0BDD5FCD5FA0C13C4F56B5938C1D154F107AACCFC6DE79096E4DEBCA13E9B7B606F6768768FA467E0757EF2AD2F9CD4841F24A196F808FA83C9334A4007BF897D9F4B13590D70A18C2B68485D2A6B0942BDBB53886A4565A3CBA66FF395422D184640DCAE9AA11A75BAAD05341C8A74C43B754A03DD8D74A6A24C3DAF634E83EF20F34BA56500A3FB6836CF6D187BFD924A029BA3F075099F462047D933A74E383F40E524F5A34A6CE9402BE9B48CD6E2B1B8703B81E6A7E97400498C2F510AA06A49891C26D82A5C82744B2EA6AD1D162EC7C0D3167D5307AE01A78623C795D99CD8B03BBCAF111A3EDDCB60D4A29E8F1A5D15EB71E9CE5F5C73F095482A279563B5C431BD9FF374CD9821DEA00FA5C76E447CF5B5F5978AA78AFEDE31B220FD2F3AFB9CD65A1AE25C9DA6EF199BF8FFADE601224EC253BFA0C8FF7773669A5F77B6B85D989CA9F2CAEB5C1AF2F5300A678C1C307B4104803019FB41BA74D49BC9EECD751D031A779B6FD7E851FD477B0A09C5A6C8DE4A521AE042CE5DEB97A672B8E6D3B978A4B9C50DF59279DD75F9D1D93AFB8F55C616639AEEE6D29AEB0A0685D54EA9179C71B7D5E26B27A242D60A913F33538815231E1886FF0A77BE572A6CE34CA7F7CAB1925DFF31F59658E873E8BC6A24F7D6BB804AD455D7EA33721779A5CFBFB58521413D36A522E39454F1B4D9E6ED577099BCD5BEDD1DAC28F760961687A19BF1AFC91B8B816A089D5A0D230A365FF366E42883CF992BE3DD8329D423F52A3E54C8AA3AB6A7164D53001902AAF9554E912A0E4DD87EE8E26B7A2B22EC4248CA46DB19906CF275760D6AA21938185F29760B2FADD11C8A880A35F1333E291A2B2A29B900CE358CE26E1B29D35813FE514451DED49DA14B02FE628B79806E39AFD06E33C659B05D00420408DFD6AF2A8DA7B5320597458F5484178ACE4258C1912C9D3FF5868A856266EF8E90CE15E9887287BE6A4B22A0D589070807B2BD2D66ABC567D4985D6FE7172113459B5ABAFF98286F5A6A340B156115AC16842AEA3811EC7F50C6B0CF9C9B0FD6A22F8FBFB8A526195E88375EBCC95C383819F8B33CCD4182CDC691598B23B08C7E84695617A94DDB6068171790E622B7FF33E4C2E9762DF1BF812D1CC0DDCDA59999163B2311E158101E0D213D735DB9D8EDD891988DC67AC420CFED21956D3C109A98F0AD80A8627ED3ABA7D81E94B799CE39A54BC49AA6AD368BF095BACB4E11EA81132324C984B115EED5E066BC167E36716B03DECC4F6CC5BE220841607CD53E28C576F954921223193391F51530C311DE0393B5A785463FEC3D3B60B271F2055404AC66ED1C3576C1880C51663852A399EED65D375D738000841BEA4909139D46CC5716302F04D5B1CC577ABF00AC7D537087BD099F2FCBC383D2FBC570B346AA3E89F171B698A23A14989B6F2B051F103FD14C53E16C262F0936FC899020E7A5DCD4B5C54BB766788A4EB8CABCA77618BBEBD6CE6F0B62B22A653BA48B7675506F186C69B8A1E1A4FECD7F2A57B4D446BEB8FCB86EDCC85339E9059927BD96C9662221E14B186D2498D5B520B1C9D35F7B697BD217E25C0BB790404BE82AD7788D3455823064D62638F9A93A05CF49E3287DC3926A355276AC837E542D6EF68A87799100997C40204B11B843299736795E1E9D6424BF4880708DCB607A3CDFB7196AEA270360753F272F16B527028F9F1E874005E5F0231CA168BABDEEFA4F98AD93E2496374165D4C647F6E792C499C834ED4A29BDB70641C28E5C97FC333F929B16C81BE5BA9984BA881766EDB45794EA6AA6591C30CFB94419EBDAC645DEAAAA2D03DC8E8DC5F6E949E63CA1688FF1086C80FB33C8EBC1640482FD049665519832766A01D3E17CF43CE19D730FCA403BF47C8131EEEC9550F15FB6343B17B74BEBC72289FC1C7440F53B488EF147501445D034B341BE79C2A027F087B23135247E547360163C26A3FBAC6C212469D396C5BFA6185E0EC672AB75EEA9D602375189BCAEED798D6BA89D88DCEBE448AB25563A89BD3F4950A04466C27FDF36A1BF317D77EEA807C8D8D5355B1197CE1B29F86A55155235E05437721F5BF8C14DFC3A37B58950D885BBFA5D77DF225C9642050E3D0376E6EE3D02CF43FE9535D8BCBDA0B44C5CB2B32BA00B5F67EE66602175099214981BE895CDEF89262A2BC0C92354091FBC9DE2562B5C2DD7CDBD5F2B29D994DBAB96DC4CAA13019F655BC6745F8833703C1DC3B298DDB3BC718DE9B56A9B05E3840032A857CD9F384C75FBC2AF82AC2343237631A96F09E269D088416E29B29F6786AD35484B97CDD01D8202C11924B3F99B5302910CEEF49CC77BF7903F5F34284BB12ADA25986E14F0FC324D51F3442ADBB1531C28849E1656B3144E23480CBCFB3B342FEDC3C7B1F478CC9B67167DB747AA489BD35779317177F938B7900FB97DEF0291C50C119E38FB8C0D75AD87948CC4F0DF993D3325387515E4C9EB127D26A5358F3FF6563B29707555DED284676BACFA6A0F67C670855AC3C29B0322783129C91F3C15899FC7270B28EE8D934884738720B470B77307BCB3219572B2E6C80147D2938CCB11032F6971C513A46EF7E35140F8E9166FE29F85653EF3E9FE49A6B9AE5909267C0BCA2957C76C36EEABDFB78BA5DDC81F03556BEF29D28934C63ACBE50809202E6BCBC96A10BC57509579C92A495CB7030DD866B7916B8DF7F437D3C9B2E1B5A01705FDCB65405671E91F795573C4CB759211594547948FAF9456DA847538EEFBA11BB8024003183A5FE455D6BBB7492376A4DF02B553DB9AF9FFBCE7C12F7F8E812E7B3843473CBE7A4935E50267B51F5AA34766A64BFDFFED1C84C683B9E2AE7E7F8635C4EAF3920175A103CFB95C08D58C670C45380DACC7A1A3573779EA507DD796166740B147D4D4D10D10CA96569FBD53A0A77F5AEC32C060AC36703D148EFD22782C1E66205EC3A80ACC9DF16DC49EA99841DC453D8F20066CB64922A8745ABE15ECAF96BF2251B2D918C0339F929EFEFA53C70DF5DEA4AEDD2E91FF99ECE1BFA9C244227994F6631F9B55544CF20862189C130F89EE0882381324396F371757E9E1B062883893B02F07C9370CF895C05538755FDFF1344F1610E7D1E6AF9A93F9A8372F1F58D7D01B39F0983FB97820E65968308EED3EB18AC79156E871D8D99C8C79AA080AA7288A9A954BAE734479A29BCA3550B095FD1A31635DDA09D964458B6AAA4D1DD27D2ED62F30DBCAB56588C56D7FA2D0E77F5B0B17B4235BE6E077077DAC872A32D04F7A1070A81AC3A311E02822D7FE80147DE7F862CCFF516796FCE03868ECFEDC07051C5F475E378405A6EFE9982A405A1A575520A48721BE3BC04C2BA1A397E6DB50218538A313AB9F83519B5CBC5D4B9216D399EEF16D9FF7D48566D480FF2442F2D5E033D848C801825CA3053CD1801D295D922D5287B827AAF13D868F905C3D6BEB144E41A4653B7D21E67D96155E93401569EE727A6600D360809F787CFBA41A59A66ECEAAFB6917444E5B775F615595B291918923428AABCD11DCE323F40FA61B899A2D563286B31F02E89CBE0D0E691581B734D4D58437673710E866F2AA1E0E9688D4E60F8D28C3CCFE002C75BA12378174E1047D8CE5EE7B13C660AD1C3FC7514DD8180DBF2F7B228D84CE76EEEE3E727D0239185A779E5F334C1E0AD5A3C2642DABC1237140FBDC98A3005CF7C28E73012F521FD63FA6B667FCF75CA894F59884902C51DAA45D8A37E65332D29017D02CC55BB513F36C2DF5B0F5C3E722CF6C100C9AB94B498D097D78257B8FBED89AFB1620B050AFD9E4EBA850ADAE104BAE994354AF22B3E6A2B3F0FC3AC93502D9163BB31DB465BF2C84EED50C59D6A31DF8DB90A697C6118A6DE91720FF1BD5EBE0ED0CB88869BBD55BCBA6D5669965936E394670F712EB6F8AD64068FE9A2A8EB1551D8689DF024D0FE29544700B34B2C725C19D05D916B0866EFB8B6E602D510B0D1620C4C923A222510B06BE2480F60980FF0812FEBA0FA630EA084B931A6A0CA1D67A8D9103942E3C54FCC0B875DDEFE2D6E2652AD4E2122760D0FCA1E97CF69DFB5377DD51EE44A6BDCF13CB2A871F57B9D4C903B3A511B907955D71CF5617AF04D2B3B992BC8858134BF58806FA5B4ADEABFBDB7B000FBDB7D3556E24DA0DEFF0747032E74D678D5B89D709DF16B62FB708803832F5D7697E3250493C4B6B69704CE59A8F98CC2BD25E1CB905F7AE5A5CB6A4C982FBB2CB70085A0988A5180EA4E0E3F07AFD72D83A10FB7CE544CC25883CAEB3C7C63816A53FC396FE11B20AC4D048E427B61001478DE80258F3DA41D1AC8A7E671F9431C6CAA378DA864E3192146D924E75B20CBF5656FC5E0B47CB7CB83F060EA9369A8372899E983AC2524C30DA269D73B95773E076B04C3F96A6A7F1FB28AD947C09F44BFDE9855E026987D77554191965DD058B8895EB46973054A8B4757EF4A2FA7AEC6534342E6A5C45E9CD4660A32484B66A8D88535E61C89E4A33D5D7834F74DADCDCEFE9D92CC1A962D38213F538BA42DE774DAAF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark{restore}if%%EndFontu1`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Title: Figs 1&2.final.fh5%%Creator: FreeHand 5.5%%CreationDate: 7/25/97 11:41 AM%%BoundingBox: 0 0 287 149%%FHPathName:LANDRU:Andryw Work:CryptoBytes v2n4:Figures:Figs 1&2.final.fh5%ALDOriginalFile:LANDRU:Andryw Work:CryptoBytes v2n4:Figures:Figs 1&2.final.fh5%ALDBoundingBox: -36 -69 324 219%%FHPageNum:2%%DocumentSuppliedResources: procset Altsys_header 4 0%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%CMYKProcessColor: 0 1 0 0 (0c 100m 0y 0k)%%DocumentNeededResources: font Symbol%%+ font Futura-Book%%DocumentFonts: Symbol%%+ Futura-Book%%DocumentNeededFonts: Symbol%%+ Futura-Book%%EndComments%%BeginResource: procset Altsys_header 4 0userdict begin /AltsysDict 245 dict def endAltsysDict begin/bdf{bind def}bind def/xdf{exch def}bdf/defed{where{pop true}{false}ifelse}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/sepdef{ dup where not {AltsysSepDict } if  3 1 roll exch put}bdf/st{settransfer}bdf/colorimage defed /_rci xdf/_NXLevel2 defed {  _NXLevel2 not {   /colorimage where {userdict eq {/_rci false def } if} if } if} if/md defed{  md type /dicttype eq {  /colorimage where { md eq { /_rci false def }if}if/settransfer where {md eq {/st systemdict /settransfer get def}if}if }if }if/setstrokeadjust defed{ true setstrokeadjust /C{curveto}bdf /L{lineto}bdf /m{moveto}bdf}{ /dr{transform .25 sub round .25 add exch .25 sub round .25 add exch itransform}bdf /C{dr curveto}bdf /L{dr lineto}bdf /m{dr moveto}bdf /setstrokeadjust{pop}bdf }ifelse/rectstroke defed /xt xdfxt {/yt save def} if/privrectpath {  4 -2 roll m dtransform round exch round exch idtransform  2 copy 0 lt exch 0 lt xor {dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto} {exch dup 0 rlineto exch 0 exch rlineto neg 0 rlineto} ifelse closepath}bdf/rectclip{newpath privrectpath clip newpath}def/rectfill{gsave newpath privrectpath fill grestore}def/rectstroke{gsave newpath privrectpath stroke grestore}defxt {yt restore} if/_fonthacksave false def/currentpacking defed { /_bfh {/_fonthacksave currentpacking def false setpacking} bdf /_efh {_fonthacksave setpacking} bdf}{ /_bfh {} bdf /_efh {} bdf}ifelse/packedarray{array astore readonly}ndf/` {  false setoverprint     /-save0- save def 5 index concat pop storerect left bottom width height rectclip pop  /dict_count countdictstack def /op_count count 1 sub def userdict begin  /showpage {} def  0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bdf/currentpacking defed{true setpacking}if/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/xformfont { currentfont exch makefont setfont } bdf/fhnumcolors 1  statusdict begin/processcolors defed {pop processcolors}{/deviceinfo defed {deviceinfo /Colors known {pop deviceinfo /Colors get} if} if} ifelse end def/printerRes  gsave matrix defaultmatrix setmatrix 72 72 dtransform abs exch abs max grestore def/graycalcs[ {Angle Frequency}    {GrayAngle GrayFrequency}  {0 Width Height matrix defaultmatrix idtransform dup mul exch dup mul add sqrt 72 exch div}  {0 GrayWidth GrayHeight matrix defaultmatrix idtransform dup mul exch dup mul add sqrt 72 exch div} ] def/calcgraysteps { forcemaxsteps {maxsteps } {/currenthalftone defed{currenthalftone /dicttype eq}{false}ifelse{currenthalftone beginHalftoneType 4 le{graycalcs HalftoneType 1 sub get exec}{HalftoneType 5 eq{Default begin{graycalcs HalftoneType 1 sub get exec}end}{0 60} ifelse}ifelseend}{currentscreen pop exch }ifelse printerRes 300 max exch div exch 2 copy sin mul round dup mul 3 1 roll cos mul round dup mul add 1 add dup maxsteps gt {pop maxsteps} if  } ifelse} bdf/nextrelease defed {  /languagelevel defed not {    /framebuffer defed { 0 40 string framebuffer 9 1 roll 8 {pop} repeatdup 516 eq exch 520 eq or{/fhnumcolors 3 def/currentscreen {60 0 {pop pop 1}}bdf/calcgraysteps {maxsteps} bdf}if}if }if}iffhnumcolors 1 ne { /calcgraysteps {maxsteps} bdf} if/currentpagedevice defed {   currentpagedevice /PreRenderingEnhance known {currentpagedevice /PreRenderingEnhance get{/calcgraysteps {forcemaxsteps {maxsteps}{256 maxsteps min}ifelse} def} if } if} if/gradfrequency 144 defprinterRes 1000 lt { /gradfrequency 72 def} if/adjnumsteps {  dup dtransform abs exch abs max    printerRes div         gradfrequency mul       round         5 max        min        }bdf/goodsep { spots exch get 4 get dup sepname eq exch (_vc_Registration) eq or}bdf/BeginGradation defed{/bb{BeginGradation}bdf}{/bb{}bdf}ifelse/EndGradation defed{/eb{EndGradation}bdf}{/eb{}bdf}ifelse/bottom -0 def /delta -0 def /frac -0 def /height -0 def /left -0 def /numsteps1 -0 def /radius -0 def /right -0 def /top -0 def /width -0 def /xt -0 def /yt -0 def /df currentflat def /tempstr 1 string def /clipflatness currentflat def /inverted?  0 currenttransfer exec .5 ge def/tc1 [0 0 0 1] def /tc2 [0 0 0 1] def /storerect{/top xdf /right xdf /bottom xdf /left xdf /width right left sub def /height top bottom sub def}bdf/concatprocs{ systemdict /packedarray known  {dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse { /proc2 exch cvlit def /proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx } { /proc2 exch cvlit def /proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx }ifelse}bdf/i{dup 0 eq {pop df dup}  {dup} ifelse  /clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{  {/filler /eofill load def /clipper /eoclip load def} {/filler /fill load def /clipper /clip load def} ifelse}bdf/normtaper{}bdf/logtaper{9 mul 1 add log}bdf/CD{ /NF exch def  {    exch dup /FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse }forall  NF}bdf/MN{ 1 index length    /Len exch def  dup length Len add   string dup     Len      4 -1 roll     putinterval    dup      0       4 -1 roll    putinterval   }bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch {1 index MN cvn/NewN exch def cvn findfont dup maxlength dict CD dup/FontName NewN put dup /Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{  dup       FontDirectory exch    known      {pop 3 -1 roll pop}   {RC} ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known {exch pop findfont 3 -1 roll pop} {pop dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll  {3 -1 roll dup 4 -2 roll put}forall put definefont} ifelse}bdf/RFJ{  dup       FontDirectory exch    known      {pop 3 -1 roll pop   FontDirectory /Ryumin-Light-83pv-RKSJ-H known  {pop pop /Ryumin-Light-83pv-RKSJ-H dup}if   }       {RC} ifelse}bdf/FFJ{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known {exch pop findfont 3 -1 roll pop} {popdup FontDirectory exch known not  {FontDirectory /Ryumin-Light-83pv-RKSJ-H known {pop /Ryumin-Light-83pv-RKSJ-H}if  }if             dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll  {3 -1 roll dup 4 -2 roll put}forall put definefont} ifelse}bdf/fps{ currentflat    exch      dup 0 le{pop 1}if  {dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if} {exit} ifelse }loop  pop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf /W{/clipper load 100 clipflatness dup setflat fps}bdfuserdict begin /BDFontDict 29 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}def/:M {pop pop} def/sf {pop} def/S {pop} def/@b {pop pop pop pop pop pop pop pop} def/_bdsave /save load def/_bdrestore /restore load def/save { dup /fontsave eq {null} {_bdsave} ifelse } def/restore { dup null eq { pop } { _bdrestore } ifelse } def/fontsave null defend/MacVec 256 array def MacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash /questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore popend %. AltsysDict%%EndResource%%EndProlog%%BeginSetupAltsysDict begin_bfh%%IncludeResource: font Symbol_efh0 dict dup beginend /f0 /Symbol FF def_bfh%%IncludeResource: font Futura-Book_efhMacVec 256 array copy/f1 /|______Futura-Book dup RF findfont defend %. AltsysDict%%EndSetupAltsysDict begin /onlyk4{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/cmyk2gray{ 4 -1 roll 0.3 mul 4 -1 roll 0.59 mul 4 -1 roll 0.11 mul add add add 1 min neg 1 add}bdf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/maxcolor {  max max max  } ndf/maxspot { pop} ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 packedarray}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{setgray}ndf/setoverprint{pop}ndf /currentoverprint false ndf/cmykbufs2gray{ 0 1 2 index length 1 sub { 4 index 1 index get 0.3 mul 4 index 2 index get 0.59 mul 4 index 3 index get 0.11 mul 4 index 4 index get add add add cvi 255 min255 exch sub2 index 3 1 roll put }for 4 1 roll pop pop pop}bdf/colorimage{ pop pop [5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx ]cvx  image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelseand{userdict begin bdf end}{ndf}ifelsefhnumcolors 1 ne {/yt save def} if/customcolorimage{ aload pop (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdfic im iy ik cmyk2gray /xt xdfcurrenttransfer{dup 1.0 exch sub xt mul add}concatprocsst image } ifelse}ndffhnumcolors 1 ne {yt restore} iffhnumcolors 3 ne {/yt save def} if/customcolorimage{ aload pop  (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdf1.0 dup ic ik add min sub 1.0 dup im ik add min sub 1.0 dup iy ik add min sub /ic xdf /iy xdf /im xdfcurrentcolortransfer4 1 roll {dup 1.0 exch sub ic mul add}concatprocs 4 1 roll {dup 1.0 exch sub iy mul add}concatprocs 4 1 roll {dup 1.0 exch sub im mul add}concatprocs 4 1 roll setcolortransfer{/dummy xdf dummy}concatprocs{dummy}{dummy}true 3 colorimage } ifelse}ndffhnumcolors 3 ne {yt restore} iffhnumcolors 4 ne {/yt save def} if/customcolorimage{ aload pop (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdfcurrentcolortransfer{1.0 exch sub ik mul ik sub 1 add}concatprocs 4 1 roll{1.0 exch sub iy mul iy sub 1 add}concatprocs 4 1 roll{1.0 exch sub im mul im sub 1 add}concatprocs 4 1 roll{1.0 exch sub ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer{/dummy xdf dummy}concatprocs{dummy}{dummy}{dummy}true 4 colorimage } ifelse}ndffhnumcolors 4 ne {yt restore} if/separationimage{image}ndf/newcmykcustomcolor{6 packedarray}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf /setspotcolor {  spots exch get dup 4 get (_vc_Registration) eq {pop 1 exch sub setseparationgray} {0 5 getinterval exch setcustomcolor} ifelse}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{st pop pop pop}ndf/fas{}ndf/sas{}ndf/fhsetspreadsize{pop}ndf/filler{fill}bdf /F{gsave {filler}fp grestore}bdf/f{closepath F}bdf/S{gsave {stroke}fp grestore}bdf/s{closepath S}bdf/bc4 [0 0 0 0] def /_lfp4 { /iosv inkoverprint def /cosv currentoverprint def /yt xdf        /xt xdf        /ang xdf       storerect /taperfcn xdf /k2 xdf /y2 xdf /m2 xdf /c2 xdf /k1 xdf /y1 xdf /m1 xdf /c1 xdf c1 c2 sub abs m1 m2 sub abs y1 y2 sub abs k1 k2 sub abs maxcolor       calcgraysteps mul abs round   height abs adjnumsteps    dup 2 lt {pop 1} if     1 sub /numsteps1 xdf currentflat mark     currentflat clipflatness   /delta top bottom sub numsteps1 1 add div def  /right right left sub def   /botsv top delta sub def   {{Wxt yt translate ang rotatext neg yt neg translate dup setflat /bottom botsv def0 1 numsteps1 {numsteps1 dup 0 eq {pop 0.5 } { div } ifelse taperfcn /frac xdfbc4 0 c2 c1 sub frac mul c1 add putbc4 1 m2 m1 sub frac mul m1 add putbc4 2 y2 y1 sub frac mul y1 add putbc4 3 k2 k1 sub frac mul k1 add putbc4 vc1 index setflat { mark {newpath left bottom right delta rectfill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop/bottom bottom delta sub def}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/bcs [0 0] def /_lfs4 { /iosv inkoverprint def /cosv currentoverprint def /yt xdf        /xt xdf        /ang xdf       storerect /taperfcn xdf /tint2 xdf       /tint1 xdf       bcs exch 1 exch put     tint1 tint2 sub abs     bcs 1 get maxspot     calcgraysteps mul abs round   height abs adjnumsteps    dup 2 lt {pop 2} if     1 sub /numsteps1 xdf currentflat mark     currentflat clipflatness   /delta top bottom sub numsteps1 1 add div def  /right right left sub def   /botsv top delta sub def   {{Wxt yt translate ang rotatext neg yt neg translate dup setflat /bottom botsv def0 1 numsteps1 {numsteps1 div taperfcn /frac xdfbcs 01.0 tint2 tint1 sub frac mul tint1 add subput bcs vc1 index setflat { mark {newpath left bottom right delta rectfill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop/bottom bottom delta sub def}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/_rfs4 { /iosv inkoverprint def /cosv currentoverprint def /tint2 xdf       /tint1 xdf       bcs exch 1 exch put     /radius xdf       /yt xdf        /xt xdf        tint1 tint2 sub abs     bcs 1 get maxspot     calcgraysteps mul abs round   radius abs adjnumsteps    dup 2 lt {pop 2} if     1 sub /numsteps1 xdf radius numsteps1 div 2 div /halfstep xdf  currentflat mark     currentflat clipflatness   {{dup setflat W 0 1 numsteps1 {dup /radindex xdfnumsteps1 div /frac xdfbcs 0tint2 tint1 sub frac mul tint1 addput bcs vc1 index setflat { newpath mark xt yt radius 1 frac sub mul halfstep add 0 360{ arcradindex numsteps1 ne {xt yt radindex 1 add numsteps1 div 1 exch sub radius mul halfstep adddup xt add yt moveto 360 0 arcn } iffill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/_rfp4 { /iosv inkoverprint def /cosv currentoverprint def /k2 xdf /y2 xdf /m2 xdf /c2 xdf /k1 xdf /y1 xdf /m1 xdf /c1 xdf /radius xdf       /yt xdf        /xt xdf        c1 c2 sub abs m1 m2 sub abs y1 y2 sub abs k1 k2 sub abs maxcolor       calcgraysteps mul abs round   radius abs adjnumsteps    dup 2 lt {pop 1} if     1 sub /numsteps1 xdf radius numsteps1 dup 0 eq {pop} {div} ifelse  2 div /halfstep xdf  currentflat mark     currentflat clipflatness   {{dup setflat W 0 1 numsteps1 {dup /radindex xdfnumsteps1 dup 0 eq {pop 0.5 } { div } ifelse /frac xdfbc4 0 c2 c1 sub frac mul c1 add putbc4 1 m2 m1 sub frac mul m1 add putbc4 2 y2 y1 sub frac mul y1 add putbc4 3 k2 k1 sub frac mul k1 add putbc4 vc1 index setflat { newpath mark xt yt radius 1 frac sub mul halfstep add 0 360{ arcradindex numsteps1 ne {xt yt radindex 1 add numsteps1 dup 0 eq {pop} {div} ifelse 1 exch sub radius mul halfstep adddup xt add yt moveto 360 0 arcn } iffill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/lfp4{_lfp4}ndf/lfs4{_lfs4}ndf/rfs4{_rfs4}ndf/rfp4{_rfp4}ndf/cvc [0 0 0 1] def /vc{ AltsysDict /cvc 2 index put  aload length 4 eq {setcmykcolor} {setspotcolor} ifelse}bdf /origmtx matrix currentmatrix def/ImMatrix matrix currentmatrix def0 setseparationgray/imgr {2016 1584 2376 1872 } def /bleed 0 def /clpr {2016 1584 2376 1872 } def /xs 1 def /ys 1 def /botx 0 def /overlap 0 def /wdist 18 def 0 2 mul fhsetspreadsize 0 0 ne {/df 0 def /clipflatness 0 def} if /maxsteps 256 def /forcemaxsteps false def vms-2052 -1653 translate/currentpacking defed{false setpacking}if /spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor]def/textopf false def/curtextmtx{}def/otw .25 def/msf{dup/curtextmtx xdf makefont setfont}bdf/makesetfont/msf load def/curtextheight{.707104 .707104 curtextmtx dtransform dup mul exch dup mul add sqrt}bdf/ta2{ tempstr 2 index gsave exec grestore cwidth cheight rmoveto 4 index eq{5 index 5 index rmoveto}if 2 index 2 index rmoveto }bdf/ta{exch systemdict/cshow known{{/cheight xdf/cwidth xdf tempstr 0 2 index put ta2}exch cshow} {{tempstr 0 2 index put tempstr stringwidth/cheight xdf/cwidth xdf ta2}forall} ifelse 6{pop}repeat}bdf/sts{/textopf currentoverprint def vc setoverprint/ts{awidthshow}def exec textopf setoverprint}bdf/stol{/xt currentlinewidth def  setlinewidth vc newpath  /ts{{false charpath stroke}ta}def exec  xt setlinewidth}bdf  /strk{/textopf currentoverprint def vc setoverprint /ts{{false charpath stroke}ta}def exec  textopf setoverprint }bdf n[] 0 d3.863708 M1 w0 j0 Jfalse setoverprint0 ifalse eomode[0 0 0 1] vcvmsqvms2142.3899 1760.2138 m2104.122 1737.7182 LF 2.5497 w4 MS n2140.8759 1754.4959 m2141.1789 1759.438 L2136.6734 1761.4909 L2146.4245 1762.5899 L2140.8759 1754.4959 Lf nvmrQqvms2142.1737 1721.8853 m2103.9058 1744.3823 Lfalse setoverprintF 2.5497 w4 MS n2140.6597 1727.6031 m2140.9627 1722.6612 L2136.4572 1720.6086 L2146.2083 1719.5091 L2140.6597 1727.6031 Lf nvmrQqvms2220.9574 1719.2219 m2247.2513 1719.2219 Lfalse setoverprintF 2.5499 w4 MS n2225.5606 1723.1667 m2222.8272 1719.0383 L2225.703 1715.0079 L2216.7081 1718.9315 L2225.5606 1723.1667 Lf n2241.507 1715.0079 m2244.2404 1719.1363 L2241.3645 1723.1667 L2250.3595 1719.2431 L2241.507 1715.0079 Lf nvmrQ2236.573 1683.1317 m2303.0065 1683.1317 L2305.4856 1683.1317 2307.4953 1681.117 2307.4953 1678.6317 C2307.4953 1658.8317 L2307.4953 1656.3464 2305.4856 1654.3317 2303.0065 1654.3317 C2236.573 1654.3317 L2234.0939 1654.3317 2232.0843 1656.3464 2232.0843 1658.8317 C2232.0843 1678.6317 L2232.0843 1681.117 2234.0939 1683.1317 2236.573 1683.1317 Cfalse setoverprintf 0.75 wS n2150.573 1683.1317 m2217.0065 1683.1317 L2219.4856 1683.1317 2221.4953 1681.117 2221.4953 1678.6317 C2221.4953 1658.8317 L2221.4953 1656.3464 2219.4856 1654.3317 2217.0065 1654.3317 C2150.573 1654.3317 L2148.0939 1654.3317 2146.0843 1656.3464 2146.0843 1658.8317 C2146.0843 1678.6317 L2146.0843 1681.117 2148.0939 1683.1317 2150.573 1683.1317 Cf S n2064.573 1683.1317 m2131.0065 1683.1317 L2133.4856 1683.1317 2135.4953 1681.117 2135.4953 1678.6317 C2135.4953 1658.8317 L2135.4953 1656.3464 2133.4856 1654.3317 2131.0065 1654.3317 C2064.573 1654.3317 L2062.0939 1654.3317 2060.0843 1656.3464 2060.0843 1658.8317 C2060.0843 1678.6317 L2060.0843 1681.117 2062.0939 1683.1317 2064.573 1683.1317 Cf S n2147.4163 1717.9259 m2147.4163 1727.806 2162.9294 1735.8152 2182.0665 1735.8152 C2201.2035 1735.8152 2216.7166 1727.806 2216.7166 1717.9259 C2216.7166 1708.0459 2201.2035 1700.0367 2182.0665 1700.0367 C2162.9294 1700.0367 2147.4163 1708.0459 2147.4163 1717.9259 Cf S n2147.4163 1761.4259 m2147.4163 1771.306 2162.9294 1779.3152 2182.0665 1779.3152 C2201.2035 1779.3152 2216.7166 1771.306 2216.7166 1761.4259 C2216.7166 1751.5459 2201.2035 1743.5367 2182.0665 1743.5367 C2162.9294 1743.5367 2147.4163 1751.5459 2147.4163 1761.4259 Cf S n2146.4163 1762.4259 m2146.4163 1772.306 2161.9294 1780.3152 2181.0665 1780.3152 C2200.2035 1780.3152 2215.7166 1772.306 2215.7166 1762.4259 C2215.7166 1752.5459 2200.2035 1744.5367 2181.0665 1744.5367 C2161.9294 1744.5367 2146.4163 1752.5459 2146.4163 1762.4259 C[0 0 0 0]  vcf [0 0 0 1]  vcS n2216.4975 1768.7273 m2146.4312 1768.7273 L2146.4312 1749.7274 L2216.4975 1749.7274 L2216.4975 1768.7273 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont2149.364716 1761.127411 m0 0 32 0 0 (Communication) ts}false[0 0 0 1]sts{f1 [9.5 0 0 9.5 0 0] makesetfont2171.841476 1752.627411 m0 0 32 0 0 (Keys) ts}false[0 0 0 1]stsQ2146.4163 1718.9259 m2146.4163 1728.806 2161.9294 1736.8152 2181.0665 1736.8152 C2200.2035 1736.8152 2215.7166 1728.806 2215.7166 1718.9259 C2215.7166 1709.0459 2200.2035 1701.0367 2181.0665 1701.0367 C2161.9294 1701.0367 2146.4163 1709.0459 2146.4163 1718.9259 C[0 0 0 0]  vcfalse setoverprintf [0 0 0 1]  vcS n2256.1435 1733.4352 m2333.5435 1733.4352 L2336.0288 1733.4352 2338.0435 1731.4205 2338.0435 1728.9352 C2338.0435 1709.1352 L2338.0435 1706.6499 2336.0288 1704.6352 2333.5435 1704.6352 C2256.1435 1704.6352 L2253.6582 1704.6352 2251.6435 1706.6499 2251.6435 1709.1352 C2251.6435 1728.9352 L2251.6435 1731.4205 2253.6582 1733.4352 2256.1435 1733.4352 Cf S n2053.6802 1800.4942 m2111.7535 1800.4942 L2111.7535 1719.8542 L2053.6802 1719.8542 L2053.6802 1800.4942 Lf S n2255.1435 1734.4352 m2332.5435 1734.4352 L2335.0288 1734.4352 2337.0435 1732.4205 2337.0435 1729.9352 C2337.0435 1710.1352 L2337.0435 1707.6499 2335.0288 1705.6352 2332.5435 1705.6352 C2255.1435 1705.6352 L2252.6582 1705.6352 2250.6435 1707.6499 2250.6435 1710.1352 C2250.6435 1729.9352 L2250.6435 1732.4205 2252.6582 1734.4352 2255.1435 1734.4352 C[0 0 0 0]  vcf [0 0 0 1]  vcS n2334.3165 1723.3129 m2254.4154 1723.3129 L2254.4154 1714.813 L2334.3165 1714.813 L2334.3165 1723.3129 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont2254.435394 1715.713013 m0 0 32 0 0 (Signature Gateway) ts}false[0 0 0 1]stsQ2201.1379 1722.2793 m2162.058 1722.2793 L2162.058 1713.7794 L2201.1379 1713.7794 L2201.1379 1722.2793 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont2162.077988 1714.679413 m0 0 32 0 0 (Signature) ts}false[0 0 0 1]stsQ2063.573 1684.1317 m2130.0065 1684.1317 L2132.4856 1684.1317 2134.4953 1682.117 2134.4953 1679.6317 C2134.4953 1659.8317 L2134.4953 1657.3464 2132.4856 1655.3317 2130.0065 1655.3317 C2063.573 1655.3317 L2061.0939 1655.3317 2059.0843 1657.3464 2059.0843 1659.8317 C2059.0843 1679.6317 L2059.0843 1682.117 2061.0939 1684.1317 2063.573 1684.1317 C[0 0 0 0]  vcfalse setoverprintf [0 0 0 1]  vcS n2127.9363 1673.0352 m2063.6971 1673.0352 L2063.6971 1662.5353 L2127.9363 1662.5353 L2127.9363 1673.0352 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont2063.717087 1665.435318 m0 0 32 0 0 (Communication) ts}false[0 0 0 1]stsQ2149.573 1684.1317 m2216.0065 1684.1317 L2218.4856 1684.1317 2220.4953 1682.117 2220.4953 1679.6317 C2220.4953 1659.8317 L2220.4953 1657.3464 2218.4856 1655.3317 2216.0065 1655.3317 C2149.573 1655.3317 L2147.0939 1655.3317 2145.0843 1657.3464 2145.0843 1659.8317 C2145.0843 1679.6317 L2145.0843 1682.117 2147.0939 1684.1317 2149.573 1684.1317 C[0 0 0 0]  vcfalse setoverprintf [0 0 0 1]  vcS n2212.8286 1673.0352 m2153.1971 1673.0352 L2153.1971 1662.5353 L2212.8286 1662.5353 L2212.8286 1673.0352 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont2153.217087 1665.435318 m0 0 32 0 0 (Cr) ts0.379929 0 rmoveto }false[0 0 0 1]sts{f1 [9.5 0 0 9.5 0 0] makesetfont0 0 32 0 0 (ypto Librar) ts0.379929 0 rmoveto }false[0 0 0 1]sts{f1 [9.5 0 0 9.5 0 0] makesetfont0 0 32 0 0 (y) ts}false[0 0 0 1]stsQ2235.573 1684.1317 m2302.0065 1684.1317 L2304.4856 1684.1317 2306.4953 1682.117 2306.4953 1679.6317 C2306.4953 1659.8317 L2306.4953 1657.3464 2304.4856 1655.3317 2302.0065 1655.3317 C2235.573 1655.3317 L2233.0939 1655.3317 2231.0843 1657.3464 2231.0843 1659.8317 C2231.0843 1679.6317 L2231.0843 1682.117 2233.0939 1684.1317 2235.573 1684.1317 C[0 0 0 0]  vcfalse setoverprintf [0 0 0 1]  vcS n2303.4306 1673.0351 m2233.697 1673.0351 L2233.697 1662.5352 L2303.4306 1662.5352 L2303.4306 1673.0351 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont2233.716995 1665.435211 m0 0 32 0 0 (Proactive Utilities) ts}false[0 0 0 1]stsQvmrs2052.6802 1801.4942 m2110.7535 1801.4942 L2110.7535 1720.8542 L2052.6802 1720.8542 L2052.6802 1801.4942 L[0 0 0 0]  vcf qWnvms2045.5884 1761.2834 m2115.5884 1761.2834 L0.75 w[0 0 0 1]  vcS nvmrQ0.75 w[0 0 0 1]  vcfalse setoverprintS n2101.8238 1790.0614 m2061.4994 1790.0614 L2061.4994 1771.0615 L2101.8238 1771.0615 L2101.8238 1790.0614 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont2062.971161 1782.461517 m0 0 32 0 0 (Proactive) ts}false[0 0 0 1]sts{f1 [9.5 0 0 9.5 0 0] makesetfont2065.996002 1773.961517 m0 0 32 0 0 (T) ts-0.949921 0 rmoveto }false[0 0 0 1]sts{f1 [9.5 0 0 9.5 0 0] makesetfont0 0 32 0 0 (ask-List) ts}false[0 0 0 1]stsQ2102.3339 1749.8114 m2062.0095 1749.8114 L2062.0095 1730.8115 L2102.3339 1730.8115 L2102.3339 1749.8114 Lnq_bfh%%IncludeResource: font Futura-Book_efh{f1 [9.5 0 0 9.5 0 0] makesetfont2063.481262 1742.211517 m0 0 32 0 0 (Proactive) ts}false[0 0 0 1]sts{f1 [9.5 0 0 9.5 0 0] makesetfont2063.123428 1733.711517 m0 0 32 0 0 (Manager) ts}false[0 0 0 1]stsQvmrvmrend%%Trailer%%DocumentNeededResources: font Symbol%%+ font Futura-Book%%DocumentFonts: Symbol%%+ Futura-Book%%DocumentNeededFonts: Symbol%%+ Futura-Book%%EndDocumentV1`65N1`65F M1`65/AE 190 190 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4800 39 (Figur) 0.05162 0 180 0 4 A1`65-4619 39 (e 1:  ) 0.05162 0 172 3 5 A1`65/AC 190 190 w1`65-4448 39 (Operating Systems V) 0.046448 0 629 2 18 A1`65-3821 39 (iew) 0.046448 0 101 0 2 A1`65O1`65N1`65F M1`65/AE 190 190 w1`65-2997 2807 (Figure 2:) -0.003922 0 308 1 8 A1`65/AC 190 190 w1`65-2690 2807 (  Architecture Model) -0.003525 0 617 3 19 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65-4856 1397 (W) -0.082764 0 75 0 0 A1`65-4784 1397 (e ar) -0.082764 0 140 1 3 A1`65-4644 1397 (e awar) -0.082764 0 253 1 5 A1`65-4391 1397 (e) -0.082764 0 41 0 0 A1`65-4625 1505 (of three) 0.05188 0 275 1 7 A1`65-4899 1614 (implementation) 0 -0.01265 550 0 13 A1`65-4745 1722 (ef) -0.133484 0 67 0 1 A1`65-4675 1722 (for) -0.133484 0 101 0 2 A1`65-4570 1722 (ts that) -0.133484 0 220 1 6 A1`65-4802 1830 (are currently) -0.194412 0 452 1 12 A1`65-4753 1939 (under way) -0.141068 0 386 1 8 A1`65-4373 1939 (.) -0.141068 0 23 0 0 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 7 7%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate-6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 4202 2808 4202 -2567 F jbd^6572 -73 237 562 -237 -489 1.791667 -1.808219 4135 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 3053 (CR) 0 16.086365 105 0 1 A1`654452 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 3053 (T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S   \321 ) 7.445709 1.841431 2956 52 91 A1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`653306 3053 (  S P R I N G   1 9 9 7) 7.445572 1.841431 744 13 22 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`654179 3053 (7) 0 0 37 0 0 A1`65O1`65N1`65F M1`65/AB 196 200 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 -2503 (References) 0 0.00386 459 0 9 A1`65/AF 170 170 w1`65350 -2395 ([1]) 0 -0.096939 75 0 2 A1`65483 -2395 (J. Bar) -2.302139 -0.128738 154 1 5 A1`65635 -2395 (-Ilan, and D. Beaver) -2.302139 -0.128738 571 3 19 A1`651202 -2395 (. Non-Cr) -2.302139 -0.128738 260 1 7 A1`651462 -2395 (yptographic Fault-T) -2.302139 -0.128738 567 1 18 A1`652022 -2395 (ol-) -2.302139 -0.128738 78 0 2 A1`65483 -2286 (erant Computing in a Constant Number of Rounds. In) 6.605591 0 1617 8 49 A1`65/AC 170 170 w1`65483 -2178 (Proceedings of the ACM Symposium on Principles of Distrib-) -1.937317 0 1617 8 57 A1`65483 -2070 (uted Computation) 0.07254 0 486 1 15 A1`65/AF 170 170 w1`65969 -2070 (, pages 201-209, 1989.) 0.07254 0 637 3 21 A1`65/AF 172 170 w1`65350 -1961 ([2]) 0 -0.053665 75 0 2 A1`65483 -1961 (M. Ben-Or) -2.325134 -0.524124 311 1 8 A1`65790 -1961 (, S. Goldwasser) -2.325134 -0.524124 428 2 14 A1`651215 -1961 (, and A. W) -2.325134 -0.524124 312 3 9 A1`651524 -1961 (igderson. Complete-) -2.325134 -0.524124 576 1 18 A1`65483 -1853 (ness Theor) -2.325134 -0.270432 311 1 9 A1`65794 -1853 (ems for Noncr) -2.325134 -0.270432 405 2 12 A1`651199 -1853 (yptographic Fault-T) -2.325134 -0.270432 570 1 18 A1`651762 -1853 (olerant Dis-) -2.325134 -0.270432 338 1 11 A1`65483 -1745 (tributed Computations. In ) 10.891937 0 811 3 25 A1`65/AC 172 170 w1`651295 -1745 (Proc.20th Annual Symp. on) 10.891937 0 805 3 24 A1`65483 -1636 (the Theory of Computing) -0.016525 0 681 3 22 A1`65/AF 172 170 w1`651165 -1636 (, pages 1-10. ACM, 1988.) -0.01651 0 743 4 23 A1`65/AF 173 170 w1`65350 -1528 ([3]) 0 -0.011475 76 0 2 A1`65483 -1528 (G. R. Blakley) -1.830246 0 390 2 12 A1`65867 -1528 (. Safeguar) -1.830246 0 283 1 9 A1`651150 -1528 (ding cr) -1.830246 0 201 1 6 A1`651351 -1528 (yptographic keys. In ) -1.830246 0 600 3 20 A1`65/AC 173 170 w1`651952 -1528 (Pr) 0 0 64 0 1 A1`652016 -1528 (oc.) 0 0 84 0 2 A1`65483 -1420 (AFIPS 1979 National Computer Conference) 5.634872 0 1262 4 38 A1`65/AF 173 170 w1`651746 -1420 (, pages 313-) 5.634735 0 354 2 11 A1`65483 -1311 (317. AFIPS, 1979.) 0.054794 0 540 2 16 A1`65350 -1203 ([4]) 0 -0.011475 76 0 2 A1`65483 -1203 (D. Boneh, Ed Felten, Bill Aiello, and Matt Franklin.) 10.706146 0 1617 8 51 A1`65483 -1095 (http://gump.bellcore.com:7700.) 0 0.006378 917 0 29 A1`65/AF 172 170 w1`65350 -986 ([5]) 0 -0.053665 75 0 2 A1`65483 -986 (D. Carrel and D. Harkins. The resolution of ISAKMP) 7.631821 0 1617 8 49 A1`65483 -878 (with Oakley) 4.836731 0 360 1 10 A1`65838 -878 (, ) 4.836731 0 40 1 1 A1`65/AC 172 170 w1`65879 -878 (Inter) 4.836731 0 131 0 4 A1`651010 -878 (net Draft) 4.836731 0 253 1 8 A1`65/AF 172 170 w1`651263 -878 ( ) 4.836731 0 23 1 0 A1`65/AC 172 170 w1`651286 -878 (draft-ietf-ipsec-isakmp-oakley-) 0 0 814 0 30 A1`65483 -770 (03.txt) 0 0 167 0 5 A1`65/AF 172 170 w1`65650 -770 (, March 1997.) -0.037415 0 405 2 12 A1`65/AF 173 170 w1`65350 -661 ([6]) 0 -0.011475 76 0 2 A1`65483 -661 (D. Chaum, C. Crepeau, and I. Damgard. Multiparty Un-) -2.348206 -0.265732 1617 8 51 A1`65483 -553 (conditionally Secure Protocols. In ) 12.643723 0.198151 1071 4 34 A1`65/AC 173 170 w1`651554 -553 (Proc. 20th Annual) 12.643433 0.198151 546 2 16 A1`65483 -445 (Symp. on the Theory of Computing) 5.246902 0 995 5 31 A1`65/AF 173 170 w1`651478 -445 (, pages 11-19. ACM,) 5.246902 0 622 3 18 A1`65483 -336 (1988.) 0 -0.016281 162 0 4 A1`65350 -228 ([7]) 0 -0.011475 76 0 2 A1`65483 -228 (B. Chor) 10.617905 0 243 1 6 A1`65723 -228 (, S. Goldwasser) 10.617905 0 467 2 14 A1`651185 -228 (, S. Micali, and B. A) 10.617905 0 653 5 20 A1`651833 -228 (werbuch.) 10.617905 0 267 0 7 A1`65483 -120 (V) 7.026291 0 52 0 0 A1`65530 -120 (erifiable Secr) 7.026291 0 390 1 13 A1`65920 -120 (et Sharing and Achieving Simultaneity) 7.026291 0 1180 4 36 A1`65483 -11 (in the Presence of Faults. In ) -2.348206 -0.343689 808 6 29 A1`65/AC 173 170 w1`651292 -11 (Proceeding 26th Annual Sym-) -2.34816 -0.343689 808 3 26 A1`65483 97 (posium on the Foundations of Computer Science) -2.348206 -0.418381 1283 6 44 A1`65/AF 173 170 w1`651766 97 (, pages 383-) -2.348206 -0.418381 334 2 11 A1`65483 205 (395. IEEE, 1985.) 0.093063 0 488 2 15 A1`65350 314 ([8]) 0 -0.011475 76 0 2 A1`65483 314 (R. Canetti and A.  Her) 8.613754 0 719 5 21 A1`651204 314 (zber) 8.613754 0 116 0 3 A1`651320 314 (g. Maintaining security in) 8.613754 0 780 3 25 A1`65483 422 (the pr) 6.340515 0 181 1 5 A1`65664 422 (esence of transient faults. In Y) 6.340515 0 914 5 31 A1`651572 422 (. Desmedt, editor) 6.340515 0 514 2 16 A1`652082 422 (,) 6.340515 0 18 0 0 A1`65/AC 173 170 w1`65483 530 (Advances in Cryptology \321 Crypto \32594) 11.746689 0 1124 5 34 A1`65/AF 173 170 w1`651607 530 (, pages 425-438,) 11.74707 0 493 2 15 A1`65483 639 (1994. Springer) -2.029251 0 427 1 13 A1`65908 639 (-V) -2.029251 0 76 0 1 A1`65979 639 (erlag.  Lectur) -2.029251 0 379 2 13 A1`651358 639 (e Notes in Computer Sci-) -2.029251 0 742 4 23 A1`65483 747 (ence No. 839.) -0.078354 0 409 2 12 A1`65350 855 ([9]) 0 -0.011475 76 0 2 A1`65483 855 (R. Canetti, S. Halevi, and A. Her) 11.540115 0 1055 6 32 A1`651539 855 (zber) 11.540115 0 116 0 3 A1`651655 855 (g. Maintaining) 11.540115 0 445 1 13 A1`65483 964 (Authenticated Communication in the Presence of) 12.643631 1.841782 1617 5 45 A1`65483 1072 (Break-ins. In ) -2.234879 0 391 2 13 A1`65/AC 173 170 w1`65874 1072 (Proc. 16th ACM Symp. on Principles of Dis-) -2.234787 0 1226 7 41 A1`65483 1180 (tributed Computation) -0.02533 0 587 1 19 A1`65/AF 173 170 w1`651071 1180 (. ACM, 1997.) -0.02533 0 407 2 11 A1`65/AF 170 170 w1`65350 1289 ([10]) 0 -0.064804 110 0 3 A1`65483 1289 (R. Cramer) 0.96582 0 300 1 8 A1`65779 1289 (, R. Gennar) 0.96582 0 340 2 10 A1`651120 1289 (o, and B. Schoenmakers. A secur) 0.96582 0 949 5 30 A1`652069 1289 (e) 0.96582 0 31 0 0 A1`65483 1397 (and optimally efficient multi-authority election scheme.) 2.371948 0 1617 5 55 A1`65483 1505 (In W) 12.395599 2.493942 174 1 3 A1`65653 1505 (alter Fumy) 12.395599 2.493942 342 1 9 A1`65990 1505 (, editor) 12.395599 2.493942 237 1 7 A1`651223 1505 (, ) 12.395599 2.493942 53 1 1 A1`65/AC 170 170 w1`651276 1505 (Advances in Cr) 12.395721 2.493973 480 2 13 A1`651757 1505 (yptology \321) 12.395721 2.493973 343 1 9 A1`65483 1614 (Eur) -2.302078 -0.440018 101 0 2 A1`65584 1614 (ocr) -2.302078 -0.440018 81 0 2 A1`65665 1614 (ypt \32597) -2.302078 -0.440018 185 1 6 A1`65/AF 170 170 w1`65851 1614 (, pages 103-118,  1997. Springer) -2.302155 -0.440018 891 5 31 A1`651739 1614 (-V) -2.302155 -0.440018 74 0 1 A1`651808 1614 (erlag. Lec-) -2.302155 -0.440018 292 1 10 A1`65483 1722 (ture Notes in Computer Science No. 1233.) -0.00267 0 1231 6 39 A1`65/AF 173 170 w1`65350 1830 ([11]) 0 0.033829 112 0 3 A1`65483 1830 (Y) -1.278366 0 44 0 0 A1`65521 1830 (. Desmedt and Y) -1.278366 0 477 3 14 A1`65992 1830 (. Frankel. Thr) -1.278366 0 403 2 13 A1`651395 1830 (eshold cr) -1.278366 0 262 1 8 A1`651656 1830 (yptosystems. In) -1.278366 0 444 1 14 A1`65483 1939 (G. Brassar) 12.626297 0 310 1 9 A1`65793 1939 (d, editor) 12.626297 0 257 1 8 A1`651046 1939 (, ) 12.626297 0 49 1 1 A1`65/AC 173 170 w1`651095 1939 (Advances in Cr) 12.626175 0 455 2 13 A1`651549 1939 (yptology \321 Cr) 12.626175 0 435 2 12 A1`651984 1939 (ypto) 12.626175 0 116 0 3 A1`65483 2047 (\32589) 0 0.966537 95 0 2 A1`65/AF 173 170 w1`65579 2047 (, pages 307-315,  1989. Springer) 12.643631 0.966583 1029 5 31 A1`651605 2047 (-V) 12.643631 0.966583 78 0 1 A1`651678 2047 (erlag. Lectur) 12.643631 0.966583 390 1 12 A1`652068 2047 (e) 12.643631 0.966583 32 0 0 A1`65483 2155 (Notes in Computer Science No. 435.) -0.001724 0 1085 5 33 A1`65350 2264 ([12]) 0 0.033829 112 0 3 A1`65483 2264 (W) -2.346725 0 72 0 0 A1`65546 2264 (. Dif) -2.346725 0 126 1 4 A1`65672 2264 (fie, P) -2.346725 0 146 1 5 A1`65809 2264 (.C. V) -2.346725 0 156 1 4 A1`65960 2264 (an Oorschot and M.J. W) -2.346725 0 713 4 21 A1`651669 2264 (einer) -2.346725 0 148 0 4 A1`651813 2264 (. Authen-) -2.346725 0 287 1 8 A1`65483 2372 (tication and authenticated key exchanges. In ) 8.354172 0 1384 6 44 A1`65/AC 173 170 w1`651867 2372 (Designs,) 0 0 232 0 7 A1`65483 2480 (Codes and Cryptography 2) 0.020233 0 732 3 23 A1`65/AF 173 170 w1`651215 2480 (, pages 107-125, 1992.) 0.020233 0 650 3 21 A1`65350 2589 ([13]) 0 0.033829 112 0 3 A1`65483 2589 (P) 12.643631 0.192551 40 0 0 A1`65515 2589 (. Feldman. A Practical Scheme for Non-Interactive) 12.643631 0.192551 1585 6 48 A1`65483 2697 (V) 7.62178 0 52 0 0 A1`65530 2697 (erifiable Secr) 7.62178 0 391 1 13 A1`65921 2697 (et Sharing. In ) 7.62178 0 444 3 14 A1`65/AC 173 170 w1`651365 2697 (Pr) 7.621857 0 64 0 1 A1`651429 2697 (oc. 28th Annual Symp.) 7.621857 0 671 3 20 A1`65O1`65N1`65F M1`65/AC 173 170 w1`652433 -2503 (on Foundations of Computer Science) -2.34819 -0.436615 983 4 33 A1`65/AF 173 170 w1`653416 -2503 (, pages 427-437. IEEE,) -2.348206 -0.436615 634 3 21 A1`652433 -2395 (1987.) 0 -0.016281 162 0 4 A1`65/AF 172 170 w1`652300 -2286 ([14]) 0 -0.014938 111 0 3 A1`652433 -2286 (Y) -1.925827 0 44 0 0 A1`652470 -2286 (. Frankel, P) -1.925827 0 326 2 11 A1`652787 -2286 (. Gemmell, P) -1.925827 0 377 2 11 A1`653156 -2286 (. Mackenzie, and M. Y) -1.925827 0 642 4 20 A1`653794 -2286 (ung. Op-) -1.925827 0 256 1 7 A1`652433 -2178 (timal resilience proactive public-key cryptosystems. In) 10.35614 0 1617 5 54 A1`65/AC 172 170 w1`652433 -2070 (Proc. 38th Annual Symp. on Foundations of Computer Sci-) -1.004959 0 1617 8 54 A1`652433 -1961 (ence) 0 0 119 0 3 A1`65/AF 172 170 w1`652552 -1961 (. IEEE, 1997.) 0.064941 0 376 2 12 A1`652300 -1853 ([15]) 0 -0.014938 111 0 3 A1`652433 -1853 (Y) -2.325134 -0.080292 44 0 0 A1`652470 -1853 (. Frankel, P) -2.325134 -0.080292 324 2 11 A1`652785 -1853 (. Gemmell, P) -2.325134 -0.080292 376 2 11 A1`653152 -1853 (. Mackenzie, and M. Y) -2.325134 -0.080292 639 4 20 A1`653787 -1853 (ung. Pr) -2.325134 -0.080292 204 1 6 A1`653990 -1853 (o-) -2.325134 -0.080292 60 0 1 A1`652433 -1745 (active RSA. In B. Kaliski, editor) -0.024734 0 937 5 32 A1`653367 -1745 (, ) -0.024734 0 36 1 1 A1`65/AC 172 170 w1`653402 -1745 (Advances in Cr) -0.024734 0 425 2 13 A1`653827 -1745 (yptology) -0.024734 0 222 0 7 A1`652433 -1636 (\321 Cr) -2.293808 0 162 1 3 A1`652596 -1636 (ypto \32597, 1997) -2.293808 0 405 2 13 A1`65/AF 172 170 w1`653000 -1636 (. T) -2.293777 0 81 1 2 A1`653074 -1636 (o appear) -2.293777 0 242 1 7 A1`653312 -1636 (. Springer) -2.293777 0 280 1 9 A1`653589 -1636 (-V) -2.293777 0 75 0 1 A1`653659 -1636 (erlag. Lectur) -2.293777 0 359 1 12 A1`654018 -1636 (e) -2.293777 0 32 0 0 A1`652433 -1528 (Notes in Computer Science.) 0.040359 0 822 3 25 A1`652300 -1420 ([16]) 0 -0.014938 111 0 3 A1`652433 -1420 (J. A. Garay) 0.700317 0 327 2 10 A1`652755 -1420 (. Reaching \(and Maintaining\) Agr) 0.700317 0 1002 4 31 A1`653757 -1420 (eement in) 0.700317 0 293 1 8 A1`652433 -1311 (the Presence of Mobile Faults. In ) 3.208664 0 990 6 33 A1`65/AC 172 170 w1`653424 -1311 (Proc. 8th International) 3.208664 0 626 2 22 A1`652433 -1203 (W) 11.515991 0 67 0 0 A1`652497 -1203 (orkshop on Distributed Algorithms) 11.515991 0 954 3 32 A1`65/AF 172 170 w1`653451 -1203 (, T) 11.515701 0 95 1 2 A1`653538 -1203 (erschelling \(NL\),) 11.515701 0 512 1 16 A1`652433 -1095 (September 1994. Lecture Notes in Computer Science) 11.54982 0 1617 6 48 A1`652433 -986 (No. 857, pages 253-264.) -0.048553 0 699 3 22 A1`652300 -878 ([17]) 0 -0.014938 111 0 3 A1`652433 -878 (P) -2.067703 0 40 0 0 A1`652464 -878 (. Gemmell. An intr) -2.067703 0 556 3 17 A1`653020 -878 (o) -2.067703 0 36 0 0 A1`653056 -878 (duction to thr) -2.067703 0 401 2 13 A1`653457 -878 (eshold cr) -2.067703 0 258 1 8 A1`653716 -878 (yptography) -2.067703 0 322 0 9 A1`654032 -878 (.) -2.067703 0 18 0 0 A1`652433 -770 (In ) -0.009293 0 81 1 2 A1`65/AC 172 170 w1`652515 -770 (Cr) -0.009293 0 75 0 1 A1`652590 -770 (yptoBytes, W) -0.009293 0 371 1 11 A1`652960 -770 (inter 97) -0.009293 0 212 1 7 A1`65/AF 172 170 w1`653173 -770 (, pages 7-12, 1997.) -0.009293 0 536 3 18 A1`652300 -661 ([18]) 0 -0.014938 111 0 3 A1`652433 -661 (R. Gennar) 1.037567 0 307 1 8 A1`652740 -661 (o, S. Jar) 1.037567 0 228 2 8 A1`652969 -661 (ecki, H. Krawczyk, and T) 1.037567 0 733 4 23 A1`653694 -661 (. Rabin. Ro-) 1.037567 0 356 2 11 A1`652433 -553 (bust thr) 9.041534 0 233 1 7 A1`652667 -553 (eshold DSS signatur) 9.041534 0 602 2 18 A1`653269 -553 (es. In Ueli Maur) 9.041534 0 500 3 15 A1`653769 -553 (er) 9.041534 0 55 0 1 A1`653820 -553 (, editor) 9.041534 0 215 1 7 A1`654032 -553 (,) 9.041534 0 18 0 0 A1`65/AC 172 170 w1`652433 -445 (Advances in Cryptology \321 Eurocrypt \32596) 2.54921 0 1147 5 37 A1`65/AF 172 170 w1`653580 -445 (, pages 354-371,) 2.549286 0 470 2 15 A1`652433 -336 (1996. Springer) 3.282669 0 428 1 13 A1`652859 -336 (-V) 3.282669 0 75 0 1 A1`652929 -336 (erlag. Lectur) 3.282669 0 365 1 12 A1`653294 -336 (e Notes in Computer Sci-) 3.282669 0 756 4 23 A1`652433 -228 (ence No. 1070.) 0.087814 0 441 2 13 A1`652300 -120 ([19]) 0 -0.014938 111 0 3 A1`652433 -120 (O. Goldr) -2.325134 -0.054459 260 1 7 A1`652693 -120 (eich, S. Micali, and A. W) -2.325134 -0.054459 732 5 24 A1`653422 -120 (igderson. How to Play) -2.325134 -0.054459 627 3 20 A1`652433 -11 (Any Mental Game. In ) 7.030289 0 694 4 19 A1`65/AC 172 170 w1`653127 -11 (Proc. 19th Annual Symp. on the) 7.030334 0 923 5 29 A1`652433 97 (Theory of Computing) -0.014801 0 584 2 18 A1`65/AF 172 170 w1`653017 97 (, pages 218-229. ACM, 1987.) -0.014801 0 850 4 26 A1`652300 205 ([20]) 0 -0.014938 111 0 3 A1`652433 205 (V) -0.213486 0 52 0 0 A1`652476 205 (. Hamilton, Sandia National Labs, Personal communi-) -0.213486 0 1574 6 50 A1`652433 314 (cation.) 0 -0.033356 200 0 6 A1`652300 422 ([21]) 0 -0.014938 111 0 3 A1`652433 422 (A. Her) -1.15564 0 202 1 5 A1`652636 422 (zber) -1.15564 0 115 0 3 A1`652751 422 (g, M. Jakobsson, S. Jar) -1.15564 0 639 4 22 A1`653390 422 (ecki, H. Krawczyk, and) -1.15564 0 660 3 21 A1`652433 530 (M.  Y) -0.903 0 159 2 4 A1`652589 530 (ung. Pr) -0.903 0 206 1 6 A1`652794 530 (oactive public key and signatur) -0.903 0 894 4 30 A1`653688 530 (e systems. In) -0.903 0 362 2 12 A1`65/AC 172 170 w1`652433 639 (1997 ACM Conference on Computers and Communication) -2.032761 0 1617 6 49 A1`652433 747 (Security) 0 -0.238083 217 0 7 A1`65/AF 172 170 w1`652650 747 (, 1997.) -2.325134 -0.238083 193 1 6 A1`65/AF 177 170 w1`652300 855 ([22]) 0 -0.005173 115 0 3 A1`652433 855 (A. Her) 10.695831 0 219 1 5 A1`652654 855 (zber) 10.695831 0 119 0 3 A1`652772 855 (g, S. Jar) 10.695831 0 250 2 8 A1`653023 855 (ecki, H. Krawczyk, and M. Y) 10.695831 0 902 5 26 A1`653921 855 (ung.) 10.695831 0 129 0 3 A1`652433 964 (Pr) 12.891159 0.056641 65 0 1 A1`652499 964 (oactive secr) 12.891159 0.056641 363 1 11 A1`652862 964 (et sharing, or: How to cope with per) 12.891159 0.056641 1166 7 35 A1`654025 964 (-) 12.891159 0.056641 25 0 0 A1`652433 1072 (petual leakage. In D. Coppersmith, editor) 1.011948 0 1240 5 40 A1`653669 1072 (, ) 1.011948 0 38 1 1 A1`65/AC 177 170 w1`653707 1072 (Advances in) 1.011917 0 342 1 10 A1`652433 1180 (Cryptology \321 Crypto \32595) 12.891159 3.422729 843 3 22 A1`65/AF 177 170 w1`653277 1180 (, pages 339-352, 1995.) 12.891159 3.422821 773 3 21 A1`652433 1289 (Springer) 8.383972 0 254 0 7 A1`652684 1289 (-V) 8.383972 0 77 0 1 A1`652757 1289 (erlag. Lectur) 8.383972 0 380 1 12 A1`653137 1289 (e Notes in Computer Science) 8.383972 0 913 4 26 A1`652433 1397 (No. 963.) 0.119934 0 260 1 7 A1`65/AF 172 170 w1`652300 1505 ([23]) 0 -0.014938 111 0 3 A1`652433 1505 (IBM Research, the Proactive Security Project. http://) 12.519455 0.196793 1617 6 52 A1`652433 1614 (www) 0 0.000916 143 0 2 A1`652571 1614 (.ibm.net.il/ibm_il/int-lab/Pr) 0 0.000916 805 0 28 A1`653376 1614 (oactive/home.html) 0 0.000916 550 0 16 A1`652300 1722 ([24]) 0 -0.014938 111 0 3 A1`652433 1722 (R. Ostr) 10.103241 0 221 1 6 A1`652654 1722 (ovsky and M. Y) 10.103241 0 479 3 13 A1`653130 1722 (ung. How to withstand mobile) 10.103241 0 920 4 27 A1`652433 1830 (virus attacks. In ) 4.850952 0 491 3 17 A1`65/AC 172 170 w1`652925 1830 (Proc. 10th ACM Symp. on Principles of) 4.851059 0 1125 6 36 A1`652433 1939 (Distributed Computation) 0.012939 0 673 1 22 A1`65/AF 172 170 w1`653107 1939 (, pages 51-59. ACM, 1991.) 0.012939 0 779 4 24 A1`652300 2047 ([25] R. Reischuk. A new solution to the byzantine generals) 5.716095 0 1750 9 57 A1`652433 2155 (problem. ) -0.030624 0 274 1 8 A1`65/AC 172 170 w1`652707 2155 (Information and Control) -0.030624 0 667 2 22 A1`65/AF 172 170 w1`653375 2155 (, pages 23-42, 1985.) -0.030624 0 572 3 19 A1`652300 2264 ([26]) 0 -0.014938 111 0 3 A1`652433 2264 (A. Shamir) 8.151443 0 310 1 8 A1`652740 2264 (. How to Shar) 8.151443 0 430 3 12 A1`653170 2264 (e a Secr) 8.151443 0 242 2 7 A1`653412 2264 (et. ) 8.151443 0 100 1 3 A1`65/AC 172 170 w1`653512 2264 (Communications of) 8.151443 0 538 1 16 A1`652433 2372 (the ACM) -0.00473 0 264 1 6 A1`65/AF 172 170 w1`652697 2372 (, 22:612-613, 1979.) -0.00473 0 560 2 18 A1`652300 2480 ([27]) 0 -0.014938 111 0 3 A1`652433 2480 (A. Y) -2.325134 -0.107391 132 1 3 A1`652560 2480 (ao. Pr) -2.325134 -0.107391 164 1 5 A1`652724 2480 (otocols for Secur) -2.325134 -0.107391 478 2 16 A1`653202 2480 (e  Computation. In ) -2.325134 -0.107391 563 4 18 A1`65/AC 172 170 w1`653765 2480 (Pr) -2.325211 -0.107391 63 0 1 A1`653829 2480 (oc. 23th) -2.325211 -0.107391 221 1 7 A1`652433 2589 (Annual Symp. on Foundations of Computer Science) 1.688416 0 1424 6 46 A1`65/AF 172 170 w1`653857 2589 (, pages) 1.68837 0 192 1 6 A1`652433 2697 (160-164. IEEE, 1982.) 0.053543 0 614 2 19 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 8 8%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`6572 -73 237 562 -237 -489 1.805556 -1.808219 -4265 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`65-4221 3053 (8) 0 0 37 0 0 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 -4194 2817 -4194 -2567 F jbd^65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4900 3053 (CR) 0 16.086365 105 0 1 A1`65-4797 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65-4050 3053 (S P R I N G   1 9 9 7  ) 7.445572 1.841431 746 13 22 A1`65T g`650 0 0 (Black) 1 _rgb d`65-3304 3053 ( \321   T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S) 7.445709 1.841431 2954 52 91 A1`65O1`65N1`65F M1`65/AB 196 200 w1`65-4050 -2510 (Appendix:  Pr) -0.055634 0 592 2 12 A1`65-3459 -2510 (oactive DSS) -0.055634 0 494 1 10 A1`65/AF 200 200 w1`65-4050 -2285 (In order to exemplify an actual proactive signature) 7.094437 0 1750 7 50 A1`65-4050 -2172 (scheme, we have chosen to outline one such solu-) 9.048248 0 1750 8 47 A1`65-4050 -2060 (tion, the DSS solution. It is based on the threshold) 3.919708 0 1750 9 51 A1`65-4050 -1947 (signature scheme of [18] as incorporated with [21].) 8.041916 0 1750 7 50 A1`65-4050 -1835 (First, recall the definition of the Digital Signature) 10.698318 0 1750 7 52 A1`65-4050 -1722 (Standard \(DSS\), the adopted US standard for signa-) -1.223572 0 1750 7 49 A1`65-4050 -1610 (ture scheme:) -0.201813 0 425 1 11 A1`65/AA 200 200 w1`65-4050 -1385 (Key Generation:) -3.009888 -0.139557 578 1 14 A1`65/AF 200 200 w1`65-3472 -1385 ( Let ) -2.708389 -0.12558 147 2 4 A1`65/AC 200 200 w1`65-3325 -1385 (p) 0 -0.125534 37 0 0 A1`65/AF 200 200 w1`65-3288 -1385 ( be a prime number of a speci-) -2.708359 -0.125565 988 7 29 A1`65-4050 -1272 (fied length, ) 0.908218 0 407 2 12 A1`65/AC 200 200 w1`65-3643 -1272 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3606 -1272 ( be a prime divisor of ) 0.908234 0 732 6 22 A1`65/AC 200 200 w1`65-2874 -1272 (p ) 0.908218 0 59 1 1 A1`65/AG 200 200 w1`65-2815 -1272 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2770 -1272 ( 1 and ) 0.908203 0 232 3 6 A1`65/AC 200 200 w1`65-2538 -1272 (g) 0 0 32 0 0 A1`65/AF 200 200 w1`65-2505 -1272 ( be an) 0.908218 0 205 2 5 A1`65-4050 -1160 (element of order) 3.03685 0 561 2 15 A1`65/AC 200 200 w1`65-3489 -1160 ( q ) 3.03685 0 85 2 2 A1`65/AF 200 200 w1`65-3404 -1160 (in ) 3.036575 0 93 1 2 A1`65/AC 200 200 w1`65-3310 -1160 (Z) 0 0 46 0 0 A1`65/AF 130 130 w1`65-3264 -1185 (*) 0 -24.374237 2 0 0 A1`65/AC 130 130 w1`65-3262 -1143 (p) 0 0 24 0 0 A1`65/AF 200 200 w1`65-3237 -1160 (. The triple \() 3.036758 0 444 3 13 A1`65/AC 200 200 w1`65-2793 -1160 (p, q, g) 3.03685 0 210 2 6 A1`65/AF 200 200 w1`65-2584 -1160 (\) is pub-) 3.03685 0 284 2 8 A1`65-4050 -1047 (lic. The DSS key consists of a secret key ) 1.966003 0 1387 9 41 A1`65/AC 200 200 w1`65-2662 -1047 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2626 -1047 (, which is) 1.96608 0 326 2 9 A1`65-4050 -935 (a random number satisfying 1 ) -1.085663 0 1006 5 28 A1`65/AG 200 200 w1`65-3044 -935 (\243) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2999 -935 ( ) -1.085693 0 20 1 0 A1`65/AC 200 200 w1`65-2979 -935 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2942 -935 ( ) -1.085693 0 20 1 0 A1`65/AG 200 200 w1`65-2922 -935 (\243) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2876 -935 ( ) -1.085693 0 20 1 0 A1`65/AC 200 200 w1`65-2857 -935 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2820 -935 (, and a verifica-) -1.085632 0 520 3 16 A1`65-4050 -822 (tion public key ) 0.108032 0 526 3 15 A1`65/AC 200 200 w1`65-3524 -822 (y) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3487 -822 ( satisfying ) 0.108032 0 352 2 11 A1`65/AC 200 200 w1`65-3135 -822 (y) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3099 -822 ( ) 0.108032 0 21 1 0 A1`65/AG 200 200 w1`65-3077 -822 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3032 -822 ( ) 0.108032 0 21 1 0 A1`65/AC 200 200 w1`65-3011 -822 (g) 0 0 32 0 0 A1`65/AC 130 130 w1`65-2979 -847 (x) 0 0 24 0 0 A1`65/AF 200 200 w1`65-2955 -822 ( mo) 0.108032 0 127 1 2 A1`65-2826 -822 (d ) 0.108032 0 62 1 1 A1`65/AC 200 200 w1`65-2764 -822 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2727 -822 (.) 0 0 21 0 0 A1`65/AA 200 200 w1`65-4050 -597 (Signature Algorithm:) -0.178223 0 745 1 19 A1`65/AF 200 200 w1`65-4050 -485 (Input: ) -0.039673 0 227 1 6 A1`65/AC 200 200 w1`65-3823 -485 (m) 0 0 60 0 0 A1`65/AF 200 200 w1`65-3763 -485 (, the hashed message.) -0.039673 0 719 3 20 A1`65-4050 -372 (Signature: pick a random number ) 6.731506 0 1181 5 31 A1`65/AC 200 200 w1`65-2869 -372 (k) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2832 -372 ( between 1 and) 6.731506 0 532 3 13 A1`65/AC 200 200 w1`65-4050 -260 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-4013 -260 (, calculate ) 0.101746 0 363 2 11 A1`65/AC 200 200 w1`65-3649 -260 (k) 0 0 37 0 0 A1`65/AG 130 130 w1`65-3612 -285 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65-3583 -285 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-3556 -260 ( mo) 0.101746 0 127 1 2 A1`65-3427 -260 (d ) 0.101746 0 62 1 1 A1`65/AC 200 200 w1`65-3365 -260 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3328 -260 ( and set) 0.101746 0 259 2 7 A1`65/AC 200 200 w1`65-3979 -35 (r) 0 0 28 0 0 A1`65/AF 200 200 w1`65-3951 -35 ( ) 0.048492 0 21 1 0 A1`65/AG 200 200 w1`65-3930 -35 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3885 -35 ( ) 0.048492 0 21 1 0 A1`65-3864 -35 (\() 0 -1.666977 31 0 0 A1`65/AC 200 200 w1`65-3833 -35 (g) 0 6.666656 39 0 0 A1`65/AC 130 130 w1`65-3794 -60 (k) 0 0 24 0 0 A1`65/AG 104 104 w1`65-3770 -80 (-) 0 0 24 0 0 A1`65/AF 104 104 w1`65-3746 -80 (1) 0 0 22 0 0 A1`65/AF 200 200 w1`65-3724 -35 ( mo) 0.048492 0 127 1 2 A1`65-3596 -35 (d ) 0.048492 0 62 1 1 A1`65/AC 200 200 w1`65-3534 -35 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3497 -35 (\) mo) 0.048492 0 160 1 3 A1`65-3336 -35 (d ) 0.048492 0 62 1 1 A1`65/AC 200 200 w1`65-3274 -35 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3237 -35 (          ) 0.048492 0 209 10 9 A1`65/AC 200 200 w1`65-3028 -35 (s) 0 0 28 0 0 A1`65/AF 200 200 w1`65-3000 -35 ( ) 0.048492 0 21 1 0 A1`65/AG 200 200 w1`65-2979 -35 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2934 -35 ( ) 0.048492 0 21 1 0 A1`65/AC 200 200 w1`65-2913 -35 (k) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2876 -35 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-2843 -35 (m) 0 0 60 0 0 A1`65/AF 200 200 w1`65-2783 -35 ( ) 0.048492 0 21 1 0 A1`65/AG 200 200 w1`65-2762 -35 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2717 -35 ( ) 0.048492 0 21 1 0 A1`65/AC 200 200 w1`65-2696 -35 (xr) 0 0 65 0 1 A1`65/AF 200 200 w1`65-2631 -35 (\) mo) 0.048492 0 160 1 3 A1`65-2470 -35 (d ) 0.048492 0 62 1 1 A1`65/AC 200 200 w1`65-2408 -35 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-4050 190 (Output: the signatur) -0.009583 0 687 2 19 A1`65-3363 190 (e on ) -0.009583 0 167 2 4 A1`65/AC 200 200 w1`65-3196 190 (m) 0 0 60 0 0 A1`65/AF 200 200 w1`65-3136 190 ( is the pair \() -0.009583 0 407 4 13 A1`65/AC 200 200 w1`65-2729 190 (r) -0.009583 0 28 0 0 A1`65-2706 190 (, s) -0.009583 0 76 1 2 A1`65/AF 200 200 w1`65-2630 190 (\).) 0 0 53 0 1 A1`65/AA 200 200 w1`65-4050 415 (V) 0.017899 0 65 0 0 A1`65-3993 415 (erification Algorithm:) 0.017899 0 768 1 21 A1`65/AF 200 200 w1`65-4050 527 (V) 0.053711 0 60 0 0 A1`65-3996 527 (erify that) 0.053711 0 307 1 9 A1`65/AC 200 200 w1`65-3619 752 (r) 0 0 28 0 0 A1`65/AF 200 200 w1`65-3592 752 ( ) 0.152924 0 21 1 0 A1`65/AG 200 200 w1`65-3571 752 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3525 752 ( \() 0.152924 0 53 1 1 A1`65/AC 200 200 w1`65-3472 752 (g) 0 0 32 0 0 A1`65/AC 130 130 w1`65-3439 727 (ms) 0 0 57 0 1 A1`65/AG 104 104 w1`65-3382 707 (-) 0 0 24 0 0 A1`65/AF 104 104 w1`65-3358 707 (1) 0 0 22 0 0 A1`65/AC 200 200 w1`65-3337 752 (y) 0 0 37 0 0 A1`65/AC 130 130 w1`65-3300 727 (rs) 0 0 36 0 1 A1`65/AG 104 104 w1`65-3264 707 (-) 0 0 24 0 0 A1`65/AF 104 104 w1`65-3240 707 (1) 0 0 22 0 0 A1`65/AF 200 200 w1`65-3218 752 ( mo) 0.152924 0 127 1 2 A1`65-3090 752 (d ) 0.152924 0 62 1 1 A1`65/AC 200 200 w1`65-3027 752 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2990 752 (\) mo) 0.152924 0 160 1 3 A1`65-2830 752 (d ) 0.152924 0 62 1 1 A1`65/AC 200 200 w1`65-2767 752 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-4050 977 (Now) 8.277328 0 162 0 2 A1`65-3894 977 (, assume the existence of pr) 8.277328 0 962 5 27 A1`65-2932 977 (otocols to per) 8.277328 0 475 2 13 A1`65-2457 977 (for) 8.277328 0 92 0 2 A1`65-2365 977 (m) 8.277328 0 65 0 0 A1`65-4050 1090 (the following three tasks:) -0.051804 0 847 3 25 A1`65-4050 1315 (\245) 0 0 50 0 0 A1`65-3950 1315 ([JRSS] Joint Random Secret Sharing: servers) 14.582916 1.738403 1650 5 42 A1`65-3950 1427 (jointly generate a random value ) 13.63797 0 1158 5 31 A1`65/AC 200 200 w1`65-2792 1427 (v) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2755 1427 ( which is se-) 13.63797 0 455 3 12 A1`65-3950 1540 (cr) 3.356339 0 65 0 1 A1`65-3885 1540 (etly shar) 3.356339 0 288 1 8 A1`65-3597 1540 (ed among the par) 3.356339 0 595 3 15 A1`65-3002 1540 (ties. This task is per) 3.356339 0 677 4 21 A1`65-2328 1540 (-) 3.356339 0 28 0 0 A1`65-3950 1652 (formed as follows. Each server ) -1.696732 0 1019 5 30 A1`65/AC 200 200 w1`65-2931 1652 (i) 0 0 18 0 0 A1`65/AF 200 200 w1`65-2912 1652 ( chooses a random) -1.696732 0 612 3 16 A1`65/AC 200 200 w1`65-3950 1765 (t) 0 0 23 0 0 A1`65/AF 200 200 w1`65-3927 1765 (-degree polynomial ) 5.260513 0 677 2 18 A1`65/AC 200 200 w1`65-3250 1765 (f) 0 0 23 0 0 A1`65/AC 130 130 w1`65-3227 1782 (i) 0 0 12 0 0 A1`65/AF 200 200 w1`65-3215 1765 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-3182 1765 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`65-3127 1765 (\). Server ) 5.260513 0 323 2 9 A1`65/AC 200 200 w1`65-2804 1765 (i) 0 0 18 0 0 A1`65/AF 200 200 w1`65-2785 1765 ( then sends to) 5.260422 0 485 3 13 A1`65-3950 1877 (ser) 8.645462 0 92 0 2 A1`65-3857 1877 (ver ) 8.645462 0 136 1 3 A1`65/AC 200 200 w1`65-3722 1877 (j) 0 0 18 0 0 A1`65/AF 200 200 w1`65-3703 1877 ( the value ) 8.644974 0 380 3 10 A1`65/AC 200 200 w1`65-3323 1877 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-3295 1894 (ij) 0 0 24 0 1 A1`65/AF 200 200 w1`65-3272 1877 ( ) 8.645462 0 30 1 0 A1`65/AG 200 200 w1`65-3242 1877 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3196 1877 ( ) 8.645462 0 30 1 0 A1`65/AC 200 200 w1`65-3167 1877 (f) 0 0 23 0 0 A1`65/AC 130 130 w1`65-3144 1894 (i) 0 0 12 0 0 A1`65/AF 200 200 w1`65-3132 1877 (\() 0 0.832855 33 0 0 A1`65/AC 200 200 w1`65-3098 1877 (j) 0 0 18 0 0 A1`65/AF 200 200 w1`65-3080 1877 (\) mo) 8.645462 0 168 1 3 A1`65-2911 1877 (d ) 8.645462 0 71 1 1 A1`65/AC 200 200 w1`65-2840 1877 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2802 1877 (. Ser) 8.645462 0 161 1 4 A1`65-2641 1877 (ver ) 8.645462 0 136 1 3 A1`65/AC 200 200 w1`65-2505 1877 (j) 0 0 18 0 0 A1`65/AF 200 200 w1`65-2487 1877 ( then) 8.645462 0 187 1 4 A1`65-3950 1990 (computes its new share ) 3.911667 0 812 4 22 A1`65/AC 200 200 w1`65-3138 1990 (\366) 0 -26.666626 1 0 0 A1`65-3137 1990 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-3110 2007 (j) 0 1.083542 13 0 0 A1`65/AF 200 200 w1`65-3097 1990 ( where ) 3.91185 0 253 2 6 A1`65/AC 200 200 w1`65-2843 1990 (\366) 0 -26.666626 1 0 0 A1`65-2842 1990 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-2815 2007 (j) 0 0 12 0 0 A1`65/AF 200 200 w1`65-2802 1990 ( ) 3.911499 0 25 1 0 A1`65/AG 200 200 w1`65-2778 1990 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2732 1990 ( ) 3.911499 0 25 1 0 A1`65/AC 200 200 w1`65-2707 1990 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-2680 2007 (1j) 0 0 39 0 1 A1`65/AF 200 200 w1`65-2640 1990 ( ) 3.911499 0 25 1 0 A1`65/AG 200 200 w1`65-2616 1990 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2570 1990 ( ) 3.911499 0 25 1 0 A1`65/AG 200 200 w1`65-2545 1990 (\274) 0 0 83 0 0 A1`65/AF 200 200 w1`65-2462 1990 ( ) 3.911499 0 25 1 0 A1`65/AG 200 200 w1`65-2437 1990 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2392 1990 ( ) 3.911499 0 25 1 0 A1`65/AC 200 200 w1`65-2367 1990 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-2339 2007 (nj) 0 0 39 0 1 A1`65/AF 200 200 w1`65-3950 2102 (mo) 4.194702 0 107 0 1 A1`65-3842 2102 (d ) 4.194702 0 67 1 1 A1`65/AC 200 200 w1`65-3776 2102 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3739 2102 (. Obser) 4.194489 0 245 1 6 A1`65-3494 2102 (ve that the new shar) 4.194489 0 706 4 19 A1`65-2788 2102 (es ) 4.194489 0 90 1 2 A1`65/AC 200 200 w1`65-2698 2102 (\366) 0 -26.666626 1 0 0 A1`65-2697 2102 (s) 0 0 28 0 0 A1`65/AC 130 130 w1`65-2670 2119 (i) 0 0 12 0 0 A1`65/AF 200 200 w1`65-2657 2102 ( lie on the) 4.194489 0 357 3 10 A1`65-3950 2215 (polynomial ) -2.70845 -0.007843 397 1 10 A1`65/AC 200 200 w1`65-3552 2190 (\366) 0 -34.173981 -6 0 0 A1`65-3559 2215 (f) 0 -11.674164 12 0 0 A1`65/AF 200 200 w1`65-3547 2215 ( \() -2.70845 -0.007843 50 1 1 A1`65/AC 200 200 w1`65-3497 2215 (X) 0 -0.007843 55 0 0 A1`65/AF 200 200 w1`65-3441 2215 (\) ) -2.70845 -0.007843 50 1 1 A1`65/AG 200 200 w1`65-3391 2215 (=) 0 -0.007843 46 0 0 A1`65/AF 200 200 w1`65-3345 2215 ( ) -2.70845 -0.007843 18 1 0 A1`65/AC 200 200 w1`65-3327 2215 (f) 0 -0.007843 23 0 0 A1`65/AF 130 130 w1`65-3304 2232 (1) 0 -0.005096 27 0 0 A1`65/AF 200 200 w1`65-3277 2215 (\() 0 -0.007843 32 0 0 A1`65/AC 200 200 w1`65-3244 2215 (X) 0 -0.007843 55 0 0 A1`65/AF 200 200 w1`65-3189 2215 (\) ) -2.70845 -0.007843 50 1 1 A1`65/AG 200 200 w1`65-3138 2215 (+) 0 -0.007843 46 0 0 A1`65/AF 200 200 w1`65-3092 2215 ( ) -2.70845 -0.007843 18 1 0 A1`65/AG 200 200 w1`65-3074 2215 (\274) 0 -0.007843 83 0 0 A1`65/AF 200 200 w1`65-2991 2215 ( ) -2.70845 -0.007843 18 1 0 A1`65/AG 200 200 w1`65-2973 2215 (+) 0 -0.007843 46 0 0 A1`65/AF 200 200 w1`65-2927 2215 ( ) -2.70845 -0.007843 18 1 0 A1`65/AC 200 200 w1`65-2909 2215 (f) 0 -0.007843 23 0 0 A1`65/AC 130 130 w1`65-2886 2232 (n) 0 -0.005096 27 0 0 A1`65/AF 200 200 w1`65-2859 2215 (\() 0 -0.007843 32 0 0 A1`65/AC 200 200 w1`65-2826 2215 (X) 0 -0.007843 55 0 0 A1`65/AF 200 200 w1`65-2771 2215 (\) which is still) -2.708298 -0.007843 471 3 15 A1`65-3950 2327 (of degree ) 4.738281 0 333 2 9 A1`65/AC 200 200 w1`65-3617 2327 (t) 0 0 23 0 0 A1`65/AF 200 200 w1`65-3593 2327 (, and its free term ) 4.73819 0 635 5 19 A1`65/AC 200 200 w1`65-2959 2302 (\366) 0 -30.832169 -3 0 0 A1`65-2962 2327 (f) 0 -11.666336 12 0 0 A1`65/AF 200 200 w1`65-2951 2327 ( \(0\) is the joint se-) 4.73819 0 651 5 20 A1`65-3950 2440 (cr) -2.708374 -0.120453 65 0 1 A1`65-3885 2440 (et ) -2.708374 -0.120453 82 1 2 A1`65/AC 200 200 w1`65-3803 2440 (v) 0 -0.120422 37 0 0 A1`65/AF 200 200 w1`65-3766 2440 (. An extended version of the above pr) -2.708374 -0.120453 1254 7 36 A1`65-2512 2440 (otocol) -2.708374 -0.120453 212 0 5 A1`65-3950 2552 (which uses verifiable secret sharing also provides,) -0.692383 0 1650 6 50 A1`65-3950 2665 (at the end of the pr) 3.438461 0 667 5 19 A1`65-3282 2665 (otocol, the value ) 3.438461 0 598 3 17 A1`65/AC 200 200 w1`65-2685 2665 (g) 0 0 32 0 0 A1`65/AC 130 130 w1`65-2652 2640 (v) 0 0 24 0 0 A1`65/AF 200 200 w1`65-2628 2665 ( mo) 3.438538 0 131 1 2 A1`65-2497 2665 (d ) 3.438538 0 66 1 1 A1`65/AC 200 200 w1`65-2431 2665 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2394 2665 ( to) 3.438538 0 94 1 2 A1`65-3950 2777 (all parties.) 0.13916 0 347 1 11 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65-2100 -2283 (\245) 0 0 50 0 0 A1`65-2000 -2283 ([Recp] Given a shar) 7.575302 0 692 3 18 A1`65-1308 -2283 (ed secr) 7.575302 0 237 1 6 A1`65-1072 -2283 (et ) 7.575302 0 93 1 2 A1`65/AC 200 200 w1`65-979 -2283 (v) 0 0 37 0 0 A1`65/AF 200 200 w1`65-942 -2283 (, the pr) 7.575302 0 258 2 7 A1`65-684 -2283 (otocol for) 7.575302 0 334 1 9 A1`65-2000 -2171 (computing the reciprocal computes the shares of) 3.549438 0 1650 6 46 A1`65-2000 -2058 (its r) -0.3255 0 127 1 4 A1`65-1873 -2058 (ecipr) -0.3255 0 167 0 4 A1`65-1707 -2058 (ocal ) -0.3255 0 159 1 4 A1`65/AC 200 200 w1`65-1547 -2058 (v) 0 0 37 0 0 A1`65/AG 130 130 w1`65-1510 -2083 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65-1480 -2083 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-1453 -2058 ( mo) -0.3255 0 127 1 2 A1`65-1326 -2058 (d ) -0.3255 0 62 1 1 A1`65/AC 200 200 w1`65-1264 -2058 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1227 -2058 ( without r) -0.32547 0 332 2 9 A1`65-894 -2058 (evealing ) -0.32547 0 303 1 8 A1`65/AC 200 200 w1`65-591 -2058 (v) 0 0 37 0 0 A1`65/AF 200 200 w1`65-554 -2058 ( or ) -0.3255 0 110 2 3 A1`65/AC 200 200 w1`65-444 -2058 (v) 0 0 37 0 0 A1`65/AG 130 130 w1`65-407 -2083 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65-377 -2083 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-2000 -1946 ([1,18]. The value of ) 0.564438 0 683 4 20 A1`65/AC 200 200 w1`65-1317 -1946 (g) 0 4.99968 37 0 0 A1`65/AC 130 130 w1`65-1280 -1971 (v) 0 0 24 0 0 A1`65/AG 104 104 w1`65-1256 -1991 (-) 0 0 24 0 0 A1`65/AF 104 104 w1`65-1232 -1991 (1) 0 0 22 0 0 A1`65/AF 200 200 w1`65-1210 -1946 ( mo) 0.564438 0 128 1 2 A1`65-1082 -1946 (d ) 0.564438 0 63 1 1 A1`65/AC 200 200 w1`65-1019 -1946 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-982 -1946 ( is also pr) 0.564438 0 314 3 10 A1`65-667 -1946 (ovided to) 0.564438 0 317 1 8 A1`65-2000 -1833 (all parties.) 0.13916 0 347 1 11 A1`65-2100 -1608 (\245) 0 0 50 0 0 A1`65-2000 -1608 ([Mult] Given two shar) 7.562576 0 775 3 20 A1`65-1225 -1608 (ed secr) 7.562576 0 237 1 6 A1`65-989 -1608 (etes ) 7.562576 0 158 1 4 A1`65/AC 200 200 w1`65-831 -1608 (u) 0 0 42 0 0 A1`65/AF 200 200 w1`65-789 -1608 ( and ) 7.562576 0 182 2 4 A1`65/AC 200 200 w1`65-607 -1608 (v) 0 0 37 0 0 A1`65/AF 200 200 w1`65-570 -1608 (, com-) 7.562576 0 220 1 5 A1`65-2000 -1496 (pute the shar) 1.400726 0 442 2 12 A1`65-1557 -1496 (es of the pr) 1.400726 0 377 3 11 A1`65-1181 -1496 (o) 1.400726 0 42 0 0 A1`65-1138 -1496 (duct ) 1.400726 0 170 1 4 A1`65/AC 200 200 w1`65-968 -1496 (uv) 0 0 79 0 1 A1`65/AF 200 200 w1`65-890 -1496 ( without r) 1.400726 0 336 2 9 A1`65-553 -1496 (eveal-) 1.400726 0 203 0 5 A1`65-2000 -1383 (ing the original secrets [2,6,18].) 0.036819 0 1057 4 33 A1`65-2100 -1158 (Equipped with these tools we are now ready to out-) 3.422409 0 1750 9 49 A1`65-2100 -1046 (line the proactive DSS scheme:) 0.007736 0 1062 4 29 A1`65/AF 202 200 w1`65-2100 -821 (1.) 0 -0.208054 63 0 1 A1`65-1975 -821 (Pr) 11.550339 0 75 0 1 A1`65-1900 -821 (oactive DSS Key Generation: Jointly gener) 11.550339 0 1525 5 40 A1`65-378 -821 (-) 11.550339 0 28 0 0 A1`65-1975 -708 (ate a DSS key by using the [JRSS] protocol to) 8.391708 0 1625 9 44 A1`65-1975 -596 (share a random value ) 14.36882 0 800 4 20 A1`65/AC 202 200 w1`65-1175 -596 (x) 0 0 37 0 0 A1`65/AF 202 200 w1`65-1137 -596 (. ) 14.369308 0 56 1 1 A1`65/AC 202 200 w1`65-1080 -596 (x) 0 0 37 0 0 A1`65/AF 202 200 w1`65-1043 -596 ( is now the signing) 14.36882 0 693 4 18 A1`65-1975 -483 (\(private\) key) 0.968201 0 442 1 12 A1`65-1539 -483 (, and its cor) 0.968201 0 400 3 12 A1`65-1138 -483 (r) 0.968201 0 28 0 0 A1`65-1110 -483 (esponding verification) 0.968201 0 760 1 21 A1`65-1975 -371 (key is ) -0.206131 0 210 2 6 A1`65/AC 202 200 w1`65-1765 -371 (g) 0 0 33 0 0 A1`65/AC 131 130 w1`65-1732 -396 (x) 0 0 24 0 0 A1`65/AF 202 200 w1`65-1708 -371 (.) 0 0 21 0 0 A1`65/AF 200 200 w1`65-2100 -146 (2.) 0 0 62 0 1 A1`65-1975 -146 (DSS Signature Generation:) -0.000412 0 928 2 24 A1`65/AF 170 170 w1`65-1800 21 (\(i\)) 0 -0.096939 75 0 2 A1`65-1667 21 (Jointly generate a shared random) 12.395645 0.748947 1017 4 31 A1`65-1667 133 (value ) 8.159119 0 179 1 5 A1`65/AC 170 170 w1`65-1487 133 (k) 0 0 31 0 0 A1`65/AF 170 170 w1`65-1456 133 ( by using the [JRSS] proto-) 8.158813 0 806 5 26 A1`65-1667 246 (col.) 0 -0.026276 104 0 3 A1`65-1800 467 (\(ii\) Compute the shares of ) 8.036728 0 813 5 26 A1`65/AC 170 170 w1`65-987 467 (k) 0 0 31 0 0 A1`65/AG 104 104 w1`65-955 422 (-) 0 0 24 0 0 A1`65/AF 104 104 w1`65-932 422 (1) 0 0 22 0 0 A1`65/AF 160 160 w1`65-910 467 ( and ) 7.563782 0 148 2 4 A1`65/AC 170 170 w1`65-762 467 (r ) 8.036514 0 49 1 1 A1`65/AG 170 170 w1`65-712 467 (=) 0 0 39 0 0 A1`65/AF 170 170 w1`65-673 467 ( ) 8.036514 0 26 1 0 A1`65/AC 170 170 w1`65-647 467 (g) 0 4.249725 32 0 0 A1`65/AC 110 110 w1`65-616 445 (k) 0 0 20 0 0 A1`65/AG 104 104 w1`65-595 422 (-) 0 0 24 0 0 A1`65/AF 104 104 w1`65-572 422 (1) 0 0 22 0 0 A1`65/AF 170 170 w1`65-1667 579 (mo) 12.395279 0.520142 92 0 1 A1`65-1575 579 (d ) 12.395279 0.520142 67 1 1 A1`65/AC 170 170 w1`65-1508 579 (q) 0 0.520004 32 0 0 A1`65/AF 170 170 w1`65-1476 579 (; this is done via the pr) 12.395721 0.520142 742 6 24 A1`65-734 579 (otocol) 12.395721 0.520142 184 0 5 A1`65-1667 692 ([Recp] for computing the reciprocal of) 5.022919 0 1117 5 37 A1`65-1667 804 (the joint secret ) 0.05426 0 450 3 16 A1`65/AC 170 170 w1`65-1216 804 (k) 0 0 31 0 0 A1`65/AF 170 170 w1`65-1185 804 (.) 0 0 18 0 0 A1`65-1800 1025 (\(iii\) Use the multiplication protocol [Mult]) 2.550095 0 1250 5 43 A1`65-1667 1137 (on ) -2.302216 -0.229614 90 1 2 A1`65/AC 170 170 w1`65-1577 1137 (k) 0 -0.22966 31 0 0 A1`65/AF 170 170 w1`65-1546 1137 ( and \() -2.302216 -0.229614 163 2 5 A1`65/AC 170 170 w1`65-1383 1137 (m) 0 -0.22966 51 0 0 A1`65/AF 170 170 w1`65-1332 1137 ( ) -2.302216 -0.22966 15 1 0 A1`65/AG 170 170 w1`65-1317 1137 (+) 0 -0.22966 39 0 0 A1`65/AF 170 170 w1`65-1278 1137 ( ) -2.302216 -0.22966 15 1 0 A1`65/AC 170 170 w1`65-1263 1137 (xr) 0 -0.229599 55 0 1 A1`65/AF 170 170 w1`65-1208 1137 (\) to compute the shares) -2.302139 -0.229614 658 4 22 A1`65-1667 1250 (of the value ) 8.800827 0 382 3 12 A1`65/AC 170 170 w1`65-1284 1250 (s) 0 0 24 0 0 A1`65/AF 170 170 w1`65-1261 1250 ( ) 8.801239 0 27 1 0 A1`65/AG 170 170 w1`65-1234 1250 (=) 0 0 39 0 0 A1`65/AF 170 170 w1`65-1195 1250 ( ) 8.801239 0 27 1 0 A1`65/AC 170 170 w1`65-1169 1250 (k) 0 0 31 0 0 A1`65/AF 170 170 w1`65-1137 1250 (\() 0 0 27 0 0 A1`65/AC 170 170 w1`65-1110 1250 (m) 0 0 51 0 0 A1`65/AF 170 170 w1`65-1059 1250 ( ) 8.801239 0 27 1 0 A1`65/AG 170 170 w1`65-1032 1250 (+) 0 0 39 0 0 A1`65/AF 170 170 w1`65-993 1250 ( ) 8.801239 0 27 1 0 A1`65/AC 170 170 w1`65-967 1250 (xr) 0 0 55 0 1 A1`65/AF 170 170 w1`65-912 1250 (\). Note that) 8.801239 0 362 2 11 A1`65-1667 1362 (since ) 3.634338 0 167 1 5 A1`65/AC 170 170 w1`65-1500 1362 (m) 0 0 51 0 0 A1`65/AF 170 170 w1`65-1449 1362 ( and ) 3.634338 0 149 2 4 A1`65/AC 170 170 w1`65-1300 1362 (r) 0 0 24 0 0 A1`65/AF 170 170 w1`65-1276 1362 ( are known to all parties,) 3.634338 0 726 5 25 A1`65-1667 1475 (and ) 9.077301 0 133 1 3 A1`65/AC 170 170 w1`65-1534 1475 (x) 0 0 31 0 0 A1`65/AF 170 170 w1`65-1502 1475 ( is a shared secret, the shares of) 9.077301 0 952 7 33 A1`65-1667 1587 (the value \() -0.980682 0 309 2 10 A1`65/AC 170 170 w1`65-1358 1587 (m) 0 0 51 0 0 A1`65/AF 170 170 w1`65-1307 1587 ( ) -0.980682 0 17 1 0 A1`65/AG 170 170 w1`65-1290 1587 (+) 0 0 39 0 0 A1`65/AF 170 170 w1`65-1251 1587 ( ) -0.980682 0 17 1 0 A1`65/AC 170 170 w1`65-1235 1587 (xr) 0 0 55 0 1 A1`65/AF 170 170 w1`65-1180 1587 (\) are readily known to) -0.980682 0 630 4 21 A1`65-1667 1700 (each ser) -0.06604 0 230 1 7 A1`65-1437 1700 (ver) -0.06604 0 90 0 2 A1`65-1350 1700 (.) -0.06604 0 18 0 0 A1`65-1800 1921 (\(iv\) Each ser) -0.002319 0 366 2 12 A1`65-1434 1921 (ver outputs  the pair \() -0.002319 0 623 5 22 A1`65/AC 170 170 w1`65-811 1921 (r) -0.002319 0 24 0 0 A1`65-791 1921 (, s) -0.002319 0 65 1 2 A1`65/AC 110 110 w1`65-726 1935 (i) 0 0 10 0 0 A1`65/AF 170 170 w1`65-716 1921 (\).) 0 0 45 0 1 A1`65/AF 200 200 w1`65-1975 2200 (The shar) -1.003342 0 297 1 7 A1`65-1677 2200 (es \() -1.003342 0 117 1 3 A1`65/AC 200 200 w1`65-1560 2200 (r) -1.003342 0 28 0 0 A1`65-1537 2200 (, s) -1.003342 0 75 1 2 A1`65/AC 130 130 w1`65-1462 2217 (i) 0 0 12 0 0 A1`65/AF 200 200 w1`65-1450 2200 (\) ar) -1.003311 0 117 1 3 A1`65-1333 2200 (e then combined \(by a public) -1.003311 0 983 5 27 A1`65-1975 2312 (pr) 0.051941 0 70 0 1 A1`65-1905 2312 (ocedur) 0.051941 0 227 0 5 A1`65-1679 2312 (e\) to pr) 0.051941 0 250 2 7 A1`65-1429 2312 (o) 0.051941 0 42 0 0 A1`65-1386 2312 (duce the signatur) 0.051941 0 578 2 16 A1`65-808 2312 (e \() 0.051941 0 90 1 2 A1`65/AC 200 200 w1`65-718 2312 (r) 0.051956 0 28 0 0 A1`65-695 2312 (, s) 0.051956 0 76 1 2 A1`65/AF 200 200 w1`65-618 2312 (\).) 0 0 53 0 1 A1`65-2100 2537 (3.) 0 0 62 0 1 A1`65-1975 2537 (Proactive Key-Refresh: Use the proactive secret) 3.934631 0 1625 5 46 A1`65-1975 2650 (refresh scheme described in the section ) -0.606949 0 1333 6 39 A1`65/AC 200 200 w1`65-642 2650 (Proactive) 0 0 292 0 8 A1`65-1975 2762 (secret sharing) 0.059402 0 419 1 13 A1`65/AF 200 200 w1`65-1556 2762 ( to refresh the key ) 0.059402 0 627 5 19 A1`65/AC 200 200 w1`65-929 2762 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`65-892 2762 (.) 0 0 21 0 0 A1`65O1`6517 -350 -2441.5 -4050 -2441.5 F jbd^65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 9 9%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate-6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 4202 2808 4202 -2567 F jbd^6572 -73 237 562 -237 -489 1.791667 -1.808219 4135 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 3053 (CR) 0 16.086365 105 0 1 A1`654452 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 3053 (T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S   \321 ) 7.445709 1.841431 2956 52 91 A1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`653306 3053 (  S P R I N G   1 9 9 7) 7.445572 1.841431 744 13 22 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`654179 3053 (9) 0 0 37 0 0 A1`65O1`65N1`65F M1`65/AA 200 200 w1`65T g`650 0 0 (Black) 1 _rgb d`65862 -2503 (Robert D. Silverman) -0.029297 0 727 2 18 A1`65/AF 170 170 w1`65968 -2395 (RSA Laboratories) -0.008316 0 513 1 15 A1`65991 -2286 (20 Crosby Drive) -0.066666 0 468 2 14 A1`65855 -2178 (Bedford, MA 01730 USA) -0.060822 0 740 3 20 A1`65/AF 196 200 w1`65350 -1961 (A number of cryptographic standards currently under) -0.808029 0 1750 6 50 A1`65350 -1853 (development place restrictions on the primes that are) -1.652466 0 1750 7 52 A1`65350 -1745 (used in the generation of an RSA key) 5.389343 0 1278 7 35 A1`651622 -1745 (. In par) 5.389343 0 249 2 7 A1`651871 -1745 (ticular) 5.389343 0 213 0 6 A1`652080 -1745 (,) 5.389343 0 20 0 0 A1`65350 -1636 (in section 4.1.2 of the X9.31-1997 standard for public) -2.084 0 1750 8 53 A1`65350 -1528 (key cryptography there are a number of recommenda-) -2.29332 0 1750 7 49 A1`65350 -1420 (tions regarding the generation of primes that make) 11.292694 0 1750 7 49 A1`65350 -1311 (up an RSA mo) -0.001221 0 492 3 11 A1`65843 -1311 (dulus including that they be \322str) -0.001221 0 1059 5 32 A1`651902 -1311 (ong.\323) -0.001221 0 175 0 4 A1`65350 -1095 (In this article we will examine these criteria. The po-) -0.549835 0 1750 9 54 A1`65350 -986 (sition of RSA Laboratories is that virtually all of these) -2.65419 -0.189423 1750 9 56 A1`65350 -878 (r) 13.552856 0 27 0 0 A1`65377 -878 (equir) 13.552856 0 168 0 4 A1`65545 -878 (ements ar) 13.552856 0 333 1 8 A1`65878 -878 (e unnecessar) 13.552856 0 428 1 11 A1`651307 -878 (y [10,11]. In par) 13.552856 0 565 3 16 A1`651871 -878 (ticular) 13.552856 0 213 0 6 A1`652080 -878 (,) 13.552856 0 20 0 0 A1`65350 -770 (we will show that the relevance of strong primes to) 7.753067 0 1750 9 50 A1`65350 -661 (the security of RSA is, at best, doubtful. However) 12.398163 0 1734 8 49 A1`652080 -661 (,) 12.398163 0 20 0 0 A1`65350 -553 (given this position, we will outline in this article a) 9.997101 0 1750 9 53 A1`65350 -445 (fast way of generating random strong primes that also) -0.598572 0 1750 8 52 A1`65350 -336 (satisfy a number of other cryptographic requirements.) -1.166931 0 1750 6 52 A1`65350 -228 (The metho) -2.4104 0 367 1 8 A1`65718 -228 (d r) -2.4104 0 86 1 2 A1`65804 -228 (equir) -2.4104 0 168 0 4 A1`65972 -228 (es no mor) -2.4104 0 317 2 8 A1`651289 -228 (e time to generate str) -2.4104 0 688 4 21 A1`651977 -228 (ong) -2.4104 0 122 0 2 A1`65350 -120 (primes than it takes to generate random primes.) -0.008408 0 1573 7 46 A1`65/AB 196 200 w1`65350 97 (Ar) 0.065598 0 101 0 1 A1`65451 97 (e str) 0.065598 0 186 1 4 A1`65635 97 (ong primes necessar) 0.065598 0 879 2 18 A1`651515 97 (y?) 0.065598 0 102 0 1 A1`65/AF 200 200 w1`65350 205 (A strong prime ) 3.485245 0 540 3 14 A1`65/AC 200 200 w1`65890 205 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65927 205 ( is one for which ) 3.485153 0 598 5 17 A1`65/AC 200 200 w1`651526 205 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`651562 205 ( ) 3.485016 0 24 1 0 A1`65/AG 200 200 w1`651587 205 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`651633 205 ( 1 has at least) 3.485184 0 467 4 14 A1`65350 314 (one lar) 0.40181 0 234 1 6 A1`65584 314 (ge prime factor) 0.40181 0 505 2 14 A1`651085 314 (. The historical r) 0.40181 0 566 3 17 A1`651650 314 (eason for this) 0.40181 0 450 2 13 A1`65350 422 (requirement has been to guard against the Pollard) 11.044174 0 1750 7 48 A1`65/AC 200 200 w1`65350 530 (P) 0 0 46 0 0 A1`65/AF 200 200 w1`65396 530 ( ) 10.417053 0 31 1 0 A1`65/AG 200 200 w1`65427 530 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65473 530 ( 1 and W) 10.41626 0 344 3 7 A1`65814 530 (illiams ) 10.41626 0 253 1 7 A1`65/AC 200 200 w1`651067 530 (P) 0 0 46 0 0 A1`65/AF 200 200 w1`651114 530 ( ) 10.417053 0 31 1 0 A1`65/AG 200 200 w1`651145 530 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`651191 530 ( 1 factoring algorithms. A) 10.41626 0 909 4 25 A1`65350 639 (paper by Bach and Shallit has shown that algorithms) -2.708374 -0.108643 1750 8 50 A1`65350 747 (exist for finding a factor ) -1.821747 0 817 5 26 A1`65/AC 200 200 w1`651167 747 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`651204 747 ( provided that any one of a) -1.821762 0 896 6 26 A1`65350 855 (number of other cyclotomic polynomials in ) 11.33197 0 1544 6 41 A1`65/AC 200 200 w1`651894 855 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`651931 855 (, e.g.) 11.331573 0 169 1 5 A1`65/AC 200 200 w1`65350 964 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65387 939 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`65414 964 ( ) 0.033401 0 21 1 0 A1`65/AG 200 200 w1`65435 964 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65481 964 ( 1, ) 0.033401 0 104 2 3 A1`65/AC 200 200 w1`65585 964 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65622 939 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`65649 964 ( ) 0.033401 0 21 1 0 A1`65/AG 200 200 w1`65670 964 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`65715 964 ( ) 0.033401 0 21 1 0 A1`65/AC 200 200 w1`65736 964 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65773 964 ( ) 0.033401 0 21 1 0 A1`65/AG 200 200 w1`65794 964 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65840 964 ( 1, etc. has only small prime factors.) 0.033401 0 1203 7 37 A1`65350 1180 (In [10,11] it is ar) -1.103119 0 553 4 18 A1`65903 1180 (gued that the Elliptic Cur) -1.103119 0 861 4 25 A1`651764 1180 (ve Factor) -1.103119 0 311 1 8 A1`652072 1180 (-) -1.103119 0 28 0 0 A1`65350 1289 (ing Algorithm \(ECM\) obsoletes the requirement to) 3.204269 0 1750 6 47 A1`65350 1397 (pr) -1.172348 0 70 0 1 A1`65420 1397 (otect against these attacks in the sense that gener) -1.172348 0 1656 8 50 A1`652072 1397 (-) -1.172348 0 28 0 0 A1`65350 1505 (ating an RSA key with strong primes does ) 8.045105 0 1499 8 40 A1`65/AC 200 200 w1`651849 1505 (not ) 8.045395 0 131 1 3 A1`65/AF 200 200 w1`651980 1505 (add) 0 0 120 0 2 A1`65350 1614 (any security to the key over using random primes.) 10.243484 0 1750 8 48 A1`65350 1722 (This is because ECM majorizes the ) -1.399261 0 1181 6 33 A1`65/AC 200 200 w1`651531 1722 (P) 0 0 46 0 0 A1`65/AF 200 200 w1`651577 1722 ( ) -1.399292 0 20 1 0 A1`65/AG 200 200 w1`651597 1722 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`651642 1722 ( 1 algorithms.) -1.399292 0 457 2 13 A1`65/AF 198 200 w1`65350 1939 (There are currently two classes of factoring algorithms) -2.681305 -0.622055 1750 7 54 A1`65350 2047 (that are applied to large integers. The first class at-) 7.180023 0 1750 9 54 A1`65350 2155 (tempts to find a factor ) -0.050629 0 758 5 23 A1`65/AC 198 200 w1`651108 2155 (p ) -0.050629 0 57 1 1 A1`65/AG 198 200 w1`651165 2155 (|) 0 0 17 0 0 A1`65/AF 198 200 w1`651182 2155 ( ) -0.050629 0 20 1 0 A1`65/AC 198 200 w1`651202 2155 (N) 0 0 64 0 0 A1`65/AF 198 200 w1`651266 2155 ( by computing a multiple) -0.050629 0 834 4 23 A1`65350 2264 (of a random element in some specially selected group) -2.280121 0 1750 8 51 A1`65350 2372 (such that the order of that group is divisible only by) 2.743942 0 1750 10 53 A1`65O1`65N1`65F M1`65/AB 356 360 w1`65355 -2893 (Fast Generation of Random, Str) -0.026855 0 2448 4 29 A1`652800 -2893 (ong RSA Primes) -0.026855 0 1231 2 13 A1`65O1`6517 4055 -2831.5 355 -2831.5 F jbd^65N1`65F M1`65/AF 198 200 w1`652300 -2503 (small primes. The second class includes algorithms) 11.072174 0 1750 6 49 A1`652300 -2395 (such as the Multiple Polynomial Quadratic Sieve) 14.43721 0.603165 1750 6 46 A1`652300 -2286 (\(MPQS\) and the Number Field Sieve \(NFS\) and) 14.43721 0.360977 1750 7 42 A1`652300 -2178 (their variations, and will not be discussed here.) 0.010788 0 1565 7 48 A1`652300 -1961 (The ) 5.230408 0 163 1 3 A1`65/AC 198 200 w1`652463 -1961 (P ) 5.230408 0 72 1 1 A1`65/AG 198 200 w1`652535 -1961 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`652580 -1961 ( 1 metho) 5.230255 0 308 2 7 A1`652890 -1961 (d uses the gr) 5.230255 0 425 3 12 A1`653315 -1961 (oup ) 5.230255 0 150 1 3 A1`65$1 tsi^65/AC-O /Goudy-Italic-O /AC y1`65/$1 bmt^65/AC-O 198 200 w1`65T g`650 0 0 (Black) 1 _rgb d`653464 -1961 /AC (Z) 0 0.824539 52 0 0 F1`65/AG 198 200 w1`653517 -1961 (/) 0 0 23 0 0 A1`65/AC 198 200 w1`653539 -1961 (p) 0 1.650314 38 0 0 A1`65/AC-O 198 200 w1`653578 -1961 /AC (Z) 0 0 51 0 0 F1`65/AF 198 200 w1`653629 -1961 ( in the hope) 5.230103 0 421 3 11 A1`652300 -1853 (that the order of that group, ) 6.075974 0 992 6 29 A1`65/AC 198 200 w1`653292 -1853 (p ) 6.076141 0 63 1 1 A1`65/AG 198 200 w1`653355 -1853 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`653400 -1853 ( 1, will be divisible) 6.075882 0 650 4 20 A1`652300 -1745 (only by small primes. The ) -1.31221 0 873 5 25 A1`65/AC 198 200 w1`653173 -1745 (P ) -1.312256 0 65 1 1 A1`65/AG 198 200 w1`653238 -1745 (+) 0 0 45 0 0 A1`65/AF 198 200 w1`653284 -1745 ( 1 metho) -1.31221 0 295 2 7 A1`653579 -1745 (d works in the) -1.31221 0 470 3 13 A1`652300 -1636 (multiplicative sub-group of order ) 5.899933 0 1137 4 33 A1`65/AC 198 200 w1`653437 -1636 (p ) 5.900131 0 63 1 1 A1`65/AG 198 200 w1`653500 -1636 (+) 0 0 45 0 0 A1`65/AF 198 200 w1`653545 -1636 ( 1 in the finite) 5.899933 0 505 4 15 A1`652300 -1528 (field ) 6.077957 0 173 1 5 A1`65/AC 198 200 w1`652473 -1528 (GF) 0 0 110 0 1 A1`65/AF 198 200 w1`652583 -1528 (\() 0 0 32 0 0 A1`65/AC 198 200 w1`652615 -1528 (p) 0 0 37 0 0 A1`65/AF 129 130 w1`652652 -1553 (2) 0 0 27 0 0 A1`65/AF 198 200 w1`652679 -1528 (\). These two algorithms can be quite ef-) 6.077942 0 1371 7 39 A1`652300 -1420 (fective at quickly finding small prime factors \(5 to 25) -1.787292 0 1750 9 54 A1`652300 -1311 (digits\) of large integers. ECM works by selecting a) 11.189331 0 1750 8 50 A1`652300 -1203 (random Elliptic Curve over ) 14.437149 0.836807 1015 4 26 A1`65/AC-O 198 200 w1`653315 -1203 /AC (Z) 0 1.870407 53 0 0 F1`65/AG 198 200 w1`653368 -1203 (/) 0 6.612534 30 0 0 A1`65/AC 198 200 w1`653397 -1203 (N) 0 4.136414 68 0 0 A1`65/AC-O 198 200 w1`653466 -1203 /AC (Z) 0 1.045868 52 0 0 F1`65/AF 198 200 w1`653518 -1203 ( and a random) 14.437271 0.836792 532 3 12 A1`652300 -1095 (point on the curve. One then hopes to find a mul-) 7.519394 0 1750 10 48 A1`652300 -986 (tiple of that point which is the identity element mo) -1.39119 0 1708 9 51 A1`654009 -986 (d) -1.39119 0 41 0 0 A1`65/AC 198 200 w1`652300 -878 (p) 0 0 37 0 0 A1`65/AF 198 200 w1`652337 -878 (, but is not the identity element in ) 0.600037 0 1175 8 36 A1`65/AC-O 198 200 w1`653512 -878 /AC (Z) 0 0.824539 52 0 0 F1`65/AG 198 200 w1`653564 -878 (/) 0 5.775497 29 0 0 A1`65/AC 198 200 w1`653592 -878 (N) 0 3.299377 67 0 0 A1`65/AC-O 198 200 w1`653660 -878 /AC (Z) 0 0.824539 52 0 0 F1`65/AF 198 200 w1`653712 -878 (. This will) 0.600037 0 338 2 10 A1`652300 -770 (reveal ) -0.343399 0 222 1 6 A1`65/AC 198 200 w1`652522 -770 (p) 0 0 37 0 0 A1`65/AF 198 200 w1`652558 -770 (. This is easy to do if the order of the curve is) -0.34343 0 1492 12 48 A1`652300 -661 (divisible only by small primes.) 0.036606 0 1001 4 30 A1`65/AF 200 200 w1`652300 -438 (The advantage that ECM has over ) 8.317245 0 1235 6 31 A1`65/AC 200 200 w1`653534 -438 (P ) 8.317474 0 75 1 1 A1`65/AG 200 200 w1`653610 -438 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`653656 -438 ( 1 is that if) 8.317123 0 394 4 12 A1`652300 -330 (one curve fails it is possible to choose a different) 14.238922 0 1750 9 51 A1`652300 -221 (curve and hope that its group order is divisible only) 2.40065 0 1750 9 52 A1`652300 -113 (by small primes. W) 2.067719 0 650 3 17 A1`652946 -113 (ith ) 2.067719 0 120 1 3 A1`65/AC 200 200 w1`653067 -113 (P ) 2.06781 0 69 1 1 A1`65/AG 200 200 w1`653136 -113 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`653181 -113 ( 1 ther) 2.067749 0 226 2 6 A1`653407 -113 (e is only one gr) 2.067749 0 517 4 15 A1`653925 -113 (oup) 2.067749 0 125 0 2 A1`652300 -5 (to work with. If that one fails, you are out of luck.) 0.012573 0 1671 11 52 A1`65/AF 198 200 w1`652300 212 (Suppose we choose our primes for our RSA key such) 0.734818 0 1750 9 48 A1`652300 320 (that ) 5.370224 0 163 1 4 A1`65/AC 198 200 w1`652463 320 (p ) 5.370224 0 62 1 1 A1`65/AG 198 200 w1`652526 320 (\261) 0 0 45 0 0 A1`65/AF 198 200 w1`652571 320 ( 1, ) 5.370224 0 114 2 3 A1`65/AC 198 200 w1`652685 320 (q ) 5.370224 0 62 1 1 A1`65/AG 198 200 w1`652748 320 (\261) 0 0 45 0 0 A1`65/AF 198 200 w1`652793 320 ( 1 have no small factors and are thus) 5.370499 0 1257 8 36 A1`652300 429 (inaccessible to ) -1.090942 0 502 2 15 A1`65/AC 198 200 w1`652802 429 (P ) -1.091034 0 65 1 1 A1`65/AG 198 200 w1`652867 429 (\261) 0 0 45 0 0 A1`65/AF 198 200 w1`652912 429 ( 1. This does not guard against the) -1.090958 0 1137 7 34 A1`652300 537 (existence of a small value of ) 1.716782 0 963 6 29 A1`65/AC 198 200 w1`653263 537 (k) 0 0 37 0 0 A1`65/AF 198 200 w1`653300 537 (, ) 1.716736 0 43 1 1 A1`65/AC 198 200 w1`653343 537 (k) 0 0 37 0 0 A1`65/AF 198 200 w1`653379 537 ( ) 1.716736 0 22 1 0 A1`65/AG 198 200 w1`653402 537 (\271) 0 0 45 0 0 A1`65/AF 198 200 w1`653447 537 ( 1, such that ) 1.716827 0 440 4 13 A1`65/AC 198 200 w1`653887 537 (p) 0 0 37 0 0 A1`65/AF 198 200 w1`653923 537 ( ) 1.716736 0 22 1 0 A1`65/AG 198 200 w1`653946 537 (\261) 0 0 45 0 0 A1`65/AF 198 200 w1`653991 537 ( ) 1.716736 0 22 1 0 A1`65/AC 198 200 w1`654013 537 (k) 0 0 37 0 0 A1`65/AF 200 200 w1`652300 645 (is divisible by only small primes. And if such a ) 13.71019 0 1713 10 48 A1`65/AC 200 200 w1`654013 645 (k) 0 0 37 0 0 A1`65/AF 200 200 w1`652300 754 (exists, ECM can succeed where ) 3.702698 0 1092 5 29 A1`65/AC 200 200 w1`653392 754 (P ) 3.70282 0 71 1 1 A1`65/AG 200 200 w1`653463 754 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`653509 754 ( 1 fails. It is im-) 3.702698 0 541 5 18 A1`652300 862 (possible to guard against all such possible values of ) -2.463943 0 1692 9 53 A1`65/AC 200 200 w1`653992 862 (k) 0 0 37 0 0 A1`65/AF 200 200 w1`654029 862 (.) 0 0 21 0 0 A1`65/AC 200 200 w1`652300 1079 (P) 0 0 46 0 0 A1`65/AF 200 200 w1`652346 1079 ( ) 8.929688 0 30 1 0 A1`65/AG 200 200 w1`652376 1079 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`652422 1079 ( 1 has been in use since about 1975. ECM has) 8.929382 0 1628 10 43 A1`652300 1187 (been in use since 1985. Since then, the largest prime) -2.708374 -0.00621 1750 9 52 A1`652300 1295 (ever found by ) 4.738297 0 493 3 13 A1`65/AC 200 200 w1`652793 1295 (P) 0 0 46 0 0 A1`65/AF 200 200 w1`652840 1295 ( ) 4.738541 0 25 1 0 A1`65/AG 200 200 w1`652865 1295 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`652911 1295 ( 1 was 34-decimal digits \(with an) 4.738297 0 1139 6 32 A1`652300 1404 (FFT version [12]\). ) 8.954636 0 656 3 18 A1`65/AF 196 200 w1`652956 1404 (The largest factor ever found by) 8.775589 0 1094 5 31 A1`65/AC 196 200 w1`652300 1512 (ECM ) 4.461258 0 206 1 3 A1`65/AF 196 200 w1`652506 1512 (was 47 decimal digits. This is thought to have) 4.461105 0 1544 8 45 A1`652300 1620 (been an extraordinary bit of luck. The second largest) 1.370239 0 1750 8 52 A1`652300 1729 (factor ever found was 43 digits. In the last 12 years,) 6.772415 0 1750 10 53 A1`652300 1837 (only about a dozen factors greater than 2) -2.654175 -0.074692 1318 7 40 A1`65/AF 127 130 w1`653618 1812 (128) 0 -0.048553 80 0 2 A1`65/AF 196 200 w1`653697 1837 ( have been) -2.654282 -0.074692 352 2 9 A1`652300 1945 (found. Finding a 50-digit factor should take about 4) 6.431854 0 1750 8 51 A1`652300 2054 (times this total effort, and finding a 256-bit factor) 13.831192 0 1750 8 52 A1`652300 2162 (should take about 50 million times as this total effort.) -1.571091 0 1750 9 55 A1`65/AF 198 200 w1`652300 2379 (Suppose one expends the same level of effort with) 10.856995 0 1750 8 48 A1`65/AC 198 200 w1`652300 2487 (P) 0 0 46 0 0 A1`65/AF 198 200 w1`652346 2487 ( ) 10.559372 0 31 1 0 A1`65/AG 198 200 w1`652377 2487 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`652422 2487 ( 1 as was spent in factoring RSA-130 with the) 10.558655 0 1627 9 44 A1`652300 2595 (number field sieve. It can be shown that a 256-bit) 10.165375 0 1750 9 49 A1`65/AF 200 200 w1`652300 2704 (prime factor can be found with a probability of) 14.582916 1.401398 1750 8 46 A1`65/AF 196 200 w1`652300 2812 (9 ) -1.16478 0 60 1 1 A1`65/AG 196 200 w1`652360 2812 (\264) 0 0 45 0 0 A1`65/AF 196 200 w1`652405 2812 ( 10) -1.16478 0 101 1 2 A1`65/AG 127 130 w1`652506 2787 (-) 0 0 29 0 0 A1`65/AF 127 130 w1`652535 2787 (7) 0 0 27 0 0 A1`65/AF 196 200 w1`652562 2812 ( and a 384-bit prime factor can be found with) -1.164734 0 1488 9 44 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`6517 2100 2610.5 350 2610.5 F jbd^65N1`65F M1`65/AC 170 170 w1`65350 2723 (Robert D. Silverman is Senior Research Scientist at RSA Labora-) 1.521362 0 1750 9 62 A1`65350 2811 (tories East. He can be contacted at bobs@rsa.com.) -0.009064 0 1352 7 48 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 1080 (Generating an) -0.010117 0 507 1 12 A1`654350 1189 (RSA key with) 0.062866 0 473 2 11 A1`654350 1297 (str) 0.204391 0 89 0 2 A1`654438 1297 (ong primes) 0.204391 0 397 1 9 A1`654350 1405 (does ) -0.036057 0 189 1 4 A1`65/AB 161 170 w1`654539 1405 (not ) -0.036057 0 136 1 3 A1`65/AD 161 170 w1`654675 1405 (add) 0 0 137 0 2 A1`654350 1514 (any security) -0.051346 0 429 1 11 A1`654350 1622 (to the key) -0.053711 0 356 2 9 A1`654350 1730 (over using) -0.200592 0 370 1 9 A1`654350 1839 (random primes.) -0.177246 0 562 1 13 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 10 10%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`6572 -73 237 562 -237 -489 1.805556 -1.808219 -4265 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`65-4239 3053 (10) 0 0 74 0 1 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 -4194 2817 -4194 -2567 F jbd^65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4900 3053 (CR) 0 16.086365 105 0 1 A1`65-4797 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65-4050 3053 (S P R I N G   1 9 9 7  ) 7.445572 1.841431 746 13 22 A1`65T g`650 0 0 (Black) 1 _rgb d`65-3304 3053 ( \321   T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S) 7.445709 1.841431 2954 52 91 A1`65O1`65N1`65F M1`65/AF 198 200 w1`65-4050 -2503 (a probability of 2 ) -0.441788 0 585 4 18 A1`65/AG 198 200 w1`65-3465 -2503 (\264) 0 0 45 0 0 A1`65/AF 198 200 w1`65-3420 -2503 ( 10) -0.441803 0 102 1 2 A1`65/AG 129 130 w1`65-3317 -2528 (-) 0 0 30 0 0 A1`65/AF 129 130 w1`65-3288 -2528 (11) 0 0 54 0 1 A1`65/AF 198 200 w1`65-3234 -2503 (. For ECM it is very difficult) -0.441788 0 934 6 29 A1`65-4050 -2395 (to estimate the chance of success within an ) 7.410492 0 1520 8 43 A1`65/AC 198 200 w1`65-2530 -2395 (a priori) 7.410751 0 230 1 7 A1`65/AF 198 200 w1`65-4050 -2286 (fixed amount of time. Extensive computations would) -1.969269 0 1750 6 49 A1`65-4050 -2178 (have to be performed to determine the optimal ECM) -1.731262 0 1750 8 48 A1`65-4050 -2070 (parameters for a given level of event when looking) 8.004486 0 1750 8 49 A1`65-4050 -1961 (for 256-bit and 384-bit primes. A rough estimate sug-) -2.681305 -0.071899 1750 8 52 A1`65-4050 -1853 (gests 2 to 3 orders of magnitude greater chance than) 1.81572 0 1750 9 51 A1`65-4050 -1745 (with ) -0.52623 0 171 1 4 A1`65/AC 198 200 w1`65-3879 -1745 (P) 0 0 46 0 0 A1`65/AF 198 200 w1`65-3833 -1745 ( ) -0.52623 0 20 1 0 A1`65/AG 198 200 w1`65-3812 -1745 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`65-3767 -1745 ( 1. But one still only has about a 1 in 10,000) -0.52626 0 1467 11 45 A1`65-4050 -1636 (chance of finding a 256-bit prime. In short, randomly) -2.681305 -0.121475 1750 8 52 A1`65-4050 -1528 (chosen 256-bit and 384-bit primes are safe from at-) 6.307632 0 1750 8 50 A1`65-4050 -1420 (tacks via ) 0.024399 0 312 2 9 A1`65/AC 198 200 w1`65-3738 -1420 (P) 0 0 46 0 0 A1`65/AF 198 200 w1`65-3692 -1420 ( ) 0.024399 0 21 1 0 A1`65/AG 198 200 w1`65-3672 -1420 (\261) 0 0 45 0 0 A1`65/AF 198 200 w1`65-3627 -1420 ( 1 and ECM.) 0.024399 0 426 3 10 A1`65/AB 196 200 w1`65-4050 -1203 (X9.31 criteria for RSA key generation) 0.016953 0 1613 5 36 A1`65/AF 200 200 w1`65-4050 -1095 (Here we summarize the criteria currently cited in) 14.377777 0 1750 7 48 A1`65-4050 -986 (the X9.31 standard for public key cryptography:) 0.032684 0 1601 6 46 A1`65-3950 -770 (If ) 6.021271 0 78 1 2 A1`65/AC 200 200 w1`65-3872 -770 (e) 0 0 32 0 0 A1`65/AF 200 200 w1`65-3840 -770 (, the public exponent, is o) 6.021027 0 907 5 26 A1`65-2932 -770 (dd, then ) 6.021027 0 315 2 8 A1`65/AC 200 200 w1`65-2617 -770 (e) 0 0 32 0 0 A1`65/AF 200 200 w1`65-2584 -770 ( shall) 6.021271 0 184 1 5 A1`65-3950 -661 (be relatively prime to ) 0.054916 0 740 4 22 A1`65/AC 200 200 w1`65-3210 -661 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3172 -661 ( ) 0.054932 0 21 1 0 A1`65/AG 200 200 w1`65-3152 -661 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3106 -661 ( 1 and ) 0.054932 0 229 3 6 A1`65/AC 200 200 w1`65-2877 -661 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2840 -661 ( ) 0.054932 0 21 1 0 A1`65/AG 200 200 w1`65-2819 -661 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2773 -661 ( 1.) 0.054932 0 83 1 2 A1`65/AF 202 200 w1`65-4050 -445 (This is easily satisfied by choosing e.g. ) 14.728638 0.330719 1428 7 41 A1`65/AC 202 200 w1`65-2622 -445 (e ) 14.729599 0.330673 69 1 1 A1`65/AG 202 200 w1`65-2553 -445 (=) 0 0.330795 47 0 0 A1`65/AF 202 200 w1`65-2506 -445 ( 3, or) 14.728485 0.33075 206 2 5 A1`65/AC 202 200 w1`65-4050 -336 (e) 0 0 33 0 0 A1`65/AF 202 200 w1`65-4017 -336 ( = 2) 5.552979 0 146 2 3 A1`65/AF 131 130 w1`65-3871 -361 (16 ) 3.609055 0 72 1 2 A1`65/AG 202 200 w1`65-3799 -336 (+) 0 0 46 0 0 A1`65/AF 202 200 w1`65-3753 -336 ( 1. These are commonly used values. This) 5.552795 0 1453 7 39 A1`65-4050 -228 (criterion is necessary in order for encryption to work) -2.735443 -0.162521 1750 8 53 A1`65-4050 -120 (pr) 4.540527 0 70 0 1 A1`65-3980 -120 (operly) 4.540527 0 210 0 5 A1`65-3776 -120 (. When constr) 4.540527 0 497 2 12 A1`65-3278 -120 (ucting the primes ) 4.540527 0 628 3 17 A1`65/AC 202 200 w1`65-2650 -120 (p) 0 0 37 0 0 A1`65/AF 202 200 w1`65-2613 -120 ( and ) 4.540527 0 177 2 4 A1`65/AC 202 200 w1`65-2435 -120 (q) 0 0 37 0 0 A1`65/AF 202 200 w1`65-2398 -120 (, it) 4.540527 0 98 1 3 A1`65-4050 -11 (is easy to ensure that ) 2.356979 0 738 5 22 A1`65/AC 202 200 w1`65-3312 -11 (e) 0 0 33 0 0 A1`65/AF 202 200 w1`65-3279 -11 ( does not divide ) 2.356949 0 570 4 16 A1`65/AC 202 200 w1`65-2709 -11 (LCM) 0 0 182 0 2 A1`65/AF 202 200 w1`65-2526 -11 (\() 0 0 33 0 0 A1`65/AC 202 200 w1`65-2493 -11 (p) 0 0 37 0 0 A1`65/AF 202 200 w1`65-2456 -11 ( ) 2.357056 0 23 1 0 A1`65/AG 202 200 w1`65-2433 -11 (-) 0 0 46 0 0 A1`65/AF 202 200 w1`65-2387 -11 ( 1,) 2.357056 0 87 1 2 A1`65/AC 202 200 w1`65-4050 97 (q) 0 0 37 0 0 A1`65/AF 202 200 w1`65-4012 97 ( ) 0.087708 0 21 1 0 A1`65/AG 202 200 w1`65-3992 97 (-) 0 0 46 0 0 A1`65/AF 202 200 w1`65-3945 97 ( 1\).) 0.087708 0 117 1 3 A1`65/AF 200 200 w1`65-3950 314 (If ) -0.244965 0 72 1 2 A1`65/AC 200 200 w1`65-3878 314 (e) 0 0 32 0 0 A1`65/AF 200 200 w1`65-3846 314 ( is even, then it must be relatively prime to) -0.244949 0 1446 9 44 A1`65-3950 422 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-3917 422 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3880 422 ( ) 0.113388 0 21 1 0 A1`65/AG 200 200 w1`65-3859 422 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3814 422 ( 1) 0.113388 0 62 1 1 A1`65-3751 422 (\)) 0 -4.166824 28 0 0 A1`65/AG 200 200 w1`65-3723 422 (/) 0 9.166489 32 0 0 A1`65/AF 200 200 w1`65-3691 422 (2 and \() 0.113388 0 241 2 6 A1`65/AC 200 200 w1`65-3450 422 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3413 422 ( ) 0.113388 0 21 1 0 A1`65/AG 200 200 w1`65-3392 422 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3346 422 ( 1) 0.113388 0 62 1 1 A1`65-3283 422 (\)) 0 -3.332687 29 0 0 A1`65/AG 200 200 w1`65-3255 422 (/) 0 9.166489 32 0 0 A1`65/AF 200 200 w1`65-3222 422 (2, and  ) 0.113388 0 250 3 7 A1`65/AC 200 200 w1`65-2972 422 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2935 422 ( ) 0.113388 0 21 1 0 A1`65/AG 200 200 w1`65-2914 422 (\272) 0 -28.332336 17 0 0 A1`65-2897 432 (\244) 0 0 14 0 0 A1`65/AF 200 200 w1`65-2882 422 ( ) 0.113388 4.99968 26 1 0 A1`65/AC 200 200 w1`65-2857 422 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2820 422 ( mo) 0.113388 0 127 1 2 A1`65-2691 422 (d 8.) 0.113388 0 125 1 3 A1`65/AF 194 200 w1`65-4050 639 (These criteria are easily satisfied by letting ) 2.730194 0 1421 7 46 A1`65/AC 194 200 w1`65-2629 639 (e) 0 0 31 0 0 A1`65/AF 194 200 w1`65-2597 639 ( be twice) 2.730316 0 297 2 8 A1`65-4050 747 (a prime, and then generating ) 7.698395 0 1003 5 28 A1`65/AC 194 200 w1`65-3047 747 (p) 0 0 36 0 0 A1`65/AF 194 200 w1`65-3010 747 ( and ) 7.698654 0 177 2 4 A1`65/AC 194 200 w1`65-2833 747 (q) 0 0 36 0 0 A1`65/AF 194 200 w1`65-2797 747 ( so that one of) 7.698334 0 497 4 14 A1`65-4050 855 (them is congr) -1.969559 0 440 2 12 A1`65-3609 855 (uent to 3 mo) -1.969559 0 414 3 11 A1`65-3195 855 (d 8 and the other is congr) -1.969559 0 827 6 25 A1`65-2367 855 (u-) -1.969559 0 67 0 1 A1`65-4050 964 (ent to 7 mo) 4.261276 0 392 3 10 A1`65-3657 964 (d 8 with ) 4.261276 0 302 3 8 A1`65/AC 194 200 w1`65-3355 964 (e) 0 0 31 0 0 A1`65/AF 194 200 w1`65-3323 964 ( coprime to ) 4.261414 0 405 3 11 A1`65/AC 194 200 w1`65-2917 964 (LCM) 0 0 175 0 2 A1`65/AF 194 200 w1`65-2742 964 (\() 0 0 31 0 0 A1`65/AC 194 200 w1`65-2711 964 (p) 0 0 36 0 0 A1`65/AF 194 200 w1`65-2675 964 ( ) 4.261124 0 25 1 0 A1`65/AG 194 200 w1`65-2651 964 (-) 0 0 44 0 0 A1`65/AF 194 200 w1`65-2606 964 ( 1, ) 4.261124 0 110 2 3 A1`65/AC 194 200 w1`65-2497 964 (q) 0 0 36 0 0 A1`65/AF 194 200 w1`65-2461 964 ( ) 4.261124 0 25 1 0 A1`65/AG 194 200 w1`65-2436 964 (-) 0 0 44 0 0 A1`65/AF 194 200 w1`65-2392 964 (1\).) 0 0 92 0 2 A1`65-4050 1072 (These latter conditions are easily satisfied during prime) -2.627121 -0.519073 1750 7 56 A1`65-4050 1180 (generation and we show how to do so below) -0.015396 0 1437 8 40 A1`65-2620 1180 (.) -0.015396 0 20 0 0 A1`65/AA 200 200 w1`65-4050 1397 (Note:) 0 -0.297638 202 0 4 A1`65/AF 200 200 w1`65-3848 1397 ( The public exponent ) -2.708359 -0.267822 733 4 20 A1`65/AC 200 200 w1`65-3115 1397 (e) 0 -0.267822 32 0 0 A1`65/AF 200 200 w1`65-3082 1397 ( is selected prior to gen-) -2.708374 -0.267822 782 5 25 A1`65-4050 1505 (eration of the primes.) -0.065369 0 722 3 21 A1`65-3950 1722 (The mo) 6.839844 0 273 1 5 A1`65-3676 1722 (dulus shall have 1024 ) 6.839844 0 772 4 21 A1`65/AG 200 200 w1`65-2904 1722 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2858 1722 ( 256) 6.839844 0 152 1 3 A1`65/AC 200 200 w1`65-2705 1722 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`65-2668 1722 ( bits for) 6.839844 0 268 2 8 A1`65/AC 200 200 w1`65-3950 1830 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3913 1830 ( ) 0.048416 0 21 1 0 A1`65/AG 200 200 w1`65-3892 1830 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3846 1830 ( 0, 1, ) 0.048416 0 187 3 6 A1`65/AG 200 200 w1`65-3659 1830 (\274) 0 0 83 0 0 A1`65/AF 200 200 w1`65-3575 1830 (.) 0 0 21 0 0 A1`65/AF 204 200 w1`65-4050 2047 (As a result, the primes ) 14.87468 2.334091 918 5 23 A1`65/AC 204 200 w1`65-3132 2047 (p) 0 2.333374 40 0 0 A1`65/AF 204 200 w1`65-3091 2047 ( and ) 14.874451 2.333984 211 2 4 A1`65/AC 204 200 w1`65-2880 2047 (q) 0 2.333374 40 0 0 A1`65/AF 204 200 w1`65-2840 2047 ( shall then be) 14.874832 2.334091 540 3 13 A1`65/AF 200 200 w1`65-4050 2155 (512 ) 6.416122 0 152 1 3 A1`65/AG 200 200 w1`65-3898 2155 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3852 2155 ( 128) 6.416122 0 152 1 3 A1`65/AC 200 200 w1`65-3699 2155 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3663 2155 ( bits each. The choice of the value of ) 6.415878 0 1326 9 38 A1`65/AC 200 200 w1`65-2337 2155 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`65-4050 2264 (depends on the level of security required. Larger val-) -1.897125 0 1750 8 53 A1`65-4050 2372 (ues of ) 6.476547 0 226 2 6 A1`65/AC 200 200 w1`65-3824 2372 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`65-3787 2372 ( give gr) 6.476288 0 258 2 7 A1`65-3529 2372 (eater security) 6.476288 0 452 1 13 A1`65-3082 2372 (. This r) 6.476288 0 256 2 7 A1`65-2827 2372 (equir) 6.476288 0 171 0 4 A1`65-2655 2372 (ement is a) 6.476288 0 355 2 9 A1`65-4050 2480 (statement reflecting the current state of the art in) 9.994263 0 1750 8 51 A1`65-4050 2589 (factoring technology) 2.807556 0 699 1 19 A1`65-3357 2589 (. W) 2.807556 0 128 1 2 A1`65-3232 2589 (ith the Number Field Sieve) 2.807556 0 932 4 25 A1`65-4050 2697 (512-bit mo) 5.098862 0 377 1 9 A1`65-3672 2697 (duli ar) 5.098862 0 220 1 6 A1`65-3451 2697 (e simply not secur) 5.098862 0 619 3 17 A1`65-2832 2697 (e to) 5.098862 0 132 1 3 A1`65-2699 2697 (day for new) 5.098862 0 399 2 10 A1`65-4050 2805 (applications, 768 bits of) 3.209351 0 810 3 24 A1`65-3240 2805 (fers a basic level of security) 3.209351 0 925 5 29 A1`65-2321 2805 (,) 3.209351 0 21 0 0 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65-2100 -2503 (and 1024-bit mo) 6.051056 0 572 2 14 A1`65-1527 -2503 (duli ar) 6.051056 0 221 1 6 A1`65-1306 -2503 (e often used for longer) 6.051056 0 774 4 22 A1`65-535 -2503 (-ter) 6.051056 0 120 0 3 A1`65-415 -2503 (m) 6.051056 0 65 0 0 A1`65-2100 -2395 (security) 0 0.013626 259 0 7 A1`65-1847 -2395 (.) 0 0.013626 21 0 0 A1`65/AC 200 200 w1`65-2000 -2178 (p) 0 -0.319672 37 0 0 A1`65/AF 200 200 w1`65-1963 -2178 ( and ) -2.708374 -0.319763 160 2 4 A1`65/AC 200 200 w1`65-1804 -2178 (q) 0 -0.319672 37 0 0 A1`65/AF 200 200 w1`65-1767 -2178 ( shall each pass a probabalistic primality) -2.708374 -0.319748 1317 6 41 A1`65-2000 -2070 (test where the probability of error is less than) 4.052643 0 1550 8 47 A1`65-2000 -1961 (2) 0 -0.040054 42 0 0 A1`65/AG 130 130 w1`65-1958 -1986 (-) 0 -0.026047 30 0 0 A1`65/AF 130 130 w1`65-1929 -1986 (100) 0 -0.026031 81 0 2 A1`65/AF 200 200 w1`65-1847 -1961 (.) 0 0 21 0 0 A1`65-2100 -1745 (One can also use a deterministic primality ) -2.708374 -0.008209 1417 7 42 A1`65/AC 200 200 w1`65-682 -1745 (proof ) -2.708374 -0.008209 180 1 5 A1`65/AF 200 200 w1`65-502 -1745 (such) 0 -0.008209 152 0 3 A1`65-2100 -1636 (as the Bosma-Cohen-Lenstra algorithm or the) 14.582916 3.078812 1750 5 42 A1`65-2100 -1528 (Atkins-Goldwasser) 2.793976 0 643 0 16 A1`65-1460 -1528 (-Killian algorithm. The criterion) 2.793976 0 1110 3 32 A1`65-2100 -1420 (here simply states that we shall have chosen primes) 3.016083 0 1750 8 50 A1`65-2100 -1311 (with a high degree of confidence; that we have ei-) 7.278824 0 1750 9 49 A1`65-2100 -1203 (ther chosen a prime using a decision procedure and) 3.575562 0 1750 8 49 A1`65-2100 -1095 (that the probability that the procedure is in error is) 3.458572 0 1750 9 53 A1`65-2100 -986 (less than 2) 0.499557 0 357 2 10 A1`65/AG 130 130 w1`65-1742 -1011 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65-1713 -1011 (100) 0 0 81 0 2 A1`65/AF 200 200 w1`65-1632 -986 ( ) 0.499512 0 21 1 0 A1`65/AG 200 200 w1`65-1610 -986 (~) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1565 -986 ( 8 ) 0.499557 0 84 2 2 A1`65/AG 200 200 w1`65-1480 -986 (\264) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1435 -986 ( 10) 0.499512 0 105 1 2 A1`65/AG 130 130 w1`65-1330 -1011 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65-1300 -1011 (31) 0 0 54 0 1 A1`65/AF 200 200 w1`65-1246 -986 ( or that we have a rigorous) 0.499542 0 896 6 26 A1`65-2100 -878 (pr) 0.041504 0 70 0 1 A1`65-2030 -878 (oof of primality) 0.041504 0 518 2 15 A1`65-1518 -878 (.) 0.041504 0 21 0 0 A1`65/AC 200 200 w1`65-2000 -661 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1963 -661 ( ) 5.057037 0 26 1 0 A1`65/AG 200 200 w1`65-1937 -661 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1891 -661 ( 1, ) 5.057037 0 114 2 3 A1`65/AC 200 200 w1`65-1777 -661 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1740 -661 ( ) 5.057037 0 26 1 0 A1`65/AG 200 200 w1`65-1714 -661 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1668 -661 ( 1, ) 5.057037 0 114 2 3 A1`65/AC 200 200 w1`65-1554 -661 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1517 -661 ( ) 5.057037 0 26 1 0 A1`65/AG 200 200 w1`65-1491 -661 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1445 -661 ( 1, and ) 5.057037 0 265 3 7 A1`65/AC 200 200 w1`65-1180 -661 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1143 -661 ( ) 5.057037 0 26 1 0 A1`65/AG 200 200 w1`65-1117 -661 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1072 -661 ( 1 shall each have) 5.057037 0 622 4 17 A1`65-2000 -553 (large prime factors.) 0.073654 0 641 2 19 A1`65-2100 -336 (This is the typical strong primes condition. Unfortu-) -2.543076 0 1750 7 52 A1`65-2100 -228 (nately) 14.582916 0.073654 209 0 5 A1`65-1897 -228 (, early drafts of X9.31 do not define \324lar) 14.582916 0.073654 1434 8 41 A1`65-463 -228 (ge\325.) 14.582916 0.073654 113 0 3 A1`65-2100 -120 (From the results presented in [5,7,12], we suggest that) -2.708374 -0.566254 1750 8 54 A1`65-2100 -11 (2) 0 0 42 0 0 A1`65/AF 130 130 w1`65-2058 -36 (100) 0 0 81 0 2 A1`65/AF 200 200 w1`65-1977 -11 ( is sufficiently large. This will put ) 0.100586 0 1139 7 37 A1`65/AC 200 200 w1`65-838 -11 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-801 -11 ( ) 0.100586 0 21 1 0 A1`65/AG 200 200 w1`65-780 -11 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`65-734 -11 ( 1 factoring) 0.100586 0 384 2 11 A1`65-2100 97 (attacks well out of computer range. The size of the) 6.272903 0 1750 9 50 A1`65-2100 205 (prime factors \(101 bits\) of ) 5.651062 0 924 5 27 A1`65/AC 200 200 w1`65-1176 205 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1139 205 ( ) 5.650833 0 27 1 0 A1`65/AG 200 200 w1`65-1113 205 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1067 205 ( 1 and ) 5.651199 0 246 3 6 A1`65/AC 200 200 w1`65-821 205 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-784 205 ( ) 5.650833 0 27 1 0 A1`65/AG 200 200 w1`65-757 205 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`65-712 205 ( 1 is much) 5.651199 0 362 3 9 A1`65-2100 314 (too large for these algorithms to succeed in the life-) 2.432297 0 1750 9 53 A1`65-2100 422 (time of the universe.) 0.011398 0 694 3 20 A1`65/AC 200 200 w1`65-2000 639 (GCD) 0 0 185 0 2 A1`65/AF 200 200 w1`65-1815 639 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-1782 639 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1745 639 ( ) 0.031235 0 21 1 0 A1`65/AG 200 200 w1`65-1725 639 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1679 639 ( 1, ) 0.031235 0 104 2 3 A1`65/AC 200 200 w1`65-1575 639 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1537 639 ( ) 0.031235 0 21 1 0 A1`65/AG 200 200 w1`65-1517 639 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1471 639 ( 1\) shall be small.) 0.031235 0 590 4 18 A1`65-2100 855 (Early drafts of X9.31 did not define \324small\325, but the) 5.981293 0 1750 9 52 A1`65-2100 964 (metho) 8.534546 0 217 0 4 A1`65-1882 964 (d for generating primes satisfies this r) 8.534546 0 1296 6 39 A1`65-586 964 (equir) 8.534546 0 171 0 4 A1`65-415 964 (e-) 8.534546 0 65 0 1 A1`65-2100 1072 (ment sufficiently to guard against the relevant at-) 12.389832 0 1750 7 50 A1`65-2100 1180 (tacks \(repeat encryption\). The argument in section) 4.401199 0 1750 6 49 A1`65-2100 1289 (9 of [10] shows that if ) 1.222366 0 752 6 23 A1`65/AC 200 200 w1`65-1347 1289 (r) 0 0 28 0 0 A1`65/AF 200 200 w1`65-1320 1289 ( is a large prime factor divid-) 1.222366 0 970 6 30 A1`65-2100 1397 (ing ) 3.227798 0 130 1 3 A1`65/AC 200 200 w1`65-1970 1397 (LCM) 0 0 180 0 2 A1`65/AF 200 200 w1`65-1789 1397 (\() 0 0 32 0 0 A1`65/AC 200 200 w1`65-1757 1397 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1720 1397 ( ) 3.227798 0 24 1 0 A1`65/AG 200 200 w1`65-1695 1397 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1650 1397 ( 1, ) 3.228104 0 110 2 3 A1`65/AC 200 200 w1`65-1539 1397 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1502 1397 ( ) 3.227798 0 24 1 0 A1`65/AG 200 200 w1`65-1478 1397 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1432 1397 ( 1\), then either the order of the) 3.227966 0 1082 7 32 A1`65-2100 1505 (public exponent exceeds ) -2.185593 0 842 3 23 A1`65/AC 200 200 w1`65-1257 1505 (r) 0 0 28 0 0 A1`65/AF 200 200 w1`65-1230 1505 ( \(which renders repeat en-) -2.185577 0 880 4 25 A1`65-2100 1614 (cryption attacks impossible because it requires too) 11.76593 0 1750 6 50 A1`65-2100 1722 (much computation\) ) 9.039001 0 712 2 17 A1`65/AC 200 200 w1`65-1387 1722 (or ) 9.038513 0 95 1 2 A1`65/AF 200 200 w1`65-1293 1722 (the order of the encrypting) 9.038757 0 943 4 26 A1`65-2100 1830 (exponent is small with probability less than 1) 6.699173 0 1572 7 45 A1`65/AG 200 200 w1`65-528 1830 (/) 0 0 23 0 0 A1`65/AF 200 200 w1`65-505 1830 (\(4) 0 0 74 0 1 A1`65/AC 200 200 w1`65-431 1830 (r) 0 0 28 0 0 A1`65/AF 200 200 w1`65-403 1830 (\).) 0 0 53 0 1 A1`65/AF 198 200 w1`65-2100 1939 (Since ) -1.500717 0 207 1 5 A1`65/AC 198 200 w1`65-1893 1939 (p) 0 0 37 0 0 A1`65/AF 198 200 w1`65-1856 1939 ( ) -1.500717 0 19 1 0 A1`65/AG 198 200 w1`65-1837 1939 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`65-1792 1939 ( 1 and ) -1.500809 0 222 3 6 A1`65/AC 198 200 w1`65-1570 1939 (q) 0 0 37 0 0 A1`65/AF 198 200 w1`65-1533 1939 ( ) -1.500717 0 19 1 0 A1`65/AG 198 200 w1`65-1514 1939 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`65-1469 1939 ( 1 both have prime factors at least) -1.500793 0 1119 7 34 A1`65/AF 202 200 w1`65-2100 2047 (2) 0 1.584442 44 0 0 A1`65/AF 131 130 w1`65-2056 2022 (100) 0 1.030212 85 0 2 A1`65/AF 202 200 w1`65-1971 2047 (, ) 14.729156 1.58493 60 1 1 A1`65/AC 202 200 w1`65-1911 2047 (GCD) 0 1.584763 192 0 2 A1`65/AF 202 200 w1`65-1720 2047 (\() 0 1.584442 34 0 0 A1`65/AC 202 200 w1`65-1685 2047 (p) 0 1.584442 39 0 0 A1`65/AF 202 200 w1`65-1646 2047 ( ) 14.729156 1.584442 37 1 0 A1`65/AG 202 200 w1`65-1609 2047 (-) 0 1.584442 48 0 0 A1`65/AF 202 200 w1`65-1561 2047 ( 1, ) 14.729156 1.58493 141 2 3 A1`65/AC 202 200 w1`65-1420 2047 (q) 0 1.584442 39 0 0 A1`65/AF 202 200 w1`65-1381 2047 ( ) 14.729156 1.584442 37 1 0 A1`65/AG 202 200 w1`65-1344 2047 (-) 0 1.584442 48 0 0 A1`65/AF 202 200 w1`65-1296 2047 ( 1\) can be no more than) 14.728745 1.584839 946 6 22 A1`65/AC 200 200 w1`65-2100 2155 (s) 0 0 28 0 0 A1`65/AF 200 200 w1`65-2072 2155 ( ) 0.481491 0 21 1 0 A1`65/AG 200 200 w1`65-2051 2155 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2005 2155 ( ) 0.481491 0 21 1 0 A1`65/AG 200 200 w1`65-1984 2155 (\326) 0 -55.831818 -10 0 0 A1`65/AG 264 220 w1`65-1994 2164 (`) 0 -5.500183 50 0 0 A1`65/AC 200 200 w1`65-1945 2155 (N) 0 1.666977 67 0 0 A1`65/AG 200 200 w1`65-1878 2155 (/) 0 4.166824 27 0 0 A1`65/AF 200 200 w1`65-1851 2155 (2) 0 0 42 0 0 A1`65/AF 130 130 w1`65-1809 2130 (100) 0 0 81 0 2 A1`65/AF 200 200 w1`65-1728 2155 (, and hence the probability that the pub-) 0.481476 0 1378 7 40 A1`65-2100 2264 (lic exponent has order less than ) 12.209396 0 1161 6 32 A1`65/AC 200 200 w1`65-939 2264 (k) 0 0 37 0 0 A1`65/AF 200 200 w1`65-902 2264 ( ) 12.210022 0 33 1 0 A1`65/AG 200 200 w1`65-869 2264 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-823 2264 ( 2) 12.210022 0 75 1 1 A1`65/AF 130 130 w1`65-749 2239 (100) 0 0 81 0 2 A1`65/AF 200 200 w1`65-667 2264 ( is ) 12.209091 0 117 2 3 A1`65/AC 200 200 w1`65-550 2264 (ks) 0 0 65 0 1 A1`65/AF 130 130 w1`65-486 2229 (2) 0 0 27 0 0 A1`65/AG 200 200 w1`65-459 2264 (/) 0 0 23 0 0 A1`65/AC 200 200 w1`65-436 2264 (N) 0 0 65 0 0 A1`65/AF 200 200 w1`65-371 2264 (,) 0 0 21 0 0 A1`65-2100 2372 (which is less than 2) 4.738327 0 676 4 19 A1`65/AG 130 130 w1`65-1424 2347 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65-1394 2347 (100) 0 0 81 0 2 A1`65/AF 200 200 w1`65-1313 2372 (. In practice, the probability) 4.738327 0 963 4 29 A1`65-2100 2480 (will be much lower) 0.003708 0 641 3 17 A1`65-1463 2480 (. This is a worst case analysis.) 0.003708 0 985 6 31 A1`65/AC 200 200 w1`65-2000 2697 (p) 0 0 37 0 0 A1`65/AG 200 200 w1`65-1963 2697 (/) 0 4.99968 28 0 0 A1`65/AC 200 200 w1`65-1935 2697 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1898 2697 ( shall not be near the ratio of two small) 14.073563 0 1448 9 40 A1`65-2000 2805 (integers and ) 0.097275 0 430 2 12 A1`65/AG 200 200 w1`65-1570 2805 (\372) 0 6.666656 39 0 0 A1`65/AC 200 200 w1`65-1531 2805 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65-1494 2805 ( ) 0.09729 0 21 1 0 A1`65/AG 200 200 w1`65-1473 2805 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1427 2805 ( ) 0.09729 0 21 1 0 A1`65/AC 200 200 w1`65-1406 2805 (q) 0 0 37 0 0 A1`65/AG 200 200 w1`65-1369 2805 (\372) 0 0 32 0 0 A1`65/AF 200 200 w1`65-1337 2805 ( ) 0.09729 0 21 1 0 A1`65/AG 200 200 w1`65-1316 2805 (>) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1271 2805 ( 2) 0.09729 0 62 1 1 A1`65/AF 130 130 w1`65-1208 2780 (412 ) 0.063232 0 95 1 3 A1`65/AG 130 130 w1`65-1113 2780 (+) 0 0 30 0 0 A1`65/AF 130 130 w1`65-1083 2780 ( 128) 0.063232 0 95 1 3 A1`65/AC 130 130 w1`65-989 2780 (x) 0 0 24 0 0 A1`65/AF 200 200 w1`65-965 2805 (.) 0 0 21 0 0 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4644 -445 (In shor) -0.062485 0 243 1 6 A1`65-4397 -445 (t,) -0.062485 0 47 0 1 A1`65-4692 -336 (randomly) 0 -0.001129 342 0 7 A1`65-4592 -228 (chosen) 0 0.026886 242 0 5 A1`65-4764 -120 (256-bit and) -0.154877 0 415 1 10 A1`65-4867 -11 (384-bit primes) 0.044357 0 517 1 13 A1`65-4638 97 (are safe) -0.092087 0 288 1 7 A1`65-4793 205 (fr) -0.111588 0 57 0 1 A1`65-4737 205 (om attacks) -0.111588 0 387 1 9 A1`65-4664 314 (via ) -0.104752 0 131 1 3 A1`65/AB 161 170 w1`65-4532 314 (P) 0 0 45 0 0 A1`65/AD 161 170 w1`65-4488 314 ( ) -0.104752 0 23 1 0 A1`65$1 tsi^65/AG-I /AG z1`65/$1 bmt^65/AG-I 161 170 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4465 314 (\261) 0 0 46 0 0 A1`65/AD 161 170 w1`65-4419 314 ( 1) -0.104752 0 69 1 1 A1`65-4680 422 (and ECM.) 0.082352 0 330 1 7 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 11 11%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate-6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 4202 2808 4202 -2567 F jbd^6572 -73 237 562 -237 -489 1.791667 -1.808219 4135 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 3053 (CR) 0 16.086365 105 0 1 A1`654452 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 3053 (T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S   \321 ) 7.445709 1.841431 2956 52 91 A1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`653306 3053 (  S P R I N G   1 9 9 7) 7.445572 1.841431 744 13 22 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`654161 3053 (11) 0 0 74 0 1 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 -2503 (The purpose of these requirements is to guard against) -2.708374 -0.275436 1750 8 52 A1`65350 -2395 (Fermat and related \(i.e. Lehman\) factoring algo-) 14.582916 0.717346 1750 6 47 A1`65350 -2286 (rithms. This condition is easily checked once one) 11.991653 0 1750 7 48 A1`65350 -2178 (has generated two primes simply by subtracting their) -2.159424 0 1750 7 51 A1`65350 -2070 (4 or 8 highest order bytes and checking that the dif-) 0.089523 0 1750 10 52 A1`65350 -1961 (fer) 10.530853 0 88 0 2 A1`65438 -1961 (ence is non-zer) 10.530853 0 525 2 14 A1`65963 -1961 (o. However) 10.530853 0 399 1 9 A1`651358 -1961 (, the basis for the r) 10.530853 0 677 5 20 A1`652035 -1961 (e-) 10.530853 0 65 0 1 A1`65350 -1853 (quir) 8.19873 0 134 0 3 A1`65484 -1853 (ement is that if ) 8.19873 0 565 4 16 A1`65/AC 200 200 w1`651049 -1853 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`651086 -1853 ( and ) 8.19873 0 183 2 4 A1`65/AC 200 200 w1`651269 -1853 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`651306 -1853 ( ar) 8.19873 0 94 1 2 A1`651400 -1853 (e too close together) 8.19873 0 684 3 19 A1`652079 -1853 (,) 8.19873 0 21 0 0 A1`65350 -1745 (then Fer) 3.752121 0 288 1 7 A1`65638 -1745 (mat\325) 3.752121 0 148 0 3 A1`65782 -1745 (s or Lehman\325) 3.752121 0 442 2 11 A1`651220 -1745 (s algorithm can factor the) 3.752121 0 880 4 25 A1`65350 -1636 (mo) 4.855469 0 107 0 1 A1`65457 -1636 (dulus with work load equal to \() 4.855469 0 1075 6 30 A1`65/AC 200 200 w1`651532 -1636 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`651570 -1636 ( ) 4.855713 0 26 1 0 A1`65/AG 200 200 w1`651595 -1636 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`651641 -1636 ( ) 4.855713 0 26 1 0 A1`65/AC 200 200 w1`651667 -1636 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`651704 -1636 (\)) 0 0 32 0 0 A1`65/AG 200 200 w1`651736 -1636 (/) 0 1.666977 25 0 0 A1`65/AF 200 200 w1`651761 -1636 (2 ) 4.855713 0 67 1 1 A1`65/AG 200 200 w1`651828 -1636 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`651874 -1636 ( ) 4.855713 0 26 1 0 A1`65/AG 200 200 w1`651900 -1636 (\353) 0 2.499832 35 0 0 A1`651934 -1636 (\326) 0 -54.998962 -9 0 0 A1`65/AG 264 220 w1`651925 -1628 (`) 0 -6.599548 48 0 0 A1`65/AC 200 200 w1`651973 -1636 (pq) 0 0 74 0 1 A1`65/AG 200 200 w1`652047 -1636 (\373) 0 0 32 0 0 A1`65/AF 200 200 w1`652079 -1636 (.) 0 0 21 0 0 A1`65/AF 202 200 w1`65350 -1528 (The algorithm works by finding ) 14.728714 1.877975 1228 5 30 A1`65/AC 202 200 w1`651578 -1528 (x) 0 1.877411 39 0 0 A1`65/AF 202 200 w1`651617 -1528 (, ) 14.728714 1.878036 60 1 1 A1`65/AC 202 200 w1`651678 -1528 (y) 0 1.877411 39 0 0 A1`65/AF 202 200 w1`651717 -1528 ( such that) 14.728714 1.87796 383 2 9 A1`65/AC 200 200 w1`65350 -1420 (x) 0 0 37 0 0 A1`65/AF 130 130 w1`65387 -1445 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`65414 -1420 ( ) 7.869186 0 29 1 0 A1`65/AG 200 200 w1`65443 -1420 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65488 -1420 ( ) 7.869186 0 29 1 0 A1`65/AC 200 200 w1`65517 -1420 (y) 0 0 37 0 0 A1`65/AF 130 130 w1`65554 -1445 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`65581 -1420 ( ) 7.869186 0 29 1 0 A1`65/AG 200 200 w1`65610 -1420 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65656 -1420 ( ) 7.869186 0 29 1 0 A1`65/AC 200 200 w1`65685 -1420 (N) 0 0 65 0 0 A1`65/AF 200 200 w1`65749 -1420 (. The work load cited assumes that the) 7.869003 0 1351 7 37 A1`65350 -1311 (attacker will start with an initial guess for ) -0.155777 0 1415 8 45 A1`65/AC 200 200 w1`651765 -1311 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`651802 -1311 ( at ) -0.155777 0 106 2 3 A1`65/AG 200 200 w1`651907 -1311 (\353) 0 0 32 0 0 A1`651940 -1311 (\326) 0 -54.164841 -8 0 0 A1`65/AG 264 220 w1`651931 -1303 (`) 0 -5.500183 50 0 0 A1`65/AC 200 200 w1`651981 -1311 (N) 0 1.666977 67 0 0 A1`65/AG 200 200 w1`652047 -1311 (\373) 0 0 32 0 0 A1`65/AF 200 200 w1`652079 -1311 (.) 0 0 21 0 0 A1`65350 -1203 (However) 5.223465 0 305 0 6 A1`65651 -1203 (, ther) 5.223465 0 186 1 5 A1`65837 -1203 (e is no r) 5.223465 0 282 3 8 A1`651118 -1203 (eason why the attacker can\325) 5.223465 0 955 4 26 A1`652072 -1203 (t) 5.223465 0 28 0 0 A1`65350 -1095 (choose some other starting guess for ) 6.54422 0 1265 6 36 A1`65/AC 200 200 w1`651615 -1095 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`651652 -1095 (, \(say\) ) 6.544357 0 242 2 7 A1`65/AC 200 200 w1`651895 -1095 (z) 0 0 32 0 0 A1`65/AF 200 200 w1`651927 -1095 (, and) 6.544373 0 173 1 4 A1`65/AF 198 200 w1`65350 -986 (the work then becomes \() -2.007431 0 821 4 22 A1`65/AC 198 200 w1`651171 -986 (p) 0 0 37 0 0 A1`65/AF 198 200 w1`651208 -986 ( ) -2.007339 0 19 1 0 A1`65/AG 198 200 w1`651227 -986 (+) 0 0 45 0 0 A1`65/AF 198 200 w1`651272 -986 ( ) -2.007339 0 19 1 0 A1`65/AC 198 200 w1`651290 -986 (q) 0 0 37 0 0 A1`65/AF 198 200 w1`651327 -986 (\)) 0 0 32 0 0 A1`65/AG 198 200 w1`651359 -986 (/) 0 0 23 0 0 A1`65/AF 198 200 w1`651382 -986 (2 ) -2.007339 0 60 1 1 A1`65/AG 198 200 w1`651442 -986 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`651487 -986 ( ) -2.007339 0 19 1 0 A1`65/AC 198 200 w1`651506 -986 (z) 0 0 32 0 0 A1`65/AF 198 200 w1`651538 -986 (.  Requiring ) -2.007462 0 406 3 12 A1`65/AC 198 200 w1`651944 -986 (p) 0 0 37 0 0 A1`65/AF 198 200 w1`651981 -986 ( ) -2.007339 0 19 1 0 A1`65/AG 198 200 w1`652000 -986 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`652045 -986 ( ) -2.007339 0 19 1 0 A1`65/AC 198 200 w1`652063 -986 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65350 -878 (to be large can not guard against choices for ) 1.957123 0 1514 9 45 A1`65/AC 200 200 w1`651864 -878 (z) 0 0 32 0 0 A1`65/AF 200 200 w1`651897 -878 ( other) 1.95726 0 203 1 5 A1`65350 -770 (than ) 9.596832 0 188 1 4 A1`65/AG 200 200 w1`65538 -770 (\353) 0 0 32 0 0 A1`65570 -770 (\326) 0 -56.664673 -11 0 0 A1`65/AG 264 220 w1`65559 -761 (`) 0 -5.500183 50 0 0 A1`65/AC 200 200 w1`65608 -770 (N) 0 1.666977 67 0 0 A1`65/AG 200 200 w1`65675 -770 (\373) 0 0 32 0 0 A1`65/AF 200 200 w1`65707 -770 (, and hence adds no real security to the) 9.596512 0 1393 8 39 A1`65350 -661 (key) 9.259674 0 116 0 2 A1`65460 -661 (. W) 9.259674 0 134 1 2 A1`65589 -661 (e view this r) 9.259674 0 437 3 12 A1`651027 -661 (equir) 9.259674 0 171 0 4 A1`651197 -661 (ement as ir) 9.259674 0 389 2 10 A1`651586 -661 (r) 9.259674 0 28 0 0 A1`651614 -661 (elevant. Simi-) 9.259674 0 486 1 13 A1`65350 -553 (larly) 5.938324 0 148 0 4 A1`65492 -553 (, the r) 5.938324 0 213 2 6 A1`65705 -553 (equir) 5.938324 0 171 0 4 A1`65876 -553 (ement that ) 5.938324 0 405 2 10 A1`65/AC 200 200 w1`651281 -553 (p) 0 0 37 0 0 A1`65/AG 200 200 w1`651318 -553 (/) 0 0 23 0 0 A1`65/AC 200 200 w1`651342 -553 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`651378 -553 ( shall not be close to) 5.93837 0 722 5 21 A1`65350 -445 (the ratio of small integers is also ir) 6.790558 0 1197 7 37 A1`651547 -445 (r) 6.790558 0 28 0 0 A1`651575 -445 (elevant. W) 6.790558 0 382 1 9 A1`651952 -445 (e do) 6.790558 0 148 1 3 A1`65350 -336 (note however) -2.708374 -0.330261 454 1 11 A1`65799 -336 (, that this last r) -2.708374 -0.330261 495 4 17 A1`651294 -336 (equir) -2.708374 -0.330261 170 0 4 A1`651463 -336 (ement derives fr) -2.708374 -0.330261 530 2 15 A1`651994 -336 (om) -2.708374 -0.330261 106 0 1 A1`65350 -228 (an attempt to guard against the Lehman algorithm.) 4.095062 0 1750 7 48 A1`65350 -120 (If ) -0.98027 0 71 1 2 A1`65/AC 200 200 w1`65421 -120 (r) 0 0 28 0 0 A1`65/AF 200 200 w1`65448 -120 ( and ) -0.98027 0 165 2 4 A1`65/AC 200 200 w1`65613 -120 (s) 0 0 28 0 0 A1`65/AF 200 200 w1`65641 -120 ( are small \(which in this context means less) -0.98024 0 1459 8 43 A1`65350 -11 (than 100\), then ) 2.728928 0 564 3 15 A1`65/AC 200 200 w1`65914 -11 (ps) 0 0 65 0 1 A1`65/AF 200 200 w1`65978 -11 ( ) 2.72876 0 24 1 0 A1`65/AG 200 200 w1`651002 -11 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`651047 -11 ( ) 2.72876 0 24 1 0 A1`65/AC 200 200 w1`651071 -11 (qr) 0 0 65 0 1 A1`65/AF 200 200 w1`651136 -11 ( needs to be less than 2) 2.728928 0 794 6 23 A1`65/AF 130 130 w1`651930 -36 (64) 0 0 54 0 1 A1`65/AF 200 200 w1`651984 -11 ( for) 2.72876 0 116 1 3 A1`65350 97 (the attack to be feasible, and the chance of this hap-) -1.525848 0 1750 10 53 A1`65350 205 (pening is negligible.) -0.023605 0 673 2 20 A1`65/AC 200 200 w1`65450 422 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`65487 422 ( ) 0.024002 0 21 1 0 A1`65/AG 200 200 w1`65508 422 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65554 422 ( ) 0.024002 0 21 1 0 A1`65/AC 200 200 w1`65575 422 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`65611 422 ( shall have a lar) 0.024002 0 527 4 16 A1`651139 422 (ge prime factor) 0.024002 0 504 2 14 A1`651639 422 (.) 0.024002 0 21 0 0 A1`65350 639 (This condition would prevent an attack that runs in) -0.508621 0 1750 8 50 A1`65350 747 (time ) -2.179459 0 171 1 4 A1`65/AC 200 200 w1`65521 747 (N) 0 0 65 0 0 A1`65/AF 130 130 w1`65586 707 (1) 0 -1.624893 25 0 0 A1`65/AG 130 130 w1`65612 712 (/) 0 0 15 0 0 A1`65/AF 130 130 w1`65627 727 (3) 0 0 27 0 0 A1`65/AF 200 200 w1`65654 747 (. In practice this is not a serious thr) -2.179306 0 1169 8 38 A1`651823 747 (eat. Fur) -2.179306 0 252 1 7 A1`652072 747 (-) -2.179306 0 28 0 0 A1`65350 855 (thermore, the condition seems to be impossible to) 10.029861 0 1750 7 48 A1`65350 964 (satisfy) 9.595871 0 203 0 6 A1`65547 964 (, shor) 9.595871 0 195 1 5 A1`65742 964 (t of actually factoring ) 9.595871 0 779 4 23 A1`65/AC 200 200 w1`651521 964 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`651557 964 ( ) 9.596146 0 30 1 0 A1`65/AG 200 200 w1`651588 964 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`651634 964 ( ) 9.596146 0 30 1 0 A1`65/AC 200 200 w1`651664 964 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`651701 964 ( or r) 9.596146 0 158 2 4 A1`651859 964 (unning) 9.596146 0 241 0 5 A1`65350 1072 (sufficient trials of ECM to be satisfied that no small) 2.405182 0 1750 9 53 A1`65350 1180 (factor exists.) -0.085449 0 421 1 13 A1`65350 1397 (There is also a suggestion that some forms of the) 13.730316 0 1750 9 48 A1`65350 1505 (mo) -1.986435 0 107 0 1 A1`65457 1505 (dulus, such as ) -1.986435 0 471 3 14 A1`65/AC 200 200 w1`65928 1505 (N) 0 0 65 0 0 A1`65/AF 200 200 w1`65993 1505 ( ) -1.986542 0 19 1 0 A1`65/AG 200 200 w1`651012 1505 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`651057 1505 ( 2) -1.986542 0 60 1 1 A1`65/AF 130 130 w1`651118 1480 (64) 0 0 54 0 1 A1`65/AC 130 130 w1`651172 1480 (x) 0 0 24 0 0 A1`65/AF 200 200 w1`651196 1505 ( ) -1.986542 0 19 1 0 A1`65/AG 200 200 w1`651215 1505 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`651261 1505 ( ) -1.986542 0 19 1 0 A1`65/AC 200 200 w1`651280 1505 (c) 0 0 32 0 0 A1`65/AF 200 200 w1`651312 1505 ( will simplify the r) -1.986465 0 603 4 19 A1`651915 1505 (educ-) -1.986465 0 185 0 4 A1`65350 1614 (tion and require less storage. This seems to have been) -2.708374 -0.481689 1750 9 53 A1`65350 1722 (put in place before the discovery of the Number Field) -2.708374 -0.450653 1750 9 52 A1`65350 1830 (Sieve. Mo) -2.708374 -0.597672 335 1 8 A1`65685 1830 (duli of this for) -2.708374 -0.597672 457 3 15 A1`651142 1830 (m ar) -2.708374 -0.597672 145 1 3 A1`651287 1830 (e r) -2.708374 -0.597672 81 1 2 A1`651368 1830 (eadily susceptible now) -2.708374 -0.597672 732 2 21 A1`65350 1939 (to the special version of NFS and are quite insecure.) -0.420456 0 1750 9 52 A1`65350 2047 (They should not be used.) -0.025635 0 845 4 23 A1`65350 2264 (Given that some applications will have to conform) 5.039627 0 1750 7 48 A1`65350 2372 (to these conditions, we will now describe a metho) 3.730682 0 1707 8 48 A1`652058 2372 (d) 3.730682 0 42 0 0 A1`65350 2480 (of generating such RSA mo) 0.025833 0 930 4 24 A1`651281 2480 (duli.) 0.025833 0 150 0 4 A1`65/AB 196 200 w1`65350 2697 (Randomly generating str) 0.050385 0 1063 2 22 A1`651411 2697 (ong primes) 0.050385 0 481 1 9 A1`65/AF 200 200 w1`65350 2805 (W) -1.191605 0 83 0 0 A1`65429 2805 (e shall randomly generate two str) -1.191605 0 1107 5 32 A1`651535 2805 (ong primes, each) -1.191605 0 565 2 15 A1`65O1`65N1`65F M1`65/AF 200 200 w1`652300 -2503 (of size 512 ) -0.344162 0 367 3 11 A1`65/AG 200 200 w1`652667 -2503 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`652712 -2503 ( 128) -0.344147 0 145 1 3 A1`65/AC 200 200 w1`652858 -2503 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`652895 -2503 ( bits in such a way that their pr) -0.344162 0 1043 8 32 A1`653938 -2503 (o) -0.344162 0 42 0 0 A1`653980 -2503 (d-) -0.344162 0 70 0 1 A1`65/AF 198 200 w1`652300 -2395 (uct is 1024 ) -2.043167 0 376 3 11 A1`65/AG 198 200 w1`652676 -2395 (+) 0 0 45 0 0 A1`65/AF 198 200 w1`652722 -2395 ( 256) -2.043274 0 142 1 3 A1`65/AC 198 200 w1`652864 -2395 (x) 0 0 37 0 0 A1`65/AF 198 200 w1`652901 -2395 ( bits. The procedure for prime gen) -2.043167 0 1122 6 33 A1`65/AF 200 200 w1`654022 -2395 (-) 0 0 28 0 0 A1`652300 -2286 (eration that is outlined below would therefore be ex-) -2.708374 -0.013687 1750 8 52 A1`652300 -2178 (ecuted twice; once for ) 3.788101 0 776 4 22 A1`65/AC 200 200 w1`653076 -2178 (p ) 3.788391 0 62 1 1 A1`65/AF 200 200 w1`653138 -2178 (and once for ) 3.788193 0 453 3 12 A1`65/AC 200 200 w1`653591 -2178 (q) 0 0 37 0 0 A1`65/AF 200 200 w1`653628 -2178 (. The proce-) 3.788101 0 422 2 11 A1`652300 -2070 (dur) 1.808395 0 111 0 2 A1`652411 -2070 (e described her) 1.808395 0 508 2 14 A1`652919 -2070 (e though shall r) 1.808395 0 531 3 15 A1`653449 -2070 (efer to ) 1.808395 0 240 2 7 A1`65/AC 200 200 w1`653689 -2070 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`653726 -2070 ( only) 1.808456 0 171 1 4 A1`653891 -2070 (. W) 1.808456 0 127 1 2 A1`654013 -2070 (e) 1.808456 0 37 0 0 A1`652300 -1961 (star) 0.192139 0 120 0 3 A1`652420 -1961 (t by randomly generating a number ) 0.192139 0 1204 6 33 A1`65/AC 200 200 w1`653624 -1961 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`653680 -1961 ( of the cor) 0.192139 0 345 3 10 A1`654022 -1961 (-) 0.192139 0 28 0 0 A1`652300 -1853 (rect size. Then, we randomly generate 101-bit fac-) 9.067856 0 1750 7 49 A1`652300 -1745 (tors ) 2.342697 0 148 1 4 A1`65/AC 200 200 w1`652448 -1745 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`652485 -1728 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`652512 -1745 ( and ) 2.342697 0 171 2 4 A1`65/AC 200 200 w1`652683 -1745 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`652720 -1728 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`652747 -1745 ( for ) 2.342697 0 139 2 4 A1`65/AC 200 200 w1`652886 -1745 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`652923 -1745 ( ) 2.342697 0 23 1 0 A1`65/AG 200 200 w1`652947 -1745 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`652992 -1745 ( 1. Using the Chinese Remain-) 2.342621 0 1057 5 28 A1`652300 -1636 (der Theorem with ) 2.534195 0 640 3 16 A1`65/AC 200 200 w1`652940 -1636 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`652976 -1620 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`653003 -1636 ( and ) 2.534134 0 172 2 4 A1`65/AC 200 200 w1`653175 -1636 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`653212 -1620 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`653239 -1636 ( we then construct a se-) 2.534164 0 811 5 23 A1`652300 -1528 (quence of candidates, starting at our random point) 7.396698 0 1750 7 49 A1`65/AC 200 200 w1`652300 -1420 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`652355 -1420 (, for ) 3.637634 0 162 2 5 A1`65/AC 200 200 w1`652518 -1420 (p) 0 0 37 0 0 A1`65/AF 200 200 w1`652555 -1420 ( such that ) 3.637955 0 365 3 10 A1`65/AC 200 200 w1`652920 -1420 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`652957 -1403 (1 ) 2.364273 0 43 1 1 A1`65/AG 200 200 w1`653000 -1420 (|) 0 0 17 0 0 A1`65/AC 200 200 w1`653016 -1420 ( p ) 3.637634 0 86 2 2 A1`65/AG 200 200 w1`653102 -1420 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`653148 -1420 ( 1 and ) 3.637955 0 240 3 6 A1`65/AC 200 200 w1`653388 -1420 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`653425 -1403 (2 ) 2.364273 0 43 1 1 A1`65/AG 200 200 w1`653468 -1420 (|) 0 0 17 0 0 A1`65/AC 200 200 w1`653485 -1420 ( p ) 3.637634 0 86 2 2 A1`65/AG 200 200 w1`653571 -1420 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`653617 -1420 ( 1 . W) 3.637878 0 219 3 5 A1`653831 -1420 (e then) 3.637878 0 219 1 5 A1`652300 -1311 (remove all candidates divisible by small primes with) 0.441757 0 1750 7 51 A1`652300 -1203 (a sieve. Finally) -2.708374 -0.067062 491 2 15 A1`652785 -1203 (, we test the r) -2.708374 -0.067062 444 4 14 A1`653229 -1203 (emaining candidates fol-) -2.708374 -0.067062 821 2 23 A1`652300 -1095 (lowing the sieve for primality) 0.012619 0 986 4 29 A1`653280 -1095 (.) 0.012619 0 21 0 0 A1`65/AA 210 210 w1`652300 -878 (Selection of starting point) -0.022583 0 947 3 26 A1`65/AF 200 200 w1`652300 -770 (Randomly select an integer ) -0.061844 0 939 4 26 A1`65/AC 200 200 w1`653239 -770 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`653295 -770 ( in the range) -0.061844 0 428 3 12 A1`65/AG 200 200 w1`652704 -553 ([) 0 0 28 0 0 A1`652732 -553 (\326) 0 -54.164841 -8 0 0 A1`65/AG 264 220 w1`652723 -545 (`) 0 -5.500183 50 0 0 A1`65/AC 200 200 w1`652773 -553 (2 ) 0.066803 0 62 1 1 A1`65/AF 200 200 w1`652835 -553 ( 2) 0.066803 0 62 1 1 A1`65/AF 130 130 w1`652898 -578 (511 ) 0.043411 0 95 1 3 A1`65/AG 130 130 w1`652993 -578 (+) 0 0 30 0 0 A1`65/AF 130 130 w1`653022 -578 ( 128) 0.043411 0 95 1 3 A1`65/AC 130 130 w1`653117 -578 (x) 0 0 24 0 0 A1`65/AF 200 200 w1`653142 -553 (,  2) 0.066803 0 104 2 3 A1`65/AF 130 130 w1`653246 -578 (512 ) 0.043411 0 95 1 3 A1`65/AG 130 130 w1`653341 -578 (+) 0 0 30 0 0 A1`65/AF 130 130 w1`653370 -578 ( 128) 0.043411 0 95 1 3 A1`65/AC 130 130 w1`653465 -578 (x) 0 0 24 0 0 A1`65/AC 200 200 w1`653489 -553 ( ) 0.066803 0 21 1 0 A1`65/AG 200 200 w1`653510 -553 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`653556 -553 ( 1) 0.066803 0 62 1 1 A1`65/AG 200 200 w1`653618 -553 (]) 0 0 28 0 0 A1`65/AF 200 200 w1`652300 -336 (Our prime ) 14.583359 1.095963 410 2 9 A1`65/AC 200 200 w1`652710 -336 (p) 0 1.095718 38 0 0 A1`65/AF 200 200 w1`652748 -336 ( will be selected as the first integer) 14.582794 1.095978 1302 7 37 A1`652300 -228 (greater than ) 8.811737 0 448 2 12 A1`65/AC 200 200 w1`652748 -228 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`652803 -228 ( which satisfies the strong prime re-) 8.811737 0 1247 6 36 A1`652300 -120 (quir) 12.385117 0 134 0 3 A1`652434 -120 (ements. The pr) 12.385117 0 536 2 13 A1`652970 -120 (o) 12.385117 0 42 0 0 A1`653013 -120 (duct, ) 12.385117 0 202 1 5 A1`65/AC 200 200 w1`653215 -120 (N) 0 0 65 0 0 A1`65/AF 200 200 w1`653280 -120 ( ) 12.385696 0 33 1 0 A1`65/AG 200 200 w1`653313 -120 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`653359 -120 ( ) 12.385696 0 33 1 0 A1`65/AC 200 200 w1`653392 -120 (pq) 0 0 74 0 1 A1`65/AF 200 200 w1`653466 -120 (, of two of these) 12.385269 0 584 4 16 A1`652300 -11 (randomly chosen primes will pr) 14.582916 1.033142 1145 4 29 A1`653444 -11 (o) 14.582916 1.033142 42 0 0 A1`653488 -11 (duce the public) 14.582916 1.033142 562 2 14 A1`652300 97 (mo) 0.054214 0 107 0 1 A1`652407 97 (dulus which will have exactly 1024 ) 0.054214 0 1204 6 34 A1`65/AG 200 200 w1`653611 97 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`653657 97 ( 256) 0.054214 0 146 1 3 A1`65/AC 200 200 w1`653802 97 (x) 0 0 37 0 0 A1`65/AF 200 200 w1`653839 97 ( bits.) 0.054214 0 162 1 5 A1`65/AA 210 210 w1`652300 314 (Selection of large prime factors of ) 0.004135 0 1258 6 35 A1`65/AE 210 210 w1`653558 314 (p) 0 0 44 0 0 A1`65/AA 210 210 w1`653602 314 ( ) 0.004135 0 24 1 0 A1`65/AG 210 210 w1`653627 314 (\261) 0 0 48 0 0 A1`65/AA 210 210 w1`653674 314 ( 1) 0.004135 0 73 1 1 A1`65/AF 200 200 w1`652300 422 (Start by randomly generating two 101-bit numbers,) 4.380859 0 1750 6 48 A1`65/AC 200 200 w1`652300 530 (y) 0 0 37 0 0 A1`65/AF 130 130 w1`652337 547 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`652364 530 ( and ) 1.809875 0 170 2 4 A1`65/AC 200 200 w1`652534 530 (y) 0 0 37 0 0 A1`65/AF 130 130 w1`652571 547 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`652598 530 (. Using a sieve procedure we shall generate) 1.809799 0 1452 7 42 A1`652300 639 (a sequence of candidates for ) 13.381393 0 1027 5 28 A1`65/AC 200 200 w1`653327 639 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`653364 655 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`653391 639 ( and ) 13.38176 0 193 2 4 A1`65/AC 200 200 w1`653584 639 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`653622 655 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`653649 639 ( by starting) 13.38176 0 402 2 11 A1`652300 747 (respectively at ) -2.70845 -0.366516 493 2 15 A1`65/AC 200 200 w1`652793 747 (y) 0 -0.366653 37 0 0 A1`65/AF 130 130 w1`652830 764 (1) 0 -0.238174 27 0 0 A1`65/AF 200 200 w1`652856 747 ( and ) -2.70845 -0.366531 160 2 4 A1`65/AC 200 200 w1`653016 747 (y) 0 -0.366653 37 0 0 A1`65/AF 130 130 w1`653052 764 (2) 0 -0.238174 27 0 0 A1`65/AF 200 200 w1`653079 747 ( and sieving out small primes.) -2.708374 -0.366516 971 5 29 A1`652300 855 (This will remove a substantial number of composite) 1.74382 0 1750 7 49 A1`652300 964 (numbers that need not be tested for primality) 9.264404 0 1590 7 44 A1`653883 964 (. W) 9.264404 0 134 1 2 A1`654013 964 (e) 9.264404 0 37 0 0 A1`652300 1072 (then test what sur) -2.708374 -0.024185 595 3 17 A1`652895 1072 (vives the sieve for primality) -2.708374 -0.024185 918 4 28 A1`653807 1072 (. These) -2.708374 -0.024185 242 1 6 A1`652300 1180 (shall be ) 0.01091 0 277 2 8 A1`65/AC 200 200 w1`652577 1180 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`652615 1197 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`652642 1180 ( and ) 0.01091 0 167 2 4 A1`65/AC 200 200 w1`652808 1180 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`652845 1197 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`652872 1180 (.) 0 0 21 0 0 A1`652300 1397 (Starting at each of ) -2.708344 -0.388519 625 4 19 A1`65/AC 200 200 w1`652925 1397 (y) 0 -0.38855 37 0 0 A1`65/AF 130 130 w1`652961 1414 (1) 0 -0.25238 27 0 0 A1`65/AF 200 200 w1`652988 1397 ( and ) -2.70845 -0.38855 159 2 4 A1`65/AC 200 200 w1`653147 1397 (y) 0 -0.38855 37 0 0 A1`65/AF 130 130 w1`653184 1414 (2) 0 -0.25238 27 0 0 A1`65/AF 200 200 w1`653211 1397 ( sieve out all small primes) -2.708359 -0.388535 839 5 26 A1`65/AF 204 200 w1`652300 1505 (up to 10) 13.988922 0 311 2 7 A1`65/AF 133 130 w1`652611 1480 (5) 0 0 27 0 0 A1`65/AF 204 200 w1`652639 1505 ( over the range ) 13.988281 0 594 4 15 A1`65/AG 204 200 w1`653233 1505 ([) 0 0 28 0 0 A1`65/AC 204 200 w1`653261 1505 (y) 0 0 38 0 0 A1`65/AF 133 130 w1`653299 1522 (1) 0 0 27 0 0 A1`65/AF 204 200 w1`653327 1505 (, ) 13.987656 0 57 1 1 A1`65/AC 204 200 w1`653383 1505 (y) 0 0 38 0 0 A1`65/AF 133 130 w1`653421 1522 (1) 0 0 27 0 0 A1`65/AF 204 200 w1`653448 1505 ( ) 13.987656 0 35 1 0 A1`65/AG 204 200 w1`653484 1505 (+) 0 0 47 0 0 A1`65/AF 204 200 w1`653530 1505 ( 5 ) 13.988922 0 113 2 2 A1`65/AG 204 200 w1`653643 1505 (\264) 0 0 47 0 0 A1`65/AF 204 200 w1`653690 1505 ( 10) 13.987656 0 120 1 2 A1`65/AF 133 130 w1`653810 1480 (5) 0 0 27 0 0 A1`65/AG 204 200 w1`653838 1505 (]) 0 0 28 0 0 A1`65/AF 204 200 w1`653866 1505 (, and) 13.987656 0 184 1 4 A1`65/AG 200 200 w1`652300 1614 ([) 0 0 28 0 0 A1`65/AC 200 200 w1`652328 1614 (y) 0 0 37 0 0 A1`65/AF 130 130 w1`652365 1630 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`652392 1614 (, ) -0.026703 0 42 1 1 A1`65/AC 200 200 w1`652433 1614 (y) 0 0 37 0 0 A1`65/AF 130 130 w1`652470 1630 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`652497 1614 ( ) -0.026703 0 21 1 0 A1`65/AG 200 200 w1`652518 1614 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`652564 1614 ( 5 ) -0.026703 0 83 2 2 A1`65/AG 200 200 w1`652647 1614 (\264) 0 0 46 0 0 A1`65/AF 200 200 w1`652693 1614 ( 10) -0.026703 0 104 1 2 A1`65/AF 130 130 w1`652797 1589 (5) 0 0 27 0 0 A1`65/AG 200 200 w1`652824 1614 (]) 0 0 28 0 0 A1`65/AF 200 200 w1`652852 1614 (. The limit, 10) -0.026703 0 488 3 14 A1`65/AF 130 130 w1`653340 1589 (5) 0 0 27 0 0 A1`65/AF 200 200 w1`653367 1614 (, for the primes with) -0.026703 0 682 4 20 A1`652300 1722 (which we sieve is somewhat arbitrar) 1.736923 0 1219 5 34 A1`653519 1722 (y) 1.736923 0 37 0 0 A1`653549 1722 (, and is chosen) 1.736923 0 500 3 14 A1`652300 1830 (for r) -2.708374 -0.075165 138 1 4 A1`652438 1830 (easons of per) -2.708374 -0.075165 424 2 12 A1`652862 1830 (for) -2.708374 -0.075165 92 0 2 A1`652954 1830 (mance, rather than security) -2.708374 -0.075165 915 3 26 A1`653863 1830 (. Any) -2.708374 -0.075165 187 1 4 A1`652300 1939 (number between 10) -2.708435 -0.241257 657 2 16 A1`65/AF 130 130 w1`652957 1914 (3) 0 -0.156845 27 0 0 A1`65/AF 200 200 w1`652984 1939 ( and 10) -2.708435 -0.241257 243 2 6 A1`65/AF 130 130 w1`653227 1914 (6) 0 -0.156845 27 0 0 A1`65/AF 200 200 w1`653254 1939 ( is acceptable. Similarly) -2.708374 -0.241257 782 3 24 A1`654029 1939 (,) -2.708374 -0.241257 21 0 0 A1`652300 2047 (the length of the sieve interval, 5 ) -2.12027 0 1128 7 35 A1`65/AG 200 200 w1`653428 2047 (\264) 0 0 46 0 0 A1`65/AF 200 200 w1`653474 2047 ( 10) -2.120407 0 102 1 2 A1`65/AF 130 130 w1`653576 2022 (5) 0 0 27 0 0 A1`65/AF 200 200 w1`653603 2047 (, is somewhat) -2.120255 0 447 2 12 A1`652300 2155 (arbitrar) 12.241608 0 250 0 7 A1`652550 2155 (y) 12.241608 0 37 0 0 A1`652580 2155 (. One can choose any numbers which ar) 12.241608 0 1432 7 36 A1`654013 2155 (e) 12.241608 0 37 0 0 A1`652300 2264 (convenient for the particular implementation of this) -2.708374 -0.030411 1750 6 51 A1`652300 2372 (procedure as dictated by resources such as the) 14.582916 2.644989 1750 7 45 A1`652300 2480 (amount of computer memory available. The length) 5.123428 0 1750 6 46 A1`652300 2589 (of the sieve interval should be several times the larg-) -2.197205 0 1750 9 54 A1`652300 2697 (est prime that is sieved. The numbers selected are a) 2.696777 0 1750 9 51 A1`652300 2805 (goo) -1.799362 0 120 0 2 A1`652421 2805 (d balance between the cost \(in time\) of the sieve) -1.799362 0 1629 9 48 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 -335 (There is also a) -0.03978 0 508 3 14 A1`654350 -227 (suggestion that) -0.043304 0 541 1 14 A1`654350 -119 (some for) -0.052338 0 311 1 7 A1`654662 -119 (ms of) -0.052338 0 195 1 4 A1`654350 -10 (the modulus) 0.079987 0 433 1 10 A1`654350 98 ([\311] will) 0.046738 0 265 1 7 A1`654350 206 (simplify the) 0.087082 0 411 1 11 A1`654350 315 (reduction and) 0.01033 0 487 1 12 A1`654350 423 (require less) 0.082596 0 407 1 11 A1`654350 531 (storage. [\311]) -0.048035 0 427 1 11 A1`654350 640 (Moduli of this) -0.066452 0 482 2 13 A1`654350 748 (for) -0.149963 0 101 0 2 A1`654452 748 (m ar) -0.149963 0 166 1 3 A1`654618 748 (e) -0.149963 0 41 0 0 A1`654350 856 (readily) 0 0.004425 248 0 6 A1`654350 965 (susceptible) 0 0.004059 385 0 10 A1`654350 1073 (now to the) 0.100281 0 381 2 9 A1`654350 1181 (special version) 0.081757 0 521 1 14 A1`654350 1290 (of NFS and are) 0.052948 0 531 3 13 A1`654350 1398 (quite insecure.) -0.182343 0 510 1 14 A1`654350 1506 (They should) 0.007401 0 422 1 10 A1`654350 1615 (not be used.) -0.063126 0 435 2 11 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 12 12%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`6572 -73 237 562 -237 -489 1.805556 -1.808219 -4265 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`65-4239 3053 (12) 0 0 74 0 1 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 -4194 2817 -4194 -2567 F jbd^65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4900 3053 (CR) 0 16.086365 105 0 1 A1`65-4797 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65-4050 3053 (S P R I N G   1 9 9 7  ) 7.445572 1.841431 746 13 22 A1`65T g`650 0 0 (Black) 1 _rgb d`65-3304 3053 ( \321   T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S) 7.445709 1.841431 2954 52 91 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb b`65F yy`654 0 1000 0 Qy65-4032.167 602 @m65-4032.167 2802.167 -2292 2802.167 -2292 602  3 yy^65@cp65@fp65r2`65 yyq65null 0 _paper b`65F yy`654 0 1000 0 Qy65-4052.167 602 @m65-4052.167 2792.167 -2302 2792.167 -2302 602  3 yy^65@cp65@fp65r2`65 yyq65N1`65F M1`65O1`65N1`65F M1`65/AF 200 200 w1`65-4050 -2503 (procedure against the cost of testing candidates for) 7.111877 0 1750 7 51 A1`65-4050 -2395 (primality) 0.752747 0 305 0 8 A1`65-3751 -2395 (. See the box below for a full description of) 0.752747 0 1451 9 44 A1`65-4050 -2286 (a sieve procedure.) 0.032959 0 599 2 17 A1`65/AF 198 200 w1`65-4050 -2070 (The sieve will \324strike out\325 many of the numbers in) 10.919586 0 1750 9 49 A1`65-4050 -1961 (the sieve interval. The numbers that are removed are) -2.557053 0 1750 8 51 A1`65-4050 -1853 (divisible by small primes and hence can not be can-) 3.294968 0 1750 9 50 A1`65-4050 -1745 (didates for primality testing. After sieving,  test the) 6.335342 0 1750 8 54 A1`65-4050 -1636 (r) -2.425827 0 27 0 0 A1`65-4022 -1636 (emaining numbers in the sieve inter) -2.425827 0 1190 5 34 A1`65-2832 -1636 (val sequentially) -2.425827 0 517 1 15 A1`65-2321 -1636 (,) -2.425827 0 21 0 0 A1`65-4050 -1528 (starting at ) 8.682816 0 375 2 11 A1`65/AC 198 200 w1`65-3675 -1528 (y) 0 0 37 0 0 A1`65/AF 129 130 w1`65-3639 -1511 (1) 0 0 27 0 0 A1`65/AF 198 200 w1`65-3612 -1528 (, ) 8.682816 0 50 1 1 A1`65/AC 198 200 w1`65-3562 -1528 (y) 0 0 37 0 0 A1`65/AF 129 130 w1`65-3525 -1511 (2) 0 0 27 0 0 A1`65/AF 198 200 w1`65-3499 -1528 ( to see if they are prime. Apply 25) 8.682632 0 1199 8 34 A1`65-4050 -1420 (iterations of Miller) -2.681305 -0.617569 610 2 19 A1`65-3443 -1420 (-Rabin to each candidate. This will) -2.681305 -0.617569 1143 5 34 A1`65-4050 -1311 (results in a chance of error of less than 2) -2.489258 0 1317 9 42 A1`65/AG 129 130 w1`65-2732 -1336 (-) 0 0 30 0 0 A1`65/AF 129 130 w1`65-2703 -1336 (100) 0 0 80 0 2 A1`65/AF 198 200 w1`65-2622 -1311 (. One can) -2.489365 0 322 2 8 A1`65-4050 -1203 (also rigorously prove they are prime \(if desired\) by) 10.330826 0 1750 8 51 A1`65-4050 -1095 (applying the Selfridge improvements to the theorem) 0.7565 0 1750 6 49 A1`65-4050 -986 (of Proth, Pocklington, & Lehmer [2]. This procedure) -1.368607 0 1750 7 50 A1`65-4050 -878 (will yield two primes ) 2.38382 0 720 4 21 A1`65/AC 198 200 w1`65-3330 -878 (p) 0 0 37 0 0 A1`65/AF 129 130 w1`65-3294 -861 (1) 0 0 27 0 0 A1`65/AF 198 200 w1`65-3267 -878 ( and ) 2.383926 0 170 2 4 A1`65/AC 198 200 w1`65-3097 -878 (p) 0 0 37 0 0 A1`65/AF 129 130 w1`65-3060 -861 (2) 0 0 27 0 0 A1`65/AF 198 200 w1`65-3034 -878 ( which will be used as) 2.383835 0 734 5 21 A1`65-4050 -770 (the lar) -1.862518 0 216 1 6 A1`65-3834 -770 (ge prime factors of ) -1.862518 0 625 4 19 A1`65/AC 198 200 w1`65-3210 -770 (p ) -1.862381 0 55 1 1 A1`65/AG 198 200 w1`65-3154 -770 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`65-3109 -770 ( 1 and ) -1.862503 0 221 3 6 A1`65/AC 198 200 w1`65-2888 -770 (p ) -1.862381 0 55 1 1 A1`65/AG 198 200 w1`65-2832 -770 (+) 0 0 45 0 0 A1`65/AF 198 200 w1`65-2787 -770 ( 1 r) -1.862564 0 106 2 3 A1`65-2681 -770 (espectively) -1.862564 0 366 0 10 A1`65-2321 -770 (.) -1.862564 0 21 0 0 A1`65/AF 200 200 w1`65-4050 -553 (These primes correspond to the ) 9.710068 0 1129 5 30 A1`65/AC 200 200 w1`65-2921 -553 (B) 0 0 51 0 0 A1`65/AF 200 200 w1`65-2870 -553 (1 limit discussed) 9.710388 0 570 2 16 A1`65-4050 -445 (in [10]. It is well beyond computer range to apply) 10.877548 0 1750 9 49 A1`65-4050 -336 (the ) -2.369965 0 130 1 3 A1`65/AC 200 200 w1`65-3920 -336 (P) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3874 -336 ( ) -2.369965 0 18 1 0 A1`65/AG 200 200 w1`65-3856 -336 (\261) 0 0 46 0 0 A1`65/AF 200 200 w1`65-3810 -336 ( 1 algorithms up to 2) -2.369873 0 685 5 20 A1`65/AF 130 130 w1`65-3125 -361 (100 ) -1.540176 0 93 1 3 A1`65/AG 200 200 w1`65-3032 -336 (~) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2986 -336 ( 10) -2.369965 0 102 1 2 A1`65/AF 130 130 w1`65-2885 -361 (30) 0 0 54 0 1 A1`65/AF 200 200 w1`65-2830 -336 (. In fact, it can\325) -2.369843 0 504 4 17 A1`65-2328 -336 (t) -2.369843 0 28 0 0 A1`65-4050 -228 (be done within the lifetime of the universe with ex-) 0.829605 0 1750 9 51 A1`65-4050 -120 (isting hardware.) -0.076492 0 537 1 15 A1`65/AA 210 210 w1`65-4050 97 (Searching for a strong prime) 0.00473 0 1040 4 27 A1`65/AF 200 200 w1`65-4050 205 (At this point we use the Chinese Remainder Theo-) 2.387939 0 1750 8 47 A1`65-4050 314 (r) -0.890625 0 28 0 0 A1`65-4022 314 (em to constr) -0.890625 0 419 2 11 A1`65-3603 314 (uct a sequence of integers ) -0.890625 0 877 5 26 A1`65/AC 200 200 w1`65-2726 314 (Y) 0 0 46 0 0 A1`65/AF 200 200 w1`65-2680 314 (, star) -0.890671 0 161 1 5 A1`65-2519 314 (ting at) -0.890671 0 219 1 6 A1`65/AC 200 200 w1`65-4050 422 (X) 0 0 55 0 0 A1`65/AF 200 200 w1`65-3994 422 ( such that every integer in the sequence is congru-) 0.370728 0 1695 9 50 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65-2100 -2503 (ent to 1 mo) 9.515381 0 420 3 10 A1`65-1680 -2503 (d ) 9.515381 0 72 1 1 A1`65/AC 200 200 w1`65-1607 -2503 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-1570 -2486 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-1543 -2503 ( and ) 9.515823 0 186 2 4 A1`65/AG 200 200 w1`65-1358 -2503 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1312 -2503 (1 mo) 9.515823 0 178 1 3 A1`65-1133 -2503 (d ) 9.515823 0 72 1 1 A1`65/AC 200 200 w1`65-1061 -2503 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-1024 -2486 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`65-997 -2503 (.  This means that) 9.515381 0 647 4 17 A1`65-2100 -2395 (every integer ) 4.172134 0 466 2 13 A1`65/AC 200 200 w1`65-1634 -2395 (Y) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1587 -2395 ( in the sequence will have ) 4.172012 0 923 6 26 A1`65/AC 200 200 w1`65-665 -2395 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-627 -2378 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-600 -2395 ( ) 4.171753 0 25 1 0 A1`65/AG 200 200 w1`65-575 -2395 (|) 0 0 17 0 0 A1`65/AF 200 200 w1`65-559 -2395 ( ) 4.171753 0 25 1 0 A1`65/AC 200 200 w1`65-534 -2395 (Y ) 4.171753 0 71 1 1 A1`65/AG 200 200 w1`65-462 -2395 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-417 -2395 ( 1) 4.171753 0 67 1 1 A1`65-2100 -2286 (and ) 2.151993 0 148 1 3 A1`65/AC 200 200 w1`65-1952 -2286 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-1915 -2270 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`65-1888 -2286 ( ) 2.151993 0 23 1 0 A1`65/AG 200 200 w1`65-1865 -2286 (|) 0 0 17 0 0 A1`65/AF 200 200 w1`65-1848 -2286 ( ) 2.151993 0 23 1 0 A1`65/AC 200 200 w1`65-1825 -2286 (Y ) 2.151993 0 69 1 1 A1`65/AG 200 200 w1`65-1756 -2286 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1710 -2286 ( 1.  That is to say) 2.151993 0 589 6 18 A1`65-1127 -2286 (, ) 2.151993 0 44 1 1 A1`65/AC 200 200 w1`65-1084 -2286 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-1047 -2270 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-1020 -2286 ( and ) 2.151993 0 171 2 4 A1`65/AC 200 200 w1`65-849 -2286 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-812 -2270 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`65-785 -2286 ( will be lar) 2.151993 0 360 3 11 A1`65-424 -2286 (ge) 2.151993 0 74 0 1 A1`65-2100 -2178 (prime factors of ) 2.599655 0 552 3 16 A1`65/AC 200 200 w1`65-1548 -2178 (Y ) 2.59967 0 70 1 1 A1`65/AG 200 200 w1`65-1479 -2178 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1433 -2178 ( 1 and ) 2.599655 0 237 3 6 A1`65/AC 200 200 w1`65-1196 -2178 (Y ) 2.59967 0 70 1 1 A1`65/AG 200 200 w1`65-1126 -2178 (+) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1080 -2178 ( 1. In order to do this) 2.599762 0 730 6 22 A1`65-2100 -2070 (one computes) -0.067551 0 465 1 11 A1`65/AC 200 200 w1`65-1953 -1853 (R) 0 0 51 0 0 A1`65/AF 200 200 w1`65-1902 -1853 ( ) 0.058594 0 21 1 0 A1`65/AG 200 200 w1`65-1882 -1853 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1836 -1853 ( \(\() 0.058594 0 86 1 2 A1`65/AC 200 200 w1`65-1750 -1853 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-1713 -1826 (2) 0 -27.082672 0 0 0 A1`65/AG 130 130 w1`65-1713 -1878 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65-1683 -1878 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-1656 -1853 (\) mo) 0.058609 0 160 1 3 A1`65-1496 -1853 (d ) 0.058609 0 62 1 1 A1`65/AC 200 200 w1`65-1433 -1853 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-1396 -1831 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-1369 -1853 (\) ) 0.058594 0 53 1 1 A1`65/AG 200 200 w1`65-1316 -1853 (\327) 0 0 21 0 0 A1`65/AF 200 200 w1`65-1295 -1853 ( ) 0.058594 0 21 1 0 A1`65/AC 200 200 w1`65-1274 -1853 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-1237 -1836 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`65-1210 -1853 ( ) 0.058594 0 21 1 0 A1`65/AG 200 200 w1`65-1189 -1853 (-) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1143 -1853 ( \(\() 0.058594 0 86 1 2 A1`65/AC 200 200 w1`65-1057 -1853 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-1021 -1826 (1) 0 -27.082672 0 0 0 A1`65/AG 130 130 w1`65-1021 -1878 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65-991 -1878 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-964 -1853 (\) mo) 0.058609 0 160 1 3 A1`65-803 -1853 (d ) 0.058609 0 62 1 1 A1`65/AC 200 200 w1`65-741 -1853 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-704 -1836 (2) 0 0 27 0 0 A1`65/AF 200 200 w1`65-677 -1853 (\) ) 0.058594 0 53 1 1 A1`65/AG 200 200 w1`65-623 -1853 (\327) 0 0 21 0 0 A1`65/AF 200 200 w1`65-602 -1853 ( ) 0.058594 0 21 1 0 A1`65/AC 200 200 w1`65-582 -1853 (p) 0 0 37 0 0 A1`65/AF 130 130 w1`65-545 -1836 (1) 0 0 27 0 0 A1`65/AF 200 200 w1`65-517 -1853 (.) 0 0 21 0 0 A1`65/AF 198 200 w1`65-2100 -1636 (One then computes ) -1.230667 0 677 3 17 A1`65/AC 198 200 w1`65-1423 -1636 (Y) 0 0 46 0 0 A1`65/AF 129 130 w1`65-1377 -1620 (0) 0 0 27 0 0 A1`65/AF 198 200 w1`65-1351 -1636 ( ) -1.230591 0 20 1 0 A1`65/AG 198 200 w1`65-1331 -1636 (=) 0 0 45 0 0 A1`65/AF 198 200 w1`65-1286 -1636 ( ) -1.230591 0 20 1 0 A1`65/AC 198 200 w1`65-1267 -1636 (X) 0 0 55 0 0 A1`65/AF 198 200 w1`65-1212 -1636 ( ) -1.230591 0 20 1 0 A1`65/AG 198 200 w1`65-1192 -1636 (+) 0 0 45 0 0 A1`65/AF 198 200 w1`65-1147 -1636 ( \() -1.230591 0 52 1 1 A1`65/AC 198 200 w1`65-1095 -1636 (R) 0 0 50 0 0 A1`65/AF 198 200 w1`65-1045 -1636 ( ) -1.230591 0 20 1 0 A1`65/AG 198 200 w1`65-1025 -1636 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`65-980 -1636 ( ) -1.230591 0 20 1 0 A1`65/AC 198 200 w1`65-961 -1636 (X) 0 0 55 0 0 A1`65/AF 198 200 w1`65-906 -1636 ( mo) -1.230591 0 125 1 2 A1`65-780 -1636 (d ) -1.230591 0 61 1 1 A1`65/AC 198 200 w1`65-720 -1636 (p) 0 0 37 0 0 A1`65/AF 129 130 w1`65-683 -1620 (1) 0 0 27 0 0 A1`65/AC 198 200 w1`65-656 -1636 (p) 0 0 37 0 0 A1`65/AF 129 130 w1`65-620 -1620 (2) 0 0 27 0 0 A1`65/AF 198 200 w1`65-593 -1636 (\).  This) -1.230591 0 243 2 7 A1`65-2100 -1528 (is the first integer gr) 4.781067 0 688 4 22 A1`65-1412 -1528 (eater than ) 4.781067 0 371 2 10 A1`65/AC 198 200 w1`65-1041 -1528 (X) 0 0 55 0 0 A1`65/AF 198 200 w1`65-986 -1528 ( which is 1 mo) 4.781036 0 505 4 13 A1`65-480 -1528 (d ) 4.781036 0 67 1 1 A1`65/AC 198 200 w1`65-413 -1528 (p) 0 0 37 0 0 A1`65/AF 129 130 w1`65-377 -1511 (1) 0 0 27 0 0 A1`65/AF 198 200 w1`65-2100 -1420 (and ) 12.685547 0 157 1 3 A1`65/AG 198 200 w1`65-1943 -1420 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`65-1897 -1420 (1 mo) 12.68457 0 180 1 3 A1`65-1717 -1420 (d ) 12.68457 0 75 1 1 A1`65/AC 198 200 w1`65-1642 -1420 (p) 0 0 37 0 0 A1`65/AF 129 130 w1`65-1606 -1403 (2) 0 0 27 0 0 A1`65/AF 198 200 w1`65-1579 -1420 (. Star) 12.684891 0 191 1 5 A1`65-1387 -1420 (ting at ) 12.684891 0 264 2 7 A1`65/AC 198 200 w1`65-1124 -1420 (Y) 0 0 46 0 0 A1`65/AF 129 130 w1`65-1078 -1403 (0) 0 0 27 0 0 A1`65/AF 198 200 w1`65-1051 -1420 ( one now sieves the) 12.68457 0 701 4 18 A1`65-2100 -1311 (integers ) -2.681152 -0.532806 274 1 8 A1`65/AC 198 200 w1`65-1826 -1311 (Y) 0 -0.532898 45 0 0 A1`65/AF 129 130 w1`65-1780 -1295 (0) 0 -0.34613 27 0 0 A1`65/AF 198 200 w1`65-1754 -1311 (, ) -2.681152 -0.532898 37 1 1 A1`65/AC 198 200 w1`65-1717 -1311 (Y) 0 -0.532898 45 0 0 A1`65/AF 129 130 w1`65-1671 -1295 (0) 0 -0.34613 27 0 0 A1`65/AF 198 200 w1`65-1645 -1311 ( ) -2.681152 -0.532898 17 1 0 A1`65/AG 198 200 w1`65-1627 -1311 (+) 0 -0.532898 45 0 0 A1`65/AF 198 200 w1`65-1582 -1311 ( ) -2.681152 -0.532898 17 1 0 A1`65/AC 198 200 w1`65-1565 -1311 (p) 0 -0.532898 36 0 0 A1`65/AF 129 130 w1`65-1529 -1295 (1) 0 -0.34613 27 0 0 A1`65/AC 198 200 w1`65-1502 -1311 (p) 0 -0.532898 36 0 0 A1`65/AF 129 130 w1`65-1467 -1295 (2) 0 -0.34613 27 0 0 A1`65/AF 198 200 w1`65-1440 -1311 (, ) -2.681152 -0.532898 37 1 1 A1`65/AC 198 200 w1`65-1402 -1311 (Y) 0 -0.532898 45 0 0 A1`65/AF 129 130 w1`65-1357 -1295 (0) 0 -0.34613 27 0 0 A1`65/AF 198 200 w1`65-1331 -1311 ( ) -2.681152 -0.532898 17 1 0 A1`65/AG 198 200 w1`65-1313 -1311 (+) 0 -0.532898 45 0 0 A1`65/AF 198 200 w1`65-1269 -1311 ( 2) -2.681152 -0.532898 58 1 1 A1`65/AC 198 200 w1`65-1210 -1311 (p) 0 -0.532898 36 0 0 A1`65/AF 129 130 w1`65-1175 -1295 (1) 0 -0.34613 27 0 0 A1`65/AC 198 200 w1`65-1148 -1311 (p) 0 -0.532898 36 0 0 A1`65/AF 129 130 w1`65-1112 -1295 (2) 0 -0.34613 27 0 0 A1`65/AF 198 200 w1`65-1085 -1311 (, ) -2.681152 -0.532898 37 1 1 A1`65/AG 198 200 w1`65-1048 -1311 (\274) 0 -0.532898 82 0 0 A1`65/AF 198 200 w1`65-966 -1311 ( by all small primes) -2.681259 -0.532837 616 4 19 A1`65-2100 -1203 (up to \(say\) 10) 1.567108 0 465 3 13 A1`65/AF 129 130 w1`65-1635 -1228 (6) 0 0 27 0 0 A1`65/AF 198 200 w1`65-1608 -1203 (. Once again, the value of 10) 1.567154 0 972 6 28 A1`65/AF 129 130 w1`65-637 -1228 (6) 0 0 27 0 0 A1`65/AF 198 200 w1`65-610 -1203 ( may be) 1.5672 0 260 2 6 A1`65-2100 -1095 (changed to anything that is convenient. The length) 2.587662 0 1750 7 49 A1`65-2100 -986 (of the sieve interval should be several times the larg-) -0.231934 0 1750 9 54 A1`65-2100 -878 (est prime in the sieve factor base \(5 ) 7.440765 0 1260 8 37 A1`65/AG 198 200 w1`65-840 -878 (\327) 0 0 21 0 0 A1`65/AF 198 200 w1`65-820 -878 ( 10) 7.440262 0 110 1 2 A1`65/AF 129 130 w1`65-709 -903 (6) 0 0 27 0 0 A1`65/AF 198 200 w1`65-682 -878 ( is a goo) 7.440704 0 290 3 8 A1`65-391 -878 (d) 7.440704 0 41 0 0 A1`65-2100 -770 (choice\). The integers untouched by the sieve will be) 0.270233 0 1750 8 51 A1`65-2100 -661 (candidates for primality testing and as a result of our) 1.298798 0 1750 9 54 A1`65-2100 -553 (use of the CR) -2.064789 0 450 3 12 A1`65-1655 -553 (T) -2.064789 0 55 0 0 A1`65-1609 -553 (, will automatically be str) -2.064789 0 832 4 26 A1`65-777 -553 (ong primes if) -2.064789 0 427 2 12 A1`65-2100 -445 (they are prime. One also sieves with the public expo-) -2.037964 0 1750 9 52 A1`65-2100 -336 (nent ) -0.326096 0 176 1 4 A1`65/AC 198 200 w1`65-1924 -336 (e) 0 0 32 0 0 A1`65/AF 198 200 w1`65-1892 -336 ( at this time, so that candidates ) -0.326096 0 1060 7 33 A1`65/AC 198 200 w1`65-831 -336 (p) 0 0 37 0 0 A1`65/AF 198 200 w1`65-795 -336 ( with ) -0.326096 0 192 2 5 A1`65/AC 198 200 w1`65-603 -336 (e) 0 0 32 0 0 A1`65/AF 198 200 w1`65-571 -336 ( ) -0.326096 0 20 1 0 A1`65/AG 198 200 w1`65-550 -336 (|) 0 0 17 0 0 A1`65/AF 198 200 w1`65-534 -336 ( ) -0.326096 0 20 1 0 A1`65/AC 198 200 w1`65-514 -336 (p ) -0.326096 0 57 1 1 A1`65/AG 198 200 w1`65-457 -336 (-) 0 0 45 0 0 A1`65/AF 198 200 w1`65-412 -336 ( 1) -0.326096 0 62 1 1 A1`65-2100 -228 (are also removed.) 0.083267 0 580 2 16 A1`65/AA 210 210 w1`65-2100 -11 (Even exponents) -0.008347 0 578 1 13 A1`65/AF 200 200 w1`65-2100 97 (At the point wher) 7.256287 0 635 3 16 A1`65-1465 97 (e one constr) 7.256287 0 426 2 11 A1`65-1039 97 (ucts ) 7.256287 0 162 1 4 A1`65/AC 200 200 w1`65-876 97 (R) 0 0 51 0 0 A1`65/AF 200 200 w1`65-825 97 ( via the CR) 7.256119 0 413 3 10 A1`65-417 97 (T) 7.256119 0 55 0 0 A1`65-371 97 (,) 7.256119 0 21 0 0 A1`65-2100 205 (one could also add in the condition that ) 2.328552 0 1393 8 40 A1`65/AC 200 200 w1`65-707 205 (R) 0 0 51 0 0 A1`65/AF 200 200 w1`65-656 205 ( ) 2.328598 0 23 1 0 A1`65/AG 200 200 w1`65-632 205 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-587 205 ( 3 mo) 2.328598 0 195 2 4 A1`65-392 205 (d) 2.328598 0 42 0 0 A1`65-2100 314 (8 \(for the first prime to be generated\) or ) -2.272324 0 1347 9 42 A1`65/AC 200 200 w1`65-753 314 (R) 0 0 51 0 0 A1`65/AF 200 200 w1`65-702 314 ( ) -2.272232 0 19 1 0 A1`65/AG 200 200 w1`65-684 314 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`65-638 314 ( 7 mo) -2.272369 0 185 2 4 A1`65-452 314 (d 8) -2.272369 0 102 1 2 A1`65-2100 422 (\(for the second prime to be generated\) in the case) 8.079041 0 1750 9 49 A1`65-2100 530 (where one wanted to use an ) 0.08342 0 958 6 26 A1`65/AC 200 200 w1`65-1142 530 (even ) 0.08342 0 165 1 4 A1`65/AF 200 200 w1`65-977 530 (integer as the pub-) 0.08342 0 627 3 18 A1`65-2100 639 (lic exponent \(the Rabin-W) 0.23056 0 924 3 24 A1`65-1179 639 (illiams system\). One can) 0.23056 0 829 3 23 A1`65-2100 747 (ther) 14.582916 0.057648 139 0 3 A1`65-1961 747 (efor) 14.582916 0.057648 130 0 3 A1`65-1831 747 (e choose Rabin-W) 14.582916 0.057648 655 2 15 A1`65-1180 747 (illiams at essentially no) 14.582916 0.057648 830 3 24 A1`65-2100 855 (extra computing cost if desired since the additional) 4.429291 0 1750 7 51 A1`65-2100 964 (time computing the CR) 14.582916 0.725815 862 3 20 A1`65-1242 964 (T is negligible. One also) 14.582916 0.725815 892 4 24 A1`65-2100 1072 (sieves the public exponent as in the o) -0.024002 0 1265 7 37 A1`65-834 1072 (dd case.) -0.024002 0 264 1 7 A1`65/AA 210 210 w1`65-2100 1289 (T) -0.081985 0 63 0 0 A1`65-2047 1289 (esting candidates) -0.081985 0 617 1 16 A1`65/AF 200 200 w1`65-2100 1397 (Once the set of candidates has been sieved by small) 1.905609 0 1750 9 50 A1`65-2100 1505 (primes, one can now test the numbers that have not) -0.431763 0 1750 9 49 A1`65-2100 1614 (been touched by the sieve for primality) 9.274567 0 1370 6 38 A1`65-736 1614 (. Ther) 9.274567 0 217 1 5 A1`65-519 1614 (e ar) 9.274567 0 132 1 3 A1`65-387 1614 (e) 9.274567 0 37 0 0 A1`65-2100 1722 (several ways to do this. The set of possible metho) 3.090103 0 1680 9 49 A1`65-420 1722 (ds) 3.090103 0 70 0 1 A1`65-2100 1830 (has been greatly extended by new results which are) 4.173172 0 1750 8 49 A1`65-2100 1939 (discussed below) 2.916901 0 528 1 14 A1`65-1578 1939 (. The basic criteria shall be that any) 2.916901 0 1228 7 37 A1`65-2100 2047 (metho) -2.28537 0 217 0 4 A1`65-1882 2047 (d used must have an er) -2.28537 0 755 5 21 A1`65-1127 2047 (r) -2.28537 0 28 0 0 A1`65-1100 2047 (or rate no gr) -2.28537 0 407 3 12 A1`65-692 2047 (eater then) -2.28537 0 342 1 9 A1`65-2100 2155 (2) 0 0 42 0 0 A1`65/AG 130 130 w1`65-2058 2130 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65-2029 2130 (100 ) -0.053711 0 95 1 3 A1`65/AG 200 200 w1`65-1934 2155 (~) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1888 2155 ( 7.8 ) -0.082626 0 146 2 4 A1`65/AG 200 200 w1`65-1742 2155 (\264) 0 0 46 0 0 A1`65/AF 200 200 w1`65-1697 2155 ( 10) -0.082626 0 104 1 2 A1`65/AG 130 130 w1`65-1592 2130 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65-1563 2130 (31) 0 0 54 0 1 A1`65/AF 200 200 w1`65-1509 2155 (.) 0 0 21 0 0 A1`65/AA 200 200 w1`65-2100 2372 (A deterministic primality test) 0.038513 0 1027 3 29 A1`65/AF 200 200 w1`65-2100 2480 (The two best cur) 9.602631 0 596 3 15 A1`65-1504 2480 (r) 9.602631 0 28 0 0 A1`65-1477 2480 (ent metho) 9.602631 0 359 1 8 A1`65-1117 2480 (ds ar) 9.602631 0 165 1 4 A1`65-952 2480 (e the Cyclotomic) 9.602631 0 602 2 15 A1`65-2100 2589 (ring test by Bosma-Cohen-Lenstra or the Elliptic) 14.582916 0.422562 1750 6 47 A1`65-2100 2697 (Cur) 14.582916 0.021133 130 0 2 A1`65-1970 2697 (ve Primality T) 14.582916 0.021133 515 2 13 A1`65-1464 2697 (est by Atkin-Goldwasser) 14.582916 0.021133 858 2 22 A1`65-610 2697 (-Killian) 14.582916 0.021133 260 0 7 A1`65-2100 2805 ([1,8]. My personal recommendation is that while) 14.582916 0.525513 1750 6 46 A1`65O1`65N1`65F M1`65/AF 170 170 w1`65-4000 747 (A ) 7.098022 0 80 1 1 A1`65/AC 170 170 w1`65-3920 747 (sieve procedure) 7.098022 0 410 1 14 A1`65/AF 170 170 w1`65-3510 747 ( is as follows. Start by selecting a ) 7.09761 0 1007 8 36 A1`65/AC 170 170 w1`65-2503 747 (factor) 0 0 153 0 5 A1`65-4000 855 (base) 0 0 114 0 3 A1`65/AF 170 170 w1`65-3886 855 ( of all the primes ) -1.53624 0 490 5 18 A1`65/AC 170 170 w1`65-3396 855 (p) 0 0 31 0 0 A1`65/AC 110 110 w1`65-3365 870 (i) 0 0 10 0 0 A1`65/AF 170 170 w1`65-3355 855 ( up to some selected limit ) -1.536224 0 738 6 26 A1`65/AC 170 170 w1`65-2616 855 (L) 0 0 40 0 0 A1`65/AF 170 170 w1`65-2577 855 (.  Select) -1.536179 0 227 2 8 A1`65-4000 964 (a star) 2.293213 0 154 1 5 A1`65-3846 964 (ting point for the sieve ) 2.293213 0 682 5 24 A1`65/AC 170 170 w1`65-3164 964 (P) 0 0 40 0 0 A1`65/AF 170 170 w1`65-3125 964 (, and a length for the sieve) 2.293213 0 775 6 27 A1`65-4000 1072 (inter) 5.638702 0 137 0 4 A1`65-3862 1072 (val ) 5.638702 0 110 1 3 A1`65/AC 170 170 w1`65-3752 1072 (M) 0 0 63 0 0 A1`65/AF 170 170 w1`65-3689 1072 (. Compute ) 5.639221 0 332 2 9 A1`65/AC 170 170 w1`65-3357 1072 (S) 0 0 35 0 0 A1`65/AC 110 110 w1`65-3322 1086 (i) 0 0 10 0 0 A1`65/AF 170 170 w1`65-3312 1072 ( ) 5.638702 0 23 1 0 A1`65/AG 170 170 w1`65-3289 1072 (=) 0 0 39 0 0 A1`65/AF 170 170 w1`65-3250 1072 ( ) 5.638702 0 23 1 0 A1`65/AC 170 170 w1`65-3226 1072 (P) 0 0 40 0 0 A1`65/AF 170 170 w1`65-3187 1072 ( mo) 5.639221 0 114 1 2 A1`65-3072 1072 (d ) 5.639221 0 59 1 1 A1`65/AC 170 170 w1`65-3014 1072 (p) 0 0 31 0 0 A1`65/AC 110 110 w1`65-2982 1086 (i) 0 0 10 0 0 A1`65/AF 170 170 w1`65-2972 1072 ( for all ) 5.639053 0 220 3 8 A1`65/AC 170 170 w1`65-2752 1072 (i) 0 0 16 0 0 A1`65/AF 170 170 w1`65-2737 1072 (. Initialize an) 5.639221 0 387 2 14 A1`65-4000 1180 (array of length ) 4.234283 0 447 3 15 A1`65/AC 170 170 w1`65-3553 1180 (M) 0 0 63 0 0 A1`65/AF 170 170 w1`65-3489 1180 ( to zero. Then starting at ) 4.234421 0 751 6 26 A1`65/AC 170 170 w1`65-2739 1180 (P) 0 0 40 0 0 A1`65/AF 170 170 w1`65-2699 1180 ( ) 4.234283 0 22 1 0 A1`65/AG 170 170 w1`65-2677 1180 (-) 0 0 39 0 0 A1`65/AF 170 170 w1`65-2638 1180 ( ) 4.234283 0 22 1 0 A1`65/AC 170 170 w1`65-2617 1180 (S) 0 0 35 0 0 A1`65/AC 110 110 w1`65-2581 1195 (i) 0 0 10 0 0 A1`65/AF 170 170 w1`65-2571 1180 ( ) 4.234283 0 22 1 0 A1`65/AG 170 170 w1`65-2549 1180 (+) 0 0 39 0 0 A1`65/AF 170 170 w1`65-2510 1180 ( ) 4.234283 0 22 1 0 A1`65/AC 170 170 w1`65-2488 1180 (p) 0 0 31 0 0 A1`65/AC 110 110 w1`65-2457 1195 (i) 0 0 10 0 0 A1`65/AF 170 170 w1`65-2447 1180 ( let) 4.234283 0 97 1 3 A1`65-4000 1289 (every ) 2.906281 0 174 1 5 A1`65/AC 170 170 w1`65-3826 1289 (p) 0 0 31 0 0 A1`65/AC 110 110 w1`65-3794 1303 (i) 0 0 10 0 0 A1`65/AF 110 110 w1`65-3784 1267 (th) 0 0 41 0 1 A1`65/AF 170 170 w1`65-3744 1289 ( element of the array be set to 1. Do this for the) 2.906418 0 1394 12 49 A1`65-4000 1397 (entire length of the array and for every ) 0.014374 0 1125 8 40 A1`65/AC 170 170 w1`65-2875 1397 (i) 0 0 16 0 0 A1`65/AF 170 170 w1`65-2860 1397 (.) 0 0 18 0 0 A1`65-4000 1614 (Now) 0.461105 0 138 0 2 A1`65-3867 1614 (, ever) 0.461105 0 158 1 5 A1`65-3709 1614 (y location in the ar) 0.461105 0 549 4 19 A1`65-3161 1614 (ray which has the value 1, is) 0.461105 0 811 6 28 A1`65-4000 1722 (divisible by some small prime and is hence composite.) -0.003113 0 1540 8 52 A1`65-4000 1939 (The array can be a bit array for compactness, when) 12.395645 1.699005 1650 9 49 A1`65-4000 2047 (memory is small, or a byte array for speed, when memory) 3.350174 0 1650 10 54 A1`65-4000 2155 (is readily available. This is also no need to sieve the entire) -1.250916 0 1650 11 61 A1`65-4000 2264 (sieve interval at once before looking for candidations. One) -2.302139 -0.227097 1650 8 58 A1`65-4000 2372 (can partition the array into suitably small pieces, sieve) 12.315475 0 1650 8 56 A1`65-4000 2480 (each piece, look for candidates then go on to the next) 10.609848 0 1650 10 53 A1`65-4000 2589 (piece. Every location with the value 0 is a candidate for) 6.286575 0 1650 10 56 A1`65-4000 2697 (prime testing.) 0.060684 0 393 1 13 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4808 -2070 (The length of) 0.070755 0 458 2 12 A1`65-4956 -1961 (the sieve inter) -0.058411 0 495 2 14 A1`65-4458 -1961 (val) -0.058411 0 108 0 2 A1`65-4972 -1853 (should be several) -0.098328 0 622 2 16 A1`65-4936 -1745 (times the lar) 0.09433 0 439 2 12 A1`65-4495 -1745 (gest) 0.09433 0 145 0 3 A1`65-4794 -1636 (prime that is) 0.092743 0 444 2 12 A1`65-4742 -1528 (sieved. The) -0.115097 0 392 1 10 A1`65-4961 -1420 (numbers selected) -0.029022 0 611 1 15 A1`65-4740 -1311 (are a good) 0.042648 0 390 2 9 A1`65-4954 -1203 (balance between) 0.01796 0 604 1 14 A1`65-4929 -1095 (the cost \(in time\)) -0.052933 0 579 3 17 A1`65-4755 -986 (of the sieve) 0.054062 0 405 2 11 A1`65-4989 -878 (pr) -0.106247 0 76 0 1 A1`65-4914 -878 (ocedur) -0.106247 0 239 0 5 A1`65-4675 -878 (e against) -0.106247 0 325 1 8 A1`65-4969 -770 (the cost of testing) -0.017303 0 620 3 18 A1`65-4854 -661 (candidates for) -0.183258 0 505 1 13 A1`65-4685 -553 (primality) 0 0.022552 318 0 8 A1`65-4373 -553 (.) 0 0.022552 23 0 0 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 13 13%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate-6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 4202 2808 4202 -2567 F jbd^6572 -73 237 562 -237 -489 1.791667 -1.808219 4135 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 3053 (CR) 0 16.086365 105 0 1 A1`654452 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 3053 (T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S   \321 ) 7.445709 1.841431 2956 52 91 A1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`653306 3053 (  S P R I N G   1 9 9 7) 7.445572 1.841431 744 13 22 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`654161 3053 (13) 0 0 74 0 1 A1`65O1`65N1`65F M1`65O1`65N1`65F M1`65/AF 200 200 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 -2503 (these are possibilities, they should not be used. The) 2.995743 0 1750 8 52 A1`65350 -2395 (reason is that these algorithms are quite complicated) -2.708374 -0.013733 1750 7 52 A1`65350 -2286 (to implement and that the likelihoo) 0.23056 0 1216 5 34 A1`651567 -2286 (d of er) 0.23056 0 213 2 6 A1`651780 -2286 (r) 0.23056 0 28 0 0 A1`651808 -2286 (or in the) 0.23056 0 292 2 8 A1`65350 -2178 (implementation far exceeds the likelihoo) 14.582916 0.402222 1458 4 39 A1`651809 -2178 (d that a) 14.582916 0.402222 291 2 7 A1`65350 -2070 (random metho) -0.028961 0 497 1 11 A1`65848 -2070 (d will r) -0.028961 0 236 2 7 A1`651085 -2070 (etur) -0.028961 0 134 0 3 A1`651218 -2070 (n a composite.) -0.028961 0 488 2 13 A1`65/AA 200 200 w1`65350 -1853 (Use of the Miller) -0.031326 0 602 3 16 A1`65948 -1853 (-Rabin algorithm) -0.031326 0 592 1 15 A1`65/AF 200 200 w1`65350 -1745 (One applies sufficient tests so that the probability of) -0.460297 0 1750 8 54 A1`65350 -1636 (a randomly generated candidate actually being com-) -1.363083 0 1750 6 49 A1`65350 -1528 (posite when multiple Miller) 6.822205 0 957 3 26 A1`651305 -1528 (-Rabin tests say \324prime\325) 6.822205 0 795 3 23 A1`65350 -1420 (is less than 2) 14.582916 1.162033 488 3 13 A1`65/AG 130 130 w1`65838 -1445 (-) 0 0.755402 30 0 0 A1`65/AF 130 130 w1`65868 -1445 (100) 0 0.755402 83 0 2 A1`65/AF 200 200 w1`65952 -1420 (. According to [3,6] for 512-bit) 14.582916 1.162048 1148 5 31 A1`65350 -1311 (primes, 8 iterations suffice. For 640-bit primes, 6 it-) 3.293274 0 1750 8 54 A1`65350 -1203 (erations suf) -2.708374 -0.06781 378 1 11 A1`65728 -1203 (fice. This is the suggested metho) -2.708374 -0.06781 1076 5 32 A1`651805 -1203 (d for this) -2.708374 -0.06781 295 2 9 A1`65350 -1095 (standar) -0.011063 0 245 0 6 A1`65595 -1095 (d. Other possibilities ar) -0.011063 0 782 3 24 A1`651377 -1095 (e given below) -0.011063 0 463 2 12 A1`651834 -1095 (.) -0.011063 0 21 0 0 A1`65350 -878 (One might use the Miller) -2.708374 -0.453613 835 4 23 A1`651181 -878 (-Rabin algorithm combined) -2.708374 -0.453613 919 2 24 A1`65350 -770 (with a Lucas or Frobenius strong probable prime test) -1.045197 0 1750 8 51 A1`65350 -661 ([4].  According to a very recent paper of Grantham,) 1.383423 0 1750 9 50 A1`65350 -553 (if one uses a Frobenius probable prime test, the prob-) -2.708374 -0.047165 1750 9 53 A1`65350 -445 (ability that a candidate is composite when the tests) 3.59845 0 1750 8 51 A1`65350 -336 (say \324prime\325 is less than 1) 0.775131 0 807 5 25 A1`65/AG 200 200 w1`651157 -336 (/) 0 0 23 0 0 A1`65/AF 200 200 w1`651180 -336 (1770, as opposed to the 1) 0.775131 0 855 5 24 A1`65/AG 200 200 w1`652035 -336 (/) 0 0 23 0 0 A1`65/AF 200 200 w1`652058 -336 (4) 0 0 42 0 0 A1`65350 -228 (one gets with Miller) 3.65184 0 689 3 19 A1`651036 -228 (-Rabin alone. If one per) 3.65184 0 817 4 23 A1`651853 -228 (for) 3.65184 0 92 0 2 A1`651946 -228 (ms a) 3.65184 0 154 1 3 A1`65350 -120 (single Miller) 14.582825 0.326447 442 1 12 A1`65789 -120 (-Rabin test, followed by ) 14.582825 0.326447 888 4 24 A1`65/AC 200 200 w1`651677 -120 (T) 0 0.32637 56 0 0 A1`65/AF 200 200 w1`651733 -120 ( Fr) 14.583359 0.326447 106 1 2 A1`651839 -120 (obenius) 14.583359 0.326447 261 0 6 A1`65350 -11 (tests, the probability of error for 512-bit primes is) 12.565308 0 1750 8 52 A1`65350 97 (then less than 1.5 ) -2.708359 -0.437546 599 4 18 A1`65/AG 200 200 w1`65949 97 (\264) 0 -0.437561 45 0 0 A1`65/AF 200 200 w1`65994 97 ( 10) -2.70845 -0.437561 100 1 2 A1`65/AG 130 130 w1`651094 72 (-) 0 -0.284454 30 0 0 A1`65/AF 130 130 w1`651124 72 (17) 0 -0.284454 54 0 1 A1`65/AF 200 200 w1`651177 97 ( \(1) -2.70845 -0.437561 91 1 2 A1`65/AG 200 200 w1`651268 97 (/) 0 -0.437561 23 0 0 A1`65/AF 200 200 w1`651291 97 (1770\)) 0 -0.437561 197 0 4 A1`65/AC 130 130 w1`651487 72 (T) 0 -0.284454 36 0 0 A1`65/AF 200 200 w1`651523 97 ( [5, equation 1.6].) -2.708328 -0.437546 577 3 18 A1`65350 205 (T) 0.120499 0 55 0 0 A1`65396 205 (o achieve a pr) 0.120499 0 470 3 13 A1`65866 205 (obability of 2) 0.120499 0 445 2 13 A1`65/AG 130 130 w1`651311 180 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`651341 180 (100) 0 0 81 0 2 A1`65/AF 200 200 w1`651422 205 (, ) 0.120514 0 42 1 1 A1`65/AC 200 200 w1`651464 205 (T) 0 0 55 0 0 A1`65/AF 200 200 w1`651519 205 ( ) 0.120514 0 21 1 0 A1`65/AG 200 200 w1`651540 205 (=) 0 0 46 0 0 A1`65/AF 200 200 w1`651586 205 ( 4 suf) 0.120499 0 176 2 5 A1`651762 205 (fices. One) 0.120499 0 338 1 9 A1`65350 314 (should be able to apply the analytical techniques of) 2.993195 0 1750 8 51 A1`65350 422 ([3] to the Grantham algorithm to arrive at even) 14.582916 0.600876 1750 8 46 A1`65350 530 (stronger probability estimates. That is to say the) 14.582916 0.679428 1750 7 49 A1`65350 639 (number 1.5 ) -1.21524 0 402 2 10 A1`65/AG 200 200 w1`65752 639 (\264) 0 0 46 0 0 A1`65/AF 200 200 w1`65798 639 ( 10) -1.21524 0 103 1 2 A1`65/AG 130 130 w1`65901 614 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65931 614 (17) 0 0 54 0 1 A1`65/AF 200 200 w1`65985 639 ( can probably be reduced, but the) -1.21521 0 1115 6 32 A1`65350 747 (metho) 7.855026 0 217 0 4 A1`65568 747 (d is as yet too new for anyone to have done) 7.855026 0 1532 10 42 A1`65/AF 202 200 w1`65350 855 (this analysis. However) 14.728699 2.966187 854 2 21 A1`651200 855 (, the cor) 14.728699 2.966187 339 2 8 A1`651538 855 (r) 14.728699 2.966187 31 0 0 A1`651570 855 (ectness of the) 14.728699 2.966187 530 2 13 A1`65/AF 200 200 w1`65350 964 (1.5 ) -0.030869 0 125 1 3 A1`65/AG 200 200 w1`65475 964 (\264) 0 0 46 0 0 A1`65/AF 200 200 w1`65521 964 ( 10) -0.030869 0 104 1 2 A1`65/AG 130 130 w1`65625 939 (-) 0 0 30 0 0 A1`65/AF 130 130 w1`65655 939 (17) 0 0 54 0 1 A1`65/AF 200 200 w1`65709 964 ( bound is not in question.) -0.030869 0 861 5 25 A1`65350 1180 (It should be noted that there is no known composite) -1.731537 0 1750 9 50 A1`65350 1289 (integer which passes a single Miller) 5.199478 0 1213 5 35 A1`651560 1289 (-Rabin test, fol-) 5.199478 0 540 2 16 A1`65350 1397 (lowed by a single Lucas strong probable prime test.) 6.192368 0 1750 8 50 A1`65350 1505 (Pomerance, Selfridge, and W) 4.391022 0 997 3 26 A1`651342 1505 (agstaf) 4.391022 0 190 0 5 A1`651532 1505 (f Jr) 4.391022 0 104 1 3 A1`651631 1505 (. cur) 4.391022 0 152 1 4 A1`651783 1505 (r) 4.391022 0 28 0 0 A1`651811 1505 (ently of-) 4.391022 0 289 1 8 A1`65350 1614 (fer $640 for a counter) 0.203445 0 727 4 21 A1`651074 1614 (-example. While a for) 0.203445 0 736 3 20 A1`651811 1614 (mal esti-) 0.203445 0 289 1 8 A1`65350 1722 (mate of the probability of error for a combined) 14.582916 1.505325 1750 8 46 A1`65350 1830 (Miller) -2.708374 -0.421509 206 0 5 A1`65552 1830 (-Rabin/Lucas test is still lacking, heuristics sug-) -2.708374 -0.421509 1547 6 50 A1`65350 1939 (gest that counter) 9.589142 0 588 2 16 A1`65935 1939 (-examples ar) 9.589142 0 433 1 11 A1`651368 1939 (e ) 9.589142 0 67 1 1 A1`65/AC 200 200 w1`651435 1939 (extr) 9.589355 0 120 0 3 A1`651556 1939 (emely ) 9.589355 0 211 1 5 A1`65/AF 200 200 w1`651767 1939 (rar) 9.589355 0 92 0 2 A1`651859 1939 (e. This) 9.589355 0 241 1 6 A1`65350 2047 (combination of tests was suggested in [9]. It is there-) -0.400101 0 1750 9 54 A1`65350 2155 (for) 5.299759 0 92 0 2 A1`65442 2155 (e suggested that following the Miller) 5.299759 0 1255 5 36 A1`651695 2155 (-Rabin tests) 5.299759 0 405 1 11 A1`65350 2264 (a single Lucas test be performed.) -0.035324 0 1087 5 32 A1`65350 2480 (This subject ar) -1.734375 0 492 2 14 A1`65842 2480 (ea is changing rapidly) -1.734375 0 724 3 21 A1`651559 2480 (. The purpose of) -1.734375 0 541 3 15 A1`65350 2589 (the above discussions is simply to demonstrate that) 5.097763 0 1750 7 50 A1`65350 2697 (ther) 8.412476 0 139 0 3 A1`65489 2697 (e ar) 8.412476 0 131 1 3 A1`65620 2697 (e str) 8.412476 0 150 1 4 A1`65769 2697 (onger alter) 8.412476 0 372 1 10 A1`651141 2697 (natives to Miller) 8.412476 0 577 2 16 A1`651714 2697 (-Rabin and) 8.412476 0 386 1 9 A1`65350 2805 (they can be used if desired.) -0.035812 0 902 5 27 A1`65O1`65N1`65F M1`65/AB 196 200 w1`652300 -2503 (Conclusions) 0 -0.000839 496 0 10 A1`65/AF 200 200 w1`652300 -2395 (Some standards efforts have recommended that re-) 7.110428 0 1750 6 47 A1`652300 -2286 (strictions be placed on the form of primes that might) -2.708374 -0.005035 1750 9 52 A1`652300 -2178 (be used to pr) 3.492477 0 438 3 12 A1`652738 -2178 (o) 3.492477 0 42 0 0 A1`652781 -2178 (duce an RSA mo) 3.492477 0 587 3 13 A1`653369 -2178 (dulus. In this ar) 3.492477 0 533 3 16 A1`653902 -2178 (ticle) 3.492477 0 148 0 4 A1`652300 -2070 (we have outlined reasons why we believe that many) 0.66629 0 1750 8 48 A1`652300 -1961 (of these restrictions are unnecessary; keys generated) 2.17009 0 1750 6 52 A1`652300 -1853 (according to such requirements are, in practice, no) 6.425964 0 1750 7 50 A1`652300 -1745 (mor) 2.431168 0 134 0 2 A1`652434 -1745 (e secur) 2.431168 0 231 1 6 A1`652665 -1745 (e than keys that ar) 2.431168 0 634 4 18 A1`653300 -1745 (e not. However) 2.431168 0 525 2 13 A1`653821 -1745 (, given) 2.431168 0 229 1 6 A1`652300 -1636 (that such restrictions exist in these standards, we) 14.582916 0.109619 1750 7 50 A1`652300 -1528 (have outlined a way that users can generate RSA) 12.26268 0 1750 8 46 A1`652300 -1420 (mo) -0.000977 0 107 0 1 A1`652407 -1420 (duli that will satisfy the conditions.) -0.000977 0 1189 5 37 A1`65/AB 196 200 w1`652300 -1203 (References) 0 0.00386 459 0 9 A1`65/AF 170 170 w1`652300 -1095 ([1]) 0 -0.096939 75 0 2 A1`652425 -1095 (W) 6.060303 0 71 0 0 A1`652487 -1095 (. Bosma. Primality Pr) 6.060303 0 622 3 20 A1`653109 -1095 (oving with Cyclotomy) 6.060303 0 653 2 19 A1`653757 -1095 (. Doctoral) 6.060303 0 293 1 9 A1`652425 -986 (Disser) 0.007599 0 173 0 5 A1`652598 -986 (tation Univ) 0.007599 0 340 1 10 A1`652933 -986 (. of Amster) 0.007599 0 320 2 10 A1`653254 -986 (dam, 1990.) 0.007599 0 317 1 9 A1`652300 -878 ([2]) 0 -0.096939 75 0 2 A1`652425 -878 (J. Brillhar) 12.395645 2.609177 320 1 10 A1`652745 -878 (t, D.H. Lehmer) 12.395645 2.609177 500 2 13 A1`653241 -878 (, and J.L. Selfridge. New) 12.395645 2.609177 809 4 24 A1`652425 -770 (primality criteria and factorizations of 2) 12.395645 0.795242 1226 5 41 A1`65/AC 110 110 w1`653651 -791 (m) 0 0.514267 34 0 0 A1`65/AF 170 170 w1`653684 -770 ( ) 12.395645 0.795364 31 1 0 A1`65/AG 170 170 w1`653715 -770 (\261) 0 0.795364 40 0 0 A1`65/AF 170 170 w1`653755 -770 ( 1. Math.) 12.395645 0.795288 295 2 8 A1`652425 -661 (Comp. V) -0.004028 0 264 1 6 A1`652682 -661 (ol. 29, 1975, 620-647.) -0.004028 0 627 3 21 A1`652300 -553 ([3]) 0 -0.096939 75 0 2 A1`652425 -553 (I. Damgar) -2.302139 -0.329315 278 1 8 A1`652703 -553 (d, P) -2.302139 -0.329315 107 1 3 A1`652800 -553 (. Landr) -2.302139 -0.329315 200 1 6 A1`653000 -553 (ock, and C. Pomerance. A) -2.302139 -0.329315 740 4 23 A1`653735 -553 (verage case) -2.302139 -0.329315 315 1 10 A1`652425 -445 (error estimates for the strong probable prime test. Math.) 3.055801 0 1625 8 56 A1`652425 -336 (Comp. V) -0.004028 0 264 1 6 A1`652682 -336 (ol. 61, 1993, 177-194.) -0.004028 0 627 3 21 A1`652300 -228 ([4]) 0 -0.096939 75 0 2 A1`652425 -228 (J. Grantham. A Frobenius probable prime test with high) 2.007492 0 1625 8 53 A1`652425 -120 (confidence. T) 12.395645 6.315399 492 1 12 A1`652909 -120 (o appear) 12.395645 6.315399 305 1 7 A1`653210 -120 (. A) 12.395645 6.315399 122 1 2 A1`653327 -120 (vailable fr) 12.395645 6.315399 367 1 10 A1`653693 -120 (om http://) 12.395645 6.315399 357 1 9 A1`652425 -11 (www) 0 -0.003128 142 0 2 A1`652562 -11 (.math.uga.edu/~grantham/pseudo/pseudo2.ps.) 0 -0.003128 1303 0 41 A1`652300 97 ([5]) 0 -0.096939 75 0 2 A1`652425 97 (S.H. Kim and C. Pomerance. The probability that a ran-) 0.685364 0 1625 9 53 A1`652425 205 (dom pr) 2.089615 0 205 1 5 A1`652630 205 (obable prime is composite. Math. Comp. V) 2.089615 0 1246 6 39 A1`653869 205 (ol. 53,) 2.089615 0 181 1 6 A1`652425 314 (1989, 721-742.) -0.035324 0 431 1 13 A1`652300 422 ([6]) 0 -0.096939 75 0 2 A1`652425 422 (A.J. Menezes, P) 12.395645 0.130768 477 2 14 A1`652893 422 (.C. van Oorschot, and S.A. V) 12.395645 0.130768 920 5 27 A1`653807 422 (anstone.) 12.395645 0.130768 243 0 7 A1`652425 530 (Handbook of Applied Cr) 12.078308 0 754 3 21 A1`653179 530 (yptography) 12.078308 0 318 0 9 A1`653492 530 (. CRC Pr) 12.078308 0 290 2 7 A1`653782 530 (ess, Boca) 12.078308 0 267 1 8 A1`652425 639 (Raton, 1997.) -0.179077 0 372 1 11 A1`652300 747 ([7]) 0 -0.096939 75 0 2 A1`652425 747 (P) 9.732834 0 40 0 0 A1`652455 747 (.L. Montgomer) 9.732834 0 440 1 12 A1`652896 747 (y and R.D. Silver) 9.732834 0 523 3 16 A1`653419 747 (man. An FFT Exten-) 9.732834 0 631 3 17 A1`652425 855 (sion to the ) 2.390198 0 332 3 11 A1`65/AC 170 170 w1`652757 855 (P) 0 0 40 0 0 A1`65/AG 170 170 w1`652796 855 (-) 0 0 39 0 0 A1`65/AF 170 170 w1`652835 855 (1 Factoring Algorithm. Math. Comp. V) 2.390198 0 1149 5 35 A1`653977 855 (ol.) 2.390198 0 73 0 2 A1`652425 964 (54, 1990, 839-854.) -0.018417 0 537 2 17 A1`652300 1072 ([8]) 0 -0.096939 75 0 2 A1`652425 1072 (F) 12.395645 0.370514 36 0 0 A1`652452 1072 (. Morain. Implementation of the Goldwasser) 12.395645 0.370514 1354 5 41 A1`653803 1072 (-Killian-) 12.395645 0.370514 247 0 8 A1`652425 1180 (Atkin Primality T) 12.395645 1.740616 574 2 16 A1`652991 1180 (esting Algorithm. Pr) 12.395645 1.740616 647 2 19 A1`653639 1180 (oject ALGO,) 12.395645 1.740616 411 1 10 A1`652425 1289 (INRIA, 1988.) 0.206268 0 400 1 11 A1`652300 1397 ([9]) 0 -0.096939 75 0 2 A1`652425 1397 (C. Pomerance, J.L. Selfridge, and S.S. W) 7.897949 0 1218 6 39 A1`653639 1397 (agstaf) 7.897949 0 161 0 5 A1`653800 1397 (f Jr) 7.897949 0 92 1 3 A1`653889 1397 (. The) 7.897949 0 161 1 4 A1`652425 1505 (pseudoprimes to 25 ) 3.667252 0 580 3 18 A1`65/AG 170 170 w1`653005 1505 (\274) 0 0 71 0 0 A1`65/AF 170 170 w1`653075 1505 ( 10) 3.667435 0 92 1 2 A1`65/AF 110 110 w1`653167 1484 (9) 0 0 23 0 0 A1`65/AF 170 170 w1`653190 1505 (. Math. Comp. V) 3.667328 0 503 3 14 A1`653687 1505 (ol. 35, 1980,) 3.667328 0 363 2 12 A1`652425 1614 (1003-1026.) 0 -0.003754 325 0 9 A1`652300 1722 ([10]) 0 -0.064804 110 0 3 A1`652425 1722 (R.L. Rivest and R.D. Silverman. Are Strong Primes) 12.395645 1.309998 1625 7 48 A1`652425 1830 (Needed for RSA? T) 0.025208 0 565 3 16 A1`652982 1830 (o appear) 0.025208 0 242 1 7 A1`653220 1830 (.) 0.025208 0 18 0 0 A1`652300 1939 ([11]) 0 -0.064804 110 0 3 A1`652425 1939 (R.D. Silverman. The Requirement for Strong Primes in) 5.639313 0 1625 7 51 A1`652425 2047 (RSA. RSA Laboratories T) 3.672791 0 766 3 22 A1`653184 2047 (echnical Note, May 17, 1997.) 3.672791 0 866 4 27 A1`652425 2155 (A) 12.395645 4.783844 60 0 0 A1`652480 2155 (vailable fr) 12.395645 4.783844 350 1 10 A1`652830 2155 (om http://www) 12.395645 4.783844 504 1 12 A1`653328 2155 (.rsa.com/rsalabs/html/) 12.395645 4.783844 722 0 21 A1`652425 2264 (tech_notes.html.) 0 0.010147 488 0 15 A1`652300 2372 ([12]) 0 -0.064804 110 0 3 A1`652425 2372 (R.D. Silver) 2.247421 0 323 1 10 A1`652748 2372 (man and S.S. W) 2.247421 0 477 3 13 A1`653221 2372 (agstaf) 2.247421 0 161 0 5 A1`653382 2372 (f Jr) 2.247421 0 87 1 3 A1`653465 2372 (. A Practical Analy-) 2.247421 0 585 3 19 A1`652425 2480 (sis of the Elliptic Curve Factoring Algorithm. Math.) 12.395645 0.890121 1625 7 51 A1`652425 2589 (Comp. V) -0.004028 0 264 1 6 A1`652682 2589 (ol. 61, 1993, 445-462.) -0.004028 0 627 3 21 A1`65O1`6517 -8 257 501 -257 -493 8.294118 -8.375 3667 -1413 F kHu$65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W%%CreationDate: 4/26/94 5:20 PM%%BoundingBox: 257.6375 493.0625 273.4625 500.2375%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin257.6375 493.0625 273.4625 500.2375 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsuutrue eomodetrue fhsetspreadallow267.9625 496.8125 m268.9875 497.9875 L268.1875 498.7875 L261.9125 498.7875 L261.9125 499.4125 L261.3875 499.4125 L261.3875 499.8875 L261.3875 500.0375 261.1125 500.2375 260.9625 500.2375 C258.1125 500.2375 L257.9125 500.2375 257.6375 499.8875 257.6375 499.7625 C257.6375 495.5625 L257.6375 495.4125 257.9125 495.0875 258.1125 495.0875 C260.9625 495.0875 L261.1125 495.0875 261.3875 495.2875 261.3875 495.4125 C261.3875 495.9125 L261.9125 495.9125 L261.9125 496.5625 L262.2125 496.5625 L263.0625 497.3375 L263.5125 496.8875 L264.4625 496.8875 L264.6125 497.0625 L265.5125 497.0625 L265.7375 497.2625 L266.5875 497.2625 L267.1125 496.8125 L267.9625 496.8125 L[0 0 0 1] kafn269.1875 493.8875 m269.7125 493.8875 L269.7125 493.4125 L269.7125 493.2875 269.9875 493.0625 270.1125 493.0625 C272.9875 493.0625 L273.1875 493.0625 273.4625 493.4125 273.4625 493.5375 C273.4625 497.7375 L273.4625 497.8875 273.1875 498.2125 272.9875 498.2125 C270.1125 498.2125 L269.9875 498.2125 269.7125 498.0125 269.7125 497.8875 C269.7125 497.4125 L269.1875 497.4125 L269.1875 496.7375 L268.6125 496.7375 L267.9875 495.9375 L267.1375 495.9375 L266.6125 496.3875 L265.7625 496.3875 L265.5375 496.1625 L264.6625 496.1625 L264.4875 495.9875 L263.5625 495.9875 L263.0875 496.4375 L261.9875 495.3375 L262.7875 494.5375 L269.1875 494.5375 L269.1875 493.8875 L269.1875 493.8875 LfnUUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 -1203 (While a for) -0.004105 0 395 2 10 A1`654745 -1203 (mal) -0.004105 0 133 0 2 A1`654350 -1095 (estimate of the) -0.042252 0 524 2 14 A1`654350 -986 (pr) 0 0.01857 76 0 1 A1`654425 -986 (obability) 0 0.01857 312 0 8 A1`654350 -878 (of er) -0.048065 0 165 1 4 A1`654515 -878 (r) -0.048065 0 30 0 0 A1`654544 -878 (or for a) -0.048065 0 268 2 7 A1`654350 -770 (combined Miller-) 0.00676 0 589 1 15 A1`654350 -661 (Rabin/Lucas test) -0.092926 0 579 1 15 A1`654350 -553 (is still lacking,) 0.099716 0 499 2 16 A1`654350 -445 (heuristics suggest) 0.128754 0 620 1 17 A1`654350 -336 (that counter-) 0.203064 0 450 1 12 A1`654350 -228 (examples are) 0.176086 0 484 1 11 A1`65/AB 161 170 w1`654350 -120 (extremely ) 0.279938 0 380 1 9 A1`65/AD 161 170 w1`654730 -120 (rare.) 0 0 171 0 4 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 14 14%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`6572 -73 237 562 -237 -489 1.805556 -1.808219 -4265 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`65-4239 3053 (14) 0 0 74 0 1 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 -4194 2817 -4194 -2567 F jbd^65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4900 3053 (CR) 0 16.086365 105 0 1 A1`65-4797 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65-4050 3053 (S P R I N G   1 9 9 7  ) 7.445572 1.841431 746 13 22 A1`65T g`650 0 0 (Black) 1 _rgb d`65-3304 3053 ( \321   T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S) 7.445709 1.841431 2954 52 91 A1`65O1`65N1`65F M1`65/AB 196 200 w1`65-4050 -2503 (DES Challenge Solved) -0.030029 0 920 2 19 A1`65/AF 200 200 w1`65-4050 -2395 (On June 19, 1997 it was announced that the DES) 8.784317 0 1750 9 45 A1`65-4050 -2286 (challenge, one of the challenges offered as a part of) 3.702713 0 1750 9 52 A1`65-4050 -2178 (the Secret Key Challenge sponsored by RSA Data) 9.047516 0 1750 7 45 A1`65-4050 -2070 (Security) 7.733185 0 277 0 7 A1`65-3779 -2070 (, was solved. After a sear) 7.733185 0 865 5 25 A1`65-2914 -2070 (ch of 96 days and) 7.733185 0 614 4 16 A1`65-4050 -1961 (after checking a little under 25% of the key space,) 7.310471 0 1750 9 50 A1`65-4050 -1853 (the correct key was found revealing the plaintext) 14.351624 0 1750 7 48 A1`65-4050 -1745 (message \322Strong cryptography makes the world a) 14.582916 0.547134 1750 6 45 A1`65-4050 -1636 (safer place.\323) 0.05452 0 402 1 12 A1`65-4050 -1420 (While providing a dramatic demonstration of the) 14.582916 0.023972 1750 6 46 A1`65-4050 -1311 (computing power available across the Internet, the) 6.720474 0 1750 6 49 A1`65-4050 -1203 (solution of the DES challenge employed nothing) 14.582916 0.430954 1750 6 45 A1`65-4050 -1095 (more sophisticated than a brute-force search through) -2.708374 -0.294891 1750 6 51 A1`65-4050 -986 (all possible keys. Nevertheless, since this most basic) 1.807755 0 1750 7 53 A1`65-4050 -878 (attack can always be applied to any block cipher and) -2.213028 0 1750 9 51 A1`65-4050 -770 (is essentially dependent on the length of the key) 14.582916 0.093079 1750 8 48 A1`65-4050 -661 (used, the solution to the DES challenge provides an) 0.948563 0 1750 8 50 A1`65-4050 -553 (illustration of the conflicts brought into play when) 6.367844 0 1750 7 51 A1`65-4050 -445 (legal restrictions are placed on the length of encryp-) -0.439957 0 1750 8 53 A1`65-4050 -336 (tion keys.) -0.163574 0 324 1 9 A1`65/AF 198 200 w1`65-4050 -120 (The successful challenge was coordinated by Rocke) 6.876038 0 1750 6 48 A1`65-4050 -11 (V) 13.059937 0 60 0 0 A1`65-3997 -11 (erser) 13.059937 0 155 0 4 A1`65-3845 -11 (. During the final 24 hours of the challenge) 13.059937 0 1545 8 43 A1`65-4050 97 (more than 6.4 ) 0.300522 0 491 3 13 A1`65/AG 198 200 w1`65-3559 97 (\264) 0 0 45 0 0 A1`65/AF 198 200 w1`65-3513 97 ( 10) 0.300537 0 103 1 2 A1`65/AF 129 130 w1`65-3410 72 (9) 0 0 27 0 0 A1`65/AF 198 200 w1`65-3383 97 ( DES keys were tried. If the final) 0.300522 0 1083 7 33 A1`65-4050 205 (rate of key testing had been available from the be-) 8.925568 0 1750 9 50 A1`65-4050 314 (ginning then the DES key would have been recov-) 7.974243 0 1750 8 46 A1`65-4050 422 (ered in around 32 days. Of course the rate of key) 13.980698 0 1750 10 48 A1`65-4050 530 (testing was increasing as the challenge progressed and) -2.681305 -0.374237 1750 7 53 A1`65-4050 639 (so even this time estimate to recover a DES key would) -2.681305 -0.628784 1750 10 52 A1`65-4050 747 (have been reduced as more people joined the effort.) 0.024109 0 1720 8 50 A1`65/AF 200 200 w1`65-4050 964 (A second DES-search effort coordinated from Swe-) 4.757233 0 1750 6 47 A1`65-4050 1072 (den started much later than the US effort and was) 7.034683 0 1750 9 48 A1`65-4050 1180 (beginning to gain ground as it garnered support from) -2.212463 0 1750 8 51 A1`65-4050 1289 (sites in most European countries and other countries) -2.188492 0 1750 7 51 A1`65-4050 1397 (as far afield as T) 4.905289 0 561 4 17 A1`65-3498 1397 (aiwan. As Rocke V) 4.905289 0 662 3 16 A1`65-2842 1397 (erser was claim-) 4.905289 0 542 2 15 A1`65-4050 1505 (ing the prize the Swedish effort had searched around) -1.637741 0 1750 8 51 A1`65-4050 1614 (14% of the key space.) -0.002441 0 729 4 20 A1`65-4050 1830 (Of course ther) -2.708374 -0.098526 475 2 13 A1`65-3575 1830 (e\325) -2.708374 -0.098526 55 0 1 A1`65-3525 1830 (s mor) -2.708374 -0.098526 180 1 4 A1`65-3345 1830 (e to these challenges than mer) -2.708374 -0.098526 1008 5 29 A1`65-2337 1830 (e) -2.708374 -0.098526 37 0 0 A1`65-4050 1939 (races. It can be hoped that the experiences gained in) -2.45491 0 1750 9 52 A1`65-4050 2047 (these distributed efforts can be used in other endeav-) -2.708374 -0.095581 1750 8 53 A1`65-4050 2155 (ors, be it in the search for Mersenne primes \() 5.246628 0 1556 9 45 A1`65/AC 200 200 w1`65-2494 2155 (http://) 0 0 194 0 6 A1`65-4050 2264 (www) 0 0 167 0 2 A1`65-3886 2264 (.mersenne.or) 0 0 416 0 11 A1`65-3470 2264 (g/) 0 0 55 0 1 A1`65/AF 200 200 w1`65-3414 2264 (\) or in some distributed ef) 6.035553 0 898 5 26 A1`65-2517 2264 (for) 6.035553 0 92 0 2 A1`65-2424 2264 (t to) 6.035553 0 124 1 3 A1`65-4050 2372 (factor RSA-type mo) -2.708374 -0.004318 675 2 17 A1`65-3375 2372 (duli \() -2.708374 -0.004318 180 1 5 A1`65/AC 200 200 w1`65-3194 2372 (http://www) 0 -0.004318 361 0 9 A1`65-2836 2372 (.rsa.com/rsalabs/) 0 -0.004318 536 0 16 A1`65-4050 2480 (html/factoring/html) 0 0.014526 597 0 18 A1`65/AF 200 200 w1`65-3453 2480 (\).) 0 0.014526 53 0 1 A1`65-4050 2697 (It is worth noting that the DES challenge was solved) -2.708374 -0.007523 1750 9 51 A1`65-4050 2805 (using a software-based search. The results would have) -2.708374 -0.59552 1750 7 52 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65-2100 -2503 (been particularly interesting if some participant had) 0.942627 0 1750 6 52 A1`65-2100 -2395 (been tempted to bring har) -2.708374 -0.580063 854 4 24 A1`65-1246 -2395 (dwar) -2.708374 -0.580063 160 0 3 A1`65-1087 -2395 (e techniques into play) -2.708374 -0.580063 722 3 21 A1`65-371 -2395 (.) -2.708374 -0.580063 21 0 0 A1`65-2100 -2178 (In 1993, a r) 5.547287 0 405 3 11 A1`65-1695 -2178 (epor) 5.547287 0 148 0 3 A1`65-1547 -2178 (t by Michael W) 5.547287 0 547 3 13 A1`65-1003 -2178 (iener on building a) 5.547287 0 653 3 18 A1`65-2100 -2070 (machine dedicated to a similar exhaustive search re-) -1.493866 0 1750 7 51 A1`65-2100 -1961 (vealed that for the mo) 4.335648 0 767 4 21 A1`65-1332 -1961 (dest sum of one million U.S.) 4.335648 0 982 5 27 A1`65-2100 -1853 (dollars, a machine could be built that would find a) 6.227692 0 1750 9 50 A1`65-2100 -1745 (DES key in an expected time of three and a half) 13.488434 0 1750 10 46 A1`65-2100 -1636 (hours. Over the last four years, we can expect that) 7.061813 0 1750 9 50 A1`65-2100 -1528 (even this remarkable estimate will have improved) 12.481384 0 1750 6 47 A1`65-2100 -1420 (considerably) 0 0.0103 421 0 11 A1`65-1685 -1420 (.) 0 0.0103 21 0 0 A1`65-2100 -1203 (For those interested in more information on the) 14.582916 0.76355 1750 7 46 A1`65-2100 -1095 (strength offered by different lengths of encryption) 12.491562 0 1750 6 50 A1`65-2100 -986 (key) 7.366577 0 116 0 2 A1`65-1990 -986 (, a r) 7.366577 0 142 2 4 A1`65-1849 -986 (epor) 7.366577 0 148 0 3 A1`65-1700 -986 (t on this subject by an ad hoc gr) 7.366577 0 1132 8 32 A1`65-568 -986 (oup of) 7.366577 0 218 1 5 A1`65-2100 -878 (cryptographers and computer scientists was com-) 14.582916 0.804504 1750 5 46 A1`65-2100 -770 (pleted in January of 1996. It was published by the) 9.846771 0 1750 9 49 A1`65-2100 -661 (Business Software Alliance and is currently avail-) 14.034348 0 1750 6 49 A1`65-2100 -553 (able at ) 14.582916 6.478729 326 2 7 A1`65/AC 200 200 w1`65-1774 -553 (http://www) 0 6.4785 426 0 9 A1`65-1351 -553 (.bsa.or) 0 6.4785 267 0 6 A1`65-1084 -553 (g/policy/encr) 0 6.4785 477 0 12 A1`65-606 -553 (yption/) 0 6.4785 256 0 6 A1`65-2100 -445 (cryptographers.html) 0 -0.00882 620 0 18 A1`65/AF 200 200 w1`65-1480 -445 (.) 0 0 21 0 0 A1`65-2100 -228 (And for those interested in further exhaustive search) -2.708374 -0.195282 1750 7 52 A1`65-2100 -120 (opportunities, there are currently at least three dif-) 6.132431 0 1750 7 53 A1`65-2100 -11 (ferent efforts underway for the solution to the 56-bit) -1.050293 0 1750 8 53 A1`65-2100 97 (challenge using the variable key length block cipher) -0.871902 0 1750 7 51 A1`65-2100 205 (RC5. More information on this and the remaining) 7.332764 0 1750 7 46 A1`65-2100 314 (challenges can be found at ) 14.582916 2.322922 1050 5 26 A1`65/AC 200 200 w1`65-1050 314 (http://www) 0 2.322861 384 0 9 A1`65-669 314 (.rsa.com/) 0 2.322861 319 0 8 A1`65-2100 422 (rsalabs/97challenge/) 0 0.001541 625 0 19 A1`65/AF 200 200 w1`65-1475 422 (.) 0 0 21 0 0 A1`65/AB 196 200 w1`65-2100 639 (RC2) 0 0 165 0 2 A1`65/AB 116 118 w1`65-1935 605 (\250) 0 0 38 0 0 A1`65/AB 196 200 w1`65-1896 639 ( Published in IETF Forum) -0.042847 0 1033 4 23 A1`65/AF 200 200 w1`65-2100 747 (Developed in 1987 by Ron Rivest, RC2 is a variable) -0.456619 0 1750 9 49 A1`65-2100 855 (key-length block cipher) 0.608078 0 802 2 22 A1`65-1303 855 (. It is often used as a dr) 0.608078 0 772 7 25 A1`65-530 855 (op-in) 0.608078 0 180 0 4 A1`65-2100 964 (replacement for DES and it features widely in a large) -2.21077 0 1750 9 52 A1`65-2100 1072 (number of commercial software packages.) -0.009964 0 1395 4 38 A1`65-2100 1289 (In a move to promote broad acceptance of a single) 6.017456 0 1750 9 48 A1`65-2100 1397 (standard for electronic messaging, a description of) 12.128738 0 1750 6 50 A1`65-2100 1505 (the RC2 encryption algorithm was recently pub-) 14.582916 0.644791 1750 6 45 A1`65-2100 1614 (lished for evaluation by the Internet Engineering) 14.582916 0.314163 1750 6 48 A1`65-2100 1722 (T) -2.708374 -0.630737 55 0 0 A1`65-2054 1722 (ask For) -2.708374 -0.630737 231 1 6 A1`65-1823 1722 (ce \(IETF\). The published description of RC2) -2.708374 -0.630737 1473 6 42 A1`65-2100 1830 (allows developers working in the IETF to scrutinize) 3.731766 0 1750 7 50 A1`65-2100 1939 (the algorithm as part of the process to establish S/) 8.596695 0 1750 9 51 A1`65-2100 2047 (MIME \(which supports the use of RC2\) as a stan-) 9.071411 0 1750 9 46 A1`65-2100 2155 (dard for electronic messaging.) -0.06076 0 999 3 29 A1`65-2100 2372 (A description of RC2 can be found at ) -2.708374 -0.519333 1246 8 36 A1`65/AC 200 200 w1`65-854 2372 (ftp://ftp.ietf.org/) 0 -0.519333 504 0 18 A1`65-2100 2480 (internet-drafts/draft-rivest-rc2desc-00.txt) 0 0 1291 0 42 A1`65/AF 200 200 w1`65-809 2480 ( and for those) -0.393326 0 459 3 13 A1`65-2100 2589 (interested in the progress of the S/MIME standard-) 5.754593 0 1750 7 49 A1`65-2100 2697 (ization effort, more information can be found at) 14.582916 0.894043 1750 7 47 A1`65/AC 200 200 w1`65-2100 2805 (http://www) 0 0.006775 361 0 9 A1`65-1742 2805 (.rsa.com/rsa/S-MIME/) 0 0.006775 736 0 19 A1`65/AF 200 200 w1`65-1006 2805 (.) 0 0 21 0 0 A1`65O1`65N1`65F M1`654 -350 -3023 -4050 -3023 F jbd^654 -350 -2810 -4050 -2810 F jbd^65/AB 240 240 w1`65-4050 -2879 (A L G O R I T H M S  U P D A T E) 111.633621 8.569122 3700 16 31 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-4845 -120 (After a search) 0.072739 0 495 2 13 A1`65-4889 -11 (of 96 days and) 0.030396 0 539 3 13 A1`65-4917 97 (after checking a) -0.091675 0 567 2 15 A1`65-4911 205 (little under 25%) -0.001984 0 561 2 15 A1`65-4954 314 (of the key space,) -0.010544 0 604 3 16 A1`65-4873 422 (the correct key) -0.001907 0 523 2 14 A1`65-4749 530 (was found.) -0.134827 0 399 1 9 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 15 15%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate-6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 4202 2808 4202 -2567 F jbd^6572 -73 237 562 -237 -489 1.791667 -1.808219 4135 3070 F kHu$650 0 0 (Black) 611.659973 _rgb W1`65F Y1`65i2`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Creator: FreeHand 3.1%%Title: RSA logo/B&W/HelveNeue%%CreationDate: 4/26/94 4:24 PM%%BoundingBox: 237.1696 489.3696 308.9303 561.0303%%DocumentProcSets: FreeHand_header 3 1%%DocumentSuppliedProcSets: FreeHand_header 3 1%%ColorUsage: Color%%DocumentProcessColors: Cyan Magenta Yellow Black%%FHPathName: RSA #2:logos:RSA logo/B&W/HelveNeue%%EndComments%%BeginProcSet: FreeHand_header 3 0/FHIODict 30 dict defFHIODict begin/bdf{bind def}bind def/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/u{}bdf/U{}bdf/sepdef{dup where not{FreeHandSepDict}if3 1 roll exch put}bdf/`{false setoverprintend %. FreeHandDict/-save0- save defpop pop pop pop popconcatuserdict begin/showpage {} def0 setgray 0 setlinecap 1 setlinewidth0 setlinejoin 10 setmiterlimit [] 0 setdash newpath/languagelevel where {pop languagelevel 1 ne{false setstrokeadjust}if}if} bdf/~{end-save0- restoreFreeHandDict begin}bdf/FreeHandDict 191 dict defFreeHandDict begin/currentpacking where{pop true setpacking}if/xdf{exch def}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/isLino statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse def/dr{transform .25 sub round .25 addexch .25 sub round .25 add exch itransform}bdf/C{dr curveto}bdf/L{dr lineto}bdf/m{dr moveto}bdf/printerResgsavematrix defaultmatrix setmatrix72 72 dtransformabs exch absmaxgrestoredef/maxsteps 256 def/calcgraysteps {currentscreen pop exch printerRes exch div exch2 copysin mul round dup mul3 1 rollcos mul round dup muladd 1 adddup maxsteps gt {pop maxsteps} if} bdf/bottom -0 def/delta -0 def/frac -0 def/left -0 def/numsteps -0 def/numsteps1 -0 def/radius -0 def/right -0 def/top -0 def/xt -0 def/yt -0 def/df currentflat def/tempstr 1 string def/clipflatness currentflat def/inverted?0 currenttransfer exec .5 ge def/level2 /languagelevel where {pop languagelevel 1 ne}{false}ifelse def/colorexistslevel2{statusdict/processcolors known{statusdict/processcolors get exec}{1}ifelse4 eq def}{systemdict/setcmykcolor known def}ifelse/tc1 [0 0 0 1] def/tc2 [0 0 0 1] def/fc [0 0 0 1] def/sc [0 0 0 1] def/concatprocs{/packedarray where{pop dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse{/proc2 exch cvlit def/proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx}ifelse}bdf/storerect{/top xdf/right xdf/bottom xdf/left xdf}bdf/rectpath{newpath left bottom m left top Lright top L right bottom L closepath}bdf/i{dup 0 eq{pop df dup}{dup} ifelse/clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/gettint{0 get}bdf/puttint{0 exch put}bdf/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{{/filler /eofill load def /clipper /eoclip load def}{/filler /fill load def /clipper /clip load def}ifelse}bdf/CD{/NF exch def{exch dup/FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse}forall NF}bdf/MN{1 index length/Len exch defdup length Len add string dupLen 4 -1 roll putinterval dup 0 4 -1 roll putinterval}bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch{1 index MN cvn/NewN exch def cvnfindfont dup maxlength dict CD dup/FontName NewN put dup/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{dup FontDirectory exch known{pop 3 -1 roll pop}{RC}ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known{exch pop findfont 3 -1 roll pop}{pop dup findfont dup maxlength dict CD dup dup/Encoding exch /Encoding get 256 array copy 7 -1 roll {3 -1 roll dup 4 -2 roll put}forall put definefont}ifelse}bdfuserdict begin /BDFontDict 20 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}defend/MacVec 256 array defMacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore pop/fps{currentflat exch dup 0 le{pop 1}if{dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}{exit}ifelse}looppop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf/W{/clipper load 100 clipflatness fps}bdfend%. FreeHandDictend%. FHIODict%%EndProcSet%%EndProlog%%BeginSetupFHIODict beginFreeHandDict begin237.1696 489.3696 308.9303 561.0303 storerect rectpath clip newpath/onlyk{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{1 exch sub dup dup dup setcmykcolor}ndf/setoverprint{pop}ndf/currentoverprint false ndf/colorimage{pop pop[5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx]cvx image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le isLino and{userdict begin bdf end}{ndf}ifelse/customcolorimage{colorexists{aload pop pop 4 array astoresetimagecmykcurrentcolortransfer{ik mul ik sub 1 add}concatprocs 4 1 roll{iy mul iy sub 1 add}concatprocs 4 1 roll{im mul im sub 1 add}concatprocs 4 1 roll{ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer/magentabuf 0 string def/yellowbuf 0 string def/blackbuf 0 string def{invbuf dup length magentabuf length ne{dup length dup dup/magentabuf exch string def/yellowbuf exch string def/blackbuf exch string def}ifdup magentabuf copy yellowbuf copy blackbuf copy pop}concatprocs{magentabuf}{yellowbuf}{blackbuf}true 4 colorimage}{pop image}ifelse}ndf/separationimage{image}ndf/newcmykcustomcolor{6 /packedarray where{pop packedarray}{array astore readonly}ifelse}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf/overprintprocess{pop}ndf/setspotcolor{spots exch get 0 5 getinterval exch setcustomcolor}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{systemdict begin settransfer end pop pop pop}ndf/getcmyk {dup length 4 eq{aload pop}{aload pop spots exch get 0 4 getinterval aload pop 4{4 index mul 4 1 roll}repeat 5 -1 roll pop} ifelse}bdf/setimagecmyk{getcmyk/ik xdf /iy xdf /im xdf /ic xdf}ndf/autospread{pop}ndf/fhsetspreadsize{pop}ndf/fhsetspreadallow{pop}ndf/strokeopf false def/fillopf false def/R{0 ne /strokeopf xdf}bdf/O{0 ne /fillopf xdf}bdf/filler{fill}bdf/F{fc fhsetcolor fillopf setoverprint false autospreadgsave /filler load fp grestore false setoverprint}bdf/f{closepath F}bdf/S{sc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/s{closepath S}bdf/B{fc fhsetcolor fillopf setoverprint gsave /filler load fp grestoresc fhsetcolor strokeopf setoverprint true autospread {stroke}fp false setoverprint}bdf/b{closepath B}bdf/setcolorscreen where{pop}{/setcolorscreen{setscreen pop pop pop pop pop pop pop pop pop}bdf}ifelse/fhsetcolor{dup length 4 eq{aload overprintprocess setcmykcolor}{aload 1 get spots exch get 5 get setinkoverprint setspotcolor}ifelse}ndf/settextcolor{dup fhsetcolortextblackopf{dup length 4 eq{onlyk{3 get 1.0 eq{true setinkoverprint}if}{pop}ifelse}{pop}ifelse}{pop}ifelse}ndf/ka{/fc xdf}bdf/Ka{/sc xdf}bdf/xa{/fc xdf} bdf/Xa{/sc xdf} bdf/bc2[0 0]def/bc4[0 0 0 0]def/absmax{2 copy abs exch abs gt{exch}if pop}bdf/calcstep{ {calcgraysteps}{maxsteps}ifelsetc1 length 4 eq{0 1 3{tc1 1 index gettc2 3 -1 roll getsub}forabsmax absmax absmax}{bc2 tc1 1 get 1 exch puttc1 gettint tc2 gettintsub abs}ifelsemul abs round dup 0 eq{pop 1}if dup /numsteps xdf 1 sub dup 0 eq{pop 1}if /numsteps1 xdf}bdf/cblend{tc1 length 4 eq{0 1 3{bc4 exchtc1 1 index gettc2 2 index get1 index subfrac mul add put}for bc4}{bc2tc1 gettinttc2 gettint1 index subfrac mul addputtint bc2}ifelsefhsetcolor}bdf/logtaper{/frac frac 9 mul 1 add log def}bdfFHIODict begin/origmtx matrix currentmatrix def/iminv false def/invbuf{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1 roll put}for}bdf/cmykbufs2gray{dup length 0 1 3 -1 roll 1 sub{4 index 1 index get4 index 2 index get4 index 3 index get4 index 4 index get255 exch sub ccmyk ccmyk ccmyk pop 5 mul exch 45 mul add exch 14 mul add -6 bitshift2 index 3 1 roll put}for4 1 roll pop pop pop}bdfend% This is the sample AdvUserPrep file for Aldus FreeHand 2.0.% % You may wish to strip this preamble from the file before use, to improve performance.% (Suggestion:  keep this a text-only file if using Microsoft Word.)% % It contains a number of PostScript procedures for use from the PostScript% line and fill dialogs.  Also included are internal procedures and variables not meant % to be called from the dialog box, but rather are used by those that are. The only% difference between this file and 'UserPrep' is the inclusion of the 'texture'% routine (and its support routines), since it uses an extensive amount of data and % makes the resultant PostScript file larger.%%  PROCEDURES DESIGNED FOR THE USER TO CALL%% randomleaves: %		Fills the current path with randomly sized and placed leaf patterns.%		Expects a leaf count on the stack, although not all%		the leaves will actually be shown if the path is non-rectangular.%		Example call: 100 randomleaves%% randomgrass:  %		Fills the current path with randomly sized and placed grass patterns.%		Expects a blade count on the stack, although not all the blades will%		actually be shown if the path is non-rectangular.%		Example call: 200 randomgrass%% newhatch:	%     Creates a hatch pattern by stroking two sets of parallel lines.  It should%		be preceded by six parameters which are (l-to-r):  angle from %		horizontal of first set of lines; angle from horizontal of second set of%		lines; distance between lines; line width; color of lines; true or false,%		indicating whether or not to draw the lines dashed.%		Example call: 45 -45 10 1 0 false newhatch%% noise:	%     Creates a gray texture pattern like granite rock.  It should be preceded%		by two parameters (l-to-r):  minimum gray value; maximum gray value.%		Both values range 0-255, where 0 is black and 255 is white.  The texture%		is created by randomly choosing gray dot values in the range you specify.%		Example call: 0 255 noise%% bwnoise:	%		Creates a black and white texture pattern.  Uses no parameters.%		Example call: bwnoise%% topnoise:	%		Creates a texture pattern of dots on top of whatever is already underneath on%		the picture;  you can see underneath stuff between the dots.  Call setgray for%		setting the color of the dots, before calling topnoise.%		Example call: .5 setgray topnoise%% neon:	%		Creates a neon line effect for the current path.  Expects a "width" value to%		precede it.% 		Example call: 10 neon%% newrope:	%		Creates a fancy line style of a repeating pattern.  Expects five parameters:%		First, the type of pattern, from the following list:%			{wedge}, {star}, {ball}, {squiggle}, {swirl}, {zigzag},%			{roman}, {heart}, {crepe}, {left-diagonal}, {right-diagonal},%			{braid}, {arrow}, {rect}, {snowflake}, {teeth}, {twowaves},%			{threewaves}, {cartographer}, {checker}, {dot}, {diamond}%		The curly braces are required.  Second and third parameters are width and %		height of the pattern, allowing scaling in either direction.  The fourth parameter %		is for spacing between patterns along the path. Negative spacing is allowed, but %		don't try to use a negative value larger than the width. This spacing value in %		conjunction with the width parameter will let you tweak the pattern to best %		fit the path. The last parameter is the color.%		Example call: {crepe} 10 5 0 0 newrope%		Note: Two of the rope patterns, braid and arrow, are drawn on a black %		background. Be sure to specify a non-black color for the pattern to be able%		to see it.%% bricks: %		Fills current path with brick pattern. Expects five parameters to control%		the following, in order: width of each brick, height of each brick,%		angle of rotation, mortar color and brick color. %		Example call: 20 10 45 0 1 bricks %% tigerteeth:%		Fills current path with interleaved triangular 'teeth' pattern. Expects%		four parameters to control the following, in order: number of teeth, angle%		of rotation, left color and right color (relative to a rotation of 0).%		Example call: 10 45 0 1 tigerteeth%% circles:%		Fills the current path with circles. Expects five parameters to control the%		following, in order: radius, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 circles%% squares:%		Fills the current path with squares. Expects five parameters to control the%		following, in order: side length, dist between centers, rotation angle,%		line width, color.%		Example call: 10 20 30 2 0 squares% % texture:%		Fills the current path with a texture pattern from the following list:%			(burlap), (denim), (sand), (coarse-gravel), (fine-gravel),%			(light-mezzo), (med-mezzo), (heavy-mezzo), (coquille)%		The parenthesis are required. Expects two parameters to control the %		following, in order: texture (from above list) and color. %		Example call: (heavy-mezzo) 0 texture%%  NEW FOR ALDUS FREEHAND 2.0%% 		The following are new features/changes from Aldus FreeHand 1.0:%	1) 'inside' no longer needs to be called before fill procedures, such as 'inside%	   topnoise', as each fill works only within the current path. Use of 'inside'%	   by 1.0 code is still supported, but is a no-op as each fill routine calls %	   'newinside'.% 	2) 'rope' has been improved as 'newrope'. Use of 'rope' by 1.0 code is still %	   supported and calls 'newrope'. 2.0 user's should use 'newrope' only.%	3) 'hatch' has also been improved, as 'newhatch'. Likewise, use of 'hatch' is%	   still supported and 2.0 users should only use 'newhatch'.%	4) Several of the routines now support color specification (where the 1.0 routines%	   only supported gray). Anywhere a color argument is required, it can be specified%	   in one of the three following ways:%		[C M Y K] - a four element numeric array (braces required) where C, M, Y and K%					correspond to cyan, magenta, yellow and black process color fractional %					values between 0 and 1 (with 1 representing full intensity).%		[percentage (Spot Color)] - a two element array specifying a spot color where %									the first element is a fractional tint percentage from 0 to 1%									with 1 representing full intensity. The second element is the %									exact name of a spot color defined via the color menu %									(parentheses required).%		gray level - a single number representing only a fractional level of gray between %		0 and 1, with 0 black and 1 white.%%	   This scheme allows all 1.0 code to be supported, as the gray level option above is %	   the 1.0 way gray was represented.%% User callable routines -------------------------------------% support 1.0's rope/rope  % stack: procname blocklength blockwidth color{ 0 exch	% put default spacing value in proper place on stack  newrope	% call the new guy} def% new and improved rope supports spacing value between blocks and % better path tracking by justifying to entire path instead of on% per line segment basis/newrope  % stack: procname blocklength blockwidth spacing color{ supdict begin  % allow access to support procs and vars  ropedict begin   % get special procs out of ropedict  /color exch def   /spacing exch def  /blw exch def % block width  /bll exch def % block length  /drawblock exch def  % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit  gsave {flattenpath}fp  /totdist 0 def   /totdeltax 0 def  /totdeltay 0 def  % sum the path length in this first pass  {movetoproc} {1stlinetoproc} {} {1stcloseproc} pathforall  /nm totdist bll spacing add div def	  /nm2 nm floor def  % calc #of blocks on path  nm2 0 ne  {/fr nm nm2 sub def  % fr is fraction of block extra   % if fr < .5, stretch them, else shrink them   /nm2 fr 0.5 ge { nm2 1 add } { nm2 } ifelse def    /bll2 fr 0.5 ge {fr 1.0 sub} {fr} ifelse    bll spacing add mul nm2 div bll add spacing add def    /ldelta bll2 def	% hold onto raw dist between blocks   % take spacing value into account for scaling x dimension   /bll2 bll2 bll bll spacing add div mul def   % init some vars for 2nd pass over line   /offset 0 def  /totdeltax 0 def  /totdeltay 0 def  /cnt 0 def   /prevtotdeltax 0 def  /prevtotdeltay 0 def  /bdflag false def   % now that we know spacing between blocks on path, pass over   % it again, dropping blocks at each center pt    {movetoproc} {2ndlinetoproc} {} {2ndcloseproc} pathforall  } if  grestore newpath end end  % ropedict & supdict} def/bricks		% stack: xsize, ysize, angle, mortar color, brick color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set brick color  /color exch def	% mortar color  /angle exch def	% rotation angle  /ysize exch def	% brick dimensions  /xsize exch def  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  % set up coord space to handle rotation  dx 2 div dy 2 div translate  angle rotate  backgnd	% fill clipping path with brick color  colorchoice	% set mortar color  getwidth setlinewidth  brickloop		% create bricks by drawing mortar lines  grestore end } def/tigerteeth		% stack: #of teeth, angle, teeth color, bkgnd color{ supdict begin  % access support routines  gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice 			% set background color  /color exch def 	% teeth color  /angle exch def 		% rotation angle  /teeth exch def		% #of teeth  % align clip bbox center with teeth center for rotation; scale  % teeth based on angle  dx 2 div dy 2 div translate  angle rotate  sfx sfy scale  /xstart dx 2 div neg def  /ystart dy 2 div neg def  backgnd	% fill clip path with background color    colorchoice		% set tooth color  xstart ystart moveto teethloop fill  % draw teeth    grestore end} def/circles	% stack: size, spacing, angle, linewidth, circle color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set circle color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between circle centers  /size exch def	% circle radius  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate circloop	% draw the circles  grestore end} def/squares	% stack: size, spacing, angle, linewidth, square color{ supdict begin  % access support routines   gsave newinside	% current path becomes clipping path; other inits  /color exch def  colorchoice	% set square color and linewidth  setlinewidth  /angle exch def	% rotation angle  /spacing exch def	% space between square centers  /size exch def	% side length  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  angle rotate squareloop	% draw the squares  grestore end} def% support 1.0's hatch routine/hatch	 % stack: angx, angy, incxy, linewidth, linecolor{ false	    % push default value on stack to indicate solid lines  newhatch  % call the new guy } def% new and improved hatching that supports dashed line patterns/newhatch		% stack: 1st angle, 2nd angle, spacing, linewidth, linecolor, dashes?{ supdict begin  % access support routines   gsave newinside  /dashes? exch def	% dashed or solid line ?  /color exch def  colorchoice		% set drawing color & linewidth for lines  setlinewidth  /spacing exch def  % space between each line  /ang2 exch def	% angle from horiz for 2nd grid line  /angle exch def 	% angle from horiz for 1st grid line  % set up coord space to handle rotation  /xstart		% starting x coord  { x1 x2 add 2 div neg } def  /ystart		% starting y coord  { y1 y2 add 2 div neg } def  dx 2 div dy 2 div translate  gsave angle rotate  lineloop	grestore % draw lines  ang2 0 ne		% draw 2nd set of lines for grid if nec.  { ang2 rotate 	% rotate again for 2nd half of grid    % redefine angle var for x & y starts    /angle ang2 def	    lineloop } if  grestore end} def /texture	% stack: (pattern), color{ supdict begin  % access support routines   /color exch def colorchoice  % set color  /design exch def  % pattern string to draw  patterndict begin  % check for patterns in dictionary  design patterndict exch known  { end % close the patterndict    newinside  % set up clipping based on current path    design (burlap) eq		% bitmap size of image patterns    { /imagesize 144 def } { /imagesize 72 def } ifelse    % translations for image stitching based on rotation angle    /xtrans [0 0 scaledsize neg scaledsize neg] def		    /ytrans [0 scaledsize neg scaledsize neg 0] def	 	% setup bits of patterns correctly for imaging operator dependent on color	/invflag gray? def	design(light-mezzo) eq{/invflag invflag not def}if	    design (light-mezzo) eq design (heavy-mezzo) eq or    { /design (mezzo) def } if  % use single database for light and heavy mezzo    % stitch together image tiles ( use 1 of 3 imaging schemes )    gray?  % set pattern dependent on color or gray output	  { /txsave save def  setgraypattern  % gray image only        design (burlap) eq design (denim) eq or        {design (burlap) eq {burlapimageloop} {denimimageloop} ifelse}	    {imageloop} ifelse txsave restore } 	  { /txsave save def setcolorpattern         design (burlap) eq design (denim) eq or        {design (burlap) eq { burlapimageloop} {denimimageloop} ifelse}        {imageloop} ifelse txsave restore } ifelse       } {end} ifelseend } def/randomleaves { supdict begin  % access support routines   newinside { gsave leaf   1 setgray gsave fill grestore  0 setgray 1 setlinewidth stroke grestore } repeat end } def/randomgrass{ supdict begin  % access support routines   newinside { gsave blade  0 setgray 1 setlinewidth stroke grestore } repeat end } def/noise  %  stack: min-white max-white{ supdict begin  % access support routines   gsave newinside /mx exch def  /mn exch def /dff mx mn sub def dx dy scale  dx dy 8 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand -16 bitshift 255 and dff mod mn add put } for str1}  image grestore end } def/bwnoise  { supdict begin  % access support routines   gsave newinside   dx 1.5 mul  dy 1.5 mul scale   dx dy 1 [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 or put } for str1}   image grestore end } def/topnoise { supdict begin  % access support routines   gsave newinside    dx 1.5 mul  dy 1.5 mul scale   dx dy  true [ dx 0 0 dy 0 0 ]  { 0 1 511{ str1 exch rand8 rand8 and put } for str1}   imagemask grestore end } def/neon { supdict begin  % access support routines   /wd exch def   gsave wd setlinewidth 0.5 setgray stroke grestore  gsave wd 2 div setlinewidth 0 setgray stroke grestore  gsave 1 setlinewidth 1 setgray stroke grestore newpath end } def/inside {} def  % to support 1.0% image data for textures -----------------------------------/patterndict 20 dict def  % dictionary for image patternspatterndict begin/burlap  <	FC 00 00 00 07 E0 00 00 00 FC 00 00 00 7E 00 00 00 3F E1 FE 0E 00 23 FC 00 00 3F FC 03 FF FF BF FF FF F0 0F C0 7F 1F 80 21 F8 00 3E 3F EC 03 FF FE 31 FF FF 38 07 C0 7F FF C0 71 F8 01 FF FF CC 07 FF FE 01 BF FF 08 07 E9 FF FF C1 F9 FF F3 FF FF C6 07 FF FC 00 1F FF 08 07 E3 FF FF C0 79 FF FF FF FF 86 07 FF 88 00 4F FF 88 07 F3 FF FF 60 39 FE 01 FF FF 82 03 FF CE DC 0F FF D0 3F F0 FF FF 20 79 FE 21 FF FF 98 03 FF FF 84 0F FF E0 7F D0 7F FF 00 79 FF F8 1F FF 9D 03 FF FF 00 07 FF E0 FF 90 7F FF 00 7F FF E0 07 FF 8E 03 FF FF 00 07 FF E0 7F 10 FF FF 01 FF FF C0 07 FF 98 03 FF FC 00 07 FF E0 7E 30 FF FF 87 FF FF C0 07 FF F1 87 FF FC 00 0F FF F0 FA 70 3F FF E1 FF FF 80 03 FF 80 C7 FF FE 00 1F FF FF F0 78 3F FF F1 FF FF C0 03 FF 80 FF FF FC 00 2F FF FF F0 78 3F FF F3 FF FD 80 13 FF C7 FF FF FC 10 0F F9 FF FC 78 7F FF FF FF F8 80 1F FF FF FF FF FC 10 0F F8 81 3E 78 FF 8F FF FF F8 00 1F FE C7 FF FF FC 00 07 F0 00 0E 78 F6 00 3F FF FE 00 1F 00 80 7F FF FE 00 70 E0 00 06 38 E0 00 0C FF FE 00 3E 00 00 01 FF FC 00 FF 80 00 00 10 E0 00 10 00 FE 00 1E 02 00 00 3F FC 61 FF C0 00 00 00 60 00 20 00 3E 00 1E 06 00 00 3F FF C3 FF C0 00 00 00 20 00 00 00 1C 00 FE 00 00 00 78 FF 8F DF C0 00 60 00 00 00 00 00 0F 8F FC 00 00 00 60 7F 1F 1F C0 00 60 0C 00 40 00 00 1F F4 1C 00 00 00 00 FF 3E 13 C0 01 F8 1C 00 40 00 00 4F E0 00 00 00 00 00 FF FE 11 C3 E7 FC 7F 00 40 00 00 EF 60 00 04 00 00 21 FB FE 01 FF FF FE 7E 00 40 00 00 7F 00 00 3C 00 00 63 F0 3E 01 FF FF FE 7C 0C C0 00 00 FF 00 01 FE 00 02 FF E0 0C 01 FF F8 FE 40 0F E0 00 01 FF 80 07 FF 39 E3 FF E0 00 01 FF F8 06 18 0F FF FF 9F FF C0 0F FF FF FF FF EF 00 01 FF 80 00 98 1F FF F9 FF FF C0 1F FF FF FF FF FF F0 01 FF C0 03 98 1F FF FB FF FF C0 7F FF FF F8 FF C9 FF B3 FF C0 0F F8 1F FF FA 0F FF 80 7F FF FF F0 7F F8 7F FF FF 60 0F F8 3F FF F0 0F FF 83 FF FF FF E0 3F FF FF FF FE 30 07 F8 3F FF F0 1F FF 83 FF FF FF E0 1F FF FF FF FC 30 03 F8 7F FF E0 3F F8 03 FF FF F9 F0 1C 7F FF FF F8 10 03 F0 3F FF C0 1F C0 00 FF FF F8 70 38 70 01 FF F8 10 C3 FE 1F FF C0 1F 00 00 0F FF FF 30 30 00 00 18 00 18 F7 FF 3F FF C0 0E 00 00 01 FF FF 94 30 00 00 03 80 0C F7 F8 0F FC C6 06 00 00 03 FF 90 0C 30 00 00 01 C6 00 7F F8 03 FC 00 06 00 00 00 FF 90 1C 20 00 00 01 E1 88 7F F0 00 FC 01 C2 00 00 00 FF F0 18 02 00 00 03 F0 7C 3F 80 00 1D 80 E2 00 00 00 EF F8 18 07 80 00 03 F8 10 1F 80 00 1F C0 62 00 00 01 8F F1 18 1F 80 00 43 FF 10 1F 00 00 1F E0 03 00 00 03 9F F0 3C 1F E0 03 8F FF 88 0E 00 00 1F FC 03 C7 FF FF DF F0 1C 1F FF FF FF FF C8 00 1F E0 3F FC 03 CF F7 77 FF FE 06 3F FF BC 1F FF F8 20 1F 8C FF FC 03 FF 81 21 FF FF 07 7F FF F0 1F FF 90 38 3C 04 7F FC 03 FF 80 00 FF FF 07 FF FF E0 0F FF 80 1C 78 00 7F F8 03 FF F0 00 FF F8 20 FF FF E0 07 FF E0 1E 78 00 FF F8 03 FF E0 00 7F F8 03 FF FF F0 07 FF F8 7E 30 00 7F F8 07 FF E0 00 3F FC 0F FF FF E0 07 FF FC 7E 70 00 3F F8 0F FF E0 00 3F FE 0F 7F FF E0 0F FF E0 7E 70 00 3F F9 FF FF F0 00 FF FF 1C 7F FF E0 1F FF F4 3E 60 00 3F FF BF FF F0 01 FF FF F8 7F FF C0 03 FF FE 2E 78 00 7F FE 3F FF F0 00 FF FF B0 3F FF 80 03 F0 00 0E 70 04 7F FE 7F FF F0 00 FF FE F0 1F FF 80 03 E0 00 3E 70 07 FE 43 FF FF 00 00 FF B8 0E 0F F0 80 07 E0 01 FE 70 07 C0 03 FF FF C0 03 FC 00 03 CF F0 00 1F C0 07 FC 70 07 C0 04 BF FF C0 03 D0 00 00 FF FE 40 3F 80 00 18 70 07 80 18 9F FF C0 1F C0 00 00 7F FF 80 FF 00 00 0C 70 07 80 7C 00 3F C0 1F 80 00 00 6F FF 01 FF 80 03 80 70 07 80 E4 00 7F C0 1E 00 00 00 CF FF 00 79 80 00 00 71 03 83 C0 00 FF C0 1E 00 00 C1 1F FF C0 11 80 00 02 71 00 87 C0 01 9F CE 1C 00 01 E0 3F FF E0 00 00 00 06 FF 00 8F C0 01 99 FF 00 22 1F E0 3F FF C0 00 01 FE 03 FD 00 DF C0 03 9B FF 00 FF 1F 80 1F FF E0 00 7F FF EF FC 01 FF C0 07 FF FF 00 FF FF 80 3F FF F0 01 FF FF E7 FC 01 FF FF FF FF FF 00 FF C6 03 FF FF F8 01 FF FE 0F F8 03 FF FF FF FF FF 00 FF FF FF FF FF F8 01 FF FC 07 F8 03 FF FF FF FF FC 00 FF FF FF BF FF F8 01 FF FC 07 FC 03 FF FF C7 FF 20 03 FF FF FF 3F FF F8 01 FF FC 0F FC 07 FF F3 03 FF 10 0F FF FF FE 39 FF F0 03 FF FE 0F F8 0F FF C0 00 FF B0 FF FF FF F8 13 FF F0 03 FF FE 1F F8 3F FF C0 01 FF F1 F9 FF FF F8 87 FF E0 47 FF FE 1F F0 3F FF F0 03 FF F9 C1 FF FF F8 07 FF F0 07 FF FE 1F F8 3F FF F8 03 FF FF 83 FF FF 7C 07 FF F8 07 FF FE 1F F8 3F FF F8 03 FF FF 1F FF FF 78 03 FF F0 2F FF FE 0F BC 7F FF E0 03 FF FF FF FF FF F0 03 DF F1 FF FF FF 0F 1F FF FF E0 03 FF FF FF FF FF 90 03 8F F3 FF FF FF 0A 1F FF FF C0 07 FF FF FF FF FF C0 07 0F FF FF FF FF 02 1F FF FF C0 0F E3 F7 FF FF FF C0 0F 1F FF 3F FF FC 02 0E 7F FF C0 0F C2 01 FF FF FF 80 BF 3E 00 1F FF FC 00 00 7F FF 80 07 F8 03 F8 67 BF 80 EF FC 00 00 07 F8 30 00 07 FF 00 67 E0 07 C0 00 07 00 FF FC 00 00 00 18 78 00 00 7E 00 73 80 0C 00 00 01 00 FF BE 00 00 00 00 F8 00 00 1C 01 F3 00 10 00 00 01 80 FD DF 00 00 00 01 F8 00 00 18 01 F0 00 00 00 00 01 00 7C FF C0 00 06 0F F0 0F 80 18 1F E0 00 00 00 00 0E 04 7F FF C0 00 1E 0F E0 0F 00 11 98 60 00 00 00 00 1C 04 7C CF E0 00 7E 3F 00 1F 01 11 80 00 E0 01 84 00 1C 20 3C 07 F0 60 7F FC 00 3F 03 B1 80 07 FF FF FF 40 1D F0 0C 41 FF BC FF F8 00 3E 7F FB F0 0F FF FF C1 8F FF FC 00 61 FF 81 FF F8 0C 3F FF FF C0 0F FF FF C1 FF FF FC 01 E7 FF E0 FF FE 1E 38 3F FF C0 1F FF FF C1 FF FF FC 07 FF FF E0 FF FE 1E 30 3F FF E0 7F FF FE 00 FF FF F8 07 FF FF F0 FF FE 1E 38 3F FF E0 7F FF F8 00 7F FF F0 03 FF 3C 00 7F FE 3C 38 1F FF E0 7F FF FC 00 3F FF F0 01 FF 3C 00 7F FE 30 00 1F FF F0 FF FF FC 00 1F FF F0 01 FF FC 01 7F FC 00 00 1F FE 01 FF FF FC 01 FF FF F0 01 FF FE 01 3F FC 00 80 1F FF 00 7F FF FC 01 FF FF F0 01 FF FE 00 9F FC 00 FE 0F FF 00 7F FF FE 04 FF FF F0 03 FF FE 00 5F FE 01 FC 0F FF DE 7F FF FB 06 7F FF FE 7F FF FE 00 7F FF C3 F8 0F FF FF FF FF F8 80 3F FF FF FF FF FF 00 7F FF 8F F8 07 FF FF FF FF FC 00 1F FF F3 FF FF FE 00 7F FF DF FC 03 FF FF FF FF FE 00 1F FF 81 FF FF FE 00 FF FF FF FE 0F BF BD FF FF FC 00 7F FE 01 FF FF FC 00 FF FF FF FE 1C 3E 10 FF FF F0 00 FF FC 00 FF FF F8 00 FF 81 FF FE 1E 7C 00 7F F3 F0 03 FA 38 00 FF FF C0 00 FE 00 3F FE 0F 8C 00 7F F3 E0 01 F8 00 00 9C FF C0 00 F0 00 3F FE 1F 00 00 03 FF 00 00 7E 00 00 00 FF C0 00 60 00 07 FC 1F 20 00 01 FF A0 00 7F 00 00 01 FF C0 00 E0 00 0F F9 9F F0 00 00 9F F8 01 7F 00 00 00 7F C0 44 F0 00 8F F9 8F F0 00 00 1F FC 03 3F 00 78 00 7F E0 0C 70 00 1F 39 C0 78 00 00 3F FC 00 1F 88 7C 00 FF E1 3E 00 07 FF 21 80 20 00 00 3F FC 04 1F 80 0C 03 FF B3 3C 00 07 FC 20 80 00 00 00 7F FC 20 1C 00 04 00 7F FF 38 00 07 F8 18 03 00 00 00 8F FC 70 1C 00 02 00 1F FF B8 00 00 18 4F 00 00 00 00 0F F8 70 38 00 01 00 1F FF 80 00 00 18 7E 00 00 00 00 3F FF F0 30 00 01 00 7F FF 80 00 00 00 7E 00 00 00 00 FF FF D0 30 00 01 80 7F FF 80 10 00 00 3C 00 00 00 00 FF FE C0 30 00 00 00 3F E7 00 10 00 0C 38 0C 00 00 07 FF FE 00 70 07 F0 00 3F EF 00 10 01 FC 10 1F 00 00 1F FF FE 00 7F 9F F0 00 7F F8 00 1E 07 FC 10 1F 00 00 3F FF FE 00 7F FF C0 0F FF F0 00 1F FF F0 00 3F DF C0 0F FF FE 00 FF FF C3 9F FF F0 00 1F FF FC 00 7F FF 80 1F FF FF C1 FF FF FF C3 FF F0 00 9F FF FC 00 7F F7 98 7F FF E0 00 FF FF FE 01 FF F3 00 BF FF 00 3F FF FF FC 03 FC 00 00 FF FF F0 01 FF FF 87 FF F8 00 7F FF FF FE 01 F0 1F 80 3F FF F0 01 FF E0 07 FF F0 00 7F FF FF F8 01 FF C3 C0 1F FF C0 03 7F FC 1F FF F0 00 18 FF FF F0 01 FF 80 00 0F FF C0 02 7F FE 0F FF F8 38 08 3F FF F0 03 FF C0 00 07 FF C0 00 7F FF EF FF F8 3C 00 3F FF F0 03 C1 C3 80 03 FF F0 00 7F FF FF FF F0 74 80 7F FF E0 03 C3 E7 FF 00 FF F8 00 77 F7 FF FF E0 61 87 FF FF 80 0F 80 01 1F C0 7F F0 00 E0 01 FF FF C0 C3 8F FF FF 80 0F 00 00 00 7F FF 60 00 E0 1F C3 FF C0 87 E7 FF FF 80 1F 00 00 00 1F FE 00 00 00 09 07 FF E1 87 F0 1D FC 80 3B 00 00 00 1F FE 00 00 00 00 07 FF E0 0F F0 00 FC 00 71 00 00 00 04 FC 00 0C 30 00 3F FF E0 3F F0 00 DC 01 FE 00 03 0C 1C 3F C0 19 E0 30 0E 03 C0 7F F8 00 00 01 FC 00 0F 80 03 FB C0 10 80 F0 28 03 80 7F F8 00 00 01 FC 00 1F C0 03 FB E0 20 00 F0 30 02 00 1F FC 00 00 00 3F 00 00 00 0F C0 00 00 01 F8 00 00 00 3F> def/denim	  <	E6 66 66 66 66 66 66 66 67 F7 E7 E6 3F E6 66 66 24 66 B2 66 66 77 62 22 32 2C 62 F3 27 E6 77 63 33 13 2C F2 F3 F7 67 7F F3 FB 3F 0C F2 93 27 27 77 73 BB BF 9C F6 99 27 26 23 33 33 9B 88 F6 FB E7 67 77 33 3B 9B 8C FE DB 27 67 77 33 3B 9B 0D F6 99 02 62 32 21 11 91 00 90 FB 23 67 33 33 39 93 08 92 FB E7 E7 7F 73 3B FB 1D F2 B3 27 67 32 33 31 B3 08 80 93 27 23 32 33 11 13 00 00 BB E7 77 3F 33 BB 9B 08 D2 BB 26 23 33 33 B3 B3 09 F2 11 02 22 02 21 11 12 00 00 FB E7 73 3B 33 11 93 09 90 FB E7 77 3F 73 BB BB 1D F6 9B A3 22 33 33 31 93 19 F2 9B 03 22 33 31 11 93 09 92 FB F3 33 3F 33 33 B3 99 F7 B9 A3 33 33 33 11 92 09 F2 19 23 32 13 21 01 00 00 80 B9 E3 33 33 33 11 99 08 B3 BB F3 37 33 33 B9 F9 19 F3 99 A3 33 33 31 11 99 09 F3 9B B3 B7 3B 31 19 99 08 F3 9B F3 B7 3F 3B B9 DB 1D FF 99 B3 33 33 31 19 99 08 F3 BB F3 B3 3B 39 99 99 08 F3 FF F3 FF 3F BB B9 FF 9C F3 9B F3 B7 3F BB B9 DF 9D FB 99 83 93 13 31 99 DB 8C F1 9B F3 B3 3B B1 BD DB 8C F3 DF FF F3 3F B9 FD FF 9C FB 99 F3 B1 19 19 98 D9 8C F3 9D F3 91 19 19 9C D9 8C 79 FF FB FB 9F 99 DC FD 8C FB FF FB FB 9F 99 DD FD CE FB DD FB BB 9F 99 DC FD CE FB DD FF FB 9F 99 DC FF CE FF DD FB BB 9F 99 CC FF CE FF DC FB 99 9D 99 CC FD CE F9 FF FF F9 DF DD DC FD CE F9 FF FB F9 DF DD DF FD CE FD CD F9 D9 DF 9D CD FD CE F9 CD D9 F9 DF 9D CC DD CE FD DD FD F9 DF DD EC FD CE FF 8C D8 99 8D 9C CC CD C6 FD 0C C8 98 8D 9C CE FC C6 7C CF FD F9 CF DC EE FD CE 7F CF FD DD CF DC EE FD CE 7F CF FC 89 CC CC 4E 6C C6 3C EF FD CD CE CE E6 6D C6 3C FF FD FD CF CE E6 7F C6 7F 6F FC CC CC CC E6 7D C6 3C 6F FC CC CE CC 66 6C C6 3C FF FC FD CF CE E6 7C CE 7C EE FC CD CF CC E6 7C CE 7F 44 6C C8 C6 CC E6 64 C6 3C EE FC ED CF CE E6 74 C6 3C EF FE FD CF CF E6 7C C7 3F EE FE CC CE CC C6 7C C6 3E EE FE EC CE CC E6 7C C6 3E EE FC EC EF CC EE 7C CF 7F CC EC CC E6 CC E6 6C C6 3F 4E EC EC E6 CC E6 64 C6 3C E7 FC 6C EE CC E6 6C C6 77 46 EE 44 E6 CC E6 7C 46 37 66 6E 4C 66 44 66 6E 46 36 E6 66 66 66 66 66 66 66 67  > def  /sand  <	00 18 00 00 00 40 06 00 18 C0 00 00 60 00 00 00 00 00 C0 00 00 20 00 00 00 00 00 00 00 00 00 06 00 60 00 00 00 00 00 00 00 00 60 40 00 00 40 0C 02 00 00 00 60 00 00 40 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 18 00 00 00 00 00 80 00 00 18 00 00 00 04 00 C0 00 00 00 04 00 00 06 00 00 38 0C 00 06 00 00 00 00 00 38 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00 01 00 03 00 00 00 00 00 00 00 00 00 06 00 00 06 00 00 00 00 00 07 10 0C 04 00 00 00 00 C0 00 10 08 00 01 80 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 60 00 C0 00 00 60 30 00 00 00 00 C0 00 C0 00 30 00 00 00 00 00 C0 00 00 00 10 00 00 C0 00 80 00 00 00 10 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 01 00 00 00 00 00 00 00 00 01 00 00 60 20 00 00 00 03 81 00 60 60 30 00 00 00 03 80 40 20 00 00 1C 00 00 00 00 60 00 00 00 18 00 07 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 00 02 00 00 00 00 00 60 30 00 00 00 00 00 00 C0 60 10 00 00 00 00 60 00 C0 00 00 0C 00 00 00 70 00 00 00 00 0C 00 01 80 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 06 00 00 00 20 00 1C 08 00 00 00 00 04 30 00 18 0C 00 00 00 00 06 00 30 00 00 00 00 00 10 00 00 20 00 00 06 00 00 10 00 00 00 00 00 00 00 10 00 00 60 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 01 01 80 00 30 00 00 80 00 03 80 03 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 01 80 00 03 00 00 00 0C 00 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 06 00 00 03 00 00 0C 00 00 06 00 00 03 00 08 0C 00 04 00 00 00 00 00 0C 00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 04 00 0C 00 00 01 80 00 00 06 00 00 00 00 00 00 00 00 00 06 00 00 40 00 00 01 00 00 07 00 00 20 00 00 03 80 00 00 00 60 00 00 03 00 00 00 00 00 20 00   > def/coarse-gravel  <	00 00 00 00 60 00 70 00 00 00 00 3F 00 20 00 70 00 00 80 00 FF F0 00 00 20 00 0C C0 03 F1 FC 01 80 00 06 04 00 07 80 3F 03 C0 00 06 00 0E 0F 00 0F C0 00 00 03 00 04 0F 00 03 C0 00 00 00 00 04 0E 00 01 E0 00 00 00 03 00 1E 00 01 E0 00 0F 00 01 00 3E 00 01 E0 00 3F E0 00 00 7C 00 FF E0 C0 7F F0 00 00 F8 01 FF C0 80 F0 F8 00 00 F0 07 FF 80 00 E0 3C 00 01 C0 0F C0 00 01 E0 1E 00 01 E0 3F 00 00 01 C0 0E 08 00 F0 7C 00 00 01 C0 0E 18 00 7F F8 00 00 01 C0 0E 08 00 3F E0 00 00 00 C0 07 18 00 0F C0 00 00 00 E0 07 00 1C 00 00 1C 00 40 78 03 00 0C 00 00 1C 00 60 3E 03 00 00 00 00 1C 00 F0 1F 87 80 00 00 00 0C 00 20 07 CF 80 00 00 00 00 00 00 07 FF 80 00 20 00 00 00 00 01 FF 00 00 30 00 07 E0 00 00 FC 00 00 00 00 1F F0 00 00 00 00 00 00 00 3F F8 00 00 00 00 E0 00 00 FC 3C 00 00 00 03 60 00 01 F0 1C 00 08 00 03 00 00 03 E0 1C 00 18 00 00 00 00 0F C0 1E 00 38 01 80 00 00 1F 00 1E 00 00 03 80 00 00 3E 00 1E 00 00 00 00 08 00 3C 00 1E 00 00 00 00 1C 00 78 00 1C 00 00 00 00 10 00 78 00 3C 00 00 00 00 00 00 F0 00 3C 00 00 00 00 00 00 F0 00 38 02 00 00 00 00 01 E0 00 38 06 00 F0 00 00 01 E0 00 38 04 03 FC 08 00 01 E0 00 38 00 0F 9E 18 00 C0 E0 00 38 00 1E 06 00 00 E0 E0 00 38 00 38 06 00 00 C0 F0 00 3C 00 78 0E 00 00 00 F0 00 3C 00 E0 1C 00 20 00 78 00 1F 01 C0 38 00 60 00 78 00 0F 01 80 70 00 40 00 3C 00 07 01 C0 E0 00 00 00 3C 00 07 00 C0 C0 04 00 00 0F 00 07 00 E0 C0 0E 00 00 07 80 07 00 70 C0 04 00 00 03 FE 07 00 70 C0 00 00 00 01 FF 87 00 30 C0 00 03 80 00 7F FF 00 70 E0 00 07 C0 00 00 FF 00 60 70 00 0E F0 00 00 1F 00 E0 38 00 1C 7C 00 00 0E 00 C0 18 00 18 3F 00 00 00 00 70 1C 00 30 0F 80 10 00 00 78 1C 00 38 07 E0 18 00 00 3C 38 00 38 01 F0 38 00 00 1F F0 00 1C 00 70 10 00 00 0F E0 00 1E 00 30 00 00 00 00 01 00 0F 00 70 00 00 00 00 00 00 07 81 E0 00 00 20 00 00 60 01 E7 C0 00 00 60 00 01 E0 00 FF 00 01 80 70 06 00 60 60 3C 00 03 00 30 04 00 00 20 00 00 03 80 00 00 04 00 00 00 18 00 00 00 00 06 00 00 00 30 00 00 00 00 04 00  > def/fine-gravel   <00 00 00 00 00 00 00 00 80 00 00 00 00 20 00 00 00 00 00 00 0C 00 00 10 00 20 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 08 00 00 00 00 00 40 00 00 08 00 00 00 00 00 00 00 00 00 00 60 04 00 00 00 08 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 03 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 00 02 00 40 00 00 00 00 00 00 03 80 00 40 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 04 00 00 00 00 08 00 00 00 0F 00 00 00 00 00 00 00 00 86 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 1E 00 00 00 00 00 00 00 00 0E 00 00 20 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 20 00 00 1C 00 00 00 00 00 00 00 40 3C 00 10 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00 40 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00 00 00 00 00 80 E0 80 00 10 00 00 00 00 00 E0 00 40 00 08 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 10 00 00 00 00 00 00   > def/mezzo	% image for light and heavy mezzotint pattern  <	FF 00 FF 00 FF 00 FF 00 FF 9E 7E 1F A8 FF E1 FD F1 C7 DC FC 3F F8 FF F8 FD FB 83 FC 78 7F F0 F0 F8 FC FF FF FF F0 7F F0 F0 78 7D 9F FF BF FC F1 F1 E0 7F 3F DF 87 8F FF E1 F1 E7 FF 3F CF 07 E3 FF EF 73 C7 FF 1F 80 1F 60 1F E7 03 C3 FE 1F 00 FE 70 07 E7 83 81 F8 1F 01 FC 70 03 CF 83 C1 F0 7F 3F F8 7F 83 FF E7 C1 E3 FE 7F FC 3F C7 FF FF E0 E7 FE 7F DE 1F FF C3 FF F0 EF FE 7F 0E 3F FF 87 FF F8 FE 7E 7E 06 79 FF EE 7E 7C FC 3F FC 06 F0 FC CC 3C 1E FE 3F FC 07 E0 61 CE 08 0E 7F 1F FC FF E0 01 DF 81 E4 7F 1F FF FF E7 83 FF C3 F0 7E 1F FF FF E7 E3 FF C7 F0 7C 3F 8F FF E7 FF FF FF FF FC 7F 8F FF E7 FF E3 FF FF F9 FF 8F F9 F7 FF C1 FE FF E3 FF 8F C1 3F 9F C1 FC FE 07 E3 1F C0 3E 0F C1 F9 FC 1F E0 3F E0 7E 07 F1 F1 F0 1F E0 FF F8 7C 0F F9 F1 E0 1F F1 FF FE 7C CF FF F0 F0 3F FF F3 7E 7C EF FF F0 F8 78 FF F0 3E 3F E0 3F E0 7F F8 7F FC 3E 3F F0 1F 80 7F F0 7F FE 3C 9F F8 7F 8F FF F0 7C FF 79 8F FF FF 9F FF F0 78 7F F9 87 FF F3 FF C1 F0 F8 7F F1 9F FF E1 FF E1 FB FC 7F F9 FF 83 E0 FF F7 FF FF FF FF FF 01 E0 FF FF FF FF FF FF F7 39 E0 F8 FF FF 8F F7 FF E3 79 E0 F8 FE 1F 07 F3 DF 63 3B E1 F8 7C 1E 37 FB C6 43 BF F1 FC 78 0F F7 FF 80 43 FF F0 FC 78 1F F3 FF 80 63 FF FD FE 78 7F F8 7F 80 60 FF BF FE 78 FF F8 7F 80 20 3F 0F FF F8 FF F8 7F F0 00 3E 07 FF F8 FC 3C FF FE 03 FE 07 FF FD FC 1F FB FE FF FC 07 FE 5F FE 1F F0 7F FF FC 0F CE 0F FF 9F E0 3F FF FE 1F 8F 1F FF FF E0 7F FF 7F 3F 87 1F E3 FF F0 7F FF 1F FF 8F 9F C1 E1 F3 F9 CF 8F FF 0F 9F 03 F0 7F F9 87 87 FF 0F FC 07 F8 7F F9 87 CF FF 0F F8 1F F8 7F F9 07 CF 9F FF F8 7F FC 7F FC 0F FF 8F FF F8 FF FF FE 3E 7F FE C3 FF FC F8 FF FC 1C 7F 78 E1 FF FF F8 7F FC 0C 7F 20 E0 FF FF FC 7F FE 0E 1F 00 F9 F8 FF FC 7F FF 0E 1F 81 FF F8 06 FC 20 3F FE 1F FF FF F8 00 FE 00 3F FC FF FF FF F0 73 FF 80 3F FD FF FF 7F E0 FF FF FC 3B F9 FF FC 77 C1 FF CF FE 30 F9 F3 F8 F3 C7 C3 CF FF F8 79 D3 C3 F9 FF 87 E0 7F FE 3D 83 CF F9 FE 07 E0 C7 FE 1F C3 9F FD F0 7F E7 E3 FC 3F FF 00 FF 00 FF 00 FF 00 FF > def/med-mezzo<00 3F 00 3F 00 FC 00 FC 00 13 0D C7 E2 01 E0 18 64 66 33 80 01 E0 30 43 18 00 F2 70 00 00 E0 78 03 88 11 F0 30 03 80 C3 FC 03 8F 1F 80 10 01 E1 C7 CE C1 83 1F 02 01 E0 E3 87 07 F1 83 8E 06 07 F0 73 07 00 31 87 06 06 7F F0 73 0E 00 13 0E 00 C2 47 00 F1 84 30 0F 00 00 E0 86 01 F1 80 70 07 80 C0 F1 86 01 E1 C1 F1 87 03 83 E1 E3 C1 C3 C7 E3 80 07 07 C1 F3 E3 87 87 C3 80 07 0F 87 B0 E3 07 08 07 00 4E 0F 07 80 63 03 98 0E 20 7C 07 07 00 60 00 F8 0C 30 70 40 04 01 E0 18 1F C4 3E 01 E0 02 47 C0 F8 03 C6 3F 03 E0 E2 47 EF EC 01 C7 0F 87 C3 E2 46 30 84 40 C7 80 87 C3 C2 06 00 07 F0 0F 80 C3 81 C6 07 00 07 E0 0F 00 E0 00 C2 07 87 C0 00 00 18 E0 10 E0 01 C7 F0 06 00 18 E0 10 60 60 47 D8 3F 00 38 02 10 00 F0 60 0C 7F 01 F8 0F 00 07 B8 60 0C 7F 39 E0 0F 01 07 8E 30 0C E3 F8 E0 0F 1F 87 83 38 0C 60 78 E1 80 3F EF C1 18 CC 70 00 E3 C0 3E 79 C1 80 FC 30 00 43 C2 3C 01 43 80 78 30 00 03 C7 08 00 07 00 30 F0 8C 01 C7 00 00 0C 18 01 E0 78 01 C0 00 00 1C 3C 00 00 20 60 00 7F 18 1C 1C 70 06 00 F0 00 73 FC 1E 0C F0 0F 01 F8 38 71 FC 1F 8C E0 8F 81 FE 7C 78 5C 1F EC 43 DF E1 8F 9C 78 1C 8F 78 43 7C 01 8C 0E 38 1D 80 70 44 10 01 80 1C 08 51 E0 70 EE 00 03 80 F8 01 81 E0 70 FC 03 87 80 F0 01 87 E0 38 E0 07 C7 18 F0 03 87 86 30 00 C6 60 38 C0 C3 87 0E 00 00 F6 20 3C 00 E1 82 1E 02 18 FC 30 FC 01 E1 80 1E 07 F8 38 30 F8 11 FF 1C 0F 07 F8 00 30 00 39 FF 04 07 C0 18 00 20 00 38 03 06 03 E0 00 E0 30 06 18 01 00 31 F0 00 FE 3C 7E 18 01 18 30 F1 80 70 3E 7F 98 0F 38 1C F1 C0 00 0E 0F F0 0F 3C 18 C0 C6 00 0E 01 E0 07 FC 88 00 C7 0F 0E 00 47 03 C5 80 00 0F 0F 8E 38 0F 80 01 84 00 0F 83 8C 3C 0F 98 01 9C 38 0F C3 80 38 0D FC 1D BE 38 1F E1 80 38 88 1C 67 FE 38 FF 80 00 39 C0 0C C3 6E 38 F0 00 3F F3 80 0D C0 40 78 C0 0C 3F C3 07 0D 00 00 78 C0 1E 1C 03 9F C6 1C 00 00 61 0F 00 01 FC C6 1C 30 00 30 07 00 60 F0 E2 06 38 80 38 00 00 78 01 E2 82 79 E0 38 10 00 3C 01 C3 C6 71 E3 F1 FC 3C 1F C3 8B E6 11 87 B1 CE 3E 18 E0 1B E0 00 3F 00 3F 00 FC 00 FC 00> def/coquille  <	00 00 00 00 01 E0 00 00 00 00 03 80 00 00 70 00 00 00 00 07 E0 00 00 3E 00 00 00 00 1F F8 00 00 1F 80 00 00 00 7E 3E 00 00 07 80 00 00 01 FC 04 00 00 03 C0 00 00 03 E0 00 00 00 01 E0 00 00 0E 00 00 00 00 00 40 00 00 38 00 00 00 00 00 00 00 00 F0 00 00 00 00 00 00 00 00 F0 00 00 1F 80 00 00 00 0E F0 00 01 FF 80 00 03 00 06 F8 00 00 63 C0 00 03 80 00 F0 00 00 00 60 00 03 80 00 00 00 00 00 30 00 01 80 00 00 00 00 00 0C 00 01 80 00 00 00 00 00 03 E0 01 80 00 00 00 00 00 01 F0 00 80 00 00 00 00 00 00 F0 00 C0 00 00 00 00 00 00 F0 00 70 00 00 00 00 00 00 F0 00 38 00 03 E0 00 00 00 E0 00 1C 00 01 F0 00 00 00 00 00 0C 00 00 E0 1C 00 00 00 00 1F 00 00 C0 1F 00 00 00 00 1F F0 00 00 0F 80 00 00 00 30 7C 00 00 07 80 00 00 00 60 1C 00 00 00 00 00 00 00 C0 0C 00 00 00 00 00 00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1A 00 00 00 00 00 00 00 00 3E 00 00 00 00 00 00 00 00 3C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 00 00 7C 00 00 00 00 00 00 C0 00 FE 00 00 00 00 3F FB C0 01 FF 80 00 00 00 01 FF E0 00 0F F0 00 00 00 00 3F F0 00 00 0F F0 00 00 00 07 FF 00 00 03 F0 00 00 00 01 FC 00 00 01 F0 1F C0 00 00 78 00 00 00 F0 1F E0 00 00 70 00 00 00 E0 03 E0 00 00 78 00 00 00 E0 01 E0 00 00 78 00 00 00 C0 01 E0 00 00 38 00 00 00 C0 00 E0 00 00 0C 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 77 00 00 00 00 00 80 00 00 3F C0 00 00 00 00 F0 00 00 01 F8 00 00 00 00 3F 00 00 00 1C 00 00 00 00 0F 80 00 00 00 00 00 00 00 07 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 1C 00 01 80 00 00 00 00 00 3E 00 00 80 00 00 00 00 00 78 00 00 80 00 00 00 00 07 F0 00 00 C0 00 1E 00 00 3F F0 00 00 F0 00 3F E0 00 7F F0 00 00 FF 00 FF F0 00 7F 30 00 00 FF FF C0 00 00 70 00 00 00 01 78 00 00 00 C0 00 00 00 00 00 00 00 01 80 00 00 00 00 00 00 00 03 80 00 00 00 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    > def  % following two are place-holding dummies/light-mezzo    <> def  /heavy-mezzo  <> defend	 % patterndict   % Support routines ------------------------------------------/supdict 75 dict def	% setup dict for support stuffsupdict begin	% start putting things in this dict/str1 512 string def    	% string variable /dx 500 def					% def width of path bbox/dy 700 def 				% def height of path bbox/cnt 0 def					% loop counter/dashpat [12 3] def			% pattern for dashed lines/scalefactor .24 def 		% scaling to make image patterns look right in user space /angarray [0 90 180 270] def % matrix var for rotation angles	/outerloopcnt -1 def		% another loop counter/imagesize 72 def			% default bitmap size for textures% makes current path clipping path, translates to lower left % corner of bounding box of path, sets variables dx and dy, % inits random # generator and path/newinside { % 'fp' defined internally by FH to bump PS 'flatness' til #of path pts fits under limit {flattenpath}fp clip pathbbox 1 index 4 index sub round cvi /dx exch def 0 index 3 index sub round cvi /dy exch def pop pop translate 222 srand newpath } def/blade {  brandxy  translate  /w 5 randint 5 add def 0 0 moveto 0 3 3 10 w 10 curveto } def/randint {  rand exch mod } def/rand8 { rand -16 bitshift 255 and} def/rand2	% randomly(?) generate 2 bit #{ rand -16 bitshift 3 and } def/brandxy { dx randint dy randint } def/leaf {  brandxy  translate  360 randint rotate /w 10 randint 15 add def 0 0 moveto 0 w 0 w w w curveto w 0 w 0 0 0 curveto } def/x1 	% half of rotated bounding box width...{ angle cos abs dx mul } def/x2		% ...the other half{ 90 angle sub cos abs dy mul } def /y1 	% half of rotated bounding box height...{ angle sin abs dx mul } def/y2		% ...the other half{ 90 angle sub sin abs dy mul } def/backgnd	% create single color background{ xstart ystart moveto  xstart ystart abs lineto  xstart abs ystart abs lineto  xstart abs ystart lineto  closepath fill } def /getwidth	% make 'mortar' multiple of largest brick dimension	{ xsize ysize ge  { xsize } { ysize } ifelse .05 mul } def  /incrcnt 	% increment loop counter{ /cnt cnt 1 add def } def% draw 'mortar' lines, staggering verticals on successive horizontals/brickloop		{ ystart ysize ystart abs	  { /ycur exch def 	% stack: ycur    xstart ycur moveto 	xstart abs ycur lineto stroke	xstart xsize xstart abs 	% stack: xcur	{ cnt 1 and 0 eq 	% stagger verticals per mortar row	  { /xcur exch def } 	  { /xcur exch xsize .5 mul add def } ifelse	  xcur ycur moveto	  xcur ycur ysize add lineto stroke 	} for	incrcnt  } for } def/teethsize	% y offset for each tooth{ dy teeth div } def/drawtooth % draw individual tooth{ dx teethsize 2 div rlineto  dx neg teethsize 2 div rlineto } def	/teethloop	% control drawing of each tooth{ teeth { drawtooth } repeat } def  /sfx	% x scale factor{ x1 x2 add dx div } def/sfy	% y scale factor{ y1 y2 add dy div } def/circloop		% fill clip area with circles{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & stroke circ	  ycur size 0 360 arc stroke	} for  } for } def/squareloop		% fill clip area with squares{ ystart spacing ystart abs   { /ycur exch def	% get current y loc    xstart spacing xstart abs 	{ % load stack with current x & y & draw square	  ycur moveto      size 2 div neg size 2 div neg rmoveto      0 size rlineto      size 0 rlineto      0 size neg rlineto      closepath stroke	} for  } for } def/lineloop	% fill clip area with lines{ ystart spacing ystart abs  { /ycur exch def		% stack: ycur	dashes?	 	% do staggering stuff for dashed lines	{ % set dash pattern to stagger lines    cnt 1 and 0 eq { dashpat 0 setdash } 	{ dashpat dashpat 0 get dashpat 1 get add 2 div setdash } 	ifelse } if    xstart ycur moveto	xstart abs ycur lineto    stroke incrcnt  } for } def/scaledsize 	% user-space size of texture image { imagesize scalefactor mul } def/drawcolorimage	% image pattern data in color{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   {cyanrp} {magentarp} {yellowrp} {blackrp}  true 4 colorimage } def/drawgrayimage	% image pattern data in gray levels{ imagesize imagesize 1   [imagesize 0 0 imagesize 0 0]   { pattern } image } def/angget	% get rotation angle based on random index{ angarray aryindex get } def/xtransget	% get translations based on rotation{ xtrans aryindex get } def/ytransget	{ ytrans aryindex get } def/imageloop				% loop across width and{ 0 scaledsize dy		% up height  { /ycur exch def     0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate		% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  angget rotate	  xtransget ytransget translate	% translate again	  scaledsize scaledsize scale	% based on rotation  	  gray? { drawgrayimage } { drawcolorimage } ifelse      grestore    } for  } for } def/burlapimageloop		% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def    0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  /aryindex rand2 def	% randomly rotate image	  aryindex 1 and 0 eq   % rotate 0 or 180 only	  { angget rotate 			 	  xtransget ytransget translate } if	% translate again	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def/denimimageloop			% loop across width and{ 0 scaledsize dy		% up height { /ycur exch def   /outerloopcnt outerloopcnt 1 add def   outerloopcnt 1 and 1 eq   { /cnt 0 def } { /cnt -1 def } ifelse   0 scaledsize dx		    { /xcur exch def	  gsave	  xcur ycur translate	% go to current x,y offset	  incrcnt	  cnt 1 and 1 eq	% rotate every other tile 180 deg	  { 180 rotate 	    scaledsize neg scaledsize neg translate } if	  scaledsize scaledsize scale	  	  gray? { drawgrayimage } { drawcolorimage } ifelse	  grestore    } for  } for } def% set current color dependent on user input of single # or, 2 or 4 # array/colorchoice{ /found false def  % init flag var  gray? { color setgray } % simple gray level (expressed as real or int)  { color length 2 eq {  % spot color specification    0 1 spots length 1 sub	{ /cnt exch def  % loop index	  spots cnt get 4 get color 1 get eq 	  { /found true def exit } if % compare vs. user's	} for 	% stuff index of found spot color in array; default - black 	found { color 1 cnt put } { color 1 3 put } ifelse    color setcolor } if    color length 4 eq { color setcolor } if  % process color  } ifelse } def/gray?  % does user entry indicate he wants color or gray ?{ color type 0 type eq color type .0 type eq or } def /setgraypattern  % set up pattern if printing in gray only{ patterndict design get   invflag {dup length /str2 exch string def str2 copy invbuf} if   /pattern exch def   % setup xfer proc for gray level  /temp 4 array def temp 3 1 color sub put  temp 0 [0 0 0] putinterval  FreeHandDict begin  temp setimagecmyk {} fixtransfer   end % close the FreeHand dict} def/setcolorpattern  % setup pattern if printing in color{ patterndict design get   dup length /str2 exch string def str2 copy   invflag{invbuf pop}{pop}ifelse  FreeHandDict begin % redefine following vars in right dict   /cyanbuf str2 length string def  /magentabuf cyanbuf length string def  /yellowbuf cyanbuf length string def  /blackbuf cyanbuf length string def  /cyanrp {str2 cyanbuf copy} def  % assign vars for transfer proc   color setimagecmyk {} fixtransfer   end % close the FreeHand dict} defend	% end of UserPrep support dictionary/ropedict 75 dict def  % dictionary for rope stuffropedict begin   % let's put these in the new dict./blocksetup{ gsave colorchoice translate rotate scale newpath } def/blockend{ closepath fill } def/blockfinish{ closepath fill grestore } def% for all the following line styles - % stack: len width angle startx starty/arrow { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  -.4 0 moveto .15 .4 lineto 0 0 lineto   .15 -.4 lineto blockend .2 0 moveto .2 .2 .25 .4 .35 .4 curveto  .45 .4 .5 .2 .5 0 curveto .5 -.2 .45 -.4 .35 -.4 curveto  .25 -.4 .2 -.2 .2 0 curveto blockend .1 0 moveto .2 .1 lineto   .2 -.1 lineto  blockfinish } def/braid  { cnt 0 eq   { gsave blw setlinewidth stroke grestore } if incrcnt  blocksetup  .5 .1 moveto .47 .24 lineto .4 .36 lineto   .3 .44 lineto .2 .4 lineto .1 .34 lineto 0 .2 lineto   -.16 -.08 lineto -.25 -.2 lineto -.35 -.24 lineto   -.43 -.2 lineto -.5 -.1 lineto -.47 -.24 lineto -.4 -.36 lineto   -.3 -.44 lineto -.2 -.4 lineto -.1 -.34 lineto 0 -.2 lineto  .16 .08 lineto .25 .2 lineto .35 .24 lineto .43 .2 lineto  blockfinish } def/crepe { blocksetup -.5 .01 moveto -.35 .03 lineto -.2 .12 lineto  .03 .33 lineto .15 .37 lineto .22 .32 lineto .38 .08 lineto   .44 .04 lineto .5 .01 lineto .5 -.01 moveto .35 -.03 lineto  .2 -.12 lineto -.03 -.33 lineto -.15 -.37 lineto -.22 -.32 lineto   -.38 -.08 lineto -.44 -.04 lineto -.5 -.01 lineto blockfinish } def/snowflake { blocksetup -.45 .5 moveto -.35 .3 lineto -.4 .25 lineto   blockend -.35 .5 moveto -.15 .5 lineto -.25 .4 lineto   blockend .15 .5 moveto .35 .5 lineto .25 .4 lineto blockend   .45 .5 moveto .45 .25 lineto .35 .3 lineto blockend   .45 -.25 moveto .45 -.5 lineto .35 -.3 lineto blockend  .35 -.5 moveto .15 -.5 lineto .25 -.4 lineto blockend  -.15 -.5 moveto -.35 -.5 lineto -.25 -.4 lineto blockend   -.45 -.5 moveto -.45 -.25 lineto -.35 -.3 lineto blockend   0 .45 moveto .1 .35 lineto 0 .25 lineto -.1 .35 lineto blockend   0 .08 moveto .15 .25 lineto .28 .08 lineto .25 .05 lineto  -.25 .05 lineto -.28 .08 lineto -.15 .25 lineto blockend  0 -.08 moveto -.15 -.25 lineto -.28 -.08 lineto -.25 -.05 lineto   .25 -.05 lineto .28 -.08 lineto .15 -.25 lineto blockend   0 -.25 moveto .1 -.35 lineto 0 -.45 lineto -.1 -.35 lineto   blockfinish } def/teeth  { blocksetup -.5 -.28 moveto .5 -.28 lineto .5 -.3 lineto  -.5 -.3 lineto blockend -.5 0 moveto -.35 .08 lineto   -.27 .17 lineto -.25 .25 lineto -.25 .5 lineto .25 .5 lineto  .25 .25 lineto .27 .17 lineto .35 .08 lineto .5 0 lineto   blockfinish } def/twowaves { blocksetup   -.5 .33 moveto 0 .13 lineto .5 .33 lineto  .5 .3 lineto 0 .1 lineto -.5 .3 lineto blockend  -.5 -.1 moveto 0 -.3 lineto .5 -.1 lineto  .5 -.13 lineto 0 -.33 lineto -.5 -.13 lineto closepath fill  grestore } def/threewaves { blocksetup -.5 .38 moveto 0 .23 lineto .5 .38 lineto   .5 .35 lineto 0 .2 lineto -.5 .35 lineto blockend  -.5 .08 moveto 0 -.07 lineto .5 .08 lineto .5 .05 lineto  0 -.1 lineto -.5 .05 lineto blockend -.5 -.25 moveto   0 -.4 lineto .5 -.25 lineto .5 -.28 lineto 0 -.43 lineto   -.5 -.28 lineto blockfinish } def/wedge { blocksetup  .5 .5 moveto 0 -1 rlineto -1 .5 rlineto blockfinish } def/star{ blocksetup 0 .5 moveto .3 -.4 lineto -.47 .15 lineto   .47 .15 lineto -.3 -.4 lineto blockfinish } def /cartographer { blocksetup -.5 .4 moveto -.5 .5 lineto .5 .5 lineto .5 0 lineto   0 0 lineto 0 -.4 lineto .5 -.4 lineto .5 -.5 lineto -.5 -.5 lineto   -.5 0 lineto 0 0 lineto 0 .4 lineto blockfinish } def  /checker { blocksetup -.5 0 moveto -.5 .5 lineto 0 .5 lineto 0 0 lineto  .5 0 lineto .5 -.5 lineto 0 -.5 lineto 0 0 lineto blockfinish } def /dot{ blocksetup 0 0 .5 0 360 arc fill grestore } def  /diamond { blocksetup -.5 0 moveto .5 .5 rlineto .5 -.5 rlineto  -.5 -.5 rlineto blockfinish } def  /right-diagonal { blocksetup -.5 -.5 moveto -.25 .5 lineto .5 .5 lineto  .25 -.5 lineto blockfinish } def  /left-diagonal{ blocksetup -.25 -.5 moveto -.5 .5 lineto .25 .5 lineto   .5 -.5 lineto blockfinish } def  /rect	{ blocksetup .5 .5 moveto 0 -1 rlineto -1 0 rlineto   0 1 rlineto blockfinish } def/ball { gsave colorchoice .05 setlinewidth newpath translate rotate   scale 0 0 0.5 0 360 arc -.5 0 moveto  -.4 .4 .4 .4 .5 0 curveto .4 -.4 -.4 -.4 -.5 0   curveto .5 0 lineto stroke newpath grestore } def /squiggle { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 0.5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0.0   curveto stroke newpath grestore } def /swirl  { blocksetup -.5 0 moveto .25 0 .75 .5 0 .5 curveto  -.75 .5 .75 -.5 0 -.5 curveto -.75 -.5 -.25 0 .5 0 curveto   -.25 0 -.75 .5 0 0.5 curveto .75 .5 -.75 -.5 0 -.5 curveto   .75 -.5 .25 0 0 0 curveto fill grestore } def /zigzag{ gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto 0 .5 lineto 0 -.5 lineto .5 0 lineto   stroke grestore } def /roman { gsave colorchoice .05 setlinewidth newpath translate rotate   scale -.5 0 moveto -.5 .4 lineto .3 .4 lineto  .3 -.25 lineto -.1 -.25 lineto -.1 0 lineto .1 0 lineto  .1 .25 lineto -.3 .25 lineto -.3 -.4 lineto .5 -.4 lineto  .5 0 lineto stroke grestore } def /heart { blocksetup 0 -.5 moveto -.42 -0.1 lineto  -.52 0 -.52 .2 -.42 .3 curveto -.3 .4 -.1 .4 0 .2 curveto  .1 .4 .3 .4 .42 .3 curveto .52 .2 .52 0 .42 -.1 curveto  blockfinish } def% following are functions used by rope.... procs for pathforall/movetoproc { % move function  dup /sby exch def %start-block y  /spy exch def        %start-path y  dup /sbx exch def %start-block x  /spx exch def        %start-path x  sbx sby moveto} def/1stlinetoproc	% sum total length of flattened path{ /esy exch def  /esx exch def	% stack: xcur,ycur  blockdata		% calc segment length  /totdist totdist dist add def  % make next seg start pt this one's end pt  /sbx esx def  /sby esy def  deltax 0 ne deltay 0 ne and  { /prevtotdeltax deltax def  /prevtotdeltay deltay def } if} def/2ndlinetoproc	% draw blocks where necessary along flattened path{ /esy exch def  /esx exch def  % stack: xcur,ycur  % calc segment length  bdflag false eq   {blockdata esx spx eq esy spy eq and{lastsegdist}if}if    % draw block if we're far enuf along path  offset ldelta add dist le    { % calc avg ang of blocks this segment	      deltax 0 eq deltay 0 eq and	{/ang 0 def}{/ang deltay deltax atan def}ifelse    % correct for sharpness of angle between adjacent segments     % if offset is negative (120 - experimental inclusive angle)	offset 0 lt 	{/prevang prevdeltax 0 eq prevdeltay 0 eq and	 {0}{prevdeltay neg prevdeltax neg atan}ifelse def	 ang prevang sub abs dup 120 le exch 240 ge or	 {/offset 0 def bdflag true eq	  { % if we've reset offset AND on last segment, refigure distance	    % for last segment again		lastsegdist	  }if 	 }if	}if    % draw as many blocks as fit in current segment	offset ldelta dist	{/curdelta exch def  % current dist into segment	 /ldeltax ang cos curdelta ldelta 2 div add mul def	 /ldeltay ang sin curdelta ldelta 2 div add mul def	 bll2 blw ang sbx ldeltax add sby ldeltay add drawblock	 /offset curdelta ldelta add dist sub def	 % stop drawing when space needed for block exceeds that available	 % this segment (factoring in amount for PS roundoff errors)	 ldelta offset abs .001 add gt {exit} if	}for    % retain current ang info for next segment & reset it	/prevdeltax deltax def  /prevdeltay deltay def  	/deltax 0 def  /deltay 0 def	% start next seg from end pt of this one    /sbx esx def  /sby esy def    }if}def/1stcloseproc  % close function for 1st pass over path{ spx spy 1stlinetoproc}def/2ndcloseproc  % close function for 2nd pass over path{sbx spx ne sby spy ne or{ % due to diffs in actual block drawing path and 'flattened' PS % path, final segment can be off by accumulated amount. Correct % for this by forcing enuf dist to fill final seg with blocks. /esx spx def  /esy spy def blockdata  /bdflag true def lastsegdist spx spy 2ndlinetoproc}if}def /blockdata	% calc stuff needed by 2ndlinetoproc{ /deltay esy sby sub def  % get segment distance  /deltax esx sbx sub def  /dist deltay dup mul deltax dup mul add sqrt def}def/lastsegdist  % special case distance computation for last segment{/dist dist offset sub ldelta div round ldelta mul offset add def}defend   % done putting things in ropedict% end sample AdvUserPrep file for FreeHand 2.0./currentpacking where{pop false setpacking}if/spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 0 0 0  (White) falsenewcmykcustomcolor]def%%EndSetup[] 0 d3.863708 M1 w0 j0 J0 O0 R0 ifalse eomode[0 0 0 1] Ka[0 0 0 1] kavmsutrue fhsetspreadallow237.5 489.6999 m237.5 560.6999 L308.6 560.6999 L308.6 489.6999 L237.5 489.6999 L[0 0 0 1] ka[0 0 0 1] Ka0.5 wb282.7 543.3999 m286.8 548.1 L283.6 551.2999 L258.5 551.2999 L258.5 553.7999 L256.4 553.7999 L256.4 555.6999 L256.4 556.2999 255.3 557.1 254.7 557.1 C243.3 557.1 L242.5 557.1 241.4 555.6999 241.4 555.1999 C241.4 538.3999 L241.4 537.7999 242.5 536.4999 243.3 536.4999 C254.7 536.4999 L255.3 536.4999 256.4 537.2999 256.4 537.7999 C256.4 539.7999 L258.5 539.7999 L258.5 542.3999 L259.7 542.3999 L263.1 545.4999 L264.9 543.6999 L268.7 543.6999 L269.3 544.3999 L272.9 544.3999 L273.8 545.1999 L277.2 545.1999 L279.3 543.3999 L282.7 543.3999 L[0 0 0 0] kafntrue eomode287.6 531.6999 m289.7 531.6999 L289.7 529.7999 L289.7 529.2999 290.8 528.3999 291.3 528.3999 C302.8 528.3999 L303.6 528.3999 304.7 529.7999 304.7 530.2999 C304.7 547.1 L304.7 547.6999 303.6 548.9999 302.8 548.9999 C291.3 548.9999 L290.8 548.9999 289.7 548.1999 289.7 547.6999 C289.7 545.7999 L287.6 545.7999 L287.6 543.1 L285.3 543.1 L282.8 539.8999 L279.4 539.8999 L277.3 541.6999 L273.9 541.6999 L273 540.7999 L269.5 540.7999 L268.8 540.1 L265.1 540.1 L263.2 541.8999 L258.8 537.4999 L262 534.2999 L287.6 534.2999 L287.6 531.6999 L287.6 531.6999 LfnUvmr%%Trailerend  % FreeHandDictend  % FHIODict%%EndDocumentV1`65N1`65F M1`65/AB 130 130 w1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654350 3053 (CR) 0 16.086365 105 0 1 A1`654452 3053 (YPTOBYTES) 0 16.086365 447 0 8 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 3053 (T H E   T E C H N I C A L   N E W S L E T T E R   O F   R S A   L A B O R A T O R I E S   \321 ) 7.445709 1.841431 2956 52 91 A1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`653306 3053 (  S P R I N G   1 9 9 7) 7.445572 1.841431 744 13 22 A1`65O1`65N1`65F M1`65/AB 130 130 w1`65null 0 _paper d`654161 3053 (15) 0 0 75 0 1 A1`65O1`65N1`65F M1`65/AB 196 200 w1`65T g`650 0 0 (Black) 1 _rgb d`65350 -2503 (Extensive Revisions to PKCS Under) -0.020462 0 1476 4 32 A1`651827 -2503 (way) -0.020462 0 190 0 2 A1`65/AF 200 200 w1`65350 -2395 (RSA Laboratories is in the process of revising its) 14.582916 0.09201 1750 8 49 A1`65350 -2286 (well-known PKCS \(\322Public-Key Cryptography Stan-) -2.708374 -0.257614 1750 4 46 A1`65350 -2178 (dards\323\) suite of documents. The PKCS standards) 14.582916 0.590088 1750 6 45 A1`65350 -2070 (have been developed with the assistance of cryptog-) 0.470825 0 1750 7 50 A1`65350 -1961 (raphers and developers from a large number of com-) 0.691711 0 1750 8 49 A1`65350 -1853 (panies, and the current versions of them give devel-) 0.976532 0 1750 8 51 A1`65350 -1745 (opers guidance and standardization for a variety of) 9.067856 0 1750 7 50 A1`65350 -1636 (cryptographic tasks. The PKCS standards are a key) 6.100449 0 1750 7 48 A1`65350 -1528 (part of important security-conscious protocols such) 7.153152 0 1750 5 50 A1`65350 -1420 (as S/MIME \(the dominant protocol for secure email\)) -2.708374 -0.11879 1750 7 49 A1`65350 -1311 (and SET \(the r) 9.901016 0 537 3 13 A1`65887 -1311 (ecently-developed pr) 9.901016 0 715 1 19 A1`651602 -1311 (otocol for per) 9.901016 0 473 2 13 A1`652072 -1311 (-) 9.901016 0 28 0 0 A1`65350 -1203 (forming on-line credit-card transactions\).) 0.046921 0 1397 3 41 A1`65350 -986 (As of July) 7.694763 0 344 2 9 A1`65688 -986 (, 1997, the PKCS series includes the fol-) 7.694763 0 1412 7 40 A1`65350 -878 (lowing documents:) 0.052078 0 634 1 16 A1`65350 -661 (PKCS #1:) -0.061035 0 333 1 7 A1`65/AC 200 200 w1`65775 -661 (RSA Encryption Standard) 0.101318 0 824 2 22 A1`65/AF 200 200 w1`65350 -553 (PKCS #3:) -0.061035 0 333 1 7 A1`65/AC 200 200 w1`65775 -553 (Diffie-Hellman Key-Agreement Standard) 0.079346 0 1296 2 36 A1`65/AF 200 200 w1`65350 -445 (PKCS #5:) -0.061035 0 333 1 7 A1`65/AC 200 200 w1`65775 -445 (Password-Based Encryption Standard) -0.021561 0 1180 2 33 A1`65/AF 200 200 w1`65350 -336 (PKCS #6:) -0.061035 0 333 1 7 A1`65/AC 200 200 w1`65775 -336 (Extended-Certificate Syntax Standard) 0.050049 0 1189 2 35 A1`65/AF 200 200 w1`65350 -228 (PKCS #7:) -0.061035 0 333 1 7 A1`65/AC 200 200 w1`65775 -228 (Cryptographic Message Syntax Standard) 0.040955 0 1270 3 36 A1`65/AF 200 200 w1`65350 -120 (PKCS #8:) -0.061035 0 333 1 7 A1`65/AC 200 200 w1`65775 -120 (Private-Key Information Syntax Standard) 0.01384 0 1312 3 38 A1`65/AF 200 200 w1`65350 -11 (PKCS #9:) -0.061035 0 333 1 7 A1`65/AC 200 200 w1`65775 -11 (Selected Attribute T) 0.097244 0 634 2 19 A1`651400 -11 (ypes) 0.097244 0 134 0 3 A1`65/AF 200 200 w1`65350 97 (PKCS #10:) -0.061035 0 375 1 8 A1`65/AC 200 200 w1`65775 97 (Certification Request Syntax Standard) 0.056686 0 1201 3 36 A1`65/AF 200 200 w1`65350 205 (PKCS #11:) -0.061035 0 375 1 8 A1`65/AC 200 200 w1`65775 205 (Cr) 0.037155 0 88 0 1 A1`65863 205 (yptographic T) 0.037155 0 432 1 12 A1`651286 205 (oken Inter) 0.037155 0 322 1 9 A1`651608 205 (face Standar) 0.037155 0 391 1 11 A1`651999 205 (d) 0.037155 0 37 0 0 A1`65/AF 200 200 w1`65350 422 (RSA Laboratories recently held workshops in Palo) 8.585403 0 1750 6 47 A1`65350 530 (Alto to work on V) 0.858536 0 628 4 16 A1`65972 530 (ersion 2.0 of PKCS #5 and PKCS) 0.858536 0 1128 6 29 A1`65350 639 (#7. Both of these standar) 3.74086 0 855 4 24 A1`651205 639 (ds ar) 3.74086 0 159 1 4 A1`651363 639 (e now being mo) 3.74086 0 546 3 13 A1`651910 639 (dified) 3.74086 0 190 0 5 A1`65350 747 (to be significantly more general and algorithm-inde-) -1.3936 0 1750 6 51 A1`65350 855 (pendent than their current versions are. It is ex-) 14.582916 0.332001 1750 8 49 A1`65350 964 (pected that the upcoming versions of these standards) -2.708374 -0.198303 1750 7 51 A1`65350 1072 (will be used even more ubiquitously than their pre-) 4.137573 0 1750 8 50 A1`65350 1180 (decessors are.) 0.161942 0 449 1 13 A1`65350 1397 (W) 9.155045 0 83 0 0 A1`65430 1397 (ith the gener) 9.155045 0 453 2 12 A1`65883 1397 (ous assistance of Chr) 9.155045 0 728 3 20 A1`651612 1397 (ysalis-ITS and) 9.155045 0 488 1 13 A1`65350 1505 (Entr) 2.810944 0 148 0 3 A1`65498 1505 (ust T) 2.810944 0 176 1 4 A1`65665 1505 (echnologies, RSA Laboratories also held a) 2.810944 0 1435 5 40 A1`65350 1614 (3-day PKCS #11 workshop in Ottawa. Most of this) 4.969162 0 1750 8 46 A1`65350 1722 (workshop dealt with the content of the upcoming) 10.983154 0 1750 7 46 A1`65350 1830 (V) -2.708374 -0.359283 60 0 0 A1`65404 1830 (ersion 2.01 of the PKCS #11 standar) -2.708374 -0.359283 1200 6 34 A1`651604 1830 (d, which speci-) -2.708374 -0.359283 496 2 14 A1`65350 1939 (fies an interface for applications to use when they) 10.520676 0 1750 8 50 A1`65350 2047 (utilize a special-purpose \322cryptographic token\323 to) 14.582916 0.564255 1750 5 49 A1`65350 2155 (perform cryptographic functions for them. The final) 0.498444 0 1750 6 50 A1`65350 2264 (V) -0.002304 0 60 0 0 A1`65404 2264 (ersion 2.01 specification should be finished soon.) -0.002304 0 1647 6 49 A1`65/AF 194 200 w1`65350 2480 (In addition to the above workshops, RSA Laborato-) 7.572754 0 1750 7 48 A1`65350 2589 (ries held a PKCS #12 workshop in Palo Alto to de-) 8.426834 0 1750 10 48 A1`65350 2697 (velop the new PKCS #12: ) 14.145309 0.169876 942 5 23 A1`65/AC 194 200 w1`651292 2697 (Personal Information Ex-) 14.145767 0.169876 808 2 23 A1`65350 2805 (change Syntax Standard) -0.053879 0 731 2 21 A1`65/AF 194 200 w1`651081 2805 (. This standard, based on a pre-) -0.053879 0 1019 6 31 A1`65O1`65N1`65F M1`65/AF 194 200 w1`652300 -2503 (vious standard written by Brian Beckman of Micro-) 10.496231 0 1750 7 48 A1`652300 -2395 (soft, specifies a format for applications to use to trans-) -0.030365 0 1750 9 57 A1`652300 -2286 (fer cryptographic \322personal identity information\323 such) -2.627121 -0.058548 1750 5 53 A1`652300 -2178 (as private keys and certificates from one platform to) 7.820068 0 1750 8 52 A1`652300 -2070 (another) 1.273239 0 256 0 6 A1`652551 -2070 (. The final PKCS #12 document is keenly an-) 1.273239 0 1499 8 42 A1`652300 -1961 (ticipated by a variety of key industry players.) 0.015259 0 1450 7 46 A1`65/AF 200 200 w1`652300 -1745 (Revisions to other members of the PKCS suite are) 8.191223 0 1750 8 47 A1`652300 -1636 (planned for the near futur) 6.225433 0 895 4 25 A1`653195 -1636 (e. T) 6.225433 0 140 1 3 A1`653326 -1636 (o keep in touch with) 6.225433 0 724 4 19 A1`652300 -1528 (latest information on the \322next generation\323 of PKCS,) -2.708374 -0.61557 1750 7 51 A1`652300 -1420 (subscribe to the ) 14.582916 0.952057 608 3 16 A1`65/AC 200 200 w1`652908 -1420 (pkcs-tng@rsa.com) 0 0.952026 586 0 15 A1`65/AF 200 200 w1`653494 -1420 ( mailing list by) 14.582916 0.952042 555 3 15 A1`652300 -1311 (sending email to ) 9.070282 0 603 3 16 A1`65/AC 200 200 w1`652903 -1311 (majordomo@rsa.com) 0 0 663 0 16 A1`65/AF 200 200 w1`653567 -1311 ( with the line) 9.070282 0 483 3 13 A1`652300 -1203 (\322) 0 0.458191 33 0 0 A1`65/AH 190 190 w1`652333 -1203 (subscribe pkcs-tng) 33.254715 1.045319 907 1 17 A1`65/AF 200 200 w1`653240 -1203 (\323 in the message bo) 14.582825 0.458389 715 4 18 A1`653956 -1203 (dy) 14.582825 0.458389 80 0 1 A1`654029 -1203 (.) 14.582825 0.458389 21 0 0 A1`652300 -1095 (There is also a mailing list, ) -2.447174 0 908 6 29 A1`65/AC 200 200 w1`653208 -1095 (cryptoki@rsa.com) 0 0 562 0 15 A1`65/AF 200 200 w1`653770 -1095 (, specifi-) -2.447083 0 280 1 9 A1`652300 -986 (cally for following \(and contributing to\) develop-) 14.582916 0.020432 1750 6 49 A1`652300 -878 (ment of PKCS #11; subscribing is done by sending) 7.283356 0 1750 8 47 A1`65/AF 204 200 w1`652300 -770 (email to ) 14.874451 5.942001 385 2 8 A1`65/AC 204 200 w1`652685 -770 (majordomo@rsa.com) 0 5.941879 778 0 16 A1`65/AF 204 200 w1`653463 -770 ( with the line) 14.874832 5.941788 587 3 13 A1`65/AF 200 200 w1`652300 -661 (\322) 0 0 32 0 0 A1`65/AH 190 190 w1`652332 -661 (subscribe cryptoki) 0.026535 0 855 1 17 A1`65/AF 200 200 w1`653187 -661 (\323 in the message bo) 0.011627 0 648 4 18 A1`653836 -661 (dy) 0.011627 0 79 0 1 A1`653909 -661 (.) 0.011627 0 21 0 0 A1`65/AB 196 200 w1`652300 -445 (P1363 W) -0.009003 0 397 1 6 A1`652694 -445 (ork Continues) -0.009003 0 591 1 12 A1`65/AF 198 200 w1`652300 -336 (Intensive work continues on the IEEE P1363 project,) -2.681305 -0.090134 1750 7 50 A1`652300 -228 (\322Standar) 9.459732 0 293 0 7 A1`652593 -228 (d for Public-Key Cr) 9.459732 0 677 3 18 A1`653270 -228 (yptography) 9.459732 0 371 0 9 A1`653634 -228 (.\323 The stan-) 9.459732 0 415 2 11 A1`652300 -120 (dard aims to provide comprehensive treatment of) 14.43721 0.508163 1750 6 46 A1`652300 -11 (three families of public key techniques: discrete loga-) -1.938293 0 1750 7 54 A1`652300 97 (rithm techniques over finite fields \(such as Diffie-) 13.406479 0 1750 7 51 A1`652300 205 (Hellman\), elliptic curve discrete logarithm tech-) 14.43721 1.17128 1750 5 48 A1`652300 314 (niques \(such as ECDSA\), and integer factorization) 10.29335 0 1750 6 48 A1`652300 422 (techniques \(such as RSA\). The working group also) 7.807144 0 1750 7 47 A1`652300 530 (has plans for a supplement to the standard which will) -2.681305 -0.024979 1750 9 52 A1`652300 639 (pr) -0.021713 0 69 0 1 A1`652369 639 (ovide tr) -0.021713 0 259 1 7 A1`652627 639 (eatment of less-established metho) -0.021713 0 1125 3 32 A1`653753 639 (ds.) -0.021713 0 89 0 2 A1`652300 855 (The project has generated a great amount of interest) 0.612671 0 1750 8 51 A1`652300 964 (and continues to receive comments and proposals) 14.43721 0.208221 1750 6 46 A1`652300 1072 (from members of the cryptographic community) 14.43721 2.589279 1750 5 42 A1`652300 1180 (worldwide. The working group presented the latest) 9.528015 0 1750 6 48 A1`652300 1289 (developments to Eurocrypt \32597 participants during its) -2.681305 -0.041397 1750 6 52 A1`652300 1397 (meeting that directly followed that conference. The) 3.438614 0 1750 6 50 A1`652300 1505 (latest editorial contribution was thoroughly reviewed) -2.681305 -0.049576 1750 5 52 A1`652300 1614 (at the working groups\325 June meeting held in the Chi-) -1.800735 0 1750 9 51 A1`652300 1722 (cago area. The next meeting will be held directly fol-) -2.035736 0 1750 9 53 A1`652300 1830 (lowing the Crypto \32597 conference, and will review a) 3.122757 0 1750 8 50 A1`652300 1939 (lot of behind-the-scenes work accomplished by the) 9.148666 0 1750 6 48 A1`652300 2047 (working group members between the meetings. A) 14.43721 0.268036 1750 6 44 A1`652300 2155 (presentation for the Crypto participants is scheduled) 0.034821 0 1750 6 52 A1`652300 2264 (for the after) -0.008713 0 394 2 12 A1`652694 2264 (noon of T) -0.008713 0 335 2 8 A1`653019 2264 (uesday) -0.008713 0 220 0 5 A1`653233 2264 (, August 19.) -0.008713 0 403 2 11 A1`652300 2480 (The project maintains a mailing list and welcomes) 10.123428 0 1750 7 48 A1`652300 2589 (comments and participation. Detailed information is) -0.937103 0 1750 5 50 A1`652300 2697 (available from the working groups\325 web site, ) 11.121872 0 1557 7 44 A1`65/AC 198 200 w1`653857 2697 (http://) 0 0 192 0 6 A1`652300 2805 (stdsbbs.ieee.org/groups/1363/) 0 0.001266 916 0 28 A1`65/AF 198 200 w1`653216 2805 (.) 0 0 21 0 0 A1`65O1`65N1`65F M1`654 4050 -3023 350 -3023 F jbd^654 4050 -2810 350 -2810 F jbd^65/AB 240 240 w1`65350 -2879 (S T A N D A R D S  U P D A T E) 126.183441 8.569122 3700 15 29 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`654271 -1744 (The PKCS standards) -0.072556 0 700 2 17 A1`654271 -1635 (ar) -0.021774 0 76 0 1 A1`654347 -1635 (e a key par) -0.021774 0 410 3 10 A1`654761 -1635 (t of) -0.021774 0 118 1 3 A1`654271 -1527 (impor) -0.118652 0 208 0 4 A1`654482 -1527 (tant security-) -0.118652 0 460 1 13 A1`654271 -1419 (conscious pr) -0.173843 0 432 1 11 A1`654701 -1419 (otocols) -0.173843 0 245 0 6 A1`654271 -1310 (such as S/MIME) -0.044357 0 554 2 13 A1`654271 -1202 (and SET) -0.057571 0 274 1 6 A1`654537 -1202 (.) -0.057571 0 23 0 0 A1`65O1`65$1 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%Page: 16 16%%PageCustomColors: (atend)%%BeginPageSetup %%EndPageSetup 0.05 -0.05 scale6120 -7920 translate6120 0 translatebse^652.4 2.4 1 1 ps$65600 n`65/$1 bmt^65o`65N1`65N1`65F M1`65/AF 160 160 w1`65T g`650 0 0 (Black) 1 _rgb d`65-4706 1155 (100 Marine Parkway) 0.033218 0 555 2 17 A1`65-4156 1155 (, Suite 500) 0.033218 0 291 2 10 A1`65-4726 1239 (Redwoo) -0.083954 0 218 0 5 A1`65-4507 1239 (d City) -0.083954 0 168 1 5 A1`65-4344 1239 (, CA. ) -0.083954 0 167 2 5 A1`65-4177 1239 (94065) 0 3.666092 185 0 4 A1`65-3992 1239 (-1031) 0 0 155 0 4 A1`65-4532 1364 (T) -0.031998 0 45 0 0 A1`65-4495 1364 (el  415/595-7703) -0.031998 0 455 2 15 A1`65-4529 1447 (Fax 415/595-4126) 0.118408 0 487 1 15 A1`65-4513 1570 (rsa-labs@rsa.com) 0 0.002243 455 0 15 A1`65-4643 1649 (http://www) 0 -0.004959 302 0 9 A1`65-4346 1649 (.rsa.com/rsalabs) 0 -0.004959 418 0 15 A1`65O1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`6517 -1225 51.5 -4750 51.5 F jbd^654 -1223 58 -1223 -2575 F jbd^65N1`65F M1`65$1 tsi^65%%IncludeResource: font Helvetica/AJ /|______Helvetica T /Helvetica x1`65/$1 bmt^65/AJ 160 160 w1`65T g`650 0 0 (Black) 1 _rgb d`65-1002 382 (FIRST CLASS) -1.386688 0 428 1 10 A1`65-1020 490 (U.S. POST) -0.126953 0 330 1 8 A1`65-695 490 (AGE) -0.126953 0 141 0 2 A1`65$1 tsi^65/$1 bmt^65%%IncludeResource: font Helvetica-Bold/AK /|______Helvetica-Bold T /Helvetica-Bold x1`65/$2 bmt^65/AK 160 160 w1`65T g`650 0 0 (Black) 1 _rgb d`65-865 599 (P) 0 -0.059677 45 0 0 A1`65-825 599 (AID) 0 -0.059677 115 0 2 A1`65/AJ 160 160 w1`65-941 707 (MMS, INC) 0.110672 0 307 1 7 A1`65O1`65null null null b`650 0 0 (Black) 1 _rgb a`65F yy`654 0 1000 0 Qy65-1048 253.667 @m65-1048 783 -527 783 -527 253.667  3 yy^65@cp65@fp65r2`65 yyq65N1`65F M1`65/AF 170 170 w1`65-4750 2971 (Copyright \251 1997 RSA Laboratories, a division of RSA Data Security) 0.003342 0 2006 10 65 A1`65-2749 2971 (, Inc., a Security Dynamics Company) 0.003342 0 1066 5 34 A1`65-1688 2971 (. All rights r) 0.003342 0 350 3 13 A1`65-1338 2971 (eser) 0.003342 0 110 0 3 A1`65-1228 2971 (ved.) 0.003342 0 120 0 3 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-1050 -2503 (In this issue:) 0.026505 0 434 2 13 A1`65-1050 -2395 (\245) 0 0 46 0 0 A1`65-983 -2395 (Pr) 0 0.003983 75 0 1 A1`65-910 -2395 (oactive) 0 0.003983 250 0 6 A1`65-983 -2286 (Security: Long-) 0.084564 0 519 1 14 A1`65-983 -2178 (ter) 0.153931 0 96 0 2 A1`65-886 -2178 (m Pr) 0.153931 0 165 1 3 A1`65-723 -2178 (otection) 0.153931 0 276 0 7 A1`65-983 -2070 (Against Break-ins) -0.017441 0 625 1 16 A1`65-1050 -1961 (\245 Fast Generation) -0.10144 0 626 2 16 A1`65-983 -1853 (of Random,) 0.15744 0 410 1 9 A1`65-983 -1745 (Str) 0.203018 0 96 0 2 A1`65-888 -1745 (ong RSA) 0.203018 0 297 1 6 A1`65-983 -1636 (Primes) 0 0.031387 237 0 5 A1`65O1`65N1`65F M1`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb a`654 -1400 -3023 -4742 -3023 F jbd^654 -1400 -2810 -4742 -2810 F jbd^65/AB 240 240 w1`65T g`650 0 0 (Black) 1 _rgb d`65-4742 -2879 (A N N O U N C E M E N T S) 144.883072 8.569122 3342 12 24 A1`65O1`65N1`65F M1`65/AD 161 170 w1`65F g`650.524544 0 0.093355 (PANTONE 202 CVC) 1 _rgb d`65-1050 -661 (For contact and) -0.045471 0 542 2 14 A1`65-1050 -553 (distribution) 0 0.01123 400 0 11 A1`65-1050 -445 (infor) 0.062378 0 166 0 4 A1`65-883 -445 (mation, see) 0.062378 0 409 1 10 A1`65-1050 -336 (page 2 of this) 0.023758 0 488 3 13 A1`65-1050 -228 (newsletter) 0 0.02002 368 0 9 A1`65-687 -228 (.) 0 0.02002 23 0 0 A1`65O1`65303 -161 0 161 0 0 2.729373 -2.726708 -4705 954 F kHu$65i2`65t1`65%%BeginFont: NewsGothicBT-BoldExtraCondensed%!PS-AdobeFont-1.0%%CreationDate: Sun Nov  4 01:12:21 1990% Bitstream Type 1 Font Program% Copyright 1990 as an unpublished work by Bitstream Inc., Cambridge, MA.% All rights reserved.% Confidential and proprietary to Bitstream Inc.% U.S. GOVERNMENT RESTRICTED RIGHTS% This software typeface product is provided with RESTRICTED RIGHTS. Use,% duplication or disclosure by the Government is subject to restrictions% as set forth in the license agreement and in FAR 52.227-19 (c) (2) (May, 1987),% when applicable, or the applicable provisions of the DOD FAR supplement% 252.227-7013 subdivision (a) (15) (April, 1988) or subdivision (a) (17)% (April, 1988).  Contractor/manufacturer is Bitstream Inc.,% 215 First Street, Cambridge, MA 02142.% Bitstream is a registered trademark of Bitstream Inc.11 dict begin/FontInfo 9 dict dup begin  /version (2.0-1.0) readonly def  /Notice (Copyright 1990 as an unpublished work by Bitstream Inc.  All rights reserved.  Confidential.) readonly def  /FullName (News Gothic Bold Extra Condensed) readonly def  /FamilyName (News Gothic) readonly def  /Weight (Bold) readonly def  /ItalicAngle 0 def  /isFixedPitch false def  /UnderlinePosition -84 def  /UnderlineThickness 65 defend readonly def/FontName /NewsGothicBT-BoldExtraCondensed def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/Encoding StandardEncoding def/FontBBox {-152 -236 1097 963} readonly def/UniqueID 15530871 defcurrentdict endcurrentfile eexecA2951840838A4133839CA9D22E2B99F2B61C767CD675080AACFCB24E19CD1336739BB64994C56737090B4CEC92C9945FF0745EF7FFC61BB0A9A3B849E7E98740E56C0B5AF787559CC6956AB31E33CF8553D55C0B0E818EF5EC6BF48162EAC42E7380CA921DAE1C82B38FD6BCF2001ABB5D001A56157094CFE27D8F4EAC9693E88372D20358B47E0C3876558EBF757A1FBC5C1CDDF62B3C57BF727EF1C4879422C142A084D1C7462AC293E097FABE3A3ECFCD8271F259833BAC7912707218EC9A3063BF7385E02D8C1058AC06DF00B33B8C018768B278010EBFF55AB98B872A2C9C85471BF96D293194642808E6CFB3CC09D829A74211107FCFF5935E38EDBC85C3E2D923B4D8D002BA2B78FCDF9851000AC48D2872A087D915D1431BEEF20208C32737C18BBF0C937FE392D11C5C2486A4C6B70F4AB84CD12D494F6508FCFEDABB7D05F440C22012BE9E02D266B97ECC65539E2F558BCDDBC7410BB2891A7515F3895835203963F8B1D7E5948A469973E1BE3B814B53F4E22A2887A7B357C2715BD34E12D730239DA298A9C1ADCFB209D8554D10088E0AC3A609528056FDA9C4182DEF1EDE372D39CE55B15F7425DA3D2272332DA431DAD7474535A2D640C61D7240CC797907A77F5963D01B2082F02B635B3FF22E3C6544E878775728623C6F9C5E42A45C3E6483BEA57418AE6AA4B7BB37992258AAE6A598A3F7C2BFF6F948001F842ECF1C5E1B8CC62980CBA4FED67A0DF10B9CEB4D93CA3BA6CED77D5DAC676DDB72DA724EB38083FED640C4AC9D2BB9BA99E017AEB467A9C4952B8F20A318C384DF286BAB5B78A1323D552D039CF322C2F15E48C023823400821FA68752DE6FE32ECEC3B0BD41DFE4671C1326736B34002D979F470E12852DEA92F474FDB1B1275C978A268BBB25B892B8065CB1F3853E64FBC69DA43263DFA4BA6892CBDABEC16DF41429FAE98888FBA9F50CB5808D80264E0130544EC3C0F85E4B8C56821A56410F924EFF778094290875F4614F6D86353BE2C7CF00D4A072EA4BC96A74E7370F308197A8BDF0C860F8B121FB90371CB6B7B9AA763F5E0C71547FD3CC0AB1B015547281E946E1FA5C91181E55A726D0B0C396D1EE2F23B4AC9EDF5019EACDA4452F8FA94EF07EC66921533ED21F14FFB061740608A868EC0D009A7B54695A4C744286FB6B2E94899EB64632398DA55938E4DE4E66AABDE42F5C0EB16E8A106BF35FBD24A9ABCD0A5F6682FB65D5A6792F831EE2C348FEC738F4164D9AF89DBB94EC1A5203B9743DC0203BB42E29CF3ABA8441A595EB76C475AFF4CA627518C069D91C9E77B9A62C926C8C446B77C24D074E47393EB431961A8839074F714732ABAA983A08CAD5C8E447E59778505546E08E03374C0690B367D4DE44C83F90EA5D926197C411E3E790427F47C5F3D0863779E813A1008059E0855C02ABDCC3344A3630A11CA331C30AE96D9BAE2075E202BCFE277369657F46B5B73F69D03C4BDA2D2DA44135D54FF9A77E1DBF5364A412C16591939B40B4DD496CAB6FC841876E63E8E3B62DA36183F894284F2ADE5C0C4450E70925352E4BE4A230200A733F16F2256D1EB3DEC65BB10E2384825C58713A806CA9C60D202699A1A44B90D2A5F16F7263D18FAF7E0C86F3C90D7469F6E0285BEF84A7A088E9C1122555CF98D1E3F48E383AB3F7B204DBE94802B2A873AC59C45E0F78F91B5EB25079F8A2381521CAB7A1FA7A9F5FE54C3765B43DD1AB260E8C99C61AA7B20425B4E35DF8BC2BF42C838D43CFC784A0EA1AB5B13A4DEAA2FD4FC9B418B5B25C1872038FF48C2017274B4500D7B2E6B7FA17669C55D6E101A2C17BD6B8D5F1B638172DBFAFC77D26992399D55B5844CC171838284B9D2274041BB5E3BAF9334A0C9980724808DA3B7FC06F8FE46EB76DF72A42143CD2857029F7D4501C5617580E39085D8188BC8F5C2C0F246366BBFEE042505F3BD5D0BC3AD548F32B6BC5EC4AD3C502C80F90E35E27CB53B25F48EC7C899B385BA16EDD3911D02F4C2284936FA10E7EAA32729BBE7843DA5516AB5313D477AF85C2B1EB627AC98CB7A091E53190A3015450F980B3F7D19028ED619B812931CCF5198A3A4F1712E33A1FFA8D0D1B9AAD7240BA53C404E04B2F4279001DF10832770B8192F37405D333EEEED7973E1774DCC578472446881C3029D9AB0A75EF8759DCB3695F31763FC442E8A73E6479F234FF6C2A44BD912FE86CD46C61A37E638AE00339E9545BAA206F0DA894FB5566D393B3431CDA8B3076C697C357AB93495C0672EB1A4DF54A2CCD62AD95BF560E4FF8C563E83FCBE0350500410F2EBAB19C9AD30841CF34610028317C0E77CD20D6579C72B4A3C165AAE517D26CE2168ADE7F53D7CFCCC782EBE3FFED2F5728D9F7E392A51C08D9C4B63FE7983B56D8452C81A19D67BB4CA433F614D367DE226E69B89CF9D5BEE6EA025BC510780AF47A42D91F5C26F210CA184284ECCB442E6D553FD77EF9ABB118E6BDF8B77F9D82DF6B09142B44FA2589DEC319E8A1E67D3AF7D3F487CC54773A0DB8B94F5F48300943DEE9A1039D017DAE2B0D570DC21285EDB9CCBCE4D01173262C7560CAB183D677F80028A43A876228FD2C980F029641C260C78FF226D20667B7B37FEE0548A107B32ECDFD9C0B72FF9204CCBF041121405C53B55E61ABA1F40429EA62FAFF1503D2B36A84FB881BB190C5450680D9933CC0BB1903883C79BE00C1FC58FEE11C27D5FEB504D2423E8FDB436E9CA63D74F21E79DFFFE0BAF1BD55E0FB15210CD1260974E84B5E9380FD8A194F0502AB32E2DB67162FACC4E5950575AED5FA882980F0914C718E401AEBC2D707D00ED1D4AC55BFB5357BFD27EF7425A0C389121791B8545BC4760AEA1B248CDA3B9981ED62AA00E99C9B89F28C42DA41921C96A427B9A41A37139E6E868A53FC0D556C5790EDB3056DEDC8EDF595C2E1F9AECCD127597D1148C57D17C0098C952B3A1996F9A563D3AE2BF81F8C37008484AB6E8885BE89B67AF5E1F99059F10C630E598E27BB2A1F9E53C014169A39946B307265BB0D8BB48B393A80B331478D0C5278591FE9AD48DD873CF5DB3E5E4DA5A4EB246DFCBBD6E63AE338CEF4EB97971B44EBFD9613091EC249AB3545C711C329766F63FC44EC7041DF23ADD7E58713D406717E997C4288FAE73BC9E1262434BEFEA8CC4573F39981C8F9260D00EB74CC4583A94F44330D43CCF488D7AE53F5603AD9BCF69D74022D7383624AF036741AC1A7A00548DABE57A15AC02341C984949B83CC34025D90310C25A30DF623CC2170D51424006777A32F6D25368033806C6D7D06E2FAC346E9D9ABD05C6CF16031167072F3C44454C98A61725F8CE5847F7412AE59397788700BDF1A3E4535E8E8384103CC539584AE657F1FC1C73490ED30CA3BC6C343DD22A064364F15AB47287EF100A5D391A772EA7B5C93EFFA8ED56B7A43A78A2D6E58FF3198787815D304F0260DF5C357B7200A5141ABA3802CADE132E7A617608B21AC41C81C5DA1421AB8EE45360CB7D808F3802EA7544D117D164724BCACA3F81AB69CA9C20B62EA80134C84F1FEE5AC5CD3E1BA02686823141C208377BF1DABD40124F12B5FA26BE079994757427EA3A712CCC0EE9B31C45D0C9EF8CEB0142FCE397462921829B349A8D89D4D517A56004160ADE08A86616EAD072489C6338C6685588248864B16279C428DEC76AAEE492407F9A2AE730EA850FC3533BA85383C13C77C44CFC3764FA1956E7FDFC83EC17EC417214D33FA213575C770BF2C4F9BB87964812579D27486D6E9BC60ACBCD439148EBD65D8D583906B6D6DC7D74B554AF78B375CE1EE3D8A6E695473D003CF8378A0BF7FC4E5CA807B875F91CA36D8FD98487AF1612452C3117FB6C9356C1224EE53A6A53613723FCCBDA11FF304C4411C62D483F0969406EA33DBE40D138DE32E8380DB2E2260A03C052D4A72DAC811857A57EFDD0A99A0262CCEE84184E0C271D0E1F3333F2DDE22710B9070531567B0ED2230C42F49A6E6EF77CE8A5DC71DBAC07ACAA36C9D1D87962D344C76A43ECB36FD5929692E54320EF48E127CCC37951FDB5FAC821BFDF2BBDFBC1C31CDE26A0B7A27F0A3B1E9C679569AB030B74F17D0E7118C8CB8C8CB127303002CF5697ECF51C081E8B5C71EFFDF00FB37949B914A834825AE03AC88FD506DE43CEBEDCCC3AC5F42CDB3192976164198006606B143CC272FAFCE864D30F0C127D91BC5B91AEC17C9BE23F4D46E208EDE9E9B8F3DD9CAF43F98295357E57CD8F3FF013DA0A4DEE85A79F61CD7450CDA7E512A398FC6C5E46D32E569662AD9114C95AAF13A3E778163BA35B7CA82B6640CE04DC0949FA672223307E3F2F8F3E254827B830CC89E14B834A3969BA7098701E101DBA5164513827F804E0399913BB7F16EE000E31E85739B44D1D960533BF8C3740F8BD2D77AC93DBA4C76E8FF2A8543A104A060A4496501444B8BCB5616E9B03E301C72291EBB112E93EC08386B24BDB050841A1FAF6753D573D766E9C50A26BEE2B22F0DF9C9C63C4FB42D5A44F802C470C8F9697C19946058471CDE2C6272E155AE4E96E4EC6568DCFB1B93C6A2E2FB4A82D1C47CB174F5AC0E3FF013C70774B5FEE56501AB6733E9A2DD2D58F216386736CE73881B803EE83901732F042EB1F6A7F5C436C01BFBD3E3C03AA28CDB92AAEAC9D735C0999661DAD35094B8BF3068551FECC90EBED21D6C8D3ADB6FAEB1827C4D2618007F459F5B5B36BB052A6CE3F1C20242DE3EAC5F907FE592D14ACA80A4495D9608EE4DBB89172337C6DE822ABE5AB073A95356750445899509777886AF364EE8CD61CC8A6AB2BDA2498F3072995846421BDF9D5C7510EA319A5D6844A84829EF58B84C3AB35AB9F45D9C5AFC166264F71A2E77F1419DCAF7D7CEC1C3A65570E748B5BE0C071E2F88C7A1AEE0FD4CC02876893EB567CACF54736B1AA23B58B71CF6944FDAA9B66B2A554610671D3927F7088E8D42C2A174C432F96933EA9DE66F5E594950534A7A36BD8D6B57705902FF70F8131CAFF56A1A6A0BEBA3ABAC31825FA49631D63587F724BD856DFD80DDF450CE2B5969D35479A0146DED2F46865A8315C983F8F547EFD9800F984ECE7C3F03BBFE962E94A11101C8813CF46806A50BCAB883ECE828B16396E29C438C3EFA69FF4DE1CC26C0D1CE6BA47EA4003D4E3A31D8985A96349AA5FAA969F02F1C756E47869A64E63DA9942D80AA6415EC9F41F38A52D82543409E4ED8ACE73C6375E24CF68A70EA1C9653A845F6E4F58187B59ACDB0B311BC6D5FFA0C6EEBADEB7CF1ACE06FDCFB4A3102A15A965EF4E5E826B6E3D2AB73BA6B94419F2C90F3E9CC84F36DE892B09F1C9B24729B982F9F4DE31194F4302D7DDA5B6C6981C0282B65265F815F8E6A65141782F7F37CBC3EF018A13C1A510637BEF21F0E4C7846359172F34958B1C1E55FBE95900BE1C868871606D4EDB57C18E0DB0B0BF5BA1AA884148EFCF6190AAD361D461F6FF58A46BBCBC8739B11C8B58D8854D55FC9901A1D6BE40DBD21C84A94F3A1B294CA7A16F98AA10C1FB7EB8969748EBFF82554F18F3C63590BE79B42D1264348198CE6A6F6DE6BDF039B0A3DF63E23786BF1DA140654BE8341EBF38BB208AD40339EC3A4D665D327D81AAD4C8589FA44CFEE3C49CEA7F3B081D3EFD803E12F8C43E80B1B4FE12CA0632E50D327FF890E6D1C9D52968C5AF56E7C24BB6B296A02FDD67275C2DB1DABD6808F63FA77657DF760F2D15C1BAD264A06E0D1CE25805870C5CD32B0778E8CFB1B87AC2CACF43305D9A6302F178F31746226EEEA79A9F382EFFBF86047BC3750891D3D73A91D112C82226E860FF493AD4668CDB621BD851AC1847E439C540E5FD59DCE65B7952CFF82464978BF450EAC43FEC00F1ED5A219CCA0F7DF9459EF867FE07E5CFC49BD57D1EBAB2C8627F089D26DC9FF5AE8260FF9EB92DD0AC29EA3CE918BFAF42105487CADDB4A6691A776ABE8B76CFCDF68CFAFDA574A6133A4A6603241A899B2A53A401453EE5500A91D35808182767A33CB425C2144843E274852C673ECC9BAF899A2EB0A90AB660279B182A2543A8F4068525BC8BF98FE17A1BA82328AEAE43EC1A6C407D21C473D9D90CD7ACB9E6D1DCE563689ACEE1D389F3E268A2AB3A25957BB013F9171F43C666C2434AA603AB8506A44D56767AECD5B71C4B9F6DA039F56182327965F9B5305B6B5F11AEB40381A2489DC4FA46FF6626CA0D0420A248667317911E60BFC3487013A41B174992DAC6D42CFCCAFA47248318F587FFCCE76A48556EAE965C757963227AB13409EA22B09A4582A92B3447860859419205FF185A713D0C56625BA97F047A768BD85A2F71B8E9D742BEA457DD32150BA0811498B5996542F152AA84C8D6A54FA78440B9117C61C187FF1E13C47706AFC8BAF8C4D4B1652A9F5701A563A6380DF6A66030781DAAA348122ED55883975893E6F73DA86413B7E7BAF1C72E3B822DB6E66B0228FB7FEA088AA2EDDE818CF637F1DEFF17565D1F22B1B093CBF8E07654A5104D6528508C0A8FFFFE1182B2743D3341F40AB2D5B15CBE94DB497A2E2412DA10155F9CD9BC225ACB8C5516B238FB4D2B2C08FA92E88831AE333A8F384940F4AC04CF53A4147B1C897076DC6CB62103814D84E7C8881A9C97136056ED48C3DB4501ACD396938F57F9A654F1B51140C272ABA3CC1697D04F8D9795D11CA46D6A6DA042C99FF27D8244C9BF7E7B8B276E8C45749E7503417D71AC1FDBA44250FF40E43CE0E8526B816557B314EB856EA0B7856D540B9268951AE256AECB5608D3A1D3368E9A4E5B38FC6AC8F73DE2BC00E681D124DE7EE38768FA01F08D85B503E6CCB0EF3247896CE266765CBC5EDCB32809186435B0E0698CE2576A696827A218BFBCC83A93ECA395340BFA16EF63EE1C25DCBA45FF2A85DF19616994AA6610855E4BDBE3868905232A3737C532B8B6279FE2FDA87240970F1E7A315514DCB869E4BFB8393CF1DB3773F4018D73AAF5DC12CCEAE4898BC6AB44B2403F319F99D02960F7C3EA91B365847C7834817B9A624711CB9A96DFCDAFA438ED305B32BECC0902209068FAC389AEA9E3540CDB3347F299DB50D4876CEEB60741E6B032B24CDB270878AA7DB4E22C487E2942E2E9BF90E3AB94CEAA6787E86EEA3B052DC9701EA25BABD1DEB09FD706B0E831D4152488587C947D9E99BAEFB623FA9A71B7C631CCCF53F147B4D2B788C29184143269630378D255E0F78F91B5EB25079F8A2381521CAB7A1FA7203C1ED2525A0904BC308D203C633D0CE43E26D4C89DEB9433C02DE7292834B1B5A7C2EA4E76B3BC76FD991EACB5FC23787AAD6751AFAE50FDC5A5E9D448F77C218897631519BF905CF540893DEF4DE939A67EECCAF1E56E5FCF4CDA16118608AC5DF9E068DFAA15D5353F1CE182BA933046599F72AF5193757CD8C698720BECF09BECE1B97483486C0D4C95FDBBEB869C08BACA4D27A1A55AD755232BB822AE9C22ACE3344324F1D37FB374B55E57553069A198A411452B0FC7626A4203E5412568ADD282F473C7BA7BC3CC5FB074157D2EC4BB6372498CB6FBB2E92B200B037D6E1855B38508E2C581199E66064D6EAFAB6DFC3B5720618BA8D65B888AB9D8383A026D067F4BE91A9397B32DD031A532E286CB4EB269C0D380FCA5EB6956595540ED2C2C77239DECAFC00694F3248B678AE18A2C2849B35F157DA232DCFEE25DF4D795755C9442EAEF7C5085291997E13CE0135234A31FCAE2809CAFE4E5B39E83F3C86F9750C48BEF74D181895496A5705CFCE9F0EA241BC3CC4A4C9E74BDD196CB525D078BD60662EC3185A8F2048DB7073759579CB97B6C392AFD854844FC40AFCC661672940F6644A6112B66528C9F63F4BA80444364183E1E3BD67C4857B42DD17F19B73B44B45150CC892737D5F356C148480E3C24902B672E6B9D51A021F8A43740AD9D58D04258E8D92713F384F43E8F6C9E10E5C132BCCD859ED43320D24AB953D97105738FC25281E0F668871098260566EB0C68E167C1A118202D888373A67D5208C920206002F22C695773A03E082CB877F70FEAE7C4539FE904EDEE53696960537FA910F623A0BE21D9D789C7D42CE0ED7BFE0C94CAF9E06D0C489F68BAFEBF3857567DC58DFA2AF122CF56CB3F511D3A21DEB39D9B83BD6EC36DEB54586FBEA7BB5AC25E69D933EA3AA2CF780E35A2A5CB4A9BE8DCBD3C38D52C3D22FB709E5F547CC92B2AB8BCBF38306BB0A102F253F72303BF7EA2CCEC448F866C8131C2B6474EC9B81906AEBD0BBBA5E9EECE9B3B5FA70075A922C02A31E725F6CB08AF0FE1BECC3F977B42AAF23DF97C030FA862244AE5FBEC3242099C00DE470879D52F4B4B58826FFC9AB43B5EECE512CBC8FA12451BEF939B82D4D71BA9A42D12B894E2C6CE8AF3D90E9CA97B136FE6D18121FEF64B61880A18BB38BECD6B7CFAFE0DB0DFA32D5BF7D4B301E275987B1BA003F28CEE8BC0A3AD90AD2994C7EAD49BB12788C8FC175A1CC009885D32A0043B1952618D7190FBAED370592C9D1754EA0F0EB8F72440F870DA4B2D1B633B4DFAE52D1D912CD88AB213C4C69904D9079F56D231587B5A1B011F1738F0A9979D877795D8547404A025289720AF756116FFB0900DE8B48818787C50619FD9FF0ECB6095E34BFDC2C01A0A9F3D18FBBD724DA5120FF314940A5D2BDE78C9510749459B34D2DEF0C4948247646826C2B2267D8CA84D8B0E982A2355E4936FFEE83A114BF6888BF5799F5CE9F6FFB69AB1E696D758AE068FBF240EDB83477ABA86E9D83543BDD4DAA23DAAD59E8EA5B3F3A1DF65E9C270A8F0B16F721EEFAEF3CBE55FE2AB8929DCAC1519A3CC0D1464C0843E01B80AAE959C28E408A90634BAE0127A0A86C02817A43871409134EAE2E58FB143A28BF0C68B30375C0DF2F9222F006066C98B2382F1AF48939274A136F3BC09EC56B7EB624BE133B0817B79BA860D93FE15E72ACC92E88B6D6DE98B3A39A08709139BDBDC441D5A279B03CD283F2496D1C273B7FF85C1E5ED75E7A0EFA4AAF46530F82A3E585DC61E0FFDD170AFA4FAAF4FF9C056045F1CDEF998669C2A03CC595DE3272145A455B661E17DBE4F5891AB5E77A046FEA034ECC3FCCA3E51B813F2AFEB6203C5458675CA0F02575DA3C1546309899495CC9FC56A6BC272C5CC8A211F2562444FD3C46DA8ABB09D4492245171D09F049F53E45ACE8A1F4B214CB9C8FC106C2DCBBE85110C75FBF73CEC5280880B86D28D84749735D9F16379A8CF88EC21FBB75B8530A55D4B0C1C2A6F287255097ED4FAA8287E44E7A74815937CB048E4BAD26E81012183C1D533CC2104D3D61C2ABABF4B805C20F292173FFBAD17092D6747CA2F9709529044AD38A354E369E5BFCC5D30C1F9C893EB698A15924FD6C535029B0048EDCA0F9AFC28115D599503A5C13F50CEA48BA45FBCEAE0F0502630884CA09F27FA6901D3572FD1C364939AB1E4ED29C359D43797C0CE920DEDD1E593BA94829EF589A24851C34017FEE2A9E86673AC999DEF7359A9CEC6C2BB64ADB976C44938B90C463CFD3A7FD859A6738BD1F7F54DB82BADA552BA5BAC347AC372A57476CF1B798AF9E00A5E8474120CABEDE888AE4DEBC35AB27CD5A1F14FAA5789FFED10B823FD06E9EAEC47755C82A71938A8DA5945ED412E1EDFFE33852D9DCD913B3A8EAF9BC67B578D2576724FBA5573337BF3A701C3CF8206B641EBFBA6B841C0CC6F9F61CE0B3C7A89E356AFE1D017804AC7C5E046439B24B73306ACD0939870BA53D9E6D6ED2EF64B348F45693F9E9E4078A809559DF7EE3C9D2575BAD14D095ECCC3257D0337335582BC30C609B1F52F2B65F9080BF199486238038CC147584C25A54EAB69FE32F853CF80EBFB18D5B5E99C2D0ED2C2F8EEDFE6750EE57485A8C5C2B3D5DCB5D09CF6EC67815D27934CD9F6AD2DB577ED439810A08AAB0C822D2A33FA1497D0E41EF4FE8600F1FF67546AC367A17B332D8A523B6840BD2987024D3243727D6447BE0C2D1526149C5B308596249B3DC8A309F8A2EB71F6177D5FA15DC8FD9F7F58957AF9DCF94E33712F3352BE6E5420E7182D74C8B92F00445AEFE627FEF042BDE7BF720CF5C09429CB788DE47070FC79D868A879D8A1A450F9F9C7EAE95C296E0365B68952FE9BE2696624F98600CA9BAD63A9AA0784581F5C1B6B67463B18AC67DF2D97A91F1ED3474291B997E9077FE81F8F4BA6615BA0B91ED1C890862AE3AE5552C1CA7780232473C53FF3ACCB88E325A6AFFE2F65EBD16FCADB55F00ABA624733F1CBF53694FF4502212760D1B363A66FA9FA34EAEB1EB6FD2B76E8A358D20F71C862C52CAD14A8141A3612B2DBCB172322B496CAE661FA6242DD60DAF66CE735122C136EBA8D584C4DE87C737719D6E7F170ECCAAB3E2D0F392057BEDA6AE2CD57D6C5CCF393A383238EE573E2A452A97ECE636E568E95C040BECFCAB9AAD85E86B07745CB5CC946DEB8CB21CC83DB1A961300CEF10A5E753492BDDD5735354EA555BCC3A81FCC99AC54D0DE885F50BB00C77F8E1C3F45D4A6DDCFD7A6F736DF4808E1DEE3F11D60C8C2CC7F7A5078D576091B6C4DB37769818C9CBD3FB92307CFD043935DC7F02FDA136FD501ABFD89F685158C8C5B522FEC98EA553F7DD66D38141DA122921AE686E0D4A9366AC6207D1CD38AF07519538968531B2525BD74D6E62890688033C878C1929F4A88D0C8A62663D6B561069BAF56DF3469302113C10C7C4F54C96FEC991D2408EF58642165B98167CDE8FA13D16F2EB1FE159AA214E5F92A1A03827A688E8FFE406B1C0C82B1E921BCC101D1061B6C7186813E84C41846E5AE28517DE870F3B142611AE323F8CAB75245C1FFDB72B0340F5A908006ADCB798809B5F30971D6782DD453BA55ABDA0545A5146950663E335AA15A1958A73680716E17F6832A19EDA1B8D5E36FB785784E0F16E70C4ED687054AE15B01F70C35AC95593E76DAB34778D3B6D5F16497CF2DE87C8801BA6A0E8B957B40E4D619F53049AEC490E0A21E542DDE9BDC335BBAE974D72477334CF4A8F0C0E0C030EC4923477E629422E96055595876ED040C93267AD80D7D0805EDE202762DE28E381EB1F8D8D4C05914227C2D87E63A8CB792971797FF81CB8BB337343198797F5D11C5BC1AB2C05EC22D3E24CADB417FC3B953E7F2F88BB7B020A41AC48E566B5620FD5B0AB6662C757462D5D1B948D015DE65512F76EF6F729E2EFF6853A6F158AAC05BC4E88269F266C389A4EA47F07442C859ED1F5BEB2A17DC6C8067874971985325749D4749758B44C59184BCB4F81E484426DB5FF06396D0751DCB2ED5A266E761DC0F08616FFD4C6CEAB8EFA2D7704FD1B67EDC3593ECD0A4B1F11108AF6FE36C6ADD319F4A9FD2A831AE638657A7D1B2B32FC9FC9A4BCF182CB4545B013B6B7A15B3508FEBB25488CA33FCEDD919E7E74470EA1FE4DB5B47A20BD739E39B03AD6213926E21662D8E1CEF2E0230F9658CAD6CECDDCA2C7727A848C5A278253421DEDED8C068F1B6755E37CD7BA2482FDC4034102DE4B2B2E794A94F92E43F51B117F7E8ED6D3DFAAC670690E29855C30D82177F2F088D5C8AE88094EBE209C544B1B4C7E77FF8A7171C70D7F3476D5094DBC46C49A3E9D1A93D8C5ABBA43D10F349796C58DD259C916CE4982A6E06CC826CEFA51485E27FC2B5AA92BE1AA1109E980BF46413DAF8161CBF5DB4DB5BB6FE2E31895E8B97007A546C835CE2E3CE47E4A0F49EAB4F5195A9718115C388922CD93181BAF90D01EA656599A605A8D2A99C1109C5FBAE8997BAE2D6DFEF77CB10155AF090FA9047A8FFBA48FB3D38E5ADDA7DC68C67EDDDE106956517EB6081C375900864C65B74173BFD121CD8D0028621BE4A9F8656E3A835B98D582717F715CBD87892B23FB8298E1344A6CBA7B968B6B3CB203A21888E25B6E2EE7B1776F9D14A27734F22996E49C6E63BA68D142AAD3C4771429F3544AA15BA12207AAFB19031A22BBC6057678B453A6BF150E3747054B318C4086B7B0382B72FEB6BD47C6F9A324B84A284CFF0CCB16664EEC721B1684529E9729C36EBC444EB17D828BFE30852EB08779004776B150EACED737492049F7DA6D78A4DA3E1C4CA1744AD8C0124D105CFE99B5DE5E48C1231527C8291CE679F358241EF5CAA8D55F03D6F01BC063B0C183F07EFF1A50E66F970762E21F017D2EE704FF9A41D72C6CE4D2C83690E32DD4C40A2CB7708E1773870E0B8B0DAC4612A485C39FF7C27EC4C5891EEA9F07560BC08F28D2B2188B6D6EEEC2351FE8E123504C9DBC3A599E862DBE742136F01C79D0203463F9953B6EC5EF71AE7D7E77F1D60FCFDA56BB23681EE1DBF954720ECC39115204A1702B9B5ECC636E426A9F4F77D1FD37996C682313BAAFF67B2EE7200978297986C2488A93DDDD2DAB8BEE10FCB3F1025A7291C7C074B3055F5FFEA05997C54C512865672A6193570394A1F126E233908D1F80D8B389CB9D52D7D871C72CBB81B7E79AD937FEF37EE9BF724CDF871956840492A23244197D756ABA8B768306C436D6EDD326F2DBB8AE589D9CEE75E52E2A3CDB5B46610E9F0575F4B061E248B7B1A12ADA82472A11C2D646A227254114C628C366EABEDB280E5CC3879D9EF7748B3DC7E5A3D111053CF1B0EF7E7AFF4CDE8D1F7E69F476810838048CC428ABA3FD3271437FC3B53602A2C174025B4AF2D9DF1FEC9A398685984FD9E717CA14163532C592D19FD3CFEA906D6518BE76E7B26F5E61C350A9F4EE7D0A955DB42ECAFAF619559A5AFAF137AF26D00ADFD556E3B8906DA948576F4A73D20FFD3CC7542875A87BC4A8B6810F14BD0118EAC554A0606F69DF4E0AEBF7677ACFA275764AF6935E1E4D5836A5CB834678F3C157BF22C12D9707D344A296B7EE90DAB861FA4E16E62ACC3C660A1CBCA5CAEB5DFDB1DA883438DDF3003B377175E0E18F379D21BD94EDBD2C61BFD4823074356D74D93331FF300355CF877008047DB5AB6255AC6962484E003A5C653B8E95CE32F6A42B44C8DE1ECE57EEDF6EFA865ECFE09F4B73FC8BE7999D64A32E88394A474AAECB28BEA23131DA6EC22ECEB779BB2D38C58531E5AF4BEC3F15A82EC621E0D054ECD3134EE52F84F17785D3E84CDBB6803F87AC5633C0BC57F1C0B64DF8E0871D00D181AB79164D7F798F6D88796B86AD7296B0538F96B28C760D032235D159D01B926EFC331CE568483F2CEB05F72C9B9EB6637F7479FBA5A0F039A0C7196B753822663BE3ED83ADE4DC810796E9628A38189D19BE5CCD8A66E6A8FDBFDEDFFDC75654B0F134129B81E9075344789091D7EA0B991E853518833B9C51955313A67FF381BA5D18E23C0500CF7CD54D10CC07BBD17C0E75FF3D7BEC3F328E705AB1EA71B4C390D8A62D6A05D6C0CA556C341C70A0F9B7779CBA771BDCA5114B62645902C841265B2AE693B9A1BEA097AA417EEA60603525D02165FFAFFE2C015E19549C861B21FBE8D4DBAB1D59FC45927ABBC36D311669441FD1D06606A2D302C91AF3159CF85B785ADBF51F3DFACC4D2164B97E5EF34B570457259B475044126403C6CBCA220A2C1221E10C6AB4C5E55E75313ACEA441D1FC00AB8C14EBFEA809D73785158704B897A5ED0AC615711C5C72C5A10E09725CBA79CA1A280A3D3AFFECF18FF8DE738330A3F0234F8791102E98E17FA565057070DF6DEED6DE686B7102916F448DD51F34557DDFA1423BA7FCD1EA7D13DCC6DB0161BAE01E635736A9AE88BFA448DAAF3AB32E24920D6295A663CC9481C79198585AAAF80687D6240133DEB1A4DBF4CB29773386FFF59FC73B1EDA656F31E5C4F820714301AD9ADAE6F05442DE54D4A7B6A301526AFE24EFE5C7F5EF00CB7B8B6E72A22EAE8C1628F3290437F871E13DB09BD4630B4C31E12D7AA7C48A130EE2F96F307CCE056DC8D61D120F3B664FAF1E085FA742CA38EEAB55B8C4FF4AADDF29C177FC520B84115356F72562D262949FC415FACAE066651BC3431D861DE981712368C4D3001B64DC491C2BB919C744E0268340DF477A8A48A8BDD8E1E467038FACA41950DC3A24E5C0013BFDA8379616263DAF87CA60288BA3481BE94C1D8558FBD82E6EE22BE530E2B8FA564D35A88B90BB51AA5DBF4ED148711DDE0659FB39BA652B4EFBAAF7E6E6521C07417D3338B3E88ADCAF5DA26566D502A70E5EA15F3C631C47C04BA2454CD28E03A9910A825CBC99D5C9DBCD8D39A76DECE79CBA91E2E5737B6553A15CCF696DC0193E8245F22E0A0B747A376863F92220BE30AF438779463FF7B9C1F9850938DAB0BA4E6811C6813D4C5D20A0F1C91532C8A46FE7E36B69BB599B776134CF7FE275E5962C4D07A2A3A8F1F4D8230C41B58838BD2D8FD56A789020B1CC497F2290E89DE8ED6A11416D84E1A659AE8CBCEC6C28012FF5A0DEC9E29F8EC01AE0B853A7F5BB1C31A9EC683E8A59722EB0923B0906730CC663CD98B0F6D1617594FAA48B949BB07DAFA1C301FB6DE228B1D57022196A790CEB99A8830845B1DD03D85FEAC905C3D83FA32ACCDACC05C67E51AE6A44D9CE47E5479E390AE67302583F65E8ABC45EFBB5C5A3F4FA8782B61367F79D46D8051FD6B193B9DB269FBAD3FFFB7B4830F261538F27E7C1C1E0ECFB04DB9525958F24BD7696325465722504BC509BA6D93D335277D0F59A8A7F8AF8F1EC6067431602127BC90091A438A09907C10CA9899EFA6D90C15F0B351ED7BD8F6265A45FA0AF3C84C99E9833D4014CF60E27B4F3EC119A87B1831A188E7AC7CF0C2F7FE86DEF99F4002A355E8685BF376BF610E55C56F15B59294A13F32E6784FEFE9BA15E50557891E29DFCAC305383BF6E4B5492916F21ED9CEA78AC0233ADFAB32407FCF1775679D174C51CECAD6A8C6046D910DF4E3D16403C6DCEF3A93FD9E649B83C666ED66A885392196291AB78C83AB12370B0541984DC0AF6040C76B18536888C82541237DD11CF1FE88E62888363FCDF76066BD33E19CF4F652E6040EAF5D64BB7DE2DCE83B2FC77D92425A6DEB444F5E4BFB33CD91DEAB198341A5EEE027F049B7B52C71C106DAACA9494AD2991AE9DE37E0B04B451D269707F9C01D35511613D360687A4B7AB106939344BA773F9E0E3CC47E3E2A738CA02E30DA25E0B77632AF633FBC7ED9BC9DCF160290FEC047822760AEFED15ADEF488135A206AA6AE4682812F04B6E33F755D3016B000C6227D3E7E343C85962B6E169FCE91E742E16E794BFA22D36C0FF7E3DCD1B72D26B850BE2BAD8755B218BA04CC3B762F9B8B6A4E5F8A7EE5A925195FC9295447E451B135956931EF755460CEF6C18492B7EAE580CE761748E7EC89698CD570CC8C2C6336091FE55C14D0B5AD57ECCDA19392132F8C2CF44A004E66202D38832F6D2E5338661A4339B25733B83636FAA3E3307131C1CE25320E7BDF5CAD4A3E1283E441B6CC24903D7A00FF348A5168C794D9D7B5BC423B142DA3DCEF9E8D5994CCD9D83FD9AAC3134503FE26AE22E8031B89889E01B9B0FC09223EE1FF652AB6AF7402D58A74D6AC188A8BDCD790AA616570E84983F32A4318AFC464B56AA171F960938DFADB1AA937FA1D1D94B3A2D4EABE26E1E50C0507BA85CB3C2E31F2A31305E8E5D87E1D64567FF3700FE9C5C7E3EA5F91837A155416B44A10214637EB9DDA86AD85F74E100A82DB2389B4657D5A6AD4F426E56BBA527A5374F85D43A74DC6EFF0C1D08D0141EA7CD685E9CAF909D5F48E3A60EC597B80AE3FB97C8CF8D84C7832A35B0083E925FB76DFABB78DA91894D6E2DF027CE2794C3EDF6687730A200703924489328434D3225E433FA728551B9D26674CAF2AACED1A43C6491796A8526A97E0C1297970EB6F253596AC633B08BBD434C6598632DDF4AB17FB54D746E3CF3A5D345AEB46F615D8C0A51CB96198EC921E6787B2C8ABE46EB806428AAAE07E7ED55FB5B299A96C59EF399EE70315CA1A53FC6A2F5911C69ACE9EFD8DA83D464FBC013C9F61C104EA13613F831219C61F1DD1A9ABE9E3B763971878FF09033E20351E0BB006ED758E96547BF1FA7C071EB2C726A88E67A1AD8820AC63689AC865416DBC972DC92073B0CE438784282E122D22640CB78F9497E23D136B8889287511ACB357918801683F00E9A536891E946480B529484CCBF0870F0301F9A6CE710031A5B4A72DF1038A576714043E3A037D74D8237F64A9DD6490EA379D480C97D82D22AE22FEDBECDAB401A2D2BA8D1C0AFC6636DF1B5169FF7A3BD0F46077915C883FAADD39FDBE00B6F716820FFCE46C8F4D9465C93D4C63001A415AB6078149023A00C623F8D5B9345AB8AD4902BAA8F413F0C1D8FFCE79945BFBB71A8F9F1BD648F598103B4EB2FF19F977AC575CAA27172299E20CF1BA154E23EBF49D55AD6DA6D6B8D3C169A8E50ABAFAA2A6F7AFFC53F9715CFEA736F7EA07B91DE652760F73D437B4C9FDC867002D773A974068E163978E923CB83A922CCB9AC7A61C62D769F14C5D5C5F164F394C4C82C5BC03E32AB2AF2918F5C2AA1A0E7D1911A2B2112C7B95D9340222229D04606A3EC2CEE433554C8AA6743FC7079429127560CC8AF14C08133C1F814D5BE81DFE6F86187ABE01731E57243A53EA779CE63CFD1FD1C3510EE8C2D9CB66496ED8E18F3E6BDC3EC7F4AABC8F79CF47D62C7DCC18CD905460432A4AF98815CC2E6B07C12A2D97AA2D3655EB3E91D7F1CF11BC25B11761DC726E38DD484DB19292FEAAFCC9E26869766EA5F5FD907D150573ED73FB0D48B7EB601FB91613A05A90F09D17C8361328FEE393FD2F78D750308C4F983E1AE7E210F3256E38050EA2CCE81EFC3193AD6D0B71228DA42B42A2355F876367172111E64B2E6F97586A3C573BCF553A37A27E7AF11F2D67B79CA3B3A2BC156DE2B084912462D08B3A7685FFF579E74F491FD86558B5D1781ADCDE40766C19879BCF23F00329B22F005479CA3451418950CD7B7C5D12EC98E0A80CAB5ADC22D8D2A8B876299464137B52C150F85E02C5AA2346EE80007222730224BBF249B8293BA952AC63222CB5D0692A6F3519A7D2453427205D26F03C3C1EDED5DEFEFB161D39A9B7C4F7065733295CE254CA616B4D2CAF66A27F2DAB7C837A42789A7A45288C22A6478517A9A90786D5F73B733FF9EA97925336293A922B21B60349DD905F7A5A3798E679FBC115B636E3A51F87565F216E1D3543E95E79B6D67BC92DE2ECE30E378A165618649B2C8CD5A06CFA6255DCA94AFF8C94ED1D5670D2E839C031F90F6E85630172AD501D33A5369073C4F603C6090D3D84BA9EC1519C05F2E89BD38FD440F226613AB8DE4E2A0CEBDD3A78F633AC9844BE6632AEF28C5026208BC6FD2B1A41DFCAF06C0ED66574B727E6E36B4D820E21112FE6D6E162A54FB3A197B32082E31E09CD586964E34592C08F52C183CEE2DF9FF583391DDC1DED94CEFB22A9CDE75647BB8469E3CBAEDCEF710F588E6DCDE11CD3623F4357EB236601165E28EACB236EDF66975A63478736D2CD1BE35399F2CC2BF50E86EEBF49DDA7F9B2DDF13F5909B183C4C1440C378884E9065860FF62ED9324BD98033C3686FE3BFA269AAA049E342EA89635486796E68C5380F53B985CC2669A73D0D403A44F422B807DBA29926AC21849DC5C68260378B8A218EFB61C81A2D35217C64408405984A102406D72852B10837E9E0E14A8007B64F6ECC2B367FC29B3C11B3CFDAEF6EAC3C9EF8C7CA6F9A2B861BE4B8B42F5BF2D772FDCE4FCE085AD4AD2941119957B67D49B8D1EDEACC3DFC847ADA5038F515551E7B7564C036AF9CC9518C42356341BD1B4B5F04ED8AE3BD78771FA7D474B806D3979C442F0C2B16EBFC2309A3366D80BE186DCDC43CB7D22D5F1A8056F198D54003FDA5EE4F3DB526CF130E03EDD363F8CC534F946064491EDD99641DDFA1DB63225A2786909FEEE57B619CA51DFDA26D0A48D6D9CC37D45AB7FF4C64792698A8488C08C3AA4B8D28CD5EBDE40DCB7C1AF0E9A6C973AD1FB1AC3609B90953D8DDC44A28E2C0B07DFBFC0FDEA7F042588437F29953202E1F9E784CB17E6D0E197105F3B78151374AE32ACB5527B0A6177059A6E28A8D77F2BC9435D312E4831F6147B137237B639C639E19D9CB1A0B7B01F967401A2C01F506C2E94D848C0C0BDF1D916F2B60D933B92987C3444E5D588724471043004906BEA4005F96C463CBD63C745E680D584243847B3AEE3552ABDA36C72F738095DD3A73FCB1641530CE25D96184D8BF930646729009D3BC66F501AA24FD468B173FA8E9D1A5644DAE011A74FC6C6499775AB180615D5E2ADFEFFDAC764CE5257DE1EE9F718C179041917273C2F5EBDC1105879A953F5E5D2D507E8509589EEABADA0CDF827E2729F633FE055046DA174AF429661B51378764EE2E394526560A65BE21C5BA818D943C9D0FE49C2E07452EFC2B9AC0862BCA3C7E51B9BB701CA0D01375752EE821B50397F9CD4C4C31EB06C7A7E49FABBF077A1341E9E6FAD58B813F0258FA3DF3BC55331D36C159D46E263E6DB6B3EA136379146AB8DA050A0C703BD97FE3CD4A2C36637F6ACCF9B7E0A9EA5145936FDF4D68AEC93DE9095DF3B6AAA8D3227A054CF2FCF8CE44181F9C8A9BB23D53E3BC14D127E68412D7ACDA593A8C64FD50BF59FF7490BDCC23C2583130A891EA1CA53CFEE5015E5A492985015CAA85BA1D941EF7D2026204B0A59CBA8119379CE9537F803845226D3A83C2F6BCF6D9647F48E5408D5386812AAD82FC5A4C79778A8E9CD1B00B481822F205544452CFCC7CF9E9E888F9858231B8E3FA648156F0488D88552D7730268A26F4EEA3C0CEBDA38629F946A5DEDA64F7EE4FCD9C24793B32FC77ED4F266DF973AC5E3BB759184C8E9D40FFB6EE6EF43A13225BBA213869E63220504A22345F7F25CACAABEF739E4380E080497807316A4D917E0C9260E13948A5D393B53980DDEBE2B521D3195B9CED8757EE70A44EB8E481435E9907169485BDB64C295B475FD03AA47F10D82C96BE9003329A82340825C9DC4D57D366E7F0F5E030450BC814E77B50F0CBC72341FF78736FF21568981E435694E5F65ACD3972F4E21E262B0CF65802DE30035875F12743D31E53ACC2A32959E8FC05D56F20F4E91FD1D044EE2F67F8AF68F0AD480DE42FEE74E6BCEAEB37E7094F368C05A5EAD60A55E196FD9342F20147D752F1CEA25DDF9FF5473E9F0576B5C4FD73FCD6E506C56C20992DA9618EBB10C211D44724C938BD7758B15CE87193BE2254B321FC589EC77ADA2E64296D3F0FC51E714B9E34E3F4488E2586E41B7F38D8C9B091F1560418186E85F72A67175E2D27042B0425C1A48D381D63F0F166D36FB1BCCE399B1818720FB918B1F5D413A54FFE90EF6525E021026C91774365E8F423C3618CB3D3ADD3E73A5D9D280EAFF311563E3595A74D260FFAFCAB7308FC2C6E03C3E1164016BAFB152D48B30579F1A4A341C826FEC1CAFD4BCAF1F640CE248BD2FAC07065F4308BBF5038F213AA7350E34D0C2E92EF28A74B206B906972E694717F21B6BA8D4E64C7EB5628E76E2B6EB94423DCAFCD7D65B4865262A2B4EE1C218C4939C002EC24C4FD771079EDE5ADC7A62CBDEC05085EABFF850F451B46D2B4FF992C6DD040F0185917A68BEDDEC4DCC890E97D394EEBCC507D2DC5A3EC5B7EDF9F07798A66C0FF85D0D794679D402913B877D0B25BBDB43E42587A97C3834A034BFD8ADE49348AE60E5C5F4E977241788D5E6666480A0AD80587A69596D81628E2CBFBF488FE543E932F4B83C43EF1EB63EE21C2E8B56A14D2F04EEE0EEEF7D26569CD5A2B7AB8B0D1F826A44D5B05345D1E0941F2E746E6F518053535A4160C3382549AFA5C2FEC1504F5DED6A81FF053A557699E2EEFCF302060E63D0043FADB850BDDFCFA0969D0102F2404D913036E07CEA4D9028FD58259D99F5542F1F078E9C7BD6060A33829D7F4045EAD744BA3690BB210BFA8E74CC01C2DC27766EA034B58A27359D41F58979B36641DA9A8DA6FD39FE3133AFA1E69F230F49ADD571C15A18606D128ADD619A3D4720143873CD3DD4229220B42614D6ABEDBA04E3D9E2A6DC86D3DF7532968ED7FC2653C87145420896A582CB8847558B9DF8EB26CA306677E0A404A9E34323FA20FAB3043496B3C18CD1F3110585A042B8143E58629F4E5987035CB8058DB5DF97D44E8FE646CDB6E6CB36B712491AE185B5AA1296FB364952D1E07FD420ACAB584EAEDD544BBCD8BFF6443BA104C3D3575EF087A163F40EA06E609D19EF66DFAEE9C5660803815708F320493315D610CA0204EFEF1EC92E79F5B9F1ACE64FDD66018CCB9E83182A5F0F95C728407EA188083B890D149259E046DE2855B765AFB707B8332A1B71301009FEE9F36BC479DD8BE3B90B7D8D7082CB4805477FABE8442D27E53823CC67673B56C4364212C7E9F48A206B0B21CCC6A123D600CD156FFAFBD1019F83AD9E094836578E7FBBFB20A5FB52914E3E38B84FB75786757C22075030CC45C4C2D1CEAA21254AA68BB0F4F7CF4B628BE702B1696672CE75F7FA141B5DF427DAD99C95036261624965A142A8314C9AFA360BD6F209C578066DE2B554F5A2ED8B18FE3B2639B5E40AED52AE70BF80BB83A8ED3EF397770D8B3F8674057005ABE5EB8516C44FC3BC9F67E4AA2E5B873A64A422D2347E85FD4CA6932F7190B62217E02335815B91865C56EAB802D00BE09D6F8E6673A33E09EA0997BF8B45ADF1D942BADED916A4B7EE9746E540B8580CA225843D9E46B823882F6995F39838F3546307C5BBF3D92AECBF8AE8664C49723D92EB9FF5537F33C391ADF038F766B29CF9E6EB9CC1B7360F3AE77FAEB98CCA3E0C6369B0A168BA7F7031880AB054AF069F470F167A3839F7C5C9F65A5F5DFF9F4788AE96A38DF924B4E6B61F0AF4C9CD730A62FF1F343A18E6873966226721396CC0C9368CC0A2002FCD357275ED3BC9FFE78C2CA8EE5803D00C53CF11CDCE68F11ED9E5016C4C63402160C3E95DE967AD9B31070AF3AC5795954248DBBD1BDEACCE1F5D9F714BF7A68481ED34223472A8E81600E452B98BF6949B9A8C1C7B5D0ED8A638F32A4B86E5EEFE3E8C06BA1B2AC210029643858B9416A3857C236A7E494FB64A4EE1F41A426F205B33BB30FD834798A69C15BFEDF6649F47DC70B17B631C35FFDCD1DE5DC11DBDFD0B229468F15FA098F29F52D768B20AE8EE7532BD1BB77FE3C056C42704914AFF0324147D18B9A813A2F3BCEC897BC20E294BF6BD63874F8A5FCF4F6D4A169EB4C669F1D0EE17BEF7C6149E422FA5768E933BC5F47DCF048699BA44317FC47632A62658E7B28341B0B89D6A04EDB8CE9B7320EC94E945750F8F5362E81BE5D7320FB37307561A800E6A89D8E21E4C0C7A38C24410F04ED92EF2303012C07589B60AEC2A3BDBE28E8088E2C889B43A8F1C7479367DF1D222E40C16334D57A9737430E95C519676870259631AAD74CFACD771668DB8EC3AB1CADA17497AF851E35AED76603C072AB3A555AC2EF17A93535146AEC5B31FEFBA0943C26AFC440039D6C2D32AAEECB67A4B76F69810A06CB29D763CFAD9BC2BDCA67A5912D951A22E658EB0B4006E7A94C9E2B355BF32CBCFED014CF492CF80D94F34737B481D3DE3CE107A7DA7F7AC2EA601EB7BEFF383D1401C7FCF922369EAE27C415A3D0656DA1DB04B48538874DFE66FA49025F6155F21911737181638F1EC12DAFA59A9BF883883B756443990D49FDC47ED23A0369CA5DBC48FE379C55268C0CCCB3790706844A814A86452F9648CF04DBE5DE21E64B623FB50644101CD148F9D462751B56399208B81DCB91AC9789A4926862DD12AD3C2BF89C133115AE09A639C089D1299F818FBA853C3DFE0A94306C701019163E9A963A8D99B9CDA6CD3F2543936CEBFA4A6454D4AB73B632D980118020370DE1AF19F7779096B65302571CF7DB35E97C7F3E30CFD5F3B5DB38E2624BAE06DDE1262FBA44A6EAFC82F5680A7A74AD680CC8D7395E660372EE9AA58DB7DC0AF5320F167D8971F62F69C899AB316E7F36FD22166E27DD184A064EB5F3143EFB895F50214AF2EC977066066B76DDDBDC66B1AE7E50ADDE955BA3EC2CEE433F5C505A88B35C78C46D8BD6AC9ED69D48CA9249DD2D32281311687954A4F0A10D565721BB7A769246E85A151CEECCFD22F898F4711061363DE252FAE6582AA955885E9735CB2CF1E0FB58E951E6C456BC1D0F260BF22EC4769D1659C2282C88832D49FD82562779BF63786FF1C957FDA639EB6C0B808CFEAA8040F240264912A2ED9CF560DF3D9ED914AF388FAD43AD0BDD285C8DB76843015E349F5A374F0E9654E9352C49436FB42939B3BF2AB2773E46BE16393EDED48FA3ECA0F261B921F4D2FC0708C76CA385235ADCAAA94E5213EDF984EF2A591B4F420F594CD3BAF442E2EC53C70DA6D9F51D95117FB41A5FED1F974AE1BE110F2E408388C4F5CF9387B5163C3806D01DB4EFA56C2AA1D006C3BA01A5205A9A37F14037525236ECC4C396D1E6DF9C7D216B81CF220D9986F43FEB2E5D945EE418A96943AAB7E1CF1E400D99467166519F1BDCA557216896E8E08F461DAA18AF1CAFF4AEE99AB42F958CF33091B54744E61A22136486BEFF74772F16404886405C436CAC49E2F6220626AE2CBED04D456412059771E649A5A3FCAE0B829E4ACFBA61CE6D84BA4350F74BC789951543D9183F11705BE98D42B3A903C4A939EFD150E7BB23EB0C0F05A106E69610D2D1F5EFF2C8865200EC0E44DB06007B0D5CEA89E4A19BDBC224B7A81647F3D0CEE329F8BE534E7842DCCCF23122872ABF9465420C6E5C3782B3952FF81FFA740D50219E9FFE90398C10999AA628A0F7FFDEBF27D039CADD10D3BBAE3441C7DE4959AAD130FF64827D4A1FD4A7866E3F5EE964B1AEADEB3129925508444A17E4EFBF69A6A16916E5FDCAA6A591421CED5BE871232D5608100E28E4F87DFE547DDB43B11123DAB08ADEA4FAE4B3079ED4EBE00A6D8FA3BBE9B87FF1EBC570188EAA64E774173450044E482ED9A3298808F1F64643A5B0233CD40DDC42581581BB3FA95B2DC54B8FE04277ED9EE11086ABA447E5D4A2B0F8872D92E3FF5A8BFE38BD330609D54F54A864935F71FC0D03EA2C5180BE1476F2B96D10E4A72FC01F9C9E37CBC79575A29241488F9059E23C75C824533F01BC5E926FF9013861A5AB739DAC4DFAF35F0F6158DC6DD82A7EA95747704AF6EA244BDC1CB39D25A582B74295F90398ED4760DDCAA1055622B781791A666C1AC04D60E05607443BA136DD264FF9271D193CFD447C34D125F102B530DA6F9DB672DBABEDED0D9632BDA5F3E407CFCAD47B8523660E7F433AAF563A3EAB1F50F76CAC2ACFCFE2AF6BE6CDA890FA79E5557A085C21C7ECEDF87704FBFD7108F7CD2807ADC4F60702E2EE6AE1FD1F3592C346C15FB350F9DD5DAA56B8C869123C94852A114ADD9A63A874D01351AD2155897BAF5F0011C1AF4B5E11E467711E1245D003F62C5440A4D0F55AE4213236FC4A92E5BA8A3D277891BA48E0DD787E5168109BE042685BC9D03E879B3AA40986C71973C1156659E2B626E2DD17A96E96816A0E876E0C69398195F01EE0EC4D53ECCF919AF3D4EDFF9C06454120914EE772C461CA0A45A580B8FC4C32D8A47191E6BC3F3293B92E3E37ED25188D82FB4AA7F90AF9E25FFB3014ADC840FEF2DF6F79C74790E9A3D2CBCA202C3778B1881C082DB45EED7E829F1A1702B8FF5F7BB86EEBFA5FE81652BA93B7CE91E7AEADD9004641C9C1A9B757E5069136F2277EE5F3A521BE014BA5B51180F3E80A922DCFEAFB9E6D22A7C5641548849A9BF3868B32BB0E71A9C8999934E4B7C7E34E09CBEE2B121665241173EA92C0C2AD360FC050E9B538443C9ECB7CCE75FDE6C309AFDC04350EBBF118A23C68FFC4C8172777EBF24A3B1DAB8B31B9BBF3D5D54BA75AF6C8E299AF22FCCE257F9F3F943125F8691185EFAA4BAECA92A3277649CC042F78C9B181B2EB1ED5A10E993451E65535E983376467F8E64253AA60E2515FC330DB0B879786D9A7299DD26EA109B432CE7A94DDE23CE71B224025F0556787AC4A62C02C11E2A0C294F2478DC6F765381806D268C52EAC03880604B7CED84EFD9EBDC0FEF1FBE2C3B0B2EB371AB43D1F7475E8F4191E3AE180C6D742684114D4019BABB3CC2A467C39774EB9931289A7BB2FAD12A31C18369E6BADD49C50B481C7407C8FBB037EF6720945E3A077AB1C5F4181BC39BE068763897FADA29F3448654F623DF28D71D6D7F8F475D828202BAB5C6B3302EC444C2DDFAF192438244D164F490A140B8F1430A7DCBFA441D6956AA4A6614A75076ED5A264848FEF7C1EFBD1754BB008B2A1F1557CD847506DD15EB91DD86116E3666F78D7DAACD51254BEAAB9EBC7285AC5A14A3ABBD4C2AB0ED8B4982FA5FF8BA16FDF6F994C1BC06DD4AC0CCDB653A70009F8A7C04FBEAEFEAD4DCCFEF69780A24A0277ECBA6B0B6486F24F66C3676BAF539872252AD6972EF14B0B288BAE2501DA3716BAA68115B9924E33E655D5D4654307210DDDC99706A2916C0B0C3F33624EC8024E35157D34A2ABDF9325ED8554FE9AC8B95F817A247B8B4D5F19B9076F972DE79A7CAE300C451B40D192D282043F5F52161A84D63119FB1982D80D86B9EB2736AFA0E59FD44532534CEBFB99C95103BF474D53937307DE4FC8D7764D0D6757253D25600524C27293875FA98E52BD63868E2B487E97326EA686178F6088BA84623E705A72F96B47F097A0FC715613227071C1447C78159E3EB3379408BF3CC7009A67E928C753B5A6ED57FCEE61D73F4FCBA2CE990033F8A5F3D3EE2B431D2BF0D62C739E10771B768AFE25B71B6CCC2ACC18B2FA678849C7141812245B6A5F7BAD752B589077D4A4A1B7283A0CE83B417217BBCAF872328BCF36C4D88622C6A7D8471BB709F5CB9333EFD2C95D3576866E25DED581B1BAA5510F19E62B43C355F2AF71E0EBECA34DF2AC3EBCA63C06C77C3DD49E805CCE8D6C56237091C7DC48619897E38DC0412F86639A978E68A1ABF971416CDB61DF5855DE5C8558C45AD8E2D06C7501D60FB6FC4A1D71B5FBD7AEA070437C06B86BA7FEF4E5504438A61D91F6B4AFD6BD1E2DE73D176E39D9EF896A62E986DD1E9B78C40DA519CABE15F66961AD79AB6123329302A94238A78CD99FD64BF77ABC14F8B99408510C79E05D336C400DCE8A5777ABB909C6490BD059A25B685BC3C4002CE308FE369A287D85C51A957FDF3BA804D516991CA4E02C4533CDB0CE56A77989E76A8E331C5A208118B244D8D49CCFA3613B7361EDA55F8699AC25FFE6FF5DDDE94D59F98C37557F1062BBEAED148FBA259BBA6A52A65DF17DE6DA41BA34508481A4E4FFC987423ABED665B8918F945C29B3BCCD2ED11134ABB868EC089A478966A39989A24B5D4AEAAA31F0E64C7FC689C4A7CB89390BF5A302F836D1FBFCA6489360E8F5B8480BF087668E7A15395BCAB4419955DAF8385A24E4A41DDBEB930A9A3FEEE73F875CEDA81549AB741C95095ADF72CB592E520073BD3E859562719A3C36887411713DEE089959A52ADFBBC4CCACCAB53CD11B5E4029BE576FF5D2C77B3C440FD8A9852CB07B1600D9F5C3353D6566300EC63CF99C7A2839562F29F5896957CCCDB9573586895A4C21101140FA7F2F33C3753922B84C854FC5CB6BAFECA70C5323D07B39A4E4FEB5F7E050BA041C5C4B1C694CFB4BA8283D8F890273D1252BC69BAD6BC30D785A81B12D61FE2FF166D2688F8A491D334B1AB0F596F2159171050CAAD411C27AB7DA26D760A48B69CE3E641BC2B831FAA8E47EDC1C9D79D21179225BE5FD93015C7E7E6E75FB40AF992E74AB8C8BA072AD41A9D3D395BD012016BAEDCA20DC8B9E7498689F6561964D8D58778B274B84CA5D1E4EF6F49951B36BF10C2A47104CEDC78598765B71E1DE6DE07D4BC469CD04C408E55BD82224A2A5DB1F191B9312EDA9BB32E3EB6BE6041AA5B45BCC3D49DCD40745BD8B985C928567A48A7A94473248F7DFD1BE64E9EFA72F99B3E14496BEFFB7D734E196DBF09854C7EDDC604743902A2D370CBB8B7561AD5DC75EE5FD110A11677F2A253BA88D1D4699545E57E02C9E1543C02A409AF17F10587A5EDBC935D7F96A834DC932E3DE7A0409071E6E9D7CCBC831D1FF67D6D54D77013E8748D9C5AA6BEB1B58B139B69F69E19385CABF957384D08DCFB6E44EFA4F9391C45F9122C92A0384684E190CD921E3CDD8769BCB7470F72B9AE03A48B5CA9C62AFC6F909C3A1565BD5E7A1AAF12CBED3EF75C8CED96A29CFC96E59FCBE714A54B3178178D1D65DBC76D9792090BBFF516556CDBD32E2DBB11ACFF91D58F9C64833802C75D5B66AE5A5884461CF0CE9004E91388089A3215B1B723DE7B1454F65037E918DE28A41E817FB74A026E691BAD5944F3E8960D76C6E629E622CA9B512F1FA9945CE2F0F0E4F99E4349A6C3CEC79AA4343645DB993EA75EBE72CCEDAA07BF201541187C7BC8027C2D86329592380657078DC149CAF443BFA2D53EE8DDE112B5DFA78FD12601E4D84778F0D2629A58B7A007493501162672A12529760730D0CD59EC52E63F374B5550C54399A78A4BBD05A1A4D288FE4BDEB962C03C249A8EE66757CB0E210782DC27D3410946EE905DD03CD20B02431A6FAF7D0894AE663297713208C7E95EB962328FE3D6328F5D80E9EEFFE718F5491DEF6D0F70B2F841E6259B6B50D4CF1AE60B06CDE9BE03BF1F83F77C9E811F3DD28ACFC652F3641F5F937851AEE0CA47A8A5D8F3FC318A60A0075E804108AC7714CD87E8753F4A7CD74FF13434CB48972FFA67BC9A86FDEFE2EA600A1E905AE4A56DA1CCBDB8BD7AEC25B1A22A50AB28942C2E691CE72C22B122A3F7ECC56CE650D82D9FDBAEE6613FD2CA7B62E0C2D0B8DFFB2B83AAB21D86D4D29B43B0D720B8982814EACFF8501247A5B73B7E5E5C950DAFD3F8F05E5D0CEBC2B38B91EFB409F8D9A9AD563A8CB6528DA91497A26347383D663C63AA27CD6C549E6BB060BA306F5DCE198BC413571084D7B0529C10607EAB2F42C5D3B18D03BAF6C418837FD853BB9B4E3FE09863DB04E1F083B1CE88F92765F14A3A07DCCF0B962AFB8F4EE5BF0952B1297B27F3F0BEABF63BC4B07D5A897BCBF93E26BA4126B2D867249E48C6A2588A99C2D69195FCED93785D938AD3035AA7FAA8AFB0AC857412F2145F5E30AC0B68B80323968057074B4DC7AA762FFD3956F52F2EC92E56ECC448A5491A4B00340327B280477C4E78DB175A1FC56C68E7286EE653098A82EE0E506A0DB7B4682B45ECAE682AEDCC8E3E3453BFD449923D4A0D6C328966BC10D5992040661F8DBB32A0343A3793EE3E4474656D784F529807F2BE01A50C1AFFFE4A6FDB6BBBC314ED7FD95E610E45DC7BB7AD718063484AAE0DEBDB15CC149644FE6CC745D75874CECA4B594D95A39D902D334D640445777CAC0FE3BC02A930CB1EEA33309D687887DDE94A6C837EC00BECDC9A3988E96C1F520300A243DB2100ED4230632F5AD8C08F9B336E4BCC7588684FDFF726FA42A17406EF5B5D4CE974C5C2CD7B12D71EA8EA3998280F598E83AC79308DC02460C0C873AABEA4F3C11A0955F9C1DBE70126BB8794DACD09FB450AF869A134A1B2B7AD08B5887091DEBF9633183689124AEFB78B2011306DE752E9FE63C515A56D63059C4B2BA594678F2F2818E9A3E0F8F7E4F9147AB020AD558084DE0164CFCC7DB2545C28E9C2D2FA5CD79BA6FB1D6BEBEE07F06D32E74B502E52F1D555ACFC24A262FCFE52D2A22902BFE64FC95CBCFBE746FD3464CE8BC41DB572161AD9D7889F4985BF1D95F2F6B99DF4A7888FEB904D0D9A561636327785B6BAD84C3F8C426C7B275E9ACE13BF00493A1C23D80278E73A726BA1A8201117E0BA3C11A727DE502CF48376F286EE3E70F5DC69CE03F28E2552B7F86130CF7CBC09D48316B4C0F53FA2A86C8EDC94271006658F29D4C86D739DD584636731BA811828B1048AC58CDA129A946D8DC3B9A9121D5864807C5CA77EFF524074DD1B9A2483BB2A54338E42D4037290EB1233CC8E952BD4008B68D4FF8F0E39439A35203F37568BA3244DCFEA4B1FFCB8378D77FE82AB8FB0C29D2FBF09C79C4EF9F58C51487E1BC6AA002EB18910BD5D3E87DB671A86A176F8235153021174C78D184F244FF0CE22BA61B11827C821A87BD6BF2F86666F6C9142E7C399CE06598AFB8AE44796B4782FB075A498817106235C7C32A82A83D56442E7919DBBDA48E3E1E8C602CD094DD45D68F9EF6C6751C1F3E7332725F9401F5B11BCE8A2EB346180F4D55352C8106781C94F0F773D311AA3CFB2C086726BCC7A82B33C37CF569D6F08CC46DE499E7017AAD9A1238AE9C84AB3473452324E7AA52DB23DBF64157719A7FCB4B37B54665ED7834E7FC0035ECC25AACBD9CE2370AE4036B7BCFF9FCDFA65E75661FFEE94E928C07B36A79C6A32BF3C4BF34FB778F7776CBA527A95E948670E90C52744BEB6354CBED26F9A5BA10471A1DF980979DCE956A3F11D0F348B2222F8CB9A74247F695354DAEFC9F692F1B6FF6A25C5DFE5231FB42140BA0A2E2F75D0E89A324ED63C44A947FA7B8C212E3BFD17BB06DA231F410F0060DFBD685AB801CF6F2CACFA78C7F7464EC5946294F25A713F1C64DB5BE6C31A52768775B543C9BA8184B72104688A21AA1421022D36D8D588F5EFE96346C006D2BB065FF80AF0A9F0B96CFA5C5A2A14ED2E9AE61286FBBB0D035398FE5BB057848B0C3FEF1E2B3A683CB7F8CE5446B188D40EAF6E3ECF3EFC5339AEB524125937E48C92EEB5EC4178947D9C47BF29D9FCF7DEC166A0FBB5F3C1F7FCAE7C4A6F81B8719907EBB2FDCBFADDB65B94F9235CCF15AE1A53F802FC69BA4E7BF3AE1BFBFD5B51BFBD8D693F748662A70A2C2AB35B097E25B3ACAFC791174205AF6DEA60C447FDE59639F8A9ED30107F98C0C3C2F049F07133ACCCC86C1CBA9E506BA498C2A1EE65E37ED7362D08247EAA657519BA56B5A45CEBF5F5BC3157E40894605DC7A33C7D17CE5F4397BF6C7AC9E361AECFE0C46DB6B72E4E2B98286E8989BC0DC540CAA65BA64352A153B05A55A61FF5AAE83C2E1DC6EFD65621CDE50DEE899916B919BFE761995F5195E2ADFAF9C2C0D8D8D02FFAF830B0F6351A88D68616E43DA9FE80C62AC4BDCFDD7E74576F6D8873084720C5F01B51F22879D1CF9C641262E9F47355A421A628CB060530686848F6199CCE28E3BE3EBA25264DC10AD923380E2FFF91B389A22112E8856FC4F73A66E2593D067A79707EC5F222BDA6D3095A27B45BDDBF4532CCA13EBC517C30BBD45E6D23C7389CC685B2773985B013A353E33F72125BDFDDDB5A5F6A694633D5B7C71FC12C4D8E8766E1E3ED14ADA1FCFC670EAB3BB25914C026B2A7074AA8DE3B08C99BAA99AAFD563F518C5B6708BC14EB920B59CCA4C91E09822133DCD4EFDAF262AA204BCBD4A79102F08FFF97AF18C6EC054EAEE9174F9F1279F8C4EAC5133AFF5292F8A391BE7C741AD0E3FF5FE7423EDF5EC082763ED855602A690BBDACD3772CD2BAF63BE87F5D433100F1516133933B7377BF8278F852AA6C577F763941705455D419E8A9CD0ED1041042C81104770A3605A167997936430A561F8195BD3ABD2441F928083B428782AD77F197B5CBD79B8488F338E34BD85BEF86C5495FF61CE899257EE30B595ACA7BE584601FCFFD69ABC2735C69B8CD06AA56908C1A3108A21B70FB34C09283C985730F10CC12D35F8CF72DA7D3C8221E05A0905BC1090E5D161EA578ABD9C2B21F04DBDCCAE4B7E5344751A2B18D18453320281C43F297DBC88D99DD34BFBD17C62ED442556F3705660C862F0A449070C849E425D7230BC40B591EF584CA737B38D8771E960427724527047BC71E7CB5E874CC240B3A8207AFE78F6552E927DB69355C5DB95CC32649C9878E2296474F8D4C48E71E90254E243CCA91E17D43533122A55803A00CA83DC3010492BDA43F1BDE4947C68A171A950C893C8A25C92139506CD74D2B7B96E2D1DF5160BB7A0603B56F8BDA8EF8AA7B8BF6002B205555CC04C73B3C32B7977A4AE23A08E99917CF26E40C79B6F4546E013BF3F9A4C498CEC9E5C3DEC98E29567784A437F9F1D6184D51435B53DC1A107CC051E0B035E1A687A8CD20AD45A41868FCE6CD0E071B321DE404102ADA44A81E9ABC268C701A2B7228B6A3EB400254BD5ED434F37B857022E37CFCCE05D170D1E15AA46716DAE7F3165944CEDC3C9B87554DDA36AFA8771685B8A472B3F83894DD585AE89DE23FD889B48F44AB6D197D3B3901983AC70267A330751D416CD3D0ECFE55FC3BA9451A8B3C5E6D7D2B0ED492CD159F31771D90DAB33A87506FAE22008C0BEF318483784EF0723C198FB3C8609BCCFB5E75E94BBAEBF69B24B00BA253B01E90EC03DB662B1F3DD4D5E87F2F64138BC99674F6276FFF65D18C091CD367FA2AB3E5D7DF35B5C33A9DA8C10465DF0898E137EA26F874B541A9F9376260733F63A10AED1FFC0134F3BC34460732FE430C015E8E13D46C5A26D9F899B2EDF9E7A141578B29CDEFC019DCEA7080A9B33001B9918A95FDC2287243732672438974E76A9F190A37330F49C8CD87E8DE0E0BD2016E288856690B80370629D518502054ACC9AE0A28A359CFA0A8509C66791E1E0BC3334BB632A69DA59A6B4D13233919E773CA6E94C0882299F2858BE0D3EABCDF223223D65EBD3FB61C558D2AF5E6211B7BE2DDDA9D19A1832CC129EEE40A7A5BD192A7B5B60DBC1BCB0007CDC43EEB252DDBC7D72708FF65CFC4D9C5E89ED752EA0A396229A08D2A66A92C6234956CA3F69B0C6D42C8BE06358C6282B0929EAC62DE39893028B600B3C53E1ACF61C2C384229984CA59389BD9C141DBA809BAEF5905BABA9391B2D16899781D7B31901D635FF5CED4877A2E6CD089F9E4BCF0C262FA87DCB04F6CEAEB097B6DA6DC39EA0ADE1A84133C07320CF375F8DDBEB50C69C2A0C38315E2C947BCA2B17A784C79479E6159281014F2755E50537968FDF276BECE9B355D468966637FDC97DB5A8C911DBAFAE6C9DCA5CCDC78FC053EBA91893097C749EDCA823F66958297C86566F4A992BB380335C52AEDC86423E7138DA70D1508470CEAAFC855EDB65F6BC301D196B44C07AFA569E6E4757D154DD8B2012A6645A3742F77AC61483D8A89A025D21CF19404FE10E839951444AB188833B273729A33E2996C93583B41ED978DD4F915425F7E667901EDAE00A461C974505A481EACC186A3928BFC34D477DF3B5E35F5917A7DF01A261DBE54E2D2E41A0801131F7132F1B5A891B1340708F7742B3736A120A806301C5EA5B73A6FBC0FF0D5C6931BA675320FBDDE7DC1AC2E441580C09C3E6B336582079F97634F971A1876DA662676CFB4D35D93F2633B7007213C55CE19B27D1C4B248B34D6D15BB8555D52A93CD094837D64C31AC5315CBC7972FA8C42E5EF58193AF681E62F368DF18FF4216CE5B5969B160FFABF332E01C9CED83E531011E0DE31E9D475E5B452BC5373C9DAFAD1EE5DFE41FB1FD5B8E74A21DFEB5BA2B3F8708187F65C3CD0F303F96F1EDAE5DF6EDC59153E5AAAD7D82A43A9A71E2D39DA6474A256FF091720E86DF73A87B86CFA89FF2D084CA674B8DAD4CC25C9C294A81BE794C7B8541184082E379D6ECBE5680BD2B85B02BDE3B50B0D560EAD6329489B04FD690BD4D031CA9BA18AD462BDB1E1FB9F0DEECA35261FF6D2DC33065E718E67D46FF0BC156BA8363F828C0473C750BCD33AEADB203014E161F48C077BED47ED61E6125FE2E4D9EE71C18BE195DB7082CFEA9031855CAA3953D1D7F3B7E06DD8E93E6F928EDFA54E95FDC7AAFA8409B93A63469540E5DACE049B7083A2E7FEF3A6C1E7914443315870A4CC8029391C78BD64EDABD1C2A24980C6E7354CC56B5633CDC2F998A571EB98FA84E71C6FEF8144BC3AA208A72529D170E4FA96CA8BC336C3A8045F2DD7C43F77307CB8F18ABC5E9C25BD746D7C443CA0FA495F61E947DF39ADF2AD107B8E8E8492B0007C542590501E74FBE9DE1FCC09C7033833D39CA9C99AAC0ECDD16DFBBD3BBD45B3902170A945661962ADBBBEA95F1CFA9D6E5FA40CB74E15E2FB5F763568B28C902F11D2C1010CF5DEC2BD30FFDE24AA696BD0A686EAC2383DCD87F36B914D9B0F369BFD3FD89FECAFF0DA75422575D43108DC30A17216B6B600F2F34958BFC4CE6D85326CA96CF68F65FC96DB659E3229FB08C83168B02AE4868017621FB292B809160CD16831DDD65A3448A7DEB4760A39744A2556A4593B295ACF383D10DAF25AF7CB00A307366A7CDB432735A231C73951E222602CDDCFA25714EB875DDFEC7AE6FB9A1B3548A07C755EE46EF5FD5354528BEA753E5A7113642495ECBB9B85175CEA2A8A6383B68E57656A6C57DE004C6002D91FF3B82C5B8AB8795D38671B17ED80E9C9A598B2D5D3504742D169912AE515D76EF406CC9B6D31E7B7129ADFCEE15FC0BE4FA81B3B696F985ECE72F29BD022A5C349F6940E0E0D9B89E98CD73E6973401866346F95E3948E1E8AC965D9CE4BF837CB5CEAFE1E90AFBA24F16896BA64477593A874DE2833BB2A89EE200ED42B526209851E2E92188BF19594DF3804E9B4FFE15FB5DD72661EFA12E5487499E781157BEDD6894BF4044205ADDEA7C44ECC51037BA5D95244482CFA508E8437E48082C0F35BE2D8B88ACF5DF69267081456814861DBCFB01A6DB22078A55817227CA40139902045D9B73F241BE2F118CC4B1F7B3D33B315F9B9CD1B6591686B32F43A5F5A4EE4293E1904352113CC3BEAF6B9B9BFB206F90197C02B92851E23A2D3C6ABD779DE34FA36736EDD6827CFB48654EEC62D4963FF83283FDC16B9D14A277021930224B4170C67B6DAFC89E37021BB3D26F1EA4EA1FA83BD2863B255BFA973DE8C8C30F8F19374D8278E23EDD5EC73F511DC2C9109A1616C23C835B15EE23B9380D615B2DE0061D925B0B41FE81326A4CDC3ED7AA5D9BDC68AF150DC4C11536C6C802DE9C5B519661D77B35773483BEB6E3D92854ACA927270A0BB51C1BCA8711B42C1CDE70C75365FA7783BA709FD2D0BEDA0A973DBF2DF06A23254F224D8900B7DF538AF3352718884989D4E02F4C0931B65782A26B626F08DA342441085B4A98EF5FB79050116370BDA1B150F7D250C1E112150A6B3905BD6FCD8F95099E81BB9F60EF2B332A4A81110F33937404152407D3B941E480A30497670681B7D48620B188486ED2E9A1C5D3294576BE5EAB553F2E4A277F2938F22DF335F0F92AE74327930035D8A92FFC77E9EF58B2F68188623B10600D07ED732978C08B233B1381B419DFCB1B8CC860C97177D5A448A02B763D748E3DB5729000FB730E391E2C9F365922C5C9CF7721CA06FC543696C2ECC8FEED1FBF364C65F29883038A7012B6A1C67A2462EA82503F4B1927A9722DE39DFF606A6B70853B38C86E46B5B9E165B8EE5215849881841EC8BCF569D178F5D40744A235DA2281F81BF7BB2FB2487684949094861D7779B9C12878401BC91A1D795800135C2DC0CF8978285604A0F7B9CEAB00B5D5C4485D01954777092597EE1E52EA55709D037BFD57C8A329A5AF15B367429886AB539E96D149DFCB0968AEFB037C2D41569C7CD5F61785AB05DB159A693B663118E4F015DC2F7BAE3534ABBFD3F784348D911062927E7C6D109208953A05D673B32732163675805624A88607D17CB98DD55268D40A29BE5DD37B8CE4A1A68D2C282C18B4468306DB8036EC457F512FCE1AAA211EAD20801354B23CB134AEE6D7F0EC0C503AE41A9A7088DBBBBAF61469303575E4259804C8C85A492B9E2E4C68B9085280F9C51988AAC73F5B467502D4DA2F6DEBE9620555BDD36C6490CC0D8E90F62C92CAFF621817E4AE3858B5356B59F6B23509750C3ECCA1EA1652EB5075204BE38736E1AD2BB039647EF3F93C4D9AF5BAB995B4AF4E033CF352CA2C91546C37FFBB21E0659F82DC0C30784FF3CAC77FFFB64526D33182439B25F12357E30DBB5598A0DB8CFE2242E236E81E681914AA924CE612F0BDA1C22B09626EA98217BB4FF7738FB785CDE083049FFE1997EA40DE9FEBC41C00050EB281EB13B841C0879E3541E1D4F66E59A2A22E9E1F9265EA882ABFF60E7B7622DADBD354905C2E710184759AC40A9860489445D68F5EC38032857D619D54B129EBB76D2F10B83620D0AD785AFF999F9AFB0F3954F568D09BD240497193DFF43E45BF1F330C7C0BEFAEAE30EE1F82D3127726DEE05C0C0A148D347B81E6D718248A92EB5DB5A7DAF78B6F67B973C485123138AD9EC9E87458502802AEA652A2A4B04D1ACB005F9197099394CEF52C73070B181456FBF6AF6FFF5D88C9CFFA7B811C433BEA2AF7A8009402F47A42D958D16F8B6A32F8AFF9D5C6CDCA042380EE6048CDA92B8BE385914130ACAFD7437AEE79CF10A9960D357702CB3F5C3CB1037A14685D857162CB1F7D694EA03F9994C408D7A64AC767DE7AE35920C5C3DD93EAEE7A2B1C15F66D41A656BBF2BC1CB71139D9CC8960403EFFDC2860F9311462C9D90C0902B6F4D3D26943F79DF277F598A754A43888EA149BB3B64020BEB3E7EF152902388FAA0F61BF1FDA4C0B812F5582E8FD9F5A47EB493EFD3F62D756B54C4A873C521678A413779C7DA30E4D8B576ED6A16DF8D4399BC999F0511FEAEEC1EC4097DFD71FB6B96DF3992F0CD0894F48AE58DE0AF81547173744798CEFA6F7989C1BE8640648A91990A692512F7D6009874E7668ED3C506CB46519FAF1775B4CFBB405E18D9B9F604FEB4213FE34F6B602BB12447F34D55947D0F539193C16B784DDB5BC2787FE92568FEAD02F2632AC6C04890D1C5B99E6D54166B43F9D3A5355DE4DB5F25204DE373809454BFF67B2DD7AB44AB3A28DE14C5867CA18DCDF058005C428BBC4418A8EAB5AEB9140FC3E2BE9468340A70AE46E389267B4683E3196F3C3EC8FA86EED8073F0B48E1AFF55FB2C78F57405080746B3A7F193653F51ECDED59B122AF89E62F6B4F9B29DBD49B512A36067EF7C6C862D2B1079C13122F37D028B52E7F937AF26238CC6CB117E341AB22B54C296F3E81C15C3BD9D0BA0B8DE78C79C551F7C5F6C9F462415FE40B48CB8DAAB076B473FD2853045985219252948EE60E382DA515C9D087E7D7B23819B8B6869DAEEA46AB7275A3C86D67327A76BC6E4547B00CFCD8778932124ECF23142F1B4D852FE69F134DD2DC35902843EAC8636051E7FCB41A2D7608D7B6EFA3180EB57302461E1B6C7220E8FEC2F3DE7C894DA8B35DD3B43E7C56351F25E8BDEEB1F757930F0ED0BF01EC537033C695A6A27EC0CD764B71B7B27746AEB69C8CC7D99D3BE44CE2DE3DD3DF8295AC7A7E68B345157CF0FFAC763C0E55E5E24EC9D5A0AD2166D49E17A6769606BAA0670E3C8529ECA35F067B453AE183CB6BFB7C014DDC382559DAB50E4270F1386AA90F705A3A4EB4180386860D2FF630D7155BCE1F911DE201CC16B82E1E9F0B60998DF3512308D2D0A77FF8CC76C7DFF6B29F477B8B65ABF6F4C400525A880BD537C05C7A4B1EADB34CBA169297A0AD0FB581F126311C40D313FADDF168A2A506EA8C7EF1BA13057600FD21775D01A4A996FF86F3C5B82CD50F48781919A5EA1AB5ECCAE928C9083480AA4E9B551191646F91D45CD0A67E8DD2F7EBCEA60F6984A64E2DEE708C95A7F94DC875D7E7BDDDBB0EA978825811A8B65515C5F2588D0AACFC25812734C53C18CA79FFC0AA571A187BDAE721E5141F4472972231D97BEF315C70B290A83BCCF561DEE1A1EE0D96E14A02883B1C3243272AFC6E773C2B61461F93CB99348A49AFA1A152C770437440C2DEF6C1A7EBB93088E2112781E9641145662B4473C8115ABAF60BF82B919148063090FA9A414EBC24F49B691BF9F3ABB1719A75D26461162F869AA56929AE01024A130D1AF7A82CFC7DC341301A6DE1EC7AB603DF6C97A4C465B69925C1A695A2D2FCA2D7AAD6698250AA1656DF4974851FAAF13BCDF369F5A5A7C33C246764B2828547A37AA45C0E35FBEE5EEAFCD884BC2448077BE25AFA04E34B48EA54F5C68B39B4229AC0F13180D82B540536DE86CEE1AC9F58F55C2B76BF7603377C4C581A303B66C62B4CFD4084A6B720D81A5761DF25ABF12EABDA6B712F801BEEAD6DA293762699A26C5AFE08A8CF2D0C17058C20CB00B1C43C5CA673EABA264D15ABBB49FE29283614F232040C5BCC6A525E3B960C93C712DEB550F9A42B1C7952E01E9085916FA7A7E46A668F649EAB5BED7B0A1DCBD0634FEDB1A42EA7A055F1D9225E2AF978E8B8811C932DE08A3A693C0DF2B3C9DBBA63B0039E5EB37C747ED43FCA951DDCEB0CA135BB9A2271EEA49EBB61DD9FA7C4F782A5AE06F9C8E0E2690907A7C0F5830464FCFFBBE6FB74BA4F99B565941B60ACDA971F4DBFE0AF7765EC6A7AC41B8571B13D2DFF758224350E3168F762092079E805A2E980C908C5993820A132537BDDF22A3775F61473CCF007E7782CF89935BA3F8709FB76CA5DB6182A11B28299A8E62752E04E9F93EFFC35BACE77C52832BFE3561FA8EB48FC2243F89DF540BB59F64A01AA6AF351BC8C485ECDA1CCE8DCF4C1268A3362391ACD54460ACDC9A1BEBE392E954CA26C021AF3B067E9AD00820EFEB765B1D19C3C1B58EBAD10A8B81F41F3FF72BA91DA8FE1D2897CB380A71DC73D1AFC600A99B50F00D4F577CE3668FC93E1E85FC82AC94DC99EF395FA40F47DFE8FDF058E52038E2380B1C63C22C1789F582F1BB37AA2177CA2B4D1A4BC5D60C218DC5D1BC4B74CA7CEFC71E13B7E09D376242DB2239F82C725B084A0B94DA7E3D5799F81D15D16D58611E4DED709696660599F666C8B53E128BDB631E57DF8141C3EE6E424583EDB02F77A677729ED5A7E45EE47AEA4F770D63C0FA62AAF817D3265A578ADBA64DFD4FC9CFC3E871876318F6EEA04C5C6620F058DE7D3C2D93C9DF9AD08FAB3A7B80F2564D266F8EAC42A025085589BC2870EE9E982B937690EE2D0B34AD558E7FA5E470512597E87E285C10168BF77A9BE20C1BCFF2C2732EA122B28DE606109C41FD4C42CAB6ABE6D3794072E620D120A5F3CBA6D2F509ED11DEC6C4591B12A9833EB318B2285E5D434C1A1D6EE6436D28EE7FEC457573E88E601C1A4C061E8BF3A9F469F75693FEF65D69C15EA4F6B4E2D49D3BF626D2D32CFB7840F55508E3E5AC5F161F0DCBCDAF3BAA0863482C0899FB1F2909300BB1179D4E498BD895F73A8DC70BF244F9D580E9625515D24798FE00EC7946AF588541BA353492E05FCB7F615C5C1D89DDC224FE20A3A976E03388BDB2CAA2667E153AF859E5776463B062E6E1A17F8E2CEA5569B3E43BB5B06BC2EDFC20ECEB01A246CEB6CB0E7FE56396544BFC0B01830F03E70F78F0F28250BBD4FD57658F6560F4B0C43DCEEA18BC300E9A57D8298F2D07F06487674FEC215B2180FE7DFDB4E4BCC024BB5EEC031534B923A727C7B3A3E703A41D4FF32EEE75669E56CDC3983FAAB6094E7B0E4C38C609A62562BECFAF6E157B7992D95336952007651643717455C5C82B22569B26A0C37C50C523AC652588642D30265A156387DF3DEDABE7012830BBE9D41C4A5BB8D16E1881E374C7F8BDE6631A9983CDC6C338946823802B581287F5BD8FAEFFC42830B3B06131C0717C65E0FAAED325B8FE6DCEBA7AA259A6A5F1853397AECE286B0AF7201F8DBE5BDDBD9F84F8536E328CBD00C745CC721F2984A9B5161A05BDE78DC32E0F6EA7A482A8E32FBB091A80EC3773849B8A69D8404BA410B893400BA35875F65FBBED725322B1059F0BE5FC85628FBA419D7CE9DAC8F2724517CF6C1F693413443154B2201AC924D823F8B7199E17C17A438E9B4B419F67E40CF3D3BCDDFB0B1B95943C397DA532D7E4452966EDB4D9E387146253D316BB9FDBA9C829DFFEF84FD0A3A209EC61871E1EBD81487D5FD457A7BA8F06209239BF3D7455ACAA0F1826175D99B10C43D1A2CD814C0CD8A3B00CBF71F98CEA48E4FFEC6C84E04C81B5853B37A979469B2B8D1A659402875617DE66C8BB52536FDE6AC1F10C1F2F05D25BF2DAE44CE7E76B26C5ECC34BC0972185289022329DD16EAA2F951C8980C7A5083CF36FD1CAF2689F74A00D2763C32AFF46F7796E2176685C3621F4F466CEF609DE9BF8F8A21723ACB67F8D30043A7522A4B5293324A729A4C774BB26E456420F29F0E2EB8B363ACFEFD7B6C92392DEC00E88B22EFEADA39D0F2742BF9B53DAD39FEEBDD684F84C8154B330BA9A06DD8283F9081CB377B50EB2039A7BD56ABC59C72B198651F6B330890E255924EE3567EBDCFBA000A2D8E1D8F4B6D97F87DC65A6C78748C054FCD711405CC28C558A81D9106373041A7F885F26FADD924E25DEB09E846E375F81D8B2267C35E9D508B3163F3EA7863147CE77BB2ED117EC60FE939C82F450FAC55541FFD95D5CB63329938E09255613E46978EB029FA55E81415742264B519DF138EDC2B4F8F3C7BF9ECCE5CB0FC1C8593D11B8AFA789762EF099FFCBA33E1A0A57EC7EC3D5D9F9D41B65796C7D524D9B700C0399D47A6B52CF2BADF8741AD5788068E2CB6137ED2714EB00F6441147C1B6773D7A0FF7F9440BBCC8251C0F4125EE0396563F13E457F75868A17B70A2C1EBB89F71C813BE5AABFEE79EE5C3AE9B1CDB3C2395E0D1CA0FDC14BAF0E8A4A8B21313C2A862F73890A6B544D479869F58559EEC7DF2D4431053ED79E3CFF28288981939695F82117EBBC54FBE7ED9BD21A0AC691A173E01615E93B2D6BBD7481D3D082D92A55D8D2A6B024E8A01B37FE8F588410A002C9D4BF3FADDFEED9FC743E2F7979279B55748C036CCFF2547653BFFAEE723C61CC2A5E0240DF377B8226F1C7998CA11FB1C4B5DE26010526FC14AFD9EFE1B9489D26132DF95246B162932D68F9CA0199DB9EC69440129099C45C5A5217D8C3B0684FCB1117E434C6C08284CC5C4776E68168FDD7FFF52CB06EE77308B4887986C300A9359F7A75D5E74485864F0C255208855558633079370A0F6F1C4581E1C4C9944D738B7823B2037EDB42B476D36A1CCBDCBE0732F2B5E3BABC697D203F74EF13CCC7D3DF0E14EB82AF2D8B4C9DF259DE66C9BC3E8840E8E84B60EBCC151392CABFFD22A2DB037809201DFB7315A27150FFF7B71C01F6CCF9B9BED1AECBEA6E2EC1470BC1A7A622F91F3258546BF927F23DFF2445B85F302503F67A6F44AB86F9368B5DFD64E9D594129C284EB0572B0A92080059B4BBD7C3A6E1B1ABCE6ED4AFFE5ED6E6AEAB6AFBBF0513C6F62D9585BF1180BBD9DF522804D411FB4150A8C6399B12EF9CEA67762C5708AF0D16C21A0FF3E301299ED1699D29F2625BEA9E5E68B9A867CBBD04707F69819FFADB05AFBE606D0AC65B7518A00942E642E07499EA8D0D284D6AE51B8EE479F22C6BC00831C00B1DEC78C6F6D6AC2EE601EAE7BAC27D751BC7C0A1D6D5C93C3F89C8CC5598F02CA53EA65FEE72A9EFCBE2DA6C416776D70A4F12F5D97768CBE9E797FCA8A64430FDA4681F70DDA76E98294C493BED73E91C0DE7DAF6BF6A4D1EAC0D570BD70261B9268157F3103DD565981A9A75ED41F90FD86A5CC73B8D0784CED6A6805279F234A00389D5A140ED0A981E001720BBADA1AC5DF9E4F3F8551E896B39E3BC8BF597CA52695223C7F3363333CB4004DEDD7A5C98E6B4A4B6B3A323CED847745579285AF20BD7704FFDF483303E4EF48B2BD510651ACD8B998C7EC789C69CAB9448ECFAAC439C1C43CC8CD4A84F3A47A52C36139EBA64C600FB36FD3A97DB9921268B3EBE7AF5AB699A84FDA2DA5D1C93BC9B90E91E98D8283CC7B2DBAE1642BAB7A0E6526B6CAECB4FC80AC5CDCBF00310B69257BB70579C48E65B7D7D72B5C7033FEEE6E45853CEECE531BA50D79C602CE1CF0518A2A53112CFA3A62A01F3097883689369AB15A0907986DFFD97737FC523CF6FBEFDF9F9C65710F03E6D071CAE6CDD8FB0D23629670A93BDF4A513BC40806367A0AB83FB2D8F05F314DDCB40BC7821EF28B7AEA56522E327DCB7428FCB8023FE3E564216C0C7B9E5962FFA6EC0C74F3B7C93C231E56C0C13D0EF13A831DCC933420111D6E11635C69EFBAD8DDE10E4BB5B40D4AFD3831C767B37870F7CEF3EB802527BC16745E244B0796647C5836B5EA528D08B7EC82F4427C323B32E3D437EBF6BCD071FD5928BA4AACFBE5B11D8CCCAD944A5E5F00CE72C5771CC80B214D15E1CC931742D96F727621E053374682D633D846F0CBCD1F4AA33CE934CD4E2F6A41E41A3E5B40AFE83175D610F3A6367610FB0D0ED5499CB7815A4682508D9CD5C7D2A0C43BC3D097A4D6D131D462A01252F929EDB26FDEEDD737BA169468361DA640939FB68414AF5479DE90A2587FA9E65313F8302274DB62D45572A4A7A28C76A9AE6CE7558A8E32EA96F2EAFBD7F308316233C6AA5702644662B0313F735ACD8209858650F666F725EFAF5665819C54E146323C28D79763FB122243472AC5D6DC3BFC4B2BDFFFDEE06EEEAEC47333D34C7DD6003E036DEB64DC2463187B95DC3825CBEAD559AE7C22BD843E92EC446E7D5E14B00742ABCED70B391910B93F40BD2101AB95C7A9317605AAE1B3241D66C450419D6047548FBE2771FE89CD871988E82DA5F8393A1DB700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%%EndFontu1`65t1`65%%BeginFont: NewsGothicBT-ExtraCondensed%!PS-AdobeFont-1.0%%CreationDate: Sun Nov  4 00:55:07 1990% Bitstream Type 1 Font Program% Copyright 1990 as an unpublished work by Bitstream Inc., Cambridge, MA.% All rights reserved.% Confidential and proprietary to Bitstream Inc.% U.S. GOVERNMENT RESTRICTED RIGHTS% This software typeface product is provided with RESTRICTED RIGHTS. Use,% duplication or disclosure by the Government is subject to restrictions% as set forth in the license agreement and in FAR 52.227-19 (c) (2) (May, 1987),% when applicable, or the applicable provisions of the DOD FAR supplement% 252.227-7013 subdivision (a) (15) (April, 1988) or subdivision (a) (17)% (April, 1988).  Contractor/manufacturer is Bitstream Inc.,% 215 First Street, Cambridge, MA 02142.% Bitstream is a registered trademark of Bitstream Inc.11 dict begin/FontInfo 9 dict dup begin  /version (2.0-1.0) readonly def  /Notice (Copyright 1990 as an unpublished work by Bitstream Inc.  All rights reserved.  Confidential.) readonly def  /FullName (News Gothic Extra Condensed) readonly def  /FamilyName (News Gothic) readonly def  /Weight (Normal) readonly def  /ItalicAngle 0 def  /isFixedPitch false def  /UnderlinePosition -81 def  /UnderlineThickness 37 defend readonly def/FontName /NewsGothicBT-ExtraCondensed def/PaintType 0 def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/Encoding StandardEncoding def/FontBBox {-166 -236 1018 962} readonly def/UniqueID 15530870 defcurrentdict endcurrentfile eexecA2951840838A4133839CA9D22E2B99F2B61C767CD675080AACFCB24E19CD1336739BB64994C56737090B4CEC92C9945FF0745EF7FFC61BB0A9A3B849E7E98740E56C0B5AF787559CC6956AB31E33CF8553D55C0B0E818EF5EC6BF48162EAC42E7380CA921DAE1C82B38FD6BCF2001ABB5D001A56157094CFE27D8F4EAC9693E88372D20358B47E0C3876558EBF757A1FBC5C1CDDF62B3C57BF727EF1C4879422C142A084D1C7462AC293E097FABE3A3ECFCD8271F259833BAC7912707218EC9A3063BF7385E02D8C1058AC06DF00B33B8C018768B278010EBFF55B480F9C45EABA26C5352C774D5A6AA2047F60797514DE315658DF831447B4CB35D1E3C043D33A02F345FE0FC2050AA1C139D9C1DDCB8EB502C72CC4AD2B72758CD03FF093E3B6E48C714811579D05BB1ED138ECDBDA8318D02E85B3F80C5A6CB3472312EB4A8344E8CB6346042F7590AD85A323CA02092F80D2A5FA0FE494DF0CFAB2CC6633AA1A11EC710BB5E76C84034C078C6E729343EFE1D26381108D662EE6B92FE0FB4F65F398B999D7C50C107C962AE2110A513CF8AD9B04034E814F29511586F62332B831DB36D3BBDAA082D2CCD197F33B3BBC5A6EC2AFD9AA0654F620FCA3225C12CE5D295D30F9BD0AEA2D2B4500FFCDA98BA5D8B0021605D8C9B70879F4C6C136CC60F7572C4E1B1D9256458D43E2FAEE023FA2C4B65AD39C2B4F7793B0E4326A5DB52EB130C439E32DABE5F13903B492738155E892DB85D2E6C3B132D41B665DB1A8624FBD307229056B401C407D8E644E82C20235DDB415DA383883D0A7C5BA77917DE2888E9FB4AB60962AF2DAA52BAE2FFCD9CEFE8DE641E20E6B9C62FCFB5795AC37B59F2146197FA663109B494B7BE514F1E3B53DF3B949AC5C5013CB1B233BF96256414670E405FA3D64263189F646BB7318A828FD20DD1D9C68F0451680FACFFA15A9142104E2C26C8AA2B4E442DB3D093DB29ED8F1CE0825934FF07F60D73DC6C9B36AB231664DF604F3591A98B355058190E8BC60A1AC9665448D136F05D3640F0299769C78CF7EF18181FF1607F454032B01B0B2BD738F2F62E1BB618D1D6D6C1CE914E55257DDABFEEC4FF62ED1AC601E0BCC65DBEFB166A4B8038ADBAF276611DEA462B6FBD597CD0F045F34A0C984F9D067F152B483A6F0ED1CFDA1FB5CB6BB25A3FCFE1A193982FAA8D29F8417CB9DE753D129837E6E772659A3ED57BE3946941C7D2A6DD625D5CE56F526EAF15B2AEA3648C55D7F63DDF3174A099493D4841C661A489962FA594474D330A59B827381B9604582A21BBF80ECC08BB969C156FD695BD9DF3657000DBF4A605E4D9172E111958D59957A46918F4131CC52B5876374560491FE4CB0152F68D9E27AD9FDCB7D6C79C89D4CDEC071C2486FAE604FB505DD599DADE72194A4909DD0131A006A5E2C2C81C9EABC95F5F43D5CE6E424853C512D8FFAD4C0877A77D9E5C950D4C6B4C39476E2A1FD45E073CBB612A92B3B5EA41D761A6E81023ECC2F9A650B5495100F6B3E89ECD0EAE163D5C390E02EBCEA24D63DB3B4FF6B063A416AB335BFA324A534F4DBC44B28D1D3FB20F77086C8B0E6973F3318345426F32A3ABB406A921F386F32B5BC1D03CA32DDB34979EB09EA5F7563D495CDA8BD352227FEDADA5A4D49248C5EC3CC2FC622A82AAE5DA513AEC3DBC0FD0FBAD1178A2DAF3B4A58E0523EC03B7CF2A8619FEFA7A9E194B33254A1DECD3FC3CE3A7788700BA8613737DCB3A7E65D084958460C2E2F7B56589E3BDD390CB8BCF0347B27755DE16C3326A6B95A84337259B29FBFD735EF69348A3782D28F3D70AD491322140F6F5CF47C104AADCF7974D58709BC8C1B5C69FE8BEFC61A55A458147BA921A31A1AA674F739F01F3395B73A4F7E0F2202AD5B6F9E500A0A221BEEA6FC2AC98D741DD307082C5B29D802217CB7245E39D4AC71768AB4F5AA13F5B879BD731132982770FCDB548E55B98BD13DE37174A59CF19558DA44BBCD3995ABDE2761C3630465995F1E73E4AED8193F43A59FB60888041289136DA010DB84BA58F99E7A562BD2CBECF3ACD70E1C7242D9E1A0E9700366151C0BCD68ABC3B2D75A94B8B9C1C7898614746547C13094E1C4B73E5D2ABDCE64F0FF89039B3A37809E3652C5277D9A803AD4783C877A9329146DDC06173DAE28A34B525D008419FB2190697A2C8EC7DF2A8EDD732E807D9F8FF63151CE4028FE175298F5223D9C29A8A708711CF926D2C8EABB19AE0032C1D961364CCA1664390E50B0AC6C133AC39ADD6BD62D383D8DA7640342E0CA3B10E807500D4F00B07A20710523E454331B3AF0A6FE184EFEB4D1CED070AAD1BEE8B493F137864D15140CC17E3920D2C4AEAD9B3651783B7DAF2141EA551B116DA9642469496F57F8EA8E9A9B4554C6051D85AF8E5AA76E1742887BFEDA9402CF8CD9F8118BBD97BE831BEC6A625CA6C4C38FFEAE4EE7E4274E2E149CA9A242CEF0841B12589E970B6399581ED1C0136E7D2F5ADFE07EC02F19DEC6BCC0D2A251008F18AD510F7C12DF577DD9114F7A985747F37E00CE6BA7E05F56A6134527F45C553BB50DF89C28469F25F98DE0AAFD8FD240084E3F117AE192F7B60B4FB49F2DC8814B321AAA8AD990CF59DC4A2DAEDDCA895309CC0B044DD6F0A4C53579116B7EE8B3F071E9C85A1330B90B3E71E3839258F41FE30ED3BC901A88C9D6CC461562FA1570D637D75322AF86F00E3033E3ED7F0FFB40ABA738A7F1749EEFE261809CBF8CAFD3E53EE91A2A43E76CC1454770E955EBF38C085F63DA5B67B75FF1496F1BD82495DBA5F9C5648D63086DBD8CC6C7299188350856B35BDCC2ED261E696CD1C87A97871B53AAFA61BED25AB464DBBCAA7D42D9DB149C365A2896098DC7535E141C4CF9EB8BF52DCA6D63088CE5C9F5A1A1AB5F8ADFA81209FCBD24B2038CD9D61D1532AFD66EA16F9758D80967262A675352367E775FF89FDF7DCD3C87EA65BB5E9A430A2A0A5866A00257BC69181663295A59025EBFF3380AAE01BB18BCF445819C24D0BCE9CFC82E090CC777FCC20E56F83E970CCF0F207BA3AC7DB3D36DFD7266553F74E1D06804FEBC8101318FE113B778249CF8F72B546F87E67474D6835419D8879469887EBAD438AD1624409971FE0CEBF7927D5AD5E143FCCDC15AC19640F8710DB5B494F7C60E6D3CF27AFC45762C6B0E831D4152488587C947D9E99BAEFB623FA3FFB28668372CC0E8067A6CCC9FE6370BBAD56E540BA822F4801C61971E8EB5564E33EE96E6431DD24BF8155F61D852C60EC15FE8D5E3A5BF5717507A22097669C3ED4051168BF3CD1141B0984F892C358BFF2C444B2D7917BEBFD9350DE247737271B8D3ABB86EF9097BD7FEB3C4CFE4840751F76AE43D69CC26AB092ED45B663CF2852AD0569AFF3ECE3AE0E328B331A7E32F9DD3C95119D4C6328084EC2E6857E08582AD797F9490AAF64D33CBE6A4271F2B6C7824A5253E77C42CAE2C3CCFDD14CAF6AF4B97035E148461C9A48183C3FB7B995029CFB255C5370C3796ED18932EDEC2896A94D56733F8740137146B7FBE3EFAC37D07C3F09978A2F8967865ABB01B75E91233BD88A8A431BBC7724EAD13242EA8FCBFA36B6A90D5EE21179FC81E606538247629A86AEED06CA0D147F9CA5F3045EF2534C3CEE925DB459733371EEE68C29FA7652AB64568EC3A19F96C113AFB9D6EBD90B292ED67FFC11C1369D0DA2552CFD78C119934FFAB09916BD905D0E50A03363175E4D0D907CE0C8FBC59A127C57B2FD67B771E742DC7F31EBF21AEC981009CD7932FDE0435F57FF690D8DB6B90375463A94486B93DAB8D516B190C7DD155E0AF275B8FD9CC0AEA383C54FBD942DA98E456F7A9D130AAF12137A6A1587DDBE090ED07C030CC61E267C276A8B043774FD1A0360AB0D794FD9FF77679E02B6676B79A9DD2B498FF83BFFB0B4F51EFF9253FA1B7AA312A84BAD87D12C264A6FF01BFD7AA90B8351558DCACE98313584B3A903801FBA73F9CBE0B6A9D6BDE11B459B7FD4064837B1596FD2C1AB59BFB6AE18F8C86E263FEE842913BE1971B3C264FEE344F655D9882445DF3493C05C702D6FCB1CEA4D982DC26AC93BF39B9496ED2DC5290ADE2BAA5933562A354B42CC154A5BAF4F401E28839AAE72F1B0368E5667726C24A09EC8A7FA8EB6B5C399B163DB98206BA898494ED78D075A308FC31A8B15186BC08FF2319C4458AC8F55DB21ECB2954F26A1518A102889ACD793F539B213BFB89183F2CBCD3AFAA1A806FC92E4DA288564B77DE99F8AE5AF0116D17326649CF893705BAA376E01C3DE356F9942FE086BB23FF7DD34E174FDC022ABE4E344B1654B9963E2850CA073C15ED98BC8EFEDD302D93879A71401BBA5C6E7C9E45C5D10B258C514590F1E572BB757D2D3A5F366689ED3A853F944C10A5F37544AAACA8DAA86C3A662A067E4F6A352AEF1E9B9E203E20BBCD1D52F1F82576E1DCDFE4699CC9F512DD26645EE5B6EC5AFD5A4AF4DE1B4F721BB7149720E103928A9DB907211867DE94E059E83088A623A54FEBD7F137084856F4BF89EE43D486CEC8555DB970245200E7BBF4BCC31434A52C083E038C50B2485D6340E8C693DEE8A58C448A48AF585E900317CF2CFDCA9AFD331F1457928E228A1B0A1BFC42498E255697CF251D014C4C424E64E48DBA7E6F7909330A0FB4B1304696B64E2523FAB7DF6566D80BB0558A41CB92ABB4522BC38625F2225FCA0CF578BE23262B203C3532E4464E029FAAB29431A574C42B8C7D4E232A342918D02BC04C9245023150665E911A184B1603072092C623DDC0E21821D847B8B33130CA5340CD3A9850271CE52D9C7A5CC76A51E6E3D52912A82BA05973A4DB75D88AF0E5CF8F99AD19817055B8EB6F6528A3CE4375D3671667AAC2CE58055C5322B5C064CDA15760E450314AF80AE4C5B9288FB786F9AE78282C193A6DE967C4ECC5A277A58345B4640BD1C75AEA63DEC60D8C4675CD6145928DD64DB0B60A83CFB2BB95F3925FADDA8CE86118C0CF848BDF33E0539E58F9D324C55E63310A8BE058D043EEB32E261FC6C444D2DC137BE936FE10A3F8C15D543652D49E9223C19F0AC8D5915F8ED6135F0B1BC9ED6D108EFD42A121533960DC3AD0405A33CDBF8D62AFA119B766FF93FEA3C84323A00EBCEC72024DA68BC3F91CE6BB74CAD27B9EB23749AC4D365E1120AC08A0EB13505FF4467739B15C2C7365A94C6659ADC3A90F91F0C2A8285347F1FC0ACDD08A7F73D493EB677A8A21E0364F2EA6879A8BDB7E8BBF54F917ACA214AE2FF69B804C0501F18C832D93DD0336FC64AA7775A35581F363559EFDFDA7B8BFC7A71345EA19A011DEE4763F3D2AFF386B96C0BF325E28DD7288F85BC146171253CBC034B7159878044246BAA34AF1FC1E300E2D830D1D819B9A118B5E523CB3DDF83AD27639E97178BD2EB34D2CD8BF10876B66FA8B428CBF1592DF769E04096196C0B9CBC486B943CE2996B35DDBEFF4A3EC836E61F39EEF427FB552AB47FADF32EB96E102F236734CC3B4C7907D53892675621C21CE0C69502B9F3F8C13CBD1BA0B381DF1493B1B51B8DB79BF61894010BB79F8DEB3986A0636171678EB47296394B968C8F38020E9575402937E25FC5B3CC7E5A0962A7148DCE3240DFA2A2E1C1EEDCCDBE0AE23E543A9AF6711B404E485FF5F57BAC2F85E6537DB88CE2CA4B5EDCA8A9D9D749FE46910E5AFC186D57E7EA1A2E9F4FF1C384BBCBD9CECDDAF2D1B96864CA02F2EAB5E1966019A6DB10FA00C09F9AE17069D530892B8842FD590E4B5F8FE6CC2A73358BF053289AA1745AED618282A46029F4B1FE2A7F62652FD713025251A379B8A945D44A48DF388967D8C34E4C1095E02FD0B801CC9E2F1889D14D6B4DD37549FB6A4A47DF01DB00DD73573FFC5EFD654AAFFEBEF57FCFD99D0458430867B45A9EC3E566E3C0A23D24F35302D07F9CCEDB64E0E969D3743856291F793AC8271230A0A12F6B6E49AB4648FBFD352580F8E8854274B18E220367D10BD16A11D8CC970D2DAE1580106FBFD82B805C20F292173FFBAD17092D6747CA2F9709C8EC0A783A532F591D7D54791262CD70A5E5924A8F7BF7A7878D068FF6FA7C32A77844DD43D86A53C740627E9FF4B42192EA8BDB4EA46D9ADC913C98B401C66908642D82730B08542C59A365B372F2176DB80906804161D06D2FA8A9FF6829C592492DCC0964DB0B4676A8FC064290B8A0673B604884D66AE75E2F1CD390F5DB2DD1B821E29E560A8501E44076F66C045E3487273B4B7C061DA73440244D77CE7E48A143D6170E9653BEAF348EC803BE2ECC53B538B0EB478AD06078E50B8E0B5FBAD6C84A4A25497E29B86B7D5948146D59CD422039408FCFEF55C25F8602E0ED9A6A38BC751F077F7D51EF814DE02C80BF0915BECC418A5A2FB1E1FFDBCFFBC85E3E420F0FCF485CD72CFF305D8C940CCCB99F677ECD2F48503338DD285F87164D536DD961C57EAB58CEC83759A744B66F2914EF3E5E455DFC8C27337645E2FD3177E150B2A81B54CB0EA2F534654992769FD14C4FF98621B01BA8671B67AFFAE910A6F329CAE26695FEDB60719B2AEDD4B6D4E6D04B28B0ADC31605A852A8A8C43E662ABF22F25E88429CFDC5089A6C3D4B5218D9807BA5DE0BA388B2D1265E6DC1EE49D5B6FF44C4F613E4ECE1D3433001D091FD44AC6693744841C148498D3E20F7A3EC032141B86B59268A4AF0C1092DA33DB40F3F91C5CE8374A9165F151FA205EF1F9BCE3680F52395C803047AA108AD55CA2187336B39ADAC76898142118182D6B49F6514D91682C8B919ACFA8DB758195AB57607F5B119EC6F491745861DC9D910D129D0B6A74BFDEE60A829010DB76D57F3D928DC6AD4375E7BA3C188E0FC735A9A2813A766BBFD713410372F81F477B5CB00D0B7DA7FB4D0B7D19F960B990BD456973099E881A26DBF07A9F44609C80850156959778925F07272DFE5A4A2E444288919F29BC3F38377B63F44C5D20B9EFCCACC58A1307344C3F7200742FF48861AE25EFC99E4CF941E0694DBACED35AF367A1A65AA96CD33C0E58C54F32F852E839CD52BF50D9945F869B5EB69C8907F08E1B25E55E67D3F75FCA90D4ACA840539FBC5BDF1EE225D530A5D67FC1322BEF3F21B8F19D2B34040008F0EB3932CF591EA8E0FEC2B1235F37D6A96F5574F17E826BED149B224DD251A40A34BF6BD06A068CB4CEC0F0818F527C37DA6A29E897B98EC9873A14CE0E439E602D53A632845E6F67DC2B5E597B9C25D9E5B5331A12DEA252D8DCC786BAC4DA9BA69B73850DAA1E2FEEDACF4E57190DF25B61DF20D0565E9C7AC81793B1C175DF9D28104279EF3000D937041ED5BDC6251E834CB80D67DCCCFB9B7EA01B607088C2F8D083AF733802C298605DA79B0658D99346DF915D6760019EE856EEBCD17B79244047107098DB3BBB028287451FE65A47D575DBC840463C33B97B58D6B95192DB3AFCF1F87C76F12F0C041A4805863C99CB07D2526C68810F333E5E409CF9B2C9D77E17853CA1BF2705A0DB7D194224C1A2E27535B6B8DBE6B85D209148C7A30095A621FEC47BF25B05C10F02A06C1D3040C8E0198AB139143B0D93FA77C39EC6ADD89056A682302B65515CBCC0CC402AC1350173E2A05471D5CB6895F1980ADB786EFEB06CFD58FE470F7A33C414CF484BAE0E78E25BEF011DE662F5800CFDF6DB8CB6D279410A1A60247280757CDC3F5F7A170C2F9C94FADD10ACC3095E1D4067A87A4BEF7245366CFCC31DFB5C558D4CD3FC770D1B943C6EC7AF141ECCCB0FD9D41769D222BFC20B39672A6664408EE100E6D3F1CD6DE36479503A637910973C66955EF4E75F0AE306A266E189817EAD9B0A8AFB40D5820779F6B72B1B400D75A45B61DFFC8DE707027D510A29F7F24EBD3B519B4406642BE1ADDC79700923B29ECAAD4D26F753F39AB6B4A7FE22FB5EE27977A290A14095D574887DB86294B9BB71A7BC623F91A30B51D44290B4EF387B58A25E4EAF736F2246CF8E6D31C550D77F0605CFD55CA7FED3C7EF00AE19CAF063662732EBC81F6E6CEE2A382FC0585A7AF68733833509BBE4D2C85271CFB61E1E8E46DC059E24E2DBBE9287C1AE40FF33932A89707943EC30549FB6A4D4285B9F2BB1FFA50E49E328174F285A8B05B87944229122FE44AD8B15F0EED2A1516D44926F44DE3FAA2494EF8537999D0EA35D147BE9BCC8D9449B0527CC6F916A9A63B8967B847CE861B685EFB2AAE33C38800DC2638765C46EB390D89F9E251FD771A284613367EBC2BE866166C8705FCCF4A3DB214E9EA72F12E42CC7F23A6AA144611BC1DD05C683E82F3B9D3F19A87D67C9A93C72814C3D9E70EF3EF7C9A77E421DAA9EB87B37CA9AC41C808604D05C00EEE1F2386BF4DB12430E421E0E88786C9F35C0B8B41A524CED55506EE3450E6921F9C992FEA345BE81D197A3A69628B47AB50A7877F6D019FC5777C731B0E18DC0A9FF7B7D08E39C3887679047E9129D84597BDE3FAA2494E20ACE16B15DA4EA7FC49253F3659F25E2A91AB60F38BB7872457EAB5AA4A04B3E1A0D97E46E70E7AC21E38B9D59B10ED7385E0423912271958D4D72605D25E027FEB15A3BC7D5AD91E5C8E7C2C55D37F8E5596DD33477F4E200423B9958DEC6FD918A24BFE90BEC0E545F1966E8D884D6EA9F079CF4C3A5A9BF105BF8489BDE53DCD4D41824E8217581867D90907A6945C29CD5FA2A344B67986EC275D06CB2F58F53CE66BF1B1028634658F1BCA8CFEB8C522BED3690C87532658841DC7A75BECB13504E71F2AA51FC36DC926F6C6C1770EDD7D7FBE6B563F3B0B0671795F807B63809E650D98D7919E021720BDEDFEA6267E2448DB264419513D638BC0C253E6E51EF826A9756F1196C057FAE69D8DCA708F380181C3A68E5DC8A94A3A4C5874178201DB5953CB7D83968F069CE5FDC72FC1E8DA905DAF7A230CE18581DEE16F5AB9975E815886AE0E025B8B0F8312082FF7DFD57D62B5570E6840CFE13649F7786B0E3979E0330A5404D37221A68984ECA939832C7EAD4B685025DCE099BF779EBD302CEA6B2046A8887A925AB9B3CD58CEE58FDAA8FC0706ADC7F053190BE98D8AC463FBD2C941278049D0ADFE3A902B23F3810ED9175D5D28D4F9ABF147775A8C3638CDED6D7149E761EFC095C1CCBE908CE43D284AD3FFE5181F948B8D7D1ED80547FF1418DACF8F81D3F6B9FF66BE21EEF62936547108F4876BF202F6FFF3953D097D3D121179B6510F6E825C66ABA32D47FC304BC882934D0E602D3C36C836BADD98B8E40B11B7C295479A701BBE4CD76504F07065AAB5CDD83C6BD20F16CB11152A58EE7BFCA977AABBC47728CB31E019D27A4278FB9B8E12D2308E68C6CBAFFB905D52C343FC86823F0D0A0699A2924756ACE9B40B2DBAB83325135F8E5ACB4A4D230535557F1690662433D3F3D2C8C555D55EB49E346D0AFFD9D5C0E25CAF22E5797F6E0E60E8C410A54FC2AC5C7B38FDEEDA71A0DDCBCD7AD762A5166BC0D2C96ABEE9ACF4301B1F53F1D21176E28D45A3E65F75F6BCEB8469768156E7ED23E46E357884E219046EA47B6FB45DDE73A989E5040FB254DACC46C2AC8DF6A16BF95E926385E9AA3704859FEE1CF772900B0A49BDEA86FE9FDD6B9969BF0832F95B7750646F9E6A25761581ECF0DD126DE12D88C355E1F1A3746A2031B3727680E546CD2B2D4D619712126DF8D778E4BB9C0EA91C552C300F19182BA7A3CAF9B00A3548E4D434867B30266F3C048B4E05DC67892FB6F40834B1751C95355A1F1693C9B6B2D2B169861541BD716F8BDE72DA983E9B6E83450954B245887C4888AD49F7F699E42EE56C3755E1251FF69B34D18E8786FA9642469496F57F67FBAA740DA768A93C7DBE6538F53E538617EC5332E573732525A6E9C4EF251DAF0F24767A3790069556DAEBA49B6BBEC5A523CD2A1CBF739311AC12AAF59A38F0EADFF8B8ADD5CB82F09E29649AE28F4FFD9F715BAD21C5662238B3646DF10D1447E9FFBCB61BDCDE5712C2AAC862EEB4D3F2BC376CCD42B38979418658E898D61BAF6222AF0041CDA978FA7AE515B090943F38DF4B5E54371F20215A5E7FBA528FB4643A9CCCCB9E7B5EA173B346DD972F3C4CE3E632FF2ED35F5261FD935E2EB0C06088B73AF8188F26CF00E9E53992D6B1110B7B3551774FEC1F7738C8EEF4951CEDDA6080A58BD04F2E0E0CB1EEF217621B81B393C1829893B76719AB1265B20ABE6A0B0CD98DAEA196EA9C5E4C78F5F67C638E80AFF4EBD28FAC77AE0DE6A569252BE2786EA7F9FA8EEF42A31899BEE3663F8B20547A2A4BC22F97BD21ACF955A9A4AB6C53E78526B7D413E3ED2E3125541E96AE1D549F09A4C69F93CB1F73FEB7E005A1EDEBC9D6FFD377E13CD5686E553F6F1667C0C33A4BA8206BACD2CD88813A4357DA1F0C79D0B3B849006401AB64F51DB040BC72A3F45A4F6DD59F3495FB7185BB2B15761E6F2FA29248CC308EA0FCB39E7A27702E0FA652354994D2172D4FA7CA49628C27A58A2ED181EC931894BB989F60227DEBA75938212450E926FFA773B2EE34BAC93AF229268DE3DFF6012C7C89C0B70F344D77D8DA10E7CCB67FA4144AFE76CB2EB647E157D13E08BC7B088D788E57EB176C24E22545962DDAB10A84C0B8D8A8AEB1229FE69C92A762D05F9C89072C71DBD31FEDD6B61BAA1E179A47D4C26D5DF73913B051B1A6604FBED0E63BF1051B31574D9DBA2429D17845B699FDA09BFFF5379B5108F1D768DE4E80D9D26E67FA6E593AE41BF0589933F0F4F848ECDB45C076A1B30C88BCE3E01E63CA856B9AA38F8C9B8B772C2FE021AF31303AE1A4B7D14D6FD56279C687F828EF0A6908CF632FAAA345A5CE0157066738C9F4BD8AB8C4E41251846F443131FB88BF3D445766FDB6D608248E964FCA42A0E173902B4631A0B8DD8D20B2C5D7DC0B891AE7A53832F534654992769FD14C4FF98621B01BA8671BFB0EF4D2150A47EBE4DB13AC8BDEC27B3FEA5B1F65E72CE0B45AEE1DD36DC984367BD97FDE3E0FA7711ABE824D239093454294DA641647469BE27C6157E0E91BB9884A22826F283731958844C6342D61DB9D031DC3B4D084C9603CE59D1EF645414C4E2356BA3FB948636AD597BFEC723849D2157D02491A922D74607CF7942F122685FFE0AAC21DC0BB42EBA513E57E864F86B64A7EFA09A5B815CD84C81AF48972238B68B04921D93D38AF541315C8F488F7B5DCE94512F2F7487EE9F97DA5D89D8FDB6686140DA64160F3F2ABE348EB875ED270F6C61FC2287089DEABA9A36E09CC86F94AD486F6C7E238C2DF681C3A6AEB4B0BE06BD6B1D95BA66AF36D3B654745A2D51D7640CCCCA076C987160F586BD41218A6F4D4B7A8DBE41DCE721F60457DA1BDEC7088482EFC5454EF049E77A9E7CB8DE7436F572E9D505FB77FBCD7F375BE28212BB1BB46A30267DBFE4659DED69061BFCDDF7562F7984C98E1F88564F9210951836F99758D15E32A4866F21E2B6F35772F85E20B105205F80DE02455B0CF8D53A4C530DB3DD20162CEB901D9ED719EC81DAAE3D48E48D312E19158A3CC8328295FCB57C5F9919FE918622E922C16D4C94B8AA6FCDF00D7208547B89DF3DD4943EE86AF5E392992E994E3D07044AF419F93F462516C91AFC975D940A4B92CD800E994695786BF5C082705C6794FE911AED74822D337FCD128E52862143D67A9411B6D6CC61B2C5AB6AFBE191379C3CD3EEC3C21B8462DF421E768C1C37A2432A65EC46339874292C8F30EC9CDC39106006D6A74092D3F2F2D60EC22AD63BF5BC3E232F3C7710A35F9FD05E2FD10C46E3A46AA9E129F8C4E58665D883F5C3B0A09767B24644216ACF265048A74A712A3D1C92CD76F22754DF27DEF2F591F5C235D360700271408557DA0B285C8EB13F1E17BB472B694CFE768D1EFC47050220E20A4731D479BBB0D730982A828B63C5E4804227FC26D4CA6DE2E5691804FE4A2E4A82AF5946F8BDEC95968BD37AF944AF6DACABF5A6A239C17C64A71B779441C86CBAE46460888FFB0785E3DAD9B10DD01BFFF224FF76D95299D9F4AE1806BE0DDF103A164750FE02F0C253D4E47F9B7059AA26935789ABF480C05778EA6E4A77D3FD72054627B70B012311B37C8BAB89970FFBAC7CC08807F1D76D36A1FD6C4A1B7FB275A94B4395CB6BEF2E99A0B846F7DA471CA46BBD34B322EECE84198F2F05996C833FF37178AB6C60A72386ECC656D53DEF1DCD2FC19A92C54843BF6CE457BB16FAAA3BA29A3C2D2E25B1291C694E5489E2673904A176F6EE3C23D221BB041EBDC2C39598F67356D0AD59BE63361F717874B549DD93E419E97D427AC33D88C3ECB95BDC650F765610B12440FA46F360719B92DDB84786A558554602989860B096C50788FC543DCB976A61ADFC583F80FC411B3CE7C8A4FD63B103AF80D17F2BCDC438FD2963A8642A18F333A7114C71B3B5C1D6C354F10DFEF6AABBD953A34CCBC44F70F00C7B85619C9848F07EF108C01F557651A68295C35013B9B02CEA5C4E730EB38093FCFAE326DC7B9D9ADD9C3D9DEBD4BEC591E015E6119568A383F1E82B94D8162CAF443D92E54714314E1D2AC2FF8B77A5855EAC60E247C4E366D44F9F1AFFFDF087F8CE82F94CE7152535BE28B23F8A9FF70AF922CD52BDC76EF21BE1559C5E7E303CBC26311732416E2316B5E6925634F17FF2E77A70F68557FD09424A81F8B24F3060979B8B10FE3A23E68BED3C4513F5765EB935B14E7EB71BA8E538BF128F0475758341C0B2D161E55DABA7E936D60517F58E3B94D43153110D3B4874ED4214615449680DC5B1932EAFC69132897D4F1A8B6CB7AEEBC149C1AB629881E64FA599943A2DF763AF2D5C4E483A1065D7278B91E725ABE897F0E2A1FF572A90DE4A6427ACD030B3CCB81FB44936269C8F218A8554D488431FC399266E18E2287237824578EC5A2743EA914E2488358E9EB1B6EC877FB2A268DDD64984D594016573BBA0A5589B16383FF019BC62D354EEEAA480F411A988061B1A9DFA65C5A1D34370D961259AE19218F4AC2A62DE9F20999D5D2C6AC946E13390896A4006DB267D0F21C35BE916EBBBC4DF9E1FD8F2057C3FD2EAA35363AB3B9092D1F569CA24B2893E50847F8924B16F199BBCDB24C77A82D8D1932DDA22BD40962EF0D39E08D6E5D4C3925B9993271ED782DF0E3E5322A527177255B3EE209428D4A31AAFF7E0C824CD2747787009F95B4ED549273801BA0DDBB21587979288BA85F429267336A9AB22AF952C9D8E3872FF2D8C381B48628069722EB694E6C943D421869DD474D38FF2C421C605F1FF0121A2078F104E1D17AD53968AF99AEB39A32316087F8D57EEAB4B1FF6B3A5F1804A25E9DE787B35AD57DA0C2C90AD60D9B9754583F49104F6412D571BF49F54071FD582641F051985DC7B2F6C51C636987F4A1E2B5D3F25E995B4BC9ED15B97A883D95149A0B6861AB1CF7A669748C5EA405054B5B3CAF5B6E7C17CD9C25338D0C87145B98EFF693D21550AF501CE377B5C892905FAF504DDF8D59495AC852DF1DBE3903B04077B139B5F108CC6B9C82601C5A79C5237062301BFA3F9E4B8E90411966AC03ADEDA6D753988C1BF259A6FDA29415488F1EB02875C2EA046A7DC6E1339E86C8381E4CCE6C2BDE45F7D821F807509B4D82AB37B3DC87EEDEEE9F6391158B43049920F9A07399953D320929E2E806F5EA0CB126A95CD6D89628FEEF5FA103B173DED0C8C752334530E5FCC12361150360EE6C95241EB65CD84CE05CD2A2ED6B9BE97B19BAFE36765A5E6E28BEC2E4EBD868DCA1A2FE4479B8725B72CA5F618FCDB3DEB7DB0B089005B0E33D8F78D4D64D7FBDF9633F0154B6EE64BB4415558FF0C9107C20BD120B17D619D3704F9740F71848D4E10ADB432CFE16DE7B2E7EEAA4B3C62DD23D3B62DBBBE3AA765C18E07890FAFD23BF44A0E980E2C495F925318E58D7504F7E0258B6DD35BE1A98E26840C8F41B6D08CD2649DD3472DA89177701C73BF06B1DC9D8463EAC0A6685C31182AE58A624629CB38B262E6EA7ADBBD041CA1050CB9A293032225DD140A38926AF357753273180B5046DA7D8F38934DA03C79FFA7BEC6B2058D9346BE454765A3BCF858A506BEBD25ED3063D413631607487A589A31B29FE2FBAA8C2D1D545B775285BE81D3A30F994454723783EE6F501900968782A52120A1F7E85B025E3272A383DCC9A843A69B43FA6542B1053CDCCF0A0EFAA31217637A398B71B94A575645282813504CD1A679BFD409A475FDA03E8E13B8D0805F557EB2984B85182A69C1F44E8BE02FC003919765B2CB6CCA1D756BEF30A8EE1640FBD049B42355EA6972A6295E5764A47700CA3D7B46825A528B3EC365E142045DDB14D5999DFA601377BD05C3E14616F36BE360232A9B29C8A5A175C91CD2EBFBFBC3DF46C00372D35E76133A4A25E7A8C207373EF5DAC34E704276634DB1F1BE0B4FE0B564BEF9FE2123856339769347C2A3CC509AF9EB25C40BBF5042629ACF94CAC2DAF9D826C27965B0ADC096DB6184BEA5DA569163EB6A14E7AEB2F4FE7F8916C622E62DE6907B5B19F58D59622BD91A3391F4137169EDB8E662E8F2966C76AB5607DC5724AE6C165A39A2FCA68AC7FED2A7034C8E0DCF5F320C01A3E5CF81FBEFD8AC956FDA8F72658FD6DDF62D2FC95386981574E5386A6484974A18AE3FE9FFD29DC7BCD799CD4F7D0F6982E75CF31DEAA04F24DBE8762981541CF7013E95A818095675D010FB5ED58BB084B04AD9DCD593E1128E4982D668F9D867B7F7D59A3A4323DD292D98288C0400F9A36E8121DE1190F3ACA04208ECE242E89EB7203A0AB64B9D77844178FCBF8E514EA41376F86BD0B43DD04B595F1819F6BE4E6374126BFF0B2F49278C2CF191B6FB6E901830F70A84F87F54C2143DB8227EFD5AC72D6B826FAB1D9A6B453E51C0951C2732DFB00A386EC98CCC5C107C79C59EC7B4B98459C3C89C9EB73222F875AFFC1F2E130524C3A8CBF126D33440713EC3C818FCB6005C032F8816148C5D449389A846592E7D62E2E168984BB1DFD52FAD5C5C618954B5B0313866060BC2CD35B60A5E0A151AFD5732BD682120FE728C7A39496058B8DE70F4892CA69F32B99E8AB4B722C041CE42E9CC4BC8F4AF3F59B134A37FB83C83818477AAFFC977CFFF761A6CDF7D5121A5C3F2F3AC77F80094AA865A779D95EB55FF645DD04F05E9CB9C301903040108B0F180BC649BABCC975B837E4275D963F3B4BC1A9BB0AA37EFFCA83C3D1A160AB02AE1E881FC1C5FBB5A014EAA2B51B44C6275E6833535C5913B964E17FD36C24DC13EE3F60E7A8D6FCE44F762ED35D6ECC7C5CFCC312AFB56EE0CEC88A6AE7F8057AAE7DBABB6FE0C730EB6BA74C371B531ABB8171FA8E8683B4D0C6E632CDA5EAAFD50C9492565058C9AA7CC4627A84F58E77E5018A70769219F2FC3FFCC3F9C44257B699AEA8BA052E649708CD73558991692787D7F952FE17CC87DFF9780537EF469F25D32E65F07A7A2D241FBB66C15ED925C55CE262CFE5412D4A86C34057E5E07B0246635FBBB37D42F501776A5787435CC2FC6656B6D4727780C5B05FF6A114E2F938C2DA502DCA17EDE3CCB3E6CD66F2C78E0E0212A08702C29A37B6967A5B9C22E780D818D24848167612AF5F60FDB4153D083A91911C1554F070414744121D31984A1A8ADA8F65910C2DEA9E12550425BAA3BAD2A4F144913D38ADFB6502035076CA7DDB5241ED9BBD939524C0AE24C2441028CC1B0AC61E23C4B1D5ABF6D735404633C08F929FCC114E06E8E73183C4DCB64D898B05AE6860A0D2C35C6BD8B30F1738DE0831209298EB6C78B4BDF8666991B544B227F9FBC729FFA64C2A65981D10EA917A3B82447F65F9F80F1346C1D455A5BCDFF07A3237470AEEA2696BEB9A25F1C2742CC0762739E51A59D3F7C83C2FF5B252080BD7724600FA25E0EEA2E2639CB78887D9F8C3365FEDB9BE619837A0A7EDB24B9E5140EA06D492F2D6D22AD194D8F6E4D712C4E6CFA9BAA1E8CD211B72D528C95376D3784BDC97D60BBDADE0725EBEB0969E9D7E08E053969911E1072E47E0FDC3B1375217AE4A688F875B770C328747B6954F7926035FBCC7AA0515A6BD16678B45B8B43BA1F7A5428CFD9DBCBFE9711BFCF4BE0C181F7527920F13E51548BA29C647726931948B0401EE54ACF6C5850D4C64E693BAC02A2EC891077E885D5C9159C2842388F30B60139DB21285B321E8EEC209DC3235E6ED165723308ED3301AD16F853C7B5D656A4A5BB6F071E91AAC0E44DF399793E5C803047AA6EC06AC1A642E7B89E7476C0D2353763C0A5B97E3F3FCBFFE369F5494F9B8EA0CFA4312428118FFD6C85043F436D3CC7FD2A6249A2142B28FC2D107AD7DE74D16D95C4CDDF23A7D7A456D4DBA703816605EDAD196B23D4C3F055CD690A1F2DE57701CAC3AB06D9FE2B1AAC5EE8531A77478193EB2AB3748AAF33508320EB5F19CADD491A5CFEBCA7121788B5C46E3BB4A9D87719658CC18812539BFDCC120382E26EF898DB5231FAD50EE7AB0400F29EB1785BD21601CF4C1C00BBC2E5FC8B1F91DB4B5D5F35BB342330C14E1844EC5C53EDFFC811B5330AB0E20FFA822983DBB2550DCD4B4B1C697682E4AEF07F1A4ADD9F55A7A8DDB4786FF2B20E27B0F95DE320195567DAC294A4FCE1203FDFB1653B687B124B423E69B708840352BEC6878942739AADBDE6558086BC1C7C5646370BA28468FA6E1981E1D3384C0943E4EAD169B009E96B54970A84EA2F92C74D262F7D0CBEFBD30A9B5798C02FDDF168BE63895B1C88293629A641A42205A9C3EACA790CE5E73792A2CA4FAF3ECAC5ADFB500F22313A11B128CD001D5FDB08F074665BCD3950CB690E4D83A8838D6A4A7FB204B622D378E224FF714FAF45DFAA7C662C5B0A4B75F3F56671E9387330E956D72691D6AE39315409A0639ED9E3885C8E1C938AAD59B217D65013EE789DAD376042D338CB27A4A479D7D7263D770CF364185B2BBDC9C11EB7A9CB600757F67600AED4411914746D812D08F483F8E30F659A05F68C95C3FB320D7E41AAEA449EC8DA02B8A21B8C3652FDAD74858A81F1EE969697051E87CDDA4958ECDC731410F808EBE3F34856C9923973A3D3448ACCB3D3EF2687DF593494F1922DA813DE7F92AFB372A919D3222DA874E1CF84AA685F6C2DF115470D3D6375B2EF5267809CDC573599B8FABAC859F878A82E27344926798632D5A017EE5DE4514D101E9B4408052CB3291FBEE7C71089D64AE105372D1B2943ADC83E4E630916B8383B90622A7D38682F91C99DEE893EF5FB519DF7660D1A1A2F4BE7BA7A00A517605F6FEDDE5902201817FAD5B8F61A038F52C4782D1890028C5E666B987C669D29A1FBCBDC0AC5F0C00B246C4E3BB9E4C9A741DDF300E546459C7C531232C0FCAD66BD105B59D2DB016A8663B46B9DF86EA70551A26D7462019871FFCB137EDF97B13CA90A12B911714705B3F7E4053608CBC49B03111C4EF0D1BF7F3E95BB7C3355385ACDFB80284EC34B4C0081CEB5CF4406E77B33EC62E0E11E505CA13BDC8CA0B7F0A09B70148AB31312373A610976084B5B77E16A0FD3A10167A5C875876DE73DFA20CE47B9DB06D26C1E6913003642EB53AAAF8FCE64C237E8846C7A1DC0DF5C4E277F6BD223587F1CBFA0C199251708E09F1BA6992DC12DF69907A48A11A493038D6932C5FE538A9BD82A1E4C31B2F8FE0A6A336C22669BE344A7D5635659D5BDA192128B94765F4FD1043DE0565C3F53CCB1AC9BA4B52B8E4B44D808E59A83B3C2B926DD842008F74B58EB6DACF57C16D8AF58BD6CBFEC7C602DA81D23F2F402BAC348396F080518796071E3DE80AFB6119E922ABA4917A322ED3EB1432A61C171EF78FD619B8C00607F8A4BD1576D45A207D15194CA3B4B65D7E8DD74EFE1B83E7B5FC366CC1316AF9591C3DD3714673E8055CDE5EB2E59A4EFBF7A0302CDD334862825828CAD36432B95B5BDADCCB1CC4C67F33F9CA3905AFE1DB96735E4B61A3CB7DB89DD7D81E3967D6731C25A10A817CE788CD6C3FF663C01A6502C5925D8C4383AE8FDEED078A5F1C3E25B010497F5E3DEC9CFC432AE6DDA40E53078DE2C01A135F8FF9C99EC124163EF44616FD844F7DD9B16C9ABA10F30740FA5838066E4E7460CA6B5F6F1EDCD69C5B2E961FC2A4EB4B912BA4C6F3056A3448728C19422F3629238687A46A48D3FE3EE5DC07D1B99FA27E6906D22D3B2352204CFF0B0274F6C472C4601C69C3EB98A6490801A9CB6669EE0C23418F7C2749928BFB642D255D9DE55394113FF68779E953B87C2C62A793E555E99DAB0493CD897049296A4F6F6771C9372CACEE4ACB23E9BFE88824D304E34BD2FB73171BAB3CF64302903F0FFCF2A65AD8BDEFB25948B2B7B2D71FEC8538749610A974211B80B9AA92542360B25D236339FFB24CB54C5031DF275174BC369EDF30690E1DEB237436E3DB06563D51E0437DA5CD183858019CA52A69B2F53789332C25A6E84951D565002C2479957173F9F576B999AE98FCF9B217AD465CC44AA5E1A5494EAEA73F43881218A3F0CEF3EB24CF242283550EEABB86413A5895D360FB8B6D41BFC68C9F31975513E70D9EA939D54AEB60DAD05BD453854B547C251E9CF0319A868095682C372A732B81F02B0E953B4BCC3C2CF5C0A00E696C1BDFDF83127730B888BE011419F84C129E6DAFD26801ED4691CB519419D6D5309511C323AAFD8FC6ABD2803D2AA6E3652B2D5732E7D838DB37B9DEEFA2D90044CC434D22F7C8F6D578B1F9CD0130F818C9A94AB803BF5D62412C93C8A2DCD161FDC1EDC0FA09CC7DDFDAD29A2CC7ED7988DFC2DF6DE90E343CC2B96BA9B67F76224A9583F8DFEA86E939AEF85D87D4AF8EDB3F2CE7F1ABB74DE9503E58F74BEEF064A8D2281B925EE2D1F549563A273E869AB741C0967E6EE24A8AD0658B0A0E0A9F50C36E01534A377DC216C055BC705EDF899D58CD46E857BBA7E38A2508A297E495E5A8AAC2B272827D368051F7EB45CBECD32D6712F2D3CE3802FFC2ED3939F220BE19B339AE210523864E9F5FFCAD6114599D1ECDD684886C68EDBA6C248912801E920D018D834E7C09F4616F89D182FDC2ADA84490D1FC7488794762BDC9E7A53E248ADF1DBDBB3EB4F12B98745EFC1B4E5E6374A066C4B2F48DDDC029311B7C023B1655D995FCA84EB3BADEA8CC0877CEC4E14011670CFB67EB327575FB800599C29FEA7F359860AC71EC2F61076183294428FBE46D33CBC18A13DF22CC692CE2B3D41210E6364E95A1A32196E0DADB609C23D54B78E60FF7FF376EC5A2AA2E6ECE24ED1873B4C93820B878E05E6462DE0900F4864E2BBB5A0544C0614B31D79552C1BCF45C23002DB7C93AD3255808A113370B97A347B918298DD691E93D31E10A37C3F511A05DA8469EBA918935C7008DE32485ACC33E74A2937BE964CE3E4E77BF33AC9411AB931125C014E29D65496D4F825BF375E1ECDB9A2F5A92868866EE9DF153567CDF6E434902CBA9C365F10850D91BA24738B657B25FE1B6CE55BCEEFE50D545BECB365FF769F3F4CE703F0692ABC9CEC90DAD2FD66F8165A077A6AED0D238538C209F3F89ECB338A9D7E9072F95DA188ABFB6F51E026EF6654399379AC3B706742A2FAF159CE29E6211FA612F8312FCAA2A188321028F8803F5C4D750D0B9263623546D0093B6496E4089EC04469D1D87F9E314072BC7DB3A64416305D97DC4AC92E686D9442CD493C4D0F0D580A2579F9671F2BDD434F273ADD5E4F32660EB28FD2097B077E16BE8391548DE58009CCDA66D6C12A9D766E4B5A87DF7CCA4911C0B66B6AAD685F66362A053777701B45FEA361467D6805E4102F186C95EEBF61CB61695665E6B7C815E80F6B7C1397961890805BC39C79F0C8DBB8AAEFAB6C6B7542DAD2E83CD646926A326634551B426105A202A89A94DC03F3CEC966D1F0DD3B1A6D0A6B0A57721F699D6613714708644A9A30A9246B03E4DEA4A4931DEBE555AF3517D92EFB6A07D5C4C8E91DF157DA0C51733A55A797F7D863CB354D7D1B94290DBC41C7B983C6BFDE63818C2529CE5E79489378ACBEF8D5DE40A6851152CBFD6BB2CC65F05932D00C130C6DDC5C1219AFBFA3FBAB7075374D1AE6518CE4709FB95806450FD6491D85146D7908B6A6DFCC2EF8A0B18588B3E70B1732A77E1E6DAA9BDD02A8F30CA176328DA060ACD6F8876B9BEEAD81682BD71D7F0725AF43D9940037FC52970988A480BC509F897193C76DABEC7BC46F6066FDA505CAD9FD1EED3F7A39A0197BAF780AF3383B7622E59C37F0388E1D053F7070006FA984DC74C3135DD53F6EE15D9CB096A8B4C740F73CFD4D187B187722105CD4F9E8E7B9D4A2F0A8CAA7B238E0E5F4B8466D84D05978338AC3E088A6628F3598F3908CFFBDB431E4DAE1DCFC8FAA8D64AFA3BC4E669FCAD9D53722ACAAB781090A6A360689BB3B0A5D4BA485B9C1F122F20A24299BED895093CCD3C52AB78D8B1696A3720379C3DD2FE21C8B3C55C21B12BAA60DD2A36FE5375F9B852608521A3015361B2A47889A9016C1C006604763028DAF1C629DEB381BEAAE87BE9E16FADD462DBE029616E78EC50DB4DD3437F35B047A605B7327D0835D539C687F7A235FC616D18F232610E14BD49CD3A5C91504F013A82A63907F1C9FD49935BF70484EA3FD97FE29DCD2B64E04CC15703B025A43EECED36B1C08AE08780B3BF0AF8CF7B90DE9EBC000C8F1388F261272DC605C3F1D8019B87157173B5A651C2B14D92019F5439DCAB34FE8A65FA203D83E012CA717CE246425A183F30AB7B121871820385E3375DB5E97806A3550092967FA172CFAE9BE488493B475DA7795209F0F99303E010144ABD01FBAD93D4F79DADAD9A0C662AFE414FE87AF12A9DDBFD4F2181D941D29B24686754F429ED6D7DB56A0A467FED88125488E3B709C7286CF0D09C2BCD130F9578A2326BE05743F8B055216496DAD811A79534538F9F00F5BE727C3391DDFE4F96A890775A1B6AF1DBB05AAB925C6F802A169F9130CD62A7A31EB4004B9D4C64B5085C645D7EBBCA59E770A673904D30852247CE39A5058D88D79A983872456065063FE1233E21463DEA07A47F0E5E5C4EA29E5F83CF69A4CB0C0C92A8D38A45BD9FB6B0E82265695659D0C81A5A7A88E5ED5105A22C0AEDDA0F8AE15FA8BF07C00FF5017563855483E9505225DD7A5816700B258662EE9ECC814BB3CF65AD550EDC01BF1CA98C2E201EFA768D1C828F39050A20E80AD02959CF08F01E9A4930E5864A749E1DD8CF860F1DAA8D4A7147FCBFDF8BA86641FA9DF5D398607334B307B9A0778DBFFE882504879892387F090C42372553F2CD494A885F311668890F6F65444417E2116F980F14D34CD2CA47AC01BB12635C5765DEB35749CB01A853AE6929B37D7681685BADDB5700F676115ABAD06361FB8154DD2BD0249C963B702C5EBFC13E069648119C4B2BD8513B73D337F5F7E65708E4407D28E2A6424DF0C78E9E4743B1D1B65B4561A57711FF74B4D7EE8CCBF80BA83B60343959AB4A60A0885B8059650E44E46EB07715118E8879AE6BE3FFD16C599D0AB2B0E5E369D768310C0B508A86B2948756AD10F626C6263E0BF461A9511BC05A575C2116A4880404A78CCF7E7012BA8E1BEF35B26DAE14C8F6199510D099ADDA48DD4B8EFA4E3F607349EE04FB5DA671FB3F28635C398593AA680C907C0BD63FB694A0414ABFF1B2BA03BA5E3274387D7285BD691873F5F456405F3301BD0D91C6C930815025D086D84DAF02E1FC3C0787FB93C267739AA40DB68404DF833EB599895A6C71495EB264DE0A4BD192A7787E0DDF2978E7CC12F573BBC358E6D0CD8A24CDFEA9C9E4B7529656F93C68A3A378F47FAC3BFC269C6A751338617C4F4AEE3DE6AEE39595A3A9C179810EC808A837D1EBF6FA284F2F03CA237725694C2622D51A7F278DAADCA0C407613A20C92608C194D3C8A9C33812B0854DFFE776B737F04FC335C0525C15443C2772EA6FF95998BAC1E70D92B532C4E5393E059ABBEFF6BFACE5C361C3CB15B09AF81F218A9A46B3F76691E84AD0C43394C7586D0B9AF9E3D6CC07160671D6105EE6E4AAF2E837277402DC4813A83C79764A496DD0859FF50E33DEF0E9D7463853D1832644091DF3EEDF4FE1F561789BCC2C3084249B3FDC737448C4DCCE7DE8AED9DEF8195B6C4036C2CC13DC7153E2E752B75BB1F2A1A3988BCED992BBEA1461FEDE24977D2F1E291FAD2498BD7FE4E3FA11D179EF5A7137F5537EF2F8FA824969C6905DCC8A8F8116F005AC8AB53855DBE4E79E7BADCE435E27F1C75AB66495FDCF9DF91977FEED04D0860014EC76EEEACD32E059879877F700E89A9B76A13C01DC2B23284CBC411FBBC87D1DC4A2C9AA993D4214947066AC805C75EDB759EB2836C6FBBE0CDCD40CE038837776A03FC2873A48EB90119979218A0D1231C4DEAA75469F4B0FD81C9B09DA99538C4DF8172B5081BE4B9E6816C832ACF83C76B282F649BB8BBDD0D7A23285B65A5B78C17190DA0D8B1236950FD215022F2197EBEED03D7768B75B63C3906CD68BC992870E0094383484D2E12B4DF2925294BD2DEFEFD7EBA50C4BB0E7E5C6AC4195AFBB551FD43862F7B9B62D31AA2010C43C7A9CAE0E7F4E05831197B6DEE92214B3D2F11A869D5ABC794E8CEAEB1D4BBD41BC285612705E9D0DA7C693A7DAA87DCE5489803E5EFBE8B6E258A19D0BFB3BF929A2F20276FAB5A8AF4295AB9E5B17924249E875937818079E4D1A8982C444D80BFD1D58806E5D5D59A2C46D67DE99D23BF85839E58E492BE4BFE4FBFCC332A2B26AE552B3CC2F998F3268635CCB5DB655A084BDC8C6726EFBADD4FA4324DAD42CB349AE336B0A1B3D69F10C9A71E48EF1B1216032CEC812591778BFCBE5519FBC4997C56426CFB4534D9FB42C4217A3B5214D76B7E4E96FA43A6799AA3527AED795DAC0CF7EA277732D1F6492FCC5810EF3D66F2C9764CE08E6D8193DE10FA5A06D7207B8F9B4AE58A9415B34669DDEF09EA35E2E82339CD9C5C079830A7FDC6C89FF6E133BF26D0BF419F81620CA6DAE4A1C6115BDDCE1846CDADC84F7DD0A43B27B6422389CECF5F7DFFD8ABE9B568E7762BBAB9D2E094827D172F20CC3118C9E6B4FBF803839BD92EFD7FBAA335C1A3BD06883ED7FF26CA85CB6B6C283EBD568B2AC5CED20822742E095ED434873B32FE11C0C0692D2FB84C31D6EE9A2F06546B81E54F1980C5A44234E547F1B6CDC57B3883427C9B51B9EF51F935FDFEC2FD070DFC6853B5E2B2A016786DDFB5EDD8C09114B145BF1C1C8F39AFC62360C83FC466CA3E246B157CE05CF210263555304370D9D435C5F92F618933B68992AEE0B7FAB05687F31DF1E7906A5BD4A95E6E87810F14A52105CCFFB6F14BA29ECB2A19045063AE3EB42C4C3BD411E5D1A9A81604A369EBB637FF9CDB8CC844D8BD9FC6720621F14D6D9EE941CDBC6E7B5BD799DE57874D16AD052351199715425FA1AF6F22F1362AEFF7DB8176D16712AA6FD1AE0AECAA5F3203A84225155D054E9203D5AFE963E37064653A50232DB60D3B170D4AD2C014F8B71560C44F6D8FF63987D729421AA963BF1990369DE13BFBA47FA94545925E622D32461C23B8873A298C26F2C021DFB6E3D9ECA8DE264229CB98E0F03D84A01EA0331A050761C09AB94DA4241224B7FF069EC0B0D4061026474D866DAB24ACA52DA2256D8B0FF0D161A9BF5555C6E6899A50168F3F624589D2439B9F26A6462553C5735B1412DB5D71DEDB1B920E22E64B3120B25E9A51E06E173EE419B92CCC26BF6109289B2B375DD379D301555F58A1D5537A710536CCD6BC9426239DECBBF0AAE81B5A03B7DBEB25544833EB6320C4AE62FB4C94E5D274F3A5BA9A65F1AB049F061298F6DDE66BC04C15F97EF8605E601C891BE33A2E9BA7E76D19427ECAD56C29C3AFA36CC4EA4CCDD94D5C7A050212A14E7B8E9C44F1E3758CAD97EEC1DACFFA20C6C12D824FEC378F00E5AA66E7011A7741F0F57295920FD91C850F528D46F3897F8BC54ADAF81CA07ADBF47CF90B0971627019B6D5BE03789911B87999E65332BEE69FD78327CE200A0B08A08FCB5C7BEBECB27EE4E767287CC0CC59E8D5B6DF229592819E688AF36A1057261AEAF37435956CA425B0A44877D15864319EFC27BFEAEB77D49EDE894CC7D9BE4E55DE1C14AB769538758E24B87A4965125B304F79F766222FA6A2E55E674E4FE888E4E9029C61AF822B5D4B9A305961EEB10B6B1B1838629CE0AB443A34851E51CC32C59CAD123E937F089BFD76CA7C4B82841E3590D350A4F661AF46D405BD2BB94E1E6EDC7E8FBC2871E38EB08AC5889555992CF84756F6C87A20662035D3F254C23ED3FE9C24E8255C56615AD7B56F0D9FF832FE8FE265EF49489CA69177C8FD8D3CB48A4D03E68F7C0DBC752E9E3FC53A5D6D94EA6BEEE1B8F3BE8599051076ABDA74630DCEF47F62314FD05DB9D22BDA6B80674D1E97701BD9623EE8C963927D5D1801953DAAD66837B4370094C412A5510A69F9FDFBCDAC817FEF0557CCD835EF3A3CA06C157967F4414D172F159EBD9CFC0E4DF0804DEE87F577F0055803D45A4A270B4E8935C0596E6007F101987E90D8B2EF26071C3B33B6158DF52A40C2AD7FA10FE65C109B9E3C136C4B529F8A436D65D76525AEB6486C81742B1DC6D466BE41A1E9658392F5019352E0E328D0BEA00DA1307CC315BB804E77F9627DE8E898E37CCA8AE097DE4555515BA535F0D2DD20AA555B252172660E80958EFBECE9568168BA9C96E6809EBB85F6235BECAA180DAA79C787FBF7E7EA6AF46019F9E7656B7DC42F4D6F7CAD425FD50C9C4A7EB6A10DA22B7DCF557C01765A7576E667E9A38D2617C92D1B71D01CD12722B0EB500B4123F1011EBD2BC98D4414B6BB86BB1E4945B8695F59C21EFC7E632901B90B411207BB83FF3F30B69076EFB5733FAAE539B08E9FF842ED442ED4E2A43E66B5B6C41E79F4FEB7FB46D64D81010942945784E525222E2D4FB96CCDEE545ABDCAE188FA88A4C724061B3F466CF35568D99B4F86F6B6290E8C09BF1E58B2A5187E2B9C56C22855F2D172F8F58C4ED4B3F7C224333039A47688C09BC59C7DD8B5E0BF99C065A4DE7ADFE47A6F906A4060773C02D2E5FA8E885EE399B0F6999E7822FC818A83A4FF03D7590147131F870C37424586A60D788AF8DFCEF2C1CF797563A914121E2B4924EC500EB46C33B01F27C3D413B1044682068EAA17F769A65D98D8ED3DDFB976A20708098F6BA0BA983E14D8DA4100343CCA75DBC217334F027110C275C330472BBB61254C22E06A92C9769B944B129097B4F2E527370F0CCE1A4CAC61667384D0C50D6A5A675BFFBB1F96C2EDD3F94665A6147753BE17FEFE253FF62D4FD59C09B34AA9A1F8C27033DD6F920735AF76A3FD7C998F96F269A7B47CD2C351AC2C3FA087A7B6E15E44F6B4E416995E21B5600CE85F34F7A839A1DEE650F3A7DA2AE63486D028FF69A5051FAD73C691ED97AC867D513F20FEB8E76F0DE15414274B8CADF041933C46AEE55E6552D4A79BF85DB82A5D612D8B14313613A61C9C4A26EFFF0F649D9D8B67C1FD2D9F670EA4CB7E60A102A55E225F56D223D3A523F4E68CE5040715D6EA38FA8C41292A052ABCA7EA92ECF0B5FC5D0EBB2AC7033AAD6FA8C97EC5EF19EB6739213644DD63F19ED0BF65D63A3618F84A3E6ED58BF00FB43F934FEF1B2778E872418BD218CB653D370985DC077677CAE3D19DCE9DE0DF3A74C23208A36A572FBB78396A9312A459836A99C07E7A645472E4D2AED0497C15617EE65434D7C6F00E5438FF81D21440A04BFD041EE3693F6863C7D8272C1B111A3CFEDE3E2DFBADF582EC38BBDD551A64D192773DCF3D026097664AFC1AC45380D00BD3A49F231451DA0E76202E0E207FE867697C56E143B5F3EBE3B1996C4F35C495F9F0315B613E7432702177393F39EB49106553C4217CD6ACBF53A1D520F9313BC0B98F7D01DA91E8C046A410EA07BFDFF63BE0DFEF043E099987EE4722280B1361C14DE7A7B333B7689225E3320327AA8BEFDAA3B126F79C5D394F3E7E9390F99CB0689CAA90DBC7EE3CBBE64AD884D13EF3658C5E790B4333E823CD2662FC1409B0A3DF64B4C751DAA23CB16811356E147F49804CA489C6F9AC6AFDB099A4A8A4764644B5A2138902B2A9FF98864B0525A8C90516B926D6844FA3F09476BB1ADA0836F90999ECDCC4C69761B3B5E65BF967E0B199CD9712D5E4C6C2D13867E7C331D4C684988D2BEA25F04FC3525C5641BB1CA99D332273B125EFC8431EBA9CB556E8CA28B5F0072D13DB388A7A6D42498AF11D531B8968006BA13E696A74F325A928FF2D532CF9C89420C2BA879FCB854D917DDEB65AB59D1947E554BC0A4932F1D226BCECC7E4109EC5892186BAF08529648D4D1B09E17F47AEB9D21A916E7183E341CA0EFFC91392514DC863D52C1DD1171543A8FFF10A5702C60320BA499749B74BB32109328100BCA863866329E31D78ABD8C3E577E0698FF83B8C19B4439C1D2860014B2DD252BF05129CAF2C6C14B1B34927E80B100A3400483927F4A7879F6DEF4182AC719F28F57D3DC1964BD3A0C20E55D0788569E00AEEFB9494EF3E4B36C6AF0356104147112DE423A97E48DB3F4A29F545B318DF4030DA4E9B7938DB9773AB3F3F54D385BFE274E9DBE588539A2F1DB1EAE5DAF356331395D7DEDDDB3D2191B8D9CEB3B1D484B8DF341786239BC3FB660D65C691E147C824368CA7EAEA8414B1FCADA40AC3FF521F2D3BB47047C42C89C05B557A6D5195D4DB004053FF6275B0F635EABB364147E9260BC25F5AB4C300F42323798E7FEC180133A5C46E0A9F14AD2869662242F1D46B98625E1B665CA603B8A10AAE87D7236AE01EC58D111F0AD422FE5FD789C3FADE40A9C5FE8A2EFB4976AE2EAF1B2C34F9E8DC225415F217DF9F85CD8DAEDFD15FE54587AF74AA0BBE7CD376565B11D4A461E7AC6B6393B8520D1FEBE246598812AF0E7417EAD2F2A187A17390C30EB577EC839E6CA14215408056ACE512C219B91550BCA63A6CCFE4257C3A8FD09D46FC3BF09BB2379E7CCEA6136E440794B11DF8BA4B83AA442552B989D61DFB9059F49069C47F6B3F810930334CF499AEBDEB82DD982E000253E01A3733A34BDA75DB3DF8397986D625A8F7F18A24167AB96CFFB1ADFBF15591B21842B664964410EF937ED322EC4B7288AA0737BE1940468D4D5A84443EC572A685E65AE9FADD3F02499DE40775FFA3C475C568309DFD5F9728526B27C57AA8E11B51D34A4D7F463CB87868235296C0CC01236E10A175ABC19F86E3063A804276AE5E6962D71908266D367B50CB58F711C36292870FC6546352975350DFA21F54F7F98C5EDA39BCC9B8993EE8744C6C700ED64DB1F1F969A170393001D2AB1A999ED0BDE73D6B9D276DBCEEB953077D44538CB2F71982A6F030272237C2542D47CD3851642312C4B34B4C29E00FC44E8F5337E0C327CCCECE7617C688FFB927C714538B9313EC8A1602567C6D2B66A2728DE6DDCE7151D51E6FD7BE006F8B2B513BE9D0E9B89D23344D6BA0A032F1456812BB81600B2806F5F89733E940236CF2EB350AD7D820C8C348464EF7551594184B84D4A10663CA585004EF50A0DD0856F8E490805A397A1540E881E6634C6A882CFC57245F2848624C9212AB0A032F27380A0F7376BA6E6552A8B0F592A4F4512C3E9802194A6B0A20D74093BFF02A95CA3C33EDEB516BE7FADA3DEDA423C361C8468852F38A070CFB910BE69A0AF9717491118B8D7635DAF4F9E6E5D303387ABF8BFE653DA9BD62B3E9056344EE7F87E27FC3B5F5720F983A37A93E92AF0F613C0FC88A9C4ACC76598461D6ED44A9F7948649D4670B1DCC27AB112A0BAF49B4054262AF086E61C879EDA4D68E6DEFDF2B85ED827DC21C4B450ADA72C6937B10F620AD6AA738B54292DA73DB5F224A28CAE7F4B92A9BFBC8C3C5B57A022EBCB447C9E37BEBE063C16E1EFD8337A0BBA234327C82C1FC6850935F1222F7CC5EEB7551CB0A49068DFE1235CA6F3C6BDB71EF2A38FD6CBD008E4F28A89C9BEF938421A6788BA63A40AD88D4B50AF3276CC7DC4305544D9F09BC6E91FB65157D5E37479E32CA2FB2593B15B6B8FECAD32CF5233FAD735C4EDB8F4811680660CD5B10DA5945234EFCBAFE82AE66A7938E3F7CFDBCEC93ACCF6175020A6F78A6691569600FC99CEDFE3447ABD5A0719ADC4BE75960E2C8AAD9B8E03251251424F2C26FE39CAA6B63B4A1111333F50ABE33276EFB22E5255C5F7BD7730B375DE9EDC21332B95C58D8BE6EF491B4A859ACB1B62E5D9C623050A864153964B56412C5E42FA122661F8F0C9422568B36C949773CE626D3A1E28B3A14662AF8A8E099F22A3EB660EBE296D53CF44A158668F402E94009F23FF0C3080E02DD3C595DA774B89BB9FBA6CB5273C3448A271097728668B3FEBF3DC7B6F8520637A225ABD29642210A9756B1089B606927C4BD3DA21EBB40C0EFBD6DDCD38581FD329DF3E329D0EEE8B8249648547B517A91CBAFA06B457731E1E985E4264A07AA94D367EC4EEC36A26521D1611D5C0BC09148395F63146BA8880CDC724B9A9A8DE905E2CF693C94B97579B18EF81507062343EF1075D9A4D5B641435CA6B4E9229B6B997A8EDC9878A627952CA80E8EE113E5948F7714248FBA27C6DD788A5B2EDCD6D8E598526A0E05FB23D840CD2ADA289E2329110366409B5C17C26565C5650A40466CEAC274F55FA055C894973C17D0DF802CA05BEC941D7C84C7CC9F59BC948EBD4898C3790D53599237EC92C953029F6F373A559ECAC76D7041C1669EE135D845B1B8070515749C4233EAB1E2896DCA8BBA154424E7AB53B3C743B0006393B91D3C00E2E9AF7DB8930E703082DCD4D52AB14BAEE5D4F3471E7112CE53288E68B909A84052EC09EFD4C68C09F49CF662B386988D2CB0F841705183BD91B4C19657007E1B4806CB3BBC6EDE891A10875FEA3DE7D1E2BED57378936C8E20702E2B01C0C4958A787E6023D499D1EC7AF33A575C086D072AFAB3E3359A4C3962FDE43A028376BA3EFAEDB993B0DA79A9AF699E0EC4A59D5CD6919A9E4D70DF921A28EAAAB2F44D534871F243C8BBA78D0BCF39662A12079FE6BEA1655BB7DD6852F2014D7F6462F979C43F7FE438C88EB1956628140551CE52AB7303621D7F1383C97408DDD9139CF460B0F0B45E79261F32161B62B195E13DC915CAC10EA6BADF2F179785E4817D92ED333107C8FBE0F9CCAEFE4609F20A57B5DF365C3D5D2534D5F0E6E991575A0CCDCE0CFFFDD195E0FCCE8178C7F57711D9652E6C061624E585CF1AB5179315AE58A03106CB8707E22E6B269936D2BEC548A29091BA513586582DF2C96FD92EADCC61885D98609A43214C01C02B0FC5C8DC124EC7EC90DF1739EDB2A7A4E9CB6523264621FA8D3FE57C165E82BF29832D518B4F86701CA492BAC76EC42E8C537625AAD1B7CDEB02A66EB3B8D9FD0B2A5683E97B3A05F7EC5605E6EDF905DF9A76E4F54F73023289F1DCC2AC27E3AE5D030CA4A6CF079099016F44DEB840D494FBE8430D9DA4BED41F27B30B1DD7A3601C4391AA84D8D53E93AD4774390BEB5935ADB5B08FBF4F6F6DF1E1D022249969EAB04B5013354FB58D4521868A31228F3B7ECE0402979BBA30C4ABB72BFB906804DB2020A2BEE2402F0D0FD2259732DBB8C24B72B0F16F781D2DC1D2FD2FFB720A8660D3452E7B04127F41E94D767463394332BFA1EC7B14DCD39560E5864B2E016B5F86E0B702D125853E12C9552B9709EF035C025227B795FE0BB4183B49D89B1DDAE68602B24903438D3CBCA837EDAF14E850D2A31037197A66C573C2F7309B2065FEFBC127A9766C34944123B810481D2D415DDA4B958FA235B49FDE3A087B34FCD4CEA1C7E9F3614D493058B7FBFEC7FF4E60C61405E254F6133971EA0B4BBD0048520D5B191E82162436EC31D55EFB3158E88B2A9FB33746A7618FFFE7E2698731C91919E3429E619A1E05F4DA8B5BA67B2427242A01B63B5DAF8773009BA80C523402A35CA25482F6776D9EC43730744A194935F2B45DF3738CF36E6A6B231DDCF24872A05EE6176FC65768CCFADBBFD3E3EF63779EE250360FBBE469CBF9D0F34EB7C7A906978911BB87D12325BC60B7F786F6786690CB3C0452CBB1250D79F1FBC243D7EEFE836550640404A866981B74AA6AB9929A8BDF4118D2EC1F1C32D0A2B13D1DCDCD8702F6E3B0A80D5C976259A4880CE655A3B3E53BBF27B49067791C0DE79177ABEA8336D23C64A5D0A239C8202BB4593559411C54C6347CD5B7758A629DF2420EE0237007B24100E695DDB9B22FD04C7C8EB12420E7E8FCB1785BD2160A9E552952C842913A7BE8069DF4A5090F97E9E334B71C47C547119A7642B663610238D7C32B1C181C45FF29837BF57B9FBCF182D52457A5645FEE8C1BF11679EE55482FC6AEFCBFE11CB2B316DE6A35553E122B14F2BB6B164BAAC10388F9A05A17B1184D4F34D4B97136E26A1E872E9C127C2152619605C733E72DB2F6B01EB25B7FB06F9271579A64F32A7CCDE9FE0B8AF90BC74EA8D68386E2B586265D7753EECF3D834F8C4F60B578D25713F18998A4ADFA03AEC8877F87FEEEE3CDEFEFAA3C51FA969A17071C388797DEEC46AB2954A0ED50B379EB80F50DF8571682C172DFF541770034CCF2A0C98FEDFE78A1507AB6158FEB53C82DECA3465F68499D80AC369E8EAE0CD5165CCB2AD8181BE4338E5C14F74440CDC4A35DF13E2EDE623988A1140D450506F9FCB46F4583C691AD85D4FB6C7F6D57656DFE6683BA42D9D92CBBB2F3DA6AE73250B7ED3C2F04EE3CB415DC265EC86EDB86B297A1002845473C7127A7A0622D8C459D6FEA1CC892A0139548EA320E37292D338179B83E17004242A6B9EE629598943B4A1997E3CAD8ACD11043872FC0073381EE774D41A5A611C4AFD6AB3D7BD0262A6A666814E95550FEF052F57B1E614D20A227B21A3104EDE62195A8AA0AA397A4DE8096B80469E96C8E55262E8C0D1E4F93E9837B243167752EB282B57E4B53923EF47F6ED2C4A5B7BCA11C5F4AB29764B0B3E6D54F586EFD5F8C5CAD28AB5C3E1C461977BCCD3B7018E6B0343DA0F34F1337A37DF34ABC8A36E00F161819EB5DB5635F39B7B6394032DCE272BECBAF280B293EEC19BBAC2196DB2DEAAD10ED7F18632FB653F4107FFEABCE189D62B3F793D4F316440447B2AE7DF5E831F8BA917D590546E6321D882EF597708EF507B41A6CB2DD3D9C78F263179D0B84FB558CD8BE843FC1630C2A5EF50D01E1E3AF288045DBE684DB7E41691DBDF0A366F28E4981FDA5C4AF71E6D71F3DE2B510551C3C2226AE2DA0B2DD7AB44A83634A4DC71A791D7DD6AC1AC8A6C842FD22B47FC9F38EBF5269EA731E120FFEBECECEE483FF5F69D6B1893E9DCB82D25D46890FFADD65EDE7D7B47DDCDF783982DFCAD2EA923851A8A4AEEF6E8074C8223CDDCA4B7D1CA82AA4B34345D14C2E72E85A1D420328106A52DE129AC15CADC78899EC8B8EE1307973C8383A6B4F6BDEA36332795440A873AE44D13DA992C909C2932B82A81A6DF75C77AB7E3E5EE3144556A53EFCCED515E6B66D76C95DC62A6A56854FBF83BCBD65933787BF3E904F943223B4F5EBC826ADB9138476B52E5C6071E168209E11B0633CBAA34885973368B9DF3C0D30284341B470180B2E5DD51AA0CB08C84C833CF57BDA22AB81932794CB933CE7CBE0D40D6728C765589036B563BD7EF9B9DE0397FAEE65140EFAC794AF0893E1838FD0EE21179FF8497E12E048A111B387EB0DD800D8FFA1D17BA11F45B49A32CD6169E2B6C4E864DC2ADBCA636679D0AB1DF4CB8824E7B5D323CB5C0FCB5C2A3BEF9BDB0855C80CB0AE054C9AD87E80F5DF1E4802FCC80D02D2E01D4C91C6D4438FED1E75A1898D6D608356B6D9755A03C5F3407F1A282E14C38F1084B8956020067AE693C247B3BCC987866B4B0DAFC5594CE7CED952CCA17AD08525213F883B8B5CD527E7181C3BF7379FEA01D0A00FDE15B4F6BC1CB04665C1418EDB8A2D8AE6C09B54ED3769A7159CA0D0DB38CA6DD243AADFE24FE462AC6096F4480E32AEC41C561799A02B33152B953DEB38D65F0ED4E734E0408732F4B560C6277D8DC6571DD6657203071D63D70225593B0BD25BF4BBA48B6C8CE5C8A0C8CD77ACBA54CCA40E4D49E3642720D412660CAC91F23B5E6C609707529C0940ABC813967FE071E62F25EC479B9BF9E9776832226D3BDD3AF86F30F2351C5D87F2F24A491333DCFDE11C3165294E442EE3C15B5871F311502AF44B76CCF71B9258BB2BF128B0FFBF4CCF81D572106FA0E7FE0FDF954D5911CC32F0000C4D32B283B874DC0CB0EDA415AD5FEE24343A096446F8AB5FBCAA34289B1C4900FD2131CB6338EE4371E704C8CC7EB7CB60A57541DB3F7C4AE85E10901C3A6DC54CA251886A7AA1333635C619B99C6EC005AAA0005353E2A99CEB195E84182E17D19B9E81CB750B871611CEE18EC7EBF96684E1A0DC1C28947CF67FDA18B975690971B910FE1D99A969190C2FD041A361CE12DA6ECEBFA3505CEBCB7195AAA5BEE05A86B7205F5EDA631DDF18883AA52DB2A62E2014B1D2BFD6FAAA545E4DDCDC1FD0BE4617C8BF8F8AA900BDEA700FB9D50B618940BFB0B72935EB5A118C226FD3FE20EFAD3DFDFA9AF6788187D992A0E98A6ADD1CEF0A858DAE32D86B03EFE4467605CEF00E1B0ADF7F75C4F4175933E52AF2054D4A9910A26757CBCB8F5385229301F6BD59348F3572C63E67625724AD6C4FA9BEA13DB948BEC6B0310EAF8A9AAEFFA04D657F23808CDEC36A5610F98002AEE0DC864F0B6781AFA3A017EBC2FBF91EA053A15EAC76ED0081627531E232133DA088159554CF3776BB60747F0812648FB62CBAC0EA70956A4E4C418D787663017BB3B87639A9545B849F8204D33F5CFAF1BABFCD9E83ECFDCF2A196F997FCDAEC899EF2D1F5C255DB9A82440F71DA9A8BBC5A7AD7DE40D3800EE3A73A97DAB09458414FC9D7DEF9EBA0E5BB9DC867B004A3E980BA167DFB67780054BC1AB8EFE47078382DBA880902E5869588304CB4CCBAF595270F300AE3E3D5ED3882949FB721747169BEE35D0A5B1C31F9F6E55108FE28F07CCAA6225030161B4BBB101D8E8823190E687C951572529DC0702E7D0C86C088A1154890F3A2C4593BEFB7DFCC346126B38B602D5141C605272C2EF47DBF52A6AD5C6C21BE40370A07109355311147823FD08629397C58584FFF11587C8C2C2A3DC77230AAFFFC8F91E44CADDE93C9A4DFDDE5C193F61BA4FD73E3F31790C655AD99A0C24030176565B15526F994B5B61C9B0D324767565DF0DAEC5762A7F1232C110012FF676E8BD789DD6778AE1D1900AA91EC3DECD716B982B112A794A54CB2BF76206BCC786259119015CD8B80CB0A0D24D976292FF6801FFE863422176972E095F688835A48A59807D3572B6493687B4E24889D69D146453D1C0BAF6F531E1E2F82A8EAC53C528FE93C933DE0DDEC336E34AFFEEDF892F28F405E0368F3940E31A2B0D91AAABAFC9DDBCFE7BA6412BA6AAA1BFA435917F10F6C099C63D331D888F69397D4A381896F78D02FA7DCA75767DB609368169570C2D4D6F088F46C12DD6EAD7AE1D7108A5303C484047DC8A67DB01A431FDB390407F3086BCBA401B7C6C8BA1A4B1F27EB8C37B5F565B860E01D610AD4AE076E41A8216C1F524812BFCC15DEC2AE0257E29160A7A6D2A262A014FB5260B642DB324EEF032A04FE98C97EAB1DCBCA2CD0E1F194BEAAA116BF47C93CB7C00DE7C1635B52FD63E29F789912D1D2F8C8BDAA0129FF62AB0F3E3EE0713784B8C125F96AF009D0C51A685077EC9EE1B1DAF8A2B9377F91E8E3E5F65D6D05CE26D37B9E3D4A8245AD46BFBCD7E0B1869581B3D7444A2A3075DBB4099BDE1A1EE37220B005E20D2A432B3DDF83ACF35680C6F06F5FAAC7B50CB19192A04EBBC7FE569D7F9D999BBDDB7FCFECF5B2CE0864085EE4D1C2823B3E0AB5D6B2666EE45BEC28CFC2AB5BCF3C553562C16FF9A7311F830B89DB90DA35A6F5375741C66C9CA7489E938DA6FDAF36727FE76705A0CEBD4F8B1E5FAA547712CC202BD1F3C2FAB47984206DA79C247D42010F2CE95A1918E8BD196EBC7B17AA38BA493EB1AE00E58AC65EFAB63BC26E5AC681735808920B10FE953554E4F85F3EEE103793BF6CDA62D6B250CDE483F4C9C796409982F1100C9F5624E0DD3BF456885BBA4266BF0AC520646E8EA34205E76460AC3E14616E315B27FAFD6EC07DD292B0C63E5030B1F206E3AABF6EEEFA05B2EA8C169BBE729B7CCE2CBADC3605398CC2182B00095F42D18E4BE605DD6BE3F64B839C34D54DF70A4CDBBD3F61367E89706C9C3E7147F3F671E3B3772FD2BE577193897920BA6FB07DD954D0E104546E3B803F299C2770F534ECCBE152991BE4A17B9F37A2D285DD331C9CBE8419B9A6A5E5BD8EE9FF7AF329092F98573116F2607B4DB7B148058F5F26D471EC2B9B7E5068202DB77892FF1A0BF70C2D64AF07E817603F8B1446FDCB07A4370126458ECF1F34C2A8E13A4EB6A171F29656D2B38985C6528C0E9A053D6A897A87776CD707A19DB9DB64450514AFAAA680B98A3451983B9AC951ED63FBAACF83DBCEE2F994DB544F6239CFD4F999D7E13A770092C53237559D55BDA19A4BC85377BF9FE0B6D9DEB89DB38A526FB398B00E180C07C8B83C7E809443BB05F917D838F4A0EE40919183AFE2CB7C812265C8E9E3F15D30F0FE9370EC4122F535D095CF2D58501AF9F7932D6FE5ED4D2DE55C164C546169C1DC08EAB263BD7CD7A6A2ABC5C8FEE2FCAD242B9271BEED9D3F5C3E96D3E8D0906530B5EF3C5EBA1898698384C28F5C23AA3085EEFCE3A79DB72EE21CBB40CF3297DD359C397BD13ED0EF369E943DFD9060769B3889C1C883F18298EDFF8837D6A83E51EF0E9B53A5773C2FB7EE82CBC8791D20098AD09FDAB3DE8F7394FD2A150AF8E5D2BB78A42F971B19731F46F69D486CA501381AE0783D0BF14794C76544BFC3F08DE445433295AF29C9A20E8446B9B285951E05DF7325965EB712BD3DB2967D44B6E0AE6CD1E6FA05A5FDE61AE4A9A0854D12F914AFFDAE5CE0DDE3A1DBC3A6CF6DF857132493E0DF51B655A1BE9A71608B4B2F86AC10E23F3C0B6387EB7450AEF660D4FC9E9C8A7C2D10083510B45523BD91F286FDA911CA687E4F664EE3709309145DAC334683F5A2D49AE28A8A3322C6E9C9DC195D6DFABA70D42F091073B0AF86B17F366E1670F143C1A3F1963C339F9457F904C8CBF232A26A1291891ADC8EEBF2A461DC38C5140B80ABB1C32462BC16902AFC77E907FD27BC94E8FB93E85B3688E9002B249B22F52B2E41DC86B65C9AC3D9E5D2C5A636D1DB8A93FDA0BF8A3968EB9D3325C04E87FCA5E2592EDEE963DF89A34E47CDEA25FF6F6DB096B5ED696C27C393E346F9ABC763676584EDCF15A5CCF019B6568D3B1339FEFC00833BC3A46FDEE5327C2A1522CE62F312888087AABA7DB345A5F22E3A3B01E2A5A89A21C8A7A5766EA89648F58598D328C0445FC2ABE0ABCC3AED818501D74718B991E61E36D62B34C9161AFCD7E4907D74A3761AE8794DDB725C5DA645C74FCF0FABF6E28A95C126B1810EB1516AEE13158D1B8C50EC0DEB8A1261C32A56735C0A6060C6F7BE63640B26C31BFDB040BF156C547E810CD86E7E0DE0FBB2350F7E9FCED13F3CAB6D4856BA0895F2E4DF2D92C3778F3114F260B4D8AAE5E43A79A8EB6AAB335A65643A5C4A8C211D5E8720D13F1E5DDB2FE3DC46D5CB9A1B12C3B885176BF492ED2B5C33AC645B2DE452FF5E72AECDE6F6BD6DC8A06DECC81E2A993BB46F3AF3A8FDF8E8626C8FA1DDAE311C763FBBA1AD4838EDDD0B8D93F8EA2A7B8BD6C91B42315398393E54ABDCC920E1C6D09CE7A5752F104DAC799272E45E0BA87079A82524CA6D0E66C40E450F372E5E1E8A141FAC09EBB38AD1A74A389407202C1946FAB433D9DD3E47C9C29881A00F920EE3ED91CC575B6BD1AE11A47EFC55A15083236E9571B5864B842AAFC23F67EF1C3BA231063F9D2DDB3BA2A90E598A37F6842E4691F66EC1998C4EF2FEC8D58333CDD069A8D31A3FE01A7D3880A219E9C7E400AF9DDB66A0C63F1F2012AF33ABA6D07F11F2074EEB76498EC583EBA11ED51E14A7EA110950CBBF2343433994C56B63C4E75332B615D4C2A069102681AD6CF9036239ECA37257D67E248C41961BA6638ACFF7B0B2B8DB0A0E1C3B96CC03F13BE08FB8C4458D27CA078032503F9270341B7E4C01E1D09E0C4D552A1ED9F74545289664C3EB9BB3F09F719013BF40BE0232BD1409BC9F97DDCD3F391868F0BE9710CAD5B45B45FE8C3179EB4D500F07DA68219EF85098C33246EF4D3BF339FDE5B9FAA1FB9146EC5E5DEE24C52CD0393C157AAE3A2C47159F19BADEEF4A8071CF5F434368898C7BFA4239F2908C714BDCE3D68293B2C06816D5C2A13712B4CD460AB0DA5E51C35810753334550C091257BEDBE473EFE88DE1416B01D5927A1DAFAC9EBC1CF2F86A048B9E54F44FDDF48B624BF0D0FFEA0A869DF5BDE18E7BD421A9E8FC64A9553B6008C09000AF2C1A0F36F2751673DB54F61006AC97F5B6B1EF84DBDBFB5644ABC6C90A399E451B57E9809ABD18BC93F6E3EA818C3CDB13A492A106241E1CB5D134215AEE159C78458DC3B5C0E8DFDF87A11EB266DACB6D454501D5BACFAE97672C4F652307A00A6CF429C06D6558AB69A7BCBD583114F48FD69290D31D05480285B7E949BA23839AEEF7375653F72DCA298C424746ED36DC0064F03E02B958E747CA0943D827F0B7B0C178D1B933333B224B45FD3CB233060307BA9B2175819CA4C43B88FDD20203A5A802969EAF2F1D003ABCDFF927431DCD558789549FB380336ED73D5DEBDE9F473580244E758676B917DE504575DA0C44BB9AB69EA4ED70B2094DCC078A3ADA2D6359503FA90D6CC33179E3FFA710D3FCF1DE83A42F717308BA983A9D7ECE79AECD5E57832C569D5DF96B6022673F92AC6B589E4087CB295452B722D4D8FCCDBECCF816CD2986DC3CED8581E11DC078BCA9DCFD78F63BCDA6D662EA1CA72391EC4C4AFFC51E780F53705CAD3A5B98C4509BA7363BE2BBB1E87B15FD90F2723E3E9C83D2F4B70197CA02796B53AC3B613E8F6B1C030BF34DDA482AEE1B4263D2C668B9EB74DD9FABFD03E8F841B3E4BA5D30042779C58B4F2EC3743B7C2A6FDA79BDAE17822F2A3DD3B1ECE2FEAEE39E0FB5EFD6BFCA3B7B0AE0E6B6A09E5DD4980EA15A05542EFC7CAA91D220AD14E4BCB20D547A71BA7EBB138261FDB52FBD175EA7619972FE982291786627070B71DF23A07BB394D8D8CAAA02C0CA34516AA898A97210D30F627CB5F6125077ACC27E2F4E542AB497EAE010138EBE8AFA71B8AD50B1716ABB601E449A5C6F75D49B0AA94C7CB60EC6C49DF73F9E5A96D52D2E935A8C30797D20D10C9974AA7EED62B288B39095EA8C206D29994CE5A2E43BB4410ED711B6F0E29FC157C6C08400C65BEDCA487B5693BFBD712D11DF96AFA7C340C79BA8CE331522EBE5C4E82839B96890F44811C1B8363DAB81AC2B402DE1520BB1BD3AC3ED467FB6AB0E785BF1DBB370E4D33202E28570D9AFDE2C0419609BCB6A6F3372753EE65EFB20A405693A6C5A8D3D40CA93EC9387A35DF5E21110471D0EB57A400DFEB56A02C85A06A964CB00765C7A64559F7094B4EA5EA39A17B1813916B845F3F2303A29289F74C61562D5F249F3A9C15DD7F90639148D373BC743A1FB016D97510F508BDA5940DEE6474B21DBF8ADFE19FF8E2B87D23514D88ADC6ED398E577EF3C909DE061C1A804F4F4BD9A858B57BCA124568E5B96EA4B0C732093F779D3A1679338C1C7C24ABD13BB1902DE81B733C0CC1CFCF2D26770B73DF725A848F2E81866BB00BBE1F6BF1D3FBC81519A28C086266CCB97BE0BFE7CC3D91A131C0EA30929836E8AD3A56293CB7697C1D92DF4C6EF72672DA229A8D72D91B340F2AAA249C6F101A72F2058FA64424D61F4C6E45EB9CC2D16953EFCB4B96AB172FBD38B83C52653F7ACB4E4717781EB7E89DDCB9FB608BB7AF82207DC7227260581A6A3834ACF7E0D267C9DA8D5D82BF9D40F95DE474D356C73DD2549B0CCA47374265F8B88D39BF1AC205ADEE08BB33BF884B2D0FA052622611FF984914A7C4DFBC5FE3CFE3B0841185BA704BD84B6CA18209B210179C2F961660C3F31D7920AD32C0D19594150DC29A7798AC86E1D59FD76696A69836D73ED6C639CD7EDB5EED2EE758541E82D9455AF8826FFC28AD933CAE406908A4534145FE63F3134290BFA6027647D81908974A2E80A57836D6CA1AE653BC55FE6ACF74232B99591A9EFAEBA32F411FE08A38895EE730BDE813031FBACF04FFF1474D92FF8B77DFF7F897D9ABE2E3AB45AE06F7F0BB369BFA07C21AFD13EC22B42654E955607F1F9865C781C36FB9A276209B72A9F061D41216429DDCC67EE05A45C85E03F65B57973B1540DD0F808A66BF26D9124F3A7FEF51E83A3CD7664F3043261F2CFE4149946693CEA93478912AD06C1814237B9C344BB65E395EEAC7CA983F1B2ED29F02F6528C81DB6A89A331F0964FB8C6300EF61BEE6193377AE4C238991CBA1F8F81925E36CCF1D904E44BD877F3C9CEC2F4BD4B61CD48A93A5C626011B284C44F8A76BEF46D49A15F91BFB84CB4D2F3848B9BD97A38D167D1AE4D6C1585B85A4A0EB08A4D2700B45C8465A2A585393A0B255AE297F41E78580A96641574E1F6BBECD5AF87599E77B31EF41D11512A40F24B21EB19EF13B5620877185381C8D380862A6752DE90D17F06D46304A7E403D2351DE927C34B66B79706F90544E546B3F2FB3057548D8D00526908677EA473355D2E74D306429D011DDBD477AB092422F869175A0E1767F94953AFE42D04AD40E3CC9BE05A5FE37D6BB6E690510B6A39F7686D1A7D3D452432C6C7CB27CB6D795B9EB2A1F60C82DCFB93AE1998C7C645D816477C3481791678A4F9223D3F5C9D762E94F4226C6E865704B617055025B1A589F7C3D789D7AF6522023D4518530CD3D3F634E9D024F9D1D0C6C19D5DF2417C74F1967D1B81814324A729A361391C89FF4F8859E2B4C2AEB7260E931C1683E7CD9DB59F6C8EA11C979E19440635D735EA4BFDE1DBBFB7C6D16E403EB6FC5AA45AACD4C6CC5C0BA06E993C997BD81C80A11B5CBBAA1AEA8AFAA8E8F24E995B5BE67648F4837760100038A16BC44A3F3068AAE45900229E4E05B2AB3C9144F7CDE32DA9D92A23704FD3477FBAA8BF769FCE3CB7C611B8817E26334B49EEC90AB5621A928FE604C9A4BF3E56CDB2C8E9172787C1BA49EAE8891B44BD43B5976DCB4685D8828524A6ABB98A5D4A06ACDAF788F504AA4D458939910639E2960CE17B9228AFF85BA7A6E1D4A66D24E5DADB4D2F95672C7E7E6444451E42640FBD231C99E77D91ED498A60B4F4022F452D3C21039CDFC26554B345FE7A44F1F5CD28A10D08D3059669C7F75A230B38BDF0186D4BE5C7C7D60348754DEF1676CD45A6E5200AC8C34FBCD19EBEFB47404B5FF6BD43896D9890E70B6CFF0229068F9E7A984B4EFA08BAFDC713340EF70ED192C7A09D1BC99398CEB6D486C9BA95D4912ED38893E229755CCDAB2F6A8C314276F755A7221131ED74FBB1D08A4A0147ECA1F7D5D13F6D66F8FC63DDC4C25D4DB9E723F35F00C578A199CDEC85035B6E3CD2E1E1A483AF62BAA5C9B75C725E3CDA621D9FF950E5C8601212ABB472AF53BBE893B95B5E339590D927A193C9FA27C04E0205055CBA308B80491CD59EC53C46933E950368A46227B5AAA0BAEA2DCF00983EA3C190B940340623336B9D4C0BDD0A19A04874DF5F1FE318B62A11C5CEDC64517D95E2F4DFA1724B7503620CB1034A2C0F76C6DEA538C5D4D5B41C7EC8616B9BAC822B65A1C727A8420ADEF1B9DA975BA71D376224A4594324A521C5EBDE52FEE530C66210A4DD02AB8C901611E6DB12DE649E1C209159C7C1F2B774F29A248C804BE016CB3F357527619DE0F76A0AA6A8779991CDCCCB237AD32077B706A7180684B639AECC8218616FD810E44B427B7EC826911CA06D9B42F57226330F336C8195366E8F62D52E746184F135245EF7EA94AC9C94A65AB7091B8B9C67D0A45E855280BCB7825B51F50717C9F9979DF446761816B02D5E621F06DE2E0E945637BAE38D11DE38E2B74F212551B3AA32F31AB0DA712F3E8A1E6527F3D40E92CA7CB16FDD09FE1B19D00B646CD60A7386D87ED30B85CE1FE095D08FE44C9D04B773D954EA0995C4E8B2BA82CB4B5EC5A19F77A4BDB91F046172F4DE93D332CE3A709669A8D793DAD65489C9CAB8133824B0B10279E87E3AFCA3EC626839243067C1BC89C4D04871D2BC6D57F73EDDABB4B8CDAD77281D007F0916F7874E8DF71B577D5EB96B581BC239A7DC843ABD38DEBE39F6EDEEA12B56EA5CF8FCD753E395D789B182C38F3B0F15B57C544F6EA1561A323095FDE728AA61B8EC0A4BBFE36D9512B2D58C4B11DED914FBB8F3BB043F78624FBDEB061AE169F81EE6531D9A9500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%%EndFontu1`65t1`65%%BeginFont: NewsGothic%!PS-AdobeFont-1.0%%CreationDate: Wed Feb 18 17:47:55 PST 1987%%VMusage: 23138 23869% Copyright (c) 1987 Adobe Systems Incorporated.  All rights reserved.FontDirectory /NewsGothic known{/NewsGothic findfont/UniqueID get5671 eq{save true}{false}ifelse}{false}ifelse14 dict begin/FontInfo 9 dict dup begin/Notice (Copyright (c) 1987 Adobe Systems Incorporated.) readonly def/version (001.000) readonly def/isFixedPitch false def/Weight (Medium) readonly def/UnderlineThickness 70 def/FamilyName (News Gothic) readonly def/FullName (News Gothic) def/ItalicAngle 0 def/UnderlinePosition -96 defend readonly def/FontName /NewsGothic def/PaintType 0 def/Encoding StandardEncoding def/FontType 1 def/FontMatrix [0.001 0 0 0.001 0 0] readonly def/FontBBox {-187 -202 1000 1020} readonly def/UniqueID 5671 defcurrentdict endcurrentfile eexec6029EBACD1A4244B6679D0445322C46C7A2171DAB3C63058614AA52B0C24FE4491B24688A5CF2F71A38B12B0BF76F7D896B89637137511EE86DCE9ED2C6A6F77CFF120ECC58AA1C1E2F4969BB78D60ACF4F33299CA663F0A3E1401B5DA864CFEA7FA8C4A1134B8DB618E621A4036AA6783FD094BB42032FE3F741A9C01495272A6A30B5217A5C161E13EB9806D09478E29E3562A64B03CA36080DC099F838EB4A5D5410C81368CEB888B7F5C551CBDE5F9D61405145E4DC0FAF72AF4CF754566F21C84035214D8F2C3B8D07744CBC8A522974C6EBCCF5070B7D0EABD2922B1DB940C1FC9547EAFF7D442DB81302AA8FBB9884CEF8FF2F7C53BD30506D75730AAF95E41C5E700EF6553A99FBA9D95F608EE248036082FCB8CB3A134E2C53E9EB5D1C728C9239558EDA14214B3DBC129BE3BB842540291FA26D08FD65A95F956A709FAEFD28D14247A52CE0A04872BFE3B28315F784860886BF61F7DCC4B49E5238CBC3E059F1AFEF9A4EBF953E5C561346380D0B5D9B3DC0B9C3F52699BFA7688CFAAA1DE507C4CE125B76D85A3DB4F65CD12CFA2065556E9E745A810C035B5DA652B59E45EB9B8C308F486D9DF48707B0E3BDBD6C1BDC3B6B22E01226BBA547C54526770409B40DE00DC41DE292EE8D8753B8332BC16B22D4C503563D5CA9B980F848C69D23270ADF6389EC69176519CD12DB1846FC08A3AA1337963C594DE49A23D04575F2933DA6471FB12BD538A4CC61BF0040880BFCD8115E12D2606752779BAD9489EC5C3EBDC154C4A286542D838A3758274758E7C9F6DFF5E93CCDC37F1E81DC3A8FFBA49908D6B9EADD115221EB13ACF27D391565DEDA8AA27F631E3FACE8607DE153830C29DDDD571AC4F0CF6E38505D785FFE5FE55C06D040633FB895718BD76B26A123E9E22D1F0FB294A79470AB0D05FE00792AF63E389283165F0D5CB85342CCE9C3C91386465A1CCE4F4A3D2379AAB3525A92F06C6868BD28EC285EC1BB6D3C07143FA670F42C19B04F775862315BBBFA846548085FEB15C98DD837386F411D4236360F6ED761699CE645490474BA28F26C793854CD7CE4E791DF401027446B0481EF026766AB82F3F53A281105A2619D076BE16F08F04606E4B4D763E34B0E317DD561ECE0D30A88AFDE4D48B2911B2586A253E42643408B2C494690C16B3A10A67A55DD5BBAA633C7A6462261541EF655EBC9AEE94726D000A3F799680FD8A05E28BDFCF6687F6FC96578D99ACE69CF151556B77907D13E6661E481339F75040A9F522095AEA88F0B407A1D671650A74179B024397A6A80C58A119BCF0331839AC01CF9855219AD3DD5834ED43EBB59CEACCC4F3917F451AED001A8056375188AAC4B522D0DDC723E50EEFAE3408D8BC9DAF29A1F8A6E330BAB84A96D386C3AC0045C181F2A326AC4043C01B9A63BAF794BF32D2DA2A4351F618C1FC16FA93255F1672705CBB8E7DBE3E4107521A8549198C3940BD9A99394F10407ACFF452A29E82C9847A7CCF9FFF51B17602FE39ED672C6D35B42B22E0B9AFB00C1E470452B74A10D016447478E706892E5F4F1DFA27893E3A56A33637D1A9CDB993E63DCF7AED9D0CAEE66FB3F861A4C575C9FAA9085A56D9F899917126CEBBACA54A6ED6AE8F51FE6C4994DD9A399818812A6464753BEA2A3BB59CDEFC016F631C2DC9D79F718B927076BFD1E873D83C0F2043FFF5097417C9BD6F22ADC4033B48E22B013F30C9AAAED95D6EE869382E9DB622A4D46E11BFB516E33DB9C51F4943D148BC3B8E9BBA42FDEEDD21532A2224FC3BCF7A2BD51372CB65CA8A87CD1EA796187474522195D40E4A2CFBB930BC789E4D589BEC741A47C20B62165B529CF53C470012A4EEEFC3228A601235FF3154BD42EFAD0F5378CC111077ECA454C7CD34052597190F51C42FC7C9FCC928B537D3700ED881E7F08DDD4E37B6C8549E5CC15505010AECCED8B6E41ACA56176B6B32A2443D12492C82FA16EFC84860FFCD5255C6668EFE2F34E38C0B979040C84FF1304D11F1ABD07DF0758A4FED6D2DC00D4CC06FD8B59380F4C6B7C62473F8BB0A35E66AEE58F4A99C44E9F3B2FFDA0393C22ED01CDA14AC2C7FD62BBD1F51B8B2F26E17BD8D3A3D1B4CDE8CFD7CD334662ED38A6A8120873913F943B7FE7605EBB6137BB7DE6368E8994D82383461B467F6B6A780826EE72BA1E31349B2B064F07490BE92D48E022E630D8782CCC85A721EBA9224A059C7B7BF4EACD237361AFC7C81E210058336339DDAE42B2BD54E13C081A4458578DB18639E5247FB11B98470E00DF6DD3D8DE5460F3A14EBFD5C4F94952C05A652A4AEC6FEF615E0BA4C800DC69A23F9AA67FB6FE9ED4B3472A2EBD155418C4D38EF9A132D34AF45CEF0449813966CD8DDF033FCA3BD6CBF4B698FD4EAFE3FCAE8545B50FF9633798741BA5B2FA529F46F6296AF41C287877EDBD6C5F6FE1CDC302BFA04B066A94A8247F310FB3E09B9C23F2F91D00F03A6D3618AECC4E94B097EE47C0771C4B86BDD7BB033431645BE6F3BF0D7E978075F4C41BE3B991EBDA75EC65D80A670A6FAB523D3C161E0A255A0C375AA354342DD3CD9C3E641BCD5D8C0D1E1B3C954E6E816AA1C74E37B43923DADDBB5A02795D049F3F0F3A35E9674A3E754F9FBBF9DAFFA40264F503BBB163D73BB1B3CB4BDB813B8934EBD3ACCA3C5C989E69DB2C9AB985B73D5EADA826563488032C6F6704BAFEB6E74094B4615F725935494F7F8F81566CEF7587AF53A92A371461CD8572B3C664A0175BCA644871B0193A31EC901FC510ADB64B6E928C133ED28C7534D567540EDE93511690985A0C34EC2F01F207F7B838DCF959C9E20F113EC6A245884EBD1AB109BC96CCE6CE4D751F53ADCA40062D09FA7DB2AE944CA05073141CB9C37795715CE41793BA7D20D3433D217C0E29E8F2166FB317997EEC69BF29B51C0207CDCD62F94805E99A9938EF22E4E742512E93B1818533F70DE62C2864E4B458E617003F7479D4F38B7C45658ED736D9EE1FEC84D29E9C6131B4FEB2343F15FC680228AAE14DB3800896DF9E59765462AC142E3C34AB4017C11A630F3DD03279418B1FA6CCB95D53EF39C8B562740F33BA8C97D9DA4B36C00716AE4A0C86B4C54961BA2C05CD2BB52B79067645A24F91618AD7AC49927F172D479DFC8F0E2128369D84C9E5724A964FCA2A1BC869B2004C2D352126AFDD860C1994021BC35762ED8F17CAE8574FE27F15BA85E1CDE1877A3E6CF740BE6654F77A379A4DC799108C7F0FCD45038296CCAB26560A7C9E467EA8042E688D62CF1EFA5BA659F74D54B83ED746CF48FAD6D3F3C0FA303B12E194BE9C222699C3F3FAC808FF7AE5BF68F000DF5A8EFF015246F95A100E0941B85F81946484CD160E65EF4742BD8C0727B60C211A3F9C4B08B544DAD099D8C42894E54905F25CAFA5672507EF9C645F4162865831945466EAF526EFF29B8390512E73709FD583CA9A30D94D51640E0411A659EE31562FF145EEF3FBDCF42EEC18E29451C810F299D6E1E2A5BFE0D595DBE1B8F3D3BA35089775469B7ED307F561D5DD0C4D6484F9CCF073D0B115F6B1A4B4FEF882F320DC82425694812EB1E27AE12167DEB2F6264986D682E95D8EB13344B1994F5C1BB658F2FBAE8BD0B442A19D9F3D178017826AFA1DB0CEF1C2E778774DE2F0CD839239B9591C978AFDB6FCBCF6A23BAA5B1369A41979D77A4C7CF992B8463AA30EF506718F9D52073D01966B4A79F392D9D0C6F6783E632F94C5B6BB2C35AC4097C4E9DCF7630AE1FE735021894EB0E7DB3102DC8FF8BF6840E1EDA6A0E01056A303DCEFED5EE6DEF94DA5F13AFCA226B0C361AC9DE8844AB6AACBDDA64802FE031443CBA9A673AF469F0841C71AA5C18BF8300A97847E1F07E7E83F6D247C73D7848227551565F8FA72BB7D57CBFCE553AAD6E4BC732C7203735637CF07623BA0193C2D4899E4F66A0EB288242D5A9A485E5D5285EA6E37733B77973B1AFE807D313E03F13926F4406BFCD1D5E2F1BA3036FDA1E99EDA12899243DD35B6E5C999E346365B267C967AED16B4565E3046F911220DCA568E45E8822C1209D162513A39E1829640B7EEC10A362B4988794666459CCA8CD01039EAF34A2A624AAC67BD3C804C24FAF978C704FFBCD151D57073B5B8388B5EDEDF57334ADD96E296A70D5D7542ECB44D7A4297A9E79E2C02B0BFBD7C81BE6E215EA913E6B7A22FD0B7B897F51C09561D808FA953853F9B2E8BA8F1271DFECA66E04F1BE094D1A981EFECCF61E62AB9CB7F35339D71B6F9838E0BF7347530642AB7AFB9FAD6955D3865D129895AF01B8AB6E4616FE209123B6E2B50318EB63AB620EE14D859515D95BC799CEAEF0666B6ED0EDE1447FC7166C46103AC6011368DCD36E1571C15A376E55E2512448321BF9B86A9CBA2EDA4BF11CB44E6E33E1374F426F7CD67C0896DB3CB0AFAAC2570C07913BF1F6845D15CD598F5EEC6C9CC387A17F9A01DF20C182AE98C77323A3CECCAC567B95E211172B3C0880AA3990F90D72DF009042711962DB6FE4CB8C3FF6A0410DB57B4D5C255469271351A8F578F18DC2B78CB0AE7D6B7177C0ED789F0B25F4C1998B447B3987332216B39A3D26CBB1FFAF12CF9D10AFF2491DDC0679A6F533D33DEE58031EDFCB007E042E4B52FC361259DAC43709F082E1F56FAB1FBCA22C5CD0D47E22C71C1C1A32CBF50205CA6A9BB8D512B37161E2D02E7F3462C1F5BEB43B80DE2868DA936CC612251BB2E589398882D8B3E9ABAE68EAA2DB59B3F3A7773B98D8AA05E3A82BF060CC825EADE73221DF6C9A990D7C670265FC8FAAF6B0E0A33C94A3B94010E0219786B61DA91B46110A0D254704EEC1400016D6F6725C473C36536A9FF8FFA5F589B47706DA2473993D1B7FDDFEA8892FBF264A4F4837259C8CB2C6A8148E6D98393DD986B213BE49358147FA8A4A7B565F49C4593C3B5840B63583C543B8300EDF586E4DDB078457BD8E43A845AD7E8CD345C7D93C5DEEA12D6FAC6DE39C6AFE505E8D30B1152DCF8181A119564214BDC2BB93FD71C698C837184E620CCC9EBC74B96DD3C067D3CC2FED69BA82C5DB51BBE2FA59B107FDA28F11F2F223EE08F0A9DBC4A05C5B34B7337F90014DD2F9F9E9D62EEB4E30E6E948B1E7B1270FA2D529A5370EF9881598521E7EF98B4097984801E6509885B970952C8281B538A6D4F7CD3DFA6A5797539A33B7A932AD41EC9EA4B2EE211BCD8494E23616CF4C910842D44C60662AD1F14002ECC55EBE464E86A20873924529274CD616E710E0F8348E887D687CF06FC41A77C8F5944E2C1CB2310D3B868FAB1879A90DF74D209A1D05F4D6A858CBFC5671A778470D64F4745F5DA70889953F033351E1181660658ECDAC19816C48F432D0CB6CCD78EE49DEFCBD03EA026C38BCD9FC0D30D42C5D0E0F6A9AA6689B53F57CF01BBE7404EC576E99B79D86858B20A5977B3F410F2EBAB19C9AD30F2D271768DCCACEA36F1DBFD9BAF3F5A8817CD479F29AE756C1C754D22DE7FDC5B60BD506F7D93E4A4F135FB5B114CA319E4BDA21BEEE5F92262E30583F9721AE96A352E90169E6151139BA938C61CEB31B2BFC9710A8C8EA8E6E18DDBF8A407478AB0F1749ECBB56EF90105D47FA00D522EEB3D644CB6DE19ADFC637836CCCFBE71F3C5EA36EEF3B27BDB5FD906AD2BB93AB5E7A4D610D596555D0503CB2C8198415ADC8B5ACCFDCEA726AE10560BBFE9407F2A18F8DFE95A979F11F757594CF913133249EEC9B23AE0EBDB8BC5326290A7F2DCBD9004530BB6D83DA2D35E9AD6B9F7682FD54FB4FEF6A325AF62B70EEA10CBEA8B071076F7902F174C246E8F77226C214AE869EE5D5D92EC5CAAF0192556C57E55857A328577A9A1E35C80B95FD888EAF03C170A7B31AA85086C06316A0080D599725659E36749B8137037D285C2D59FDAF08C9E308B07A29165D62B7A78E4E1B5A5B8FFF7A4B66756C2C01AD25C7AF4A0C47CD18FBC11D31188BBBDBE521B77FF2963EB81C55815D8F7984017EAB7E653DD50F62E2098E44950F749360822DDF8082961F4BD51936C0BE578996B73BC8F0974678EA5F8129B8C345CF768B199D9BADCFC0BBDE27EC6EA5D3D5454F4BD4B94BAA271609C7DC8EEB28A369B4676EA27880CAB5C7D0C7D6A1CAF54C0159B6AF83D8D2E41A201FAB4C9EED92369CFE3E3FA5FD95D94B07F991D0DBE78D78223189B77D10F339E196BD979F6D500019C55796DB01FC26463CF35651244286A15D833233E8600B506D277D5855CC3C72269ED8CD09DF415C97A3A9F5E8105A29C7351DFDA56C856E0DB142019A78D38A8D3666D7FAFC2688C7C2D6D45EE46629FBC2F1330422F8A8C454C6D3F0246658BBA30655D963BBB8682DC2D607F4822C2722704493C21C9C1C02C101D05B38C40462E9DDD06B37948B63263AA842B03EA2D57517E2AB3AC9FB79B75D9CF3040CE864760D12C07236E102C68F887E4DF7B380F4D1773E36B522F9E70B04554A0B21CDFCEBF3CC0B6E41A4EF3A2F16E5545927182738E061BBFB2A5AE2CE32B6DB00202EFC5829429F8C3C77DD2A1B4AFF4C2B2C95BC2423FE9BAABDA08E0B6D604D742C55D97F18DD12FE8AF452BA74FD4A4547B50DA85943ABAED8BA6E48712B6526098A8464A8AB89B26C80F3B4EB5FCAF438B8523F95E5EF145F76D4996FA3C39B32BC45A0A4C793E5A50E8C40F6F607FEA4E11C6A2B4B873B5A2F4C5EFB7864198654F9F18466CDD889C6C820C8C5F11E09512FEA07E1D969A0D65AFBC6B4FE349CE4F97BEB8F7305430720D75C5FAD20D8F91DB18EECC8020780E2F6277E088E3646607A577D01D7B189A5736B548084B1F5F9B82BC6F95456F5C53E4A0CF487E6BE998AB128C71314B8F1E87F7FD7963828796947DBECD65E24C9DBA73347383A47B738093E7C391D9A0121B21653DEB5FE39027CB6156C38FE0F17514F99F206791BFC1774E90EEA68DED574DECE3590D2C58B499C326C376A9B7EB432203774D10B2EC61895005721D1A099334314E8ACFAD8BBD5CC70EF37648D0ACD2EF412A121D8958CE7A564659C565511F90E15D662300C11B0D3D8CEE381D027454047DC85D2E8DF3DB70BEAF8DFDC2FAF1B8FDD6B301F15384EE1A4E0864A9BF98687CA2390972B9C059D3B566733F739B92F68AFDBE4152175AB4D97E0D536513DF6E9EF7A56B0C1D77B769F6B3811A96B8B793DB9E52A99871A0AF0EDCF0B1FBA7C07E89B0001525C04159FC1B30B3B6188DF4F73AA4BAD5B93F63C3A19461C01EB6D466B473365E7A788F9B3F91F6686764F68142446F34706F95576F4B68C701CA98E2A1DA4BD6C8EC2036DB2D8D623F8B7199CEC80CBCBD765C3022613DBD46A566454C6AFA0130E11CA04C8303662A0B2F48FD7E2F77F2AB124037CA75AE685980411229E257E6363999A69EB9605DD1D7AFBC355A362A6D320AE248FD949521EE7AE7E0DE1E2F373A141950956C9600191E5ECE169F2066F17BD20D6A0358C6F20882415BB9E3AB45A0DAC53D3EE7D2BD91B0195D0DCCD9246BF1679262F8F4D1DB19ED8F5FE5E5C4CB47B1260205E7BF858B7B4FCF0074888B9B78594F1469538C0330451A1D6B48441EED2775CDF4D1042399B16A7D0C01766653EC3F130AE2EC255564E0A1EFE579D3DF5ED49DCDFDF5DC1556D9DED45D8B46666F31013FD646E415D4EEFFA585E0199BD6613A7ECFDE68267E3C76BC2A09968BEC63EBCC473F85F1CBE2882F3A7EBD95CB445F7BBAC04EDAECD88CD3E71E46F1DAD8326F1282DE7DF41C14EB3D520C7720F8869B172FCC0BB92C18F31E0F74DD322D342133F5C89653A7755E11D4BD1488221F57BF00007441DEA63AFD1B909F062A60C3A14E40DDF5A0D2DF224DE87502577FCEE71C09D814C9A274DAEBC7ED6921D75B305AA23BD365208DB5834BC93816587D010FD26F5D8242297873E4AE4C164CA96968AF15BD2EC3CB34AA74FDAB3841DE4A3052787C61262D94C4F32D31145559ACE9FDD2C3848042E6C62D8C472FD3F76F289D0A90622C5BED0235CBBE50175BA9B08C8D4BD11459CA5F73DEA22CCBE06446D3A12B4AED305B2FE297FB530A0FBFA08BDD3FB64EB3E918F3E2DF5DFA91C5F7FFD2BF4004B8270DA3B6BB5DBF0D354A06572290ED945AD5C770388C0D5478D76E93FEFCA835312256AAD2A509FB1D441E24445BC5EBE7F766EE7C580D10FA10CBFFD59E8B2E696F9EC20A89D938E9C74BB5BE2EE1F7866687C1895395369F9D0BE2E8AC53F13A6EB7BB4514AC2042F359A60E2331142F84494854D91777AA8C4AC2174FAD80C51AF6E88B386922789D264F3092D5F92FCBA6744138DCCAEBEC2131BF28199DC8D84755FC5C4276114AD10804080B9A6BD60A092083E29E2FAD08229F735928BCC4A769FB5873D1FE92656E46B5A3851E798DD958F59B53A062B05C086688B5062BEA61851F53DA1A9EB05A40CA5658372EB2613F5C6E897502CACC037EE562A53F0D067218A278C0460093939B71B492B60DB0582AF67E489645D363FE6AF432BC1C422D2B434068BCD26D3B1F6B6D0D59613F674FFCF9020534BA4A721517F8F20ADCDC46EB437DA920E78C739CB8AB2BDFFA1D2E31B4EBA30E6F3D1E6E160FB48BFC031720FEE62A5E86905952CD17D7FF0B98369DA94DEED75F38575103A76AA8261FDAD2C2B324B83A59C4B1126DDC98E03D6C87DF81D9C07C401BCFDE1D8B8520618E6A434380A1A3242D0328C65FAD38736C09EF09C294CFDF291974A2C5608F1E9EADBC6A675AA548D373BF61D7087EFF5397161B8CC6B81DB4093026A4A9456B503D5ECB3D87C66DF77EC6B4BC6111EA26C4E3658D76908663C6DDA9740C6D9FF8793936CDDD7F7BC3358C1CC2EAE1EDE88910B0AED0C88D50B404EE2B0C90E84EB93E9FB4D7F9825B0247EDE814233B5A7EE2D8F094AF6602705B88D6832B6EBE5EA8DA8E0FDEBBC27F7F5E86BA78B9CAA27C003D8179610BEC8648127A01F737D05E7BE127677D6FED9884DE2707F27A411CA9A664958E587FB7BBC8F3270917C865463258A29588DD51C0D0B15D91C7D2BFC2731FBDD2C97856E2A4DDB3C7E4ED1BECC743B97CBE12455954F1BB5FA94A868070A353BD9BDA487584055333F95E2DD2F6DDB0942947EE50396E84B5B43FBF18587A1506EC2766157E7A61CBBFF0FF8C49947ABEE965A5E660382EAA1EDFD5F99C38F53D6C282269984C8713B2C07A4998FDC0D46AF1BC72877DCD350BB3786A132CBB41CE1D33C0CF71601AEF9E15321639736DC24AB30FC98229015917BEC819FBDDDA0206E836A338E202643AAD8AC84041D61E78195A7B381C23AF129099A9A62B272B9FA0D339687E0B0FBAC41E1EC0AC829AEEE4A0EB0E8FFCC7B4AF918D8E1A561507027A040D20DEEB9E82098FF15466A4B6B43FC6D9E22435585C5A631E84672793D28C7A9AD6D66D82DC68FC4C683661FE8965F117633782DCC5951BB4A71CAC7A89639176762EF68A6A962577436AD1C69BB60B02C044B22906013A4B9FC653B34AED8BFE1220EBDCA7A50FA0A7CE3EA6D716DF6927451F3162E1B9CB711FFB79D79F925AD630ED002E9C0EDAA24B64EFFEF65E673F7EC4FFB38CE31DAF3949348103A910DF8E8BACD9069C517CB85125798EE2CC9BED407D0877B91C84C750914A51F8F7A83CDAF360E4A59BADF20FC1DD6EF060831B93EDC4D08C0B207A96CDE09ED0C69877104E4B69E7A5D2D3250BBB12518AADA61C16E2D53F035D257E8B07CCB057F7DED0D34056B4FBE41C2738B443DBC98D3B6E5879E4A221AFFDB093D7611C3D89D441F691FB238CDC4810C9D5F9EADCE1327A7D59CD85C6B9C4A551A06D163157117F11530CA5830377A7252CAB48700FAAF6BE7A8588360BA341BF2B897F80414DF0D44123F312385A4C69C1CC976AF343CF5B69A760E9D9C34DD16992D4FC24A4EA46DAE2AA3C7DD774AE0E6253D8D2FC277C986A55DA752699267D095409BB0F755A9B1B8F605A101950D8BCF545CF0C5B31610A935DBA522D34736511E57225A61B4F01F16609B5FF45185279E4623894C9C028B931B6EAE54AFB630138CC6539900BD185223E1552F21C16CFF1E643A2089327DB7E42A04F1D4D2C9FEB99F5EF42718263D170ADF351BF13F5BAEF9550596B474D58AB0F151D07736D529024DBF468A4608FD665F2D887429FC27DD29952CC552444CE55ECC5B58780EA9B6A93493935DD62B789144513E7E7DFFB334380A93978712C0D195E9B648D8789B29583B03581FD09640C6AF579BB24E24819A6F5C8DC15DCC853982BA656B3F07010C3E6CBB2026C037E88C1C4196C3F9CFAA367A1700B1803E889B4030A574346BBC0F040178A6C4A0951F6C4EB6FACB674B9DC30415911DF5C0D4E9A876F9CAB8BB6120F06055D035ECEF41DDEF69D54DD65B59C0AB43BD5651C5058FF10D823429287B2E44F6A8AEC6E303C1DB799A589449C660310EB5851B60F117DD3FD69F2A4DBF86D5AC59D18F035F9B5E1605C65135BA35769025983A7C45063FE43846FF6AEA30EBF9626586BA4452228E38E13E23C43DC1892777131C5C8906C01C5C22897030E87AD166A97238481ECCFF298718F343C85F30204A4F1134CEB4E6B4A9D7F532AD024E596C30EA132054AF947F15F2BF02C8C43019A7EE47818106766576E7E8DF2CDCE1F921AC09047BB5764437C7ED43626115E00B625050342869D8404BA43A8F72E4DD5187DA096F3C7BA963A9278F7937ACC5E2F70E6A8EC421C97085BDBECC69C1E4C3BC0F554CE1BCDEBC66DE346B25BB92A023BAF70E35985B6542F23D53EB132977A22FE59DCECB742A52D6B164965586B9D03054A20CC8AD4BA54879922114AF99835DC2A8ACD6B24F48C3D3F22065F8102921CDE8D541216DBF21C555F17D780CBEA0AC9408404B3DE4569E93BC140AA48519D6645934B82D4902554268BB023E46078FF6218F8D7109B84F41AFD5ECFC383A3C7A41036CE2FACCA654E3CC878C869CAB754020ACC0F96FC9C854DEB662285D19634874A57F8CA29F05178AEAF8B5F2B74CE0DF1E02E9ABC32158E8790068FF12135D9655A365D482A3C468D3BD63D263450D02B95B5151486ECD7F4505930D91B1ED7FBA11C05B6A5DFCD8F2387891BB151627B3557BC5F06354BF41DAC19619B16A04F459F0AE0B2B9E3DDB7FC6EEF96F4165678A9295D9D29E1263B8BEFE5D7FD93E31E7A0669F91B17BE47382673C999FB576804FD145532722BB4C9B1DDC4EE4EA3FAF0970C05B8475FCABFCCEF589E202A91113A4FA4D50317E584767BD0900E3693176296DC760E5BB531E1A2853A556246A5037AE4F7272EEFCE125F2E6C21EE6D5DA3C968BB13337D23548F6472035AAAFEA5C162D534DB7A2866CCDF6552F661156E540C72977EA8319DD71BF4EC289CFD690F8DF0FA08D1A8FA8096BDDD6F29141064B55F3223525E6F05EC618E6741B5970900FB15C7A962526F125B2A18827FD279D2D62C487162B059EA0E4C4E3337285F44B730ABB0C9913270C4221270CAE156FA5355070CF295A876E45CF7180AED877ED3BC478DCB2B544C327D524FB8F146BD7EC86BD23CCFE020A622E3CA06B7C20ECD71751E37D13AE85CFFA0BFC3BDA59825D833D548F4C5D555D00A7EC1C3B77B31931B84A6A826A01BC59302DB58098358AC9C7BD5269908E6D3B71D14D1C9267542EA177767FE91C0B3AD19EEBAB6D5343FA9CD6757A0E060A337924C96B2A32FF06A95605A3194F7E229E2CD004D08E3EDA79FEAFA460AF0ECEEA50C8D178B6F4EF2C9FB3766297C5D0AC9FBF38B53E654E85D17EC67958F153C6A6FF63C9B696978CAD7BFB055FE8116029391DBF90B1716C9A0C9D8AEA7F216EC7E4EA85ABE7A531F173E2F4A646EC7ECE9E5FA98FAB6210CEEB54620F81EE204F225D0013A0A13FEEF639ADC3D30655F03DD0304F026FB9CFE907EC532870040D570E1FC50100E6C62446E87DDACA510E1EF22AE3F3E53B695CEB8FB1F15D73920554B267E5D6DCD14588DD0DB44A5EC20854C751BB2D985D3F779DBF0EA7805A84053909477C925F781C9E8F1F4F2A5E4A69CF00374CDEBE9EA85EA8655FDFC61BE59CF0CB8F434AD0C419F8CD7811A6CFAB1D887CDB32E87C3023C77293BB3178204E8F58D5B1FFB895F7365FEAA5B59B96DF7C345818B5406AF05F32E30B319EC50DD36955E1C70E316EFE5AE6EE36298D5778A3F15C2F84BAD69A0F1C199B710EB382AC8C6FAD93BA873BF744EA1B0E19D047A0BA920BCE04CA6AFA252AB0097E0B803DD3983C9FFC8D3DFC7F41001A9B9EE1FE06845939279962535EE3BDE65605B185FA96BFBD33150C21F28585F6164C88824A5D5D1321BE52B47D39B79AD8078447F9EE1B51F1457DC170548A7DAB1146AB86D051DC297A4A4A72CC52CE85F870DD44ADE16845D2333439F827C10660E9C3BA2C3B0F5A6A8D194DDC9E5A60CB97B65D26135FEA01E83F7EB75B3B0505CC203BC7C44EEB802FDDEB3B2891F855797F54F15A748BD36D4495C31F76B9BFB659B3A948C2EDD8FF421E0CEA9385C0D192913CCFF4024A862CFE7A47E222BCF98AAA99EE04A313951756BE430A8EF6342A2F3005B2F86E733FB0BE69B8A89F1189EB4D756870E129F77F13C28FC3709E558D3F12C3F7CC69BD36D95C24B23B811A87AEA62744563D16454F1908F2A24BDB90126F5193461B427BE0D4F8C4EBCDE77349AD663E0FDCFB4B6A2371687D8F0DE118D00E0C0E17964274C57253E3E546899AF8BA8F963DA5B655406FC73516D6390B9EFBECCACBE2BEA76ACB82EA227DBA71581D1EBE123B4536598971903241190FB8E7F5CCD8C631F05C369FE8846C9B4931BF6350AB20E7D73F3497CD5FF5CD5EFA8E9DE60528E7C53644B45BD9B191F4154B835144144F2710CD65D98E08014D329F495AD4DF51960892AD0B6221F3DF1BF0390D659C9D253FEA0D2FB6AF5091FF4740929DEC8BB745ABEDF0568087F00919455188BE15150F6FB1B8D850EC078B7A5C727B830BA9C1AEC697028DD07AF5849DC7CEA14B690EF37A25D8D4973EC472B68D34038940587385635CC7DF9EB760C8131FBD22664D53DD1BA8A64A64F353CB7A7B95A04B8F28B994E14D53DB1D7EC9C2C607795D2F8A736DC4687B06CBA83327FFDB5A90E493A1C45563728AC1CE65D5559801EB0429B0EE5A827BF6BFE8356B42FC96661498CA85C8885530EDCD984F6AEB13385B4D90D933AB941F95B0F840657A0C12B4C79FA3789D6C9C456181A76293E141F297EFCC16E1DF259CC8127445D15D484762F4ACCAB225D7B68B1373FCD263D65C59CFC0A541E7146836639A85F79C0CA923393CC6C9FA49D1A2BFF1E3030E5BDD90CB9CFFE5A2DEE0B37360AA8DF53DE9489E44C539295BCBD9EDAF266E075A455DF5DA6AB4B6480EF2DAB4791D4DC498D6FF3B189DFF6361836D4C03AB5DE8A2F089CCB63A63750F15ADE166F364618C5C54601754D407B38371F2C367586182DD5C440A4D951B2694323605C912D38BCCAA20BAFF37AF6E6752AF9A2C3A277C2E619D6A4E7161E27E3FC00D143FFD4A9BB7B7B725938618B4A796FB5713AD2858E496B95F6B7197CAD2C3CE2A6FBA3A13E8A7DC21E799F3776FDE2E22E2A1D89B27CBC0686EBE7CD3D471662DF837AE01748C3B38B11C3EB2A5D292BA164C79DA8CC51EA37D1F4FD791837038E4590D20B45E2EA823AFBECF3440176C30749753541F69EDECBBA8002C401EEFAB4A7FD6E628EEBF620385B965025BAA35573ADC5D86C8CCAF32F9D60E2DB69CC84F651B7DBE3E1FDF6B941F2452F50FB8CF237A7E3E3FBED706A0FF9C0F562356420557D900B7AD4A175ECAE4671AE1EE1584554CF47AA308DE6EC2F2795DA349126BBD964C40F8BD657535F732866C49F2EF0F6E4A6B8C72280433A9858EF4DAB63CD2D8B1F99C1B6FDD6CF607A381B2C65FFA56D8C9AB9DB8AE85088125C6FE5469003962991E42845FBE9DA02E2F0315794D542B8609F80A85CADE99DB9E29CC4949FEBC66077C048EEC2EAE98A8223C74A902149E8EBA91474241F59BC9591E9C2F16138DBD36C3ED2FA10AFE094C053725507D3F7454925FCD540E794706370C02543B2D83796471C198BACFF1611A5EABDF6088812E8DE26FB0B4BF62B287D88BA321592902D342CA1390A96C364AF28E8137314FF9011BF9610CD3306D27167DAD9458FF17811A0CB8874FF846C609B70FEBF1E5EE38B3A8C01DB53241DEF3E76F1090D5F03AD46722D1CD7A661CD00E89CB5DADBA8A4B14D714A2C2FEA0F9AC9F9ED54BE41E4EBA56923B2D98EF0C0D6E2CF128E35F22885E36C1B9FE0EE2F0851D46B14ECA70D9E0BCECD2D253ADA047855DB8D13DFB39E84A3F4F0BAA2290F8BFF99F1902CB7B2C14E17AE32668E270D6CD236BDE14489DECDCA8E811E24201E062F7F86E566827B8C7E508321139E8DBABC1831015F7B4FE004943776348B951FD44AC1CBBA75A5F9EA05BA5337843FA6F904DE82BD9E448E4B617D1F950C77E9827FF3A915244A604E08D5F672F52131DA0E012784799681790FDECBF096B77A5089E3359DA2F6DF6C9CC52540D10D67256E1E0AA9F26F9D009ABED59E85C8F5BA03C3BD01CBE86A7EB19DE47329443AD8B36552D594AFB7084C9D113D31B71F6A3096364B552A43A0361800B46D50337846CEBA8E4E1056F1952C1096F8F39043BA3363380E50BE48FD5BC0D729F5F65B9BD8ED346417ADB47F5BAE092FADB18C95D8D6AE40F0B897874D50A6DA5254E95EFE711FCB25CE1FB17C85695D77CE4C6B1BB8D72443700AF3098BA72D60B480B94D595C92189FEFD937C9877AE7FAA42FF974B6A8A3145B792A863B789271FC2C88A95E41B9882F56C3D85A0498A8F9D53B6A109886FA17B1CF1FA444B6F5401B12CC305CFC1E89BBFE69CCFF57E2620D97D988738407EBE8CD89F1587785BF4C9B65D4A8AC11313C0CABEE9657FF807C084395FBA4E4E6EAB639883FCEBB94EF110056EF8FC528C354EFC7043FAE6436C928CBC6C38E14EC7330D07CE71539A6614ECB79F82DBCEACE55CD47F3936D17FD1B8EFD921A227D7E036E57C0F7E5B71F0332BF091BA87B0710B0FC72E35C49D55CBF110C98F67B9F2F6659E7DD430C81D8BC645FA37F878C51E3679E16A618CAA3CD07C04157FBE430A1423424571866598041E3AF7C70A11621E5D739974FB5326E178BEEEAC1BE5D8941587CBA5794A83425BDB4A214A437606026BBE7BBB6138B155E0DCF26DF9EA8DBD635D38D737B29652E7F70AFAE2ED5658EDAE5A5677E876274409F903C5FFD7A05C3912F24FDFF239423E12251E69BA6E0D54CA7E88A4764DB6080EF35E50988736208840B574BEA0D99E8A0303E0968D5F544B297C4BDECCB83A5BACFB721D65694B4B44A47E4EE8B29CE40D52FF9F7B42F1F59F0607E216008E60390F331EB53AE66D3ED42922BFFD5AAADBEAD38E0C5B1D21F60AF7430CD59AA6DEFEFC3BFD6FDD2287990A0176B514DE22EEB37E6AAFCB1DAA1FE74159CF89C2B1C3A8477C2D93417C81423A0111B75431A5B5E6AD8F824E3332B7A585F1864C43C42E8A0417B3D7392598B4450DD6B863505F2AFA0E518E042522333DFDB374EF04E3D68ADC465FC53E9EDDFDE4F97340F5737DE73C2248A7D47E871139C7BC73A213BB3195999E166686A2FFF9C27A27B5FD1345FA3099CDCDBE92C07F4B3A675F78F3453CC197EC730216D771A56DFF29C002E4E9CABB17FFF641EE0DE9848B4312C63CE2644F2EC09D3E42B7657103E9BBF183265BFDD5FFB2D9889C46F3C5562D2DF47C1E30D4D253A0AA86054EB49B58E443A48D1413A85A3BE1E63B0C39C6D75003AAEC72B55F97C4558384A0307D02BF105BA6DEEA4223A8FBFD2115FACD4691F5963C4106DE3D627408A94AFB2E844A8F2FB20A78286F695677AE515BF5AF23B97E41AE0CDAA008AE240A0D7BB5BDAE5B85F498A75C90DDE5C97E5430DF57C5DB447BC9E55004896C2BF1B6BCEBDFCB2E3E4BA3276B9CAECDFA9B326ECC2AF1A0E82C1F7D3487232CA92523C2E25FA637C2BD8B4C345E8B5667EAD76AD680DC36B602D02BB60A45AA2F9416982A371A45C7738A7AD3BDB01F8200D8BDC59F88FD77A617C9B30E493E25B629954706AEE7367BAFE744027540FD1776BBD3383EF8F2DD99DF5456B5517F6E90FA888B4C0245240290519DC311F2AFACE6C343CA9B2E27F27708A0A2FA8AC9BB80BBA66C021002BF782BF71BBB809711E57946F0E6C4A68BF84E582FF0D9A0001CD7DDCDF0CE80FCBA06E553F5C6C45F19A8469E4B1C09A243462354FF09EF69BD93F8F63D7C7DE7340F02BACCCBBA2035AE4FC27CC35F5FC1CCC6F245084D512473307B3FFA6A72A60CE61AAA8F0D1F6CC845CB5C3E16158179E778E44F3CC648B99D49C182983F9D1213CEEF7CEE4E17246049949C069D4E0BB474E0E76087431349E495D4979A1814103EA3B1A34569AB74EBD437638C077B78F8D175B1DCACEBE265BFFB5947C502CA21321BB56D82F217868864EAEBD5E7DE6784D365CACC94FB3429CD0D1B4A3B0302281829F345499C5EE1E5754D081E2A0148CD1BCD1C9C57D0C22248B7A7E62760637FB5642EBDE8FC22257B49D237AE0AC3E0A2044E5988BB4E102429A5FAB628024C75F20DA662FFC79066CB46831EC6B35722B07E2DC2B82677E8B595CA1EC1D40942453C21C504ECFCA218E0FBC9F442CDC41B911AC57D6C666ED0B0CC2338708601121DBE8BD2560583215BEAA2E4DE7BA9C1D06E654AF47D14F1DFE32B7296AADDA288B493A11A14C7D3CCD05D43744322C9C0065E0AFEB3684C380F49019B2977041F5DAD2444EF98C41916B656980676534B9132829358F98D35432052A03FC6F816417A963D9EC81674938A1E3E148D29E636DD03A2C28EEAB550ABC30B18D063471669E8A638D6D4098E886A80D474FD91CA6C98BF948CE3A799379AFB4193EFC6F2AE6D47C0160B4826C45DD5E99F871AA692EE8FCB5AD1FCAFCBD8D7178597DBF78CCA867449099C5E423C1DCCF423677C013624CE0AB76EB022ADF81983C986FA2DA1D1673BB9E8CB9E103DC7BC0A88AE3DB4EBCA0E1EB5A26870DD975B46032D97582ACA12C2CFFBA4B703DC301A01D47AD4620F83403694ECB39CDC7F55EB310C425B7EF6D79E2A5667C596D8B98D273F5490A80D2ED91430D3E404746B514749ED5F13912C845890DAF0B5F400474548AC9ADE031ACE4476807A1E7A8429D5160454ECE4276ED526D67F63D9868FD07A97016D3F90EA89AB87D600E9912E868FE1F48AD392D4F64381B4B7EE67B51E68BE86D85FDD2793913958A9DA1A788DB61308C9098EF968C568A2353C38B448CB59D39D6A7018728143DA87367C71A83B68B2EF6470F9D813F1837A0E621A9FB2DBDC34235CD17F7DE61A9D8D7C850BB81BC7339FC29A6DBF2DAB37AC5A7299855CB242CF689A532A9ED6FD9BF0C80966C7BE8AC16427FC677F67B8812ADAF5E26145D4F2C1324915126644CF5195DFFD15D21C3A09E9E5B5A5CB8E11699494FF944184D3B9FC37C80CF1CC27065F8BDA6D31B31E2F27CFCAE3F78F8D2A5CF0BFD9096EA1423B945D57F41E218AA7E6115902C91295CBC25B2025ECD6AE444244500B6634209562AE30F33F0A15B85E7089B06B550C5C73B25B59AECB9907E65CF0C6D40A098C9204CA1AB429B0D37CE6DBD0E11069BD0B2CE00EC626E9D709A644B2FECBC247C7200911CFDB1C30F0FEB027945E4379EFA639709E763A3C9DC5EF12552579454845636B69C26958B0FECCA269E4132B88853685623FB10E852FD9B3722AA7508120DF4315D4EBAA6BDE9AB82D711D8FE4D4109A919EE62A637E43BDDD8EAEB1584B8C1555EA48C6DD28A95C71BDEA294D3AC88F56B41F7C0469B871DCB03A0DADC36142E84092B40425E731478CD0BBFA655756202D87E353CF042C02AEB9E7C3F84F81DDEE77B9F05A5E7596A164BC8CDB481370B528CCD29804D2FC5F02D74F4F2A5AFC331C3E0352760D23E0BC0C271D8249BE0E5585FEFCDA8B90E34097DF5FC0A21EE5AD309F8E87155AA71140EA66FD834B213622425360C808BCB2FFDD51C91E5FB3125F69875BD40641C02EEA846E2E4E67A65C4D2F3B8C63CC65186DBB74F84D8E67704D31206520060AC428CA2010030F8486D5BCDF0951AF71354B25181446A8C37B680EDFA7C48C7812CFA64F84E7E7A8BEDD8B2E449784380D298A6091354A4E283B8D7F114E5D45F6896E9465272AD65E4214A833ECA1EE18AE986592D43B259109E3FAB9549E834B7ABB010C093C76B2D49A0EB7D2AAB96475232F0EF8CA7E7A8913781D5DA01BB1C1D9C3CA1381AB966EDFEBDAC70D9CCA4E6FE89B703F6E4CCBD34ABC1F2237540241C0EDEAD8E60ED350D99B774BBAE8363C722E3C9DC3A82F7ED613EEAA27280D3F3745A744E5564E1BA607FB256B6E6B96871EE116007B7B20D5281BCC45410799A0F4B5DFE34F1E3B5185D5737C1A348B1B975DD5B856B7C6ACE924DAF76FD03CC40A53EBFF99889A656E50F14B5AC99F76592ADFAF9CFAB0B50A0DA3F5520829DD81E17BE9721CD58D50BCF1C17030F6A46BDBD80D6E60578DA8F176FB53188CEF990BF3D0FCCC90128FBF43CD9E45027B4EA2DF93DB7D08025DE8530FA1450D5A12F711C2ED4946A783174E3DA7202681D769F03FB3F481D098EDA758CB5D312B00BEB0607539F04F28450945AE4B6908711AB924EF82D7E6DA6E0C14373836D13E665A4462DCD4C44FF88CDDC4A73AE717ACF51FAC014633E5031F01AF2650C6CA0D9A276A68E14506CFFD0C68ADCF810560ED35B64B845BC30FB3DBE0A01ACC173F8072F8CF32C617A126A39B0A7F9373142749E3FA6E039DC6F4990BA00B8F3ABC90C2AE684201EDCFE1A46DC42ED706B585F0B0519DCBE81A2C7F4F24F91E85E86E09B9A41047EA9C2A4C457990CF8A5BAA469F4AD6501B48FC225B1AD6804CA1C6D170CD5B4A8E9053C5928C66654472480CF90EE292613E4267852D66257ACD89561629206619783147A04B9632C6834CB286614E72BC0E125B009BE1C1482E5B0DA6D6B6F04AFCC7E11B19B7098D8FE618B27BB5BF7B9CB0F740481505D6596B0A362873A1EB83EB633218D6F48F0A8B46B35E6474EA28CAE2B9824C5662DE3E45C7F3039FE519E738B8839438E8EED287B59FEDB0594F1CBC43984B517EB81B26CD47CAFD07F8F0D120F8A10CA59C80CB9CE0AF3CD90D6FD82F760CD74AADAD3D3EF2A5F3EC92864B6041D9622BE047DAB6DDB01920DD5249358C6FA2B104A6C4D772227BA548EDE6CB362C24D0C76CE6F43C216B8D484DF5F4CD99B224DFD0A1817C1D2D3F2E91FBD4D233DD68C07DC2D0A0DEC05DB57B772CB99B75DE20DF25279F5E7A8D25CBBBB72CD93B80229267049531AE0F9664F77C9F9D4062BAA73FD22B69A2F69C5F93B3DC73367102FCB70ACBC1282A7F53A42D2FE8893E3DFD546A89CFA00609103312B152CF6DB089CAF9814D543E1B14E8FB9C9DF5BFE7C0D918C4074B22848C3C80B45C70B1C176E244A2273C41D3903FFDFB0A74C9B2F1204CD2F6DFFA3C14A2980B53FBED14C84F626F7C97A19B2E347B5A07CC16648AB42C93090C1A7611D6EE51018710526D37C536235B174537F9D99B87B8B79384DF0ABB42FD9B6317BBCFBC9648BA47CBE81803756AAE27BF00607AC9066C9B832430CFAABAF021F0E461BDDD576B9B0C786B55CE51F1747C45BCC84660D5D876098471DBE598BF98469DD3EF725FED39C269E2712F3A39BE33AE911C5FEF8D975E6ED625F93C8D61262A6753A8B0A59CF72F111E219D11C509BB555CD4106FE974E94CEEFA5F2A00E63BB3CA0F593449E314317916E1BF85CE2580ADA51CFC3F25F296494AFF51E7D2B8C294E50A7D1B8436825896BBCFEDBAE3F00669224CCAF10F0D500664CB0E48F275A5D30888F2C1F2D7F0D6A5900FFDE9FB00CA39171BCB7E40DF2F664ECFAD53EC8F60A687A5C6EFCCF27D71E2B7E6FADC49664B2F6EE3FFA9FEB5502F3E478CFFA5833A8625AF830242B4FD7F45E8CC95CE9E79B47F594F9BA07DDBECE4F6445287681D95E5C66628A58D2770C3C6CF5D0A72F1837AE94E6D1D9A8BFE83391BD5C20354789B779F63A8F3D929E8FBFB5AEB352447C687A7182F66D921123CF083C5E7809C8A674E9A3710B4652360623BA03D82B6010BDA029FDBDA751BAE3A18D4817ED6F65D1CC0842E4187AC600D610E241E294F66BE66322A5B7C4C0444A479C4058C4D607B3D8B95D71B2ACFFC8DAABAB66B23627AA4FF8237D9794169CC8BFF8970A2820851AB1516B31239E9DF54087FBD6F24B1D269DB8FDB7646399916B61ADBCE7F9F51FA4A2FB510B330C075D288B9404B9BFC0A263A310D95340EE40C17CB006269738CE62EC8FC291B17B4E61D320809740793C9B693F551F51004BAB1FB85819227DAA9FF603B0F0943AD959C02B381A14B84A1D06ECB4A2CD666E058CF3C667B7CC04F1E7F6EAAC30A9E1CF12859D7D89ACC977FE839764D7801E91F06419E842F2DB69C4427C6E0EB5AA9A986F50D7C2BEE2DA73310DBE09873F734A2F07CCC6D79D8C7AE3C2800E75E7FC62E82FACC04C2148B7F311FDE88A17669A3D548A743220347EB644A1C5DB7F8624EC97DD405DC9CAD4C1AFEA470FF47FAC70B08D062C705A4B6D212AA0B0D546C36C84214C3C9E610E7F587FCEDAA1A8631F01EAAE1E5E8D07F240BDA57A5C681AC283B535BFD57A50A8420DD6120764C246EA6846C35172FF90F805D186DF11588AD2282C00DF651F42E53A0007DC15EE257D1E2063124627AB7037528095F1091169812C3F0BBF53EA6D5F3C24AD5645BE25620C5A4388D35F495B8A1EABE961A3F56A8D6A2D7F06D9CCB195D693BCE2F19E8D8DB5E3C9DAF7EF1BE50B4BCB7EE40F94703E024548D3E7A1CEBE981CFAB40BBDE6CFA7F4CFC2E9D193A2D3CC60FD305769F48B981B3A0400A1376052A1D41201A715F25111AE40E26B4100CE40B72C7A4400DF96F0A5C5FACB1D46D2E3105C0D8DC3EC0956CCB02F0DCB2495BD67719251A40349CE7100EB19FA4F9444D83301D784D094E20E633957010D72F9EE8200E6C53E3961FD8152C24712EC7D30022A0DB3BE79E9F68A1D9DE56596353ECF95C4469E87C3296706F2DA08839A536DD51A6474CC44838C482674C6A3AAA6F9CDCE55A7207D631C1312171580A1F33A67868B313EC9DF64377BA830D161190143B46B151F1EA3BCF465A457084706AAF35316032E675D618E4436AE4DB2D324C6718929A5EB33EDB178E6EB9567D3B85FEDE11CE2ECCBC9A3C5625FD8F67E9D5C1B03A4C188C15D8098B4095362751CCAC95DB05E33340C2D2F52F93EBAF66C485012A5E2B602E833BE96E097CAC1B8D99FAD6497B5070BC756B7C2407446FAB34B1E2BF610535161A71788581825216AD0FB1D47BA009191CE9F6D5B4E273111D6D2B7BFEE7E6507DABA8DE4A34C8D944083B6AE23C8885D341582DCCBC01DA905C56EA0C2D04611067704F193839C73D2DAEC3C01A3345F5ACCEE24FFE24BC6B897E0446D0F822F44A7AC81F00FD2C32F5CF02FCCA62C9E70129CAF5E10C1C68C02085CCB4923ACD5C19AFB41BC7E2C72FAA5CC1F4D3847EDEFAC7E3A6388523F9466E15E3BBB848A0BA34E92833F1E44BCB6780A0B0CD46CB0B73121F13928A5FE059CB8AAC75A8CDC4AA9596C224366B13474FEE8C2AE6F809F2E7958CA89F4F33F6B69DD18847AD626024A091A764000F2EA9A8CCCF15A0A583982D057F2552F63DAB7B3FD90538ADC2A0952421D3902FD5328FF295AD63B54A31F64B69461C01F653E9E253AE0829A766BE5FABAAC5CB108E40906C7EA06C5D5363E59641877752C4C8E57302EEF928B846AEDF429750C86C695FD18E2C2C45F88558D8CC80AF0911E36D8FCD5D28E7CC29363937BBB58A343DBE5AB97F038E98A394D402726B15CF60BFC5E0C391B866785E3DD56BEA19B1DFE76CE172544AAADFAE27C90F86A105AA79B54185797CF385FBC83416789C7163C4465B89FF4467F34D1D693965459BBE55D515C8FEC52EC30ED9E8BF5912577595141AB9E1D9547400D9052D3A477E79BA31D780A0942F4CBCD8BA7AC375E344D7C4F52A6288A36D79A4E0BA0A49C7778DCEB859B8C0C0C6AC69B328B59331DECE8D1569AAD01DD74D48633859DE29FE55482767D815A22FFEBDE2BB1942B72B15C2555DA1CBA0A3B955B32DD98EB822F9A7B3A9A97D5A8C2F87C02187E5E23890721EF1C5BE17FA500101F6C54BDBECBA3B0149BEF1828060ABDD578D3F62D644B13608E079F283482CA6FA024E24E2CFEACA6289DD1622D8A3AE1053C513EF2C8A74A4B9DD057637195B466A691D6B54751D16B1B35B7D81AF8065D5A7B2914597AC0D50F0CAD3894610ADB22EDE889EA29C4F6B99421B68B397B3309CB4EA25F7032D617DF587FCA52840C9E5092BAA7176219137804ABA4AE434EBCB797715EEEF83A2B9E76E56D17DA5BC48A9E7DFD2E052BC1076496C7A9DC830FE43647C809E3088BCDFBEE4D96F9D52041D7297267B32306B5AA6BE1BF726BABAD38EE261F0F7A89B4A1D6871B10115A28F3055D9F4CFDCCDD1172C40D36869037675E8FD82F25511B5BA3CB0B241FD41C4DE09AE82FE28A2921D065B1E632C06CDF01C6FBBF48CBF8077B13F44CD51D14B5E4F0E43E2B46FBF2BFEBDD6EA2816EBF904101BF05E9031DB98C317245CC834E1ABC7E971FF9435CE65D27D3D2FA174749A7416CCE4698008E6AD87241F88125A9A127D766AA4E9B2387B3CED17EF86D6FC7B8B74806AE0DB5F05FE0BE04078B8B81C9FB0C6FF79138B10C950CE213A9C78F6343520CC854A56B71B8FEE5B12046458BC26DA522B7A2E289BB35ABE8B4754B85B07518590C36B958D9DAC3C73F971775F67F53ECDB8987D661D9FC78589FDB649D70C37BDF6B26B97C701C7EEA41581947E3AA86192A4E74D219D67143843F9AAED68E46647F84CD756B035E016AB83E6007586A6E0C0583536860BD25560CE44575151EBDAFD770AD6AF109FD9F2C19D591C51467B6AFBFB7020F704ED698F4C090DB919E17D0A6126EBA3D37C3CBEF142D6C2D7AEB178340B6CB16A27B1899392C747E57A267DEED58B3AA6F6D733C8FB8D34BD32AEFB97D614CCE4F17DA28E3906525AB4DF59CFCF6E5202A161DF9AF908476D3B05F24F2F9D03ACACF7562F25925CA6D89DE63193C946663256345F3594CD0789B8CB3DEC7BBE10FDA5C18D9588008976D9B37BF228C4466D145B6D52217F2BED3AC44B95C258F900FF43E2307C1C85BD55D4C728DD98FEF647EEFDCA976EFE27F9460A397B610493AF17D483FE888282E0BDD6A0CC492952736C29436EC5A392475FC4231C5C8C39C697000E0C17DC072AB3A5B180BBBC0F649C8D2ACD561437C591B863571123E5361FE0BF11626590920BF95A5B5F69CFD84FD085572AF05EADE10862BBDDA180D3A35A30634F7195E037AF11682E0FEF5FA20EA2239E3BC00F56CA52B9BE5D0CAF0B8F881A4DC6FB25E6851962477D08F959AA8A47FAB85DE1009AD863AF4CE26401C28F7C73E357520C361C2B863FC25FA2D0A5886DAD4ECE0A82FE8646CABBDF54E7F48098CA7B0F2A99855FE883662FE1381AAF5A050BCBDA822DEBDD04230FF60C95E3A406E2B1FBB0F328EF7842B3C0FA7700F2337D4541FE0D22B4E03FC7713A87E1D56010CC8EDB8EE76D2A1533A3884E30E44AD73C501E62A56FAD9DA030DF88789BF009C0ACFDEC16849C6950C4398F3167A2ECA14C38BF81F061CCD96526A9983200E1B6CAE405846BF25D1013F39B628B886B3D3D2F9DF6965BC832BDCB67C79B408A9F6C5C46C98021408E34C38DAFD2AB447AC84A2B87A9FFB3E7C4E2E63E35B442ECBA09BFA6B938AC4CA9DB421CAE1399D64C7E8E129F5766D0F5D1DBBD544AD42C3F5724C249BBEA16A407716A4B71F4317725C421FAAA6B00966FD8E6DEF071785B6E906902803E149A7757135693F0F0DCE1F7D17577740B6F451B2A9B5EA3303AAE26112BF44530344544C02E97A3FA8FE990AAB9A7282E3C39EF3A2D061BAC7524F9EFE3D2EB948389D4749A09BC859B812C4B2D67D7742CA29A8E793D1EEED4DE21EB5949D6EF193D2F02B4C7E3FA714AC5B6C633E5EF10BE22BAB612CAE82CB6D49DC8560463C7C543D828D16A0F7ADAFF69282D0BA6C8BB11F1B9E692D595977340551C3CB40BC69AE7F35DD753FAE6A05DCEDF61114C9DD990C1420F70142BEBAA3703B25B072F118050E8F9005B9D1027E3AE5D03068E5331F12CD410E0C33FAC3EF9C9BEC0D214CFB2761E6EF44D464518592DFA3DC9FC947E1FFBA3A9B1D363D3B2149186BED29A7BEEFEBB3C1152DADBFFE67B6BC75CDB1521604B13ADA2F7E76346E056EA902FB84A0429E18A039CBAA52A8FF9CAFA9667C21BFD582117EC892B22B32F92B7228218C6E9DCAAD0B98514A0A90734112122B5E2C9E84B42FC4DD5F0077F623D249A67D7C73589A13FFDCF28E7D7AEF4849F3482ECE915A66D8D4EC468CC68EA12EA4EFE30233C8DB5328F1AE5F2949A4DAFAF27148173346DA4AA86DB0D61E3E216CED84CBCCFD2911ABF6F2AB7114549A1EDB2301D85DD5F2DF6B91C6DAE33AC03F451687C3D94E84576E9328A74A580E97D2F3A0685F5158D159B6D299D79B3BAF1B75D856307A3C08F7B6B353DF81953C5017C835A9FB82C4F8F752ECA39C2C9D07592C417E5CA26D426B728AD2A19DC6F4ABB00A8B5D85E94EF56760B806A28F286A4A3B53E957032A5120CBEA08A5B9D51B15AE14721F62358CC845E8AC5193D19DEC822B75C475DA0B6173B756A6BA05532CD2C7937A3E840B4B0BC68198A9F8943742CD807340D2B87456344FA29B73A39B75DCB7F06073FF02BF214BCD6738BDCB1304BBCF111CF2B84338EAAE495896D087CB6F4E2B5B6466A71A711AA1D360D40A05B35A29BD7E098158416000C2C5F5EBA0DFBFB2DCCB56B53C5346235C5EB57CC80A4D77AD8BB87F21EC4FE451EA8DFAD34890946B2CE651A16FE6AA5EC70D825FE3D40CF45319AD17A0C76D1549418D1A560BC9F8946BCA888B77FEF068259D169A72F6BB25BBEEF7C684E046D7C4CFC9975CA498513D5016BDECEEA9E22B1C224596341E17BFA1E0337E643ACC252CE308837DC672B9BD4A69F5B5160154206A3F2FD7F80C206AE3DB39EAE8FFE8A3957FA5CA8B2A47DD8C28DD4FFC95C5AF045FDD06C1843B06A9B20BC14FC8CF8F286E80163227D913F472AE82CE5CAAC81A2FABF0403325EBBFF36827F87554BB5AC04A54ABC7FBCF8AFBC853771FE8C552BBF2AA34E2AC1D7C5B8F06F3ECAD4A285D80C59747564B7D9CAA072B3EEB2761C813E639E0E16792C42F5B2BA32AA2EFCA2BA6B98831F2CFAC6F282481025DEAF94D58BB75829BEE5343AAA9C70E4D24ACD3590EC0F7BE9B1C3510EFF0B105166E6AB2B14D3461986B5AAFFE85BC6A02F4D283B70C1E4EC4E9F4900E530C3E1ACA2EDC19D54064E65DA6A7BA6DA608E913EE08EDE9B2A6E8F68548D2BC3849198C8B8A9940ADEAA7C10B1C011E9A7786B27B37ED709194ADDFFE2A69B41907997BE225EDFB5402BE4A6EDD01CAA208675715BCB9EBCBB1976CFDB6083B0D886586B4DB51F927B122B57187582F79B7F62FE460091893E712D8B18F0ABA194ECA1F7168681C0414CAF46CCD70DD4BE551E540A4ABCBBC9EB410FD6CCD3D2D3EC04DA4AC00388C5EF7BB8A171D0CD02F6A3E930F1C13ED205BC582AB61783BEC2F6CC73D68C84BFA4CC4751E9375407BE322266DD10F25157F1168AC57DE7EFE3E97685070326BD0AB70ECAB78BD328A2CFE857A72972785E03C1913EB0BF0BA93E8BCA7906DC1AC956AC8000A7D358DABC5AFB3E93C6452F5FAD701B377DC41D3A9257EE30B59D223EA098E3414162CDEE3D7415C7EE364318450EE9725BAD36E84518E0CD8E626445D50FBF682016D385413706E3B787EC1DD4BAAC29436328277772C479DEC0C3206DA70F5D951A19C204EC0A819FBD09B64B6076E1B92EB0C014EF68E3A0381937776BBDD0708E37A821DEE3E6522D7AC2FDE39AEB47A9F2AB49A2CE564A155098D5B29B183C69A8E7FF0271D7B74A08334FF0DB050E224F60DF653AEF2E16205AB84F85DC7AC3E197F30DC87A3E9C06619AA626E685359D9D66ACFAEF6279FB94873AADC679F856EF27EC7011C9B68C53F8B63E323F6CA2C219633480029BEA0E91754A0997D9258B59FD10ABA1E1D072253D073E2F634E22A0A1096B00540D9AE6A2576223F5B0C99CA778C719902CF0D086098F52F3A36D3F5908458D6DB6C93811482D8EEDDA00AC8171152F87C30D411D16F871BB1E5BABBFEADD822BF63C164FB637F052C17EC852CA7BE16197FF40C27718E858F979A535CEAF773020D95153A63FAA2224CD9370285D50B7C36CB8722C76C7336564986121C60D789EA5BAF7E4EF73CACDC94240C115934A620E681A76AC6EEE004E0CA87EF9021BC818F93028C34C23036DD3719B9F1C912B7B90BC1357F2D37DB08287393FFC51A522074C6EE62401FFAAD7CCA5A2648F2AE90C30ADC827CFF800625458FC97F47E854E15AE3D3EF371F75FEC0EE04A4B3EE5750E0A3023BD9C048511CE4F6C370478A29111E293DE458D6472AC85FD14F32C8FCFAB434B12C742837D6A5AD0385107CBFAF2B8648FFF01188D2FA458F9E80C8D91AEC69E98D152438A27911AA1727492A7678FD2EA7FBBE5FF2D97DA3567C2D7718AF463C8920472F36C8E6AE55CB00E97B39C52DEEF8E1E0D0F8E3A663194DE28AAF6B78154ACFC6C1789BC4870481D4E19151F89FE446B317D77EC2E41799068F0BF0EEB11E149C3E4A45BF84EA5C9FA4FF30280D68129A408EF9E329AC040A56FE9772DB450CB975D16B0500F6B9385B0271A17FB4F21F544B1AA1724EBF40D0C2C915B42E774792F9C5DD7763A314339D2C5897F58D48ADB1A343D54B4751B6AFA52D69BF6872CBD7F70B33C00BEE2858E35C3545CD4635B8D88709EE9F043A1795643DB6E8CD29A9FF7F0A38D45C557807E75F3E847DF9D96A5A0A6975A4460DCA8C1207FE0F06F2B3408140DB02B2FE84309E984EF1131DC07B716F0D063F3A3AE3655FF3BDB843FC485BA67C0C4B6D58FDBA8847242F351E2B055EF934B48CA50C496DCD0A01D4B52962402D6F9533E34DA71DC7AF6D430D147AF94DBED18FA76B9DFDBBDE236436899ED5A308285416EAA7C362355DC7C85B0C9C1237995CB6D3F7064E24D92871BA9373CA9A30B4A747AB5E20011A1D2F1B2DE66C5F0A28B83569C84B44E65E4FEA4C574E63A638D5BBFADE9D827F63B4F23AB6D261127B96FDA999AC012E7E08ED14B83275CD7B344AEC39E524C3672BC9E0EAB62FF503842583D912348594859AE77A4B4D13CE9274F510A255024C5EE314E5A1B716A1C43D5E24712CD7DF92FA099A4DABB918F7923D69D045364300EBDE70822621CF8AD1807277D772D1E10FEA8316DB0327C7E651D31F4C0D15BFAFB6A6FEA9CB3BCDC65032EE611E55AD64333866C2577E539AB365FD0D44AF28D4DCFBFD604A6BFD9F6595006502244EE3A71E150C97115B7767172B5122FB3E670601A875CDE1F1307740016C9F1614222A6FFC3D05FAE06FF26D075D13A3F9E9BA675BCA2577F9C8D51E822FB95E2D414BD4CCA5979BA8DFFCF4A972EA0ECD474C8552D21866D519D4FD0540AD6F6D4F4C0A035646822D47D8EC65BAA5F4297977D1921BE66FEA32141E26330397F6A13E5EDAB9953AC0EBE18CBB1544A09632D72A45B08B61F0882131B29013FF8EA0C836A3A50FAE1487F47F75F142F4083646499D9031CC076927AFB862349899CB8DF1A0C3AD1D96C863904E006489A5332F819C844A99F9B6657E265BA12A7D49628D7E9126F109347444F5E52FF2B362087DE890874DE386270C4D6DCEF1E789A3DE607D70E113A25D85F69B22EED6585C3F99E31ECE4CD368B98C809F025B3B535656A5F3C6B2021D1471D241DC8A98C92A6AD4D40E86065D4EA4C1932D55BEFB0734FFF7C2FE8CB1FD46CC44F4B943333D200844A2FDCFBBBE56D3093C474BC53791DD3C8D9B426628BD4B446D6728635FF9FCB66D3B34B60BABDE37A80DFE49BD2DEF84597614490C31A585D37D7B2C13E80E79B0AA83BB8BDBA03C29B78ACC8C901AD5391CB815FFD699EF68CC73739A454AB5D0B901C009EE41A73696EB25C8CCFCA21300A481978604BBDD30253DEFE93060078C94D0312D1B67FE09720AD5E5DB3D8F0AEFB24CA703B0DE8D587A9F41E868A84353DCFB55BAE55A452F1E801D779BCD2D91A760A121CB597CB7A33A888AB7F5D78106C8D8D14A08721C963B39363F4D5DAAE8B302E66D08015DC5B10A28C82E8D5460074B48577F41F343DF899C86B258D16290371F4FEF51E7DFD8DFEC7E7C5AD06EC664E953C07343B59AAB4E555616F8777D40C1061D497FAC6D9A2CF6D41BA15E1922B48A4200D1A65C825198688D223D1F65CDEF209A6DEA5D0FC5236E7C5D3954D69F4864B7D33D1424391E5128BD595D9AFA5E3B8F793147A65FAC58B19B9F9F17C07BBC866E97C78F36ADC240B5F713507F9E7B32D8D6B67B84EE9C6EA059937D5B8CACE0EE9FCFA0CA95B8203D2DA791D6A5138A5283ECBF2B4528616CD21421AD455EF5296BC0F9E15317691D53631576B7375254FA0D5D4C781C4B99414DAF63A11ED08745F66EB57A02FE331055B3771068EDDD41FF523013058AD0205167D671F61D7261B6E48B92F54D3E2591B601A582E9B9E13E1FBFCCAA682E21185182890254F43F1C83882FA96CD99E40EC3BD89A89C678FEADDBE948E8B36D7BAFC81D5473E9FAA32FCD75178D7B2D1F80E31A8635470F63C88710BCDA86D504B339728513A57C47425AB0F776B5F6072FCE9F55E80CE274831AFCA705E6E4373AA8583498B04A4D81132BA6C99A7FD93EFCA65B63F99D3C6B4225CEDB4BA33A34310D19CCCC469ACEEFB41A3435FF015CBFE1D132430C14BB163E35FBB64B243864E5591E1489F704C2B973ABD2BC7FA91E99B60070D8DA49D3C0B805C180611B97ECBA525B1CE118BDDBE3E6D281CE0EEC29256E497EDD15200456D2EABE927A9D8AED0D4B0173D0C28070ECFFD520964E7E1B1AC5CA4FA46E5B61037B1465C2B2E672A077FBB8B18C81E7352AA9F62866D8189BFE63184B96DBA039EB567BA9FA5861811F8276DD0699DCA59E2C7C343AE3D60BE09CE56D60243AA1033FE9DD75D3227644EDFB1B5BB8F2CFB262BE0AC833418BD1A910CBA8ADF82C45D8C221AC96DE379F03F25640A3CC3B0FE7E966107F3F22C2891FF5668F8880AC6F42F1F420E804E36D4557704A91506EF2B56C7B4B70BED50DB22C64BFBE8382799F6E2198A25DD9DFF55973787C1DFE5F51E1ED3A599F86C77E56660E87B06B683E8A80BEE02C7A35C06AC59435CE398520347FB437F2F34A9B1514662D320429C9757AD20D0706653C89330D941D45CD12E154885B1EF6865756D101724461E14FDB1E71A36F92C17B7099F24E1A32E5DEACAA8E5B7A822C890962C030C2D8E7A6B2EC63B7BEECAEB74A8824BEC16563C8D375FD063759A9E356C4DD79EC7A7F3B9D7E2BC2C7325DCC56F5CF65D69F03F44D419A4BBDAB5744D8CA82C14923C4E75435A60C7C5649D4FCCEB754055CDB9C52C64EBB8467B3433FB39C85278FF4FD1270493A31EFF85CA77ECAA17D46B34B3695D04887BA8CDCD247FB975AB9A8FCB35A0F2D95A09C9B7FAAF0727C27FEE5A04EC478B0797B01B0DEE85649909D763E98518B46E018927961BD27198E2B5ACC98C0663DD0916B18D120D227C0D3BB4B7525B6827D4EBD7949F608581AB825E8FFDE54752791BE81EDB1A3051708B84C374BAFC06813946CA03744790D778BA0B676D047CAFC50A94A3E7C0E931828E2B62928682AA56AEBF823E0D16551C830E0DF380D3003B669E1844ED2892A9369A2DBCC0F485E1ABEB1F1E11C8CADEA6ACEF6A42CD20E8642706ADC941EE944935BCAE19E1DEC093B91B19CDFFAFF1FAA17CC4E7998330F9F857B36F77ACF913C1CCE8E367E3E2DC674595FE113A55D9E2CB076C52ED337A9D0C8FE0E5C78BFB9BAA91102E7A0E5F1331150CD2FA4598A471CB0C2085115466DD0DCB75A58FDB049ABE3D87C8CB9FD3216743F83517F885720BBDDDA5857C3FDC460361DE4F5A636FB3DBAA81B95996428DA6F7F49B325824978250C3CF29C198ADA298BA3E5BA796B5D518950939C393D2930A50DBA5DF1F615E9697A770799B25FEA54B570F9F2076F28F54B569D0285322BB26D1794F59F24582C3A23406BE87C36C4A34EA14E40F3688ADE8FB68D5595E5EB5D7FDDF3FD31AD559F04D91A9FB742485EF697E6881049990891DE4B2D5606126DA57754BDDC75BCF4207674E06B119134F6E9B802C7B01AED4B5F3B052BDA644CF2BEC7C404F96C901BA38F833F03BE47ED81350F958E393FC5E948FF390848BC05ACAF535E7CC2560A3A41F3B6F7BF37E288EBCF8D6F3CE6C47146667F1EAC4857E43DC5E65811C286B149008493827E2905BD84DE4E537692C607F607C5F810FCC59E93616B2DE347B6896D20910C5C254D15B2AFF524FA44929C8045646BF89A959DA4A1E2E4D4D039AB72C2021080E059E10C4BF42FA5286D560B5B8CAA4206D898E74F70E8C8DFBA386A99CBCF40EE24DADCBD73486F05EA3B1A4705B080BD52F60E0F4055ED6957B961AA90D4B6E82AD0CAEAADBCC5BC73F34315106CBD9960C217A2751FB80143E46DE29F5CF0C7CD02962D357C796A327B12D9182EACB7231005AE0CDBC99E7B5680CE2FAB4057422107C44ED79100F372BAA7B0317725F6C5B61971556AC481998613C7AB25F09242668A6E5FE1162639A1E375A638691878E8C3B5AF82C5DDF3EAF70D98D76652C63A1A854642D1B25FA9C6FF930DD07D3865CEB24EABAEEA91F87B85E5B601C23171A9672899DC65DF9628EA061153A1D6E55CA39F8F195FE7A7A93474618A7AC27719366BD4EE48F1EE012402DF4228852A5B6831FE5C0C6A947EF797993176E41C91960BC151FD11451FFA35518B050DEC194A3B2A1EF91BFDB0807BADC42FFA1DA0953F51D02786191DED2829CA2662C4376D6F950BC6A19AAA96BC7775C917344CC4F58FA0A5ADC0FB4004740CBE7DBEE4B2D095D3D7732627A20DBA8315D2A17A2F293DE9B7E83777E395662053117B499D4391F31959C564B176881E40A6CBD5E8B3E7BA90E38508DF9EBEB40B854D766D432449A79BCEFD3353CD36F5C998F83346B9FD0A289EF0E54606558B91DB2DAF05D81C98B1C6516245A4E23AAB1F3C0DE0FC2DD70753E6A94D3F60B8C8D9E2366CBAC7C3871414C625413D5D4C80D3DB86EB8278CA9F755602AFA30A28699D977796E257F848EF50C415A2BC2B2CF947B1B076B5AA9A10F1E4CF17B43CC9370728601AF9CD0E8EBCC024882764BFA82C7E4DDDDF625C05B71A88D3C35FC2C38E1130C50A11BB7A912D49E8D1A54D73BEF4847D531016BA44A2B7CEF84B2CA521B1729560E53049E48C0D373E02318AC2A0103537B8D71778A096AFCAA2FF278D52E144765D3BCD18B4283829AB985523F6DBDC932086C634C266670B2206D0AD65E9A3E500C745FB257446130F760E724CAB7F539956419918266E7659C8B1738C8147AEA6C8194522092766C83E825449576114E5688BE7E069FF79C44A789A84871973224ADD8C7DFE8C5EE5F67B9DCEEFAB51571753481E601885A5269BF13B130FB68400589EA22B5781BAA07E8842B3B44DDC68A10D48950AA8B620C7DA3FDC7621E0AEEC92BA5561506431CF67C5F8711CE608C246141A77517E1BF9B5A1188404886F203FFD7FBBB764C4AA75A29511084B116C769B7290006E4FF61B6DFB4767DCC4F2C58182178334764FFFC981AA43EA6FC2F2F51DCB94D63A7FEDDA0BBEB9201F87E5302903D3CF4DDB064CC70C7C5B5C55712EEF91DE63380F37246492C29EA46D710B2D6F5AFE499610D9152CE6EDB0BBD12C1F3999633FE9D8158CBDCA068590FA3294563C6DCC97569A3F35492F7FE96E438F5530ECD4307F6208A1C93447B3E6E4A719E5CE0BB293907032BCA2EA249E7189FFD743ACD0283251E3B41000A8296C2355A9A0C233DFEE5F7BB47A2FBB687D9FBF270DF2CB5C3F3E59BC7E93212AE4202328FF81F41AB4840308FE26F62630A5968B3254E805D0FCBEB012262100E29F51807CF3578088DC2A62D9705EA3B587321E318E01EAE190D93662E3A80C38E896E8C469BC55F8B1C46A4F7870B43E5724FA227025E5B4F07B2928EAB9F74A586F13492892D6ECE120EA5DBE814E56054FF40641CBF13962301203933EA4E2EB935A2AFB189A98FBD3F5E807BD537D9624B0EB50E969A1E3F91BB7B5FEBC5B8D50A50C7A8E3FE02801C791A3A17EAB5DC85E987C97E1E722D3B86A7C1BB82D1E9C4F185D14B7C152BD078E81B072260EB11ADBE606C2E0027CCE8A436B7148199DF5FB1126D5AA71CA23EF5B9098D3E20E459C8EA7E9E5CA68474FA7C0F7345A6150717BD578563739B84423EEE22CD0ACEEAF775C72BEADF013ACE6A5876DE042CB553719339D5FD5B65FA4FC5B06491E7F9E520B3AA85012055EF44C5D3E74E9A65EDCA3EE8D2A651664521C7E160F424484375D9F3992882638A6A4FD81EE00F74F86A9213679959FA4FB6A2D7403E612D10C04BF363FB300C84E8898B968B1498B0C02938AC90879BD9D8AC7D06B72961E96FE547C76366A1835BCE1E28EDDD44606B01DB4BDFD181C27236CBCB62C60412AFEF4388AED963D828B5AEC6F473FDD6240D4A5FD44F9BBA3CDC73CE58CF3A945583A3B853800506922897C3B96515F9A5F69756B7DBB042B08288DA0BA2D62F77935B10B81907963A11859B895D095F456371D4891B45FC95F4030326CACAA7CE40684A47A036CCA667B5F69F0F1FC437DF2D635F271013C51C3CED07F2E894B9FF10AEDD08C39665D1FB0C37D214F234FC56EAA463CE706018B5B7CF00E5E8066648424E5A4989DE5CB9922CE5124DAAA2A9F8B5AE30E436EC46247D3E23710520EBEEB41C66A425EF2D09E3B2EDE5817913E81BE726F643AA5E9B4B6E99E3CD20CAF8A28AB160AF5D0E23BC5F1DAFC5D9BBF7401B4757A1969DB19F5C9D1B0DFACAE39807985259247413386841D57C3198AFDCBC415A12AED7B363AA59F06AF00B005A1F15CEA0ACEF6EF3295C424A075BC7088146959E0750C4C24F348D37405FC87A03CC8E971214037E1DFEBE6E81125A398383C51903AC0406DAD57E3683B6AA04E229BF47B31205FED9CB21DA73ED10F16D18A591E7FD9FE688FA2FA5595DD6A94C95D466D05509EAD0BFFFDD4DDCC0EDAD9DC7115B7EF3A0EA6B1F8270C4CDF0E2DBC255256000649E92C12B012FA54EAA7809FFB48906DE52BD76C21C0351C697ADF2FF241339CD47A783F0F882DB0618EADF67A11FD55789D64FE4AE0CCEB400072CEC354495F762DF3A5D0FA5F86800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark{restore}if%%EndFontu1`65%%BeginDocument:%!PS-Adobe-2.0 EPSF-1.2%%Title: Labs logo.eps (Converted)-3%%Creator: FreeHand 5.5%%CreationDate: 6/13/97 5:28 PM%%BoundingBox: 0 0 303 161%%FHPathName:Power HD:Desktop Folder:RSA/SDTI logos:*final versions:Labs logo.eps (Converted)-3%ALDOriginalFile:Power HD:Desktop Folder:RSA/SDTI logos:*final versions:Labs logo.eps (Converted)-3%ALDBoundingBox: -160 -535 452 257%%FHPageNum:1%%DocumentSuppliedResources: procset Altsys_header 4 0%%ColorUsage: Color%%DocumentCustomColors: (PANTONE 202 CVC)%%+ (PANTONE Warm Gray 8 CVC)%%CMYKCustomColor: 0 1 0.65 0.47 (PANTONE 202 CVC)%%+ 0 0.085 0.15 0.43 (PANTONE Warm Gray 8 CVC)%%DocumentNeededResources: font Symbol%%+ font NewsGothicBT-BoldExtraCondensed%%+ font NewsGothicBT-ExtraCondensed%%+ font NewsGothic%%DocumentFonts: Symbol%%+ NewsGothicBT-BoldExtraCondensed%%+ NewsGothicBT-ExtraCondensed%%+ NewsGothic%%DocumentNeededFonts: Symbol%%+ NewsGothicBT-BoldExtraCondensed%%+ NewsGothicBT-ExtraCondensed%%+ NewsGothic%%EndComments%%BeginAGDEmbeddedDoc: version 1.0%:s8W,W5t=<t^::f#!!"LF!!3-(<,$2\ErZ1?!!3-*1H@6H"^*\8%:!!!d8!!"`30E;(U!";5;F*)>;;e$.7Eb/g"!WW6(!!<3/A7]glEbPdZE-,f42us9b+#5N)0J5=B2uiq40JPL?3A;R20f_*D3&*Am!&-/a2E3EL!!!0&&PQVSF8uG3Ddug^ATpLQDKKH1!<<-#+pn?+!<<9'&A8*C@ps1b!WX8A!-f[f!!<3$8,u0]!!<-$8H88\ncJk/$3F617Kk1Bqu?cu!/gmR!^KpK!(@6*!!#"_!D*7l:,AOW%:"6VB>7fWbo#QP_q!!//_!+6!2mf<Fh2\&Pj@o.2[DKHEi;Is>G!"/cB!)*B$!-8-O!"frd!*:lTB`N6X!$D8?2#qGI!+S4n!!",A1B9<50E;O^%'53(8HAqo!%1K,6ST*\a%Sco6rI#G!!%OC@<6"#=)r"/&Kk"`Ch7*u+:oYO5o9Y'#B4Wm7VPC)%feUG6q/d60H`2,b5a7N1>Mph2Dr,J!<<6&!WW[(@:NAQDId[0;e^P]p^#gl%:'a=X>!"8ie!&Xam!,qpP!%q1W0Hu#IA6T$9!!tXj;jnd3!!rX#!,nm11Ce7V%r=B1H9D];2]2uX*EZobE^gdpF`(\`!!Y4kAMk!4&-;h8E+*^"*r(7=&g0mZ8/H%D"TSl0)?KmB!!*'!!!L4S!!"kq#20&2*WQ0F7t>.NQYc^.@-dl1!$2.@3?p3Y!&ZH#F_PAt7VQL7H#8(N<"hG!!^J=t#7ZLjSgk-K(B@836&;6q&l\j,;#-:e%:1B9iD+?:TR<>-JT7l:9T-m/M80`a6g!(-`e!(-_d+92P,lOErC.Vje>!(SXC!,`JN!#<?tAhadg,A7K/!WW9%"D2@aC]XS@!"2!pTc"W=+95@q)0e.X!rrEZ2aTSH@/sd;CRj)Y!%%]8"Yheh'*'Ta!(?l80b$\n"[<*'."D;71B_b!!"&]256;/l!Y,eB.0r0=!"KqM!"L7S%KlbU!$2+]!!,Y8!!36G!$j]7ir]8rl2q#$ZP\Db%:ncAe,C]Y@I!<<m,)?9aQ$NL/_#8TN5!<<lT!##>5)4:I)(*ik\J,fQb.f]Q.$3CJK1]RO<Ai0TO!!(6e2#p#E!(a6-!!!d.>7(?G<-81G!rs*&56([!8Igu8!!!dVI0#!'!#CLp!!3pu!$qUH#c\ZN!%9W'_#PrD"k7_tg]INlAIJV_J/7YT!!3rc!%TuB&6*4cF@9[??tNhiCihsbFE1.h5naN;@;KNi^iXL4Bd"i,!!D%5jN["F%:%0QY4!![LdE[&A=CJOs5!!^gi"$[M\%KJ3`,6.]t/#!"s2)kRp,m5q&1."2C/2mSR!$='6*@A,n*&SZk!&Y<B0F1`'!'^HH:E*%^"u%h0!!%]QK`D)Q=9/^g;a:A;!(?lB%fnlr9-qMLN@Z:Z!]C$!5=#>N2cBr#!94:h4>oP3s&FaQK`En68,u!]K`Hf,,6nrE1C#p!%6IJn*$Y[gs4'.n;[8!VFT=c62ulk^K`H5q,6nrIpH:fB%:1C$'!#<u,l?h,6/#7*:W6O/;FK`En68,u!^K`Hf,!"(M%$A67u!!*'b!'E>D0eEY21KdIaG>^hM:crK$B20U?$8DM]!($ZS>sU;A!(fpO!!!O[_DPj3!"T&0#$V'-1Gg's#+P\o*'jr`8dPIt*&I^s0H<1W(]aUV:IRJk+Xe=(!WW9AE<%jY*.2f0KMqsS*/V"`0b4UK#?qN91cGXM!*NQ>AQCGm!"8im5R[Vm7fZ!Y)#tL0j%ghj%::DNpF!#,D6<>,?F!"f2B57%f]8I@7`#W"jQ4Yn,G"98Na'aXk78Q7WZX[Yr;D+7.R7Rmk24U#3]'e)TR(5#%+6jQ!mdmP]R!*^'j5U/T*90WG%64u(q6UDGi;fm:NHN4%%A2+&a3DiL,E<Q=s2'E&#))2*k!'60.@LW;p+dE1(Ble@s!(db)!5Us<6r>mTTc5ai!=]#42$QNMHY!1i4(iI3)ut*]DD?Sd!=1i+DerrX@<lF)n`!?2%::18KQD-eVT8gS'^,od1neJolF"BQmZRohmaKk":>+;7u+5s7H+<ErU1<WH,"0E;(h!*oSs!!$s<+92C31eT#/!!!<1op"qO[`rLD*/+BH!([.\]AX%(cs-g0!-J9D!OUAZJ-`e*Ym9fQ!+c.$!Q+&r#eV'@E"3,,!-J94!PIh[#f7:?#DE/#!([.0!Pn\=#g*=e#DE/#!([.7G!$&M1,oM$#DE/#!([.=mN)YV]c.31!-J94`7OtN%:!?M9ok^HV7K`H5q8-.T,h?_,\km)nBa+/:48-.f-5$.i>!-J94!U7MO#g-*'J'S@R!-J94!CIDh!JLMr!*B7V'[OU('SQNE!([-N5t;a;`5#^qK`Et1!!5J)m0M.:%laTA!/1F?#h9*B8-/PGbm;nkh$<[6@=g^D!.=i,!=02dA3^0L!!j0pnP'"Aj%'1aGsb=0#Xn_O"B>Fc"c*2dANN]hK`DtaZ37X-!DWd%(N!1U70%`9fM6`T%:2us7P#;?14!9*KR#X&/Y!VM]E#W;fh$T8,f!'L;^#W,^]UBgXq1--j>!$F14C8kP?#(d-a!(MhI!$RnX;,1f%AcMc1!&A3f?j6VHTdW'o@OOAk8uuM^4^e>h4_.YX*rl9R!WW6bEB$+h`rh/H#iJ#,#DE/#!(eQK^VMl1L^/V6^c6H:=97'J#hr.X#J#NgAH57%k-%YO%Tiac!-J94!UQf3#h5E>#DE/#!([.O!QW1F#gFR-+F?3"%:#DE/#!([.IbB[1jK`H5qJ8n*\f[0p0dB1_"K`H5q8-./iPun(F*/+B8!([.7?D.YLI^B?6!-J94!QF1'J?0%(;FCbD!-J94!Pd*b#gBjlGk_Mt!-J94!CIFB\Un#sK`Et1=91,ja&*oQn50mR!&XaI!CmpG;'8pVK`Et19/3ip.0pb5`2POP!JLM&#f9-98-,u@8I3*6N*BiuZe<r1!.=i<!Lti@:]Z7MREoBQ_bC,%!LMecg2i6f%:?3E[s2?X7R!'URB!TN?f`ZJ"XK`L4+qa^`W"Qq^4#=\hb!.=i<!CR1mqEP(8!)*Y]!([,_$Ut7f!&asX$p=SRQ:Zi80ku*P7:1gaiai+6!-:1a7mDNG!,+BZ@fQL5K*jM%"#Y[!hIkYj7R&7&$n;5g!"`Md;5g:*3sMD]!#DR9!!3q@!!#UA@6?E`56_0?`YQYs!#A.j2k(T<!s!i%!#Fo&!,'m`!$rF<!#<h)!!3rs2[TO$9;JF&%:8#u\P!)V3[!!!0Y%Bf1%n2IHV!!Y6W:-/o*1[K5s@6*d"nGiRi*C$_F3PGOs+[5u-'l2Y+[acVg,FUh,,O5c_4TRXu^]4?ZlSEB>"T&0!/hmoPaXK$9:E9Eq%Vl%EC(^LHS"Tf^"oeRA%feQl"->SY#66qms8*2)!9[N9-NO8K"9Y=h<W<o4eNX+0#>M-N$igG2!WW:YJ3PC_'0-'n'KZ9p7IL6_Asf:tL&q@nJH,qCO8o7^R]N!Q%:#\<3u#DD\G!'gg.i.;2pndtjr-3;?7!)EOuNW/t`1FtPd(CgF"2)QQX0g.QbU)<q25R@l_]5[g_!!!YM!!%NL!#!L3(p\hq!"qp]!!!YeI/r7.!!3f/!'%k05r,590c^p;V>q9RdM!T#$30c#!#$WN>'0g$!rs!&!!abT2$$BF)DqLo!rs!*/R/AX'4M"C!Y]8JFuo_O!!#XqK)bnI$:Orr!rs"A!rs"I!!ab42$1Ys!!49B?Pk![%:'@?g\'ANhPpT64Pj9#AqANp/.dUc-)4UMmJL(k&1+qt[j!&4Kg*,c9#4kP%9!);K>.&0O4N(s@_:4Z._!*D:@D?(dt)#uu'7h!R9H.u(11G]#J6Z3&L!.b81k@job;CbK\,$Rfg1B=IN!!"NE&JOXg"$974'oQ8M:(mUL1n#OAqEYp30d16g5=#`s4WkjSU&\'k;ge[T59=5n%T>.p@fUX9,&+.q56,t1;BFRj,>b=f,>\Pn51u4[%:!.=hIHkHDZ,>\M:1Vb+A!%CYEs8M)7s7=Ba-NO8K!?6:a*.SGTIlf&S-R2G(l9mc]!=*LrU'Om'!8Vu%bXs&Z!$DM]W4N=7?u>s4#X5>j#]Li?!(A:=UXrF@&s!U.8H=G]%KJ3`.f_q5K3koP5R.:@!#J%S!-f_b*J?@@1IXAD!$b;B(gIe=!@.[EqIKXO:]X9/4TS,A!!"6?",8l<5<<!P,>\e':)!4q#Uk+;CcP`6,>\LcP)-\t%:!!!]t:&t>N:g"te:e-Ak:in*G3&)XS2IW58,>]$Qs8KMa!q?9k(Gl+'YVq6L5E.Z'MZ@1X!BU9IT*YK0!/n?;>lm=mA1q3rN@>;;,?u.($][.P,?ta2$PsTZ&;$pK>"ep)!+IZfE]!i=<<-_t>'#0r'Tp^5,QJNW>6+]s3Kul24a[4g0`*aOFTMpNWjuUYD_YU91BhSN?rSiaGWfC=!5i0+!%G+?819YM?]tIcV#UL[!0@0\S72=)%:NtMEm!s"9&+92O%'Ht77!!X%N3tMAl#%hJXJ2PUQ0`V7T"oeRf%fdb[!sGoR!?!gbJ7'`*!rr-lM>lYY]/p3I?m7iW=U.q0!)8IS)nIgr!"fGp?Z?<@ZShec#\99&#E4fm!)5E\0f_P)/cX7.TE$^e((L=!!%1uYQs3r2!!!3'QN3<Z'**gg!$STdR6=_(?j]#'dQIUV!+c/2?k]gn6KU-+9F!^!2#o.7$Ca*X.pru;69hLaXX;>1%:L@tFO#D5`Y3s.!@";*CRRp]qS.prSh4$j8U!!H7%!1X%E5Q53o?4m5<ScSlr!!!0&F`3g2YtYBjg.+#qBerb#25UZ[T`kEXf`;(7^<OVU1lF0k!."SY!!&er!&=L8"/>jh2>R;7"8?e$!!*'k";q1>VZHi_#s/6d!!"ag<=V=q@6(k5fP:J"1J_pH$Z7g0#6;XFWr`8i*rl;@1][TU3BB_:"AoF)!=o13!2omo<@-#s#67C.L'lCX%:=YWll!,OAnG6"cG!Wi<&!!D^j4%1su!!#@j"98Z,9fWJl3s':a<abt.)ksP:!BUWs!WtO,B)kR+!]^?M!-p^/DED5+Z2jq+rr<$$2,0hI$8DWa*!$<FZN(e2YlLs9!!``/70W_l!]()ah&J?c!<E-@3<.N0!<@fRK`D/S<E0#rjFmSf!!!!"4nC/'=94*UK`D,RW]1"[!/1E,!)j""s"m>0!pBB5!*'""!**$4!/1E,!&tHA^hAk)%:#mX-E"9=eu"TYJ1Mu=Im!<<)!3$*T1"bcqf!!*'k(BFMi!/1CQ>6=_K64-?fK`FOA)#sX\$5!7;l8Ju?"bcqF!(L99!$Z>rW_sT4,PPaLZ!Co@!!):D!<E0h!)!@p`9OB&s1(l+!,=In1)9kp?"sZjp\ugV!'L]]"_e06!f7.9,R+8KrrN0%0`acY##HuqG5qRl1($eoK`GZa!WX>G!/1E,!!#@gBG)eE/ZXR*70#:N"op1YPr"3S%:!D,4>!rr<P"uutp!1X6"[3GYNKFih;K`D)QBE1IF7h^RV8ekM\!WY84!W[oS!!$+$p]!#NK`Hf,!!!'d*<6(n!/1CQ!&F[W)MJ0F!!!!Y!:0Xd!/1E,!!"bil8fYm#tk@r$:Opp!([(j!/1E,!6b@c56:ibrrN0%0`arhCFY&?K`Hf,!!$[4C^'n;s#EB)!!*(O$&&A5!!!!d!^[3I!/1CQ!([(j!/1F*!/1D,<sLG[!s#q5;-N]\%:\cB8@\,`u<[Q)#%[0-J!,!c2/!#Yb:$NL/`@k^g^!(?oS!:p+T!(^lk!'pSb!'ILd6NKIQ5la1N5ldkd0*)=Y^\q.7#QOj!!^Qf?+92C85t_2D!+>q!!'pTN!!$@3kDMt:9)q6X!!#:f:B3le5l^lb8,rVs3t>:rJ,fQL`W3sX_uR[T_>qCP^];+NM?(?j]`86s$W8lmB)lX"GB>f\@AE$?A8*`1D?.``!(\(n('">+"TpY'*_S@1%:<rcp/c7oEC3<K6]b"<KOrr<%'#ljo)!(R*PJH6<Y"TZ_"PfWo5!$MUJbV9.=!5&:D=gS125&X@"1,R-F#QPtK!'5<(brlJcfM;VM!#P\9s8E6'7Q:]G%L`==A,nUM!!>4_#QRBs!<=\O!,e8-!!Muq!'gMq!'D1UB>"9r!CHhfs8PQ&Ch3Wt@:F%a!$`]g!&.&?;fm%oDJ,mJ2%foj@fS7B!DPsr@rq]L;ZHh@(-k,DTE#!eXm._c%:9PJQi!!..I0``tn!!42G9ho,6AH;co!!-,K!^6ZB"[*8,^]7XA1*6Ms!CfUJDdu=L@:Wqi`5OqC!'kU8@gQa`C]e8OF$i<91]me5#6k0I:L\'M1^H2D!s&I*AoD^,!$D=n.m!_7!<PW,Ci==o5]Zp(F+>6)!X8Z/:gn6`Df0-!!<Zh*!E3T\S6c4%!<lD@DffaqF)s);!$O?*$3:-[!^pI=@/rt$CC^FS!<PM!6tHE2F(96)ZK9Bo%:E-+GO5\t*[3!'Ni!_!(tCh7HpDKGkD.SOo)![BQ'%KUM_%7L;)%Qb:(%fm/6@<jmD5Z\1%!F,X81C%_T$onGQ!YYSG7riNjDu`H2!5K<M%7Y&EF`KF76jsn5'i8=\5lbRT&c_rR/jf_Q!!*r<(dW1_+TZM*=TN,U6UN[5+9;O;Bl7K9!Jge=!bME50E<6s!^^^A@qu&M5\:Q3Ao)9F![7XH:i^JaARn=94TH]-D?1qJ@<6-mG:b1.%:3"Ba]'M/NTDui<0?NXnL6tS=q3<Cl7&NKr49KjOJ,pb_T0`c5#0MW+@!AFO0!AIGoH#.&C!C0'T1B<43%7bPTA7]gH$$1/60a_E#Ergmn!Ajd><_Z1,!!!$W!AmhL"="W^!/rf:2,n.3F@J&.@<?Ta'M'VQ2[;eQ!`WT;0E=<f3<XC[%laRk7fkX\CWHiL/2A"B3BRd[Ea`U$@;ngQ5Wf;Q?o`9j(]e4K!BL2n<)[fj!-8,bMa$GL%:,q]6D^Ap/#4Cf1u"TW-r+p)@<&8"0P!!,4`2WG?s"umAP"$ZfL9`QpiF_u!r!!,Cd!H8EHN<M0Z1^ZSM4[DS+7W172,lf.k!$39.!#%4^5la1N5l_Q!$8DPo!C?eqNs7HA"oo;q"@3#R!'pSu!AOU2JHI\0"u'!W,=)Ac&OHL(!@'f/6SSQt3<Koq<RE'n!AZk@(dA'+K`Hf,<<*Xd!\j]h4rC"'7fY5&3^Nj73rfop1''-c@*ML!%:4A?"[56P>q68\g2;[-M28HUaL3sRJ@1g9r:4TK0s3&^h6!&lV41bfh.!<W?W!"o8p!B^B3V*>!s!]N1@3<:]4#ZD!0-Nj_U&hsV%0a8_20`a(E!+Q!j&n_52$OAlr5l_/k9J[P?1r')W!'pSb!?_Cc!?_Cc!?_Cc!<L%[!?_Cc!?a0"5nlTb!!+5D2,aGS!<3$!W<JGr%:~>%%EndAGDEmbeddedDoc%%BeginResource: procset Altsys_header 4 0userdict begin /AltsysDict 245 dict def endAltsysDict begin/bdf{bind def}bind def/xdf{exch def}bdf/defed{where{pop true}{false}ifelse}bdf/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf/d{setdash}bdf/h{closepath}bdf/H{}bdf/J{setlinecap}bdf/j{setlinejoin}bdf/M{setmiterlimit}bdf/n{newpath}bdf/N{newpath}bdf/q{gsave}bdf/Q{grestore}bdf/w{setlinewidth}bdf/sepdef{ dup where not {AltsysSepDict } if  3 1 roll exch put}bdf/st{settransfer}bdf/colorimage defed /_rci xdf/_NXLevel2 defed {  _NXLevel2 not {   /colorimage where {userdict eq {/_rci false def } if} if } if} if/md defed{  md type /dicttype eq {  /colorimage where { md eq { /_rci false def }if}if/settransfer where {md eq {/st systemdict /settransfer get def}if}if }if }if/setstrokeadjust defed{ true setstrokeadjust /C{curveto}bdf /L{lineto}bdf /m{moveto}bdf}{ /dr{transform .25 sub round .25 add exch .25 sub round .25 add exch itransform}bdf /C{dr curveto}bdf /L{dr lineto}bdf /m{dr moveto}bdf /setstrokeadjust{pop}bdf }ifelse/rectstroke defed /xt xdfxt {/yt save def} if/privrectpath {  4 -2 roll m dtransform round exch round exch idtransform  2 copy 0 lt exch 0 lt xor {dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto} {exch dup 0 rlineto exch 0 exch rlineto neg 0 rlineto} ifelse closepath}bdf/rectclip{newpath privrectpath clip newpath}def/rectfill{gsave newpath privrectpath fill grestore}def/rectstroke{gsave newpath privrectpath stroke grestore}defxt {yt restore} if/_fonthacksave false def/currentpacking defed { /_bfh {/_fonthacksave currentpacking def false setpacking} bdf /_efh {_fonthacksave setpacking} bdf}{ /_bfh {} bdf /_efh {} bdf}ifelse/packedarray{array astore readonly}ndf/` {  false setoverprint     /-save0- save def 5 index concat pop storerect left bottom width height rectclip pop  /dict_count countdictstack def /op_count count 1 sub def userdict begin  /showpage {} def  0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bdf/currentpacking defed{true setpacking}if/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/xformfont { currentfont exch makefont setfont } bdf/fhnumcolors 1  statusdict begin/processcolors defed {pop processcolors}{/deviceinfo defed {deviceinfo /Colors known {pop deviceinfo /Colors get} if} if} ifelse end def/printerRes  gsave matrix defaultmatrix setmatrix 72 72 dtransform abs exch abs max grestore def/graycalcs[ {Angle Frequency}    {GrayAngle GrayFrequency}  {0 Width Height matrix defaultmatrix idtransform dup mul exch dup mul add sqrt 72 exch div}  {0 GrayWidth GrayHeight matrix defaultmatrix idtransform dup mul exch dup mul add sqrt 72 exch div} ] def/calcgraysteps { forcemaxsteps {maxsteps } {/currenthalftone defed{currenthalftone /dicttype eq}{false}ifelse{currenthalftone beginHalftoneType 4 le{graycalcs HalftoneType 1 sub get exec}{HalftoneType 5 eq{Default begin{graycalcs HalftoneType 1 sub get exec}end}{0 60} ifelse}ifelseend}{currentscreen pop exch }ifelse printerRes 300 max exch div exch 2 copy sin mul round dup mul 3 1 roll cos mul round dup mul add 1 add dup maxsteps gt {pop maxsteps} if  } ifelse} bdf/nextrelease defed {  /languagelevel defed not {    /framebuffer defed { 0 40 string framebuffer 9 1 roll 8 {pop} repeatdup 516 eq exch 520 eq or{/fhnumcolors 3 def/currentscreen {60 0 {pop pop 1}}bdf/calcgraysteps {maxsteps} bdf}if}if }if}iffhnumcolors 1 ne { /calcgraysteps {maxsteps} bdf} if/currentpagedevice defed {   currentpagedevice /PreRenderingEnhance known {currentpagedevice /PreRenderingEnhance get{/calcgraysteps {forcemaxsteps {maxsteps}{256 maxsteps min}ifelse} def} if } if} if/gradfrequency 144 defprinterRes 1000 lt { /gradfrequency 72 def} if/adjnumsteps {  dup dtransform abs exch abs max    printerRes div         gradfrequency mul       round         5 max        min        }bdf/goodsep { spots exch get 4 get dup sepname eq exch (_vc_Registration) eq or}bdf/BeginGradation defed{/bb{BeginGradation}bdf}{/bb{}bdf}ifelse/EndGradation defed{/eb{EndGradation}bdf}{/eb{}bdf}ifelse/bottom -0 def /delta -0 def /frac -0 def /height -0 def /left -0 def /numsteps1 -0 def /radius -0 def /right -0 def /top -0 def /width -0 def /xt -0 def /yt -0 def /df currentflat def /tempstr 1 string def /clipflatness currentflat def /inverted?  0 currenttransfer exec .5 ge def/tc1 [0 0 0 1] def /tc2 [0 0 0 1] def /storerect{/top xdf /right xdf /bottom xdf /left xdf /width right left sub def /height top bottom sub def}bdf/concatprocs{ systemdict /packedarray known  {dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse { /proc2 exch cvlit def /proc1 exch cvlit defproc1 aload pop proc2 aload popproc1 length proc2 length add packedarray cvx } { /proc2 exch cvlit def /proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putintervalnewproc cvx }ifelse}bdf/i{dup 0 eq {pop df dup}  {dup} ifelse  /clipflatness xdf setflat}bdfversion cvr 38.0 le{/setrgbcolor{currenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollcurrenttransfer exec 3 1 rollsetrgbcolor}bdf}if/vms {/vmsv save def} bdf/vmr {vmsv restore} bdf/vmrs{vmsv restore /vmsv save def}bdf/eomode{  {/filler /eofill load def /clipper /eoclip load def} {/filler /fill load def /clipper /clip load def} ifelse}bdf/normtaper{}bdf/logtaper{9 mul 1 add log}bdf/CD{ /NF exch def  {    exch dup /FID ne 1 index/UniqueID ne and{exch NF 3 1 roll put}{pop pop}ifelse }forall  NF}bdf/MN{ 1 index length    /Len exch def  dup length Len add   string dup     Len      4 -1 roll     putinterval    dup      0       4 -1 roll    putinterval   }bdf/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch {1 index MN cvn/NewN exch def cvn findfont dup maxlength dict CD dup/FontName NewN put dup /Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf/RF{  dup       FontDirectory exch    known      {pop 3 -1 roll pop}   {RC} ifelse}bdf/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known {exch pop findfont 3 -1 roll pop} {pop dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll  {3 -1 roll dup 4 -2 roll put}forall put definefont} ifelse}bdf/RFJ{  dup       FontDirectory exch    known      {pop 3 -1 roll pop   FontDirectory /Ryumin-Light-83pv-RKSJ-H known  {pop pop /Ryumin-Light-83pv-RKSJ-H dup}if   }       {RC} ifelse}bdf/FFJ{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known {exch pop findfont 3 -1 roll pop} {popdup FontDirectory exch known not  {FontDirectory /Ryumin-Light-83pv-RKSJ-H known {pop /Ryumin-Light-83pv-RKSJ-H}if  }if             dup findfont dup maxlength dict CD dup dup /Encoding exch /Encoding get 256 array copy 7 -1 roll  {3 -1 roll dup 4 -2 roll put}forall put definefont} ifelse}bdf/fps{ currentflat    exch      dup 0 le{pop 1}if  {dup setflat 3 index stopped{1.3 mul dup 3 index gt{pop setflat pop pop stop}if} {exit} ifelse }loop  pop setflat pop pop}bdf/fp{100 currentflat fps}bdf/clipper{clip}bdf /W{/clipper load 100 clipflatness dup setflat fps}bdfuserdict begin /BDFontDict 29 dict def endBDFontDict begin/bu{}def/bn{}def/setTxMode{av 70 ge{pop}if pop}def/gm{m}def/show{pop}def/gr{pop}def/fnt{pop pop pop}def/fs{pop}def/fz{pop}def/lin{pop pop}def/:M {pop pop} def/sf {pop} def/S {pop} def/@b {pop pop pop pop pop pop pop pop} def/_bdsave /save load def/_bdrestore /restore load def/save { dup /fontsave eq {null} {_bdsave} ifelse } def/restore { dup null eq { pop } { _bdrestore } ifelse } def/fontsave null defend/MacVec 256 array def MacVec 0 /Helvetica findfont/Encoding get 0 128 getinterval putintervalMacVec 127 /DEL put MacVec 16#27 /quotesingle put MacVec 16#60 /grave put/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USMacVec 0 32 getinterval astore pop/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash /questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/nbspace/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacVec 128 128 getinterval astore popend %. AltsysDict%%EndResource%%EndProlog%%BeginSetupAltsysDict begin_bfh%%IncludeResource: font Symbol_efh0 dict dup beginend /f0 /Symbol FF def_bfh%%IncludeResource: font NewsGothicBT-BoldExtraCondensed_efhMacVec 256 array copy/f1 /|______NewsGothicBT-BoldExtraCondensed dup RF findfont def_bfh%%IncludeResource: font NewsGothicBT-ExtraCondensed_efhMacVec 256 array copy/f2 /|______NewsGothicBT-ExtraCondensed dup RF findfont def_bfh%%IncludeResource: font NewsGothic_efhMacVec 256 array copy/f3 /|______NewsGothic dup RF findfont defend %. AltsysDict%%EndSetupAltsysDict begin /onlyk4{false}ndf/ccmyk{dup 5 -1 roll sub 0 max exch}ndf/cmyk2gray{ 4 -1 roll 0.3 mul 4 -1 roll 0.59 mul 4 -1 roll 0.11 mul add add add 1 min neg 1 add}bdf/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf/maxcolor {  max max max  } ndf/maxspot { pop} ndf/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf/findcmykcustomcolor{5 packedarray}ndf/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf/setseparationgray{setgray}ndf/setoverprint{pop}ndf /currentoverprint false ndf/cmykbufs2gray{ 0 1 2 index length 1 sub { 4 index 1 index get 0.3 mul 4 index 2 index get 0.59 mul 4 index 3 index get 0.11 mul 4 index 4 index get add add add cvi 255 min255 exch sub2 index 3 1 roll put }for 4 1 roll pop pop pop}bdf/colorimage{ pop pop [5 -1 roll/exec cvx 6 -1 roll/exec cvx 7 -1 roll/exec cvx 8 -1 roll/exec cvx/cmykbufs2gray cvx ]cvx  image}%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)version cvr 47.1 le statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelseand{userdict begin bdf end}{ndf}ifelsefhnumcolors 1 ne {/yt save def} if/customcolorimage{ aload pop (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdfic im iy ik cmyk2gray /xt xdfcurrenttransfer{dup 1.0 exch sub xt mul add}concatprocsst image } ifelse}ndffhnumcolors 1 ne {yt restore} iffhnumcolors 3 ne {/yt save def} if/customcolorimage{ aload pop  (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdf1.0 dup ic ik add min sub 1.0 dup im ik add min sub 1.0 dup iy ik add min sub /ic xdf /iy xdf /im xdfcurrentcolortransfer4 1 roll {dup 1.0 exch sub ic mul add}concatprocs 4 1 roll {dup 1.0 exch sub iy mul add}concatprocs 4 1 roll {dup 1.0 exch sub im mul add}concatprocs 4 1 roll setcolortransfer{/dummy xdf dummy}concatprocs{dummy}{dummy}true 3 colorimage } ifelse}ndffhnumcolors 3 ne {yt restore} iffhnumcolors 4 ne {/yt save def} if/customcolorimage{ aload pop (_vc_Registration) eq  {pop pop pop pop separationimage } {/ik xdf /iy xdf /im xdf /ic xdfcurrentcolortransfer{1.0 exch sub ik mul ik sub 1 add}concatprocs 4 1 roll{1.0 exch sub iy mul iy sub 1 add}concatprocs 4 1 roll{1.0 exch sub im mul im sub 1 add}concatprocs 4 1 roll{1.0 exch sub ic mul ic sub 1 add}concatprocs 4 1 rollsetcolortransfer{/dummy xdf dummy}concatprocs{dummy}{dummy}{dummy}true 4 colorimage } ifelse}ndffhnumcolors 4 ne {yt restore} if/separationimage{image}ndf/newcmykcustomcolor{6 packedarray}ndf/inkoverprint false ndf/setinkoverprint{pop}ndf /setspotcolor {  spots exch get dup 4 get (_vc_Registration) eq {pop 1 exch sub setseparationgray} {0 5 getinterval exch setcustomcolor} ifelse}ndf/currentcolortransfer{currenttransfer dup dup dup}ndf/setcolortransfer{st pop pop pop}ndf/fas{}ndf/sas{}ndf/fhsetspreadsize{pop}ndf/filler{fill}bdf /F{gsave {filler}fp grestore}bdf/f{closepath F}bdf/S{gsave {stroke}fp grestore}bdf/s{closepath S}bdf/bc4 [0 0 0 0] def /_lfp4 { /iosv inkoverprint def /cosv currentoverprint def /yt xdf        /xt xdf        /ang xdf       storerect /taperfcn xdf /k2 xdf /y2 xdf /m2 xdf /c2 xdf /k1 xdf /y1 xdf /m1 xdf /c1 xdf c1 c2 sub abs m1 m2 sub abs y1 y2 sub abs k1 k2 sub abs maxcolor       calcgraysteps mul abs round   height abs adjnumsteps    dup 2 lt {pop 1} if     1 sub /numsteps1 xdf currentflat mark     currentflat clipflatness   /delta top bottom sub numsteps1 1 add div def  /right right left sub def   /botsv top delta sub def   {{Wxt yt translate ang rotatext neg yt neg translate dup setflat /bottom botsv def0 1 numsteps1 {numsteps1 dup 0 eq {pop 0.5 } { div } ifelse taperfcn /frac xdfbc4 0 c2 c1 sub frac mul c1 add putbc4 1 m2 m1 sub frac mul m1 add putbc4 2 y2 y1 sub frac mul y1 add putbc4 3 k2 k1 sub frac mul k1 add putbc4 vc1 index setflat { mark {newpath left bottom right delta rectfill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop/bottom bottom delta sub def}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/bcs [0 0] def /_lfs4 { /iosv inkoverprint def /cosv currentoverprint def /yt xdf        /xt xdf        /ang xdf       storerect /taperfcn xdf /tint2 xdf       /tint1 xdf       bcs exch 1 exch put     tint1 tint2 sub abs     bcs 1 get maxspot     calcgraysteps mul abs round   height abs adjnumsteps    dup 2 lt {pop 2} if     1 sub /numsteps1 xdf currentflat mark     currentflat clipflatness   /delta top bottom sub numsteps1 1 add div def  /right right left sub def   /botsv top delta sub def   {{Wxt yt translate ang rotatext neg yt neg translate dup setflat /bottom botsv def0 1 numsteps1 {numsteps1 div taperfcn /frac xdfbcs 01.0 tint2 tint1 sub frac mul tint1 add subput bcs vc1 index setflat { mark {newpath left bottom right delta rectfill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop/bottom bottom delta sub def}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/_rfs4 { /iosv inkoverprint def /cosv currentoverprint def /tint2 xdf       /tint1 xdf       bcs exch 1 exch put     /radius xdf       /yt xdf        /xt xdf        tint1 tint2 sub abs     bcs 1 get maxspot     calcgraysteps mul abs round   radius abs adjnumsteps    dup 2 lt {pop 2} if     1 sub /numsteps1 xdf radius numsteps1 div 2 div /halfstep xdf  currentflat mark     currentflat clipflatness   {{dup setflat W 0 1 numsteps1 {dup /radindex xdfnumsteps1 div /frac xdfbcs 0tint2 tint1 sub frac mul tint1 addput bcs vc1 index setflat { newpath mark xt yt radius 1 frac sub mul halfstep add 0 360{ arcradindex numsteps1 ne {xt yt radindex 1 add numsteps1 div 1 exch sub radius mul halfstep adddup xt add yt moveto 360 0 arcn } iffill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/_rfp4 { /iosv inkoverprint def /cosv currentoverprint def /k2 xdf /y2 xdf /m2 xdf /c2 xdf /k1 xdf /y1 xdf /m1 xdf /c1 xdf /radius xdf       /yt xdf        /xt xdf        c1 c2 sub abs m1 m2 sub abs y1 y2 sub abs k1 k2 sub abs maxcolor       calcgraysteps mul abs round   radius abs adjnumsteps    dup 2 lt {pop 1} if     1 sub /numsteps1 xdf radius numsteps1 dup 0 eq {pop} {div} ifelse  2 div /halfstep xdf  currentflat mark     currentflat clipflatness   {{dup setflat W 0 1 numsteps1 {dup /radindex xdfnumsteps1 dup 0 eq {pop 0.5 } { div } ifelse /frac xdfbc4 0 c2 c1 sub frac mul c1 add putbc4 1 m2 m1 sub frac mul m1 add putbc4 2 y2 y1 sub frac mul y1 add putbc4 3 k2 k1 sub frac mul k1 add putbc4 vc1 index setflat { newpath mark xt yt radius 1 frac sub mul halfstep add 0 360{ arcradindex numsteps1 ne {xt yt radindex 1 add numsteps1 dup 0 eq {pop} {div} ifelse 1 exch sub radius mul halfstep adddup xt add yt moveto 360 0 arcn } iffill}stopped{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}{cleartomark exit}ifelse}loop}for}gsave stopped grestore{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}{exit}ifelse }loop cleartomark setflat iosv setinkoverprint cosv setoverprint}bdf/lfp4{_lfp4}ndf/lfs4{_lfs4}ndf/rfs4{_rfs4}ndf/rfp4{_rfp4}ndf/cvc [0 0 0 1] def /vc{ AltsysDict /cvc 2 index put  aload length 4 eq {setcmykcolor} {setspotcolor} ifelse}bdf /origmtx matrix currentmatrix def/ImMatrix matrix currentmatrix def0 setseparationgray/imgr {1692 1584 2304 2376 } def /bleed 0 def /clpr {1692 1584 2304 2376 } def /xs 1 def /ys 1 def /botx 0 def /overlap 0 def /wdist 18 def 0 2 mul fhsetspreadsize 0 0 ne {/df 0 def /clipflatness 0 def} if /maxsteps 256 def /forcemaxsteps false def vms-1852 -2119 translate/currentpacking defed{false setpacking}if /spots[1 0 0 0 (Process Cyan) false newcmykcustomcolor0 1 0 0 (Process Magenta) false newcmykcustomcolor0 0 1 0 (Process Yellow) false newcmykcustomcolor0 0 0 1 (Process Black) false newcmykcustomcolor0 1 0.65 0.47 (PANTONE 202 CVC) false newcmykcustomcolor0 0.085 0.15 0.43 (PANTONE Warm Gray 8 CVC) false newcmykcustomcolor]def/textopf false def/curtextmtx{}def/otw .25 def/msf{dup/curtextmtx xdf makefont setfont}bdf/makesetfont/msf load def/curtextheight{.707104 .707104 curtextmtx dtransform dup mul exch dup mul add sqrt}bdf/ta2{ tempstr 2 index gsave exec grestore cwidth cheight rmoveto 4 index eq{5 index 5 index rmoveto}if 2 index 2 index rmoveto }bdf/ta{exch systemdict/cshow known{{/cheight xdf/cwidth xdf tempstr 0 2 index put ta2}exch cshow} {{tempstr 0 2 index put tempstr stringwidth/cheight xdf/cwidth xdf ta2}forall} ifelse 6{pop}repeat}bdf/sts{/textopf currentoverprint def vc setoverprint/ts{awidthshow}def exec textopf setoverprint}bdf/stol{/xt currentlinewidth def  setlinewidth vc newpath  /ts{{false charpath stroke}ta}def exec  xt setlinewidth}bdf  /strk{/textopf currentoverprint def vc setoverprint /ts{{false charpath stroke}ta}def exec  textopf setoverprint }bdf n[] 0 d3.863708 M1 w0 j0 Jfalse setoverprint0 ifalse eomode[0 0 0 1] vcvms2144.5426 2204.5181 m1860.8157 2204.5181 L1860.8157 2144.1438 L2144.5426 2144.1438 L2144.5426 2204.5181 Lnq_bfh%%IncludeResource: font NewsGothicBT-BoldExtraCondensed_efh{f1 [57.5 0 0 57.5 0 0] makesetfont1860.815674 2158.518845 m0 0 32 -0.287781 0 (R) ts1.149368 0 rmoveto }false[1 4]sts{f1 [57.5 0 0 57.5 0 0] makesetfont0 0 32 -0.287781 0 (S) ts1.149368 0 rmoveto }false[1 4]sts{f1 [57.5 0 0 57.5 0 0] makesetfont0 0 32 -0.287781 0 (A) ts}false[1 4]sts_bfh%%IncludeResource: font NewsGothicBT-ExtraCondensed_efh{f2 [57.5 0 0 57.5 0 0] makesetfont0 0 32 -0.287781 0 ( Laboratories) ts}false[1 4]stsQ2105.7043 2144.2159 m1901.4147 2144.2159 L1901.4147 2119.8562 L2105.7043 2119.8562 L2105.7043 2144.2159 Lnq_bfh%%IncludeResource: font NewsGothicBT-ExtraCondensed_efh{f2 [23.199997 0 0 23.199997 0 0] makesetfont1901.414688 2125.656189 m0 0 32 0 0 (A Division of RSA Data Security) ts}false[1 5]stsQ2153.2417 2165.3197 m2145.6418 2165.3197 L2145.6418 2155.3198 L2153.2417 2155.3198 L2153.2417 2165.3197 Lnq_bfh%%IncludeResource: font NewsGothic_efh{f3 [9.000549 0 0 9 0 0] makesetfont2145.6418 2158.119812 m0 0 32 0 0 (\250) ts}false[1 4]stsQ1973.778 2272.2573 m1977.749 2272.256 L1977.8462 2267.3112 L2022.6848 2267.3112 L2028.6633 2260.6158 L2020.7731 2253.1357 L2014.7948 2253.1357 L2008.8165 2257.6789 L2002.8382 2257.6789 L1996.3696 2253.4949 L1989.9011 2257.3214 L1983.8268 2252.7268 L1977.8462 2252.7246 L1977.749 2247.3169 L1973.778 2247.3169 L1973.778 2244.6609 L1973.778 2242.2839 1971.8509 2240.357 1969.4738 2240.357 C1948.1887 2240.357 L1945.8116 2240.357 1943.8845 2242.2839 1943.8845 2244.6609 C1943.8845 2274.912 L1943.8845 2277.289 1945.8116 2279.2159 1948.1887 2279.2159 C1969.4738 2279.2159 L1971.8509 2279.2159 1973.778 2277.289 1973.778 2274.912 C1973.778 2272.2573 L[1 4]  vcfalse setoverprintf n2037.5818 2230.8024 m2033.7339 2230.8139 L2033.7064 2236.1004 L1986.9088 2236.1025 L1980.9305 2242.0804 L1989.9936 2250.0225 L1996.4619 2246.1962 L2002.9301 2250.7387 L2008.9082 2250.7387 L2014.8862 2246.5543 L2020.8642 2246.5543 L2025.765 2250.3276 L2033.7064 2250.3276 L2033.7339 2255.7553 L2037.5818 2255.7686 L2037.5817 2258.6448 L2037.5817 2261.0218 2039.5088 2262.9487 2041.8859 2262.9487 C2063.1695 2262.9487 L2065.5466 2262.9487 2067.4737 2261.0218 2067.4737 2258.6448 C2067.4737 2228.3954 L2067.4737 2226.0184 2065.5466 2224.0915 2063.1695 2224.0915 C2041.8859 2224.0915 L2039.5088 2224.0915 2037.5817 2226.0184 2037.5817 2228.3954 C2037.5818 2230.8024 L[1 5]  vcf nvmrvmrend%%Trailer%%DocumentNeededResources: font Symbol%%+ font NewsGothicBT-BoldExtraCondensed%%+ font NewsGothicBT-ExtraCondensed%%+ font NewsGothic%%DocumentFonts: Symbol%%+ NewsGothicBT-BoldExtraCondensed%%+ NewsGothicBT-ExtraCondensed%%+ NewsGothic%%DocumentNeededFonts: Symbol%%+ NewsGothicBT-BoldExtraCondensed%%+ NewsGothicBT-ExtraCondensed%%+ NewsGothic%%EndDocumentV1`65N1`65F M1`65/AB 190 200 w1`65T g`650 0 0 (Black) 1 _rgb d`65-4750 -2503 (The RSA Data Security Conference \32598) 0.021149 0 1563 5 35 A1`65/AF 200 200 w1`65-4750 -2286 (The seventh annual RSA Data Security Con-) 5.643585 0 1575 6 40 A1`65-4750 -2178 (ference is scheduled to be held in San Fran-) 12.922348 0 1575 8 43 A1`65-4750 -2070 (cisco on January 13-16, 1998.) 0.001221 0 995 4 28 A1`65-4750 -1853 (V) -1.570602 0 60 0 0 A1`65-4694 -1853 (ir) -1.570602 0 51 0 1 A1`65-4643 -1853 (tually all of San Francisco\325) -1.570602 0 882 4 27 A1`65-3766 -1853 (s Nob Hill will be) -1.570602 0 591 4 17 A1`65-4750 -1745 (dedicated to the event, including the Masonic) 2.968277 0 1575 6 44 A1`65-4750 -1636 (Auditorium, the Fairmont Hotel, the Stanford) 2.597595 0 1575 5 43 A1`65-4750 -1528 (Court, and the Ritz Carlton.) -0.002441 0 958 4 27 A1`65/AF 198 200 w1`65-4750 -1311 (The conference will deliver four full days of cov-) -2.681305 -0.426285 1575 8 49 A1`65-4750 -1203 (erage of the latest trends in cryptographic re-) 11.385315 0 1575 7 46 A1`65-4750 -1095 (sear) 14.43721 0.005951 128 0 3 A1`65-4622 -1095 (ch, pr) 14.43721 0.005951 207 1 5 A1`65-4415 -1095 (o) 14.43721 0.005951 41 0 0 A1`65-4373 -1095 (duct development, market analysis) 14.43721 0.005951 1198 3 32 A1`65-4750 -986 (and social thought in the field of cr) 2.036865 0 1190 7 36 A1`65-3560 -986 (yptography) 2.036865 0 371 0 9 A1`65-3196 -986 (,) 2.036865 0 21 0 0 A1`65-4750 -878 (all presented by some of the leading minds in) 9.030594 0 1575 8 44 A1`65-4750 -770 (the industr) 14.43721 1.977325 400 1 10 A1`65-4349 -770 (y) 14.43721 1.977325 39 0 0 A1`65-4317 -770 (. An annual pilgrimage for the) 14.43721 1.977325 1142 5 29 A1`65-4750 -661 (world\325) 14.43721 0.808731 211 0 5 A1`65-4543 -661 (s cr) 14.43721 0.808731 130 1 3 A1`65-4414 -661 (yptography systems exper) 14.43721 0.808731 891 2 23 A1`65-3523 -661 (ts, policy-) 14.43721 0.808731 348 1 10 A1`65-4750 -553 (makers, business people and technology devel-) 5.320969 0 1575 5 44 A1`65-4750 -445 (opers, the RSA Conference delivers breadth and) -2.681305 -0.631241 1575 6 45 A1`65-4750 -336 (depth far beyond any other computer security) 9.798416 0 1575 6 43 A1`65-4750 -228 (gathering.) 0 0.001999 337 0 9 A1`65O1`65N1`65F M1`65/AF 200 200 w1`65-2975 -2503 (Computerworld called it \322the ) 14.582916 2.402817 1137 4 28 A1`65/AC 200 200 w1`65-1838 -2503 (sine-qua-non) 0 2.40274 438 0 11 A1`65/AF 200 200 w1`65-2975 -2395 (event of the crypto community\323. From very) 14.582916 0.687958 1575 6 40 A1`65-2975 -2286 (humble beginnings in 1991, when 50 develop-) 2.1138 0 1575 6 42 A1`65-2975 -2178 (ers gathered to discuss the state of the nascent) 3.159515 0 1575 8 47 A1`65-2975 -2070 (cr) 13.575516 0 65 0 1 A1`65-2910 -2070 (ypto industr) 13.575516 0 418 1 11 A1`65-2492 -2070 (y) 13.575516 0 37 0 0 A1`65-2461 -2070 (, the annual RSA Confer) 13.575516 0 904 4 22 A1`65-1557 -2070 (ence) 13.575516 0 157 0 3 A1`65-2975 -1961 (has grown to become the biggest event on the) 3.68338 0 1575 8 43 A1`65-2975 -1853 (crypto-circuit. Planners are projecting that over) -2.708374 -0.350937 1575 5 48 A1`65-2975 -1745 (3,000 cryptographers, policy-makers, business) 14.582916 0.100342 1575 3 44 A1`65-2975 -1636 (people and technology developers will attend) 10.039627 0 1575 5 43 A1`65-2975 -1528 (the 1998 conference.) 0.034592 0 710 2 19 A1`65/AF 204 200 w1`65-2975 -1311 (An increasingly significant element of the) 14.87468 1.314499 1575 5 41 A1`65-2975 -1203 (confer) 3.434769 0 217 0 5 A1`65-2758 -1203 (ence is the RSA Data Security Confer) 3.434769 0 1333 6 35 A1`65-1428 -1203 (-) 3.434769 0 28 0 0 A1`65-2975 -1095 (ence Par) 14.87468 0.955231 317 1 7 A1`65-2657 -1095 (tner Fair) 14.87468 0.955231 318 1 8 A1`65-2344 -1095 (. Scheduled to take place) 14.87468 0.955231 944 4 24 A1`65-2975 -986 (January 13-15 at the Fairmont Hotel, this ex-) 2.493439 0 1575 7 44 A1`65-2975 -878 (hibit hall provides an unparalleled opportunity) -2.762558 -0.403412 1575 5 46 A1`65-2975 -770 (for attendees to see the very latest develop-) 13.002594 0 1575 7 44 A1`65-2975 -661 (ments in cryptographic and computer security) 0.216263 0 1575 5 43 A1`65-2975 -553 (pr) 0 -0.01001 71 0 1 A1`65-2904 -553 (o) 0 -0.01001 42 0 0 A1`65-2861 -553 (ducts.) 0 -0.01001 200 0 5 A1`65/AF 200 200 w1`65-2975 -336 (For mor) -0.405731 0 266 1 6 A1`65-2709 -336 (e infor) -0.405731 0 220 1 6 A1`65-2490 -336 (mation or to r) -0.405731 0 468 3 13 A1`65-2021 -336 (egister) -0.405731 0 217 0 6 A1`65-1809 -336 (, please visit) -0.405731 0 409 2 13 A1`65/AC 200 200 w1`65-2975 -228 (http://www) 0 -0.0056 361 0 9 A1`65-2617 -228 (.rsa.com/conf98/) 0 -0.0056 541 0 15 A1`65/AF 200 200 w1`65-2076 -228 (.) 0 0 21 0 0 A1`65O1`65$2 tsi^65showpage%%PageTrailer%%PageCustomColors: (PANTONE 202 CVC)%%+ (PANTONE Warm Gray 8 CVC)%%Trailerendend%%Pages: 16%%DocumentSuppliedResources: procset P65PS_PS 1.0 1%%+ procset P65IMAGE_PS 1.0 1%%+ font Goudy-Bold%%+ font Futura-Bold%%+ font Goudy-Italic%%+ font Futura-BoldOblique%%+ font Goudy-BoldItalic%%+ font Goudy%%+ font NewsGothicBT-BoldExtraCondensed%%+ font NewsGothicBT-ExtraCondensed%%+ font NewsGothic%%+ font Futura-Book%%DocumentNeededResources: font Times-Roman%%+ font Helvetica%%+ font Symbol%%+ font Courier%%+ font Courier-Oblique%%+ font Helvetica-Bold%%DocumentCustomColors: (PANTONE 202 CVC)%%+ (PANTONE Warm Gray 8 CVC)%%RGBCustomColor: 0.524544 0 0.093355 (PANTONE 202 CVC)%%+ 0.569833 0.519707 0.464134 (PANTONE Warm Gray 8 CVC)%%EOF