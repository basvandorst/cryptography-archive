%!PS-Adobe-3.0
%%Title: (SAFER K64 Paper)
%%Creator: (Microsoft Word: LaserWriter 8.0 8.0 f1c6)
%%CreationDate: (13:54 Uhr Mittwoch, 5. Oktober 1994)
%%For: (Massey)
%%Pages: 17
%%DocumentFonts: Times-Roman Times-Italic Times-Bold Times-BoldItalic NewYork Courier
%%DocumentNeededFonts: Times-Roman Times-Italic Times-Bold Times-BoldItalic NewYork Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -30 -29 812 566
%ADO_ImageableArea: 0 0 781 538
%%EndComments
/md 207 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 80 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
level2 startnoload
%%BeginFile: adobe_psp_patterns_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/patfreq Z
/patangle Z
/bk Z
/fg Z
/docolorscreen Z
/graystring Z
/pattransf{}def
/initQDpatterns
{
/patfreq 9.375 store
/patangle
1 0 $m defaultmatrix dtransform
exch atan
por not
{90 add}if
normland{180 add}if
store
:a
}def
/docolorscreen
/setcolorscreen where
{
pop/currentcolorscreen where
{
pop/setcmykcolor where
{
pop true
}{
false
}ifelse
}{
false
}ifelse
}{
false
}ifelse
def
/setgraypattern
{
/graystring xs
patfreq
patangle
{
1 add
4 mul
cvi
graystring
exch get
exch
1 add 4 mul
cvi
7 sub
bitshift
1 and
}setscreen
64 div setgray
}bd
/:b
{
/pattransf load settransfer
pop pop pop
setgraypattern
}bd
docolorscreen startnoload
/screensave 5 array def
/:a{currentgray currentscreen currenttransfer screensave astore pop}bd
/:e{screensave aload pop settransfer setscreen setgray}bd
/:d
{
pop pop pop
/pattransf load settransfer
setgraypattern 8{pop}repeat
}bd
/:c
/:d ld
docolorscreen endnoload docolorscreen not startnoload
/screensave 20 array def
/:a{currentcmykcolor currentcolorscreen currentcolortransfer screensave
astore pop}bd
/:e{screensave aload pop setcolortransfer setcolorscreen setcmykcolor}bd
/rstring Z
/grstring Z
/blstring Z
/convroll{64 div 4 -1 roll}bd
/setcolorpattern
{
/graystring xs
/blstring xs
/grstring xs
/rstring xs
patfreq
patangle
{
1 add 4 mul cvi rstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi grstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi blstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi graystring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
setcolorscreen
convroll convroll convroll convroll
setcmykcolor
}bd
/:d
{
pop pop pop
/pattransf load settransfer
pop pop setcolorpattern
}bd
/:c
/:d ld
docolorscreen not endnoload
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_patterns_level2
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/pmtx Z
/BGnd Z
/FGnd Z
/PaintData Z
/PatternMtx Z
/PatHeight Z
/PatWidth Z
/$d Z
/savecolor 4 array def
/savecolorspace Z
/:a{
mark 0 0 0 currentcolor savecolor astore pop cleartomark
/savecolorspace currentcolorspace store
}bd
/:e{
savecolorspace setcolorspace
mark savecolor aload pop setcolor cleartomark
}bd
/initQDpatterns
{
gS
initmatrix
mT dup 4 get exch 5 get :T
1 0 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
0 1 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
neg
scale
0
por not{90 add}if
normland{180 add}if
rotate
matrix currentmatrix
gR
/pmtx xs
:a
}bd
/:t
{
14 dict begin
/BGnd xdf
/FGnd xdf
/PaintData xdf
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PatternMtx[24 0 0 24 0 0]def
/PaintProc
BGnd null ne
{
{
begin
BGnd aload pop :F
0 0 1 1 rF
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}{
{
begin
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}ifelse
def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/:u
{
14 dict begin
/$d 8 dict def
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PaintData xdf
/PatHeight xdf
/PatWidth xdf
/PatternMtx[PatWidth 0 0 PatHeight 0 0]def
$d begin
/ImageType 1 def
/MultipleDataSource false def
/Height PatHeight def
/Width PatWidth def
/Decode[0 1 0 1 0 1]def
/ImageMatrix PatternMtx def
/DataSource PaintData def
/BitsPerComponent 8 def
end
/PaintProc
{
begin
$d image
end
}def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/bk[1 1 1]def
/fg[0 0 0]def
/:b{
:t
setpattern
pop pop
}bd
/:d{
:t
setpattern
10{pop}repeat
}bd
/:c{
:u
setpattern
10{pop}repeat
}bd
%%EndFile
level2 not endnoload
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
%%BeginFile: adobe_psp_dashes
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/:q/setdash ld
/:r{
np
:M
:L
stroke
}bd
/nodash[]def
/qdenddash
{
nodash 0 setdash
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
1 dict dup /ManualFeed false put setpagedevice
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageSize A4Small

    2 dict dup /PageSize [595 842] put dup /ImagingBBox null put setpagedevice
%%EndFeature
}featurecleanup
(Massey)setjob
/pT[1 0 0 -1 29 812]def/mT[1 0 0 -1 29 812]def
initQDpatterns
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put
setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Bold
%%IncludeFont: Times-BoldItalic
%%IncludeFont: NewYork
%%IncludeFont: Courier
/f0_1/Times-Roman :mre
/f0_12 f0_1 12 scf
/f0_10 f0_1 10 scf
/f1_1/Times-Italic :mre
/f1_12 f1_1 12 scf
/f1_10 f1_1 10 scf
/f2_1/Times-Bold :mre
/f2_16 f2_1 16 scf
/f2_12 f2_1 12 scf
/f3_1/Times-BoldItalic :mre
/f3_12 f3_1 12 scf
/f4_1/NewYork findfont :ff def /f4_12 f4_1 12 scf
/f4_10 f4_1 10 scf
/f5_1 f4_1 :ff :msb :ff def
/f5_12 f5_1 12 scf
/f6_1/Courier :mre
/f6_14 f6_1 14 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Massey; page: 1 of 17)setjob
%%EndPageSetup
gS 0 0 538 781 rC
56 14 :M
f0_10 sf
-.023(Reprinted from )A
f1_10 sf
-.023(Fast Software Encryption)A
f4_10 sf
( )S
f0_10 sf
-.023(\(Ed. R. Anderson\), Lecture Notes in Computer Science No.)A
56 25 :M
.367 .037(809.  New York: Springer, 1994, pp. 1-17.)J
68 127 :M
f2_16 sf
-.128(SAFER K-64: A Byte-Oriented Block-Ciphering Algorithm)A
226 156 :M
f0_12 sf
-.022(James L. Massey)A
158 168 :M
-.083(Signal and Information Processing Laboratory)A
177 180 :M
-.072(Swiss Federal Institute of Technology)A
228 192 :M
-.05(CH-8092 Z\237rich)A
56 246 :M
f3_12 sf
-.006(Abstract:)A
f0_12 sf
-.006(  A new non-proprietary secret-key block-enciphering algorithm, SAFER K-)A
56 264 :M
(64 \(for )S
f2_12 sf
(S)S
f0_12 sf
(ecure )S
f2_12 sf
(A)S
f0_12 sf
(nd )S
f2_12 sf
(F)S
f0_12 sf
(ast )S
f2_12 sf
(E)S
f0_12 sf
(ncryption )S
f2_12 sf
(R)S
f0_12 sf
(outine with a )S
f2_12 sf
(K)S
f0_12 sf
(ey of length )S
f2_12 sf
(64)S
f0_12 sf
( bits\) is described.)S
56 282 :M
-.077(The blocklength is 64 bits \(8 bytes\) and only byte operations are
used in the processes of)A
56 300 :M
-.078(encryption and decryption.  New cryptographic features in SAFER K-64 include the use)A
56 318 :M
-.075(of an unorthodox linear transform, called the Pseudo-Hadamard
Transform, to achieve)A
56 336 :M
-.104(the desired "diffusion" of small changes in the plaintext or the key
over the resulting)A
56 354 :M
-.101(ciphertext and the use of additive key biases to eliminate the
possibility of "weak keys".)A
56 372 :M
-.086(The design principles of K-64 are explained and a program is given,
together with)A
56 390 :M
-.103(examples, to define the encryption algorithm precisely.)A
56 456 :M
f2_12 sf
2.765 .276(1.  Introduction)J
91 486 :M
f0_12 sf
.007 .001(This paper describes a new block encryption algorithm called  )J
f2_12 sf
(SAFER K-64)S
56 504 :M
f0_12 sf
-.026(\(for )A
f2_12 sf
(S)S
f0_12 sf
-.03(ecure )A
f2_12 sf
-.053(A)A
f0_12 sf
-.031(nd )A
f2_12 sf
(F)S
f0_12 sf
-.025(ast )A
f2_12 sf
(E)S
f0_12 sf
-.03(ncryption )A
f2_12 sf
-.053(R)A
f0_12 sf
-.029(outine with a )A
f2_12 sf
-.057(K)A
f0_12 sf
-.028(ey of length )A
f2_12 sf
-.037(64)A
f0_12 sf
-.028( bits\) that the author)A
56 522 :M
-.067(recently developed for Cylink Corporation \(Sunnyvale, CA, USA\) as a
non-proprietary)A
56 540 :M
-.087(cipher.  SAFER K-64 is a byte-oriented block enciphering algorithm. 
The block length is)A
56 558 :M
-.094(8 bytes \(64 bits\) for plaintext and ciphertext; the user-selected
key is also 8 bytes \(64 bits\))A
56 576 :M
-.107(in length.   SAFER K-64 is an )A
f1_12 sf
-.105(interated)A
f0_12 sf
-.105( cipher in the sense that encryption is performed)A
56 594 :M
-.087(by applying the same transformation repeatedly for r rounds, then
applying an output)A
56 612 :M
-.089(transformation; r = 6 is recommended but larger values of r can be
used if desired for)A
56 630 :M
-.071(even greater security.  Each round uses two 8-byte \(64-bit \)
subkeys determined by a key)A
56 648 :M
-.088(schedule from the secret 8-byte user-selected key.  The output
transformation uses)A
56 666 :M
-.091(another 8-byte subkey determined by the key schedule.  One unusual
feature of  SAFER)A
56 684 :M
-.081(K-64 is that, in contrast to most recently proposed iterated block
ciphers, encryption and)A
56 702 :M
-.08(decryption are slightly different \(i.e., they differ by more than
just the reversal of the key)A
56 720 :M
(schedule\).)S
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Massey; page: 2 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
292 774 :M
f4_12 sf
(2)S
120 94 :M
f0_12 sf
-.06(SAFER K-64 uses only byte operations in the processes of encryption and)A
85 112 :M
-.094(decryption, which makes it particularly useful in applications such
as smart cards where)A
85 130 :M
-.096(very limited processing power is available.  Some bit-level rotations
of bytes are used in)A
85 148 :M
-.044(the key schedule, but this is done "once and for all", i.e., until
the user-selected key is)A
85 166 :M
-.056(changed.  To achieve security with such simple processing, SAFER K-64
exploits two)A
85 184 :M
-.096(new cryptographic concepts, namely:)A
85 202 :M
.227 .023(\(1\) an )J
f2_12 sf
.616 .062(unorthodox linear transform)J
f0_12 sf
.261 .026(, which we call the )J
f1_12 sf
.128(Pseudo-Hadamard)A
85 220 :M
-.092(Transform \(PHT\))A
f0_12 sf
-.076(, that allows the cipher rapidly to achieve the desired "diffusion" of)A
85 238 :M
-.123(small changes in the plaintext or the key over the resulting 
ciphertext  [It is usually the)A
85 256 :M
-.095(case in block cipher design that one struggles to obtain such
diffusion by carefully)A
85 274 :M
-.135(selecting permutations to imbed within the cipher and then doing
massive statistical)A
85 292 :M
-.07(testing to see which ones give acceptable diffusion.  As will be seen,
the PHT provides a)A
85 310 :M
-.094(systematic way to ensure that the cipher provides the necessary
diffisuion--in fact, the)A
85 328 :M
-.102(diffusion provided by the PHT appears to be better than that in any
other cipher that we)A
85 346 :M
.269(know.])A
85 364 :M
-.022(and \(2\) the use of additive )A
f2_12 sf
-.025(key biases)A
f0_12 sf
-.024( that eliminate the "weak keys" that plague most)A
85 382 :M
-.075(block ciphers.  [SAFER K-64 includes a recursive procedure for
generating these key)A
85 400 :M
-.087(biases that is easy to implement and that provides the very "random"
biases desired.])A
85 442 :M
f2_12 sf
2.746 .275(2. Description of the SAFER K-64 Algorithm)J
120 472 :M
f0_12 sf
-.04(The encrypting structure of the SAFER K-64 cipher is shown in Fig. 1. 
The)A
85 490 :M
-.109(enciphering algorithm consists of r rounds of identical
transformations that are applied in)A
85 508 :M
-.094(sequence to the plaintext, followed by an output transformation, to
produce the final)A
85 526 :M
-.077(ciphertext.  Our recommendation is to use r = 6 for most
applications, but up to 10)A
85 544 :M
-.053(rounds can be used if desired.  Each round is controlled by two
8-byte subkeys and the)A
85 562 :M
-.065(output transformation is controlled by one 8-byte subkey.  These 2r +
1 subkeys are all)A
85 580 :M
-.108(derived from the 8-byte user-selected subkey K1 in a manner that will
be explained later.)A
85 598 :M
-.077(The plaintext, ciphertext and all subkeys are 8 bytes \(64 bits\) long.)A
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Massey; page: 3 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
292 774 :M
f4_12 sf
(3)S
190 414 :M
(     )S
1 G
210 85 260 329 rC
242 364 154 19 rF
0 G
242.5 364.5 153 18 rS
1 G
237 174 154 28 rF
0 G
237.5 174.5 153 27 rS
1 G
237 128 154 28 rF
0 G
237.5 128.5 153 27 rS
1 G
230 308 174 37 rF
0 G
230.5 308.5 173 36 rS
1 G
234 87 155 20 rF
0 G
234.5 87.5 154 19 rS
262 91 89 12 rC
263 100 :M
f0_12 sf
-.054(Plaintext \(8 bytes\))A
gR
1 G
gS 210 85 260 329 rC
237 255 154 28 rF
0 G
237.5 255.5 153 27 rS
262 135 99 12 rC
263 144 :M
f0_12 sf
-.019(Encrypting Round 1)A
gR
gS 264 179 99 12 rC
265 188 :M
0 G
f0_12 sf
-.019(Encrypting Round 2)A
gR
gS 262 263 97 12 rC
263 272 :M
0 G
f0_12 sf
-.018(Encrypting Round r)A
gR
0 G
gS 210 85 260 329 rC
np 305 174 :M
300 160 :L
305 165 :L
310 160 :L
305 174 :L
eofill
-1 -1 306 166 1 1 305 156 @b
np 304 255 :M
299 241 :L
304 246 :L
309 241 :L
304 255 :L
eofill
-1 -1 305 247 1 1 304 239 @b
242 314 157 24 rC
243 323 :M
f0_12 sf
-.043(Mixed XOR/BYTE ADDITION)A
243 335 :M
-.035(     \(Output Transformation\))A
gR
gS 268 367 97 12 rC
269 376 :M
f0_12 sf
-.051(Ciphertext \(8 bytes\))A
gR
gS 210 85 260 329 rC
np 306 307 :M
301 293 :L
306 298 :L
311 293 :L
306 307 :L
eofill
-1 -1 307 299 1 1 306 283 @b
np 306 366 :M
301 352 :L
306 357 :L
311 352 :L
306 366 :L
eofill
-1 -1 307 358 1 1 306 345 @b
np 390 137 :M
402 129 :L
399 134 :L
404 138 :L
390 137 :L
eofill
-1 -1 400 135 1 1 419 129 @b
np 389 148 :M
403 146 :L
398 150 :L
401 155 :L
389 148 :L
eofill
398 151 -1 1 421 154 1 398 150 @a
np 392 185 :M
404 177 :L
401 182 :L
406 186 :L
392 185 :L
eofill
-1 -1 402 183 1 1 421 177 @b
np 391 196 :M
405 194 :L
400 198 :L
403 203 :L
391 196 :L
eofill
400 199 -1 1 423 202 1 400 198 @a
428 127 16 12 rC
429 136 :M
f0_12 sf
-.663(K1)A
gR
gS 430 152 16 12 rC
431 161 :M
f0_12 sf
-.663(K2)A
gR
gS 431 169 16 12 rC
432 178 :M
f0_12 sf
-.663(K3)A
gR
gS 433 194 16 12 rC
434 203 :M
f0_12 sf
-.663(K4)A
gR
gS 210 85 260 329 rC
np 388 264 :M
400 255 :L
397 261 :L
403 264 :L
388 264 :L
eofill
-1 -1 398 262 1 1 417 256 @b
np 389 275 :M
403 273 :L
398 276 :L
402 282 :L
389 275 :L
eofill
398 277 -1 1 421 281 1 398 276 @a
427 249 30 12 rC
428 258 :M
f0_12 sf
-.162(K2r-1)A
gR
gS 429 274 20 12 rC
430 283 :M
f0_12 sf
-.328(K2r)A
gR
gS 210 85 260 329 rC
np 403 327 :M
417 322 :L
412 327 :L
417 332 :L
403 327 :L
eofill
412 328 -1 1 429 327 1 412 327 @a
436 320 33 12 rC
437 329 :M
f0_12 sf
-.106(K2r+1)A
gR
gS 211 401 220 12 rC
212 410 :M
f0_12 sf
-.015(Fig. 1:  Encrypting Structure of SAFER K-64)A
gR
gS 210 85 260 329 rC
np 304 129 :M
299 115 :L
304 120 :L
309 115 :L
304 129 :L
eofill
-1 -1 305 121 1 1 304 105 @b
:a
0 <FFFFFFFFFFFFFFFF
><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>fg bk :b
[9 9 ] 0 :q
304 237 304 202 :r
[] 0 :q
304 202 :M
psb
pse
gR
gS 29 30 538 781 rC
120 441 :M
f0_12 sf
-.1(The )A
f1_12 sf
-.093(output transformation)A
f0_12 sf
-.097( of SAFER K-64 consists of the bit-by-bit XOR)A
85 459 :M
.022 .002(\("exclusive or" or modulo-2 sum\) of bytes 1, 4, 5 and 8 of the
last subkey, K2r+1, with)J
85 477 :M
-.09(the corresponding bytes of the output from the r-th round together
with the byte-by-byte)A
85 495 :M
-.019(byte addition \(modulo-256 addition\) of bytes 2, 3, 6 and 7 of the
last subkey, K2r+1, to)A
85 513 :M
-.06(the corresponding bytes of the output from the r-th round. [Higher
order bytes are)A
85 531 :M
-.063(considered to be those on the left, i.e., byte 1 is the most
significant byte--this convention)A
85 549 :M
-.069(is used throughout this paper.]  Hereafter, we refer to this
particular combination of two)A
85 567 :M
-.025(eight-byte words as the )A
f1_12 sf
-.028(Mixed XOR/Byte-Addition operation)A
f0_12 sf
(.)S
85 603 :M
-.05(          The detailed )A
f1_12 sf
-.062(encryption round structure)A
f0_12 sf
-.065( of SAFER K-64 is shown in Fig. 2.  The)A
85 621 :M
-.095(first step within the i)A
0 -3 rm
-.103(th)A
0 3 rm
-.112( round is the Mixed XOR/Byte-Addition of the round input  with)A
85 639 :M
-.101(the subkey K2i-1.  The eight bytes of the result are then passed
through a )A
f1_12 sf
-.114(nonlinear layer)A
85 657 :M
f0_12 sf
-.09(and individually subjected to one of two different "highly nonlinear"
transformations,)A
85 675 :M
-.276(namely:)A
85 693 :M
-.065(\(1\) the operation labelled "45)A
0 -3 rm
-.05(\(.\))A
0 3 rm
-.063(" in Fig. 2, which notation is to suggest that if the byte)A
85 711 :M
-.109(input is the integer j then the byte output is 45)A
0 -3 rm
-.081(j)A
0 3 rm
-.126( modulo 257 \()A
f1_12 sf
-.114(except that this output is)A
85 729 :M
-.086(taken to be 0 if the modular result is 256, which occurs for j = 128)A
f0_12 sf
-.094(\)  [The reasoning)A
85 747 :M
-.084(behind the use of this transformation is the following.  Because 257
is a prime, arithmetic)A
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Massey; page: 4 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
292 774 :M
f4_12 sf
(4)S
1 G
85 97 452 436 rC
89 99 406 42 rF
0 G
89.5 99.5 405 41 rS
225 108 130 12 rC
226 117 :M
f0_12 sf
-.015(ROUND INPUT \(8 Bytes\))A
gR
gS 108 126 361 12 rC
109 135 :M
f0_12 sf
(  1           2               3                 4               5         
     6              7               8 )S
gR
1 G
gS 85 97 452 436 rC
90 162 397 28 rF
0 G
90.5 162.5 396 27 rS
102 171 372 12 rC
103 180 :M
f0_12 sf
-.003(  xor           add           add           xor           xor        
  add           add           xor     )A
gR
0 G
gS 85 97 452 436 rC
np 115 164 :M
111 149 :L
115 149 :L
118 149 :L
115 164 :L
eofill
-1 -1 116 150 1 1 115 139 @b
np 163 164 :M
159 150 :L
163 150 :L
166 150 :L
163 164 :L
eofill
-1 -1 164 151 1 1 163 139 @b
np 214 164 :M
210 150 :L
214 150 :L
217 150 :L
214 164 :L
eofill
-1 -1 215 151 1 1 214 139 @b
np 266 165 :M
262 151 :L
266 151 :L
269 151 :L
266 165 :L
eofill
-1 -1 267 152 1 1 266 140 @b
np 315 165 :M
311 151 :L
315 151 :L
318 151 :L
315 165 :L
eofill
-1 -1 316 152 1 1 315 140 @b
np 364 164 :M
360 150 :L
364 150 :L
367 150 :L
364 164 :L
eofill
-1 -1 365 151 1 1 364 139 @b
np 412 163 :M
408 149 :L
412 149 :L
415 149 :L
412 163 :L
eofill
-1 -1 413 150 1 1 412 138 @b
np 464 164 :M
460 150 :L
464 150 :L
467 150 :L
464 164 :L
eofill
-1 -1 465 151 1 1 464 139 @b
1 G
94 212 36 31 rF
0 G
94.5 212.5 35 30 rS
101 223 13 12 rC
102 232 :M
f0_12 sf
(45)S
gR
gS 114 216 12 12 rC
115 225 :M
f0_12 sf
-.493(\(.\))A
gR
1 G
gS 85 97 452 436 rC
247 211 36 31 rF
0 G
247.5 211.5 35 30 rS
254 222 13 12 rC
255 231 :M
f0_12 sf
(45)S
gR
gS 267 215 12 12 rC
268 224 :M
0 G
f0_12 sf
-.493(\(.\))A
gR
gS 85 97 452 436 rC
299 211 36 31 rF
0 G
299.5 211.5 35 30 rS
306 222 13 12 rC
307 231 :M
f0_12 sf
(45)S
gR
gS 319 215 12 12 rC
320 224 :M
0 G
f0_12 sf
-.493(\(.\))A
gR
gS 85 97 452 436 rC
445 209 36 31 rF
0 G
445.5 209.5 35 30 rS
452 220 13 12 rC
453 229 :M
f0_12 sf
(45)S
gR
gS 465 213 12 12 rC
466 222 :M
0 G
f0_12 sf
-.493(\(.\))A
gR
gS 85 97 452 436 rC
142 211 36 31 rF
0 G
142.5 211.5 35 30 rS
151 217 17 12 rC
152 226 :M
f0_12 sf
-.167(log)A
gR
gS 165 225 11 12 rC
166 234 :M
0 G
f0_10 sf
(45)S
gR
gS 85 97 452 436 rC
194 211 36 31 rF
0 G
194.5 211.5 35 30 rS
203 217 17 12 rC
204 226 :M
f0_12 sf
-.167(log)A
gR
gS 217 225 11 12 rC
218 234 :M
0 G
f0_10 sf
(45)S
gR
gS 85 97 452 436 rC
345 210 36 31 rF
0 G
345.5 210.5 35 30 rS
354 216 17 12 rC
355 225 :M
f0_12 sf
-.167(log)A
gR
gS 368 224 11 12 rC
369 233 :M
0 G
f0_10 sf
(45)S
gR
gS 85 97 452 436 rC
396 210 36 31 rF
0 G
396.5 210.5 35 30 rS
405 216 17 12 rC
406 225 :M
f0_12 sf
-.167(log)A
gR
gS 419 224 11 12 rC
420 233 :M
0 G
f0_10 sf
(45)S
gR
0 G
gS 85 97 452 436 rC
np 115 213 :M
111 198 :L
115 198 :L
118 198 :L
115 213 :L
eofill
-1 -1 116 199 1 1 115 189 @b
np 162 212 :M
158 197 :L
162 197 :L
165 197 :L
162 212 :L
eofill
-1 -1 163 198 1 1 162 188 @b
np 214 212 :M
210 197 :L
214 197 :L
217 197 :L
214 212 :L
eofill
-1 -1 215 198 1 1 214 188 @b
np 266 214 :M
262 199 :L
266 199 :L
269 199 :L
266 214 :L
eofill
-1 -1 267 200 1 1 266 190 @b
np 317 213 :M
313 198 :L
317 198 :L
320 198 :L
317 213 :L
eofill
-1 -1 318 199 1 1 317 189 @b
np 364 213 :M
360 198 :L
364 198 :L
367 198 :L
364 213 :L
eofill
-1 -1 365 199 1 1 364 189 @b
np 414 211 :M
410 196 :L
414 196 :L
417 196 :L
414 211 :L
eofill
-1 -1 415 197 1 1 414 190 @b
np 463 210 :M
459 195 :L
463 195 :L
466 195 :L
463 210 :L
eofill
-1 -1 464 196 1 1 463 190 @b
np 485 175 :M
499 171 :L
499 175 :L
499 178 :L
485 175 :L
eofill
499 176 -1 1 504 175 1 499 175 @a
507 170 29 12 rC
508 179 :M
f0_12 sf
-.248(K2i-1)A
gR
1 G
gS 85 97 452 436 rC
88 264 397 28 rF
0 G
88.5 264.5 396 27 rS
101 274 369 12 rC
102 283 :M
f0_12 sf
-.003(  add          xor          xor           add          add           
 xor           xor           add     )A
gR
0 G
gS 85 97 452 436 rC
np 113 266 :M
110 252 :L
113 252 :L
117 252 :L
113 266 :L
eofill
-1 -1 114 253 1 1 113 241 @b
np 161 266 :M
158 252 :L
161 252 :L
165 252 :L
161 266 :L
eofill
-1 -1 162 253 1 1 161 242 @b
np 212 266 :M
209 252 :L
212 252 :L
216 252 :L
212 266 :L
eofill
-1 -1 213 253 1 1 212 242 @b
np 266 266 :M
263 252 :L
266 252 :L
270 252 :L
266 266 :L
eofill
-1 -1 267 253 1 1 266 243 @b
np 314 266 :M
310 252 :L
314 252 :L
317 252 :L
314 266 :L
eofill
313 244 -1 1 315 252 1 313 243 @a
np 362 266 :M
359 252 :L
362 252 :L
366 252 :L
362 266 :L
eofill
-1 -1 363 253 1 1 362 242 @b
np 410 266 :M
407 252 :L
410 252 :L
414 252 :L
410 266 :L
eofill
-1 -1 411 253 1 1 410 241 @b
np 462 267 :M
459 253 :L
462 253 :L
466 253 :L
462 267 :L
eofill
-1 -1 463 254 1 1 462 239 @b
np 483 277 :M
497 274 :L
497 277 :L
497 281 :L
483 277 :L
eofill
497 278 -1 1 502 277 1 497 277 @a
506 273 19 12 rC
507 282 :M
f0_12 sf
-.499(K2i)A
gR
gS 85 97 452 436 rC
np 112 319 :M
108 304 :L
112 304 :L
116 304 :L
112 319 :L
eofill
-1 -1 113 305 1 1 112 293 @b
np 158 319 :M
154 305 :L
158 305 :L
162 305 :L
158 319 :L
eofill
-1 -1 159 306 1 1 158 292 @b
np 209 317 :M
205 303 :L
209 303 :L
213 303 :L
209 317 :L
eofill
-1 -1 210 304 1 1 209 292 @b
np 264 319 :M
260 305 :L
264 305 :L
268 305 :L
264 319 :L
eofill
-1 -1 265 306 1 1 264 292 @b
np 314 319 :M
310 305 :L
314 305 :L
318 305 :L
314 319 :L
eofill
-1 -1 315 306 1 1 314 292 @b
np 361 317 :M
357 303 :L
361 303 :L
365 303 :L
361 317 :L
eofill
-1 -1 362 304 1 1 361 292 @b
np 409 318 :M
405 304 :L
409 304 :L
413 304 :L
409 318 :L
eofill
-1 -1 410 305 1 1 409 293 @b
np 461 316 :M
457 302 :L
461 302 :L
465 302 :L
461 316 :L
eofill
-1 -1 462 303 1 1 461 291 @b
1 G
102 316 68 20 rF
0 G
102.5 316.5 67 19 rS
121 320 29 12 rC
122 329 :M
f0_10 sf
-.054(2-PHT)A
gR
1 G
gS 85 97 452 436 rC
203 315 68 20 rF
0 G
203.5 315.5 67 19 rS
224 319 29 12 rC
225 328 :M
f0_10 sf
-.054(2-PHT)A
gR
gS 85 97 452 436 rC
306 313 68 20 rF
0 G
306.5 313.5 67 19 rS
325 317 29 12 rC
326 326 :M
f0_10 sf
-.054(2-PHT)A
gR
gS 85 97 452 436 rC
405 313 68 20 rF
0 G
405.5 313.5 67 19 rS
424 317 29 12 rC
425 326 :M
f0_10 sf
-.054(2-PHT)A
gR
gS 85 97 452 436 rC
102 364 68 20 rF
0 G
102.5 364.5 67 19 rS
120 367 29 12 rC
121 376 :M
f0_10 sf
-.054(2-PHT)A
gR
gS 85 97 452 436 rC
206 364 68 20 rF
0 G
206.5 364.5 67 19 rS
225 368 29 12 rC
226 377 :M
f0_10 sf
-.054(2-PHT)A
gR
gS 85 97 452 436 rC
310 362 68 20 rF
0 G
310.5 362.5 67 19 rS
329 366 29 12 rC
330 375 :M
f0_10 sf
-.054(2-PHT)A
gR
gS 85 97 452 436 rC
409 362 68 20 rF
0 G
409.5 362.5 67 19 rS
428 366 29 12 rC
429 375 :M
f0_10 sf
-.054(2-PHT)A
gR
gS 85 97 452 436 rC
105 410 68 20 rF
0 G
105.5 410.5 67 19 rS
124 414 29 12 rC
125 423 :M
f0_10 sf
-.054(2-PHT)A
gR
gS 85 97 452 436 rC
208 411 68 20 rF
0 G
208.5 411.5 67 19 rS
227 415 29 12 rC
228 424 :M
f0_10 sf
-.054(2-PHT)A
gR
gS 85 97 452 436 rC
314 409 68 20 rF
0 G
314.5 409.5 67 19 rS
333 413 29 12 rC
334 422 :M
f0_10 sf
-.054(2-PHT)A
gR
gS 85 97 452 436 rC
413 409 68 20 rF
0 G
413.5 409.5 67 19 rS
432 413 29 12 rC
433 422 :M
f0_10 sf
-.054(2-PHT)A
gR
0 G
gS 85 97 452 436 rC
np 112 364 :M
108 349 :L
112 349 :L
115 349 :L
112 364 :L
eofill
-1 -1 113 350 1 1 112 336 @b
np 112 412 :M
108 397 :L
112 397 :L
115 397 :L
112 412 :L
eofill
-1 -1 113 398 1 1 112 385 @b
np 159 365 :M
169 354 :L
171 357 :L
172 360 :L
159 365 :L
eofill
-1 -1 172 358 1 1 208 335 @b
np 164 411 :M
174 400 :L
175 403 :L
177 406 :L
164 411 :L
eofill
-1 -1 176 404 1 1 210 382 @b
np 215 364 :M
227 356 :L
228 359 :L
229 363 :L
215 364 :L
eofill
-1 -1 229 360 1 1 315 333 @b
np 222 412 :M
234 404 :L
235 407 :L
236 411 :L
222 412 :L
eofill
-1 -1 236 408 1 1 322 382 @b
np 266 364 :M
279 357 :L
279 361 :L
280 364 :L
266 364 :L
eofill
-1 -1 280 362 1 1 413 333 @b
np 267 410 :M
280 404 :L
281 407 :L
282 410 :L
267 410 :L
eofill
-1 -1 282 408 1 1 415 381 @b
np 324 362 :M
309 363 :L
310 359 :L
310 356 :L
324 362 :L
eofill
158 337 -1 1 311 359 1 158 336 @a
np 328 409 :M
313 410 :L
314 407 :L
314 403 :L
328 409 :L
eofill
162 384 -1 1 315 407 1 162 383 @a
np 368 363 :M
353 362 :L
354 359 :L
355 355 :L
368 363 :L
eofill
264 336 -1 1 355 359 1 264 335 @a
np 371 409 :M
356 408 :L
357 405 :L
358 402 :L
371 409 :L
eofill
268 384 -1 1 358 405 1 268 383 @a
np 423 363 :M
408 359 :L
410 356 :L
411 353 :L
423 363 :L
eofill
365 335 -1 1 411 356 1 365 334 @a
np 427 408 :M
412 405 :L
414 402 :L
415 399 :L
427 408 :L
eofill
371 381 -1 1 415 402 1 371 380 @a
np 463 364 :M
459 349 :L
463 349 :L
466 349 :L
463 364 :L
eofill
-1 -1 464 350 1 1 463 333 @b
np 465 411 :M
461 397 :L
465 397 :L
468 397 :L
465 411 :L
eofill
-1 -1 466 398 1 1 465 380 @b
1 G
87 452 411 43 rF
0 G
87.5 452.5 410 42 rS
208 473 142 12 rC
209 482 :M
f0_12 sf
-.014(ROUND OUTPUT \(8 Bytes\))A
gR
gS 109 457 364 12 rC
110 466 :M
f0_12 sf
(  1              2               3               4               5        
      6              7               8 )S
gR
gS 85 97 452 436 rC
np 115 455 :M
111 440 :L
115 440 :L
119 440 :L
115 455 :L
eofill
-1 -1 116 441 1 1 115 430 @b
np 162 454 :M
158 440 :L
162 440 :L
166 440 :L
162 454 :L
eofill
-1 -1 163 441 1 1 162 429 @b
np 215 455 :M
211 441 :L
215 441 :L
219 441 :L
215 455 :L
eofill
-1 -1 216 442 1 1 215 430 @b
np 267 454 :M
263 440 :L
267 440 :L
271 440 :L
267 454 :L
eofill
-1 -1 268 441 1 1 267 429 @b
np 319 453 :M
315 439 :L
319 439 :L
323 439 :L
319 453 :L
eofill
-1 -1 320 440 1 1 319 427 @b
np 369 453 :M
365 439 :L
369 439 :L
373 439 :L
369 453 :L
eofill
-1 -1 370 440 1 1 369 427 @b
np 423 453 :M
419 439 :L
423 439 :L
427 439 :L
423 453 :L
eofill
-1 -1 424 440 1 1 423 428 @b
np 466 453 :M
462 439 :L
466 439 :L
470 439 :L
466 453 :L
eofill
-1 -1 467 440 1 1 466 428 @b
166 520 246 12 rC
167 529 :M
f0_12 sf
-.013(Fig. 2: Encryption round structure of SAFER K-64)A
gR
gS 29 30 538 781 rC
85 566 :M
f0_12 sf
-.117(modulo 257 is the arithmetic of the finite field GF\(257\).  The
element 45 is a primitive)A
85 584 :M
-.057(element of this field, i.e., its first 256 powers generate all 256
non-zero field elements.)A
85 602 :M
-.096(Thus the mapping "45)A
0 -3 rm
-.066(\(.\))A
0 3 rm
-.087(" is an invertible mapping from one byte to one byte that is very)A
85 620 :M
-.108(nonlinear with respect to the arithmetic of GF\(257\) as well as with
respect to the vector)A
85 638 :M
-.062(space of 8-tuples over the binary field GF\(2\) whose addition is
bit-by-bit XOR.])A
85 654 :M
-.076(and \(2\) the operation labelled "log)A
0 3 rm
-.097(45)A
0 -3 rm
-.074(" in Fig. 2, which notation is to suggest that if the)A
85 672 :M
-.119(byte is the integer j then the byte output is log)A
0 3 rm
-.159(45)A
0 -3 rm
-.097(\(j\) \()A
f1_12 sf
-.124(except that this output is taken to be)A
85 692 :M
-.043(128 if the input is j = 0)A
f0_12 sf
-.047(\), i.e., the power to which one must raise 45 to obtain j modulo)A
85 710 :M
-.087(257.  [The nonlinear features of this mapping are similar to those
described for)A
85 728 :M
-.087(exponentiation.])A
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Massey; page: 5 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
292 774 :M
f4_12 sf
(5)S
85 94 :M
f0_12 sf
-.087(In the appended programs for implementing the SAFER K-64 cipher,
these two nonlinear)A
85 112 :M
-.06(operations are realized with two look-up tables of 256 bytes each,
i.e., simple byte-in)A
85 130 :M
-.057(byte-out look-up tables.)A
120 166 :M
-.102(The output of the eight nonlinear transformations is then combined
with subkey)A
85 184 :M
-.101(K2i in an operation that consists of the byte-by-byte byte addition
\(modulo-256 addition\))A
85 202 :M
-.034(of bytes 1, 4, 5 and 8 of the subkey K2i to the corresponding bytes
of the output from)A
85 220 :M
-.096(the nonlinear transformations together with the bit-by-bit XOR
\(modulo-2 sum\) of bytes)A
85 238 :M
-.04(2, 3, 6 and 7 of the subkey K2i to the corresponding bytes of the
output from the)A
85 256 :M
-.085(nonlinear transformations.  Hereafter, we refer to this particular
combination of two)A
85 274 :M
-.058(eight-byte words as the )A
f1_12 sf
-.065(Mixed Byte-Addition/XOR operation)A
f0_12 sf
-.055(.  [It is important to note the)A
85 292 :M
-.135(distinction between this Mixed XOR/Byte-Addition operation and the
previously)A
85 310 :M
-.127(described Mixed Byte-Addition/XOR operation.])A
120 346 :M
-.119(The output of the Mixed Byte-Addition/XOR operation then passes
through a)A
85 364 :M
f1_12 sf
-.111(three-level "linear layer")A
f0_12 sf
-.114( of boxes that are labelled "2-PHT" in Fig. 2.  This notation)A
85 380 :M
-.043(indicates a 2-point PHT.  If the two input bytes to a 2-PHT are \(a)A
0 3 rm
-.055(1)A
0 -3 rm
-.035(, a)A
0 3 rm
-.055(2)A
0 -3 rm
-.044(\), where a)A
0 3 rm
-.055(1)A
0 -3 rm
-.044( is the)A
85 398 :M
-.062(more significant byte, then the two output bytes are \(b)A
0 3 rm
-.079(1)A
0 -3 rm
-.053(, b)A
0 3 rm
-.079(2)A
0 -3 rm
-.08(\) where)A
262 416 :M
(b)S
0 3 rm
(1)S
0 -3 rm
-.012(  = 2a)A
0 3 rm
(1)S
0 -3 rm
( + a)S
0 3 rm
(2)S
0 -3 rm
494 436 :M
(\(1\))S
263 452 :M
(b)S
0 3 rm
(2)S
0 -3 rm
-.011(  =  a)A
0 3 rm
(1)S
0 -3 rm
-.013( + a)A
0 3 rm
(2)S
0 -3 rm
85 490 :M
-.093(and where the arithmetic is normal byte arithmetic, i.e., arithmetic
modulo 256.  Between)A
85 508 :M
-.135(levels of the linear layer, the decimation-by-2 permutation [familiar
from the Cooley-)A
85 526 :M
-.078(Tukey FFT and the ordinary discrete Hadamard Transform] is
applied--as will be seen,)A
85 544 :M
-.082(this is what creates diffusion in the SAFER K-64 cipher.  The output
of this linear layer)A
85 562 :M
-.059(constitutes the round output.)A
85 616 :M
f2_12 sf
2.942 .294(3. Decryption for SAFER K-64)J
120 652 :M
f0_12 sf
-.039(The decrypting structure of SAFER K-64 is shown in Fig. 3.  The
deciphering)A
85 670 :M
-.124(algorithm consists of an )A
f1_12 sf
-.131(input transformation)A
f0_12 sf
-.121( that is applied to the ciphertext block,)A
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Massey; page: 6 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
292 774 :M
f4_12 sf
(6)S
1 G
190 85 267 329 rC
222 364 154 19 rF
0 G
222.5 364.5 153 18 rS
1 G
218 229 154 28 rF
0 G
218.5 229.5 153 27 rS
1 G
218 183 154 28 rF
0 G
218.5 183.5 153 27 rS
1 G
200 125 193 37 rF
0 G
200.5 125.5 192 36 rS
1 G
214 87 155 20 rF
0 G
214.5 87.5 154 19 rS
255 368 89 12 rC
256 377 :M
f0_12 sf
-.054(Plaintext \(8 bytes\))A
gR
1 G
gS 190 85 267 329 rC
218 310 154 28 rF
0 G
218.5 310.5 153 27 rS
243 190 99 12 rC
244 199 :M
f0_12 sf
-.058(Decrypting Round 1)A
gR
gS 245 237 99 12 rC
246 246 :M
0 G
f0_12 sf
-.058(Decrypting Round 2)A
gR
gS 243 318 97 12 rC
244 327 :M
0 G
f0_12 sf
-.057(Decrypting Round r)A
gR
0 G
gS 190 85 267 329 rC
np 286 229 :M
281 215 :L
286 220 :L
291 215 :L
286 229 :L
eofill
-1 -1 287 221 1 1 286 211 @b
np 285 310 :M
280 296 :L
285 301 :L
290 296 :L
285 310 :L
eofill
-1 -1 286 302 1 1 285 294 @b
204 131 191 24 rC
205 140 :M
f0_12 sf
-.012(Mixed XOR/BYTE SUBTRACTION)A
205 152 :M
-.028(             \(Input Transformation\))A
gR
gS 244 91 97 12 rC
245 100 :M
f0_12 sf
-.051(Ciphertext \(8 bytes\))A
gR
gS 190 85 267 329 rC
np 287 362 :M
282 348 :L
287 353 :L
292 348 :L
287 362 :L
eofill
-1 -1 288 354 1 1 287 338 @b
np 284 127 :M
279 113 :L
284 118 :L
289 113 :L
284 127 :L
eofill
-1 -1 285 119 1 1 284 106 @b
np 371 192 :M
383 184 :L
380 189 :L
385 193 :L
371 192 :L
eofill
-1 -1 381 190 1 1 400 184 @b
np 370 203 :M
384 201 :L
379 205 :L
382 210 :L
370 203 :L
eofill
379 206 -1 1 402 209 1 379 205 @a
np 373 240 :M
385 232 :L
382 237 :L
387 241 :L
373 240 :L
eofill
-1 -1 383 238 1 1 402 232 @b
np 372 251 :M
386 249 :L
381 253 :L
384 258 :L
372 251 :L
eofill
381 254 -1 1 404 257 1 381 253 @a
409 182 20 12 rC
410 191 :M
f0_12 sf
-.328(K2r)A
gR
gS 411 207 30 12 rC
412 216 :M
f0_12 sf
-.162(K2r-1)A
gR
gS 412 224 30 12 rC
413 233 :M
f0_12 sf
-.162(K2r-2)A
gR
gS 414 249 30 12 rC
415 258 :M
f0_12 sf
-.162(K2r-3)A
gR
gS 190 85 267 329 rC
np 369 319 :M
381 310 :L
378 316 :L
384 319 :L
369 319 :L
eofill
-1 -1 379 317 1 1 398 311 @b
np 370 330 :M
384 328 :L
379 331 :L
383 337 :L
370 330 :L
eofill
379 332 -1 1 402 336 1 379 331 @a
408 304 16 12 rC
409 313 :M
f0_12 sf
-.663(K2)A
gR
gS 410 329 16 12 rC
411 338 :M
f0_12 sf
-.663(K1)A
gR
gS 190 85 267 329 rC
np 392 144 :M
406 139 :L
401 144 :L
406 149 :L
392 144 :L
eofill
401 145 -1 1 418 144 1 401 144 @a
423 139 33 12 rC
424 148 :M
f0_12 sf
-.106(K2r+1)A
gR
gS 191 401 221 12 rC
192 410 :M
f0_12 sf
-.007(Fig. 3:  Decrypting Structure of SAFER K-64)A
gR
gS 190 85 267 329 rC
np 285 184 :M
280 170 :L
285 175 :L
290 170 :L
285 184 :L
eofill
-1 -1 286 176 1 1 285 160 @b
:a
0 <FFFFFFFFFFFFFFFF
><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>fg bk :b
[9 9 ] 0 :q
285 292 285 257 :r
[] 0 :q
285 257 :M
psb
pse
gR
gS 29 30 538 781 rC
85 447 :M
f0_12 sf
-.067(followed by r rounds of identical transformations.  The input
transformation consists of)A
85 465 :M
-.097(the Mixed XOR/Byte-Subtraction of subkey K2r+1 from the ciphertext
block.  A)A
85 483 :M
-.101(characterizing feature of SAFER K-64 is that decrypting rounds differ
from encrypting)A
85 501 :M
-.1(rounds so that an encrypter cannot be converted to a decrypter by
simply reversing the)A
85 519 :M
-.025(key schedule.)A
120 555 :M
-.065(The detailed )A
f1_12 sf
-.067(decryption round structure)A
f0_12 sf
-.07( of SAFER K-64 is shown in Fig. 4.  The)A
85 573 :M
-.061(i)A
0 -3 rm
-.085(th)A
0 3 rm
-.089( encryption round begins by passing the round input through the )A
f1_12 sf
-.09(three-level inverse)A
85 591 :M
-.094(linear layer)A
f0_12 sf
-.096(.  It is easy to check from equations \(1\) that the Inverse PHT
\(IPHT\) is given)A
85 609 :M
(by)S
263 625 :M
(a)S
0 3 rm
(1)S
0 -3 rm
(  =  b)S
0 3 rm
(1)S
0 -3 rm
( -  b)S
0 3 rm
(2)S
0 -3 rm
494 645 :M
(\(2\))S
257 661 :M
.079(a)A
0 3 rm
.089(2)A
0 -3 rm
.107 .011(  = -b)J
0 3 rm
.089(1)A
0 -3 rm
.148 .015( + 2b)J
0 3 rm
.089(2)A
0 -3 rm
(.)S
85 699 :M
-.064(This IPHT is just as simple to compute as the direct PHT.  The
fan-out-by-two)A
85 717 :M
-.129(permutation between levels of this inverse linear layer is the
inverse of the decimate-by-)A
85 735 :M
-.093(two permutation used in the linear layer of an encryption round.)A
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Massey; page: 7 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
292 774 :M
f4_12 sf
(7)S
1 G
85 97 471 444 rC
90 99 406 42 rF
0 G
90.5 99.5 405 41 rS
226 108 130 12 rC
227 117 :M
f0_12 sf
-.015(ROUND INPUT \(8 Bytes\))A
gR
gS 109 126 358 12 rC
110 135 :M
f0_12 sf
(  1           2                 3               4               5         
     6             7               8 )S
gR
1 G
gS 85 97 471 444 rC
90 409 397 28 rF
0 G
90.5 409.5 396 27 rS
102 418 369 12 rC
103 427 :M
f0_12 sf
-.006(  xor           sub           sub           xor           xor        
  sub           sub           xor     )A
gR
0 G
gS 85 97 471 444 rC
np 117 167 :M
113 152 :L
117 152 :L
120 152 :L
117 167 :L
eofill
-1 -1 118 153 1 1 117 140 @b
np 156 166 :M
152 152 :L
156 152 :L
159 152 :L
156 166 :L
eofill
-1 -1 157 153 1 1 156 141 @b
np 215 166 :M
211 152 :L
215 152 :L
218 152 :L
215 166 :L
eofill
-1 -1 216 153 1 1 215 139 @b
np 267 165 :M
263 151 :L
267 151 :L
270 151 :L
267 165 :L
eofill
-1 -1 268 152 1 1 267 140 @b
np 316 165 :M
312 151 :L
316 151 :L
319 151 :L
316 165 :L
eofill
-1 -1 317 152 1 1 316 140 @b
np 365 164 :M
361 150 :L
365 150 :L
368 150 :L
365 164 :L
eofill
-1 -1 366 151 1 1 365 139 @b
np 413 164 :M
409 150 :L
413 150 :L
416 150 :L
413 164 :L
eofill
-1 -1 414 151 1 1 413 138 @b
np 465 164 :M
461 150 :L
465 150 :L
468 150 :L
465 164 :L
eofill
-1 -1 466 151 1 1 465 139 @b
1 G
395 354 36 31 rF
0 G
395.5 354.5 35 30 rS
402 365 13 12 rC
403 374 :M
f0_12 sf
(45)S
gR
gS 415 358 12 12 rC
416 367 :M
f0_12 sf
-.493(\(.\))A
gR
1 G
gS 85 97 471 444 rC
146 357 36 31 rF
0 G
146.5 357.5 35 30 rS
153 368 13 12 rC
154 377 :M
f0_12 sf
(45)S
gR
gS 166 361 12 12 rC
167 370 :M
0 G
f0_12 sf
-.493(\(.\))A
gR
gS 85 97 471 444 rC
198 357 36 31 rF
0 G
198.5 357.5 35 30 rS
205 368 13 12 rC
206 377 :M
f0_12 sf
(45)S
gR
gS 218 361 12 12 rC
219 370 :M
0 G
f0_12 sf
-.493(\(.\))A
gR
gS 85 97 471 444 rC
344 355 36 31 rF
0 G
344.5 355.5 35 30 rS
351 366 13 12 rC
352 375 :M
f0_12 sf
(45)S
gR
gS 364 359 12 12 rC
365 368 :M
0 G
f0_12 sf
-.493(\(.\))A
gR
gS 85 97 471 444 rC
443 353 36 31 rF
0 G
443.5 353.5 35 30 rS
452 359 17 12 rC
453 368 :M
f0_12 sf
-.167(log)A
gR
gS 466 367 11 12 rC
467 376 :M
0 G
f0_10 sf
(45)S
gR
gS 85 97 471 444 rC
93 357 36 31 rF
0 G
93.5 357.5 35 30 rS
102 363 17 12 rC
103 372 :M
f0_12 sf
-.167(log)A
gR
gS 116 371 11 12 rC
117 380 :M
0 G
f0_10 sf
(45)S
gR
gS 85 97 471 444 rC
244 356 36 31 rF
0 G
244.5 356.5 35 30 rS
253 362 17 12 rC
254 371 :M
f0_12 sf
-.167(log)A
gR
gS 267 370 11 12 rC
268 379 :M
0 G
f0_10 sf
(45)S
gR
gS 85 97 471 444 rC
295 356 36 31 rF
0 G
295.5 356.5 35 30 rS
304 362 17 12 rC
305 371 :M
f0_12 sf
-.167(log)A
gR
gS 318 370 11 12 rC
319 379 :M
0 G
f0_10 sf
(45)S
gR
0 G
gS 85 97 471 444 rC
np 485 422 :M
499 418 :L
499 422 :L
499 425 :L
485 422 :L
eofill
499 423 -1 1 504 422 1 499 422 @a
509 416 46 12 rC
510 425 :M
f0_12 sf
-.107(K2r+1-2i)A
gR
1 G
gS 85 97 471 444 rC
90 303 397 28 rF
0 G
90.5 303.5 396 27 rS
103 314 372 12 rC
104 323 :M
f0_12 sf
-.006(  sub          xor          xor           sub              sub       
   xor           xor           sub )A
gR
0 G
gS 85 97 471 444 rC
np 414 409 :M
411 395 :L
414 395 :L
418 395 :L
414 409 :L
eofill
-1 -1 415 396 1 1 414 383 @b
np 462 410 :M
459 396 :L
462 396 :L
466 396 :L
462 410 :L
eofill
-1 -1 463 397 1 1 462 384 @b
np 111 412 :M
108 398 :L
111 398 :L
115 398 :L
111 412 :L
eofill
-1 -1 112 399 1 1 111 388 @b
np 165 412 :M
162 398 :L
165 398 :L
169 398 :L
165 412 :L
eofill
-1 -1 166 399 1 1 165 386 @b
np 215 412 :M
211 398 :L
215 398 :L
218 398 :L
215 412 :L
eofill
214 388 -1 1 216 398 1 214 387 @a
np 261 412 :M
258 398 :L
261 398 :L
265 398 :L
261 412 :L
eofill
-1 -1 262 399 1 1 261 386 @b
np 313 413 :M
310 399 :L
313 399 :L
317 399 :L
313 413 :L
eofill
-1 -1 314 400 1 1 313 388 @b
np 361 413 :M
358 399 :L
361 399 :L
365 399 :L
361 413 :L
eofill
-1 -1 362 400 1 1 361 385 @b
np 485 317 :M
499 314 :L
499 317 :L
499 321 :L
485 317 :L
eofill
499 318 -1 1 504 317 1 499 317 @a
507 313 46 12 rC
508 322 :M
f0_12 sf
-.107(K2r+2-2i)A
gR
gS 85 97 471 444 rC
np 114 359 :M
110 344 :L
114 344 :L
118 344 :L
114 359 :L
eofill
-1 -1 115 345 1 1 114 333 @b
np 160 359 :M
156 345 :L
160 345 :L
164 345 :L
160 359 :L
eofill
-1 -1 161 346 1 1 160 332 @b
np 211 357 :M
207 343 :L
211 343 :L
215 343 :L
211 357 :L
eofill
-1 -1 212 344 1 1 211 332 @b
np 262 360 :M
258 346 :L
262 346 :L
266 346 :L
262 360 :L
eofill
-1 -1 263 347 1 1 262 333 @b
np 316 359 :M
312 345 :L
316 345 :L
320 345 :L
316 359 :L
eofill
-1 -1 317 346 1 1 316 332 @b
np 363 357 :M
359 343 :L
363 343 :L
367 343 :L
363 357 :L
eofill
-1 -1 364 344 1 1 363 332 @b
np 411 358 :M
407 344 :L
411 344 :L
415 344 :L
411 358 :L
eofill
-1 -1 412 345 1 1 411 333 @b
np 463 356 :M
459 342 :L
463 342 :L
467 342 :L
463 356 :L
eofill
-1 -1 464 343 1 1 463 331 @b
1 G
99 165 68 20 rF
0 G
99.5 165.5 67 19 rS
116 169 32 12 rC
117 178 :M
f0_10 sf
-.108(2-IPHT)A
gR
1 G
gS 85 97 471 444 rC
200 164 68 20 rF
0 G
200.5 164.5 67 19 rS
219 169 32 12 rC
220 178 :M
f0_10 sf
-.108(2-IPHT)A
gR
gS 85 97 471 444 rC
303 162 68 20 rF
0 G
303.5 162.5 67 19 rS
323 167 32 12 rC
324 176 :M
f0_10 sf
-.108(2-IPHT)A
gR
gS 85 97 471 444 rC
402 162 68 20 rF
0 G
402.5 162.5 67 19 rS
422 167 32 12 rC
423 176 :M
f0_10 sf
-.108(2-IPHT)A
gR
gS 85 97 471 444 rC
99 213 68 20 rF
0 G
99.5 213.5 67 19 rS
118 217 32 12 rC
119 226 :M
f0_10 sf
-.108(2-IPHT)A
gR
gS 85 97 471 444 rC
203 213 68 20 rF
0 G
203.5 213.5 67 19 rS
222 217 32 12 rC
223 226 :M
f0_10 sf
-.108(2-IPHT)A
gR
gS 85 97 471 444 rC
307 211 68 20 rF
0 G
307.5 211.5 67 19 rS
326 215 32 12 rC
327 224 :M
f0_10 sf
-.108(2-IPHT)A
gR
gS 85 97 471 444 rC
406 211 68 20 rF
0 G
406.5 211.5 67 19 rS
425 215 32 12 rC
426 224 :M
f0_10 sf
-.108(2-IPHT)A
gR
gS 85 97 471 444 rC
99 259 68 20 rF
0 G
99.5 259.5 67 19 rS
119 264 32 12 rC
120 273 :M
f0_10 sf
-.108(2-IPHT)A
gR
gS 85 97 471 444 rC
205 260 68 20 rF
0 G
205.5 260.5 67 19 rS
224 264 32 12 rC
225 273 :M
f0_10 sf
-.108(2-IPHT)A
gR
gS 85 97 471 444 rC
311 258 68 20 rF
0 G
311.5 258.5 67 19 rS
329 262 32 12 rC
330 271 :M
f0_10 sf
-.108(2-IPHT)A
gR
gS 85 97 471 444 rC
410 258 68 20 rF
0 G
410.5 258.5 67 19 rS
429 262 32 12 rC
430 271 :M
f0_10 sf
-.108(2-IPHT)A
gR
0 G
gS 85 97 471 444 rC
np 109 213 :M
105 198 :L
109 198 :L
112 198 :L
109 213 :L
eofill
-1 -1 110 199 1 1 109 185 @b
np 109 261 :M
105 246 :L
109 246 :L
112 246 :L
109 261 :L
eofill
-1 -1 110 247 1 1 109 234 @b
np 317 211 :M
302 210 :L
303 207 :L
304 204 :L
317 211 :L
eofill
206 184 -1 1 304 207 1 206 183 @a
np 322 257 :M
307 257 :L
308 254 :L
309 250 :L
322 257 :L
eofill
207 232 -1 1 309 254 1 207 231 @a
np 155 260 :M
168 254 :L
168 257 :L
169 261 :L
155 260 :L
eofill
-1 -1 169 258 1 1 319 231 @b
np 362 212 :M
372 201 :L
373 204 :L
375 207 :L
362 212 :L
eofill
-1 -1 374 205 1 1 410 182 @b
np 365 257 :M
375 247 :L
377 250 :L
379 253 :L
365 257 :L
eofill
-1 -1 378 251 1 1 412 230 @b
np 213 213 :M
198 210 :L
200 206 :L
201 203 :L
213 213 :L
eofill
155 186 -1 1 201 206 1 155 185 @a
np 218 260 :M
203 257 :L
205 254 :L
206 251 :L
218 260 :L
eofill
159 233 -1 1 206 254 1 159 232 @a
np 417 211 :M
402 212 :L
403 208 :L
403 205 :L
417 211 :L
eofill
261 185 -1 1 404 208 1 261 184 @a
np 426 258 :M
411 259 :L
412 255 :L
412 252 :L
426 258 :L
eofill
265 233 -1 1 413 255 1 265 232 @a
np 261 213 :M
273 205 :L
274 208 :L
275 212 :L
261 213 :L
eofill
-1 -1 275 209 1 1 362 183 @b
np 260 258 :M
272 251 :L
273 254 :L
274 258 :L
260 258 :L
eofill
-1 -1 274 255 1 1 368 229 @b
np 460 213 :M
456 198 :L
460 198 :L
463 198 :L
460 213 :L
eofill
-1 -1 461 199 1 1 460 182 @b
np 462 260 :M
458 246 :L
462 246 :L
465 246 :L
462 260 :L
eofill
-1 -1 463 247 1 1 462 229 @b
1 G
87 460 411 43 rF
0 G
87.5 460.5 410 42 rS
208 481 142 12 rC
209 490 :M
f0_12 sf
-.014(ROUND OUTPUT \(8 Bytes\))A
gR
gS 109 465 364 12 rC
110 474 :M
f0_12 sf
(  1              2              3               4               5         
     6               7               8 )S
gR
gS 85 97 471 444 rC
np 115 463 :M
111 448 :L
115 448 :L
119 448 :L
115 463 :L
eofill
-1 -1 116 449 1 1 115 438 @b
np 162 462 :M
158 448 :L
162 448 :L
166 448 :L
162 462 :L
eofill
-1 -1 163 449 1 1 162 437 @b
np 215 463 :M
211 449 :L
215 449 :L
219 449 :L
215 463 :L
eofill
-1 -1 216 450 1 1 215 436 @b
np 265 462 :M
261 448 :L
265 448 :L
269 448 :L
265 462 :L
eofill
-1 -1 266 449 1 1 265 437 @b
np 314 462 :M
310 448 :L
314 448 :L
318 448 :L
314 462 :L
eofill
-1 -1 315 449 1 1 314 436 @b
np 364 461 :M
360 447 :L
364 447 :L
368 447 :L
364 461 :L
eofill
-1 -1 365 448 1 1 364 435 @b
np 417 462 :M
413 448 :L
417 448 :L
421 448 :L
417 462 :L
eofill
-1 -1 418 449 1 1 417 437 @b
np 465 463 :M
461 449 :L
465 449 :L
469 449 :L
465 463 :L
eofill
-1 -1 466 450 1 1 465 438 @b
166 528 247 12 rC
167 537 :M
f0_12 sf
-.006(Fig. 4: Decryption round structure of SAFER K-64)A
gR
gS 85 97 471 444 rC
np 112 306 :M
108 292 :L
112 292 :L
116 292 :L
112 306 :L
eofill
-1 -1 113 293 1 1 112 280 @b
np 158 307 :M
154 292 :L
158 292 :L
162 292 :L
158 307 :L
eofill
-1 -1 159 293 1 1 158 280 @b
np 209 306 :M
205 291 :L
209 291 :L
213 291 :L
209 306 :L
eofill
-1 -1 210 292 1 1 209 280 @b
np 264 307 :M
260 292 :L
264 292 :L
268 292 :L
264 307 :L
eofill
-1 -1 265 293 1 1 264 280 @b
np 318 305 :M
314 290 :L
318 290 :L
322 290 :L
318 305 :L
eofill
-1 -1 319 291 1 1 318 278 @b
np 366 306 :M
362 292 :L
366 291 :L
369 291 :L
366 306 :L
eofill
365 277 -1 1 367 291 1 365 276 @a
np 419 306 :M
415 291 :L
419 291 :L
423 291 :L
419 306 :L
eofill
-1 -1 420 292 1 1 419 278 @b
np 461 306 :M
457 291 :L
461 291 :L
465 291 :L
461 306 :L
eofill
-1 -1 462 292 1 1 461 279 @b
gR
gS 29 30 538 781 rC
120 574 :M
f0_12 sf
-.067(The next step within the i)A
0 -3 rm
-.066(th)A
0 3 rm
-.067( decryption round is the )A
f1_12 sf
-.08(Mixed Byte-Subtraction/XOR)A
85 592 :M
f0_12 sf
-.064(of the output of the inverse linear layer with the subkey K2r+2-2i,
which consists of the)A
85 610 :M
-.055(byte-by-byte byte subtraction \(modulo-256 subtraction\) of bytes 1,
4, 5 and 8 of the)A
85 628 :M
-.053(subkey K2r+2-2i from the corresponding bytes of the output from the
previous round)A
85 646 :M
-.047(together with the bit-by-bit XOR \(modulo-2 sum\) of bytes 2, 3, 6
and 7 of the subkey)A
85 664 :M
-.044(K2r+2-2i with the corresponding bytes of the output from the previous
round.)A
120 700 :M
-.083(In the next step of the decryption round, the eight bytes from the
previous step are)A
85 718 :M
-.101(passed through the ")A
f1_12 sf
-.1(inverse nonlinear layer)A
f0_12 sf
-.099(", which differs from the "nonlinear layer" in)A
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(Massey; page: 8 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
292 774 :M
f4_12 sf
(8)S
85 94 :M
f0_12 sf
-.103(the encryption round by interchanging of the locations of the four
exponentiating boxes)A
85 112 :M
-.074(and the four logarithm-taking boxes.)A
120 148 :M
-.065(The last step within the i)A
0 -3 rm
-.067(th)A
0 3 rm
-.067( decryption round is the )A
f1_12 sf
-.081(Mixed XOR/Byte-Subtraction)A
85 166 :M
f0_12 sf
-.045(of the round input  with the subkey K2r+1-2i, which consists of the
bit-by-bit XOR)A
85 184 :M
-.016(\(modulo-2 sum\) of bytes 1, 4, 5 and 8 of the subkey K2r+1-2i with
the corresponding)A
85 202 :M
-.092(bytes of the output from the previous round together with the
byte-by-byte byte)A
85 220 :M
-.031(subtraction \(modulo-256 subtraction\) of bytes 2, 3, 6 and 7 of the
subkey K2r+1-2i from)A
85 238 :M
-.053(the corresponding bytes of the output from the previous round.)A
85 292 :M
f2_12 sf
2.518 .252(4. How SAFER K-64 Works and Why)J
120 328 :M
f0_12 sf
-.096(To see that the SAFER K-64 cipher correctly decrypts, we first note
that the)A
85 346 :M
-.085(Mixed XOR/Byte-Subtraction of K2r+1 in the Input Transformation for
decryption \(cf.)A
85 364 :M
-.085(Fig. 3\) undoes the Mixed XOR/Byte-Additon of K2r+1 in the Output
Transformation for)A
85 382 :M
-.05(encryption \(cf. Fig. 1\).  Then the inverse linear layer of the first
decryption round \(cf.)A
85 400 :M
-.096(Fig. 4\) undoes the transformation performed by the linear layer in
the last encryption)A
85 418 :M
-.041(round \(cf. Fig. 2\).  Next, the Mixed Byte-Subtraction/XOR of K2r in
the first decryption)A
85 436 :M
-.072(round \(cf. Fig. 4\) undoes the Mixed Byte-Addition/XOR of K2r in the
last encryption)A
85 454 :M
-.038(round \(cf Fig. 2\).  Then the inverse nonlinear layer in the first
decryption round \(cf. Fig.)A
85 472 :M
-.11(4\) undoes the transformation performed by the nonlinear layer in the
last encryption)A
85 490 :M
-.036(round \(cf. Fig. 2\).  Finally, the Mixed XOR/Byte-Subtraction of
K2r-1 in the first)A
85 508 :M
-.07(decryption round \(cf. Fig. 4\) undoes the Mixed XOR/Byte-Addition of K2r-1 in the last)A
85 526 :M
-.016(encryption round \(cf. Fig. 2\).  In the same way, decryption round i
undoes the)A
85 544 :M
.046 .005(transformation performed by encryption round r + 1 - i for i = 2,
3, ... , r so that)J
85 562 :M
-.12(decryption indeed recovers the original plaintext.)A
120 598 :M
-.032(SAFER K-64 was designed in accordance with Shannon's principles of)A
85 616 :M
-.064(confusion and diffusion for obtaining security in secret-key ciphers
[1].  When a round)A
85 634 :M
-.094(subkey is not all-zero in SAFER K-64 encryption, its combination by
Mixed XOR/Byte)A
85 652 :M
-.135(Addition \(or Mixed Byte-Addition/XOR\) with the signal within the
round acts like a)A
85 670 :M
-.113(nonlinear combination with respect to the subsequent transformations
in the nonlinear)A
85 688 :M
-.101(layer and in the linear layer.  This gives the cipher the )A
f1_12 sf
-.116(confusion)A
f0_12 sf
-.114( required to make the)A
85 706 :M
-.136(statistics of the ciphertext depend in a complicated way on the
statistics of the plaintext--)A
85 724 :M
-.097(provided that small changes diffuse quickly through the cipher.  To
guarantee this)A
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(Massey; page: 9 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
292 774 :M
f4_12 sf
(9)S
85 94 :M
f1_12 sf
-.022(diffusion)A
f0_12 sf
-.024( in SAFER K-64 is, in fact, why we developed a new and unorthodox linear)A
85 112 :M
-.005(transform, the Pseudo-Hadamard Transform \(PHT\).)A
120 148 :M
-.11(The standard Hadamard Transform \(HT\) [sometimes called the "Walsh)A
85 166 :M
-.083(transform" or the "Walsh-Hadamard transform"] has in place of \(1\)
the equations)A
265 200 :M
(b)S
0 3 rm
(1)S
0 -3 rm
-.012(  = a)A
0 3 rm
(1)S
0 -3 rm
-.013( + a)A
0 3 rm
(2)S
0 -3 rm
494 220 :M
(\(3\))S
264 236 :M
.056(b)A
0 3 rm
.056(2)A
0 -3 rm
.056 .006(  = a)J
0 3 rm
.056(1)A
0 -3 rm
.059 .006( - a)J
0 3 rm
.056(2)A
0 -3 rm
(.)S
85 274 :M
-.117(Notice that the determinant of the matrix of coefficients is -2,
which makes these)A
85 292 :M
-.112(equations non-invertible for byte arithmetic \(arithmetic modulo
256\) where -2 = 254 has)A
85 310 :M
-.127(no multiplicative inverse.  It also has the unpleasant effect of
requiring a multiplication by)A
85 328 :M
-.103(1/2 in the inverse transform in those number systems where 2 has a
multiplicative)A
85 346 :M
-.048(inverse.  By choosing equations \(1\), whose matrix of coefficients
has determinant 1, we)A
85 364 :M
-.109(avoid both of these problems--we can use normal byte arithmetic and
there is no)A
85 382 :M
-.115(unpleasant scale factor in the inverse transform!  Moreover, we can
still mimic the HT in)A
85 400 :M
-.09(the multi-dimensional case, which is what the decimations by-two and
fanning-outs by-)A
85 418 :M
-.051(two accomplish.  We are in fact using a three-dimensional PHT, i.e.,
independent 2-)A
85 436 :M
-.05(PHTs in each of 3 dimensions, which is why there are 2)A
0 -3 rm
-.06(3)A
0 3 rm
-.048( = 8 bytes in the input and)A
85 454 :M
-.018(output of the PHT within SAFER K-64.)A
120 490 :M
-.076(Just as for the HT in number systems appropriate to it, every digit
\(here read)A
85 508 :M
-.033("byte"\) of the input to the PHT effects every output byte, i.e., the
PHT provides)A
85 526 :M
-.08(guaranteed complete diffusion within one linear layer.  In Appendix A,
we show the PHT)A
85 544 :M
-.085(for the unit-vector inputs where one sees this diffusion over all
eight output bytes very)A
85 562 :M
-.093(clearly.  By linearity, the PHT of any vector can be computed as the
corresponding linear)A
85 580 :M
-.071(combination of these unit-vector PHT's.  The "guaranteed complete
diffusion" within one)A
85 598 :M
-.072(layer does not hold fully when one considers single-bit changes in
the input bytes.)A
85 616 :M
-.081(Because of the factor of 2 in equations \(1\), a few bits of the
input will effect only 4 bytes)A
85 634 :M
-.111(\(or 2 bytes or 1 byte\) of the output within one linear layer, but
their effect is immediately)A
85 652 :M
-.107(spread over all 8 bytes in the next linear layer encountered.  This can be seen from the last)A
85 670 :M
.106 .011(three examples in Appendix A.  For instance, because
\(1,0,0,0,0,0,0,0\) has the PHT)J
85 688 :M
.155 .015(\(8,4,4,2,4,2,2,1\), it follows [from the fact that 2 * 128 = 0
mod 256] that)J
85 706 :M
.215 .022(\(128,0,0,0,0,0,0,0\), which contains a single non-zero bit, will
have the PHT)J
85 724 :M
.475 .048(\(0,0,0,0,0,0,0,128\), which shows no diffusion at all.  However,
in turn)J
85 742 :M
1.123 .112(\(0,0,0,0,0,0,0,128\) has the PHT
\(128,128,128,128,128,128,128,128\), which shows)J
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(Massey; page: 10 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
288 774 :M
f4_12 sf
(10)S
85 94 :M
f0_12 sf
-.049(complete diffusion over output bytes.  In fact, consideration of the
unit-vector PHT's in)A
85 112 :M
.135 .014(Appendix A shows that \(128,0,0,0,0,0,0,0\) is the only vector
that shows no diffusion)J
85 130 :M
-.069(under one application of the PHT.  We know of no other cipher with
such rapid and)A
85 148 :M
-.057(guaranteed diffusion.  This rapid diffusion is the main reason that r
= 6 rounds of)A
85 166 :M
-.095(encipherment are enough to make SAFER K-64 crack-resistant.)A
85 220 :M
f2_12 sf
2.727 .273(5. The Key Schedule for SAFER K-64)J
120 256 :M
f0_12 sf
(The )S
f1_12 sf
(key schedule)S
f2_12 sf
( )S
f0_12 sf
-.002(for SAFER K-64, i.e., the procedure for generating the)A
85 274 :M
.257 .026(subkeys K2, K3, ... , K2r+1 from the user-selected subkey K1, is
indicated in Fig. 5.)J
85 292 :M
-.002(The quantities B2, B3, ... , B2r-1 are the )A
f1_12 sf
(key biases)S
f0_12 sf
-.002( that have the purpose of ensuring)A
85 310 :M
-.087(that the round subkeys appear individually "random" and, in
particular, that no more than)A
85 328 :M
-.074(one round subkey can be all-zero.  Letting b[i,j] denote the j-th
byte of bias Bi, we can)A
85 346 :M
-.102(express this byte as the double exponential)A
121 382 :M
.007 .001(               b[i,j]  =  45**[45**\(9i+j\) mod 257] mod 257,    
                               \(4\))J
85 418 :M
-.082(which equation defines the key biases used in SAFER K-64.  We note
here that we might)A
85 436 :M
-.092(have used the factor 8 instead of 9 in the exponent in \(4\)--we
chose 9 to introduce an)A
85 454 :M
-.113(extra measure of "staccato" in the key schedule."  A Table giving the
precise values of the)A
85 472 :M
-.085(key biases for SAFER K-64 is given in Appendix B.  Examination of the
Table in)A
85 490 :M
-.083(Appendix B shows that the resulting sequence of biases is indeed very
random)A
85 508 :M
-.061(appearing, which is all that is really needed.  The use of such
biases, which appears to be)A
85 526 :M
-.089(new, is clearly a good idea in general for iterated ciphers.  The
"weak keys" \(also called)A
85 544 :M
-.092("self-dual keys" and "keys with a dual"\) of  the Data Encryption
Standard \(DES\) [2] are a)A
85 562 :M
-.078(direct result of the fact that no key biases are used so that, for
instance, all 16 round)A
85 580 :M
-.073(subkeys in DES can be all-zero.])A
120 616 :M
-.012(Fig. 5 shows how K1, the user-selected 64-bit subkey, is used to
generate the)A
85 634 :M
.046 .005(additional 64-bit subkeys K2, K3, ... , K2r+1  that are required
within the r-round)J
85 652 :M
-.051(SAFER K-64 algorithm.  Note that, in the generation process, the
subkey register is)A
85 670 :M
-.09(byte-wise rotated by 3-bits to the left between additions of a new
bias.  [The addition of a)A
85 688 :M
-.061(bias is always byte-by-byte byte addition \(modulo-256 addition\).] 
Ideally, one wishes)A
85 706 :M
.031 .003(the entire subkey sequence K1, K2, K3, ... , K2r+1 to have the
character of a sequence)J
85 724 :M
-.069(of independently-chosen uniformly-random subkeys.  Of course, this
cannot be achieved)A
85 742 :M
-.115(in a strict sense because all of the subkeys in this sequence are
determined entirely by the)A
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(Massey; page: 11 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
288 774 :M
f4_12 sf
(11)S
85 94 :M
f0_12 sf
-.063(first \(user-selected\) subkey, K1.  The real goal in the design of
the key schedule is to)A
85 112 :M
-.149(make the departure from independence so complicated that it cannot be
exploited by an)A
85 130 :M
-.095(attacker--and this is the purpose of both the byte rotations and the
addition of subkey)A
85 148 :M
-.067(biases within the key schedule for SAFER K-64)A
85 541 :M
(  )S
1 G
91 187 415 354 rC
93 189 235 19 rF
0 G
93.5 189.5 234 18 rS
123 192 164 12 rC
124 201 :M
-.02(User Selected Eight-Byte Key K1)A
gR
1 G
gS 91 187 415 354 rC
116 227 200 19 rF
0 G
116.5 227.5 199 18 rS
np 204 230 :M
200 215 :L
204 215 :L
207 215 :L
204 230 :L
eofill
-1 -1 205 216 1 1 204 208 @b
135 232 155 12 rC
136 241 :M
f0_12 sf
-.01(Rotate Each Byte Left by 3 Bits)A
gR
0 G
gS 91 187 415 354 rC
np 203 279 :M
199 264 :L
203 264 :L
206 264 :L
203 279 :L
eofill
-1 -1 204 265 1 1 203 246 @b
1 G
117 276 200 19 rF
0 G
117.5 276.5 199 18 rS
136 280 155 12 rC
137 289 :M
f0_12 sf
-.01(Rotate Each Byte Left by 3 Bits)A
gR
gS 91 187 415 354 rC
np 204 327 :M
200 313 :L
204 313 :L
208 313 :L
204 327 :L
eofill
-1 -1 205 314 1 1 204 294 @b
1 G
119 325 200 19 rF
0 G
119.5 325.5 199 18 rS
138 329 155 12 rC
139 338 :M
f0_12 sf
-.01(Rotate Each Byte Left by 3 Bits)A
gR
gS 91 187 415 354 rC
np 206 381 :M
202 367 :L
206 367 :L
210 367 :L
206 381 :L
eofill
-1 -1 207 368 1 1 206 343 @b
1 G
118 440 200 19 rF
0 G
118.5 440.5 199 18 rS
137 444 155 12 rC
138 453 :M
f0_12 sf
-.01(Rotate Each Byte Left by 3 Bits)A
gR
gS 91 187 415 354 rC
-1 -1 206 486 1 1 205 458 @b
np 348 258 :M
333 261 :L
333 258 :L
333 254 :L
348 258 :L
eofill
203 259 -1 1 334 258 1 203 258 @a
1 G
347 240 88 34 rF
0 G
347.5 240.5 87 33 rS
358 245 67 24 rC
359 254 :M
f0_12 sf
-.029(Byte-by-Byte)A
359 266 :M
-.066(mod 256 add)A
gR
gS 91 187 415 354 rC
np 350 308 :M
335 311 :L
335 308 :L
335 304 :L
350 308 :L
eofill
205 309 -1 1 336 308 1 205 308 @a
np 351 362 :M
336 365 :L
336 362 :L
336 358 :L
351 362 :L
eofill
207 363 -1 1 337 362 1 207 362 @a
np 357 486 :M
342 489 :L
342 486 :L
342 482 :L
357 486 :L
eofill
206 487 -1 1 343 486 1 206 486 @a
1 G
346 293 88 34 rF
0 G
346.5 293.5 87 33 rS
357 298 67 24 rC
358 307 :M
f0_12 sf
-.029(Byte-by-Byte)A
358 319 :M
-.066(mod 256 add)A
gR
1 G
gS 91 187 415 354 rC
350 347 88 34 rF
0 G
350.5 347.5 87 33 rS
361 352 67 24 rC
362 361 :M
f0_12 sf
-.029(Byte-by-Byte)A
362 373 :M
-.066(mod 256 add)A
gR
gS 91 187 415 354 rC
356 470 88 34 rF
0 G
356.5 470.5 87 33 rS
367 475 67 24 rC
368 484 :M
f0_12 sf
-.029(Byte-by-Byte)A
368 496 :M
-.066(mod 256 add)A
gR
0 G
gS 91 187 415 354 rC
np 458 258 :M
443 261 :L
443 258 :L
443 254 :L
458 258 :L
eofill
434 259 -1 1 444 258 1 434 258 @a
np 458 308 :M
443 311 :L
443 308 :L
443 304 :L
458 308 :L
eofill
434 309 -1 1 444 308 1 434 308 @a
np 461 362 :M
446 365 :L
446 362 :L
446 358 :L
461 362 :L
eofill
437 363 -1 1 447 362 1 437 362 @a
np 469 487 :M
454 490 :L
454 487 :L
454 483 :L
469 487 :L
eofill
445 488 -1 1 455 487 1 445 487 @a
np 391 241 :M
387 226 :L
391 226 :L
394 226 :L
391 241 :L
eofill
-1 -1 392 227 1 1 391 223 @b
np 392 297 :M
388 282 :L
392 282 :L
395 282 :L
392 297 :L
eofill
-1 -1 393 283 1 1 392 279 @b
np 393 351 :M
389 336 :L
393 336 :L
396 336 :L
393 351 :L
eofill
-1 -1 394 337 1 1 393 333 @b
np 405 474 :M
401 459 :L
405 459 :L
408 459 :L
405 474 :L
eofill
-1 -1 406 460 1 1 405 456 @b
376 225 -1 1 391 224 1 376 224 @a
378 281 -1 1 393 280 1 378 280 @a
378 334 -1 1 393 333 1 378 333 @a
390 457 -1 1 405 456 1 390 456 @a
357 221 16 12 rC
358 230 :M
f0_12 sf
(B2)S
gR
gS 359 278 16 12 rC
360 287 :M
f0_12 sf
(B3)S
gR
gS 358 332 16 12 rC
359 341 :M
f0_12 sf
(B4)S
gR
gS 360 450 32 12 rC
361 459 :M
f0_12 sf
-.191(B2r+1)A
gR
gS 462 253 16 12 rC
463 262 :M
f0_12 sf
-.663(K2)A
gR
gS 460 304 16 12 rC
461 313 :M
f0_12 sf
-.663(K3)A
gR
gS 462 357 16 12 rC
463 366 :M
f0_12 sf
-.663(K4)A
gR
gS 472 482 33 12 rC
473 491 :M
f0_12 sf
-.106(K2r+1)A
gR
gS 207 528 188 12 rC
208 537 :M
f0_12 sf
-.009(Fig. 5: Key Schedule for SAFER K-64)A
gR
gS 91 187 415 354 rC
np 207 442 :M
203 427 :L
207 427 :L
210 427 :L
207 442 :L
eofill
-1 -1 208 428 1 1 207 421 @b
:a
0 <FFFFFFFFFFFFFFFF
><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>fg bk :b
[9 9 ] 0 :q
207 420 207 385 :r
[] 0 :q
207 385 :M
psb
pse
gR
gS 29 30 538 781 rC
85 592 :M
f2_12 sf
2.534 .253(6. SAFER K-64 Program and Examples)J
155 622 :M
f0_12 sf
-.13(Appendix C gives a TURBO PASCAL program that implements the full r-)A
85 640 :M
-.027(round SAFER K-64 cipher, both for encryption and decryption..  This
program should)A
85 658 :M
-.099(be taken as the definition of the SAFER K-64 enciphering algorithm. 
Appendix C also)A
85 676 :M
-.067(gives examples of  r = 6 round encryption \(the recommended number of
rounds\) for use)A
85 694 :M
-.088(in checking implementations of SAFER K-64.)A
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(Massey; page: 12 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
288 774 :M
f4_12 sf
(12)S
85 94 :M
f2_12 sf
3.117 .312(7. Security Considerations for SAFER K-64)J
120 124 :M
f0_12 sf
-.053(In Section 4, we indicated how SAFER K-64 achieves both good
diffusion and)A
85 142 :M
-.081(good confusion, the two basic features that contribute to the
security of a block cipher.)A
85 160 :M
-.127(The best measure of security available today for an iterated block
cipher is its resistance to)A
85 178 :M
-.079(attack by differential cryptanalysis [3].  It is easy to show that,
for the appropriate)A
85 196 :M
-.106(definition of difference between a pair of plaintext blocks \(or a
pair of ciphertext blocks\),)A
85 214 :M
-.101(SAFER K-64 is a )A
f1_12 sf
-.101(Markov cipher)A
f0_12 sf
-.082( [4], a fact that greatly simplifies its analysis for)A
85 232 :M
-.094(resistance to differential cryptanalysis.  Cylink Corporation has
contracted for such an)A
85 250 :M
-.074(analysis of SAFER K-64 by a group of cryptanalysts that does not
include the designer)A
85 268 :M
-.077(of the algorithm. A considerable effort has been invested in this
effort, whose conclusion)A
85 286 :M
-.077(is that six-round SAFER K-64 appears to be secure against
differential cryptanalysis.)A
85 304 :M
-.082(This group of cryptanalysts has also done extensive statistical
testing of SAFER K-64)A
85 322 :M
-.095(with no detection of any weakness.  The evidence available today
suggests that SAFER)A
85 340 :M
-.061(K-64 is a strong cipher whose strength is well measured by the length
\(64 bits\) of its)A
85 358 :M
-.056(user-selected key.)A
85 412 :M
f2_12 sf
.672(References)A
85 448 :M
f0_12 sf
.198 .02([1] C.E. Shannon, "Communication Theory of Secrecy Systems", )J
f1_12 sf
.17 .017(Bell System Tech. J.)J
f0_12 sf
(,)S
85 466 :M
.652 .065(vol. 28, pp. 656-715, Oct., 1949.)J
85 484 :M
-.049([2] U.S. Department of Commerce/National Bureau of Standards, FIPS
Pub 46, )A
f1_12 sf
-.076(Data)A
85 502 :M
-.086(Encryption Standard)A
f0_12 sf
-.083(, April 1977.)A
85 520 :M
-.116([3] E. Biham and A. Shamir, )A
f1_12 sf
-.114(Differential Cryptanalysis of the Data Encryption Standard)A
f0_12 sf
(.)S
85 538 :M
-.019(New York: Springer-Verlag, 1993.)A
85 556 :M
-.006([4] X. Lai, J. L. Massey and S. Murphy, "Markov Ciphers and Differential)A
85 574 :M
.279 .028(Cryptanalysis," pp. 17-38 in )J
f1_12 sf
.301 .03(Advances in Cryptology - EUROCRYPT '91 )J
f0_12 sf
.251 .025(\(Ed. D. W.)J
85 592 :M
-.059(Davies\), Lecture Notes in Computer Science No. 547.  Heidelberg and
New York:)A
85 610 :M
-.048(Springer-Verlag, 1991)A
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(Massey; page: 13 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
288 774 :M
f4_12 sf
(13)S
85 94 :M
f2_12 sf
3.18 .318(APPENDIX A:)J
85 106 :M
2.576 .258(Examples of the Pseudo-Hadamard Transform \(PHT\))J
85 134 :M
f6_14 sf
-.406(INPUT  VECTOR is    0   0   0   0   0   0   0   1)A
85 148 :M
-.406(OUTPUT VECTOR is    1   1   1   1   1   1   1   1)A
85 176 :M
-.406(INPUT  VECTOR is    0   0   0   0   0   0   1   0)A
85 190 :M
-.406(OUTPUT VECTOR is    2   2   1   1   2   2   1   1)A
85 218 :M
-.406(INPUT  VECTOR is    0   0   0   0   0   1   0   0)A
85 232 :M
-.406(OUTPUT VECTOR is    2   2   2   2   1   1   1   1)A
85 260 :M
-.406(INPUT  VECTOR is    0   0   0   0   1   0   0   0)A
85 274 :M
-.406(OUTPUT VECTOR is    4   4   2   2   2   2   1   1)A
85 302 :M
-.406(INPUT  VECTOR is    0   0   0   1   0   0   0   0)A
85 316 :M
-.406(OUTPUT VECTOR is    2   1   2   1   2   1   2   1)A
85 344 :M
-.406(INPUT  VECTOR is    0   0   1   0   0   0   0   0)A
85 358 :M
-.406(OUTPUT VECTOR is    4   2   2   1   4   2   2   1)A
85 386 :M
-.406(INPUT  VECTOR is    0   1   0   0   0   0   0   0)A
85 400 :M
-.406(OUTPUT VECTOR is    4   2   4   2   2   1   2   1)A
85 428 :M
-.406(INPUT  VECTOR is    1   0   0   0   0   0   0   0)A
85 442 :M
-.406(OUTPUT VECTOR is    8   4   4   2   4   2   2   1)A
85 470 :M
-.406(INPUT  VECTOR is  128   0   0   0   0   0   0   0)A
85 484 :M
-.406(OUTPUT VECTOR is    0   0   0   0   0   0   0 128)A
85 512 :M
-.406(INPUT  VECTOR is    0   0   0   0   0   0   0 128)A
85 526 :M
-.406(OUTPUT VECTOR is  128 128 128 128 128 128 128 128)A
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(Massey; page: 14 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
288 774 :M
f4_12 sf
(14)S
85 97 :M
f5_12 sf
4.178 .418(APPENDIX B:)J
143 127 :M
2.185 .219(Table of Key Biases for SAFER K-64 Cipher.)J
85 154 :M
f4_12 sf
-.034(\(Biases B2 to B21 are listed here although only B2 to B13 are)A
85 169 :M
-.025(required when r = 6 rounds are used with SAFER K-64.\))A
85 207 :M
f6_14 sf
-.407(Bias  B2 is   22 115  59  30 142 112 189 134)A
85 235 :M
-.407(Bias  B3 is   71 126  36  86 241 119 136  70)A
85 263 :M
-.407(Bias  B4 is  177 186 163 183  16  10 197  55)A
85 291 :M
-.407(Bias  B5 is  201  90  40 172 100 165 236 171)A
85 319 :M
-.407(Bias  B6 is  198 103 149  88  13 248 154 246)A
85 347 :M
-.407(Bias  B7 is  102 220   5  61 211 138 195 216)A
85 375 :M
-.407(Bias  B8 is  106 233  54  73  67 191 235 212)A
85 403 :M
-.407(Bias  B9 is  155 104 160 101  93  87 146  31)A
85 431 :M
-.407(Bias B10 is  113  92 187  34 193 190 123 188)A
85 459 :M
-.407(Bias B11 is   99 148  95  42  97 184  52  50)A
85 487 :M
-.407(Bias B12 is  253 251  23  64 230  81  29  65)A
85 515 :M
-.407(Bias B13 is  143  41 221   4 128 222 231  49)A
85 543 :M
-.407(Bias B14 is  127   1 162 247  57 218 111  35)A
85 571 :M
-.407(Bias B15 is  254  58 208  28 209  48  62  18)A
85 599 :M
-.407(Bias B16 is  205  15 224 168 175 130  89  44)A
85 627 :M
-.407(Bias B17 is  125 173 178 239 194 135 206 117)A
85 655 :M
-.407(Bias B18 is   19   2 144  79  46 114  51 133)A
85 683 :M
-.407(Bias B19 is  141 207 169 129 226 196  39  47)A
85 711 :M
-.407(Bias B20 is  122 159  82 225  21  56  43 252)A
85 739 :M
-.407(Bias B21 is   66 199   8 228   9  85  94 140)A
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(Massey; page: 15 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
288 774 :M
f4_12 sf
(15)S
85 97 :M
f5_12 sf
3.268 .327(APPENDIX C:)J
85 112 :M
2.587 .259(Examples of Six-Round SAFER K-64 Encryption and)J
85 127 :M
3.673 .367(Program for Implementation)J
85 165 :M
f6_14 sf
-.406(PLAINTEXT is        1   2   3   4   5   6   7   8)A
85 179 :M
-.406(The KEY is          0   0   0   0   0   0   0   0)A
85 193 :M
-.406(after round 1       0  46 170 144 255 118   2 238)A
85 207 :M
-.406(after round 2      35 175 193 103 246  87  43 202)A
85 221 :M
-.406(after round 3      64 252   4  38   1 140  36 104)A
85 235 :M
-.406(after round 4       2  62 127  41  25  97 179 196)A
85 249 :M
-.406(after round 5      59 221   9 152 113  50 224  52)A
85 263 :M
-.406(after round 6     242 255  38 130 179 219  71 133)A
85 277 :M
-.406(CRYPTOGRAM is     125  40   3 134  51 185  46 180)A
85 305 :M
-.406(PLAINTEXT is        0   0   0   0   0   0   0   0)A
85 319 :M
-.406(The KEY is          1   2   3   4   5   6   7   8)A
85 333 :M
-.406(after round 1     240 174  18 192  79 214   2  46)A
85 347 :M
-.406(after round 2      51 154 197 181 138 198 236  83)A
85 361 :M
-.406(after round 3     178  36  41  77  26  13 222  86)A
85 375 :M
-.406(after round 4     111  39 188 122  73 216  30 100)A
85 389 :M
-.406(after round 5     132  78 244 157 225  84 106 144)A
85 403 :M
-.406(after round 6     197 105 114  54 196 101 227  80)A
85 417 :M
-.406(CRYPTOGRAM is      90 178 127 114  20 163  58 225)A
85 445 :M
-.406(PLAINTEXT is        1   2   3   4   5   6   7   8)A
85 459 :M
-.406(The KEY is          8   7   6   5   4   3   2   1)A
85 473 :M
-.406(after round 1     101  42 122 106  63 111 225 227)A
85 487 :M
-.406(after round 2     102 122  66 171  75 196 228  30)A
85 501 :M
-.406(after round 3     114 219 165 207  71  24 132 155)A
85 515 :M
-.406(after round 4     117  53 164  99 161 204 201  48)A
85 529 :M
-.406(after round 5     132  77 246 149   5 187 182  27)A
85 543 :M
-.406(after round 6     199  89  95 137  71 106  55 152)A
85 557 :M
-.406(CRYPTOGRAM is     200 242 156 221 135 120  62 217)A
85 585 :M
-.406(PLAINTEXT is        0   0   0   0   0   0   0   0)A
85 599 :M
-.406(The KEY is          0   0   0   0   0   0   0   0)A
85 613 :M
-.406(after round 1     203 244 158 176 123 197  11  39)A
85 627 :M
-.406(after round 2      27  47   1  53 133  49 233 187)A
85 641 :M
-.406(after round 3     134 147 160 151  93   5 125 185)A
85 655 :M
-.406(after round 4     190 249 153 140 109 203 139  58)A
85 669 :M
-.406(after round 5     143  72 176 126  51 175  84  69)A
85 683 :M
-.406(after round 6     140 255  43 205 142   9 196  78)A
85 697 :M
-.406(CRYPTOGRAM is       3  40   8 201  14 231 171 127)A
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(Massey; page: 16 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
288 774 :M
f4_12 sf
(16)S
85 94 :M
f2_12 sf
4.921 .492(PROGRAM Full_r_Rounds_max_10_of_SAFERK64_cipher;)J
85 118 :M
f0_12 sf
.421 .042(VAR a1, a2, a3, a4, a5, a6, a7, a8, b1, b2, b3, b4, b5, b6, b7,
b8, r: byte;)J
85 130 :M
-.005(    k: ARRAY[1..21,1..8] OF byte; k1: ARRAY[1..8] OF byte;)A
85 142 :M
-.07(    logtab, exptab: ARRAY[0..255] OF integer; i, j, flag: integer;)A
85 166 :M
-.066(PROCEDURE mat1\(VAR a1, a2, b1, b2: byte\);)A
85 178 :M
-.055(BEGIN b2:= a1 + a2; b1:= b2 + a1; END;)A
85 202 :M
-.069(PROCEDURE invmat1\(VAR a1, a2, b1, b2: byte\);)A
85 214 :M
-.059(BEGIN b1:= a1 - a2; b2:= -b1 + a2; END;)A
85 238 :M
.087(BEGIN)A
85 250 :M
-.117({The program here computes the powers of the primitive element 45 of the)A
85 262 :M
-.067( finite field GF\(257\) and stores these in the table "exptab". 
Corresponding)A
85 274 :M
-.091( logarithms to the base 45 are stored in the table "logtab".})A
85 286 :M
-.094(  logtab[1]:= 0; exptab[0]:= 1;)A
85 298 :M
-.155(  FOR i:= 1 TO 255 DO)A
85 310 :M
.133 .013(  BEGIN)J
85 322 :M
-.076(    exptab[i]:= \(45 * exptab[i - 1]\) mod 257;)A
85 334 :M
-.122(    logtab[exptab[i]]:= i;)A
85 346 :M
-.198(  END;)A
85 358 :M
-.086(  exptab[128]:= 0; logtab[0]:= 128; exptab[0]:= 1;)A
85 382 :M
-.127(  flag:= 0; writeln;)A
85 394 :M
-.037(  writeln\('Enter number of rounds r \(max 10\) desired then hit
CR'\); readln\(r\);)A
85 418 :M
-.19(  REPEAT)A
85 430 :M
.072 .007(    BEGIN)J
85 442 :M
-.05(      writeln; writeln\('Enter plaintext in 8 bytes with spaces'\);)A
85 454 :M
.105 .01(      writeln\('  between bytes, then hit CR.'\);)J
85 466 :M
-.032(      writeln\('\(A byte is an integer between 0 and 255
inclusive.\)'\);)A
85 478 :M
.177 .018(      readln\(a1, a2, a3, a4, a5, a6, a7, a8\);)J
85 490 :M
.005 .001(      writeln\('Enter a key in 8 bytes'\);)J
85 502 :M
1.07 .107(     
readln\(k[1,1],k[1,2],k[1,3],k[1,4],k[1,5],k[1,6],k[1,7],k[1,8]\);)J
85 514 :M
.119 .012(      k1[1]:= k[1,1]; k1[2]:= k[1,2]; k1[3]:= k[1,3]; k1[4]:=
k[1,4];)J
85 526 :M
.119 .012(      k1[5]:= k[1,5]; k1[6]:= k[1,6]; k1[7]:= k[1,7]; k1[8]:=
k[1,8];)J
85 538 :M
.256 .026(      writeln\('PLAINTEXT is ',
a1:8,a2:4,a3:4,a4:4,a5:4,a6:4,a7:4,a8:4\);)J
85 550 :M
.49 .049(      writeln\('The KEY is   ', k[1,1]:8,k[1,2]:4,k[1,3]:4,k[1,4]:4,)J
85 562 :M
.143 .014(                              
k[1,5]:4,k[1,6]:4,k[1,7]:4,k[1,8]:4\);)J
85 574 :M
-.123({The next instructions implement the key schedule needed to derive keys)A
85 586 :M
.353 .035( K2, K3, ... K2r+1 from the user-selected key K1.})J
85 598 :M
-.102(      FOR i:= 2 TO 2*r + 1 DO)A
85 610 :M
-.141(      FOR j:= 1 TO 8 DO)A
85 622 :M
.049 .005(      BEGIN)J
85 634 :M
-.059(        {Each byte of the  key K1 is further left rotated by 3.})A
85 646 :M
-.018(        k1[j]:= \(k1[j] shl 3\) + \(k1[j] shr 5\);)A
85 658 :M
-.031(        {The key bias is added here.})A
85 670 :M
-.056(        k[i,j]:= k1[j] + exptab[exptab[9*i+j]];)A
85 682 :M
-.11(      END;)A
85 706 :M
-.037({The r rounds of encryption begin here.})A
85 718 :M
-.14(      FOR i:= 1 TO r DO)A
85 730 :M
.049 .005(      BEGIN)J
85 742 :M
-.057(        {Key 2i-1 is mixed bit and byte added  to the round input.})A
endp
%%Page: 17 17
%%BeginPageSetup
initializepage
(Massey; page: 17 of 17)setjob
%%EndPageSetup
-29 -30 :T
gS 29 30 538 781 rC
288 774 :M
f4_12 sf
(17)S
85 94 :M
f0_12 sf
-.01(        a1:= a1 xor k[2*i-1,1]; a2:= a2  +  k[2*i-1,2];)A
85 106 :M
-.01(        a3:= a3  +  k[2*i-1,3]; a4:= a4 xor k[2*i-1,4];)A
85 118 :M
-.01(        a5:= a5 xor k[2*i-1,5]; a6:= a6  +  k[2*i-1,6];)A
85 130 :M
-.01(        a7:= a7  +  k[2*i-1,7]; a8:= a8 xor k[2*i-1,8];)A
85 154 :M
-.041(        {The result now passes through the nonlinear layer.})A
85 166 :M
-.094(        b1:= exptab[a1]; b2:= logtab[a2]; b3:= logtab[a3]; b4:=
exptab[a4];)A
85 178 :M
-.094(        b5:= exptab[a5]; b6:= logtab[a6]; b7:= logtab[a7]; b8:=
exptab[a8];)A
85 190 :M
-.056(        {Key 2i is now mixed byte and bit added to the result.})A
85 202 :M
.033 .003(        b1:= b1  +  k[2*i,1]; b2:= b2 xor k[2*i,2];)J
85 214 :M
.033 .003(        b3:= b3 xor k[2*i,3]; b4:= b4  +  k[2*i,4];)J
85 226 :M
.033 .003(        b5:= b5  +  k[2*i,5]; b6:= b6 xor k[2*i,6];)J
85 238 :M
.033 .003(        b7:= b7 xor k[2*i,7]; b8:= b8  +  k[2*i,8];)J
85 262 :M
-.08(        {The result now enters the first level of the linear layer.})A
85 274 :M
.103 .01(        mat1\(b1, b2, a1, a2\); mat1\(b3, b4, a3, a4\);)J
85 286 :M
.103 .01(        mat1\(b5, b6, a5, a6\); mat1\(b7, b8, a7, a8\);)J
85 298 :M
-.079(        {The result now enters the second level of the linear layer.})A
85 310 :M
.103 .01(        mat1\(a1, a3, b1, b2\); mat1\(a5, a7, b3, b4\);)J
85 322 :M
.103 .01(        mat1\(a2, a4, b5, b6\); mat1\(a6, a8, b7, b8\);)J
85 334 :M
-.085(        {The result now enters the third level of the linear layer.})A
85 346 :M
.103 .01(        mat1\(b1, b3, a1, a2\); mat1\(b5, b7, a3, a4\);)J
85 358 :M
.103 .01(        mat1\(b2, b4, a5, a6\); mat1\(b6, b8, a7, a8\);)J
85 382 :M
-.05(        {The round is now completed!})A
85 394 :M
.272 .027(        writeln\('after
round',i:2,a1:8,a2:4,a3:4,a4:4,a5:4,a6:4,a7:4,a8:4\);)J
85 406 :M
-.11(      END;)A
85 430 :M
-.056(      {Key 2r+1 is now mixed bit and byte added to produce the
cryptogram.})A
85 442 :M
.028 .003(      a1:= a1 xor k[2*r+1,1]; a2:= a2  +  k[2*r+1,2];)J
85 454 :M
.028 .003(      a3:= a3  +  k[2*r+1,3]; a4:= a4 xor k[2*r+1,4];)J
85 466 :M
.028 .003(      a5:= a5 xor k[2*r+1,5]; a6:= a6  +  k[2*r+1,6];)J
85 478 :M
.028 .003(      a7:= a7  +  k[2*r+1,7]; a8:= a8 xor k[2*r+1,8];)J
85 490 :M
.091 .009(      writeln\('CRYPTOGRAM
is',a1:8,a2:4,a3:4,a4:4,a5:4,a6:4,a7:4,a8:4\); writeln;)J
85 502 :M
-.019(      writeln\('Type 0 and CR to continue or -1 and CR to stop
run.'\); read\(flag\);)A
85 514 :M
-.109(    END)A
85 526 :M
-.046(  UNTIL flag < 0;)A
85 538 :M
.115(END.)A
endp
%%Trailer
end		% md
%%EOF
