Path: msuinfo!netnews.upenn.edu!jvnc.net!darwin.sura.net!haven.umd.edu!uunet!utcsri!newsflash.concordia.ca!IRO.UMontreal.CA!CC.UMontreal.CA!sifon!thunder.mcrcim.mcgill.edu!sobeco!zap!unimtl!elevia!alain
From: alain@elevia.uniforum.qc.ca (W.A.Simon)
Newsgroups: sci.crypt
Subject: Re: Simple hardware RNG
Message-ID: <14090@elevia.uniforum.qc.ca>
Date: 11 Nov 92 13:01:11 GMT
References: <1992Oct22.070717.28400@cs.aukuni.ac.nz> <5830006@hplsla.hp.com> <1992Nov1.225224.23220@qualcomm.com>
Lines: 37

In <1992Nov1.225224.23220@qualcomm.com>
karn@servo.qualcomm.com (Phil Karn)
proposes:

> [ ... ] 
> One of the exhibits was a "chaotic pendulum" consisting of several
> [ ... ]
> outcomes over time. Just the ticket for a good hardware random number
> generator.
> [ ... ]

	Practically, a software model, maybe...
	But it could be found out.

	But what's wrong with this: /dev/faircoin

	A process spits out an uninterrompted
	sequence of alternating 0s and 1s, to a
	bit bucket.  It is the "fair coin"...
	010101010101010101010101010101...

	Everytime a process needs a random bit, it
	reads the character device.  The device
	driver just taps the "fair coin" on the
	shoulder, which the "fair coin" takes as a
	request for a contribution.  It interrupts
	its blissful occupation, turns its shlong
	away from the bucket, aims it at the master
	end of the device and squirts the next drop
	of randomness: a "0" or a "1".  It then
	blissfully resumes where it was interrupted.



--
 Alain
 [ ... usual disclaimer... ]
