Path: msuinfo!uchinews!linac!uwm.edu!zaphod.mps.ohio-state.edu!saimiri.primate.wisc.edu!sdd.hp.com!swrinde!emory!gatech!rutgers!igor.rutgers.edu!zodiac.rutgers.edu!leichter
From: leichter@zodiac.rutgers.edu
Newsgroups: sci.crypt
Subject: Re: Cryptography and P=NP
Message-ID: <1992Nov19.142510.1@zodiac.rutgers.edu>
Date: 19 Nov 92 19:25:10 GMT
References: <1992Nov15.110945.19939@ringer.cs.utsa.edu> <PHR.92Nov15203840@napa.telebit.com> <1e7fvdINN87s@iskut.ucs.ubc.ca> <1992Nov16.084503.10141@vax.oxford.ac.uk> <BxvEF3.Kqw.2@cs.cmu.edu> <1992Nov18.193900.20199@rchland.ibm.com> <1992Nov19.102822.1@zodiac.rutger
Sender: news@igor.rutgers.edu
Followup-To: sci.crypt
Distribution: inet
Organization: Rutgers University Department of Computer Science
Lines: 20
Nntp-Posting-Host: cancer.rutgers.edu

In article <1992Nov19.102822.1@zodiac.rutgers.edu>, I said:
| Yes.  Programs in class P are defined as those for which, for any input of
| length n, we can prove they halt after taking no more than p(n) steps, where
| p is some polynomial.

This is poorly stated.  Whether a program is in P or not is a fact, whether we
can prove if or not.  A program is in P if there exists a polynomial p such
that, for any input of length n, the program will, in fact, halt in most p(n)
steps.  If proving that things were or were not in P were trivial, then the
question of whether P equals NP would be trivial, too:  Because, say, 3-SAT
is complete for NP, if we could prove 3-SAT was in P, we'd know P=NP; if we
could prove 3-SAT was NOT in P, then P!=NP.  As it is, we simply don't know.

(And, yes, there are all sorts of philosophical - and mathematical! - com-
plexities to the question of what "actually does halt" means!  Since it is
known that there are oracles relative to which one can prove P=NP, and others
relative to which one can prove P!=NP, in a sense there are "plausible worlds"
(or very slightly more general notions of computation) in which P=NP, and
other "plausible worlds" in which P!=NP.)
							-- Jerry
