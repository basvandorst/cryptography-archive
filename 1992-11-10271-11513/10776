Newsgroups: sci.crypt
Path: msuinfo!caen!zaphod.mps.ohio-state.edu!sample.eng.ohio-state.edu!hood!butzerd
From: butzerd@hood.eng.ohio-state.edu (Dane C. Butzer)
Subject: One more idea about a challeng...
Message-ID: <1992Nov13.173934.2127@ee.eng.ohio-state.edu>
Sender: news@ee.eng.ohio-state.edu
Organization: The Ohio State University Dept of Electrical Engineering
Date: Fri, 13 Nov 1992 17:39:34 GMT
Lines: 85

OK.  One more idea on this challenge thing.  Would the following be
acceptable?

----------------------------------------------------------------------------
1) Give a whole heap of plain text and corresponding cipher text (nothing
new)

2) Offer a $reward$ to find a small piece of plain text from the cipher text
generated using the key(s) used in 1 (nothing new)

3) OFFER THE SOURCE CODE to the ecnryption routine (:-), but (and here's
   ^^^^^^^^^^^^^^^^^^^^^
the target for some flaming...), in order to get the source, request people
to U.S. mail a signed non-disclosre agreement (1 page thingy posted w/ the
challenge), with an enclosed stamped (probably with $.50) self-addressed
return envelope.  I'd U.S. mail the source back in that.

4) OFFER THE EXECUTABLE for the encryption routing, but (Wait, let me put
   ^^^^^^^^^^^^^^^^^^^^
on some asbestos :-) offer it only via US mail - people mail me a blank data
tape (again w/ return postage), and I return it with the excecutable.
----------------------------------------------------------------------------


Why the non-disclosure agreement?  Because then, it wouldn't be legally
published.  I'd be offering info. to consultants, who get paid upon
completion of the job (ie. breaking the encryption).

Why U.S. mail?  So I could prove that I'd never sent either outside of the
U.S., even if a copy migrated (in violation of the non-disclosure agreement
and U.S. munitions export laws - I honestly don't think this would happen)
to, say, Canada or Europe.  This may seem a bit paranoid, but after
following the "maim (register) crypto" thread, and noting how the U.S.
gov't might not really like us here, I'd rather be paranoid than meet nasty
people with dark suits and funny badges.

The big question is, would anybody out there terribly mind the
non-disclosure thingy?  Would anybody NOT mind (please e-mail me on this,
I'd like to hear any POSITIVE repsonses, too)?  Or is this still not
acceptable - in order to get some people to look at the encryption scheme
(so I know if its worth patenting), I have to basically forfeit all rights
to ever doing anything commercial with it? :-(



Thanks for any feedback,

Dane Butzer
butzerd@ee.eng.ohio-state.edu



ps. I know that by looking at a newcomer's great wonderful earth-
shatteringly new encryption scheme ("Hey Bob, we've got another ya-hoo
thinks he's reinvented the wheel & made a perpetual motion maching" :-),
the "experts" are actually providing a service, and I don't mean to be
insulting or difficult.  I'm just trying to find a way to provide them with
all the info. they want, while reserving some amount of intellectual
property rights just in case the thing IS worth something.  Also, there
will be an $incentive$...

pps. Someone mentioned finding a nitch for a scheme before making one.  The
nitch this one fits is large database management systems.  The reasons are:

	1) In one mode, each encryption, even with the same key, is
	different from any encryption before it (I can hear the skeptics
	already on this one).  This will help a lot with key management.
	(Note that the decryption key IS the same as the encrpytion key,
	too.)

	2) In this same mode, data integrity verification is automatic (ie.
	any tampering of the encrypted files is detected).

	3) In the other mode, it operates as a pseudo one time pad, which is
	useful under certian circumstances, such as data archives where you
	don't want to use a cipher chaining/feedback mode due to the
	possibility of compounding data loss.  The RNG is designed to be
	statistically random, one-way, and unpredictable (took about 2
	years to gets this finished - in many important ways, it's NOT
	like anything you've seen before, unless you have access to a lot
	better library resources than I do.  In some ways, its very like
	some of the previous art).

	4) Its speed is OK, but the technique is very ammenable to a
	parallelized hardware implementation that should just scream :-)
