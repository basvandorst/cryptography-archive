Path: msuinfo!netnews.upenn.edu!dsinc!ub!acsu.buffalo.edu!boyd
From: boyd@acsu.buffalo.edu (Daniel F Boyd)
Newsgroups: sci.crypt
Subject: Re: Stream Cipher Program.  Comments?
Summary: Already Invented Elsewhere
Message-ID: <By6vqu.M21@acsu.buffalo.edu>
Date: 23 Nov 92 21:59:18 GMT
References: <1eqi8sINNbmt@roche.csl.sri.com>
Sender: nntp@acsu.buffalo.edu
Organization: UB
Lines: 36
Nntp-Posting-Host: lictor.acsu.buffalo.edu

In article <1eqi8sINNbmt@roche.csl.sri.com> boucher@csl.sri.com 
(Peter K. Boucher) writes:
> If you assume that the three key arrays are full of unpredictable
> PRNs and that the seed is an unpredictable PRN, and that zipkeys
> fills up the three arrays with more unpredictable PRNs, what is the
> weakness of this algorithm?
[...]
> Is there a reason why this won't work?

Given your assumptions, it works fine -- but the way you've stated
your assumptions are contradictory.  There is no such thing as an
'unpredictable PRN' (pseudo-random number).  If it's a PRN, then it's
predictable.  If it's not predictable, then it's not PSEUDO.

You have to get your random numbers from something quantum-mechanical
(a geiger counter and radioactive material works well).  You can't
generate them from scratch -- you're not allowed to assume that the
enemy can't figure out how the PRNG works.

And once you've got a quantum noise source like that, you might as
well XOR with it directly.  It's faster and it's just as secure.

So given that you're getting key1, key2, and key3 from some
inexhaustible fount of randomness, what's left that's new or useful?
Well, the idea of using three smaller streams of random noise in order
to get one longer stream to XOR with is old -- it was discovered by
Vernam himself -- and it only postpones the time when you have to go
get more random noise in order to stay secure.

Nice try; it shows you're thinking -- but it's been tried.

-- 
Daniel F. Boyd -- boyd@cs.buffalo.edu         -a +X -x -e -m -S -F"> "
----------------------------------------------------------------------
((lambda (x) (list x (list (quote quote) x))) 
 (quote (lambda (x) (list x (list (quote quote) x)))))
