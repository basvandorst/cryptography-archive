Path: msuinfo!netnews.upenn.edu!dsinc!ub!zaphod.mps.ohio-state.edu!cs.utexas.edu!sun-barr!olivea!uunet!ogicse!news.u.washington.edu!uw-beaver!uw-coco!nwnexus!ken
From: ken@halcyon.com (Ken Pizzini)
Newsgroups: sci.crypt
Subject: Re: My encryption program.  Comments?
Message-ID: <1992Nov21.010043.4210@nwnexus.WA.COM>
Date: 21 Nov 92 01:00:43 GMT
References: <1ejpp5INNdef@roche.csl.sri.com>
Sender: sso@nwnexus.WA.COM (System Security Officer)
Organization: The 23:00 News and Mail Service
Lines: 26

In article <1ejpp5INNdef@roche.csl.sri.com> boucher@csl.sri.com (Peter K. Boucher) writes:
>1) It generates a stream of pseudo-random numbers, based on a pass-phrase
>   typed by the user (between 13 and 1019 characters).  The first 
>   ~million bytes of pseudo-random numbers are generated when the program
>   starts up.  Call it "key_stream."
>
>2) A separate, single pseudo-random byte is also generated at the start.
>   It's value depends on generating the entire initial key_stream.  Call
>   it "zipper."
>
>3) the program executes a loop containing the following (pseudocode)
>   to encrypt a file:
>	inchar = getchar(infile)
>	outchar = inchar ^ key_stream[counter] ^ zipper  <-- "^" means xor
>	counter = counter + 1
>	zipper = outchar
>	putchar(outfile, outchar)

I don't see thay your "zipper" does anything but help protect the
first byte:
	outchar[2] = inchar[2] ^ key_stream[2] ^ outchar[1]
where outchar[1] is sitting right there in front of the cryptanalyst.

So the whole thing depends on how strong your keystream generator is.

		--Ken Pizzini
