Path: msuinfo!netnews.upenn.edu!jvnc.net!darwin.sura.net!zaphod.mps.ohio-state.edu!cs.utexas.edu!uunet!news.centerline.com!franl
From: franl@centerline.com (Fran Litterio)
Newsgroups: sci.crypt
Subject: Using large numbers of servers for validation of public keys.
Message-ID: <FRANL.92Nov24234718@draco.centerline.com>
Date: 25 Nov 92 04:47:18 GMT
Organization: CenterLine Software, Inc.
Lines: 75
NNTP-Posting-Host: 140.239.3.116

I'm a newcomer to sci.crypt, so please use a low flame if my idea is
way off base.

It appears to me that public key cryptosystems are a double-edged
sword.  To be able to receive encrypted messages via a public key
cryptosystem, you distribute your public key over a wide-area insecure
network (e.g., the Internet).  This gives crackers the opportunity to
read your correspondence by intercepting all of the traffic between
you and the person you are communicating with.  The cracker would
substitute his public key for yours in your outgoing messages and
would intercept your encrypted incoming messages, decrypt them, read
them, re-encrypt them using your real public key, and send them along
to you.  A system administrator of an Internet-connected machine has
the capabilities today to do this with email traffic.

Even if the person you correspond with were to send you (in her
encrypted message) the public key she used to encrypt the message
(that is, the cracker's public key), the cracker can simply substitute
your real public key just prior to re-encrypting the message to send
to you, and you are none the wiser.

Phil Zimmermann describes this vulnerability in the documentation to
PGP 2.0, and mentions solutions based on either a centralized public
key certification authority (which he frowns upon) or a distributed
certification scheme where you only use a public key that you get from
someone whose public key you trust (who may have gotten it from
someone whose public key they trust, etc.).  You voluntarilly restrict
the number of "levels" of such key-trust you wish to live with.  At
some point you just won't allow yourself to send an encrypted message
to someone, because you don't trust their public key directly and no
one whose public key you trust trusts their public key.  At that point
you either take the risk of using their public key (which may have
been spoofed) or you avoid encrypted communication via that public
key.

I suggest another mechanism of public key certification that attempts
to allow the use of otherwise-untrusted public keys.  Consider that
the proposed cracker can only succeed by intercepting all
communication between the two parties, replacing the parties' public
keys with his own.  If a single copy of a real public key got across
the insecure communication line, then the party receiving that public
key would be alerted to the cracker by noticing (or having software
notice) that a recently received public key is suddenly different than
the one that was being used up until now.  My idea is to use public
key servers on the insecure wide-area network (e.g., the Internet).
These servers continuously exchange public keys, each maintaining a
database of the public keys that it knows.  Suppose that I send
someone my public key via email or a Usenet posting.  Suppose a
cracker intercepts it and spoofs my public key.  Too bad, there are
hundreds or thousands of other sources on the network ready to provide
my real public key in a millisecond.  Given that I can check the
validity of those sources nearly continuously, then it becomes almost
impossible for the cracker to intercept and spoof every one of the
sources of my public key.

This is a non-centralized mechansim based on flooding the network with
your real public key and checking it frequently enough to notice an
attempt to alter it.

Comments?  Criticisms?
--
franl@centerline.com         "So what we've decided to do is set you up in
uunet!centerline!franl        Cicely, situated in an area that we Alaskans
(USA) 617-498-3255            refer to as The Alaskan Riviera."

-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: 2.0

mQCNAisQJSUAAAED/jbCQchSwFG7IFKkrCQ6QKLxB0LVbP6co87karNBb88ur1+S
FK82JT9mNlWKvP4HHFEI1kLKk0PAvd0nez/mQIriAMUT2pfOnIAtdqtpddgQseZZ
7BY2vMiorjG7pe6e11Q+UIQcvqsY3Bl89YBgqrydWm8UWMy2qXeXQmAScOodAAUR
tC9GcmFuY2lzIFAuIExpdHRlcmlvLCBKci4gPGZyYW5sQGNlbnRlcmxpbmUuY29t
Pg==
=6hNb
-----END PGP PUBLIC KEY BLOCK-----
