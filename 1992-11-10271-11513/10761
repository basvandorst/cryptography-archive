Path: msuinfo!netnews.upenn.edu!cs.widener.edu!dsinc!ub!acsu.buffalo.edu!boyd
From: boyd@acsu.buffalo.edu (Daniel F Boyd)
Newsgroups: sci.crypt
Subject: Re: New Encryption System - Challenge!
Message-ID: <BxJ17E.Ao0@acsu.buffalo.edu>
Date: 11 Nov 92 00:54:49 GMT
References: <n0dc8t@ofa123.fidonet.org> <BxDHCr.AMB@acsu.buffalo.edu> <4146@bcstec.ca.boeing.com>
Sender: nntp@acsu.buffalo.edu
Organization: UB
Lines: 38
Nntp-Posting-Host: lictor.acsu.buffalo.edu

In article <4146@bcstec.ca.boeing.com> tld5032@bcstec.ca.boeing.com 
(Terry Davis) writes:
> As always we discount what we don't understand or happen to like.  

No, we're discounting what doesn't make sense.  The guy wants
everybody to evaluate his nifty system without supplying the program
for analysis.  This doesn't wash.  He's assuming we can't figure out
how the program works.  You're not allowed to make that assumption.

> I see nothing in the article that indicates his system is not
> keyed.  System generated and embedded secondary keys provide
> exactly the appearance described.

I see nothing in the article that indicates his system IS keyed.
There is nothing in the article to indicate how the system actually
works, and until the guy explains his algorithm he is selling snake
oil.

> Myself, I'm particularly fond of keyed systems that refuse to 
> generate to the same encryption pattern each time!

I don't believe you.  Explain how this makes a system harder to break.
The decryption process has to work on any message, so it has to
somehow discern something invariant in the message that leads to the
original plaintext.  The cryptographer is free to do the same.

> On final note, perhaps we FLAME new thoughts and ideas far to soon!
> A more little tolerance might just encourage more exchange of new
> concepts which is what I thought this group was all about!

Ok, explain to me what new concepts I'm rejecting here.


-- 
Daniel F. Boyd -- boyd@cs.buffalo.edu         -a +X -x -e -m -S -F"> "
----------------------------------------------------------------------
((lambda (x) (list x (list (quote quote) x))) 
 (quote (lambda (x) (list x (list (quote quote) x)))))
