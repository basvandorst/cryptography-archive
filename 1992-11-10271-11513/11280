Newsgroups: sci.crypt
Path: msuinfo!caen!uunet!newsgate.watson.ibm.com!yktnews!admin!wo0z!lwloen
From: lwloen@rchland.vnet.ibm.com (Larry Loen)
Subject: Re: Cryptography and P=NP
Sender: news@rchland.ibm.com
Message-ID: <1992Nov24.145539.24166@rchland.ibm.com>
Date: Tue, 24 Nov 1992 14:55:39 GMT
Reply-To: lwloen@vnet.ibm.com
Disclaimer: This posting represents the poster's views, not necessarily those of IBM
References: <1992Nov16.084503.10141@vax.oxford.ac.uk> <BxvEF3.Kqw.2@cs.cmu.edu> <1992Nov18.193900.20199@rchland.ibm.com> <1992Nov19.172719.1540@fid.morgan.com> <1992Nov19.193036.26711@rchland.ibm.com> <1992Nov20.090548.5840@cs.ruu.nl> <1992Nov23.211311.2817@walter.bellcore.com>
Nntp-Posting-Host: wo0z.rchland.ibm.com
Organization: IBM Rochester
Lines: 47

In article <1992Nov23.211311.2817@walter.bellcore.com>, jgn@homebrew.bellcore.com (Joseph G. Niederberger) writes:
|> In article <1992Nov20.090548.5840@cs.ruu.nl> piet@cs.ruu.nl (Piet van Oostrum) writes:
|> >>>>>> lwloen@rchland.vnet.ibm.com (Larry Loen) (LL) writes:
|> >
|> >LL>  Why doesn't Cantor's diagonal
|> >LL> argument crop up somewhere and spoil everything?  (I don't necessarily mean
|> >LL> the original, but an appropriate analog of it).
|> >
|> >Why should it?
|> 
|> Real answer is because algorithms are (by definition) not allowed to be 
|> infinitely long. Cantor's diagnolization works because decimal expansions
|> of real numbers are (countable)-infinitely long.
|> 

But, is this really true?  How strong is the distinction between algorithms
and the data they operate upon?

In particular, since Turing machines can execute with an arbitrarily long
interger (or floating point :-) ) number, and since the Universal Turing
Machine can store programs as numbers on the tape, why is there, of necessity,
a limit on the length of programs that satisfy P?  That is, why are there not
countably infinite numbers of algorithms of class P?  If one takes the class
of programs that execute all algebraic expressions, surely such programs (which
take only a single equation as input) is of class P.  Yet, just as clearly,
there are countably infinite many of them, expressed one equation at a time.

Note here I am citing the trival "evaluate it" algorithm -- I am not even
talking about solving simultaneous equation solving or anything that does
not have a simple, linear run time.  Programs like:

  answer =   5* x + 7*(x**2)  for all x.    (What actually varies from
      program to program are the "5" and the "7" and I already trivially
      have programs up to cardinality N that must be P complete, surely). 
      In fact, the number of terms of such a program can also clearly be of
      cardinality N.  So, I don't even need to run more than one input value
      to get to cardinality N.

Just as surely, I am not obliged to express such programs only as fodder
for the Universal Turing machine, though that may be convenient.  In any case,
I believe I have established that one cannot rule out infinity, per se, from
class P.  Have I missed anything?  Perhaps the Cantor argument still does not
apply, but the conditions under which it usually does seem present.

-- 
   Larry W. Loen        |  My Opinions are decidedly my own, so please
                        |  do not attribute them to my employer
