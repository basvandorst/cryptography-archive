Path: msuinfo!netnews.upenn.edu!jvnc.net!yale.edu!qt.cs.utexas.edu!cs.utexas.edu!milano!cactus.org!ritter
From: ritter@cactus.org (Terry Ritter)
Newsgroups: sci.crypt
Subject: Re: URNG
Message-ID: <1992Nov24.215013.610@cactus.org>
Date: 24 Nov 92 21:50:13 GMT
References: <books.124.0@fsunuc.physics.fsu.edu> <P678CIV@minnie.zdv.uni-mainz.de>
Organization: Capital Area Central Texas UNIX Society, Austin, Tx
Lines: 128


 In <P678CIV@minnie.zdv.uni-mainz.de>
 pom@anke.imsd.uni-mainz.DE (Prof. Dr. Klaus Pommerening) writes:

>The following URNG was proposed by Blum, Blum and Shub.

 Great!  Let's discuss it.  (BB&S [2] and [3] are essentially
 identical.)

>
>Parameter generation:
>  Find 2 prime numbers p and q with
>   - (p-1)/2 and (q-1)/2 are also prime,
>     in particular p and q are congruent 3 mod 4.

 BB&S *also* requires that at most one of p and q have 2 as a
 quadratic residue with respect to p1 = (p-1)/2 and q1 = (q-1)/2,
 and calls such values "special." [3:378]

 Primes of the proper form are not especially common.  L'Ecuyer and
 Proulx define P'n as the set of (n/2)-bit special primes, then say
 "the fraction of (n/2)-bit integers that are in P'n is presumed to
 be asymptotically ((n/2) ln 2)^-3."  And "for (n/2) = 256, this is
 about one in 15 millions." [5:472]

 Also, x0 must be specially selected [3:377] (see below).


>   - p and q are at least 2^{256}, and p-q is not small.

 I have reviewed BB&S [3], but cannot find these particular
 recommendations.  Is there a reference?

 The problem here is that, if the generator is not properly
 constructed, even big numbers may not save it.  In particular,
 x^2 mod N is not a permutation generator, and has a structure
 consisting of many cycles with various numbers of states.  If we
 happen to select an x0 on a short cycle, it will not be necessary
 to "predict" future values, after we have traversed the cycle once.

 For example, consider P = 23, Q = 47 (N = 1081), a system
 specifically given as an example "of the prescribed form" [3:378]:
 Starting with x0 = 46 we get 1035, then 1035 repeatedly; a
 degenerate cycle.  Starting with x0 = 47, we get 47 again;
 another degenerate cycle.  Starting with x0 = 48 we get 142,
 706, 95, 377, 518, 236, 565, 330, 800, and 48: a 10-state cycle.
 There is another 10-state cycle, four 11-state cycles, and two
 110-state cycles.  The system is not a permutation generator.


>  Multiply them together: m = pq, and forget p and q.
>Then factoring m is infeasible. And there is no efficient algorithm
>that decides whether an arbitrary interger x is a quadratic residue
>mod m.
>
>Pseudorandom number generation:
>  Take a random seed x0 between Sqrt[m] and m, such that gcd(x,m) = 1.
>  Calculate a sequence (x_1,...x_n) by x_i = x_{i-1}^2 mod m.

 I am unable to find the gcd(x,m) = 1 criterion in BB&S [3];
 is there a reference?  (It would of course be really nice if
 this simple test was able to replace the need to find the order
 of the cycle containing x0, because that is tough.)

 BB&S does require that x0 be selected such that the "order"
 of x mod N (that is, the length of that cycle) is a particular
 value, specifically Lambda(N)/2, where Lambda is "Charmichael's
 Lambda function." [3:377]  Moreover, evaluating the order of
 x0 mod N will take some work. [3:379]

 L'Ecuyer and Proulx suggest that finding special primes and some
 x0 which is an element of the appropriate cycle may require 10^5
 fairly-involved test-certifications; they report 155 hours of CPU
 time (on a Micro Vax II) for an *improper* 128-bit design. [5:472]

 Furthermore, finding a correct N is not a one-time set-up.
 L'Ecuyer and Proulx assert [5:173] that N "must remain random,"
 and that N "is part of the seed."   The penalty for violating
 this restriction is apparently the loss of guaranteed polynomial
 time unpredictability, which is the whole reason for using this
 generator.


>  Output the log2(m) least significant bits from each x_i.
>
>(In fact B, B and S proposed outputting 1 bit from each x_i. The
>security of log(n) bits is due to Alexi, Chor, Goldreich and Schnorr.)

 Vazirani and Vazirani [6] shows x^2 mod N to have log N secure
 bits, and also claims that Alexi, Chor, Goldreich and Schnorr [1]
 shows a similar result, but I can only find a log log N statement
 [1:449, 455-456].  The claim could be a misprint or reflect later
 work by the same group; perhaps the final papers clear this up.


 If anyone can provide any other insights into the x^2 mod N design,
 or has additional references which provide such insights, I would
 like to hear about them.


 References

 [1]  Alexi, W., B. Chor, O. Goldreich, and C. Schnorr.  1984.
      RSA/Rabin Bits are 1/2 + 1/poly(log N) Secure (Extended
      Abstract).  25th IEEE Symposium on the Foundations of
      Computer Science. 449-457.

 [2]  Blum, L., M. Blum and M. Shub.  1983.  Comparison of Two
      Pseudo-Random Number Generators.  Advances in Cryptology:
      CRYPTO '82 Proceedings.  New York: Plenum Press.  61-78.

 [3]  Blum, L., M. Blum and M. Shub.  1986.  A Simple Unpredictable
      Pseudo-Random Number Generator.  SIAM Journal on Computing.
      15: 364-383.

 [4]  Kranakis, E.  1986.  Primality and Cryptography.  Wiley.

 [5]  L'Ecuyer, P. and R. Proulx.  1989.  About Polynomial-Time
      "Unpredictable" Generators.  Proceedings of the 1989 Winter
      Simulation Conference.  467-476.  New York:  IEEE Press.

 [6]  Vazirani, U. and V. Vazirani.  1985.  Efficient and Secure
      Pseudo-Random Number Generation (Extended Abstract).
      Advances in Applied Cryptology: Proceedings of CRYPTO 84.
      193-202.  Springer-Verlag.

 ---
 Terry Ritter   ritter@cactus.org
