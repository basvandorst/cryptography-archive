Xref: msuinfo sci.crypt:11505 comp.theory:5932
Path: msuinfo!netnews.upenn.edu!dsinc!spool.mu.edu!wupost!cs.utexas.edu!newsfeed.rice.edu!uw-beaver!cs.ubc.ca!unixg.ubc.ca!kakwa.ucs.ualberta.ca!access.usask.ca!mizar.cc.umanitoba.ca!silver.cs.umanitoba.ca!sbloch
From: sbloch@silver.cs.umanitoba.ca (Stephen Bloch)
Newsgroups: sci.crypt,comp.theory
Subject: Re: Cryptography and P=NP
Message-ID: <ByApML.KHD@ccu.umanitoba.ca>
Date: 25 Nov 92 23:37:33 GMT
References: <1992Nov19.172719.1540@fid.morgan.com> <1992Nov19.193036.26711@rchland.ibm.com> <1992Nov21.191944.87493@Cookie.secapl.com> <1emhb6INNadc@iskut.ucs.ubc.ca>
Sender: news@ccu.umanitoba.ca
Distribution: inet
Organization: Computer Science Dept., University of Manitoba, Winnipeg, Canada
Lines: 26
Nntp-Posting-Host: silver.cs.umanitoba.ca

ramsay@math.ubc.ca (Keith Ramsay) writes:
> Suppose we have a problem
> formulated as an NP problem, but which is in fact in P. This
> "universal" algorithm will indeed halt in polynomial time for the
> cases for which the answer is "yes" (by finding the "non-deterministic
> guess" required to show that the answer is indeed "yes"). If the
> answer to the problem is "no", however, one may not know when to stop
> looking for a positive answer. For it really to solve such a
> problem-class in polynomial time, it has to have some rule for
> determining when to say "no".

Lemme see if I'm reading this right.  Given a language L1 which is
explicitly in NP, I can write down an explicit algorithm A1 which, if
P=NP, accepts all strings in L1 within time bounded by some (unknown
to me) polynomial in their lengths, but doesn't know when to reject.

It seems to me, then, that given a language L2 which is explicitly in
NP intersect co-NP, I can write down an algorithm A2 which, if P=NP,
DECIDES membership in L2 in time bounded by some (unknown to me)
polynomial: we know how to recognize witnesses for both membership and
non-membership in polynomial time, so we simply enumerate polytime
algorithms and check whether their outputs are witnesses for one
answer or the other.  Right?

					Stephen Bloch
				sbloch@silver.cs.umanitoba.ca
