Newsgroups: sci.crypt,alt.privacy
Path: msuinfo!uwm.edu!cs.utexas.edu!uunet!pipex!uknet!mcsun!news.funet.fi!network.jyu.fi!kuru
From: kuru@jyu.fi (Esa Kuru)
Subject: NLC - a new cipher frame.
Message-ID: <1993May26.045040.4623@jyu.fi>
Organization: University of Jyvaskyla, Finland
Date: Wed, 26 May 1993 04:50:40 GMT
Lines: 142
Xref: msuinfo sci.crypt:16703 alt.privacy:7045

This subject of NLC is partly continuation to the subject of:
Rubber-hose-file-resistant crypto file system

>>Why not use a public key system, leaving the private key at home in the
>>safe. Use the public key to encrypt your notes. When safely out of the
>>country, you can decrypt them.
>
>Because if you get caught with encrypted material and don't give them
>the key, or use a privacy-resistant technology like Clipper, you won't 
>get out of the country.  		[stuff deleted/EK]

They might rather want to read all they can and fill the rest of the
filesystem with '00'-bytes with a given set of keys that you agreed to
give them. So You loose permanently all the 'important' encrypted
material - and don't have to go to jail just for possessing
seemingly zero bytes and get out of the country.  Or if they are nasty, 
they will engage fully comprehensive AI inference engine to produce 
rules for fast factorization based on maths of big numbers - and put 
You into jail for possessing classified or 'important' data that you
wish to hide.

>Public-key systems might work well for stuff you transmit out of the country
>via your INMARSAT terminal, for use only when you get some really
>sensitive and damning material.  When you start transmitting it, the
>government may realize that you're transmitting encrypted material
>and try to stop you, but they may not react in time to stop most of it
>from getting out.  You may have sacrificed your own life transmitting
>the material, but once they've got you, the material has already been
>sent.

The government may perhaps never know that You are transmitting encrypted
material if the message looks like an ordinary plain text message.
One may ask:'How is this accomplished?'
Consider the following a new algorithm utilized:

Just for fun: (Anyone 'care'/'have time' to implement following 
uncrackable cryptography algorithm to PD?  I'm too busy to do it. )


<NATURAL LANGUAGE CRYPTOGRAPHY (NLC) ALGORITHM>

Why is natural language crypto algorithm preferred in extreme cases?

While the secred message is being transmitted, there is no-one
who could tell that there is a ciphered message m' in a message m.
If one could determine that this actually was an encrypted message
by following the actions the receiver performed after receiving 
a secred message some authority would compell sender reveal key1 and 
key2-keys, the sender may choose the depth of innocent messages to 
be decoded by revealing just above that critical depth (=i-1) 
of key2's without revealing the actual secred message.
This way there may be meaningful sentences chosen by you and 
sensible meaning at every level could be embedded into the 
ciphered message.

The only disadvantage of using this kind of algorithm is that
the messages tend to grow very large.  However these may be 
split into smaller pieces not to stand out from other crap.

With this I want to propose that there is no reason for any
institute trying to decipher any messages, since cryptoalgorithms
can be built so complex that nothing can reveal a secred message.


<ALGORITHM:>

A.  ENCODE

1. Get a key1 (Known also by DECODEr), i=0
2. Put cleartext a or m[i-1] at level i to be encoded into m[i]
3. Get a key2[i] (Known also by DECODEr)
4. Process m[i] and encrypt it into m'[i] using key2[i]. 
	See Description (*) below.
5. i:=i+1
6. Repeat all steps from A:2-6 recursively by key1 times.
8. Transmit m'[i]
7. End 

B. DECODE

1. same as A, but reversed (a kludge -eh!)
2. End

Description (*)
Choose your favorite PGP algorithm to encode/decode the actual
messages (or not whatever you like). After using PGP on m[i], 
preprosess m[i] so that only (forexample) different nouns of
message m[i] are indexed and replaced into m'[i] from bible or 
any common known source of text (like some posted USENET news 
article) in same order(**). Thereby swithcing context build new 
sentences using new nouns found in m'[i]. 
The order(**) could of course be modulated by your favorite
ciphering algorithm.

Verbs could be used similarly as nouns above thus providing
2 parallel recursive paths of encryption/decryption and thus 
leaves you a choise not to reveal any more of the binary tree
path than you wish to.
<END OF ALGORITHM.>


<PROPERTIES OF NLC>

Pubkeys could also be updated using USENET-news and NLC together.
  Above description of NLC is intuitive and it is not quite accurate 
as it uses linguistic approach to the subject and leaves implementation 
details to the programmers. Anyway it should give you an idea.
  One could speak NLC-messages over an ordinary telephone
line without digital encryption/decryption schema built into 
telephones using a human 'common'-look like language.
And I don't have to sacrifice my life for transmitting messages
over a net. I could of course be forbidden to use net but
what use would the USENET then be for anyone anymore?
I don't think that anyone would torture me for NLC-keys
than for ordinary cryptography keys.

If anyone comes upto using NLC for real then bringing the concept
of 'government' into this newsgroup becomes outdated, since they
cannot decipher NLC-messages. The government would eventually
run out of paper if I started to list my keys found in binary tree
(one key in each node).

After all the existance of this NLC ciphering is independent 
of my existance or the fact that I ever came up with this.
Therefore it can be considered as a 'new?' method into the
area of cryptography without need of revenging me for revealing
of couple of harmless lines of (plain?;-o) text.
I have the right to permute my words in any order that I like,
to express myself almost(=within good habits) freely - 
even in multiple levels - right?

> 		[stuff deleted/EK]
>						Gordon L. Burditt
>						sneaky.lonestar.org!gordon

Esa <kuru@jyu.fi>
PGP-public key is available in my .plan
-- 
/* ---------------------------------------------------------------------------
      Like programming? -No? Let the computer do it for You!
-------- If You get this code faster without -lm, please send me Yours ------*/
#define s(x) for(j=1;k>j++&&x/p[j]*p[j]-x;);if(j>k){p[i++]=x;printf("%d ",x);}
