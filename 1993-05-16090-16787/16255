Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!zaphod.mps.ohio-state.edu!darwin.sura.net!news-feed-1.peachnet.edu!umn.edu!csus.edu!netcom.com!mcafee.com!mrs
From: mrs@mcafee.com (Morgan Schweers)
Subject: Random-related questions (was: How secure is XOR & random numbers)
Message-ID: <1993May3.194923.13700@mcafee.com>
Keywords: encrypt XOR random not secure Knuth
Organization: McAfee Associates
References: <1rrjbjINNc6d@emx.cc.utexas.edu> <1993Apr30.182334.15377@chpc.utexas.edu>
Date: Mon, 3 May 1993 19:49:23 GMT
Lines: 58

Some time ago jonathan@chpc.utexas.edu (Jonathan Thornburg) happily mumbled: 
>In article <1rrjbjINNc6d@emx.cc.utexas.edu> ifbb657@emx.cc.utexas.edu
>(Doug) writes:
>| How secure is this:
>| 1. Obtain key
>| 2. Feed key as seed into random number generator.
>| 3. Use random number stream to XOR with the plaintext.
>
>It's not at all secure.  Ordinary random number generators aren't
>designed for this sort of usage, and their parameters can easily
>be recovered from a small segment of the "random number" stream.
>(See Knuth section 3.6, excercise 7, and references therein.)
>This segment can be obtained from (eg) probable-word guessing,
>or more generally any of the usual known-plaintext attacks.
>
>If you had a "cryptographic random number generator", for which
>the parameters weren't easily recoverable from the output stream,
>then such a system might be a useful cryptosystem.  But *good*
>cryptographic RNGs are hard to design (just like any other good
>cryptosystem).

Greetings,
    Now wait a second.  What about something simple like using the
output structure from MD5 to encrypt the next X bytes where X is the
size of the MD5 digest structure, then recalculating an MD4 for the
bytes up to and including the just-encrypted ones.  Your password would
be prepended to the file (and stripped off afterwards) thus jumbling the
initial values.

    Certainly it's not completely 'cryptographically secure' assuming
the person/group you're worried about KNOWS that you used that method
for the file, but a zero knowledge attempt to crack it would be *VERY*
seriously difficult.  (In fact, I can't quite think of how it would be
done.)  I understand that there's problems, like the bits aren't being
adequately scattered throughout the file, but I think the MD4
algorithm could be considered one heck of a 'random number generator'
for the purposes of encryption in this form.

    Of course it has the standard private-key problem of key-security,
and the also-standard problem of algorithm security.  If the idea, however,
is to have a bunch of encryption capabilities that are interestingly secure
then this one seems to have a reasonable level of security.  (Knowing the
algorithm reduces it to a brute force search, of course, but at least the
algorithm isn't obvious from the encrypted data.)

    Now, I could be COMPLETELY off base here (and probably am), since I
only toy with encryption.  It *SEEMS* mathematically reasonable.  Not
VERY secure, since it's not flinging bits around, but reasonable.

    Which brings me to another point.  Someone asked what would happen
if they took a random set of values, uuencoded it and posted it up asking
someone to crack it.  The response was that someone would probably run
x-random algorithm on it and prove that the values were sufficiently random
to be garbage.  Is there such an algorithm?  If so, isn't it possible with
sufficient iterations or multiple algorithms, to convert plaintext into
something which matches that algorithm?  Forcibly random, as it were?

                                                       --  Morgan Schweers
