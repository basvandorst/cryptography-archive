Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!linac!att!att!allegra!ulysses!ulysses!smb
From: smb@research.att.com (Steven Bellovin)
Subject: Re: NIST clip.txt
Message-ID: <1993May3.154635.27490@ulysses.att.com>
Date: Mon, 3 May 1993 15:46:35 GMT
Distribution: usa
References:  <1993Apr30.203349.27898@wdl.loral.com>
Organization: AT&T Bell Laboratories
Lines: 32

In article <1993Apr30.203349.27898@wdl.loral.com>, koontzd@phobos.lrcs.loral.com (David Koontz ) writes:
> >   5.   Upon generation (or entry) of a session key in the
> >          chip, the chip performs the following actions:
> >
> >
> >          a.   Encrypts the 80-bit session key under the unit key
> >               producing an 80-bit intermediate result;
> >
> >          b.   Concatenates the 80-bit result with the 25-bit
> >               serial number and a 23-bit authentication pattern
> >               (total of 128 bits);
> >
> >          c.   Enciphers this 128 bits with family key to produce
> >               a 128-bit cipher block chain called the Law
> >               Enforcement Field (LEF);
> 
> Ah..., a 64 bit block implies that the session key E(K,U) fits on block
> boundaries.  That should be 2 blocks with the 80 bit key added to an
> authenication pattern.  As in E(Kp1,U) & E(Kp2 & authen,U).

Not necessarily; there are several other ways to manage it.  First,
at programming time, the chip could run Skipjack in output feedback
mode, providing it with 10 bytes of U-dependent pseudo-random numbers,
These could be XORed with the session key.  That's output feedback
mode, and it's quite secure in this case.  Or they could use CFB
mode, and handle the left-over two bytes by re-encrypting the first
block of ciphertext, and XORing its first two bytes with the last two
bytes of K.  That mechanism is described in Davies and Price's ``Security
for Computer Networks''.

The timing diagrams for the chip should be instructive, but I haven't
had a chance to read them in detail yet.
