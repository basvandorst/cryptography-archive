Newsgroups: sci.crypt,alt.privacy.clipper
Path: msuinfo!agate!howland.reston.ans.net!wupost!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: Re: "Trapdoors" using non-public methods of cryptanalysis
Message-ID: <16BD014FD6.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
References: <TK.93May13194815@entropy.ai.mit.edu> <737395037@pike.cs.duke.edu> <16BCE100E3.C445585@mizzou1.missouri.edu>
Date: Sun, 16 May 93 23:52:51 CDT
Lines: 13
Xref: msuinfo sci.crypt:16534 alt.privacy.clipper:441

   Thinking about it, in a DES-like cryptosystem, it seems as easy to
insert a trapdoor into the key-scheduling algorithm as into the S-boxes.
In either case, it looks like the best chance for detecting the trapdoors
comes from analysing the round-by-round interdependencies between input
block, output block, and key.  Chaum discussed a meet in the middle attack
on DES with < 8 rounds that used the fact that different key bits had less
importance in round N than round N+1.  Some sort of statistical analysis of
the dependences of the subkeys on all bits of the keys would be pretty
important, as well as trying to find any "odd" patterns in subkey bits.
   Can anyone think of a way to insert a trapdoor into a key-scheduling scheme
that isn't at least somewhat obvious to someone who gets to see the algorithm?
 
   --John Kelsey
