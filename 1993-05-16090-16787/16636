Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!wupost!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: Re: Rubber-hose-resistant crypto file system
Message-ID: <16BD6D9FA.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
References: <1tdjpjINNkk1@hal.com> <pooka.737847508@access> <1tgb5oINNgtg@twain.ucs.umass.edu> <1993May22.104417.8020@bernina.ethz.ch>
Date: Sat, 22 May 93 15:30:00 CDT
Lines: 115

   I think the only way to get real resistance to rubber-hose techniques is
to make sure that deciphering the encrypted information requires the help
of someone else, entirely outside the power of the applier of the rubber hose.
Then, it makes sense to let *everyone* know that you're using this kind of
scheme.  Make sure that nothing you say or do could possibly force the holder
of that decrypting information to give up the key.  This could be done with
several different entities, using a threshhold scheme of some sort.
 
   Perhaps banks could offer this sort of services.  A sort of cryptographic
time lock, where M of the N directors of the bank have to agree to get the
decryption key, and all agree never to give out that key before a certain
agreed-upon date.
 
   It would be much better, though, if we could have some assurance that
no amount of pressure applied after the fact could force a piece of information
of this kind out.  For example, if a large nation's intelligence services
wanted a piece of information badly enough, or if someone at the top of a
powerful crime syndicate wanted it badly enough, those bank directors might
be put under some pressure.  (Anyone remember the stories about the judge
that disqualified himself in a trial of some high-level drug lord, after he
was mailed some snapshots of his granddaughter, taken through a rifle scope?)
Alternatively, someone with a lot of money might be able to offer some
tremendous bribes to some of the directors, and maybe apply other pressure to
others.
 
   The best solution I can think of is this:  There is some source of bits,
transmitted at a fairly low rate, which is seemingly random.  This needs to
be transmitting publicly, and it needs to be untouchable, so perhaps the
thing to do would be to put it on a communication  satelite.  The device
generates a stream of, say, 1024 bits per second.  These bits are generated
by using some secret information, available only to the builders of the
device, and by using some public information, such as the time (HH:MM:SS),
or some pseudorandom bits previously transmitted.  The important idea, though,
is that this should be predictable with the secret information.  Thus, the
makers of the device can sell me an RSA key for a 1024-bit modulus, and a
stream of 1024 bits which, when decrypted by XORing with a transmission
that this device will make sometime between 12:00 AM and 12:59 AM GMT, on
Dec 31, 2010, will give me the decryption key.
 
    I'm sure there are other possible protocols, which would assure me that
they hadn't kept a copy of the decryption key.  But the idea seems quite
usable.
 
    Now, to form their once-a-second pad of bits, they could use:
 
   HASH( GMT Time YYYYMMDDHHMMSS, Secret Device Information, Pseudorandom Bits)
 
    Where the psuedorandom bits might be, for example, the output from DES-
encrypting several 64-bit counters, in CBC mode.  The point is that it would
be reasnoably doable for the device manufacturers to predict an output pad
of bits, with knowledge of their secret information, but impossible for some-
one without access to that information to predict it.
 
    HASH could be keyed or unkeyed, and could output whatever number of bits
were needed.  For the above application, 8 applications of MD5 on the same
initial pad, perhaps encrypted under different keys each time, would work.
Or, simply expect them to listen to 8 seconds of the transmission in a row.
 
    The transmitted information should be archived, of course, since other-
wise, some information could be lost forever by a receiver malfunction.
Also, the satelite users shouldn't ever sell the same pad to more than one
user, for fear that multiple users may be able to deduce too much of each
others' keys.
 
    This could be done in other ways, as well.  For example, if you don't
like entrusting your data to the unbreakability of a one-way hash, then
how about simply including a 1024-bit pad for each week the service is to
be in place.  This could be produced by some proven physical source of
randomness.  The device simply keeps track of these pads, transmitting one
per week, as its internal instructions tell it.  Assuming that you could
include only 64 K of very reliable, nonvolitile memory, this would give
you 512 weeks of pads, or a little over nine years of time lock.  For longer
periods, either increase the time span each pad is meant to cover (which
decreases the number of pads the builder can sell), or increase the non-
volitile memory.
 
    There would be reliability problems with this, and also some problems
of trusting the device manufacturers not to retain some secret information
to allow them to predict the output pads.  Some additional ideas/questions:
 
1.   Are there pseudorandom generators that would be suitable for this kind
of application?  I beleive there are, but I'm not familiar enough to be sure
right now.
 
2.   This reminds me of the idea of storing messages in the binary expansion
of pi, or some other irrational number.  Is there some way of using some
similar sequence, using secret information that will make it impossible to
predict the sequence given all that came before it, that could be used?
 
3.   Could the device itself be able to participate in some sort of scheme
for generating your key and giving you the pad-encrypted version of it?  This
would require a little work to defend against active eavesdroppers, but it
would take the builders out of the equation.  The device could be reviewed
publically many times, inspected by lots of people, etc.  It could contain a
random number source to generate its initial information, which would not
be used until the satelite was in orbit.  Perhaps it would require a signed
certificate from its builders before it would give you a pad, to make sure
its builders could charge for the service.  How would it be possible to
guarantee that the builders hadn't come up with some way of leaking some
information through the pads?
 
4.   Where else could this be put besides in a satelite?  How would it be
possible to keep anyone from affecting it in any way?
 
5.   What kinds of risks would there be of someone destroying the device and
thus destroying all information counting on it?  (For example, suppose the
bad guys discover that I'm using these techniques, and that my data won't
be decryptable for five years.  Suppose they also don't care so much what this
data is, as that it doesn't ever get out....)
 
6.   Has anyone written about anything like this before?  This seems like
something that David Chaum would have already invented, in a considerably
more workable form....
 
   --John Kelsey, c445585@mizzou1.missouri.edu
