Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!sdd.hp.com!decwrl!decwrl!netcomsv!netcom.com!nagle
From: nagle@netcom.com (John Nagle)
Subject: Re: More one time pad stuff
Message-ID: <nagleC6LBxs.A9I@netcom.com>
Keywords: Kerckhoffs cryptography context one time pad
Organization: NETCOM On-line Communication Services (408 241-9760 guest)
References: <1rsamjINN6hk@no-names.nerdc.ufl.edu> <1993May1.044631.18300@chpc.utexas.edu>
Date: Thu, 6 May 1993 05:44:15 GMT
Lines: 48

jonathan@chpc.utexas.edu (Jonathan Thornburg) writes:
>In article <1rsamjINN6hk@no-names.nerdc.ufl.edu> LIONESS@ufcc.ufl.edu writes:
>| Okay, it seems that one time pad is pretty secure.  But is this a concept
>| of a pad, or do you actually need some huge document/source encryptor
>| that matches every word?

       As is well known, a one-time pad system must use RANDOM
(not psuedo-random) data that is used ONE TIME.  And real one-time pad
systems have been cracked because somebody screwed up and used the same
key data twice.  Supposedly, a USSR paper-and-pencil one-time system was
cracked because the one-time pads were generated by people typing "random"
letters on typewriters, and that wasn't random enough.

       Incidentally, two English texts XORed together can both be recovered
easily.  Random means RANDOM.  This cannot be overemphasized.  No
digitized music.  No old files.  No recirculating shift registers.
No memory dumps.  Random, based on some physical process with quantum
mechanics guaranteeing randomness.  And even then you have to check to
make sure the hardware is working right, and you're not picking up
clock noise on your Geiger counter or something.  It's incredibly hard
to generate random numbers.  (See "The Eudamonic Pie" for a discussion
of roulette-wheel prediction.)

       This is a general problem with key generation, not just one-time
key generation.  And it deserves more attention.  The keystroke-timing
approach seems good, but then, one always wonders if synchronously scanned
keyboards might introduce exploitable order.  One-time systems need a 
huge volume of key data, and generating it is hard.

       Nevertheless, one-time systems are great if you have traffic between
two points and can physically move data between them in advance of the
need to send secret data.  The US uses one-time systems between its
embassies and the State Department.  That's the typical application;
field unit to higher headquarters.  Note that field units can't
communicate with each other through this system.  The US-USSR
hotline was a one-time system (interesting side issue: do we have
a hotline link with each of the nuclear powers of the former USSR, or just
Russia?)

       The modern approach would probably be to build a hardware random
number generator, using a small radiation source (see "The Autodesk File",
by John Walker, for a circuit), record the data on some medium (diskettes
for low-volume traffic, DAT tape for high-volume) and send one copy of the
tape to the remote location by a trusted courier, using appropriate seals,
etc.  This is a giant pain, of course.  But it can be done if the
application requires it.

					John Nagle
