Path: msuinfo!uwm.edu!cs.utexas.edu!swrinde!gatech!enterpoop.mit.edu!eru.mt.luth.se!kth.se!hemul.nada.kth.se!md85-epi
From: md85-epi@hemul.nada.kth.se (Urban Koistinen)
Newsgroups: sci.crypt
Subject: Re: Are DSS + Diffie-Hellman useful?
Message-ID: <1993May21.183107.24277@kth.se>
Date: 21 May 93 18:31:07 GMT
Sender: usenet@kth.se (Usenet)
Organization: Royal Institute of Technology, Stockholm, Sweden
Lines: 54
Nntp-Posting-Host: hemul.nada.kth.se

In article <737954755snz@aph.demon.co.uk> aph@aph.demon.co.uk writes:
:In article <1993May21.051959.14336@kth.se> md85-epi@hemul.nada.kth.se writes:
:
:>Are the DSS and Diffie-Hellman algorithms patent free?
:
:Nope.  They are covered by patents held by Public Key Partners in the US.

If DSS can be licensed royalty-free and the Diffie-Hellman really become
free by 1997 then you might want to combine them to get a replacement for
RSA. (it only become free in the US by 2000)

I will try to avoid thinking about the quagmire of US patents.

:>If so, please tell me so that I may use them in my programs.
:
:You're in Sweden, aren't you?  Use RSA.  As they published before
:patenting, the patent isn't valid outside the US. 

In the lovely country Sweden there are no software patents.

I might as well include a description of a crypto algorithm intended
as a replacement for IDEA in pgp.

It is a block cipher for blocks of a size 2^n bits where n>=10.
Start by filling the block with the key string repeatedly, ie
KEYKEYKEYKEY.

Each round consist of:

1. For each 16 bit word (in order)
  use it to index TABLE to get a 32 bit word
  OP1 the word to the word N (mod 2^n) bits ahead

2. For each 16 bit word (in order)
  use it to index a 16 bit word relative to the current word
  if the indexed word is not the current or the next word
    OP2 the word to the next word

TABLE is a constant table of 2^16 random 32 bit words, it should
at least not be easy to detect nonrandomness.
N is a number from the interval 2^4 - 2^(n-1).
OP1 is either XOR or (ADD mod 2^32).
OP2 is either SWAP, XOR or (ADD mod 2^32).

Only the key string is secret.

If multiple buffers are encrypted, the last buffer become the
key for the next.

Is it any good?
Who did it before me?
-- 
Urban Koistinen - md85-epi@nada.kth.se
Stop software patents, interface copyrights:  contact lpf@uunet.uu.net
