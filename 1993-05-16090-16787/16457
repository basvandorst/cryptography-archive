Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!gatech!ukma!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: PRNG's, one-time pads, and stream ciphers
Message-ID: <16BCCA4E.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
References: <6066@npg-sd.SanDiegoCA.NCR.COM> <6067@npg-sd.SanDiegoCA.NCR.COM>
Date: Wed, 12 May 93 00:43:55 CDT
Lines: 71

Received: from MIZZOU1 (SMTP) by MIZZOU1 (Mailer R2.10 ptf000) with BSMTP id
 0377; Wed, 12 May 93 00:40:41 CDT
Received: from monad.missouri.edu by MIZZOU1.missouri.edu (IBM VM SMTP V2R2)
   with TCP; Wed, 12 May 93 00:40:40 CDT
Received: from muphnx4 by monad.missouri.edu (NX5.67c/NX3.0M)
 	id AA06413; Wed, 12 May 93 00:40:40 -0500
Received: by  muphnx4.mugcnx1.missouri.edu  (NeXT-1.0 (From Sendmail
 5.52)/NeXT-2.0)
 	id AA01375; Wed, 12 May 93 00:39:21 CDT
Date: Wed, 12 May 93 00:39:21 CDT
From: c445585@muphnx4.missouri.edu (John Kelsey)
Message-Id: <9305120539.AA01375@ muphnx4.mugcnx1.missouri.edu >
To: c445585@mizzou1.missouri.edu
 
     From: friedman@chaparral.raleigh.ibm.com (Perry Friedman)
     Subject: Pseudo random, one-time pad
 
     There has been much discussion about one time use random masks...
     I was wondering why pseudorandom, but UNKNOWN, isn't simply good
     enough.
 
   It depends on what you mean by "pseudorandom."  Ideally, you'd want
to know that, given N bits of the generator's output, it's
computationally infeasable for an enemy to learn anything about the
internal state of your generator.  I know of some pseudorandom number
generators that have been shown to have that quality, assuming that
some underlying problem (like finding discrete logarithms) is
computationally infeasible.  If I remember, I'll try and post some
references.  Unfortunately, most such generators are *not* very fast.
 
 
     Suppose you use a pseudorandom mask (generated from some key, used
     once).  Now suppose every possible mask of length X is generatable
     by some key.  Then any message of length X is provably UNBREAKABLE,
     since EVERY message of length X is generatable by some key for any
     clear text.
 
   Well, there's a *little* problem with this.  Suppose you use a
128-bit key to generate 10000 bits of mask.  How many possible keys
are there?
   # of possible keys  = 2 ** 128
   # of possible masks = 2 ** 10000
 
   There will *never* be more than 2**128 different masks of any
length generated only from that key.  This is why it's not "provably
secure" in the same sense as a true one-time pad--there are some
ciphertexts of length 10000 bits that are more likely to occur than
others, given some known distribution of plaintext bits.  [I'm really
not expressing this idea very well.  Help!]
 
   The rest of your message dealt with a proposed PRNG based on
multiple counters MODed by different primes.  The problem of
predicting its output seems at this late hour like it would be a
matter of a system of N linear equations.  I don't think this would be
all that hard to crack, and I may hack around on it a bit if I have
some spare time in the next couple of days.
 
   Suggestion: Try implementing your scheme, and look at a long string
of the output values it gives you, in decimal, hex, and binary.  This
can show you a *lot* of weaknesses in PRNG's quickly.  If there's not
an obvious pattern, then try running some simple tests on it.  Are the
1's and 0's in the output stream balanced?  How many runs of 20 "0"
bits in a row are there in a stream of 1000 bits generated by your
scheme?  How many runs of 8 "0" bits?  Try a Chi-square test, to
determine randomness.  (Many good PRNG's will pass these tests that
are still not at all secure.  But if they don't pass these tests,
they've got some obvious problems.)
 
   --John Kelsey, c445585@mizzou1.missouri.edu
 
 
