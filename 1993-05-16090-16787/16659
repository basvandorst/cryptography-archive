Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!uunet!mcsun!Germany.EU.net!unidus.rz.uni-duesseldorf.de!lannert.rz.uni-duesseldorf.de!TSOS
From: TSOS@uni-duesseldorf.de (Detlef Lannert)
Newsgroups: sci.crypt,alt.privacy
Subject: Re: Rubber-hose-resistant crypto file system
Date: Mon, 24 May 1993 16:40:37 GMT
Organization: Universitaetsrechenzentrum, Heinrich-Heine-Universitaet, Duesseldorf
Lines: 94
Message-ID: <TSOS.427.738261636@uni-duesseldorf.de>
References: <1tdjpjINNkk1@hal.com>
NNTP-Posting-Host: lannert.rz.uni-duesseldorf.de
Keywords: cryptographic file system, notebook computer
Xref: msuinfo sci.crypt:16659 alt.privacy:7016

In article <1tdjpjINNkk1@hal.com> howard@hal.com (Howard Gayle) writes:

[...]
>      REQUIREMENTS
>
>In this section I list the requirements for a notebook
>encrypted file system.  I claim that a system that meets these
>requirements can withstand the sort of attack described above.

Your proposed scheme is not absolutely `rubber-hose proof', but 
then you don't claim it to be, so this is not a valid criticism. 
I think it is an interesting approach, particularly the fact that 
the presence of sensitive data is not obvious and de facto cannot 
be proven by an adversary. 

I'd like to suggest a few alterations which might -- imHo -- improve 
this scheme wrt implementation and handling; further comments are 
welcome.

[...]
>6) A file system can contain hundreds of encrypted files.  In
>   other words, this is a design for a notebook, not a file
>   server.

The whole `rubber-hose resistant' file system could reside within 
a MesS-DOS file, for instance, and behave like one of the numerous 
space-savers with password protection which are so popular with 
notebook users. 

A master password should regulate the access to the whole file system 
(under normal working conditions) so that a curious but not malevolent 
user won't erase all useful data in this file system inadvertently.

When the file system is mounted and the correct master password 
supplied, a few (alibi) files could be visible in clear text. This 
might satisfy most rubber hosers already.

The individual passwords for the `invisible files' should not be 
prompted but entered via a separate program _before_ the file system is 
mounted. This program would hash the passwords/pass phrases to fixed 
length keys and place these somewhere in the main memory. 

[...]
>The file system is a linear sequence of chunks on disk (or a
>disk partition).  Each chunk is one or more disk sectors.  Each
>chunk starts with a chunk header containing a magic number, the
>size of the chunk, and a CRC (checksum) on the chunk header.
>When a file system is initialized, it is filled with chunks
>whose sizes are taken from a random distribution that captures
>the statistical properties of real files.  Except for the chunk
>header, each chunk is initialized with random bytes.

Alternatively, to avoid fragmentation problems, the `chunks' could 
all be of the same size (= a multiple of or equal to the [hardware] 
block size). The `chunk header' then would contain a link to the 
following `chunk'; this would at the same time render the headers 
within one logical file sufficiently different so that the file 
size and location would not be obvious and could not be recovered 
by the bad guys.

The `chunk headers' could even be separated from the data and reside 
in a separate `pseudo-deleted' file if this makes the implementation 
easier. 

[...]
>To remove a file, the part of the chunk after the chunk header
>is overwritten with random bytes. 

Free space within the file system (or data protected by a not 
specified password) could be overwritten at random times with 
random data whenever the processor is idle; this would make the 
unused/invisible data perhaps even `more random', make the retrieval 
of formerly written data more difficult, and automatically start data 
destruction whenever the computer is used in an `unfriendly environ-
ment' (so that later entry of the right passwords wouldn't help any 
more).

[...]
>      CONCLUSION
>
>No complete solution to the "rubber hose" problem exists,
>because it comes down to proving that one does *not* know
>something.  The system described in this article does allow for
>"plausible deniability."

And deniability would be more plausible the less the owner of the 
notebook knows about computers and operating systems ... The 
unreadable data on the disk might just be left over from compressed 
binary files, used and logically deleted by the previous owner ;-)
--
Detlef Lannert       DC3EK       E-Mail: tsos@rz.uni-duesseldorf.de
PGP 2.2 key via server or finger lannert@clio.rz.uni-duesseldorf.de
"I am Psmith." - "Oh, you're Smith, are you?" - "With a preliminary
P. Which, however, is not sounded."                   P.G.Wodehouse
