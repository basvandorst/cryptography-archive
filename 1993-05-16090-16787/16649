Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!gatech!udel!rochester!cantaloupe.srv.cs.cmu.edu!tgl
From: tgl+@cs.cmu.edu (Tom Lane)
Subject: Re: Rubber-hose-resistant crypto file system
Message-ID: <C7IMqB.C6H.2@cs.cmu.edu>
Summary: minor glitch
Keywords: cryptographic file system, notebook computer
Sender: news@cs.cmu.edu (Usenet News System)
Nntp-Posting-Host: g.gp.cs.cmu.edu
Organization: School of Computer Science, Carnegie Mellon
References: <1tdjpjINNkk1@hal.com>
Date: Mon, 24 May 1993 05:18:08 GMT
Lines: 40

howard@hal.com (Howard Gayle) writes:
> [a bunch of neat ideas not reproduced here]

Nice design.  As others have pointed out, this can't be said to be
rubber-hose-proof: very few of us would fail to reveal the keys to a
sufficiently determined inquisitor.  Worse, the mere usage of this type of
file system would render an inquisitor unlikely to be satisfied with the
first (or second) key revealed.  I wouldn't be surprised if using this type
of system at all amounted to signing your own death warrant.  Your only hope
is that the inquisitor is not actually prepared to kill you in the process
of obtaining whatever he can.  In the worst case, even when you *have*
revealed all the keys, you can't convince the inquisitor of it!  Not fun.

But let's take the system on its own terms, as a source of "plausible
deniability".  I only noted one problem:

> The random numbers with which the chunks are initialized, and
> with which freed chunks are overwritten, should ideally be
> truly random.  If the opponent discovers any pattern in a free
> chunk, it may be taken as evidence that the chunk is actually
> an encrypted file.

Right comment, wrong design.  Assuming that the encrypted files are
less than "truly random", the *last* thing you want is for the free
blocks to be statistically distinguishable from the un-free blocks.
That would immediately provide evidence that some keys were not yet
revealed.  Hence the fill data must look just like the hidden files.

The best way of erasing a file in this system would be to overwrite
*only the session key* with random data; the file body is left as is,
and so is statistically indistinguishable from the other encrypted files.
(We are, of course, assuming that the cryptosystem is good enough that
we needn't worry about the enemy breaking the code without having the
keys; hence no risk from failing to erase data.  If this is not true,
the whole problem is moot.)

Correctly initializing a blank filesystem is left as an exercise for
the reader...

			regards, tom lane
