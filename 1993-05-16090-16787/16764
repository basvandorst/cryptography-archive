Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!wupost!mont!mizzou1.missouri.edu!C445585
From: C445585@mizzou1.missouri.edu (John Kelsey)
Subject: Re: CBC and planned-plain-text attacks
Message-ID: <16BDC14D02.C445585@mizzou1.missouri.edu>
Sender: news@mont.cs.missouri.edu
Nntp-Posting-Host: mizzou1.missouri.edu
Organization: University of Missouri
References:  <930528122512.474502@DOCKMASTER.NCSC.MIL>
Date: Fri, 28 May 93 23:40:47 CDT
Lines: 49

In article <930528122512.474502@DOCKMASTER.NCSC.MIL>
WHMurray@DOCKMASTER.NCSC.MIL writes:
 
>It is intuitively obvious that CBC will raise the cost of such an
>attack.  (I never speak in terms of "breaking" or "defeating" in
>discussing crypto, but rather in terms of "cost of attack" or
>"resisting.")
 
>However, since intuition often serves us poorly in crypto,
>I once put the question to Don Coppersmith.  He responded that he
>was "unable to answer."  (I inferred some information from that
>answer.)
 
   Hmmm.  If I can control the IV used, then I should be able to apply an
adaptive chosen plaintext attack.  This isn't particularly pretty, since
it requires that I go through N iterations of submitting a chosen plaintext,
reviewing it, and generating a new one, to get N chosen plaintext blocks
encrypted.  (The same holds true if the same IV is used each time.)
 
   This works like this:  I submit a single 0 block for encryption.  I get
back C0 = E(0 XOR IV).  I want to get chosen plaintext X encrypted, so I
calculate P1 = C0 XOR X, and submit as my next chosen plaintext 0,P1.  I get
back C0,C1 where C0 is as above, and C1 is E(X).  From the knowledge of C1,
you can generate P2, P3, etc.  This is hideously impractical.
 
   Unfortunately, this wasn't exactly what I had in mind--I realized the
flaw in my original idea at work today, and worked out a way of doing this.
 
   With a long string of CBC-encrypted known-plaintext, you may be able to
get the necessary information to form a chosen plaintext attack that will
work.  Essentially, you'd build a table of input blocks-->output blocks, and
then you'd look for ways to get them to come out.  Unfortunately, it seems
like you'd have a really hard time applying this unless you had an incredible
number of known plaintext/ciphertext pairs.
 
   Biham and Shamir the possibility of using the random-looking inputs to
the encryption function that occur in CBC mode to allow for known-plaintext
variations of differential cryptanalysis.  Again, they require some pretty
large amounts of known plaintext.
 
   As an interesting aside, though, I can see why CBC alone isn't enough
to authenticate a long message--if any repetitions occur in the inputs to
the ciphertext, you can alter the encrypted message in some well-defined
ways, right?  (For 2**32 blocks or so, you start getting high probability
of repetitions.)  Ie, if the input block to ciphertext 10 and ciphertext
99 are the same, then we can delete ciphertext blocks 10 through 98 and
the final CBC value will be the same....
 
   --John Kelsey
