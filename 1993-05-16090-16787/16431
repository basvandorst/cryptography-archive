Newsgroups: sci.crypt
Path: msuinfo!agate!linus!linus.mitre.org!linus!mbunix!eachus
From: eachus@spectre.mitre.org (Robert I. Eachus)
Subject: Re: Random-related questions (was: How secure is XOR & random numbers)
In-Reply-To: mrs@mcafee.com's message of Mon, 3 May 1993 19:49:23 GMT
Message-ID: <EACHUS.93May10134204@spectre.mitre.org>
Sender: news@linus.mitre.org (News Service)
Nntp-Posting-Host: spectre.mitre.org
Organization: The Mitre Corp., Bedford, MA.
References: <1rrjbjINNc6d@emx.cc.utexas.edu> <1993Apr30.182334.15377@chpc.utexas.edu>
	<1993May3.194923.13700@mcafee.com>
Date: Mon, 10 May 1993 18:42:04 GMT
Lines: 39

In article <1993May3.194923.13700@mcafee.com> mrs@mcafee.com (Morgan Schweers) writes:

  > Some time ago jonathan@chpc.utexas.edu (Jonathan Thornburg) happily mumbled: 
   >> If you had a "cryptographic random number generator", for which
   >> the parameters weren't easily recoverable from the output stream,
   >> then such a system might be a useful cryptosystem.  But *good*
   >> cryptographic RNGs are hard to design (just like any other good
   >> cryptosystem).

  Change might be to is.  If you have a cryptosystem which generates a
pseudo-random bit-stream with a sufficently long period, then XORing
the bit-stream with plaintext is a sufficiently secure method of
encypherment.  In particular one-time pads are normally used this way.

   >     Which brings me to another point.  Someone asked what would
   > happen if they took a random set of values, uuencoded it and
   > posted it up asking someone to crack it.  The response was that
   > someone would probably run x-random algorithm on it and prove
   > that the values were sufficiently random to be garbage.  Is there
   > such an algorithm?  If so, isn't it possible with sufficient
   > iterations or multiple algorithms, to convert plaintext into
   > something which matches that algorithm?  Forcibly random, as it
   > were?

   Sounds like sour grapes to me!  The first test to run on proposed
RNGs (and sometimes cryptosystems) is to see if the output is
detectably non-random.  Especially in systems where the key is XORed
with the plaintext as above, the process will not reduce the apparent
entropy of the bit stream.  So there is no easy way to determine
whether something is enciphered plaintext or random gibberish.  (The
hard way, of course, is to crack the encryption scheme.) 

--

					Robert I. Eachus

with Standard_Disclaimer;
use  Standard_Disclaimer;
function Message (Text: in Clever_Ideas) return Better_Ideas is...
