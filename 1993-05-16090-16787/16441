Newsgroups: sci.crypt
Path: msuinfo!agate!howland.reston.ans.net!wupost!csus.edu!netcom.com!straits
From: straits@netcom.com (Stewart C. Strait)
Subject: Re: Random-related questions (was: How secure is XOR & random numbers)
Message-ID: <straitsC6upAI.IK2@netcom.com>
Organization: NETCOM On-line Communication Services (408 241-9760 guest)
X-Newsreader: TIN [version 1.1 PL6]
References: <EACHUS.93May10134204@spectre.mitre.org>
Date: Tue, 11 May 1993 07:11:04 GMT
Lines: 45

Robert I. Eachus (eachus@spectre.mitre.org) wrote:
>  Change might be to is.  If you have a cryptosystem which generates a
>pseudo-random bit-stream with a sufficently long period, then XORing
>the bit-stream with plaintext is a sufficiently secure method of
>encypherment.  In particular one-time pads are normally used this way.

A sufficiently long period is not at all sufficient for security, and
we may deduce from some potential weaknesses that one-time pads are
NOT used this way.

A trivial example: suppose the pseudo-random stream is the numbers
0, 1, 2, ... , n-1 written as some sort of large binary integers.  We
would start over at 0 if we get to n-1, so the period is n, but we
also suppose that n is very large, say 10^100.  This cipher and slight
variations of it have many regularities and should be easy to break.

A non-trivial example: suppose the pseudo-random stream is generated
by a linear congruential pseudo-random number generator, that is
x(n+1)=a*x(n)+b mod M.  There are a number of papers on how to break
such ciphers with a known plaintext attack, including one by Knuth.
The methods vary according to which, if any, of a, b and M are known
to the attacker, and also according to whether the x(i) are rounded
off before being used in the stream.  I am currently struggling to
understand a 1984 paper by Friese, Kannan, and Lagarias in the 1984
IEEE Symposium on the Foundations of Computer Science (FOCS),
which supposedly explains one of the algorithms.  There are many
references to related papers in the bibliography, and also in
a 1987 paper by Stern and a 1982 paper by Plumstead in the same journal.

I might be able to explain how to deal with the case where b=0, M and a
are known, and less than half the bits of the x(i) are rounded away.
I haven't reduced the algorithm to tested code, though, so I might
not understand even this case.  It certainly looks like even M=2**1024
with the bottom 256 bits rounded away should be pretty routine.
(Given 2*768 bits of plaintext, so that one immediately knows the
high 768 bits of two successive x(i).  The period here may be 2**1022)

In general, a one-time pad is completely secure if the key has
independent, random, uniformly distributed bits.  If the pad has some
redundancy, but not much, this may tell the analyst that some plaintexts
are more likely than others, although perhaps in a useless way.
If the pad is constructed with a pseudo-random number generator, then
the whole key stream is completely determined by relatively few bits
and the security entirely depends on the analyst being unable to solve
for these bits or estimate them from message statistics.
