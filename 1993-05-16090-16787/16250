Newsgroups: sci.crypt,alt.privacy.clipper
Path: msuinfo!agate!linus!linus.mitre.org!linus!mbunix!eachus
From: eachus@spectre.mitre.org (Robert I. Eachus)
Subject: Re: Who watches the watchers?
In-Reply-To: koontzd@phobos.lrcs.loral.com's message of Fri, 30 Apr 1993 19:31:17 GMT
Message-ID: <EACHUS.93May3140525@spectre.mitre.org>
Sender: news@linus.mitre.org (News Service)
Nntp-Posting-Host: spectre.mitre.org
Organization: The Mitre Corp., Bedford, MA.
References: <1993Apr30.193117.26615@wdl.loral.com>
Date: Mon, 3 May 1993 19:05:25 GMT
Lines: 81
Xref: msuinfo sci.crypt:16250 alt.privacy.clipper:305

In article <1993Apr30.193117.26615@wdl.loral.com> koontzd@phobos.lrcs.loral.com (David Koontz ) writes:

   >this came from anon ftp csrc.ncsl.nist.gov /pub/nistnews?
   >          a.   Encrypts the 80-bit session key under the unit key
   >               producing an 80-bit intermediate result;

   This worries me. How do you encode an 80-bit value in 80-bits using
an algorithm which encodes 64-bit blocks?  At the least this means
that there are two algorithms involved.

   >          b.   Concatenates the 80-bit result with the 25-bit
   >               serial number and a 23-bit authentication pattern
   >               (total of 128 bits);

   And this blows the scheme out of the water.  There is NO way to
verify that these bits are not usable to reduce the search space for
keys.  (80-23=57, Hmmm!  What have people been saying recently about
DES and 56-bit keys?)  In fact, if these bits serve their intended
purpose, they must provide additional information about the key.

   So access to the LEF (one 80-bit widely shared family key) is
probably all that is needed to access all messages sent by any phone
in that family.  So management of family keys is crucial to the
scheme.  How many can a single chip handle?  Who manages them, and
how?  But I don't care.  Without knowing the encoding of the
autentication field, there is no security possible.  With it known,
the scheme fails for other reasons.

   >          e.   The two communicating CLIPPER chips use this field
   >               together with a random IV to establish
   >               Cryptographic Synchronization.

   Whoa!  Unless all this means is arbitration of family key, it
implies that the phone on the other end can make use of the encoded
data in the LEF.  If it can't read the encoded 80-bit session key (it
already knows the value, but doesn't know the encryption key), then it
must be able to validate the 23-bit authentication pattern given the
session key and the serial number of the other chip.

   The authentication pattern can't be based on the encoded session
key value since that would allow spoofing with complete impugnity. It
must be derived from the (clear) session key value.  Again, I
conclude that the authentication field reduces the search space to
manageable size.

  > The family key is not fixed in silicon other than by programming.
  > The implication is that there can be more than one family key.

    Yup!  There are two possibilities here.

   1) The chip contains and negotiates among several family keys as
part of the session key selection process.  This can be done with
zero-knowledge type techniques where no information about the
available keys (or even the existance of additional keys) is visible
to someone who doesn't have that key.

   This would allow new family keys to be added each year, and any two
phones would use the most recent (or most secure) that they both know.

   2) Various government agencies plan to use unique family keys not
otherwise available to poor taxpaying schmucks.  The publicly
available phones will use a single, widely known family key.

  > Want to take odds the politicos use a system untappable?  How come
  > the phrase "If your not cop, you're little people." comes to mind?  

  See above.

   > This has a smell similar to congress exempting itself from OSHA and
   > darn near everything else.

   Similar, but I seem to see Congress being lumped in with the other
schmucks on this one.

--

					Robert I. Eachus

with Standard_Disclaimer;
use  Standard_Disclaimer;
function Message (Text: in Clever_Ideas) return Better_Ideas is...
