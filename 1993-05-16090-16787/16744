Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!spool.mu.edu!uunet!nntp.telebit.com!phr
From: phr@telebit.com (Paul Rubin)
Subject: Re: untrusted time servers
Message-ID: <C7r2Fv.F8K@telebit.com>
Sender: news@telebit.com
Nntp-Posting-Host: napa
Organization: Telebit Corporation; Sunnyvale, CA, USA
References: <gradyC7qqtq.Ex@netcom.com>
Date: Fri, 28 May 1993 18:38:18 GMT
Lines: 56

grady@netcom.com (1016/2EF221) writes:

>On the issue of how to obtain an authenticated
>time-stamp on a document using servers of variable
>trust -- one correspondent wrote:

>>No, there's a much better solution that doesn't need trusted servers.
>>See the Stornetta/Haber article.

>I haven't seen the article yet, but with the minimal assumptions
>that

>(1) There are no time servers that are trusted;
>(2) Any or all of the time servers may be working in concert

>Is does seem hard to imagine how you could get a valid time-stamp.
>("valid" in the context of the conditions above means that you
>can obtain a time-stamp(s) with arbitrary high probability that it
>matches a golden time-standard that you can only occasionally check.)

The granularity of the Haber/Stornetta scheme depends on the frequency
of an external event.  I described the scheme in detail in a post here
a few months ago.  I don't feel like typing that much again but will
describe something comparable.

Say you have a (non-trusted) server.  Every time you want to timestamp
a document, you send a cryptographic hash (checksum) of the file to
the server.  The server appends the hash value to today's
"certificate" file.  At the end of the day, the server computes a hash
X of the certificate file and irrevocably publishes X (e.g., as a
classified ad in a national newspaper).  It also sends you a copy of
the certificate file at the end of the day or archives it somewhere
that you can retrieve it from.  Since the certificate file contains
the hash of your document, your document must have existed before the
certificate file was created; and since the certificate file's hash
was published in the paper (nobody can go around and collect all the
copies of the paper and change them), the cert. file must have existed
before that day's edition of the paper.  Thus, you can "prove" that
your document existed on the day the paper was published (not to the
minute or anything like that).

The above method is slightly inconvenient because of the size of the
certificate file.  If the server stamps a million documents a day, you
need a multi-megabyte file to certify your document.  Haber and
Stornetta came up with a clever scheme to make the certificates short
(size proportional to the log of the # of documents) but it is
basically just an improvement on the above scheme.  They have a server
running that timestamps to one week granularity, as they publish the
hash X in the "business and commercial announcements" classified ad
section of every Sunday's New York Times.

In a certain sense, a trusted server (the New York Times and its
distribution system) is involved; but compromising the server would
involve a massive operation of retrieving the newspaper from every
library in the world, etc.; this is much more difficult than any kind
of breach of computer security.
