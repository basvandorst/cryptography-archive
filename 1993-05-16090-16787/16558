Newsgroups: sci.crypt
Path: msuinfo!uwm.edu!cs.utexas.edu!sdd.hp.com!col.hp.com!csn!hellgate.utah.edu!lanl!newshost!dar
From: dar@viking.lanl.gov (David Rabson)
Subject: some naive questions
Message-ID: <DAR.93May17192623@viking.lanl.gov>
Sender: news@newshost.lanl.gov
Organization: Los Alamos National Laboratory, NM
Date: Tue, 18 May 1993 02:26:23 GMT
Lines: 52


I have been wondering (not very seriously) about two elementary points
of crypotgraphy; these questions are not addressed in the list of
frequently-asked questions, although they probably are simple to
anyone familiar with the theory.  Forgive me for not reading the
textbooks.

First, what is a practical way to get a large number, say a gigabyte
worth, of random numbers for use in a one-time pad?  I think shot
noise, radioactive sources, and other physical methods are too slow
(that is, the time-time correlation functions on them are too long).
Computer newsgroup traffic, on the other hand, is too predictable.
Flames don't have much entropy.  The best solution I could think of
was a pseudo-random number generator to be reseeded every 256 bytes
(say) with some XOR of newsgroup traffic.  If I'm really paranoid
about my random-number generator, I could then use a second sequence
of random numbers to scramble the order of the bytes in a block.
Specifically, as I begin a virgin block of 256 bytes, I take the
auxilliary pseudo-random number, n0, between 0 and 255, and place the
random number I intend for the pad in position n0 of the block.  The
next number goes in according to the next auxilliary pseudo-random
number, n1, in position n1 mod 255 excluding the position already
occupied, etc.

This brings me to the second naive question.  Let's say I and my
colleague share a reasonable-length key, long enough to rule out
brute-force searching but short enough to remember and type in.  If we
used just this key as a seed for a pseudo-random-number generator,
XORing the pseudo-random numbers with the plain text, the code would
fall immediately if someone else got a hold of a piece of plain text
or if we used the same key on two different texts.  So at the top of
each message we send, we include a (clear) random number of
approximately the same length as the secret key.  The seed for the
pseudo-random number generator is the XOR of the secret key, which we
use over and over, and the random number, which is different for each
message.  The code will still fall to someone who understands the
statistical properties of the pseudo-random number generator.
Therefore, we modify the encryption.  Now, only some of the bytes out
of the generator are XORed with the text; the rest are used to
scramble the order of the resulting encrypted text in 1024-byte blocks.
We can pad the end of the last block with random numbers.  We may have
to use a unique identifier of the end of the real transmission, which
will reduce the entropy of the rest of the text, but I doubt this will
be a real problem.

My guess is that there is a well-known theorem that scrambling the
order of encrypted bytes maps on to, and so is no more secure than,
XORing in the usual way.  It is not obviously true, however.  What are
the advantages and disadvantages of this kind of scrambling?



