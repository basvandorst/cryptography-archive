Path: msuinfo!agate!howland.reston.ans.net!noc.near.net!nic.umass.edu!twain.ucs.umass.edu!not-for-mail
From: quilty@twain.ucs.umass.edu (Lulu of the lotus-eaters)
Newsgroups: sci.crypt
Subject: Re: Rubber-hose-resistant crypto file system
Date: 20 May 1993 12:21:12 -0400
Organization: University of Massachusetts - Amherst
Lines: 74
Message-ID: <1tgb5oINNgtg@twain.ucs.umass.edu>
References: <1tdjpjINNkk1@hal.com> <pooka.737847508@access>
NNTP-Posting-Host: twain.ucs.umass.edu
Keywords: cryptographic file system, notebook computer

In article <pooka.737847508@access> pooka@access.digex.net (Louis Emmet Mahoney) writes:
>howard@hal.com (Howard Gayle) writes:

>>I sketch the design of an encrypted file system for a notebook
>>computer.  The system allows for the use of multiple keys.  If
>>only some of the keys are known, then only the files encrypted
>>with those keys are accessible.  Files encrypted with unknown
.....[details deleted].....

>Neat idea, but once it is known it is only resistant to the efforts of
>very naive hosemen.  If this method is known to be available, the
>competent hoseman could/should presume it to be in use when the index of
>suspicion is sufficiently high, and reapply the hose if the plaintext
>resulting from use of the first, second,... nth keys is benign. 

The "hoseman" doesn't have a perfect knowledge of what it is that is
actually there to be found, in most instances.  Part of the
cryptographic system would have to be making the first level plaintext
be moderately plausible as the full text, and the second-level
plaintext incrementally more plausible still, and so on.  If the first
level is simply repeated verses of "Mary had a little lamb" then it'll
be clear that something remains hidden.  But if the first level
plaintext (I'm assuming the passwords are organized linearly by degree
of secrecy) contains info on 5 human-rights activists whom the gov't
already knows about, it's not entirely implausible that that's what's
on the disk, even if *really* there is info on 15 others whom the
gov't doesn't know about.  Or similarly, if the first-level notes say,
"Activist X would not reveal the date to me" -- while nth-level notes
say, "X reported the date as May 1" -- plausibility is maintained for
the first (or n-1) level notes being the real ones.

However, assuming that the "hoseman" is indifferent to the political
consequences of torturing the password holder indefinitely, I can
think of an additional precaution which could be taken.  Besides the
positive passwords ('first', 'second', 'third', etc) which reveal
various pieces of information, create a negative password which
destroys all information not explicitly approved by positive
passwords.  I.e. the journalist could reveal the passwords 'first'
'second' and 'erase' -- when these were entered, the data for 'first'
and 'second' would be revealed, but al information not in 'first' or
'second' would be scrambled.  One way to do this would be simply to
have a one-way encrypted version of the negative password stored on
disk in a specific location.  The decryption driver would check each
block for the passwords 'first' and 'second', but if any password had
matched the negative password block, then all blocks not positively
accessed would have garbage data written to their header.
	This method is imperfect, however.  If the enemy has perfect
knowledge of how the system works, then she can check the one-way
encryption of every password *before* it is tried on the actual
machine in question.  And if any such encryption matches the negative
password block, then the enemy will know that a negative password had
been given (and hence that more information is probably hidden... and
hence that more rubber-hose cryptography can be used).  It might be
better to make negative passwords ordinary passwords which are
encrypted to block headers, but then have the driver look for a
certain 'ERASE' message at a location within each encrypted block.  If
it finds such an accessible encrypted message, then it will procede
with scrambling as I suggest above.  This way, encryption of passwords
beforehand will reveal that the negative password really is a valid
password to a given block -- but that information won't reveal any
actual plaintext until it is used on the actual machine in question.
But once it is used on the actual encrypted disk, the 'ERASE' massage
thus revealed will scramble all data not positive-passworded.  This
might not be quite perfect, since the enemy could duplicate the whole
disk, before trying passwords -- so it would have further to be
disguised whether an 'ERASE' message was found in a decrypted block.
I'll let others work this out further.

Yours, Lulu (the adjuster)...
-- 
      _/_/_/ THIS MESSAGE WAS BROUGHT TO YOU BY: Postmodern Enterprises _/_/_/ 
     _/_/    ~~~~~~~~~~~~~~~~[quilty@philos.umass.edu]~~~~~~~~~~~~~~~~~  _/_/ 
    _/_/  The opinions expressed here must be those of my employer...   _/_/ 
   _/_/_/_/_/_/_/_/_/_/ Surely you don't think that *I* believe them!  _/_/ 
