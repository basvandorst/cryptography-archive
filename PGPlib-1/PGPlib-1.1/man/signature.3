.\"                                                                   
.\" Filename:      signature.3
.\" Description:   
.\" Author:        Tage Stabell-Kulo <tage@acm.org>
.\" Modified at:   Mon Dec  8 01:49:58 1997
.\" Modified by:   Tage Stabell-Kuloe <tage@acm.org>
.\" 	
.\" 	Copyright (c) Univerity of Tromsø, Norway
.\" 	See the file COPYING for details
.\"                                                                   


.Dd May 17, 1997
.Dt SIGNATURE 3
.Os PGPlib
.Sh NAME
.Nm signature
.Nd routines to manipulate signatures
.Sh SYNOPSIS
.Fd #include <pgplib.h>
.Ft int
.Fn signature2buf "PGPsig_t *sig" "u_char **buf"
.Ft int
.Fn buf2signature "u_char *buf" "int len" "PGPsig_t *sig"
.Ft void
.Fn free_signature "PGPsig_t *sig"
.Ft int
.Fn make_sig "u_char *buf" "int len" "u_char class" "PGPseckey_t *key" "PGPsig_t *sig"
.Ft int
.Fn sign_buffer "u_char *buf" "int len" "PGPseckey_t *key" "PGPsig_t *sig"
.Ft int
.Fn verify_sig "u_char *data" "int len" "PGPsig_t *sig" "PGPpubkey_t
*key"
.Ft int
.Fn verify_keysig "PGPpubkey_t *pubkey" "PGPuserid_t *uid" "PGPsig_t *sig" "PGPpubkey_t *signkey"
\.
.Sh DESCRIPTION
These routines manipulate signatures (regardless of type).
.Fn signature2buf
and
.Fn buf2signature
operate on a package compatible with RFC1991.  
The size of the buffer returned by the former can be found with
.Fn get_packetlen .
.Fn free_signature
only frees the internal state (and not the space occupied by the
structure itself).
.Pp
Informally, the routines
.Fn make_sig
and
.Fn sign_buffer
will "sign" the data in 
.Fa buf .
.Pp
More presicely, a hash will be created of
.Fa len
bytes of data from
.Fa buf 
together with 
.Fa class
and some other information (see 
.Fa RFC1991 
for details).  This hash is
then encrypted with the key
.Fa key
and the resulting data (the signature) stored in
.Fa sig .
The secret components of the key must be decrypted.
.Fn sign_buffer 
will call
.Fn make_sig
with 
.Fa class
set to 0x00 (document signature, binary image; again see 
.Fa RFC1991 
for details).
.Pp
The routine 
.Fn verify_sig
will create a hash of
.Fa len
bytes of data from
.Fa data ,
encrypt the hash with the public key
.Fa key
and compare the result with the signature in
.Fa sig .
.Fn verify_keysig
will verify a special case of buffer, namely a key-userid binding.
The string representing a user-id stored in
.Fa uid
is concatenated to the public key
.Fa pubkey .
A signature is generated with the key
.Fa signkey
and teh result is compared to the sigature stored in
.Fa sig.
\.
.Sh RETURN VALUES
Upon success 0 is returned.  If an error occurs, -1 is returned.
.Fn buf2signature
will return 1 if there is a syntax error in the input.
.Fn verify_signature 
will return 1 if the signature can-not be verified.
\.
.Sh SEE ALSO
.Xr decrypt_seckey PGPlib
.Xr free 3
.Xr get_packetlen PGPlib
.Xr malloc 3
.Xr PGPlib 3
\.
.Sh BUGS
Regarding 
.Fn verify_signature ,
an interesting question is: What if the digests are identical but
the checksums are different?
Since I don't know the answer, I don't known what to do if this
turns out to be the case so it is ignored (suggestions are most
welcome). 
\.
.Sh STANDARDS
All p[ackets are in accordance with
.Fa RFC1991 .
Encryption is performed according to 
.Fa RFC1425 
with the
ASN string as described in 
.Fa RFC1423 .

\.
.Sh HISTORY
Written by Tage Stabell-Kulø.  First appeared in PGPlib 0.1
