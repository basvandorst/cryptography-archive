.\"                             -*- Mode: Nroff -*- 
.\"                                                                    
.\" Filename:      armor.3
.\" Description:   
.\" Author:        Tage Stabell-Kulo <tage@acm.org>
.\" Modified at:   Wed Dec 10 17:30:05 1997
.\" Modified by:   Tage Stabell-Kuloe <tage@acm.org>
.\" (C) 1997 Tage Stabell-Kulø, all rights reserved.
.\"
.\" 
.Dd November 8 1997
.Dt ARMOR 3
.Os PGPlib
.Sh NAME
.Nm armor
.Nd routines to (de)armor
.Sh SYNOPSIS
.Fd #include <pgplib.h>
.Ft int
.Fn armor_buffer "u_char *ibuf" "int ilen" "int *used" "char **obuf" "int *olen"
.Ft int
.Fn armor_file "FILE *in" "FILE *out"
.Ft int
.Fn dearmor_buffer "char *ibuf" "long ilen" "int *used" "char **obuf" "int *olen" 
.Ft int
.Fn dearmor_file "FILE *in" "FILE *out"
.Ft int
.Fn read_armored_package "FILE *in" "char **obuf" "int *olen" 
.Ft int
.Fn pemDecode "char *in" "u_char *out" "int *outlen"
.Ft int
.Fn pemEncode "u_char *in" "int inlen" "char *out" "int *outlen"
\.
.Sh DESCRIPTION
These routines provides an interface to the "armored" format specified
by 
.Fa RFC1991 .
.Pp
The routines 
.Fn armor_buffer
and
.Fn dearmor_buffer
will armor (and dearmor, repsectively) the data in 
.Fa ibuf
(which is 
.Fa ilen
bytes long) and write the result in the memory pointed to by
.Fa obuf .
In all cases. the memory pointed to by
.Fa obuf
is (at least) 
.Fa olen
bytesand has been allocated by means of 
.Fn malloc .
The caller must free it.
Regarding the routines operating on files, in all cases the file
.Fa in
must be open for reading, while the file
.Fa out
must be opened for writing.
\.
.Pp
.Fn pemEncode 
will encode an arbritrary buffer stored in
.Fa in
(
.Fa lnlen
bytes long) and store the result,
.Fa outlen
bytes worth of data) in
.Fa out .
.Fn pemDecode
will decode a zero terminated string stored in
.Fa in
and store the result 
(
.Fa outlen
bytes worth of data) in 
.Fa out .
All buffers must be allocated by the caller.
Encoding stores three bytes of (binary) data into four characters,
while decoding packs four characters into three bytes.
It follows that 
.Fn pemDecode 
must not be called to decode less than four characters
(pluss a terminating zero).
.Fn pemEncode msu not be called to encode less than three bytes; if
less than thre bytes are available, the rest, up to the minimum of
three, should be chould be set to 0 (zero).
\.
.Sh RETURN VALUES
If successful all routines return 0, upon error, -1 is returned.
The routines
.Fn dearmor_file
and
.Fn dearmor_buffer
and 
.Fn read_armored_packag
will all return 1 if the input was not recognized.
\.
.Sh BUGS
.Fn armor_buffer
should only armor PGP compatible packets.  In these cases 
.Fa used
might be smaller than 
.Fa len .
However, at present, it will armor anything and thus consume the
entire buffer.
.Sh SEE ALSO
.Xr fopen 3
.Xr free 3
.Xr malloc 3
.Xr PGPlib 3
\.
.Sh HISTORY
Written by Peter Gutmann, Tage Stabell-Kulø and Magne Rassmussen.
First appeared in PGPlib 0.1.
.Sh STANDARDS
The resulting package is compatible with RFC1991.  Encoding (and
decoding) of binary data is according to RFC1113.
