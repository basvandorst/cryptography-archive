Newsgroups: sci.crypt
Path: msuinfo!uchinews!linac!uwm.edu!cs.utexas.edu!uunet!newsgate.watson.ibm.com!yktnews!admin!wo0z!lwloen
From: lwloen@rchland.vnet.ibm.com (Larry Loen)
Subject: Re: Cyphers and secure random number generators
Sender: news@rchland.ibm.com
Message-ID: <1992Dec03.185212.22337@rchland.ibm.com>
Date: Thu, 03 Dec 1992 18:52:12 GMT
Reply-To: lwloen@rchland.vnet.ibm.com
Disclaimer: This posting represents the poster's views, not necessarily those of IBM
References:  <Bynwpv.L1B@dcs.ed.ac.uk>
Nntp-Posting-Host: wo0z.rchland.ibm.com
Organization: IBM Rochester
Lines: 66

In article <Bynwpv.L1B@dcs.ed.ac.uk>, pdc@dcs.ed.ac.uk (Paul Crowley) writes:
|> Can any cypher be used to generate a secure random number generator by
|> encrypting the output of a normal RNG?  Or does the very high redundancy
|> of the normal RNG provide too strong a lever against the cypher?
|> 
|> I ask because the idea of encyphering my text before I write it appeals
|> to me...
|>   __                                _____
|> \/ o\ Paul Crowley pdc@dcs.ed.ac.uk \\ //
|> /\__/ "I'm the boy without a soul."  \X/


Yes, but it doesn't add much security compared to the encryption system
itself.  Consider the following example.

Suppose I generate a "key stream" by a "random number generator" of the
form -- Ax+C Mod M  where M is 2**64, A is 1 and C is 1 and x is the 
most recent "seed" of the RNG.

This, of course, give a key stream that is merely the sequence seed, seed+1, 
seed+2. . .and isn't very random, but bear with me.  Now, the stream is
created eight bytes at a time, but is used in the "obvious" way a byte at
a time against the input to produce the output and is recovered on the
other end in the same way.  Everything except the initial value of "seed", 
A, and C are known to the opponent.

Now suppose we improve the system by taking the output of the above 
function and super-encrypt each 8 bytes in DES
using some key, k.  The resulting keystream is now:

   DES(seed,k) DES(seed+1,k) DES(seed+2,k). . .  

and it may be random, but (more importantly) is "cryptographically 
unpredictable" which is more important than randomness, per se.
The key to the overall cipher is: <k,seed,A,C>, with M being fixed
as a practical matter.

However, such a "keystream" really depends entirely on DES for its
security.  Suppose an opponent is able to predect 16 consecutive bytes
of the plaintext on an 16 byte boundary.  Suppose further that DES is
breakable (perhaps, more realistically, because someone revealed the value
of k at the corner bar). 

In that case, XORing the two known plaintexts would, after DES with k 
was applied, reveal the values. . .seed+x, seed+x+1, and this would 
reveal at once the values of A and C mod M.

But, even if A and C were set to nontrivial values that satisfied the
statistical tests for randomness, it would take only a little bit of
algebra to recover A and C at the same point.

Thus, if a "normal" RNG is a poor encryption, super-encrypting it in a
better system depends largely on the strength of the system chosen, because
this decomposition will always be available if done in this manner.
Moreover, the quality of randomness of the RNG really has very little to
do with the security of the cipher stream.  Both key streams are about 
equally vulnerable to analysis in this example, because the RNG, as a 
cipher, is so weak.

There is also the rare danger that the RNG, taken together with the
encryption system, is jointly a weaker system.  This does not happen
often, but cannot be dismissed out of hand.

-- 
   Larry W. Loen        |  My Opinions are decidedly my own, so please
                        |  do not attribute them to my employer
