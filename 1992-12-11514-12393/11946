Xref: msuinfo sci.crypt:11946 alt.security.pgp:601
Path: msuinfo!uchinews!linac!pacific.mps.ohio-state.edu!zaphod.mps.ohio-state.edu!cs.utexas.edu!uunet!noc.near.net!transfer.stratus.com!ellisun.sw.stratus.com!cme
From: cme@ellisun.sw.stratus.com (Carl Ellison)
Newsgroups: sci.crypt,alt.security.pgp
Subject: Re: PGP v. 2.1 Released
Date: 15 Dec 1992 16:48:33 GMT
Organization: Stratus Computer, Software Engineering
Lines: 30
Message-ID: <1gl291INN5dm@transfer.stratus.com>
References: <1992Dec10.185107.10925@netcom.com> <1992Dec10.230553.2029@samba.oit.unc.edu> <101547@netnews.upenn.edu>
NNTP-Posting-Host: ellisun.sw.stratus.com

In article <101547@netnews.upenn.edu> yee@mipg.upenn.edu (Conway Yee) writes:
>>Would it be possible to to devise a public key
>>encryption program that would, when used to encrypt a message with
>>someone's private key, emit a series of bytes that would appear to be
>>essentially random?  
>
>If a series of bytes were to be random, no message could possibly be
>encoded within it.

Sorry, but this is nonsense.  (also sorry if my reply is redundant with
others - -  my news feed is a bit delayed lately)


If a modern ciphertext is detectably non-random, then the encryption
algorithm is *broken*.

I haven't proved that if you detect a statistical non-randomness then you
have a means of breaking the cipher, but I wouldn't be surprised if such a
proof were done.  I have seen similar proofs.

Meanwhile, if you have a totally random stream of bytes, you can use it
as a one-time pad, encrypting a message within it, and the resulting
ciphertext is a totally random stream of bytes.  This one I can prove
-- and so can you -- assuming you discard the original random stream.

-- 
-- <<Disclaimer: All opinions expressed are my own, of course.>>
-- Carl Ellison						cme@sw.stratus.com
-- Stratus Computer Inc.	M3-2-BKW		TEL: (508)460-2783
-- 55 Fairbanks Boulevard ; Marlborough MA 01752-1298	FAX: (508)624-7488
