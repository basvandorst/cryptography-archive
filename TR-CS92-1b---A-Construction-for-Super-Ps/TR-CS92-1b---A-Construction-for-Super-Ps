
If | Prob {DC2n [G3; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |> _1__nc2, G3
would not be pseudorandom, since the D-distinguishing circuit would
not be an identity_test._This contradicts Lemma 3. Furthermore, if
| Prob {DC2n [G3; G 1] = 1} - Prob {DC2n [G3; G3] = 1} |> _1__nc2, then the
oracle circuit virtually distinguishes f1 from a randomly chosen function.
This also contradicts our assumption that f1 is a pseudorandom     __
function. Since both cases conclude to contradictions, then G3 and G 1
should be independent of each other,_and there would be no
D-distinguishing circuit for (G 1; G3).
Considering the independency of G2 and G3, it is given that


      | Prob {DC2n [G2; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |< _1__nc2


Note that G2 and G3 are not inverse of each other, so the
D-distinguishing circuit cannot be a test for inversion. Without changing
the sign of inequality, the above relation can be expanded as,

                        __                          __
      | Prob {DC2n [G1; G 1] = 1} - Prob {DC2n [G1; G 1] = 1}       +
                        __                          __
       Prob  {DC2n [G3; G 1] = 1} - Prob {DC2n [G3; G 1] = 1}       +

    Prob  {DC2n [G2; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |      <   _1__nc2


With reordering and separation of absolute values, we get:

                                                   __
     || Prob {DC2n [G2; G3] = 1} - Prob {DC2n [G3; G 1] = 1} |       -
                        __                          __
      | Prob {DC2n [G3; G 1] = 1} - Prob {DC2n [G1; G 1] = 1} |      -
                     __                                                    1
   | Prob {DC2n [G1; G 1] = 1} - Prob {DC2n [P2n ; P2n ] = 1} ||     <   ____nc2


Since, it was assumed that G2 and_G3 are two independent
permutations, and so are G3 and G 1, then    __
| Prob {DC2n [G2; G3] = 1} - Prob {DC2n [G3; G 1] = 1} | would be less
than _1__nc2, since

                                                   __
     || Prob {DC2n [G2; G3] = 1} - Prob {DC2n [G3; G 1] = 1} |

    | Prob {DC2n [G2; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |     +
                      __                                                  1
    | Prob {DC2n [G3; G 1] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |    <    ____nc2


Hence

                       __
     | Prob {DC2n [G1; G 1] = 1} - Prob {DC2n [Pn ; Pn ] = 1} |    +
                       __                          __                    1
     | Prob {DC2n [G3; G 1] = 1} - Prob {DC2n [G1; G 1] = 1} |     <    ____nc2
                                       13


So, each of the above absolute values would be less than _1__nc2. In other
words

                        __                                           1
      | Prob {DC2n [G1; G 1] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |< ____nc2

             __
Hence G1 and G 1 are independent of each other, and G1 is a super
pseudorandom permutation.                                               2

The above lemmas and theorem show that when the number of oracle
gates m is a polynomial of n then the probability of making a circuit
which distinguishes G2 = _(f2; 1; f1; f2; 1) from G3 = _(f1; 1; f2; f1; 1) is
less than 1 over any polynomial in n, and the probability of making a
super distinguishing circuit for G1 = _(f2; 1; f1) O _(f2; 1; f1) is also less
than 1 over any polynomial in n. In other words, G1 is secure against
chosen plaintext / ciphertext attack if the cryptanalyst is permitted to
access to only a polynomial number of queries.


4.2    Super  Pseudorandomness  of  _(f 2; 1; f; f 2; 1; f )

In the above relations, an upper bound on the probabilities has been
defined, where f1 and f2 are two independently chosen pseudorandom
functions. In the following lemmas and theorem, we show that if f2 is
substituted with f12 , there would be an increase of the upper bound of
the above probabilities of distinguishing. Nevertheless, if the number of
oracles would be limited to some polynomial in n, the corresponding
probabilities of distinguishing would remain less than 1 over any
polynomial in n.

Lemma  5   Let  f; h 2r Hn  and  C2n  be  a  distinguishing  circuit
with  m < 2n  oracle  gates,  then

                                                                               2
| Prob {C2n [_(f 2; 1; f; f 2; 1)] = 1}-Prob {C2n [_(h; 1; f; h; 1)] = 1} |  2m*
 *___2n



Proof  :  Since both f and h can be considered as two sequences of 2n
independent and uniformly distributed n-bit random variables, for an
argument a 2  n , f (a) and h(a) are two independent n-bit strings.
When the input to an oracle is (L k R) and the oracle is evaluated with
_(h; 1; f; h; 1), each branches of the outputs, i.e., S and T , is always a
sum of two random variables generated by the functions f and h. That is


 S   =   L   R   f (L   h(L   R))   h(R   h(L   R)   f (L   h(L   R)))

T    =   R   h(L   R)   f (L   h(L   R))


                                       14




           Figure 3: X, Y  and Z random variables in G2 and G2



where all the random variables Yi = f (Li   h(Li   Ri)) are independent
from random variables

            Xj    =   h(Lj   Rj)

             Zj   =   h(Rj   h(Lj   Rj)   f (Lj   h(Lj   Rj)))

When the input to an oracle is (L k R) and the oracle is evaluated with
_(f 2; 1; f; f 2; 1), each branch of the output, i.e., S and T , is always a
sum of two random variables generated by the function f . That is

S    =   L   R   f (L   f 2(L   R))   f 2(R   f 2(L   R)   f (L   f 2(L   R)))

T    =   R   f 2(L   R)   f (L   f 2(L   R))

If R = 0

           S   =   L   f (L   f 2(L))   f 2(f 2(L)   f (L   f 2(L)))

           T   =   f 2(L)   f (L   f 2(L))

If L = 0

               S    =   R   f 3(R))   f 2(R   f 2(R)   f 3(R))

               T    =   R   f 2(L   R)   f (L   f 2(L   R))



                                       15


If L = 0 and R = 0

                      S   =    f 3(0)   f 2(f 2(0)   f 3(0))

                      T   =    f 2(0)   f 3(0)

Either all the oracle gates are evaluted with _(f 2; 1; f; f 2; 1) or all the
oracle gates are evaluated with _(h; 1; f; h; 1) a distinguisher generates
"1" on its output with the same probability, if all the random variables
Yi = f (Li   f 2(Li   Ri)) are independent from random variables

          Xj    =    f 2(Lj   Rj)

           Zj   =    f 2(Rj   f 2(Lj   Rj)   f (Lj   f 2(Lj   Rj)))

In other words, a distinguisher with m oracle gates generates "1" on its
output when there is one oracle gate Oi such that fii the input value to
the random function f is equal to either of
                 ae

           fii =    ff(Lj(R Rj)  2                      2
                           j   f  (Lj   Rj)   f (Lj   f  (Lj   Rj)))

for some j = 1; : :;:m. The probability that in a given oracle the input
to the f function takes a value equal to any of 2m internal random
values in m oracle gates with different inputs is 2m_2n. The probability that
a circuit distinguishes _(f 2; 1; f; f 2; 1) from _(h; 1; f; h; 1) is equal to *
 *the
probability that two of the oracles generate dependant random variables.
Hence
                                                                               2
| Prob {C2n [_(f 2; 1; f; f 2; 1)] = 1}-Prob {C2n [_(h; 1; f; h; 1)] = 1} |  2m*
 *___2n


The probability of distinguishing _(h; 1; f; h; 1) from a random
permutation was given in Lemma 2, as a result an upper bound on the
overall probability of distinguishing G2 = _(f 2; 1; f; f 2; 1) from a random
permutation is

                                                            2      m2
         | Prob {C2n [G2] = 1} - Prob {C2n [P2n ] = 1} |  3m___2n+ ____22n


where m < 2n is the number of oracle gates. Hence, when the
distinguisher is bounded by a polynomial number of oracle gates the
probability of distinguishing _(f 2; 1; f; f 2; 1) from a random permutation
is less than 1 over any polynomial in n.                                  2


Lemma  6   Let  f; h 2r Hn  and  C2n  be  a  distinguishing  circuit
with  m < 2n  oracle  gates,  then

                                                                               2
| Prob {C2n [_(f; 1; f 2; f; 1)] = 1} - Prob {C2n [_(f; 1; h; f; 1)] = 1} |  2m*
 *___2n
                                       16


Proof  :  A proof similar to the proof of Lemma 5 can be given here.
When the input to an oracle is (L k R) and the oracle is evaluated with
_(f; 1; f 2; f; 1), each branch of the output, i.e., S and T , is always a sum
of two random variables generated by the function f . That is

S    =   L   R   f 2(L   f (L   R))   f (R   f (L   R)   f 2(L   f (L   R)))

T    =   R   f (L   R)   f 2(L   f (L   R))

If R = 0

            S   =   L   f 2(L   f (L))   f (f (L)   f 2(L   f (L)))

            T   =   f (L)   f 2(L   f (L))

If L = 0

                 S   =   R   f 3(R))   f (R   f (R)   f 3(R))

                T    =   R   f (R)   f 3(R)

If L = 0 and R = 0

                       S   =    f 3(0)   f (f (0)   f 3(0))

                       T   =    f (0)   f 3(0)

Either all the oracle gates are evaluted with _(f; 1; f 2; f; 1) or all the
oracle gates are evaluated with _(f; 1; h; f; 1) a distinguisher generates
"1" on its output with the same probability, if all the random variables
Yi = f 2(Li   f (Li   Ri)) are independent from random variables

            Xj   =    f (Lj   Rj)

            Zj   =    f (Rj   f (Lj   Rj)   f 2(Lj   f (Lj   Rj)))

In other words, a distinguisher with m oracle gates generates "1" on its
output when there is one oracle gate Oi such that the input value to the
random function f is equal to f (Lj   f (Lj   Rj)) for some j = 1; : :;:m.
As in each oracle, f have been used in two different layers, the
probability that in a given oracle, fii the input to the f functions takes a
value equal to any of m internal random values Yi, i.e., output of f 2
layer in m oracle gates with different inputs, is 2m_2n. The probability that
a circuit distinguishes _(f; 1; f 2; f; 1) from _(f; 1; h; f; 1) is equal to the
probability that two of the oracles generate dependant random variables.
Hence
                                                                               2
| Prob {C2n [_(f; 1; f 2; f; 1)] = 1} - Prob {C2n [_(f; 1; h; f; 1)] = 1} |  2m*
 *___2n


The probability of distinguishing _(f; 1; h; f; 1) from a random
permutation was given in Lemma 3, as a result an upper bound on the



                                       17


overall probability of distinguishing G3 = _(f; 1; f 2; f; 1) from a random
permutation is

                                                           2      m2
         | Prob {C2n [G3] = 1 - Prob {C2n [P2n ] = 1} |  3m___2n+ ____22n


where m   2n is the number of oracle gates. Hence, when the
distinguisher is bounded by a polynomial number of oracle gates the
probability of distinguishing _(f; 1; f 2; f; 1) from a random permutation
is less than 1 over any polynomial in n.                                  2



Theorem  3   Let  f 2r Fn  be  a  pseudorandom  function,  then
G1 = _(f 2; 1; f; f 2; 1; f )  is  a  super  pseudorandom  permutation.



Proof  Sketch:  To prove that G1 is a super pseudorandom permutation
generator, we may first show that G2 = _(f 2; 1; f; f 2; 1) and
G3 = (f; 1; f 2; f; 1) are independent of each other. As it was shown in
Lemma 5 and Lemma 6, in a D-distinguishing circuit when the input to
an oracle is (L k R) and the oracle is evaluated with _(f 2; 1; f; f 2; 1), the
output is


S    =   L   R   f (L   f 2(L   R))   f 2(R   f 2(L   R)   f (L   f 2(L   R)))

T    =   R   f 2(L   R)   f (L   f 2(L   R))


and when the oracle is evaluated with _(f; 1; f 2; f; 1), the output is


S0   =    L   R   f 2(L   f (L   R))   f (R   f (L   R)   f 2(L   f (L   R)))

T 0  =    R   f (L   R)   f 2(L   f (L   R))


The six random variables involved are:


              X2   =    f 2(L   R)

              Y2   =    f (L   f 2(L   R))

              Z2   =    f 2(R   f 2(L   R)   f (L   f 2(L   R)))


and


               X3   =    f (L   R)

               Y3   =    f 2(L   f (L   R))

               Z3   =    f (R   f (L   R)   f 2(L   f (L   R)))


S, T , S0 and T 0are always a sum of two random variables generated by
the function f . If a random variable in a output branch of an oracle
becomes dependent on a random variable in any output branch of



                                       18


another oracle, the other random variables are always independent of
each other. For example, if X2 be equal to X3, the probability that Y2
be equal to Y3 is _1_2n. Likewise, if Y2 = Y3, the probability that Z2 = Z3
is _1_2n. Hence, the probability of dependency of two branches is equal to
 1__
 2n, which is equal to the dependency of two output branches in two
different oracle gates when instead of f 2an independent random
function such as h was applied. Here, we calculate an upper bound on
the independency probability. As it was shown earlier in Lemma 5 that
_(f 2; 1; f; f 2; 1) and _(h; 1; f; h; 1) are indistinguishable from each other,
and it was shown in Theorem 2 that _(h; 1; f; h; 1) and _(f; 1; h; f; 1) are
independent of each other, and it was shown in Lemma 6 that
_(f; 1; h; f; 1) and _(f; 1; f 2; f; 1) are indistinguishable from each other.
The probability that there would be a D-distinguishing circuit for G2
and G3 can be written as:


      | Prob {DC2n [G2; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |< _1__nc2

The above probability statement can be expanded as,

          |  Prob  {DC2n [G2; G3] = 1} - Prob {DC2n [G2; G3] = 1}

         +   Prob  {DC2n [G2; G3] = 1} - Prob {DC2n [G2; G3] = 1}

         +   Prob  {DC2n [G2; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |

where G2 = _(h; 1; f; h; 1) and G3 = _(f; 1; h; f; 1). With reordering and
separation of absolute values, we get:

        |   | Prob {DC2n [G2; G3] = 1} - Prob {DC2n [G2; G3] = 1} |

        +   | Prob {DC2n [G2; G3] = 1} - Prob {DC2n [G2; G3] = 1} |

        +   | Prob {DC2n [G3; G3] = 1} - Prob {DC2n [P2n ; P2n ] = 1} ||

If the sum of the above probabilities is less than 1 over any polynomial
in n, then G2 and G3 would essentially be independent of each other
according to the definition. When f; h 2r Hn , with applying procedures
similar to the proofs of Lemma 5, Lemma 62and Lemma 3, it can be
shown that the first term is less than 2m__2n, and the second term is less
       2                                     m2     m2
than 2m__2n, and the third term is less than ___2n+ ____22n, respectively. So, *
 *the
sum of these three probabilities, makes a bound on the probability for
making a D-distinguishing2circuit2with m oracle gates for G2 and G3,
which is 5m__2n+ m___22n. When there are a polynomial number of oracle
gates, i.e., m is a polynomial in n, then


      | Prob {DC2n [G3; G2] = 1} - Prob {DC2n [P2n ; P2n ] = 1} |< _1__nc2

With applying a proof similar to the proof of Theorem 2, it can be shown
that when G2 and G3 are independent, G1 is super pseudorandom.      2
                                       19


5   Conclusions  and  Open  Problems


We have shown that it is possible to construct a super pseudorandom
permutation generators applying a single pseudorandom function. We
took advantage of the stucture of optimal perfect randomizer, presented
in [3 ]. We first showed that _(h; 1; f; h; 1; f ) is a super pseudorandom
permtation. Then, we showed that by substituting f 2instead of h, the
probability of making a distinguisher still would remain less than 1 over
any polynomial in n. Although, such a block cryptosystem is less than
practical, it can be seen as an attempt towards a construction of
practical ones which are provably secure against chosen plaintext /
ciphertext attack without relying on any unproven hypothesis. If a
cryptosystem is super pseudorandom it can be applied as a hashing
algorithm, where it is assured that a cryptanalyst cannot find a collision
without trying at least 2n different messages. Two open problems can be
posed from the result of this paper. The structure applies 6 rounds of
DES-like permutations. The first open problem is whether the proposed
structure is an optimal structure, and whether any other structure can
be suggested which needs less number of rounds. It can be seen that
_(f; f 2; f; f; f ) is a good candidate, but we have not got a justification
for this claim yet. The second open problem is whether the proposed
structure can be adopted to improve the quality of existing
cryptosystems such as DES or LOKI against differential cryptanalysis
without a need for redesigning their S boxes.


References


[1] O. Goldreich, S. Goldwasser, and S. Micali. How to construct
    random functions. Journal  of  the  ACM, 33(4):792-807, 1986.

[2] Michael Luby and Charles Rackoff. How to Construct Pseudorandom
    Permutations from Pseudorandom Functions. SIAM  Journal  on
    Computing, 17(2):373-386, 1988.

[3] J. Pieprzyk and B. Sadeghiyan. Optimal perfect randomizers. In
    Abstracts  of  ASIACRYPT  '91, pages 130-135, 1991.

[4] Josef Pieprzyk. How to Construct Pseudorandom Permutations from
    Single Pseudorandom Functions. In Advances  in  Cryptology  -
    EUROCRYPT  '90, volume 473 of Lecture  Notes  in  Computer
    Science, pages 140-150. Springer-Verlag, 1991.

[5] B. Sadeghiyan and J. Pieprzyk. On necessary and sufficient
    conditions for the construction of super pseudorandom permutations.
    In Abstracts  of  ASIACRYPT  '91, pages 117-123, 1991.
                                       20


[6] A. C. Yao. Theory and applications of trapdoor functions. In the
    23rd  IEEE  Symposium  on  the  Foundations  of  Computer
    Science, pages 80-91, 1982.



                                       21

